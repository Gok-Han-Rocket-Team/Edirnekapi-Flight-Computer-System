
hal_uartdeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08009f70  08009f70  00019f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a530  0800a530  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a538  0800a538  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a538  0800a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a53c  0800a53c  0001a53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000190  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee81  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021cd  00000000  00000000  0002f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00031268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  00031fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022717  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fcc4  00000000  00000000  00055337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd022  00000000  00000000  00064ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013201d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fec  00000000  00000000  00132070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f54 	.word	0x08009f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009f54 	.word	0x08009f54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <bufferEkle>:
uint8_t GP[] = "$GPGGA,";
int sayac = 0;
int diziSayac = 0;
int durum = 0;

void bufferEkle(uint8_t veri){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]

	if(sayac == 7){
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <bufferEkle+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b07      	cmp	r3, #7
 8001008:	d117      	bne.n	800103a <bufferEkle+0x42>
		if(veri == '\r'){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b0d      	cmp	r3, #13
 800100e:	d109      	bne.n	8001024 <bufferEkle+0x2c>
			diziSayac = 0;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <bufferEkle+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
			sayac = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <bufferEkle+0x70>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
			durum = 1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <bufferEkle+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
			sayac++;
		else
			sayac = 0;
	}

}
 8001022:	e01a      	b.n	800105a <bufferEkle+0x62>
			dizi[diziSayac] = veri;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <bufferEkle+0x74>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4912      	ldr	r1, [pc, #72]	; (8001074 <bufferEkle+0x7c>)
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	54ca      	strb	r2, [r1, r3]
			diziSayac++;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <bufferEkle+0x74>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <bufferEkle+0x74>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	e00f      	b.n	800105a <bufferEkle+0x62>
		if(veri == GP[sayac])
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <bufferEkle+0x70>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <bufferEkle+0x80>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	429a      	cmp	r2, r3
 8001046:	d105      	bne.n	8001054 <bufferEkle+0x5c>
			sayac++;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <bufferEkle+0x70>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a06      	ldr	r2, [pc, #24]	; (8001068 <bufferEkle+0x70>)
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	e002      	b.n	800105a <bufferEkle+0x62>
			sayac = 0;
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <bufferEkle+0x70>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000204 	.word	0x20000204
 800106c:	20000208 	.word	0x20000208
 8001070:	2000020c 	.word	0x2000020c
 8001074:	200002f0 	.word	0x200002f0
 8001078:	20000000 	.word	0x20000000

0800107c <bufferDurum>:
int bufferDurum()
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	if(durum)
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <bufferDurum+0x24>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <bufferDurum+0x16>
	{
		durum = 0;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <bufferDurum+0x24>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
		return 1;
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <bufferDurum+0x18>
	}
	else
		return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000020c 	.word	0x2000020c

080010a4 <zamanAyikla>:
* @param 	yeni: 		Gps bilgilerini tutan yapinin adresi.
* 			zaman:		Zaman verisinin tutuldugu dizi.
* @retval 	GPS_RTRN: 	Ayiklama hata kodu.
*/
static GPS_RTRN zamanAyikla(gps* yeni, uint8_t* zaman)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	int uzunluk = strlen((char*) zaman);
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f7ff f88e 	bl	80001d0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	617b      	str	r3, [r7, #20]
	if(uzunluk != 9){
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b09      	cmp	r3, #9
 80010bc:	d001      	beq.n	80010c2 <zamanAyikla+0x1e>
		return GPS_ERR_ZAMAN;
 80010be:	2340      	movs	r3, #64	; 0x40
 80010c0:	e081      	b.n	80011c6 <zamanAyikla+0x122>
	}

	uint8_t saat[3] = {'\0'};
 80010c2:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <zamanAyikla+0x12c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	823b      	strh	r3, [r7, #16]
 80010c8:	2300      	movs	r3, #0
 80010ca:	74bb      	strb	r3, [r7, #18]
	uint8_t dakika[3] = {'\0'};
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <zamanAyikla+0x12c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	81bb      	strh	r3, [r7, #12]
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
	uint8_t saniye[3] = {'\0'};
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <zamanAyikla+0x12c>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	813b      	strh	r3, [r7, #8]
 80010dc:	2300      	movs	r3, #0
 80010de:	72bb      	strb	r3, [r7, #10]

	int isaretci;
	for(isaretci = uzunluk; zaman[isaretci] != '.' && isaretci != 0; isaretci--);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	e002      	b.n	80010ec <zamanAyikla+0x48>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b2e      	cmp	r3, #46	; 0x2e
 80010f6:	d002      	beq.n	80010fe <zamanAyikla+0x5a>
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f3      	bne.n	80010e6 <zamanAyikla+0x42>
	if(isaretci == 0)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <zamanAyikla+0x64>
		return GPS_ERR_ZAMAN;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	e05e      	b.n	80011c6 <zamanAyikla+0x122>

	isaretci--;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	3b01      	subs	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]

	for(int i = isaretci; isaretci - i != 6; i--){
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	e037      	b.n	8001184 <zamanAyikla+0xe0>
		if(i > isaretci - 2)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	3b01      	subs	r3, #1
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	429a      	cmp	r2, r3
 800111c:	db0c      	blt.n	8001138 <zamanAyikla+0x94>
			saniye[i - isaretci + 1] = zaman[i];
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	441a      	add	r2, r3
 8001124:	69b9      	ldr	r1, [r7, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	1acb      	subs	r3, r1, r3
 800112a:	3301      	adds	r3, #1
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	3320      	adds	r3, #32
 8001130:	443b      	add	r3, r7
 8001132:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001136:	e022      	b.n	800117e <zamanAyikla+0xda>
		else if(i > isaretci - 4)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3b03      	subs	r3, #3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	429a      	cmp	r2, r3
 8001140:	db0c      	blt.n	800115c <zamanAyikla+0xb8>
			dakika[i - isaretci + 3] = zaman[i];
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	441a      	add	r2, r3
 8001148:	69b9      	ldr	r1, [r7, #24]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	3303      	adds	r3, #3
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	3320      	adds	r3, #32
 8001154:	443b      	add	r3, r7
 8001156:	f803 2c14 	strb.w	r2, [r3, #-20]
 800115a:	e010      	b.n	800117e <zamanAyikla+0xda>
		else if(i > isaretci - 6)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3b05      	subs	r3, #5
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	429a      	cmp	r2, r3
 8001164:	db0b      	blt.n	800117e <zamanAyikla+0xda>
			saat[i - isaretci + 5] = zaman[i];
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	441a      	add	r2, r3
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	3305      	adds	r3, #5
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	3320      	adds	r3, #32
 8001178:	443b      	add	r3, r7
 800117a:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(int i = isaretci; isaretci - i != 6; i--){
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	3b01      	subs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b06      	cmp	r3, #6
 800118c:	d1c2      	bne.n	8001114 <zamanAyikla+0x70>
	}
	yeni->saat = atoi((char*) saat);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fd1b 	bl	8004bce <atoi>
 8001198:	4603      	mov	r3, r0
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	701a      	strb	r2, [r3, #0]
	yeni->dakika = atoi((char*) dakika);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fd12 	bl	8004bce <atoi>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	705a      	strb	r2, [r3, #1]
	yeni->saniye = atoi((char*) saniye);
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fd09 	bl	8004bce <atoi>
 80011bc:	4603      	mov	r3, r0
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	709a      	strb	r2, [r3, #2]

	return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08009f70 	.word	0x08009f70

080011d4 <konumAyikla>:
* @param 	yeni: 		Gps bilgilerini tutan yapinin adresi.
* 			konum:		Konum verisinin tutuldugu dizi.
* @retval 	GPS_RTRN: 	Ayiklama hata kodu.
*/
static GPS_RTRN konumAyikla(gps* yeni, uint8_t* konum)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	//enlem hata ayikla
	//boylam hata duzenle.

	GPS_RTRN donut = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

	//enlem yon
	if(strlen((char*) konum + 11 * 2) != 1 || (*(konum + 11 * 2) != 'N' && *(konum + 11 * 2) != 'S')){
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3316      	adds	r3, #22
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe fff2 	bl	80001d0 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d109      	bne.n	8001206 <konumAyikla+0x32>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3316      	adds	r3, #22
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b4e      	cmp	r3, #78	; 0x4e
 80011fa:	d009      	beq.n	8001210 <konumAyikla+0x3c>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3316      	adds	r3, #22
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b53      	cmp	r3, #83	; 0x53
 8001204:	d004      	beq.n	8001210 <konumAyikla+0x3c>
		donut |= GPS_ERR_ENLYON;
 8001206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800120e:	e003      	b.n	8001218 <konumAyikla+0x44>
	}
	else{
		yeni->enlemYon = *(konum + 11 * 2);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	7d9a      	ldrb	r2, [r3, #22]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	70da      	strb	r2, [r3, #3]
	}

	//boylam yon
	if(strlen((char*) konum + 11 * 4) != 1 || (*(konum + 11 * 4) != 'E' && *(konum + 11 * 4) != 'W')){
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	332c      	adds	r3, #44	; 0x2c
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe ffd7 	bl	80001d0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d109      	bne.n	800123c <konumAyikla+0x68>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	332c      	adds	r3, #44	; 0x2c
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b45      	cmp	r3, #69	; 0x45
 8001230:	d009      	beq.n	8001246 <konumAyikla+0x72>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	332c      	adds	r3, #44	; 0x2c
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b57      	cmp	r3, #87	; 0x57
 800123a:	d004      	beq.n	8001246 <konumAyikla+0x72>
			donut |= GPS_ERR_BYLYON;
 800123c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001244:	e004      	b.n	8001250 <konumAyikla+0x7c>
	}
	else{
		yeni->boylamYon = *(konum + 11 * 4);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	711a      	strb	r2, [r3, #4]
	}

	int i = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28

	//enlem

	uint8_t enlemBayrak = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(strlen((char*) konum + 11) != 9){
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	330b      	adds	r3, #11
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffb6 	bl	80001d0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	2b09      	cmp	r3, #9
 8001268:	d007      	beq.n	800127a <konumAyikla+0xa6>
		donut |= GPS_ERR_ENL;
 800126a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	85fb      	strh	r3, [r7, #46]	; 0x2e
		enlemBayrak = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001278:	e017      	b.n	80012aa <konumAyikla+0xd6>
	}
	else{
		for(i = 0; *(konum + 11 + i) != '.'; i++){
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
 800127e:	e00d      	b.n	800129c <konumAyikla+0xc8>
			if(i > 6){
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	2b06      	cmp	r3, #6
 8001284:	dd07      	ble.n	8001296 <konumAyikla+0xc2>
				donut |= GPS_ERR_ENL;
 8001286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	85fb      	strh	r3, [r7, #46]	; 0x2e
				enlemBayrak = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001294:	e009      	b.n	80012aa <konumAyikla+0xd6>
		for(i = 0; *(konum + 11 + i) != '.'; i++){
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	3301      	adds	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	330b      	adds	r3, #11
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b2e      	cmp	r3, #46	; 0x2e
 80012a8:	d1ea      	bne.n	8001280 <konumAyikla+0xac>
			}
		}
	}

	if(enlemBayrak){
 80012aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d050      	beq.n	8001354 <konumAyikla+0x180>
		uint8_t dereceEnl[4] = {0};
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
		dereceEnl[4] = '\0';
 80012b6:	2300      	movs	r3, #0
 80012b8:	743b      	strb	r3, [r7, #16]
		float enlem = 0.0;
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

		for(int j = i - 3; j >= 0; j--)
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	3b03      	subs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	e00f      	b.n	80012e8 <konumAyikla+0x114>
			dereceEnl[j - i + 4] = *(konum + 11 + j);
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	330b      	adds	r3, #11
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	441a      	add	r2, r3
 80012d0:	6a39      	ldr	r1, [r7, #32]
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	1acb      	subs	r3, r1, r3
 80012d6:	3304      	adds	r3, #4
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	3330      	adds	r3, #48	; 0x30
 80012dc:	443b      	add	r3, r7
 80012de:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(int j = i - 3; j >= 0; j--)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	daec      	bge.n	80012c8 <konumAyikla+0xf4>

		enlem = atof((char*) dereceEnl);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fc68 	bl	8004bc8 <atof>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc72 	bl	8000be8 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	617b      	str	r3, [r7, #20]
		enlem += atof((char*) (konum + 11 + i - 2)) / 60.0;
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3309      	adds	r3, #9
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fc59 	bl	8004bc8 <atof>
 8001316:	ec51 0b10 	vmov	r0, r1, d0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <konumAyikla+0x284>)
 8001320:	f7ff fa94 	bl	800084c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	461d      	mov	r5, r3
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff f90b 	bl	8000548 <__aeabi_f2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7fe ffa7 	bl	800028c <__adddf3>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc4f 	bl	8000be8 <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	617b      	str	r3, [r7, #20]

		yeni->enlem = enlem;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	609a      	str	r2, [r3, #8]
	}

	//boylam
	uint8_t boylamBayrak = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	77fb      	strb	r3, [r7, #31]
	if(strlen((char*) konum + 33) != 10){
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3321      	adds	r3, #33	; 0x21
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe ff37 	bl	80001d0 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	2b0a      	cmp	r3, #10
 8001366:	d006      	beq.n	8001376 <konumAyikla+0x1a2>
		donut |= GPS_ERR_BYL;
 8001368:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		boylamBayrak = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	e016      	b.n	80013a4 <konumAyikla+0x1d0>
	}
	else{
		for(i = 0; *(konum + 33 + i) != '.'; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
 800137a:	e00c      	b.n	8001396 <konumAyikla+0x1c2>
			if(i > 6){
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	2b06      	cmp	r3, #6
 8001380:	dd06      	ble.n	8001390 <konumAyikla+0x1bc>
				donut |= GPS_ERR_BYL;
 8001382:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	85fb      	strh	r3, [r7, #46]	; 0x2e
				boylamBayrak = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	77fb      	strb	r3, [r7, #31]
				break;
 800138e:	e009      	b.n	80013a4 <konumAyikla+0x1d0>
		for(i = 0; *(konum + 33 + i) != '.'; i++){
 8001390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001392:	3301      	adds	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
 8001396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001398:	3321      	adds	r3, #33	; 0x21
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b2e      	cmp	r3, #46	; 0x2e
 80013a2:	d1eb      	bne.n	800137c <konumAyikla+0x1a8>
			}
		}
	}

	if(boylamBayrak){
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d050      	beq.n	800144c <konumAyikla+0x278>
		uint8_t dereceByl[4] = {0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]

		dereceByl[4] = '\0';
 80013ae:	2300      	movs	r3, #0
 80013b0:	733b      	strb	r3, [r7, #12]
		float boylam = 0.0;
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]

		for(int j = i - 3; j >= 0; j--)
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	3b03      	subs	r3, #3
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	e00f      	b.n	80013e0 <konumAyikla+0x20c>
			dereceByl[j - i + 5] = *(konum + 33 + j);
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	3321      	adds	r3, #33	; 0x21
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	69b9      	ldr	r1, [r7, #24]
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	1acb      	subs	r3, r1, r3
 80013ce:	3305      	adds	r3, #5
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	3330      	adds	r3, #48	; 0x30
 80013d4:	443b      	add	r3, r7
 80013d6:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(int j = i - 3; j >= 0; j--)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3b01      	subs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	daec      	bge.n	80013c0 <konumAyikla+0x1ec>

		boylam = atof((char*) dereceByl);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fbec 	bl	8004bc8 <atof>
 80013f0:	ec53 2b10 	vmov	r2, r3, d0
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbf6 	bl	8000be8 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]
		boylam += atof((char*) (konum + 33 + i - 2)) / 60.0;
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	331f      	adds	r3, #31
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fbdd 	bl	8004bc8 <atof>
 800140e:	ec51 0b10 	vmov	r0, r1, d0
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <konumAyikla+0x284>)
 8001418:	f7ff fa18 	bl	800084c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	6938      	ldr	r0, [r7, #16]
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe ff2b 	bl	800028c <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbd3 	bl	8000be8 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	613b      	str	r3, [r7, #16]

		yeni->boylam = boylam;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	60da      	str	r2, [r3, #12]
	}

	return donut;
 800144c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800144e:	4618      	mov	r0, r3
 8001450:	3730      	adds	r7, #48	; 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	bf00      	nop
 8001458:	404e0000 	.word	0x404e0000

0800145c <irtifa_uyduSAyikla>:
* 			irtifa:		Irtifa verisinin tutuldugu dizi.
* 			uyduS:		Uydu sayisi verisinin tutuldugu dizi.
* @retval 	GPS_RTRN: 	Ayiklama hata kodu.
*/
static GPS_RTRN irtifa_uyduSAyikla(gps* yeni, uint8_t* irtifa, uint8_t* uyduS)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	uint8_t irtifaUzunluk = strlen((char*) irtifa);
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f7fe feb1 	bl	80001d0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	757b      	strb	r3, [r7, #21]
	uint8_t uyduSUzunluk = strlen((char*) uyduS);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7fe feac 	bl	80001d0 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	753b      	strb	r3, [r7, #20]
	uint16_t donut = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	82fb      	strh	r3, [r7, #22]

	if(irtifaUzunluk > 0 && irtifaUzunluk < 9)
 8001480:	7d7b      	ldrb	r3, [r7, #21]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00f      	beq.n	80014a6 <irtifa_uyduSAyikla+0x4a>
 8001486:	7d7b      	ldrb	r3, [r7, #21]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d80c      	bhi.n	80014a6 <irtifa_uyduSAyikla+0x4a>
		yeni->irtifa = atof((char*) irtifa);
 800148c:	68b8      	ldr	r0, [r7, #8]
 800148e:	f003 fb9b 	bl	8004bc8 <atof>
 8001492:	ec53 2b10 	vmov	r2, r3, d0
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fba5 	bl	8000be8 <__aeabi_d2f>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	e003      	b.n	80014ae <irtifa_uyduSAyikla+0x52>
	else{
		donut |= GPS_ERR_IRTFA;
 80014a6:	8afb      	ldrh	r3, [r7, #22]
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	82fb      	strh	r3, [r7, #22]
	}

	if(uyduSUzunluk > 0 && uyduSUzunluk < 3)
 80014ae:	7d3b      	ldrb	r3, [r7, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d017      	beq.n	80014e4 <irtifa_uyduSAyikla+0x88>
 80014b4:	7d3b      	ldrb	r3, [r7, #20]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d814      	bhi.n	80014e4 <irtifa_uyduSAyikla+0x88>
			yeni->irtifa = atof((char*) irtifa);
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	f003 fb84 	bl	8004bc8 <atof>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb8e 	bl	8000be8 <__aeabi_d2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	611a      	str	r2, [r3, #16]
	else{
			return (donut | GPS_ERR_UYDUS);
	}
		yeni->uyduS = (uint8_t) atoi((char*) uyduS);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f003 fb7b 	bl	8004bce <atoi>
 80014d8:	4603      	mov	r3, r0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	715a      	strb	r2, [r3, #5]

	return donut;
 80014e0:	8afb      	ldrh	r3, [r7, #22]
 80014e2:	e003      	b.n	80014ec <irtifa_uyduSAyikla+0x90>
			return (donut | GPS_ERR_UYDUS);
 80014e4:	8afb      	ldrh	r3, [r7, #22]
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	b29b      	uxth	r3, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <gpsBaslat>:
* 						Bu fonksiyon gps kutuphanesini baslatir.
* @param 	yeni: 		Gps bilgilerini tutan yapinin adresi.
* 			gpsTambon:	GPGGA verilerinin bulundugu tamponun adresi.
* @retval 	GPS_RTRN: 	Ayiklama hata kodu.
*/
void gpsBaslat(gps* yeni, uint8_t* gpsTampon){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	tampon = gpsTampon;
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <gpsBaslat+0x58>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6013      	str	r3, [r2, #0]
	yeni->boylam = 0.0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
	yeni->enlem = 0.0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
	yeni->boylamYon = 'x';
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2278      	movs	r2, #120	; 0x78
 8001518:	711a      	strb	r2, [r3, #4]
	yeni->enlemYon = 'x';
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2278      	movs	r2, #120	; 0x78
 800151e:	70da      	strb	r2, [r3, #3]
	yeni->saat = 0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
	yeni->dakika = 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	705a      	strb	r2, [r3, #1]
	yeni->saniye = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	709a      	strb	r2, [r3, #2]
	yeni->irtifa = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
	yeni->uyduS = 0;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	715a      	strb	r2, [r3, #5]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20000260 	.word	0x20000260

08001550 <gpsAyikla>:
* @brief 	gpsAyikla
* 						Bu fonksiyon gps verilerini ayiklar.
* @param 	yeni: 		Gps bilgilerini tutan yapinin adresi.
* @retval 	none
*/
GPS_RTRN gpsAyikla(gps* yeni){
 8001550:	b580      	push	{r7, lr}
 8001552:	b0b4      	sub	sp, #208	; 0xd0
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	//10-*******
	//11-birim
	//12-konum yasi (s)
	//13-DGPS ID

	strcpy((char*)gpsBuf, (char*)tampon);
 8001558:	4b64      	ldr	r3, [pc, #400]	; (80016ec <gpsAyikla+0x19c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4864      	ldr	r0, [pc, #400]	; (80016f0 <gpsAyikla+0x1a0>)
 8001560:	f003 fff6 	bl	8005550 <strcpy>
	uint8_t veriler [14][11] = {'\0'};
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	229a      	movs	r2, #154	; 0x9a
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fb5d 	bl	8004c2c <memset>

	uint8_t* adres;
	adres = gpsBuf;
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <gpsAyikla+0x1a0>)
 8001574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	int k = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	for(int sayac = 0; sayac < 100 && adres[sayac] != '*'; sayac++){
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001584:	e011      	b.n	80015aa <gpsAyikla+0x5a>
		if(adres[sayac] == ',')
 8001586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800158a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b2c      	cmp	r3, #44	; 0x2c
 8001594:	d104      	bne.n	80015a0 <gpsAyikla+0x50>
			k++;
 8001596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800159a:	3301      	adds	r3, #1
 800159c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	for(int sayac = 0; sayac < 100 && adres[sayac] != '*'; sayac++){
 80015a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80015a4:	3301      	adds	r3, #1
 80015a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80015ae:	2b63      	cmp	r3, #99	; 0x63
 80015b0:	dc07      	bgt.n	80015c2 <gpsAyikla+0x72>
 80015b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80015b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b2a      	cmp	r3, #42	; 0x2a
 80015c0:	d1e1      	bne.n	8001586 <gpsAyikla+0x36>
	}

	if(k == 13){
 80015c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015c6:	2b0d      	cmp	r3, #13
 80015c8:	f040 8082 	bne.w	80016d0 <gpsAyikla+0x180>
		for(k = 0; *adres != '*'; k++){
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015d2:	e04d      	b.n	8001670 <gpsAyikla+0x120>
			adres = adres + (k > 0);
 80015d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bfcc      	ite	gt
 80015dc:	2301      	movgt	r3, #1
 80015de:	2300      	movle	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015e8:	4413      	add	r3, r2
 80015ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			int j = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for(j = 0; *adres != ',' && *adres != '*'; j++){
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80015fa:	e01b      	b.n	8001634 <gpsAyikla+0xe4>
				veriler[k][j] = *adres;
 80015fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001600:	7819      	ldrb	r1, [r3, #0]
 8001602:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	33d0      	adds	r3, #208	; 0xd0
 8001612:	19da      	adds	r2, r3, r7
 8001614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001618:	4413      	add	r3, r2
 800161a:	3bb0      	subs	r3, #176	; 0xb0
 800161c:	460a      	mov	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
				adres = adres + 1;
 8001620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001624:	3301      	adds	r3, #1
 8001626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			for(j = 0; *adres != ',' && *adres != '*'; j++){
 800162a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800162e:	3301      	adds	r3, #1
 8001630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b2c      	cmp	r3, #44	; 0x2c
 800163c:	d004      	beq.n	8001648 <gpsAyikla+0xf8>
 800163e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b2a      	cmp	r3, #42	; 0x2a
 8001646:	d1d9      	bne.n	80015fc <gpsAyikla+0xac>
			}
			veriler[k][j] = '\0';
 8001648:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	33d0      	adds	r3, #208	; 0xd0
 8001658:	19da      	adds	r2, r3, r7
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800165e:	4413      	add	r3, r2
 8001660:	3bb0      	subs	r3, #176	; 0xb0
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		for(k = 0; *adres != '*'; k++){
 8001666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800166a:	3301      	adds	r3, #1
 800166c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b2a      	cmp	r3, #42	; 0x2a
 8001678:	d1ac      	bne.n	80015d4 <gpsAyikla+0x84>
		}
		GPS_RTRN ZAMAN = zamanAyikla(yeni, veriler[0]);
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fd0f 	bl	80010a4 <zamanAyikla>
 8001686:	4603      	mov	r3, r0
 8001688:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
		GPS_RTRN KONUM = konumAyikla(yeni, (uint8_t*) &veriler[0][0]);
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fd9e 	bl	80011d4 <konumAyikla>
 8001698:	4603      	mov	r3, r0
 800169a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
		GPS_RTRN IRTIFA = irtifa_uyduSAyikla(yeni, veriler[8], veriler[6]);
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	f103 0242 	add.w	r2, r3, #66	; 0x42
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	3358      	adds	r3, #88	; 0x58
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fed4 	bl	800145c <irtifa_uyduSAyikla>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

		return ZAMAN | KONUM | IRTIFA;
 80016ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80016be:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	e008      	b.n	80016e2 <gpsAyikla+0x192>
	}
	else{
		uint8_t yazi[22];
		sprintf((char*)yazi, "HATA veri sayisi: %d", k);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80016d8:	4906      	ldr	r1, [pc, #24]	; (80016f4 <gpsAyikla+0x1a4>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 ff18 	bl	8005510 <siprintf>
//		HAL_UART_Transmit(&huart2, yazi, strlen(yazi), 20);
//		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 20);
		return GPS_ERR;
 80016e0:	2380      	movs	r3, #128	; 0x80
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 20);
	}
//println_int((int) checksum);
#endif

}
 80016e2:	4618      	mov	r0, r3
 80016e4:	37d0      	adds	r7, #208	; 0xd0
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000260 	.word	0x20000260
 80016f0:	20000210 	.word	0x20000210
 80016f4:	08009f74 	.word	0x08009f74

080016f8 <gpsYazdir>:
* 						Bu fonksiyon gps verilerini yazdirir.
* @param 	yeni: 		gps bilgilerini tutan yapinin adresi.
* @retval 	GPS_RTRN: 	ayiklama hata kodu.
*/
void gpsYazdir(gps* yeni)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
	uint8_t gecici[30];
	printer((uint8_t*)"\r\n\n*************************************\r\n\n");
 8001700:	4830      	ldr	r0, [pc, #192]	; (80017c4 <gpsYazdir+0xcc>)
 8001702:	f000 fa83 	bl	8001c0c <printer>
	sprintf((char*)gecici, "enlem = %f %c\r\n", yeni->enlem, yeni->enlemYon);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff1c 	bl	8000548 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	78c9      	ldrb	r1, [r1, #3]
 8001718:	f107 0008 	add.w	r0, r7, #8
 800171c:	9100      	str	r1, [sp, #0]
 800171e:	492a      	ldr	r1, [pc, #168]	; (80017c8 <gpsYazdir+0xd0>)
 8001720:	f003 fef6 	bl	8005510 <siprintf>
	printer(gecici);
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fa6f 	bl	8001c0c <printer>
	sprintf((char*)gecici, "boylam = %f %c\r\n", yeni->boylam, yeni->boylamYon);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	7909      	ldrb	r1, [r1, #4]
 8001740:	f107 0008 	add.w	r0, r7, #8
 8001744:	9100      	str	r1, [sp, #0]
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <gpsYazdir+0xd4>)
 8001748:	f003 fee2 	bl	8005510 <siprintf>
	printer(gecici);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fa5b 	bl	8001c0c <printer>
	sprintf((char*)gecici, "%u.%u.%u\r\n", yeni->saat, yeni->dakika, yeni->saniye);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	4619      	mov	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	789b      	ldrb	r3, [r3, #2]
 8001766:	f107 0008 	add.w	r0, r7, #8
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	460b      	mov	r3, r1
 800176e:	4918      	ldr	r1, [pc, #96]	; (80017d0 <gpsYazdir+0xd8>)
 8001770:	f003 fece 	bl	8005510 <siprintf>
	printer(gecici);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fa47 	bl	8001c0c <printer>
	sprintf((char*)gecici, "uydu sayisi = %u\r\n", yeni->uyduS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	461a      	mov	r2, r3
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4912      	ldr	r1, [pc, #72]	; (80017d4 <gpsYazdir+0xdc>)
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fec0 	bl	8005510 <siprintf>
	printer(gecici);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fa39 	bl	8001c0c <printer>
	sprintf((char*)gecici, "irtifa = %.2f\r\n", yeni->irtifa);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed2 	bl	8000548 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	f107 0008 	add.w	r0, r7, #8
 80017ac:	490a      	ldr	r1, [pc, #40]	; (80017d8 <gpsYazdir+0xe0>)
 80017ae:	f003 feaf 	bl	8005510 <siprintf>
	printer(gecici);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fa28 	bl	8001c0c <printer>
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	08009f8c 	.word	0x08009f8c
 80017c8:	08009fb8 	.word	0x08009fb8
 80017cc:	08009fc8 	.word	0x08009fc8
 80017d0:	08009fdc 	.word	0x08009fdc
 80017d4:	08009fe8 	.word	0x08009fe8
 80017d8:	08009ffc 	.word	0x08009ffc
 80017dc:	00000000 	.word	0x00000000

080017e0 <gpsHataYazdir>:
* 						Bu fonksiyon gps'te olusan hata verilerini yazdirir.
* @param 	hata: 		gps hata kodu.
* @retval 	none
*/
void gpsHataYazdir(GPS_RTRN hata)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b090      	sub	sp, #64	; 0x40
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
	uint8_t hataKodlari[8][6] = {"ENL", "BYL", "ENLYN", "BYLYN", "IRTIF", "UYDUS", "ZMN", "GPS"};
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <gpsHataYazdir+0x100>)
 80017ec:	f107 040c 	add.w	r4, r7, #12
 80017f0:	461d      	mov	r5, r3
 80017f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(hata > 0){
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d061      	beq.n	80018cc <gpsHataYazdir+0xec>
		HAL_UART_Transmit(&huart2, (uint8_t*) "HATA: ", 6, 10);
 8001808:	230a      	movs	r3, #10
 800180a:	2206      	movs	r2, #6
 800180c:	4935      	ldr	r1, [pc, #212]	; (80018e4 <gpsHataYazdir+0x104>)
 800180e:	4836      	ldr	r0, [pc, #216]	; (80018e8 <gpsHataYazdir+0x108>)
 8001810:	f002 f9a5 	bl	8003b5e <HAL_UART_Transmit>
		for(int i = 0; i<8; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001818:	e055      	b.n	80018c6 <gpsHataYazdir+0xe6>
		{
			if(((int)pow((float)2, (float)i) & hata) == pow(2, i)){
 800181a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001824:	ee17 0a90 	vmov	r0, s15
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	ec43 2b11 	vmov	d1, r2, r3
 8001834:	ed9f 0b28 	vldr	d0, [pc, #160]	; 80018d8 <gpsHataYazdir+0xf8>
 8001838:	f007 fc72 	bl	8009120 <pow>
 800183c:	ec53 2b10 	vmov	r2, r3, d0
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f988 	bl	8000b58 <__aeabi_d2iz>
 8001848:	4602      	mov	r2, r0
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	4013      	ands	r3, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe68 	bl	8000524 <__aeabi_i2d>
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
 8001858:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800185a:	f7fe fe63 	bl	8000524 <__aeabi_i2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ec43 2b11 	vmov	d1, r2, r3
 8001866:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80018d8 <gpsHataYazdir+0xf8>
 800186a:	f007 fc59 	bl	8009120 <pow>
 800186e:	ec53 2b10 	vmov	r2, r3, d0
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7ff f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01f      	beq.n	80018c0 <gpsHataYazdir+0xe0>
				HAL_UART_Transmit(&huart2, hataKodlari[i], strlen((char*) hataKodlari[i]), 20);
 8001880:	f107 010c 	add.w	r1, r7, #12
 8001884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	18cc      	adds	r4, r1, r3
 8001890:	f107 010c 	add.w	r1, r7, #12
 8001894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fc95 	bl	80001d0 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2314      	movs	r3, #20
 80018ac:	4621      	mov	r1, r4
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <gpsHataYazdir+0x108>)
 80018b0:	f002 f955 	bl	8003b5e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 10);
 80018b4:	230a      	movs	r3, #10
 80018b6:	2201      	movs	r2, #1
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <gpsHataYazdir+0x10c>)
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <gpsHataYazdir+0x108>)
 80018bc:	f002 f94f 	bl	8003b5e <HAL_UART_Transmit>
		for(int i = 0; i<8; i++)
 80018c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c2:	3301      	adds	r3, #1
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	2b07      	cmp	r3, #7
 80018ca:	dda6      	ble.n	800181a <gpsHataYazdir+0x3a>
			}
		}
	}
}
 80018cc:	bf00      	nop
 80018ce:	3740      	adds	r7, #64	; 0x40
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}
 80018d4:	f3af 8000 	nop.w
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40000000 	.word	0x40000000
 80018e0:	0800a018 	.word	0x0800a018
 80018e4:	0800a00c 	.word	0x0800a00c
 80018e8:	200002ac 	.word	0x200002ac
 80018ec:	0800a014 	.word	0x0800a014

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f6:	f000 fbdb 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fa:	f000 f845 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fe:	f000 f923 	bl	8001b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001902:	f000 f8f7 	bl	8001af4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001906:	f000 f8a7 	bl	8001a58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t a;
  HAL_UART_Receive_IT(&huart2, &a, 1);
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	4815      	ldr	r0, [pc, #84]	; (8001968 <main+0x78>)
 8001912:	f002 f9b6 	bl	8003c82 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001916:	4815      	ldr	r0, [pc, #84]	; (800196c <main+0x7c>)
 8001918:	f001 fc98 	bl	800324c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  gpsBaslat(&myGPS, dizi);
 800191c:	4914      	ldr	r1, [pc, #80]	; (8001970 <main+0x80>)
 800191e:	4815      	ldr	r0, [pc, #84]	; (8001974 <main+0x84>)
 8001920:	f7ff fde8 	bl	80014f4 <gpsBaslat>
  //HAL_UART_Transmit(&huart2, (uint8_t*)itoa(sizeof(zaman), buf, 10), 1, 100);
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(hataKodu > 0){
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <main+0x88>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d016      	beq.n	800195a <main+0x6a>
		  anlikZaman = HAL_GetTick();
 800192c:	f000 fc26 	bl	800217c <HAL_GetTick>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <main+0x8c>)
 8001936:	601a      	str	r2, [r3, #0]
		  if(anlikZaman - gecmisZaman > 100){
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <main+0x8c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <main+0x90>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	ddee      	ble.n	8001924 <main+0x34>
			  HAL_GPIO_TogglePin(GPIOD, ledR_Pin);
 8001946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <main+0x94>)
 800194c:	f000 ff7b 	bl	8002846 <HAL_GPIO_TogglePin>
			  gecmisZaman = anlikZaman;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <main+0x8c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <main+0x90>)
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e7e4      	b.n	8001924 <main+0x34>
		  }
	  }
	  else{
		  HAL_GPIO_WritePin(ledR_GPIO_Port, ledR_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <main+0x94>)
 8001962:	f000 ff57 	bl	8002814 <HAL_GPIO_WritePin>
	  if(hataKodu > 0){
 8001966:	e7dd      	b.n	8001924 <main+0x34>
 8001968:	200002ac 	.word	0x200002ac
 800196c:	20000264 	.word	0x20000264
 8001970:	200002f0 	.word	0x200002f0
 8001974:	20000340 	.word	0x20000340
 8001978:	2000035c 	.word	0x2000035c
 800197c:	20000354 	.word	0x20000354
 8001980:	20000358 	.word	0x20000358
 8001984:	40020c00 	.word	0x40020c00

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2230      	movs	r2, #48	; 0x30
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f948 	bl	8004c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <SystemClock_Config+0xc8>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <SystemClock_Config+0xc8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <SystemClock_Config+0xc8>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <SystemClock_Config+0xcc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <SystemClock_Config+0xcc>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <SystemClock_Config+0xcc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019f8:	2308      	movs	r3, #8
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019fc:	2364      	movs	r3, #100	; 0x64
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 ff35 	bl	800287c <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a18:	f000 f918 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 f998 	bl	8002d6c <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a42:	f000 f903 	bl	8001c4c <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	; 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000-1;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a7e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1013 - 1;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a8c:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8001a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001aa0:	f001 fb84 	bl	80031ac <HAL_TIM_Base_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aaa:	f000 f8cf 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001abc:	f001 fd3e 	bl	800353c <HAL_TIM_ConfigClockSource>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ac6:	f000 f8c1 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MX_TIM2_Init+0x98>)
 8001ad8:	f001 ff64 	bl	80039a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ae2:	f000 f8b3 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000264 	.word	0x20000264

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART2_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	f001 ffca 	bl	8003ac4 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f889 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002ac 	.word	0x200002ac
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_GPIO_Init+0xbc>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ledG_Pin|ledO_Pin|ledR_Pin|ledB_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_GPIO_Init+0xc0>)
 8001bba:	f000 fe2b 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ledG_Pin ledO_Pin ledR_Pin */
  GPIO_InitStruct.Pin = ledG_Pin|ledO_Pin|ledR_Pin;
 8001bbe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_GPIO_Init+0xc0>)
 8001bd8:	f000 fc80 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ledB_Pin */
  GPIO_InitStruct.Pin = ledB_Pin;
 8001bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ledB_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_GPIO_Init+0xc0>)
 8001bf6:	f000 fc71 	bl	80024dc <HAL_GPIO_Init>

}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020c00 	.word	0x40020c00

08001c0c <printer>:

/* USER CODE BEGIN 4 */
void printer(uint8_t* printerStr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
	for(i = 0; printerStr[i] != '\0'; i++);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e002      	b.n	8001c24 <printer+0x18>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3301      	adds	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f6      	bne.n	8001c1e <printer+0x12>
	HAL_UART_Transmit(&huart2, printerStr, i, 10);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	230a      	movs	r3, #10
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <printer+0x3c>)
 8001c3a:	f001 ff90 	bl	8003b5e <HAL_UART_Transmit>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002ac 	.word	0x200002ac

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	__disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d115      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_TIM_Base_MspInit+0x48>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_TIM_Base_MspInit+0x48>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_TIM_Base_MspInit+0x48>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f000 fb35 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce0:	201c      	movs	r0, #28
 8001ce2:	f000 fb4e 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_UART_MspInit+0x94>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d133      	bne.n	8001d7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_UART_MspInit+0x98>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_UART_MspInit+0x98>)
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_UART_MspInit+0x98>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x98>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_UART_MspInit+0x98>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0x98>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d4e:	230c      	movs	r3, #12
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <HAL_UART_MspInit+0x9c>)
 8001d6a:	f000 fbb7 	bl	80024dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2026      	movs	r0, #38	; 0x26
 8001d74:	f000 fae9 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d78:	2026      	movs	r0, #38	; 0x26
 8001d7a:	f000 fb02 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>
	...

08001d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da4:	4801      	ldr	r0, [pc, #4]	; (8001dac <HardFault_Handler+0x10>)
 8001da6:	f000 fd4e 	bl	8002846 <HAL_GPIO_TogglePin>
 8001daa:	e7f9      	b.n	8001da0 <HardFault_Handler+0x4>
 8001dac:	40020c00 	.word	0x40020c00

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f9b0 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_WritePin(ledB_GPIO_Port, ledB_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <TIM2_IRQHandler+0x50>)
 8001e04:	f000 fd06 	bl	8002814 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001e08:	4810      	ldr	r0, [pc, #64]	; (8001e4c <TIM2_IRQHandler+0x54>)
 8001e0a:	f001 fa8f 	bl	800332c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  	  if(bufferDurum())
 8001e0e:	f7ff f935 	bl	800107c <bufferDurum>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <TIM2_IRQHandler+0x2e>
  		  hataKodu = gpsAyikla(&myGPS);
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <TIM2_IRQHandler+0x58>)
 8001e1a:	f7ff fb99 	bl	8001550 <gpsAyikla>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <TIM2_IRQHandler+0x5c>)
 8001e24:	801a      	strh	r2, [r3, #0]
	gpsYazdir(&myGPS);
 8001e26:	480a      	ldr	r0, [pc, #40]	; (8001e50 <TIM2_IRQHandler+0x58>)
 8001e28:	f7ff fc66 	bl	80016f8 <gpsYazdir>
	gpsHataYazdir(hataKodu);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <TIM2_IRQHandler+0x5c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fcd5 	bl	80017e0 <gpsHataYazdir>
	HAL_GPIO_WritePin(ledB_GPIO_Port, ledB_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM2_IRQHandler+0x50>)
 8001e3e:	f000 fce9 	bl	8002814 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	20000264 	.word	0x20000264
 8001e50:	20000340 	.word	0x20000340
 8001e54:	2000035c 	.word	0x2000035c

08001e58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint8_t gelen;
	uint32_t isrflags   = READ_REG(huart2.Instance->SR);
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <USART2_IRQHandler+0x50>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
	uint32_t cr1its     = READ_REG(huart2.Instance->CR1);
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <USART2_IRQHandler+0x50>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)){
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00f      	beq.n	8001e98 <USART2_IRQHandler+0x40>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <USART2_IRQHandler+0x40>
		huart2.Instance->SR;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <USART2_IRQHandler+0x50>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
		gelen = huart2.Instance->DR;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <USART2_IRQHandler+0x50>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	71fb      	strb	r3, [r7, #7]
//		uint8_t gecici[10];
//		sprintf((char*) gecici, "%c", (int) gelen);
//		HAL_UART_Transmit(&huart2, gecici, strlen((char*) gecici), 10);
		bufferEkle(gelen);
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f8b0 	bl	8000ff8 <bufferEkle>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <USART2_IRQHandler+0x50>)
 8001e9a:	f001 ff23 	bl	8003ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002ac 	.word	0x200002ac

08001eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
	return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_kill>:

int _kill(int pid, int sig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ec6:	f002 fe87 	bl	8004bd8 <__errno>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2216      	movs	r2, #22
 8001ece:	601a      	str	r2, [r3, #0]
	return -1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_exit>:

void _exit (int status)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ffe7 	bl	8001ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eee:	e7fe      	b.n	8001eee <_exit+0x12>

08001ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00a      	b.n	8001f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	4601      	mov	r1, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf0      	blt.n	8001f02 <_read+0x12>
	}

return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e009      	b.n	8001f50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf1      	blt.n	8001f3c <_write+0x12>
	}
	return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_close>:

int _close(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_isatty>:

int _isatty(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <_sbrk+0x5c>)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <_sbrk+0x60>)
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <_sbrk+0x64>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <_sbrk+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ffc:	f002 fdec 	bl	8004bd8 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e009      	b.n	8002020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <_sbrk+0x64>)
 800201c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20020000 	.word	0x20020000
 800202c:	00000400 	.word	0x00000400
 8002030:	20000360 	.word	0x20000360
 8002034:	20000378 	.word	0x20000378

08002038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <SystemInit+0x20>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <SystemInit+0x20>)
 8002044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002062:	490e      	ldr	r1, [pc, #56]	; (800209c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002078:	4c0b      	ldr	r4, [pc, #44]	; (80020a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002086:	f7ff ffd7 	bl	8002038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f002 fdab 	bl	8004be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7ff fc2f 	bl	80018f0 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80020a0:	0800a540 	.word	0x0800a540
  ldr r2, =_sbss
 80020a4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80020a8:	20000378 	.word	0x20000378

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_Init+0x40>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_Init+0x40>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_Init+0x40>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 f92b 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fdb8 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f943 	bl	800239e <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 f90b 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000008 	.word	0x20000008
 800214c:	20000010 	.word	0x20000010
 8002150:	2000000c 	.word	0x2000000c

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000010 	.word	0x20000010
 8002178:	20000364 	.word	0x20000364

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000364 	.word	0x20000364

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff feda 	bl	800217c <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d008      	beq.n	80023e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e052      	b.n	800248e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0216 	bic.w	r2, r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <HAL_DMA_Abort+0x62>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0208 	bic.w	r2, r2, #8
 8002426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e013      	b.n	8002462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff fe9f 	bl	800217c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d90c      	bls.n	8002462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e015      	b.n	800248e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e4      	bne.n	800243a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00c      	b.n	80024ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e16b      	b.n	80027d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 815a 	bne.w	80027ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80b4 	beq.w	80027ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a5f      	ldr	r2, [pc, #380]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_GPIO_Init+0x310>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_GPIO_Init+0x314>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02b      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a51      	ldr	r2, [pc, #324]	; (80027f4 <HAL_GPIO_Init+0x318>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d025      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_GPIO_Init+0x31c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_GPIO_Init+0x320>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4e      	ldr	r2, [pc, #312]	; (8002800 <HAL_GPIO_Init+0x324>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x216>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	; (8002804 <HAL_GPIO_Init+0x328>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x212>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x20e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4b      	ldr	r2, [pc, #300]	; (800280c <HAL_GPIO_Init+0x330>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x20a>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026e6:	2308      	movs	r3, #8
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x228>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x228>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x310>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a32      	ldr	r2, [pc, #200]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_GPIO_Init+0x334>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_GPIO_Init+0x334>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_GPIO_Init+0x334>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_GPIO_Init+0x334>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <HAL_GPIO_Init+0x334>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae90 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	041a      	lsls	r2, r3, #16
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43d9      	mvns	r1, r3
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e267      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d075      	beq.n	8002986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	4b88      	ldr	r3, [pc, #544]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d00c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b85      	ldr	r3, [pc, #532]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d112      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028be:	d10b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	4b7e      	ldr	r3, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05b      	beq.n	8002984 <HAL_RCC_OscConfig+0x108>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d157      	bne.n	8002984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e242      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x74>
 80028e2:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a75      	ldr	r2, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fa:	4b70      	ldr	r3, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6f      	ldr	r2, [pc, #444]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6c      	ldr	r2, [pc, #432]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xb0>
 8002914:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a68      	ldr	r2, [pc, #416]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a65      	ldr	r2, [pc, #404]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff fc22 	bl	800217c <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff fc1e 	bl	800217c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e207      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b5b      	ldr	r3, [pc, #364]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xc0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff fc0e 	bl	800217c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff fc0a 	bl	800217c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1f3      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b51      	ldr	r3, [pc, #324]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0xe8>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1c7      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4937      	ldr	r1, [pc, #220]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e03a      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x244>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7ff fbc3 	bl	800217c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fa:	f7ff fbbf 	bl	800217c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1a8      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4925      	ldr	r1, [pc, #148]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_OscConfig+0x244>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff fba2 	bl	800217c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fb9e 	bl	800217c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e187      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d036      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff fb82 	bl	800217c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7ff fb7e 	bl	800217c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e167      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x240>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x200>
 8002a9a:	e01b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_OscConfig+0x248>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fb6b 	bl	800217c <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e00e      	b.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fb67 	bl	800217c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d907      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e150      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	42470000 	.word	0x42470000
 8002ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac8:	4b88      	ldr	r3, [pc, #544]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ea      	bne.n	8002aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8097 	beq.w	8002c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b81      	ldr	r3, [pc, #516]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b7d      	ldr	r3, [pc, #500]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a7c      	ldr	r2, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b7a      	ldr	r3, [pc, #488]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1e:	4b74      	ldr	r3, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a73      	ldr	r2, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fb27 	bl	800217c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7ff fb23 	bl	800217c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e10c      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x474>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2ea>
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a63      	ldr	r2, [pc, #396]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x30c>
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a5e      	ldr	r2, [pc, #376]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x324>
 8002b88:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a57      	ldr	r2, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7ff fae8 	bl	800217c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7ff fae4 	bl	800217c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0cb      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ee      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x334>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7ff fad2 	bl	800217c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7ff face 	bl	800217c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0b5      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ee      	bne.n	8002bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	4a38      	ldr	r2, [pc, #224]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a1 	beq.w	8002d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d05c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d141      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff faa2 	bl	800217c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff fa9e 	bl	800217c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e087      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	491b      	ldr	r1, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7ff fa77 	bl	800217c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c92:	f7ff fa73 	bl	800217c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e05c      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x416>
 8002cb0:	e054      	b.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCC_OscConfig+0x478>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fa60 	bl	800217c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff fa5c 	bl	800217c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e045      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_OscConfig+0x470>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x444>
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e038      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d028      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d121      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cc      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90c      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	494d      	ldr	r1, [pc, #308]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d044      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e067      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4934      	ldr	r1, [pc, #208]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7ff f98e 	bl	800217c <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7ff f98a 	bl	800217c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d20c      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e032      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4916      	ldr	r1, [pc, #88]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ef2:	f000 f821 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490a      	ldr	r1, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f8ee 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	0800a048 	.word	0x0800a048
 8002f30:	20000008 	.word	0x20000008
 8002f34:	2000000c 	.word	0x2000000c

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b094      	sub	sp, #80	; 0x50
 8002f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	647b      	str	r3, [r7, #68]	; 0x44
 8002f44:	2300      	movs	r3, #0
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f48:	2300      	movs	r3, #0
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f50:	4b79      	ldr	r3, [pc, #484]	; (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d00d      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x40>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	f200 80e1 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6a:	e0db      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f70:	e0db      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f72:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f76:	e0d8      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d063      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002faa:	4622      	mov	r2, r4
 8002fac:	462b      	mov	r3, r5
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	0159      	lsls	r1, r3, #5
 8002fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbc:	0150      	lsls	r0, r2, #5
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	1a51      	subs	r1, r2, r1
 8002fc6:	6139      	str	r1, [r7, #16]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	eb63 0301 	sbc.w	r3, r3, r1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fdc:	4659      	mov	r1, fp
 8002fde:	018b      	lsls	r3, r1, #6
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	018a      	lsls	r2, r1, #6
 8002fea:	4651      	mov	r1, sl
 8002fec:	ebb2 0801 	subs.w	r8, r2, r1
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300a:	4690      	mov	r8, r2
 800300c:	4699      	mov	r9, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb18 0303 	adds.w	r3, r8, r3
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	462b      	mov	r3, r5
 8003018:	eb49 0303 	adc.w	r3, r9, r3
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800302a:	4629      	mov	r1, r5
 800302c:	024b      	lsls	r3, r1, #9
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003034:	4621      	mov	r1, r4
 8003036:	024a      	lsls	r2, r1, #9
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303e:	2200      	movs	r2, #0
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
 8003042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003048:	f7fd fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003054:	e058      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	2200      	movs	r2, #0
 800305e:	4618      	mov	r0, r3
 8003060:	4611      	mov	r1, r2
 8003062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	0159      	lsls	r1, r3, #5
 800307e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003082:	0150      	lsls	r0, r2, #5
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4641      	mov	r1, r8
 800308a:	ebb2 0a01 	subs.w	sl, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb63 0b01 	sbc.w	fp, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a8:	ebb2 040a 	subs.w	r4, r2, sl
 80030ac:	eb63 050b 	sbc.w	r5, r3, fp
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	00eb      	lsls	r3, r5, #3
 80030ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030be:	00e2      	lsls	r2, r4, #3
 80030c0:	4614      	mov	r4, r2
 80030c2:	461d      	mov	r5, r3
 80030c4:	4643      	mov	r3, r8
 80030c6:	18e3      	adds	r3, r4, r3
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	464b      	mov	r3, r9
 80030cc:	eb45 0303 	adc.w	r3, r5, r3
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030de:	4629      	mov	r1, r5
 80030e0:	028b      	lsls	r3, r1, #10
 80030e2:	4621      	mov	r1, r4
 80030e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e8:	4621      	mov	r1, r4
 80030ea:	028a      	lsls	r2, r1, #10
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f2:	2200      	movs	r2, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	61fa      	str	r2, [r7, #28]
 80030f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030fc:	f7fd fdc4 	bl	8000c88 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	3301      	adds	r3, #1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800311a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800312c:	4618      	mov	r0, r3
 800312e:	3750      	adds	r7, #80	; 0x50
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	00f42400 	.word	0x00f42400
 8003140:	007a1200 	.word	0x007a1200

08003144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_RCC_GetHCLKFreq+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000008 	.word	0x20000008

0800315c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003160:	f7ff fff0 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	0800a058 	.word	0x0800a058

08003184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003188:	f7ff ffdc 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0b5b      	lsrs	r3, r3, #13
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	0800a058 	.word	0x0800a058

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e041      	b.n	8003242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe fd68 	bl	8001ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 faa0 	bl	8003730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d001      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04e      	b.n	8003302 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_TIM_Base_Start_IT+0xc4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d022      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d01d      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_TIM_Base_Start_IT+0xc8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d018      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <HAL_TIM_Base_Start_IT+0xcc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d013      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_TIM_Base_Start_IT+0xd0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00e      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_TIM_Base_Start_IT+0xd4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a19      	ldr	r2, [pc, #100]	; (8003324 <HAL_TIM_Base_Start_IT+0xd8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x80>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d111      	bne.n	80032f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d010      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	e007      	b.n	8003300 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40010400 	.word	0x40010400
 8003324:	40014000 	.word	0x40014000
 8003328:	40001800 	.word	0x40001800

0800332c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0202 	mvn.w	r2, #2
 8003358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9bf 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9b1 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9c2 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0204 	mvn.w	r2, #4
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f995 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f987 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f998 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0208 	mvn.w	r2, #8
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f96b 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f95d 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f96e 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b10      	cmp	r3, #16
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0210 	mvn.w	r2, #16
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2208      	movs	r2, #8
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f941 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f933 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f944 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f90d 	bl	80036ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 faea 	bl	8003ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f909 	bl	800371a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d10e      	bne.n	8003534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b20      	cmp	r3, #32
 8003522:	d107      	bne.n	8003534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0220 	mvn.w	r2, #32
 800352c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fab4 	bl	8003a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIM_ConfigClockSource+0x1c>
 8003554:	2302      	movs	r3, #2
 8003556:	e0b4      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x186>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800357e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	d03e      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0xd4>
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003596:	f200 8087 	bhi.w	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359e:	f000 8086 	beq.w	80036ae <HAL_TIM_ConfigClockSource+0x172>
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a6:	d87f      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b70      	cmp	r3, #112	; 0x70
 80035aa:	d01a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0xa6>
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d87b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b60      	cmp	r3, #96	; 0x60
 80035b2:	d050      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x11a>
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d877      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b50      	cmp	r3, #80	; 0x50
 80035ba:	d03c      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xfa>
 80035bc:	2b50      	cmp	r3, #80	; 0x50
 80035be:	d873      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d058      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x13a>
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d86f      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b30      	cmp	r3, #48	; 0x30
 80035ca:	d064      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d86b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d060      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d867      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05c      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d05a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035e0:	e062      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6899      	ldr	r1, [r3, #8]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f000 f9b7 	bl	8003964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	609a      	str	r2, [r3, #8]
      break;
 800360e:	e04f      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f000 f9a0 	bl	8003964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003632:	609a      	str	r2, [r3, #8]
      break;
 8003634:	e03c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	461a      	mov	r2, r3
 8003644:	f000 f914 	bl	8003870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2150      	movs	r1, #80	; 0x50
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f96d 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 8003654:	e02c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f000 f933 	bl	80038ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2160      	movs	r1, #96	; 0x60
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f95d 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 8003674:	e01c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f000 f8f4 	bl	8003870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2140      	movs	r1, #64	; 0x40
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f94d 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 8003694:	e00c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 f944 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 80036a6:	e003      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	e000      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <TIM_Base_SetConfig+0x114>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d013      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d00f      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3d      	ldr	r2, [pc, #244]	; (8003848 <TIM_Base_SetConfig+0x118>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3c      	ldr	r2, [pc, #240]	; (800384c <TIM_Base_SetConfig+0x11c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3b      	ldr	r2, [pc, #236]	; (8003850 <TIM_Base_SetConfig+0x120>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3a      	ldr	r2, [pc, #232]	; (8003854 <TIM_Base_SetConfig+0x124>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2f      	ldr	r2, [pc, #188]	; (8003844 <TIM_Base_SetConfig+0x114>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d027      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2c      	ldr	r2, [pc, #176]	; (8003848 <TIM_Base_SetConfig+0x118>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d023      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <TIM_Base_SetConfig+0x11c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <TIM_Base_SetConfig+0x120>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a29      	ldr	r2, [pc, #164]	; (8003854 <TIM_Base_SetConfig+0x124>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d017      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a28      	ldr	r2, [pc, #160]	; (8003858 <TIM_Base_SetConfig+0x128>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <TIM_Base_SetConfig+0x12c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <TIM_Base_SetConfig+0x130>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <TIM_Base_SetConfig+0x134>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <TIM_Base_SetConfig+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a23      	ldr	r2, [pc, #140]	; (800386c <TIM_Base_SetConfig+0x13c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <TIM_Base_SetConfig+0x114>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0xf8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <TIM_Base_SetConfig+0x124>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	40001800 	.word	0x40001800
 8003868:	40001c00 	.word	0x40001c00
 800386c:	40002000 	.word	0x40002000

08003870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 030a 	bic.w	r3, r3, #10
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	f043 0307 	orr.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	431a      	orrs	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e05a      	b.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d01d      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40010400 	.word	0x40010400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40001800 	.word	0x40001800

08003a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e03f      	b.n	8003b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe f902 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fde9 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08a      	sub	sp, #40	; 0x28
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d17c      	bne.n	8003c78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_UART_Transmit+0x2c>
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e075      	b.n	8003c7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Transmit+0x3e>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e06e      	b.n	8003c7a <HAL_UART_Transmit+0x11c>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2221      	movs	r2, #33	; 0x21
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb2:	f7fe fae3 	bl	800217c <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	88fa      	ldrh	r2, [r7, #6]
 8003bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	d108      	bne.n	8003be0 <HAL_UART_Transmit+0x82>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	e003      	b.n	8003be8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bf0:	e02a      	b.n	8003c48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fb29 	bl	8004254 <UART_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e036      	b.n	8003c7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3302      	adds	r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e007      	b.n	8003c3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1cf      	bne.n	8003bf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2140      	movs	r1, #64	; 0x40
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 faf9 	bl	8004254 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e006      	b.n	8003c7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d11d      	bne.n	8003cd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Receive_IT+0x26>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e016      	b.n	8003cda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Receive_IT+0x38>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e00f      	b.n	8003cda <HAL_UART_Receive_IT+0x58>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fb2e 	bl	8004330 <UART_Start_Receive_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	e000      	b.n	8003cda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b0ba      	sub	sp, #232	; 0xe8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_UART_IRQHandler+0x66>
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fc11 	bl	800456a <UART_Receive_IT>
      return;
 8003d48:	e256      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80de 	beq.w	8003f10 <HAL_UART_IRQHandler+0x22c>
 8003d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80d1 	beq.w	8003f10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_UART_IRQHandler+0xae>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0xd2>
 8003d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_UART_IRQHandler+0xf6>
 8003dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_UART_IRQHandler+0x126>
 8003de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0208 	orr.w	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 81ed 	beq.w	80041ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_UART_IRQHandler+0x14e>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb9c 	bl	800456a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_UART_IRQHandler+0x17a>
 8003e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04f      	beq.n	8003efe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 faa4 	bl	80043ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d141      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3314      	adds	r3, #20
 8003e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d9      	bne.n	8003e72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d013      	beq.n	8003eee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4a7d      	ldr	r2, [pc, #500]	; (80040c0 <HAL_UART_IRQHandler+0x3dc>)
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fadf 	bl	8002496 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00e      	b.n	8003f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f99a 	bl	8004228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e00a      	b.n	8003f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f996 	bl	8004228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e006      	b.n	8003f0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f992 	bl	8004228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f0a:	e170      	b.n	80041ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	bf00      	nop
    return;
 8003f0e:	e16e      	b.n	80041ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f040 814a 	bne.w	80041ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8143 	beq.w	80041ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 813c 	beq.w	80041ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	f040 80b4 	bne.w	80040c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8140 	beq.w	80041f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f080 8139 	bcs.w	80041f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f92:	f000 8088 	beq.w	80040a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1d9      	bne.n	8003f96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004006:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800400e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e1      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800402e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e3      	bne.n	800401e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	f023 0310 	bic.w	r3, r3, #16
 800407a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004088:	65ba      	str	r2, [r7, #88]	; 0x58
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e3      	bne.n	8004064 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe f988 	bl	80023b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8c0 	bl	800423c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040bc:	e099      	b.n	80041f2 <HAL_UART_IRQHandler+0x50e>
 80040be:	bf00      	nop
 80040c0:	08004473 	.word	0x08004473
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 808b 	beq.w	80041f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8086 	beq.w	80041f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800410e:	647a      	str	r2, [r7, #68]	; 0x44
 8004110:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e3      	bne.n	80040ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	623b      	str	r3, [r7, #32]
   return(result);
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004146:	633a      	str	r2, [r7, #48]	; 0x30
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e3      	bne.n	8004122 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	617b      	str	r3, [r7, #20]
   return(result);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e3      	bne.n	8004168 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f848 	bl	800423c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ac:	e023      	b.n	80041f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_UART_IRQHandler+0x4ea>
 80041ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f967 	bl	800449a <UART_Transmit_IT>
    return;
 80041cc:	e014      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <HAL_UART_IRQHandler+0x514>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9a7 	bl	800453a <UART_EndTransmit_IT>
    return;
 80041ec:	e004      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
    return;
 80041ee:	bf00      	nop
 80041f0:	e002      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
      return;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_UART_IRQHandler+0x514>
      return;
 80041f6:	bf00      	nop
  }
}
 80041f8:	37e8      	adds	r7, #232	; 0xe8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop

08004200 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b090      	sub	sp, #64	; 0x40
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004264:	e050      	b.n	8004308 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d04c      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <UART_WaitOnFlagUntilTimeout+0x30>
 8004274:	f7fd ff82 	bl	800217c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004280:	429a      	cmp	r2, r3
 8004282:	d241      	bcs.n	8004308 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042a4:	637a      	str	r2, [r7, #52]	; 0x34
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	613b      	str	r3, [r7, #16]
   return(result);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042d8:	623a      	str	r2, [r7, #32]
 80042da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e00f      	b.n	8004328 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	429a      	cmp	r2, r3
 8004324:	d09f      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3740      	adds	r7, #64	; 0x40
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2222      	movs	r2, #34	; 0x22
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0220 	orr.w	r2, r2, #32
 800439c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b095      	sub	sp, #84	; 0x54
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d4:	643a      	str	r2, [r7, #64]	; 0x40
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	2b01      	cmp	r3, #1
 8004422:	d119      	bne.n	8004458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60bb      	str	r3, [r7, #8]
   return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0310 	bic.w	r3, r3, #16
 800443a:	647b      	str	r3, [r7, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004444:	61ba      	str	r2, [r7, #24]
 8004446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004466:	bf00      	nop
 8004468:	3754      	adds	r7, #84	; 0x54
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fecb 	bl	8004228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b21      	cmp	r3, #33	; 0x21
 80044ac:	d13e      	bne.n	800452c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	d114      	bne.n	80044e2 <UART_Transmit_IT+0x48>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d110      	bne.n	80044e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]
 80044e0:	e008      	b.n	80044f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6211      	str	r1, [r2, #32]
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4619      	mov	r1, r3
 8004502:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004516:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004526:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e000      	b.n	800452e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004550:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff fe50 	bl	8004200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08c      	sub	sp, #48	; 0x30
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b22      	cmp	r3, #34	; 0x22
 800457c:	f040 80ab 	bne.w	80046d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	d117      	bne.n	80045ba <UART_Receive_IT+0x50>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d113      	bne.n	80045ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	1c9a      	adds	r2, r3, #2
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
 80045b8:	e026      	b.n	8004608 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045cc:	d007      	beq.n	80045de <UART_Receive_IT+0x74>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <UART_Receive_IT+0x82>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e008      	b.n	80045fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29b      	uxth	r3, r3
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4619      	mov	r1, r3
 8004616:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004618:	2b00      	cmp	r3, #0
 800461a:	d15a      	bne.n	80046d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0220 	bic.w	r2, r2, #32
 800462a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800463a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	2b01      	cmp	r3, #1
 800465a:	d135      	bne.n	80046c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	613b      	str	r3, [r7, #16]
   return(result);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f023 0310 	bic.w	r3, r3, #16
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	623a      	str	r2, [r7, #32]
 8004684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	69f9      	ldr	r1, [r7, #28]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d10a      	bne.n	80046ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fdbb 	bl	800423c <HAL_UARTEx_RxEventCallback>
 80046c6:	e002      	b.n	80046ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fda3 	bl	8004214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e002      	b.n	80046d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3730      	adds	r7, #48	; 0x30
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e4:	b0c0      	sub	sp, #256	; 0x100
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	68d9      	ldr	r1, [r3, #12]
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	ea40 0301 	orr.w	r3, r0, r1
 8004708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	431a      	orrs	r2, r3
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004738:	f021 010c 	bic.w	r1, r1, #12
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004746:	430b      	orrs	r3, r1
 8004748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	6999      	ldr	r1, [r3, #24]
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	ea40 0301 	orr.w	r3, r0, r1
 8004766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b8f      	ldr	r3, [pc, #572]	; (80049ac <UART_SetConfig+0x2cc>)
 8004770:	429a      	cmp	r2, r3
 8004772:	d005      	beq.n	8004780 <UART_SetConfig+0xa0>
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b8d      	ldr	r3, [pc, #564]	; (80049b0 <UART_SetConfig+0x2d0>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d104      	bne.n	800478a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7fe fd00 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 8004784:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004788:	e003      	b.n	8004792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800478a:	f7fe fce7 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 800478e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479c:	f040 810c 	bne.w	80049b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	1891      	adds	r1, r2, r2
 80047b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80047ba:	415b      	adcs	r3, r3
 80047bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047c2:	4621      	mov	r1, r4
 80047c4:	eb12 0801 	adds.w	r8, r2, r1
 80047c8:	4629      	mov	r1, r5
 80047ca:	eb43 0901 	adc.w	r9, r3, r1
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047e2:	4690      	mov	r8, r2
 80047e4:	4699      	mov	r9, r3
 80047e6:	4623      	mov	r3, r4
 80047e8:	eb18 0303 	adds.w	r3, r8, r3
 80047ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047f0:	462b      	mov	r3, r5
 80047f2:	eb49 0303 	adc.w	r3, r9, r3
 80047f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004806:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800480a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800480e:	460b      	mov	r3, r1
 8004810:	18db      	adds	r3, r3, r3
 8004812:	653b      	str	r3, [r7, #80]	; 0x50
 8004814:	4613      	mov	r3, r2
 8004816:	eb42 0303 	adc.w	r3, r2, r3
 800481a:	657b      	str	r3, [r7, #84]	; 0x54
 800481c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004824:	f7fc fa30 	bl	8000c88 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4b61      	ldr	r3, [pc, #388]	; (80049b4 <UART_SetConfig+0x2d4>)
 800482e:	fba3 2302 	umull	r2, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	011c      	lsls	r4, r3, #4
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004840:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	1891      	adds	r1, r2, r2
 800484e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004850:	415b      	adcs	r3, r3
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004858:	4641      	mov	r1, r8
 800485a:	eb12 0a01 	adds.w	sl, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0b01 	adc.w	fp, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004878:	4692      	mov	sl, r2
 800487a:	469b      	mov	fp, r3
 800487c:	4643      	mov	r3, r8
 800487e:	eb1a 0303 	adds.w	r3, sl, r3
 8004882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004886:	464b      	mov	r3, r9
 8004888:	eb4b 0303 	adc.w	r3, fp, r3
 800488c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800489c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048a4:	460b      	mov	r3, r1
 80048a6:	18db      	adds	r3, r3, r3
 80048a8:	643b      	str	r3, [r7, #64]	; 0x40
 80048aa:	4613      	mov	r3, r2
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	647b      	str	r3, [r7, #68]	; 0x44
 80048b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048ba:	f7fc f9e5 	bl	8000c88 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <UART_SetConfig+0x2d4>)
 80048c6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2264      	movs	r2, #100	; 0x64
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	1acb      	subs	r3, r1, r3
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048da:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <UART_SetConfig+0x2d4>)
 80048dc:	fba3 2302 	umull	r2, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e8:	441c      	add	r4, r3
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	63b9      	str	r1, [r7, #56]	; 0x38
 8004904:	415b      	adcs	r3, r3
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800490c:	4641      	mov	r1, r8
 800490e:	1851      	adds	r1, r2, r1
 8004910:	6339      	str	r1, [r7, #48]	; 0x30
 8004912:	4649      	mov	r1, r9
 8004914:	414b      	adcs	r3, r1
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004924:	4659      	mov	r1, fp
 8004926:	00cb      	lsls	r3, r1, #3
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492e:	4651      	mov	r1, sl
 8004930:	00ca      	lsls	r2, r1, #3
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	4603      	mov	r3, r0
 8004938:	4642      	mov	r2, r8
 800493a:	189b      	adds	r3, r3, r2
 800493c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004940:	464b      	mov	r3, r9
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004958:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800495c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004960:	460b      	mov	r3, r1
 8004962:	18db      	adds	r3, r3, r3
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
 8004966:	4613      	mov	r3, r2
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004976:	f7fc f987 	bl	8000c88 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <UART_SetConfig+0x2d4>)
 8004980:	fba3 1302 	umull	r1, r3, r3, r2
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	2164      	movs	r1, #100	; 0x64
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	3332      	adds	r3, #50	; 0x32
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <UART_SetConfig+0x2d4>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	f003 0207 	and.w	r2, r3, #7
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4422      	add	r2, r4
 80049a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a8:	e105      	b.n	8004bb6 <UART_SetConfig+0x4d6>
 80049aa:	bf00      	nop
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049ca:	4642      	mov	r2, r8
 80049cc:	464b      	mov	r3, r9
 80049ce:	1891      	adds	r1, r2, r2
 80049d0:	6239      	str	r1, [r7, #32]
 80049d2:	415b      	adcs	r3, r3
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049da:	4641      	mov	r1, r8
 80049dc:	1854      	adds	r4, r2, r1
 80049de:	4649      	mov	r1, r9
 80049e0:	eb43 0501 	adc.w	r5, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	00eb      	lsls	r3, r5, #3
 80049ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f2:	00e2      	lsls	r2, r4, #3
 80049f4:	4614      	mov	r4, r2
 80049f6:	461d      	mov	r5, r3
 80049f8:	4643      	mov	r3, r8
 80049fa:	18e3      	adds	r3, r4, r3
 80049fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a00:	464b      	mov	r3, r9
 8004a02:	eb45 0303 	adc.w	r3, r5, r3
 8004a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a26:	4629      	mov	r1, r5
 8004a28:	008b      	lsls	r3, r1, #2
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a30:	4621      	mov	r1, r4
 8004a32:	008a      	lsls	r2, r1, #2
 8004a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a38:	f7fc f926 	bl	8000c88 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4b60      	ldr	r3, [pc, #384]	; (8004bc4 <UART_SetConfig+0x4e4>)
 8004a42:	fba3 2302 	umull	r2, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	011c      	lsls	r4, r3, #4
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	61b9      	str	r1, [r7, #24]
 8004a64:	415b      	adcs	r3, r3
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	1851      	adds	r1, r2, r1
 8004a70:	6139      	str	r1, [r7, #16]
 8004a72:	4649      	mov	r1, r9
 8004a74:	414b      	adcs	r3, r1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a84:	4659      	mov	r1, fp
 8004a86:	00cb      	lsls	r3, r1, #3
 8004a88:	4651      	mov	r1, sl
 8004a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8e:	4651      	mov	r1, sl
 8004a90:	00ca      	lsls	r2, r1, #3
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	4642      	mov	r2, r8
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ab6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	008b      	lsls	r3, r1, #2
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ace:	4641      	mov	r1, r8
 8004ad0:	008a      	lsls	r2, r1, #2
 8004ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ad6:	f7fc f8d7 	bl	8000c88 <__aeabi_uldivmod>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <UART_SetConfig+0x4e4>)
 8004ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	2164      	movs	r1, #100	; 0x64
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	3332      	adds	r3, #50	; 0x32
 8004af2:	4a34      	ldr	r2, [pc, #208]	; (8004bc4 <UART_SetConfig+0x4e4>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afe:	441c      	add	r4, r3
 8004b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b04:	2200      	movs	r2, #0
 8004b06:	673b      	str	r3, [r7, #112]	; 0x70
 8004b08:	677a      	str	r2, [r7, #116]	; 0x74
 8004b0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b0e:	4642      	mov	r2, r8
 8004b10:	464b      	mov	r3, r9
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	415b      	adcs	r3, r3
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b1e:	4641      	mov	r1, r8
 8004b20:	1851      	adds	r1, r2, r1
 8004b22:	6039      	str	r1, [r7, #0]
 8004b24:	4649      	mov	r1, r9
 8004b26:	414b      	adcs	r3, r1
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b36:	4659      	mov	r1, fp
 8004b38:	00cb      	lsls	r3, r1, #3
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b40:	4651      	mov	r1, sl
 8004b42:	00ca      	lsls	r2, r1, #3
 8004b44:	4610      	mov	r0, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b50:	464b      	mov	r3, r9
 8004b52:	460a      	mov	r2, r1
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	663b      	str	r3, [r7, #96]	; 0x60
 8004b64:	667a      	str	r2, [r7, #100]	; 0x64
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b72:	4649      	mov	r1, r9
 8004b74:	008b      	lsls	r3, r1, #2
 8004b76:	4641      	mov	r1, r8
 8004b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	008a      	lsls	r2, r1, #2
 8004b80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b84:	f7fc f880 	bl	8000c88 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <UART_SetConfig+0x4e4>)
 8004b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2164      	movs	r1, #100	; 0x64
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	3332      	adds	r3, #50	; 0x32
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <UART_SetConfig+0x4e4>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	f003 020f 	and.w	r2, r3, #15
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4422      	add	r2, r4
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	bf00      	nop
 8004bb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	51eb851f 	.word	0x51eb851f

08004bc8 <atof>:
 8004bc8:	2100      	movs	r1, #0
 8004bca:	f001 baeb 	b.w	80061a4 <strtod>

08004bce <atoi>:
 8004bce:	220a      	movs	r2, #10
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f001 bb75 	b.w	80062c0 <strtol>
	...

08004bd8 <__errno>:
 8004bd8:	4b01      	ldr	r3, [pc, #4]	; (8004be0 <__errno+0x8>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000014 	.word	0x20000014

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4d0d      	ldr	r5, [pc, #52]	; (8004c1c <__libc_init_array+0x38>)
 8004be8:	4c0d      	ldr	r4, [pc, #52]	; (8004c20 <__libc_init_array+0x3c>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	2600      	movs	r6, #0
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	4d0b      	ldr	r5, [pc, #44]	; (8004c24 <__libc_init_array+0x40>)
 8004bf6:	4c0c      	ldr	r4, [pc, #48]	; (8004c28 <__libc_init_array+0x44>)
 8004bf8:	f005 f9ac 	bl	8009f54 <_init>
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	2600      	movs	r6, #0
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	0800a538 	.word	0x0800a538
 8004c20:	0800a538 	.word	0x0800a538
 8004c24:	0800a538 	.word	0x0800a538
 8004c28:	0800a53c 	.word	0x0800a53c

08004c2c <memset>:
 8004c2c:	4402      	add	r2, r0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d100      	bne.n	8004c36 <memset+0xa>
 8004c34:	4770      	bx	lr
 8004c36:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3a:	e7f9      	b.n	8004c30 <memset+0x4>

08004c3c <__cvt>:
 8004c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	ec55 4b10 	vmov	r4, r5, d0
 8004c44:	2d00      	cmp	r5, #0
 8004c46:	460e      	mov	r6, r1
 8004c48:	4619      	mov	r1, r3
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	bfbb      	ittet	lt
 8004c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c52:	461d      	movlt	r5, r3
 8004c54:	2300      	movge	r3, #0
 8004c56:	232d      	movlt	r3, #45	; 0x2d
 8004c58:	700b      	strb	r3, [r1, #0]
 8004c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c60:	4691      	mov	r9, r2
 8004c62:	f023 0820 	bic.w	r8, r3, #32
 8004c66:	bfbc      	itt	lt
 8004c68:	4622      	movlt	r2, r4
 8004c6a:	4614      	movlt	r4, r2
 8004c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c70:	d005      	beq.n	8004c7e <__cvt+0x42>
 8004c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c76:	d100      	bne.n	8004c7a <__cvt+0x3e>
 8004c78:	3601      	adds	r6, #1
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	e000      	b.n	8004c80 <__cvt+0x44>
 8004c7e:	2103      	movs	r1, #3
 8004c80:	ab03      	add	r3, sp, #12
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	ab02      	add	r3, sp, #8
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	ec45 4b10 	vmov	d0, r4, r5
 8004c8c:	4653      	mov	r3, sl
 8004c8e:	4632      	mov	r2, r6
 8004c90:	f001 fbae 	bl	80063f0 <_dtoa_r>
 8004c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c98:	4607      	mov	r7, r0
 8004c9a:	d102      	bne.n	8004ca2 <__cvt+0x66>
 8004c9c:	f019 0f01 	tst.w	r9, #1
 8004ca0:	d022      	beq.n	8004ce8 <__cvt+0xac>
 8004ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ca6:	eb07 0906 	add.w	r9, r7, r6
 8004caa:	d110      	bne.n	8004cce <__cvt+0x92>
 8004cac:	783b      	ldrb	r3, [r7, #0]
 8004cae:	2b30      	cmp	r3, #48	; 0x30
 8004cb0:	d10a      	bne.n	8004cc8 <__cvt+0x8c>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cbe:	b918      	cbnz	r0, 8004cc8 <__cvt+0x8c>
 8004cc0:	f1c6 0601 	rsb	r6, r6, #1
 8004cc4:	f8ca 6000 	str.w	r6, [sl]
 8004cc8:	f8da 3000 	ldr.w	r3, [sl]
 8004ccc:	4499      	add	r9, r3
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	f7fb fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cda:	b108      	cbz	r0, 8004ce0 <__cvt+0xa4>
 8004cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ce0:	2230      	movs	r2, #48	; 0x30
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	454b      	cmp	r3, r9
 8004ce6:	d307      	bcc.n	8004cf8 <__cvt+0xbc>
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cec:	1bdb      	subs	r3, r3, r7
 8004cee:	4638      	mov	r0, r7
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	b004      	add	sp, #16
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	9103      	str	r1, [sp, #12]
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e7f0      	b.n	8004ce2 <__cvt+0xa6>

08004d00 <__exponent>:
 8004d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d02:	4603      	mov	r3, r0
 8004d04:	2900      	cmp	r1, #0
 8004d06:	bfb8      	it	lt
 8004d08:	4249      	neglt	r1, r1
 8004d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8004d0e:	bfb4      	ite	lt
 8004d10:	222d      	movlt	r2, #45	; 0x2d
 8004d12:	222b      	movge	r2, #43	; 0x2b
 8004d14:	2909      	cmp	r1, #9
 8004d16:	7042      	strb	r2, [r0, #1]
 8004d18:	dd2a      	ble.n	8004d70 <__exponent+0x70>
 8004d1a:	f10d 0407 	add.w	r4, sp, #7
 8004d1e:	46a4      	mov	ip, r4
 8004d20:	270a      	movs	r7, #10
 8004d22:	46a6      	mov	lr, r4
 8004d24:	460a      	mov	r2, r1
 8004d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8004d2e:	3530      	adds	r5, #48	; 0x30
 8004d30:	2a63      	cmp	r2, #99	; 0x63
 8004d32:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	dcf1      	bgt.n	8004d22 <__exponent+0x22>
 8004d3e:	3130      	adds	r1, #48	; 0x30
 8004d40:	f1ae 0502 	sub.w	r5, lr, #2
 8004d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d48:	1c44      	adds	r4, r0, #1
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4561      	cmp	r1, ip
 8004d4e:	d30a      	bcc.n	8004d66 <__exponent+0x66>
 8004d50:	f10d 0209 	add.w	r2, sp, #9
 8004d54:	eba2 020e 	sub.w	r2, r2, lr
 8004d58:	4565      	cmp	r5, ip
 8004d5a:	bf88      	it	hi
 8004d5c:	2200      	movhi	r2, #0
 8004d5e:	4413      	add	r3, r2
 8004d60:	1a18      	subs	r0, r3, r0
 8004d62:	b003      	add	sp, #12
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d6e:	e7ed      	b.n	8004d4c <__exponent+0x4c>
 8004d70:	2330      	movs	r3, #48	; 0x30
 8004d72:	3130      	adds	r1, #48	; 0x30
 8004d74:	7083      	strb	r3, [r0, #2]
 8004d76:	70c1      	strb	r1, [r0, #3]
 8004d78:	1d03      	adds	r3, r0, #4
 8004d7a:	e7f1      	b.n	8004d60 <__exponent+0x60>

08004d7c <_printf_float>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	ed2d 8b02 	vpush	{d8}
 8004d84:	b08d      	sub	sp, #52	; 0x34
 8004d86:	460c      	mov	r4, r1
 8004d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	461f      	mov	r7, r3
 8004d90:	4605      	mov	r5, r0
 8004d92:	f002 fc8b 	bl	80076ac <_localeconv_r>
 8004d96:	f8d0 a000 	ldr.w	sl, [r0]
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	f7fb fa18 	bl	80001d0 <strlen>
 8004da0:	2300      	movs	r3, #0
 8004da2:	930a      	str	r3, [sp, #40]	; 0x28
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	9305      	str	r3, [sp, #20]
 8004da8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004db0:	3307      	adds	r3, #7
 8004db2:	f023 0307 	bic.w	r3, r3, #7
 8004db6:	f103 0208 	add.w	r2, r3, #8
 8004dba:	f8c8 2000 	str.w	r2, [r8]
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dce:	9307      	str	r3, [sp, #28]
 8004dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dd4:	ee08 0a10 	vmov	s16, r0
 8004dd8:	4b9f      	ldr	r3, [pc, #636]	; (8005058 <_printf_float+0x2dc>)
 8004dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	f7fb fea3 	bl	8000b2c <__aeabi_dcmpun>
 8004de6:	bb88      	cbnz	r0, 8004e4c <_printf_float+0xd0>
 8004de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dec:	4b9a      	ldr	r3, [pc, #616]	; (8005058 <_printf_float+0x2dc>)
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	f7fb fe7d 	bl	8000af0 <__aeabi_dcmple>
 8004df6:	bb48      	cbnz	r0, 8004e4c <_printf_float+0xd0>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fe6c 	bl	8000adc <__aeabi_dcmplt>
 8004e04:	b110      	cbz	r0, 8004e0c <_printf_float+0x90>
 8004e06:	232d      	movs	r3, #45	; 0x2d
 8004e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0c:	4b93      	ldr	r3, [pc, #588]	; (800505c <_printf_float+0x2e0>)
 8004e0e:	4894      	ldr	r0, [pc, #592]	; (8005060 <_printf_float+0x2e4>)
 8004e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e14:	bf94      	ite	ls
 8004e16:	4698      	movls	r8, r3
 8004e18:	4680      	movhi	r8, r0
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	f023 0204 	bic.w	r2, r3, #4
 8004e24:	6022      	str	r2, [r4, #0]
 8004e26:	f04f 0900 	mov.w	r9, #0
 8004e2a:	9700      	str	r7, [sp, #0]
 8004e2c:	4633      	mov	r3, r6
 8004e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f9d8 	bl	80051e8 <_printf_common>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f040 8090 	bne.w	8004f5e <_printf_float+0x1e2>
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	b00d      	add	sp, #52	; 0x34
 8004e44:	ecbd 8b02 	vpop	{d8}
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8004e58:	b140      	cbz	r0, 8004e6c <_printf_float+0xf0>
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfbc      	itt	lt
 8004e60:	232d      	movlt	r3, #45	; 0x2d
 8004e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e66:	487f      	ldr	r0, [pc, #508]	; (8005064 <_printf_float+0x2e8>)
 8004e68:	4b7f      	ldr	r3, [pc, #508]	; (8005068 <_printf_float+0x2ec>)
 8004e6a:	e7d1      	b.n	8004e10 <_printf_float+0x94>
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e72:	9206      	str	r2, [sp, #24]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	d13f      	bne.n	8004ef8 <_printf_float+0x17c>
 8004e78:	2306      	movs	r3, #6
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	9b05      	ldr	r3, [sp, #20]
 8004e7e:	6861      	ldr	r1, [r4, #4]
 8004e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e84:	2300      	movs	r3, #0
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	ab0a      	add	r3, sp, #40	; 0x28
 8004e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e8e:	ab09      	add	r3, sp, #36	; 0x24
 8004e90:	ec49 8b10 	vmov	d0, r8, r9
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6022      	str	r2, [r4, #0]
 8004e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff fecd 	bl	8004c3c <__cvt>
 8004ea2:	9b06      	ldr	r3, [sp, #24]
 8004ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ea6:	2b47      	cmp	r3, #71	; 0x47
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	d108      	bne.n	8004ebe <_printf_float+0x142>
 8004eac:	1cc8      	adds	r0, r1, #3
 8004eae:	db02      	blt.n	8004eb6 <_printf_float+0x13a>
 8004eb0:	6863      	ldr	r3, [r4, #4]
 8004eb2:	4299      	cmp	r1, r3
 8004eb4:	dd41      	ble.n	8004f3a <_printf_float+0x1be>
 8004eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004eba:	fa5f fb8b 	uxtb.w	fp, fp
 8004ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ec2:	d820      	bhi.n	8004f06 <_printf_float+0x18a>
 8004ec4:	3901      	subs	r1, #1
 8004ec6:	465a      	mov	r2, fp
 8004ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8004ece:	f7ff ff17 	bl	8004d00 <__exponent>
 8004ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed4:	1813      	adds	r3, r2, r0
 8004ed6:	2a01      	cmp	r2, #1
 8004ed8:	4681      	mov	r9, r0
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	dc02      	bgt.n	8004ee4 <_printf_float+0x168>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d2      	lsls	r2, r2, #31
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_float+0x16c>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d09c      	beq.n	8004e2a <_printf_float+0xae>
 8004ef0:	232d      	movs	r3, #45	; 0x2d
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef6:	e798      	b.n	8004e2a <_printf_float+0xae>
 8004ef8:	9a06      	ldr	r2, [sp, #24]
 8004efa:	2a47      	cmp	r2, #71	; 0x47
 8004efc:	d1be      	bne.n	8004e7c <_printf_float+0x100>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1bc      	bne.n	8004e7c <_printf_float+0x100>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7b9      	b.n	8004e7a <_printf_float+0xfe>
 8004f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f0a:	d118      	bne.n	8004f3e <_printf_float+0x1c2>
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	6863      	ldr	r3, [r4, #4]
 8004f10:	dd0b      	ble.n	8004f2a <_printf_float+0x1ae>
 8004f12:	6121      	str	r1, [r4, #16]
 8004f14:	b913      	cbnz	r3, 8004f1c <_printf_float+0x1a0>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	07d0      	lsls	r0, r2, #31
 8004f1a:	d502      	bpl.n	8004f22 <_printf_float+0x1a6>
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	440b      	add	r3, r1
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f24:	f04f 0900 	mov.w	r9, #0
 8004f28:	e7de      	b.n	8004ee8 <_printf_float+0x16c>
 8004f2a:	b913      	cbnz	r3, 8004f32 <_printf_float+0x1b6>
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	07d2      	lsls	r2, r2, #31
 8004f30:	d501      	bpl.n	8004f36 <_printf_float+0x1ba>
 8004f32:	3302      	adds	r3, #2
 8004f34:	e7f4      	b.n	8004f20 <_printf_float+0x1a4>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e7f2      	b.n	8004f20 <_printf_float+0x1a4>
 8004f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f40:	4299      	cmp	r1, r3
 8004f42:	db05      	blt.n	8004f50 <_printf_float+0x1d4>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	6121      	str	r1, [r4, #16]
 8004f48:	07d8      	lsls	r0, r3, #31
 8004f4a:	d5ea      	bpl.n	8004f22 <_printf_float+0x1a6>
 8004f4c:	1c4b      	adds	r3, r1, #1
 8004f4e:	e7e7      	b.n	8004f20 <_printf_float+0x1a4>
 8004f50:	2900      	cmp	r1, #0
 8004f52:	bfd4      	ite	le
 8004f54:	f1c1 0202 	rsble	r2, r1, #2
 8004f58:	2201      	movgt	r2, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	e7e0      	b.n	8004f20 <_printf_float+0x1a4>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	055a      	lsls	r2, r3, #21
 8004f62:	d407      	bmi.n	8004f74 <_printf_float+0x1f8>
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	4642      	mov	r2, r8
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d12c      	bne.n	8004fcc <_printf_float+0x250>
 8004f72:	e764      	b.n	8004e3e <_printf_float+0xc2>
 8004f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f78:	f240 80e0 	bls.w	800513c <_printf_float+0x3c0>
 8004f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f80:	2200      	movs	r2, #0
 8004f82:	2300      	movs	r3, #0
 8004f84:	f7fb fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d034      	beq.n	8004ff6 <_printf_float+0x27a>
 8004f8c:	4a37      	ldr	r2, [pc, #220]	; (800506c <_printf_float+0x2f0>)
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	f43f af51 	beq.w	8004e3e <_printf_float+0xc2>
 8004f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	db02      	blt.n	8004faa <_printf_float+0x22e>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	07d8      	lsls	r0, r3, #31
 8004fa8:	d510      	bpl.n	8004fcc <_printf_float+0x250>
 8004faa:	ee18 3a10 	vmov	r3, s16
 8004fae:	4652      	mov	r2, sl
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f af41 	beq.w	8004e3e <_printf_float+0xc2>
 8004fbc:	f04f 0800 	mov.w	r8, #0
 8004fc0:	f104 091a 	add.w	r9, r4, #26
 8004fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	4543      	cmp	r3, r8
 8004fca:	dc09      	bgt.n	8004fe0 <_printf_float+0x264>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	079b      	lsls	r3, r3, #30
 8004fd0:	f100 8105 	bmi.w	80051de <_printf_float+0x462>
 8004fd4:	68e0      	ldr	r0, [r4, #12]
 8004fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd8:	4298      	cmp	r0, r3
 8004fda:	bfb8      	it	lt
 8004fdc:	4618      	movlt	r0, r3
 8004fde:	e730      	b.n	8004e42 <_printf_float+0xc6>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	464a      	mov	r2, r9
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f af27 	beq.w	8004e3e <_printf_float+0xc2>
 8004ff0:	f108 0801 	add.w	r8, r8, #1
 8004ff4:	e7e6      	b.n	8004fc4 <_printf_float+0x248>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dc39      	bgt.n	8005070 <_printf_float+0x2f4>
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <_printf_float+0x2f0>)
 8004ffe:	2301      	movs	r3, #1
 8005000:	4631      	mov	r1, r6
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f af19 	beq.w	8004e3e <_printf_float+0xc2>
 800500c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005010:	4313      	orrs	r3, r2
 8005012:	d102      	bne.n	800501a <_printf_float+0x29e>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	07d9      	lsls	r1, r3, #31
 8005018:	d5d8      	bpl.n	8004fcc <_printf_float+0x250>
 800501a:	ee18 3a10 	vmov	r3, s16
 800501e:	4652      	mov	r2, sl
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f af09 	beq.w	8004e3e <_printf_float+0xc2>
 800502c:	f04f 0900 	mov.w	r9, #0
 8005030:	f104 0a1a 	add.w	sl, r4, #26
 8005034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005036:	425b      	negs	r3, r3
 8005038:	454b      	cmp	r3, r9
 800503a:	dc01      	bgt.n	8005040 <_printf_float+0x2c4>
 800503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800503e:	e792      	b.n	8004f66 <_printf_float+0x1ea>
 8005040:	2301      	movs	r3, #1
 8005042:	4652      	mov	r2, sl
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	f43f aef7 	beq.w	8004e3e <_printf_float+0xc2>
 8005050:	f109 0901 	add.w	r9, r9, #1
 8005054:	e7ee      	b.n	8005034 <_printf_float+0x2b8>
 8005056:	bf00      	nop
 8005058:	7fefffff 	.word	0x7fefffff
 800505c:	0800a064 	.word	0x0800a064
 8005060:	0800a068 	.word	0x0800a068
 8005064:	0800a070 	.word	0x0800a070
 8005068:	0800a06c 	.word	0x0800a06c
 800506c:	0800a074 	.word	0x0800a074
 8005070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005074:	429a      	cmp	r2, r3
 8005076:	bfa8      	it	ge
 8005078:	461a      	movge	r2, r3
 800507a:	2a00      	cmp	r2, #0
 800507c:	4691      	mov	r9, r2
 800507e:	dc37      	bgt.n	80050f0 <_printf_float+0x374>
 8005080:	f04f 0b00 	mov.w	fp, #0
 8005084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005088:	f104 021a 	add.w	r2, r4, #26
 800508c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	eba3 0309 	sub.w	r3, r3, r9
 8005094:	455b      	cmp	r3, fp
 8005096:	dc33      	bgt.n	8005100 <_printf_float+0x384>
 8005098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800509c:	429a      	cmp	r2, r3
 800509e:	db3b      	blt.n	8005118 <_printf_float+0x39c>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	07da      	lsls	r2, r3, #31
 80050a4:	d438      	bmi.n	8005118 <_printf_float+0x39c>
 80050a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a8:	9a05      	ldr	r2, [sp, #20]
 80050aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ac:	1a9a      	subs	r2, r3, r2
 80050ae:	eba3 0901 	sub.w	r9, r3, r1
 80050b2:	4591      	cmp	r9, r2
 80050b4:	bfa8      	it	ge
 80050b6:	4691      	movge	r9, r2
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	dc35      	bgt.n	800512a <_printf_float+0x3ae>
 80050be:	f04f 0800 	mov.w	r8, #0
 80050c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050c6:	f104 0a1a 	add.w	sl, r4, #26
 80050ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	eba3 0309 	sub.w	r3, r3, r9
 80050d4:	4543      	cmp	r3, r8
 80050d6:	f77f af79 	ble.w	8004fcc <_printf_float+0x250>
 80050da:	2301      	movs	r3, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	4631      	mov	r1, r6
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b8      	blx	r7
 80050e4:	3001      	adds	r0, #1
 80050e6:	f43f aeaa 	beq.w	8004e3e <_printf_float+0xc2>
 80050ea:	f108 0801 	add.w	r8, r8, #1
 80050ee:	e7ec      	b.n	80050ca <_printf_float+0x34e>
 80050f0:	4613      	mov	r3, r2
 80050f2:	4631      	mov	r1, r6
 80050f4:	4642      	mov	r2, r8
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	d1c0      	bne.n	8005080 <_printf_float+0x304>
 80050fe:	e69e      	b.n	8004e3e <_printf_float+0xc2>
 8005100:	2301      	movs	r3, #1
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	9205      	str	r2, [sp, #20]
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	f43f ae97 	beq.w	8004e3e <_printf_float+0xc2>
 8005110:	9a05      	ldr	r2, [sp, #20]
 8005112:	f10b 0b01 	add.w	fp, fp, #1
 8005116:	e7b9      	b.n	800508c <_printf_float+0x310>
 8005118:	ee18 3a10 	vmov	r3, s16
 800511c:	4652      	mov	r2, sl
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	d1be      	bne.n	80050a6 <_printf_float+0x32a>
 8005128:	e689      	b.n	8004e3e <_printf_float+0xc2>
 800512a:	9a05      	ldr	r2, [sp, #20]
 800512c:	464b      	mov	r3, r9
 800512e:	4442      	add	r2, r8
 8005130:	4631      	mov	r1, r6
 8005132:	4628      	mov	r0, r5
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	d1c1      	bne.n	80050be <_printf_float+0x342>
 800513a:	e680      	b.n	8004e3e <_printf_float+0xc2>
 800513c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800513e:	2a01      	cmp	r2, #1
 8005140:	dc01      	bgt.n	8005146 <_printf_float+0x3ca>
 8005142:	07db      	lsls	r3, r3, #31
 8005144:	d538      	bpl.n	80051b8 <_printf_float+0x43c>
 8005146:	2301      	movs	r3, #1
 8005148:	4642      	mov	r2, r8
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	47b8      	blx	r7
 8005150:	3001      	adds	r0, #1
 8005152:	f43f ae74 	beq.w	8004e3e <_printf_float+0xc2>
 8005156:	ee18 3a10 	vmov	r3, s16
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f ae6b 	beq.w	8004e3e <_printf_float+0xc2>
 8005168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	f7fb fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005174:	b9d8      	cbnz	r0, 80051ae <_printf_float+0x432>
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	f108 0201 	add.w	r2, r8, #1
 800517c:	3b01      	subs	r3, #1
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	d10e      	bne.n	80051a6 <_printf_float+0x42a>
 8005188:	e659      	b.n	8004e3e <_printf_float+0xc2>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f ae52 	beq.w	8004e3e <_printf_float+0xc2>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	3b01      	subs	r3, #1
 80051a2:	4543      	cmp	r3, r8
 80051a4:	dcf1      	bgt.n	800518a <_printf_float+0x40e>
 80051a6:	464b      	mov	r3, r9
 80051a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051ac:	e6dc      	b.n	8004f68 <_printf_float+0x1ec>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	f104 0a1a 	add.w	sl, r4, #26
 80051b6:	e7f2      	b.n	800519e <_printf_float+0x422>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4642      	mov	r2, r8
 80051bc:	e7df      	b.n	800517e <_printf_float+0x402>
 80051be:	2301      	movs	r3, #1
 80051c0:	464a      	mov	r2, r9
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b8      	blx	r7
 80051c8:	3001      	adds	r0, #1
 80051ca:	f43f ae38 	beq.w	8004e3e <_printf_float+0xc2>
 80051ce:	f108 0801 	add.w	r8, r8, #1
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d6:	1a5b      	subs	r3, r3, r1
 80051d8:	4543      	cmp	r3, r8
 80051da:	dcf0      	bgt.n	80051be <_printf_float+0x442>
 80051dc:	e6fa      	b.n	8004fd4 <_printf_float+0x258>
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	f104 0919 	add.w	r9, r4, #25
 80051e6:	e7f4      	b.n	80051d2 <_printf_float+0x456>

080051e8 <_printf_common>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4616      	mov	r6, r2
 80051ee:	4699      	mov	r9, r3
 80051f0:	688a      	ldr	r2, [r1, #8]
 80051f2:	690b      	ldr	r3, [r1, #16]
 80051f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bfb8      	it	lt
 80051fc:	4613      	movlt	r3, r2
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005204:	4607      	mov	r7, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b10a      	cbz	r2, 800520e <_printf_common+0x26>
 800520a:	3301      	adds	r3, #1
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	0699      	lsls	r1, r3, #26
 8005212:	bf42      	ittt	mi
 8005214:	6833      	ldrmi	r3, [r6, #0]
 8005216:	3302      	addmi	r3, #2
 8005218:	6033      	strmi	r3, [r6, #0]
 800521a:	6825      	ldr	r5, [r4, #0]
 800521c:	f015 0506 	ands.w	r5, r5, #6
 8005220:	d106      	bne.n	8005230 <_printf_common+0x48>
 8005222:	f104 0a19 	add.w	sl, r4, #25
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	6832      	ldr	r2, [r6, #0]
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	42ab      	cmp	r3, r5
 800522e:	dc26      	bgt.n	800527e <_printf_common+0x96>
 8005230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005234:	1e13      	subs	r3, r2, #0
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	2301      	movne	r3, #1
 800523c:	0692      	lsls	r2, r2, #26
 800523e:	d42b      	bmi.n	8005298 <_printf_common+0xb0>
 8005240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d01e      	beq.n	800528c <_printf_common+0xa4>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	68e5      	ldr	r5, [r4, #12]
 8005252:	6832      	ldr	r2, [r6, #0]
 8005254:	f003 0306 	and.w	r3, r3, #6
 8005258:	2b04      	cmp	r3, #4
 800525a:	bf08      	it	eq
 800525c:	1aad      	subeq	r5, r5, r2
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	bf0c      	ite	eq
 8005264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005268:	2500      	movne	r5, #0
 800526a:	4293      	cmp	r3, r2
 800526c:	bfc4      	itt	gt
 800526e:	1a9b      	subgt	r3, r3, r2
 8005270:	18ed      	addgt	r5, r5, r3
 8005272:	2600      	movs	r6, #0
 8005274:	341a      	adds	r4, #26
 8005276:	42b5      	cmp	r5, r6
 8005278:	d11a      	bne.n	80052b0 <_printf_common+0xc8>
 800527a:	2000      	movs	r0, #0
 800527c:	e008      	b.n	8005290 <_printf_common+0xa8>
 800527e:	2301      	movs	r3, #1
 8005280:	4652      	mov	r2, sl
 8005282:	4649      	mov	r1, r9
 8005284:	4638      	mov	r0, r7
 8005286:	47c0      	blx	r8
 8005288:	3001      	adds	r0, #1
 800528a:	d103      	bne.n	8005294 <_printf_common+0xac>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	3501      	adds	r5, #1
 8005296:	e7c6      	b.n	8005226 <_printf_common+0x3e>
 8005298:	18e1      	adds	r1, r4, r3
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	2030      	movs	r0, #48	; 0x30
 800529e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a2:	4422      	add	r2, r4
 80052a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ac:	3302      	adds	r3, #2
 80052ae:	e7c7      	b.n	8005240 <_printf_common+0x58>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4622      	mov	r2, r4
 80052b4:	4649      	mov	r1, r9
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c0      	blx	r8
 80052ba:	3001      	adds	r0, #1
 80052bc:	d0e6      	beq.n	800528c <_printf_common+0xa4>
 80052be:	3601      	adds	r6, #1
 80052c0:	e7d9      	b.n	8005276 <_printf_common+0x8e>
	...

080052c4 <_printf_i>:
 80052c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	7e0f      	ldrb	r7, [r1, #24]
 80052ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052cc:	2f78      	cmp	r7, #120	; 0x78
 80052ce:	4691      	mov	r9, r2
 80052d0:	4680      	mov	r8, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	469a      	mov	sl, r3
 80052d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052da:	d807      	bhi.n	80052ec <_printf_i+0x28>
 80052dc:	2f62      	cmp	r7, #98	; 0x62
 80052de:	d80a      	bhi.n	80052f6 <_printf_i+0x32>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	f000 80d8 	beq.w	8005496 <_printf_i+0x1d2>
 80052e6:	2f58      	cmp	r7, #88	; 0x58
 80052e8:	f000 80a3 	beq.w	8005432 <_printf_i+0x16e>
 80052ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f4:	e03a      	b.n	800536c <_printf_i+0xa8>
 80052f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052fa:	2b15      	cmp	r3, #21
 80052fc:	d8f6      	bhi.n	80052ec <_printf_i+0x28>
 80052fe:	a101      	add	r1, pc, #4	; (adr r1, 8005304 <_printf_i+0x40>)
 8005300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005304:	0800535d 	.word	0x0800535d
 8005308:	08005371 	.word	0x08005371
 800530c:	080052ed 	.word	0x080052ed
 8005310:	080052ed 	.word	0x080052ed
 8005314:	080052ed 	.word	0x080052ed
 8005318:	080052ed 	.word	0x080052ed
 800531c:	08005371 	.word	0x08005371
 8005320:	080052ed 	.word	0x080052ed
 8005324:	080052ed 	.word	0x080052ed
 8005328:	080052ed 	.word	0x080052ed
 800532c:	080052ed 	.word	0x080052ed
 8005330:	0800547d 	.word	0x0800547d
 8005334:	080053a1 	.word	0x080053a1
 8005338:	0800545f 	.word	0x0800545f
 800533c:	080052ed 	.word	0x080052ed
 8005340:	080052ed 	.word	0x080052ed
 8005344:	0800549f 	.word	0x0800549f
 8005348:	080052ed 	.word	0x080052ed
 800534c:	080053a1 	.word	0x080053a1
 8005350:	080052ed 	.word	0x080052ed
 8005354:	080052ed 	.word	0x080052ed
 8005358:	08005467 	.word	0x08005467
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	602a      	str	r2, [r5, #0]
 8005364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536c:	2301      	movs	r3, #1
 800536e:	e0a3      	b.n	80054b8 <_printf_i+0x1f4>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	6829      	ldr	r1, [r5, #0]
 8005374:	0606      	lsls	r6, r0, #24
 8005376:	f101 0304 	add.w	r3, r1, #4
 800537a:	d50a      	bpl.n	8005392 <_printf_i+0xce>
 800537c:	680e      	ldr	r6, [r1, #0]
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	2e00      	cmp	r6, #0
 8005382:	da03      	bge.n	800538c <_printf_i+0xc8>
 8005384:	232d      	movs	r3, #45	; 0x2d
 8005386:	4276      	negs	r6, r6
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	485e      	ldr	r0, [pc, #376]	; (8005508 <_printf_i+0x244>)
 800538e:	230a      	movs	r3, #10
 8005390:	e019      	b.n	80053c6 <_printf_i+0x102>
 8005392:	680e      	ldr	r6, [r1, #0]
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800539a:	bf18      	it	ne
 800539c:	b236      	sxthne	r6, r6
 800539e:	e7ef      	b.n	8005380 <_printf_i+0xbc>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	1d19      	adds	r1, r3, #4
 80053a6:	6029      	str	r1, [r5, #0]
 80053a8:	0601      	lsls	r1, r0, #24
 80053aa:	d501      	bpl.n	80053b0 <_printf_i+0xec>
 80053ac:	681e      	ldr	r6, [r3, #0]
 80053ae:	e002      	b.n	80053b6 <_printf_i+0xf2>
 80053b0:	0646      	lsls	r6, r0, #25
 80053b2:	d5fb      	bpl.n	80053ac <_printf_i+0xe8>
 80053b4:	881e      	ldrh	r6, [r3, #0]
 80053b6:	4854      	ldr	r0, [pc, #336]	; (8005508 <_printf_i+0x244>)
 80053b8:	2f6f      	cmp	r7, #111	; 0x6f
 80053ba:	bf0c      	ite	eq
 80053bc:	2308      	moveq	r3, #8
 80053be:	230a      	movne	r3, #10
 80053c0:	2100      	movs	r1, #0
 80053c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c6:	6865      	ldr	r5, [r4, #4]
 80053c8:	60a5      	str	r5, [r4, #8]
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	bfa2      	ittt	ge
 80053ce:	6821      	ldrge	r1, [r4, #0]
 80053d0:	f021 0104 	bicge.w	r1, r1, #4
 80053d4:	6021      	strge	r1, [r4, #0]
 80053d6:	b90e      	cbnz	r6, 80053dc <_printf_i+0x118>
 80053d8:	2d00      	cmp	r5, #0
 80053da:	d04d      	beq.n	8005478 <_printf_i+0x1b4>
 80053dc:	4615      	mov	r5, r2
 80053de:	fbb6 f1f3 	udiv	r1, r6, r3
 80053e2:	fb03 6711 	mls	r7, r3, r1, r6
 80053e6:	5dc7      	ldrb	r7, [r0, r7]
 80053e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053ec:	4637      	mov	r7, r6
 80053ee:	42bb      	cmp	r3, r7
 80053f0:	460e      	mov	r6, r1
 80053f2:	d9f4      	bls.n	80053de <_printf_i+0x11a>
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d10b      	bne.n	8005410 <_printf_i+0x14c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07de      	lsls	r6, r3, #31
 80053fc:	d508      	bpl.n	8005410 <_printf_i+0x14c>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	6861      	ldr	r1, [r4, #4]
 8005402:	4299      	cmp	r1, r3
 8005404:	bfde      	ittt	le
 8005406:	2330      	movle	r3, #48	; 0x30
 8005408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800540c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005410:	1b52      	subs	r2, r2, r5
 8005412:	6122      	str	r2, [r4, #16]
 8005414:	f8cd a000 	str.w	sl, [sp]
 8005418:	464b      	mov	r3, r9
 800541a:	aa03      	add	r2, sp, #12
 800541c:	4621      	mov	r1, r4
 800541e:	4640      	mov	r0, r8
 8005420:	f7ff fee2 	bl	80051e8 <_printf_common>
 8005424:	3001      	adds	r0, #1
 8005426:	d14c      	bne.n	80054c2 <_printf_i+0x1fe>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	b004      	add	sp, #16
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	4835      	ldr	r0, [pc, #212]	; (8005508 <_printf_i+0x244>)
 8005434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005438:	6829      	ldr	r1, [r5, #0]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005440:	6029      	str	r1, [r5, #0]
 8005442:	061d      	lsls	r5, r3, #24
 8005444:	d514      	bpl.n	8005470 <_printf_i+0x1ac>
 8005446:	07df      	lsls	r7, r3, #31
 8005448:	bf44      	itt	mi
 800544a:	f043 0320 	orrmi.w	r3, r3, #32
 800544e:	6023      	strmi	r3, [r4, #0]
 8005450:	b91e      	cbnz	r6, 800545a <_printf_i+0x196>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f023 0320 	bic.w	r3, r3, #32
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	2310      	movs	r3, #16
 800545c:	e7b0      	b.n	80053c0 <_printf_i+0xfc>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f043 0320 	orr.w	r3, r3, #32
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	2378      	movs	r3, #120	; 0x78
 8005468:	4828      	ldr	r0, [pc, #160]	; (800550c <_printf_i+0x248>)
 800546a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800546e:	e7e3      	b.n	8005438 <_printf_i+0x174>
 8005470:	0659      	lsls	r1, r3, #25
 8005472:	bf48      	it	mi
 8005474:	b2b6      	uxthmi	r6, r6
 8005476:	e7e6      	b.n	8005446 <_printf_i+0x182>
 8005478:	4615      	mov	r5, r2
 800547a:	e7bb      	b.n	80053f4 <_printf_i+0x130>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	6826      	ldr	r6, [r4, #0]
 8005480:	6961      	ldr	r1, [r4, #20]
 8005482:	1d18      	adds	r0, r3, #4
 8005484:	6028      	str	r0, [r5, #0]
 8005486:	0635      	lsls	r5, r6, #24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	d501      	bpl.n	8005490 <_printf_i+0x1cc>
 800548c:	6019      	str	r1, [r3, #0]
 800548e:	e002      	b.n	8005496 <_printf_i+0x1d2>
 8005490:	0670      	lsls	r0, r6, #25
 8005492:	d5fb      	bpl.n	800548c <_printf_i+0x1c8>
 8005494:	8019      	strh	r1, [r3, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	6123      	str	r3, [r4, #16]
 800549a:	4615      	mov	r5, r2
 800549c:	e7ba      	b.n	8005414 <_printf_i+0x150>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	602a      	str	r2, [r5, #0]
 80054a4:	681d      	ldr	r5, [r3, #0]
 80054a6:	6862      	ldr	r2, [r4, #4]
 80054a8:	2100      	movs	r1, #0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7fa fe98 	bl	80001e0 <memchr>
 80054b0:	b108      	cbz	r0, 80054b6 <_printf_i+0x1f2>
 80054b2:	1b40      	subs	r0, r0, r5
 80054b4:	6060      	str	r0, [r4, #4]
 80054b6:	6863      	ldr	r3, [r4, #4]
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c0:	e7a8      	b.n	8005414 <_printf_i+0x150>
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	462a      	mov	r2, r5
 80054c6:	4649      	mov	r1, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	47d0      	blx	sl
 80054cc:	3001      	adds	r0, #1
 80054ce:	d0ab      	beq.n	8005428 <_printf_i+0x164>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	079b      	lsls	r3, r3, #30
 80054d4:	d413      	bmi.n	80054fe <_printf_i+0x23a>
 80054d6:	68e0      	ldr	r0, [r4, #12]
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	4298      	cmp	r0, r3
 80054dc:	bfb8      	it	lt
 80054de:	4618      	movlt	r0, r3
 80054e0:	e7a4      	b.n	800542c <_printf_i+0x168>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4632      	mov	r2, r6
 80054e6:	4649      	mov	r1, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	47d0      	blx	sl
 80054ec:	3001      	adds	r0, #1
 80054ee:	d09b      	beq.n	8005428 <_printf_i+0x164>
 80054f0:	3501      	adds	r5, #1
 80054f2:	68e3      	ldr	r3, [r4, #12]
 80054f4:	9903      	ldr	r1, [sp, #12]
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	dcf2      	bgt.n	80054e2 <_printf_i+0x21e>
 80054fc:	e7eb      	b.n	80054d6 <_printf_i+0x212>
 80054fe:	2500      	movs	r5, #0
 8005500:	f104 0619 	add.w	r6, r4, #25
 8005504:	e7f5      	b.n	80054f2 <_printf_i+0x22e>
 8005506:	bf00      	nop
 8005508:	0800a076 	.word	0x0800a076
 800550c:	0800a087 	.word	0x0800a087

08005510 <siprintf>:
 8005510:	b40e      	push	{r1, r2, r3}
 8005512:	b500      	push	{lr}
 8005514:	b09c      	sub	sp, #112	; 0x70
 8005516:	ab1d      	add	r3, sp, #116	; 0x74
 8005518:	9002      	str	r0, [sp, #8]
 800551a:	9006      	str	r0, [sp, #24]
 800551c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005520:	4809      	ldr	r0, [pc, #36]	; (8005548 <siprintf+0x38>)
 8005522:	9107      	str	r1, [sp, #28]
 8005524:	9104      	str	r1, [sp, #16]
 8005526:	4909      	ldr	r1, [pc, #36]	; (800554c <siprintf+0x3c>)
 8005528:	f853 2b04 	ldr.w	r2, [r3], #4
 800552c:	9105      	str	r1, [sp, #20]
 800552e:	6800      	ldr	r0, [r0, #0]
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	a902      	add	r1, sp, #8
 8005534:	f002 fefa 	bl	800832c <_svfiprintf_r>
 8005538:	9b02      	ldr	r3, [sp, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	b01c      	add	sp, #112	; 0x70
 8005540:	f85d eb04 	ldr.w	lr, [sp], #4
 8005544:	b003      	add	sp, #12
 8005546:	4770      	bx	lr
 8005548:	20000014 	.word	0x20000014
 800554c:	ffff0208 	.word	0xffff0208

08005550 <strcpy>:
 8005550:	4603      	mov	r3, r0
 8005552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005556:	f803 2b01 	strb.w	r2, [r3], #1
 800555a:	2a00      	cmp	r2, #0
 800555c:	d1f9      	bne.n	8005552 <strcpy+0x2>
 800555e:	4770      	bx	lr

08005560 <sulp>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4604      	mov	r4, r0
 8005564:	460d      	mov	r5, r1
 8005566:	ec45 4b10 	vmov	d0, r4, r5
 800556a:	4616      	mov	r6, r2
 800556c:	f002 fc3c 	bl	8007de8 <__ulp>
 8005570:	ec51 0b10 	vmov	r0, r1, d0
 8005574:	b17e      	cbz	r6, 8005596 <sulp+0x36>
 8005576:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800557a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800557e:	2b00      	cmp	r3, #0
 8005580:	dd09      	ble.n	8005596 <sulp+0x36>
 8005582:	051b      	lsls	r3, r3, #20
 8005584:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005588:	2400      	movs	r4, #0
 800558a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f7fb f831 	bl	80005f8 <__aeabi_dmul>
 8005596:	bd70      	pop	{r4, r5, r6, pc}

08005598 <_strtod_l>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	ed2d 8b02 	vpush	{d8}
 80055a0:	b09d      	sub	sp, #116	; 0x74
 80055a2:	461f      	mov	r7, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	9318      	str	r3, [sp, #96]	; 0x60
 80055a8:	4ba2      	ldr	r3, [pc, #648]	; (8005834 <_strtod_l+0x29c>)
 80055aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	9305      	str	r3, [sp, #20]
 80055b0:	4604      	mov	r4, r0
 80055b2:	4618      	mov	r0, r3
 80055b4:	4688      	mov	r8, r1
 80055b6:	f7fa fe0b 	bl	80001d0 <strlen>
 80055ba:	f04f 0a00 	mov.w	sl, #0
 80055be:	4605      	mov	r5, r0
 80055c0:	f04f 0b00 	mov.w	fp, #0
 80055c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80055c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	2a2b      	cmp	r2, #43	; 0x2b
 80055ce:	d04e      	beq.n	800566e <_strtod_l+0xd6>
 80055d0:	d83b      	bhi.n	800564a <_strtod_l+0xb2>
 80055d2:	2a0d      	cmp	r2, #13
 80055d4:	d834      	bhi.n	8005640 <_strtod_l+0xa8>
 80055d6:	2a08      	cmp	r2, #8
 80055d8:	d834      	bhi.n	8005644 <_strtod_l+0xac>
 80055da:	2a00      	cmp	r2, #0
 80055dc:	d03e      	beq.n	800565c <_strtod_l+0xc4>
 80055de:	2300      	movs	r3, #0
 80055e0:	930a      	str	r3, [sp, #40]	; 0x28
 80055e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80055e4:	7833      	ldrb	r3, [r6, #0]
 80055e6:	2b30      	cmp	r3, #48	; 0x30
 80055e8:	f040 80b0 	bne.w	800574c <_strtod_l+0x1b4>
 80055ec:	7873      	ldrb	r3, [r6, #1]
 80055ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055f2:	2b58      	cmp	r3, #88	; 0x58
 80055f4:	d168      	bne.n	80056c8 <_strtod_l+0x130>
 80055f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	ab18      	add	r3, sp, #96	; 0x60
 80055fc:	9702      	str	r7, [sp, #8]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4a8d      	ldr	r2, [pc, #564]	; (8005838 <_strtod_l+0x2a0>)
 8005602:	ab19      	add	r3, sp, #100	; 0x64
 8005604:	a917      	add	r1, sp, #92	; 0x5c
 8005606:	4620      	mov	r0, r4
 8005608:	f001 fd48 	bl	800709c <__gethex>
 800560c:	f010 0707 	ands.w	r7, r0, #7
 8005610:	4605      	mov	r5, r0
 8005612:	d005      	beq.n	8005620 <_strtod_l+0x88>
 8005614:	2f06      	cmp	r7, #6
 8005616:	d12c      	bne.n	8005672 <_strtod_l+0xda>
 8005618:	3601      	adds	r6, #1
 800561a:	2300      	movs	r3, #0
 800561c:	9617      	str	r6, [sp, #92]	; 0x5c
 800561e:	930a      	str	r3, [sp, #40]	; 0x28
 8005620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8590 	bne.w	8006148 <_strtod_l+0xbb0>
 8005628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562a:	b1eb      	cbz	r3, 8005668 <_strtod_l+0xd0>
 800562c:	4652      	mov	r2, sl
 800562e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005632:	ec43 2b10 	vmov	d0, r2, r3
 8005636:	b01d      	add	sp, #116	; 0x74
 8005638:	ecbd 8b02 	vpop	{d8}
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	2a20      	cmp	r2, #32
 8005642:	d1cc      	bne.n	80055de <_strtod_l+0x46>
 8005644:	3301      	adds	r3, #1
 8005646:	9317      	str	r3, [sp, #92]	; 0x5c
 8005648:	e7be      	b.n	80055c8 <_strtod_l+0x30>
 800564a:	2a2d      	cmp	r2, #45	; 0x2d
 800564c:	d1c7      	bne.n	80055de <_strtod_l+0x46>
 800564e:	2201      	movs	r2, #1
 8005650:	920a      	str	r2, [sp, #40]	; 0x28
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	9217      	str	r2, [sp, #92]	; 0x5c
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1c2      	bne.n	80055e2 <_strtod_l+0x4a>
 800565c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800565e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 856e 	bne.w	8006144 <_strtod_l+0xbac>
 8005668:	4652      	mov	r2, sl
 800566a:	465b      	mov	r3, fp
 800566c:	e7e1      	b.n	8005632 <_strtod_l+0x9a>
 800566e:	2200      	movs	r2, #0
 8005670:	e7ee      	b.n	8005650 <_strtod_l+0xb8>
 8005672:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005674:	b13a      	cbz	r2, 8005686 <_strtod_l+0xee>
 8005676:	2135      	movs	r1, #53	; 0x35
 8005678:	a81a      	add	r0, sp, #104	; 0x68
 800567a:	f002 fcc0 	bl	8007ffe <__copybits>
 800567e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005680:	4620      	mov	r0, r4
 8005682:	f002 f87f 	bl	8007784 <_Bfree>
 8005686:	3f01      	subs	r7, #1
 8005688:	2f04      	cmp	r7, #4
 800568a:	d806      	bhi.n	800569a <_strtod_l+0x102>
 800568c:	e8df f007 	tbb	[pc, r7]
 8005690:	1714030a 	.word	0x1714030a
 8005694:	0a          	.byte	0x0a
 8005695:	00          	.byte	0x00
 8005696:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800569a:	0728      	lsls	r0, r5, #28
 800569c:	d5c0      	bpl.n	8005620 <_strtod_l+0x88>
 800569e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80056a2:	e7bd      	b.n	8005620 <_strtod_l+0x88>
 80056a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80056a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80056b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80056b6:	e7f0      	b.n	800569a <_strtod_l+0x102>
 80056b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800583c <_strtod_l+0x2a4>
 80056bc:	e7ed      	b.n	800569a <_strtod_l+0x102>
 80056be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80056c2:	f04f 3aff 	mov.w	sl, #4294967295
 80056c6:	e7e8      	b.n	800569a <_strtod_l+0x102>
 80056c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b30      	cmp	r3, #48	; 0x30
 80056d2:	d0f9      	beq.n	80056c8 <_strtod_l+0x130>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0a3      	beq.n	8005620 <_strtod_l+0x88>
 80056d8:	2301      	movs	r3, #1
 80056da:	f04f 0900 	mov.w	r9, #0
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056e2:	9308      	str	r3, [sp, #32]
 80056e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80056e8:	464f      	mov	r7, r9
 80056ea:	220a      	movs	r2, #10
 80056ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80056ee:	7806      	ldrb	r6, [r0, #0]
 80056f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80056f4:	b2d9      	uxtb	r1, r3
 80056f6:	2909      	cmp	r1, #9
 80056f8:	d92a      	bls.n	8005750 <_strtod_l+0x1b8>
 80056fa:	9905      	ldr	r1, [sp, #20]
 80056fc:	462a      	mov	r2, r5
 80056fe:	f002 ff2f 	bl	8008560 <strncmp>
 8005702:	b398      	cbz	r0, 800576c <_strtod_l+0x1d4>
 8005704:	2000      	movs	r0, #0
 8005706:	4632      	mov	r2, r6
 8005708:	463d      	mov	r5, r7
 800570a:	9005      	str	r0, [sp, #20]
 800570c:	4603      	mov	r3, r0
 800570e:	2a65      	cmp	r2, #101	; 0x65
 8005710:	d001      	beq.n	8005716 <_strtod_l+0x17e>
 8005712:	2a45      	cmp	r2, #69	; 0x45
 8005714:	d118      	bne.n	8005748 <_strtod_l+0x1b0>
 8005716:	b91d      	cbnz	r5, 8005720 <_strtod_l+0x188>
 8005718:	9a04      	ldr	r2, [sp, #16]
 800571a:	4302      	orrs	r2, r0
 800571c:	d09e      	beq.n	800565c <_strtod_l+0xc4>
 800571e:	2500      	movs	r5, #0
 8005720:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005724:	f108 0201 	add.w	r2, r8, #1
 8005728:	9217      	str	r2, [sp, #92]	; 0x5c
 800572a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800572e:	2a2b      	cmp	r2, #43	; 0x2b
 8005730:	d075      	beq.n	800581e <_strtod_l+0x286>
 8005732:	2a2d      	cmp	r2, #45	; 0x2d
 8005734:	d07b      	beq.n	800582e <_strtod_l+0x296>
 8005736:	f04f 0c00 	mov.w	ip, #0
 800573a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800573e:	2909      	cmp	r1, #9
 8005740:	f240 8082 	bls.w	8005848 <_strtod_l+0x2b0>
 8005744:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005748:	2600      	movs	r6, #0
 800574a:	e09d      	b.n	8005888 <_strtod_l+0x2f0>
 800574c:	2300      	movs	r3, #0
 800574e:	e7c4      	b.n	80056da <_strtod_l+0x142>
 8005750:	2f08      	cmp	r7, #8
 8005752:	bfd8      	it	le
 8005754:	9907      	ldrle	r1, [sp, #28]
 8005756:	f100 0001 	add.w	r0, r0, #1
 800575a:	bfda      	itte	le
 800575c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005760:	9307      	strle	r3, [sp, #28]
 8005762:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005766:	3701      	adds	r7, #1
 8005768:	9017      	str	r0, [sp, #92]	; 0x5c
 800576a:	e7bf      	b.n	80056ec <_strtod_l+0x154>
 800576c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800576e:	195a      	adds	r2, r3, r5
 8005770:	9217      	str	r2, [sp, #92]	; 0x5c
 8005772:	5d5a      	ldrb	r2, [r3, r5]
 8005774:	2f00      	cmp	r7, #0
 8005776:	d037      	beq.n	80057e8 <_strtod_l+0x250>
 8005778:	9005      	str	r0, [sp, #20]
 800577a:	463d      	mov	r5, r7
 800577c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005780:	2b09      	cmp	r3, #9
 8005782:	d912      	bls.n	80057aa <_strtod_l+0x212>
 8005784:	2301      	movs	r3, #1
 8005786:	e7c2      	b.n	800570e <_strtod_l+0x176>
 8005788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	9217      	str	r2, [sp, #92]	; 0x5c
 800578e:	785a      	ldrb	r2, [r3, #1]
 8005790:	3001      	adds	r0, #1
 8005792:	2a30      	cmp	r2, #48	; 0x30
 8005794:	d0f8      	beq.n	8005788 <_strtod_l+0x1f0>
 8005796:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800579a:	2b08      	cmp	r3, #8
 800579c:	f200 84d9 	bhi.w	8006152 <_strtod_l+0xbba>
 80057a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057a2:	9005      	str	r0, [sp, #20]
 80057a4:	2000      	movs	r0, #0
 80057a6:	9308      	str	r3, [sp, #32]
 80057a8:	4605      	mov	r5, r0
 80057aa:	3a30      	subs	r2, #48	; 0x30
 80057ac:	f100 0301 	add.w	r3, r0, #1
 80057b0:	d014      	beq.n	80057dc <_strtod_l+0x244>
 80057b2:	9905      	ldr	r1, [sp, #20]
 80057b4:	4419      	add	r1, r3
 80057b6:	9105      	str	r1, [sp, #20]
 80057b8:	462b      	mov	r3, r5
 80057ba:	eb00 0e05 	add.w	lr, r0, r5
 80057be:	210a      	movs	r1, #10
 80057c0:	4573      	cmp	r3, lr
 80057c2:	d113      	bne.n	80057ec <_strtod_l+0x254>
 80057c4:	182b      	adds	r3, r5, r0
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	f105 0501 	add.w	r5, r5, #1
 80057cc:	4405      	add	r5, r0
 80057ce:	dc1c      	bgt.n	800580a <_strtod_l+0x272>
 80057d0:	9907      	ldr	r1, [sp, #28]
 80057d2:	230a      	movs	r3, #10
 80057d4:	fb03 2301 	mla	r3, r3, r1, r2
 80057d8:	9307      	str	r3, [sp, #28]
 80057da:	2300      	movs	r3, #0
 80057dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057de:	1c51      	adds	r1, r2, #1
 80057e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80057e2:	7852      	ldrb	r2, [r2, #1]
 80057e4:	4618      	mov	r0, r3
 80057e6:	e7c9      	b.n	800577c <_strtod_l+0x1e4>
 80057e8:	4638      	mov	r0, r7
 80057ea:	e7d2      	b.n	8005792 <_strtod_l+0x1fa>
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	dc04      	bgt.n	80057fa <_strtod_l+0x262>
 80057f0:	9e07      	ldr	r6, [sp, #28]
 80057f2:	434e      	muls	r6, r1
 80057f4:	9607      	str	r6, [sp, #28]
 80057f6:	3301      	adds	r3, #1
 80057f8:	e7e2      	b.n	80057c0 <_strtod_l+0x228>
 80057fa:	f103 0c01 	add.w	ip, r3, #1
 80057fe:	f1bc 0f10 	cmp.w	ip, #16
 8005802:	bfd8      	it	le
 8005804:	fb01 f909 	mulle.w	r9, r1, r9
 8005808:	e7f5      	b.n	80057f6 <_strtod_l+0x25e>
 800580a:	2d10      	cmp	r5, #16
 800580c:	bfdc      	itt	le
 800580e:	230a      	movle	r3, #10
 8005810:	fb03 2909 	mlale	r9, r3, r9, r2
 8005814:	e7e1      	b.n	80057da <_strtod_l+0x242>
 8005816:	2300      	movs	r3, #0
 8005818:	9305      	str	r3, [sp, #20]
 800581a:	2301      	movs	r3, #1
 800581c:	e77c      	b.n	8005718 <_strtod_l+0x180>
 800581e:	f04f 0c00 	mov.w	ip, #0
 8005822:	f108 0202 	add.w	r2, r8, #2
 8005826:	9217      	str	r2, [sp, #92]	; 0x5c
 8005828:	f898 2002 	ldrb.w	r2, [r8, #2]
 800582c:	e785      	b.n	800573a <_strtod_l+0x1a2>
 800582e:	f04f 0c01 	mov.w	ip, #1
 8005832:	e7f6      	b.n	8005822 <_strtod_l+0x28a>
 8005834:	0800a2e0 	.word	0x0800a2e0
 8005838:	0800a098 	.word	0x0800a098
 800583c:	7ff00000 	.word	0x7ff00000
 8005840:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005842:	1c51      	adds	r1, r2, #1
 8005844:	9117      	str	r1, [sp, #92]	; 0x5c
 8005846:	7852      	ldrb	r2, [r2, #1]
 8005848:	2a30      	cmp	r2, #48	; 0x30
 800584a:	d0f9      	beq.n	8005840 <_strtod_l+0x2a8>
 800584c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005850:	2908      	cmp	r1, #8
 8005852:	f63f af79 	bhi.w	8005748 <_strtod_l+0x1b0>
 8005856:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800585a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800585c:	9206      	str	r2, [sp, #24]
 800585e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005860:	1c51      	adds	r1, r2, #1
 8005862:	9117      	str	r1, [sp, #92]	; 0x5c
 8005864:	7852      	ldrb	r2, [r2, #1]
 8005866:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800586a:	2e09      	cmp	r6, #9
 800586c:	d937      	bls.n	80058de <_strtod_l+0x346>
 800586e:	9e06      	ldr	r6, [sp, #24]
 8005870:	1b89      	subs	r1, r1, r6
 8005872:	2908      	cmp	r1, #8
 8005874:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005878:	dc02      	bgt.n	8005880 <_strtod_l+0x2e8>
 800587a:	4576      	cmp	r6, lr
 800587c:	bfa8      	it	ge
 800587e:	4676      	movge	r6, lr
 8005880:	f1bc 0f00 	cmp.w	ip, #0
 8005884:	d000      	beq.n	8005888 <_strtod_l+0x2f0>
 8005886:	4276      	negs	r6, r6
 8005888:	2d00      	cmp	r5, #0
 800588a:	d14d      	bne.n	8005928 <_strtod_l+0x390>
 800588c:	9904      	ldr	r1, [sp, #16]
 800588e:	4301      	orrs	r1, r0
 8005890:	f47f aec6 	bne.w	8005620 <_strtod_l+0x88>
 8005894:	2b00      	cmp	r3, #0
 8005896:	f47f aee1 	bne.w	800565c <_strtod_l+0xc4>
 800589a:	2a69      	cmp	r2, #105	; 0x69
 800589c:	d027      	beq.n	80058ee <_strtod_l+0x356>
 800589e:	dc24      	bgt.n	80058ea <_strtod_l+0x352>
 80058a0:	2a49      	cmp	r2, #73	; 0x49
 80058a2:	d024      	beq.n	80058ee <_strtod_l+0x356>
 80058a4:	2a4e      	cmp	r2, #78	; 0x4e
 80058a6:	f47f aed9 	bne.w	800565c <_strtod_l+0xc4>
 80058aa:	499f      	ldr	r1, [pc, #636]	; (8005b28 <_strtod_l+0x590>)
 80058ac:	a817      	add	r0, sp, #92	; 0x5c
 80058ae:	f001 fe4d 	bl	800754c <__match>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f43f aed2 	beq.w	800565c <_strtod_l+0xc4>
 80058b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b28      	cmp	r3, #40	; 0x28
 80058be:	d12d      	bne.n	800591c <_strtod_l+0x384>
 80058c0:	499a      	ldr	r1, [pc, #616]	; (8005b2c <_strtod_l+0x594>)
 80058c2:	aa1a      	add	r2, sp, #104	; 0x68
 80058c4:	a817      	add	r0, sp, #92	; 0x5c
 80058c6:	f001 fe55 	bl	8007574 <__hexnan>
 80058ca:	2805      	cmp	r0, #5
 80058cc:	d126      	bne.n	800591c <_strtod_l+0x384>
 80058ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80058d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80058d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80058dc:	e6a0      	b.n	8005620 <_strtod_l+0x88>
 80058de:	210a      	movs	r1, #10
 80058e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80058e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80058e8:	e7b9      	b.n	800585e <_strtod_l+0x2c6>
 80058ea:	2a6e      	cmp	r2, #110	; 0x6e
 80058ec:	e7db      	b.n	80058a6 <_strtod_l+0x30e>
 80058ee:	4990      	ldr	r1, [pc, #576]	; (8005b30 <_strtod_l+0x598>)
 80058f0:	a817      	add	r0, sp, #92	; 0x5c
 80058f2:	f001 fe2b 	bl	800754c <__match>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f43f aeb0 	beq.w	800565c <_strtod_l+0xc4>
 80058fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058fe:	498d      	ldr	r1, [pc, #564]	; (8005b34 <_strtod_l+0x59c>)
 8005900:	3b01      	subs	r3, #1
 8005902:	a817      	add	r0, sp, #92	; 0x5c
 8005904:	9317      	str	r3, [sp, #92]	; 0x5c
 8005906:	f001 fe21 	bl	800754c <__match>
 800590a:	b910      	cbnz	r0, 8005912 <_strtod_l+0x37a>
 800590c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800590e:	3301      	adds	r3, #1
 8005910:	9317      	str	r3, [sp, #92]	; 0x5c
 8005912:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005b44 <_strtod_l+0x5ac>
 8005916:	f04f 0a00 	mov.w	sl, #0
 800591a:	e681      	b.n	8005620 <_strtod_l+0x88>
 800591c:	4886      	ldr	r0, [pc, #536]	; (8005b38 <_strtod_l+0x5a0>)
 800591e:	f002 fe07 	bl	8008530 <nan>
 8005922:	ec5b ab10 	vmov	sl, fp, d0
 8005926:	e67b      	b.n	8005620 <_strtod_l+0x88>
 8005928:	9b05      	ldr	r3, [sp, #20]
 800592a:	9807      	ldr	r0, [sp, #28]
 800592c:	1af3      	subs	r3, r6, r3
 800592e:	2f00      	cmp	r7, #0
 8005930:	bf08      	it	eq
 8005932:	462f      	moveq	r7, r5
 8005934:	2d10      	cmp	r5, #16
 8005936:	9306      	str	r3, [sp, #24]
 8005938:	46a8      	mov	r8, r5
 800593a:	bfa8      	it	ge
 800593c:	f04f 0810 	movge.w	r8, #16
 8005940:	f7fa fde0 	bl	8000504 <__aeabi_ui2d>
 8005944:	2d09      	cmp	r5, #9
 8005946:	4682      	mov	sl, r0
 8005948:	468b      	mov	fp, r1
 800594a:	dd13      	ble.n	8005974 <_strtod_l+0x3dc>
 800594c:	4b7b      	ldr	r3, [pc, #492]	; (8005b3c <_strtod_l+0x5a4>)
 800594e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005952:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005956:	f7fa fe4f 	bl	80005f8 <__aeabi_dmul>
 800595a:	4682      	mov	sl, r0
 800595c:	4648      	mov	r0, r9
 800595e:	468b      	mov	fp, r1
 8005960:	f7fa fdd0 	bl	8000504 <__aeabi_ui2d>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4650      	mov	r0, sl
 800596a:	4659      	mov	r1, fp
 800596c:	f7fa fc8e 	bl	800028c <__adddf3>
 8005970:	4682      	mov	sl, r0
 8005972:	468b      	mov	fp, r1
 8005974:	2d0f      	cmp	r5, #15
 8005976:	dc38      	bgt.n	80059ea <_strtod_l+0x452>
 8005978:	9b06      	ldr	r3, [sp, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f43f ae50 	beq.w	8005620 <_strtod_l+0x88>
 8005980:	dd24      	ble.n	80059cc <_strtod_l+0x434>
 8005982:	2b16      	cmp	r3, #22
 8005984:	dc0b      	bgt.n	800599e <_strtod_l+0x406>
 8005986:	496d      	ldr	r1, [pc, #436]	; (8005b3c <_strtod_l+0x5a4>)
 8005988:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800598c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005990:	4652      	mov	r2, sl
 8005992:	465b      	mov	r3, fp
 8005994:	f7fa fe30 	bl	80005f8 <__aeabi_dmul>
 8005998:	4682      	mov	sl, r0
 800599a:	468b      	mov	fp, r1
 800599c:	e640      	b.n	8005620 <_strtod_l+0x88>
 800599e:	9a06      	ldr	r2, [sp, #24]
 80059a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80059a4:	4293      	cmp	r3, r2
 80059a6:	db20      	blt.n	80059ea <_strtod_l+0x452>
 80059a8:	4c64      	ldr	r4, [pc, #400]	; (8005b3c <_strtod_l+0x5a4>)
 80059aa:	f1c5 050f 	rsb	r5, r5, #15
 80059ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80059b2:	4652      	mov	r2, sl
 80059b4:	465b      	mov	r3, fp
 80059b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ba:	f7fa fe1d 	bl	80005f8 <__aeabi_dmul>
 80059be:	9b06      	ldr	r3, [sp, #24]
 80059c0:	1b5d      	subs	r5, r3, r5
 80059c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80059c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80059ca:	e7e3      	b.n	8005994 <_strtod_l+0x3fc>
 80059cc:	9b06      	ldr	r3, [sp, #24]
 80059ce:	3316      	adds	r3, #22
 80059d0:	db0b      	blt.n	80059ea <_strtod_l+0x452>
 80059d2:	9b05      	ldr	r3, [sp, #20]
 80059d4:	1b9e      	subs	r6, r3, r6
 80059d6:	4b59      	ldr	r3, [pc, #356]	; (8005b3c <_strtod_l+0x5a4>)
 80059d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80059dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fa ff32 	bl	800084c <__aeabi_ddiv>
 80059e8:	e7d6      	b.n	8005998 <_strtod_l+0x400>
 80059ea:	9b06      	ldr	r3, [sp, #24]
 80059ec:	eba5 0808 	sub.w	r8, r5, r8
 80059f0:	4498      	add	r8, r3
 80059f2:	f1b8 0f00 	cmp.w	r8, #0
 80059f6:	dd74      	ble.n	8005ae2 <_strtod_l+0x54a>
 80059f8:	f018 030f 	ands.w	r3, r8, #15
 80059fc:	d00a      	beq.n	8005a14 <_strtod_l+0x47c>
 80059fe:	494f      	ldr	r1, [pc, #316]	; (8005b3c <_strtod_l+0x5a4>)
 8005a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a04:	4652      	mov	r2, sl
 8005a06:	465b      	mov	r3, fp
 8005a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a0c:	f7fa fdf4 	bl	80005f8 <__aeabi_dmul>
 8005a10:	4682      	mov	sl, r0
 8005a12:	468b      	mov	fp, r1
 8005a14:	f038 080f 	bics.w	r8, r8, #15
 8005a18:	d04f      	beq.n	8005aba <_strtod_l+0x522>
 8005a1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005a1e:	dd22      	ble.n	8005a66 <_strtod_l+0x4ce>
 8005a20:	2500      	movs	r5, #0
 8005a22:	462e      	mov	r6, r5
 8005a24:	9507      	str	r5, [sp, #28]
 8005a26:	9505      	str	r5, [sp, #20]
 8005a28:	2322      	movs	r3, #34	; 0x22
 8005a2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005b44 <_strtod_l+0x5ac>
 8005a2e:	6023      	str	r3, [r4, #0]
 8005a30:	f04f 0a00 	mov.w	sl, #0
 8005a34:	9b07      	ldr	r3, [sp, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f43f adf2 	beq.w	8005620 <_strtod_l+0x88>
 8005a3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f001 fea0 	bl	8007784 <_Bfree>
 8005a44:	9905      	ldr	r1, [sp, #20]
 8005a46:	4620      	mov	r0, r4
 8005a48:	f001 fe9c 	bl	8007784 <_Bfree>
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f001 fe98 	bl	8007784 <_Bfree>
 8005a54:	9907      	ldr	r1, [sp, #28]
 8005a56:	4620      	mov	r0, r4
 8005a58:	f001 fe94 	bl	8007784 <_Bfree>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f001 fe90 	bl	8007784 <_Bfree>
 8005a64:	e5dc      	b.n	8005620 <_strtod_l+0x88>
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <_strtod_l+0x5a8>)
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a70:	4650      	mov	r0, sl
 8005a72:	4659      	mov	r1, fp
 8005a74:	4699      	mov	r9, r3
 8005a76:	f1b8 0f01 	cmp.w	r8, #1
 8005a7a:	dc21      	bgt.n	8005ac0 <_strtod_l+0x528>
 8005a7c:	b10b      	cbz	r3, 8005a82 <_strtod_l+0x4ea>
 8005a7e:	4682      	mov	sl, r0
 8005a80:	468b      	mov	fp, r1
 8005a82:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <_strtod_l+0x5a8>)
 8005a84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005a88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	465b      	mov	r3, fp
 8005a90:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a94:	f7fa fdb0 	bl	80005f8 <__aeabi_dmul>
 8005a98:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <_strtod_l+0x5ac>)
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	492a      	ldr	r1, [pc, #168]	; (8005b48 <_strtod_l+0x5b0>)
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	4682      	mov	sl, r0
 8005aa4:	d8bc      	bhi.n	8005a20 <_strtod_l+0x488>
 8005aa6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005aaa:	428b      	cmp	r3, r1
 8005aac:	bf86      	itte	hi
 8005aae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005b4c <_strtod_l+0x5b4>
 8005ab2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ab6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005aba:	2300      	movs	r3, #0
 8005abc:	9304      	str	r3, [sp, #16]
 8005abe:	e084      	b.n	8005bca <_strtod_l+0x632>
 8005ac0:	f018 0f01 	tst.w	r8, #1
 8005ac4:	d005      	beq.n	8005ad2 <_strtod_l+0x53a>
 8005ac6:	9b04      	ldr	r3, [sp, #16]
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fd94 	bl	80005f8 <__aeabi_dmul>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9a04      	ldr	r2, [sp, #16]
 8005ad4:	3208      	adds	r2, #8
 8005ad6:	f109 0901 	add.w	r9, r9, #1
 8005ada:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ade:	9204      	str	r2, [sp, #16]
 8005ae0:	e7c9      	b.n	8005a76 <_strtod_l+0x4de>
 8005ae2:	d0ea      	beq.n	8005aba <_strtod_l+0x522>
 8005ae4:	f1c8 0800 	rsb	r8, r8, #0
 8005ae8:	f018 020f 	ands.w	r2, r8, #15
 8005aec:	d00a      	beq.n	8005b04 <_strtod_l+0x56c>
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <_strtod_l+0x5a4>)
 8005af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af4:	4650      	mov	r0, sl
 8005af6:	4659      	mov	r1, fp
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f7fa fea6 	bl	800084c <__aeabi_ddiv>
 8005b00:	4682      	mov	sl, r0
 8005b02:	468b      	mov	fp, r1
 8005b04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b08:	d0d7      	beq.n	8005aba <_strtod_l+0x522>
 8005b0a:	f1b8 0f1f 	cmp.w	r8, #31
 8005b0e:	dd1f      	ble.n	8005b50 <_strtod_l+0x5b8>
 8005b10:	2500      	movs	r5, #0
 8005b12:	462e      	mov	r6, r5
 8005b14:	9507      	str	r5, [sp, #28]
 8005b16:	9505      	str	r5, [sp, #20]
 8005b18:	2322      	movs	r3, #34	; 0x22
 8005b1a:	f04f 0a00 	mov.w	sl, #0
 8005b1e:	f04f 0b00 	mov.w	fp, #0
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	e786      	b.n	8005a34 <_strtod_l+0x49c>
 8005b26:	bf00      	nop
 8005b28:	0800a071 	.word	0x0800a071
 8005b2c:	0800a0ac 	.word	0x0800a0ac
 8005b30:	0800a069 	.word	0x0800a069
 8005b34:	0800a1ec 	.word	0x0800a1ec
 8005b38:	0800a498 	.word	0x0800a498
 8005b3c:	0800a378 	.word	0x0800a378
 8005b40:	0800a350 	.word	0x0800a350
 8005b44:	7ff00000 	.word	0x7ff00000
 8005b48:	7ca00000 	.word	0x7ca00000
 8005b4c:	7fefffff 	.word	0x7fefffff
 8005b50:	f018 0310 	ands.w	r3, r8, #16
 8005b54:	bf18      	it	ne
 8005b56:	236a      	movne	r3, #106	; 0x6a
 8005b58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005f08 <_strtod_l+0x970>
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	4650      	mov	r0, sl
 8005b60:	4659      	mov	r1, fp
 8005b62:	2300      	movs	r3, #0
 8005b64:	f018 0f01 	tst.w	r8, #1
 8005b68:	d004      	beq.n	8005b74 <_strtod_l+0x5dc>
 8005b6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b6e:	f7fa fd43 	bl	80005f8 <__aeabi_dmul>
 8005b72:	2301      	movs	r3, #1
 8005b74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b78:	f109 0908 	add.w	r9, r9, #8
 8005b7c:	d1f2      	bne.n	8005b64 <_strtod_l+0x5cc>
 8005b7e:	b10b      	cbz	r3, 8005b84 <_strtod_l+0x5ec>
 8005b80:	4682      	mov	sl, r0
 8005b82:	468b      	mov	fp, r1
 8005b84:	9b04      	ldr	r3, [sp, #16]
 8005b86:	b1c3      	cbz	r3, 8005bba <_strtod_l+0x622>
 8005b88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005b8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	4659      	mov	r1, fp
 8005b94:	dd11      	ble.n	8005bba <_strtod_l+0x622>
 8005b96:	2b1f      	cmp	r3, #31
 8005b98:	f340 8124 	ble.w	8005de4 <_strtod_l+0x84c>
 8005b9c:	2b34      	cmp	r3, #52	; 0x34
 8005b9e:	bfde      	ittt	le
 8005ba0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005ba4:	f04f 33ff 	movle.w	r3, #4294967295
 8005ba8:	fa03 f202 	lslle.w	r2, r3, r2
 8005bac:	f04f 0a00 	mov.w	sl, #0
 8005bb0:	bfcc      	ite	gt
 8005bb2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005bb6:	ea02 0b01 	andle.w	fp, r2, r1
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	f7fa ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d1a2      	bne.n	8005b10 <_strtod_l+0x578>
 8005bca:	9b07      	ldr	r3, [sp, #28]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	9908      	ldr	r1, [sp, #32]
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	463a      	mov	r2, r7
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f001 fe3d 	bl	8007854 <__s2b>
 8005bda:	9007      	str	r0, [sp, #28]
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f43f af1f 	beq.w	8005a20 <_strtod_l+0x488>
 8005be2:	9b05      	ldr	r3, [sp, #20]
 8005be4:	1b9e      	subs	r6, r3, r6
 8005be6:	9b06      	ldr	r3, [sp, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bfb4      	ite	lt
 8005bec:	4633      	movlt	r3, r6
 8005bee:	2300      	movge	r3, #0
 8005bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	2500      	movs	r5, #0
 8005bf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bfa:	9312      	str	r3, [sp, #72]	; 0x48
 8005bfc:	462e      	mov	r6, r5
 8005bfe:	9b07      	ldr	r3, [sp, #28]
 8005c00:	4620      	mov	r0, r4
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	f001 fd7e 	bl	8007704 <_Balloc>
 8005c08:	9005      	str	r0, [sp, #20]
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f43f af0c 	beq.w	8005a28 <_strtod_l+0x490>
 8005c10:	9b07      	ldr	r3, [sp, #28]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	3202      	adds	r2, #2
 8005c16:	f103 010c 	add.w	r1, r3, #12
 8005c1a:	0092      	lsls	r2, r2, #2
 8005c1c:	300c      	adds	r0, #12
 8005c1e:	f001 fd63 	bl	80076e8 <memcpy>
 8005c22:	ec4b ab10 	vmov	d0, sl, fp
 8005c26:	aa1a      	add	r2, sp, #104	; 0x68
 8005c28:	a919      	add	r1, sp, #100	; 0x64
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f002 f958 	bl	8007ee0 <__d2b>
 8005c30:	ec4b ab18 	vmov	d8, sl, fp
 8005c34:	9018      	str	r0, [sp, #96]	; 0x60
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f43f aef6 	beq.w	8005a28 <_strtod_l+0x490>
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f001 fea2 	bl	8007988 <__i2b>
 8005c44:	4606      	mov	r6, r0
 8005c46:	2800      	cmp	r0, #0
 8005c48:	f43f aeee 	beq.w	8005a28 <_strtod_l+0x490>
 8005c4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c4e:	9904      	ldr	r1, [sp, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfab      	itete	ge
 8005c54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005c56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005c58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005c5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005c5e:	bfac      	ite	ge
 8005c60:	eb03 0902 	addge.w	r9, r3, r2
 8005c64:	1ad7      	sublt	r7, r2, r3
 8005c66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c68:	eba3 0801 	sub.w	r8, r3, r1
 8005c6c:	4490      	add	r8, r2
 8005c6e:	4ba1      	ldr	r3, [pc, #644]	; (8005ef4 <_strtod_l+0x95c>)
 8005c70:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c74:	4598      	cmp	r8, r3
 8005c76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c7a:	f280 80c7 	bge.w	8005e0c <_strtod_l+0x874>
 8005c7e:	eba3 0308 	sub.w	r3, r3, r8
 8005c82:	2b1f      	cmp	r3, #31
 8005c84:	eba2 0203 	sub.w	r2, r2, r3
 8005c88:	f04f 0101 	mov.w	r1, #1
 8005c8c:	f300 80b1 	bgt.w	8005df2 <_strtod_l+0x85a>
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	930d      	str	r3, [sp, #52]	; 0x34
 8005c96:	2300      	movs	r3, #0
 8005c98:	9308      	str	r3, [sp, #32]
 8005c9a:	eb09 0802 	add.w	r8, r9, r2
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	45c1      	cmp	r9, r8
 8005ca2:	4417      	add	r7, r2
 8005ca4:	441f      	add	r7, r3
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	bfa8      	it	ge
 8005caa:	4643      	movge	r3, r8
 8005cac:	42bb      	cmp	r3, r7
 8005cae:	bfa8      	it	ge
 8005cb0:	463b      	movge	r3, r7
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfc2      	ittt	gt
 8005cb6:	eba8 0803 	subgt.w	r8, r8, r3
 8005cba:	1aff      	subgt	r7, r7, r3
 8005cbc:	eba9 0903 	subgt.w	r9, r9, r3
 8005cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dd17      	ble.n	8005cf6 <_strtod_l+0x75e>
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f001 ff1c 	bl	8007b08 <__pow5mult>
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f43f aea8 	beq.w	8005a28 <_strtod_l+0x490>
 8005cd8:	4601      	mov	r1, r0
 8005cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f001 fe69 	bl	80079b4 <__multiply>
 8005ce2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f43f ae9f 	beq.w	8005a28 <_strtod_l+0x490>
 8005cea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005cec:	4620      	mov	r0, r4
 8005cee:	f001 fd49 	bl	8007784 <_Bfree>
 8005cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf4:	9318      	str	r3, [sp, #96]	; 0x60
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	f300 808c 	bgt.w	8005e16 <_strtod_l+0x87e>
 8005cfe:	9b06      	ldr	r3, [sp, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dd08      	ble.n	8005d16 <_strtod_l+0x77e>
 8005d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d06:	9905      	ldr	r1, [sp, #20]
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f001 fefd 	bl	8007b08 <__pow5mult>
 8005d0e:	9005      	str	r0, [sp, #20]
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f43f ae89 	beq.w	8005a28 <_strtod_l+0x490>
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	dd08      	ble.n	8005d2c <_strtod_l+0x794>
 8005d1a:	9905      	ldr	r1, [sp, #20]
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f001 ff4c 	bl	8007bbc <__lshift>
 8005d24:	9005      	str	r0, [sp, #20]
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f ae7e 	beq.w	8005a28 <_strtod_l+0x490>
 8005d2c:	f1b9 0f00 	cmp.w	r9, #0
 8005d30:	dd08      	ble.n	8005d44 <_strtod_l+0x7ac>
 8005d32:	4631      	mov	r1, r6
 8005d34:	464a      	mov	r2, r9
 8005d36:	4620      	mov	r0, r4
 8005d38:	f001 ff40 	bl	8007bbc <__lshift>
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f43f ae72 	beq.w	8005a28 <_strtod_l+0x490>
 8005d44:	9a05      	ldr	r2, [sp, #20]
 8005d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f001 ffc3 	bl	8007cd4 <__mdiff>
 8005d4e:	4605      	mov	r5, r0
 8005d50:	2800      	cmp	r0, #0
 8005d52:	f43f ae69 	beq.w	8005a28 <_strtod_l+0x490>
 8005d56:	68c3      	ldr	r3, [r0, #12]
 8005d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60c3      	str	r3, [r0, #12]
 8005d5e:	4631      	mov	r1, r6
 8005d60:	f001 ff9c 	bl	8007c9c <__mcmp>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	da60      	bge.n	8005e2a <_strtod_l+0x892>
 8005d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d6a:	ea53 030a 	orrs.w	r3, r3, sl
 8005d6e:	f040 8082 	bne.w	8005e76 <_strtod_l+0x8de>
 8005d72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d17d      	bne.n	8005e76 <_strtod_l+0x8de>
 8005d7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d7e:	0d1b      	lsrs	r3, r3, #20
 8005d80:	051b      	lsls	r3, r3, #20
 8005d82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d86:	d976      	bls.n	8005e76 <_strtod_l+0x8de>
 8005d88:	696b      	ldr	r3, [r5, #20]
 8005d8a:	b913      	cbnz	r3, 8005d92 <_strtod_l+0x7fa>
 8005d8c:	692b      	ldr	r3, [r5, #16]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	dd71      	ble.n	8005e76 <_strtod_l+0x8de>
 8005d92:	4629      	mov	r1, r5
 8005d94:	2201      	movs	r2, #1
 8005d96:	4620      	mov	r0, r4
 8005d98:	f001 ff10 	bl	8007bbc <__lshift>
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4605      	mov	r5, r0
 8005da0:	f001 ff7c 	bl	8007c9c <__mcmp>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	dd66      	ble.n	8005e76 <_strtod_l+0x8de>
 8005da8:	9904      	ldr	r1, [sp, #16]
 8005daa:	4a53      	ldr	r2, [pc, #332]	; (8005ef8 <_strtod_l+0x960>)
 8005dac:	465b      	mov	r3, fp
 8005dae:	2900      	cmp	r1, #0
 8005db0:	f000 8081 	beq.w	8005eb6 <_strtod_l+0x91e>
 8005db4:	ea02 010b 	and.w	r1, r2, fp
 8005db8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005dbc:	dc7b      	bgt.n	8005eb6 <_strtod_l+0x91e>
 8005dbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005dc2:	f77f aea9 	ble.w	8005b18 <_strtod_l+0x580>
 8005dc6:	4b4d      	ldr	r3, [pc, #308]	; (8005efc <_strtod_l+0x964>)
 8005dc8:	4650      	mov	r0, sl
 8005dca:	4659      	mov	r1, fp
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f7fa fc13 	bl	80005f8 <__aeabi_dmul>
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4303      	orrs	r3, r0
 8005dd6:	bf08      	it	eq
 8005dd8:	2322      	moveq	r3, #34	; 0x22
 8005dda:	4682      	mov	sl, r0
 8005ddc:	468b      	mov	fp, r1
 8005dde:	bf08      	it	eq
 8005de0:	6023      	streq	r3, [r4, #0]
 8005de2:	e62b      	b.n	8005a3c <_strtod_l+0x4a4>
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	ea03 0a0a 	and.w	sl, r3, sl
 8005df0:	e6e3      	b.n	8005bba <_strtod_l+0x622>
 8005df2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005df6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005dfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005dfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005e02:	fa01 f308 	lsl.w	r3, r1, r8
 8005e06:	9308      	str	r3, [sp, #32]
 8005e08:	910d      	str	r1, [sp, #52]	; 0x34
 8005e0a:	e746      	b.n	8005c9a <_strtod_l+0x702>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	2301      	movs	r3, #1
 8005e12:	930d      	str	r3, [sp, #52]	; 0x34
 8005e14:	e741      	b.n	8005c9a <_strtod_l+0x702>
 8005e16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f001 fece 	bl	8007bbc <__lshift>
 8005e20:	9018      	str	r0, [sp, #96]	; 0x60
 8005e22:	2800      	cmp	r0, #0
 8005e24:	f47f af6b 	bne.w	8005cfe <_strtod_l+0x766>
 8005e28:	e5fe      	b.n	8005a28 <_strtod_l+0x490>
 8005e2a:	465f      	mov	r7, fp
 8005e2c:	d16e      	bne.n	8005f0c <_strtod_l+0x974>
 8005e2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e34:	b342      	cbz	r2, 8005e88 <_strtod_l+0x8f0>
 8005e36:	4a32      	ldr	r2, [pc, #200]	; (8005f00 <_strtod_l+0x968>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d128      	bne.n	8005e8e <_strtod_l+0x8f6>
 8005e3c:	9b04      	ldr	r3, [sp, #16]
 8005e3e:	4651      	mov	r1, sl
 8005e40:	b1eb      	cbz	r3, 8005e7e <_strtod_l+0x8e6>
 8005e42:	4b2d      	ldr	r3, [pc, #180]	; (8005ef8 <_strtod_l+0x960>)
 8005e44:	403b      	ands	r3, r7
 8005e46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	d819      	bhi.n	8005e84 <_strtod_l+0x8ec>
 8005e50:	0d1b      	lsrs	r3, r3, #20
 8005e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	d117      	bne.n	8005e8e <_strtod_l+0x8f6>
 8005e5e:	4b29      	ldr	r3, [pc, #164]	; (8005f04 <_strtod_l+0x96c>)
 8005e60:	429f      	cmp	r7, r3
 8005e62:	d102      	bne.n	8005e6a <_strtod_l+0x8d2>
 8005e64:	3101      	adds	r1, #1
 8005e66:	f43f addf 	beq.w	8005a28 <_strtod_l+0x490>
 8005e6a:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <_strtod_l+0x960>)
 8005e6c:	403b      	ands	r3, r7
 8005e6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e72:	f04f 0a00 	mov.w	sl, #0
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1a4      	bne.n	8005dc6 <_strtod_l+0x82e>
 8005e7c:	e5de      	b.n	8005a3c <_strtod_l+0x4a4>
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	e7ea      	b.n	8005e5a <_strtod_l+0x8c2>
 8005e84:	4613      	mov	r3, r2
 8005e86:	e7e8      	b.n	8005e5a <_strtod_l+0x8c2>
 8005e88:	ea53 030a 	orrs.w	r3, r3, sl
 8005e8c:	d08c      	beq.n	8005da8 <_strtod_l+0x810>
 8005e8e:	9b08      	ldr	r3, [sp, #32]
 8005e90:	b1db      	cbz	r3, 8005eca <_strtod_l+0x932>
 8005e92:	423b      	tst	r3, r7
 8005e94:	d0ef      	beq.n	8005e76 <_strtod_l+0x8de>
 8005e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e98:	9a04      	ldr	r2, [sp, #16]
 8005e9a:	4650      	mov	r0, sl
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	b1c3      	cbz	r3, 8005ed2 <_strtod_l+0x93a>
 8005ea0:	f7ff fb5e 	bl	8005560 <sulp>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	ec51 0b18 	vmov	r0, r1, d8
 8005eac:	f7fa f9ee 	bl	800028c <__adddf3>
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	468b      	mov	fp, r1
 8005eb4:	e7df      	b.n	8005e76 <_strtod_l+0x8de>
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005ebc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005ec0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005ec4:	f04f 3aff 	mov.w	sl, #4294967295
 8005ec8:	e7d5      	b.n	8005e76 <_strtod_l+0x8de>
 8005eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ecc:	ea13 0f0a 	tst.w	r3, sl
 8005ed0:	e7e0      	b.n	8005e94 <_strtod_l+0x8fc>
 8005ed2:	f7ff fb45 	bl	8005560 <sulp>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	ec51 0b18 	vmov	r0, r1, d8
 8005ede:	f7fa f9d3 	bl	8000288 <__aeabi_dsub>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4682      	mov	sl, r0
 8005ee8:	468b      	mov	fp, r1
 8005eea:	f7fa fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d0c1      	beq.n	8005e76 <_strtod_l+0x8de>
 8005ef2:	e611      	b.n	8005b18 <_strtod_l+0x580>
 8005ef4:	fffffc02 	.word	0xfffffc02
 8005ef8:	7ff00000 	.word	0x7ff00000
 8005efc:	39500000 	.word	0x39500000
 8005f00:	000fffff 	.word	0x000fffff
 8005f04:	7fefffff 	.word	0x7fefffff
 8005f08:	0800a0c0 	.word	0x0800a0c0
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f002 f842 	bl	8007f98 <__ratio>
 8005f14:	ec59 8b10 	vmov	r8, r9, d0
 8005f18:	ee10 0a10 	vmov	r0, s0
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f22:	4649      	mov	r1, r9
 8005f24:	f7fa fde4 	bl	8000af0 <__aeabi_dcmple>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d07a      	beq.n	8006022 <_strtod_l+0xa8a>
 8005f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d04a      	beq.n	8005fc8 <_strtod_l+0xa30>
 8005f32:	4b95      	ldr	r3, [pc, #596]	; (8006188 <_strtod_l+0xbf0>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006188 <_strtod_l+0xbf0>
 8005f3e:	f04f 0800 	mov.w	r8, #0
 8005f42:	4b92      	ldr	r3, [pc, #584]	; (800618c <_strtod_l+0xbf4>)
 8005f44:	403b      	ands	r3, r7
 8005f46:	930d      	str	r3, [sp, #52]	; 0x34
 8005f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f4a:	4b91      	ldr	r3, [pc, #580]	; (8006190 <_strtod_l+0xbf8>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	f040 80b0 	bne.w	80060b2 <_strtod_l+0xb1a>
 8005f52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005f5a:	ec4b ab10 	vmov	d0, sl, fp
 8005f5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f62:	f001 ff41 	bl	8007de8 <__ulp>
 8005f66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f6a:	ec53 2b10 	vmov	r2, r3, d0
 8005f6e:	f7fa fb43 	bl	80005f8 <__aeabi_dmul>
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	f7fa f989 	bl	800028c <__adddf3>
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4983      	ldr	r1, [pc, #524]	; (800618c <_strtod_l+0xbf4>)
 8005f7e:	4a85      	ldr	r2, [pc, #532]	; (8006194 <_strtod_l+0xbfc>)
 8005f80:	4019      	ands	r1, r3
 8005f82:	4291      	cmp	r1, r2
 8005f84:	4682      	mov	sl, r0
 8005f86:	d960      	bls.n	800604a <_strtod_l+0xab2>
 8005f88:	ee18 3a90 	vmov	r3, s17
 8005f8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d104      	bne.n	8005f9e <_strtod_l+0xa06>
 8005f94:	ee18 3a10 	vmov	r3, s16
 8005f98:	3301      	adds	r3, #1
 8005f9a:	f43f ad45 	beq.w	8005a28 <_strtod_l+0x490>
 8005f9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80061a0 <_strtod_l+0xc08>
 8005fa2:	f04f 3aff 	mov.w	sl, #4294967295
 8005fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f001 fbeb 	bl	8007784 <_Bfree>
 8005fae:	9905      	ldr	r1, [sp, #20]
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f001 fbe7 	bl	8007784 <_Bfree>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f001 fbe3 	bl	8007784 <_Bfree>
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f001 fbdf 	bl	8007784 <_Bfree>
 8005fc6:	e61a      	b.n	8005bfe <_strtod_l+0x666>
 8005fc8:	f1ba 0f00 	cmp.w	sl, #0
 8005fcc:	d11b      	bne.n	8006006 <_strtod_l+0xa6e>
 8005fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fd2:	b9f3      	cbnz	r3, 8006012 <_strtod_l+0xa7a>
 8005fd4:	4b6c      	ldr	r3, [pc, #432]	; (8006188 <_strtod_l+0xbf0>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4640      	mov	r0, r8
 8005fda:	4649      	mov	r1, r9
 8005fdc:	f7fa fd7e 	bl	8000adc <__aeabi_dcmplt>
 8005fe0:	b9d0      	cbnz	r0, 8006018 <_strtod_l+0xa80>
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <_strtod_l+0xc00>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f7fa fb05 	bl	80005f8 <__aeabi_dmul>
 8005fee:	4680      	mov	r8, r0
 8005ff0:	4689      	mov	r9, r1
 8005ff2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ff6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005ffa:	9315      	str	r3, [sp, #84]	; 0x54
 8005ffc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006000:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006004:	e79d      	b.n	8005f42 <_strtod_l+0x9aa>
 8006006:	f1ba 0f01 	cmp.w	sl, #1
 800600a:	d102      	bne.n	8006012 <_strtod_l+0xa7a>
 800600c:	2f00      	cmp	r7, #0
 800600e:	f43f ad83 	beq.w	8005b18 <_strtod_l+0x580>
 8006012:	4b62      	ldr	r3, [pc, #392]	; (800619c <_strtod_l+0xc04>)
 8006014:	2200      	movs	r2, #0
 8006016:	e78e      	b.n	8005f36 <_strtod_l+0x99e>
 8006018:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006198 <_strtod_l+0xc00>
 800601c:	f04f 0800 	mov.w	r8, #0
 8006020:	e7e7      	b.n	8005ff2 <_strtod_l+0xa5a>
 8006022:	4b5d      	ldr	r3, [pc, #372]	; (8006198 <_strtod_l+0xc00>)
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	2200      	movs	r2, #0
 800602a:	f7fa fae5 	bl	80005f8 <__aeabi_dmul>
 800602e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006030:	4680      	mov	r8, r0
 8006032:	4689      	mov	r9, r1
 8006034:	b933      	cbnz	r3, 8006044 <_strtod_l+0xaac>
 8006036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800603a:	900e      	str	r0, [sp, #56]	; 0x38
 800603c:	930f      	str	r3, [sp, #60]	; 0x3c
 800603e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006042:	e7dd      	b.n	8006000 <_strtod_l+0xa68>
 8006044:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006048:	e7f9      	b.n	800603e <_strtod_l+0xaa6>
 800604a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800604e:	9b04      	ldr	r3, [sp, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1a8      	bne.n	8005fa6 <_strtod_l+0xa0e>
 8006054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800605a:	0d1b      	lsrs	r3, r3, #20
 800605c:	051b      	lsls	r3, r3, #20
 800605e:	429a      	cmp	r2, r3
 8006060:	d1a1      	bne.n	8005fa6 <_strtod_l+0xa0e>
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa fe27 	bl	8000cb8 <__aeabi_d2lz>
 800606a:	f7fa fa97 	bl	800059c <__aeabi_l2d>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f7fa f907 	bl	8000288 <__aeabi_dsub>
 800607a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800607c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006080:	ea43 030a 	orr.w	r3, r3, sl
 8006084:	4313      	orrs	r3, r2
 8006086:	4680      	mov	r8, r0
 8006088:	4689      	mov	r9, r1
 800608a:	d055      	beq.n	8006138 <_strtod_l+0xba0>
 800608c:	a336      	add	r3, pc, #216	; (adr r3, 8006168 <_strtod_l+0xbd0>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa fd23 	bl	8000adc <__aeabi_dcmplt>
 8006096:	2800      	cmp	r0, #0
 8006098:	f47f acd0 	bne.w	8005a3c <_strtod_l+0x4a4>
 800609c:	a334      	add	r3, pc, #208	; (adr r3, 8006170 <_strtod_l+0xbd8>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	4640      	mov	r0, r8
 80060a4:	4649      	mov	r1, r9
 80060a6:	f7fa fd37 	bl	8000b18 <__aeabi_dcmpgt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f43f af7b 	beq.w	8005fa6 <_strtod_l+0xa0e>
 80060b0:	e4c4      	b.n	8005a3c <_strtod_l+0x4a4>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	b333      	cbz	r3, 8006104 <_strtod_l+0xb6c>
 80060b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80060bc:	d822      	bhi.n	8006104 <_strtod_l+0xb6c>
 80060be:	a32e      	add	r3, pc, #184	; (adr r3, 8006178 <_strtod_l+0xbe0>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	4640      	mov	r0, r8
 80060c6:	4649      	mov	r1, r9
 80060c8:	f7fa fd12 	bl	8000af0 <__aeabi_dcmple>
 80060cc:	b1a0      	cbz	r0, 80060f8 <_strtod_l+0xb60>
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	f7fa fd69 	bl	8000ba8 <__aeabi_d2uiz>
 80060d6:	2801      	cmp	r0, #1
 80060d8:	bf38      	it	cc
 80060da:	2001      	movcc	r0, #1
 80060dc:	f7fa fa12 	bl	8000504 <__aeabi_ui2d>
 80060e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e2:	4680      	mov	r8, r0
 80060e4:	4689      	mov	r9, r1
 80060e6:	bb23      	cbnz	r3, 8006132 <_strtod_l+0xb9a>
 80060e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060ec:	9010      	str	r0, [sp, #64]	; 0x40
 80060ee:	9311      	str	r3, [sp, #68]	; 0x44
 80060f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	9309      	str	r3, [sp, #36]	; 0x24
 8006104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006108:	eeb0 0a48 	vmov.f32	s0, s16
 800610c:	eef0 0a68 	vmov.f32	s1, s17
 8006110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006114:	f001 fe68 	bl	8007de8 <__ulp>
 8006118:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800611c:	ec53 2b10 	vmov	r2, r3, d0
 8006120:	f7fa fa6a 	bl	80005f8 <__aeabi_dmul>
 8006124:	ec53 2b18 	vmov	r2, r3, d8
 8006128:	f7fa f8b0 	bl	800028c <__adddf3>
 800612c:	4682      	mov	sl, r0
 800612e:	468b      	mov	fp, r1
 8006130:	e78d      	b.n	800604e <_strtod_l+0xab6>
 8006132:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006136:	e7db      	b.n	80060f0 <_strtod_l+0xb58>
 8006138:	a311      	add	r3, pc, #68	; (adr r3, 8006180 <_strtod_l+0xbe8>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa fccd 	bl	8000adc <__aeabi_dcmplt>
 8006142:	e7b2      	b.n	80060aa <_strtod_l+0xb12>
 8006144:	2300      	movs	r3, #0
 8006146:	930a      	str	r3, [sp, #40]	; 0x28
 8006148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800614a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	f7ff ba6b 	b.w	8005628 <_strtod_l+0x90>
 8006152:	2a65      	cmp	r2, #101	; 0x65
 8006154:	f43f ab5f 	beq.w	8005816 <_strtod_l+0x27e>
 8006158:	2a45      	cmp	r2, #69	; 0x45
 800615a:	f43f ab5c 	beq.w	8005816 <_strtod_l+0x27e>
 800615e:	2301      	movs	r3, #1
 8006160:	f7ff bb94 	b.w	800588c <_strtod_l+0x2f4>
 8006164:	f3af 8000 	nop.w
 8006168:	94a03595 	.word	0x94a03595
 800616c:	3fdfffff 	.word	0x3fdfffff
 8006170:	35afe535 	.word	0x35afe535
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	ffc00000 	.word	0xffc00000
 800617c:	41dfffff 	.word	0x41dfffff
 8006180:	94a03595 	.word	0x94a03595
 8006184:	3fcfffff 	.word	0x3fcfffff
 8006188:	3ff00000 	.word	0x3ff00000
 800618c:	7ff00000 	.word	0x7ff00000
 8006190:	7fe00000 	.word	0x7fe00000
 8006194:	7c9fffff 	.word	0x7c9fffff
 8006198:	3fe00000 	.word	0x3fe00000
 800619c:	bff00000 	.word	0xbff00000
 80061a0:	7fefffff 	.word	0x7fefffff

080061a4 <strtod>:
 80061a4:	460a      	mov	r2, r1
 80061a6:	4601      	mov	r1, r0
 80061a8:	4802      	ldr	r0, [pc, #8]	; (80061b4 <strtod+0x10>)
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <strtod+0x14>)
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f7ff b9f3 	b.w	8005598 <_strtod_l>
 80061b2:	bf00      	nop
 80061b4:	20000014 	.word	0x20000014
 80061b8:	2000007c 	.word	0x2000007c

080061bc <_strtol_l.constprop.0>:
 80061bc:	2b01      	cmp	r3, #1
 80061be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c2:	d001      	beq.n	80061c8 <_strtol_l.constprop.0+0xc>
 80061c4:	2b24      	cmp	r3, #36	; 0x24
 80061c6:	d906      	bls.n	80061d6 <_strtol_l.constprop.0+0x1a>
 80061c8:	f7fe fd06 	bl	8004bd8 <__errno>
 80061cc:	2316      	movs	r3, #22
 80061ce:	6003      	str	r3, [r0, #0]
 80061d0:	2000      	movs	r0, #0
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80062bc <_strtol_l.constprop.0+0x100>
 80061da:	460d      	mov	r5, r1
 80061dc:	462e      	mov	r6, r5
 80061de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80061e6:	f017 0708 	ands.w	r7, r7, #8
 80061ea:	d1f7      	bne.n	80061dc <_strtol_l.constprop.0+0x20>
 80061ec:	2c2d      	cmp	r4, #45	; 0x2d
 80061ee:	d132      	bne.n	8006256 <_strtol_l.constprop.0+0x9a>
 80061f0:	782c      	ldrb	r4, [r5, #0]
 80061f2:	2701      	movs	r7, #1
 80061f4:	1cb5      	adds	r5, r6, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d05b      	beq.n	80062b2 <_strtol_l.constprop.0+0xf6>
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d109      	bne.n	8006212 <_strtol_l.constprop.0+0x56>
 80061fe:	2c30      	cmp	r4, #48	; 0x30
 8006200:	d107      	bne.n	8006212 <_strtol_l.constprop.0+0x56>
 8006202:	782c      	ldrb	r4, [r5, #0]
 8006204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006208:	2c58      	cmp	r4, #88	; 0x58
 800620a:	d14d      	bne.n	80062a8 <_strtol_l.constprop.0+0xec>
 800620c:	786c      	ldrb	r4, [r5, #1]
 800620e:	2310      	movs	r3, #16
 8006210:	3502      	adds	r5, #2
 8006212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006216:	f108 38ff 	add.w	r8, r8, #4294967295
 800621a:	f04f 0c00 	mov.w	ip, #0
 800621e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006222:	4666      	mov	r6, ip
 8006224:	fb03 8a19 	mls	sl, r3, r9, r8
 8006228:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800622c:	f1be 0f09 	cmp.w	lr, #9
 8006230:	d816      	bhi.n	8006260 <_strtol_l.constprop.0+0xa4>
 8006232:	4674      	mov	r4, lr
 8006234:	42a3      	cmp	r3, r4
 8006236:	dd24      	ble.n	8006282 <_strtol_l.constprop.0+0xc6>
 8006238:	f1bc 0f00 	cmp.w	ip, #0
 800623c:	db1e      	blt.n	800627c <_strtol_l.constprop.0+0xc0>
 800623e:	45b1      	cmp	r9, r6
 8006240:	d31c      	bcc.n	800627c <_strtol_l.constprop.0+0xc0>
 8006242:	d101      	bne.n	8006248 <_strtol_l.constprop.0+0x8c>
 8006244:	45a2      	cmp	sl, r4
 8006246:	db19      	blt.n	800627c <_strtol_l.constprop.0+0xc0>
 8006248:	fb06 4603 	mla	r6, r6, r3, r4
 800624c:	f04f 0c01 	mov.w	ip, #1
 8006250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006254:	e7e8      	b.n	8006228 <_strtol_l.constprop.0+0x6c>
 8006256:	2c2b      	cmp	r4, #43	; 0x2b
 8006258:	bf04      	itt	eq
 800625a:	782c      	ldrbeq	r4, [r5, #0]
 800625c:	1cb5      	addeq	r5, r6, #2
 800625e:	e7ca      	b.n	80061f6 <_strtol_l.constprop.0+0x3a>
 8006260:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006264:	f1be 0f19 	cmp.w	lr, #25
 8006268:	d801      	bhi.n	800626e <_strtol_l.constprop.0+0xb2>
 800626a:	3c37      	subs	r4, #55	; 0x37
 800626c:	e7e2      	b.n	8006234 <_strtol_l.constprop.0+0x78>
 800626e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006272:	f1be 0f19 	cmp.w	lr, #25
 8006276:	d804      	bhi.n	8006282 <_strtol_l.constprop.0+0xc6>
 8006278:	3c57      	subs	r4, #87	; 0x57
 800627a:	e7db      	b.n	8006234 <_strtol_l.constprop.0+0x78>
 800627c:	f04f 3cff 	mov.w	ip, #4294967295
 8006280:	e7e6      	b.n	8006250 <_strtol_l.constprop.0+0x94>
 8006282:	f1bc 0f00 	cmp.w	ip, #0
 8006286:	da05      	bge.n	8006294 <_strtol_l.constprop.0+0xd8>
 8006288:	2322      	movs	r3, #34	; 0x22
 800628a:	6003      	str	r3, [r0, #0]
 800628c:	4646      	mov	r6, r8
 800628e:	b942      	cbnz	r2, 80062a2 <_strtol_l.constprop.0+0xe6>
 8006290:	4630      	mov	r0, r6
 8006292:	e79e      	b.n	80061d2 <_strtol_l.constprop.0+0x16>
 8006294:	b107      	cbz	r7, 8006298 <_strtol_l.constprop.0+0xdc>
 8006296:	4276      	negs	r6, r6
 8006298:	2a00      	cmp	r2, #0
 800629a:	d0f9      	beq.n	8006290 <_strtol_l.constprop.0+0xd4>
 800629c:	f1bc 0f00 	cmp.w	ip, #0
 80062a0:	d000      	beq.n	80062a4 <_strtol_l.constprop.0+0xe8>
 80062a2:	1e69      	subs	r1, r5, #1
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	e7f3      	b.n	8006290 <_strtol_l.constprop.0+0xd4>
 80062a8:	2430      	movs	r4, #48	; 0x30
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1b1      	bne.n	8006212 <_strtol_l.constprop.0+0x56>
 80062ae:	2308      	movs	r3, #8
 80062b0:	e7af      	b.n	8006212 <_strtol_l.constprop.0+0x56>
 80062b2:	2c30      	cmp	r4, #48	; 0x30
 80062b4:	d0a5      	beq.n	8006202 <_strtol_l.constprop.0+0x46>
 80062b6:	230a      	movs	r3, #10
 80062b8:	e7ab      	b.n	8006212 <_strtol_l.constprop.0+0x56>
 80062ba:	bf00      	nop
 80062bc:	0800a0e9 	.word	0x0800a0e9

080062c0 <strtol>:
 80062c0:	4613      	mov	r3, r2
 80062c2:	460a      	mov	r2, r1
 80062c4:	4601      	mov	r1, r0
 80062c6:	4802      	ldr	r0, [pc, #8]	; (80062d0 <strtol+0x10>)
 80062c8:	6800      	ldr	r0, [r0, #0]
 80062ca:	f7ff bf77 	b.w	80061bc <_strtol_l.constprop.0>
 80062ce:	bf00      	nop
 80062d0:	20000014 	.word	0x20000014

080062d4 <quorem>:
 80062d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	6903      	ldr	r3, [r0, #16]
 80062da:	690c      	ldr	r4, [r1, #16]
 80062dc:	42a3      	cmp	r3, r4
 80062de:	4607      	mov	r7, r0
 80062e0:	f2c0 8081 	blt.w	80063e6 <quorem+0x112>
 80062e4:	3c01      	subs	r4, #1
 80062e6:	f101 0814 	add.w	r8, r1, #20
 80062ea:	f100 0514 	add.w	r5, r0, #20
 80062ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062fc:	3301      	adds	r3, #1
 80062fe:	429a      	cmp	r2, r3
 8006300:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006308:	fbb2 f6f3 	udiv	r6, r2, r3
 800630c:	d331      	bcc.n	8006372 <quorem+0x9e>
 800630e:	f04f 0e00 	mov.w	lr, #0
 8006312:	4640      	mov	r0, r8
 8006314:	46ac      	mov	ip, r5
 8006316:	46f2      	mov	sl, lr
 8006318:	f850 2b04 	ldr.w	r2, [r0], #4
 800631c:	b293      	uxth	r3, r2
 800631e:	fb06 e303 	mla	r3, r6, r3, lr
 8006322:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006326:	b29b      	uxth	r3, r3
 8006328:	ebaa 0303 	sub.w	r3, sl, r3
 800632c:	f8dc a000 	ldr.w	sl, [ip]
 8006330:	0c12      	lsrs	r2, r2, #16
 8006332:	fa13 f38a 	uxtah	r3, r3, sl
 8006336:	fb06 e202 	mla	r2, r6, r2, lr
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	9b00      	ldr	r3, [sp, #0]
 800633e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006342:	b292      	uxth	r2, r2
 8006344:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800634c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006350:	4581      	cmp	r9, r0
 8006352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006356:	f84c 3b04 	str.w	r3, [ip], #4
 800635a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800635e:	d2db      	bcs.n	8006318 <quorem+0x44>
 8006360:	f855 300b 	ldr.w	r3, [r5, fp]
 8006364:	b92b      	cbnz	r3, 8006372 <quorem+0x9e>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	3b04      	subs	r3, #4
 800636a:	429d      	cmp	r5, r3
 800636c:	461a      	mov	r2, r3
 800636e:	d32e      	bcc.n	80063ce <quorem+0xfa>
 8006370:	613c      	str	r4, [r7, #16]
 8006372:	4638      	mov	r0, r7
 8006374:	f001 fc92 	bl	8007c9c <__mcmp>
 8006378:	2800      	cmp	r0, #0
 800637a:	db24      	blt.n	80063c6 <quorem+0xf2>
 800637c:	3601      	adds	r6, #1
 800637e:	4628      	mov	r0, r5
 8006380:	f04f 0c00 	mov.w	ip, #0
 8006384:	f858 2b04 	ldr.w	r2, [r8], #4
 8006388:	f8d0 e000 	ldr.w	lr, [r0]
 800638c:	b293      	uxth	r3, r2
 800638e:	ebac 0303 	sub.w	r3, ip, r3
 8006392:	0c12      	lsrs	r2, r2, #16
 8006394:	fa13 f38e 	uxtah	r3, r3, lr
 8006398:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800639c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063a6:	45c1      	cmp	r9, r8
 80063a8:	f840 3b04 	str.w	r3, [r0], #4
 80063ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063b0:	d2e8      	bcs.n	8006384 <quorem+0xb0>
 80063b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ba:	b922      	cbnz	r2, 80063c6 <quorem+0xf2>
 80063bc:	3b04      	subs	r3, #4
 80063be:	429d      	cmp	r5, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	d30a      	bcc.n	80063da <quorem+0x106>
 80063c4:	613c      	str	r4, [r7, #16]
 80063c6:	4630      	mov	r0, r6
 80063c8:	b003      	add	sp, #12
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	3b04      	subs	r3, #4
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d1cc      	bne.n	8006370 <quorem+0x9c>
 80063d6:	3c01      	subs	r4, #1
 80063d8:	e7c7      	b.n	800636a <quorem+0x96>
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	3b04      	subs	r3, #4
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d1f0      	bne.n	80063c4 <quorem+0xf0>
 80063e2:	3c01      	subs	r4, #1
 80063e4:	e7eb      	b.n	80063be <quorem+0xea>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e7ee      	b.n	80063c8 <quorem+0xf4>
 80063ea:	0000      	movs	r0, r0
 80063ec:	0000      	movs	r0, r0
	...

080063f0 <_dtoa_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	ed2d 8b04 	vpush	{d8-d9}
 80063f8:	ec57 6b10 	vmov	r6, r7, d0
 80063fc:	b093      	sub	sp, #76	; 0x4c
 80063fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006400:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006404:	9106      	str	r1, [sp, #24]
 8006406:	ee10 aa10 	vmov	sl, s0
 800640a:	4604      	mov	r4, r0
 800640c:	9209      	str	r2, [sp, #36]	; 0x24
 800640e:	930c      	str	r3, [sp, #48]	; 0x30
 8006410:	46bb      	mov	fp, r7
 8006412:	b975      	cbnz	r5, 8006432 <_dtoa_r+0x42>
 8006414:	2010      	movs	r0, #16
 8006416:	f001 f94d 	bl	80076b4 <malloc>
 800641a:	4602      	mov	r2, r0
 800641c:	6260      	str	r0, [r4, #36]	; 0x24
 800641e:	b920      	cbnz	r0, 800642a <_dtoa_r+0x3a>
 8006420:	4ba7      	ldr	r3, [pc, #668]	; (80066c0 <_dtoa_r+0x2d0>)
 8006422:	21ea      	movs	r1, #234	; 0xea
 8006424:	48a7      	ldr	r0, [pc, #668]	; (80066c4 <_dtoa_r+0x2d4>)
 8006426:	f002 f8bd 	bl	80085a4 <__assert_func>
 800642a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800642e:	6005      	str	r5, [r0, #0]
 8006430:	60c5      	str	r5, [r0, #12]
 8006432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	b151      	cbz	r1, 800644e <_dtoa_r+0x5e>
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	604a      	str	r2, [r1, #4]
 800643c:	2301      	movs	r3, #1
 800643e:	4093      	lsls	r3, r2
 8006440:	608b      	str	r3, [r1, #8]
 8006442:	4620      	mov	r0, r4
 8006444:	f001 f99e 	bl	8007784 <_Bfree>
 8006448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	1e3b      	subs	r3, r7, #0
 8006450:	bfaa      	itet	ge
 8006452:	2300      	movge	r3, #0
 8006454:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006458:	f8c8 3000 	strge.w	r3, [r8]
 800645c:	4b9a      	ldr	r3, [pc, #616]	; (80066c8 <_dtoa_r+0x2d8>)
 800645e:	bfbc      	itt	lt
 8006460:	2201      	movlt	r2, #1
 8006462:	f8c8 2000 	strlt.w	r2, [r8]
 8006466:	ea33 030b 	bics.w	r3, r3, fp
 800646a:	d11b      	bne.n	80064a4 <_dtoa_r+0xb4>
 800646c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800646e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006478:	4333      	orrs	r3, r6
 800647a:	f000 8592 	beq.w	8006fa2 <_dtoa_r+0xbb2>
 800647e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006480:	b963      	cbnz	r3, 800649c <_dtoa_r+0xac>
 8006482:	4b92      	ldr	r3, [pc, #584]	; (80066cc <_dtoa_r+0x2dc>)
 8006484:	e022      	b.n	80064cc <_dtoa_r+0xdc>
 8006486:	4b92      	ldr	r3, [pc, #584]	; (80066d0 <_dtoa_r+0x2e0>)
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	3308      	adds	r3, #8
 800648c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	9801      	ldr	r0, [sp, #4]
 8006492:	b013      	add	sp, #76	; 0x4c
 8006494:	ecbd 8b04 	vpop	{d8-d9}
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	4b8b      	ldr	r3, [pc, #556]	; (80066cc <_dtoa_r+0x2dc>)
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	3303      	adds	r3, #3
 80064a2:	e7f3      	b.n	800648c <_dtoa_r+0x9c>
 80064a4:	2200      	movs	r2, #0
 80064a6:	2300      	movs	r3, #0
 80064a8:	4650      	mov	r0, sl
 80064aa:	4659      	mov	r1, fp
 80064ac:	f7fa fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b0:	ec4b ab19 	vmov	d9, sl, fp
 80064b4:	4680      	mov	r8, r0
 80064b6:	b158      	cbz	r0, 80064d0 <_dtoa_r+0xe0>
 80064b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ba:	2301      	movs	r3, #1
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 856b 	beq.w	8006f9c <_dtoa_r+0xbac>
 80064c6:	4883      	ldr	r0, [pc, #524]	; (80066d4 <_dtoa_r+0x2e4>)
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	1e43      	subs	r3, r0, #1
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	e7df      	b.n	8006490 <_dtoa_r+0xa0>
 80064d0:	ec4b ab10 	vmov	d0, sl, fp
 80064d4:	aa10      	add	r2, sp, #64	; 0x40
 80064d6:	a911      	add	r1, sp, #68	; 0x44
 80064d8:	4620      	mov	r0, r4
 80064da:	f001 fd01 	bl	8007ee0 <__d2b>
 80064de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064e2:	ee08 0a10 	vmov	s16, r0
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	f000 8084 	beq.w	80065f4 <_dtoa_r+0x204>
 80064ec:	ee19 3a90 	vmov	r3, s19
 80064f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064f8:	4656      	mov	r6, sl
 80064fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006502:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006506:	4b74      	ldr	r3, [pc, #464]	; (80066d8 <_dtoa_r+0x2e8>)
 8006508:	2200      	movs	r2, #0
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7f9 febb 	bl	8000288 <__aeabi_dsub>
 8006512:	a365      	add	r3, pc, #404	; (adr r3, 80066a8 <_dtoa_r+0x2b8>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7fa f86e 	bl	80005f8 <__aeabi_dmul>
 800651c:	a364      	add	r3, pc, #400	; (adr r3, 80066b0 <_dtoa_r+0x2c0>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7f9 feb3 	bl	800028c <__adddf3>
 8006526:	4606      	mov	r6, r0
 8006528:	4628      	mov	r0, r5
 800652a:	460f      	mov	r7, r1
 800652c:	f7f9 fffa 	bl	8000524 <__aeabi_i2d>
 8006530:	a361      	add	r3, pc, #388	; (adr r3, 80066b8 <_dtoa_r+0x2c8>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7f9 fea3 	bl	800028c <__adddf3>
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	f7fa fb05 	bl	8000b58 <__aeabi_d2iz>
 800654e:	2200      	movs	r2, #0
 8006550:	9000      	str	r0, [sp, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7fa fac0 	bl	8000adc <__aeabi_dcmplt>
 800655c:	b150      	cbz	r0, 8006574 <_dtoa_r+0x184>
 800655e:	9800      	ldr	r0, [sp, #0]
 8006560:	f7f9 ffe0 	bl	8000524 <__aeabi_i2d>
 8006564:	4632      	mov	r2, r6
 8006566:	463b      	mov	r3, r7
 8006568:	f7fa faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800656c:	b910      	cbnz	r0, 8006574 <_dtoa_r+0x184>
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	3b01      	subs	r3, #1
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	2b16      	cmp	r3, #22
 8006578:	d85a      	bhi.n	8006630 <_dtoa_r+0x240>
 800657a:	9a00      	ldr	r2, [sp, #0]
 800657c:	4b57      	ldr	r3, [pc, #348]	; (80066dc <_dtoa_r+0x2ec>)
 800657e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	ec51 0b19 	vmov	r0, r1, d9
 800658a:	f7fa faa7 	bl	8000adc <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	d050      	beq.n	8006634 <_dtoa_r+0x244>
 8006592:	9b00      	ldr	r3, [sp, #0]
 8006594:	3b01      	subs	r3, #1
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	930b      	str	r3, [sp, #44]	; 0x2c
 800659c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800659e:	1b5d      	subs	r5, r3, r5
 80065a0:	1e6b      	subs	r3, r5, #1
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	bf45      	ittet	mi
 80065a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80065aa:	9304      	strmi	r3, [sp, #16]
 80065ac:	2300      	movpl	r3, #0
 80065ae:	2300      	movmi	r3, #0
 80065b0:	bf4c      	ite	mi
 80065b2:	9305      	strmi	r3, [sp, #20]
 80065b4:	9304      	strpl	r3, [sp, #16]
 80065b6:	9b00      	ldr	r3, [sp, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	db3d      	blt.n	8006638 <_dtoa_r+0x248>
 80065bc:	9b05      	ldr	r3, [sp, #20]
 80065be:	9a00      	ldr	r2, [sp, #0]
 80065c0:	920a      	str	r2, [sp, #40]	; 0x28
 80065c2:	4413      	add	r3, r2
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	2b09      	cmp	r3, #9
 80065ce:	f200 8089 	bhi.w	80066e4 <_dtoa_r+0x2f4>
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	bfc4      	itt	gt
 80065d6:	3b04      	subgt	r3, #4
 80065d8:	9306      	strgt	r3, [sp, #24]
 80065da:	9b06      	ldr	r3, [sp, #24]
 80065dc:	f1a3 0302 	sub.w	r3, r3, #2
 80065e0:	bfcc      	ite	gt
 80065e2:	2500      	movgt	r5, #0
 80065e4:	2501      	movle	r5, #1
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	f200 8087 	bhi.w	80066fa <_dtoa_r+0x30a>
 80065ec:	e8df f003 	tbb	[pc, r3]
 80065f0:	59383a2d 	.word	0x59383a2d
 80065f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065f8:	441d      	add	r5, r3
 80065fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065fe:	2b20      	cmp	r3, #32
 8006600:	bfc1      	itttt	gt
 8006602:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006606:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800660a:	fa0b f303 	lslgt.w	r3, fp, r3
 800660e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006612:	bfda      	itte	le
 8006614:	f1c3 0320 	rsble	r3, r3, #32
 8006618:	fa06 f003 	lslle.w	r0, r6, r3
 800661c:	4318      	orrgt	r0, r3
 800661e:	f7f9 ff71 	bl	8000504 <__aeabi_ui2d>
 8006622:	2301      	movs	r3, #1
 8006624:	4606      	mov	r6, r0
 8006626:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800662a:	3d01      	subs	r5, #1
 800662c:	930e      	str	r3, [sp, #56]	; 0x38
 800662e:	e76a      	b.n	8006506 <_dtoa_r+0x116>
 8006630:	2301      	movs	r3, #1
 8006632:	e7b2      	b.n	800659a <_dtoa_r+0x1aa>
 8006634:	900b      	str	r0, [sp, #44]	; 0x2c
 8006636:	e7b1      	b.n	800659c <_dtoa_r+0x1ac>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	9a00      	ldr	r2, [sp, #0]
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	4253      	negs	r3, r2
 8006642:	9307      	str	r3, [sp, #28]
 8006644:	2300      	movs	r3, #0
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	e7bf      	b.n	80065ca <_dtoa_r+0x1da>
 800664a:	2300      	movs	r3, #0
 800664c:	9308      	str	r3, [sp, #32]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	dc55      	bgt.n	8006700 <_dtoa_r+0x310>
 8006654:	2301      	movs	r3, #1
 8006656:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800665a:	461a      	mov	r2, r3
 800665c:	9209      	str	r2, [sp, #36]	; 0x24
 800665e:	e00c      	b.n	800667a <_dtoa_r+0x28a>
 8006660:	2301      	movs	r3, #1
 8006662:	e7f3      	b.n	800664c <_dtoa_r+0x25c>
 8006664:	2300      	movs	r3, #0
 8006666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006668:	9308      	str	r3, [sp, #32]
 800666a:	9b00      	ldr	r3, [sp, #0]
 800666c:	4413      	add	r3, r2
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	3301      	adds	r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	9303      	str	r3, [sp, #12]
 8006676:	bfb8      	it	lt
 8006678:	2301      	movlt	r3, #1
 800667a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800667c:	2200      	movs	r2, #0
 800667e:	6042      	str	r2, [r0, #4]
 8006680:	2204      	movs	r2, #4
 8006682:	f102 0614 	add.w	r6, r2, #20
 8006686:	429e      	cmp	r6, r3
 8006688:	6841      	ldr	r1, [r0, #4]
 800668a:	d93d      	bls.n	8006708 <_dtoa_r+0x318>
 800668c:	4620      	mov	r0, r4
 800668e:	f001 f839 	bl	8007704 <_Balloc>
 8006692:	9001      	str	r0, [sp, #4]
 8006694:	2800      	cmp	r0, #0
 8006696:	d13b      	bne.n	8006710 <_dtoa_r+0x320>
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <_dtoa_r+0x2f0>)
 800669a:	4602      	mov	r2, r0
 800669c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066a0:	e6c0      	b.n	8006424 <_dtoa_r+0x34>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e7df      	b.n	8006666 <_dtoa_r+0x276>
 80066a6:	bf00      	nop
 80066a8:	636f4361 	.word	0x636f4361
 80066ac:	3fd287a7 	.word	0x3fd287a7
 80066b0:	8b60c8b3 	.word	0x8b60c8b3
 80066b4:	3fc68a28 	.word	0x3fc68a28
 80066b8:	509f79fb 	.word	0x509f79fb
 80066bc:	3fd34413 	.word	0x3fd34413
 80066c0:	0800a1f6 	.word	0x0800a1f6
 80066c4:	0800a20d 	.word	0x0800a20d
 80066c8:	7ff00000 	.word	0x7ff00000
 80066cc:	0800a1f2 	.word	0x0800a1f2
 80066d0:	0800a1e9 	.word	0x0800a1e9
 80066d4:	0800a075 	.word	0x0800a075
 80066d8:	3ff80000 	.word	0x3ff80000
 80066dc:	0800a378 	.word	0x0800a378
 80066e0:	0800a268 	.word	0x0800a268
 80066e4:	2501      	movs	r5, #1
 80066e6:	2300      	movs	r3, #0
 80066e8:	9306      	str	r3, [sp, #24]
 80066ea:	9508      	str	r5, [sp, #32]
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295
 80066f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2312      	movs	r3, #18
 80066f8:	e7b0      	b.n	800665c <_dtoa_r+0x26c>
 80066fa:	2301      	movs	r3, #1
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	e7f5      	b.n	80066ec <_dtoa_r+0x2fc>
 8006700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006702:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006706:	e7b8      	b.n	800667a <_dtoa_r+0x28a>
 8006708:	3101      	adds	r1, #1
 800670a:	6041      	str	r1, [r0, #4]
 800670c:	0052      	lsls	r2, r2, #1
 800670e:	e7b8      	b.n	8006682 <_dtoa_r+0x292>
 8006710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006712:	9a01      	ldr	r2, [sp, #4]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	2b0e      	cmp	r3, #14
 800671a:	f200 809d 	bhi.w	8006858 <_dtoa_r+0x468>
 800671e:	2d00      	cmp	r5, #0
 8006720:	f000 809a 	beq.w	8006858 <_dtoa_r+0x468>
 8006724:	9b00      	ldr	r3, [sp, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	dd32      	ble.n	8006790 <_dtoa_r+0x3a0>
 800672a:	4ab7      	ldr	r2, [pc, #732]	; (8006a08 <_dtoa_r+0x618>)
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006738:	9b00      	ldr	r3, [sp, #0]
 800673a:	05d8      	lsls	r0, r3, #23
 800673c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006740:	d516      	bpl.n	8006770 <_dtoa_r+0x380>
 8006742:	4bb2      	ldr	r3, [pc, #712]	; (8006a0c <_dtoa_r+0x61c>)
 8006744:	ec51 0b19 	vmov	r0, r1, d9
 8006748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800674c:	f7fa f87e 	bl	800084c <__aeabi_ddiv>
 8006750:	f007 070f 	and.w	r7, r7, #15
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	2503      	movs	r5, #3
 800675a:	4eac      	ldr	r6, [pc, #688]	; (8006a0c <_dtoa_r+0x61c>)
 800675c:	b957      	cbnz	r7, 8006774 <_dtoa_r+0x384>
 800675e:	4642      	mov	r2, r8
 8006760:	464b      	mov	r3, r9
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	f7fa f871 	bl	800084c <__aeabi_ddiv>
 800676a:	4682      	mov	sl, r0
 800676c:	468b      	mov	fp, r1
 800676e:	e028      	b.n	80067c2 <_dtoa_r+0x3d2>
 8006770:	2502      	movs	r5, #2
 8006772:	e7f2      	b.n	800675a <_dtoa_r+0x36a>
 8006774:	07f9      	lsls	r1, r7, #31
 8006776:	d508      	bpl.n	800678a <_dtoa_r+0x39a>
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006780:	f7f9 ff3a 	bl	80005f8 <__aeabi_dmul>
 8006784:	3501      	adds	r5, #1
 8006786:	4680      	mov	r8, r0
 8006788:	4689      	mov	r9, r1
 800678a:	107f      	asrs	r7, r7, #1
 800678c:	3608      	adds	r6, #8
 800678e:	e7e5      	b.n	800675c <_dtoa_r+0x36c>
 8006790:	f000 809b 	beq.w	80068ca <_dtoa_r+0x4da>
 8006794:	9b00      	ldr	r3, [sp, #0]
 8006796:	4f9d      	ldr	r7, [pc, #628]	; (8006a0c <_dtoa_r+0x61c>)
 8006798:	425e      	negs	r6, r3
 800679a:	4b9b      	ldr	r3, [pc, #620]	; (8006a08 <_dtoa_r+0x618>)
 800679c:	f006 020f 	and.w	r2, r6, #15
 80067a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	ec51 0b19 	vmov	r0, r1, d9
 80067ac:	f7f9 ff24 	bl	80005f8 <__aeabi_dmul>
 80067b0:	1136      	asrs	r6, r6, #4
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	2300      	movs	r3, #0
 80067b8:	2502      	movs	r5, #2
 80067ba:	2e00      	cmp	r6, #0
 80067bc:	d17a      	bne.n	80068b4 <_dtoa_r+0x4c4>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1d3      	bne.n	800676a <_dtoa_r+0x37a>
 80067c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8082 	beq.w	80068ce <_dtoa_r+0x4de>
 80067ca:	4b91      	ldr	r3, [pc, #580]	; (8006a10 <_dtoa_r+0x620>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	4650      	mov	r0, sl
 80067d0:	4659      	mov	r1, fp
 80067d2:	f7fa f983 	bl	8000adc <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d079      	beq.n	80068ce <_dtoa_r+0x4de>
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d076      	beq.n	80068ce <_dtoa_r+0x4de>
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd36      	ble.n	8006854 <_dtoa_r+0x464>
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	4650      	mov	r0, sl
 80067ea:	4659      	mov	r1, fp
 80067ec:	1e5f      	subs	r7, r3, #1
 80067ee:	2200      	movs	r2, #0
 80067f0:	4b88      	ldr	r3, [pc, #544]	; (8006a14 <_dtoa_r+0x624>)
 80067f2:	f7f9 ff01 	bl	80005f8 <__aeabi_dmul>
 80067f6:	9e02      	ldr	r6, [sp, #8]
 80067f8:	4682      	mov	sl, r0
 80067fa:	468b      	mov	fp, r1
 80067fc:	3501      	adds	r5, #1
 80067fe:	4628      	mov	r0, r5
 8006800:	f7f9 fe90 	bl	8000524 <__aeabi_i2d>
 8006804:	4652      	mov	r2, sl
 8006806:	465b      	mov	r3, fp
 8006808:	f7f9 fef6 	bl	80005f8 <__aeabi_dmul>
 800680c:	4b82      	ldr	r3, [pc, #520]	; (8006a18 <_dtoa_r+0x628>)
 800680e:	2200      	movs	r2, #0
 8006810:	f7f9 fd3c 	bl	800028c <__adddf3>
 8006814:	46d0      	mov	r8, sl
 8006816:	46d9      	mov	r9, fp
 8006818:	4682      	mov	sl, r0
 800681a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800681e:	2e00      	cmp	r6, #0
 8006820:	d158      	bne.n	80068d4 <_dtoa_r+0x4e4>
 8006822:	4b7e      	ldr	r3, [pc, #504]	; (8006a1c <_dtoa_r+0x62c>)
 8006824:	2200      	movs	r2, #0
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f7f9 fd2d 	bl	8000288 <__aeabi_dsub>
 800682e:	4652      	mov	r2, sl
 8006830:	465b      	mov	r3, fp
 8006832:	4680      	mov	r8, r0
 8006834:	4689      	mov	r9, r1
 8006836:	f7fa f96f 	bl	8000b18 <__aeabi_dcmpgt>
 800683a:	2800      	cmp	r0, #0
 800683c:	f040 8295 	bne.w	8006d6a <_dtoa_r+0x97a>
 8006840:	4652      	mov	r2, sl
 8006842:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006846:	4640      	mov	r0, r8
 8006848:	4649      	mov	r1, r9
 800684a:	f7fa f947 	bl	8000adc <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	f040 8289 	bne.w	8006d66 <_dtoa_r+0x976>
 8006854:	ec5b ab19 	vmov	sl, fp, d9
 8006858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800685a:	2b00      	cmp	r3, #0
 800685c:	f2c0 8148 	blt.w	8006af0 <_dtoa_r+0x700>
 8006860:	9a00      	ldr	r2, [sp, #0]
 8006862:	2a0e      	cmp	r2, #14
 8006864:	f300 8144 	bgt.w	8006af0 <_dtoa_r+0x700>
 8006868:	4b67      	ldr	r3, [pc, #412]	; (8006a08 <_dtoa_r+0x618>)
 800686a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	f280 80d5 	bge.w	8006a24 <_dtoa_r+0x634>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f300 80d1 	bgt.w	8006a24 <_dtoa_r+0x634>
 8006882:	f040 826f 	bne.w	8006d64 <_dtoa_r+0x974>
 8006886:	4b65      	ldr	r3, [pc, #404]	; (8006a1c <_dtoa_r+0x62c>)
 8006888:	2200      	movs	r2, #0
 800688a:	4640      	mov	r0, r8
 800688c:	4649      	mov	r1, r9
 800688e:	f7f9 feb3 	bl	80005f8 <__aeabi_dmul>
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	f7fa f935 	bl	8000b04 <__aeabi_dcmpge>
 800689a:	9e03      	ldr	r6, [sp, #12]
 800689c:	4637      	mov	r7, r6
 800689e:	2800      	cmp	r0, #0
 80068a0:	f040 8245 	bne.w	8006d2e <_dtoa_r+0x93e>
 80068a4:	9d01      	ldr	r5, [sp, #4]
 80068a6:	2331      	movs	r3, #49	; 0x31
 80068a8:	f805 3b01 	strb.w	r3, [r5], #1
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	e240      	b.n	8006d36 <_dtoa_r+0x946>
 80068b4:	07f2      	lsls	r2, r6, #31
 80068b6:	d505      	bpl.n	80068c4 <_dtoa_r+0x4d4>
 80068b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068bc:	f7f9 fe9c 	bl	80005f8 <__aeabi_dmul>
 80068c0:	3501      	adds	r5, #1
 80068c2:	2301      	movs	r3, #1
 80068c4:	1076      	asrs	r6, r6, #1
 80068c6:	3708      	adds	r7, #8
 80068c8:	e777      	b.n	80067ba <_dtoa_r+0x3ca>
 80068ca:	2502      	movs	r5, #2
 80068cc:	e779      	b.n	80067c2 <_dtoa_r+0x3d2>
 80068ce:	9f00      	ldr	r7, [sp, #0]
 80068d0:	9e03      	ldr	r6, [sp, #12]
 80068d2:	e794      	b.n	80067fe <_dtoa_r+0x40e>
 80068d4:	9901      	ldr	r1, [sp, #4]
 80068d6:	4b4c      	ldr	r3, [pc, #304]	; (8006a08 <_dtoa_r+0x618>)
 80068d8:	4431      	add	r1, r6
 80068da:	910d      	str	r1, [sp, #52]	; 0x34
 80068dc:	9908      	ldr	r1, [sp, #32]
 80068de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d043      	beq.n	8006972 <_dtoa_r+0x582>
 80068ea:	494d      	ldr	r1, [pc, #308]	; (8006a20 <_dtoa_r+0x630>)
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7f9 ffad 	bl	800084c <__aeabi_ddiv>
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	f7f9 fcc7 	bl	8000288 <__aeabi_dsub>
 80068fa:	9d01      	ldr	r5, [sp, #4]
 80068fc:	4682      	mov	sl, r0
 80068fe:	468b      	mov	fp, r1
 8006900:	4649      	mov	r1, r9
 8006902:	4640      	mov	r0, r8
 8006904:	f7fa f928 	bl	8000b58 <__aeabi_d2iz>
 8006908:	4606      	mov	r6, r0
 800690a:	f7f9 fe0b 	bl	8000524 <__aeabi_i2d>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4640      	mov	r0, r8
 8006914:	4649      	mov	r1, r9
 8006916:	f7f9 fcb7 	bl	8000288 <__aeabi_dsub>
 800691a:	3630      	adds	r6, #48	; 0x30
 800691c:	f805 6b01 	strb.w	r6, [r5], #1
 8006920:	4652      	mov	r2, sl
 8006922:	465b      	mov	r3, fp
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	f7fa f8d8 	bl	8000adc <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	d163      	bne.n	80069f8 <_dtoa_r+0x608>
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	4936      	ldr	r1, [pc, #216]	; (8006a10 <_dtoa_r+0x620>)
 8006936:	2000      	movs	r0, #0
 8006938:	f7f9 fca6 	bl	8000288 <__aeabi_dsub>
 800693c:	4652      	mov	r2, sl
 800693e:	465b      	mov	r3, fp
 8006940:	f7fa f8cc 	bl	8000adc <__aeabi_dcmplt>
 8006944:	2800      	cmp	r0, #0
 8006946:	f040 80b5 	bne.w	8006ab4 <_dtoa_r+0x6c4>
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	429d      	cmp	r5, r3
 800694e:	d081      	beq.n	8006854 <_dtoa_r+0x464>
 8006950:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <_dtoa_r+0x624>)
 8006952:	2200      	movs	r2, #0
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7f9 fe4e 	bl	80005f8 <__aeabi_dmul>
 800695c:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <_dtoa_r+0x624>)
 800695e:	4682      	mov	sl, r0
 8006960:	468b      	mov	fp, r1
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	2200      	movs	r2, #0
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	e7c6      	b.n	8006900 <_dtoa_r+0x510>
 8006972:	4650      	mov	r0, sl
 8006974:	4659      	mov	r1, fp
 8006976:	f7f9 fe3f 	bl	80005f8 <__aeabi_dmul>
 800697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800697c:	9d01      	ldr	r5, [sp, #4]
 800697e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006980:	4682      	mov	sl, r0
 8006982:	468b      	mov	fp, r1
 8006984:	4649      	mov	r1, r9
 8006986:	4640      	mov	r0, r8
 8006988:	f7fa f8e6 	bl	8000b58 <__aeabi_d2iz>
 800698c:	4606      	mov	r6, r0
 800698e:	f7f9 fdc9 	bl	8000524 <__aeabi_i2d>
 8006992:	3630      	adds	r6, #48	; 0x30
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7f9 fc74 	bl	8000288 <__aeabi_dsub>
 80069a0:	f805 6b01 	strb.w	r6, [r5], #1
 80069a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a6:	429d      	cmp	r5, r3
 80069a8:	4680      	mov	r8, r0
 80069aa:	4689      	mov	r9, r1
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	d124      	bne.n	80069fc <_dtoa_r+0x60c>
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <_dtoa_r+0x630>)
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fc68 	bl	800028c <__adddf3>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7fa f8a8 	bl	8000b18 <__aeabi_dcmpgt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d173      	bne.n	8006ab4 <_dtoa_r+0x6c4>
 80069cc:	4652      	mov	r2, sl
 80069ce:	465b      	mov	r3, fp
 80069d0:	4913      	ldr	r1, [pc, #76]	; (8006a20 <_dtoa_r+0x630>)
 80069d2:	2000      	movs	r0, #0
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7fa f87c 	bl	8000adc <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f43f af35 	beq.w	8006854 <_dtoa_r+0x464>
 80069ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069ec:	1e6b      	subs	r3, r5, #1
 80069ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069f4:	2b30      	cmp	r3, #48	; 0x30
 80069f6:	d0f8      	beq.n	80069ea <_dtoa_r+0x5fa>
 80069f8:	9700      	str	r7, [sp, #0]
 80069fa:	e049      	b.n	8006a90 <_dtoa_r+0x6a0>
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <_dtoa_r+0x624>)
 80069fe:	f7f9 fdfb 	bl	80005f8 <__aeabi_dmul>
 8006a02:	4680      	mov	r8, r0
 8006a04:	4689      	mov	r9, r1
 8006a06:	e7bd      	b.n	8006984 <_dtoa_r+0x594>
 8006a08:	0800a378 	.word	0x0800a378
 8006a0c:	0800a350 	.word	0x0800a350
 8006a10:	3ff00000 	.word	0x3ff00000
 8006a14:	40240000 	.word	0x40240000
 8006a18:	401c0000 	.word	0x401c0000
 8006a1c:	40140000 	.word	0x40140000
 8006a20:	3fe00000 	.word	0x3fe00000
 8006a24:	9d01      	ldr	r5, [sp, #4]
 8006a26:	4656      	mov	r6, sl
 8006a28:	465f      	mov	r7, fp
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7f9 ff0b 	bl	800084c <__aeabi_ddiv>
 8006a36:	f7fa f88f 	bl	8000b58 <__aeabi_d2iz>
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	f7f9 fd72 	bl	8000524 <__aeabi_i2d>
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a54:	f7f9 fc18 	bl	8000288 <__aeabi_dsub>
 8006a58:	f805 6b01 	strb.w	r6, [r5], #1
 8006a5c:	9e01      	ldr	r6, [sp, #4]
 8006a5e:	9f03      	ldr	r7, [sp, #12]
 8006a60:	1bae      	subs	r6, r5, r6
 8006a62:	42b7      	cmp	r7, r6
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	d135      	bne.n	8006ad6 <_dtoa_r+0x6e6>
 8006a6a:	f7f9 fc0f 	bl	800028c <__adddf3>
 8006a6e:	4642      	mov	r2, r8
 8006a70:	464b      	mov	r3, r9
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	f7fa f84f 	bl	8000b18 <__aeabi_dcmpgt>
 8006a7a:	b9d0      	cbnz	r0, 8006ab2 <_dtoa_r+0x6c2>
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7fa f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a88:	b110      	cbz	r0, 8006a90 <_dtoa_r+0x6a0>
 8006a8a:	f01a 0f01 	tst.w	sl, #1
 8006a8e:	d110      	bne.n	8006ab2 <_dtoa_r+0x6c2>
 8006a90:	4620      	mov	r0, r4
 8006a92:	ee18 1a10 	vmov	r1, s16
 8006a96:	f000 fe75 	bl	8007784 <_Bfree>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9800      	ldr	r0, [sp, #0]
 8006a9e:	702b      	strb	r3, [r5, #0]
 8006aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	6018      	str	r0, [r3, #0]
 8006aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f43f acf1 	beq.w	8006490 <_dtoa_r+0xa0>
 8006aae:	601d      	str	r5, [r3, #0]
 8006ab0:	e4ee      	b.n	8006490 <_dtoa_r+0xa0>
 8006ab2:	9f00      	ldr	r7, [sp, #0]
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006abc:	2a39      	cmp	r2, #57	; 0x39
 8006abe:	d106      	bne.n	8006ace <_dtoa_r+0x6de>
 8006ac0:	9a01      	ldr	r2, [sp, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d1f7      	bne.n	8006ab6 <_dtoa_r+0x6c6>
 8006ac6:	9901      	ldr	r1, [sp, #4]
 8006ac8:	2230      	movs	r2, #48	; 0x30
 8006aca:	3701      	adds	r7, #1
 8006acc:	700a      	strb	r2, [r1, #0]
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	3201      	adds	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e790      	b.n	80069f8 <_dtoa_r+0x608>
 8006ad6:	4ba6      	ldr	r3, [pc, #664]	; (8006d70 <_dtoa_r+0x980>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f7f9 fd8d 	bl	80005f8 <__aeabi_dmul>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	f7f9 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d09d      	beq.n	8006a2a <_dtoa_r+0x63a>
 8006aee:	e7cf      	b.n	8006a90 <_dtoa_r+0x6a0>
 8006af0:	9a08      	ldr	r2, [sp, #32]
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	f000 80d7 	beq.w	8006ca6 <_dtoa_r+0x8b6>
 8006af8:	9a06      	ldr	r2, [sp, #24]
 8006afa:	2a01      	cmp	r2, #1
 8006afc:	f300 80ba 	bgt.w	8006c74 <_dtoa_r+0x884>
 8006b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	f000 80b2 	beq.w	8006c6c <_dtoa_r+0x87c>
 8006b08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b0c:	9e07      	ldr	r6, [sp, #28]
 8006b0e:	9d04      	ldr	r5, [sp, #16]
 8006b10:	9a04      	ldr	r2, [sp, #16]
 8006b12:	441a      	add	r2, r3
 8006b14:	9204      	str	r2, [sp, #16]
 8006b16:	9a05      	ldr	r2, [sp, #20]
 8006b18:	2101      	movs	r1, #1
 8006b1a:	441a      	add	r2, r3
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	9205      	str	r2, [sp, #20]
 8006b20:	f000 ff32 	bl	8007988 <__i2b>
 8006b24:	4607      	mov	r7, r0
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	dd0c      	ble.n	8006b44 <_dtoa_r+0x754>
 8006b2a:	9b05      	ldr	r3, [sp, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd09      	ble.n	8006b44 <_dtoa_r+0x754>
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	bfa8      	it	ge
 8006b36:	462b      	movge	r3, r5
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	9204      	str	r2, [sp, #16]
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	1aed      	subs	r5, r5, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	9b07      	ldr	r3, [sp, #28]
 8006b46:	b31b      	cbz	r3, 8006b90 <_dtoa_r+0x7a0>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80af 	beq.w	8006cae <_dtoa_r+0x8be>
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	dd13      	ble.n	8006b7c <_dtoa_r+0x78c>
 8006b54:	4639      	mov	r1, r7
 8006b56:	4632      	mov	r2, r6
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 ffd5 	bl	8007b08 <__pow5mult>
 8006b5e:	ee18 2a10 	vmov	r2, s16
 8006b62:	4601      	mov	r1, r0
 8006b64:	4607      	mov	r7, r0
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 ff24 	bl	80079b4 <__multiply>
 8006b6c:	ee18 1a10 	vmov	r1, s16
 8006b70:	4680      	mov	r8, r0
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fe06 	bl	8007784 <_Bfree>
 8006b78:	ee08 8a10 	vmov	s16, r8
 8006b7c:	9b07      	ldr	r3, [sp, #28]
 8006b7e:	1b9a      	subs	r2, r3, r6
 8006b80:	d006      	beq.n	8006b90 <_dtoa_r+0x7a0>
 8006b82:	ee18 1a10 	vmov	r1, s16
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 ffbe 	bl	8007b08 <__pow5mult>
 8006b8c:	ee08 0a10 	vmov	s16, r0
 8006b90:	2101      	movs	r1, #1
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fef8 	bl	8007988 <__i2b>
 8006b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	f340 8088 	ble.w	8006cb2 <_dtoa_r+0x8c2>
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 ffae 	bl	8007b08 <__pow5mult>
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	f340 8081 	ble.w	8006cb8 <_dtoa_r+0x8c8>
 8006bb6:	f04f 0800 	mov.w	r8, #0
 8006bba:	6933      	ldr	r3, [r6, #16]
 8006bbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bc0:	6918      	ldr	r0, [r3, #16]
 8006bc2:	f000 fe91 	bl	80078e8 <__hi0bits>
 8006bc6:	f1c0 0020 	rsb	r0, r0, #32
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	4418      	add	r0, r3
 8006bce:	f010 001f 	ands.w	r0, r0, #31
 8006bd2:	f000 8092 	beq.w	8006cfa <_dtoa_r+0x90a>
 8006bd6:	f1c0 0320 	rsb	r3, r0, #32
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	f340 808a 	ble.w	8006cf4 <_dtoa_r+0x904>
 8006be0:	f1c0 001c 	rsb	r0, r0, #28
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	4403      	add	r3, r0
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	4403      	add	r3, r0
 8006bee:	4405      	add	r5, r0
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dd07      	ble.n	8006c08 <_dtoa_r+0x818>
 8006bf8:	ee18 1a10 	vmov	r1, s16
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 ffdc 	bl	8007bbc <__lshift>
 8006c04:	ee08 0a10 	vmov	s16, r0
 8006c08:	9b05      	ldr	r3, [sp, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dd05      	ble.n	8006c1a <_dtoa_r+0x82a>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	461a      	mov	r2, r3
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 ffd2 	bl	8007bbc <__lshift>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06e      	beq.n	8006cfe <_dtoa_r+0x90e>
 8006c20:	ee18 0a10 	vmov	r0, s16
 8006c24:	4631      	mov	r1, r6
 8006c26:	f001 f839 	bl	8007c9c <__mcmp>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	da67      	bge.n	8006cfe <_dtoa_r+0x90e>
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	220a      	movs	r2, #10
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fdc3 	bl	80077c8 <__multadd>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	ee08 0a10 	vmov	s16, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 81b1 	beq.w	8006fb0 <_dtoa_r+0xbc0>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4639      	mov	r1, r7
 8006c52:	220a      	movs	r2, #10
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fdb7 	bl	80077c8 <__multadd>
 8006c5a:	9b02      	ldr	r3, [sp, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	4607      	mov	r7, r0
 8006c60:	f300 808e 	bgt.w	8006d80 <_dtoa_r+0x990>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	dc51      	bgt.n	8006d0e <_dtoa_r+0x91e>
 8006c6a:	e089      	b.n	8006d80 <_dtoa_r+0x990>
 8006c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c72:	e74b      	b.n	8006b0c <_dtoa_r+0x71c>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	1e5e      	subs	r6, r3, #1
 8006c78:	9b07      	ldr	r3, [sp, #28]
 8006c7a:	42b3      	cmp	r3, r6
 8006c7c:	bfbf      	itttt	lt
 8006c7e:	9b07      	ldrlt	r3, [sp, #28]
 8006c80:	9607      	strlt	r6, [sp, #28]
 8006c82:	1af2      	sublt	r2, r6, r3
 8006c84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c86:	bfb6      	itet	lt
 8006c88:	189b      	addlt	r3, r3, r2
 8006c8a:	1b9e      	subge	r6, r3, r6
 8006c8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	bfb8      	it	lt
 8006c92:	2600      	movlt	r6, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bfb7      	itett	lt
 8006c98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ca0:	1a9d      	sublt	r5, r3, r2
 8006ca2:	2300      	movlt	r3, #0
 8006ca4:	e734      	b.n	8006b10 <_dtoa_r+0x720>
 8006ca6:	9e07      	ldr	r6, [sp, #28]
 8006ca8:	9d04      	ldr	r5, [sp, #16]
 8006caa:	9f08      	ldr	r7, [sp, #32]
 8006cac:	e73b      	b.n	8006b26 <_dtoa_r+0x736>
 8006cae:	9a07      	ldr	r2, [sp, #28]
 8006cb0:	e767      	b.n	8006b82 <_dtoa_r+0x792>
 8006cb2:	9b06      	ldr	r3, [sp, #24]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	dc18      	bgt.n	8006cea <_dtoa_r+0x8fa>
 8006cb8:	f1ba 0f00 	cmp.w	sl, #0
 8006cbc:	d115      	bne.n	8006cea <_dtoa_r+0x8fa>
 8006cbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cc2:	b993      	cbnz	r3, 8006cea <_dtoa_r+0x8fa>
 8006cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cc8:	0d1b      	lsrs	r3, r3, #20
 8006cca:	051b      	lsls	r3, r3, #20
 8006ccc:	b183      	cbz	r3, 8006cf0 <_dtoa_r+0x900>
 8006cce:	9b04      	ldr	r3, [sp, #16]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	9b05      	ldr	r3, [sp, #20]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	f04f 0801 	mov.w	r8, #1
 8006cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af6a 	bne.w	8006bba <_dtoa_r+0x7ca>
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e76f      	b.n	8006bca <_dtoa_r+0x7da>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	e7f6      	b.n	8006cde <_dtoa_r+0x8ee>
 8006cf0:	4698      	mov	r8, r3
 8006cf2:	e7f4      	b.n	8006cde <_dtoa_r+0x8ee>
 8006cf4:	f43f af7d 	beq.w	8006bf2 <_dtoa_r+0x802>
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	301c      	adds	r0, #28
 8006cfc:	e772      	b.n	8006be4 <_dtoa_r+0x7f4>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	dc37      	bgt.n	8006d74 <_dtoa_r+0x984>
 8006d04:	9b06      	ldr	r3, [sp, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dd34      	ble.n	8006d74 <_dtoa_r+0x984>
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	9302      	str	r3, [sp, #8]
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	b96b      	cbnz	r3, 8006d2e <_dtoa_r+0x93e>
 8006d12:	4631      	mov	r1, r6
 8006d14:	2205      	movs	r2, #5
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fd56 	bl	80077c8 <__multadd>
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4606      	mov	r6, r0
 8006d20:	ee18 0a10 	vmov	r0, s16
 8006d24:	f000 ffba 	bl	8007c9c <__mcmp>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f73f adbb 	bgt.w	80068a4 <_dtoa_r+0x4b4>
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	9d01      	ldr	r5, [sp, #4]
 8006d32:	43db      	mvns	r3, r3
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	f04f 0800 	mov.w	r8, #0
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fd21 	bl	8007784 <_Bfree>
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	f43f aea4 	beq.w	8006a90 <_dtoa_r+0x6a0>
 8006d48:	f1b8 0f00 	cmp.w	r8, #0
 8006d4c:	d005      	beq.n	8006d5a <_dtoa_r+0x96a>
 8006d4e:	45b8      	cmp	r8, r7
 8006d50:	d003      	beq.n	8006d5a <_dtoa_r+0x96a>
 8006d52:	4641      	mov	r1, r8
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 fd15 	bl	8007784 <_Bfree>
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fd11 	bl	8007784 <_Bfree>
 8006d62:	e695      	b.n	8006a90 <_dtoa_r+0x6a0>
 8006d64:	2600      	movs	r6, #0
 8006d66:	4637      	mov	r7, r6
 8006d68:	e7e1      	b.n	8006d2e <_dtoa_r+0x93e>
 8006d6a:	9700      	str	r7, [sp, #0]
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	e599      	b.n	80068a4 <_dtoa_r+0x4b4>
 8006d70:	40240000 	.word	0x40240000
 8006d74:	9b08      	ldr	r3, [sp, #32]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80ca 	beq.w	8006f10 <_dtoa_r+0xb20>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	9302      	str	r3, [sp, #8]
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	dd05      	ble.n	8006d90 <_dtoa_r+0x9a0>
 8006d84:	4639      	mov	r1, r7
 8006d86:	462a      	mov	r2, r5
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 ff17 	bl	8007bbc <__lshift>
 8006d8e:	4607      	mov	r7, r0
 8006d90:	f1b8 0f00 	cmp.w	r8, #0
 8006d94:	d05b      	beq.n	8006e4e <_dtoa_r+0xa5e>
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fcb3 	bl	8007704 <_Balloc>
 8006d9e:	4605      	mov	r5, r0
 8006da0:	b928      	cbnz	r0, 8006dae <_dtoa_r+0x9be>
 8006da2:	4b87      	ldr	r3, [pc, #540]	; (8006fc0 <_dtoa_r+0xbd0>)
 8006da4:	4602      	mov	r2, r0
 8006da6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006daa:	f7ff bb3b 	b.w	8006424 <_dtoa_r+0x34>
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	3202      	adds	r2, #2
 8006db2:	0092      	lsls	r2, r2, #2
 8006db4:	f107 010c 	add.w	r1, r7, #12
 8006db8:	300c      	adds	r0, #12
 8006dba:	f000 fc95 	bl	80076e8 <memcpy>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fefa 	bl	8007bbc <__lshift>
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	f103 0901 	add.w	r9, r3, #1
 8006dce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	f00a 0301 	and.w	r3, sl, #1
 8006dda:	46b8      	mov	r8, r7
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	4607      	mov	r7, r0
 8006de0:	4631      	mov	r1, r6
 8006de2:	ee18 0a10 	vmov	r0, s16
 8006de6:	f7ff fa75 	bl	80062d4 <quorem>
 8006dea:	4641      	mov	r1, r8
 8006dec:	9002      	str	r0, [sp, #8]
 8006dee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006df2:	ee18 0a10 	vmov	r0, s16
 8006df6:	f000 ff51 	bl	8007c9c <__mcmp>
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	9003      	str	r0, [sp, #12]
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 ff67 	bl	8007cd4 <__mdiff>
 8006e06:	68c2      	ldr	r2, [r0, #12]
 8006e08:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	bb02      	cbnz	r2, 8006e52 <_dtoa_r+0xa62>
 8006e10:	4601      	mov	r1, r0
 8006e12:	ee18 0a10 	vmov	r0, s16
 8006e16:	f000 ff41 	bl	8007c9c <__mcmp>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4620      	mov	r0, r4
 8006e20:	9207      	str	r2, [sp, #28]
 8006e22:	f000 fcaf 	bl	8007784 <_Bfree>
 8006e26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e2a:	ea43 0102 	orr.w	r1, r3, r2
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	430b      	orrs	r3, r1
 8006e32:	464d      	mov	r5, r9
 8006e34:	d10f      	bne.n	8006e56 <_dtoa_r+0xa66>
 8006e36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e3a:	d02a      	beq.n	8006e92 <_dtoa_r+0xaa2>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dd02      	ble.n	8006e48 <_dtoa_r+0xa58>
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e48:	f88b a000 	strb.w	sl, [fp]
 8006e4c:	e775      	b.n	8006d3a <_dtoa_r+0x94a>
 8006e4e:	4638      	mov	r0, r7
 8006e50:	e7ba      	b.n	8006dc8 <_dtoa_r+0x9d8>
 8006e52:	2201      	movs	r2, #1
 8006e54:	e7e2      	b.n	8006e1c <_dtoa_r+0xa2c>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db04      	blt.n	8006e66 <_dtoa_r+0xa76>
 8006e5c:	9906      	ldr	r1, [sp, #24]
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	9904      	ldr	r1, [sp, #16]
 8006e62:	430b      	orrs	r3, r1
 8006e64:	d122      	bne.n	8006eac <_dtoa_r+0xabc>
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	ddee      	ble.n	8006e48 <_dtoa_r+0xa58>
 8006e6a:	ee18 1a10 	vmov	r1, s16
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fea3 	bl	8007bbc <__lshift>
 8006e76:	4631      	mov	r1, r6
 8006e78:	ee08 0a10 	vmov	s16, r0
 8006e7c:	f000 ff0e 	bl	8007c9c <__mcmp>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	dc03      	bgt.n	8006e8c <_dtoa_r+0xa9c>
 8006e84:	d1e0      	bne.n	8006e48 <_dtoa_r+0xa58>
 8006e86:	f01a 0f01 	tst.w	sl, #1
 8006e8a:	d0dd      	beq.n	8006e48 <_dtoa_r+0xa58>
 8006e8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e90:	d1d7      	bne.n	8006e42 <_dtoa_r+0xa52>
 8006e92:	2339      	movs	r3, #57	; 0x39
 8006e94:	f88b 3000 	strb.w	r3, [fp]
 8006e98:	462b      	mov	r3, r5
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ea2:	2a39      	cmp	r2, #57	; 0x39
 8006ea4:	d071      	beq.n	8006f8a <_dtoa_r+0xb9a>
 8006ea6:	3201      	adds	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e746      	b.n	8006d3a <_dtoa_r+0x94a>
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	dd07      	ble.n	8006ec0 <_dtoa_r+0xad0>
 8006eb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eb4:	d0ed      	beq.n	8006e92 <_dtoa_r+0xaa2>
 8006eb6:	f10a 0301 	add.w	r3, sl, #1
 8006eba:	f88b 3000 	strb.w	r3, [fp]
 8006ebe:	e73c      	b.n	8006d3a <_dtoa_r+0x94a>
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006ec6:	4599      	cmp	r9, r3
 8006ec8:	d047      	beq.n	8006f5a <_dtoa_r+0xb6a>
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2300      	movs	r3, #0
 8006ed0:	220a      	movs	r2, #10
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 fc78 	bl	80077c8 <__multadd>
 8006ed8:	45b8      	cmp	r8, r7
 8006eda:	ee08 0a10 	vmov	s16, r0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	f04f 020a 	mov.w	r2, #10
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	4620      	mov	r0, r4
 8006eea:	d106      	bne.n	8006efa <_dtoa_r+0xb0a>
 8006eec:	f000 fc6c 	bl	80077c8 <__multadd>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	f109 0901 	add.w	r9, r9, #1
 8006ef8:	e772      	b.n	8006de0 <_dtoa_r+0x9f0>
 8006efa:	f000 fc65 	bl	80077c8 <__multadd>
 8006efe:	4639      	mov	r1, r7
 8006f00:	4680      	mov	r8, r0
 8006f02:	2300      	movs	r3, #0
 8006f04:	220a      	movs	r2, #10
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 fc5e 	bl	80077c8 <__multadd>
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	e7f1      	b.n	8006ef4 <_dtoa_r+0xb04>
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	9302      	str	r3, [sp, #8]
 8006f14:	9d01      	ldr	r5, [sp, #4]
 8006f16:	ee18 0a10 	vmov	r0, s16
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	f7ff f9da 	bl	80062d4 <quorem>
 8006f20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	f805 ab01 	strb.w	sl, [r5], #1
 8006f2a:	1aea      	subs	r2, r5, r3
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	dd09      	ble.n	8006f46 <_dtoa_r+0xb56>
 8006f32:	ee18 1a10 	vmov	r1, s16
 8006f36:	2300      	movs	r3, #0
 8006f38:	220a      	movs	r2, #10
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 fc44 	bl	80077c8 <__multadd>
 8006f40:	ee08 0a10 	vmov	s16, r0
 8006f44:	e7e7      	b.n	8006f16 <_dtoa_r+0xb26>
 8006f46:	9b02      	ldr	r3, [sp, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bfc8      	it	gt
 8006f4c:	461d      	movgt	r5, r3
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	bfd8      	it	le
 8006f52:	2501      	movle	r5, #1
 8006f54:	441d      	add	r5, r3
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	ee18 1a10 	vmov	r1, s16
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fe2b 	bl	8007bbc <__lshift>
 8006f66:	4631      	mov	r1, r6
 8006f68:	ee08 0a10 	vmov	s16, r0
 8006f6c:	f000 fe96 	bl	8007c9c <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	dc91      	bgt.n	8006e98 <_dtoa_r+0xaa8>
 8006f74:	d102      	bne.n	8006f7c <_dtoa_r+0xb8c>
 8006f76:	f01a 0f01 	tst.w	sl, #1
 8006f7a:	d18d      	bne.n	8006e98 <_dtoa_r+0xaa8>
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	461d      	mov	r5, r3
 8006f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f84:	2a30      	cmp	r2, #48	; 0x30
 8006f86:	d0fa      	beq.n	8006f7e <_dtoa_r+0xb8e>
 8006f88:	e6d7      	b.n	8006d3a <_dtoa_r+0x94a>
 8006f8a:	9a01      	ldr	r2, [sp, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d184      	bne.n	8006e9a <_dtoa_r+0xaaa>
 8006f90:	9b00      	ldr	r3, [sp, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	2331      	movs	r3, #49	; 0x31
 8006f98:	7013      	strb	r3, [r2, #0]
 8006f9a:	e6ce      	b.n	8006d3a <_dtoa_r+0x94a>
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <_dtoa_r+0xbd4>)
 8006f9e:	f7ff ba95 	b.w	80064cc <_dtoa_r+0xdc>
 8006fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f aa6e 	bne.w	8006486 <_dtoa_r+0x96>
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <_dtoa_r+0xbd8>)
 8006fac:	f7ff ba8e 	b.w	80064cc <_dtoa_r+0xdc>
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dcae      	bgt.n	8006f14 <_dtoa_r+0xb24>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	f73f aea8 	bgt.w	8006d0e <_dtoa_r+0x91e>
 8006fbe:	e7a9      	b.n	8006f14 <_dtoa_r+0xb24>
 8006fc0:	0800a268 	.word	0x0800a268
 8006fc4:	0800a074 	.word	0x0800a074
 8006fc8:	0800a1e9 	.word	0x0800a1e9

08006fcc <rshift>:
 8006fcc:	6903      	ldr	r3, [r0, #16]
 8006fce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006fda:	f100 0414 	add.w	r4, r0, #20
 8006fde:	dd45      	ble.n	800706c <rshift+0xa0>
 8006fe0:	f011 011f 	ands.w	r1, r1, #31
 8006fe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006fe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006fec:	d10c      	bne.n	8007008 <rshift+0x3c>
 8006fee:	f100 0710 	add.w	r7, r0, #16
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	42b1      	cmp	r1, r6
 8006ff6:	d334      	bcc.n	8007062 <rshift+0x96>
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	1eea      	subs	r2, r5, #3
 8006ffe:	4296      	cmp	r6, r2
 8007000:	bf38      	it	cc
 8007002:	2300      	movcc	r3, #0
 8007004:	4423      	add	r3, r4
 8007006:	e015      	b.n	8007034 <rshift+0x68>
 8007008:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800700c:	f1c1 0820 	rsb	r8, r1, #32
 8007010:	40cf      	lsrs	r7, r1
 8007012:	f105 0e04 	add.w	lr, r5, #4
 8007016:	46a1      	mov	r9, r4
 8007018:	4576      	cmp	r6, lr
 800701a:	46f4      	mov	ip, lr
 800701c:	d815      	bhi.n	800704a <rshift+0x7e>
 800701e:	1a9a      	subs	r2, r3, r2
 8007020:	0092      	lsls	r2, r2, #2
 8007022:	3a04      	subs	r2, #4
 8007024:	3501      	adds	r5, #1
 8007026:	42ae      	cmp	r6, r5
 8007028:	bf38      	it	cc
 800702a:	2200      	movcc	r2, #0
 800702c:	18a3      	adds	r3, r4, r2
 800702e:	50a7      	str	r7, [r4, r2]
 8007030:	b107      	cbz	r7, 8007034 <rshift+0x68>
 8007032:	3304      	adds	r3, #4
 8007034:	1b1a      	subs	r2, r3, r4
 8007036:	42a3      	cmp	r3, r4
 8007038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800703c:	bf08      	it	eq
 800703e:	2300      	moveq	r3, #0
 8007040:	6102      	str	r2, [r0, #16]
 8007042:	bf08      	it	eq
 8007044:	6143      	streq	r3, [r0, #20]
 8007046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800704a:	f8dc c000 	ldr.w	ip, [ip]
 800704e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007052:	ea4c 0707 	orr.w	r7, ip, r7
 8007056:	f849 7b04 	str.w	r7, [r9], #4
 800705a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800705e:	40cf      	lsrs	r7, r1
 8007060:	e7da      	b.n	8007018 <rshift+0x4c>
 8007062:	f851 cb04 	ldr.w	ip, [r1], #4
 8007066:	f847 cf04 	str.w	ip, [r7, #4]!
 800706a:	e7c3      	b.n	8006ff4 <rshift+0x28>
 800706c:	4623      	mov	r3, r4
 800706e:	e7e1      	b.n	8007034 <rshift+0x68>

08007070 <__hexdig_fun>:
 8007070:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007074:	2b09      	cmp	r3, #9
 8007076:	d802      	bhi.n	800707e <__hexdig_fun+0xe>
 8007078:	3820      	subs	r0, #32
 800707a:	b2c0      	uxtb	r0, r0
 800707c:	4770      	bx	lr
 800707e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007082:	2b05      	cmp	r3, #5
 8007084:	d801      	bhi.n	800708a <__hexdig_fun+0x1a>
 8007086:	3847      	subs	r0, #71	; 0x47
 8007088:	e7f7      	b.n	800707a <__hexdig_fun+0xa>
 800708a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800708e:	2b05      	cmp	r3, #5
 8007090:	d801      	bhi.n	8007096 <__hexdig_fun+0x26>
 8007092:	3827      	subs	r0, #39	; 0x27
 8007094:	e7f1      	b.n	800707a <__hexdig_fun+0xa>
 8007096:	2000      	movs	r0, #0
 8007098:	4770      	bx	lr
	...

0800709c <__gethex>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	ed2d 8b02 	vpush	{d8}
 80070a4:	b089      	sub	sp, #36	; 0x24
 80070a6:	ee08 0a10 	vmov	s16, r0
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	4bb4      	ldr	r3, [pc, #720]	; (8007380 <__gethex+0x2e4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	4618      	mov	r0, r3
 80070b4:	468b      	mov	fp, r1
 80070b6:	4690      	mov	r8, r2
 80070b8:	f7f9 f88a 	bl	80001d0 <strlen>
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	f8db 2000 	ldr.w	r2, [fp]
 80070c2:	4403      	add	r3, r0
 80070c4:	4682      	mov	sl, r0
 80070c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	1c93      	adds	r3, r2, #2
 80070ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80070d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80070d6:	32fe      	adds	r2, #254	; 0xfe
 80070d8:	18d1      	adds	r1, r2, r3
 80070da:	461f      	mov	r7, r3
 80070dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80070e0:	9100      	str	r1, [sp, #0]
 80070e2:	2830      	cmp	r0, #48	; 0x30
 80070e4:	d0f8      	beq.n	80070d8 <__gethex+0x3c>
 80070e6:	f7ff ffc3 	bl	8007070 <__hexdig_fun>
 80070ea:	4604      	mov	r4, r0
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d13a      	bne.n	8007166 <__gethex+0xca>
 80070f0:	9901      	ldr	r1, [sp, #4]
 80070f2:	4652      	mov	r2, sl
 80070f4:	4638      	mov	r0, r7
 80070f6:	f001 fa33 	bl	8008560 <strncmp>
 80070fa:	4605      	mov	r5, r0
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d168      	bne.n	80071d2 <__gethex+0x136>
 8007100:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007104:	eb07 060a 	add.w	r6, r7, sl
 8007108:	f7ff ffb2 	bl	8007070 <__hexdig_fun>
 800710c:	2800      	cmp	r0, #0
 800710e:	d062      	beq.n	80071d6 <__gethex+0x13a>
 8007110:	4633      	mov	r3, r6
 8007112:	7818      	ldrb	r0, [r3, #0]
 8007114:	2830      	cmp	r0, #48	; 0x30
 8007116:	461f      	mov	r7, r3
 8007118:	f103 0301 	add.w	r3, r3, #1
 800711c:	d0f9      	beq.n	8007112 <__gethex+0x76>
 800711e:	f7ff ffa7 	bl	8007070 <__hexdig_fun>
 8007122:	2301      	movs	r3, #1
 8007124:	fab0 f480 	clz	r4, r0
 8007128:	0964      	lsrs	r4, r4, #5
 800712a:	4635      	mov	r5, r6
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	463a      	mov	r2, r7
 8007130:	4616      	mov	r6, r2
 8007132:	3201      	adds	r2, #1
 8007134:	7830      	ldrb	r0, [r6, #0]
 8007136:	f7ff ff9b 	bl	8007070 <__hexdig_fun>
 800713a:	2800      	cmp	r0, #0
 800713c:	d1f8      	bne.n	8007130 <__gethex+0x94>
 800713e:	9901      	ldr	r1, [sp, #4]
 8007140:	4652      	mov	r2, sl
 8007142:	4630      	mov	r0, r6
 8007144:	f001 fa0c 	bl	8008560 <strncmp>
 8007148:	b980      	cbnz	r0, 800716c <__gethex+0xd0>
 800714a:	b94d      	cbnz	r5, 8007160 <__gethex+0xc4>
 800714c:	eb06 050a 	add.w	r5, r6, sl
 8007150:	462a      	mov	r2, r5
 8007152:	4616      	mov	r6, r2
 8007154:	3201      	adds	r2, #1
 8007156:	7830      	ldrb	r0, [r6, #0]
 8007158:	f7ff ff8a 	bl	8007070 <__hexdig_fun>
 800715c:	2800      	cmp	r0, #0
 800715e:	d1f8      	bne.n	8007152 <__gethex+0xb6>
 8007160:	1bad      	subs	r5, r5, r6
 8007162:	00ad      	lsls	r5, r5, #2
 8007164:	e004      	b.n	8007170 <__gethex+0xd4>
 8007166:	2400      	movs	r4, #0
 8007168:	4625      	mov	r5, r4
 800716a:	e7e0      	b.n	800712e <__gethex+0x92>
 800716c:	2d00      	cmp	r5, #0
 800716e:	d1f7      	bne.n	8007160 <__gethex+0xc4>
 8007170:	7833      	ldrb	r3, [r6, #0]
 8007172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007176:	2b50      	cmp	r3, #80	; 0x50
 8007178:	d13b      	bne.n	80071f2 <__gethex+0x156>
 800717a:	7873      	ldrb	r3, [r6, #1]
 800717c:	2b2b      	cmp	r3, #43	; 0x2b
 800717e:	d02c      	beq.n	80071da <__gethex+0x13e>
 8007180:	2b2d      	cmp	r3, #45	; 0x2d
 8007182:	d02e      	beq.n	80071e2 <__gethex+0x146>
 8007184:	1c71      	adds	r1, r6, #1
 8007186:	f04f 0900 	mov.w	r9, #0
 800718a:	7808      	ldrb	r0, [r1, #0]
 800718c:	f7ff ff70 	bl	8007070 <__hexdig_fun>
 8007190:	1e43      	subs	r3, r0, #1
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b18      	cmp	r3, #24
 8007196:	d82c      	bhi.n	80071f2 <__gethex+0x156>
 8007198:	f1a0 0210 	sub.w	r2, r0, #16
 800719c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071a0:	f7ff ff66 	bl	8007070 <__hexdig_fun>
 80071a4:	1e43      	subs	r3, r0, #1
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b18      	cmp	r3, #24
 80071aa:	d91d      	bls.n	80071e8 <__gethex+0x14c>
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	d000      	beq.n	80071b4 <__gethex+0x118>
 80071b2:	4252      	negs	r2, r2
 80071b4:	4415      	add	r5, r2
 80071b6:	f8cb 1000 	str.w	r1, [fp]
 80071ba:	b1e4      	cbz	r4, 80071f6 <__gethex+0x15a>
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2700      	movne	r7, #0
 80071c4:	2706      	moveq	r7, #6
 80071c6:	4638      	mov	r0, r7
 80071c8:	b009      	add	sp, #36	; 0x24
 80071ca:	ecbd 8b02 	vpop	{d8}
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	463e      	mov	r6, r7
 80071d4:	4625      	mov	r5, r4
 80071d6:	2401      	movs	r4, #1
 80071d8:	e7ca      	b.n	8007170 <__gethex+0xd4>
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	1cb1      	adds	r1, r6, #2
 80071e0:	e7d3      	b.n	800718a <__gethex+0xee>
 80071e2:	f04f 0901 	mov.w	r9, #1
 80071e6:	e7fa      	b.n	80071de <__gethex+0x142>
 80071e8:	230a      	movs	r3, #10
 80071ea:	fb03 0202 	mla	r2, r3, r2, r0
 80071ee:	3a10      	subs	r2, #16
 80071f0:	e7d4      	b.n	800719c <__gethex+0x100>
 80071f2:	4631      	mov	r1, r6
 80071f4:	e7df      	b.n	80071b6 <__gethex+0x11a>
 80071f6:	1bf3      	subs	r3, r6, r7
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4621      	mov	r1, r4
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	dc0b      	bgt.n	8007218 <__gethex+0x17c>
 8007200:	ee18 0a10 	vmov	r0, s16
 8007204:	f000 fa7e 	bl	8007704 <_Balloc>
 8007208:	4604      	mov	r4, r0
 800720a:	b940      	cbnz	r0, 800721e <__gethex+0x182>
 800720c:	4b5d      	ldr	r3, [pc, #372]	; (8007384 <__gethex+0x2e8>)
 800720e:	4602      	mov	r2, r0
 8007210:	21de      	movs	r1, #222	; 0xde
 8007212:	485d      	ldr	r0, [pc, #372]	; (8007388 <__gethex+0x2ec>)
 8007214:	f001 f9c6 	bl	80085a4 <__assert_func>
 8007218:	3101      	adds	r1, #1
 800721a:	105b      	asrs	r3, r3, #1
 800721c:	e7ee      	b.n	80071fc <__gethex+0x160>
 800721e:	f100 0914 	add.w	r9, r0, #20
 8007222:	f04f 0b00 	mov.w	fp, #0
 8007226:	f1ca 0301 	rsb	r3, sl, #1
 800722a:	f8cd 9008 	str.w	r9, [sp, #8]
 800722e:	f8cd b000 	str.w	fp, [sp]
 8007232:	9306      	str	r3, [sp, #24]
 8007234:	42b7      	cmp	r7, r6
 8007236:	d340      	bcc.n	80072ba <__gethex+0x21e>
 8007238:	9802      	ldr	r0, [sp, #8]
 800723a:	9b00      	ldr	r3, [sp, #0]
 800723c:	f840 3b04 	str.w	r3, [r0], #4
 8007240:	eba0 0009 	sub.w	r0, r0, r9
 8007244:	1080      	asrs	r0, r0, #2
 8007246:	0146      	lsls	r6, r0, #5
 8007248:	6120      	str	r0, [r4, #16]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fb4c 	bl	80078e8 <__hi0bits>
 8007250:	1a30      	subs	r0, r6, r0
 8007252:	f8d8 6000 	ldr.w	r6, [r8]
 8007256:	42b0      	cmp	r0, r6
 8007258:	dd63      	ble.n	8007322 <__gethex+0x286>
 800725a:	1b87      	subs	r7, r0, r6
 800725c:	4639      	mov	r1, r7
 800725e:	4620      	mov	r0, r4
 8007260:	f000 fef0 	bl	8008044 <__any_on>
 8007264:	4682      	mov	sl, r0
 8007266:	b1a8      	cbz	r0, 8007294 <__gethex+0x1f8>
 8007268:	1e7b      	subs	r3, r7, #1
 800726a:	1159      	asrs	r1, r3, #5
 800726c:	f003 021f 	and.w	r2, r3, #31
 8007270:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007274:	f04f 0a01 	mov.w	sl, #1
 8007278:	fa0a f202 	lsl.w	r2, sl, r2
 800727c:	420a      	tst	r2, r1
 800727e:	d009      	beq.n	8007294 <__gethex+0x1f8>
 8007280:	4553      	cmp	r3, sl
 8007282:	dd05      	ble.n	8007290 <__gethex+0x1f4>
 8007284:	1eb9      	subs	r1, r7, #2
 8007286:	4620      	mov	r0, r4
 8007288:	f000 fedc 	bl	8008044 <__any_on>
 800728c:	2800      	cmp	r0, #0
 800728e:	d145      	bne.n	800731c <__gethex+0x280>
 8007290:	f04f 0a02 	mov.w	sl, #2
 8007294:	4639      	mov	r1, r7
 8007296:	4620      	mov	r0, r4
 8007298:	f7ff fe98 	bl	8006fcc <rshift>
 800729c:	443d      	add	r5, r7
 800729e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072a2:	42ab      	cmp	r3, r5
 80072a4:	da4c      	bge.n	8007340 <__gethex+0x2a4>
 80072a6:	ee18 0a10 	vmov	r0, s16
 80072aa:	4621      	mov	r1, r4
 80072ac:	f000 fa6a 	bl	8007784 <_Bfree>
 80072b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072b2:	2300      	movs	r3, #0
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	27a3      	movs	r7, #163	; 0xa3
 80072b8:	e785      	b.n	80071c6 <__gethex+0x12a>
 80072ba:	1e73      	subs	r3, r6, #1
 80072bc:	9a05      	ldr	r2, [sp, #20]
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d019      	beq.n	80072fc <__gethex+0x260>
 80072c8:	f1bb 0f20 	cmp.w	fp, #32
 80072cc:	d107      	bne.n	80072de <__gethex+0x242>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	9a00      	ldr	r2, [sp, #0]
 80072d2:	f843 2b04 	str.w	r2, [r3], #4
 80072d6:	9302      	str	r3, [sp, #8]
 80072d8:	2300      	movs	r3, #0
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	469b      	mov	fp, r3
 80072de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80072e2:	f7ff fec5 	bl	8007070 <__hexdig_fun>
 80072e6:	9b00      	ldr	r3, [sp, #0]
 80072e8:	f000 000f 	and.w	r0, r0, #15
 80072ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80072f0:	4303      	orrs	r3, r0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	f10b 0b04 	add.w	fp, fp, #4
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	e00d      	b.n	8007318 <__gethex+0x27c>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	9a06      	ldr	r2, [sp, #24]
 8007300:	4413      	add	r3, r2
 8007302:	42bb      	cmp	r3, r7
 8007304:	d3e0      	bcc.n	80072c8 <__gethex+0x22c>
 8007306:	4618      	mov	r0, r3
 8007308:	9901      	ldr	r1, [sp, #4]
 800730a:	9307      	str	r3, [sp, #28]
 800730c:	4652      	mov	r2, sl
 800730e:	f001 f927 	bl	8008560 <strncmp>
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	2800      	cmp	r0, #0
 8007316:	d1d7      	bne.n	80072c8 <__gethex+0x22c>
 8007318:	461e      	mov	r6, r3
 800731a:	e78b      	b.n	8007234 <__gethex+0x198>
 800731c:	f04f 0a03 	mov.w	sl, #3
 8007320:	e7b8      	b.n	8007294 <__gethex+0x1f8>
 8007322:	da0a      	bge.n	800733a <__gethex+0x29e>
 8007324:	1a37      	subs	r7, r6, r0
 8007326:	4621      	mov	r1, r4
 8007328:	ee18 0a10 	vmov	r0, s16
 800732c:	463a      	mov	r2, r7
 800732e:	f000 fc45 	bl	8007bbc <__lshift>
 8007332:	1bed      	subs	r5, r5, r7
 8007334:	4604      	mov	r4, r0
 8007336:	f100 0914 	add.w	r9, r0, #20
 800733a:	f04f 0a00 	mov.w	sl, #0
 800733e:	e7ae      	b.n	800729e <__gethex+0x202>
 8007340:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007344:	42a8      	cmp	r0, r5
 8007346:	dd72      	ble.n	800742e <__gethex+0x392>
 8007348:	1b45      	subs	r5, r0, r5
 800734a:	42ae      	cmp	r6, r5
 800734c:	dc36      	bgt.n	80073bc <__gethex+0x320>
 800734e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d02a      	beq.n	80073ac <__gethex+0x310>
 8007356:	2b03      	cmp	r3, #3
 8007358:	d02c      	beq.n	80073b4 <__gethex+0x318>
 800735a:	2b01      	cmp	r3, #1
 800735c:	d11c      	bne.n	8007398 <__gethex+0x2fc>
 800735e:	42ae      	cmp	r6, r5
 8007360:	d11a      	bne.n	8007398 <__gethex+0x2fc>
 8007362:	2e01      	cmp	r6, #1
 8007364:	d112      	bne.n	800738c <__gethex+0x2f0>
 8007366:	9a04      	ldr	r2, [sp, #16]
 8007368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	2301      	movs	r3, #1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	f8c9 3000 	str.w	r3, [r9]
 8007376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007378:	2762      	movs	r7, #98	; 0x62
 800737a:	601c      	str	r4, [r3, #0]
 800737c:	e723      	b.n	80071c6 <__gethex+0x12a>
 800737e:	bf00      	nop
 8007380:	0800a2e0 	.word	0x0800a2e0
 8007384:	0800a268 	.word	0x0800a268
 8007388:	0800a279 	.word	0x0800a279
 800738c:	1e71      	subs	r1, r6, #1
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fe58 	bl	8008044 <__any_on>
 8007394:	2800      	cmp	r0, #0
 8007396:	d1e6      	bne.n	8007366 <__gethex+0x2ca>
 8007398:	ee18 0a10 	vmov	r0, s16
 800739c:	4621      	mov	r1, r4
 800739e:	f000 f9f1 	bl	8007784 <_Bfree>
 80073a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073a4:	2300      	movs	r3, #0
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	2750      	movs	r7, #80	; 0x50
 80073aa:	e70c      	b.n	80071c6 <__gethex+0x12a>
 80073ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f2      	bne.n	8007398 <__gethex+0x2fc>
 80073b2:	e7d8      	b.n	8007366 <__gethex+0x2ca>
 80073b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1d5      	bne.n	8007366 <__gethex+0x2ca>
 80073ba:	e7ed      	b.n	8007398 <__gethex+0x2fc>
 80073bc:	1e6f      	subs	r7, r5, #1
 80073be:	f1ba 0f00 	cmp.w	sl, #0
 80073c2:	d131      	bne.n	8007428 <__gethex+0x38c>
 80073c4:	b127      	cbz	r7, 80073d0 <__gethex+0x334>
 80073c6:	4639      	mov	r1, r7
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fe3b 	bl	8008044 <__any_on>
 80073ce:	4682      	mov	sl, r0
 80073d0:	117b      	asrs	r3, r7, #5
 80073d2:	2101      	movs	r1, #1
 80073d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80073d8:	f007 071f 	and.w	r7, r7, #31
 80073dc:	fa01 f707 	lsl.w	r7, r1, r7
 80073e0:	421f      	tst	r7, r3
 80073e2:	4629      	mov	r1, r5
 80073e4:	4620      	mov	r0, r4
 80073e6:	bf18      	it	ne
 80073e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80073ec:	1b76      	subs	r6, r6, r5
 80073ee:	f7ff fded 	bl	8006fcc <rshift>
 80073f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80073f6:	2702      	movs	r7, #2
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	d048      	beq.n	8007490 <__gethex+0x3f4>
 80073fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d015      	beq.n	8007432 <__gethex+0x396>
 8007406:	2b03      	cmp	r3, #3
 8007408:	d017      	beq.n	800743a <__gethex+0x39e>
 800740a:	2b01      	cmp	r3, #1
 800740c:	d109      	bne.n	8007422 <__gethex+0x386>
 800740e:	f01a 0f02 	tst.w	sl, #2
 8007412:	d006      	beq.n	8007422 <__gethex+0x386>
 8007414:	f8d9 0000 	ldr.w	r0, [r9]
 8007418:	ea4a 0a00 	orr.w	sl, sl, r0
 800741c:	f01a 0f01 	tst.w	sl, #1
 8007420:	d10e      	bne.n	8007440 <__gethex+0x3a4>
 8007422:	f047 0710 	orr.w	r7, r7, #16
 8007426:	e033      	b.n	8007490 <__gethex+0x3f4>
 8007428:	f04f 0a01 	mov.w	sl, #1
 800742c:	e7d0      	b.n	80073d0 <__gethex+0x334>
 800742e:	2701      	movs	r7, #1
 8007430:	e7e2      	b.n	80073f8 <__gethex+0x35c>
 8007432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007434:	f1c3 0301 	rsb	r3, r3, #1
 8007438:	9315      	str	r3, [sp, #84]	; 0x54
 800743a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f0      	beq.n	8007422 <__gethex+0x386>
 8007440:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007444:	f104 0314 	add.w	r3, r4, #20
 8007448:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800744c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007450:	f04f 0c00 	mov.w	ip, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f853 2b04 	ldr.w	r2, [r3], #4
 800745a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800745e:	d01c      	beq.n	800749a <__gethex+0x3fe>
 8007460:	3201      	adds	r2, #1
 8007462:	6002      	str	r2, [r0, #0]
 8007464:	2f02      	cmp	r7, #2
 8007466:	f104 0314 	add.w	r3, r4, #20
 800746a:	d13f      	bne.n	80074ec <__gethex+0x450>
 800746c:	f8d8 2000 	ldr.w	r2, [r8]
 8007470:	3a01      	subs	r2, #1
 8007472:	42b2      	cmp	r2, r6
 8007474:	d10a      	bne.n	800748c <__gethex+0x3f0>
 8007476:	1171      	asrs	r1, r6, #5
 8007478:	2201      	movs	r2, #1
 800747a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800747e:	f006 061f 	and.w	r6, r6, #31
 8007482:	fa02 f606 	lsl.w	r6, r2, r6
 8007486:	421e      	tst	r6, r3
 8007488:	bf18      	it	ne
 800748a:	4617      	movne	r7, r2
 800748c:	f047 0720 	orr.w	r7, r7, #32
 8007490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007492:	601c      	str	r4, [r3, #0]
 8007494:	9b04      	ldr	r3, [sp, #16]
 8007496:	601d      	str	r5, [r3, #0]
 8007498:	e695      	b.n	80071c6 <__gethex+0x12a>
 800749a:	4299      	cmp	r1, r3
 800749c:	f843 cc04 	str.w	ip, [r3, #-4]
 80074a0:	d8d8      	bhi.n	8007454 <__gethex+0x3b8>
 80074a2:	68a3      	ldr	r3, [r4, #8]
 80074a4:	459b      	cmp	fp, r3
 80074a6:	db19      	blt.n	80074dc <__gethex+0x440>
 80074a8:	6861      	ldr	r1, [r4, #4]
 80074aa:	ee18 0a10 	vmov	r0, s16
 80074ae:	3101      	adds	r1, #1
 80074b0:	f000 f928 	bl	8007704 <_Balloc>
 80074b4:	4681      	mov	r9, r0
 80074b6:	b918      	cbnz	r0, 80074c0 <__gethex+0x424>
 80074b8:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <__gethex+0x488>)
 80074ba:	4602      	mov	r2, r0
 80074bc:	2184      	movs	r1, #132	; 0x84
 80074be:	e6a8      	b.n	8007212 <__gethex+0x176>
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	3202      	adds	r2, #2
 80074c4:	f104 010c 	add.w	r1, r4, #12
 80074c8:	0092      	lsls	r2, r2, #2
 80074ca:	300c      	adds	r0, #12
 80074cc:	f000 f90c 	bl	80076e8 <memcpy>
 80074d0:	4621      	mov	r1, r4
 80074d2:	ee18 0a10 	vmov	r0, s16
 80074d6:	f000 f955 	bl	8007784 <_Bfree>
 80074da:	464c      	mov	r4, r9
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074e4:	6122      	str	r2, [r4, #16]
 80074e6:	2201      	movs	r2, #1
 80074e8:	615a      	str	r2, [r3, #20]
 80074ea:	e7bb      	b.n	8007464 <__gethex+0x3c8>
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	455a      	cmp	r2, fp
 80074f0:	dd0b      	ble.n	800750a <__gethex+0x46e>
 80074f2:	2101      	movs	r1, #1
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff fd69 	bl	8006fcc <rshift>
 80074fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074fe:	3501      	adds	r5, #1
 8007500:	42ab      	cmp	r3, r5
 8007502:	f6ff aed0 	blt.w	80072a6 <__gethex+0x20a>
 8007506:	2701      	movs	r7, #1
 8007508:	e7c0      	b.n	800748c <__gethex+0x3f0>
 800750a:	f016 061f 	ands.w	r6, r6, #31
 800750e:	d0fa      	beq.n	8007506 <__gethex+0x46a>
 8007510:	4453      	add	r3, sl
 8007512:	f1c6 0620 	rsb	r6, r6, #32
 8007516:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800751a:	f000 f9e5 	bl	80078e8 <__hi0bits>
 800751e:	42b0      	cmp	r0, r6
 8007520:	dbe7      	blt.n	80074f2 <__gethex+0x456>
 8007522:	e7f0      	b.n	8007506 <__gethex+0x46a>
 8007524:	0800a268 	.word	0x0800a268

08007528 <L_shift>:
 8007528:	f1c2 0208 	rsb	r2, r2, #8
 800752c:	0092      	lsls	r2, r2, #2
 800752e:	b570      	push	{r4, r5, r6, lr}
 8007530:	f1c2 0620 	rsb	r6, r2, #32
 8007534:	6843      	ldr	r3, [r0, #4]
 8007536:	6804      	ldr	r4, [r0, #0]
 8007538:	fa03 f506 	lsl.w	r5, r3, r6
 800753c:	432c      	orrs	r4, r5
 800753e:	40d3      	lsrs	r3, r2
 8007540:	6004      	str	r4, [r0, #0]
 8007542:	f840 3f04 	str.w	r3, [r0, #4]!
 8007546:	4288      	cmp	r0, r1
 8007548:	d3f4      	bcc.n	8007534 <L_shift+0xc>
 800754a:	bd70      	pop	{r4, r5, r6, pc}

0800754c <__match>:
 800754c:	b530      	push	{r4, r5, lr}
 800754e:	6803      	ldr	r3, [r0, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007556:	b914      	cbnz	r4, 800755e <__match+0x12>
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	2001      	movs	r0, #1
 800755c:	bd30      	pop	{r4, r5, pc}
 800755e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007562:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007566:	2d19      	cmp	r5, #25
 8007568:	bf98      	it	ls
 800756a:	3220      	addls	r2, #32
 800756c:	42a2      	cmp	r2, r4
 800756e:	d0f0      	beq.n	8007552 <__match+0x6>
 8007570:	2000      	movs	r0, #0
 8007572:	e7f3      	b.n	800755c <__match+0x10>

08007574 <__hexnan>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	680b      	ldr	r3, [r1, #0]
 800757a:	115e      	asrs	r6, r3, #5
 800757c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007580:	f013 031f 	ands.w	r3, r3, #31
 8007584:	b087      	sub	sp, #28
 8007586:	bf18      	it	ne
 8007588:	3604      	addne	r6, #4
 800758a:	2500      	movs	r5, #0
 800758c:	1f37      	subs	r7, r6, #4
 800758e:	4690      	mov	r8, r2
 8007590:	6802      	ldr	r2, [r0, #0]
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	4682      	mov	sl, r0
 8007596:	f846 5c04 	str.w	r5, [r6, #-4]
 800759a:	46b9      	mov	r9, r7
 800759c:	463c      	mov	r4, r7
 800759e:	9502      	str	r5, [sp, #8]
 80075a0:	46ab      	mov	fp, r5
 80075a2:	7851      	ldrb	r1, [r2, #1]
 80075a4:	1c53      	adds	r3, r2, #1
 80075a6:	9303      	str	r3, [sp, #12]
 80075a8:	b341      	cbz	r1, 80075fc <__hexnan+0x88>
 80075aa:	4608      	mov	r0, r1
 80075ac:	9205      	str	r2, [sp, #20]
 80075ae:	9104      	str	r1, [sp, #16]
 80075b0:	f7ff fd5e 	bl	8007070 <__hexdig_fun>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d14f      	bne.n	8007658 <__hexnan+0xe4>
 80075b8:	9904      	ldr	r1, [sp, #16]
 80075ba:	9a05      	ldr	r2, [sp, #20]
 80075bc:	2920      	cmp	r1, #32
 80075be:	d818      	bhi.n	80075f2 <__hexnan+0x7e>
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	459b      	cmp	fp, r3
 80075c4:	dd13      	ble.n	80075ee <__hexnan+0x7a>
 80075c6:	454c      	cmp	r4, r9
 80075c8:	d206      	bcs.n	80075d8 <__hexnan+0x64>
 80075ca:	2d07      	cmp	r5, #7
 80075cc:	dc04      	bgt.n	80075d8 <__hexnan+0x64>
 80075ce:	462a      	mov	r2, r5
 80075d0:	4649      	mov	r1, r9
 80075d2:	4620      	mov	r0, r4
 80075d4:	f7ff ffa8 	bl	8007528 <L_shift>
 80075d8:	4544      	cmp	r4, r8
 80075da:	d950      	bls.n	800767e <__hexnan+0x10a>
 80075dc:	2300      	movs	r3, #0
 80075de:	f1a4 0904 	sub.w	r9, r4, #4
 80075e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80075e6:	f8cd b008 	str.w	fp, [sp, #8]
 80075ea:	464c      	mov	r4, r9
 80075ec:	461d      	mov	r5, r3
 80075ee:	9a03      	ldr	r2, [sp, #12]
 80075f0:	e7d7      	b.n	80075a2 <__hexnan+0x2e>
 80075f2:	2929      	cmp	r1, #41	; 0x29
 80075f4:	d156      	bne.n	80076a4 <__hexnan+0x130>
 80075f6:	3202      	adds	r2, #2
 80075f8:	f8ca 2000 	str.w	r2, [sl]
 80075fc:	f1bb 0f00 	cmp.w	fp, #0
 8007600:	d050      	beq.n	80076a4 <__hexnan+0x130>
 8007602:	454c      	cmp	r4, r9
 8007604:	d206      	bcs.n	8007614 <__hexnan+0xa0>
 8007606:	2d07      	cmp	r5, #7
 8007608:	dc04      	bgt.n	8007614 <__hexnan+0xa0>
 800760a:	462a      	mov	r2, r5
 800760c:	4649      	mov	r1, r9
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff ff8a 	bl	8007528 <L_shift>
 8007614:	4544      	cmp	r4, r8
 8007616:	d934      	bls.n	8007682 <__hexnan+0x10e>
 8007618:	f1a8 0204 	sub.w	r2, r8, #4
 800761c:	4623      	mov	r3, r4
 800761e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007622:	f842 1f04 	str.w	r1, [r2, #4]!
 8007626:	429f      	cmp	r7, r3
 8007628:	d2f9      	bcs.n	800761e <__hexnan+0xaa>
 800762a:	1b3b      	subs	r3, r7, r4
 800762c:	f023 0303 	bic.w	r3, r3, #3
 8007630:	3304      	adds	r3, #4
 8007632:	3401      	adds	r4, #1
 8007634:	3e03      	subs	r6, #3
 8007636:	42b4      	cmp	r4, r6
 8007638:	bf88      	it	hi
 800763a:	2304      	movhi	r3, #4
 800763c:	4443      	add	r3, r8
 800763e:	2200      	movs	r2, #0
 8007640:	f843 2b04 	str.w	r2, [r3], #4
 8007644:	429f      	cmp	r7, r3
 8007646:	d2fb      	bcs.n	8007640 <__hexnan+0xcc>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	b91b      	cbnz	r3, 8007654 <__hexnan+0xe0>
 800764c:	4547      	cmp	r7, r8
 800764e:	d127      	bne.n	80076a0 <__hexnan+0x12c>
 8007650:	2301      	movs	r3, #1
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	2005      	movs	r0, #5
 8007656:	e026      	b.n	80076a6 <__hexnan+0x132>
 8007658:	3501      	adds	r5, #1
 800765a:	2d08      	cmp	r5, #8
 800765c:	f10b 0b01 	add.w	fp, fp, #1
 8007660:	dd06      	ble.n	8007670 <__hexnan+0xfc>
 8007662:	4544      	cmp	r4, r8
 8007664:	d9c3      	bls.n	80075ee <__hexnan+0x7a>
 8007666:	2300      	movs	r3, #0
 8007668:	f844 3c04 	str.w	r3, [r4, #-4]
 800766c:	2501      	movs	r5, #1
 800766e:	3c04      	subs	r4, #4
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	f000 000f 	and.w	r0, r0, #15
 8007676:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800767a:	6022      	str	r2, [r4, #0]
 800767c:	e7b7      	b.n	80075ee <__hexnan+0x7a>
 800767e:	2508      	movs	r5, #8
 8007680:	e7b5      	b.n	80075ee <__hexnan+0x7a>
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0df      	beq.n	8007648 <__hexnan+0xd4>
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	f1c3 0320 	rsb	r3, r3, #32
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
 8007694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007698:	401a      	ands	r2, r3
 800769a:	f846 2c04 	str.w	r2, [r6, #-4]
 800769e:	e7d3      	b.n	8007648 <__hexnan+0xd4>
 80076a0:	3f04      	subs	r7, #4
 80076a2:	e7d1      	b.n	8007648 <__hexnan+0xd4>
 80076a4:	2004      	movs	r0, #4
 80076a6:	b007      	add	sp, #28
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076ac <_localeconv_r>:
 80076ac:	4800      	ldr	r0, [pc, #0]	; (80076b0 <_localeconv_r+0x4>)
 80076ae:	4770      	bx	lr
 80076b0:	2000016c 	.word	0x2000016c

080076b4 <malloc>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <malloc+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 bd67 	b.w	800818c <_malloc_r>
 80076be:	bf00      	nop
 80076c0:	20000014 	.word	0x20000014

080076c4 <__ascii_mbtowc>:
 80076c4:	b082      	sub	sp, #8
 80076c6:	b901      	cbnz	r1, 80076ca <__ascii_mbtowc+0x6>
 80076c8:	a901      	add	r1, sp, #4
 80076ca:	b142      	cbz	r2, 80076de <__ascii_mbtowc+0x1a>
 80076cc:	b14b      	cbz	r3, 80076e2 <__ascii_mbtowc+0x1e>
 80076ce:	7813      	ldrb	r3, [r2, #0]
 80076d0:	600b      	str	r3, [r1, #0]
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	1e10      	subs	r0, r2, #0
 80076d6:	bf18      	it	ne
 80076d8:	2001      	movne	r0, #1
 80076da:	b002      	add	sp, #8
 80076dc:	4770      	bx	lr
 80076de:	4610      	mov	r0, r2
 80076e0:	e7fb      	b.n	80076da <__ascii_mbtowc+0x16>
 80076e2:	f06f 0001 	mvn.w	r0, #1
 80076e6:	e7f8      	b.n	80076da <__ascii_mbtowc+0x16>

080076e8 <memcpy>:
 80076e8:	440a      	add	r2, r1
 80076ea:	4291      	cmp	r1, r2
 80076ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f0:	d100      	bne.n	80076f4 <memcpy+0xc>
 80076f2:	4770      	bx	lr
 80076f4:	b510      	push	{r4, lr}
 80076f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076fe:	4291      	cmp	r1, r2
 8007700:	d1f9      	bne.n	80076f6 <memcpy+0xe>
 8007702:	bd10      	pop	{r4, pc}

08007704 <_Balloc>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007708:	4604      	mov	r4, r0
 800770a:	460d      	mov	r5, r1
 800770c:	b976      	cbnz	r6, 800772c <_Balloc+0x28>
 800770e:	2010      	movs	r0, #16
 8007710:	f7ff ffd0 	bl	80076b4 <malloc>
 8007714:	4602      	mov	r2, r0
 8007716:	6260      	str	r0, [r4, #36]	; 0x24
 8007718:	b920      	cbnz	r0, 8007724 <_Balloc+0x20>
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <_Balloc+0x78>)
 800771c:	4818      	ldr	r0, [pc, #96]	; (8007780 <_Balloc+0x7c>)
 800771e:	2166      	movs	r1, #102	; 0x66
 8007720:	f000 ff40 	bl	80085a4 <__assert_func>
 8007724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007728:	6006      	str	r6, [r0, #0]
 800772a:	60c6      	str	r6, [r0, #12]
 800772c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800772e:	68f3      	ldr	r3, [r6, #12]
 8007730:	b183      	cbz	r3, 8007754 <_Balloc+0x50>
 8007732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800773a:	b9b8      	cbnz	r0, 800776c <_Balloc+0x68>
 800773c:	2101      	movs	r1, #1
 800773e:	fa01 f605 	lsl.w	r6, r1, r5
 8007742:	1d72      	adds	r2, r6, #5
 8007744:	0092      	lsls	r2, r2, #2
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fc9d 	bl	8008086 <_calloc_r>
 800774c:	b160      	cbz	r0, 8007768 <_Balloc+0x64>
 800774e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007752:	e00e      	b.n	8007772 <_Balloc+0x6e>
 8007754:	2221      	movs	r2, #33	; 0x21
 8007756:	2104      	movs	r1, #4
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fc94 	bl	8008086 <_calloc_r>
 800775e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007760:	60f0      	str	r0, [r6, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e4      	bne.n	8007732 <_Balloc+0x2e>
 8007768:	2000      	movs	r0, #0
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	6802      	ldr	r2, [r0, #0]
 800776e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007772:	2300      	movs	r3, #0
 8007774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007778:	e7f7      	b.n	800776a <_Balloc+0x66>
 800777a:	bf00      	nop
 800777c:	0800a1f6 	.word	0x0800a1f6
 8007780:	0800a2f4 	.word	0x0800a2f4

08007784 <_Bfree>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007788:	4605      	mov	r5, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b976      	cbnz	r6, 80077ac <_Bfree+0x28>
 800778e:	2010      	movs	r0, #16
 8007790:	f7ff ff90 	bl	80076b4 <malloc>
 8007794:	4602      	mov	r2, r0
 8007796:	6268      	str	r0, [r5, #36]	; 0x24
 8007798:	b920      	cbnz	r0, 80077a4 <_Bfree+0x20>
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <_Bfree+0x3c>)
 800779c:	4809      	ldr	r0, [pc, #36]	; (80077c4 <_Bfree+0x40>)
 800779e:	218a      	movs	r1, #138	; 0x8a
 80077a0:	f000 ff00 	bl	80085a4 <__assert_func>
 80077a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a8:	6006      	str	r6, [r0, #0]
 80077aa:	60c6      	str	r6, [r0, #12]
 80077ac:	b13c      	cbz	r4, 80077be <_Bfree+0x3a>
 80077ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077b8:	6021      	str	r1, [r4, #0]
 80077ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	0800a1f6 	.word	0x0800a1f6
 80077c4:	0800a2f4 	.word	0x0800a2f4

080077c8 <__multadd>:
 80077c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077cc:	690d      	ldr	r5, [r1, #16]
 80077ce:	4607      	mov	r7, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	461e      	mov	r6, r3
 80077d4:	f101 0c14 	add.w	ip, r1, #20
 80077d8:	2000      	movs	r0, #0
 80077da:	f8dc 3000 	ldr.w	r3, [ip]
 80077de:	b299      	uxth	r1, r3
 80077e0:	fb02 6101 	mla	r1, r2, r1, r6
 80077e4:	0c1e      	lsrs	r6, r3, #16
 80077e6:	0c0b      	lsrs	r3, r1, #16
 80077e8:	fb02 3306 	mla	r3, r2, r6, r3
 80077ec:	b289      	uxth	r1, r1
 80077ee:	3001      	adds	r0, #1
 80077f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077f4:	4285      	cmp	r5, r0
 80077f6:	f84c 1b04 	str.w	r1, [ip], #4
 80077fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077fe:	dcec      	bgt.n	80077da <__multadd+0x12>
 8007800:	b30e      	cbz	r6, 8007846 <__multadd+0x7e>
 8007802:	68a3      	ldr	r3, [r4, #8]
 8007804:	42ab      	cmp	r3, r5
 8007806:	dc19      	bgt.n	800783c <__multadd+0x74>
 8007808:	6861      	ldr	r1, [r4, #4]
 800780a:	4638      	mov	r0, r7
 800780c:	3101      	adds	r1, #1
 800780e:	f7ff ff79 	bl	8007704 <_Balloc>
 8007812:	4680      	mov	r8, r0
 8007814:	b928      	cbnz	r0, 8007822 <__multadd+0x5a>
 8007816:	4602      	mov	r2, r0
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <__multadd+0x84>)
 800781a:	480d      	ldr	r0, [pc, #52]	; (8007850 <__multadd+0x88>)
 800781c:	21b5      	movs	r1, #181	; 0xb5
 800781e:	f000 fec1 	bl	80085a4 <__assert_func>
 8007822:	6922      	ldr	r2, [r4, #16]
 8007824:	3202      	adds	r2, #2
 8007826:	f104 010c 	add.w	r1, r4, #12
 800782a:	0092      	lsls	r2, r2, #2
 800782c:	300c      	adds	r0, #12
 800782e:	f7ff ff5b 	bl	80076e8 <memcpy>
 8007832:	4621      	mov	r1, r4
 8007834:	4638      	mov	r0, r7
 8007836:	f7ff ffa5 	bl	8007784 <_Bfree>
 800783a:	4644      	mov	r4, r8
 800783c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007840:	3501      	adds	r5, #1
 8007842:	615e      	str	r6, [r3, #20]
 8007844:	6125      	str	r5, [r4, #16]
 8007846:	4620      	mov	r0, r4
 8007848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800784c:	0800a268 	.word	0x0800a268
 8007850:	0800a2f4 	.word	0x0800a2f4

08007854 <__s2b>:
 8007854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007858:	460c      	mov	r4, r1
 800785a:	4615      	mov	r5, r2
 800785c:	461f      	mov	r7, r3
 800785e:	2209      	movs	r2, #9
 8007860:	3308      	adds	r3, #8
 8007862:	4606      	mov	r6, r0
 8007864:	fb93 f3f2 	sdiv	r3, r3, r2
 8007868:	2100      	movs	r1, #0
 800786a:	2201      	movs	r2, #1
 800786c:	429a      	cmp	r2, r3
 800786e:	db09      	blt.n	8007884 <__s2b+0x30>
 8007870:	4630      	mov	r0, r6
 8007872:	f7ff ff47 	bl	8007704 <_Balloc>
 8007876:	b940      	cbnz	r0, 800788a <__s2b+0x36>
 8007878:	4602      	mov	r2, r0
 800787a:	4b19      	ldr	r3, [pc, #100]	; (80078e0 <__s2b+0x8c>)
 800787c:	4819      	ldr	r0, [pc, #100]	; (80078e4 <__s2b+0x90>)
 800787e:	21ce      	movs	r1, #206	; 0xce
 8007880:	f000 fe90 	bl	80085a4 <__assert_func>
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	3101      	adds	r1, #1
 8007888:	e7f0      	b.n	800786c <__s2b+0x18>
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	6143      	str	r3, [r0, #20]
 800788e:	2d09      	cmp	r5, #9
 8007890:	f04f 0301 	mov.w	r3, #1
 8007894:	6103      	str	r3, [r0, #16]
 8007896:	dd16      	ble.n	80078c6 <__s2b+0x72>
 8007898:	f104 0909 	add.w	r9, r4, #9
 800789c:	46c8      	mov	r8, r9
 800789e:	442c      	add	r4, r5
 80078a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078a4:	4601      	mov	r1, r0
 80078a6:	3b30      	subs	r3, #48	; 0x30
 80078a8:	220a      	movs	r2, #10
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff ff8c 	bl	80077c8 <__multadd>
 80078b0:	45a0      	cmp	r8, r4
 80078b2:	d1f5      	bne.n	80078a0 <__s2b+0x4c>
 80078b4:	f1a5 0408 	sub.w	r4, r5, #8
 80078b8:	444c      	add	r4, r9
 80078ba:	1b2d      	subs	r5, r5, r4
 80078bc:	1963      	adds	r3, r4, r5
 80078be:	42bb      	cmp	r3, r7
 80078c0:	db04      	blt.n	80078cc <__s2b+0x78>
 80078c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c6:	340a      	adds	r4, #10
 80078c8:	2509      	movs	r5, #9
 80078ca:	e7f6      	b.n	80078ba <__s2b+0x66>
 80078cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078d0:	4601      	mov	r1, r0
 80078d2:	3b30      	subs	r3, #48	; 0x30
 80078d4:	220a      	movs	r2, #10
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff ff76 	bl	80077c8 <__multadd>
 80078dc:	e7ee      	b.n	80078bc <__s2b+0x68>
 80078de:	bf00      	nop
 80078e0:	0800a268 	.word	0x0800a268
 80078e4:	0800a2f4 	.word	0x0800a2f4

080078e8 <__hi0bits>:
 80078e8:	0c03      	lsrs	r3, r0, #16
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	b9d3      	cbnz	r3, 8007924 <__hi0bits+0x3c>
 80078ee:	0400      	lsls	r0, r0, #16
 80078f0:	2310      	movs	r3, #16
 80078f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078f6:	bf04      	itt	eq
 80078f8:	0200      	lsleq	r0, r0, #8
 80078fa:	3308      	addeq	r3, #8
 80078fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007900:	bf04      	itt	eq
 8007902:	0100      	lsleq	r0, r0, #4
 8007904:	3304      	addeq	r3, #4
 8007906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800790a:	bf04      	itt	eq
 800790c:	0080      	lsleq	r0, r0, #2
 800790e:	3302      	addeq	r3, #2
 8007910:	2800      	cmp	r0, #0
 8007912:	db05      	blt.n	8007920 <__hi0bits+0x38>
 8007914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007918:	f103 0301 	add.w	r3, r3, #1
 800791c:	bf08      	it	eq
 800791e:	2320      	moveq	r3, #32
 8007920:	4618      	mov	r0, r3
 8007922:	4770      	bx	lr
 8007924:	2300      	movs	r3, #0
 8007926:	e7e4      	b.n	80078f2 <__hi0bits+0xa>

08007928 <__lo0bits>:
 8007928:	6803      	ldr	r3, [r0, #0]
 800792a:	f013 0207 	ands.w	r2, r3, #7
 800792e:	4601      	mov	r1, r0
 8007930:	d00b      	beq.n	800794a <__lo0bits+0x22>
 8007932:	07da      	lsls	r2, r3, #31
 8007934:	d423      	bmi.n	800797e <__lo0bits+0x56>
 8007936:	0798      	lsls	r0, r3, #30
 8007938:	bf49      	itett	mi
 800793a:	085b      	lsrmi	r3, r3, #1
 800793c:	089b      	lsrpl	r3, r3, #2
 800793e:	2001      	movmi	r0, #1
 8007940:	600b      	strmi	r3, [r1, #0]
 8007942:	bf5c      	itt	pl
 8007944:	600b      	strpl	r3, [r1, #0]
 8007946:	2002      	movpl	r0, #2
 8007948:	4770      	bx	lr
 800794a:	b298      	uxth	r0, r3
 800794c:	b9a8      	cbnz	r0, 800797a <__lo0bits+0x52>
 800794e:	0c1b      	lsrs	r3, r3, #16
 8007950:	2010      	movs	r0, #16
 8007952:	b2da      	uxtb	r2, r3
 8007954:	b90a      	cbnz	r2, 800795a <__lo0bits+0x32>
 8007956:	3008      	adds	r0, #8
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	071a      	lsls	r2, r3, #28
 800795c:	bf04      	itt	eq
 800795e:	091b      	lsreq	r3, r3, #4
 8007960:	3004      	addeq	r0, #4
 8007962:	079a      	lsls	r2, r3, #30
 8007964:	bf04      	itt	eq
 8007966:	089b      	lsreq	r3, r3, #2
 8007968:	3002      	addeq	r0, #2
 800796a:	07da      	lsls	r2, r3, #31
 800796c:	d403      	bmi.n	8007976 <__lo0bits+0x4e>
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	f100 0001 	add.w	r0, r0, #1
 8007974:	d005      	beq.n	8007982 <__lo0bits+0x5a>
 8007976:	600b      	str	r3, [r1, #0]
 8007978:	4770      	bx	lr
 800797a:	4610      	mov	r0, r2
 800797c:	e7e9      	b.n	8007952 <__lo0bits+0x2a>
 800797e:	2000      	movs	r0, #0
 8007980:	4770      	bx	lr
 8007982:	2020      	movs	r0, #32
 8007984:	4770      	bx	lr
	...

08007988 <__i2b>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	2101      	movs	r1, #1
 800798e:	f7ff feb9 	bl	8007704 <_Balloc>
 8007992:	4602      	mov	r2, r0
 8007994:	b928      	cbnz	r0, 80079a2 <__i2b+0x1a>
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <__i2b+0x24>)
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <__i2b+0x28>)
 800799a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800799e:	f000 fe01 	bl	80085a4 <__assert_func>
 80079a2:	2301      	movs	r3, #1
 80079a4:	6144      	str	r4, [r0, #20]
 80079a6:	6103      	str	r3, [r0, #16]
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	0800a268 	.word	0x0800a268
 80079b0:	0800a2f4 	.word	0x0800a2f4

080079b4 <__multiply>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	4691      	mov	r9, r2
 80079ba:	690a      	ldr	r2, [r1, #16]
 80079bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	bfb8      	it	lt
 80079c4:	460b      	movlt	r3, r1
 80079c6:	460c      	mov	r4, r1
 80079c8:	bfbc      	itt	lt
 80079ca:	464c      	movlt	r4, r9
 80079cc:	4699      	movlt	r9, r3
 80079ce:	6927      	ldr	r7, [r4, #16]
 80079d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	6861      	ldr	r1, [r4, #4]
 80079d8:	eb07 060a 	add.w	r6, r7, sl
 80079dc:	42b3      	cmp	r3, r6
 80079de:	b085      	sub	sp, #20
 80079e0:	bfb8      	it	lt
 80079e2:	3101      	addlt	r1, #1
 80079e4:	f7ff fe8e 	bl	8007704 <_Balloc>
 80079e8:	b930      	cbnz	r0, 80079f8 <__multiply+0x44>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b44      	ldr	r3, [pc, #272]	; (8007b00 <__multiply+0x14c>)
 80079ee:	4845      	ldr	r0, [pc, #276]	; (8007b04 <__multiply+0x150>)
 80079f0:	f240 115d 	movw	r1, #349	; 0x15d
 80079f4:	f000 fdd6 	bl	80085a4 <__assert_func>
 80079f8:	f100 0514 	add.w	r5, r0, #20
 80079fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a00:	462b      	mov	r3, r5
 8007a02:	2200      	movs	r2, #0
 8007a04:	4543      	cmp	r3, r8
 8007a06:	d321      	bcc.n	8007a4c <__multiply+0x98>
 8007a08:	f104 0314 	add.w	r3, r4, #20
 8007a0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a10:	f109 0314 	add.w	r3, r9, #20
 8007a14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a18:	9202      	str	r2, [sp, #8]
 8007a1a:	1b3a      	subs	r2, r7, r4
 8007a1c:	3a15      	subs	r2, #21
 8007a1e:	f022 0203 	bic.w	r2, r2, #3
 8007a22:	3204      	adds	r2, #4
 8007a24:	f104 0115 	add.w	r1, r4, #21
 8007a28:	428f      	cmp	r7, r1
 8007a2a:	bf38      	it	cc
 8007a2c:	2204      	movcc	r2, #4
 8007a2e:	9201      	str	r2, [sp, #4]
 8007a30:	9a02      	ldr	r2, [sp, #8]
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d80c      	bhi.n	8007a52 <__multiply+0x9e>
 8007a38:	2e00      	cmp	r6, #0
 8007a3a:	dd03      	ble.n	8007a44 <__multiply+0x90>
 8007a3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d05a      	beq.n	8007afa <__multiply+0x146>
 8007a44:	6106      	str	r6, [r0, #16]
 8007a46:	b005      	add	sp, #20
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	f843 2b04 	str.w	r2, [r3], #4
 8007a50:	e7d8      	b.n	8007a04 <__multiply+0x50>
 8007a52:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a56:	f1ba 0f00 	cmp.w	sl, #0
 8007a5a:	d024      	beq.n	8007aa6 <__multiply+0xf2>
 8007a5c:	f104 0e14 	add.w	lr, r4, #20
 8007a60:	46a9      	mov	r9, r5
 8007a62:	f04f 0c00 	mov.w	ip, #0
 8007a66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a6a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a6e:	fa1f fb82 	uxth.w	fp, r2
 8007a72:	b289      	uxth	r1, r1
 8007a74:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a80:	4461      	add	r1, ip
 8007a82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a86:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a8e:	b289      	uxth	r1, r1
 8007a90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a94:	4577      	cmp	r7, lr
 8007a96:	f849 1b04 	str.w	r1, [r9], #4
 8007a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a9e:	d8e2      	bhi.n	8007a66 <__multiply+0xb2>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	f845 c002 	str.w	ip, [r5, r2]
 8007aa6:	9a03      	ldr	r2, [sp, #12]
 8007aa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007aac:	3304      	adds	r3, #4
 8007aae:	f1b9 0f00 	cmp.w	r9, #0
 8007ab2:	d020      	beq.n	8007af6 <__multiply+0x142>
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	f104 0c14 	add.w	ip, r4, #20
 8007aba:	46ae      	mov	lr, r5
 8007abc:	f04f 0a00 	mov.w	sl, #0
 8007ac0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ac8:	fb09 220b 	mla	r2, r9, fp, r2
 8007acc:	4492      	add	sl, r2
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ad4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ad8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007adc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ae0:	0c12      	lsrs	r2, r2, #16
 8007ae2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ae6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007aea:	4567      	cmp	r7, ip
 8007aec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007af0:	d8e6      	bhi.n	8007ac0 <__multiply+0x10c>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	50a9      	str	r1, [r5, r2]
 8007af6:	3504      	adds	r5, #4
 8007af8:	e79a      	b.n	8007a30 <__multiply+0x7c>
 8007afa:	3e01      	subs	r6, #1
 8007afc:	e79c      	b.n	8007a38 <__multiply+0x84>
 8007afe:	bf00      	nop
 8007b00:	0800a268 	.word	0x0800a268
 8007b04:	0800a2f4 	.word	0x0800a2f4

08007b08 <__pow5mult>:
 8007b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	f012 0203 	ands.w	r2, r2, #3
 8007b12:	4606      	mov	r6, r0
 8007b14:	460f      	mov	r7, r1
 8007b16:	d007      	beq.n	8007b28 <__pow5mult+0x20>
 8007b18:	4c25      	ldr	r4, [pc, #148]	; (8007bb0 <__pow5mult+0xa8>)
 8007b1a:	3a01      	subs	r2, #1
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b22:	f7ff fe51 	bl	80077c8 <__multadd>
 8007b26:	4607      	mov	r7, r0
 8007b28:	10ad      	asrs	r5, r5, #2
 8007b2a:	d03d      	beq.n	8007ba8 <__pow5mult+0xa0>
 8007b2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b2e:	b97c      	cbnz	r4, 8007b50 <__pow5mult+0x48>
 8007b30:	2010      	movs	r0, #16
 8007b32:	f7ff fdbf 	bl	80076b4 <malloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6270      	str	r0, [r6, #36]	; 0x24
 8007b3a:	b928      	cbnz	r0, 8007b48 <__pow5mult+0x40>
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <__pow5mult+0xac>)
 8007b3e:	481e      	ldr	r0, [pc, #120]	; (8007bb8 <__pow5mult+0xb0>)
 8007b40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b44:	f000 fd2e 	bl	80085a4 <__assert_func>
 8007b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b4c:	6004      	str	r4, [r0, #0]
 8007b4e:	60c4      	str	r4, [r0, #12]
 8007b50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b58:	b94c      	cbnz	r4, 8007b6e <__pow5mult+0x66>
 8007b5a:	f240 2171 	movw	r1, #625	; 0x271
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ff12 	bl	8007988 <__i2b>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	f04f 0900 	mov.w	r9, #0
 8007b72:	07eb      	lsls	r3, r5, #31
 8007b74:	d50a      	bpl.n	8007b8c <__pow5mult+0x84>
 8007b76:	4639      	mov	r1, r7
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ff1a 	bl	80079b4 <__multiply>
 8007b80:	4639      	mov	r1, r7
 8007b82:	4680      	mov	r8, r0
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7ff fdfd 	bl	8007784 <_Bfree>
 8007b8a:	4647      	mov	r7, r8
 8007b8c:	106d      	asrs	r5, r5, #1
 8007b8e:	d00b      	beq.n	8007ba8 <__pow5mult+0xa0>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	b938      	cbnz	r0, 8007ba4 <__pow5mult+0x9c>
 8007b94:	4622      	mov	r2, r4
 8007b96:	4621      	mov	r1, r4
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ff0b 	bl	80079b4 <__multiply>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	f8c0 9000 	str.w	r9, [r0]
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	e7e4      	b.n	8007b72 <__pow5mult+0x6a>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bae:	bf00      	nop
 8007bb0:	0800a440 	.word	0x0800a440
 8007bb4:	0800a1f6 	.word	0x0800a1f6
 8007bb8:	0800a2f4 	.word	0x0800a2f4

08007bbc <__lshift>:
 8007bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6849      	ldr	r1, [r1, #4]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	4607      	mov	r7, r0
 8007bce:	4691      	mov	r9, r2
 8007bd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bd4:	f108 0601 	add.w	r6, r8, #1
 8007bd8:	42b3      	cmp	r3, r6
 8007bda:	db0b      	blt.n	8007bf4 <__lshift+0x38>
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f7ff fd91 	bl	8007704 <_Balloc>
 8007be2:	4605      	mov	r5, r0
 8007be4:	b948      	cbnz	r0, 8007bfa <__lshift+0x3e>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b2a      	ldr	r3, [pc, #168]	; (8007c94 <__lshift+0xd8>)
 8007bea:	482b      	ldr	r0, [pc, #172]	; (8007c98 <__lshift+0xdc>)
 8007bec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bf0:	f000 fcd8 	bl	80085a4 <__assert_func>
 8007bf4:	3101      	adds	r1, #1
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	e7ee      	b.n	8007bd8 <__lshift+0x1c>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f100 0114 	add.w	r1, r0, #20
 8007c00:	f100 0210 	add.w	r2, r0, #16
 8007c04:	4618      	mov	r0, r3
 8007c06:	4553      	cmp	r3, sl
 8007c08:	db37      	blt.n	8007c7a <__lshift+0xbe>
 8007c0a:	6920      	ldr	r0, [r4, #16]
 8007c0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c10:	f104 0314 	add.w	r3, r4, #20
 8007c14:	f019 091f 	ands.w	r9, r9, #31
 8007c18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c20:	d02f      	beq.n	8007c82 <__lshift+0xc6>
 8007c22:	f1c9 0e20 	rsb	lr, r9, #32
 8007c26:	468a      	mov	sl, r1
 8007c28:	f04f 0c00 	mov.w	ip, #0
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	fa02 f209 	lsl.w	r2, r2, r9
 8007c32:	ea42 020c 	orr.w	r2, r2, ip
 8007c36:	f84a 2b04 	str.w	r2, [sl], #4
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c44:	d8f2      	bhi.n	8007c2c <__lshift+0x70>
 8007c46:	1b03      	subs	r3, r0, r4
 8007c48:	3b15      	subs	r3, #21
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	3304      	adds	r3, #4
 8007c50:	f104 0215 	add.w	r2, r4, #21
 8007c54:	4290      	cmp	r0, r2
 8007c56:	bf38      	it	cc
 8007c58:	2304      	movcc	r3, #4
 8007c5a:	f841 c003 	str.w	ip, [r1, r3]
 8007c5e:	f1bc 0f00 	cmp.w	ip, #0
 8007c62:	d001      	beq.n	8007c68 <__lshift+0xac>
 8007c64:	f108 0602 	add.w	r6, r8, #2
 8007c68:	3e01      	subs	r6, #1
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	612e      	str	r6, [r5, #16]
 8007c6e:	4621      	mov	r1, r4
 8007c70:	f7ff fd88 	bl	8007784 <_Bfree>
 8007c74:	4628      	mov	r0, r5
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c7e:	3301      	adds	r3, #1
 8007c80:	e7c1      	b.n	8007c06 <__lshift+0x4a>
 8007c82:	3904      	subs	r1, #4
 8007c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c88:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c8c:	4298      	cmp	r0, r3
 8007c8e:	d8f9      	bhi.n	8007c84 <__lshift+0xc8>
 8007c90:	e7ea      	b.n	8007c68 <__lshift+0xac>
 8007c92:	bf00      	nop
 8007c94:	0800a268 	.word	0x0800a268
 8007c98:	0800a2f4 	.word	0x0800a2f4

08007c9c <__mcmp>:
 8007c9c:	b530      	push	{r4, r5, lr}
 8007c9e:	6902      	ldr	r2, [r0, #16]
 8007ca0:	690c      	ldr	r4, [r1, #16]
 8007ca2:	1b12      	subs	r2, r2, r4
 8007ca4:	d10e      	bne.n	8007cc4 <__mcmp+0x28>
 8007ca6:	f100 0314 	add.w	r3, r0, #20
 8007caa:	3114      	adds	r1, #20
 8007cac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cbc:	42a5      	cmp	r5, r4
 8007cbe:	d003      	beq.n	8007cc8 <__mcmp+0x2c>
 8007cc0:	d305      	bcc.n	8007cce <__mcmp+0x32>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	bd30      	pop	{r4, r5, pc}
 8007cc8:	4283      	cmp	r3, r0
 8007cca:	d3f3      	bcc.n	8007cb4 <__mcmp+0x18>
 8007ccc:	e7fa      	b.n	8007cc4 <__mcmp+0x28>
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	e7f7      	b.n	8007cc4 <__mcmp+0x28>

08007cd4 <__mdiff>:
 8007cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	460c      	mov	r4, r1
 8007cda:	4606      	mov	r6, r0
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4690      	mov	r8, r2
 8007ce2:	f7ff ffdb 	bl	8007c9c <__mcmp>
 8007ce6:	1e05      	subs	r5, r0, #0
 8007ce8:	d110      	bne.n	8007d0c <__mdiff+0x38>
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff fd09 	bl	8007704 <_Balloc>
 8007cf2:	b930      	cbnz	r0, 8007d02 <__mdiff+0x2e>
 8007cf4:	4b3a      	ldr	r3, [pc, #232]	; (8007de0 <__mdiff+0x10c>)
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	f240 2132 	movw	r1, #562	; 0x232
 8007cfc:	4839      	ldr	r0, [pc, #228]	; (8007de4 <__mdiff+0x110>)
 8007cfe:	f000 fc51 	bl	80085a4 <__assert_func>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	bfa4      	itt	ge
 8007d0e:	4643      	movge	r3, r8
 8007d10:	46a0      	movge	r8, r4
 8007d12:	4630      	mov	r0, r6
 8007d14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d18:	bfa6      	itte	ge
 8007d1a:	461c      	movge	r4, r3
 8007d1c:	2500      	movge	r5, #0
 8007d1e:	2501      	movlt	r5, #1
 8007d20:	f7ff fcf0 	bl	8007704 <_Balloc>
 8007d24:	b920      	cbnz	r0, 8007d30 <__mdiff+0x5c>
 8007d26:	4b2e      	ldr	r3, [pc, #184]	; (8007de0 <__mdiff+0x10c>)
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d2e:	e7e5      	b.n	8007cfc <__mdiff+0x28>
 8007d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d34:	6926      	ldr	r6, [r4, #16]
 8007d36:	60c5      	str	r5, [r0, #12]
 8007d38:	f104 0914 	add.w	r9, r4, #20
 8007d3c:	f108 0514 	add.w	r5, r8, #20
 8007d40:	f100 0e14 	add.w	lr, r0, #20
 8007d44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d4c:	f108 0210 	add.w	r2, r8, #16
 8007d50:	46f2      	mov	sl, lr
 8007d52:	2100      	movs	r1, #0
 8007d54:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d5c:	fa1f f883 	uxth.w	r8, r3
 8007d60:	fa11 f18b 	uxtah	r1, r1, fp
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	eba1 0808 	sub.w	r8, r1, r8
 8007d6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d72:	fa1f f888 	uxth.w	r8, r8
 8007d76:	1419      	asrs	r1, r3, #16
 8007d78:	454e      	cmp	r6, r9
 8007d7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d7e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d82:	d8e7      	bhi.n	8007d54 <__mdiff+0x80>
 8007d84:	1b33      	subs	r3, r6, r4
 8007d86:	3b15      	subs	r3, #21
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	3415      	adds	r4, #21
 8007d90:	42a6      	cmp	r6, r4
 8007d92:	bf38      	it	cc
 8007d94:	2304      	movcc	r3, #4
 8007d96:	441d      	add	r5, r3
 8007d98:	4473      	add	r3, lr
 8007d9a:	469e      	mov	lr, r3
 8007d9c:	462e      	mov	r6, r5
 8007d9e:	4566      	cmp	r6, ip
 8007da0:	d30e      	bcc.n	8007dc0 <__mdiff+0xec>
 8007da2:	f10c 0203 	add.w	r2, ip, #3
 8007da6:	1b52      	subs	r2, r2, r5
 8007da8:	f022 0203 	bic.w	r2, r2, #3
 8007dac:	3d03      	subs	r5, #3
 8007dae:	45ac      	cmp	ip, r5
 8007db0:	bf38      	it	cc
 8007db2:	2200      	movcc	r2, #0
 8007db4:	441a      	add	r2, r3
 8007db6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007dba:	b17b      	cbz	r3, 8007ddc <__mdiff+0x108>
 8007dbc:	6107      	str	r7, [r0, #16]
 8007dbe:	e7a3      	b.n	8007d08 <__mdiff+0x34>
 8007dc0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dc4:	fa11 f288 	uxtah	r2, r1, r8
 8007dc8:	1414      	asrs	r4, r2, #16
 8007dca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007dd4:	f84e 2b04 	str.w	r2, [lr], #4
 8007dd8:	1421      	asrs	r1, r4, #16
 8007dda:	e7e0      	b.n	8007d9e <__mdiff+0xca>
 8007ddc:	3f01      	subs	r7, #1
 8007dde:	e7ea      	b.n	8007db6 <__mdiff+0xe2>
 8007de0:	0800a268 	.word	0x0800a268
 8007de4:	0800a2f4 	.word	0x0800a2f4

08007de8 <__ulp>:
 8007de8:	b082      	sub	sp, #8
 8007dea:	ed8d 0b00 	vstr	d0, [sp]
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	4912      	ldr	r1, [pc, #72]	; (8007e3c <__ulp+0x54>)
 8007df2:	4019      	ands	r1, r3
 8007df4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	dd05      	ble.n	8007e08 <__ulp+0x20>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	ec43 2b10 	vmov	d0, r2, r3
 8007e04:	b002      	add	sp, #8
 8007e06:	4770      	bx	lr
 8007e08:	4249      	negs	r1, r1
 8007e0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007e0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	da04      	bge.n	8007e26 <__ulp+0x3e>
 8007e1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007e20:	fa41 f300 	asr.w	r3, r1, r0
 8007e24:	e7ec      	b.n	8007e00 <__ulp+0x18>
 8007e26:	f1a0 0114 	sub.w	r1, r0, #20
 8007e2a:	291e      	cmp	r1, #30
 8007e2c:	bfda      	itte	le
 8007e2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007e32:	fa20 f101 	lsrle.w	r1, r0, r1
 8007e36:	2101      	movgt	r1, #1
 8007e38:	460a      	mov	r2, r1
 8007e3a:	e7e1      	b.n	8007e00 <__ulp+0x18>
 8007e3c:	7ff00000 	.word	0x7ff00000

08007e40 <__b2d>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	6905      	ldr	r5, [r0, #16]
 8007e44:	f100 0714 	add.w	r7, r0, #20
 8007e48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e4c:	1f2e      	subs	r6, r5, #4
 8007e4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff fd48 	bl	80078e8 <__hi0bits>
 8007e58:	f1c0 0320 	rsb	r3, r0, #32
 8007e5c:	280a      	cmp	r0, #10
 8007e5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007edc <__b2d+0x9c>
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	dc14      	bgt.n	8007e90 <__b2d+0x50>
 8007e66:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e6a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007e6e:	42b7      	cmp	r7, r6
 8007e70:	ea41 030c 	orr.w	r3, r1, ip
 8007e74:	bf34      	ite	cc
 8007e76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e7a:	2100      	movcs	r1, #0
 8007e7c:	3015      	adds	r0, #21
 8007e7e:	fa04 f000 	lsl.w	r0, r4, r0
 8007e82:	fa21 f10e 	lsr.w	r1, r1, lr
 8007e86:	ea40 0201 	orr.w	r2, r0, r1
 8007e8a:	ec43 2b10 	vmov	d0, r2, r3
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	42b7      	cmp	r7, r6
 8007e92:	bf3a      	itte	cc
 8007e94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e98:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e9c:	2100      	movcs	r1, #0
 8007e9e:	380b      	subs	r0, #11
 8007ea0:	d017      	beq.n	8007ed2 <__b2d+0x92>
 8007ea2:	f1c0 0c20 	rsb	ip, r0, #32
 8007ea6:	fa04 f500 	lsl.w	r5, r4, r0
 8007eaa:	42be      	cmp	r6, r7
 8007eac:	fa21 f40c 	lsr.w	r4, r1, ip
 8007eb0:	ea45 0504 	orr.w	r5, r5, r4
 8007eb4:	bf8c      	ite	hi
 8007eb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007eba:	2400      	movls	r4, #0
 8007ebc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007ec0:	fa01 f000 	lsl.w	r0, r1, r0
 8007ec4:	fa24 f40c 	lsr.w	r4, r4, ip
 8007ec8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ecc:	ea40 0204 	orr.w	r2, r0, r4
 8007ed0:	e7db      	b.n	8007e8a <__b2d+0x4a>
 8007ed2:	ea44 030c 	orr.w	r3, r4, ip
 8007ed6:	460a      	mov	r2, r1
 8007ed8:	e7d7      	b.n	8007e8a <__b2d+0x4a>
 8007eda:	bf00      	nop
 8007edc:	3ff00000 	.word	0x3ff00000

08007ee0 <__d2b>:
 8007ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	ec57 6b10 	vmov	r6, r7, d0
 8007eec:	4690      	mov	r8, r2
 8007eee:	f7ff fc09 	bl	8007704 <_Balloc>
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	b930      	cbnz	r0, 8007f04 <__d2b+0x24>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <__d2b+0xb0>)
 8007efa:	4826      	ldr	r0, [pc, #152]	; (8007f94 <__d2b+0xb4>)
 8007efc:	f240 310a 	movw	r1, #778	; 0x30a
 8007f00:	f000 fb50 	bl	80085a4 <__assert_func>
 8007f04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f0c:	bb35      	cbnz	r5, 8007f5c <__d2b+0x7c>
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	d028      	beq.n	8007f66 <__d2b+0x86>
 8007f14:	4668      	mov	r0, sp
 8007f16:	9600      	str	r6, [sp, #0]
 8007f18:	f7ff fd06 	bl	8007928 <__lo0bits>
 8007f1c:	9900      	ldr	r1, [sp, #0]
 8007f1e:	b300      	cbz	r0, 8007f62 <__d2b+0x82>
 8007f20:	9a01      	ldr	r2, [sp, #4]
 8007f22:	f1c0 0320 	rsb	r3, r0, #32
 8007f26:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	40c2      	lsrs	r2, r0
 8007f2e:	6163      	str	r3, [r4, #20]
 8007f30:	9201      	str	r2, [sp, #4]
 8007f32:	9b01      	ldr	r3, [sp, #4]
 8007f34:	61a3      	str	r3, [r4, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bf14      	ite	ne
 8007f3a:	2202      	movne	r2, #2
 8007f3c:	2201      	moveq	r2, #1
 8007f3e:	6122      	str	r2, [r4, #16]
 8007f40:	b1d5      	cbz	r5, 8007f78 <__d2b+0x98>
 8007f42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f46:	4405      	add	r5, r0
 8007f48:	f8c9 5000 	str.w	r5, [r9]
 8007f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f50:	f8c8 0000 	str.w	r0, [r8]
 8007f54:	4620      	mov	r0, r4
 8007f56:	b003      	add	sp, #12
 8007f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f60:	e7d5      	b.n	8007f0e <__d2b+0x2e>
 8007f62:	6161      	str	r1, [r4, #20]
 8007f64:	e7e5      	b.n	8007f32 <__d2b+0x52>
 8007f66:	a801      	add	r0, sp, #4
 8007f68:	f7ff fcde 	bl	8007928 <__lo0bits>
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	6163      	str	r3, [r4, #20]
 8007f70:	2201      	movs	r2, #1
 8007f72:	6122      	str	r2, [r4, #16]
 8007f74:	3020      	adds	r0, #32
 8007f76:	e7e3      	b.n	8007f40 <__d2b+0x60>
 8007f78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f80:	f8c9 0000 	str.w	r0, [r9]
 8007f84:	6918      	ldr	r0, [r3, #16]
 8007f86:	f7ff fcaf 	bl	80078e8 <__hi0bits>
 8007f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f8e:	e7df      	b.n	8007f50 <__d2b+0x70>
 8007f90:	0800a268 	.word	0x0800a268
 8007f94:	0800a2f4 	.word	0x0800a2f4

08007f98 <__ratio>:
 8007f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	4688      	mov	r8, r1
 8007f9e:	4669      	mov	r1, sp
 8007fa0:	4681      	mov	r9, r0
 8007fa2:	f7ff ff4d 	bl	8007e40 <__b2d>
 8007fa6:	a901      	add	r1, sp, #4
 8007fa8:	4640      	mov	r0, r8
 8007faa:	ec55 4b10 	vmov	r4, r5, d0
 8007fae:	f7ff ff47 	bl	8007e40 <__b2d>
 8007fb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007fba:	eba3 0c02 	sub.w	ip, r3, r2
 8007fbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007fc8:	ec51 0b10 	vmov	r0, r1, d0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bfd6      	itet	le
 8007fd0:	460a      	movle	r2, r1
 8007fd2:	462a      	movgt	r2, r5
 8007fd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fd8:	468b      	mov	fp, r1
 8007fda:	462f      	mov	r7, r5
 8007fdc:	bfd4      	ite	le
 8007fde:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007fe2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	ee10 2a10 	vmov	r2, s0
 8007fec:	465b      	mov	r3, fp
 8007fee:	4639      	mov	r1, r7
 8007ff0:	f7f8 fc2c 	bl	800084c <__aeabi_ddiv>
 8007ff4:	ec41 0b10 	vmov	d0, r0, r1
 8007ff8:	b003      	add	sp, #12
 8007ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ffe <__copybits>:
 8007ffe:	3901      	subs	r1, #1
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	1149      	asrs	r1, r1, #5
 8008004:	6914      	ldr	r4, [r2, #16]
 8008006:	3101      	adds	r1, #1
 8008008:	f102 0314 	add.w	r3, r2, #20
 800800c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008010:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008014:	1f05      	subs	r5, r0, #4
 8008016:	42a3      	cmp	r3, r4
 8008018:	d30c      	bcc.n	8008034 <__copybits+0x36>
 800801a:	1aa3      	subs	r3, r4, r2
 800801c:	3b11      	subs	r3, #17
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	3211      	adds	r2, #17
 8008024:	42a2      	cmp	r2, r4
 8008026:	bf88      	it	hi
 8008028:	2300      	movhi	r3, #0
 800802a:	4418      	add	r0, r3
 800802c:	2300      	movs	r3, #0
 800802e:	4288      	cmp	r0, r1
 8008030:	d305      	bcc.n	800803e <__copybits+0x40>
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	f853 6b04 	ldr.w	r6, [r3], #4
 8008038:	f845 6f04 	str.w	r6, [r5, #4]!
 800803c:	e7eb      	b.n	8008016 <__copybits+0x18>
 800803e:	f840 3b04 	str.w	r3, [r0], #4
 8008042:	e7f4      	b.n	800802e <__copybits+0x30>

08008044 <__any_on>:
 8008044:	f100 0214 	add.w	r2, r0, #20
 8008048:	6900      	ldr	r0, [r0, #16]
 800804a:	114b      	asrs	r3, r1, #5
 800804c:	4298      	cmp	r0, r3
 800804e:	b510      	push	{r4, lr}
 8008050:	db11      	blt.n	8008076 <__any_on+0x32>
 8008052:	dd0a      	ble.n	800806a <__any_on+0x26>
 8008054:	f011 011f 	ands.w	r1, r1, #31
 8008058:	d007      	beq.n	800806a <__any_on+0x26>
 800805a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800805e:	fa24 f001 	lsr.w	r0, r4, r1
 8008062:	fa00 f101 	lsl.w	r1, r0, r1
 8008066:	428c      	cmp	r4, r1
 8008068:	d10b      	bne.n	8008082 <__any_on+0x3e>
 800806a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800806e:	4293      	cmp	r3, r2
 8008070:	d803      	bhi.n	800807a <__any_on+0x36>
 8008072:	2000      	movs	r0, #0
 8008074:	bd10      	pop	{r4, pc}
 8008076:	4603      	mov	r3, r0
 8008078:	e7f7      	b.n	800806a <__any_on+0x26>
 800807a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800807e:	2900      	cmp	r1, #0
 8008080:	d0f5      	beq.n	800806e <__any_on+0x2a>
 8008082:	2001      	movs	r0, #1
 8008084:	e7f6      	b.n	8008074 <__any_on+0x30>

08008086 <_calloc_r>:
 8008086:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008088:	fba1 2402 	umull	r2, r4, r1, r2
 800808c:	b94c      	cbnz	r4, 80080a2 <_calloc_r+0x1c>
 800808e:	4611      	mov	r1, r2
 8008090:	9201      	str	r2, [sp, #4]
 8008092:	f000 f87b 	bl	800818c <_malloc_r>
 8008096:	9a01      	ldr	r2, [sp, #4]
 8008098:	4605      	mov	r5, r0
 800809a:	b930      	cbnz	r0, 80080aa <_calloc_r+0x24>
 800809c:	4628      	mov	r0, r5
 800809e:	b003      	add	sp, #12
 80080a0:	bd30      	pop	{r4, r5, pc}
 80080a2:	220c      	movs	r2, #12
 80080a4:	6002      	str	r2, [r0, #0]
 80080a6:	2500      	movs	r5, #0
 80080a8:	e7f8      	b.n	800809c <_calloc_r+0x16>
 80080aa:	4621      	mov	r1, r4
 80080ac:	f7fc fdbe 	bl	8004c2c <memset>
 80080b0:	e7f4      	b.n	800809c <_calloc_r+0x16>
	...

080080b4 <_free_r>:
 80080b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d044      	beq.n	8008144 <_free_r+0x90>
 80080ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080be:	9001      	str	r0, [sp, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f1a1 0404 	sub.w	r4, r1, #4
 80080c6:	bfb8      	it	lt
 80080c8:	18e4      	addlt	r4, r4, r3
 80080ca:	f000 fab5 	bl	8008638 <__malloc_lock>
 80080ce:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <_free_r+0x94>)
 80080d0:	9801      	ldr	r0, [sp, #4]
 80080d2:	6813      	ldr	r3, [r2, #0]
 80080d4:	b933      	cbnz	r3, 80080e4 <_free_r+0x30>
 80080d6:	6063      	str	r3, [r4, #4]
 80080d8:	6014      	str	r4, [r2, #0]
 80080da:	b003      	add	sp, #12
 80080dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080e0:	f000 bab0 	b.w	8008644 <__malloc_unlock>
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d908      	bls.n	80080fa <_free_r+0x46>
 80080e8:	6825      	ldr	r5, [r4, #0]
 80080ea:	1961      	adds	r1, r4, r5
 80080ec:	428b      	cmp	r3, r1
 80080ee:	bf01      	itttt	eq
 80080f0:	6819      	ldreq	r1, [r3, #0]
 80080f2:	685b      	ldreq	r3, [r3, #4]
 80080f4:	1949      	addeq	r1, r1, r5
 80080f6:	6021      	streq	r1, [r4, #0]
 80080f8:	e7ed      	b.n	80080d6 <_free_r+0x22>
 80080fa:	461a      	mov	r2, r3
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b10b      	cbz	r3, 8008104 <_free_r+0x50>
 8008100:	42a3      	cmp	r3, r4
 8008102:	d9fa      	bls.n	80080fa <_free_r+0x46>
 8008104:	6811      	ldr	r1, [r2, #0]
 8008106:	1855      	adds	r5, r2, r1
 8008108:	42a5      	cmp	r5, r4
 800810a:	d10b      	bne.n	8008124 <_free_r+0x70>
 800810c:	6824      	ldr	r4, [r4, #0]
 800810e:	4421      	add	r1, r4
 8008110:	1854      	adds	r4, r2, r1
 8008112:	42a3      	cmp	r3, r4
 8008114:	6011      	str	r1, [r2, #0]
 8008116:	d1e0      	bne.n	80080da <_free_r+0x26>
 8008118:	681c      	ldr	r4, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	6053      	str	r3, [r2, #4]
 800811e:	4421      	add	r1, r4
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	e7da      	b.n	80080da <_free_r+0x26>
 8008124:	d902      	bls.n	800812c <_free_r+0x78>
 8008126:	230c      	movs	r3, #12
 8008128:	6003      	str	r3, [r0, #0]
 800812a:	e7d6      	b.n	80080da <_free_r+0x26>
 800812c:	6825      	ldr	r5, [r4, #0]
 800812e:	1961      	adds	r1, r4, r5
 8008130:	428b      	cmp	r3, r1
 8008132:	bf04      	itt	eq
 8008134:	6819      	ldreq	r1, [r3, #0]
 8008136:	685b      	ldreq	r3, [r3, #4]
 8008138:	6063      	str	r3, [r4, #4]
 800813a:	bf04      	itt	eq
 800813c:	1949      	addeq	r1, r1, r5
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	6054      	str	r4, [r2, #4]
 8008142:	e7ca      	b.n	80080da <_free_r+0x26>
 8008144:	b003      	add	sp, #12
 8008146:	bd30      	pop	{r4, r5, pc}
 8008148:	20000368 	.word	0x20000368

0800814c <sbrk_aligned>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	4e0e      	ldr	r6, [pc, #56]	; (8008188 <sbrk_aligned+0x3c>)
 8008150:	460c      	mov	r4, r1
 8008152:	6831      	ldr	r1, [r6, #0]
 8008154:	4605      	mov	r5, r0
 8008156:	b911      	cbnz	r1, 800815e <sbrk_aligned+0x12>
 8008158:	f000 f9f2 	bl	8008540 <_sbrk_r>
 800815c:	6030      	str	r0, [r6, #0]
 800815e:	4621      	mov	r1, r4
 8008160:	4628      	mov	r0, r5
 8008162:	f000 f9ed 	bl	8008540 <_sbrk_r>
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d00a      	beq.n	8008180 <sbrk_aligned+0x34>
 800816a:	1cc4      	adds	r4, r0, #3
 800816c:	f024 0403 	bic.w	r4, r4, #3
 8008170:	42a0      	cmp	r0, r4
 8008172:	d007      	beq.n	8008184 <sbrk_aligned+0x38>
 8008174:	1a21      	subs	r1, r4, r0
 8008176:	4628      	mov	r0, r5
 8008178:	f000 f9e2 	bl	8008540 <_sbrk_r>
 800817c:	3001      	adds	r0, #1
 800817e:	d101      	bne.n	8008184 <sbrk_aligned+0x38>
 8008180:	f04f 34ff 	mov.w	r4, #4294967295
 8008184:	4620      	mov	r0, r4
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	2000036c 	.word	0x2000036c

0800818c <_malloc_r>:
 800818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008190:	1ccd      	adds	r5, r1, #3
 8008192:	f025 0503 	bic.w	r5, r5, #3
 8008196:	3508      	adds	r5, #8
 8008198:	2d0c      	cmp	r5, #12
 800819a:	bf38      	it	cc
 800819c:	250c      	movcc	r5, #12
 800819e:	2d00      	cmp	r5, #0
 80081a0:	4607      	mov	r7, r0
 80081a2:	db01      	blt.n	80081a8 <_malloc_r+0x1c>
 80081a4:	42a9      	cmp	r1, r5
 80081a6:	d905      	bls.n	80081b4 <_malloc_r+0x28>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	2600      	movs	r6, #0
 80081ae:	4630      	mov	r0, r6
 80081b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b4:	4e2e      	ldr	r6, [pc, #184]	; (8008270 <_malloc_r+0xe4>)
 80081b6:	f000 fa3f 	bl	8008638 <__malloc_lock>
 80081ba:	6833      	ldr	r3, [r6, #0]
 80081bc:	461c      	mov	r4, r3
 80081be:	bb34      	cbnz	r4, 800820e <_malloc_r+0x82>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4638      	mov	r0, r7
 80081c4:	f7ff ffc2 	bl	800814c <sbrk_aligned>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	4604      	mov	r4, r0
 80081cc:	d14d      	bne.n	800826a <_malloc_r+0xde>
 80081ce:	6834      	ldr	r4, [r6, #0]
 80081d0:	4626      	mov	r6, r4
 80081d2:	2e00      	cmp	r6, #0
 80081d4:	d140      	bne.n	8008258 <_malloc_r+0xcc>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	4631      	mov	r1, r6
 80081da:	4638      	mov	r0, r7
 80081dc:	eb04 0803 	add.w	r8, r4, r3
 80081e0:	f000 f9ae 	bl	8008540 <_sbrk_r>
 80081e4:	4580      	cmp	r8, r0
 80081e6:	d13a      	bne.n	800825e <_malloc_r+0xd2>
 80081e8:	6821      	ldr	r1, [r4, #0]
 80081ea:	3503      	adds	r5, #3
 80081ec:	1a6d      	subs	r5, r5, r1
 80081ee:	f025 0503 	bic.w	r5, r5, #3
 80081f2:	3508      	adds	r5, #8
 80081f4:	2d0c      	cmp	r5, #12
 80081f6:	bf38      	it	cc
 80081f8:	250c      	movcc	r5, #12
 80081fa:	4629      	mov	r1, r5
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff ffa5 	bl	800814c <sbrk_aligned>
 8008202:	3001      	adds	r0, #1
 8008204:	d02b      	beq.n	800825e <_malloc_r+0xd2>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	442b      	add	r3, r5
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	e00e      	b.n	800822c <_malloc_r+0xa0>
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	1b52      	subs	r2, r2, r5
 8008212:	d41e      	bmi.n	8008252 <_malloc_r+0xc6>
 8008214:	2a0b      	cmp	r2, #11
 8008216:	d916      	bls.n	8008246 <_malloc_r+0xba>
 8008218:	1961      	adds	r1, r4, r5
 800821a:	42a3      	cmp	r3, r4
 800821c:	6025      	str	r5, [r4, #0]
 800821e:	bf18      	it	ne
 8008220:	6059      	strne	r1, [r3, #4]
 8008222:	6863      	ldr	r3, [r4, #4]
 8008224:	bf08      	it	eq
 8008226:	6031      	streq	r1, [r6, #0]
 8008228:	5162      	str	r2, [r4, r5]
 800822a:	604b      	str	r3, [r1, #4]
 800822c:	4638      	mov	r0, r7
 800822e:	f104 060b 	add.w	r6, r4, #11
 8008232:	f000 fa07 	bl	8008644 <__malloc_unlock>
 8008236:	f026 0607 	bic.w	r6, r6, #7
 800823a:	1d23      	adds	r3, r4, #4
 800823c:	1af2      	subs	r2, r6, r3
 800823e:	d0b6      	beq.n	80081ae <_malloc_r+0x22>
 8008240:	1b9b      	subs	r3, r3, r6
 8008242:	50a3      	str	r3, [r4, r2]
 8008244:	e7b3      	b.n	80081ae <_malloc_r+0x22>
 8008246:	6862      	ldr	r2, [r4, #4]
 8008248:	42a3      	cmp	r3, r4
 800824a:	bf0c      	ite	eq
 800824c:	6032      	streq	r2, [r6, #0]
 800824e:	605a      	strne	r2, [r3, #4]
 8008250:	e7ec      	b.n	800822c <_malloc_r+0xa0>
 8008252:	4623      	mov	r3, r4
 8008254:	6864      	ldr	r4, [r4, #4]
 8008256:	e7b2      	b.n	80081be <_malloc_r+0x32>
 8008258:	4634      	mov	r4, r6
 800825a:	6876      	ldr	r6, [r6, #4]
 800825c:	e7b9      	b.n	80081d2 <_malloc_r+0x46>
 800825e:	230c      	movs	r3, #12
 8008260:	603b      	str	r3, [r7, #0]
 8008262:	4638      	mov	r0, r7
 8008264:	f000 f9ee 	bl	8008644 <__malloc_unlock>
 8008268:	e7a1      	b.n	80081ae <_malloc_r+0x22>
 800826a:	6025      	str	r5, [r4, #0]
 800826c:	e7de      	b.n	800822c <_malloc_r+0xa0>
 800826e:	bf00      	nop
 8008270:	20000368 	.word	0x20000368

08008274 <__ssputs_r>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	688e      	ldr	r6, [r1, #8]
 800827a:	429e      	cmp	r6, r3
 800827c:	4682      	mov	sl, r0
 800827e:	460c      	mov	r4, r1
 8008280:	4690      	mov	r8, r2
 8008282:	461f      	mov	r7, r3
 8008284:	d838      	bhi.n	80082f8 <__ssputs_r+0x84>
 8008286:	898a      	ldrh	r2, [r1, #12]
 8008288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800828c:	d032      	beq.n	80082f4 <__ssputs_r+0x80>
 800828e:	6825      	ldr	r5, [r4, #0]
 8008290:	6909      	ldr	r1, [r1, #16]
 8008292:	eba5 0901 	sub.w	r9, r5, r1
 8008296:	6965      	ldr	r5, [r4, #20]
 8008298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800829c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082a0:	3301      	adds	r3, #1
 80082a2:	444b      	add	r3, r9
 80082a4:	106d      	asrs	r5, r5, #1
 80082a6:	429d      	cmp	r5, r3
 80082a8:	bf38      	it	cc
 80082aa:	461d      	movcc	r5, r3
 80082ac:	0553      	lsls	r3, r2, #21
 80082ae:	d531      	bpl.n	8008314 <__ssputs_r+0xa0>
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7ff ff6b 	bl	800818c <_malloc_r>
 80082b6:	4606      	mov	r6, r0
 80082b8:	b950      	cbnz	r0, 80082d0 <__ssputs_r+0x5c>
 80082ba:	230c      	movs	r3, #12
 80082bc:	f8ca 3000 	str.w	r3, [sl]
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d0:	6921      	ldr	r1, [r4, #16]
 80082d2:	464a      	mov	r2, r9
 80082d4:	f7ff fa08 	bl	80076e8 <memcpy>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	6126      	str	r6, [r4, #16]
 80082e6:	6165      	str	r5, [r4, #20]
 80082e8:	444e      	add	r6, r9
 80082ea:	eba5 0509 	sub.w	r5, r5, r9
 80082ee:	6026      	str	r6, [r4, #0]
 80082f0:	60a5      	str	r5, [r4, #8]
 80082f2:	463e      	mov	r6, r7
 80082f4:	42be      	cmp	r6, r7
 80082f6:	d900      	bls.n	80082fa <__ssputs_r+0x86>
 80082f8:	463e      	mov	r6, r7
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	4632      	mov	r2, r6
 80082fe:	4641      	mov	r1, r8
 8008300:	f000 f980 	bl	8008604 <memmove>
 8008304:	68a3      	ldr	r3, [r4, #8]
 8008306:	1b9b      	subs	r3, r3, r6
 8008308:	60a3      	str	r3, [r4, #8]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	4433      	add	r3, r6
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	2000      	movs	r0, #0
 8008312:	e7db      	b.n	80082cc <__ssputs_r+0x58>
 8008314:	462a      	mov	r2, r5
 8008316:	f000 f99b 	bl	8008650 <_realloc_r>
 800831a:	4606      	mov	r6, r0
 800831c:	2800      	cmp	r0, #0
 800831e:	d1e1      	bne.n	80082e4 <__ssputs_r+0x70>
 8008320:	6921      	ldr	r1, [r4, #16]
 8008322:	4650      	mov	r0, sl
 8008324:	f7ff fec6 	bl	80080b4 <_free_r>
 8008328:	e7c7      	b.n	80082ba <__ssputs_r+0x46>
	...

0800832c <_svfiprintf_r>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	4698      	mov	r8, r3
 8008332:	898b      	ldrh	r3, [r1, #12]
 8008334:	061b      	lsls	r3, r3, #24
 8008336:	b09d      	sub	sp, #116	; 0x74
 8008338:	4607      	mov	r7, r0
 800833a:	460d      	mov	r5, r1
 800833c:	4614      	mov	r4, r2
 800833e:	d50e      	bpl.n	800835e <_svfiprintf_r+0x32>
 8008340:	690b      	ldr	r3, [r1, #16]
 8008342:	b963      	cbnz	r3, 800835e <_svfiprintf_r+0x32>
 8008344:	2140      	movs	r1, #64	; 0x40
 8008346:	f7ff ff21 	bl	800818c <_malloc_r>
 800834a:	6028      	str	r0, [r5, #0]
 800834c:	6128      	str	r0, [r5, #16]
 800834e:	b920      	cbnz	r0, 800835a <_svfiprintf_r+0x2e>
 8008350:	230c      	movs	r3, #12
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	e0d1      	b.n	80084fe <_svfiprintf_r+0x1d2>
 800835a:	2340      	movs	r3, #64	; 0x40
 800835c:	616b      	str	r3, [r5, #20]
 800835e:	2300      	movs	r3, #0
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	2320      	movs	r3, #32
 8008364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008368:	f8cd 800c 	str.w	r8, [sp, #12]
 800836c:	2330      	movs	r3, #48	; 0x30
 800836e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008518 <_svfiprintf_r+0x1ec>
 8008372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008376:	f04f 0901 	mov.w	r9, #1
 800837a:	4623      	mov	r3, r4
 800837c:	469a      	mov	sl, r3
 800837e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008382:	b10a      	cbz	r2, 8008388 <_svfiprintf_r+0x5c>
 8008384:	2a25      	cmp	r2, #37	; 0x25
 8008386:	d1f9      	bne.n	800837c <_svfiprintf_r+0x50>
 8008388:	ebba 0b04 	subs.w	fp, sl, r4
 800838c:	d00b      	beq.n	80083a6 <_svfiprintf_r+0x7a>
 800838e:	465b      	mov	r3, fp
 8008390:	4622      	mov	r2, r4
 8008392:	4629      	mov	r1, r5
 8008394:	4638      	mov	r0, r7
 8008396:	f7ff ff6d 	bl	8008274 <__ssputs_r>
 800839a:	3001      	adds	r0, #1
 800839c:	f000 80aa 	beq.w	80084f4 <_svfiprintf_r+0x1c8>
 80083a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a2:	445a      	add	r2, fp
 80083a4:	9209      	str	r2, [sp, #36]	; 0x24
 80083a6:	f89a 3000 	ldrb.w	r3, [sl]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 80a2 	beq.w	80084f4 <_svfiprintf_r+0x1c8>
 80083b0:	2300      	movs	r3, #0
 80083b2:	f04f 32ff 	mov.w	r2, #4294967295
 80083b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ba:	f10a 0a01 	add.w	sl, sl, #1
 80083be:	9304      	str	r3, [sp, #16]
 80083c0:	9307      	str	r3, [sp, #28]
 80083c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083c6:	931a      	str	r3, [sp, #104]	; 0x68
 80083c8:	4654      	mov	r4, sl
 80083ca:	2205      	movs	r2, #5
 80083cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d0:	4851      	ldr	r0, [pc, #324]	; (8008518 <_svfiprintf_r+0x1ec>)
 80083d2:	f7f7 ff05 	bl	80001e0 <memchr>
 80083d6:	9a04      	ldr	r2, [sp, #16]
 80083d8:	b9d8      	cbnz	r0, 8008412 <_svfiprintf_r+0xe6>
 80083da:	06d0      	lsls	r0, r2, #27
 80083dc:	bf44      	itt	mi
 80083de:	2320      	movmi	r3, #32
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e4:	0711      	lsls	r1, r2, #28
 80083e6:	bf44      	itt	mi
 80083e8:	232b      	movmi	r3, #43	; 0x2b
 80083ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ee:	f89a 3000 	ldrb.w	r3, [sl]
 80083f2:	2b2a      	cmp	r3, #42	; 0x2a
 80083f4:	d015      	beq.n	8008422 <_svfiprintf_r+0xf6>
 80083f6:	9a07      	ldr	r2, [sp, #28]
 80083f8:	4654      	mov	r4, sl
 80083fa:	2000      	movs	r0, #0
 80083fc:	f04f 0c0a 	mov.w	ip, #10
 8008400:	4621      	mov	r1, r4
 8008402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008406:	3b30      	subs	r3, #48	; 0x30
 8008408:	2b09      	cmp	r3, #9
 800840a:	d94e      	bls.n	80084aa <_svfiprintf_r+0x17e>
 800840c:	b1b0      	cbz	r0, 800843c <_svfiprintf_r+0x110>
 800840e:	9207      	str	r2, [sp, #28]
 8008410:	e014      	b.n	800843c <_svfiprintf_r+0x110>
 8008412:	eba0 0308 	sub.w	r3, r0, r8
 8008416:	fa09 f303 	lsl.w	r3, r9, r3
 800841a:	4313      	orrs	r3, r2
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	46a2      	mov	sl, r4
 8008420:	e7d2      	b.n	80083c8 <_svfiprintf_r+0x9c>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	1d19      	adds	r1, r3, #4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	9103      	str	r1, [sp, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	bfbb      	ittet	lt
 800842e:	425b      	neglt	r3, r3
 8008430:	f042 0202 	orrlt.w	r2, r2, #2
 8008434:	9307      	strge	r3, [sp, #28]
 8008436:	9307      	strlt	r3, [sp, #28]
 8008438:	bfb8      	it	lt
 800843a:	9204      	strlt	r2, [sp, #16]
 800843c:	7823      	ldrb	r3, [r4, #0]
 800843e:	2b2e      	cmp	r3, #46	; 0x2e
 8008440:	d10c      	bne.n	800845c <_svfiprintf_r+0x130>
 8008442:	7863      	ldrb	r3, [r4, #1]
 8008444:	2b2a      	cmp	r3, #42	; 0x2a
 8008446:	d135      	bne.n	80084b4 <_svfiprintf_r+0x188>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	9203      	str	r2, [sp, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfb8      	it	lt
 8008454:	f04f 33ff 	movlt.w	r3, #4294967295
 8008458:	3402      	adds	r4, #2
 800845a:	9305      	str	r3, [sp, #20]
 800845c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008528 <_svfiprintf_r+0x1fc>
 8008460:	7821      	ldrb	r1, [r4, #0]
 8008462:	2203      	movs	r2, #3
 8008464:	4650      	mov	r0, sl
 8008466:	f7f7 febb 	bl	80001e0 <memchr>
 800846a:	b140      	cbz	r0, 800847e <_svfiprintf_r+0x152>
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	eba0 000a 	sub.w	r0, r0, sl
 8008472:	fa03 f000 	lsl.w	r0, r3, r0
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	4303      	orrs	r3, r0
 800847a:	3401      	adds	r4, #1
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008482:	4826      	ldr	r0, [pc, #152]	; (800851c <_svfiprintf_r+0x1f0>)
 8008484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008488:	2206      	movs	r2, #6
 800848a:	f7f7 fea9 	bl	80001e0 <memchr>
 800848e:	2800      	cmp	r0, #0
 8008490:	d038      	beq.n	8008504 <_svfiprintf_r+0x1d8>
 8008492:	4b23      	ldr	r3, [pc, #140]	; (8008520 <_svfiprintf_r+0x1f4>)
 8008494:	bb1b      	cbnz	r3, 80084de <_svfiprintf_r+0x1b2>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	3307      	adds	r3, #7
 800849a:	f023 0307 	bic.w	r3, r3, #7
 800849e:	3308      	adds	r3, #8
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a4:	4433      	add	r3, r6
 80084a6:	9309      	str	r3, [sp, #36]	; 0x24
 80084a8:	e767      	b.n	800837a <_svfiprintf_r+0x4e>
 80084aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ae:	460c      	mov	r4, r1
 80084b0:	2001      	movs	r0, #1
 80084b2:	e7a5      	b.n	8008400 <_svfiprintf_r+0xd4>
 80084b4:	2300      	movs	r3, #0
 80084b6:	3401      	adds	r4, #1
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	4619      	mov	r1, r3
 80084bc:	f04f 0c0a 	mov.w	ip, #10
 80084c0:	4620      	mov	r0, r4
 80084c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c6:	3a30      	subs	r2, #48	; 0x30
 80084c8:	2a09      	cmp	r2, #9
 80084ca:	d903      	bls.n	80084d4 <_svfiprintf_r+0x1a8>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0c5      	beq.n	800845c <_svfiprintf_r+0x130>
 80084d0:	9105      	str	r1, [sp, #20]
 80084d2:	e7c3      	b.n	800845c <_svfiprintf_r+0x130>
 80084d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d8:	4604      	mov	r4, r0
 80084da:	2301      	movs	r3, #1
 80084dc:	e7f0      	b.n	80084c0 <_svfiprintf_r+0x194>
 80084de:	ab03      	add	r3, sp, #12
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	462a      	mov	r2, r5
 80084e4:	4b0f      	ldr	r3, [pc, #60]	; (8008524 <_svfiprintf_r+0x1f8>)
 80084e6:	a904      	add	r1, sp, #16
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7fc fc47 	bl	8004d7c <_printf_float>
 80084ee:	1c42      	adds	r2, r0, #1
 80084f0:	4606      	mov	r6, r0
 80084f2:	d1d6      	bne.n	80084a2 <_svfiprintf_r+0x176>
 80084f4:	89ab      	ldrh	r3, [r5, #12]
 80084f6:	065b      	lsls	r3, r3, #25
 80084f8:	f53f af2c 	bmi.w	8008354 <_svfiprintf_r+0x28>
 80084fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084fe:	b01d      	add	sp, #116	; 0x74
 8008500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008504:	ab03      	add	r3, sp, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462a      	mov	r2, r5
 800850a:	4b06      	ldr	r3, [pc, #24]	; (8008524 <_svfiprintf_r+0x1f8>)
 800850c:	a904      	add	r1, sp, #16
 800850e:	4638      	mov	r0, r7
 8008510:	f7fc fed8 	bl	80052c4 <_printf_i>
 8008514:	e7eb      	b.n	80084ee <_svfiprintf_r+0x1c2>
 8008516:	bf00      	nop
 8008518:	0800a44c 	.word	0x0800a44c
 800851c:	0800a456 	.word	0x0800a456
 8008520:	08004d7d 	.word	0x08004d7d
 8008524:	08008275 	.word	0x08008275
 8008528:	0800a452 	.word	0x0800a452
 800852c:	00000000 	.word	0x00000000

08008530 <nan>:
 8008530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008538 <nan+0x8>
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	00000000 	.word	0x00000000
 800853c:	7ff80000 	.word	0x7ff80000

08008540 <_sbrk_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d06      	ldr	r5, [pc, #24]	; (800855c <_sbrk_r+0x1c>)
 8008544:	2300      	movs	r3, #0
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	f7f9 fd3e 	bl	8001fcc <_sbrk>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_sbrk_r+0x1a>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_sbrk_r+0x1a>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20000370 	.word	0x20000370

08008560 <strncmp>:
 8008560:	b510      	push	{r4, lr}
 8008562:	b17a      	cbz	r2, 8008584 <strncmp+0x24>
 8008564:	4603      	mov	r3, r0
 8008566:	3901      	subs	r1, #1
 8008568:	1884      	adds	r4, r0, r2
 800856a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800856e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008572:	4290      	cmp	r0, r2
 8008574:	d101      	bne.n	800857a <strncmp+0x1a>
 8008576:	42a3      	cmp	r3, r4
 8008578:	d101      	bne.n	800857e <strncmp+0x1e>
 800857a:	1a80      	subs	r0, r0, r2
 800857c:	bd10      	pop	{r4, pc}
 800857e:	2800      	cmp	r0, #0
 8008580:	d1f3      	bne.n	800856a <strncmp+0xa>
 8008582:	e7fa      	b.n	800857a <strncmp+0x1a>
 8008584:	4610      	mov	r0, r2
 8008586:	e7f9      	b.n	800857c <strncmp+0x1c>

08008588 <__ascii_wctomb>:
 8008588:	b149      	cbz	r1, 800859e <__ascii_wctomb+0x16>
 800858a:	2aff      	cmp	r2, #255	; 0xff
 800858c:	bf85      	ittet	hi
 800858e:	238a      	movhi	r3, #138	; 0x8a
 8008590:	6003      	strhi	r3, [r0, #0]
 8008592:	700a      	strbls	r2, [r1, #0]
 8008594:	f04f 30ff 	movhi.w	r0, #4294967295
 8008598:	bf98      	it	ls
 800859a:	2001      	movls	r0, #1
 800859c:	4770      	bx	lr
 800859e:	4608      	mov	r0, r1
 80085a0:	4770      	bx	lr
	...

080085a4 <__assert_func>:
 80085a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085a6:	4614      	mov	r4, r2
 80085a8:	461a      	mov	r2, r3
 80085aa:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <__assert_func+0x2c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4605      	mov	r5, r0
 80085b0:	68d8      	ldr	r0, [r3, #12]
 80085b2:	b14c      	cbz	r4, 80085c8 <__assert_func+0x24>
 80085b4:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <__assert_func+0x30>)
 80085b6:	9100      	str	r1, [sp, #0]
 80085b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085bc:	4906      	ldr	r1, [pc, #24]	; (80085d8 <__assert_func+0x34>)
 80085be:	462b      	mov	r3, r5
 80085c0:	f000 f80e 	bl	80085e0 <fiprintf>
 80085c4:	f000 fa8c 	bl	8008ae0 <abort>
 80085c8:	4b04      	ldr	r3, [pc, #16]	; (80085dc <__assert_func+0x38>)
 80085ca:	461c      	mov	r4, r3
 80085cc:	e7f3      	b.n	80085b6 <__assert_func+0x12>
 80085ce:	bf00      	nop
 80085d0:	20000014 	.word	0x20000014
 80085d4:	0800a45d 	.word	0x0800a45d
 80085d8:	0800a46a 	.word	0x0800a46a
 80085dc:	0800a498 	.word	0x0800a498

080085e0 <fiprintf>:
 80085e0:	b40e      	push	{r1, r2, r3}
 80085e2:	b503      	push	{r0, r1, lr}
 80085e4:	4601      	mov	r1, r0
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	4805      	ldr	r0, [pc, #20]	; (8008600 <fiprintf+0x20>)
 80085ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ee:	6800      	ldr	r0, [r0, #0]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	f000 f885 	bl	8008700 <_vfiprintf_r>
 80085f6:	b002      	add	sp, #8
 80085f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085fc:	b003      	add	sp, #12
 80085fe:	4770      	bx	lr
 8008600:	20000014 	.word	0x20000014

08008604 <memmove>:
 8008604:	4288      	cmp	r0, r1
 8008606:	b510      	push	{r4, lr}
 8008608:	eb01 0402 	add.w	r4, r1, r2
 800860c:	d902      	bls.n	8008614 <memmove+0x10>
 800860e:	4284      	cmp	r4, r0
 8008610:	4623      	mov	r3, r4
 8008612:	d807      	bhi.n	8008624 <memmove+0x20>
 8008614:	1e43      	subs	r3, r0, #1
 8008616:	42a1      	cmp	r1, r4
 8008618:	d008      	beq.n	800862c <memmove+0x28>
 800861a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800861e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008622:	e7f8      	b.n	8008616 <memmove+0x12>
 8008624:	4402      	add	r2, r0
 8008626:	4601      	mov	r1, r0
 8008628:	428a      	cmp	r2, r1
 800862a:	d100      	bne.n	800862e <memmove+0x2a>
 800862c:	bd10      	pop	{r4, pc}
 800862e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008636:	e7f7      	b.n	8008628 <memmove+0x24>

08008638 <__malloc_lock>:
 8008638:	4801      	ldr	r0, [pc, #4]	; (8008640 <__malloc_lock+0x8>)
 800863a:	f000 bc11 	b.w	8008e60 <__retarget_lock_acquire_recursive>
 800863e:	bf00      	nop
 8008640:	20000374 	.word	0x20000374

08008644 <__malloc_unlock>:
 8008644:	4801      	ldr	r0, [pc, #4]	; (800864c <__malloc_unlock+0x8>)
 8008646:	f000 bc0c 	b.w	8008e62 <__retarget_lock_release_recursive>
 800864a:	bf00      	nop
 800864c:	20000374 	.word	0x20000374

08008650 <_realloc_r>:
 8008650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008654:	4680      	mov	r8, r0
 8008656:	4614      	mov	r4, r2
 8008658:	460e      	mov	r6, r1
 800865a:	b921      	cbnz	r1, 8008666 <_realloc_r+0x16>
 800865c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	4611      	mov	r1, r2
 8008662:	f7ff bd93 	b.w	800818c <_malloc_r>
 8008666:	b92a      	cbnz	r2, 8008674 <_realloc_r+0x24>
 8008668:	f7ff fd24 	bl	80080b4 <_free_r>
 800866c:	4625      	mov	r5, r4
 800866e:	4628      	mov	r0, r5
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	f000 fc5c 	bl	8008f30 <_malloc_usable_size_r>
 8008678:	4284      	cmp	r4, r0
 800867a:	4607      	mov	r7, r0
 800867c:	d802      	bhi.n	8008684 <_realloc_r+0x34>
 800867e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008682:	d812      	bhi.n	80086aa <_realloc_r+0x5a>
 8008684:	4621      	mov	r1, r4
 8008686:	4640      	mov	r0, r8
 8008688:	f7ff fd80 	bl	800818c <_malloc_r>
 800868c:	4605      	mov	r5, r0
 800868e:	2800      	cmp	r0, #0
 8008690:	d0ed      	beq.n	800866e <_realloc_r+0x1e>
 8008692:	42bc      	cmp	r4, r7
 8008694:	4622      	mov	r2, r4
 8008696:	4631      	mov	r1, r6
 8008698:	bf28      	it	cs
 800869a:	463a      	movcs	r2, r7
 800869c:	f7ff f824 	bl	80076e8 <memcpy>
 80086a0:	4631      	mov	r1, r6
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7ff fd06 	bl	80080b4 <_free_r>
 80086a8:	e7e1      	b.n	800866e <_realloc_r+0x1e>
 80086aa:	4635      	mov	r5, r6
 80086ac:	e7df      	b.n	800866e <_realloc_r+0x1e>

080086ae <__sfputc_r>:
 80086ae:	6893      	ldr	r3, [r2, #8]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	b410      	push	{r4}
 80086b6:	6093      	str	r3, [r2, #8]
 80086b8:	da08      	bge.n	80086cc <__sfputc_r+0x1e>
 80086ba:	6994      	ldr	r4, [r2, #24]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	db01      	blt.n	80086c4 <__sfputc_r+0x16>
 80086c0:	290a      	cmp	r1, #10
 80086c2:	d103      	bne.n	80086cc <__sfputc_r+0x1e>
 80086c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086c8:	f000 b94a 	b.w	8008960 <__swbuf_r>
 80086cc:	6813      	ldr	r3, [r2, #0]
 80086ce:	1c58      	adds	r0, r3, #1
 80086d0:	6010      	str	r0, [r2, #0]
 80086d2:	7019      	strb	r1, [r3, #0]
 80086d4:	4608      	mov	r0, r1
 80086d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086da:	4770      	bx	lr

080086dc <__sfputs_r>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	4606      	mov	r6, r0
 80086e0:	460f      	mov	r7, r1
 80086e2:	4614      	mov	r4, r2
 80086e4:	18d5      	adds	r5, r2, r3
 80086e6:	42ac      	cmp	r4, r5
 80086e8:	d101      	bne.n	80086ee <__sfputs_r+0x12>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e007      	b.n	80086fe <__sfputs_r+0x22>
 80086ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f2:	463a      	mov	r2, r7
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff ffda 	bl	80086ae <__sfputc_r>
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	d1f3      	bne.n	80086e6 <__sfputs_r+0xa>
 80086fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008700 <_vfiprintf_r>:
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	460d      	mov	r5, r1
 8008706:	b09d      	sub	sp, #116	; 0x74
 8008708:	4614      	mov	r4, r2
 800870a:	4698      	mov	r8, r3
 800870c:	4606      	mov	r6, r0
 800870e:	b118      	cbz	r0, 8008718 <_vfiprintf_r+0x18>
 8008710:	6983      	ldr	r3, [r0, #24]
 8008712:	b90b      	cbnz	r3, 8008718 <_vfiprintf_r+0x18>
 8008714:	f000 fb06 	bl	8008d24 <__sinit>
 8008718:	4b89      	ldr	r3, [pc, #548]	; (8008940 <_vfiprintf_r+0x240>)
 800871a:	429d      	cmp	r5, r3
 800871c:	d11b      	bne.n	8008756 <_vfiprintf_r+0x56>
 800871e:	6875      	ldr	r5, [r6, #4]
 8008720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008722:	07d9      	lsls	r1, r3, #31
 8008724:	d405      	bmi.n	8008732 <_vfiprintf_r+0x32>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	059a      	lsls	r2, r3, #22
 800872a:	d402      	bmi.n	8008732 <_vfiprintf_r+0x32>
 800872c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800872e:	f000 fb97 	bl	8008e60 <__retarget_lock_acquire_recursive>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	071b      	lsls	r3, r3, #28
 8008736:	d501      	bpl.n	800873c <_vfiprintf_r+0x3c>
 8008738:	692b      	ldr	r3, [r5, #16]
 800873a:	b9eb      	cbnz	r3, 8008778 <_vfiprintf_r+0x78>
 800873c:	4629      	mov	r1, r5
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f960 	bl	8008a04 <__swsetup_r>
 8008744:	b1c0      	cbz	r0, 8008778 <_vfiprintf_r+0x78>
 8008746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008748:	07dc      	lsls	r4, r3, #31
 800874a:	d50e      	bpl.n	800876a <_vfiprintf_r+0x6a>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	b01d      	add	sp, #116	; 0x74
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	4b7b      	ldr	r3, [pc, #492]	; (8008944 <_vfiprintf_r+0x244>)
 8008758:	429d      	cmp	r5, r3
 800875a:	d101      	bne.n	8008760 <_vfiprintf_r+0x60>
 800875c:	68b5      	ldr	r5, [r6, #8]
 800875e:	e7df      	b.n	8008720 <_vfiprintf_r+0x20>
 8008760:	4b79      	ldr	r3, [pc, #484]	; (8008948 <_vfiprintf_r+0x248>)
 8008762:	429d      	cmp	r5, r3
 8008764:	bf08      	it	eq
 8008766:	68f5      	ldreq	r5, [r6, #12]
 8008768:	e7da      	b.n	8008720 <_vfiprintf_r+0x20>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	0598      	lsls	r0, r3, #22
 800876e:	d4ed      	bmi.n	800874c <_vfiprintf_r+0x4c>
 8008770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008772:	f000 fb76 	bl	8008e62 <__retarget_lock_release_recursive>
 8008776:	e7e9      	b.n	800874c <_vfiprintf_r+0x4c>
 8008778:	2300      	movs	r3, #0
 800877a:	9309      	str	r3, [sp, #36]	; 0x24
 800877c:	2320      	movs	r3, #32
 800877e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008782:	f8cd 800c 	str.w	r8, [sp, #12]
 8008786:	2330      	movs	r3, #48	; 0x30
 8008788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800894c <_vfiprintf_r+0x24c>
 800878c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008790:	f04f 0901 	mov.w	r9, #1
 8008794:	4623      	mov	r3, r4
 8008796:	469a      	mov	sl, r3
 8008798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800879c:	b10a      	cbz	r2, 80087a2 <_vfiprintf_r+0xa2>
 800879e:	2a25      	cmp	r2, #37	; 0x25
 80087a0:	d1f9      	bne.n	8008796 <_vfiprintf_r+0x96>
 80087a2:	ebba 0b04 	subs.w	fp, sl, r4
 80087a6:	d00b      	beq.n	80087c0 <_vfiprintf_r+0xc0>
 80087a8:	465b      	mov	r3, fp
 80087aa:	4622      	mov	r2, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ff94 	bl	80086dc <__sfputs_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	f000 80aa 	beq.w	800890e <_vfiprintf_r+0x20e>
 80087ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087bc:	445a      	add	r2, fp
 80087be:	9209      	str	r2, [sp, #36]	; 0x24
 80087c0:	f89a 3000 	ldrb.w	r3, [sl]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80a2 	beq.w	800890e <_vfiprintf_r+0x20e>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d4:	f10a 0a01 	add.w	sl, sl, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087e0:	931a      	str	r3, [sp, #104]	; 0x68
 80087e2:	4654      	mov	r4, sl
 80087e4:	2205      	movs	r2, #5
 80087e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ea:	4858      	ldr	r0, [pc, #352]	; (800894c <_vfiprintf_r+0x24c>)
 80087ec:	f7f7 fcf8 	bl	80001e0 <memchr>
 80087f0:	9a04      	ldr	r2, [sp, #16]
 80087f2:	b9d8      	cbnz	r0, 800882c <_vfiprintf_r+0x12c>
 80087f4:	06d1      	lsls	r1, r2, #27
 80087f6:	bf44      	itt	mi
 80087f8:	2320      	movmi	r3, #32
 80087fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fe:	0713      	lsls	r3, r2, #28
 8008800:	bf44      	itt	mi
 8008802:	232b      	movmi	r3, #43	; 0x2b
 8008804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008808:	f89a 3000 	ldrb.w	r3, [sl]
 800880c:	2b2a      	cmp	r3, #42	; 0x2a
 800880e:	d015      	beq.n	800883c <_vfiprintf_r+0x13c>
 8008810:	9a07      	ldr	r2, [sp, #28]
 8008812:	4654      	mov	r4, sl
 8008814:	2000      	movs	r0, #0
 8008816:	f04f 0c0a 	mov.w	ip, #10
 800881a:	4621      	mov	r1, r4
 800881c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008820:	3b30      	subs	r3, #48	; 0x30
 8008822:	2b09      	cmp	r3, #9
 8008824:	d94e      	bls.n	80088c4 <_vfiprintf_r+0x1c4>
 8008826:	b1b0      	cbz	r0, 8008856 <_vfiprintf_r+0x156>
 8008828:	9207      	str	r2, [sp, #28]
 800882a:	e014      	b.n	8008856 <_vfiprintf_r+0x156>
 800882c:	eba0 0308 	sub.w	r3, r0, r8
 8008830:	fa09 f303 	lsl.w	r3, r9, r3
 8008834:	4313      	orrs	r3, r2
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	46a2      	mov	sl, r4
 800883a:	e7d2      	b.n	80087e2 <_vfiprintf_r+0xe2>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	1d19      	adds	r1, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	9103      	str	r1, [sp, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfbb      	ittet	lt
 8008848:	425b      	neglt	r3, r3
 800884a:	f042 0202 	orrlt.w	r2, r2, #2
 800884e:	9307      	strge	r3, [sp, #28]
 8008850:	9307      	strlt	r3, [sp, #28]
 8008852:	bfb8      	it	lt
 8008854:	9204      	strlt	r2, [sp, #16]
 8008856:	7823      	ldrb	r3, [r4, #0]
 8008858:	2b2e      	cmp	r3, #46	; 0x2e
 800885a:	d10c      	bne.n	8008876 <_vfiprintf_r+0x176>
 800885c:	7863      	ldrb	r3, [r4, #1]
 800885e:	2b2a      	cmp	r3, #42	; 0x2a
 8008860:	d135      	bne.n	80088ce <_vfiprintf_r+0x1ce>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	1d1a      	adds	r2, r3, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	9203      	str	r2, [sp, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfb8      	it	lt
 800886e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008872:	3402      	adds	r4, #2
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800895c <_vfiprintf_r+0x25c>
 800887a:	7821      	ldrb	r1, [r4, #0]
 800887c:	2203      	movs	r2, #3
 800887e:	4650      	mov	r0, sl
 8008880:	f7f7 fcae 	bl	80001e0 <memchr>
 8008884:	b140      	cbz	r0, 8008898 <_vfiprintf_r+0x198>
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	eba0 000a 	sub.w	r0, r0, sl
 800888c:	fa03 f000 	lsl.w	r0, r3, r0
 8008890:	9b04      	ldr	r3, [sp, #16]
 8008892:	4303      	orrs	r3, r0
 8008894:	3401      	adds	r4, #1
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889c:	482c      	ldr	r0, [pc, #176]	; (8008950 <_vfiprintf_r+0x250>)
 800889e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a2:	2206      	movs	r2, #6
 80088a4:	f7f7 fc9c 	bl	80001e0 <memchr>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d03f      	beq.n	800892c <_vfiprintf_r+0x22c>
 80088ac:	4b29      	ldr	r3, [pc, #164]	; (8008954 <_vfiprintf_r+0x254>)
 80088ae:	bb1b      	cbnz	r3, 80088f8 <_vfiprintf_r+0x1f8>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	3307      	adds	r3, #7
 80088b4:	f023 0307 	bic.w	r3, r3, #7
 80088b8:	3308      	adds	r3, #8
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	443b      	add	r3, r7
 80088c0:	9309      	str	r3, [sp, #36]	; 0x24
 80088c2:	e767      	b.n	8008794 <_vfiprintf_r+0x94>
 80088c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c8:	460c      	mov	r4, r1
 80088ca:	2001      	movs	r0, #1
 80088cc:	e7a5      	b.n	800881a <_vfiprintf_r+0x11a>
 80088ce:	2300      	movs	r3, #0
 80088d0:	3401      	adds	r4, #1
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	4619      	mov	r1, r3
 80088d6:	f04f 0c0a 	mov.w	ip, #10
 80088da:	4620      	mov	r0, r4
 80088dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e0:	3a30      	subs	r2, #48	; 0x30
 80088e2:	2a09      	cmp	r2, #9
 80088e4:	d903      	bls.n	80088ee <_vfiprintf_r+0x1ee>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0c5      	beq.n	8008876 <_vfiprintf_r+0x176>
 80088ea:	9105      	str	r1, [sp, #20]
 80088ec:	e7c3      	b.n	8008876 <_vfiprintf_r+0x176>
 80088ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f2:	4604      	mov	r4, r0
 80088f4:	2301      	movs	r3, #1
 80088f6:	e7f0      	b.n	80088da <_vfiprintf_r+0x1da>
 80088f8:	ab03      	add	r3, sp, #12
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	462a      	mov	r2, r5
 80088fe:	4b16      	ldr	r3, [pc, #88]	; (8008958 <_vfiprintf_r+0x258>)
 8008900:	a904      	add	r1, sp, #16
 8008902:	4630      	mov	r0, r6
 8008904:	f7fc fa3a 	bl	8004d7c <_printf_float>
 8008908:	4607      	mov	r7, r0
 800890a:	1c78      	adds	r0, r7, #1
 800890c:	d1d6      	bne.n	80088bc <_vfiprintf_r+0x1bc>
 800890e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008910:	07d9      	lsls	r1, r3, #31
 8008912:	d405      	bmi.n	8008920 <_vfiprintf_r+0x220>
 8008914:	89ab      	ldrh	r3, [r5, #12]
 8008916:	059a      	lsls	r2, r3, #22
 8008918:	d402      	bmi.n	8008920 <_vfiprintf_r+0x220>
 800891a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891c:	f000 faa1 	bl	8008e62 <__retarget_lock_release_recursive>
 8008920:	89ab      	ldrh	r3, [r5, #12]
 8008922:	065b      	lsls	r3, r3, #25
 8008924:	f53f af12 	bmi.w	800874c <_vfiprintf_r+0x4c>
 8008928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892a:	e711      	b.n	8008750 <_vfiprintf_r+0x50>
 800892c:	ab03      	add	r3, sp, #12
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	462a      	mov	r2, r5
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <_vfiprintf_r+0x258>)
 8008934:	a904      	add	r1, sp, #16
 8008936:	4630      	mov	r0, r6
 8008938:	f7fc fcc4 	bl	80052c4 <_printf_i>
 800893c:	e7e4      	b.n	8008908 <_vfiprintf_r+0x208>
 800893e:	bf00      	nop
 8008940:	0800a4bc 	.word	0x0800a4bc
 8008944:	0800a4dc 	.word	0x0800a4dc
 8008948:	0800a49c 	.word	0x0800a49c
 800894c:	0800a44c 	.word	0x0800a44c
 8008950:	0800a456 	.word	0x0800a456
 8008954:	08004d7d 	.word	0x08004d7d
 8008958:	080086dd 	.word	0x080086dd
 800895c:	0800a452 	.word	0x0800a452

08008960 <__swbuf_r>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	460e      	mov	r6, r1
 8008964:	4614      	mov	r4, r2
 8008966:	4605      	mov	r5, r0
 8008968:	b118      	cbz	r0, 8008972 <__swbuf_r+0x12>
 800896a:	6983      	ldr	r3, [r0, #24]
 800896c:	b90b      	cbnz	r3, 8008972 <__swbuf_r+0x12>
 800896e:	f000 f9d9 	bl	8008d24 <__sinit>
 8008972:	4b21      	ldr	r3, [pc, #132]	; (80089f8 <__swbuf_r+0x98>)
 8008974:	429c      	cmp	r4, r3
 8008976:	d12b      	bne.n	80089d0 <__swbuf_r+0x70>
 8008978:	686c      	ldr	r4, [r5, #4]
 800897a:	69a3      	ldr	r3, [r4, #24]
 800897c:	60a3      	str	r3, [r4, #8]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	071a      	lsls	r2, r3, #28
 8008982:	d52f      	bpl.n	80089e4 <__swbuf_r+0x84>
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	b36b      	cbz	r3, 80089e4 <__swbuf_r+0x84>
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	6820      	ldr	r0, [r4, #0]
 800898c:	1ac0      	subs	r0, r0, r3
 800898e:	6963      	ldr	r3, [r4, #20]
 8008990:	b2f6      	uxtb	r6, r6
 8008992:	4283      	cmp	r3, r0
 8008994:	4637      	mov	r7, r6
 8008996:	dc04      	bgt.n	80089a2 <__swbuf_r+0x42>
 8008998:	4621      	mov	r1, r4
 800899a:	4628      	mov	r0, r5
 800899c:	f000 f92e 	bl	8008bfc <_fflush_r>
 80089a0:	bb30      	cbnz	r0, 80089f0 <__swbuf_r+0x90>
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	60a3      	str	r3, [r4, #8]
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	6022      	str	r2, [r4, #0]
 80089ae:	701e      	strb	r6, [r3, #0]
 80089b0:	6963      	ldr	r3, [r4, #20]
 80089b2:	3001      	adds	r0, #1
 80089b4:	4283      	cmp	r3, r0
 80089b6:	d004      	beq.n	80089c2 <__swbuf_r+0x62>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	07db      	lsls	r3, r3, #31
 80089bc:	d506      	bpl.n	80089cc <__swbuf_r+0x6c>
 80089be:	2e0a      	cmp	r6, #10
 80089c0:	d104      	bne.n	80089cc <__swbuf_r+0x6c>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 f919 	bl	8008bfc <_fflush_r>
 80089ca:	b988      	cbnz	r0, 80089f0 <__swbuf_r+0x90>
 80089cc:	4638      	mov	r0, r7
 80089ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <__swbuf_r+0x9c>)
 80089d2:	429c      	cmp	r4, r3
 80089d4:	d101      	bne.n	80089da <__swbuf_r+0x7a>
 80089d6:	68ac      	ldr	r4, [r5, #8]
 80089d8:	e7cf      	b.n	800897a <__swbuf_r+0x1a>
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <__swbuf_r+0xa0>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	bf08      	it	eq
 80089e0:	68ec      	ldreq	r4, [r5, #12]
 80089e2:	e7ca      	b.n	800897a <__swbuf_r+0x1a>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 f80c 	bl	8008a04 <__swsetup_r>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d0cb      	beq.n	8008988 <__swbuf_r+0x28>
 80089f0:	f04f 37ff 	mov.w	r7, #4294967295
 80089f4:	e7ea      	b.n	80089cc <__swbuf_r+0x6c>
 80089f6:	bf00      	nop
 80089f8:	0800a4bc 	.word	0x0800a4bc
 80089fc:	0800a4dc 	.word	0x0800a4dc
 8008a00:	0800a49c 	.word	0x0800a49c

08008a04 <__swsetup_r>:
 8008a04:	4b32      	ldr	r3, [pc, #200]	; (8008ad0 <__swsetup_r+0xcc>)
 8008a06:	b570      	push	{r4, r5, r6, lr}
 8008a08:	681d      	ldr	r5, [r3, #0]
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	b125      	cbz	r5, 8008a1a <__swsetup_r+0x16>
 8008a10:	69ab      	ldr	r3, [r5, #24]
 8008a12:	b913      	cbnz	r3, 8008a1a <__swsetup_r+0x16>
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f985 	bl	8008d24 <__sinit>
 8008a1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ad4 <__swsetup_r+0xd0>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	d10f      	bne.n	8008a40 <__swsetup_r+0x3c>
 8008a20:	686c      	ldr	r4, [r5, #4]
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a28:	0719      	lsls	r1, r3, #28
 8008a2a:	d42c      	bmi.n	8008a86 <__swsetup_r+0x82>
 8008a2c:	06dd      	lsls	r5, r3, #27
 8008a2e:	d411      	bmi.n	8008a54 <__swsetup_r+0x50>
 8008a30:	2309      	movs	r3, #9
 8008a32:	6033      	str	r3, [r6, #0]
 8008a34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a38:	81a3      	strh	r3, [r4, #12]
 8008a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3e:	e03e      	b.n	8008abe <__swsetup_r+0xba>
 8008a40:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <__swsetup_r+0xd4>)
 8008a42:	429c      	cmp	r4, r3
 8008a44:	d101      	bne.n	8008a4a <__swsetup_r+0x46>
 8008a46:	68ac      	ldr	r4, [r5, #8]
 8008a48:	e7eb      	b.n	8008a22 <__swsetup_r+0x1e>
 8008a4a:	4b24      	ldr	r3, [pc, #144]	; (8008adc <__swsetup_r+0xd8>)
 8008a4c:	429c      	cmp	r4, r3
 8008a4e:	bf08      	it	eq
 8008a50:	68ec      	ldreq	r4, [r5, #12]
 8008a52:	e7e6      	b.n	8008a22 <__swsetup_r+0x1e>
 8008a54:	0758      	lsls	r0, r3, #29
 8008a56:	d512      	bpl.n	8008a7e <__swsetup_r+0x7a>
 8008a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a5a:	b141      	cbz	r1, 8008a6e <__swsetup_r+0x6a>
 8008a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a60:	4299      	cmp	r1, r3
 8008a62:	d002      	beq.n	8008a6a <__swsetup_r+0x66>
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff fb25 	bl	80080b4 <_free_r>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	2300      	movs	r3, #0
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f043 0308 	orr.w	r3, r3, #8
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	b94b      	cbnz	r3, 8008a9e <__swsetup_r+0x9a>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a94:	d003      	beq.n	8008a9e <__swsetup_r+0x9a>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 fa09 	bl	8008eb0 <__smakebuf_r>
 8008a9e:	89a0      	ldrh	r0, [r4, #12]
 8008aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aa4:	f010 0301 	ands.w	r3, r0, #1
 8008aa8:	d00a      	beq.n	8008ac0 <__swsetup_r+0xbc>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	6963      	ldr	r3, [r4, #20]
 8008ab0:	425b      	negs	r3, r3
 8008ab2:	61a3      	str	r3, [r4, #24]
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	b943      	cbnz	r3, 8008aca <__swsetup_r+0xc6>
 8008ab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008abc:	d1ba      	bne.n	8008a34 <__swsetup_r+0x30>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	0781      	lsls	r1, r0, #30
 8008ac2:	bf58      	it	pl
 8008ac4:	6963      	ldrpl	r3, [r4, #20]
 8008ac6:	60a3      	str	r3, [r4, #8]
 8008ac8:	e7f4      	b.n	8008ab4 <__swsetup_r+0xb0>
 8008aca:	2000      	movs	r0, #0
 8008acc:	e7f7      	b.n	8008abe <__swsetup_r+0xba>
 8008ace:	bf00      	nop
 8008ad0:	20000014 	.word	0x20000014
 8008ad4:	0800a4bc 	.word	0x0800a4bc
 8008ad8:	0800a4dc 	.word	0x0800a4dc
 8008adc:	0800a49c 	.word	0x0800a49c

08008ae0 <abort>:
 8008ae0:	b508      	push	{r3, lr}
 8008ae2:	2006      	movs	r0, #6
 8008ae4:	f000 fa54 	bl	8008f90 <raise>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7f9 f9f7 	bl	8001edc <_exit>
	...

08008af0 <__sflush_r>:
 8008af0:	898a      	ldrh	r2, [r1, #12]
 8008af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af6:	4605      	mov	r5, r0
 8008af8:	0710      	lsls	r0, r2, #28
 8008afa:	460c      	mov	r4, r1
 8008afc:	d458      	bmi.n	8008bb0 <__sflush_r+0xc0>
 8008afe:	684b      	ldr	r3, [r1, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dc05      	bgt.n	8008b10 <__sflush_r+0x20>
 8008b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dc02      	bgt.n	8008b10 <__sflush_r+0x20>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b12:	2e00      	cmp	r6, #0
 8008b14:	d0f9      	beq.n	8008b0a <__sflush_r+0x1a>
 8008b16:	2300      	movs	r3, #0
 8008b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b1c:	682f      	ldr	r7, [r5, #0]
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	d032      	beq.n	8008b88 <__sflush_r+0x98>
 8008b22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	075a      	lsls	r2, r3, #29
 8008b28:	d505      	bpl.n	8008b36 <__sflush_r+0x46>
 8008b2a:	6863      	ldr	r3, [r4, #4]
 8008b2c:	1ac0      	subs	r0, r0, r3
 8008b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b30:	b10b      	cbz	r3, 8008b36 <__sflush_r+0x46>
 8008b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b34:	1ac0      	subs	r0, r0, r3
 8008b36:	2300      	movs	r3, #0
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b3c:	6a21      	ldr	r1, [r4, #32]
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b0      	blx	r6
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	d106      	bne.n	8008b56 <__sflush_r+0x66>
 8008b48:	6829      	ldr	r1, [r5, #0]
 8008b4a:	291d      	cmp	r1, #29
 8008b4c:	d82c      	bhi.n	8008ba8 <__sflush_r+0xb8>
 8008b4e:	4a2a      	ldr	r2, [pc, #168]	; (8008bf8 <__sflush_r+0x108>)
 8008b50:	40ca      	lsrs	r2, r1
 8008b52:	07d6      	lsls	r6, r2, #31
 8008b54:	d528      	bpl.n	8008ba8 <__sflush_r+0xb8>
 8008b56:	2200      	movs	r2, #0
 8008b58:	6062      	str	r2, [r4, #4]
 8008b5a:	04d9      	lsls	r1, r3, #19
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	d504      	bpl.n	8008b6c <__sflush_r+0x7c>
 8008b62:	1c42      	adds	r2, r0, #1
 8008b64:	d101      	bne.n	8008b6a <__sflush_r+0x7a>
 8008b66:	682b      	ldr	r3, [r5, #0]
 8008b68:	b903      	cbnz	r3, 8008b6c <__sflush_r+0x7c>
 8008b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b6e:	602f      	str	r7, [r5, #0]
 8008b70:	2900      	cmp	r1, #0
 8008b72:	d0ca      	beq.n	8008b0a <__sflush_r+0x1a>
 8008b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	d002      	beq.n	8008b82 <__sflush_r+0x92>
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff fa99 	bl	80080b4 <_free_r>
 8008b82:	2000      	movs	r0, #0
 8008b84:	6360      	str	r0, [r4, #52]	; 0x34
 8008b86:	e7c1      	b.n	8008b0c <__sflush_r+0x1c>
 8008b88:	6a21      	ldr	r1, [r4, #32]
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b0      	blx	r6
 8008b90:	1c41      	adds	r1, r0, #1
 8008b92:	d1c7      	bne.n	8008b24 <__sflush_r+0x34>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0c4      	beq.n	8008b24 <__sflush_r+0x34>
 8008b9a:	2b1d      	cmp	r3, #29
 8008b9c:	d001      	beq.n	8008ba2 <__sflush_r+0xb2>
 8008b9e:	2b16      	cmp	r3, #22
 8008ba0:	d101      	bne.n	8008ba6 <__sflush_r+0xb6>
 8008ba2:	602f      	str	r7, [r5, #0]
 8008ba4:	e7b1      	b.n	8008b0a <__sflush_r+0x1a>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bac:	81a3      	strh	r3, [r4, #12]
 8008bae:	e7ad      	b.n	8008b0c <__sflush_r+0x1c>
 8008bb0:	690f      	ldr	r7, [r1, #16]
 8008bb2:	2f00      	cmp	r7, #0
 8008bb4:	d0a9      	beq.n	8008b0a <__sflush_r+0x1a>
 8008bb6:	0793      	lsls	r3, r2, #30
 8008bb8:	680e      	ldr	r6, [r1, #0]
 8008bba:	bf08      	it	eq
 8008bbc:	694b      	ldreq	r3, [r1, #20]
 8008bbe:	600f      	str	r7, [r1, #0]
 8008bc0:	bf18      	it	ne
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	eba6 0807 	sub.w	r8, r6, r7
 8008bc8:	608b      	str	r3, [r1, #8]
 8008bca:	f1b8 0f00 	cmp.w	r8, #0
 8008bce:	dd9c      	ble.n	8008b0a <__sflush_r+0x1a>
 8008bd0:	6a21      	ldr	r1, [r4, #32]
 8008bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bd4:	4643      	mov	r3, r8
 8008bd6:	463a      	mov	r2, r7
 8008bd8:	4628      	mov	r0, r5
 8008bda:	47b0      	blx	r6
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	dc06      	bgt.n	8008bee <__sflush_r+0xfe>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	e78e      	b.n	8008b0c <__sflush_r+0x1c>
 8008bee:	4407      	add	r7, r0
 8008bf0:	eba8 0800 	sub.w	r8, r8, r0
 8008bf4:	e7e9      	b.n	8008bca <__sflush_r+0xda>
 8008bf6:	bf00      	nop
 8008bf8:	20400001 	.word	0x20400001

08008bfc <_fflush_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	690b      	ldr	r3, [r1, #16]
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	b913      	cbnz	r3, 8008c0c <_fflush_r+0x10>
 8008c06:	2500      	movs	r5, #0
 8008c08:	4628      	mov	r0, r5
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	b118      	cbz	r0, 8008c16 <_fflush_r+0x1a>
 8008c0e:	6983      	ldr	r3, [r0, #24]
 8008c10:	b90b      	cbnz	r3, 8008c16 <_fflush_r+0x1a>
 8008c12:	f000 f887 	bl	8008d24 <__sinit>
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <_fflush_r+0x6c>)
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d11b      	bne.n	8008c54 <_fflush_r+0x58>
 8008c1c:	686c      	ldr	r4, [r5, #4]
 8008c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0ef      	beq.n	8008c06 <_fflush_r+0xa>
 8008c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c28:	07d0      	lsls	r0, r2, #31
 8008c2a:	d404      	bmi.n	8008c36 <_fflush_r+0x3a>
 8008c2c:	0599      	lsls	r1, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_fflush_r+0x3a>
 8008c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c32:	f000 f915 	bl	8008e60 <__retarget_lock_acquire_recursive>
 8008c36:	4628      	mov	r0, r5
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f7ff ff59 	bl	8008af0 <__sflush_r>
 8008c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c40:	07da      	lsls	r2, r3, #31
 8008c42:	4605      	mov	r5, r0
 8008c44:	d4e0      	bmi.n	8008c08 <_fflush_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	059b      	lsls	r3, r3, #22
 8008c4a:	d4dd      	bmi.n	8008c08 <_fflush_r+0xc>
 8008c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4e:	f000 f908 	bl	8008e62 <__retarget_lock_release_recursive>
 8008c52:	e7d9      	b.n	8008c08 <_fflush_r+0xc>
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <_fflush_r+0x70>)
 8008c56:	429c      	cmp	r4, r3
 8008c58:	d101      	bne.n	8008c5e <_fflush_r+0x62>
 8008c5a:	68ac      	ldr	r4, [r5, #8]
 8008c5c:	e7df      	b.n	8008c1e <_fflush_r+0x22>
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <_fflush_r+0x74>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	bf08      	it	eq
 8008c64:	68ec      	ldreq	r4, [r5, #12]
 8008c66:	e7da      	b.n	8008c1e <_fflush_r+0x22>
 8008c68:	0800a4bc 	.word	0x0800a4bc
 8008c6c:	0800a4dc 	.word	0x0800a4dc
 8008c70:	0800a49c 	.word	0x0800a49c

08008c74 <std>:
 8008c74:	2300      	movs	r3, #0
 8008c76:	b510      	push	{r4, lr}
 8008c78:	4604      	mov	r4, r0
 8008c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c82:	6083      	str	r3, [r0, #8]
 8008c84:	8181      	strh	r1, [r0, #12]
 8008c86:	6643      	str	r3, [r0, #100]	; 0x64
 8008c88:	81c2      	strh	r2, [r0, #14]
 8008c8a:	6183      	str	r3, [r0, #24]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	2208      	movs	r2, #8
 8008c90:	305c      	adds	r0, #92	; 0x5c
 8008c92:	f7fb ffcb 	bl	8004c2c <memset>
 8008c96:	4b05      	ldr	r3, [pc, #20]	; (8008cac <std+0x38>)
 8008c98:	6263      	str	r3, [r4, #36]	; 0x24
 8008c9a:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <std+0x3c>)
 8008c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <std+0x40>)
 8008ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <std+0x44>)
 8008ca4:	6224      	str	r4, [r4, #32]
 8008ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	bf00      	nop
 8008cac:	08008fc9 	.word	0x08008fc9
 8008cb0:	08008feb 	.word	0x08008feb
 8008cb4:	08009023 	.word	0x08009023
 8008cb8:	08009047 	.word	0x08009047

08008cbc <_cleanup_r>:
 8008cbc:	4901      	ldr	r1, [pc, #4]	; (8008cc4 <_cleanup_r+0x8>)
 8008cbe:	f000 b8af 	b.w	8008e20 <_fwalk_reent>
 8008cc2:	bf00      	nop
 8008cc4:	08008bfd 	.word	0x08008bfd

08008cc8 <__sfmoreglue>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	2268      	movs	r2, #104	; 0x68
 8008ccc:	1e4d      	subs	r5, r1, #1
 8008cce:	4355      	muls	r5, r2
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cd6:	f7ff fa59 	bl	800818c <_malloc_r>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	b140      	cbz	r0, 8008cf0 <__sfmoreglue+0x28>
 8008cde:	2100      	movs	r1, #0
 8008ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ce4:	300c      	adds	r0, #12
 8008ce6:	60a0      	str	r0, [r4, #8]
 8008ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cec:	f7fb ff9e 	bl	8004c2c <memset>
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}

08008cf4 <__sfp_lock_acquire>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__sfp_lock_acquire+0x8>)
 8008cf6:	f000 b8b3 	b.w	8008e60 <__retarget_lock_acquire_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	20000375 	.word	0x20000375

08008d00 <__sfp_lock_release>:
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <__sfp_lock_release+0x8>)
 8008d02:	f000 b8ae 	b.w	8008e62 <__retarget_lock_release_recursive>
 8008d06:	bf00      	nop
 8008d08:	20000375 	.word	0x20000375

08008d0c <__sinit_lock_acquire>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__sinit_lock_acquire+0x8>)
 8008d0e:	f000 b8a7 	b.w	8008e60 <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	20000376 	.word	0x20000376

08008d18 <__sinit_lock_release>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__sinit_lock_release+0x8>)
 8008d1a:	f000 b8a2 	b.w	8008e62 <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20000376 	.word	0x20000376

08008d24 <__sinit>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	4604      	mov	r4, r0
 8008d28:	f7ff fff0 	bl	8008d0c <__sinit_lock_acquire>
 8008d2c:	69a3      	ldr	r3, [r4, #24]
 8008d2e:	b11b      	cbz	r3, 8008d38 <__sinit+0x14>
 8008d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d34:	f7ff bff0 	b.w	8008d18 <__sinit_lock_release>
 8008d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <__sinit+0x68>)
 8008d40:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <__sinit+0x6c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d46:	42a3      	cmp	r3, r4
 8008d48:	bf04      	itt	eq
 8008d4a:	2301      	moveq	r3, #1
 8008d4c:	61a3      	streq	r3, [r4, #24]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 f820 	bl	8008d94 <__sfp>
 8008d54:	6060      	str	r0, [r4, #4]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 f81c 	bl	8008d94 <__sfp>
 8008d5c:	60a0      	str	r0, [r4, #8]
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 f818 	bl	8008d94 <__sfp>
 8008d64:	2200      	movs	r2, #0
 8008d66:	60e0      	str	r0, [r4, #12]
 8008d68:	2104      	movs	r1, #4
 8008d6a:	6860      	ldr	r0, [r4, #4]
 8008d6c:	f7ff ff82 	bl	8008c74 <std>
 8008d70:	68a0      	ldr	r0, [r4, #8]
 8008d72:	2201      	movs	r2, #1
 8008d74:	2109      	movs	r1, #9
 8008d76:	f7ff ff7d 	bl	8008c74 <std>
 8008d7a:	68e0      	ldr	r0, [r4, #12]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	2112      	movs	r1, #18
 8008d80:	f7ff ff78 	bl	8008c74 <std>
 8008d84:	2301      	movs	r3, #1
 8008d86:	61a3      	str	r3, [r4, #24]
 8008d88:	e7d2      	b.n	8008d30 <__sinit+0xc>
 8008d8a:	bf00      	nop
 8008d8c:	0800a060 	.word	0x0800a060
 8008d90:	08008cbd 	.word	0x08008cbd

08008d94 <__sfp>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	4607      	mov	r7, r0
 8008d98:	f7ff ffac 	bl	8008cf4 <__sfp_lock_acquire>
 8008d9c:	4b1e      	ldr	r3, [pc, #120]	; (8008e18 <__sfp+0x84>)
 8008d9e:	681e      	ldr	r6, [r3, #0]
 8008da0:	69b3      	ldr	r3, [r6, #24]
 8008da2:	b913      	cbnz	r3, 8008daa <__sfp+0x16>
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff ffbd 	bl	8008d24 <__sinit>
 8008daa:	3648      	adds	r6, #72	; 0x48
 8008dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	d503      	bpl.n	8008dbc <__sfp+0x28>
 8008db4:	6833      	ldr	r3, [r6, #0]
 8008db6:	b30b      	cbz	r3, 8008dfc <__sfp+0x68>
 8008db8:	6836      	ldr	r6, [r6, #0]
 8008dba:	e7f7      	b.n	8008dac <__sfp+0x18>
 8008dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dc0:	b9d5      	cbnz	r5, 8008df8 <__sfp+0x64>
 8008dc2:	4b16      	ldr	r3, [pc, #88]	; (8008e1c <__sfp+0x88>)
 8008dc4:	60e3      	str	r3, [r4, #12]
 8008dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dca:	6665      	str	r5, [r4, #100]	; 0x64
 8008dcc:	f000 f847 	bl	8008e5e <__retarget_lock_init_recursive>
 8008dd0:	f7ff ff96 	bl	8008d00 <__sfp_lock_release>
 8008dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ddc:	6025      	str	r5, [r4, #0]
 8008dde:	61a5      	str	r5, [r4, #24]
 8008de0:	2208      	movs	r2, #8
 8008de2:	4629      	mov	r1, r5
 8008de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008de8:	f7fb ff20 	bl	8004c2c <memset>
 8008dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008df4:	4620      	mov	r0, r4
 8008df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df8:	3468      	adds	r4, #104	; 0x68
 8008dfa:	e7d9      	b.n	8008db0 <__sfp+0x1c>
 8008dfc:	2104      	movs	r1, #4
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f7ff ff62 	bl	8008cc8 <__sfmoreglue>
 8008e04:	4604      	mov	r4, r0
 8008e06:	6030      	str	r0, [r6, #0]
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1d5      	bne.n	8008db8 <__sfp+0x24>
 8008e0c:	f7ff ff78 	bl	8008d00 <__sfp_lock_release>
 8008e10:	230c      	movs	r3, #12
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	e7ee      	b.n	8008df4 <__sfp+0x60>
 8008e16:	bf00      	nop
 8008e18:	0800a060 	.word	0x0800a060
 8008e1c:	ffff0001 	.word	0xffff0001

08008e20 <_fwalk_reent>:
 8008e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e24:	4606      	mov	r6, r0
 8008e26:	4688      	mov	r8, r1
 8008e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e2c:	2700      	movs	r7, #0
 8008e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e32:	f1b9 0901 	subs.w	r9, r9, #1
 8008e36:	d505      	bpl.n	8008e44 <_fwalk_reent+0x24>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	2c00      	cmp	r4, #0
 8008e3c:	d1f7      	bne.n	8008e2e <_fwalk_reent+0xe>
 8008e3e:	4638      	mov	r0, r7
 8008e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e44:	89ab      	ldrh	r3, [r5, #12]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d907      	bls.n	8008e5a <_fwalk_reent+0x3a>
 8008e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	d003      	beq.n	8008e5a <_fwalk_reent+0x3a>
 8008e52:	4629      	mov	r1, r5
 8008e54:	4630      	mov	r0, r6
 8008e56:	47c0      	blx	r8
 8008e58:	4307      	orrs	r7, r0
 8008e5a:	3568      	adds	r5, #104	; 0x68
 8008e5c:	e7e9      	b.n	8008e32 <_fwalk_reent+0x12>

08008e5e <__retarget_lock_init_recursive>:
 8008e5e:	4770      	bx	lr

08008e60 <__retarget_lock_acquire_recursive>:
 8008e60:	4770      	bx	lr

08008e62 <__retarget_lock_release_recursive>:
 8008e62:	4770      	bx	lr

08008e64 <__swhatbuf_r>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	460e      	mov	r6, r1
 8008e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	b096      	sub	sp, #88	; 0x58
 8008e70:	4614      	mov	r4, r2
 8008e72:	461d      	mov	r5, r3
 8008e74:	da08      	bge.n	8008e88 <__swhatbuf_r+0x24>
 8008e76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	602a      	str	r2, [r5, #0]
 8008e7e:	061a      	lsls	r2, r3, #24
 8008e80:	d410      	bmi.n	8008ea4 <__swhatbuf_r+0x40>
 8008e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e86:	e00e      	b.n	8008ea6 <__swhatbuf_r+0x42>
 8008e88:	466a      	mov	r2, sp
 8008e8a:	f000 f903 	bl	8009094 <_fstat_r>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	dbf1      	blt.n	8008e76 <__swhatbuf_r+0x12>
 8008e92:	9a01      	ldr	r2, [sp, #4]
 8008e94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e9c:	425a      	negs	r2, r3
 8008e9e:	415a      	adcs	r2, r3
 8008ea0:	602a      	str	r2, [r5, #0]
 8008ea2:	e7ee      	b.n	8008e82 <__swhatbuf_r+0x1e>
 8008ea4:	2340      	movs	r3, #64	; 0x40
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	b016      	add	sp, #88	; 0x58
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08008eb0 <__smakebuf_r>:
 8008eb0:	898b      	ldrh	r3, [r1, #12]
 8008eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008eb4:	079d      	lsls	r5, r3, #30
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	d507      	bpl.n	8008ecc <__smakebuf_r+0x1c>
 8008ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	6163      	str	r3, [r4, #20]
 8008ec8:	b002      	add	sp, #8
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	ab01      	add	r3, sp, #4
 8008ece:	466a      	mov	r2, sp
 8008ed0:	f7ff ffc8 	bl	8008e64 <__swhatbuf_r>
 8008ed4:	9900      	ldr	r1, [sp, #0]
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff f957 	bl	800818c <_malloc_r>
 8008ede:	b948      	cbnz	r0, 8008ef4 <__smakebuf_r+0x44>
 8008ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee4:	059a      	lsls	r2, r3, #22
 8008ee6:	d4ef      	bmi.n	8008ec8 <__smakebuf_r+0x18>
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	f043 0302 	orr.w	r3, r3, #2
 8008ef0:	81a3      	strh	r3, [r4, #12]
 8008ef2:	e7e3      	b.n	8008ebc <__smakebuf_r+0xc>
 8008ef4:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <__smakebuf_r+0x7c>)
 8008ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	6020      	str	r0, [r4, #0]
 8008efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	6163      	str	r3, [r4, #20]
 8008f06:	9b01      	ldr	r3, [sp, #4]
 8008f08:	6120      	str	r0, [r4, #16]
 8008f0a:	b15b      	cbz	r3, 8008f24 <__smakebuf_r+0x74>
 8008f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 f8d1 	bl	80090b8 <_isatty_r>
 8008f16:	b128      	cbz	r0, 8008f24 <__smakebuf_r+0x74>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	89a0      	ldrh	r0, [r4, #12]
 8008f26:	4305      	orrs	r5, r0
 8008f28:	81a5      	strh	r5, [r4, #12]
 8008f2a:	e7cd      	b.n	8008ec8 <__smakebuf_r+0x18>
 8008f2c:	08008cbd 	.word	0x08008cbd

08008f30 <_malloc_usable_size_r>:
 8008f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f34:	1f18      	subs	r0, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bfbc      	itt	lt
 8008f3a:	580b      	ldrlt	r3, [r1, r0]
 8008f3c:	18c0      	addlt	r0, r0, r3
 8008f3e:	4770      	bx	lr

08008f40 <_raise_r>:
 8008f40:	291f      	cmp	r1, #31
 8008f42:	b538      	push	{r3, r4, r5, lr}
 8008f44:	4604      	mov	r4, r0
 8008f46:	460d      	mov	r5, r1
 8008f48:	d904      	bls.n	8008f54 <_raise_r+0x14>
 8008f4a:	2316      	movs	r3, #22
 8008f4c:	6003      	str	r3, [r0, #0]
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f56:	b112      	cbz	r2, 8008f5e <_raise_r+0x1e>
 8008f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f5c:	b94b      	cbnz	r3, 8008f72 <_raise_r+0x32>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 f830 	bl	8008fc4 <_getpid_r>
 8008f64:	462a      	mov	r2, r5
 8008f66:	4601      	mov	r1, r0
 8008f68:	4620      	mov	r0, r4
 8008f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6e:	f000 b817 	b.w	8008fa0 <_kill_r>
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d00a      	beq.n	8008f8c <_raise_r+0x4c>
 8008f76:	1c59      	adds	r1, r3, #1
 8008f78:	d103      	bne.n	8008f82 <_raise_r+0x42>
 8008f7a:	2316      	movs	r3, #22
 8008f7c:	6003      	str	r3, [r0, #0]
 8008f7e:	2001      	movs	r0, #1
 8008f80:	e7e7      	b.n	8008f52 <_raise_r+0x12>
 8008f82:	2400      	movs	r4, #0
 8008f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f88:	4628      	mov	r0, r5
 8008f8a:	4798      	blx	r3
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	e7e0      	b.n	8008f52 <_raise_r+0x12>

08008f90 <raise>:
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <raise+0xc>)
 8008f92:	4601      	mov	r1, r0
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f7ff bfd3 	b.w	8008f40 <_raise_r>
 8008f9a:	bf00      	nop
 8008f9c:	20000014 	.word	0x20000014

08008fa0 <_kill_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d07      	ldr	r5, [pc, #28]	; (8008fc0 <_kill_r+0x20>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	4611      	mov	r1, r2
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	f7f8 ff85 	bl	8001ebc <_kill>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d102      	bne.n	8008fbc <_kill_r+0x1c>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b103      	cbz	r3, 8008fbc <_kill_r+0x1c>
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000370 	.word	0x20000370

08008fc4 <_getpid_r>:
 8008fc4:	f7f8 bf72 	b.w	8001eac <_getpid>

08008fc8 <__sread>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd0:	f000 f894 	bl	80090fc <_read_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	bfab      	itete	ge
 8008fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fda:	89a3      	ldrhlt	r3, [r4, #12]
 8008fdc:	181b      	addge	r3, r3, r0
 8008fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fe2:	bfac      	ite	ge
 8008fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fe6:	81a3      	strhlt	r3, [r4, #12]
 8008fe8:	bd10      	pop	{r4, pc}

08008fea <__swrite>:
 8008fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fee:	461f      	mov	r7, r3
 8008ff0:	898b      	ldrh	r3, [r1, #12]
 8008ff2:	05db      	lsls	r3, r3, #23
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	d505      	bpl.n	8009008 <__swrite+0x1e>
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	2302      	movs	r3, #2
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f868 	bl	80090d8 <_lseek_r>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800900e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	4632      	mov	r2, r6
 8009016:	463b      	mov	r3, r7
 8009018:	4628      	mov	r0, r5
 800901a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	f000 b817 	b.w	8009050 <_write_r>

08009022 <__sseek>:
 8009022:	b510      	push	{r4, lr}
 8009024:	460c      	mov	r4, r1
 8009026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902a:	f000 f855 	bl	80090d8 <_lseek_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	bf15      	itete	ne
 8009034:	6560      	strne	r0, [r4, #84]	; 0x54
 8009036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800903a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800903e:	81a3      	strheq	r3, [r4, #12]
 8009040:	bf18      	it	ne
 8009042:	81a3      	strhne	r3, [r4, #12]
 8009044:	bd10      	pop	{r4, pc}

08009046 <__sclose>:
 8009046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904a:	f000 b813 	b.w	8009074 <_close_r>
	...

08009050 <_write_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d07      	ldr	r5, [pc, #28]	; (8009070 <_write_r+0x20>)
 8009054:	4604      	mov	r4, r0
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	2200      	movs	r2, #0
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	f7f8 ff63 	bl	8001f2a <_write>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_write_r+0x1e>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_write_r+0x1e>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20000370 	.word	0x20000370

08009074 <_close_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d06      	ldr	r5, [pc, #24]	; (8009090 <_close_r+0x1c>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f7f8 ff6f 	bl	8001f62 <_close>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_close_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_close_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20000370 	.word	0x20000370

08009094 <_fstat_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d07      	ldr	r5, [pc, #28]	; (80090b4 <_fstat_r+0x20>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	f7f8 ff6a 	bl	8001f7a <_fstat>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d102      	bne.n	80090b0 <_fstat_r+0x1c>
 80090aa:	682b      	ldr	r3, [r5, #0]
 80090ac:	b103      	cbz	r3, 80090b0 <_fstat_r+0x1c>
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	bd38      	pop	{r3, r4, r5, pc}
 80090b2:	bf00      	nop
 80090b4:	20000370 	.word	0x20000370

080090b8 <_isatty_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d06      	ldr	r5, [pc, #24]	; (80090d4 <_isatty_r+0x1c>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	f7f8 ff69 	bl	8001f9a <_isatty>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_isatty_r+0x1a>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_isatty_r+0x1a>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	20000370 	.word	0x20000370

080090d8 <_lseek_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4d07      	ldr	r5, [pc, #28]	; (80090f8 <_lseek_r+0x20>)
 80090dc:	4604      	mov	r4, r0
 80090de:	4608      	mov	r0, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	602a      	str	r2, [r5, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f7f8 ff62 	bl	8001fb0 <_lseek>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_lseek_r+0x1e>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_lseek_r+0x1e>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20000370 	.word	0x20000370

080090fc <_read_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_read_r+0x20>)
 8009100:	4604      	mov	r4, r0
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f7f8 fef0 	bl	8001ef0 <_read>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_read_r+0x1e>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_read_r+0x1e>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20000370 	.word	0x20000370

08009120 <pow>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	ed2d 8b02 	vpush	{d8}
 8009126:	eeb0 8a40 	vmov.f32	s16, s0
 800912a:	eef0 8a60 	vmov.f32	s17, s1
 800912e:	ec55 4b11 	vmov	r4, r5, d1
 8009132:	f000 f865 	bl	8009200 <__ieee754_pow>
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	ec57 6b10 	vmov	r6, r7, d0
 8009142:	f7f7 fcf3 	bl	8000b2c <__aeabi_dcmpun>
 8009146:	2800      	cmp	r0, #0
 8009148:	d13b      	bne.n	80091c2 <pow+0xa2>
 800914a:	ec51 0b18 	vmov	r0, r1, d8
 800914e:	2200      	movs	r2, #0
 8009150:	2300      	movs	r3, #0
 8009152:	f7f7 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009156:	b1b8      	cbz	r0, 8009188 <pow+0x68>
 8009158:	2200      	movs	r2, #0
 800915a:	2300      	movs	r3, #0
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009164:	2800      	cmp	r0, #0
 8009166:	d146      	bne.n	80091f6 <pow+0xd6>
 8009168:	ec45 4b10 	vmov	d0, r4, r5
 800916c:	f000 fe61 	bl	8009e32 <finite>
 8009170:	b338      	cbz	r0, 80091c2 <pow+0xa2>
 8009172:	2200      	movs	r2, #0
 8009174:	2300      	movs	r3, #0
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800917e:	b300      	cbz	r0, 80091c2 <pow+0xa2>
 8009180:	f7fb fd2a 	bl	8004bd8 <__errno>
 8009184:	2322      	movs	r3, #34	; 0x22
 8009186:	e01b      	b.n	80091c0 <pow+0xa0>
 8009188:	ec47 6b10 	vmov	d0, r6, r7
 800918c:	f000 fe51 	bl	8009e32 <finite>
 8009190:	b9e0      	cbnz	r0, 80091cc <pow+0xac>
 8009192:	eeb0 0a48 	vmov.f32	s0, s16
 8009196:	eef0 0a68 	vmov.f32	s1, s17
 800919a:	f000 fe4a 	bl	8009e32 <finite>
 800919e:	b1a8      	cbz	r0, 80091cc <pow+0xac>
 80091a0:	ec45 4b10 	vmov	d0, r4, r5
 80091a4:	f000 fe45 	bl	8009e32 <finite>
 80091a8:	b180      	cbz	r0, 80091cc <pow+0xac>
 80091aa:	4632      	mov	r2, r6
 80091ac:	463b      	mov	r3, r7
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7f7 fcbb 	bl	8000b2c <__aeabi_dcmpun>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0e2      	beq.n	8009180 <pow+0x60>
 80091ba:	f7fb fd0d 	bl	8004bd8 <__errno>
 80091be:	2321      	movs	r3, #33	; 0x21
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	ecbd 8b02 	vpop	{d8}
 80091c6:	ec47 6b10 	vmov	d0, r6, r7
 80091ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091cc:	2200      	movs	r2, #0
 80091ce:	2300      	movs	r3, #0
 80091d0:	4630      	mov	r0, r6
 80091d2:	4639      	mov	r1, r7
 80091d4:	f7f7 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d0f2      	beq.n	80091c2 <pow+0xa2>
 80091dc:	eeb0 0a48 	vmov.f32	s0, s16
 80091e0:	eef0 0a68 	vmov.f32	s1, s17
 80091e4:	f000 fe25 	bl	8009e32 <finite>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0ea      	beq.n	80091c2 <pow+0xa2>
 80091ec:	ec45 4b10 	vmov	d0, r4, r5
 80091f0:	f000 fe1f 	bl	8009e32 <finite>
 80091f4:	e7c3      	b.n	800917e <pow+0x5e>
 80091f6:	4f01      	ldr	r7, [pc, #4]	; (80091fc <pow+0xdc>)
 80091f8:	2600      	movs	r6, #0
 80091fa:	e7e2      	b.n	80091c2 <pow+0xa2>
 80091fc:	3ff00000 	.word	0x3ff00000

08009200 <__ieee754_pow>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	ed2d 8b06 	vpush	{d8-d10}
 8009208:	b089      	sub	sp, #36	; 0x24
 800920a:	ed8d 1b00 	vstr	d1, [sp]
 800920e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009212:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009216:	ea58 0102 	orrs.w	r1, r8, r2
 800921a:	ec57 6b10 	vmov	r6, r7, d0
 800921e:	d115      	bne.n	800924c <__ieee754_pow+0x4c>
 8009220:	19b3      	adds	r3, r6, r6
 8009222:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009226:	4152      	adcs	r2, r2
 8009228:	4299      	cmp	r1, r3
 800922a:	4b89      	ldr	r3, [pc, #548]	; (8009450 <__ieee754_pow+0x250>)
 800922c:	4193      	sbcs	r3, r2
 800922e:	f080 84d2 	bcs.w	8009bd6 <__ieee754_pow+0x9d6>
 8009232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 f827 	bl	800028c <__adddf3>
 800923e:	ec41 0b10 	vmov	d0, r0, r1
 8009242:	b009      	add	sp, #36	; 0x24
 8009244:	ecbd 8b06 	vpop	{d8-d10}
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	4b81      	ldr	r3, [pc, #516]	; (8009454 <__ieee754_pow+0x254>)
 800924e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009252:	429c      	cmp	r4, r3
 8009254:	ee10 aa10 	vmov	sl, s0
 8009258:	463d      	mov	r5, r7
 800925a:	dc06      	bgt.n	800926a <__ieee754_pow+0x6a>
 800925c:	d101      	bne.n	8009262 <__ieee754_pow+0x62>
 800925e:	2e00      	cmp	r6, #0
 8009260:	d1e7      	bne.n	8009232 <__ieee754_pow+0x32>
 8009262:	4598      	cmp	r8, r3
 8009264:	dc01      	bgt.n	800926a <__ieee754_pow+0x6a>
 8009266:	d10f      	bne.n	8009288 <__ieee754_pow+0x88>
 8009268:	b172      	cbz	r2, 8009288 <__ieee754_pow+0x88>
 800926a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800926e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009272:	ea55 050a 	orrs.w	r5, r5, sl
 8009276:	d1dc      	bne.n	8009232 <__ieee754_pow+0x32>
 8009278:	e9dd 3200 	ldrd	r3, r2, [sp]
 800927c:	18db      	adds	r3, r3, r3
 800927e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009282:	4152      	adcs	r2, r2
 8009284:	429d      	cmp	r5, r3
 8009286:	e7d0      	b.n	800922a <__ieee754_pow+0x2a>
 8009288:	2d00      	cmp	r5, #0
 800928a:	da3b      	bge.n	8009304 <__ieee754_pow+0x104>
 800928c:	4b72      	ldr	r3, [pc, #456]	; (8009458 <__ieee754_pow+0x258>)
 800928e:	4598      	cmp	r8, r3
 8009290:	dc51      	bgt.n	8009336 <__ieee754_pow+0x136>
 8009292:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009296:	4598      	cmp	r8, r3
 8009298:	f340 84ac 	ble.w	8009bf4 <__ieee754_pow+0x9f4>
 800929c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80092a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092a4:	2b14      	cmp	r3, #20
 80092a6:	dd0f      	ble.n	80092c8 <__ieee754_pow+0xc8>
 80092a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80092ac:	fa22 f103 	lsr.w	r1, r2, r3
 80092b0:	fa01 f303 	lsl.w	r3, r1, r3
 80092b4:	4293      	cmp	r3, r2
 80092b6:	f040 849d 	bne.w	8009bf4 <__ieee754_pow+0x9f4>
 80092ba:	f001 0101 	and.w	r1, r1, #1
 80092be:	f1c1 0302 	rsb	r3, r1, #2
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	b182      	cbz	r2, 80092e8 <__ieee754_pow+0xe8>
 80092c6:	e05f      	b.n	8009388 <__ieee754_pow+0x188>
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d15b      	bne.n	8009384 <__ieee754_pow+0x184>
 80092cc:	f1c3 0314 	rsb	r3, r3, #20
 80092d0:	fa48 f103 	asr.w	r1, r8, r3
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	4543      	cmp	r3, r8
 80092da:	f040 8488 	bne.w	8009bee <__ieee754_pow+0x9ee>
 80092de:	f001 0101 	and.w	r1, r1, #1
 80092e2:	f1c1 0302 	rsb	r3, r1, #2
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	4b5c      	ldr	r3, [pc, #368]	; (800945c <__ieee754_pow+0x25c>)
 80092ea:	4598      	cmp	r8, r3
 80092ec:	d132      	bne.n	8009354 <__ieee754_pow+0x154>
 80092ee:	f1b9 0f00 	cmp.w	r9, #0
 80092f2:	f280 8478 	bge.w	8009be6 <__ieee754_pow+0x9e6>
 80092f6:	4959      	ldr	r1, [pc, #356]	; (800945c <__ieee754_pow+0x25c>)
 80092f8:	4632      	mov	r2, r6
 80092fa:	463b      	mov	r3, r7
 80092fc:	2000      	movs	r0, #0
 80092fe:	f7f7 faa5 	bl	800084c <__aeabi_ddiv>
 8009302:	e79c      	b.n	800923e <__ieee754_pow+0x3e>
 8009304:	2300      	movs	r3, #0
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	2a00      	cmp	r2, #0
 800930a:	d13d      	bne.n	8009388 <__ieee754_pow+0x188>
 800930c:	4b51      	ldr	r3, [pc, #324]	; (8009454 <__ieee754_pow+0x254>)
 800930e:	4598      	cmp	r8, r3
 8009310:	d1ea      	bne.n	80092e8 <__ieee754_pow+0xe8>
 8009312:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800931a:	ea53 030a 	orrs.w	r3, r3, sl
 800931e:	f000 845a 	beq.w	8009bd6 <__ieee754_pow+0x9d6>
 8009322:	4b4f      	ldr	r3, [pc, #316]	; (8009460 <__ieee754_pow+0x260>)
 8009324:	429c      	cmp	r4, r3
 8009326:	dd08      	ble.n	800933a <__ieee754_pow+0x13a>
 8009328:	f1b9 0f00 	cmp.w	r9, #0
 800932c:	f2c0 8457 	blt.w	8009bde <__ieee754_pow+0x9de>
 8009330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009334:	e783      	b.n	800923e <__ieee754_pow+0x3e>
 8009336:	2302      	movs	r3, #2
 8009338:	e7e5      	b.n	8009306 <__ieee754_pow+0x106>
 800933a:	f1b9 0f00 	cmp.w	r9, #0
 800933e:	f04f 0000 	mov.w	r0, #0
 8009342:	f04f 0100 	mov.w	r1, #0
 8009346:	f6bf af7a 	bge.w	800923e <__ieee754_pow+0x3e>
 800934a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800934e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009352:	e774      	b.n	800923e <__ieee754_pow+0x3e>
 8009354:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009358:	d106      	bne.n	8009368 <__ieee754_pow+0x168>
 800935a:	4632      	mov	r2, r6
 800935c:	463b      	mov	r3, r7
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	e76a      	b.n	800923e <__ieee754_pow+0x3e>
 8009368:	4b3e      	ldr	r3, [pc, #248]	; (8009464 <__ieee754_pow+0x264>)
 800936a:	4599      	cmp	r9, r3
 800936c:	d10c      	bne.n	8009388 <__ieee754_pow+0x188>
 800936e:	2d00      	cmp	r5, #0
 8009370:	db0a      	blt.n	8009388 <__ieee754_pow+0x188>
 8009372:	ec47 6b10 	vmov	d0, r6, r7
 8009376:	b009      	add	sp, #36	; 0x24
 8009378:	ecbd 8b06 	vpop	{d8-d10}
 800937c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	f000 bc6c 	b.w	8009c5c <__ieee754_sqrt>
 8009384:	2300      	movs	r3, #0
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	ec47 6b10 	vmov	d0, r6, r7
 800938c:	f000 fd48 	bl	8009e20 <fabs>
 8009390:	ec51 0b10 	vmov	r0, r1, d0
 8009394:	f1ba 0f00 	cmp.w	sl, #0
 8009398:	d129      	bne.n	80093ee <__ieee754_pow+0x1ee>
 800939a:	b124      	cbz	r4, 80093a6 <__ieee754_pow+0x1a6>
 800939c:	4b2f      	ldr	r3, [pc, #188]	; (800945c <__ieee754_pow+0x25c>)
 800939e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d123      	bne.n	80093ee <__ieee754_pow+0x1ee>
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	da05      	bge.n	80093b8 <__ieee754_pow+0x1b8>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	2000      	movs	r0, #0
 80093b2:	492a      	ldr	r1, [pc, #168]	; (800945c <__ieee754_pow+0x25c>)
 80093b4:	f7f7 fa4a 	bl	800084c <__aeabi_ddiv>
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	f6bf af40 	bge.w	800923e <__ieee754_pow+0x3e>
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80093c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80093c8:	4323      	orrs	r3, r4
 80093ca:	d108      	bne.n	80093de <__ieee754_pow+0x1de>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4610      	mov	r0, r2
 80093d2:	4619      	mov	r1, r3
 80093d4:	f7f6 ff58 	bl	8000288 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	e78f      	b.n	80092fe <__ieee754_pow+0xfe>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	f47f af2c 	bne.w	800923e <__ieee754_pow+0x3e>
 80093e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ea:	4619      	mov	r1, r3
 80093ec:	e727      	b.n	800923e <__ieee754_pow+0x3e>
 80093ee:	0feb      	lsrs	r3, r5, #31
 80093f0:	3b01      	subs	r3, #1
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	9a06      	ldr	r2, [sp, #24]
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	d102      	bne.n	8009402 <__ieee754_pow+0x202>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	e7e6      	b.n	80093d0 <__ieee754_pow+0x1d0>
 8009402:	4b19      	ldr	r3, [pc, #100]	; (8009468 <__ieee754_pow+0x268>)
 8009404:	4598      	cmp	r8, r3
 8009406:	f340 80fb 	ble.w	8009600 <__ieee754_pow+0x400>
 800940a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800940e:	4598      	cmp	r8, r3
 8009410:	4b13      	ldr	r3, [pc, #76]	; (8009460 <__ieee754_pow+0x260>)
 8009412:	dd0c      	ble.n	800942e <__ieee754_pow+0x22e>
 8009414:	429c      	cmp	r4, r3
 8009416:	dc0f      	bgt.n	8009438 <__ieee754_pow+0x238>
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	da0f      	bge.n	800943e <__ieee754_pow+0x23e>
 800941e:	2000      	movs	r0, #0
 8009420:	b009      	add	sp, #36	; 0x24
 8009422:	ecbd 8b06 	vpop	{d8-d10}
 8009426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942a:	f000 bcf0 	b.w	8009e0e <__math_oflow>
 800942e:	429c      	cmp	r4, r3
 8009430:	dbf2      	blt.n	8009418 <__ieee754_pow+0x218>
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <__ieee754_pow+0x25c>)
 8009434:	429c      	cmp	r4, r3
 8009436:	dd19      	ble.n	800946c <__ieee754_pow+0x26c>
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	dcef      	bgt.n	800941e <__ieee754_pow+0x21e>
 800943e:	2000      	movs	r0, #0
 8009440:	b009      	add	sp, #36	; 0x24
 8009442:	ecbd 8b06 	vpop	{d8-d10}
 8009446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944a:	f000 bcd7 	b.w	8009dfc <__math_uflow>
 800944e:	bf00      	nop
 8009450:	fff00000 	.word	0xfff00000
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	433fffff 	.word	0x433fffff
 800945c:	3ff00000 	.word	0x3ff00000
 8009460:	3fefffff 	.word	0x3fefffff
 8009464:	3fe00000 	.word	0x3fe00000
 8009468:	41e00000 	.word	0x41e00000
 800946c:	4b60      	ldr	r3, [pc, #384]	; (80095f0 <__ieee754_pow+0x3f0>)
 800946e:	2200      	movs	r2, #0
 8009470:	f7f6 ff0a 	bl	8000288 <__aeabi_dsub>
 8009474:	a354      	add	r3, pc, #336	; (adr r3, 80095c8 <__ieee754_pow+0x3c8>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	f7f7 f8bb 	bl	80005f8 <__aeabi_dmul>
 8009482:	a353      	add	r3, pc, #332	; (adr r3, 80095d0 <__ieee754_pow+0x3d0>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f7 f8b2 	bl	80005f8 <__aeabi_dmul>
 8009494:	4b57      	ldr	r3, [pc, #348]	; (80095f4 <__ieee754_pow+0x3f4>)
 8009496:	4682      	mov	sl, r0
 8009498:	468b      	mov	fp, r1
 800949a:	2200      	movs	r2, #0
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f7 f8aa 	bl	80005f8 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	a14b      	add	r1, pc, #300	; (adr r1, 80095d8 <__ieee754_pow+0x3d8>)
 80094aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ae:	f7f6 feeb 	bl	8000288 <__aeabi_dsub>
 80094b2:	4622      	mov	r2, r4
 80094b4:	462b      	mov	r3, r5
 80094b6:	f7f7 f89f 	bl	80005f8 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	2000      	movs	r0, #0
 80094c0:	494d      	ldr	r1, [pc, #308]	; (80095f8 <__ieee754_pow+0x3f8>)
 80094c2:	f7f6 fee1 	bl	8000288 <__aeabi_dsub>
 80094c6:	4622      	mov	r2, r4
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	462b      	mov	r3, r5
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7f7 f891 	bl	80005f8 <__aeabi_dmul>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f88b 	bl	80005f8 <__aeabi_dmul>
 80094e2:	a33f      	add	r3, pc, #252	; (adr r3, 80095e0 <__ieee754_pow+0x3e0>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7f7 f886 	bl	80005f8 <__aeabi_dmul>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4650      	mov	r0, sl
 80094f2:	4659      	mov	r1, fp
 80094f4:	f7f6 fec8 	bl	8000288 <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	4630      	mov	r0, r6
 8009502:	4639      	mov	r1, r7
 8009504:	f7f6 fec2 	bl	800028c <__adddf3>
 8009508:	2000      	movs	r0, #0
 800950a:	4632      	mov	r2, r6
 800950c:	463b      	mov	r3, r7
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	f7f6 feb9 	bl	8000288 <__aeabi_dsub>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4640      	mov	r0, r8
 800951c:	4649      	mov	r1, r9
 800951e:	f7f6 feb3 	bl	8000288 <__aeabi_dsub>
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	9a06      	ldr	r2, [sp, #24]
 8009526:	3b01      	subs	r3, #1
 8009528:	4313      	orrs	r3, r2
 800952a:	4682      	mov	sl, r0
 800952c:	468b      	mov	fp, r1
 800952e:	f040 81e7 	bne.w	8009900 <__ieee754_pow+0x700>
 8009532:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80095e8 <__ieee754_pow+0x3e8>
 8009536:	eeb0 8a47 	vmov.f32	s16, s14
 800953a:	eef0 8a67 	vmov.f32	s17, s15
 800953e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009542:	2600      	movs	r6, #0
 8009544:	4632      	mov	r2, r6
 8009546:	463b      	mov	r3, r7
 8009548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800954c:	f7f6 fe9c 	bl	8000288 <__aeabi_dsub>
 8009550:	4622      	mov	r2, r4
 8009552:	462b      	mov	r3, r5
 8009554:	f7f7 f850 	bl	80005f8 <__aeabi_dmul>
 8009558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	4650      	mov	r0, sl
 8009562:	4659      	mov	r1, fp
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	f7f6 fe8c 	bl	800028c <__adddf3>
 8009574:	4632      	mov	r2, r6
 8009576:	463b      	mov	r3, r7
 8009578:	4680      	mov	r8, r0
 800957a:	4689      	mov	r9, r1
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	460b      	mov	r3, r1
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	4602      	mov	r2, r0
 800958c:	4649      	mov	r1, r9
 800958e:	4640      	mov	r0, r8
 8009590:	f7f6 fe7c 	bl	800028c <__adddf3>
 8009594:	4b19      	ldr	r3, [pc, #100]	; (80095fc <__ieee754_pow+0x3fc>)
 8009596:	4299      	cmp	r1, r3
 8009598:	ec45 4b19 	vmov	d9, r4, r5
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	468b      	mov	fp, r1
 80095a2:	f340 82f1 	ble.w	8009b88 <__ieee754_pow+0x988>
 80095a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80095aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80095ae:	4303      	orrs	r3, r0
 80095b0:	f000 81e4 	beq.w	800997c <__ieee754_pow+0x77c>
 80095b4:	ec51 0b18 	vmov	r0, r1, d8
 80095b8:	2200      	movs	r2, #0
 80095ba:	2300      	movs	r3, #0
 80095bc:	f7f7 fa8e 	bl	8000adc <__aeabi_dcmplt>
 80095c0:	3800      	subs	r0, #0
 80095c2:	bf18      	it	ne
 80095c4:	2001      	movne	r0, #1
 80095c6:	e72b      	b.n	8009420 <__ieee754_pow+0x220>
 80095c8:	60000000 	.word	0x60000000
 80095cc:	3ff71547 	.word	0x3ff71547
 80095d0:	f85ddf44 	.word	0xf85ddf44
 80095d4:	3e54ae0b 	.word	0x3e54ae0b
 80095d8:	55555555 	.word	0x55555555
 80095dc:	3fd55555 	.word	0x3fd55555
 80095e0:	652b82fe 	.word	0x652b82fe
 80095e4:	3ff71547 	.word	0x3ff71547
 80095e8:	00000000 	.word	0x00000000
 80095ec:	bff00000 	.word	0xbff00000
 80095f0:	3ff00000 	.word	0x3ff00000
 80095f4:	3fd00000 	.word	0x3fd00000
 80095f8:	3fe00000 	.word	0x3fe00000
 80095fc:	408fffff 	.word	0x408fffff
 8009600:	4bd5      	ldr	r3, [pc, #852]	; (8009958 <__ieee754_pow+0x758>)
 8009602:	402b      	ands	r3, r5
 8009604:	2200      	movs	r2, #0
 8009606:	b92b      	cbnz	r3, 8009614 <__ieee754_pow+0x414>
 8009608:	4bd4      	ldr	r3, [pc, #848]	; (800995c <__ieee754_pow+0x75c>)
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009612:	460c      	mov	r4, r1
 8009614:	1523      	asrs	r3, r4, #20
 8009616:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800961a:	4413      	add	r3, r2
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	4bd0      	ldr	r3, [pc, #832]	; (8009960 <__ieee754_pow+0x760>)
 8009620:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009624:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009628:	429c      	cmp	r4, r3
 800962a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800962e:	dd08      	ble.n	8009642 <__ieee754_pow+0x442>
 8009630:	4bcc      	ldr	r3, [pc, #816]	; (8009964 <__ieee754_pow+0x764>)
 8009632:	429c      	cmp	r4, r3
 8009634:	f340 8162 	ble.w	80098fc <__ieee754_pow+0x6fc>
 8009638:	9b05      	ldr	r3, [sp, #20]
 800963a:	3301      	adds	r3, #1
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009642:	2400      	movs	r4, #0
 8009644:	00e3      	lsls	r3, r4, #3
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	4bc7      	ldr	r3, [pc, #796]	; (8009968 <__ieee754_pow+0x768>)
 800964a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800964e:	ed93 7b00 	vldr	d7, [r3]
 8009652:	4629      	mov	r1, r5
 8009654:	ec53 2b17 	vmov	r2, r3, d7
 8009658:	eeb0 9a47 	vmov.f32	s18, s14
 800965c:	eef0 9a67 	vmov.f32	s19, s15
 8009660:	4682      	mov	sl, r0
 8009662:	f7f6 fe11 	bl	8000288 <__aeabi_dsub>
 8009666:	4652      	mov	r2, sl
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	462b      	mov	r3, r5
 800966e:	ec51 0b19 	vmov	r0, r1, d9
 8009672:	f7f6 fe0b 	bl	800028c <__adddf3>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	2000      	movs	r0, #0
 800967c:	49bb      	ldr	r1, [pc, #748]	; (800996c <__ieee754_pow+0x76c>)
 800967e:	f7f7 f8e5 	bl	800084c <__aeabi_ddiv>
 8009682:	ec41 0b1a 	vmov	d10, r0, r1
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 ffb3 	bl	80005f8 <__aeabi_dmul>
 8009692:	2300      	movs	r3, #0
 8009694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009698:	9302      	str	r3, [sp, #8]
 800969a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800969e:	46ab      	mov	fp, r5
 80096a0:	106d      	asrs	r5, r5, #1
 80096a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80096a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80096aa:	ec41 0b18 	vmov	d8, r0, r1
 80096ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80096b2:	2200      	movs	r2, #0
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	4614      	mov	r4, r2
 80096ba:	461d      	mov	r5, r3
 80096bc:	f7f6 ff9c 	bl	80005f8 <__aeabi_dmul>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4630      	mov	r0, r6
 80096c6:	4639      	mov	r1, r7
 80096c8:	f7f6 fdde 	bl	8000288 <__aeabi_dsub>
 80096cc:	ec53 2b19 	vmov	r2, r3, d9
 80096d0:	4606      	mov	r6, r0
 80096d2:	460f      	mov	r7, r1
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 fdd6 	bl	8000288 <__aeabi_dsub>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fdd0 	bl	8000288 <__aeabi_dsub>
 80096e8:	4642      	mov	r2, r8
 80096ea:	464b      	mov	r3, r9
 80096ec:	f7f6 ff84 	bl	80005f8 <__aeabi_dmul>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4630      	mov	r0, r6
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f6 fdc6 	bl	8000288 <__aeabi_dsub>
 80096fc:	ec53 2b1a 	vmov	r2, r3, d10
 8009700:	f7f6 ff7a 	bl	80005f8 <__aeabi_dmul>
 8009704:	ec53 2b18 	vmov	r2, r3, d8
 8009708:	ec41 0b19 	vmov	d9, r0, r1
 800970c:	ec51 0b18 	vmov	r0, r1, d8
 8009710:	f7f6 ff72 	bl	80005f8 <__aeabi_dmul>
 8009714:	a37c      	add	r3, pc, #496	; (adr r3, 8009908 <__ieee754_pow+0x708>)
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	4604      	mov	r4, r0
 800971c:	460d      	mov	r5, r1
 800971e:	f7f6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8009722:	a37b      	add	r3, pc, #492	; (adr r3, 8009910 <__ieee754_pow+0x710>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fdb0 	bl	800028c <__adddf3>
 800972c:	4622      	mov	r2, r4
 800972e:	462b      	mov	r3, r5
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	a378      	add	r3, pc, #480	; (adr r3, 8009918 <__ieee754_pow+0x718>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 fda7 	bl	800028c <__adddf3>
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	f7f6 ff59 	bl	80005f8 <__aeabi_dmul>
 8009746:	a376      	add	r3, pc, #472	; (adr r3, 8009920 <__ieee754_pow+0x720>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 fd9e 	bl	800028c <__adddf3>
 8009750:	4622      	mov	r2, r4
 8009752:	462b      	mov	r3, r5
 8009754:	f7f6 ff50 	bl	80005f8 <__aeabi_dmul>
 8009758:	a373      	add	r3, pc, #460	; (adr r3, 8009928 <__ieee754_pow+0x728>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 fd95 	bl	800028c <__adddf3>
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	f7f6 ff47 	bl	80005f8 <__aeabi_dmul>
 800976a:	a371      	add	r3, pc, #452	; (adr r3, 8009930 <__ieee754_pow+0x730>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f6 fd8c 	bl	800028c <__adddf3>
 8009774:	4622      	mov	r2, r4
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	462b      	mov	r3, r5
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 ff3a 	bl	80005f8 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	4642      	mov	r2, r8
 8009792:	4604      	mov	r4, r0
 8009794:	460d      	mov	r5, r1
 8009796:	464b      	mov	r3, r9
 8009798:	ec51 0b18 	vmov	r0, r1, d8
 800979c:	f7f6 fd76 	bl	800028c <__adddf3>
 80097a0:	ec53 2b19 	vmov	r2, r3, d9
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	4622      	mov	r2, r4
 80097aa:	462b      	mov	r3, r5
 80097ac:	f7f6 fd6e 	bl	800028c <__adddf3>
 80097b0:	4642      	mov	r2, r8
 80097b2:	4682      	mov	sl, r0
 80097b4:	468b      	mov	fp, r1
 80097b6:	464b      	mov	r3, r9
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f6 ff1c 	bl	80005f8 <__aeabi_dmul>
 80097c0:	4b6b      	ldr	r3, [pc, #428]	; (8009970 <__ieee754_pow+0x770>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	4606      	mov	r6, r0
 80097c6:	460f      	mov	r7, r1
 80097c8:	f7f6 fd60 	bl	800028c <__adddf3>
 80097cc:	4652      	mov	r2, sl
 80097ce:	465b      	mov	r3, fp
 80097d0:	f7f6 fd5c 	bl	800028c <__adddf3>
 80097d4:	2000      	movs	r0, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	f7f6 ff09 	bl	80005f8 <__aeabi_dmul>
 80097e6:	4b62      	ldr	r3, [pc, #392]	; (8009970 <__ieee754_pow+0x770>)
 80097e8:	4680      	mov	r8, r0
 80097ea:	4689      	mov	r9, r1
 80097ec:	2200      	movs	r2, #0
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7f6 fd49 	bl	8000288 <__aeabi_dsub>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 fd45 	bl	8000288 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4650      	mov	r0, sl
 8009804:	4659      	mov	r1, fp
 8009806:	f7f6 fd3f 	bl	8000288 <__aeabi_dsub>
 800980a:	ec53 2b18 	vmov	r2, r3, d8
 800980e:	f7f6 fef3 	bl	80005f8 <__aeabi_dmul>
 8009812:	4622      	mov	r2, r4
 8009814:	4606      	mov	r6, r0
 8009816:	460f      	mov	r7, r1
 8009818:	462b      	mov	r3, r5
 800981a:	ec51 0b19 	vmov	r0, r1, d9
 800981e:	f7f6 feeb 	bl	80005f8 <__aeabi_dmul>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f6 fd2f 	bl	800028c <__adddf3>
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fd27 	bl	800028c <__adddf3>
 800983e:	a33e      	add	r3, pc, #248	; (adr r3, 8009938 <__ieee754_pow+0x738>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	2000      	movs	r0, #0
 8009846:	4604      	mov	r4, r0
 8009848:	460d      	mov	r5, r1
 800984a:	f7f6 fed5 	bl	80005f8 <__aeabi_dmul>
 800984e:	4642      	mov	r2, r8
 8009850:	ec41 0b18 	vmov	d8, r0, r1
 8009854:	464b      	mov	r3, r9
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f6 fd15 	bl	8000288 <__aeabi_dsub>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fd0f 	bl	8000288 <__aeabi_dsub>
 800986a:	a335      	add	r3, pc, #212	; (adr r3, 8009940 <__ieee754_pow+0x740>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fec2 	bl	80005f8 <__aeabi_dmul>
 8009874:	a334      	add	r3, pc, #208	; (adr r3, 8009948 <__ieee754_pow+0x748>)
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f6 feb9 	bl	80005f8 <__aeabi_dmul>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f6 fcfd 	bl	800028c <__adddf3>
 8009892:	9a07      	ldr	r2, [sp, #28]
 8009894:	4b37      	ldr	r3, [pc, #220]	; (8009974 <__ieee754_pow+0x774>)
 8009896:	4413      	add	r3, r2
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 fcf6 	bl	800028c <__adddf3>
 80098a0:	4682      	mov	sl, r0
 80098a2:	9805      	ldr	r0, [sp, #20]
 80098a4:	468b      	mov	fp, r1
 80098a6:	f7f6 fe3d 	bl	8000524 <__aeabi_i2d>
 80098aa:	9a07      	ldr	r2, [sp, #28]
 80098ac:	4b32      	ldr	r3, [pc, #200]	; (8009978 <__ieee754_pow+0x778>)
 80098ae:	4413      	add	r3, r2
 80098b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	4652      	mov	r2, sl
 80098ba:	465b      	mov	r3, fp
 80098bc:	ec51 0b18 	vmov	r0, r1, d8
 80098c0:	f7f6 fce4 	bl	800028c <__adddf3>
 80098c4:	4642      	mov	r2, r8
 80098c6:	464b      	mov	r3, r9
 80098c8:	f7f6 fce0 	bl	800028c <__adddf3>
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	f7f6 fcdc 	bl	800028c <__adddf3>
 80098d4:	2000      	movs	r0, #0
 80098d6:	4632      	mov	r2, r6
 80098d8:	463b      	mov	r3, r7
 80098da:	4604      	mov	r4, r0
 80098dc:	460d      	mov	r5, r1
 80098de:	f7f6 fcd3 	bl	8000288 <__aeabi_dsub>
 80098e2:	4642      	mov	r2, r8
 80098e4:	464b      	mov	r3, r9
 80098e6:	f7f6 fccf 	bl	8000288 <__aeabi_dsub>
 80098ea:	ec53 2b18 	vmov	r2, r3, d8
 80098ee:	f7f6 fccb 	bl	8000288 <__aeabi_dsub>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4650      	mov	r0, sl
 80098f8:	4659      	mov	r1, fp
 80098fa:	e610      	b.n	800951e <__ieee754_pow+0x31e>
 80098fc:	2401      	movs	r4, #1
 80098fe:	e6a1      	b.n	8009644 <__ieee754_pow+0x444>
 8009900:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009950 <__ieee754_pow+0x750>
 8009904:	e617      	b.n	8009536 <__ieee754_pow+0x336>
 8009906:	bf00      	nop
 8009908:	4a454eef 	.word	0x4a454eef
 800990c:	3fca7e28 	.word	0x3fca7e28
 8009910:	93c9db65 	.word	0x93c9db65
 8009914:	3fcd864a 	.word	0x3fcd864a
 8009918:	a91d4101 	.word	0xa91d4101
 800991c:	3fd17460 	.word	0x3fd17460
 8009920:	518f264d 	.word	0x518f264d
 8009924:	3fd55555 	.word	0x3fd55555
 8009928:	db6fabff 	.word	0xdb6fabff
 800992c:	3fdb6db6 	.word	0x3fdb6db6
 8009930:	33333303 	.word	0x33333303
 8009934:	3fe33333 	.word	0x3fe33333
 8009938:	e0000000 	.word	0xe0000000
 800993c:	3feec709 	.word	0x3feec709
 8009940:	dc3a03fd 	.word	0xdc3a03fd
 8009944:	3feec709 	.word	0x3feec709
 8009948:	145b01f5 	.word	0x145b01f5
 800994c:	be3e2fe0 	.word	0xbe3e2fe0
 8009950:	00000000 	.word	0x00000000
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	43400000 	.word	0x43400000
 8009960:	0003988e 	.word	0x0003988e
 8009964:	000bb679 	.word	0x000bb679
 8009968:	0800a500 	.word	0x0800a500
 800996c:	3ff00000 	.word	0x3ff00000
 8009970:	40080000 	.word	0x40080000
 8009974:	0800a520 	.word	0x0800a520
 8009978:	0800a510 	.word	0x0800a510
 800997c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009c54 <__ieee754_pow+0xa54>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	4640      	mov	r0, r8
 8009984:	4649      	mov	r1, r9
 8009986:	f7f6 fc81 	bl	800028c <__adddf3>
 800998a:	4622      	mov	r2, r4
 800998c:	ec41 0b1a 	vmov	d10, r0, r1
 8009990:	462b      	mov	r3, r5
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7f6 fc77 	bl	8000288 <__aeabi_dsub>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	ec51 0b1a 	vmov	r0, r1, d10
 80099a2:	f7f7 f8b9 	bl	8000b18 <__aeabi_dcmpgt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f47f ae04 	bne.w	80095b4 <__ieee754_pow+0x3b4>
 80099ac:	4aa4      	ldr	r2, [pc, #656]	; (8009c40 <__ieee754_pow+0xa40>)
 80099ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099b2:	4293      	cmp	r3, r2
 80099b4:	f340 8108 	ble.w	8009bc8 <__ieee754_pow+0x9c8>
 80099b8:	151b      	asrs	r3, r3, #20
 80099ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80099be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80099c2:	fa4a f303 	asr.w	r3, sl, r3
 80099c6:	445b      	add	r3, fp
 80099c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80099cc:	4e9d      	ldr	r6, [pc, #628]	; (8009c44 <__ieee754_pow+0xa44>)
 80099ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80099d2:	4116      	asrs	r6, r2
 80099d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80099d8:	2000      	movs	r0, #0
 80099da:	ea23 0106 	bic.w	r1, r3, r6
 80099de:	f1c2 0214 	rsb	r2, r2, #20
 80099e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80099e6:	fa4a fa02 	asr.w	sl, sl, r2
 80099ea:	f1bb 0f00 	cmp.w	fp, #0
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4620      	mov	r0, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	bfb8      	it	lt
 80099f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80099fc:	f7f6 fc44 	bl	8000288 <__aeabi_dsub>
 8009a00:	ec41 0b19 	vmov	d9, r0, r1
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	ec51 0b19 	vmov	r0, r1, d9
 8009a0c:	f7f6 fc3e 	bl	800028c <__adddf3>
 8009a10:	a37b      	add	r3, pc, #492	; (adr r3, 8009c00 <__ieee754_pow+0xa00>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	2000      	movs	r0, #0
 8009a18:	4604      	mov	r4, r0
 8009a1a:	460d      	mov	r5, r1
 8009a1c:	f7f6 fdec 	bl	80005f8 <__aeabi_dmul>
 8009a20:	ec53 2b19 	vmov	r2, r3, d9
 8009a24:	4606      	mov	r6, r0
 8009a26:	460f      	mov	r7, r1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	f7f6 fc2c 	bl	8000288 <__aeabi_dsub>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4640      	mov	r0, r8
 8009a36:	4649      	mov	r1, r9
 8009a38:	f7f6 fc26 	bl	8000288 <__aeabi_dsub>
 8009a3c:	a372      	add	r3, pc, #456	; (adr r3, 8009c08 <__ieee754_pow+0xa08>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	a372      	add	r3, pc, #456	; (adr r3, 8009c10 <__ieee754_pow+0xa10>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	4689      	mov	r9, r1
 8009a50:	4620      	mov	r0, r4
 8009a52:	4629      	mov	r1, r5
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f6 fc14 	bl	800028c <__adddf3>
 8009a64:	4604      	mov	r4, r0
 8009a66:	460d      	mov	r5, r1
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	4639      	mov	r1, r7
 8009a70:	f7f6 fc0c 	bl	800028c <__adddf3>
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4689      	mov	r9, r1
 8009a7c:	f7f6 fc04 	bl	8000288 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fbfe 	bl	8000288 <__aeabi_dsub>
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	464b      	mov	r3, r9
 8009a94:	4640      	mov	r0, r8
 8009a96:	4649      	mov	r1, r9
 8009a98:	f7f6 fdae 	bl	80005f8 <__aeabi_dmul>
 8009a9c:	a35e      	add	r3, pc, #376	; (adr r3, 8009c18 <__ieee754_pow+0xa18>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	f7f6 fda7 	bl	80005f8 <__aeabi_dmul>
 8009aaa:	a35d      	add	r3, pc, #372	; (adr r3, 8009c20 <__ieee754_pow+0xa20>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fbea 	bl	8000288 <__aeabi_dsub>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f6 fd9e 	bl	80005f8 <__aeabi_dmul>
 8009abc:	a35a      	add	r3, pc, #360	; (adr r3, 8009c28 <__ieee754_pow+0xa28>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fbe3 	bl	800028c <__adddf3>
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f7f6 fd95 	bl	80005f8 <__aeabi_dmul>
 8009ace:	a358      	add	r3, pc, #352	; (adr r3, 8009c30 <__ieee754_pow+0xa30>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f6 fbd8 	bl	8000288 <__aeabi_dsub>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	462b      	mov	r3, r5
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	a355      	add	r3, pc, #340	; (adr r3, 8009c38 <__ieee754_pow+0xa38>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fbd1 	bl	800028c <__adddf3>
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	f7f6 fd83 	bl	80005f8 <__aeabi_dmul>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 fbc5 	bl	8000288 <__aeabi_dsub>
 8009afe:	4604      	mov	r4, r0
 8009b00:	460d      	mov	r5, r1
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4640      	mov	r0, r8
 8009b08:	4649      	mov	r1, r9
 8009b0a:	f7f6 fd75 	bl	80005f8 <__aeabi_dmul>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	ec41 0b19 	vmov	d9, r0, r1
 8009b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbb4 	bl	8000288 <__aeabi_dsub>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	ec51 0b19 	vmov	r0, r1, d9
 8009b28:	f7f6 fe90 	bl	800084c <__aeabi_ddiv>
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	463b      	mov	r3, r7
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	f7f6 fba4 	bl	800028c <__adddf3>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fb9c 	bl	8000288 <__aeabi_dsub>
 8009b50:	4642      	mov	r2, r8
 8009b52:	464b      	mov	r3, r9
 8009b54:	f7f6 fb98 	bl	8000288 <__aeabi_dsub>
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	493a      	ldr	r1, [pc, #232]	; (8009c48 <__ieee754_pow+0xa48>)
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f7f6 fb92 	bl	8000288 <__aeabi_dsub>
 8009b64:	ec41 0b10 	vmov	d0, r0, r1
 8009b68:	ee10 3a90 	vmov	r3, s1
 8009b6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b74:	da2b      	bge.n	8009bce <__ieee754_pow+0x9ce>
 8009b76:	4650      	mov	r0, sl
 8009b78:	f000 f966 	bl	8009e48 <scalbn>
 8009b7c:	ec51 0b10 	vmov	r0, r1, d0
 8009b80:	ec53 2b18 	vmov	r2, r3, d8
 8009b84:	f7ff bbed 	b.w	8009362 <__ieee754_pow+0x162>
 8009b88:	4b30      	ldr	r3, [pc, #192]	; (8009c4c <__ieee754_pow+0xa4c>)
 8009b8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b8e:	429e      	cmp	r6, r3
 8009b90:	f77f af0c 	ble.w	80099ac <__ieee754_pow+0x7ac>
 8009b94:	4b2e      	ldr	r3, [pc, #184]	; (8009c50 <__ieee754_pow+0xa50>)
 8009b96:	440b      	add	r3, r1
 8009b98:	4303      	orrs	r3, r0
 8009b9a:	d009      	beq.n	8009bb0 <__ieee754_pow+0x9b0>
 8009b9c:	ec51 0b18 	vmov	r0, r1, d8
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f7f6 ff9a 	bl	8000adc <__aeabi_dcmplt>
 8009ba8:	3800      	subs	r0, #0
 8009baa:	bf18      	it	ne
 8009bac:	2001      	movne	r0, #1
 8009bae:	e447      	b.n	8009440 <__ieee754_pow+0x240>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fb68 	bl	8000288 <__aeabi_dsub>
 8009bb8:	4642      	mov	r2, r8
 8009bba:	464b      	mov	r3, r9
 8009bbc:	f7f6 ffa2 	bl	8000b04 <__aeabi_dcmpge>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f aef3 	beq.w	80099ac <__ieee754_pow+0x7ac>
 8009bc6:	e7e9      	b.n	8009b9c <__ieee754_pow+0x99c>
 8009bc8:	f04f 0a00 	mov.w	sl, #0
 8009bcc:	e71a      	b.n	8009a04 <__ieee754_pow+0x804>
 8009bce:	ec51 0b10 	vmov	r0, r1, d0
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	e7d4      	b.n	8009b80 <__ieee754_pow+0x980>
 8009bd6:	491c      	ldr	r1, [pc, #112]	; (8009c48 <__ieee754_pow+0xa48>)
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f7ff bb30 	b.w	800923e <__ieee754_pow+0x3e>
 8009bde:	2000      	movs	r0, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	f7ff bb2c 	b.w	800923e <__ieee754_pow+0x3e>
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7ff bb28 	b.w	800923e <__ieee754_pow+0x3e>
 8009bee:	9204      	str	r2, [sp, #16]
 8009bf0:	f7ff bb7a 	b.w	80092e8 <__ieee754_pow+0xe8>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f7ff bb64 	b.w	80092c2 <__ieee754_pow+0xc2>
 8009bfa:	bf00      	nop
 8009bfc:	f3af 8000 	nop.w
 8009c00:	00000000 	.word	0x00000000
 8009c04:	3fe62e43 	.word	0x3fe62e43
 8009c08:	fefa39ef 	.word	0xfefa39ef
 8009c0c:	3fe62e42 	.word	0x3fe62e42
 8009c10:	0ca86c39 	.word	0x0ca86c39
 8009c14:	be205c61 	.word	0xbe205c61
 8009c18:	72bea4d0 	.word	0x72bea4d0
 8009c1c:	3e663769 	.word	0x3e663769
 8009c20:	c5d26bf1 	.word	0xc5d26bf1
 8009c24:	3ebbbd41 	.word	0x3ebbbd41
 8009c28:	af25de2c 	.word	0xaf25de2c
 8009c2c:	3f11566a 	.word	0x3f11566a
 8009c30:	16bebd93 	.word	0x16bebd93
 8009c34:	3f66c16c 	.word	0x3f66c16c
 8009c38:	5555553e 	.word	0x5555553e
 8009c3c:	3fc55555 	.word	0x3fc55555
 8009c40:	3fe00000 	.word	0x3fe00000
 8009c44:	000fffff 	.word	0x000fffff
 8009c48:	3ff00000 	.word	0x3ff00000
 8009c4c:	4090cbff 	.word	0x4090cbff
 8009c50:	3f6f3400 	.word	0x3f6f3400
 8009c54:	652b82fe 	.word	0x652b82fe
 8009c58:	3c971547 	.word	0x3c971547

08009c5c <__ieee754_sqrt>:
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c60:	ec55 4b10 	vmov	r4, r5, d0
 8009c64:	4e55      	ldr	r6, [pc, #340]	; (8009dbc <__ieee754_sqrt+0x160>)
 8009c66:	43ae      	bics	r6, r5
 8009c68:	ee10 0a10 	vmov	r0, s0
 8009c6c:	ee10 3a10 	vmov	r3, s0
 8009c70:	462a      	mov	r2, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	d110      	bne.n	8009c98 <__ieee754_sqrt+0x3c>
 8009c76:	ee10 2a10 	vmov	r2, s0
 8009c7a:	462b      	mov	r3, r5
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	f7f6 fb00 	bl	800028c <__adddf3>
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	460d      	mov	r5, r1
 8009c90:	ec45 4b10 	vmov	d0, r4, r5
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	dc10      	bgt.n	8009cbe <__ieee754_sqrt+0x62>
 8009c9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ca0:	4330      	orrs	r0, r6
 8009ca2:	d0f5      	beq.n	8009c90 <__ieee754_sqrt+0x34>
 8009ca4:	b15d      	cbz	r5, 8009cbe <__ieee754_sqrt+0x62>
 8009ca6:	ee10 2a10 	vmov	r2, s0
 8009caa:	462b      	mov	r3, r5
 8009cac:	ee10 0a10 	vmov	r0, s0
 8009cb0:	f7f6 faea 	bl	8000288 <__aeabi_dsub>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	f7f6 fdc8 	bl	800084c <__aeabi_ddiv>
 8009cbc:	e7e6      	b.n	8009c8c <__ieee754_sqrt+0x30>
 8009cbe:	1512      	asrs	r2, r2, #20
 8009cc0:	d074      	beq.n	8009dac <__ieee754_sqrt+0x150>
 8009cc2:	07d4      	lsls	r4, r2, #31
 8009cc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009cc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009cd0:	bf5e      	ittt	pl
 8009cd2:	0fda      	lsrpl	r2, r3, #31
 8009cd4:	005b      	lslpl	r3, r3, #1
 8009cd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009cda:	2400      	movs	r4, #0
 8009cdc:	0fda      	lsrs	r2, r3, #31
 8009cde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ce2:	107f      	asrs	r7, r7, #1
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	2516      	movs	r5, #22
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009cee:	1886      	adds	r6, r0, r2
 8009cf0:	428e      	cmp	r6, r1
 8009cf2:	bfde      	ittt	le
 8009cf4:	1b89      	suble	r1, r1, r6
 8009cf6:	18b0      	addle	r0, r6, r2
 8009cf8:	18a4      	addle	r4, r4, r2
 8009cfa:	0049      	lsls	r1, r1, #1
 8009cfc:	3d01      	subs	r5, #1
 8009cfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009d02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009d06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d0a:	d1f0      	bne.n	8009cee <__ieee754_sqrt+0x92>
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	f04f 0e20 	mov.w	lr, #32
 8009d12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d16:	4281      	cmp	r1, r0
 8009d18:	eb06 0c05 	add.w	ip, r6, r5
 8009d1c:	dc02      	bgt.n	8009d24 <__ieee754_sqrt+0xc8>
 8009d1e:	d113      	bne.n	8009d48 <__ieee754_sqrt+0xec>
 8009d20:	459c      	cmp	ip, r3
 8009d22:	d811      	bhi.n	8009d48 <__ieee754_sqrt+0xec>
 8009d24:	f1bc 0f00 	cmp.w	ip, #0
 8009d28:	eb0c 0506 	add.w	r5, ip, r6
 8009d2c:	da43      	bge.n	8009db6 <__ieee754_sqrt+0x15a>
 8009d2e:	2d00      	cmp	r5, #0
 8009d30:	db41      	blt.n	8009db6 <__ieee754_sqrt+0x15a>
 8009d32:	f100 0801 	add.w	r8, r0, #1
 8009d36:	1a09      	subs	r1, r1, r0
 8009d38:	459c      	cmp	ip, r3
 8009d3a:	bf88      	it	hi
 8009d3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009d40:	eba3 030c 	sub.w	r3, r3, ip
 8009d44:	4432      	add	r2, r6
 8009d46:	4640      	mov	r0, r8
 8009d48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009d4c:	f1be 0e01 	subs.w	lr, lr, #1
 8009d50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d5c:	d1db      	bne.n	8009d16 <__ieee754_sqrt+0xba>
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	d006      	beq.n	8009d70 <__ieee754_sqrt+0x114>
 8009d62:	1c50      	adds	r0, r2, #1
 8009d64:	bf13      	iteet	ne
 8009d66:	3201      	addne	r2, #1
 8009d68:	3401      	addeq	r4, #1
 8009d6a:	4672      	moveq	r2, lr
 8009d6c:	f022 0201 	bicne.w	r2, r2, #1
 8009d70:	1063      	asrs	r3, r4, #1
 8009d72:	0852      	lsrs	r2, r2, #1
 8009d74:	07e1      	lsls	r1, r4, #31
 8009d76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d7e:	bf48      	it	mi
 8009d80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009d84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009d88:	4614      	mov	r4, r2
 8009d8a:	e781      	b.n	8009c90 <__ieee754_sqrt+0x34>
 8009d8c:	0ad9      	lsrs	r1, r3, #11
 8009d8e:	3815      	subs	r0, #21
 8009d90:	055b      	lsls	r3, r3, #21
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d0fa      	beq.n	8009d8c <__ieee754_sqrt+0x130>
 8009d96:	02cd      	lsls	r5, r1, #11
 8009d98:	d50a      	bpl.n	8009db0 <__ieee754_sqrt+0x154>
 8009d9a:	f1c2 0420 	rsb	r4, r2, #32
 8009d9e:	fa23 f404 	lsr.w	r4, r3, r4
 8009da2:	1e55      	subs	r5, r2, #1
 8009da4:	4093      	lsls	r3, r2
 8009da6:	4321      	orrs	r1, r4
 8009da8:	1b42      	subs	r2, r0, r5
 8009daa:	e78a      	b.n	8009cc2 <__ieee754_sqrt+0x66>
 8009dac:	4610      	mov	r0, r2
 8009dae:	e7f0      	b.n	8009d92 <__ieee754_sqrt+0x136>
 8009db0:	0049      	lsls	r1, r1, #1
 8009db2:	3201      	adds	r2, #1
 8009db4:	e7ef      	b.n	8009d96 <__ieee754_sqrt+0x13a>
 8009db6:	4680      	mov	r8, r0
 8009db8:	e7bd      	b.n	8009d36 <__ieee754_sqrt+0xda>
 8009dba:	bf00      	nop
 8009dbc:	7ff00000 	.word	0x7ff00000

08009dc0 <with_errno>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	4616      	mov	r6, r2
 8009dc8:	f7fa ff06 	bl	8004bd8 <__errno>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	6006      	str	r6, [r0, #0]
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}

08009dd4 <xflow>:
 8009dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dd6:	4614      	mov	r4, r2
 8009dd8:	461d      	mov	r5, r3
 8009dda:	b108      	cbz	r0, 8009de0 <xflow+0xc>
 8009ddc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	e9cd 2300 	strd	r2, r3, [sp]
 8009de4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de8:	4620      	mov	r0, r4
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 fc04 	bl	80005f8 <__aeabi_dmul>
 8009df0:	2222      	movs	r2, #34	; 0x22
 8009df2:	b003      	add	sp, #12
 8009df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009df8:	f7ff bfe2 	b.w	8009dc0 <with_errno>

08009dfc <__math_uflow>:
 8009dfc:	b508      	push	{r3, lr}
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e04:	f7ff ffe6 	bl	8009dd4 <xflow>
 8009e08:	ec41 0b10 	vmov	d0, r0, r1
 8009e0c:	bd08      	pop	{r3, pc}

08009e0e <__math_oflow>:
 8009e0e:	b508      	push	{r3, lr}
 8009e10:	2200      	movs	r2, #0
 8009e12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009e16:	f7ff ffdd 	bl	8009dd4 <xflow>
 8009e1a:	ec41 0b10 	vmov	d0, r0, r1
 8009e1e:	bd08      	pop	{r3, pc}

08009e20 <fabs>:
 8009e20:	ec51 0b10 	vmov	r0, r1, d0
 8009e24:	ee10 2a10 	vmov	r2, s0
 8009e28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e2c:	ec43 2b10 	vmov	d0, r2, r3
 8009e30:	4770      	bx	lr

08009e32 <finite>:
 8009e32:	b082      	sub	sp, #8
 8009e34:	ed8d 0b00 	vstr	d0, [sp]
 8009e38:	9801      	ldr	r0, [sp, #4]
 8009e3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009e3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009e42:	0fc0      	lsrs	r0, r0, #31
 8009e44:	b002      	add	sp, #8
 8009e46:	4770      	bx	lr

08009e48 <scalbn>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	ec55 4b10 	vmov	r4, r5, d0
 8009e4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009e52:	4606      	mov	r6, r0
 8009e54:	462b      	mov	r3, r5
 8009e56:	b99a      	cbnz	r2, 8009e80 <scalbn+0x38>
 8009e58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e5c:	4323      	orrs	r3, r4
 8009e5e:	d036      	beq.n	8009ece <scalbn+0x86>
 8009e60:	4b39      	ldr	r3, [pc, #228]	; (8009f48 <scalbn+0x100>)
 8009e62:	4629      	mov	r1, r5
 8009e64:	ee10 0a10 	vmov	r0, s0
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	4b37      	ldr	r3, [pc, #220]	; (8009f4c <scalbn+0x104>)
 8009e70:	429e      	cmp	r6, r3
 8009e72:	4604      	mov	r4, r0
 8009e74:	460d      	mov	r5, r1
 8009e76:	da10      	bge.n	8009e9a <scalbn+0x52>
 8009e78:	a32b      	add	r3, pc, #172	; (adr r3, 8009f28 <scalbn+0xe0>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	e03a      	b.n	8009ef6 <scalbn+0xae>
 8009e80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009e84:	428a      	cmp	r2, r1
 8009e86:	d10c      	bne.n	8009ea2 <scalbn+0x5a>
 8009e88:	ee10 2a10 	vmov	r2, s0
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 f9fc 	bl	800028c <__adddf3>
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	e019      	b.n	8009ece <scalbn+0x86>
 8009e9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	3a36      	subs	r2, #54	; 0x36
 8009ea2:	4432      	add	r2, r6
 8009ea4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ea8:	428a      	cmp	r2, r1
 8009eaa:	dd08      	ble.n	8009ebe <scalbn+0x76>
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	a120      	add	r1, pc, #128	; (adr r1, 8009f30 <scalbn+0xe8>)
 8009eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb4:	da1c      	bge.n	8009ef0 <scalbn+0xa8>
 8009eb6:	a120      	add	r1, pc, #128	; (adr r1, 8009f38 <scalbn+0xf0>)
 8009eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ebc:	e018      	b.n	8009ef0 <scalbn+0xa8>
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	dd08      	ble.n	8009ed4 <scalbn+0x8c>
 8009ec2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009eca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ece:	ec45 4b10 	vmov	d0, r4, r5
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009ed8:	da19      	bge.n	8009f0e <scalbn+0xc6>
 8009eda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009ee4:	dd0a      	ble.n	8009efc <scalbn+0xb4>
 8009ee6:	a112      	add	r1, pc, #72	; (adr r1, 8009f30 <scalbn+0xe8>)
 8009ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e2      	bne.n	8009eb6 <scalbn+0x6e>
 8009ef0:	a30f      	add	r3, pc, #60	; (adr r3, 8009f30 <scalbn+0xe8>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 fb7f 	bl	80005f8 <__aeabi_dmul>
 8009efa:	e7cb      	b.n	8009e94 <scalbn+0x4c>
 8009efc:	a10a      	add	r1, pc, #40	; (adr r1, 8009f28 <scalbn+0xe0>)
 8009efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0b8      	beq.n	8009e78 <scalbn+0x30>
 8009f06:	a10e      	add	r1, pc, #56	; (adr r1, 8009f40 <scalbn+0xf8>)
 8009f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f0c:	e7b4      	b.n	8009e78 <scalbn+0x30>
 8009f0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f12:	3236      	adds	r2, #54	; 0x36
 8009f14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <scalbn+0x108>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	e7e8      	b.n	8009ef6 <scalbn+0xae>
 8009f24:	f3af 8000 	nop.w
 8009f28:	c2f8f359 	.word	0xc2f8f359
 8009f2c:	01a56e1f 	.word	0x01a56e1f
 8009f30:	8800759c 	.word	0x8800759c
 8009f34:	7e37e43c 	.word	0x7e37e43c
 8009f38:	8800759c 	.word	0x8800759c
 8009f3c:	fe37e43c 	.word	0xfe37e43c
 8009f40:	c2f8f359 	.word	0xc2f8f359
 8009f44:	81a56e1f 	.word	0x81a56e1f
 8009f48:	43500000 	.word	0x43500000
 8009f4c:	ffff3cb0 	.word	0xffff3cb0
 8009f50:	3c900000 	.word	0x3c900000

08009f54 <_init>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr

08009f60 <_fini>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr
