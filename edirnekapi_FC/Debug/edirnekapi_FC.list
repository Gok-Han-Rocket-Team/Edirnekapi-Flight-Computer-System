
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08012698  08012698  00022698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ca8  08012ca8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012ca8  08012ca8  00022ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cb0  08012cb0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cb0  08012cb0  00022cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cb4  08012cb4  00022cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012cb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  200001e8  08012ea0  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001234  08012ea0  00031234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185fe  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae0  00000000  00000000  00048816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0004c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0004d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277ee  00000000  00000000  0004e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9f5  00000000  00000000  00075cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e252e  00000000  00000000  000906bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172be9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064d0  00000000  00000000  00172c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801267c 	.word	0x0801267c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0801267c 	.word	0x0801267c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_frsub>:
 8000ce8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	e002      	b.n	8000cf4 <__addsf3>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fsub>:
 8000cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cf4 <__addsf3>:
 8000cf4:	0042      	lsls	r2, r0, #1
 8000cf6:	bf1f      	itttt	ne
 8000cf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cfc:	ea92 0f03 	teqne	r2, r3
 8000d00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d08:	d06a      	beq.n	8000de0 <__addsf3+0xec>
 8000d0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d12:	bfc1      	itttt	gt
 8000d14:	18d2      	addgt	r2, r2, r3
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	4048      	eorgt	r0, r1
 8000d1a:	4041      	eorgt	r1, r0
 8000d1c:	bfb8      	it	lt
 8000d1e:	425b      	neglt	r3, r3
 8000d20:	2b19      	cmp	r3, #25
 8000d22:	bf88      	it	hi
 8000d24:	4770      	bxhi	lr
 8000d26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4240      	negne	r0, r0
 8000d36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d42:	bf18      	it	ne
 8000d44:	4249      	negne	r1, r1
 8000d46:	ea92 0f03 	teq	r2, r3
 8000d4a:	d03f      	beq.n	8000dcc <__addsf3+0xd8>
 8000d4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d50:	fa41 fc03 	asr.w	ip, r1, r3
 8000d54:	eb10 000c 	adds.w	r0, r0, ip
 8000d58:	f1c3 0320 	rsb	r3, r3, #32
 8000d5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__addsf3+0x78>
 8000d66:	4249      	negs	r1, r1
 8000d68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d70:	d313      	bcc.n	8000d9a <__addsf3+0xa6>
 8000d72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d76:	d306      	bcc.n	8000d86 <__addsf3+0x92>
 8000d78:	0840      	lsrs	r0, r0, #1
 8000d7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7e:	f102 0201 	add.w	r2, r2, #1
 8000d82:	2afe      	cmp	r2, #254	; 0xfe
 8000d84:	d251      	bcs.n	8000e2a <__addsf3+0x136>
 8000d86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	ea40 0003 	orr.w	r0, r0, r3
 8000d98:	4770      	bx	lr
 8000d9a:	0049      	lsls	r1, r1, #1
 8000d9c:	eb40 0000 	adc.w	r0, r0, r0
 8000da0:	3a01      	subs	r2, #1
 8000da2:	bf28      	it	cs
 8000da4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000da8:	d2ed      	bcs.n	8000d86 <__addsf3+0x92>
 8000daa:	fab0 fc80 	clz	ip, r0
 8000dae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000db2:	ebb2 020c 	subs.w	r2, r2, ip
 8000db6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dba:	bfaa      	itet	ge
 8000dbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dc0:	4252      	neglt	r2, r2
 8000dc2:	4318      	orrge	r0, r3
 8000dc4:	bfbc      	itt	lt
 8000dc6:	40d0      	lsrlt	r0, r2
 8000dc8:	4318      	orrlt	r0, r3
 8000dca:	4770      	bx	lr
 8000dcc:	f092 0f00 	teq	r2, #0
 8000dd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dd4:	bf06      	itte	eq
 8000dd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dda:	3201      	addeq	r2, #1
 8000ddc:	3b01      	subne	r3, #1
 8000dde:	e7b5      	b.n	8000d4c <__addsf3+0x58>
 8000de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de8:	bf18      	it	ne
 8000dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dee:	d021      	beq.n	8000e34 <__addsf3+0x140>
 8000df0:	ea92 0f03 	teq	r2, r3
 8000df4:	d004      	beq.n	8000e00 <__addsf3+0x10c>
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	4770      	bx	lr
 8000e00:	ea90 0f01 	teq	r0, r1
 8000e04:	bf1c      	itt	ne
 8000e06:	2000      	movne	r0, #0
 8000e08:	4770      	bxne	lr
 8000e0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e0e:	d104      	bne.n	8000e1a <__addsf3+0x126>
 8000e10:	0040      	lsls	r0, r0, #1
 8000e12:	bf28      	it	cs
 8000e14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	4770      	bx	lr
 8000e1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e1e:	bf3c      	itt	cc
 8000e20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bxcc	lr
 8000e26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	4770      	bx	lr
 8000e34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e38:	bf16      	itet	ne
 8000e3a:	4608      	movne	r0, r1
 8000e3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e40:	4601      	movne	r1, r0
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	bf06      	itte	eq
 8000e46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e4a:	ea90 0f01 	teqeq	r0, r1
 8000e4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_ui2f>:
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e004      	b.n	8000e64 <__aeabi_i2f+0x8>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_i2f>:
 8000e5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e60:	bf48      	it	mi
 8000e62:	4240      	negmi	r0, r0
 8000e64:	ea5f 0c00 	movs.w	ip, r0
 8000e68:	bf08      	it	eq
 8000e6a:	4770      	bxeq	lr
 8000e6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e70:	4601      	mov	r1, r0
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	e01c      	b.n	8000eb2 <__aeabi_l2f+0x2a>

08000e78 <__aeabi_ul2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e00a      	b.n	8000e9c <__aeabi_l2f+0x14>
 8000e86:	bf00      	nop

08000e88 <__aeabi_l2f>:
 8000e88:	ea50 0201 	orrs.w	r2, r0, r1
 8000e8c:	bf08      	it	eq
 8000e8e:	4770      	bxeq	lr
 8000e90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e94:	d502      	bpl.n	8000e9c <__aeabi_l2f+0x14>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	ea5f 0c01 	movs.w	ip, r1
 8000ea0:	bf02      	ittt	eq
 8000ea2:	4684      	moveq	ip, r0
 8000ea4:	4601      	moveq	r1, r0
 8000ea6:	2000      	moveq	r0, #0
 8000ea8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000eac:	bf08      	it	eq
 8000eae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eb6:	fabc f28c 	clz	r2, ip
 8000eba:	3a08      	subs	r2, #8
 8000ebc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ec0:	db10      	blt.n	8000ee4 <__aeabi_l2f+0x5c>
 8000ec2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ed4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f102 0220 	add.w	r2, r2, #32
 8000ee8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_ldivmod>:
 8000f04:	b97b      	cbnz	r3, 8000f26 <__aeabi_ldivmod+0x22>
 8000f06:	b972      	cbnz	r2, 8000f26 <__aeabi_ldivmod+0x22>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bfbe      	ittt	lt
 8000f0c:	2000      	movlt	r0, #0
 8000f0e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f12:	e006      	blt.n	8000f22 <__aeabi_ldivmod+0x1e>
 8000f14:	bf08      	it	eq
 8000f16:	2800      	cmpeq	r0, #0
 8000f18:	bf1c      	itt	ne
 8000f1a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f22:	f000 b9f5 	b.w	8001310 <__aeabi_idiv0>
 8000f26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f2e:	2900      	cmp	r1, #0
 8000f30:	db09      	blt.n	8000f46 <__aeabi_ldivmod+0x42>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db1a      	blt.n	8000f6c <__aeabi_ldivmod+0x68>
 8000f36:	f000 f883 	bl	8001040 <__udivmoddi4>
 8000f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f42:	b004      	add	sp, #16
 8000f44:	4770      	bx	lr
 8000f46:	4240      	negs	r0, r0
 8000f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db1b      	blt.n	8000f88 <__aeabi_ldivmod+0x84>
 8000f50:	f000 f876 	bl	8001040 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	4252      	negs	r2, r2
 8000f66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6a:	4770      	bx	lr
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	f000 f865 	bl	8001040 <__udivmoddi4>
 8000f76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7e:	b004      	add	sp, #16
 8000f80:	4240      	negs	r0, r0
 8000f82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f86:	4770      	bx	lr
 8000f88:	4252      	negs	r2, r2
 8000f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8e:	f000 f857 	bl	8001040 <__udivmoddi4>
 8000f92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9a:	b004      	add	sp, #16
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_uldivmod>:
 8000fa4:	b953      	cbnz	r3, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa6:	b94a      	cbnz	r2, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	bf08      	it	eq
 8000fac:	2800      	cmpeq	r0, #0
 8000fae:	bf1c      	itt	ne
 8000fb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fb8:	f000 b9aa 	b.w	8001310 <__aeabi_idiv0>
 8000fbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fc4:	f000 f83c 	bl	8001040 <__udivmoddi4>
 8000fc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd0:	b004      	add	sp, #16
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_d2lz>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	f7ff fdad 	bl	8000b3c <__aeabi_dcmplt>
 8000fe2:	b928      	cbnz	r0, 8000ff0 <__aeabi_d2lz+0x1c>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fec:	f000 b80a 	b.w	8001004 <__aeabi_d2ulz>
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ff6:	f000 f805 	bl	8001004 <__aeabi_d2ulz>
 8000ffa:	4240      	negs	r0, r0
 8000ffc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop

08001004 <__aeabi_d2ulz>:
 8001004:	b5d0      	push	{r4, r6, r7, lr}
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__aeabi_d2ulz+0x34>)
 8001008:	2200      	movs	r2, #0
 800100a:	4606      	mov	r6, r0
 800100c:	460f      	mov	r7, r1
 800100e:	f7ff fb23 	bl	8000658 <__aeabi_dmul>
 8001012:	f7ff fdf9 	bl	8000c08 <__aeabi_d2uiz>
 8001016:	4604      	mov	r4, r0
 8001018:	f7ff faa4 	bl	8000564 <__aeabi_ui2d>
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <__aeabi_d2ulz+0x38>)
 800101e:	2200      	movs	r2, #0
 8001020:	f7ff fb1a 	bl	8000658 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4630      	mov	r0, r6
 800102a:	4639      	mov	r1, r7
 800102c:	f7ff f95c 	bl	80002e8 <__aeabi_dsub>
 8001030:	f7ff fdea 	bl	8000c08 <__aeabi_d2uiz>
 8001034:	4621      	mov	r1, r4
 8001036:	bdd0      	pop	{r4, r6, r7, pc}
 8001038:	3df00000 	.word	0x3df00000
 800103c:	41f00000 	.word	0x41f00000

08001040 <__udivmoddi4>:
 8001040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	9d08      	ldr	r5, [sp, #32]
 8001046:	4604      	mov	r4, r0
 8001048:	468e      	mov	lr, r1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d14d      	bne.n	80010ea <__udivmoddi4+0xaa>
 800104e:	428a      	cmp	r2, r1
 8001050:	4694      	mov	ip, r2
 8001052:	d969      	bls.n	8001128 <__udivmoddi4+0xe8>
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	b152      	cbz	r2, 8001070 <__udivmoddi4+0x30>
 800105a:	fa01 f302 	lsl.w	r3, r1, r2
 800105e:	f1c2 0120 	rsb	r1, r2, #32
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	fa0c fc02 	lsl.w	ip, ip, r2
 800106a:	ea41 0e03 	orr.w	lr, r1, r3
 800106e:	4094      	lsls	r4, r2
 8001070:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001074:	0c21      	lsrs	r1, r4, #16
 8001076:	fbbe f6f8 	udiv	r6, lr, r8
 800107a:	fa1f f78c 	uxth.w	r7, ip
 800107e:	fb08 e316 	mls	r3, r8, r6, lr
 8001082:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001086:	fb06 f107 	mul.w	r1, r6, r7
 800108a:	4299      	cmp	r1, r3
 800108c:	d90a      	bls.n	80010a4 <__udivmoddi4+0x64>
 800108e:	eb1c 0303 	adds.w	r3, ip, r3
 8001092:	f106 30ff 	add.w	r0, r6, #4294967295
 8001096:	f080 811f 	bcs.w	80012d8 <__udivmoddi4+0x298>
 800109a:	4299      	cmp	r1, r3
 800109c:	f240 811c 	bls.w	80012d8 <__udivmoddi4+0x298>
 80010a0:	3e02      	subs	r6, #2
 80010a2:	4463      	add	r3, ip
 80010a4:	1a5b      	subs	r3, r3, r1
 80010a6:	b2a4      	uxth	r4, r4
 80010a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ac:	fb08 3310 	mls	r3, r8, r0, r3
 80010b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b4:	fb00 f707 	mul.w	r7, r0, r7
 80010b8:	42a7      	cmp	r7, r4
 80010ba:	d90a      	bls.n	80010d2 <__udivmoddi4+0x92>
 80010bc:	eb1c 0404 	adds.w	r4, ip, r4
 80010c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c4:	f080 810a 	bcs.w	80012dc <__udivmoddi4+0x29c>
 80010c8:	42a7      	cmp	r7, r4
 80010ca:	f240 8107 	bls.w	80012dc <__udivmoddi4+0x29c>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010d6:	1be4      	subs	r4, r4, r7
 80010d8:	2600      	movs	r6, #0
 80010da:	b11d      	cbz	r5, 80010e4 <__udivmoddi4+0xa4>
 80010dc:	40d4      	lsrs	r4, r2
 80010de:	2300      	movs	r3, #0
 80010e0:	e9c5 4300 	strd	r4, r3, [r5]
 80010e4:	4631      	mov	r1, r6
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d909      	bls.n	8001102 <__udivmoddi4+0xc2>
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	f000 80ef 	beq.w	80012d2 <__udivmoddi4+0x292>
 80010f4:	2600      	movs	r6, #0
 80010f6:	e9c5 0100 	strd	r0, r1, [r5]
 80010fa:	4630      	mov	r0, r6
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	fab3 f683 	clz	r6, r3
 8001106:	2e00      	cmp	r6, #0
 8001108:	d14a      	bne.n	80011a0 <__udivmoddi4+0x160>
 800110a:	428b      	cmp	r3, r1
 800110c:	d302      	bcc.n	8001114 <__udivmoddi4+0xd4>
 800110e:	4282      	cmp	r2, r0
 8001110:	f200 80f9 	bhi.w	8001306 <__udivmoddi4+0x2c6>
 8001114:	1a84      	subs	r4, r0, r2
 8001116:	eb61 0303 	sbc.w	r3, r1, r3
 800111a:	2001      	movs	r0, #1
 800111c:	469e      	mov	lr, r3
 800111e:	2d00      	cmp	r5, #0
 8001120:	d0e0      	beq.n	80010e4 <__udivmoddi4+0xa4>
 8001122:	e9c5 4e00 	strd	r4, lr, [r5]
 8001126:	e7dd      	b.n	80010e4 <__udivmoddi4+0xa4>
 8001128:	b902      	cbnz	r2, 800112c <__udivmoddi4+0xec>
 800112a:	deff      	udf	#255	; 0xff
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	2a00      	cmp	r2, #0
 8001132:	f040 8092 	bne.w	800125a <__udivmoddi4+0x21a>
 8001136:	eba1 010c 	sub.w	r1, r1, ip
 800113a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800113e:	fa1f fe8c 	uxth.w	lr, ip
 8001142:	2601      	movs	r6, #1
 8001144:	0c20      	lsrs	r0, r4, #16
 8001146:	fbb1 f3f7 	udiv	r3, r1, r7
 800114a:	fb07 1113 	mls	r1, r7, r3, r1
 800114e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001152:	fb0e f003 	mul.w	r0, lr, r3
 8001156:	4288      	cmp	r0, r1
 8001158:	d908      	bls.n	800116c <__udivmoddi4+0x12c>
 800115a:	eb1c 0101 	adds.w	r1, ip, r1
 800115e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x12a>
 8001164:	4288      	cmp	r0, r1
 8001166:	f200 80cb 	bhi.w	8001300 <__udivmoddi4+0x2c0>
 800116a:	4643      	mov	r3, r8
 800116c:	1a09      	subs	r1, r1, r0
 800116e:	b2a4      	uxth	r4, r4
 8001170:	fbb1 f0f7 	udiv	r0, r1, r7
 8001174:	fb07 1110 	mls	r1, r7, r0, r1
 8001178:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800117c:	fb0e fe00 	mul.w	lr, lr, r0
 8001180:	45a6      	cmp	lr, r4
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x156>
 8001184:	eb1c 0404 	adds.w	r4, ip, r4
 8001188:	f100 31ff 	add.w	r1, r0, #4294967295
 800118c:	d202      	bcs.n	8001194 <__udivmoddi4+0x154>
 800118e:	45a6      	cmp	lr, r4
 8001190:	f200 80bb 	bhi.w	800130a <__udivmoddi4+0x2ca>
 8001194:	4608      	mov	r0, r1
 8001196:	eba4 040e 	sub.w	r4, r4, lr
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	e79c      	b.n	80010da <__udivmoddi4+0x9a>
 80011a0:	f1c6 0720 	rsb	r7, r6, #32
 80011a4:	40b3      	lsls	r3, r6
 80011a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ae:	fa20 f407 	lsr.w	r4, r0, r7
 80011b2:	fa01 f306 	lsl.w	r3, r1, r6
 80011b6:	431c      	orrs	r4, r3
 80011b8:	40f9      	lsrs	r1, r7
 80011ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011be:	fa00 f306 	lsl.w	r3, r0, r6
 80011c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011c6:	0c20      	lsrs	r0, r4, #16
 80011c8:	fa1f fe8c 	uxth.w	lr, ip
 80011cc:	fb09 1118 	mls	r1, r9, r8, r1
 80011d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011d4:	fb08 f00e 	mul.w	r0, r8, lr
 80011d8:	4288      	cmp	r0, r1
 80011da:	fa02 f206 	lsl.w	r2, r2, r6
 80011de:	d90b      	bls.n	80011f8 <__udivmoddi4+0x1b8>
 80011e0:	eb1c 0101 	adds.w	r1, ip, r1
 80011e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011e8:	f080 8088 	bcs.w	80012fc <__udivmoddi4+0x2bc>
 80011ec:	4288      	cmp	r0, r1
 80011ee:	f240 8085 	bls.w	80012fc <__udivmoddi4+0x2bc>
 80011f2:	f1a8 0802 	sub.w	r8, r8, #2
 80011f6:	4461      	add	r1, ip
 80011f8:	1a09      	subs	r1, r1, r0
 80011fa:	b2a4      	uxth	r4, r4
 80011fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001200:	fb09 1110 	mls	r1, r9, r0, r1
 8001204:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001208:	fb00 fe0e 	mul.w	lr, r0, lr
 800120c:	458e      	cmp	lr, r1
 800120e:	d908      	bls.n	8001222 <__udivmoddi4+0x1e2>
 8001210:	eb1c 0101 	adds.w	r1, ip, r1
 8001214:	f100 34ff 	add.w	r4, r0, #4294967295
 8001218:	d26c      	bcs.n	80012f4 <__udivmoddi4+0x2b4>
 800121a:	458e      	cmp	lr, r1
 800121c:	d96a      	bls.n	80012f4 <__udivmoddi4+0x2b4>
 800121e:	3802      	subs	r0, #2
 8001220:	4461      	add	r1, ip
 8001222:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001226:	fba0 9402 	umull	r9, r4, r0, r2
 800122a:	eba1 010e 	sub.w	r1, r1, lr
 800122e:	42a1      	cmp	r1, r4
 8001230:	46c8      	mov	r8, r9
 8001232:	46a6      	mov	lr, r4
 8001234:	d356      	bcc.n	80012e4 <__udivmoddi4+0x2a4>
 8001236:	d053      	beq.n	80012e0 <__udivmoddi4+0x2a0>
 8001238:	b15d      	cbz	r5, 8001252 <__udivmoddi4+0x212>
 800123a:	ebb3 0208 	subs.w	r2, r3, r8
 800123e:	eb61 010e 	sbc.w	r1, r1, lr
 8001242:	fa01 f707 	lsl.w	r7, r1, r7
 8001246:	fa22 f306 	lsr.w	r3, r2, r6
 800124a:	40f1      	lsrs	r1, r6
 800124c:	431f      	orrs	r7, r3
 800124e:	e9c5 7100 	strd	r7, r1, [r5]
 8001252:	2600      	movs	r6, #0
 8001254:	4631      	mov	r1, r6
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125a:	f1c2 0320 	rsb	r3, r2, #32
 800125e:	40d8      	lsrs	r0, r3
 8001260:	fa0c fc02 	lsl.w	ip, ip, r2
 8001264:	fa21 f303 	lsr.w	r3, r1, r3
 8001268:	4091      	lsls	r1, r2
 800126a:	4301      	orrs	r1, r0
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb3 f0f7 	udiv	r0, r3, r7
 8001278:	fb07 3610 	mls	r6, r7, r0, r3
 800127c:	0c0b      	lsrs	r3, r1, #16
 800127e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001282:	fb00 f60e 	mul.w	r6, r0, lr
 8001286:	429e      	cmp	r6, r3
 8001288:	fa04 f402 	lsl.w	r4, r4, r2
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x260>
 800128e:	eb1c 0303 	adds.w	r3, ip, r3
 8001292:	f100 38ff 	add.w	r8, r0, #4294967295
 8001296:	d22f      	bcs.n	80012f8 <__udivmoddi4+0x2b8>
 8001298:	429e      	cmp	r6, r3
 800129a:	d92d      	bls.n	80012f8 <__udivmoddi4+0x2b8>
 800129c:	3802      	subs	r0, #2
 800129e:	4463      	add	r3, ip
 80012a0:	1b9b      	subs	r3, r3, r6
 80012a2:	b289      	uxth	r1, r1
 80012a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80012a8:	fb07 3316 	mls	r3, r7, r6, r3
 80012ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80012b0:	fb06 f30e 	mul.w	r3, r6, lr
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d908      	bls.n	80012ca <__udivmoddi4+0x28a>
 80012b8:	eb1c 0101 	adds.w	r1, ip, r1
 80012bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80012c0:	d216      	bcs.n	80012f0 <__udivmoddi4+0x2b0>
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d914      	bls.n	80012f0 <__udivmoddi4+0x2b0>
 80012c6:	3e02      	subs	r6, #2
 80012c8:	4461      	add	r1, ip
 80012ca:	1ac9      	subs	r1, r1, r3
 80012cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012d0:	e738      	b.n	8001144 <__udivmoddi4+0x104>
 80012d2:	462e      	mov	r6, r5
 80012d4:	4628      	mov	r0, r5
 80012d6:	e705      	b.n	80010e4 <__udivmoddi4+0xa4>
 80012d8:	4606      	mov	r6, r0
 80012da:	e6e3      	b.n	80010a4 <__udivmoddi4+0x64>
 80012dc:	4618      	mov	r0, r3
 80012de:	e6f8      	b.n	80010d2 <__udivmoddi4+0x92>
 80012e0:	454b      	cmp	r3, r9
 80012e2:	d2a9      	bcs.n	8001238 <__udivmoddi4+0x1f8>
 80012e4:	ebb9 0802 	subs.w	r8, r9, r2
 80012e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7a3      	b.n	8001238 <__udivmoddi4+0x1f8>
 80012f0:	4646      	mov	r6, r8
 80012f2:	e7ea      	b.n	80012ca <__udivmoddi4+0x28a>
 80012f4:	4620      	mov	r0, r4
 80012f6:	e794      	b.n	8001222 <__udivmoddi4+0x1e2>
 80012f8:	4640      	mov	r0, r8
 80012fa:	e7d1      	b.n	80012a0 <__udivmoddi4+0x260>
 80012fc:	46d0      	mov	r8, sl
 80012fe:	e77b      	b.n	80011f8 <__udivmoddi4+0x1b8>
 8001300:	3b02      	subs	r3, #2
 8001302:	4461      	add	r1, ip
 8001304:	e732      	b.n	800116c <__udivmoddi4+0x12c>
 8001306:	4630      	mov	r0, r6
 8001308:	e709      	b.n	800111e <__udivmoddi4+0xde>
 800130a:	4464      	add	r4, ip
 800130c:	3802      	subs	r0, #2
 800130e:	e742      	b.n	8001196 <__udivmoddi4+0x156>

08001310 <__aeabi_idiv0>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	0000      	movs	r0, r0
	...

08001318 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001322:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001348 <sqr+0x30>
 8001326:	ed97 0b00 	vldr	d0, [r7]
 800132a:	f00f fb5d 	bl	80109e8 <pow>
 800132e:	eeb0 7a40 	vmov.f32	s14, s0
 8001332:	eef0 7a60 	vmov.f32	s15, s1
}
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40000000 	.word	0x40000000

08001350 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(BME_280_t* BME)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	//velocity measuiring
	currentTime_1 = (float)HAL_GetTick() / 1000.0;
 8001358:	f004 fe88 	bl	800606c <HAL_GetTick>
 800135c:	ee07 0a90 	vmov	s15, r0
 8001360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f91e 	bl	80005a8 <__aeabi_f2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <algorithm_1_update+0x218>)
 8001372:	f7ff fa9b 	bl	80008ac <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc63 	bl	8000c48 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a79      	ldr	r2, [pc, #484]	; (800156c <algorithm_1_update+0x21c>)
 8001386:	6013      	str	r3, [r2, #0]
  if(fabs(currentTime_1 - lastTime_1) > 0.1)
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <algorithm_1_update+0x21c>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <algorithm_1_update+0x220>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	eef0 7ae7 	vabs.f32	s15, s15
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f902 	bl	80005a8 <__aeabi_f2d>
 80013a4:	a36e      	add	r3, pc, #440	; (adr r3, 8001560 <algorithm_1_update+0x210>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff fbe5 	bl	8000b78 <__aeabi_dcmpgt>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <algorithm_1_update+0xa6>
  {
	  float currentAltitude = BME->altitude;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	60fb      	str	r3, [r7, #12]
	  BME->velocity = (currentAltitude - lastAltitude_1) / (currentTime_1 - lastTime_1);
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <algorithm_1_update+0x224>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <algorithm_1_update+0x21c>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <algorithm_1_update+0x220>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  lastAltitude_1 = currentAltitude;
 80013e2:	4a64      	ldr	r2, [pc, #400]	; (8001574 <algorithm_1_update+0x224>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6013      	str	r3, [r2, #0]
	  lastTime_1 = currentTime_1;
 80013e8:	4b60      	ldr	r3, [pc, #384]	; (800156c <algorithm_1_update+0x21c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <algorithm_1_update+0x220>)
 80013ee:	6013      	str	r3, [r2, #0]
	  isUpdated_1 = 1;
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <algorithm_1_update+0x228>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
  }

  if(isUpdated_1)
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <algorithm_1_update+0x228>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80ab 	beq.w	8001556 <algorithm_1_update+0x206>
  {
	isUpdated_1 = 0;
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <algorithm_1_update+0x228>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]

	//rising detection
	if(BME->velocity > RISING_VELOCITY_TRESHOLD && isRising == 0)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800140c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd09      	ble.n	800142e <algorithm_1_update+0xde>
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <algorithm_1_update+0x22c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <algorithm_1_update+0xde>
	{
	  risingCounter++;
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <algorithm_1_update+0x230>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a55      	ldr	r2, [pc, #340]	; (8001580 <algorithm_1_update+0x230>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e002      	b.n	8001434 <algorithm_1_update+0xe4>
	}
	else
	{
	  risingCounter = 0;
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <algorithm_1_update+0x230>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	}

	if(risingCounter == 1 && isRising == 0 && isFalling == 0 )
 8001434:	4b52      	ldr	r3, [pc, #328]	; (8001580 <algorithm_1_update+0x230>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11c      	bne.n	8001476 <algorithm_1_update+0x126>
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <algorithm_1_update+0x22c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d118      	bne.n	8001476 <algorithm_1_update+0x126>
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <algorithm_1_update+0x234>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d114      	bne.n	8001476 <algorithm_1_update+0x126>
	{
	  isRising = 1;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <algorithm_1_update+0x22c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
	  algorithm_1_start_time_u32 = HAL_GetTick();
 8001452:	f004 fe0b 	bl	800606c <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <algorithm_1_update+0x238>)
 800145a:	6013      	str	r3, [r2, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <algorithm_1_update+0x23c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <algorithm_1_update+0x23c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2a02      	cmp	r2, #2
 8001468:	bf38      	it	cc
 800146a:	2202      	movcc	r2, #2
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001470:	4847      	ldr	r0, [pc, #284]	; (8001590 <algorithm_1_update+0x240>)
 8001472:	f002 f979 	bl	8003768 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BME->velocity < FALLING_VELOCITY_TRESHOLD && HAL_GetTick() - algorithm_1_start_time_u32 > ALGORITHM_1_LOCKOUT_TIME)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800147c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d50f      	bpl.n	80014aa <algorithm_1_update+0x15a>
 800148a:	f004 fdef 	bl	800606c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <algorithm_1_update+0x238>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800149a:	4293      	cmp	r3, r2
 800149c:	d905      	bls.n	80014aa <algorithm_1_update+0x15a>
	{
	  fallingCounter++;
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <algorithm_1_update+0x244>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <algorithm_1_update+0x244>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e002      	b.n	80014b0 <algorithm_1_update+0x160>
	}
	else
	{
	  fallingCounter = 0;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <algorithm_1_update+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	}

	if(fallingCounter == 1 && isRising == 1 && isFalling == 0 && BME->altitude > ARMING_ALTITUDE_1)
 80014b0:	4b38      	ldr	r3, [pc, #224]	; (8001594 <algorithm_1_update+0x244>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d120      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <algorithm_1_update+0x22c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d11c      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <algorithm_1_update+0x234>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d118      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001598 <algorithm_1_update+0x248>
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	dd0e      	ble.n	80014fa <algorithm_1_update+0x1aa>
	{
	  isFalling = 1;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <algorithm_1_update+0x234>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <algorithm_1_update+0x23c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <algorithm_1_update+0x23c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2a04      	cmp	r2, #4
 80014ee:	bf38      	it	cc
 80014f0:	2204      	movcc	r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
	  deploy_p_1();
 80014f6:	f003 f931 	bl	800475c <deploy_p_1>

	//Second Parachute
	static int second_p_counter_1 = 0;
	static uint8_t is_second_p_OK_1 = 0;

	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling == 1 && is_second_p_OK_1 == 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001500:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800159c <algorithm_1_update+0x24c>
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d50d      	bpl.n	800152a <algorithm_1_update+0x1da>
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <algorithm_1_update+0x234>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d109      	bne.n	800152a <algorithm_1_update+0x1da>
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <algorithm_1_update+0x250>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <algorithm_1_update+0x1da>
	{
		second_p_counter_1++;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <algorithm_1_update+0x254>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <algorithm_1_update+0x254>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e002      	b.n	8001530 <algorithm_1_update+0x1e0>
	}
	else{
		second_p_counter_1 = 0;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <algorithm_1_update+0x254>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	}
	if(second_p_counter_1 == 10)
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <algorithm_1_update+0x254>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b0a      	cmp	r3, #10
 8001536:	d10e      	bne.n	8001556 <algorithm_1_update+0x206>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <algorithm_1_update+0x23c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <algorithm_1_update+0x23c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2a05      	cmp	r2, #5
 8001544:	bf38      	it	cc
 8001546:	2205      	movcc	r2, #5
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
		is_second_p_OK_1 = 1;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <algorithm_1_update+0x250>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 8001552:	f003 f913 	bl	800477c <deploy_p_2>
	}
  }
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	9999999a 	.word	0x9999999a
 8001564:	3fb99999 	.word	0x3fb99999
 8001568:	408f4000 	.word	0x408f4000
 800156c:	20000204 	.word	0x20000204
 8001570:	20000208 	.word	0x20000208
 8001574:	2000020c 	.word	0x2000020c
 8001578:	20000228 	.word	0x20000228
 800157c:	20000226 	.word	0x20000226
 8001580:	20000210 	.word	0x20000210
 8001584:	20000224 	.word	0x20000224
 8001588:	20000220 	.word	0x20000220
 800158c:	20000004 	.word	0x20000004
 8001590:	200007b4 	.word	0x200007b4
 8001594:	20000214 	.word	0x20000214
 8001598:	447a0000 	.word	0x447a0000
 800159c:	440e8000 	.word	0x440e8000
 80015a0:	2000022a 	.word	0x2000022a
 80015a4:	2000022c 	.word	0x2000022c

080015a8 <algorithm_2_update>:

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI, float angle)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	ed87 0a01 	vstr	s0, [r7, #4]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fff3 	bl	80005a8 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b10 	vmov	d0, r2, r3
 80015ca:	f7ff fea5 	bl	8001318 <sqr>
 80015ce:	ec55 4b10 	vmov	r4, r5, d0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffe5 	bl	80005a8 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b10 	vmov	d0, r2, r3
 80015e6:	f7ff fe97 	bl	8001318 <sqr>
 80015ea:	ec53 2b10 	vmov	r2, r3, d0
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fe7b 	bl	80002ec <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	461d      	mov	r5, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffcf 	bl	80005a8 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b10 	vmov	d0, r2, r3
 8001612:	f7ff fe81 	bl	8001318 <sqr>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fe65 	bl	80002ec <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb0d 	bl	8000c48 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	ee00 3a10 	vmov	s0, r3
 8001634:	f00f fa74 	bl	8010b20 <sqrtf>
 8001638:	eef0 7a40 	vmov.f32	s15, s0
 800163c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800189c <algorithm_2_update+0x2f4>
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	dd34      	ble.n	80016b4 <algorithm_2_update+0x10c>
 800164a:	4b95      	ldr	r3, [pc, #596]	; (80018a0 <algorithm_2_update+0x2f8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d130      	bne.n	80016b4 <algorithm_2_update+0x10c>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001658:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80018a4 <algorithm_2_update+0x2fc>
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d516      	bpl.n	8001694 <algorithm_2_update+0xec>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800166c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80018a8 <algorithm_2_update+0x300>
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd0c      	ble.n	8001694 <algorithm_2_update+0xec>
			saved_datas->base_altitude = BME->altitude + saved_datas->base_altitude;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001680:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <algorithm_2_update+0x304>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <algorithm_2_update+0x304>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		isRising_2 = 1;
 8001694:	4b82      	ldr	r3, [pc, #520]	; (80018a0 <algorithm_2_update+0x2f8>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800169a:	4b84      	ldr	r3, [pc, #528]	; (80018ac <algorithm_2_update+0x304>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b82      	ldr	r3, [pc, #520]	; (80018ac <algorithm_2_update+0x304>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2a02      	cmp	r2, #2
 80016a6:	bf38      	it	cc
 80016a8:	2202      	movcc	r2, #2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016ae:	4880      	ldr	r0, [pc, #512]	; (80018b0 <algorithm_2_update+0x308>)
 80016b0:	f002 f85a 	bl	8003768 <ext_pin_open>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 101)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80016ba:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80018b4 <algorithm_2_update+0x30c>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d50c      	bpl.n	80016e2 <algorithm_2_update+0x13a>
 80016c8:	4b75      	ldr	r3, [pc, #468]	; (80018a0 <algorithm_2_update+0x2f8>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <algorithm_2_update+0x13a>
 80016d0:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <algorithm_2_update+0x310>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	dc04      	bgt.n	80016e2 <algorithm_2_update+0x13a>
	{
		burnout_counter++;
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <algorithm_2_update+0x310>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <algorithm_2_update+0x310>)
 80016e0:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <algorithm_2_update+0x310>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d10c      	bne.n	8001704 <algorithm_2_update+0x15c>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : saved_datas->r_status;
 80016ea:	4b70      	ldr	r3, [pc, #448]	; (80018ac <algorithm_2_update+0x304>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <algorithm_2_update+0x304>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2a03      	cmp	r2, #3
 80016f6:	bf38      	it	cc
 80016f8:	2203      	movcc	r2, #3
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016fe:	486c      	ldr	r0, [pc, #432]	; (80018b0 <algorithm_2_update+0x308>)
 8001700:	f002 f832 	bl	8003768 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && BME->altitude > ARMING_ALTITUDE_2)
 8001704:	edd7 7a01 	vldr	s15, [r7, #4]
 8001708:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80018bc <algorithm_2_update+0x314>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	dd20      	ble.n	8001758 <algorithm_2_update+0x1b0>
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <algorithm_2_update+0x2f8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d11c      	bne.n	8001758 <algorithm_2_update+0x1b0>
 800171e:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <algorithm_2_update+0x318>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <algorithm_2_update+0x1b0>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800172c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	dd0e      	ble.n	8001758 <algorithm_2_update+0x1b0>
	{
		isFalling_2 = 1;
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <algorithm_2_update+0x318>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <algorithm_2_update+0x304>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <algorithm_2_update+0x304>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2a04      	cmp	r2, #4
 800174c:	bf38      	it	cc
 800174e:	2204      	movcc	r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 8001754:	f003 f802 	bl	800475c <deploy_p_1>
	}

	if(is_BME_ok == 1)
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <algorithm_2_update+0x31c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d12d      	bne.n	80017bc <algorithm_2_update+0x214>
	{
		//Second Parachute
		if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001766:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80018c8 <algorithm_2_update+0x320>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d50d      	bpl.n	8001790 <algorithm_2_update+0x1e8>
 8001774:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <algorithm_2_update+0x318>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d109      	bne.n	8001790 <algorithm_2_update+0x1e8>
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <algorithm_2_update+0x324>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <algorithm_2_update+0x1e8>
		{
			secondP_counter++;
 8001784:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <algorithm_2_update+0x328>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <algorithm_2_update+0x328>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e002      	b.n	8001796 <algorithm_2_update+0x1ee>
		}
		else{
			secondP_counter = 0;
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <algorithm_2_update+0x328>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
		}
		if(secondP_counter == 10)
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <algorithm_2_update+0x328>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d10e      	bne.n	80017bc <algorithm_2_update+0x214>
		{
			saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <algorithm_2_update+0x304>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <algorithm_2_update+0x304>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2a05      	cmp	r2, #5
 80017aa:	bf38      	it	cc
 80017ac:	2205      	movcc	r2, #5
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
			is_secondP_OK = 1;
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <algorithm_2_update+0x324>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
			deploy_p_2();
 80017b8:	f002 ffe0 	bl	800477c <deploy_p_2>
		}
	}
	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80017c2:	eeb0 0a47 	vmov.f32	s0, s14
 80017c6:	eef0 0a67 	vmov.f32	s1, s15
 80017ca:	f7ff fda5 	bl	8001318 <sqr>
 80017ce:	ec55 4b10 	vmov	r4, r5, d0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80017d8:	eeb0 0a47 	vmov.f32	s0, s14
 80017dc:	eef0 0a67 	vmov.f32	s1, s15
 80017e0:	f7ff fd9a 	bl	8001318 <sqr>
 80017e4:	ec53 2b10 	vmov	r2, r3, d0
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fd7e 	bl	80002ec <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	f7ff fd87 	bl	8001318 <sqr>
 800180a:	ec53 2b10 	vmov	r2, r3, d0
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd6b 	bl	80002ec <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	f00f f94f 	bl	8010ac8 <sqrt>
 800182a:	ec51 0b10 	vmov	r0, r1, d0
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <algorithm_2_update+0x32c>)
 8001834:	f7ff f982 	bl	8000b3c <__aeabi_dcmplt>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d011      	beq.n	8001862 <algorithm_2_update+0x2ba>
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <algorithm_2_update+0x318>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10d      	bne.n	8001862 <algorithm_2_update+0x2ba>
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <algorithm_2_update+0x324>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d109      	bne.n	8001862 <algorithm_2_update+0x2ba>
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <algorithm_2_update+0x330>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <algorithm_2_update+0x2ba>
	{
			TD_counter++;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <algorithm_2_update+0x334>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <algorithm_2_update+0x334>)
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e002      	b.n	8001868 <algorithm_2_update+0x2c0>
	}
	else{
		TD_counter = 0;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <algorithm_2_update+0x334>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <algorithm_2_update+0x334>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001870:	dd0f      	ble.n	8001892 <algorithm_2_update+0x2ea>
	{
		is_TD = 1;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <algorithm_2_update+0x330>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : saved_datas->r_status;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <algorithm_2_update+0x304>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <algorithm_2_update+0x304>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2a06      	cmp	r2, #6
 8001884:	bf38      	it	cc
 8001886:	2206      	movcc	r2, #6
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <algorithm_2_update+0x308>)
 800188e:	f001 ff6b 	bl	8003768 <ext_pin_open>
	}
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	453b8000 	.word	0x453b8000
 80018a0:	20000227 	.word	0x20000227
 80018a4:	43480000 	.word	0x43480000
 80018a8:	c3480000 	.word	0xc3480000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	200007b4 	.word	0x200007b4
 80018b4:	c4fa0000 	.word	0xc4fa0000
 80018b8:	20000230 	.word	0x20000230
 80018bc:	42a00000 	.word	0x42a00000
 80018c0:	20000225 	.word	0x20000225
 80018c4:	200007fc 	.word	0x200007fc
 80018c8:	440e8000 	.word	0x440e8000
 80018cc:	20000229 	.word	0x20000229
 80018d0:	2000021c 	.word	0x2000021c
 80018d4:	40240000 	.word	0x40240000
 80018d8:	20000234 	.word	0x20000234
 80018dc:	20000218 	.word	0x20000218

080018e0 <bme280_getVals>:
float array[filterSize];

int currentIndex = 0;

static void bme280_getVals()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <bme280_getVals+0xac>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	22f3      	movs	r2, #243	; 0xf3
 80018fa:	21ec      	movs	r1, #236	; 0xec
 80018fc:	f006 faea 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <bme280_getVals+0xb0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 800190e:	793b      	ldrb	r3, [r7, #4]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d035      	beq.n	8001984 <bme280_getVals+0xa4>
	{
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <bme280_getVals+0xac>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	2314      	movs	r3, #20
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2308      	movs	r3, #8
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	22f7      	movs	r2, #247	; 0xf7
 800192c:	21ec      	movs	r1, #236	; 0xec
 800192e:	f006 fad1 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
		if (retVal == HAL_OK){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d123      	bne.n	8001984 <bme280_getVals+0xa4>
			BME->isUpdated = 1;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <bme280_getVals+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	031a      	lsls	r2, r3, #12
 800194a:	7a3b      	ldrb	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4313      	orrs	r3, r2
 8001950:	7a7a      	ldrb	r2, [r7, #9]
 8001952:	0912      	lsrs	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	431a      	orrs	r2, r3
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <bme280_getVals+0xb0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
			BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	031a      	lsls	r2, r3, #12
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4313      	orrs	r3, r2
 8001968:	79ba      	ldrb	r2, [r7, #6]
 800196a:	0912      	lsrs	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	431a      	orrs	r2, r3
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <bme280_getVals+0xb0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	609a      	str	r2, [r3, #8]
			BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 8001976:	7abb      	ldrb	r3, [r7, #10]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	7afa      	ldrb	r2, [r7, #11]
 800197c:	431a      	orrs	r2, r3
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <bme280_getVals+0xb0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60da      	str	r2, [r3, #12]
		}
	}
	UNUSED(retVal);
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000238 	.word	0x20000238
 8001990:	2000023c 	.word	0x2000023c
 8001994:	00000000 	.word	0x00000000

08001998 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <bme280_get_altitude+0xd0>)
 80019a0:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <bme280_get_altitude+0xd4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019b2:	ee16 0a90 	vmov	r0, s13
 80019b6:	f7fe fdf7 	bl	80005a8 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001a58 <bme280_get_altitude+0xc0>
 80019c2:	ec43 2b10 	vmov	d0, r2, r3
 80019c6:	f00f f80f 	bl	80109e8 <pow>
 80019ca:	ec53 2b10 	vmov	r2, r3, d0
 80019ce:	f04f 0000 	mov.w	r0, #0
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <bme280_get_altitude+0xd8>)
 80019d4:	f7fe fc88 	bl	80002e8 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	a31f      	add	r3, pc, #124	; (adr r3, 8001a60 <bme280_get_altitude+0xc8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe37 	bl	8000658 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f929 	bl	8000c48 <__aeabi_d2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - saved_datas->base_altitude;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <bme280_get_altitude+0xdc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	ed97 7a00 	vldr	s14, [r7]
 8001a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dc00      	bgt.n	8001a2e <bme280_get_altitude+0x96>
	{
		saved_datas->max_altitude = BME->altitude;
	}
}
 8001a2c:	e00e      	b.n	8001a4c <bme280_get_altitude+0xb4>
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d005      	beq.n	8001a4c <bme280_get_altitude+0xb4>
		saved_datas->max_altitude = BME->altitude;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	ccd9456c 	.word	0xccd9456c
 8001a5c:	3fc85b95 	.word	0x3fc85b95
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40e5a540 	.word	0x40e5a540
 8001a68:	447d5000 	.word	0x447d5000
 8001a6c:	2000023c 	.word	0x2000023c
 8001a70:	3ff00000 	.word	0x3ff00000
 8001a74:	20000004 	.word	0x20000004

08001a78 <bme280_config>:
void bme280_config()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af04      	add	r7, sp, #16
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	saved_datas->base_altitude = 0.0;
 8001a7e:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <bme280_config+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(I2C_);
 8001a88:	4b98      	ldr	r3, [pc, #608]	; (8001cec <bme280_config+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 f8f7 	bl	8007c80 <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f004 faf6 	bl	8006084 <HAL_Delay>
	HAL_I2C_Init(I2C_);
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <bme280_config+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f005 ffab 	bl	80079f8 <HAL_I2C_Init>
	HAL_Delay(5);
 8001aa2:	2005      	movs	r0, #5
 8001aa4:	f004 faee 	bl	8006084 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 8001aa8:	4b90      	ldr	r3, [pc, #576]	; (8001cec <bme280_config+0x274>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	23c8      	movs	r3, #200	; 0xc8
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	2319      	movs	r3, #25
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2288      	movs	r2, #136	; 0x88
 8001abc:	21ec      	movs	r1, #236	; 0xec
 8001abe:	f006 fa09 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001ac6:	793b      	ldrb	r3, [r7, #4]
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b87      	ldr	r3, [pc, #540]	; (8001cf0 <bme280_config+0x278>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	b292      	uxth	r2, r2
 8001adc:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	b219      	sxth	r1, r3
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <bme280_config+0x278>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	b212      	sxth	r2, r2
 8001af2:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001af4:	7a3b      	ldrb	r3, [r7, #8]
 8001af6:	b219      	sxth	r1, r3
 8001af8:	7a7b      	ldrb	r3, [r7, #9]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <bme280_config+0x278>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	b212      	sxth	r2, r2
 8001b08:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001b0a:	7abb      	ldrb	r3, [r7, #10]
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <bme280_config+0x278>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	b219      	sxth	r1, r3
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <bme280_config+0x278>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	b212      	sxth	r2, r2
 8001b36:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	b219      	sxth	r1, r3
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <bme280_config+0x278>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	b212      	sxth	r2, r2
 8001b4c:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001b4e:	7c3b      	ldrb	r3, [r7, #16]
 8001b50:	b219      	sxth	r1, r3
 8001b52:	7c7b      	ldrb	r3, [r7, #17]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <bme280_config+0x278>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	b212      	sxth	r2, r2
 8001b62:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001b64:	7cbb      	ldrb	r3, [r7, #18]
 8001b66:	b219      	sxth	r1, r3
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <bme280_config+0x278>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	b212      	sxth	r2, r2
 8001b78:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001b7a:	7d3b      	ldrb	r3, [r7, #20]
 8001b7c:	b219      	sxth	r1, r3
 8001b7e:	7d7b      	ldrb	r3, [r7, #21]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <bme280_config+0x278>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	b212      	sxth	r2, r2
 8001b8e:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001b90:	7dbb      	ldrb	r3, [r7, #22]
 8001b92:	b219      	sxth	r1, r3
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <bme280_config+0x278>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	b212      	sxth	r2, r2
 8001ba4:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001ba6:	7e3b      	ldrb	r3, [r7, #24]
 8001ba8:	b219      	sxth	r1, r3
 8001baa:	7e7b      	ldrb	r3, [r7, #25]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <bme280_config+0x278>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	b212      	sxth	r2, r2
 8001bba:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001bbc:	7ebb      	ldrb	r3, [r7, #26]
 8001bbe:	b219      	sxth	r1, r3
 8001bc0:	7efb      	ldrb	r3, [r7, #27]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <bme280_config+0x278>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	b212      	sxth	r2, r2
 8001bd0:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <bme280_config+0x278>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	7f3a      	ldrb	r2, [r7, #28]
 8001bda:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <bme280_config+0x274>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2307      	movs	r3, #7
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	22e1      	movs	r2, #225	; 0xe1
 8001bf0:	21ec      	movs	r1, #236	; 0xec
 8001bf2:	f006 f96f 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001bfa:	793b      	ldrb	r3, [r7, #4]
 8001bfc:	b219      	sxth	r1, r3
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <bme280_config+0x278>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	b212      	sxth	r2, r2
 8001c0e:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <bme280_config+0x278>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	79ba      	ldrb	r2, [r7, #6]
 8001c18:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001c1a:	7a3b      	ldrb	r3, [r7, #8]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b219      	sxth	r1, r3
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <bme280_config+0x278>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	b212      	sxth	r2, r2
 8001c34:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001c36:	7a3b      	ldrb	r3, [r7, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b219      	sxth	r1, r3
 8001c3e:	7a7b      	ldrb	r3, [r7, #9]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <bme280_config+0x278>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	b212      	sxth	r2, r2
 8001c4e:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 8001c50:	7aba      	ldrb	r2, [r7, #10]
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <bme280_config+0x278>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b252      	sxtb	r2, r2
 8001c5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_output_speed;
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <bme280_config+0x278>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	7c5b      	ldrb	r3, [r3, #17]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <bme280_config+0x274>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	2332      	movs	r3, #50	; 0x32
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	1cfb      	adds	r3, r7, #3
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	22f2      	movs	r2, #242	; 0xf2
 8001c80:	21ec      	movs	r1, #236	; 0xec
 8001c82:	f006 f82d 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8001c86:	4603      	mov	r3, r0
 8001c88:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);																		//Mode has been chosed.
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <bme280_config+0x278>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	7c1b      	ldrb	r3, [r3, #16]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <bme280_config+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	7c5b      	ldrb	r3, [r3, #17]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <bme280_config+0x278>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	7c5b      	ldrb	r3, [r3, #17]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <bme280_config+0x274>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	2332      	movs	r3, #50	; 0x32
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	1cfb      	adds	r3, r7, #3
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	22f4      	movs	r2, #244	; 0xf4
 8001cd0:	21ec      	movs	r1, #236	; 0xec
 8001cd2:	f006 f805 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	70fb      	strb	r3, [r7, #3]
	data_ctrl = (BME->device_config.bme280_filter << 2);
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <bme280_config+0x278>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	7c9b      	ldrb	r3, [r3, #18]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e005      	b.n	8001cf4 <bme280_config+0x27c>
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000238 	.word	0x20000238
 8001cf0:	2000023c 	.word	0x2000023c
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <bme280_config+0x308>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2332      	movs	r3, #50	; 0x32
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	1cfb      	adds	r3, r7, #3
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	22f5      	movs	r2, #245	; 0xf5
 8001d0e:	21ec      	movs	r1, #236	; 0xec
 8001d10:	f005 ffe6 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8001d14:	4603      	mov	r3, r0
 8001d16:	77fb      	strb	r3, [r7, #31]

	float base = 0.0;
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_Delay(100);
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f004 f9b0 	bl	8006084 <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	e011      	b.n	8001d4e <bme280_config+0x2d6>
	{
	  bme280_update();
 8001d2a:	f000 f865 	bl	8001df8 <bme280_update>
	  base +=  BME->altitude;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <bme280_config+0x30c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  HAL_Delay(30);
 8001d42:	201e      	movs	r0, #30
 8001d44:	f004 f99e 	bl	8006084 <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b1d      	cmp	r3, #29
 8001d52:	ddea      	ble.n	8001d2a <bme280_config+0x2b2>
	}
	saved_datas->base_altitude = (base / 30.0);
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <bme280_config+0x310>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d5c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	bme280_update();
 8001d68:	f000 f846 	bl	8001df8 <bme280_update>
	saved_datas->max_altitude = 0.0;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <bme280_config+0x310>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c

	UNUSED(retVal);
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000238 	.word	0x20000238
 8001d84:	2000023c 	.word	0x2000023c
 8001d88:	20000004 	.word	0x20000004

08001d8c <bme280_init>:

void bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af04      	add	r7, sp, #16
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	BME = BME_sensor;
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <bme280_init+0x5c>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <bme280_init+0x60>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6013      	str	r3, [r2, #0]
	BME->parameters = (BME_parameters_t *) &saved_datas->bme_params;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <bme280_init+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <bme280_init+0x5c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3214      	adds	r2, #20
 8001dac:	601a      	str	r2, [r3, #0]
	uint8_t buf[1];
	HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <bme280_init+0x60>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	2332      	movs	r3, #50	; 0x32
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	22d0      	movs	r2, #208	; 0xd0
 8001dc4:	21ec      	movs	r1, #236	; 0xec
 8001dc6:	f006 f885 	bl	8007ed4 <HAL_I2C_Mem_Read>
	if(*buf == 0x60)
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	2b60      	cmp	r3, #96	; 0x60
 8001dce:	d103      	bne.n	8001dd8 <bme280_init+0x4c>
		is_BME_ok = 1;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <bme280_init+0x68>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
	else
		is_BME_ok = 0;


}
 8001dd6:	e002      	b.n	8001dde <bme280_init+0x52>
		is_BME_ok = 0;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <bme280_init+0x68>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000023c 	.word	0x2000023c
 8001dec:	20000238 	.word	0x20000238
 8001df0:	20000004 	.word	0x20000004
 8001df4:	200007fc 	.word	0x200007fc

08001df8 <bme280_update>:


void bme280_update(){
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b0d2      	sub	sp, #328	; 0x148
 8001dfe:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001e00:	f7ff fd6e 	bl	80018e0 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001e04:	4bd4      	ldr	r3, [pc, #848]	; (8002158 <bme280_update+0x360>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 83bc 	bne.w	800258a <bme280_update+0x792>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001e12:	4bd1      	ldr	r3, [pc, #836]	; (8002158 <bme280_update+0x360>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001e1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e20:	10da      	asrs	r2, r3, #3
 8001e22:	4bcd      	ldr	r3, [pc, #820]	; (8002158 <bme280_update+0x360>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	4bc9      	ldr	r3, [pc, #804]	; (8002158 <bme280_update+0x360>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	12db      	asrs	r3, r3, #11
 8001e40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001e44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e48:	111a      	asrs	r2, r3, #4
 8001e4a:	4bc3      	ldr	r3, [pc, #780]	; (8002158 <bme280_update+0x360>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	1ad1      	subs	r1, r2, r3
 8001e56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e5a:	111a      	asrs	r2, r3, #4
 8001e5c:	4bbe      	ldr	r3, [pc, #760]	; (8002158 <bme280_update+0x360>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	131a      	asrs	r2, r3, #12
 8001e6e:	4bba      	ldr	r3, [pc, #744]	; (8002158 <bme280_update+0x360>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	139b      	asrs	r3, r3, #14
 8001e7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001e82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001e90:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3380      	adds	r3, #128	; 0x80
 8001e9c:	121b      	asrs	r3, r3, #8
 8001e9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eae:	4baa      	ldr	r3, [pc, #680]	; (8002158 <bme280_update+0x360>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800215c <bme280_update+0x364>
 8001eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eba:	edc3 7a05 	vstr	s15, [r3, #20]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001ebe:	4ba6      	ldr	r3, [pc, #664]	; (8002158 <bme280_update+0x360>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec8:	657a      	str	r2, [r7, #84]	; 0x54
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ed6:	17da      	asrs	r2, r3, #31
 8001ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001edc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001ee0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eec:	4613      	mov	r3, r2
 8001eee:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001efc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f04:	fb03 f102 	mul.w	r1, r3, r2
 8001f08:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	18ca      	adds	r2, r1, r3
 8001f16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f1a:	fba3 4503 	umull	r4, r5, r3, r3
 8001f1e:	1953      	adds	r3, r2, r5
 8001f20:	461d      	mov	r5, r3
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <bme280_update+0x360>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	8a1b      	ldrh	r3, [r3, #16]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	17da      	asrs	r2, r3, #31
 8001f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f38:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	fb03 f205 	mul.w	r2, r3, r5
 8001f42:	460b      	mov	r3, r1
 8001f44:	fb04 f303 	mul.w	r3, r4, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	fba4 ab02 	umull	sl, fp, r4, r2
 8001f50:	445b      	add	r3, fp
 8001f52:	469b      	mov	fp, r3
 8001f54:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001f58:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001f5c:	4b7e      	ldr	r3, [pc, #504]	; (8002158 <bme280_update+0x360>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	89db      	ldrh	r3, [r3, #14]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	17da      	asrs	r2, r3, #31
 8001f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f6e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f76:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	fb02 f203 	mul.w	r2, r2, r3
 8001f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f84:	4621      	mov	r1, r4
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	441a      	add	r2, r3
 8001f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f90:	4621      	mov	r1, r4
 8001f92:	fba3 8901 	umull	r8, r9, r3, r1
 8001f96:	eb02 0309 	add.w	r3, r2, r9
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001fa8:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001fac:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001fb0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fb4:	1814      	adds	r4, r2, r0
 8001fb6:	643c      	str	r4, [r7, #64]	; 0x40
 8001fb8:	414b      	adcs	r3, r1
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
 8001fbc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001fc0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <bme280_update+0x360>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	899b      	ldrh	r3, [r3, #12]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	17da      	asrs	r2, r3, #31
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fd6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fe6:	00d9      	lsls	r1, r3, #3
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fee:	1814      	adds	r4, r2, r0
 8001ff0:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ff2:	414b      	adcs	r3, r1
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001ffa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001ffe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002002:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002006:	fb03 f102 	mul.w	r1, r3, r2
 800200a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800200e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	18ca      	adds	r2, r1, r3
 8002018:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800201c:	fba3 1303 	umull	r1, r3, r3, r3
 8002020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002024:	460b      	mov	r3, r1
 8002026:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800202a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <bme280_update+0x360>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	895b      	ldrh	r3, [r3, #10]
 800203c:	b21b      	sxth	r3, r3
 800203e:	b21b      	sxth	r3, r3
 8002040:	17da      	asrs	r2, r3, #31
 8002042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002046:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800204a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800204e:	462b      	mov	r3, r5
 8002050:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002054:	4642      	mov	r2, r8
 8002056:	fb02 f203 	mul.w	r2, r2, r3
 800205a:	464b      	mov	r3, r9
 800205c:	4621      	mov	r1, r4
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	4622      	mov	r2, r4
 8002066:	4641      	mov	r1, r8
 8002068:	fba2 1201 	umull	r1, r2, r2, r1
 800206c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002070:	460a      	mov	r2, r1
 8002072:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002076:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800207a:	4413      	add	r3, r2
 800207c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002080:	f04f 0000 	mov.w	r0, #0
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800208c:	4623      	mov	r3, r4
 800208e:	0a18      	lsrs	r0, r3, #8
 8002090:	462b      	mov	r3, r5
 8002092:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002096:	462b      	mov	r3, r5
 8002098:	1219      	asrs	r1, r3, #8
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <bme280_update+0x360>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	891b      	ldrh	r3, [r3, #8]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	17da      	asrs	r2, r3, #31
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020b8:	464a      	mov	r2, r9
 80020ba:	fb02 f203 	mul.w	r2, r2, r3
 80020be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020c2:	4644      	mov	r4, r8
 80020c4:	fb04 f303 	mul.w	r3, r4, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ce:	4644      	mov	r4, r8
 80020d0:	fba3 4304 	umull	r4, r3, r3, r4
 80020d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020d8:	4623      	mov	r3, r4
 80020da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80020f4:	464c      	mov	r4, r9
 80020f6:	0323      	lsls	r3, r4, #12
 80020f8:	4644      	mov	r4, r8
 80020fa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80020fe:	4644      	mov	r4, r8
 8002100:	0322      	lsls	r2, r4, #12
 8002102:	1884      	adds	r4, r0, r2
 8002104:	633c      	str	r4, [r7, #48]	; 0x30
 8002106:	eb41 0303 	adc.w	r3, r1, r3
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002110:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8002114:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002118:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800211c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002120:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <bme280_update+0x360>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	88db      	ldrh	r3, [r3, #6]
 800212c:	b29b      	uxth	r3, r3
 800212e:	b29b      	uxth	r3, r3
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800213a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800213e:	462b      	mov	r3, r5
 8002140:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002144:	4642      	mov	r2, r8
 8002146:	fb02 f203 	mul.w	r2, r2, r3
 800214a:	464b      	mov	r3, r9
 800214c:	4621      	mov	r1, r4
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	e004      	b.n	8002160 <bme280_update+0x368>
 8002156:	bf00      	nop
 8002158:	2000023c 	.word	0x2000023c
 800215c:	42c80000 	.word	0x42c80000
 8002160:	4622      	mov	r2, r4
 8002162:	4641      	mov	r1, r8
 8002164:	fba2 1201 	umull	r1, r2, r2, r1
 8002168:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800216c:	460a      	mov	r2, r1
 800216e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002172:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002176:	4413      	add	r3, r2
 8002178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002188:	4629      	mov	r1, r5
 800218a:	104a      	asrs	r2, r1, #1
 800218c:	4629      	mov	r1, r5
 800218e:	17cb      	asrs	r3, r1, #31
 8002190:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8002194:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002198:	4313      	orrs	r3, r2
 800219a:	d106      	bne.n	80021aa <bme280_update+0x3b2>
		{
			P = 0;
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 80021a8:	e14b      	b.n	8002442 <bme280_update+0x64a>
		}else
		{
		P = 1048576 - adc_P;
 80021aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021ae:	2100      	movs	r1, #0
 80021b0:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 80021b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80021b6:	eb61 0303 	sbc.w	r3, r1, r3
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021bc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021c0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 80021c4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	f04f 0100 	mov.w	r1, #0
 80021d0:	07d9      	lsls	r1, r3, #31
 80021d2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80021d6:	07d0      	lsls	r0, r2, #31
 80021d8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80021dc:	1a84      	subs	r4, r0, r2
 80021de:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80021e2:	eb61 0303 	sbc.w	r3, r1, r3
 80021e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021ea:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	1891      	adds	r1, r2, r2
 80021f4:	6239      	str	r1, [r7, #32]
 80021f6:	415b      	adcs	r3, r3
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fe:	4621      	mov	r1, r4
 8002200:	1851      	adds	r1, r2, r1
 8002202:	61b9      	str	r1, [r7, #24]
 8002204:	4629      	mov	r1, r5
 8002206:	414b      	adcs	r3, r1
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002216:	4649      	mov	r1, r9
 8002218:	018b      	lsls	r3, r1, #6
 800221a:	4641      	mov	r1, r8
 800221c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002220:	4641      	mov	r1, r8
 8002222:	018a      	lsls	r2, r1, #6
 8002224:	4641      	mov	r1, r8
 8002226:	1889      	adds	r1, r1, r2
 8002228:	6139      	str	r1, [r7, #16]
 800222a:	4649      	mov	r1, r9
 800222c:	eb43 0101 	adc.w	r1, r3, r1
 8002230:	6179      	str	r1, [r7, #20]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800223e:	4649      	mov	r1, r9
 8002240:	008b      	lsls	r3, r1, #2
 8002242:	4641      	mov	r1, r8
 8002244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002248:	4641      	mov	r1, r8
 800224a:	008a      	lsls	r2, r1, #2
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	4603      	mov	r3, r0
 8002252:	4622      	mov	r2, r4
 8002254:	189b      	adds	r3, r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	460b      	mov	r3, r1
 800225a:	462a      	mov	r2, r5
 800225c:	eb42 0303 	adc.w	r3, r2, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800226e:	4649      	mov	r1, r9
 8002270:	008b      	lsls	r3, r1, #2
 8002272:	4641      	mov	r1, r8
 8002274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002278:	4641      	mov	r1, r8
 800227a:	008a      	lsls	r2, r1, #2
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	4603      	mov	r3, r0
 8002282:	4622      	mov	r2, r4
 8002284:	189b      	adds	r3, r3, r2
 8002286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800228a:	462b      	mov	r3, r5
 800228c:	460a      	mov	r2, r1
 800228e:	eb42 0303 	adc.w	r3, r2, r3
 8002292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002296:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800229a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800229e:	f7fe fe31 	bl	8000f04 <__aeabi_ldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 80022aa:	4bbb      	ldr	r3, [pc, #748]	; (8002598 <bme280_update+0x7a0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	8adb      	ldrh	r3, [r3, #22]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	17da      	asrs	r2, r3, #31
 80022b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022bc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0b50      	lsrs	r0, r2, #13
 80022ca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022ce:	1359      	asrs	r1, r3, #13
 80022d0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022d4:	462b      	mov	r3, r5
 80022d6:	fb00 f203 	mul.w	r2, r0, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	fb03 f301 	mul.w	r3, r3, r1
 80022e0:	4413      	add	r3, r2
 80022e2:	4622      	mov	r2, r4
 80022e4:	fba2 1200 	umull	r1, r2, r2, r0
 80022e8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80022ec:	460a      	mov	r2, r1
 80022ee:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80022f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80022f6:	4413      	add	r3, r2
 80022f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022fc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	0b50      	lsrs	r0, r2, #13
 800230a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800230e:	1359      	asrs	r1, r3, #13
 8002310:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002314:	462b      	mov	r3, r5
 8002316:	fb00 f203 	mul.w	r2, r0, r3
 800231a:	4623      	mov	r3, r4
 800231c:	fb03 f301 	mul.w	r3, r3, r1
 8002320:	4413      	add	r3, r2
 8002322:	4622      	mov	r2, r4
 8002324:	fba2 1200 	umull	r1, r2, r2, r0
 8002328:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800232c:	460a      	mov	r2, r1
 800232e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002336:	4413      	add	r3, r2
 8002338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002348:	4621      	mov	r1, r4
 800234a:	0e4a      	lsrs	r2, r1, #25
 800234c:	4629      	mov	r1, r5
 800234e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002352:	4629      	mov	r1, r5
 8002354:	164b      	asrs	r3, r1, #25
 8002356:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800235a:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <bme280_update+0x7a0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	8a9b      	ldrh	r3, [r3, #20]
 8002362:	b21b      	sxth	r3, r3
 8002364:	b21b      	sxth	r3, r3
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	673b      	str	r3, [r7, #112]	; 0x70
 800236a:	677a      	str	r2, [r7, #116]	; 0x74
 800236c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002370:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002374:	462a      	mov	r2, r5
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800237e:	4621      	mov	r1, r4
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800238a:	4621      	mov	r1, r4
 800238c:	fba2 1201 	umull	r1, r2, r2, r1
 8002390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002394:	460a      	mov	r2, r1
 8002396:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800239a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800239e:	4413      	add	r3, r2
 80023a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023b0:	4621      	mov	r1, r4
 80023b2:	0cca      	lsrs	r2, r1, #19
 80023b4:	4629      	mov	r1, r5
 80023b6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80023ba:	4629      	mov	r1, r5
 80023bc:	14cb      	asrs	r3, r1, #19
 80023be:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 80023c2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023ca:	1884      	adds	r4, r0, r2
 80023cc:	66bc      	str	r4, [r7, #104]	; 0x68
 80023ce:	eb41 0303 	adc.w	r3, r1, r3
 80023d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023d4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023d8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80023dc:	4621      	mov	r1, r4
 80023de:	1889      	adds	r1, r1, r2
 80023e0:	6639      	str	r1, [r7, #96]	; 0x60
 80023e2:	4629      	mov	r1, r5
 80023e4:	eb43 0101 	adc.w	r1, r3, r1
 80023e8:	6679      	str	r1, [r7, #100]	; 0x64
 80023ea:	f04f 0000 	mov.w	r0, #0
 80023ee:	f04f 0100 	mov.w	r1, #0
 80023f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023f6:	4623      	mov	r3, r4
 80023f8:	0a18      	lsrs	r0, r3, #8
 80023fa:	462b      	mov	r3, r5
 80023fc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002400:	462b      	mov	r3, r5
 8002402:	1219      	asrs	r1, r3, #8
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <bme280_update+0x7a0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	8a5b      	ldrh	r3, [r3, #18]
 800240c:	b21b      	sxth	r3, r3
 800240e:	b21b      	sxth	r3, r3
 8002410:	17da      	asrs	r2, r3, #31
 8002412:	65bb      	str	r3, [r7, #88]	; 0x58
 8002414:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8002422:	464c      	mov	r4, r9
 8002424:	0123      	lsls	r3, r4, #4
 8002426:	4644      	mov	r4, r8
 8002428:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800242c:	4644      	mov	r4, r8
 800242e:	0122      	lsls	r2, r4, #4
 8002430:	1884      	adds	r4, r0, r2
 8002432:	603c      	str	r4, [r7, #0]
 8002434:	eb41 0303 	adc.w	r3, r1, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800243e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 8002442:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002446:	f7fe fd1f 	bl	8000e88 <__aeabi_l2f>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f8ab 	bl	80005a8 <__aeabi_f2d>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <bme280_update+0x7a4>)
 8002458:	f7fe fa28 	bl	80008ac <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <bme280_update+0x7a8>)
 800246a:	f7fe fa1f 	bl	80008ac <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4949      	ldr	r1, [pc, #292]	; (8002598 <bme280_update+0x7a0>)
 8002474:	680c      	ldr	r4, [r1, #0]
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fbe5 	bl	8000c48 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	61a3      	str	r3, [r4, #24]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 8002482:	4b45      	ldr	r3, [pc, #276]	; (8002598 <bme280_update+0x7a0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 800248c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002490:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002494:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8002498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249c:	039b      	lsls	r3, r3, #14
 800249e:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <bme280_update+0x7a0>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	8bd2      	ldrh	r2, [r2, #30]
 80024a6:	b212      	sxth	r2, r2
 80024a8:	0512      	lsls	r2, r2, #20
 80024aa:	1a9a      	subs	r2, r3, r2
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <bme280_update+0x7a0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	8c1b      	ldrh	r3, [r3, #32]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80024c6:	0bdb      	lsrs	r3, r3, #15
 80024c8:	4a33      	ldr	r2, [pc, #204]	; (8002598 <bme280_update+0x7a0>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80024d2:	b252      	sxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80024da:	fb01 f202 	mul.w	r2, r1, r2
 80024de:	0a92      	lsrs	r2, r2, #10
 80024e0:	492d      	ldr	r1, [pc, #180]	; (8002598 <bme280_update+0x7a0>)
 80024e2:	6809      	ldr	r1, [r1, #0]
 80024e4:	6809      	ldr	r1, [r1, #0]
 80024e6:	7f09      	ldrb	r1, [r1, #28]
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4608      	mov	r0, r1
 80024ec:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80024f0:	fb00 f101 	mul.w	r1, r0, r1
 80024f4:	0ac9      	lsrs	r1, r1, #11
 80024f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80024fa:	fb01 f202 	mul.w	r2, r1, r2
 80024fe:	0a92      	lsrs	r2, r2, #10
 8002500:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002504:	4924      	ldr	r1, [pc, #144]	; (8002598 <bme280_update+0x7a0>)
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	6809      	ldr	r1, [r1, #0]
 800250a:	8b49      	ldrh	r1, [r1, #26]
 800250c:	b209      	sxth	r1, r1
 800250e:	fb01 f202 	mul.w	r2, r1, r2
 8002512:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002516:	0b92      	lsrs	r2, r2, #14
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8002520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002524:	0bdb      	lsrs	r3, r3, #15
 8002526:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800252a:	0bd2      	lsrs	r2, r2, #15
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	09db      	lsrs	r3, r3, #7
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <bme280_update+0x7a0>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	7e12      	ldrb	r2, [r2, #24]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800254c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002550:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002554:	bf28      	it	cs
 8002556:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 800255a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800255e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002562:	0b1b      	lsrs	r3, r3, #12
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <bme280_update+0x7a0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80025a4 <bme280_update+0x7ac>
 8002574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002578:	edc3 7a07 	vstr	s15, [r3, #28]

		//get altitude
		bme280_get_altitude();
 800257c:	f7ff fa0c 	bl	8001998 <bme280_get_altitude>
		BME->isUpdated = 0;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <bme280_update+0x7a0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

}
 800258a:	bf00      	nop
 800258c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	2000023c 	.word	0x2000023c
 800259c:	40700000 	.word	0x40700000
 80025a0:	40590000 	.word	0x40590000
 80025a4:	44800000 	.word	0x44800000

080025a8 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025ae:	2009      	movs	r0, #9
 80025b0:	f004 fab7 	bl	8006b22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025b4:	200a      	movs	r0, #10
 80025b6:	f004 fab4 	bl	8006b22 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80025be:	2301      	movs	r3, #1
 80025c0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80025c2:	4bb7      	ldr	r3, [pc, #732]	; (80028a0 <bmi088_config+0x2f8>)
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	9302      	str	r3, [sp, #8]
 80025ca:	2301      	movs	r3, #1
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	227c      	movs	r2, #124	; 0x7c
 80025d6:	2130      	movs	r1, #48	; 0x30
 80025d8:	f005 fb82 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80025ea:	4bad      	ldr	r3, [pc, #692]	; (80028a0 <bmi088_config+0x2f8>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2301      	movs	r3, #1
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	227d      	movs	r2, #125	; 0x7d
 80025fe:	2130      	movs	r1, #48	; 0x30
 8002600:	f005 fb6e 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	4313      	orrs	r3, r2
 800260c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 800260e:	2014      	movs	r0, #20
 8002610:	f003 fd38 	bl	8006084 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002614:	23b6      	movs	r3, #182	; 0xb6
 8002616:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002618:	4ba1      	ldr	r3, [pc, #644]	; (80028a0 <bmi088_config+0x2f8>)
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	2364      	movs	r3, #100	; 0x64
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	2301      	movs	r3, #1
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	227e      	movs	r2, #126	; 0x7e
 800262c:	2130      	movs	r1, #48	; 0x30
 800262e:	f005 fb57 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4313      	orrs	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <bmi088_config+0xa0>
 8002642:	4b98      	ldr	r3, [pc, #608]	; (80028a4 <bmi088_config+0x2fc>)
 8002644:	2285      	movs	r2, #133	; 0x85
 8002646:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002648:	200a      	movs	r0, #10
 800264a:	f003 fd1b 	bl	8006084 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800264e:	23b0      	movs	r3, #176	; 0xb0
 8002650:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <bmi088_config+0x2f8>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	2364      	movs	r3, #100	; 0x64
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2301      	movs	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2301      	movs	r3, #1
 8002664:	227e      	movs	r2, #126	; 0x7e
 8002666:	2130      	movs	r1, #48	; 0x30
 8002668:	f005 fb3a 	bl	8007ce0 <HAL_I2C_Mem_Write>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4313      	orrs	r3, r2
 8002674:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <bmi088_config+0xda>
 800267c:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <bmi088_config+0x2fc>)
 800267e:	228a      	movs	r2, #138	; 0x8a
 8002680:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002682:	200a      	movs	r0, #10
 8002684:	f003 fcfe 	bl	8006084 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002688:	23b6      	movs	r3, #182	; 0xb6
 800268a:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <bmi088_config+0x2f8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	2301      	movs	r3, #1
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	2214      	movs	r2, #20
 80026a0:	21d0      	movs	r1, #208	; 0xd0
 80026a2:	f005 fb1d 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <bmi088_config+0x114>
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <bmi088_config+0x2fc>)
 80026b8:	228f      	movs	r2, #143	; 0x8f
 80026ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026bc:	200a      	movs	r0, #10
 80026be:	f003 fce1 	bl	8006084 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80026c2:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <bmi088_config+0x300>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	7e5b      	ldrb	r3, [r3, #25]
 80026c8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80026ca:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <bmi088_config+0x2f8>)
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2301      	movs	r3, #1
 80026dc:	220f      	movs	r2, #15
 80026de:	21d0      	movs	r1, #208	; 0xd0
 80026e0:	f005 fafe 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <bmi088_config+0x152>
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <bmi088_config+0x2fc>)
 80026f6:	2295      	movs	r2, #149	; 0x95
 80026f8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80026fa:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <bmi088_config+0x300>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
 8002700:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <bmi088_config+0x2f8>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	2314      	movs	r3, #20
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	2301      	movs	r3, #1
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	2210      	movs	r2, #16
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f005 fae2 	bl	8007ce0 <HAL_I2C_Mem_Write>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4313      	orrs	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <bmi088_config+0x18a>
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <bmi088_config+0x2fc>)
 800272e:	2299      	movs	r2, #153	; 0x99
 8002730:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002732:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <bmi088_config+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	7ddb      	ldrb	r3, [r3, #23]
 8002738:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800273a:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <bmi088_config+0x2f8>)
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	2314      	movs	r3, #20
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	2211      	movs	r2, #17
 800274e:	21d0      	movs	r1, #208	; 0xd0
 8002750:	f005 fac6 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4313      	orrs	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <bmi088_config+0x1c2>
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <bmi088_config+0x2fc>)
 8002766:	229d      	movs	r2, #157	; 0x9d
 8002768:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800276a:	2014      	movs	r0, #20
 800276c:	f003 fc8a 	bl	8006084 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002774:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <bmi088_config+0x2f8>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	2314      	movs	r3, #20
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2301      	movs	r3, #1
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	2215      	movs	r2, #21
 8002788:	21d0      	movs	r1, #208	; 0xd0
 800278a:	f005 faa9 	bl	8007ce0 <HAL_I2C_Mem_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4313      	orrs	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <bmi088_config+0x1fc>
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <bmi088_config+0x2fc>)
 80027a0:	22a3      	movs	r2, #163	; 0xa3
 80027a2:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80027a4:	2301      	movs	r3, #1
 80027a6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <bmi088_config+0x2f8>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	2314      	movs	r3, #20
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	2301      	movs	r3, #1
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	2216      	movs	r2, #22
 80027bc:	21d0      	movs	r1, #208	; 0xd0
 80027be:	f005 fa8f 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <bmi088_config+0x230>
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <bmi088_config+0x2fc>)
 80027d4:	22a7      	movs	r2, #167	; 0xa7
 80027d6:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80027d8:	2301      	movs	r3, #1
 80027da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <bmi088_config+0x2f8>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	2314      	movs	r3, #20
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	2218      	movs	r2, #24
 80027f0:	21d0      	movs	r1, #208	; 0xd0
 80027f2:	f005 fa75 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <bmi088_config+0x264>
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <bmi088_config+0x2fc>)
 8002808:	22ab      	movs	r2, #171	; 0xab
 800280a:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800280c:	2304      	movs	r3, #4
 800280e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <bmi088_config+0x2f8>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	2314      	movs	r3, #20
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2301      	movs	r3, #1
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	227d      	movs	r2, #125	; 0x7d
 8002824:	2130      	movs	r1, #48	; 0x30
 8002826:	f005 fa5b 	bl	8007ce0 <HAL_I2C_Mem_Write>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4313      	orrs	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <bmi088_config+0x298>
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <bmi088_config+0x2fc>)
 800283c:	22b0      	movs	r2, #176	; 0xb0
 800283e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002840:	2008      	movs	r0, #8
 8002842:	f003 fc1f 	bl	8006084 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <bmi088_config+0x300>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	7cdb      	ldrb	r3, [r3, #19]
 800284c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <bmi088_config+0x2f8>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	2314      	movs	r3, #20
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	2301      	movs	r3, #1
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	227c      	movs	r2, #124	; 0x7c
 8002862:	2130      	movs	r1, #48	; 0x30
 8002864:	f005 fa3c 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	4313      	orrs	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <bmi088_config+0x2d6>
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <bmi088_config+0x2fc>)
 800287a:	22b5      	movs	r2, #181	; 0xb5
 800287c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800287e:	2008      	movs	r0, #8
 8002880:	f003 fc00 	bl	8006084 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <bmi088_config+0x300>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	7d5b      	ldrb	r3, [r3, #21]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b25a      	sxtb	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <bmi088_config+0x300>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	7d9b      	ldrb	r3, [r3, #22]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b25b      	sxtb	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	713b      	strb	r3, [r7, #4]
 800289e:	e005      	b.n	80028ac <bmi088_config+0x304>
 80028a0:	20000240 	.word	0x20000240
 80028a4:	2000024c 	.word	0x2000024c
 80028a8:	20000244 	.word	0x20000244
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <bmi088_config+0x3d0>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	2314      	movs	r3, #20
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2301      	movs	r3, #1
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	2130      	movs	r1, #48	; 0x30
 80028c2:	f005 fa0d 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <bmi088_config+0x334>
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <bmi088_config+0x3d4>)
 80028d8:	22ba      	movs	r2, #186	; 0xba
 80028da:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <bmi088_config+0x3d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	7d1b      	ldrb	r3, [r3, #20]
 80028e2:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <bmi088_config+0x3d0>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	2314      	movs	r3, #20
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2301      	movs	r3, #1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	2241      	movs	r2, #65	; 0x41
 80028f8:	2130      	movs	r1, #48	; 0x30
 80028fa:	f005 f9f1 	bl	8007ce0 <HAL_I2C_Mem_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4313      	orrs	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <bmi088_config+0x36c>
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <bmi088_config+0x3d4>)
 8002910:	22be      	movs	r2, #190	; 0xbe
 8002912:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002914:	230a      	movs	r3, #10
 8002916:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <bmi088_config+0x3d0>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	2314      	movs	r3, #20
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2301      	movs	r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	2253      	movs	r2, #83	; 0x53
 800292c:	2130      	movs	r1, #48	; 0x30
 800292e:	f005 f9d7 	bl	8007ce0 <HAL_I2C_Mem_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4313      	orrs	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800293c:	2304      	movs	r3, #4
 800293e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <bmi088_config+0x3d0>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	2314      	movs	r3, #20
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	2258      	movs	r2, #88	; 0x58
 8002954:	2130      	movs	r1, #48	; 0x30
 8002956:	f005 f9c3 	bl	8007ce0 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4313      	orrs	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002964:	2009      	movs	r0, #9
 8002966:	f004 f8dc 	bl	8006b22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800296a:	200a      	movs	r0, #10
 800296c:	f004 f8d9 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000240 	.word	0x20000240
 800297c:	2000024c 	.word	0x2000024c
 8002980:	20000244 	.word	0x20000244

08002984 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af04      	add	r7, sp, #16
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <bmi088_init+0x90>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <bmi088_init+0x94>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <bmi088_init+0x94>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <bmi088_init+0x94>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <bmi088_init+0x98>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <bmi088_init+0x9c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80029b6:	2332      	movs	r3, #50	; 0x32
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2200      	movs	r2, #0
 80029c8:	21d0      	movs	r1, #208	; 0xd0
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f005 fa82 	bl	8007ed4 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80029d0:	7b3b      	ldrb	r3, [r7, #12]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	d103      	bne.n	80029de <bmi088_init+0x5a>
		is_BMI_ok = 1;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <bmi088_init+0xa0>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
		saved_datas->q[1] = 0;
		saved_datas->q[2] = 0;
		saved_datas->q[3] = 0;
	}
}
 80029dc:	e016      	b.n	8002a0c <bmi088_init+0x88>
		is_BMI_ok = 0;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <bmi088_init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <bmi088_init+0xa4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ec:	605a      	str	r2, [r3, #4]
		saved_datas->q[1] = 0;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <bmi088_init+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
		saved_datas->q[2] = 0;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <bmi088_init+0xa4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
		saved_datas->q[3] = 0;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <bmi088_init+0xa4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000240 	.word	0x20000240
 8002a18:	20000244 	.word	0x20000244
 8002a1c:	20000248 	.word	0x20000248
 8002a20:	20000249 	.word	0x20000249
 8002a24:	20000800 	.word	0x20000800
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	00000000 	.word	0x00000000

08002a30 <bmi088_update>:
void bmi088_update()
{
 8002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a34:	b08d      	sub	sp, #52	; 0x34
 8002a36:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <bmi088_update+0x94>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	7c9b      	ldrb	r3, [r3, #18]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 820b 	beq.w	8002e5e <bmi088_update+0x42e>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <bmi088_update+0x98>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <bmi088_update+0x94>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2314      	movs	r3, #20
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2309      	movs	r3, #9
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9200      	str	r2, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2212      	movs	r2, #18
 8002a60:	2130      	movs	r1, #48	; 0x30
 8002a62:	f005 fa37 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8002a66:	4603      	mov	r3, r0
 8002a68:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 83c9 	bne.w	8003204 <bmi088_update+0x7d4>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <bmi088_update+0x98>)
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <bmi088_update+0x94>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3309      	adds	r3, #9
 8002a7c:	2214      	movs	r2, #20
 8002a7e:	9202      	str	r2, [sp, #8]
 8002a80:	2202      	movs	r2, #2
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2301      	movs	r3, #1
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	2130      	movs	r1, #48	; 0x30
 8002a8c:	f005 fa22 	bl	8007ed4 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <bmi088_update+0x94>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a5b      	ldrb	r3, [r3, #9]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <bmi088_update+0x94>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	7a9b      	ldrb	r3, [r3, #10]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 8002ab0:	8bbb      	ldrh	r3, [r7, #28]
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d309      	bcc.n	8002acc <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 8002ab8:	8bbb      	ldrh	r3, [r7, #28]
 8002aba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	837b      	strh	r3, [r7, #26]
 8002ac2:	e029      	b.n	8002b18 <bmi088_update+0xe8>
 8002ac4:	20000244 	.word	0x20000244
 8002ac8:	20000240 	.word	0x20000240
			}
			else{
				Temp_int11 = Temp_uint11;
 8002acc:	8bbb      	ldrh	r3, [r7, #28]
 8002ace:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002ad0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd62 	bl	80005a8 <__aeabi_f2d>
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002aec:	f7fd fdb4 	bl	8000658 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4bc4      	ldr	r3, [pc, #784]	; (8002e10 <bmi088_update+0x3e0>)
 8002afe:	f7fd fbf5 	bl	80002ec <__adddf3>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	49c3      	ldr	r1, [pc, #780]	; (8002e14 <bmi088_update+0x3e4>)
 8002b08:	680e      	ldr	r6, [r1, #0]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f89b 	bl	8000c48 <__aeabi_d2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002b18:	4bbe      	ldr	r3, [pc, #760]	; (8002e14 <bmi088_update+0x3e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	7a1b      	ldrb	r3, [r3, #8]
 8002b1e:	041a      	lsls	r2, r3, #16
 8002b20:	4bbc      	ldr	r3, [pc, #752]	; (8002e14 <bmi088_update+0x3e4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	79db      	ldrb	r3, [r3, #7]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4aba      	ldr	r2, [pc, #744]	; (8002e14 <bmi088_update+0x3e4>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	7992      	ldrb	r2, [r2, #6]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	ee17 0a90 	vmov	r0, s15
 8002b42:	f7fd fd31 	bl	80005a8 <__aeabi_f2d>
 8002b46:	a3ac      	add	r3, pc, #688	; (adr r3, 8002df8 <bmi088_update+0x3c8>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fd84 	bl	8000658 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	a3a9      	add	r3, pc, #676	; (adr r3, 8002e00 <bmi088_update+0x3d0>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd fea5 	bl	80008ac <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	49ab      	ldr	r1, [pc, #684]	; (8002e14 <bmi088_update+0x3e4>)
 8002b68:	680e      	ldr	r6, [r1, #0]
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f86b 	bl	8000c48 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002b78:	4ba6      	ldr	r3, [pc, #664]	; (8002e14 <bmi088_update+0x3e4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	795b      	ldrb	r3, [r3, #5]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	4ba4      	ldr	r3, [pc, #656]	; (8002e14 <bmi088_update+0x3e4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002b8e:	4ba1      	ldr	r3, [pc, #644]	; (8002e14 <bmi088_update+0x3e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	4b9e      	ldr	r3, [pc, #632]	; (8002e14 <bmi088_update+0x3e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	789b      	ldrb	r3, [r3, #2]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002ba4:	4b9b      	ldr	r3, [pc, #620]	; (8002e14 <bmi088_update+0x3e4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	b21a      	sxth	r2, r3
 8002bae:	4b99      	ldr	r3, [pc, #612]	; (8002e14 <bmi088_update+0x3e4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 8002bba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc6:	ee17 0a90 	vmov	r0, s15
 8002bca:	f7fd fced 	bl	80005a8 <__aeabi_f2d>
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <bmi088_update+0x3e8>)
 8002bd4:	f7fd fe6a 	bl	80008ac <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b8d      	ldr	r3, [pc, #564]	; (8002e1c <bmi088_update+0x3ec>)
 8002be6:	f7fd fd37 	bl	8000658 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <bmi088_update+0x3f0>)
 8002bf8:	f7fd fd2e 	bl	8000658 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4692      	mov	sl, r2
 8002c02:	469b      	mov	fp, r3
 8002c04:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <bmi088_update+0x3e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	7d1b      	ldrb	r3, [r3, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fcc6 	bl	80005a8 <__aeabi_f2d>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	ec43 2b11 	vmov	d1, r2, r3
 8002c24:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8002e08 <bmi088_update+0x3d8>
 8002c28:	f00d fede 	bl	80109e8 <pow>
 8002c2c:	ec53 2b10 	vmov	r2, r3, d0
 8002c30:	4650      	mov	r0, sl
 8002c32:	4659      	mov	r1, fp
 8002c34:	f7fd fd10 	bl	8000658 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	4b77      	ldr	r3, [pc, #476]	; (8002e24 <bmi088_update+0x3f4>)
 8002c46:	f7fd fb4f 	bl	80002e8 <__aeabi_dsub>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4971      	ldr	r1, [pc, #452]	; (8002e14 <bmi088_update+0x3e4>)
 8002c50:	680e      	ldr	r6, [r1, #0]
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd fff7 	bl	8000c48 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 8002c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6c:	ee17 0a90 	vmov	r0, s15
 8002c70:	f7fd fc9a 	bl	80005a8 <__aeabi_f2d>
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <bmi088_update+0x3e8>)
 8002c7a:	f7fd fe17 	bl	80008ac <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <bmi088_update+0x3ec>)
 8002c8c:	f7fd fce4 	bl	8000658 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <bmi088_update+0x3f0>)
 8002c9e:	f7fd fcdb 	bl	8000658 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	469b      	mov	fp, r3
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <bmi088_update+0x3e4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	7d1b      	ldrb	r3, [r3, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cba:	ee17 0a90 	vmov	r0, s15
 8002cbe:	f7fd fc73 	bl	80005a8 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	ec43 2b11 	vmov	d1, r2, r3
 8002cca:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8002e08 <bmi088_update+0x3d8>
 8002cce:	f00d fe8b 	bl	80109e8 <pow>
 8002cd2:	ec53 2b10 	vmov	r2, r3, d0
 8002cd6:	4650      	mov	r0, sl
 8002cd8:	4659      	mov	r1, fp
 8002cda:	f7fd fcbd 	bl	8000658 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <bmi088_update+0x3f8>)
 8002cec:	f7fd fafe 	bl	80002ec <__adddf3>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4947      	ldr	r1, [pc, #284]	; (8002e14 <bmi088_update+0x3e4>)
 8002cf6:	680e      	ldr	r6, [r1, #0]
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd ffa4 	bl	8000c48 <__aeabi_d2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 8002d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d12:	ee17 0a90 	vmov	r0, s15
 8002d16:	f7fd fc47 	bl	80005a8 <__aeabi_f2d>
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <bmi088_update+0x3e8>)
 8002d20:	f7fd fdc4 	bl	80008ac <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <bmi088_update+0x3ec>)
 8002d32:	f7fd fc91 	bl	8000658 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <bmi088_update+0x3f0>)
 8002d44:	f7fd fc88 	bl	8000658 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4692      	mov	sl, r2
 8002d4e:	469b      	mov	fp, r3
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <bmi088_update+0x3e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	7d1b      	ldrb	r3, [r3, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d60:	ee17 0a90 	vmov	r0, s15
 8002d64:	f7fd fc20 	bl	80005a8 <__aeabi_f2d>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	ec43 2b11 	vmov	d1, r2, r3
 8002d70:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8002e08 <bmi088_update+0x3d8>
 8002d74:	f00d fe38 	bl	80109e8 <pow>
 8002d78:	ec53 2b10 	vmov	r2, r3, d0
 8002d7c:	4650      	mov	r0, sl
 8002d7e:	4659      	mov	r1, fp
 8002d80:	f7fd fc6a 	bl	8000658 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <bmi088_update+0x3f4>)
 8002d92:	f7fd faab 	bl	80002ec <__adddf3>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	491e      	ldr	r1, [pc, #120]	; (8002e14 <bmi088_update+0x3e4>)
 8002d9c:	680e      	ldr	r6, [r1, #0]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd ff51 	bl	8000c48 <__aeabi_d2f>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

			if(isStarded)
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <bmi088_update+0x3fc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03f      	beq.n	8002e34 <bmi088_update+0x404>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <bmi088_update+0x3e4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <bmi088_update+0x3e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	d502      	bpl.n	8002dd8 <bmi088_update+0x3a8>
 8002dd2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002e30 <bmi088_update+0x400>
 8002dd6:	e009      	b.n	8002dec <bmi088_update+0x3bc>
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <bmi088_update+0x3e4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <bmi088_update+0x3e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <bmi088_update+0x3e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8002df4:	e024      	b.n	8002e40 <bmi088_update+0x410>
 8002df6:	bf00      	nop
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	40438800 	.word	0x40438800
 8002e00:	00000000 	.word	0x00000000
 8002e04:	412e8480 	.word	0x412e8480
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40000000 	.word	0x40000000
 8002e10:	40370000 	.word	0x40370000
 8002e14:	20000244 	.word	0x20000244
 8002e18:	40e00000 	.word	0x40e00000
 8002e1c:	408f4000 	.word	0x408f4000
 8002e20:	3ff80000 	.word	0x3ff80000
 8002e24:	40100000 	.word	0x40100000
 8002e28:	402e0000 	.word	0x402e0000
 8002e2c:	20000249 	.word	0x20000249
 8002e30:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 8002e34:	4bb6      	ldr	r3, [pc, #728]	; (8003110 <bmi088_update+0x6e0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4bb4      	ldr	r3, [pc, #720]	; (8003110 <bmi088_update+0x6e0>)
 8002e3e:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002e40:	4bb4      	ldr	r3, [pc, #720]	; (8003114 <bmi088_update+0x6e4>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4bb3      	ldr	r3, [pc, #716]	; (8003114 <bmi088_update+0x6e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4


			BMI->rawDatas.isAccelUpdated = 0;
 8002e50:	4bb0      	ldr	r3, [pc, #704]	; (8003114 <bmi088_update+0x6e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 8002e58:	4baf      	ldr	r3, [pc, #700]	; (8003118 <bmi088_update+0x6e8>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002e5e:	4bad      	ldr	r3, [pc, #692]	; (8003114 <bmi088_update+0x6e4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	7c5b      	ldrb	r3, [r3, #17]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 81d0 	beq.w	800320a <bmi088_update+0x7da>
 8002e6a:	4bab      	ldr	r3, [pc, #684]	; (8003118 <bmi088_update+0x6e8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 81cb 	beq.w	800320a <bmi088_update+0x7da>
		{
			if(isStarded){
 8002e74:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <bmi088_update+0x6e0>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 81bb 	beq.w	80031f4 <bmi088_update+0x7c4>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 8002e7e:	4ba7      	ldr	r3, [pc, #668]	; (800311c <bmi088_update+0x6ec>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	4ba4      	ldr	r3, [pc, #656]	; (8003114 <bmi088_update+0x6e4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330b      	adds	r3, #11
 8002e88:	220a      	movs	r2, #10
 8002e8a:	9202      	str	r2, [sp, #8]
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	2202      	movs	r2, #2
 8002e96:	21d0      	movs	r1, #208	; 0xd0
 8002e98:	f005 f81c 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 81b0 	bne.w	8003208 <bmi088_update+0x7d8>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002ea8:	4b9a      	ldr	r3, [pc, #616]	; (8003114 <bmi088_update+0x6e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	7c1b      	ldrb	r3, [r3, #16]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	b21a      	sxth	r2, r3
 8002eb2:	4b98      	ldr	r3, [pc, #608]	; (8003114 <bmi088_update+0x6e4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	7bdb      	ldrb	r3, [r3, #15]
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002ebe:	4b95      	ldr	r3, [pc, #596]	; (8003114 <bmi088_update+0x6e4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	7b9b      	ldrb	r3, [r3, #14]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <bmi088_update+0x6e4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	7b5b      	ldrb	r3, [r3, #13]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <bmi088_update+0x6e4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	7b1b      	ldrb	r3, [r3, #12]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <bmi088_update+0x6e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	7adb      	ldrb	r3, [r3, #11]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[0]);
 8002eea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb48 	bl	8000584 <__aeabi_i2d>
 8002ef4:	a384      	add	r3, pc, #528	; (adr r3, 8003108 <bmi088_update+0x6d8>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fcd7 	bl	80008ac <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4692      	mov	sl, r2
 8002f04:	469b      	mov	fp, r3
 8002f06:	4b83      	ldr	r3, [pc, #524]	; (8003114 <bmi088_update+0x6e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	7e5b      	ldrb	r3, [r3, #25]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f12:	4113      	asrs	r3, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fb35 	bl	8000584 <__aeabi_i2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4650      	mov	r0, sl
 8002f20:	4659      	mov	r1, fp
 8002f22:	f7fd fb99 	bl	8000658 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <bmi088_update+0x6f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f36:	4e77      	ldr	r6, [pc, #476]	; (8003114 <bmi088_update+0x6e4>)
 8002f38:	6836      	ldr	r6, [r6, #0]
 8002f3a:	f7fd f9d5 	bl	80002e8 <__aeabi_dsub>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[1]);
 8002f46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fb1a 	bl	8000584 <__aeabi_i2d>
 8002f50:	a36d      	add	r3, pc, #436	; (adr r3, 8003108 <bmi088_update+0x6d8>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd fca9 	bl	80008ac <__aeabi_ddiv>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4692      	mov	sl, r2
 8002f60:	469b      	mov	fp, r3
 8002f62:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <bmi088_update+0x6e4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	7e5b      	ldrb	r3, [r3, #25]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f6e:	4113      	asrs	r3, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fb07 	bl	8000584 <__aeabi_i2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4650      	mov	r0, sl
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	f7fd fb6b 	bl	8000658 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <bmi088_update+0x6f0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f92:	4e60      	ldr	r6, [pc, #384]	; (8003114 <bmi088_update+0x6e4>)
 8002f94:	6836      	ldr	r6, [r6, #0]
 8002f96:	f7fd f9a7 	bl	80002e8 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[2]);
 8002fa2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd faec 	bl	8000584 <__aeabi_i2d>
 8002fac:	a356      	add	r3, pc, #344	; (adr r3, 8003108 <bmi088_update+0x6d8>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fc7b 	bl	80008ac <__aeabi_ddiv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4692      	mov	sl, r2
 8002fbc:	469b      	mov	fp, r3
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <bmi088_update+0x6e4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	7e5b      	ldrb	r3, [r3, #25]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fca:	4113      	asrs	r3, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fad9 	bl	8000584 <__aeabi_i2d>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4650      	mov	r0, sl
 8002fd8:	4659      	mov	r1, fp
 8002fda:	f7fd fb3d 	bl	8000658 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <bmi088_update+0x6f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fee:	4e49      	ldr	r6, [pc, #292]	; (8003114 <bmi088_update+0x6e4>)
 8002ff0:	6836      	ldr	r6, [r6, #0]
 8002ff2:	f7fd f979 	bl	80002e8 <__aeabi_dsub>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002ffe:	4b45      	ldr	r3, [pc, #276]	; (8003114 <bmi088_update+0x6e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd face 	bl	80005a8 <__aeabi_f2d>
 800300c:	e9c7 0100 	strd	r0, r1, [r7]
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <bmi088_update+0x6e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8003018:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <bmi088_update+0x6e4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fac1 	bl	80005a8 <__aeabi_f2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4650      	mov	r0, sl
 800302c:	4659      	mov	r1, fp
 800302e:	f7fd fb13 	bl	8000658 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800303a:	f7fd f957 	bl	80002ec <__adddf3>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4934      	ldr	r1, [pc, #208]	; (8003114 <bmi088_update+0x6e4>)
 8003044:	680e      	ldr	r6, [r1, #0]
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fdfd 	bl	8000c48 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8003054:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <bmi088_update+0x6e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd faa3 	bl	80005a8 <__aeabi_f2d>
 8003062:	e9c7 0100 	strd	r0, r1, [r7]
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <bmi088_update+0x6e4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <bmi088_update+0x6e4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa96 	bl	80005a8 <__aeabi_f2d>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4650      	mov	r0, sl
 8003082:	4659      	mov	r1, fp
 8003084:	f7fd fae8 	bl	8000658 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003090:	f7fd f92c 	bl	80002ec <__adddf3>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	491e      	ldr	r1, [pc, #120]	; (8003114 <bmi088_update+0x6e4>)
 800309a:	680e      	ldr	r6, [r1, #0]
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdd2 	bl	8000c48 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <bmi088_update+0x6e4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa78 	bl	80005a8 <__aeabi_f2d>
 80030b8:	e9c7 0100 	strd	r0, r1, [r7]
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <bmi088_update+0x6e4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <bmi088_update+0x6e4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fa6b 	bl	80005a8 <__aeabi_f2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4650      	mov	r0, sl
 80030d8:	4659      	mov	r1, fp
 80030da:	f7fd fabd 	bl	8000658 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e6:	f7fd f901 	bl	80002ec <__adddf3>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4909      	ldr	r1, [pc, #36]	; (8003114 <bmi088_update+0x6e4>)
 80030f0:	680e      	ldr	r6, [r1, #0]
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fda7 	bl	8000c48 <__aeabi_d2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 8003100:	e010      	b.n	8003124 <bmi088_update+0x6f4>
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
 8003108:	00000000 	.word	0x00000000
 800310c:	40dfffc0 	.word	0x40dfffc0
 8003110:	20000249 	.word	0x20000249
 8003114:	20000244 	.word	0x20000244
 8003118:	20000248 	.word	0x20000248
 800311c:	20000240 	.word	0x20000240
 8003120:	20000004 	.word	0x20000004


				//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
				//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <bmi088_update+0x7f0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800312c:	4690      	mov	r8, r2
 800312e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003132:	a339      	add	r3, pc, #228	; (adr r3, 8003218 <bmi088_update+0x7e8>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	4640      	mov	r0, r8
 800313a:	4649      	mov	r1, r9
 800313c:	f7fd fa8c 	bl	8000658 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	4b35      	ldr	r3, [pc, #212]	; (8003224 <bmi088_update+0x7f4>)
 800314e:	f7fd fbad 	bl	80008ac <__aeabi_ddiv>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fd75 	bl	8000c48 <__aeabi_d2f>
 800315e:	4606      	mov	r6, r0
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <bmi088_update+0x7f0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003168:	a32b      	add	r3, pc, #172	; (adr r3, 8003218 <bmi088_update+0x7e8>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fa73 	bl	8000658 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <bmi088_update+0x7f4>)
 8003180:	f7fd fb94 	bl	80008ac <__aeabi_ddiv>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f7fd fd5c 	bl	8000c48 <__aeabi_d2f>
 8003190:	4680      	mov	r8, r0
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <bmi088_update+0x7f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800319a:	4614      	mov	r4, r2
 800319c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80031a0:	a31d      	add	r3, pc, #116	; (adr r3, 8003218 <bmi088_update+0x7e8>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	4620      	mov	r0, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	f7fd fa55 	bl	8000658 <__aeabi_dmul>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <bmi088_update+0x7f4>)
 80031bc:	f7fd fb76 	bl	80008ac <__aeabi_ddiv>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f7fd fd3e 	bl	8000c48 <__aeabi_d2f>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <bmi088_update+0x7f0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80031d6:	eef0 1a67 	vmov.f32	s3, s15
 80031da:	ee01 2a10 	vmov	s2, r2
 80031de:	ee00 8a90 	vmov	s1, r8
 80031e2:	ee00 6a10 	vmov	s0, r6
 80031e6:	f001 fb09 	bl	80047fc <updateQuaternion>
				quaternionToEuler();
 80031ea:	f001 fc55 	bl	8004a98 <quaternionToEuler>

				is_gyro_offset = 1;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <bmi088_update+0x7f8>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <bmi088_update+0x7f0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <bmi088_update+0x7fc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e002      	b.n	800320a <bmi088_update+0x7da>
				return;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <bmi088_update+0x7da>
					return;
 8003208:	bf00      	nop
		}


}
 800320a:	3724      	adds	r7, #36	; 0x24
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	f3af 8000 	nop.w
 8003218:	54442d18 	.word	0x54442d18
 800321c:	400921fb 	.word	0x400921fb
 8003220:	20000244 	.word	0x20000244
 8003224:	40668000 	.word	0x40668000
 8003228:	2000024a 	.word	0x2000024a
 800322c:	20000248 	.word	0x20000248

08003230 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <bmi088_getAccelDatas_INT+0x18>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	749a      	strb	r2, [r3, #18]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000244 	.word	0x20000244

0800324c <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <bmi088_getGyroDatas_INT+0x18>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	745a      	strb	r2, [r3, #17]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000244 	.word	0x20000244

08003268 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 800326c:	f7ff fbe0 	bl	8002a30 <bmi088_update>
		if(is_gyro_offset == 1)
 8003270:	4b3e      	ldr	r3, [pc, #248]	; (800336c <getOffset+0x104>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d1f9      	bne.n	800326c <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8003278:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <getOffset+0x108>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003280:	da32      	bge.n	80032e8 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <getOffset+0x10c>)
 8003284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003288:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <getOffset+0x110>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003290:	f7fd f82c 	bl	80002ec <__adddf3>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4936      	ldr	r1, [pc, #216]	; (8003374 <getOffset+0x10c>)
 800329a:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 800329e:	4b35      	ldr	r3, [pc, #212]	; (8003374 <getOffset+0x10c>)
 80032a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032a4:	4b34      	ldr	r3, [pc, #208]	; (8003378 <getOffset+0x110>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80032ac:	f7fd f81e 	bl	80002ec <__adddf3>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	492f      	ldr	r1, [pc, #188]	; (8003374 <getOffset+0x10c>)
 80032b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <getOffset+0x10c>)
 80032bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032c0:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <getOffset+0x110>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80032c8:	f7fd f810 	bl	80002ec <__adddf3>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4928      	ldr	r1, [pc, #160]	; (8003374 <getOffset+0x10c>)
 80032d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <getOffset+0x108>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <getOffset+0x108>)
 80032de:	6013      	str	r3, [r2, #0]
					 saved_datas->offset_vals[2] = g[0][2];
					 quaternionSet_zero();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <getOffset+0x104>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e7c1      	b.n	800326c <getOffset+0x4>
					 g[0][0] /= 1000.0;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <getOffset+0x10c>)
 80032ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <getOffset+0x114>)
 80032f4:	f7fd fada 	bl	80008ac <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	491d      	ldr	r1, [pc, #116]	; (8003374 <getOffset+0x10c>)
 80032fe:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <getOffset+0x10c>)
 8003304:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <getOffset+0x114>)
 800330e:	f7fd facd 	bl	80008ac <__aeabi_ddiv>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4917      	ldr	r1, [pc, #92]	; (8003374 <getOffset+0x10c>)
 8003318:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <getOffset+0x10c>)
 800331e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <getOffset+0x114>)
 8003328:	f7fd fac0 	bl	80008ac <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4910      	ldr	r1, [pc, #64]	; (8003374 <getOffset+0x10c>)
 8003332:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 saved_datas->offset_vals[0] = g[0][0];
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <getOffset+0x118>)
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <getOffset+0x10c>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					 saved_datas->offset_vals[1] = g[0][1];
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <getOffset+0x118>)
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <getOffset+0x10c>)
 800334a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800334e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					 saved_datas->offset_vals[2] = g[0][2];
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <getOffset+0x118>)
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <getOffset+0x10c>)
 8003358:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800335c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					 quaternionSet_zero();
 8003360:	f001 fe84 	bl	800506c <quaternionSet_zero>
					 break;
 8003364:	bf00      	nop
		}

	}
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000024a 	.word	0x2000024a
 8003370:	20000280 	.word	0x20000280
 8003374:	20000250 	.word	0x20000250
 8003378:	20000244 	.word	0x20000244
 800337c:	408f4000 	.word	0x408f4000
 8003380:	20000004 	.word	0x20000004

08003384 <calculateCRC>:
extern backup_sram_datas_s *saved_datas;

union DataPack veriler;

static uint8_t calculateCRC()
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
	int check_sum = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800338e:	2301      	movs	r3, #1
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	e00a      	b.n	80033aa <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <calculateCRC+0x48>)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b3c      	cmp	r3, #60	; 0x3c
 80033ae:	d9f1      	bls.n	8003394 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	425a      	negs	r2, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	bf58      	it	pl
 80033ba:	4253      	negpl	r3, r2
 80033bc:	b2db      	uxtb	r3, r3
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000284 	.word	0x20000284

080033d0 <sendRF>:

static void sendRF()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 80033d4:	4806      	ldr	r0, [pc, #24]	; (80033f0 <sendRF+0x20>)
 80033d6:	f003 ff4d 	bl	8007274 <HAL_DMA_GetState>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d004      	beq.n	80033ea <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.dataYapi));
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <sendRF+0x24>)
 80033e4:	4804      	ldr	r0, [pc, #16]	; (80033f8 <sendRF+0x28>)
 80033e6:	f006 ff97 	bl	800a318 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200004a0 	.word	0x200004a0
 80033f4:	20000284 	.word	0x20000284
 80033f8:	200003d4 	.word	0x200003d4

080033fc <sendPC>:

static void sendPC()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 8003400:	4806      	ldr	r0, [pc, #24]	; (800341c <sendPC+0x20>)
 8003402:	f003 ff37 	bl	8007274 <HAL_DMA_GetState>
 8003406:	4603      	mov	r3, r0
 8003408:	2b02      	cmp	r3, #2
 800340a:	d004      	beq.n	8003416 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 800340c:	2240      	movs	r2, #64	; 0x40
 800340e:	4904      	ldr	r1, [pc, #16]	; (8003420 <sendPC+0x24>)
 8003410:	4804      	ldr	r0, [pc, #16]	; (8003424 <sendPC+0x28>)
 8003412:	f006 ff81 	bl	800a318 <HAL_UART_Transmit_DMA>
	}
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000560 	.word	0x20000560
 8003420:	20000284 	.word	0x20000284
 8003424:	20000418 	.word	0x20000418

08003428 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6178      	str	r0, [r7, #20]
 8003430:	6139      	str	r1, [r7, #16]
 8003432:	60fa      	str	r2, [r7, #12]
 8003434:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <packDatas+0x1dc>)
 8003438:	22ff      	movs	r2, #255	; 0xff
 800343a:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	edd3 7a03 	vldr	s15, [r3, #12]
 800344a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800344e:	ee17 3a90 	vmov	r3, s15
 8003452:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4a6c      	ldr	r2, [pc, #432]	; (8003608 <packDatas+0x1e0>)
 8003458:	fb82 1203 	smull	r1, r2, r2, r3
 800345c:	1151      	asrs	r1, r2, #5
 800345e:	17da      	asrs	r2, r3, #31
 8003460:	1a8a      	subs	r2, r1, r2
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	fb01 f202 	mul.w	r2, r1, r2
 8003468:	1a9a      	subs	r2, r3, r2
 800346a:	4613      	mov	r3, r2
 800346c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4a65      	ldr	r2, [pc, #404]	; (8003608 <packDatas+0x1e0>)
 8003472:	fb82 1203 	smull	r1, r2, r2, r3
 8003476:	1152      	asrs	r2, r2, #5
 8003478:	17db      	asrs	r3, r3, #31
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <packDatas+0x1e0>)
 8003482:	fb82 1203 	smull	r1, r2, r2, r3
 8003486:	1151      	asrs	r1, r2, #5
 8003488:	17da      	asrs	r2, r3, #31
 800348a:	1a8a      	subs	r2, r1, r2
 800348c:	2164      	movs	r1, #100	; 0x64
 800348e:	fb01 f202 	mul.w	r2, r1, r2
 8003492:	1a9a      	subs	r2, r3, r2
 8003494:	4613      	mov	r3, r2
 8003496:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	b25a      	sxtb	r2, r3
 800349e:	7fbb      	ldrb	r3, [r7, #30]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 80034ac:	7fbb      	ldrb	r3, [r7, #30]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 80034bc:	4a51      	ldr	r2, [pc, #324]	; (8003604 <packDatas+0x1dc>)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80034c2:	4a50      	ldr	r2, [pc, #320]	; (8003604 <packDatas+0x1dc>)
 80034c4:	7fbb      	ldrb	r3, [r7, #30]
 80034c6:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800360c <packDatas+0x1e4>
 80034d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034da:	ee17 3a90 	vmov	r3, s15
 80034de:	b29a      	uxth	r2, r3
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <packDatas+0x1dc>)
 80034e2:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ee:	ee17 3a90 	vmov	r3, s15
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	4b43      	ldr	r3, [pc, #268]	; (8003604 <packDatas+0x1dc>)
 80034f6:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80034fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003506:	edc7 7a01 	vstr	s15, [r7, #4]
 800350a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <packDatas+0x1dc>)
 8003510:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	edd3 7a07 	vldr	s15, [r3, #28]
 8003518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003520:	793a      	ldrb	r2, [r7, #4]
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <packDatas+0x1dc>)
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <packDatas+0x1dc>)
 800352e:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)saved_datas->max_altitude;
 8003530:	4b37      	ldr	r3, [pc, #220]	; (8003610 <packDatas+0x1e8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353c:	ee17 3a90 	vmov	r3, s15
 8003540:	b21a      	sxth	r2, r3
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <packDatas+0x1dc>)
 8003544:	875a      	strh	r2, [r3, #58]	; 0x3a
#else
	veriler.dataYapi.maxAltitude = (int16_t)(int)((float)strain_gage_get_vals(&loadcell) / 1000.0);
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <packDatas+0x1dc>)
 800354c:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <packDatas+0x1dc>)
 8003554:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <packDatas+0x1dc>)
 800355c:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb6e 	bl	8000c48 <__aeabi_d2f>
 800356c:	4603      	mov	r3, r0
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef1 7a67 	vneg.f32	s15, s15
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <packDatas+0x1dc>)
 8003578:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f7fd fb5f 	bl	8000c48 <__aeabi_d2f>
 800358a:	4603      	mov	r3, r0
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef1 7a67 	vneg.f32	s15, s15
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <packDatas+0x1dc>)
 8003596:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fd fb50 	bl	8000c48 <__aeabi_d2f>
 80035a8:	4603      	mov	r3, r0
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <packDatas+0x1dc>)
 80035b4:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80035be:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003614 <packDatas+0x1ec>
 80035c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <packDatas+0x1dc>)
 80035c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80035d2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003614 <packDatas+0x1ec>
 80035d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <packDatas+0x1dc>)
 80035dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 80035e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d917      	bls.n	8003618 <packDatas+0x1f0>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80035ee:	eeb1 7a67 	vneg.f32	s14, s15
 80035f2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003614 <packDatas+0x1ec>
 80035f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003602:	e010      	b.n	8003626 <packDatas+0x1fe>
 8003604:	20000284 	.word	0x20000284
 8003608:	51eb851f 	.word	0x51eb851f
 800360c:	42c80000 	.word	0x42c80000
 8003610:	20000004 	.word	0x20000004
 8003614:	447a0000 	.word	0x447a0000
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800361e:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003614 <packDatas+0x1ec>
 8003622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003626:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <packDatas+0x338>)
 8003628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	b25a      	sxtb	r2, r3
 8003636:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <packDatas+0x33c>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	135b      	asrs	r3, r3, #13
 8003646:	b25b      	sxtb	r3, r3
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	b25b      	sxtb	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b25a      	sxtb	r2, r3
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <packDatas+0x33c>)
 8003654:	edd3 7a01 	vldr	s15, [r3, #4]
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 3a90 	vmov	r3, s15
 8003660:	139b      	asrs	r3, r3, #14
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	b25b      	sxtb	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b25a      	sxtb	r2, r3
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <packDatas+0x33c>)
 8003670:	edd3 7a02 	vldr	s15, [r3, #8]
 8003674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003678:	ee17 3a90 	vmov	r3, s15
 800367c:	13db      	asrs	r3, r3, #15
 800367e:	b25b      	sxtb	r3, r3
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	b25b      	sxtb	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b25b      	sxtb	r3, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <packDatas+0x338>)
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800369c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <packDatas+0x338>)
 80036ac:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80036ae:	f001 fadf 	bl	8004c70 <quaternionToTheta>
 80036b2:	eef0 7a40 	vmov.f32	s15, s0
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <packDatas+0x338>)
 80036b8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <packDatas+0x33c>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c6:	ee17 3a90 	vmov	r3, s15
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bfb8      	it	lt
 80036ce:	425b      	neglt	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <packDatas+0x338>)
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <packDatas+0x33c>)
 80036da:	edd3 7a01 	vldr	s15, [r3, #4]
 80036de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e2:	ee17 3a90 	vmov	r3, s15
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <packDatas+0x338>)
 80036f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <packDatas+0x33c>)
 80036f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036fe:	ee17 3a90 	vmov	r3, s15
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfb8      	it	lt
 8003706:	425b      	neglt	r3, r3
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <packDatas+0x338>)
 800370c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003710:	f7ff fe38 	bl	8003384 <calculateCRC>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <packDatas+0x338>)
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <packDatas+0x338>)
 8003720:	220d      	movs	r2, #13
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <packDatas+0x338>)
 8003728:	220a      	movs	r2, #10
 800372a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	dd06      	ble.n	8003750 <packDatas+0x328>
		lora_activate();
 8003742:	f000 f88d 	bl	8003860 <lora_activate>
		sendRF();
 8003746:	f7ff fe43 	bl	80033d0 <sendRF>
		sendPC();
 800374a:	f7ff fe57 	bl	80033fc <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 800374e:	e003      	b.n	8003758 <packDatas+0x330>
		sendPC();
 8003750:	f7ff fe54 	bl	80033fc <sendPC>
		lora_deactivate();
 8003754:	f000 f896 	bl	8003884 <lora_deactivate>
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000284 	.word	0x20000284
 8003764:	20000900 	.word	0x20000900

08003768 <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	899b      	ldrh	r3, [r3, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	4619      	mov	r1, r3
 800377c:	f004 f8f0 	bl	8007960 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 8003780:	f002 fc74 	bl	800606c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2264      	movs	r2, #100	; 0x64
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	899b      	ldrh	r3, [r3, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4619      	mov	r1, r3
 80037ae:	f004 f8d7 	bl	8007960 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80037b2:	f002 fc5b 	bl	800606c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 80037d2:	f002 fc4b 	bl	800606c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d907      	bls.n	80037f6 <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	899b      	ldrh	r3, [r3, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	4619      	mov	r1, r3
 80037f2:	f004 f8b5 	bl	8007960 <HAL_GPIO_WritePin>
	}
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	71fb      	strb	r3, [r7, #7]
 800380c:	460b      	mov	r3, r1
 800380e:	71bb      	strb	r3, [r7, #6]
 8003810:	4613      	mov	r3, r2
 8003812:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8003818:	79bb      	ldrb	r3, [r7, #6]
 800381a:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 800381c:	797b      	ldrb	r3, [r7, #5]
 800381e:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00c      	b.n	8003840 <send_command+0x40>
        command[3 + i] = data[i];
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	441a      	add	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3303      	adds	r3, #3
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	3318      	adds	r3, #24
 8003834:	443b      	add	r3, r7
 8003836:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b08      	cmp	r3, #8
 8003844:	ddef      	ble.n	8003826 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 8003846:	f107 0108 	add.w	r1, r7, #8
 800384a:	2364      	movs	r3, #100	; 0x64
 800384c:	220c      	movs	r2, #12
 800384e:	4803      	ldr	r0, [pc, #12]	; (800385c <send_command+0x5c>)
 8003850:	f006 fccf 	bl	800a1f2 <HAL_UART_Transmit>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200003d4 	.word	0x200003d4

08003860 <lora_activate>:

void lora_activate()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003864:	2200      	movs	r2, #0
 8003866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800386a:	4805      	ldr	r0, [pc, #20]	; (8003880 <lora_activate+0x20>)
 800386c:	f004 f878 	bl	8007960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8003870:	2200      	movs	r2, #0
 8003872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003876:	4802      	ldr	r0, [pc, #8]	; (8003880 <lora_activate+0x20>)
 8003878:	f004 f872 	bl	8007960 <HAL_GPIO_WritePin>
}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40020800 	.word	0x40020800

08003884 <lora_deactivate>:

void lora_deactivate()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
 8003888:	2201      	movs	r2, #1
 800388a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <lora_deactivate+0x20>)
 8003890:	f004 f866 	bl	8007960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800389a:	4802      	ldr	r0, [pc, #8]	; (80038a4 <lora_deactivate+0x20>)
 800389c:	f004 f860 	bl	8007960 <HAL_GPIO_WritePin>
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40020800 	.word	0x40020800

080038a8 <lora_configure>:

void lora_configure(lorastruct *config)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2208      	movs	r2, #8
 80038de:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2207      	movs	r2, #7
 80038e4:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	79db      	ldrb	r3, [r3, #7]
 80038ea:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	799b      	ldrb	r3, [r3, #6]
 80038f0:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7a5b      	ldrb	r3, [r3, #9]
 80038f6:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7c5b      	ldrb	r3, [r3, #17]
 8003900:	4313      	orrs	r3, r2
 8003902:	b2da      	uxtb	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	4313      	orrs	r3, r2
 800390a:	b2db      	uxtb	r3, r3
 800390c:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	789a      	ldrb	r2, [r3, #2]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7a9b      	ldrb	r3, [r3, #10]
 8003916:	4313      	orrs	r3, r2
 8003918:	b2da      	uxtb	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	4313      	orrs	r3, r2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7a1b      	ldrb	r3, [r3, #8]
 8003928:	2b53      	cmp	r3, #83	; 0x53
 800392a:	d902      	bls.n	8003932 <lora_configure+0x8a>
    	config->channel = 83;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2253      	movs	r2, #83	; 0x53
 8003930:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7a1b      	ldrb	r3, [r3, #8]
 8003936:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7ada      	ldrb	r2, [r3, #11]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7b1b      	ldrb	r3, [r3, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7b5b      	ldrb	r3, [r3, #13]
 8003948:	4313      	orrs	r3, r2
 800394a:	b2da      	uxtb	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7b9b      	ldrb	r3, [r3, #14]
 8003950:	4313      	orrs	r3, r2
 8003952:	b2da      	uxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7bdb      	ldrb	r3, [r3, #15]
 8003958:	4313      	orrs	r3, r2
 800395a:	b2da      	uxtb	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7c1b      	ldrb	r3, [r3, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	795b      	ldrb	r3, [r3, #5]
 800396a:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2209      	movs	r2, #9
 8003978:	2100      	movs	r1, #0
 800397a:	20c0      	movs	r0, #192	; 0xc0
 800397c:	f7ff ff40 	bl	8003800 <send_command>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800398e:	f002 fb07 	bl	8005fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003992:	f000 fadf 	bl	8003f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003996:	f000 fcf7 	bl	8004388 <MX_GPIO_Init>
  MX_I2C1_Init();
 800399a:	f000 fbaf 	bl	80040fc <MX_I2C1_Init>
  MX_I2C3_Init();
 800399e:	f000 fbdb 	bl	8004158 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80039a2:	f000 fc57 	bl	8004254 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80039a6:	f000 fc7f 	bl	80042a8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80039aa:	f000 fca7 	bl	80042fc <MX_DMA_Init>
  MX_ADC1_Init();
 80039ae:	f000 fb45 	bl	800403c <MX_ADC1_Init>
  MX_UART4_Init();
 80039b2:	f000 fc25 	bl	8004200 <MX_UART4_Init>
  MX_RTC_Init();
 80039b6:	f000 fbfd 	bl	80041b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2102      	movs	r1, #2
 80039be:	2009      	movs	r0, #9
 80039c0:	f003 f893 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2102      	movs	r1, #2
 80039c8:	200a      	movs	r0, #10
 80039ca:	f003 f88e 	bl	8006aea <HAL_NVIC_SetPriority>

  HAL_PWR_EnableBkUpAccess();
 80039ce:	f005 f803 	bl	80089d8 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 80039d2:	4b8e      	ldr	r3, [pc, #568]	; (8003c0c <main+0x284>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a8d      	ldr	r2, [pc, #564]	; (8003c0c <main+0x284>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
  HAL_PWR_EnableBkUpReg();
 80039de:	f005 f80f 	bl	8008a00 <HAL_PWREx_EnableBkUpReg>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039e2:	2200      	movs	r2, #0
 80039e4:	498a      	ldr	r1, [pc, #552]	; (8003c10 <main+0x288>)
 80039e6:	488b      	ldr	r0, [pc, #556]	; (8003c14 <main+0x28c>)
 80039e8:	f006 fa08 	bl	8009dfc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80039ec:	2200      	movs	r2, #0
 80039ee:	498a      	ldr	r1, [pc, #552]	; (8003c18 <main+0x290>)
 80039f0:	4888      	ldr	r0, [pc, #544]	; (8003c14 <main+0x28c>)
 80039f2:	f006 fa61 	bl	8009eb8 <HAL_RTC_GetDate>

  HAL_Delay(5);
 80039f6:	2005      	movs	r0, #5
 80039f8:	f002 fb44 	bl	8006084 <HAL_Delay>
  bme280_begin();
 80039fc:	f000 fd56 	bl	80044ac <bme280_begin>
  bmi088_begin();
 8003a00:	f000 fd6a 	bl	80044d8 <bmi088_begin>

#ifndef	ROCKET_CARD
  straing_gage_gpio_init(&loadcell, GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_1_GPIO_Port, GPIO_1_Pin);
#endif

  if(measure_abs_time(sTime, sDate) > 1)
 8003a04:	4b82      	ldr	r3, [pc, #520]	; (8003c10 <main+0x288>)
 8003a06:	4a84      	ldr	r2, [pc, #528]	; (8003c18 <main+0x290>)
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	9201      	str	r2, [sp, #4]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	9200      	str	r2, [sp, #0]
 8003a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a12:	f001 fb6b 	bl	80050ec <measure_abs_time>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d962      	bls.n	8003ae2 <main+0x15a>
  {
	  if(is_BMI_ok)
 8003a1c:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <main+0x294>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <main+0xa0>
		  bmi088_config();
 8003a24:	f7fe fdc0 	bl	80025a8 <bmi088_config>
	  if(is_BME_ok)
 8003a28:	4b7d      	ldr	r3, [pc, #500]	; (8003c20 <main+0x298>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <main+0xac>
		  bme280_config();
 8003a30:	f7fe f822 	bl	8001a78 <bme280_config>

	  saved_datas->r_status = STAT_ROCKET_READY;
 8003a34:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <main+0x29c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
	  saved_datas->max_altitude = 0.0;
 8003a3c:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <main+0x29c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c
	  saved_datas->offset_vals[0] = 0.0;
 8003a46:	4b77      	ldr	r3, [pc, #476]	; (8003c24 <main+0x29c>)
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  saved_datas->offset_vals[1] = 0.0;
 8003a56:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <main+0x29c>)
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  saved_datas->offset_vals[2] = 0.0;
 8003a66:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <main+0x29c>)
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  saved_datas->q[0] = 0.0;
 8003a76:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <main+0x29c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	605a      	str	r2, [r3, #4]
	  saved_datas->q[1] = 0.0;
 8003a80:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <main+0x29c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
	  saved_datas->q[2] = 0.0;
 8003a8a:	4b66      	ldr	r3, [pc, #408]	; (8003c24 <main+0x29c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
	  saved_datas->q[3] = 0.0;
 8003a94:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <main+0x29c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]

	  for(int i = 0; i < 20; i++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e00a      	b.n	8003aba <main+0x132>
	  {
		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aa8:	485f      	ldr	r0, [pc, #380]	; (8003c28 <main+0x2a0>)
 8003aaa:	f003 ff72 	bl	8007992 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8003aae:	2032      	movs	r0, #50	; 0x32
 8003ab0:	f002 fae8 	bl	8006084 <HAL_Delay>
	  for(int i = 0; i < 20; i++)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b13      	cmp	r3, #19
 8003abe:	ddf1      	ble.n	8003aa4 <main+0x11c>
	  }

	  loraBegin();
 8003ac0:	f000 fd2c 	bl	800451c <loraBegin>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8003ac4:	2364      	movs	r3, #100	; 0x64
 8003ac6:	2213      	movs	r2, #19
 8003ac8:	4958      	ldr	r1, [pc, #352]	; (8003c2c <main+0x2a4>)
 8003aca:	4859      	ldr	r0, [pc, #356]	; (8003c30 <main+0x2a8>)
 8003acc:	f006 fb91 	bl	800a1f2 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
	  if(is_BMI_ok)
 8003ad0:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <main+0x294>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <main+0x154>
		  getOffset();
 8003ad8:	f7ff fbc6 	bl	8003268 <getOffset>

	  HAL_Delay(10);
 8003adc:	200a      	movs	r0, #10
 8003ade:	f002 fad1 	bl	8006084 <HAL_Delay>
  }

  HAL_UART_DeInit(&huart4);
 8003ae2:	4854      	ldr	r0, [pc, #336]	; (8003c34 <main+0x2ac>)
 8003ae4:	f006 fb56 	bl	800a194 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8003ae8:	4851      	ldr	r0, [pc, #324]	; (8003c30 <main+0x2a8>)
 8003aea:	f006 fb53 	bl	800a194 <HAL_UART_DeInit>
  huart4.Init.BaudRate = 115200;
 8003aee:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <main+0x2ac>)
 8003af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003af4:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8003af6:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <main+0x2a8>)
 8003af8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003afc:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//Telemetry
 8003afe:	484d      	ldr	r0, [pc, #308]	; (8003c34 <main+0x2ac>)
 8003b00:	f006 fafb 	bl	800a0fa <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8003b04:	484a      	ldr	r0, [pc, #296]	; (8003c30 <main+0x2a8>)
 8003b06:	f006 faf8 	bl	800a0fa <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8003b0a:	484b      	ldr	r0, [pc, #300]	; (8003c38 <main+0x2b0>)
 8003b0c:	f003 f832 	bl	8006b74 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 8003b10:	484a      	ldr	r0, [pc, #296]	; (8003c3c <main+0x2b4>)
 8003b12:	f003 f82f 	bl	8006b74 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8003b16:	484a      	ldr	r0, [pc, #296]	; (8003c40 <main+0x2b8>)
 8003b18:	f003 f82c 	bl	8006b74 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 8003b1c:	4849      	ldr	r0, [pc, #292]	; (8003c44 <main+0x2bc>)
 8003b1e:	f003 f829 	bl	8006b74 <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8003b22:	2203      	movs	r2, #3
 8003b24:	4948      	ldr	r1, [pc, #288]	; (8003c48 <main+0x2c0>)
 8003b26:	4843      	ldr	r0, [pc, #268]	; (8003c34 <main+0x2ac>)
 8003b28:	f006 fc74 	bl	800a414 <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 8003b2c:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <main+0x2c4>)
 8003b2e:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <main+0x2c8>)
 8003b30:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8003b32:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <main+0x2c4>)
 8003b34:	2208      	movs	r2, #8
 8003b36:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <main+0x2cc>)
 8003b3a:	4a45      	ldr	r2, [pc, #276]	; (8003c50 <main+0x2c8>)
 8003b3c:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 8003b3e:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <main+0x2cc>)
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 8003b44:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <main+0x2d0>)
 8003b46:	4a38      	ldr	r2, [pc, #224]	; (8003c28 <main+0x2a0>)
 8003b48:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <main+0x2d0>)
 8003b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b50:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 8003b52:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <main+0x2d4>)
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <main+0x2a0>)
 8003b56:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <main+0x2d4>)
 8003b5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b5e:	819a      	strh	r2, [r3, #12]

  //Interrupt activation for IMU sensor.
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b60:	2009      	movs	r0, #9
 8003b62:	f002 ffde 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003b66:	200a      	movs	r0, #10
 8003b68:	f002 ffdb 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  loraLastTime = -1.0;
 8003b6c:	4b3c      	ldr	r3, [pc, #240]	; (8003c60 <main+0x2d8>)
 8003b6e:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <main+0x2dc>)
 8003b70:	601a      	str	r2, [r3, #0]

  //This macro for viewing the gps raw data.
  //VIEW_GPS()

  UsrGpsL86Init(&huart2);
 8003b72:	482f      	ldr	r0, [pc, #188]	; (8003c30 <main+0x2a8>)
 8003b74:	f001 ffe8 	bl	8005b48 <UsrGpsL86Init>

  ext_pin_open_duration(&buzzer, 1000);
 8003b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b7c:	4837      	ldr	r0, [pc, #220]	; (8003c5c <main+0x2d4>)
 8003b7e:	f7ff fe0b 	bl	8003798 <ext_pin_open_duration>
  BMI_sensor.rawDatas.isGyroUpdated = 0;
 8003b82:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <main+0x2e0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	745a      	strb	r2, [r3, #17]
  BMI_sensor.rawDatas.isAccelUpdated = 0;
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <main+0x2e0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	749a      	strb	r2, [r3, #18]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_BMI_ok)
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <main+0x294>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <main+0x212>
		  bmi088_update();
 8003b96:	f7fe ff4b 	bl	8002a30 <bmi088_update>
	  if(is_BME_ok)
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <main+0x298>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <main+0x21e>
		  bme280_update();
 8003ba2:	f7fe f929 	bl	8001df8 <bme280_update>

	  measurePower(&guc);
 8003ba6:	4831      	ldr	r0, [pc, #196]	; (8003c6c <main+0x2e4>)
 8003ba8:	f000 fcf6 	bl	8004598 <measurePower>

	  ext_pin_update(&mos_1);
 8003bac:	4827      	ldr	r0, [pc, #156]	; (8003c4c <main+0x2c4>)
 8003bae:	f7ff fe0c 	bl	80037ca <ext_pin_update>
	  ext_pin_update(&mos_2);
 8003bb2:	4828      	ldr	r0, [pc, #160]	; (8003c54 <main+0x2cc>)
 8003bb4:	f7ff fe09 	bl	80037ca <ext_pin_update>
	  ext_pin_update(&led);
 8003bb8:	4827      	ldr	r0, [pc, #156]	; (8003c58 <main+0x2d0>)
 8003bba:	f7ff fe06 	bl	80037ca <ext_pin_update>
	  ext_pin_update(&buzzer);
 8003bbe:	4827      	ldr	r0, [pc, #156]	; (8003c5c <main+0x2d4>)
 8003bc0:	f7ff fe03 	bl	80037ca <ext_pin_update>



#if defined(ALGORITHM_1)
	  if(is_BME_ok)
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <main+0x298>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <main+0x24a>
		  algorithm_1_update(&BME280_sensor);
 8003bcc:	4828      	ldr	r0, [pc, #160]	; (8003c70 <main+0x2e8>)
 8003bce:	f7fd fbbf 	bl	8001350 <algorithm_1_update>
#endif
#if defined(ALGORITHM_2)
	  teta = quaternionToTheta();
 8003bd2:	f001 f84d 	bl	8004c70 <quaternionToTheta>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <main+0x2ec>)
 8003bdc:	edc3 7a00 	vstr	s15, [r3]
	  if(is_BMI_ok)
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <main+0x294>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <main+0x272>
		  algorithm_2_update(&BME280_sensor, &BMI_sensor, teta);
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <main+0x2ec>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf2:	491d      	ldr	r1, [pc, #116]	; (8003c68 <main+0x2e0>)
 8003bf4:	481e      	ldr	r0, [pc, #120]	; (8003c70 <main+0x2e8>)
 8003bf6:	f7fd fcd7 	bl	80015a8 <algorithm_2_update>
#endif

		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <main+0x29c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d13d      	bne.n	8003c80 <main+0x2f8>
 8003c04:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <main+0x2f0>)
 8003c06:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <main+0x2f4>)
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e042      	b.n	8003c92 <main+0x30a>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	200007c4 	.word	0x200007c4
 8003c14:	200003b4 	.word	0x200003b4
 8003c18:	200007d8 	.word	0x200007d8
 8003c1c:	20000800 	.word	0x20000800
 8003c20:	200007fc 	.word	0x200007fc
 8003c24:	20000004 	.word	0x20000004
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	08012698 	.word	0x08012698
 8003c30:	2000045c 	.word	0x2000045c
 8003c34:	200003d4 	.word	0x200003d4
 8003c38:	20000560 	.word	0x20000560
 8003c3c:	200005c0 	.word	0x200005c0
 8003c40:	200004a0 	.word	0x200004a0
 8003c44:	20000500 	.word	0x20000500
 8003c48:	2000077c 	.word	0x2000077c
 8003c4c:	20000784 	.word	0x20000784
 8003c50:	40020800 	.word	0x40020800
 8003c54:	20000794 	.word	0x20000794
 8003c58:	200007a4 	.word	0x200007a4
 8003c5c:	200007b4 	.word	0x200007b4
 8003c60:	200007ec 	.word	0x200007ec
 8003c64:	bf800000 	.word	0xbf800000
 8003c68:	20000650 	.word	0x20000650
 8003c6c:	2000076c 	.word	0x2000076c
 8003c70:	20000620 	.word	0x20000620
 8003c74:	200007f4 	.word	0x200007f4
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	40a00000 	.word	0x40a00000
		  else if(saved_datas->r_status > STAT_MOTOR_BURNOUT){lora_hz = 1;}
 8003c80:	4b9b      	ldr	r3, [pc, #620]	; (8003ef0 <main+0x568>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d903      	bls.n	8003c92 <main+0x30a>
 8003c8a:	4b9a      	ldr	r3, [pc, #616]	; (8003ef4 <main+0x56c>)
 8003c8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c90:	601a      	str	r2, [r3, #0]

	  	  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003c92:	f002 f9eb 	bl	800606c <HAL_GetTick>
 8003c96:	ee07 0a90 	vmov	s15, r0
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	ee17 0a90 	vmov	r0, s15
 8003ca2:	f7fc fc81 	bl	80005a8 <__aeabi_f2d>
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	4b93      	ldr	r3, [pc, #588]	; (8003ef8 <main+0x570>)
 8003cac:	f7fc fdfe 	bl	80008ac <__aeabi_ddiv>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f7fc ffc6 	bl	8000c48 <__aeabi_d2f>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4a8f      	ldr	r2, [pc, #572]	; (8003efc <main+0x574>)
 8003cc0:	6013      	str	r3, [r2, #0]

	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 8003cc2:	4b8e      	ldr	r3, [pc, #568]	; (8003efc <main+0x574>)
 8003cc4:	ed93 7a00 	vldr	s14, [r3]
 8003cc8:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <main+0x578>)
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd2:	eef0 7ae7 	vabs.f32	s15, s15
 8003cd6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003f04 <main+0x57c>
 8003cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	dd5a      	ble.n	8003d9a <main+0x412>
		 {
			 if(saved_datas->r_status == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0 && is_BMI_ok == 1)
 8003ce4:	4b82      	ldr	r3, [pc, #520]	; (8003ef0 <main+0x568>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d151      	bne.n	8003d92 <main+0x40a>
 8003cee:	4b86      	ldr	r3, [pc, #536]	; (8003f08 <main+0x580>)
 8003cf0:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8003cf4:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003ee0 <main+0x558>
 8003cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8003cfc:	eef0 0a67 	vmov.f32	s1, s15
 8003d00:	f00c fe72 	bl	80109e8 <pow>
 8003d04:	ec55 4b10 	vmov	r4, r5, d0
 8003d08:	4b7f      	ldr	r3, [pc, #508]	; (8003f08 <main+0x580>)
 8003d0a:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8003d0e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003ee0 <main+0x558>
 8003d12:	eeb0 0a47 	vmov.f32	s0, s14
 8003d16:	eef0 0a67 	vmov.f32	s1, s15
 8003d1a:	f00c fe65 	bl	80109e8 <pow>
 8003d1e:	ec53 2b10 	vmov	r2, r3, d0
 8003d22:	4620      	mov	r0, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7fc fae1 	bl	80002ec <__adddf3>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4614      	mov	r4, r2
 8003d30:	461d      	mov	r5, r3
 8003d32:	4b75      	ldr	r3, [pc, #468]	; (8003f08 <main+0x580>)
 8003d34:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8003d38:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003ee0 <main+0x558>
 8003d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d40:	eef0 0a67 	vmov.f32	s1, s15
 8003d44:	f00c fe50 	bl	80109e8 <pow>
 8003d48:	ec53 2b10 	vmov	r2, r3, d0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f7fc facc 	bl	80002ec <__adddf3>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	ec43 2b17 	vmov	d7, r2, r3
 8003d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d60:	eef0 0a67 	vmov.f32	s1, s15
 8003d64:	f00c feb0 	bl	8010ac8 <sqrt>
 8003d68:	ec51 0b10 	vmov	r0, r1, d0
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	4b66      	ldr	r3, [pc, #408]	; (8003f0c <main+0x584>)
 8003d72:	f7fc fee3 	bl	8000b3c <__aeabi_dcmplt>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <main+0x40a>
 8003d7c:	4b64      	ldr	r3, [pc, #400]	; (8003f10 <main+0x588>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d106      	bne.n	8003d92 <main+0x40a>
			 {
				 quaternionSet_zero();
 8003d84:	f001 f972 	bl	800506c <quaternionSet_zero>
				 ext_pin_open_duration(&buzzer, 500);
 8003d88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d8c:	4861      	ldr	r0, [pc, #388]	; (8003f14 <main+0x58c>)
 8003d8e:	f7ff fd03 	bl	8003798 <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 8003d92:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <main+0x574>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5a      	ldr	r2, [pc, #360]	; (8003f00 <main+0x578>)
 8003d98:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS get location
		 if(g_GnssRx_Flag)
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <main+0x590>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <main+0x420>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 8003da2:	485e      	ldr	r0, [pc, #376]	; (8003f1c <main+0x594>)
 8003da4:	f001 fee0 	bl	8005b68 <Usr_GpsL86GetValues>
		 }

		 //Lora timer;
		 //loop_counter += 1;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003da8:	f002 f960 	bl	800606c <HAL_GetTick>
 8003dac:	ee07 0a90 	vmov	s15, r0
 8003db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db4:	ee17 0a90 	vmov	r0, s15
 8003db8:	f7fc fbf6 	bl	80005a8 <__aeabi_f2d>
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <main+0x570>)
 8003dc2:	f7fc fd73 	bl	80008ac <__aeabi_ddiv>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fc ff3b 	bl	8000c48 <__aeabi_d2f>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4a49      	ldr	r2, [pc, #292]	; (8003efc <main+0x574>)
 8003dd6:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 8003dd8:	4b48      	ldr	r3, [pc, #288]	; (8003efc <main+0x574>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	4b50      	ldr	r3, [pc, #320]	; (8003f20 <main+0x598>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de8:	eef0 7ae7 	vabs.f32	s15, s15
 8003dec:	ee17 0a90 	vmov	r0, s15
 8003df0:	f7fc fbda 	bl	80005a8 <__aeabi_f2d>
 8003df4:	4604      	mov	r4, r0
 8003df6:	460d      	mov	r5, r1
 8003df8:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <main+0x56c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fbd3 	bl	80005a8 <__aeabi_f2d>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	f04f 0000 	mov.w	r0, #0
 8003e0a:	4946      	ldr	r1, [pc, #280]	; (8003f24 <main+0x59c>)
 8003e0c:	f7fc fd4e 	bl	80008ac <__aeabi_ddiv>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4620      	mov	r0, r4
 8003e16:	4629      	mov	r1, r5
 8003e18:	f7fc feae 	bl	8000b78 <__aeabi_dcmpgt>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00f      	beq.n	8003e42 <main+0x4ba>
		 {
			 //BME280_sensor.velocity = (float)(loop_counter);
			 getWatt();
 8003e22:	f000 fc4d 	bl	80046c0 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, saved_datas->r_status);
 8003e26:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <main+0x568>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4b3e      	ldr	r3, [pc, #248]	; (8003f28 <main+0x5a0>)
 8003e30:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <main+0x594>)
 8003e32:	493e      	ldr	r1, [pc, #248]	; (8003f2c <main+0x5a4>)
 8003e34:	4834      	ldr	r0, [pc, #208]	; (8003f08 <main+0x580>)
 8003e36:	f7ff faf7 	bl	8003428 <packDatas>
			 loraLastTime = currentTime;
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <main+0x574>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <main+0x598>)
 8003e40:	6013      	str	r3, [r2, #0]
			 //loop_counter = 0;
		 }


		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <main+0x574>)
 8003e44:	ed93 7a00 	vldr	s14, [r3]
 8003e48:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <main+0x5a8>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e52:	eef0 7ae7 	vabs.f32	s15, s15
 8003e56:	ee17 0a90 	vmov	r0, s15
 8003e5a:	f7fc fba5 	bl	80005a8 <__aeabi_f2d>
 8003e5e:	a322      	add	r3, pc, #136	; (adr r3, 8003ee8 <main+0x560>)
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f7fc fe88 	bl	8000b78 <__aeabi_dcmpgt>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <main+0x514>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	4930      	ldr	r1, [pc, #192]	; (8003f34 <main+0x5ac>)
 8003e72:	4831      	ldr	r0, [pc, #196]	; (8003f38 <main+0x5b0>)
 8003e74:	f005 ffc2 	bl	8009dfc <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4930      	ldr	r1, [pc, #192]	; (8003f3c <main+0x5b4>)
 8003e7c:	482e      	ldr	r0, [pc, #184]	; (8003f38 <main+0x5b0>)
 8003e7e:	f006 f81b 	bl	8009eb8 <HAL_RTC_GetDate>
			 save_time(sTime, sDate);
 8003e82:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <main+0x5ac>)
 8003e84:	4a2d      	ldr	r2, [pc, #180]	; (8003f3c <main+0x5b4>)
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	9201      	str	r2, [sp, #4]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	9200      	str	r2, [sp, #0]
 8003e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e90:	f001 f8f2 	bl	8005078 <save_time>
			 lastTime = currentTime;
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <main+0x574>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <main+0x5a8>)
 8003e9a:	6013      	str	r3, [r2, #0]
		 }

		 //This block is used for manual deploy via telemetry for testing.
		if(is_updated_uart4 == 1)
 8003e9c:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <main+0x5b8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f47f ae74 	bne.w	8003b8e <main+0x206>
		{
			//ext_pin_open(&buzzer);
		  if(strcmp((char*)mosfet_buffer, "OK1") == 0)
 8003ea6:	4927      	ldr	r1, [pc, #156]	; (8003f44 <main+0x5bc>)
 8003ea8:	4827      	ldr	r0, [pc, #156]	; (8003f48 <main+0x5c0>)
 8003eaa:	f7fc f9b1 	bl	8000210 <strcmp>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <main+0x536>
		  {
			  deploy_p_1();
 8003eb4:	f000 fc52 	bl	800475c <deploy_p_1>
			  ext_pin_open(&led);
 8003eb8:	4824      	ldr	r0, [pc, #144]	; (8003f4c <main+0x5c4>)
 8003eba:	f7ff fc55 	bl	8003768 <ext_pin_open>
		  }
		  if(strcmp((char*)mosfet_buffer, "OK2") == 0)
 8003ebe:	4924      	ldr	r1, [pc, #144]	; (8003f50 <main+0x5c8>)
 8003ec0:	4821      	ldr	r0, [pc, #132]	; (8003f48 <main+0x5c0>)
 8003ec2:	f7fc f9a5 	bl	8000210 <strcmp>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <main+0x54e>
		  {
			  deploy_p_2();
 8003ecc:	f000 fc56 	bl	800477c <deploy_p_2>
			  ext_pin_open(&led);
 8003ed0:	481e      	ldr	r0, [pc, #120]	; (8003f4c <main+0x5c4>)
 8003ed2:	f7ff fc49 	bl	8003768 <ext_pin_open>
		  }
		  is_updated_uart4 = 0;
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <main+0x5b8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
	  if(is_BMI_ok)
 8003edc:	e657      	b.n	8003b8e <main+0x206>
 8003ede:	bf00      	nop
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	40000000 	.word	0x40000000
 8003ee8:	9999999a 	.word	0x9999999a
 8003eec:	3fc99999 	.word	0x3fc99999
 8003ef0:	20000004 	.word	0x20000004
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	408f4000 	.word	0x408f4000
 8003efc:	200007dc 	.word	0x200007dc
 8003f00:	200007e4 	.word	0x200007e4
 8003f04:	42700000 	.word	0x42700000
 8003f08:	20000650 	.word	0x20000650
 8003f0c:	40140000 	.word	0x40140000
 8003f10:	20000800 	.word	0x20000800
 8003f14:	200007b4 	.word	0x200007b4
 8003f18:	20000910 	.word	0x20000910
 8003f1c:	2000073c 	.word	0x2000073c
 8003f20:	200007ec 	.word	0x200007ec
 8003f24:	3ff00000 	.word	0x3ff00000
 8003f28:	2000076c 	.word	0x2000076c
 8003f2c:	20000620 	.word	0x20000620
 8003f30:	200007e0 	.word	0x200007e0
 8003f34:	200007c4 	.word	0x200007c4
 8003f38:	200003b4 	.word	0x200003b4
 8003f3c:	200007d8 	.word	0x200007d8
 8003f40:	20000780 	.word	0x20000780
 8003f44:	080126ac 	.word	0x080126ac
 8003f48:	2000077c 	.word	0x2000077c
 8003f4c:	200007a4 	.word	0x200007a4
 8003f50:	080126b0 	.word	0x080126b0

08003f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b094      	sub	sp, #80	; 0x50
 8003f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f5a:	f107 031c 	add.w	r3, r7, #28
 8003f5e:	2234      	movs	r2, #52	; 0x34
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f007 fc08 	bl	800b778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	2300      	movs	r3, #0
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <SystemClock_Config+0xe0>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <SystemClock_Config+0xe0>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6413      	str	r3, [r2, #64]	; 0x40
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <SystemClock_Config+0xe0>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f94:	2300      	movs	r3, #0
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <SystemClock_Config+0xe4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a26      	ldr	r2, [pc, #152]	; (8004038 <SystemClock_Config+0xe4>)
 8003f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <SystemClock_Config+0xe4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003fb0:	2305      	movs	r3, #5
 8003fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003fcc:	23b4      	movs	r3, #180	; 0xb4
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fdc:	f107 031c 	add.w	r3, r7, #28
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f005 fbf7 	bl	80097d4 <HAL_RCC_OscConfig>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003fec:	f000 fbd6 	bl	800479c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ff0:	f004 fd2c 	bl	8008a4c <HAL_PWREx_EnableOverDrive>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003ffa:	f000 fbcf 	bl	800479c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ffe:	230f      	movs	r3, #15
 8004000:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004002:	2302      	movs	r3, #2
 8004004:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800400a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800400e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004014:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004016:	f107 0308 	add.w	r3, r7, #8
 800401a:	2105      	movs	r1, #5
 800401c:	4618      	mov	r0, r3
 800401e:	f004 fd65 	bl	8008aec <HAL_RCC_ClockConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004028:	f000 fbb8 	bl	800479c <Error_Handler>
  }
}
 800402c:	bf00      	nop
 800402e:	3750      	adds	r7, #80	; 0x50
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40023800 	.word	0x40023800
 8004038:	40007000 	.word	0x40007000

0800403c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004042:	463b      	mov	r3, r7
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <MX_ADC1_Init+0xb8>)
 8004052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800405a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <MX_ADC1_Init+0xb4>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004064:	2201      	movs	r2, #1
 8004066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <MX_ADC1_Init+0xb4>)
 800406a:	2201      	movs	r2, #1
 800406c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004076:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004078:	2200      	movs	r2, #0
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <MX_ADC1_Init+0xb4>)
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <MX_ADC1_Init+0xbc>)
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004084:	2200      	movs	r2, #0
 8004086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <MX_ADC1_Init+0xb4>)
 800408a:	2202      	movs	r2, #2
 800408c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800408e:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <MX_ADC1_Init+0xb4>)
 8004098:	2201      	movs	r2, #1
 800409a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800409c:	4814      	ldr	r0, [pc, #80]	; (80040f0 <MX_ADC1_Init+0xb4>)
 800409e:	f002 f815 	bl	80060cc <HAL_ADC_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80040a8:	f000 fb78 	bl	800479c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040ac:	230c      	movs	r3, #12
 80040ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040b0:	2301      	movs	r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80040b4:	2304      	movs	r3, #4
 80040b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040b8:	463b      	mov	r3, r7
 80040ba:	4619      	mov	r1, r3
 80040bc:	480c      	ldr	r0, [pc, #48]	; (80040f0 <MX_ADC1_Init+0xb4>)
 80040be:	f002 f9e7 	bl	8006490 <HAL_ADC_ConfigChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80040c8:	f000 fb68 	bl	800479c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80040cc:	230b      	movs	r3, #11
 80040ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80040d0:	2302      	movs	r3, #2
 80040d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040d4:	463b      	mov	r3, r7
 80040d6:	4619      	mov	r1, r3
 80040d8:	4805      	ldr	r0, [pc, #20]	; (80040f0 <MX_ADC1_Init+0xb4>)
 80040da:	f002 f9d9 	bl	8006490 <HAL_ADC_ConfigChannel>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80040e4:	f000 fb5a 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200002c4 	.word	0x200002c4
 80040f4:	40012000 	.word	0x40012000
 80040f8:	0f000001 	.word	0x0f000001

080040fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <MX_I2C1_Init+0x50>)
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <MX_I2C1_Init+0x54>)
 8004104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <MX_I2C1_Init+0x50>)
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <MX_I2C1_Init+0x58>)
 800410a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <MX_I2C1_Init+0x50>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <MX_I2C1_Init+0x50>)
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <MX_I2C1_Init+0x50>)
 800411a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800411e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <MX_I2C1_Init+0x50>)
 8004122:	2200      	movs	r2, #0
 8004124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <MX_I2C1_Init+0x50>)
 8004128:	2200      	movs	r2, #0
 800412a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <MX_I2C1_Init+0x50>)
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <MX_I2C1_Init+0x50>)
 8004134:	2200      	movs	r2, #0
 8004136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004138:	4804      	ldr	r0, [pc, #16]	; (800414c <MX_I2C1_Init+0x50>)
 800413a:	f003 fc5d 	bl	80079f8 <HAL_I2C_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004144:	f000 fb2a 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004148:	bf00      	nop
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000030c 	.word	0x2000030c
 8004150:	40005400 	.word	0x40005400
 8004154:	000186a0 	.word	0x000186a0

08004158 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <MX_I2C3_Init+0x50>)
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <MX_I2C3_Init+0x54>)
 8004160:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <MX_I2C3_Init+0x50>)
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <MX_I2C3_Init+0x58>)
 8004166:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <MX_I2C3_Init+0x50>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <MX_I2C3_Init+0x50>)
 8004170:	2200      	movs	r2, #0
 8004172:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <MX_I2C3_Init+0x50>)
 8004176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800417a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <MX_I2C3_Init+0x50>)
 800417e:	2200      	movs	r2, #0
 8004180:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <MX_I2C3_Init+0x50>)
 8004184:	2200      	movs	r2, #0
 8004186:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <MX_I2C3_Init+0x50>)
 800418a:	2200      	movs	r2, #0
 800418c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <MX_I2C3_Init+0x50>)
 8004190:	2200      	movs	r2, #0
 8004192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004194:	4804      	ldr	r0, [pc, #16]	; (80041a8 <MX_I2C3_Init+0x50>)
 8004196:	f003 fc2f 	bl	80079f8 <HAL_I2C_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80041a0:	f000 fafc 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000360 	.word	0x20000360
 80041ac:	40005c00 	.word	0x40005c00
 80041b0:	000186a0 	.word	0x000186a0

080041b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <MX_RTC_Init+0x44>)
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <MX_RTC_Init+0x48>)
 80041bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <MX_RTC_Init+0x44>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <MX_RTC_Init+0x44>)
 80041c6:	227f      	movs	r2, #127	; 0x7f
 80041c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <MX_RTC_Init+0x44>)
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <MX_RTC_Init+0x44>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <MX_RTC_Init+0x44>)
 80041d8:	2200      	movs	r2, #0
 80041da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <MX_RTC_Init+0x44>)
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041e2:	4805      	ldr	r0, [pc, #20]	; (80041f8 <MX_RTC_Init+0x44>)
 80041e4:	f005 fd94 	bl	8009d10 <HAL_RTC_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80041ee:	f000 fad5 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200003b4 	.word	0x200003b4
 80041fc:	40002800 	.word	0x40002800

08004200 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <MX_UART4_Init+0x4c>)
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <MX_UART4_Init+0x50>)
 8004208:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <MX_UART4_Init+0x4c>)
 800420c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004210:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <MX_UART4_Init+0x4c>)
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <MX_UART4_Init+0x4c>)
 800421a:	2200      	movs	r2, #0
 800421c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <MX_UART4_Init+0x4c>)
 8004220:	2200      	movs	r2, #0
 8004222:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <MX_UART4_Init+0x4c>)
 8004226:	220c      	movs	r2, #12
 8004228:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <MX_UART4_Init+0x4c>)
 800422c:	2200      	movs	r2, #0
 800422e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <MX_UART4_Init+0x4c>)
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <MX_UART4_Init+0x4c>)
 8004238:	f005 ff5f 	bl	800a0fa <HAL_UART_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004242:	f000 faab 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200003d4 	.word	0x200003d4
 8004250:	40004c00 	.word	0x40004c00

08004254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <MX_USART1_UART_Init+0x50>)
 800425c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 8004260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800428a:	4805      	ldr	r0, [pc, #20]	; (80042a0 <MX_USART1_UART_Init+0x4c>)
 800428c:	f005 ff35 	bl	800a0fa <HAL_UART_Init>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004296:	f000 fa81 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000418 	.word	0x20000418
 80042a4:	40011000 	.word	0x40011000

080042a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <MX_USART2_UART_Init+0x50>)
 80042b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042ce:	220c      	movs	r2, #12
 80042d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d2:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <MX_USART2_UART_Init+0x4c>)
 80042e0:	f005 ff0b 	bl	800a0fa <HAL_UART_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042ea:	f000 fa57 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000045c 	.word	0x2000045c
 80042f8:	40004400 	.word	0x40004400

080042fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <MX_DMA_Init+0x88>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <MX_DMA_Init+0x88>)
 800430c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <MX_DMA_Init+0x88>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <MX_DMA_Init+0x88>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <MX_DMA_Init+0x88>)
 8004328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <MX_DMA_Init+0x88>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800433a:	2200      	movs	r2, #0
 800433c:	2100      	movs	r1, #0
 800433e:	200d      	movs	r0, #13
 8004340:	f002 fbd3 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004344:	200d      	movs	r0, #13
 8004346:	f002 fbec 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	200f      	movs	r0, #15
 8004350:	f002 fbcb 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004354:	200f      	movs	r0, #15
 8004356:	f002 fbe4 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	2010      	movs	r0, #16
 8004360:	f002 fbc3 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004364:	2010      	movs	r0, #16
 8004366:	f002 fbdc 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2046      	movs	r0, #70	; 0x46
 8004370:	f002 fbbb 	bl	8006aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004374:	2046      	movs	r0, #70	; 0x46
 8004376:	f002 fbd4 	bl	8006b22 <HAL_NVIC_EnableIRQ>

}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800

08004388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	609a      	str	r2, [r3, #8]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	4a3e      	ldr	r2, [pc, #248]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	6313      	str	r3, [r2, #48]	; 0x30
 80043ae:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	4b38      	ldr	r3, [pc, #224]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <MX_GPIO_Init+0x118>)
 80043fc:	f043 0302 	orr.w	r3, r3, #2
 8004400:	6313      	str	r3, [r2, #48]	; 0x30
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <MX_GPIO_Init+0x118>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 800440e:	2200      	movs	r2, #0
 8004410:	f640 4188 	movw	r1, #3208	; 0xc88
 8004414:	4823      	ldr	r0, [pc, #140]	; (80044a4 <MX_GPIO_Init+0x11c>)
 8004416:	f003 faa3 	bl	8007960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 800441a:	2200      	movs	r2, #0
 800441c:	f243 0103 	movw	r1, #12291	; 0x3003
 8004420:	4821      	ldr	r0, [pc, #132]	; (80044a8 <MX_GPIO_Init+0x120>)
 8004422:	f003 fa9d 	bl	8007960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 8004426:	f640 4388 	movw	r3, #3208	; 0xc88
 800442a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800442c:	2301      	movs	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004434:	2300      	movs	r3, #0
 8004436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	4619      	mov	r1, r3
 800443e:	4819      	ldr	r0, [pc, #100]	; (80044a4 <MX_GPIO_Init+0x11c>)
 8004440:	f003 f806 	bl	8007450 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_0_Pin GPIO_1_Pin BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin;
 8004444:	f243 0303 	movw	r3, #12291	; 0x3003
 8004448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4619      	mov	r1, r3
 800445c:	4812      	ldr	r0, [pc, #72]	; (80044a8 <MX_GPIO_Init+0x120>)
 800445e:	f002 fff7 	bl	8007450 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8004462:	2318      	movs	r3, #24
 8004464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800446a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4619      	mov	r1, r3
 8004476:	480c      	ldr	r0, [pc, #48]	; (80044a8 <MX_GPIO_Init+0x120>)
 8004478:	f002 ffea 	bl	8007450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 800447c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	4619      	mov	r1, r3
 8004490:	4805      	ldr	r0, [pc, #20]	; (80044a8 <MX_GPIO_Init+0x120>)
 8004492:	f002 ffdd 	bl	8007450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/


}
 8004496:	bf00      	nop
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40020800 	.word	0x40020800
 80044a8:	40020400 	.word	0x40020400

080044ac <bme280_begin>:

/* USER CODE BEGIN 4 */

void bme280_begin()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <bme280_begin+0x24>)
 80044b2:	2203      	movs	r2, #3
 80044b4:	749a      	strb	r2, [r3, #18]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <bme280_begin+0x24>)
 80044b8:	2203      	movs	r2, #3
 80044ba:	741a      	strb	r2, [r3, #16]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <bme280_begin+0x24>)
 80044be:	2204      	movs	r2, #4
 80044c0:	745a      	strb	r2, [r3, #17]
	bme280_init(&BME280_sensor, &hi2c1);
 80044c2:	4904      	ldr	r1, [pc, #16]	; (80044d4 <bme280_begin+0x28>)
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <bme280_begin+0x24>)
 80044c6:	f7fd fc61 	bl	8001d8c <bme280_init>
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000620 	.word	0x20000620
 80044d4:	2000030c 	.word	0x2000030c

080044d8 <bmi088_begin>:
void bmi088_begin()
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <bmi088_begin+0x3c>)
 80044de:	2208      	movs	r2, #8
 80044e0:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <bmi088_begin+0x3c>)
 80044e4:	2209      	movs	r2, #9
 80044e6:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <bmi088_begin+0x3c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <bmi088_begin+0x3c>)
 80044f0:	2202      	movs	r2, #2
 80044f2:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <bmi088_begin+0x3c>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <bmi088_begin+0x3c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <bmi088_begin+0x3c>)
 8004502:	2200      	movs	r2, #0
 8004504:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <bmi088_begin+0x40>)
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <bmi088_begin+0x3c>)
 800450a:	f7fe fa3b 	bl	8002984 <bmi088_init>
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000650 	.word	0x20000650
 8004518:	20000360 	.word	0x20000360

0800451c <loraBegin>:


void loraBegin()
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8004520:	2200      	movs	r2, #0
 8004522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004526:	481a      	ldr	r0, [pc, #104]	; (8004590 <loraBegin+0x74>)
 8004528:	f003 fa1a 	bl	8007960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 800452c:	2201      	movs	r2, #1
 800452e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004532:	4817      	ldr	r0, [pc, #92]	; (8004590 <loraBegin+0x74>)
 8004534:	f003 fa14 	bl	8007960 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004538:	2064      	movs	r0, #100	; 0x64
 800453a:	f001 fda3 	bl	8006084 <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <loraBegin+0x78>)
 8004540:	22e0      	movs	r2, #224	; 0xe0
 8004542:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <loraBegin+0x78>)
 8004546:	2206      	movs	r2, #6
 8004548:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <loraBegin+0x78>)
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <loraBegin+0x78>)
 8004552:	2200      	movs	r2, #0
 8004554:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <loraBegin+0x78>)
 8004558:	2200      	movs	r2, #0
 800455a:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <loraBegin+0x78>)
 800455e:	2200      	movs	r2, #0
 8004560:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <loraBegin+0x78>)
 8004564:	2219      	movs	r2, #25
 8004566:	721a      	strb	r2, [r3, #8]
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
#endif

    lora_configure(&e22_lora);
 8004568:	480a      	ldr	r0, [pc, #40]	; (8004594 <loraBegin+0x78>)
 800456a:	f7ff f99d 	bl	80038a8 <lora_configure>

    HAL_Delay(100);
 800456e:	2064      	movs	r0, #100	; 0x64
 8004570:	f001 fd88 	bl	8006084 <HAL_Delay>

	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800457a:	4805      	ldr	r0, [pc, #20]	; (8004590 <loraBegin+0x74>)
 800457c:	f003 f9f0 	bl	8007960 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004586:	4802      	ldr	r0, [pc, #8]	; (8004590 <loraBegin+0x74>)
 8004588:	f003 f9ea 	bl	8007960 <HAL_GPIO_WritePin>
}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40020800 	.word	0x40020800
 8004594:	20000728 	.word	0x20000728

08004598 <measurePower>:

void measurePower(power *guc_)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	ed2d 8b02 	vpush	{d8}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 80045a4:	4840      	ldr	r0, [pc, #256]	; (80046a8 <measurePower+0x110>)
 80045a6:	f001 fdd5 	bl	8006154 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80045aa:	210a      	movs	r1, #10
 80045ac:	483e      	ldr	r0, [pc, #248]	; (80046a8 <measurePower+0x110>)
 80045ae:	f001 fed6 	bl	800635e <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 80045b2:	483d      	ldr	r0, [pc, #244]	; (80046a8 <measurePower+0x110>)
 80045b4:	f001 ff5e 	bl	8006474 <HAL_ADC_GetValue>
 80045b8:	4603      	mov	r3, r0
 80045ba:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80045bc:	210a      	movs	r1, #10
 80045be:	483a      	ldr	r0, [pc, #232]	; (80046a8 <measurePower+0x110>)
 80045c0:	f001 fecd 	bl	800635e <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 80045c4:	4838      	ldr	r0, [pc, #224]	; (80046a8 <measurePower+0x110>)
 80045c6:	f001 ff55 	bl	8006474 <HAL_ADC_GetValue>
 80045ca:	4603      	mov	r3, r0
 80045cc:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 80045ce:	4836      	ldr	r0, [pc, #216]	; (80046a8 <measurePower+0x110>)
 80045d0:	f001 fe92 	bl	80062f8 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045de:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80046ac <measurePower+0x114>
 80045e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045e6:	eddf 6a32 	vldr	s13, [pc, #200]	; 80046b0 <measurePower+0x118>
 80045ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fe:	ee17 0a90 	vmov	r0, s15
 8004602:	f7fb ffd1 	bl	80005a8 <__aeabi_f2d>
 8004606:	a326      	add	r3, pc, #152	; (adr r3, 80046a0 <measurePower+0x108>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fc f824 	bl	8000658 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <measurePower+0x11c>)
 800461e:	f7fc f945 	bl	80008ac <__aeabi_ddiv>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f7fc fb0d 	bl	8000c48 <__aeabi_d2f>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	ed93 7a01 	vldr	s14, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004644:	f001 fd12 	bl	800606c <HAL_GetTick>
 8004648:	ee07 0a90 	vmov	s15, r0
 800464c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004650:	eddf 6a19 	vldr	s13, [pc, #100]	; 80046b8 <measurePower+0x120>
 8004654:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <measurePower+0x124>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004662:	ee28 7a27 	vmul.f32	s14, s16, s15
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	edd3 7a02 	vldr	s15, [r3, #8]
 800466c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 8004676:	f001 fcf9 	bl	800606c <HAL_GetTick>
 800467a:	ee07 0a90 	vmov	s15, r0
 800467e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004682:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80046b8 <measurePower+0x120>
 8004686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <measurePower+0x124>)
 800468c:	edc3 7a00 	vstr	s15, [r3]
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	ecbd 8b02 	vpop	{d8}
 800469a:	bd80      	pop	{r7, pc}
 800469c:	f3af 8000 	nop.w
 80046a0:	66666666 	.word	0x66666666
 80046a4:	402a6666 	.word	0x402a6666
 80046a8:	200002c4 	.word	0x200002c4
 80046ac:	454e4000 	.word	0x454e4000
 80046b0:	45800000 	.word	0x45800000
 80046b4:	40b00000 	.word	0x40b00000
 80046b8:	447a0000 	.word	0x447a0000
 80046bc:	200007e8 	.word	0x200007e8

080046c0 <getWatt>:

void getWatt()
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 80046c6:	f001 fcd1 	bl	800606c <HAL_GetTick>
 80046ca:	ee07 0a90 	vmov	s15, r0
 80046ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046d2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800471c <getWatt+0x5c>
 80046d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046da:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <getWatt+0x60>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80046e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ec:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <getWatt+0x60>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <getWatt+0x64>)
 80046f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80046fc:	ed97 7a00 	vldr	s14, [r7]
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	4b07      	ldr	r3, [pc, #28]	; (8004724 <getWatt+0x64>)
 8004706:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <getWatt+0x64>)
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	447a0000 	.word	0x447a0000
 8004720:	200007f0 	.word	0x200007f0
 8004724:	2000076c 	.word	0x2000076c

08004728 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d101      	bne.n	800473c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8004738:	f7fe fd88 	bl	800324c <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d106      	bne.n	8004750 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 8004742:	f7fe fd75 	bl	8003230 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_GPIO_EXTI_Callback+0x30>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_GPIO_EXTI_Callback+0x30>)
 800474e:	6013      	str	r3, [r2, #0]
    }
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200007f8 	.word	0x200007f8

0800475c <deploy_p_1>:

void deploy_p_1()
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 8004760:	2164      	movs	r1, #100	; 0x64
 8004762:	4804      	ldr	r0, [pc, #16]	; (8004774 <deploy_p_1+0x18>)
 8004764:	f7ff f818 	bl	8003798 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <deploy_p_1+0x1c>)
 800476a:	f7fe fffd 	bl	8003768 <ext_pin_open>
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000784 	.word	0x20000784
 8004778:	200007b4 	.word	0x200007b4

0800477c <deploy_p_2>:

void deploy_p_2()
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 8004780:	2164      	movs	r1, #100	; 0x64
 8004782:	4804      	ldr	r0, [pc, #16]	; (8004794 <deploy_p_2+0x18>)
 8004784:	f7ff f808 	bl	8003798 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8004788:	4803      	ldr	r0, [pc, #12]	; (8004798 <deploy_p_2+0x1c>)
 800478a:	f7fe ffed 	bl	8003768 <ext_pin_open>
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000794 	.word	0x20000794
 8004798:	200007b4 	.word	0x200007b4

0800479c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <Error_Handler+0x4c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	4911      	ldr	r1, [pc, #68]	; (80047ec <Error_Handler+0x50>)
 80047a8:	4811      	ldr	r0, [pc, #68]	; (80047f0 <Error_Handler+0x54>)
 80047aa:	f007 fe6d 	bl	800c488 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 80047ae:	4810      	ldr	r0, [pc, #64]	; (80047f0 <Error_Handler+0x54>)
 80047b0:	f7fb fd38 	bl	8000224 <strlen>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	23fa      	movs	r3, #250	; 0xfa
 80047ba:	490d      	ldr	r1, [pc, #52]	; (80047f0 <Error_Handler+0x54>)
 80047bc:	480d      	ldr	r0, [pc, #52]	; (80047f4 <Error_Handler+0x58>)
 80047be:	f005 fd18 	bl	800a1f2 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c2:	b672      	cpsid	i
}
 80047c4:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ca:	480b      	ldr	r0, [pc, #44]	; (80047f8 <Error_Handler+0x5c>)
 80047cc:	f003 f8e1 	bl	8007992 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80047d0:	2064      	movs	r0, #100	; 0x64
 80047d2:	f001 fc57 	bl	8006084 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047da:	4807      	ldr	r0, [pc, #28]	; (80047f8 <Error_Handler+0x5c>)
 80047dc:	f003 f8d9 	bl	8007992 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80047e0:	2064      	movs	r0, #100	; 0x64
 80047e2:	f001 fc4f 	bl	8006084 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047e6:	e7ee      	b.n	80047c6 <Error_Handler+0x2a>
 80047e8:	2000024c 	.word	0x2000024c
 80047ec:	080126b4 	.word	0x080126b4
 80047f0:	20000804 	.word	0x20000804
 80047f4:	20000418 	.word	0x20000418
 80047f8:	40020400 	.word	0x40020400

080047fc <updateQuaternion>:

extern backup_sram_datas_s *saved_datas;

float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af00      	add	r7, sp, #0
 8004802:	ed87 0a03 	vstr	s0, [r7, #12]
 8004806:	edc7 0a02 	vstr	s1, [r7, #8]
 800480a:	ed87 1a01 	vstr	s2, [r7, #4]
 800480e:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_datas->q[1] * gx - saved_datas->q[2] * gy - saved_datas->q[3] * gz);
 8004812:	4b9f      	ldr	r3, [pc, #636]	; (8004a90 <updateQuaternion+0x294>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	edd3 7a02 	vldr	s15, [r3, #8]
 800481a:	eeb1 7a67 	vneg.f32	s14, s15
 800481e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004826:	4b9a      	ldr	r3, [pc, #616]	; (8004a90 <updateQuaternion+0x294>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	edd3 6a03 	vldr	s13, [r3, #12]
 800482e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004836:	ee37 7a67 	vsub.f32	s14, s14, s15
 800483a:	4b95      	ldr	r3, [pc, #596]	; (8004a90 <updateQuaternion+0x294>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	edd3 6a04 	vldr	s13, [r3, #16]
 8004842:	edd7 7a01 	vldr	s15, [r7, #4]
 8004846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800484a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800484e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004856:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (saved_datas->q[0] * gx + saved_datas->q[2] * gz - saved_datas->q[3] * gy);
 800485a:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <updateQuaternion+0x294>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004862:	edd7 7a03 	vldr	s15, [r7, #12]
 8004866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800486a:	4b89      	ldr	r3, [pc, #548]	; (8004a90 <updateQuaternion+0x294>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004872:	edd7 7a01 	vldr	s15, [r7, #4]
 8004876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800487a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800487e:	4b84      	ldr	r3, [pc, #528]	; (8004a90 <updateQuaternion+0x294>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	edd3 6a04 	vldr	s13, [r3, #16]
 8004886:	edd7 7a02 	vldr	s15, [r7, #8]
 800488a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800488e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004892:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489a:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_datas->q[0] * gy - saved_datas->q[1] * gz + saved_datas->q[3] * gx);
 800489e:	4b7c      	ldr	r3, [pc, #496]	; (8004a90 <updateQuaternion+0x294>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80048a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80048aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ae:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <updateQuaternion+0x294>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80048b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048c2:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <updateQuaternion+0x294>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	edd3 6a04 	vldr	s13, [r3, #16]
 80048ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_datas->q[0] * gz + saved_datas->q[1] * gy - saved_datas->q[2] * gx);
 80048e2:	4b6b      	ldr	r3, [pc, #428]	; (8004a90 <updateQuaternion+0x294>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80048ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048f2:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <updateQuaternion+0x294>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80048fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80048fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004906:	4b62      	ldr	r3, [pc, #392]	; (8004a90 <updateQuaternion+0x294>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	edd3 6a03 	vldr	s13, [r3, #12]
 800490e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800491a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800491e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004922:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_datas->q[0] += qDot1 * dt;
 8004926:	4b5a      	ldr	r3, [pc, #360]	; (8004a90 <updateQuaternion+0x294>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	ed93 7a01 	vldr	s14, [r3, #4]
 800492e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004932:	edd7 7a00 	vldr	s15, [r7]
 8004936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800493a:	4b55      	ldr	r3, [pc, #340]	; (8004a90 <updateQuaternion+0x294>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004942:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] += qDot2 * dt;
 8004946:	4b52      	ldr	r3, [pc, #328]	; (8004a90 <updateQuaternion+0x294>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	ed93 7a02 	vldr	s14, [r3, #8]
 800494e:	edd7 6a08 	vldr	s13, [r7, #32]
 8004952:	edd7 7a00 	vldr	s15, [r7]
 8004956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800495a:	4b4d      	ldr	r3, [pc, #308]	; (8004a90 <updateQuaternion+0x294>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004962:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] += qDot3 * dt;
 8004966:	4b4a      	ldr	r3, [pc, #296]	; (8004a90 <updateQuaternion+0x294>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	ed93 7a03 	vldr	s14, [r3, #12]
 800496e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004972:	edd7 7a00 	vldr	s15, [r7]
 8004976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800497a:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <updateQuaternion+0x294>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004982:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] += qDot4 * dt;
 8004986:	4b42      	ldr	r3, [pc, #264]	; (8004a90 <updateQuaternion+0x294>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	ed93 7a04 	vldr	s14, [r3, #16]
 800498e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004992:	edd7 7a00 	vldr	s15, [r7]
 8004996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800499a:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <updateQuaternion+0x294>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a2:	edc3 7a04 	vstr	s15, [r3, #16]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_datas->q[0] * saved_datas->q[0] + saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3]);
 80049a6:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <updateQuaternion+0x294>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80049ae:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <updateQuaternion+0x294>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80049b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049ba:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <updateQuaternion+0x294>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	edd3 6a02 	vldr	s13, [r3, #8]
 80049c2:	4b33      	ldr	r3, [pc, #204]	; (8004a90 <updateQuaternion+0x294>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80049ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049d2:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <updateQuaternion+0x294>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80049da:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <updateQuaternion+0x294>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	edd3 7a03 	vldr	s15, [r3, #12]
 80049e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049ea:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <updateQuaternion+0x294>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	edd3 6a04 	vldr	s13, [r3, #16]
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <updateQuaternion+0x294>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80049fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a02:	ee17 0a90 	vmov	r0, s15
 8004a06:	f7fb fdcf 	bl	80005a8 <__aeabi_f2d>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	ec43 2b10 	vmov	d0, r2, r3
 8004a12:	f00c f859 	bl	8010ac8 <sqrt>
 8004a16:	ec53 2b10 	vmov	r2, r3, d0
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7fc f913 	bl	8000c48 <__aeabi_d2f>
 8004a22:	4603      	mov	r3, r0
 8004a24:	617b      	str	r3, [r7, #20]
  saved_datas->q[0] /= norm;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <updateQuaternion+0x294>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a2e:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <updateQuaternion+0x294>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3a:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] /= norm;
 8004a3e:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <updateQuaternion+0x294>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <updateQuaternion+0x294>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a52:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] /= norm;
 8004a56:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <updateQuaternion+0x294>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <updateQuaternion+0x294>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6a:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] /= norm;
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <updateQuaternion+0x294>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	edd3 6a04 	vldr	s13, [r3, #16]
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <updateQuaternion+0x294>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a82:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8004a86:	bf00      	nop
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000004 	.word	0x20000004
 8004a94:	00000000 	.word	0x00000000

08004a98 <quaternionToEuler>:

void quaternionToEuler(void) {
 8004a98:	b5b0      	push	{r4, r5, r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[3]), 1.0f - 2.0f * (saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2])) * (180.0 / M_PI);
 8004a9c:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004aa4:	4b70      	ldr	r3, [pc, #448]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ab0:	4b6d      	ldr	r3, [pc, #436]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ab8:	4b6b      	ldr	r3, [pc, #428]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004acc:	ee17 0a90 	vmov	r0, s15
 8004ad0:	f7fb fd6a 	bl	80005a8 <__aeabi_f2d>
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ae0:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aec:	4b5e      	ldr	r3, [pc, #376]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004af4:	4b5c      	ldr	r3, [pc, #368]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b10:	ee17 0a90 	vmov	r0, s15
 8004b14:	f7fb fd48 	bl	80005a8 <__aeabi_f2d>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	ec43 2b11 	vmov	d1, r2, r3
 8004b20:	ec45 4b10 	vmov	d0, r4, r5
 8004b24:	f00b ff5e 	bl	80109e4 <atan2>
 8004b28:	ec51 0b10 	vmov	r0, r1, d0
 8004b2c:	a34c      	add	r3, pc, #304	; (adr r3, 8004c60 <quaternionToEuler+0x1c8>)
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f7fb fd91 	bl	8000658 <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fc f883 	bl	8000c48 <__aeabi_d2f>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a49      	ldr	r2, [pc, #292]	; (8004c6c <quaternionToEuler+0x1d4>)
 8004b46:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_datas->q[0] * saved_datas->q[2] - saved_datas->q[3] * saved_datas->q[1])) * (180.0 / M_PI);
 8004b48:	4b47      	ldr	r3, [pc, #284]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b50:	4b45      	ldr	r3, [pc, #276]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b5c:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	edd3 6a04 	vldr	s13, [r3, #16]
 8004b64:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b78:	ee17 0a90 	vmov	r0, s15
 8004b7c:	f7fb fd14 	bl	80005a8 <__aeabi_f2d>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	ec43 2b10 	vmov	d0, r2, r3
 8004b88:	f00b fef8 	bl	801097c <asin>
 8004b8c:	ec51 0b10 	vmov	r0, r1, d0
 8004b90:	a333      	add	r3, pc, #204	; (adr r3, 8004c60 <quaternionToEuler+0x1c8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fd5f 	bl	8000658 <__aeabi_dmul>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7fc f851 	bl	8000c48 <__aeabi_d2f>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <quaternionToEuler+0x1d4>)
 8004baa:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[3] + saved_datas->q[1] * saved_datas->q[2]), 1.0f - 2.0f * (saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3])) * (180.0 / M_PI);
 8004bac:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bb4:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bc0:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004bdc:	ee17 0a90 	vmov	r0, s15
 8004be0:	f7fb fce2 	bl	80005a8 <__aeabi_f2d>
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	ed93 7a03 	vldr	s14, [r3, #12]
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	edd3 6a04 	vldr	s13, [r3, #16]
 8004c04:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <quaternionToEuler+0x1d0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c20:	ee17 0a90 	vmov	r0, s15
 8004c24:	f7fb fcc0 	bl	80005a8 <__aeabi_f2d>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	ec43 2b11 	vmov	d1, r2, r3
 8004c30:	ec45 4b10 	vmov	d0, r4, r5
 8004c34:	f00b fed6 	bl	80109e4 <atan2>
 8004c38:	ec51 0b10 	vmov	r0, r1, d0
 8004c3c:	a308      	add	r3, pc, #32	; (adr r3, 8004c60 <quaternionToEuler+0x1c8>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb fd09 	bl	8000658 <__aeabi_dmul>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7fb fffb 	bl	8000c48 <__aeabi_d2f>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <quaternionToEuler+0x1d4>)
 8004c56:	6093      	str	r3, [r2, #8]
}
 8004c58:	bf00      	nop
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5c:	f3af 8000 	nop.w
 8004c60:	1a63c1f8 	.word	0x1a63c1f8
 8004c64:	404ca5dc 	.word	0x404ca5dc
 8004c68:	20000004 	.word	0x20000004
 8004c6c:	20000900 	.word	0x20000900

08004c70 <quaternionToTheta>:


float quaternionToTheta(){
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af00      	add	r7, sp, #0

	float theta = 0.0;
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * saved_datas->q[1] * saved_datas->q[3] + 2 * saved_datas->q[2] * saved_datas->q[0];
 8004c7c:	4b5a      	ldr	r3, [pc, #360]	; (8004de8 <quaternionToTheta+0x178>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004c88:	4b57      	ldr	r3, [pc, #348]	; (8004de8 <quaternionToTheta+0x178>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c94:	4b54      	ldr	r3, [pc, #336]	; (8004de8 <quaternionToTheta+0x178>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ca0:	4b51      	ldr	r3, [pc, #324]	; (8004de8 <quaternionToTheta+0x178>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb0:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_datas->q[2] * saved_datas->q[3] - 2 * saved_datas->q[1] * saved_datas->q[0];
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	; (8004de8 <quaternionToTheta+0x178>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cbc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004cc0:	4b49      	ldr	r3, [pc, #292]	; (8004de8 <quaternionToTheta+0x178>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ccc:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <quaternionToTheta+0x178>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004cd8:	4b43      	ldr	r3, [pc, #268]	; (8004de8 <quaternionToTheta+0x178>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce8:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_datas->q[1] * saved_datas->q[1] - 2 * saved_datas->q[2] * saved_datas->q[2];
 8004cec:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <quaternionToTheta+0x178>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cf4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004cf8:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <quaternionToTheta+0x178>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <quaternionToTheta+0x178>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d18:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <quaternionToTheta+0x178>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d28:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 8004d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d5c:	ee17 0a90 	vmov	r0, s15
 8004d60:	f7fb fc22 	bl	80005a8 <__aeabi_f2d>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	ec43 2b10 	vmov	d0, r2, r3
 8004d6c:	f00b feac 	bl	8010ac8 <sqrt>
 8004d70:	ec53 2b10 	vmov	r2, r3, d0
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	f7fb ff66 	bl	8000c48 <__aeabi_d2f>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8004d80:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d84:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d8c:	ee16 0a90 	vmov	r0, s13
 8004d90:	f7fb fc0a 	bl	80005a8 <__aeabi_f2d>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	ec43 2b10 	vmov	d0, r2, r3
 8004d9c:	f00b fdba 	bl	8010914 <acos>
 8004da0:	ec51 0b10 	vmov	r0, r1, d0
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <quaternionToTheta+0x17c>)
 8004daa:	f7fb fc55 	bl	8000658 <__aeabi_dmul>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	a30a      	add	r3, pc, #40	; (adr r3, 8004de0 <quaternionToTheta+0x170>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb fd76 	bl	80008ac <__aeabi_ddiv>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7fb ff3e 	bl	8000c48 <__aeabi_d2f>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	ee07 3a90 	vmov	s15, r3
}
 8004dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004dda:	3728      	adds	r7, #40	; 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	51eb851f 	.word	0x51eb851f
 8004de4:	40091eb8 	.word	0x40091eb8
 8004de8:	20000004 	.word	0x20000004
 8004dec:	40668000 	.word	0x40668000

08004df0 <getInitialQuaternion>:



// İvmeölçerden başlangıç quaternioni hesaplama
static void getInitialQuaternion() {
 8004df0:	b5b0      	push	{r4, r5, r7, lr}
 8004df2:	b092      	sub	sp, #72	; 0x48
 8004df4:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8004df6:	4b99      	ldr	r3, [pc, #612]	; (800505c <getInitialQuaternion+0x26c>)
 8004df8:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8004dfc:	4b97      	ldr	r3, [pc, #604]	; (800505c <getInitialQuaternion+0x26c>)
 8004dfe:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e06:	4b95      	ldr	r3, [pc, #596]	; (800505c <getInitialQuaternion+0x26c>)
 8004e08:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 8004e0c:	4b93      	ldr	r3, [pc, #588]	; (800505c <getInitialQuaternion+0x26c>)
 8004e0e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8004e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e1a:	4b90      	ldr	r3, [pc, #576]	; (800505c <getInitialQuaternion+0x26c>)
 8004e1c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8004e20:	4b8e      	ldr	r3, [pc, #568]	; (800505c <getInitialQuaternion+0x26c>)
 8004e22:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e2e:	ee17 0a90 	vmov	r0, s15
 8004e32:	f7fb fbb9 	bl	80005a8 <__aeabi_f2d>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	ec43 2b10 	vmov	d0, r2, r3
 8004e3e:	f00b fe43 	bl	8010ac8 <sqrt>
 8004e42:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <getInitialQuaternion+0x26c>)
 8004e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb fbab 	bl	80005a8 <__aeabi_f2d>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 8004e5a:	4b80      	ldr	r3, [pc, #512]	; (800505c <getInitialQuaternion+0x26c>)
 8004e5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fb fba1 	bl	80005a8 <__aeabi_f2d>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 8004e6e:	4b7b      	ldr	r3, [pc, #492]	; (800505c <getInitialQuaternion+0x26c>)
 8004e70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fb fb97 	bl	80005a8 <__aeabi_f2d>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 8004e82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e8a:	f7fb fd0f 	bl	80008ac <__aeabi_ddiv>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8004e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e9e:	f7fb fd05 	bl	80008ac <__aeabi_ddiv>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 8004eaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb2:	f7fb fcfb 	bl	80008ac <__aeabi_ddiv>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8004ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	4966      	ldr	r1, [pc, #408]	; (8005060 <getInitialQuaternion+0x270>)
 8004ec8:	f7fb fa0e 	bl	80002e8 <__aeabi_dsub>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	ec43 2b17 	vmov	d7, r2, r3
 8004ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed8:	eef0 0a67 	vmov.f32	s1, s15
 8004edc:	f00b fdf4 	bl	8010ac8 <sqrt>
 8004ee0:	ec51 0b10 	vmov	r0, r1, d0
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	4b5e      	ldr	r3, [pc, #376]	; (8005064 <getInitialQuaternion+0x274>)
 8004eea:	f7fb fbb5 	bl	8000658 <__aeabi_dmul>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8004ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004efa:	f04f 0000 	mov.w	r0, #0
 8004efe:	4959      	ldr	r1, [pc, #356]	; (8005064 <getInitialQuaternion+0x274>)
 8004f00:	f7fb fcd4 	bl	80008ac <__aeabi_ddiv>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8004f0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f14:	f7fb fba0 	bl	8000658 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	4b4f      	ldr	r3, [pc, #316]	; (8005064 <getInitialQuaternion+0x274>)
 8004f26:	f7fb fb97 	bl	8000658 <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8004f32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f3a:	f7fb fb8d 	bl	8000658 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	4b46      	ldr	r3, [pc, #280]	; (8005064 <getInitialQuaternion+0x274>)
 8004f4c:	f7fb fb84 	bl	8000658 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8004f64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6c:	f7fb fb74 	bl	8000658 <__aeabi_dmul>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4614      	mov	r4, r2
 8004f76:	461d      	mov	r5, r3
 8004f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f80:	f7fb fb6a 	bl	8000658 <__aeabi_dmul>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb f9ae 	bl	80002ec <__adddf3>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	461d      	mov	r5, r3
 8004f98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fa0:	f7fb fb5a 	bl	8000658 <__aeabi_dmul>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4620      	mov	r0, r4
 8004faa:	4629      	mov	r1, r5
 8004fac:	f7fb f99e 	bl	80002ec <__adddf3>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	461d      	mov	r5, r3
 8004fb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fc0:	f7fb fb4a 	bl	8000658 <__aeabi_dmul>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4629      	mov	r1, r5
 8004fcc:	f7fb f98e 	bl	80002ec <__adddf3>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	ec43 2b17 	vmov	d7, r2, r3
 8004fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004fdc:	eef0 0a67 	vmov.f32	s1, s15
 8004fe0:	f00b fd72 	bl	8010ac8 <sqrt>
 8004fe4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    saved_datas->q[0] = q_temp[0] / norm;
 8004fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ff0:	f7fb fc5c 	bl	80008ac <__aeabi_ddiv>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	491b      	ldr	r1, [pc, #108]	; (8005068 <getInitialQuaternion+0x278>)
 8004ffa:	680c      	ldr	r4, [r1, #0]
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fe22 	bl	8000c48 <__aeabi_d2f>
 8005004:	4603      	mov	r3, r0
 8005006:	6063      	str	r3, [r4, #4]
    saved_datas->q[1] = q_temp[1] / norm;
 8005008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800500c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005010:	f7fb fc4c 	bl	80008ac <__aeabi_ddiv>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4913      	ldr	r1, [pc, #76]	; (8005068 <getInitialQuaternion+0x278>)
 800501a:	680c      	ldr	r4, [r1, #0]
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fe12 	bl	8000c48 <__aeabi_d2f>
 8005024:	4603      	mov	r3, r0
 8005026:	60a3      	str	r3, [r4, #8]
    saved_datas->q[2] = q_temp[2] / norm;
 8005028:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800502c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005030:	f7fb fc3c 	bl	80008ac <__aeabi_ddiv>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	490b      	ldr	r1, [pc, #44]	; (8005068 <getInitialQuaternion+0x278>)
 800503a:	680c      	ldr	r4, [r1, #0]
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	f7fb fe02 	bl	8000c48 <__aeabi_d2f>
 8005044:	4603      	mov	r3, r0
 8005046:	60e3      	str	r3, [r4, #12]
    saved_datas->q[3] = 0.0f;
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <getInitialQuaternion+0x278>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
}
 8005052:	bf00      	nop
 8005054:	3748      	adds	r7, #72	; 0x48
 8005056:	46bd      	mov	sp, r7
 8005058:	bdb0      	pop	{r4, r5, r7, pc}
 800505a:	bf00      	nop
 800505c:	20000650 	.word	0x20000650
 8005060:	3ff00000 	.word	0x3ff00000
 8005064:	3fe00000 	.word	0x3fe00000
 8005068:	20000004 	.word	0x20000004

0800506c <quaternionSet_zero>:



void quaternionSet_zero(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
	getInitialQuaternion();
 8005070:	f7ff febe 	bl	8004df0 <getInitialQuaternion>
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}

08005078 <save_time>:
	HAL_PWR_EnableBkUpAccess();
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, (uint32_t)status);
}

void save_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005078:	b084      	sub	sp, #16
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	f107 0c10 	add.w	ip, r7, #16
 8005084:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 800508c:	7c3b      	ldrb	r3, [r7, #16]
 800508e:	461a      	mov	r2, r3
 8005090:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005094:	fb03 f202 	mul.w	r2, r3, r2
 8005098:	7c7b      	ldrb	r3, [r7, #17]
 800509a:	4619      	mov	r1, r3
 800509c:	460b      	mov	r3, r1
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a5b      	subs	r3, r3, r1
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	7cba      	ldrb	r2, [r7, #18]
 80050a8:	4413      	add	r3, r2
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 80050b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <save_time+0x6c>)
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 80050c6:	f003 fc87 	bl	80089d8 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, seconds);
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	2102      	movs	r1, #2
 80050ce:	4806      	ldr	r0, [pc, #24]	; (80050e8 <save_time+0x70>)
 80050d0:	f004 ffe1 	bl	800a096 <HAL_RTCEx_BKUPWrite>
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050de:	b004      	add	sp, #16
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	00015180 	.word	0x00015180
 80050e8:	200003b4 	.word	0x200003b4

080050ec <measure_abs_time>:

uint32_t measure_abs_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 80050ec:	b084      	sub	sp, #16
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	f107 0c10 	add.w	ip, r7, #16
 80050f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005100:	7c3b      	ldrb	r3, [r7, #16]
 8005102:	461a      	mov	r2, r3
 8005104:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005108:	fb03 f202 	mul.w	r2, r3, r2
 800510c:	7c7b      	ldrb	r3, [r7, #17]
 800510e:	4619      	mov	r1, r3
 8005110:	460b      	mov	r3, r1
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	1a5b      	subs	r3, r3, r1
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	7cba      	ldrb	r2, [r7, #18]
 800511c:	4413      	add	r3, r2
 800511e:	461a      	mov	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005126:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800512a:	461a      	mov	r2, r3
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <measure_abs_time+0x78>)
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4413      	add	r3, r2
 8005138:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 800513a:	f003 fc4d 	bl	80089d8 <HAL_PWR_EnableBkUpAccess>
	uint32_t saved_seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 800513e:	2102      	movs	r1, #2
 8005140:	4809      	ldr	r0, [pc, #36]	; (8005168 <measure_abs_time+0x7c>)
 8005142:	f004 ffc2 	bl	800a0ca <HAL_RTCEx_BKUPRead>
 8005146:	6038      	str	r0, [r7, #0]
	return((uint32_t)abs((int32_t)seconds - (int32_t)saved_seconds));
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfb8      	it	lt
 8005152:	425b      	neglt	r3, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515e:	b004      	add	sp, #16
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	00015180 	.word	0x00015180
 8005168:	200003b4 	.word	0x200003b4

0800516c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_MspInit+0x4c>)
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	4a0f      	ldr	r2, [pc, #60]	; (80051b8 <HAL_MspInit+0x4c>)
 800517c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005180:	6453      	str	r3, [r2, #68]	; 0x44
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <HAL_MspInit+0x4c>)
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_MspInit+0x4c>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <HAL_MspInit+0x4c>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519c:	6413      	str	r3, [r2, #64]	; 0x40
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_MspInit+0x4c>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800

080051bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_ADC_MspInit+0x7c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d127      	bne.n	800522e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <HAL_ADC_MspInit+0x80>)
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_ADC_MspInit+0x80>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6453      	str	r3, [r2, #68]	; 0x44
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_ADC_MspInit+0x80>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_ADC_MspInit+0x80>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a0e      	ldr	r2, [pc, #56]	; (800523c <HAL_ADC_MspInit+0x80>)
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <HAL_ADC_MspInit+0x80>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8005216:	2306      	movs	r3, #6
 8005218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521a:	2303      	movs	r3, #3
 800521c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	4619      	mov	r1, r3
 8005228:	4805      	ldr	r0, [pc, #20]	; (8005240 <HAL_ADC_MspInit+0x84>)
 800522a:	f002 f911 	bl	8007450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800522e:	bf00      	nop
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40012000 	.word	0x40012000
 800523c:	40023800 	.word	0x40023800
 8005240:	40020800 	.word	0x40020800

08005244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	; 0x30
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 031c 	add.w	r3, r7, #28
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a42      	ldr	r2, [pc, #264]	; (800536c <HAL_I2C_MspInit+0x128>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d12c      	bne.n	80052c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	4b41      	ldr	r3, [pc, #260]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	4a40      	ldr	r2, [pc, #256]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	6313      	str	r3, [r2, #48]	; 0x30
 8005276:	4b3e      	ldr	r3, [pc, #248]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005282:	23c0      	movs	r3, #192	; 0xc0
 8005284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005286:	2312      	movs	r3, #18
 8005288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528e:	2303      	movs	r3, #3
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005292:	2304      	movs	r3, #4
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005296:	f107 031c 	add.w	r3, r7, #28
 800529a:	4619      	mov	r1, r3
 800529c:	4835      	ldr	r0, [pc, #212]	; (8005374 <HAL_I2C_MspInit+0x130>)
 800529e:	f002 f8d7 	bl	8007450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	4b32      	ldr	r3, [pc, #200]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	4a31      	ldr	r2, [pc, #196]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052b0:	6413      	str	r3, [r2, #64]	; 0x40
 80052b2:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80052be:	e050      	b.n	8005362 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <HAL_I2C_MspInit+0x134>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d14b      	bne.n	8005362 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a27      	ldr	r2, [pc, #156]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052d4:	f043 0304 	orr.w	r3, r3, #4
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	4b21      	ldr	r3, [pc, #132]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	4a20      	ldr	r2, [pc, #128]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6313      	str	r3, [r2, #48]	; 0x30
 80052f6:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005308:	2312      	movs	r3, #18
 800530a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005310:	2303      	movs	r3, #3
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005314:	2304      	movs	r3, #4
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005318:	f107 031c 	add.w	r3, r7, #28
 800531c:	4619      	mov	r1, r3
 800531e:	4817      	ldr	r0, [pc, #92]	; (800537c <HAL_I2C_MspInit+0x138>)
 8005320:	f002 f896 	bl	8007450 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800532a:	2312      	movs	r3, #18
 800532c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532e:	2300      	movs	r3, #0
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005332:	2303      	movs	r3, #3
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005336:	2304      	movs	r3, #4
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800533a:	f107 031c 	add.w	r3, r7, #28
 800533e:	4619      	mov	r1, r3
 8005340:	480f      	ldr	r0, [pc, #60]	; (8005380 <HAL_I2C_MspInit+0x13c>)
 8005342:	f002 f885 	bl	8007450 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a08      	ldr	r2, [pc, #32]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 8005350:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_I2C_MspInit+0x12c>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
}
 8005362:	bf00      	nop
 8005364:	3730      	adds	r7, #48	; 0x30
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40005400 	.word	0x40005400
 8005370:	40023800 	.word	0x40023800
 8005374:	40020400 	.word	0x40020400
 8005378:	40005c00 	.word	0x40005c00
 800537c:	40020800 	.word	0x40020800
 8005380:	40020000 	.word	0x40020000

08005384 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_I2C_MspDeInit+0x64>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10e      	bne.n	80053b4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <HAL_I2C_MspDeInit+0x68>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <HAL_I2C_MspDeInit+0x68>)
 800539c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80053a2:	2140      	movs	r1, #64	; 0x40
 80053a4:	4812      	ldr	r0, [pc, #72]	; (80053f0 <HAL_I2C_MspDeInit+0x6c>)
 80053a6:	f002 f9e7 	bl	8007778 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	4810      	ldr	r0, [pc, #64]	; (80053f0 <HAL_I2C_MspDeInit+0x6c>)
 80053ae:	f002 f9e3 	bl	8007778 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80053b2:	e014      	b.n	80053de <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a0e      	ldr	r2, [pc, #56]	; (80053f4 <HAL_I2C_MspDeInit+0x70>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10f      	bne.n	80053de <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_I2C_MspDeInit+0x68>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_I2C_MspDeInit+0x68>)
 80053c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80053ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ce:	480a      	ldr	r0, [pc, #40]	; (80053f8 <HAL_I2C_MspDeInit+0x74>)
 80053d0:	f002 f9d2 	bl	8007778 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80053d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053d8:	4808      	ldr	r0, [pc, #32]	; (80053fc <HAL_I2C_MspDeInit+0x78>)
 80053da:	f002 f9cd 	bl	8007778 <HAL_GPIO_DeInit>
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40005400 	.word	0x40005400
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020400 	.word	0x40020400
 80053f4:	40005c00 	.word	0x40005c00
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020000 	.word	0x40020000

08005400 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b09a      	sub	sp, #104	; 0x68
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	225c      	movs	r2, #92	; 0x5c
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f006 f9b1 	bl	800b778 <memset>
  if(hrtc->Instance==RTC)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a0c      	ldr	r2, [pc, #48]	; (800544c <HAL_RTC_MspInit+0x4c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d111      	bne.n	8005444 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005420:	2320      	movs	r3, #32
 8005422:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005428:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800542a:	f107 030c 	add.w	r3, r7, #12
 800542e:	4618      	mov	r0, r3
 8005430:	f003 fc76 	bl	8008d20 <HAL_RCCEx_PeriphCLKConfig>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800543a:	f7ff f9af 	bl	800479c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <HAL_RTC_MspInit+0x50>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005444:	bf00      	nop
 8005446:	3768      	adds	r7, #104	; 0x68
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40002800 	.word	0x40002800
 8005450:	42470e3c 	.word	0x42470e3c

08005454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a7f      	ldr	r2, [pc, #508]	; (8005670 <HAL_UART_MspInit+0x21c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f040 8092 	bne.w	800559c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005478:	2300      	movs	r3, #0
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <HAL_UART_MspInit+0x220>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	4a7c      	ldr	r2, [pc, #496]	; (8005674 <HAL_UART_MspInit+0x220>)
 8005482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005486:	6413      	str	r3, [r2, #64]	; 0x40
 8005488:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <HAL_UART_MspInit+0x220>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	4b76      	ldr	r3, [pc, #472]	; (8005674 <HAL_UART_MspInit+0x220>)
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	4a75      	ldr	r2, [pc, #468]	; (8005674 <HAL_UART_MspInit+0x220>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6313      	str	r3, [r2, #48]	; 0x30
 80054a4:	4b73      	ldr	r3, [pc, #460]	; (8005674 <HAL_UART_MspInit+0x220>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054b0:	2303      	movs	r3, #3
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054bc:	2303      	movs	r3, #3
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054c0:	2308      	movs	r3, #8
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c8:	4619      	mov	r1, r3
 80054ca:	486b      	ldr	r0, [pc, #428]	; (8005678 <HAL_UART_MspInit+0x224>)
 80054cc:	f001 ffc0 	bl	8007450 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80054d0:	4b6a      	ldr	r3, [pc, #424]	; (800567c <HAL_UART_MspInit+0x228>)
 80054d2:	4a6b      	ldr	r2, [pc, #428]	; (8005680 <HAL_UART_MspInit+0x22c>)
 80054d4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80054d6:	4b69      	ldr	r3, [pc, #420]	; (800567c <HAL_UART_MspInit+0x228>)
 80054d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054dc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054de:	4b67      	ldr	r3, [pc, #412]	; (800567c <HAL_UART_MspInit+0x228>)
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054e4:	4b65      	ldr	r3, [pc, #404]	; (800567c <HAL_UART_MspInit+0x228>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054ea:	4b64      	ldr	r3, [pc, #400]	; (800567c <HAL_UART_MspInit+0x228>)
 80054ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054f0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054f2:	4b62      	ldr	r3, [pc, #392]	; (800567c <HAL_UART_MspInit+0x228>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054f8:	4b60      	ldr	r3, [pc, #384]	; (800567c <HAL_UART_MspInit+0x228>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80054fe:	4b5f      	ldr	r3, [pc, #380]	; (800567c <HAL_UART_MspInit+0x228>)
 8005500:	2200      	movs	r2, #0
 8005502:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005504:	4b5d      	ldr	r3, [pc, #372]	; (800567c <HAL_UART_MspInit+0x228>)
 8005506:	2200      	movs	r2, #0
 8005508:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800550a:	4b5c      	ldr	r3, [pc, #368]	; (800567c <HAL_UART_MspInit+0x228>)
 800550c:	2200      	movs	r2, #0
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005510:	485a      	ldr	r0, [pc, #360]	; (800567c <HAL_UART_MspInit+0x228>)
 8005512:	f001 fb2f 	bl	8006b74 <HAL_DMA_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800551c:	f7ff f93e 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a56      	ldr	r2, [pc, #344]	; (800567c <HAL_UART_MspInit+0x228>)
 8005524:	635a      	str	r2, [r3, #52]	; 0x34
 8005526:	4a55      	ldr	r2, [pc, #340]	; (800567c <HAL_UART_MspInit+0x228>)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800552c:	4b55      	ldr	r3, [pc, #340]	; (8005684 <HAL_UART_MspInit+0x230>)
 800552e:	4a56      	ldr	r2, [pc, #344]	; (8005688 <HAL_UART_MspInit+0x234>)
 8005530:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005532:	4b54      	ldr	r3, [pc, #336]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005538:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800553a:	4b52      	ldr	r3, [pc, #328]	; (8005684 <HAL_UART_MspInit+0x230>)
 800553c:	2200      	movs	r2, #0
 800553e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005540:	4b50      	ldr	r3, [pc, #320]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005542:	2200      	movs	r2, #0
 8005544:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005546:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800554c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005550:	2200      	movs	r2, #0
 8005552:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005554:	4b4b      	ldr	r3, [pc, #300]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005556:	2200      	movs	r2, #0
 8005558:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <HAL_UART_MspInit+0x230>)
 800555c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005560:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005564:	2200      	movs	r2, #0
 8005566:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005568:	4b46      	ldr	r3, [pc, #280]	; (8005684 <HAL_UART_MspInit+0x230>)
 800556a:	2200      	movs	r2, #0
 800556c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800556e:	4845      	ldr	r0, [pc, #276]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005570:	f001 fb00 	bl	8006b74 <HAL_DMA_Init>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800557a:	f7ff f90f 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a40      	ldr	r2, [pc, #256]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
 8005584:	4a3f      	ldr	r2, [pc, #252]	; (8005684 <HAL_UART_MspInit+0x230>)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800558a:	2200      	movs	r2, #0
 800558c:	2100      	movs	r1, #0
 800558e:	2034      	movs	r0, #52	; 0x34
 8005590:	f001 faab 	bl	8006aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005594:	2034      	movs	r0, #52	; 0x34
 8005596:	f001 fac4 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800559a:	e0e4      	b.n	8005766 <HAL_UART_MspInit+0x312>
  else if(huart->Instance==USART1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3a      	ldr	r2, [pc, #232]	; (800568c <HAL_UART_MspInit+0x238>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d178      	bne.n	8005698 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	4b32      	ldr	r3, [pc, #200]	; (8005674 <HAL_UART_MspInit+0x220>)
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	4a31      	ldr	r2, [pc, #196]	; (8005674 <HAL_UART_MspInit+0x220>)
 80055b0:	f043 0310 	orr.w	r3, r3, #16
 80055b4:	6453      	str	r3, [r2, #68]	; 0x44
 80055b6:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <HAL_UART_MspInit+0x220>)
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <HAL_UART_MspInit+0x220>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	4a2a      	ldr	r2, [pc, #168]	; (8005674 <HAL_UART_MspInit+0x220>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6313      	str	r3, [r2, #48]	; 0x30
 80055d2:	4b28      	ldr	r3, [pc, #160]	; (8005674 <HAL_UART_MspInit+0x220>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80055de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e4:	2302      	movs	r3, #2
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ec:	2303      	movs	r3, #3
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055f0:	2307      	movs	r3, #7
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f8:	4619      	mov	r1, r3
 80055fa:	481f      	ldr	r0, [pc, #124]	; (8005678 <HAL_UART_MspInit+0x224>)
 80055fc:	f001 ff28 	bl	8007450 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005602:	4a24      	ldr	r2, [pc, #144]	; (8005694 <HAL_UART_MspInit+0x240>)
 8005604:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005606:	4b22      	ldr	r3, [pc, #136]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800560c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005610:	2240      	movs	r2, #64	; 0x40
 8005612:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <HAL_UART_MspInit+0x23c>)
 800561c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005620:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005622:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005624:	2200      	movs	r2, #0
 8005626:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_UART_MspInit+0x23c>)
 800562a:	2200      	movs	r2, #0
 800562c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005630:	2200      	movs	r2, #0
 8005632:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005636:	2200      	movs	r2, #0
 8005638:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_UART_MspInit+0x23c>)
 800563c:	2200      	movs	r2, #0
 800563e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005640:	4813      	ldr	r0, [pc, #76]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005642:	f001 fa97 	bl	8006b74 <HAL_DMA_Init>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800564c:	f7ff f8a6 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005654:	635a      	str	r2, [r3, #52]	; 0x34
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <HAL_UART_MspInit+0x23c>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800565c:	2200      	movs	r2, #0
 800565e:	2100      	movs	r1, #0
 8005660:	2025      	movs	r0, #37	; 0x25
 8005662:	f001 fa42 	bl	8006aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005666:	2025      	movs	r0, #37	; 0x25
 8005668:	f001 fa5b 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 800566c:	e07b      	b.n	8005766 <HAL_UART_MspInit+0x312>
 800566e:	bf00      	nop
 8005670:	40004c00 	.word	0x40004c00
 8005674:	40023800 	.word	0x40023800
 8005678:	40020000 	.word	0x40020000
 800567c:	200004a0 	.word	0x200004a0
 8005680:	40026070 	.word	0x40026070
 8005684:	20000500 	.word	0x20000500
 8005688:	40026040 	.word	0x40026040
 800568c:	40011000 	.word	0x40011000
 8005690:	20000560 	.word	0x20000560
 8005694:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a34      	ldr	r2, [pc, #208]	; (8005770 <HAL_UART_MspInit+0x31c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d161      	bne.n	8005766 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART2_CLK_ENABLE();
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	4b33      	ldr	r3, [pc, #204]	; (8005774 <HAL_UART_MspInit+0x320>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	4a32      	ldr	r2, [pc, #200]	; (8005774 <HAL_UART_MspInit+0x320>)
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b0:	6413      	str	r3, [r2, #64]	; 0x40
 80056b2:	4b30      	ldr	r3, [pc, #192]	; (8005774 <HAL_UART_MspInit+0x320>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <HAL_UART_MspInit+0x320>)
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	4a2b      	ldr	r2, [pc, #172]	; (8005774 <HAL_UART_MspInit+0x320>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6313      	str	r3, [r2, #48]	; 0x30
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <HAL_UART_MspInit+0x320>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056da:	230c      	movs	r3, #12
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e6:	2303      	movs	r3, #3
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056ea:	2307      	movs	r3, #7
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f2:	4619      	mov	r1, r3
 80056f4:	4820      	ldr	r0, [pc, #128]	; (8005778 <HAL_UART_MspInit+0x324>)
 80056f6:	f001 feab 	bl	8007450 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <HAL_UART_MspInit+0x328>)
 80056fc:	4a20      	ldr	r2, [pc, #128]	; (8005780 <HAL_UART_MspInit+0x32c>)
 80056fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005700:	4b1e      	ldr	r3, [pc, #120]	; (800577c <HAL_UART_MspInit+0x328>)
 8005702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005706:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005708:	4b1c      	ldr	r3, [pc, #112]	; (800577c <HAL_UART_MspInit+0x328>)
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_UART_MspInit+0x328>)
 8005710:	2200      	movs	r2, #0
 8005712:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_UART_MspInit+0x328>)
 8005716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800571a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <HAL_UART_MspInit+0x328>)
 800571e:	2200      	movs	r2, #0
 8005720:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005722:	4b16      	ldr	r3, [pc, #88]	; (800577c <HAL_UART_MspInit+0x328>)
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005728:	4b14      	ldr	r3, [pc, #80]	; (800577c <HAL_UART_MspInit+0x328>)
 800572a:	2200      	movs	r2, #0
 800572c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_UART_MspInit+0x328>)
 8005730:	2200      	movs	r2, #0
 8005732:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_UART_MspInit+0x328>)
 8005736:	2200      	movs	r2, #0
 8005738:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800573a:	4810      	ldr	r0, [pc, #64]	; (800577c <HAL_UART_MspInit+0x328>)
 800573c:	f001 fa1a 	bl	8006b74 <HAL_DMA_Init>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8005746:	f7ff f829 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a0b      	ldr	r2, [pc, #44]	; (800577c <HAL_UART_MspInit+0x328>)
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
 8005750:	4a0a      	ldr	r2, [pc, #40]	; (800577c <HAL_UART_MspInit+0x328>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005756:	2200      	movs	r2, #0
 8005758:	2101      	movs	r1, #1
 800575a:	2026      	movs	r0, #38	; 0x26
 800575c:	f001 f9c5 	bl	8006aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005760:	2026      	movs	r0, #38	; 0x26
 8005762:	f001 f9de 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 8005766:	bf00      	nop
 8005768:	3738      	adds	r7, #56	; 0x38
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40004400 	.word	0x40004400
 8005774:	40023800 	.word	0x40023800
 8005778:	40020000 	.word	0x40020000
 800577c:	200005c0 	.word	0x200005c0
 8005780:	40026088 	.word	0x40026088

08005784 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <HAL_UART_MspDeInit+0xac>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d117      	bne.n	80057c6 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8005796:	4b27      	ldr	r3, [pc, #156]	; (8005834 <HAL_UART_MspDeInit+0xb0>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4a26      	ldr	r2, [pc, #152]	; (8005834 <HAL_UART_MspDeInit+0xb0>)
 800579c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80057a2:	2103      	movs	r1, #3
 80057a4:	4824      	ldr	r0, [pc, #144]	; (8005838 <HAL_UART_MspDeInit+0xb4>)
 80057a6:	f001 ffe7 	bl	8007778 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa8e 	bl	8006cd0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fa89 	bl	8006cd0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80057be:	2034      	movs	r0, #52	; 0x34
 80057c0:	f001 f9bd 	bl	8006b3e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80057c4:	e02f      	b.n	8005826 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_UART_MspDeInit+0xb8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d113      	bne.n	80057f8 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <HAL_UART_MspDeInit+0xb0>)
 80057d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d4:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_UART_MspDeInit+0xb0>)
 80057d6:	f023 0310 	bic.w	r3, r3, #16
 80057da:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80057dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057e0:	4815      	ldr	r0, [pc, #84]	; (8005838 <HAL_UART_MspDeInit+0xb4>)
 80057e2:	f001 ffc9 	bl	8007778 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fa70 	bl	8006cd0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80057f0:	2025      	movs	r0, #37	; 0x25
 80057f2:	f001 f9a4 	bl	8006b3e <HAL_NVIC_DisableIRQ>
}
 80057f6:	e016      	b.n	8005826 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART2)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a10      	ldr	r2, [pc, #64]	; (8005840 <HAL_UART_MspDeInit+0xbc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d111      	bne.n	8005826 <HAL_UART_MspDeInit+0xa2>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005802:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <HAL_UART_MspDeInit+0xb0>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <HAL_UART_MspDeInit+0xb0>)
 8005808:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800580c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800580e:	210c      	movs	r1, #12
 8005810:	4809      	ldr	r0, [pc, #36]	; (8005838 <HAL_UART_MspDeInit+0xb4>)
 8005812:	f001 ffb1 	bl	8007778 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fa58 	bl	8006cd0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005820:	2026      	movs	r0, #38	; 0x26
 8005822:	f001 f98c 	bl	8006b3e <HAL_NVIC_DisableIRQ>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40004c00 	.word	0x40004c00
 8005834:	40023800 	.word	0x40023800
 8005838:	40020000 	.word	0x40020000
 800583c:	40011000 	.word	0x40011000
 8005840:	40004400 	.word	0x40004400

08005844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005848:	e7fe      	b.n	8005848 <NMI_Handler+0x4>

0800584a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800584e:	e7fe      	b.n	800584e <HardFault_Handler+0x4>

08005850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005854:	e7fe      	b.n	8005854 <MemManage_Handler+0x4>

08005856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800585a:	e7fe      	b.n	800585a <BusFault_Handler+0x4>

0800585c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005860:	e7fe      	b.n	8005860 <UsageFault_Handler+0x4>

08005862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005862:	b480      	push	{r7}
 8005864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800587e:	b480      	push	{r7}
 8005880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005890:	f000 fbd8 	bl	8006044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005894:	bf00      	nop
 8005896:	bd80      	pop	{r7, pc}

08005898 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 800589c:	2008      	movs	r0, #8
 800589e:	f002 f893 	bl	80079c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80058aa:	2010      	movs	r0, #16
 80058ac:	f002 f88c 	bl	80079c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80058b8:	4802      	ldr	r0, [pc, #8]	; (80058c4 <DMA1_Stream2_IRQHandler+0x10>)
 80058ba:	f001 fb51 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80058be:	bf00      	nop
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000500 	.word	0x20000500

080058c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80058cc:	4802      	ldr	r0, [pc, #8]	; (80058d8 <DMA1_Stream4_IRQHandler+0x10>)
 80058ce:	f001 fb47 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	200004a0 	.word	0x200004a0

080058dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80058e0:	4802      	ldr	r0, [pc, #8]	; (80058ec <DMA1_Stream5_IRQHandler+0x10>)
 80058e2:	f001 fb3d 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200005c0 	.word	0x200005c0

080058f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058f4:	4802      	ldr	r0, [pc, #8]	; (8005900 <USART1_IRQHandler+0x10>)
 80058f6:	f004 fdbd 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058fa:	bf00      	nop
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000418 	.word	0x20000418

08005904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005908:	4802      	ldr	r0, [pc, #8]	; (8005914 <USART2_IRQHandler+0x10>)
 800590a:	f004 fdb3 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	2000045c 	.word	0x2000045c

08005918 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800591c:	4802      	ldr	r0, [pc, #8]	; (8005928 <UART4_IRQHandler+0x10>)
 800591e:	f004 fda9 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200003d4 	.word	0x200003d4

0800592c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005930:	4802      	ldr	r0, [pc, #8]	; (800593c <DMA2_Stream7_IRQHandler+0x10>)
 8005932:	f001 fb15 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000560 	.word	0x20000560

08005940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
	return 1;
 8005944:	2301      	movs	r3, #1
}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <_kill>:

int _kill(int pid, int sig)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800595a:	f005 fee3 	bl	800b724 <__errno>
 800595e:	4603      	mov	r3, r0
 8005960:	2216      	movs	r2, #22
 8005962:	601a      	str	r2, [r3, #0]
	return -1;
 8005964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <_exit>:

void _exit (int status)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005978:	f04f 31ff 	mov.w	r1, #4294967295
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ffe7 	bl	8005950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005982:	e7fe      	b.n	8005982 <_exit+0x12>

08005984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e00a      	b.n	80059ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005996:	f3af 8000 	nop.w
 800599a:	4601      	mov	r1, r0
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	60ba      	str	r2, [r7, #8]
 80059a2:	b2ca      	uxtb	r2, r1
 80059a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3301      	adds	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	dbf0      	blt.n	8005996 <_read+0x12>
	}

return len;
 80059b4:	687b      	ldr	r3, [r7, #4]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e009      	b.n	80059e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	60ba      	str	r2, [r7, #8]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	3301      	adds	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	dbf1      	blt.n	80059d0 <_write+0x12>
	}
	return len;
 80059ec:	687b      	ldr	r3, [r7, #4]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_close>:

int _close(int file)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
	return -1;
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <_isatty>:

int _isatty(int file)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
	return 1;
 8005a36:	2301      	movs	r3, #1
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <_sbrk+0x5c>)
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <_sbrk+0x60>)
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <_sbrk+0x64>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a7c:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <_sbrk+0x64>)
 8005a7e:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <_sbrk+0x68>)
 8005a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <_sbrk+0x64>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d207      	bcs.n	8005aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a90:	f005 fe48 	bl	800b724 <__errno>
 8005a94:	4603      	mov	r3, r0
 8005a96:	220c      	movs	r2, #12
 8005a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	e009      	b.n	8005ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005aa0:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <_sbrk+0x64>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <_sbrk+0x64>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	4a05      	ldr	r2, [pc, #20]	; (8005ac4 <_sbrk+0x64>)
 8005ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20020000 	.word	0x20020000
 8005ac0:	00000400 	.word	0x00000400
 8005ac4:	2000090c 	.word	0x2000090c
 8005ac8:	20001238 	.word	0x20001238

08005acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <SystemInit+0x20>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	4a05      	ldr	r2, [pc, #20]	; (8005aec <SystemInit+0x20>)
 8005ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <HAL_UART_RxCpltCallback+0x40>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d105      	bne.n	8005b0c <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <HAL_UART_RxCpltCallback+0x44>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <HAL_UART_RxCpltCallback+0x48>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <HAL_UART_RxCpltCallback+0x4c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d109      	bne.n	8005b28 <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_UART_RxCpltCallback+0x50>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <HAL_UART_RxCpltCallback+0x54>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	4619      	mov	r1, r3
 8005b22:	4806      	ldr	r0, [pc, #24]	; (8005b3c <HAL_UART_RxCpltCallback+0x4c>)
 8005b24:	f004 fc76 	bl	800a414 <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	2000045c 	.word	0x2000045c
 8005b34:	20000910 	.word	0x20000910
 8005b38:	20000911 	.word	0x20000911
 8005b3c:	200003d4 	.word	0x200003d4
 8005b40:	20000780 	.word	0x20000780
 8005b44:	2000077c 	.word	0x2000077c

08005b48 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8005b50:	f240 228a 	movw	r2, #650	; 0x28a
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <UsrGpsL86Init+0x1c>)
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f004 fc5c 	bl	800a414 <HAL_UART_Receive_DMA>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	200009e8 	.word	0x200009e8

08005b68 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    getRmc();
 8005b70:	f000 f83a 	bl	8005be8 <getRmc>
    getGGA();
 8005b74:	f000 f95c 	bl	8005e30 <getGGA>
    if (rmcValidFlag)
 8005b78:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <Usr_GpsL86GetValues+0x74>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8005b82:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <Usr_GpsL86GetValues+0x74>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8005b88:	f000 f8e4 	bl	8005d54 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8005b8c:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8005b94:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8005ba4:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8005bbc:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <Usr_GpsL86GetValues+0x78>)
 8005bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8005bcc:	4805      	ldr	r0, [pc, #20]	; (8005be4 <Usr_GpsL86GetValues+0x7c>)
 8005bce:	f7ff ffbb 	bl	8005b48 <UsrGpsL86Init>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000912 	.word	0x20000912
 8005be0:	200011f0 	.word	0x200011f0
 8005be4:	2000045c 	.word	0x2000045c

08005be8 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af02      	add	r7, sp, #8
	if (g_GnssRx_Flag)
 8005bee:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <getRmc+0x130>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 808a 	beq.w	8005d0e <getRmc+0x126>
	    {
	        MsgIndex = 0;
 8005bfa:	4b48      	ldr	r3, [pc, #288]	; (8005d1c <getRmc+0x134>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005c00:	4947      	ldr	r1, [pc, #284]	; (8005d20 <getRmc+0x138>)
 8005c02:	4848      	ldr	r0, [pc, #288]	; (8005d24 <getRmc+0x13c>)
 8005c04:	f006 fcd1 	bl	800c5aa <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8005c08:	4947      	ldr	r1, [pc, #284]	; (8005d28 <getRmc+0x140>)
 8005c0a:	4846      	ldr	r0, [pc, #280]	; (8005d24 <getRmc+0x13c>)
 8005c0c:	f006 fcd5 	bl	800c5ba <strstr>
 8005c10:	4603      	mov	r3, r0
 8005c12:	4a46      	ldr	r2, [pc, #280]	; (8005d2c <getRmc+0x144>)
 8005c14:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8005c16:	4b45      	ldr	r3, [pc, #276]	; (8005d2c <getRmc+0x144>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b47      	cmp	r3, #71	; 0x47
 8005c1e:	d173      	bne.n	8005d08 <getRmc+0x120>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8005c20:	4b42      	ldr	r3, [pc, #264]	; (8005d2c <getRmc+0x144>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b3d      	ldr	r3, [pc, #244]	; (8005d1c <getRmc+0x134>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	7811      	ldrb	r1, [r2, #0]
 8005c2a:	4a41      	ldr	r2, [pc, #260]	; (8005d30 <getRmc+0x148>)
 8005c2c:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <getRmc+0x134>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	4a39      	ldr	r2, [pc, #228]	; (8005d1c <getRmc+0x134>)
 8005c36:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8005c38:	4b3c      	ldr	r3, [pc, #240]	; (8005d2c <getRmc+0x144>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <getRmc+0x134>)
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	441a      	add	r2, r3
 8005c42:	4b3a      	ldr	r3, [pc, #232]	; (8005d2c <getRmc+0x144>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8005c4a:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <getRmc+0x144>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b0a      	cmp	r3, #10
 8005c52:	d003      	beq.n	8005c5c <getRmc+0x74>
 8005c54:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <getRmc+0x134>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b5a      	cmp	r3, #90	; 0x5a
 8005c5a:	dde1      	ble.n	8005c20 <getRmc+0x38>
	                {
	                    MsgIndex = 0;
 8005c5c:	4b2f      	ldr	r3, [pc, #188]	; (8005d1c <getRmc+0x134>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
	                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8005c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c66:	2100      	movs	r1, #0
 8005c68:	482e      	ldr	r0, [pc, #184]	; (8005d24 <getRmc+0x13c>)
 8005c6a:	f005 fd85 	bl	800b778 <memset>
	                    memset(m_rxData, 0, sizeof(m_rxData));
 8005c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c72:	2100      	movs	r1, #0
 8005c74:	482a      	ldr	r0, [pc, #168]	; (8005d20 <getRmc+0x138>)
 8005c76:	f005 fd7f 	bl	800b778 <memset>

	                    for (int i = 0; i < 100; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	e014      	b.n	8005caa <getRmc+0xc2>
	                    {
	                        if (gpsPayload[i] == 'N')
 8005c80:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <getRmc+0x148>)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b4e      	cmp	r3, #78	; 0x4e
 8005c8a:	d102      	bne.n	8005c92 <getRmc+0xaa>
	                            f_northFlag = true;
 8005c8c:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <getRmc+0x14c>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 8005c92:	4a27      	ldr	r2, [pc, #156]	; (8005d30 <getRmc+0x148>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b45      	cmp	r3, #69	; 0x45
 8005c9c:	d102      	bne.n	8005ca4 <getRmc+0xbc>
	                            f_eastFlag = true;
 8005c9e:	4b26      	ldr	r3, [pc, #152]	; (8005d38 <getRmc+0x150>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	607b      	str	r3, [r7, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b63      	cmp	r3, #99	; 0x63
 8005cae:	dde7      	ble.n	8005c80 <getRmc+0x98>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8005cb0:	481f      	ldr	r0, [pc, #124]	; (8005d30 <getRmc+0x148>)
 8005cb2:	f7fa fab7 	bl	8000224 <strlen>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b0a      	cmp	r3, #10
 8005cba:	d91f      	bls.n	8005cfc <getRmc+0x114>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8005cbc:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <getRmc+0x150>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01f      	beq.n	8005d06 <getRmc+0x11e>
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <getRmc+0x14c>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01a      	beq.n	8005d06 <getRmc+0x11e>
	                        {
	                            f_northFlag = false;
 8005cd0:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <getRmc+0x14c>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <getRmc+0x150>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <getRmc+0x154>)
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <getRmc+0x158>)
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <getRmc+0x15c>)
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <getRmc+0x160>)
 8005ce8:	4918      	ldr	r1, [pc, #96]	; (8005d4c <getRmc+0x164>)
 8005cea:	4811      	ldr	r0, [pc, #68]	; (8005d30 <getRmc+0x148>)
 8005cec:	f006 fbec 	bl	800c4c8 <siscanf>
	                            rmcValidFlag = true;
 8005cf0:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <getRmc+0x168>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8005cf6:	f000 f82d 	bl	8005d54 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8005cfa:	e004      	b.n	8005d06 <getRmc+0x11e>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005cfc:	2264      	movs	r2, #100	; 0x64
 8005cfe:	2100      	movs	r1, #0
 8005d00:	480b      	ldr	r0, [pc, #44]	; (8005d30 <getRmc+0x148>)
 8005d02:	f005 fd39 	bl	800b778 <memset>
	                    break;
 8005d06:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <getRmc+0x130>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]

	    }

}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000910 	.word	0x20000910
 8005d1c:	20000918 	.word	0x20000918
 8005d20:	200009e8 	.word	0x200009e8
 8005d24:	20000de8 	.word	0x20000de8
 8005d28:	080126c8 	.word	0x080126c8
 8005d2c:	2000091c 	.word	0x2000091c
 8005d30:	20000920 	.word	0x20000920
 8005d34:	20000913 	.word	0x20000913
 8005d38:	20000914 	.word	0x20000914
 8005d3c:	200011f8 	.word	0x200011f8
 8005d40:	200011ec 	.word	0x200011ec
 8005d44:	200011e8 	.word	0x200011e8
 8005d48:	200011fc 	.word	0x200011fc
 8005d4c:	080126d0 	.word	0x080126d0
 8005d50:	20000912 	.word	0x20000912

08005d54 <formatLatLong>:

_io void formatLatLong(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <formatLatLong+0xc8>)
 8005d5c:	edd3 7a00 	vldr	s15, [r3]
 8005d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d64:	ee17 1a90 	vmov	r1, s15
 8005d68:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <formatLatLong+0xcc>)
 8005d6a:	fb83 2301 	smull	r2, r3, r3, r1
 8005d6e:	115a      	asrs	r2, r3, #5
 8005d70:	17cb      	asrs	r3, r1, #31
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8005d76:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <formatLatLong+0xc8>)
 8005d78:	ed93 7a00 	vldr	s14, [r3]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2264      	movs	r2, #100	; 0x64
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d90:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d9e:	edd7 6a00 	vldr	s13, [r7]
 8005da2:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8005e24 <formatLatLong+0xd0>
 8005da6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dae:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <formatLatLong+0xd4>)
 8005db0:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <formatLatLong+0xd8>)
 8005db6:	edd3 7a00 	vldr	s15, [r3]
 8005dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dbe:	ee17 1a90 	vmov	r1, s15
 8005dc2:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <formatLatLong+0xcc>)
 8005dc4:	fb83 2301 	smull	r2, r3, r3, r1
 8005dc8:	115a      	asrs	r2, r3, #5
 8005dca:	17cb      	asrs	r3, r1, #31
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8005dd0:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <formatLatLong+0xd8>)
 8005dd2:	ed93 7a00 	vldr	s14, [r3]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2264      	movs	r2, #100	; 0x64
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dea:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005df8:	edd7 6a00 	vldr	s13, [r7]
 8005dfc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8005e24 <formatLatLong+0xd0>
 8005e00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e08:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <formatLatLong+0xd4>)
 8005e0a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200011e8 	.word	0x200011e8
 8005e20:	51eb851f 	.word	0x51eb851f
 8005e24:	42700000 	.word	0x42700000
 8005e28:	200011f0 	.word	0x200011f0
 8005e2c:	200011ec 	.word	0x200011ec

08005e30 <getGGA>:

_io void getGGA(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8005e36:	4b34      	ldr	r3, [pc, #208]	; (8005f08 <getGGA+0xd8>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d060      	beq.n	8005f02 <getGGA+0xd2>
    {
        MsgIndex = 0;
 8005e40:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <getGGA+0xdc>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005e46:	4932      	ldr	r1, [pc, #200]	; (8005f10 <getGGA+0xe0>)
 8005e48:	4832      	ldr	r0, [pc, #200]	; (8005f14 <getGGA+0xe4>)
 8005e4a:	f006 fbae 	bl	800c5aa <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8005e4e:	4932      	ldr	r1, [pc, #200]	; (8005f18 <getGGA+0xe8>)
 8005e50:	4830      	ldr	r0, [pc, #192]	; (8005f14 <getGGA+0xe4>)
 8005e52:	f006 fbb2 	bl	800c5ba <strstr>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4a30      	ldr	r2, [pc, #192]	; (8005f1c <getGGA+0xec>)
 8005e5a:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8005e5c:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <getGGA+0xec>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b47      	cmp	r3, #71	; 0x47
 8005e64:	d14a      	bne.n	8005efc <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8005e66:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <getGGA+0xec>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <getGGA+0xdc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	7811      	ldrb	r1, [r2, #0]
 8005e70:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <getGGA+0xf0>)
 8005e72:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <getGGA+0xdc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <getGGA+0xdc>)
 8005e7c:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8005e7e:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <getGGA+0xec>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <getGGA+0xdc>)
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	441a      	add	r2, r3
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <getGGA+0xec>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8005e90:	4b22      	ldr	r3, [pc, #136]	; (8005f1c <getGGA+0xec>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b0a      	cmp	r3, #10
 8005e98:	d003      	beq.n	8005ea2 <getGGA+0x72>
 8005e9a:	4b1c      	ldr	r3, [pc, #112]	; (8005f0c <getGGA+0xdc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b5a      	cmp	r3, #90	; 0x5a
 8005ea0:	dde1      	ble.n	8005e66 <getGGA+0x36>
                {
                    MsgIndex = 0;
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <getGGA+0xdc>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8005ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eac:	2100      	movs	r1, #0
 8005eae:	4819      	ldr	r0, [pc, #100]	; (8005f14 <getGGA+0xe4>)
 8005eb0:	f005 fc62 	bl	800b778 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8005eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4815      	ldr	r0, [pc, #84]	; (8005f10 <getGGA+0xe0>)
 8005ebc:	f005 fc5c 	bl	800b778 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8005ec0:	4817      	ldr	r0, [pc, #92]	; (8005f20 <getGGA+0xf0>)
 8005ec2:	f7fa f9af 	bl	8000224 <strlen>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b0a      	cmp	r3, #10
 8005eca:	d912      	bls.n	8005ef2 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8005ecc:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <getGGA+0xf4>)
 8005ece:	9305      	str	r3, [sp, #20]
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <getGGA+0xf8>)
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <getGGA+0xfc>)
 8005ed6:	9303      	str	r3, [sp, #12]
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <getGGA+0x100>)
 8005eda:	9302      	str	r3, [sp, #8]
 8005edc:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <getGGA+0x104>)
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <getGGA+0x108>)
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <getGGA+0x10c>)
 8005ee6:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <getGGA+0x110>)
 8005ee8:	4916      	ldr	r1, [pc, #88]	; (8005f44 <getGGA+0x114>)
 8005eea:	480d      	ldr	r0, [pc, #52]	; (8005f20 <getGGA+0xf0>)
 8005eec:	f006 faec 	bl	800c4c8 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8005ef0:	e004      	b.n	8005efc <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005ef2:	2264      	movs	r2, #100	; 0x64
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4814      	ldr	r0, [pc, #80]	; (8005f48 <getGGA+0x118>)
 8005ef8:	f005 fc3e 	bl	800b778 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <getGGA+0xd8>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);
    }
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000911 	.word	0x20000911
 8005f0c:	20000918 	.word	0x20000918
 8005f10:	200009e8 	.word	0x200009e8
 8005f14:	20000de8 	.word	0x20000de8
 8005f18:	080126ec 	.word	0x080126ec
 8005f1c:	2000091c 	.word	0x2000091c
 8005f20:	20000984 	.word	0x20000984
 8005f24:	2000121c 	.word	0x2000121c
 8005f28:	20001218 	.word	0x20001218
 8005f2c:	20001214 	.word	0x20001214
 8005f30:	20001210 	.word	0x20001210
 8005f34:	2000120c 	.word	0x2000120c
 8005f38:	20001208 	.word	0x20001208
 8005f3c:	20001204 	.word	0x20001204
 8005f40:	20001200 	.word	0x20001200
 8005f44:	080126f4 	.word	0x080126f4
 8005f48:	20000920 	.word	0x20000920

08005f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f50:	480d      	ldr	r0, [pc, #52]	; (8005f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f52:	490e      	ldr	r1, [pc, #56]	; (8005f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f54:	4a0e      	ldr	r2, [pc, #56]	; (8005f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f58:	e002      	b.n	8005f60 <LoopCopyDataInit>

08005f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f5e:	3304      	adds	r3, #4

08005f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f64:	d3f9      	bcc.n	8005f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f66:	4a0b      	ldr	r2, [pc, #44]	; (8005f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f68:	4c0b      	ldr	r4, [pc, #44]	; (8005f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f6c:	e001      	b.n	8005f72 <LoopFillZerobss>

08005f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f70:	3204      	adds	r2, #4

08005f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f74:	d3fb      	bcc.n	8005f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f76:	f7ff fda9 	bl	8005acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f7a:	f005 fbd9 	bl	800b730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f7e:	f7fd fd03 	bl	8003988 <main>
  bx  lr    
 8005f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f8c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005f90:	08012cb8 	.word	0x08012cb8
  ldr r2, =_sbss
 8005f94:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005f98:	20001234 	.word	0x20001234

08005f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f9c:	e7fe      	b.n	8005f9c <ADC_IRQHandler>
	...

08005fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_Init+0x40>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <HAL_Init+0x40>)
 8005faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_Init+0x40>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_Init+0x40>)
 8005fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <HAL_Init+0x40>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_Init+0x40>)
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fc8:	2003      	movs	r0, #3
 8005fca:	f000 fd83 	bl	8006ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fce:	200f      	movs	r0, #15
 8005fd0:	f000 f808 	bl	8005fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fd4:	f7ff f8ca 	bl	800516c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023c00 	.word	0x40023c00

08005fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_InitTick+0x54>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <HAL_InitTick+0x58>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fda9 	bl	8006b5a <HAL_SYSTICK_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e00e      	b.n	8006030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d80a      	bhi.n	800602e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006018:	2200      	movs	r2, #0
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	f000 fd63 	bl	8006aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006024:	4a06      	ldr	r2, [pc, #24]	; (8006040 <HAL_InitTick+0x5c>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000008 	.word	0x20000008
 800603c:	20000010 	.word	0x20000010
 8006040:	2000000c 	.word	0x2000000c

08006044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_IncTick+0x20>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_IncTick+0x24>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4413      	add	r3, r2
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <HAL_IncTick+0x24>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000010 	.word	0x20000010
 8006068:	20001220 	.word	0x20001220

0800606c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return uwTick;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <HAL_GetTick+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20001220 	.word	0x20001220

08006084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800608c:	f7ff ffee 	bl	800606c <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d005      	beq.n	80060aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <HAL_Delay+0x44>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060aa:	bf00      	nop
 80060ac:	f7ff ffde 	bl	800606c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d8f7      	bhi.n	80060ac <HAL_Delay+0x28>
  {
  }
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000010 	.word	0x20000010

080060cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e033      	b.n	800614a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff f866 	bl	80051bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d118      	bne.n	800613c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006112:	f023 0302 	bic.w	r3, r3, #2
 8006116:	f043 0202 	orr.w	r2, r3, #2
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fae8 	bl	80066f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
 800613a:	e001      	b.n	8006140 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_ADC_Start+0x1a>
 800616a:	2302      	movs	r3, #2
 800616c:	e0b2      	b.n	80062d4 <HAL_ADC_Start+0x180>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d018      	beq.n	80061b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006194:	4b52      	ldr	r3, [pc, #328]	; (80062e0 <HAL_ADC_Start+0x18c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a52      	ldr	r2, [pc, #328]	; (80062e4 <HAL_ADC_Start+0x190>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	0c9a      	lsrs	r2, r3, #18
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80061a8:	e002      	b.n	80061b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f9      	bne.n	80061aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d17a      	bne.n	80062ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d106      	bne.n	8006212 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006208:	f023 0206 	bic.w	r2, r3, #6
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	645a      	str	r2, [r3, #68]	; 0x44
 8006210:	e002      	b.n	8006218 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_ADC_Start+0x194>)
 8006222:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800622c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2b00      	cmp	r3, #0
 8006238:	d12a      	bne.n	8006290 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <HAL_ADC_Start+0x198>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d015      	beq.n	8006270 <HAL_ADC_Start+0x11c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a29      	ldr	r2, [pc, #164]	; (80062f0 <HAL_ADC_Start+0x19c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d105      	bne.n	800625a <HAL_ADC_Start+0x106>
 800624e:	4b26      	ldr	r3, [pc, #152]	; (80062e8 <HAL_ADC_Start+0x194>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a25      	ldr	r2, [pc, #148]	; (80062f4 <HAL_ADC_Start+0x1a0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d136      	bne.n	80062d2 <HAL_ADC_Start+0x17e>
 8006264:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_ADC_Start+0x194>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	d130      	bne.n	80062d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d129      	bne.n	80062d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800628c:	609a      	str	r2, [r3, #8]
 800628e:	e020      	b.n	80062d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <HAL_ADC_Start+0x198>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d11b      	bne.n	80062d2 <HAL_ADC_Start+0x17e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d114      	bne.n	80062d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	e00b      	b.n	80062d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0210 	orr.w	r2, r3, #16
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f043 0201 	orr.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000008 	.word	0x20000008
 80062e4:	431bde83 	.word	0x431bde83
 80062e8:	40012300 	.word	0x40012300
 80062ec:	40012000 	.word	0x40012000
 80062f0:	40012100 	.word	0x40012100
 80062f4:	40012200 	.word	0x40012200

080062f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_ADC_Stop+0x16>
 800630a:	2302      	movs	r3, #2
 800630c:	e021      	b.n	8006352 <HAL_ADC_Stop+0x5a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	f043 0201 	orr.w	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d113      	bne.n	80063a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638a:	d10b      	bne.n	80063a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	f043 0220 	orr.w	r2, r3, #32
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e063      	b.n	800646c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80063a4:	f7ff fe62 	bl	800606c <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80063aa:	e021      	b.n	80063f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d01d      	beq.n	80063f0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_ADC_PollForConversion+0x6c>
 80063ba:	f7ff fe57 	bl	800606c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d212      	bcs.n	80063f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d00b      	beq.n	80063f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	f043 0204 	orr.w	r2, r3, #4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e03d      	b.n	800646c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d1d6      	bne.n	80063ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f06f 0212 	mvn.w	r2, #18
 8006406:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d123      	bne.n	800646a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11f      	bne.n	800646a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006442:	2b00      	cmp	r3, #0
 8006444:	d111      	bne.n	800646a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d105      	bne.n	800646a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0201 	orr.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_ADC_ConfigChannel+0x1c>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e113      	b.n	80066d4 <HAL_ADC_ConfigChannel+0x244>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d925      	bls.n	8006508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68d9      	ldr	r1, [r3, #12]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	4613      	mov	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	4413      	add	r3, r2
 80064d0:	3b1e      	subs	r3, #30
 80064d2:	2207      	movs	r2, #7
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	43da      	mvns	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	400a      	ands	r2, r1
 80064e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4618      	mov	r0, r3
 80064f4:	4603      	mov	r3, r0
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4403      	add	r3, r0
 80064fa:	3b1e      	subs	r3, #30
 80064fc:	409a      	lsls	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	e022      	b.n	800654e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6919      	ldr	r1, [r3, #16]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	4613      	mov	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	4413      	add	r3, r2
 800651c:	2207      	movs	r2, #7
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	43da      	mvns	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	400a      	ands	r2, r1
 800652a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6919      	ldr	r1, [r3, #16]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	4618      	mov	r0, r3
 800653e:	4603      	mov	r3, r0
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4403      	add	r3, r0
 8006544:	409a      	lsls	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b06      	cmp	r3, #6
 8006554:	d824      	bhi.n	80065a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	3b05      	subs	r3, #5
 8006568:	221f      	movs	r2, #31
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43da      	mvns	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	400a      	ands	r2, r1
 8006576:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	4618      	mov	r0, r3
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	3b05      	subs	r3, #5
 8006592:	fa00 f203 	lsl.w	r2, r0, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	635a      	str	r2, [r3, #52]	; 0x34
 800659e:	e04c      	b.n	800663a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b0c      	cmp	r3, #12
 80065a6:	d824      	bhi.n	80065f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	3b23      	subs	r3, #35	; 0x23
 80065ba:	221f      	movs	r2, #31
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43da      	mvns	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	400a      	ands	r2, r1
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	4618      	mov	r0, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	3b23      	subs	r3, #35	; 0x23
 80065e4:	fa00 f203 	lsl.w	r2, r0, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
 80065f0:	e023      	b.n	800663a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	3b41      	subs	r3, #65	; 0x41
 8006604:	221f      	movs	r2, #31
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	43da      	mvns	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	400a      	ands	r2, r1
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	4618      	mov	r0, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	3b41      	subs	r3, #65	; 0x41
 800662e:	fa00 f203 	lsl.w	r2, r0, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800663a:	4b29      	ldr	r3, [pc, #164]	; (80066e0 <HAL_ADC_ConfigChannel+0x250>)
 800663c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <HAL_ADC_ConfigChannel+0x254>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10f      	bne.n	8006668 <HAL_ADC_ConfigChannel+0x1d8>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b12      	cmp	r3, #18
 800664e:	d10b      	bne.n	8006668 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <HAL_ADC_ConfigChannel+0x254>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d12b      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x23a>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <HAL_ADC_ConfigChannel+0x258>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <HAL_ADC_ConfigChannel+0x1f4>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b11      	cmp	r3, #17
 8006682:	d122      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a11      	ldr	r2, [pc, #68]	; (80066e8 <HAL_ADC_ConfigChannel+0x258>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d111      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80066a6:	4b11      	ldr	r3, [pc, #68]	; (80066ec <HAL_ADC_ConfigChannel+0x25c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <HAL_ADC_ConfigChannel+0x260>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	0c9a      	lsrs	r2, r3, #18
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80066bc:	e002      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f9      	bne.n	80066be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40012300 	.word	0x40012300
 80066e4:	40012000 	.word	0x40012000
 80066e8:	10000012 	.word	0x10000012
 80066ec:	20000008 	.word	0x20000008
 80066f0:	431bde83 	.word	0x431bde83

080066f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066fc:	4b79      	ldr	r3, [pc, #484]	; (80068e4 <ADC_Init+0x1f0>)
 80066fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	431a      	orrs	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	021a      	lsls	r2, r3, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800674c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6859      	ldr	r1, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800676e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	4a58      	ldr	r2, [pc, #352]	; (80068e8 <ADC_Init+0x1f4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800679a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6899      	ldr	r1, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	609a      	str	r2, [r3, #8]
 80067d0:	e00f      	b.n	80067f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0202 	bic.w	r2, r2, #2
 8006800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6899      	ldr	r1, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7e1b      	ldrb	r3, [r3, #24]
 800680c:	005a      	lsls	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800683e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6859      	ldr	r1, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	3b01      	subs	r3, #1
 800684c:	035a      	lsls	r2, r3, #13
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	e007      	b.n	8006868 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	3b01      	subs	r3, #1
 8006884:	051a      	lsls	r2, r3, #20
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800689c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6899      	ldr	r1, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068aa:	025a      	lsls	r2, r3, #9
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6899      	ldr	r1, [r3, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	029a      	lsls	r2, r3, #10
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40012300 	.word	0x40012300
 80068e8:	0f000001 	.word	0x0f000001

080068ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <__NVIC_SetPriorityGrouping+0x44>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006908:	4013      	ands	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800691c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800691e:	4a04      	ldr	r2, [pc, #16]	; (8006930 <__NVIC_SetPriorityGrouping+0x44>)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	60d3      	str	r3, [r2, #12]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	e000ed00 	.word	0xe000ed00

08006934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <__NVIC_GetPriorityGrouping+0x18>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	f003 0307 	and.w	r3, r3, #7
}
 8006942:	4618      	mov	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	e000ed00 	.word	0xe000ed00

08006950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	2b00      	cmp	r3, #0
 8006960:	db0b      	blt.n	800697a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	f003 021f 	and.w	r2, r3, #31
 8006968:	4907      	ldr	r1, [pc, #28]	; (8006988 <__NVIC_EnableIRQ+0x38>)
 800696a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	2001      	movs	r0, #1
 8006972:	fa00 f202 	lsl.w	r2, r0, r2
 8006976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e100 	.word	0xe000e100

0800698c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699a:	2b00      	cmp	r3, #0
 800699c:	db12      	blt.n	80069c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	f003 021f 	and.w	r2, r3, #31
 80069a4:	490a      	ldr	r1, [pc, #40]	; (80069d0 <__NVIC_DisableIRQ+0x44>)
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	2001      	movs	r0, #1
 80069ae:	fa00 f202 	lsl.w	r2, r0, r2
 80069b2:	3320      	adds	r3, #32
 80069b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80069b8:	f3bf 8f4f 	dsb	sy
}
 80069bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80069be:	f3bf 8f6f 	isb	sy
}
 80069c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	e000e100 	.word	0xe000e100

080069d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	db0a      	blt.n	80069fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	490c      	ldr	r1, [pc, #48]	; (8006a20 <__NVIC_SetPriority+0x4c>)
 80069ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f2:	0112      	lsls	r2, r2, #4
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	440b      	add	r3, r1
 80069f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069fc:	e00a      	b.n	8006a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	4908      	ldr	r1, [pc, #32]	; (8006a24 <__NVIC_SetPriority+0x50>)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	3b04      	subs	r3, #4
 8006a0c:	0112      	lsls	r2, r2, #4
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	440b      	add	r3, r1
 8006a12:	761a      	strb	r2, [r3, #24]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000e100 	.word	0xe000e100
 8006a24:	e000ed00 	.word	0xe000ed00

08006a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f1c3 0307 	rsb	r3, r3, #7
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	bf28      	it	cs
 8006a46:	2304      	movcs	r3, #4
 8006a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	2b06      	cmp	r3, #6
 8006a50:	d902      	bls.n	8006a58 <NVIC_EncodePriority+0x30>
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3b03      	subs	r3, #3
 8006a56:	e000      	b.n	8006a5a <NVIC_EncodePriority+0x32>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43da      	mvns	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a70:	f04f 31ff 	mov.w	r1, #4294967295
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7a:	43d9      	mvns	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a80:	4313      	orrs	r3, r2
         );
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3724      	adds	r7, #36	; 0x24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aa0:	d301      	bcc.n	8006aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e00f      	b.n	8006ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <SysTick_Config+0x40>)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006aae:	210f      	movs	r1, #15
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	f7ff ff8e 	bl	80069d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <SysTick_Config+0x40>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006abe:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <SysTick_Config+0x40>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	e000e010 	.word	0xe000e010

08006ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff05 	bl	80068ec <__NVIC_SetPriorityGrouping>
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4603      	mov	r3, r0
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006afc:	f7ff ff1a 	bl	8006934 <__NVIC_GetPriorityGrouping>
 8006b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff ff8e 	bl	8006a28 <NVIC_EncodePriority>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff5d 	bl	80069d4 <__NVIC_SetPriority>
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ff0d 	bl	8006950 <__NVIC_EnableIRQ>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	4603      	mov	r3, r0
 8006b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff ff1d 	bl	800698c <__NVIC_DisableIRQ>
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff ff94 	bl	8006a90 <SysTick_Config>
 8006b68:	4603      	mov	r3, r0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b80:	f7ff fa74 	bl	800606c <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e099      	b.n	8006cc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0201 	bic.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bb0:	e00f      	b.n	8006bd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bb2:	f7ff fa5b 	bl	800606c <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b05      	cmp	r3, #5
 8006bbe:	d908      	bls.n	8006bd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2203      	movs	r2, #3
 8006bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e078      	b.n	8006cc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e8      	bne.n	8006bb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4b38      	ldr	r3, [pc, #224]	; (8006ccc <HAL_DMA_Init+0x158>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d107      	bne.n	8006c3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	4313      	orrs	r3, r2
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 0307 	bic.w	r3, r3, #7
 8006c52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d117      	bne.n	8006c96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb6d 	bl	8007358 <DMA_CheckFifoParam>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c92:	2301      	movs	r3, #1
 8006c94:	e016      	b.n	8006cc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb24 	bl	80072ec <DMA_CalcBaseAndBitshift>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cac:	223f      	movs	r2, #63	; 0x3f
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	f010803f 	.word	0xf010803f

08006cd0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e050      	b.n	8006d84 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d101      	bne.n	8006cf2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e048      	b.n	8006d84 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2221      	movs	r2, #33	; 0x21
 8006d30:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fada 	bl	80072ec <DMA_CalcBaseAndBitshift>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	223f      	movs	r2, #63	; 0x3f
 8006d66:	409a      	lsls	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_DMA_Start_IT+0x26>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e040      	b.n	8006e34 <HAL_DMA_Start_IT+0xa8>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d12f      	bne.n	8006e26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 fa58 	bl	8007290 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de4:	223f      	movs	r2, #63	; 0x3f
 8006de6:	409a      	lsls	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0216 	orr.w	r2, r2, #22
 8006dfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0208 	orr.w	r2, r2, #8
 8006e12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e005      	b.n	8006e32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e2e:	2302      	movs	r3, #2
 8006e30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e4a:	f7ff f90f 	bl	800606c <HAL_GetTick>
 8006e4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d008      	beq.n	8006e6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e052      	b.n	8006f14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0216 	bic.w	r2, r2, #22
 8006e7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	695a      	ldr	r2, [r3, #20]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <HAL_DMA_Abort+0x62>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0208 	bic.w	r2, r2, #8
 8006eac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ebe:	e013      	b.n	8006ee8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ec0:	f7ff f8d4 	bl	800606c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	d90c      	bls.n	8006ee8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e015      	b.n	8006f14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e4      	bne.n	8006ec0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	409a      	lsls	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d004      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2280      	movs	r2, #128	; 0x80
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e00c      	b.n	8006f54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2205      	movs	r2, #5
 8006f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f6c:	4b8e      	ldr	r3, [pc, #568]	; (80071a8 <HAL_DMA_IRQHandler+0x248>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a8e      	ldr	r2, [pc, #568]	; (80071ac <HAL_DMA_IRQHandler+0x24c>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	0a9b      	lsrs	r3, r3, #10
 8006f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8a:	2208      	movs	r2, #8
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01a      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d013      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0204 	bic.w	r2, r2, #4
 8006fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb8:	2208      	movs	r2, #8
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc4:	f043 0201 	orr.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	409a      	lsls	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d012      	beq.n	8007002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fee:	2201      	movs	r2, #1
 8006ff0:	409a      	lsls	r2, r3
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f043 0202 	orr.w	r2, r3, #2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	2204      	movs	r2, #4
 8007008:	409a      	lsls	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4013      	ands	r3, r2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d012      	beq.n	8007038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007024:	2204      	movs	r2, #4
 8007026:	409a      	lsls	r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	f043 0204 	orr.w	r2, r3, #4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800703c:	2210      	movs	r2, #16
 800703e:	409a      	lsls	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d043      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d03c      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705a:	2210      	movs	r2, #16
 800705c:	409a      	lsls	r2, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d018      	beq.n	80070a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d108      	bne.n	8007090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d024      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	e01f      	b.n	80070d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01b      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
 80070a0:	e016      	b.n	80070d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0208 	bic.w	r2, r2, #8
 80070be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d4:	2220      	movs	r2, #32
 80070d6:	409a      	lsls	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 808f 	beq.w	8007200 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8087 	beq.w	8007200 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f6:	2220      	movs	r2, #32
 80070f8:	409a      	lsls	r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b05      	cmp	r3, #5
 8007108:	d136      	bne.n	8007178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0216 	bic.w	r2, r2, #22
 8007118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <HAL_DMA_IRQHandler+0x1da>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0208 	bic.w	r2, r2, #8
 8007148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714e:	223f      	movs	r2, #63	; 0x3f
 8007150:	409a      	lsls	r2, r3
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716a:	2b00      	cmp	r3, #0
 800716c:	d07e      	beq.n	800726c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
        }
        return;
 8007176:	e079      	b.n	800726c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01d      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10d      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007198:	2b00      	cmp	r3, #0
 800719a:	d031      	beq.n	8007200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
 80071a4:	e02c      	b.n	8007200 <HAL_DMA_IRQHandler+0x2a0>
 80071a6:	bf00      	nop
 80071a8:	20000008 	.word	0x20000008
 80071ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d023      	beq.n	8007200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
 80071c0:	e01e      	b.n	8007200 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10f      	bne.n	80071f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0210 	bic.w	r2, r2, #16
 80071de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007204:	2b00      	cmp	r3, #0
 8007206:	d032      	beq.n	800726e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d022      	beq.n	800725a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2205      	movs	r2, #5
 8007218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	3301      	adds	r3, #1
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	429a      	cmp	r2, r3
 8007236:	d307      	bcc.n	8007248 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f2      	bne.n	800722c <HAL_DMA_IRQHandler+0x2cc>
 8007246:	e000      	b.n	800724a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007248:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
 800726a:	e000      	b.n	800726e <HAL_DMA_IRQHandler+0x30e>
        return;
 800726c:	bf00      	nop
    }
  }
}
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007282:	b2db      	uxtb	r3, r3
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d108      	bne.n	80072d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072ce:	e007      	b.n	80072e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	60da      	str	r2, [r3, #12]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	3b10      	subs	r3, #16
 80072fc:	4a14      	ldr	r2, [pc, #80]	; (8007350 <DMA_CalcBaseAndBitshift+0x64>)
 80072fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007302:	091b      	lsrs	r3, r3, #4
 8007304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007306:	4a13      	ldr	r2, [pc, #76]	; (8007354 <DMA_CalcBaseAndBitshift+0x68>)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d909      	bls.n	800732e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	1d1a      	adds	r2, r3, #4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	659a      	str	r2, [r3, #88]	; 0x58
 800732c:	e007      	b.n	800733e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	aaaaaaab 	.word	0xaaaaaaab
 8007354:	08012740 	.word	0x08012740

08007358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11f      	bne.n	80073b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d856      	bhi.n	8007426 <DMA_CheckFifoParam+0xce>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <DMA_CheckFifoParam+0x28>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007391 	.word	0x08007391
 8007384:	080073a3 	.word	0x080073a3
 8007388:	08007391 	.word	0x08007391
 800738c:	08007427 	.word	0x08007427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d046      	beq.n	800742a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073a0:	e043      	b.n	800742a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073aa:	d140      	bne.n	800742e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073b0:	e03d      	b.n	800742e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ba:	d121      	bne.n	8007400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d837      	bhi.n	8007432 <DMA_CheckFifoParam+0xda>
 80073c2:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <DMA_CheckFifoParam+0x70>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073df 	.word	0x080073df
 80073d0:	080073d9 	.word	0x080073d9
 80073d4:	080073f1 	.word	0x080073f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
      break;
 80073dc:	e030      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d025      	beq.n	8007436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ee:	e022      	b.n	8007436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073f8:	d11f      	bne.n	800743a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073fe:	e01c      	b.n	800743a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d903      	bls.n	800740e <DMA_CheckFifoParam+0xb6>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d003      	beq.n	8007414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800740c:	e018      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
      break;
 8007412:	e015      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
      break;
 8007424:	e00b      	b.n	800743e <DMA_CheckFifoParam+0xe6>
      break;
 8007426:	bf00      	nop
 8007428:	e00a      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      break;
 800742a:	bf00      	nop
 800742c:	e008      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      break;
 800742e:	bf00      	nop
 8007430:	e006      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      break;
 8007432:	bf00      	nop
 8007434:	e004      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      break;
 8007436:	bf00      	nop
 8007438:	e002      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      break;   
 800743a:	bf00      	nop
 800743c:	e000      	b.n	8007440 <DMA_CheckFifoParam+0xe8>
      break;
 800743e:	bf00      	nop
    }
  } 
  
  return status; 
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop

08007450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007450:	b480      	push	{r7}
 8007452:	b089      	sub	sp, #36	; 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800745e:	2300      	movs	r3, #0
 8007460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007462:	2300      	movs	r3, #0
 8007464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e165      	b.n	8007738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800746c:	2201      	movs	r2, #1
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	fa02 f303 	lsl.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	429a      	cmp	r2, r3
 8007486:	f040 8154 	bne.w	8007732 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b01      	cmp	r3, #1
 8007494:	d005      	beq.n	80074a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d130      	bne.n	8007504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	2203      	movs	r2, #3
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074d8:	2201      	movs	r2, #1
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	43db      	mvns	r3, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4013      	ands	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	091b      	lsrs	r3, r3, #4
 80074ee:	f003 0201 	and.w	r2, r3, #1
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	2b03      	cmp	r3, #3
 800750e:	d017      	beq.n	8007540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	2203      	movs	r2, #3
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	43db      	mvns	r3, r3
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	4013      	ands	r3, r2
 8007526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	4313      	orrs	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f003 0303 	and.w	r3, r3, #3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d123      	bne.n	8007594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	08da      	lsrs	r2, r3, #3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3208      	adds	r2, #8
 8007554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	220f      	movs	r2, #15
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	43db      	mvns	r3, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4013      	ands	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4313      	orrs	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	08da      	lsrs	r2, r3, #3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3208      	adds	r2, #8
 800758e:	69b9      	ldr	r1, [r7, #24]
 8007590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	2203      	movs	r2, #3
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	43db      	mvns	r3, r3
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	4013      	ands	r3, r2
 80075aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 0203 	and.w	r2, r3, #3
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4313      	orrs	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 80ae 	beq.w	8007732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	4b5d      	ldr	r3, [pc, #372]	; (8007750 <HAL_GPIO_Init+0x300>)
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	4a5c      	ldr	r2, [pc, #368]	; (8007750 <HAL_GPIO_Init+0x300>)
 80075e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075e4:	6453      	str	r3, [r2, #68]	; 0x44
 80075e6:	4b5a      	ldr	r3, [pc, #360]	; (8007750 <HAL_GPIO_Init+0x300>)
 80075e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075f2:	4a58      	ldr	r2, [pc, #352]	; (8007754 <HAL_GPIO_Init+0x304>)
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	089b      	lsrs	r3, r3, #2
 80075f8:	3302      	adds	r3, #2
 80075fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	220f      	movs	r2, #15
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	43db      	mvns	r3, r3
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	4013      	ands	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a4f      	ldr	r2, [pc, #316]	; (8007758 <HAL_GPIO_Init+0x308>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d025      	beq.n	800766a <HAL_GPIO_Init+0x21a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a4e      	ldr	r2, [pc, #312]	; (800775c <HAL_GPIO_Init+0x30c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01f      	beq.n	8007666 <HAL_GPIO_Init+0x216>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a4d      	ldr	r2, [pc, #308]	; (8007760 <HAL_GPIO_Init+0x310>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d019      	beq.n	8007662 <HAL_GPIO_Init+0x212>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a4c      	ldr	r2, [pc, #304]	; (8007764 <HAL_GPIO_Init+0x314>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_GPIO_Init+0x20e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a4b      	ldr	r2, [pc, #300]	; (8007768 <HAL_GPIO_Init+0x318>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00d      	beq.n	800765a <HAL_GPIO_Init+0x20a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a4a      	ldr	r2, [pc, #296]	; (800776c <HAL_GPIO_Init+0x31c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d007      	beq.n	8007656 <HAL_GPIO_Init+0x206>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a49      	ldr	r2, [pc, #292]	; (8007770 <HAL_GPIO_Init+0x320>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d101      	bne.n	8007652 <HAL_GPIO_Init+0x202>
 800764e:	2306      	movs	r3, #6
 8007650:	e00c      	b.n	800766c <HAL_GPIO_Init+0x21c>
 8007652:	2307      	movs	r3, #7
 8007654:	e00a      	b.n	800766c <HAL_GPIO_Init+0x21c>
 8007656:	2305      	movs	r3, #5
 8007658:	e008      	b.n	800766c <HAL_GPIO_Init+0x21c>
 800765a:	2304      	movs	r3, #4
 800765c:	e006      	b.n	800766c <HAL_GPIO_Init+0x21c>
 800765e:	2303      	movs	r3, #3
 8007660:	e004      	b.n	800766c <HAL_GPIO_Init+0x21c>
 8007662:	2302      	movs	r3, #2
 8007664:	e002      	b.n	800766c <HAL_GPIO_Init+0x21c>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <HAL_GPIO_Init+0x21c>
 800766a:	2300      	movs	r3, #0
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	f002 0203 	and.w	r2, r2, #3
 8007672:	0092      	lsls	r2, r2, #2
 8007674:	4093      	lsls	r3, r2
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	4313      	orrs	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800767c:	4935      	ldr	r1, [pc, #212]	; (8007754 <HAL_GPIO_Init+0x304>)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	089b      	lsrs	r3, r3, #2
 8007682:	3302      	adds	r3, #2
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800768a:	4b3a      	ldr	r3, [pc, #232]	; (8007774 <HAL_GPIO_Init+0x324>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	43db      	mvns	r3, r3
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	4013      	ands	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076ae:	4a31      	ldr	r2, [pc, #196]	; (8007774 <HAL_GPIO_Init+0x324>)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076b4:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <HAL_GPIO_Init+0x324>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	43db      	mvns	r3, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	4013      	ands	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076d8:	4a26      	ldr	r2, [pc, #152]	; (8007774 <HAL_GPIO_Init+0x324>)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80076de:	4b25      	ldr	r3, [pc, #148]	; (8007774 <HAL_GPIO_Init+0x324>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	43db      	mvns	r3, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4013      	ands	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007702:	4a1c      	ldr	r2, [pc, #112]	; (8007774 <HAL_GPIO_Init+0x324>)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007708:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <HAL_GPIO_Init+0x324>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	43db      	mvns	r3, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	4013      	ands	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800772c:	4a11      	ldr	r2, [pc, #68]	; (8007774 <HAL_GPIO_Init+0x324>)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b0f      	cmp	r3, #15
 800773c:	f67f ae96 	bls.w	800746c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	3724      	adds	r7, #36	; 0x24
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40023800 	.word	0x40023800
 8007754:	40013800 	.word	0x40013800
 8007758:	40020000 	.word	0x40020000
 800775c:	40020400 	.word	0x40020400
 8007760:	40020800 	.word	0x40020800
 8007764:	40020c00 	.word	0x40020c00
 8007768:	40021000 	.word	0x40021000
 800776c:	40021400 	.word	0x40021400
 8007770:	40021800 	.word	0x40021800
 8007774:	40013c00 	.word	0x40013c00

08007778 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e0c7      	b.n	8007924 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007794:	2201      	movs	r2, #1
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4013      	ands	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	f040 80b7 	bne.w	800791e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80077b0:	4a62      	ldr	r2, [pc, #392]	; (800793c <HAL_GPIO_DeInit+0x1c4>)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	3302      	adds	r3, #2
 80077b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	220f      	movs	r2, #15
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	4013      	ands	r3, r2
 80077d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a5a      	ldr	r2, [pc, #360]	; (8007940 <HAL_GPIO_DeInit+0x1c8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d025      	beq.n	8007826 <HAL_GPIO_DeInit+0xae>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a59      	ldr	r2, [pc, #356]	; (8007944 <HAL_GPIO_DeInit+0x1cc>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01f      	beq.n	8007822 <HAL_GPIO_DeInit+0xaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a58      	ldr	r2, [pc, #352]	; (8007948 <HAL_GPIO_DeInit+0x1d0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d019      	beq.n	800781e <HAL_GPIO_DeInit+0xa6>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a57      	ldr	r2, [pc, #348]	; (800794c <HAL_GPIO_DeInit+0x1d4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d013      	beq.n	800781a <HAL_GPIO_DeInit+0xa2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a56      	ldr	r2, [pc, #344]	; (8007950 <HAL_GPIO_DeInit+0x1d8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00d      	beq.n	8007816 <HAL_GPIO_DeInit+0x9e>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a55      	ldr	r2, [pc, #340]	; (8007954 <HAL_GPIO_DeInit+0x1dc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <HAL_GPIO_DeInit+0x9a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a54      	ldr	r2, [pc, #336]	; (8007958 <HAL_GPIO_DeInit+0x1e0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d101      	bne.n	800780e <HAL_GPIO_DeInit+0x96>
 800780a:	2306      	movs	r3, #6
 800780c:	e00c      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 800780e:	2307      	movs	r3, #7
 8007810:	e00a      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 8007812:	2305      	movs	r3, #5
 8007814:	e008      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 8007816:	2304      	movs	r3, #4
 8007818:	e006      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 800781a:	2303      	movs	r3, #3
 800781c:	e004      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 800781e:	2302      	movs	r3, #2
 8007820:	e002      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <HAL_GPIO_DeInit+0xb0>
 8007826:	2300      	movs	r3, #0
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	f002 0203 	and.w	r2, r2, #3
 800782e:	0092      	lsls	r2, r2, #2
 8007830:	4093      	lsls	r3, r2
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	d132      	bne.n	800789e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007838:	4b48      	ldr	r3, [pc, #288]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	43db      	mvns	r3, r3
 8007840:	4946      	ldr	r1, [pc, #280]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 8007842:	4013      	ands	r3, r2
 8007844:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007846:	4b45      	ldr	r3, [pc, #276]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	43db      	mvns	r3, r3
 800784e:	4943      	ldr	r1, [pc, #268]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 8007850:	4013      	ands	r3, r2
 8007852:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007854:	4b41      	ldr	r3, [pc, #260]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	43db      	mvns	r3, r3
 800785c:	493f      	ldr	r1, [pc, #252]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 800785e:	4013      	ands	r3, r2
 8007860:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007862:	4b3e      	ldr	r3, [pc, #248]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	43db      	mvns	r3, r3
 800786a:	493c      	ldr	r1, [pc, #240]	; (800795c <HAL_GPIO_DeInit+0x1e4>)
 800786c:	4013      	ands	r3, r2
 800786e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	220f      	movs	r2, #15
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007880:	4a2e      	ldr	r2, [pc, #184]	; (800793c <HAL_GPIO_DeInit+0x1c4>)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	089b      	lsrs	r3, r3, #2
 8007886:	3302      	adds	r3, #2
 8007888:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	43da      	mvns	r2, r3
 8007890:	482a      	ldr	r0, [pc, #168]	; (800793c <HAL_GPIO_DeInit+0x1c4>)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	089b      	lsrs	r3, r3, #2
 8007896:	400a      	ands	r2, r1
 8007898:	3302      	adds	r3, #2
 800789a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	2103      	movs	r1, #3
 80078a8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ac:	43db      	mvns	r3, r3
 80078ae:	401a      	ands	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	08da      	lsrs	r2, r3, #3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3208      	adds	r2, #8
 80078bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	220f      	movs	r2, #15
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	43db      	mvns	r3, r3
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	08d2      	lsrs	r2, r2, #3
 80078d4:	4019      	ands	r1, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3208      	adds	r2, #8
 80078da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	2103      	movs	r1, #3
 80078e8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ec:	43db      	mvns	r3, r3
 80078ee:	401a      	ands	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	2101      	movs	r1, #1
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	2103      	movs	r1, #3
 8007912:	fa01 f303 	lsl.w	r3, r1, r3
 8007916:	43db      	mvns	r3, r3
 8007918:	401a      	ands	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3301      	adds	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b0f      	cmp	r3, #15
 8007928:	f67f af34 	bls.w	8007794 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40013800 	.word	0x40013800
 8007940:	40020000 	.word	0x40020000
 8007944:	40020400 	.word	0x40020400
 8007948:	40020800 	.word	0x40020800
 800794c:	40020c00 	.word	0x40020c00
 8007950:	40021000 	.word	0x40021000
 8007954:	40021400 	.word	0x40021400
 8007958:	40021800 	.word	0x40021800
 800795c:	40013c00 	.word	0x40013c00

08007960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	807b      	strh	r3, [r7, #2]
 800796c:	4613      	mov	r3, r2
 800796e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007970:	787b      	ldrb	r3, [r7, #1]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007976:	887a      	ldrh	r2, [r7, #2]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800797c:	e003      	b.n	8007986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800797e:	887b      	ldrh	r3, [r7, #2]
 8007980:	041a      	lsls	r2, r3, #16
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	619a      	str	r2, [r3, #24]
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80079a4:	887a      	ldrh	r2, [r7, #2]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4013      	ands	r3, r2
 80079aa:	041a      	lsls	r2, r3, #16
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	43d9      	mvns	r1, r3
 80079b0:	887b      	ldrh	r3, [r7, #2]
 80079b2:	400b      	ands	r3, r1
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	4013      	ands	r3, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d006      	beq.n	80079ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079de:	4a05      	ldr	r2, [pc, #20]	; (80079f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc fe9e 	bl	8004728 <HAL_GPIO_EXTI_Callback>
  }
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40013c00 	.word	0x40013c00

080079f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e12b      	b.n	8007c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fd fc10 	bl	8005244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2224      	movs	r2, #36	; 0x24
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f001 f938 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 8007a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4a81      	ldr	r2, [pc, #516]	; (8007c6c <HAL_I2C_Init+0x274>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d807      	bhi.n	8007a7c <HAL_I2C_Init+0x84>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a80      	ldr	r2, [pc, #512]	; (8007c70 <HAL_I2C_Init+0x278>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bf94      	ite	ls
 8007a74:	2301      	movls	r3, #1
 8007a76:	2300      	movhi	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e006      	b.n	8007a8a <HAL_I2C_Init+0x92>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a7d      	ldr	r2, [pc, #500]	; (8007c74 <HAL_I2C_Init+0x27c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	bf94      	ite	ls
 8007a84:	2301      	movls	r3, #1
 8007a86:	2300      	movhi	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e0e7      	b.n	8007c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a78      	ldr	r2, [pc, #480]	; (8007c78 <HAL_I2C_Init+0x280>)
 8007a96:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9a:	0c9b      	lsrs	r3, r3, #18
 8007a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a6a      	ldr	r2, [pc, #424]	; (8007c6c <HAL_I2C_Init+0x274>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d802      	bhi.n	8007acc <HAL_I2C_Init+0xd4>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	e009      	b.n	8007ae0 <HAL_I2C_Init+0xe8>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	4a69      	ldr	r2, [pc, #420]	; (8007c7c <HAL_I2C_Init+0x284>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	099b      	lsrs	r3, r3, #6
 8007ade:	3301      	adds	r3, #1
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	495c      	ldr	r1, [pc, #368]	; (8007c6c <HAL_I2C_Init+0x274>)
 8007afc:	428b      	cmp	r3, r1
 8007afe:	d819      	bhi.n	8007b34 <HAL_I2C_Init+0x13c>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1e59      	subs	r1, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b0e:	1c59      	adds	r1, r3, #1
 8007b10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b14:	400b      	ands	r3, r1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <HAL_I2C_Init+0x138>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1e59      	subs	r1, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b28:	3301      	adds	r3, #1
 8007b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b2e:	e051      	b.n	8007bd4 <HAL_I2C_Init+0x1dc>
 8007b30:	2304      	movs	r3, #4
 8007b32:	e04f      	b.n	8007bd4 <HAL_I2C_Init+0x1dc>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d111      	bne.n	8007b60 <HAL_I2C_Init+0x168>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	1e58      	subs	r0, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6859      	ldr	r1, [r3, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	440b      	add	r3, r1
 8007b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b4e:	3301      	adds	r3, #1
 8007b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	e012      	b.n	8007b86 <HAL_I2C_Init+0x18e>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	1e58      	subs	r0, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6859      	ldr	r1, [r3, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	0099      	lsls	r1, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b76:	3301      	adds	r3, #1
 8007b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <HAL_I2C_Init+0x196>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e022      	b.n	8007bd4 <HAL_I2C_Init+0x1dc>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10e      	bne.n	8007bb4 <HAL_I2C_Init+0x1bc>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1e58      	subs	r0, r3, #1
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6859      	ldr	r1, [r3, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	440b      	add	r3, r1
 8007ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ba8:	3301      	adds	r3, #1
 8007baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb2:	e00f      	b.n	8007bd4 <HAL_I2C_Init+0x1dc>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1e58      	subs	r0, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6859      	ldr	r1, [r3, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	0099      	lsls	r1, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	6809      	ldr	r1, [r1, #0]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69da      	ldr	r2, [r3, #28]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6911      	ldr	r1, [r2, #16]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68d2      	ldr	r2, [r2, #12]
 8007c0e:	4311      	orrs	r1, r2
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	430b      	orrs	r3, r1
 8007c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695a      	ldr	r2, [r3, #20]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	000186a0 	.word	0x000186a0
 8007c70:	001e847f 	.word	0x001e847f
 8007c74:	003d08ff 	.word	0x003d08ff
 8007c78:	431bde83 	.word	0x431bde83
 8007c7c:	10624dd3 	.word	0x10624dd3

08007c80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e021      	b.n	8007cd6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2224      	movs	r2, #36	; 0x24
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fd fb6a 	bl	8005384 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	4608      	mov	r0, r1
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	817b      	strh	r3, [r7, #10]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	813b      	strh	r3, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cfa:	f7fe f9b7 	bl	800606c <HAL_GetTick>
 8007cfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	f040 80d9 	bne.w	8007ec0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	2319      	movs	r3, #25
 8007d14:	2201      	movs	r2, #1
 8007d16:	496d      	ldr	r1, [pc, #436]	; (8007ecc <HAL_I2C_Mem_Write+0x1ec>)
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fc7f 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d24:	2302      	movs	r3, #2
 8007d26:	e0cc      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_I2C_Mem_Write+0x56>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e0c5      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x1e2>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d007      	beq.n	8007d5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2221      	movs	r2, #33	; 0x21
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2240      	movs	r2, #64	; 0x40
 8007d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a3a      	ldr	r2, [r7, #32]
 8007d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a4d      	ldr	r2, [pc, #308]	; (8007ed0 <HAL_I2C_Mem_Write+0x1f0>)
 8007d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d9e:	88f8      	ldrh	r0, [r7, #6]
 8007da0:	893a      	ldrh	r2, [r7, #8]
 8007da2:	8979      	ldrh	r1, [r7, #10]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	4603      	mov	r3, r0
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fab6 	bl	8008320 <I2C_RequestMemoryWrite>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d052      	beq.n	8007e60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e081      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fd00 	bl	80087c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00d      	beq.n	8007dea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d107      	bne.n	8007de6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e06b      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	781a      	ldrb	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d11b      	bne.n	8007e60 <HAL_I2C_Mem_Write+0x180>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d017      	beq.n	8007e60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1aa      	bne.n	8007dbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fcec 	bl	800884a <I2C_WaitOnBTFFlagUntilTimeout>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00d      	beq.n	8007e94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d107      	bne.n	8007e90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e016      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e000      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ec0:	2302      	movs	r3, #2
  }
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	00100002 	.word	0x00100002
 8007ed0:	ffff0000 	.word	0xffff0000

08007ed4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08c      	sub	sp, #48	; 0x30
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	817b      	strh	r3, [r7, #10]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	813b      	strh	r3, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007eee:	f7fe f8bd 	bl	800606c <HAL_GetTick>
 8007ef2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	f040 8208 	bne.w	8008312 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2319      	movs	r3, #25
 8007f08:	2201      	movs	r2, #1
 8007f0a:	497b      	ldr	r1, [pc, #492]	; (80080f8 <HAL_I2C_Mem_Read+0x224>)
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fb85 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e1fb      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_I2C_Mem_Read+0x56>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e1f4      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d007      	beq.n	8007f50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2222      	movs	r2, #34	; 0x22
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2240      	movs	r2, #64	; 0x40
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a5b      	ldr	r2, [pc, #364]	; (80080fc <HAL_I2C_Mem_Read+0x228>)
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f92:	88f8      	ldrh	r0, [r7, #6]
 8007f94:	893a      	ldrh	r2, [r7, #8]
 8007f96:	8979      	ldrh	r1, [r7, #10]
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fa52 	bl	800844c <I2C_RequestMemoryRead>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e1b0      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d113      	bne.n	8007fe2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	623b      	str	r3, [r7, #32]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	623b      	str	r3, [r7, #32]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	623b      	str	r3, [r7, #32]
 8007fce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e184      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d11b      	bne.n	8008022 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	61fb      	str	r3, [r7, #28]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e164      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008026:	2b02      	cmp	r3, #2
 8008028:	d11b      	bne.n	8008062 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008038:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804a:	2300      	movs	r3, #0
 800804c:	61bb      	str	r3, [r7, #24]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	e144      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008078:	e138      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807e:	2b03      	cmp	r3, #3
 8008080:	f200 80f1 	bhi.w	8008266 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008088:	2b01      	cmp	r3, #1
 800808a:	d123      	bne.n	80080d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800808c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 fc1b 	bl	80088cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e139      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080d2:	e10b      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d14e      	bne.n	800817a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	2200      	movs	r2, #0
 80080e4:	4906      	ldr	r1, [pc, #24]	; (8008100 <HAL_I2C_Mem_Read+0x22c>)
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fa98 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e10e      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
 80080f6:	bf00      	nop
 80080f8:	00100002 	.word	0x00100002
 80080fc:	ffff0000 	.word	0xffff0000
 8008100:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	b2d2      	uxtb	r2, r2
 8008152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008178:	e0b8      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	2200      	movs	r2, #0
 8008182:	4966      	ldr	r1, [pc, #408]	; (800831c <HAL_I2C_Mem_Read+0x448>)
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fa49 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0bf      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	2200      	movs	r2, #0
 80081de:	494f      	ldr	r1, [pc, #316]	; (800831c <HAL_I2C_Mem_Read+0x448>)
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fa1b 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e091      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008264:	e042      	b.n	80082ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008268:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fb2e 	bl	80088cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e04c      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	691a      	ldr	r2, [r3, #16]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d118      	bne.n	80082ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f47f aec2 	bne.w	800807a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	e000      	b.n	8008314 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008312:	2302      	movs	r3, #2
  }
}
 8008314:	4618      	mov	r0, r3
 8008316:	3728      	adds	r7, #40	; 0x28
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	00010004 	.word	0x00010004

08008320 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	4608      	mov	r0, r1
 800832a:	4611      	mov	r1, r2
 800832c:	461a      	mov	r2, r3
 800832e:	4603      	mov	r3, r0
 8008330:	817b      	strh	r3, [r7, #10]
 8008332:	460b      	mov	r3, r1
 8008334:	813b      	strh	r3, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	2200      	movs	r2, #0
 8008352:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 f960 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00d      	beq.n	800837e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008370:	d103      	bne.n	800837a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e05f      	b.n	800843e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	b2db      	uxtb	r3, r3
 8008382:	461a      	mov	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800838c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	6a3a      	ldr	r2, [r7, #32]
 8008392:	492d      	ldr	r1, [pc, #180]	; (8008448 <I2C_RequestMemoryWrite+0x128>)
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 f998 	bl	80086ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e04c      	b.n	800843e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	6a39      	ldr	r1, [r7, #32]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa02 	bl	80087c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00d      	beq.n	80083e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d107      	bne.n	80083e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e02b      	b.n	800843e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d105      	bne.n	80083f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ec:	893b      	ldrh	r3, [r7, #8]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	611a      	str	r2, [r3, #16]
 80083f6:	e021      	b.n	800843c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083f8:	893b      	ldrh	r3, [r7, #8]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	6a39      	ldr	r1, [r7, #32]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f9dc 	bl	80087c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00d      	beq.n	8008432 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	2b04      	cmp	r3, #4
 800841c:	d107      	bne.n	800842e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800842c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e005      	b.n	800843e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008432:	893b      	ldrh	r3, [r7, #8]
 8008434:	b2da      	uxtb	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	00010002 	.word	0x00010002

0800844c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af02      	add	r7, sp, #8
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	461a      	mov	r2, r3
 800845a:	4603      	mov	r3, r0
 800845c:	817b      	strh	r3, [r7, #10]
 800845e:	460b      	mov	r3, r1
 8008460:	813b      	strh	r3, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008474:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	2200      	movs	r2, #0
 800848e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f8c2 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ac:	d103      	bne.n	80084b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e0aa      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	4952      	ldr	r1, [pc, #328]	; (8008618 <I2C_RequestMemoryRead+0x1cc>)
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f8fa 	bl	80086ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e097      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	6a39      	ldr	r1, [r7, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f964 	bl	80087c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	2b04      	cmp	r3, #4
 800850c:	d107      	bne.n	800851e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800851c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e076      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d105      	bne.n	8008534 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008528:	893b      	ldrh	r3, [r7, #8]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	611a      	str	r2, [r3, #16]
 8008532:	e021      	b.n	8008578 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	b2da      	uxtb	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008544:	6a39      	ldr	r1, [r7, #32]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 f93e 	bl	80087c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00d      	beq.n	800856e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	2b04      	cmp	r3, #4
 8008558:	d107      	bne.n	800856a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e050      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800856e:	893b      	ldrh	r3, [r7, #8]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	6a39      	ldr	r1, [r7, #32]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f923 	bl	80087c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	2b04      	cmp	r3, #4
 800858e:	d107      	bne.n	80085a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800859e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e035      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f82b 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00d      	beq.n	80085e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085da:	d103      	bne.n	80085e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e013      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085e8:	897b      	ldrh	r3, [r7, #10]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	6a3a      	ldr	r2, [r7, #32]
 80085fc:	4906      	ldr	r1, [pc, #24]	; (8008618 <I2C_RequestMemoryRead+0x1cc>)
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 f863 	bl	80086ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	00010002 	.word	0x00010002

0800861c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800862c:	e025      	b.n	800867a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d021      	beq.n	800867a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008636:	f7fd fd19 	bl	800606c <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d302      	bcc.n	800864c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d116      	bne.n	800867a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e023      	b.n	80086c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10d      	bne.n	80086a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	43da      	mvns	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4013      	ands	r3, r2
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	bf0c      	ite	eq
 8008696:	2301      	moveq	r3, #1
 8008698:	2300      	movne	r3, #0
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	e00c      	b.n	80086ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	43da      	mvns	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4013      	ands	r3, r2
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	bf0c      	ite	eq
 80086b2:	2301      	moveq	r3, #1
 80086b4:	2300      	movne	r3, #0
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	461a      	mov	r2, r3
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d0b6      	beq.n	800862e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086d8:	e051      	b.n	800877e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e8:	d123      	bne.n	8008732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008702:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2220      	movs	r2, #32
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	f043 0204 	orr.w	r2, r3, #4
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e046      	b.n	80087c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008738:	d021      	beq.n	800877e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873a:	f7fd fc97 	bl	800606c <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d302      	bcc.n	8008750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d116      	bne.n	800877e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e020      	b.n	80087c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	0c1b      	lsrs	r3, r3, #16
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10c      	bne.n	80087a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	43da      	mvns	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4013      	ands	r3, r2
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf14      	ite	ne
 800879a:	2301      	movne	r3, #1
 800879c:	2300      	moveq	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	e00b      	b.n	80087ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	43da      	mvns	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4013      	ands	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bf14      	ite	ne
 80087b4:	2301      	movne	r3, #1
 80087b6:	2300      	moveq	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d18d      	bne.n	80086da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087d4:	e02d      	b.n	8008832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f8ce 	bl	8008978 <I2C_IsAcknowledgeFailed>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e02d      	b.n	8008842 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d021      	beq.n	8008832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ee:	f7fd fc3d 	bl	800606c <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d116      	bne.n	8008832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f043 0220 	orr.w	r2, r3, #32
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e007      	b.n	8008842 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883c:	2b80      	cmp	r3, #128	; 0x80
 800883e:	d1ca      	bne.n	80087d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008856:	e02d      	b.n	80088b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 f88d 	bl	8008978 <I2C_IsAcknowledgeFailed>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e02d      	b.n	80088c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d021      	beq.n	80088b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008870:	f7fd fbfc 	bl	800606c <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	429a      	cmp	r2, r3
 800887e:	d302      	bcc.n	8008886 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d116      	bne.n	80088b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a0:	f043 0220 	orr.w	r2, r3, #32
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e007      	b.n	80088c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d1ca      	bne.n	8008858 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088d8:	e042      	b.n	8008960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b10      	cmp	r3, #16
 80088e6:	d119      	bne.n	800891c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0210 	mvn.w	r2, #16
 80088f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e029      	b.n	8008970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800891c:	f7fd fba6 	bl	800606c <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	429a      	cmp	r2, r3
 800892a:	d302      	bcc.n	8008932 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d116      	bne.n	8008960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2220      	movs	r2, #32
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894c:	f043 0220 	orr.w	r2, r3, #32
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e007      	b.n	8008970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d1b5      	bne.n	80088da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800898a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898e:	d11b      	bne.n	80089c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008998:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	f043 0204 	orr.w	r2, r3, #4
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80089de:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <HAL_PWR_EnableBkUpAccess+0x24>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80089ea:	687b      	ldr	r3, [r7, #4]
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	420e0020 	.word	0x420e0020
 80089fc:	40007000 	.word	0x40007000

08008a00 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8008a0a:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <HAL_PWREx_EnableBkUpReg+0x44>)
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a10:	f7fd fb2c 	bl	800606c <HAL_GetTick>
 8008a14:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8008a16:	e009      	b.n	8008a2c <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8008a18:	f7fd fb28 	bl	800606c <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a26:	d901      	bls.n	8008a2c <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e006      	b.n	8008a3a <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <HAL_PWREx_EnableBkUpReg+0x48>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d1ef      	bne.n	8008a18 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	420e00a4 	.word	0x420e00a4
 8008a48:	40007000 	.word	0x40007000

08008a4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008a56:	2300      	movs	r3, #0
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <HAL_PWREx_EnableOverDrive+0x90>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	4a1f      	ldr	r2, [pc, #124]	; (8008adc <HAL_PWREx_EnableOverDrive+0x90>)
 8008a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a64:	6413      	str	r3, [r2, #64]	; 0x40
 8008a66:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <HAL_PWREx_EnableOverDrive+0x90>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008a72:	4b1b      	ldr	r3, [pc, #108]	; (8008ae0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a78:	f7fd faf8 	bl	800606c <HAL_GetTick>
 8008a7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a7e:	e009      	b.n	8008a94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a80:	f7fd faf4 	bl	800606c <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a8e:	d901      	bls.n	8008a94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e01f      	b.n	8008ad4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a94:	4b13      	ldr	r3, [pc, #76]	; (8008ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d1ee      	bne.n	8008a80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008aa2:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008aa8:	f7fd fae0 	bl	800606c <HAL_GetTick>
 8008aac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008aae:	e009      	b.n	8008ac4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008ab0:	f7fd fadc 	bl	800606c <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008abe:	d901      	bls.n	8008ac4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e007      	b.n	8008ad4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008ac4:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad0:	d1ee      	bne.n	8008ab0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40023800 	.word	0x40023800
 8008ae0:	420e0040 	.word	0x420e0040
 8008ae4:	40007000 	.word	0x40007000
 8008ae8:	420e0044 	.word	0x420e0044

08008aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0cc      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b00:	4b68      	ldr	r3, [pc, #416]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d90c      	bls.n	8008b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0e:	4b65      	ldr	r3, [pc, #404]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b16:	4b63      	ldr	r3, [pc, #396]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 030f 	and.w	r3, r3, #15
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d001      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0b8      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d020      	beq.n	8008b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b40:	4b59      	ldr	r3, [pc, #356]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	4a58      	ldr	r2, [pc, #352]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b58:	4b53      	ldr	r3, [pc, #332]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	4a52      	ldr	r2, [pc, #328]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b64:	4b50      	ldr	r3, [pc, #320]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	494d      	ldr	r1, [pc, #308]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d044      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d107      	bne.n	8008b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b8a:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d119      	bne.n	8008bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e07f      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d003      	beq.n	8008baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d107      	bne.n	8008bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008baa:	4b3f      	ldr	r3, [pc, #252]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e06f      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bba:	4b3b      	ldr	r3, [pc, #236]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e067      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bca:	4b37      	ldr	r3, [pc, #220]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f023 0203 	bic.w	r2, r3, #3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4934      	ldr	r1, [pc, #208]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bdc:	f7fd fa46 	bl	800606c <HAL_GetTick>
 8008be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be2:	e00a      	b.n	8008bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008be4:	f7fd fa42 	bl	800606c <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e04f      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bfa:	4b2b      	ldr	r3, [pc, #172]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 020c 	and.w	r2, r3, #12
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d1eb      	bne.n	8008be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c0c:	4b25      	ldr	r3, [pc, #148]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d20c      	bcs.n	8008c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1a:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c22:	4b20      	ldr	r3, [pc, #128]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e032      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	4916      	ldr	r1, [pc, #88]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d009      	beq.n	8008c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	490e      	ldr	r1, [pc, #56]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c72:	f000 fb7f 	bl	8009374 <HAL_RCC_GetSysClockFreq>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	091b      	lsrs	r3, r3, #4
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	490a      	ldr	r1, [pc, #40]	; (8008cac <HAL_RCC_ClockConfig+0x1c0>)
 8008c84:	5ccb      	ldrb	r3, [r1, r3]
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fd f9a6 	bl	8005fe4 <HAL_InitTick>

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40023c00 	.word	0x40023c00
 8008ca8:	40023800 	.word	0x40023800
 8008cac:	08012728 	.word	0x08012728
 8008cb0:	20000008 	.word	0x20000008
 8008cb4:	2000000c 	.word	0x2000000c

08008cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cbc:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20000008 	.word	0x20000008

08008cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cd4:	f7ff fff0 	bl	8008cb8 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	0a9b      	lsrs	r3, r3, #10
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	4903      	ldr	r1, [pc, #12]	; (8008cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ce6:	5ccb      	ldrb	r3, [r1, r3]
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	08012738 	.word	0x08012738

08008cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cfc:	f7ff ffdc 	bl	8008cb8 <HAL_RCC_GetHCLKFreq>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	0b5b      	lsrs	r3, r3, #13
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	4903      	ldr	r1, [pc, #12]	; (8008d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d0e:	5ccb      	ldrb	r3, [r1, r3]
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	08012738 	.word	0x08012738

08008d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08c      	sub	sp, #48	; 0x30
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d010      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008d58:	4b6f      	ldr	r3, [pc, #444]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	496c      	ldr	r1, [pc, #432]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008d76:	2301      	movs	r3, #1
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d010      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008d86:	4b64      	ldr	r3, [pc, #400]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d94:	4960      	ldr	r1, [pc, #384]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008da4:	2301      	movs	r3, #1
 8008da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d017      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008db4:	4b58      	ldr	r3, [pc, #352]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	4955      	ldr	r1, [pc, #340]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd2:	d101      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008de0:	2301      	movs	r3, #1
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d017      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008df0:	4b49      	ldr	r3, [pc, #292]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfe:	4946      	ldr	r1, [pc, #280]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e0e:	d101      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008e10:	2301      	movs	r3, #1
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 808a 	beq.w	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	4a38      	ldr	r2, [pc, #224]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e3e:	4b36      	ldr	r3, [pc, #216]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e46:	60bb      	str	r3, [r7, #8]
 8008e48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a33      	ldr	r2, [pc, #204]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e56:	f7fd f909 	bl	800606c <HAL_GetTick>
 8008e5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e5e:	f7fd f905 	bl	800606c <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e278      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d0f0      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e7c:	4b26      	ldr	r3, [pc, #152]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d02f      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e94:	6a3a      	ldr	r2, [r7, #32]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d028      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e9a:	4b1f      	ldr	r3, [pc, #124]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ea4:	4b1e      	ldr	r3, [pc, #120]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008eaa:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008eb0:	4a19      	ldr	r2, [pc, #100]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d114      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ec2:	f7fd f8d3 	bl	800606c <HAL_GetTick>
 8008ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ec8:	e00a      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eca:	f7fd f8cf 	bl	800606c <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d901      	bls.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e240      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee0:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0ee      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ef8:	d114      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008efa:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f0e:	4902      	ldr	r1, [pc, #8]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	608b      	str	r3, [r1, #8]
 8008f14:	e00c      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008f16:	bf00      	nop
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	40007000 	.word	0x40007000
 8008f20:	42470e40 	.word	0x42470e40
 8008f24:	4b4a      	ldr	r3, [pc, #296]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	4a49      	ldr	r2, [pc, #292]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	4b47      	ldr	r3, [pc, #284]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f3c:	4944      	ldr	r1, [pc, #272]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0310 	and.w	r3, r3, #16
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008f54:	4b3f      	ldr	r3, [pc, #252]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008f56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008f64:	4b3a      	ldr	r3, [pc, #232]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	4937      	ldr	r1, [pc, #220]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f86:	4b32      	ldr	r3, [pc, #200]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f8c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	492e      	ldr	r1, [pc, #184]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d011      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb6:	4926      	ldr	r1, [pc, #152]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008fd8:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	491a      	ldr	r1, [pc, #104]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008ffa:	4b15      	ldr	r3, [pc, #84]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009000:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009008:	4911      	ldr	r1, [pc, #68]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800900a:	4313      	orrs	r3, r2
 800900c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009018:	d101      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800901a:	2301      	movs	r3, #1
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d005      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800902c:	f040 80ff 	bne.w	800922e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009030:	4b09      	ldr	r3, [pc, #36]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009036:	f7fd f819 	bl	800606c <HAL_GetTick>
 800903a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800903c:	e00e      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800903e:	f7fd f815 	bl	800606c <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	d907      	bls.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e188      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009050:	40023800 	.word	0x40023800
 8009054:	424711e0 	.word	0x424711e0
 8009058:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800905c:	4b7e      	ldr	r3, [pc, #504]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1ea      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d009      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009084:	2b00      	cmp	r3, #0
 8009086:	d028      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d124      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009090:	4b71      	ldr	r3, [pc, #452]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	3301      	adds	r3, #1
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090a2:	4b6d      	ldr	r3, [pc, #436]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a8:	0e1b      	lsrs	r3, r3, #24
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	019b      	lsls	r3, r3, #6
 80090ba:	431a      	orrs	r2, r3
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	3b01      	subs	r3, #1
 80090c2:	041b      	lsls	r3, r3, #16
 80090c4:	431a      	orrs	r2, r3
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	061b      	lsls	r3, r3, #24
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	071b      	lsls	r3, r3, #28
 80090d2:	4961      	ldr	r1, [pc, #388]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ee:	d00a      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d035      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009104:	d130      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009106:	4b54      	ldr	r3, [pc, #336]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910c:	0c1b      	lsrs	r3, r3, #16
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	3301      	adds	r3, #1
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009118:	4b4f      	ldr	r3, [pc, #316]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800911a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	019b      	lsls	r3, r3, #6
 8009130:	431a      	orrs	r2, r3
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	085b      	lsrs	r3, r3, #1
 8009136:	3b01      	subs	r3, #1
 8009138:	041b      	lsls	r3, r3, #16
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	061b      	lsls	r3, r3, #24
 8009142:	431a      	orrs	r2, r3
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	071b      	lsls	r3, r3, #28
 8009148:	4943      	ldr	r1, [pc, #268]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800914a:	4313      	orrs	r3, r2
 800914c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009150:	4b41      	ldr	r3, [pc, #260]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009156:	f023 021f 	bic.w	r2, r3, #31
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	3b01      	subs	r3, #1
 8009160:	493d      	ldr	r1, [pc, #244]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009162:	4313      	orrs	r3, r2
 8009164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009170:	2b00      	cmp	r3, #0
 8009172:	d029      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800917c:	d124      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800917e:	4b36      	ldr	r3, [pc, #216]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	3301      	adds	r3, #1
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009190:	4b31      	ldr	r3, [pc, #196]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009196:	0f1b      	lsrs	r3, r3, #28
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	019b      	lsls	r3, r3, #6
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	085b      	lsrs	r3, r3, #1
 80091b0:	3b01      	subs	r3, #1
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	431a      	orrs	r2, r3
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	061b      	lsls	r3, r3, #24
 80091ba:	431a      	orrs	r2, r3
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	071b      	lsls	r3, r3, #28
 80091c0:	4925      	ldr	r1, [pc, #148]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d016      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	019b      	lsls	r3, r3, #6
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	3b01      	subs	r3, #1
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	431a      	orrs	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	061b      	lsls	r3, r3, #24
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	071b      	lsls	r3, r3, #28
 80091fa:	4917      	ldr	r1, [pc, #92]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009204:	2201      	movs	r2, #1
 8009206:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009208:	f7fc ff30 	bl	800606c <HAL_GetTick>
 800920c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800920e:	e008      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009210:	f7fc ff2c 	bl	800606c <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d901      	bls.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e09f      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009222:	4b0d      	ldr	r3, [pc, #52]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0f0      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2b01      	cmp	r3, #1
 8009232:	f040 8095 	bne.w	8009360 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009236:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800923c:	f7fc ff16 	bl	800606c <HAL_GetTick>
 8009240:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009242:	e00f      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009244:	f7fc ff12 	bl	800606c <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d908      	bls.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e085      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009256:	bf00      	nop
 8009258:	40023800 	.word	0x40023800
 800925c:	42470068 	.word	0x42470068
 8009260:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009264:	4b41      	ldr	r3, [pc, #260]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800926c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009270:	d0e8      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800928e:	2b00      	cmp	r3, #0
 8009290:	d02b      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009296:	2b00      	cmp	r3, #0
 8009298:	d127      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800929a:	4b34      	ldr	r3, [pc, #208]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800929c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a0:	0c1b      	lsrs	r3, r3, #16
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	3301      	adds	r3, #1
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699a      	ldr	r2, [r3, #24]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	431a      	orrs	r2, r3
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	3b01      	subs	r3, #1
 80092be:	041b      	lsls	r3, r3, #16
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	061b      	lsls	r3, r3, #24
 80092c8:	4928      	ldr	r1, [pc, #160]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80092d0:	4b26      	ldr	r3, [pc, #152]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	3b01      	subs	r3, #1
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	4922      	ldr	r1, [pc, #136]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01d      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092fe:	d118      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009300:	4b1a      	ldr	r3, [pc, #104]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009306:	0e1b      	lsrs	r3, r3, #24
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	019b      	lsls	r3, r3, #6
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	3b01      	subs	r3, #1
 8009322:	041b      	lsls	r3, r3, #16
 8009324:	431a      	orrs	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	061b      	lsls	r3, r3, #24
 800932a:	4910      	ldr	r1, [pc, #64]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800932c:	4313      	orrs	r3, r2
 800932e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009334:	2201      	movs	r2, #1
 8009336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009338:	f7fc fe98 	bl	800606c <HAL_GetTick>
 800933c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800933e:	e008      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009340:	f7fc fe94 	bl	800606c <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d901      	bls.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e007      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009352:	4b06      	ldr	r3, [pc, #24]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800935e:	d1ef      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3730      	adds	r7, #48	; 0x30
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	40023800 	.word	0x40023800
 8009370:	42470070 	.word	0x42470070

08009374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009378:	b0ae      	sub	sp, #184	; 0xb8
 800937a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800939a:	4bcb      	ldr	r3, [pc, #812]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 030c 	and.w	r3, r3, #12
 80093a2:	2b0c      	cmp	r3, #12
 80093a4:	f200 8206 	bhi.w	80097b4 <HAL_RCC_GetSysClockFreq+0x440>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093e5 	.word	0x080093e5
 80093b4:	080097b5 	.word	0x080097b5
 80093b8:	080097b5 	.word	0x080097b5
 80093bc:	080097b5 	.word	0x080097b5
 80093c0:	080093ed 	.word	0x080093ed
 80093c4:	080097b5 	.word	0x080097b5
 80093c8:	080097b5 	.word	0x080097b5
 80093cc:	080097b5 	.word	0x080097b5
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	080097b5 	.word	0x080097b5
 80093d8:	080097b5 	.word	0x080097b5
 80093dc:	080097b5 	.word	0x080097b5
 80093e0:	080095e5 	.word	0x080095e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093e4:	4bb9      	ldr	r3, [pc, #740]	; (80096cc <HAL_RCC_GetSysClockFreq+0x358>)
 80093e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80093ea:	e1e7      	b.n	80097bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093ec:	4bb8      	ldr	r3, [pc, #736]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80093ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80093f2:	e1e3      	b.n	80097bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093f4:	4bb4      	ldr	r3, [pc, #720]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009400:	4bb1      	ldr	r3, [pc, #708]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d071      	beq.n	80094f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800940c:	4bae      	ldr	r3, [pc, #696]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	099b      	lsrs	r3, r3, #6
 8009412:	2200      	movs	r2, #0
 8009414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009418:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800941c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009424:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009428:	2300      	movs	r3, #0
 800942a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800942e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009432:	4622      	mov	r2, r4
 8009434:	462b      	mov	r3, r5
 8009436:	f04f 0000 	mov.w	r0, #0
 800943a:	f04f 0100 	mov.w	r1, #0
 800943e:	0159      	lsls	r1, r3, #5
 8009440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009444:	0150      	lsls	r0, r2, #5
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4621      	mov	r1, r4
 800944c:	1a51      	subs	r1, r2, r1
 800944e:	6439      	str	r1, [r7, #64]	; 0x40
 8009450:	4629      	mov	r1, r5
 8009452:	eb63 0301 	sbc.w	r3, r3, r1
 8009456:	647b      	str	r3, [r7, #68]	; 0x44
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009464:	4649      	mov	r1, r9
 8009466:	018b      	lsls	r3, r1, #6
 8009468:	4641      	mov	r1, r8
 800946a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800946e:	4641      	mov	r1, r8
 8009470:	018a      	lsls	r2, r1, #6
 8009472:	4641      	mov	r1, r8
 8009474:	1a51      	subs	r1, r2, r1
 8009476:	63b9      	str	r1, [r7, #56]	; 0x38
 8009478:	4649      	mov	r1, r9
 800947a:	eb63 0301 	sbc.w	r3, r3, r1
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800948c:	4649      	mov	r1, r9
 800948e:	00cb      	lsls	r3, r1, #3
 8009490:	4641      	mov	r1, r8
 8009492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009496:	4641      	mov	r1, r8
 8009498:	00ca      	lsls	r2, r1, #3
 800949a:	4610      	mov	r0, r2
 800949c:	4619      	mov	r1, r3
 800949e:	4603      	mov	r3, r0
 80094a0:	4622      	mov	r2, r4
 80094a2:	189b      	adds	r3, r3, r2
 80094a4:	633b      	str	r3, [r7, #48]	; 0x30
 80094a6:	462b      	mov	r3, r5
 80094a8:	460a      	mov	r2, r1
 80094aa:	eb42 0303 	adc.w	r3, r2, r3
 80094ae:	637b      	str	r3, [r7, #52]	; 0x34
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80094bc:	4629      	mov	r1, r5
 80094be:	024b      	lsls	r3, r1, #9
 80094c0:	4621      	mov	r1, r4
 80094c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094c6:	4621      	mov	r1, r4
 80094c8:	024a      	lsls	r2, r1, #9
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80094e0:	f7f7 fd60 	bl	8000fa4 <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4613      	mov	r3, r2
 80094ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094ee:	e067      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094f0:	4b75      	ldr	r3, [pc, #468]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	099b      	lsrs	r3, r3, #6
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009508:	67bb      	str	r3, [r7, #120]	; 0x78
 800950a:	2300      	movs	r3, #0
 800950c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800950e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009512:	4622      	mov	r2, r4
 8009514:	462b      	mov	r3, r5
 8009516:	f04f 0000 	mov.w	r0, #0
 800951a:	f04f 0100 	mov.w	r1, #0
 800951e:	0159      	lsls	r1, r3, #5
 8009520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009524:	0150      	lsls	r0, r2, #5
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4621      	mov	r1, r4
 800952c:	1a51      	subs	r1, r2, r1
 800952e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009530:	4629      	mov	r1, r5
 8009532:	eb63 0301 	sbc.w	r3, r3, r1
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009544:	4649      	mov	r1, r9
 8009546:	018b      	lsls	r3, r1, #6
 8009548:	4641      	mov	r1, r8
 800954a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800954e:	4641      	mov	r1, r8
 8009550:	018a      	lsls	r2, r1, #6
 8009552:	4641      	mov	r1, r8
 8009554:	ebb2 0a01 	subs.w	sl, r2, r1
 8009558:	4649      	mov	r1, r9
 800955a:	eb63 0b01 	sbc.w	fp, r3, r1
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800956a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800956e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009572:	4692      	mov	sl, r2
 8009574:	469b      	mov	fp, r3
 8009576:	4623      	mov	r3, r4
 8009578:	eb1a 0303 	adds.w	r3, sl, r3
 800957c:	623b      	str	r3, [r7, #32]
 800957e:	462b      	mov	r3, r5
 8009580:	eb4b 0303 	adc.w	r3, fp, r3
 8009584:	627b      	str	r3, [r7, #36]	; 0x24
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	f04f 0300 	mov.w	r3, #0
 800958e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009592:	4629      	mov	r1, r5
 8009594:	028b      	lsls	r3, r1, #10
 8009596:	4621      	mov	r1, r4
 8009598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800959c:	4621      	mov	r1, r4
 800959e:	028a      	lsls	r2, r1, #10
 80095a0:	4610      	mov	r0, r2
 80095a2:	4619      	mov	r1, r3
 80095a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095a8:	2200      	movs	r2, #0
 80095aa:	673b      	str	r3, [r7, #112]	; 0x70
 80095ac:	677a      	str	r2, [r7, #116]	; 0x74
 80095ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80095b2:	f7f7 fcf7 	bl	8000fa4 <__aeabi_uldivmod>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4613      	mov	r3, r2
 80095bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095c0:	4b41      	ldr	r3, [pc, #260]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	3301      	adds	r3, #1
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80095d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095da:	fbb2 f3f3 	udiv	r3, r2, r3
 80095de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80095e2:	e0eb      	b.n	80097bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095e4:	4b38      	ldr	r3, [pc, #224]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095f0:	4b35      	ldr	r3, [pc, #212]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d06b      	beq.n	80096d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095fc:	4b32      	ldr	r3, [pc, #200]	; (80096c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	099b      	lsrs	r3, r3, #6
 8009602:	2200      	movs	r2, #0
 8009604:	66bb      	str	r3, [r7, #104]	; 0x68
 8009606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800960a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800960e:	663b      	str	r3, [r7, #96]	; 0x60
 8009610:	2300      	movs	r3, #0
 8009612:	667b      	str	r3, [r7, #100]	; 0x64
 8009614:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009618:	4622      	mov	r2, r4
 800961a:	462b      	mov	r3, r5
 800961c:	f04f 0000 	mov.w	r0, #0
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	0159      	lsls	r1, r3, #5
 8009626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800962a:	0150      	lsls	r0, r2, #5
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4621      	mov	r1, r4
 8009632:	1a51      	subs	r1, r2, r1
 8009634:	61b9      	str	r1, [r7, #24]
 8009636:	4629      	mov	r1, r5
 8009638:	eb63 0301 	sbc.w	r3, r3, r1
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	f04f 0200 	mov.w	r2, #0
 8009642:	f04f 0300 	mov.w	r3, #0
 8009646:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800964a:	4659      	mov	r1, fp
 800964c:	018b      	lsls	r3, r1, #6
 800964e:	4651      	mov	r1, sl
 8009650:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009654:	4651      	mov	r1, sl
 8009656:	018a      	lsls	r2, r1, #6
 8009658:	4651      	mov	r1, sl
 800965a:	ebb2 0801 	subs.w	r8, r2, r1
 800965e:	4659      	mov	r1, fp
 8009660:	eb63 0901 	sbc.w	r9, r3, r1
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009678:	4690      	mov	r8, r2
 800967a:	4699      	mov	r9, r3
 800967c:	4623      	mov	r3, r4
 800967e:	eb18 0303 	adds.w	r3, r8, r3
 8009682:	613b      	str	r3, [r7, #16]
 8009684:	462b      	mov	r3, r5
 8009686:	eb49 0303 	adc.w	r3, r9, r3
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009698:	4629      	mov	r1, r5
 800969a:	024b      	lsls	r3, r1, #9
 800969c:	4621      	mov	r1, r4
 800969e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80096a2:	4621      	mov	r1, r4
 80096a4:	024a      	lsls	r2, r1, #9
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096ae:	2200      	movs	r2, #0
 80096b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80096b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80096b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096b8:	f7f7 fc74 	bl	8000fa4 <__aeabi_uldivmod>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4613      	mov	r3, r2
 80096c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096c6:	e065      	b.n	8009794 <HAL_RCC_GetSysClockFreq+0x420>
 80096c8:	40023800 	.word	0x40023800
 80096cc:	00f42400 	.word	0x00f42400
 80096d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096d4:	4b3d      	ldr	r3, [pc, #244]	; (80097cc <HAL_RCC_GetSysClockFreq+0x458>)
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	099b      	lsrs	r3, r3, #6
 80096da:	2200      	movs	r2, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	4611      	mov	r1, r2
 80096e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80096e4:	653b      	str	r3, [r7, #80]	; 0x50
 80096e6:	2300      	movs	r3, #0
 80096e8:	657b      	str	r3, [r7, #84]	; 0x54
 80096ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80096ee:	4642      	mov	r2, r8
 80096f0:	464b      	mov	r3, r9
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f04f 0100 	mov.w	r1, #0
 80096fa:	0159      	lsls	r1, r3, #5
 80096fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009700:	0150      	lsls	r0, r2, #5
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4641      	mov	r1, r8
 8009708:	1a51      	subs	r1, r2, r1
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	4649      	mov	r1, r9
 800970e:	eb63 0301 	sbc.w	r3, r3, r1
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	f04f 0200 	mov.w	r2, #0
 8009718:	f04f 0300 	mov.w	r3, #0
 800971c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009720:	4659      	mov	r1, fp
 8009722:	018b      	lsls	r3, r1, #6
 8009724:	4651      	mov	r1, sl
 8009726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800972a:	4651      	mov	r1, sl
 800972c:	018a      	lsls	r2, r1, #6
 800972e:	4651      	mov	r1, sl
 8009730:	1a54      	subs	r4, r2, r1
 8009732:	4659      	mov	r1, fp
 8009734:	eb63 0501 	sbc.w	r5, r3, r1
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	00eb      	lsls	r3, r5, #3
 8009742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009746:	00e2      	lsls	r2, r4, #3
 8009748:	4614      	mov	r4, r2
 800974a:	461d      	mov	r5, r3
 800974c:	4643      	mov	r3, r8
 800974e:	18e3      	adds	r3, r4, r3
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	464b      	mov	r3, r9
 8009754:	eb45 0303 	adc.w	r3, r5, r3
 8009758:	607b      	str	r3, [r7, #4]
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	f04f 0300 	mov.w	r3, #0
 8009762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009766:	4629      	mov	r1, r5
 8009768:	028b      	lsls	r3, r1, #10
 800976a:	4621      	mov	r1, r4
 800976c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009770:	4621      	mov	r1, r4
 8009772:	028a      	lsls	r2, r1, #10
 8009774:	4610      	mov	r0, r2
 8009776:	4619      	mov	r1, r3
 8009778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800977c:	2200      	movs	r2, #0
 800977e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009780:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009782:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009786:	f7f7 fc0d 	bl	8000fa4 <__aeabi_uldivmod>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4613      	mov	r3, r2
 8009790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <HAL_RCC_GetSysClockFreq+0x458>)
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	0f1b      	lsrs	r3, r3, #28
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80097a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80097b2:	e003      	b.n	80097bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097b4:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80097b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80097ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	37b8      	adds	r7, #184	; 0xb8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ca:	bf00      	nop
 80097cc:	40023800 	.word	0x40023800
 80097d0:	00f42400 	.word	0x00f42400

080097d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e28d      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 8083 	beq.w	80098fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80097f4:	4b94      	ldr	r3, [pc, #592]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f003 030c 	and.w	r3, r3, #12
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d019      	beq.n	8009834 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009800:	4b91      	ldr	r3, [pc, #580]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009808:	2b08      	cmp	r3, #8
 800980a:	d106      	bne.n	800981a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800980c:	4b8e      	ldr	r3, [pc, #568]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009818:	d00c      	beq.n	8009834 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800981a:	4b8b      	ldr	r3, [pc, #556]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009822:	2b0c      	cmp	r3, #12
 8009824:	d112      	bne.n	800984c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009826:	4b88      	ldr	r3, [pc, #544]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800982e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009832:	d10b      	bne.n	800984c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009834:	4b84      	ldr	r3, [pc, #528]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d05b      	beq.n	80098f8 <HAL_RCC_OscConfig+0x124>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d157      	bne.n	80098f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e25a      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009854:	d106      	bne.n	8009864 <HAL_RCC_OscConfig+0x90>
 8009856:	4b7c      	ldr	r3, [pc, #496]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a7b      	ldr	r2, [pc, #492]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800985c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	e01d      	b.n	80098a0 <HAL_RCC_OscConfig+0xcc>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800986c:	d10c      	bne.n	8009888 <HAL_RCC_OscConfig+0xb4>
 800986e:	4b76      	ldr	r3, [pc, #472]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a75      	ldr	r2, [pc, #468]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	4b73      	ldr	r3, [pc, #460]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a72      	ldr	r2, [pc, #456]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	e00b      	b.n	80098a0 <HAL_RCC_OscConfig+0xcc>
 8009888:	4b6f      	ldr	r3, [pc, #444]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a6e      	ldr	r2, [pc, #440]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800988e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	4b6c      	ldr	r3, [pc, #432]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a6b      	ldr	r2, [pc, #428]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800989a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800989e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d013      	beq.n	80098d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a8:	f7fc fbe0 	bl	800606c <HAL_GetTick>
 80098ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ae:	e008      	b.n	80098c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098b0:	f7fc fbdc 	bl	800606c <HAL_GetTick>
 80098b4:	4602      	mov	r2, r0
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	2b64      	cmp	r3, #100	; 0x64
 80098bc:	d901      	bls.n	80098c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e21f      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098c2:	4b61      	ldr	r3, [pc, #388]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0f0      	beq.n	80098b0 <HAL_RCC_OscConfig+0xdc>
 80098ce:	e014      	b.n	80098fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d0:	f7fc fbcc 	bl	800606c <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098d6:	e008      	b.n	80098ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098d8:	f7fc fbc8 	bl	800606c <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b64      	cmp	r3, #100	; 0x64
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e20b      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098ea:	4b57      	ldr	r3, [pc, #348]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f0      	bne.n	80098d8 <HAL_RCC_OscConfig+0x104>
 80098f6:	e000      	b.n	80098fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d06f      	beq.n	80099e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009906:	4b50      	ldr	r3, [pc, #320]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 030c 	and.w	r3, r3, #12
 800990e:	2b00      	cmp	r3, #0
 8009910:	d017      	beq.n	8009942 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009912:	4b4d      	ldr	r3, [pc, #308]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800991a:	2b08      	cmp	r3, #8
 800991c:	d105      	bne.n	800992a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800991e:	4b4a      	ldr	r3, [pc, #296]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800992a:	4b47      	ldr	r3, [pc, #284]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009932:	2b0c      	cmp	r3, #12
 8009934:	d11c      	bne.n	8009970 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009936:	4b44      	ldr	r3, [pc, #272]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d116      	bne.n	8009970 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009942:	4b41      	ldr	r3, [pc, #260]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <HAL_RCC_OscConfig+0x186>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d001      	beq.n	800995a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e1d3      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800995a:	4b3b      	ldr	r3, [pc, #236]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	4937      	ldr	r1, [pc, #220]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800996a:	4313      	orrs	r3, r2
 800996c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800996e:	e03a      	b.n	80099e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d020      	beq.n	80099ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009978:	4b34      	ldr	r3, [pc, #208]	; (8009a4c <HAL_RCC_OscConfig+0x278>)
 800997a:	2201      	movs	r2, #1
 800997c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800997e:	f7fc fb75 	bl	800606c <HAL_GetTick>
 8009982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009986:	f7fc fb71 	bl	800606c <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e1b4      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009998:	4b2b      	ldr	r3, [pc, #172]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0f0      	beq.n	8009986 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a4:	4b28      	ldr	r3, [pc, #160]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	4925      	ldr	r1, [pc, #148]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	600b      	str	r3, [r1, #0]
 80099b8:	e015      	b.n	80099e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099ba:	4b24      	ldr	r3, [pc, #144]	; (8009a4c <HAL_RCC_OscConfig+0x278>)
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c0:	f7fc fb54 	bl	800606c <HAL_GetTick>
 80099c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099c8:	f7fc fb50 	bl	800606c <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e193      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099da:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1f0      	bne.n	80099c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d036      	beq.n	8009a60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d016      	beq.n	8009a28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <HAL_RCC_OscConfig+0x27c>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a00:	f7fc fb34 	bl	800606c <HAL_GetTick>
 8009a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a08:	f7fc fb30 	bl	800606c <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e173      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <HAL_RCC_OscConfig+0x274>)
 8009a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0f0      	beq.n	8009a08 <HAL_RCC_OscConfig+0x234>
 8009a26:	e01b      	b.n	8009a60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a28:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <HAL_RCC_OscConfig+0x27c>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2e:	f7fc fb1d 	bl	800606c <HAL_GetTick>
 8009a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a34:	e00e      	b.n	8009a54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a36:	f7fc fb19 	bl	800606c <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d907      	bls.n	8009a54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e15c      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
 8009a48:	40023800 	.word	0x40023800
 8009a4c:	42470000 	.word	0x42470000
 8009a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a54:	4b8a      	ldr	r3, [pc, #552]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1ea      	bne.n	8009a36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 8097 	beq.w	8009b9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a72:	4b83      	ldr	r3, [pc, #524]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10f      	bne.n	8009a9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60bb      	str	r3, [r7, #8]
 8009a82:	4b7f      	ldr	r3, [pc, #508]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	4a7e      	ldr	r2, [pc, #504]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009a8e:	4b7c      	ldr	r3, [pc, #496]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a96:	60bb      	str	r3, [r7, #8]
 8009a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a9e:	4b79      	ldr	r3, [pc, #484]	; (8009c84 <HAL_RCC_OscConfig+0x4b0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d118      	bne.n	8009adc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009aaa:	4b76      	ldr	r3, [pc, #472]	; (8009c84 <HAL_RCC_OscConfig+0x4b0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a75      	ldr	r2, [pc, #468]	; (8009c84 <HAL_RCC_OscConfig+0x4b0>)
 8009ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ab6:	f7fc fad9 	bl	800606c <HAL_GetTick>
 8009aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009abc:	e008      	b.n	8009ad0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009abe:	f7fc fad5 	bl	800606c <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d901      	bls.n	8009ad0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e118      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ad0:	4b6c      	ldr	r3, [pc, #432]	; (8009c84 <HAL_RCC_OscConfig+0x4b0>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f0      	beq.n	8009abe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d106      	bne.n	8009af2 <HAL_RCC_OscConfig+0x31e>
 8009ae4:	4b66      	ldr	r3, [pc, #408]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae8:	4a65      	ldr	r2, [pc, #404]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009aea:	f043 0301 	orr.w	r3, r3, #1
 8009aee:	6713      	str	r3, [r2, #112]	; 0x70
 8009af0:	e01c      	b.n	8009b2c <HAL_RCC_OscConfig+0x358>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d10c      	bne.n	8009b14 <HAL_RCC_OscConfig+0x340>
 8009afa:	4b61      	ldr	r3, [pc, #388]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afe:	4a60      	ldr	r2, [pc, #384]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b00:	f043 0304 	orr.w	r3, r3, #4
 8009b04:	6713      	str	r3, [r2, #112]	; 0x70
 8009b06:	4b5e      	ldr	r3, [pc, #376]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b0a:	4a5d      	ldr	r2, [pc, #372]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b0c:	f043 0301 	orr.w	r3, r3, #1
 8009b10:	6713      	str	r3, [r2, #112]	; 0x70
 8009b12:	e00b      	b.n	8009b2c <HAL_RCC_OscConfig+0x358>
 8009b14:	4b5a      	ldr	r3, [pc, #360]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b18:	4a59      	ldr	r2, [pc, #356]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b1a:	f023 0301 	bic.w	r3, r3, #1
 8009b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b20:	4b57      	ldr	r3, [pc, #348]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b24:	4a56      	ldr	r2, [pc, #344]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b26:	f023 0304 	bic.w	r3, r3, #4
 8009b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d015      	beq.n	8009b60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b34:	f7fc fa9a 	bl	800606c <HAL_GetTick>
 8009b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b3a:	e00a      	b.n	8009b52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b3c:	f7fc fa96 	bl	800606c <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e0d7      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b52:	4b4b      	ldr	r3, [pc, #300]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0ee      	beq.n	8009b3c <HAL_RCC_OscConfig+0x368>
 8009b5e:	e014      	b.n	8009b8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b60:	f7fc fa84 	bl	800606c <HAL_GetTick>
 8009b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b66:	e00a      	b.n	8009b7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b68:	f7fc fa80 	bl	800606c <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d901      	bls.n	8009b7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e0c1      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b7e:	4b40      	ldr	r3, [pc, #256]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1ee      	bne.n	8009b68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d105      	bne.n	8009b9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b90:	4b3b      	ldr	r3, [pc, #236]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b94:	4a3a      	ldr	r2, [pc, #232]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 80ad 	beq.w	8009d00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ba6:	4b36      	ldr	r3, [pc, #216]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f003 030c 	and.w	r3, r3, #12
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d060      	beq.n	8009c74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d145      	bne.n	8009c46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bba:	4b33      	ldr	r3, [pc, #204]	; (8009c88 <HAL_RCC_OscConfig+0x4b4>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc0:	f7fc fa54 	bl	800606c <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bc8:	f7fc fa50 	bl	800606c <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e093      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bda:	4b29      	ldr	r3, [pc, #164]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69da      	ldr	r2, [r3, #28]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	019b      	lsls	r3, r3, #6
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfc:	085b      	lsrs	r3, r3, #1
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	041b      	lsls	r3, r3, #16
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c10:	071b      	lsls	r3, r3, #28
 8009c12:	491b      	ldr	r1, [pc, #108]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c18:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <HAL_RCC_OscConfig+0x4b4>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c1e:	f7fc fa25 	bl	800606c <HAL_GetTick>
 8009c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c26:	f7fc fa21 	bl	800606c <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e064      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c38:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0f0      	beq.n	8009c26 <HAL_RCC_OscConfig+0x452>
 8009c44:	e05c      	b.n	8009d00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <HAL_RCC_OscConfig+0x4b4>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7fc fa0e 	bl	800606c <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c54:	f7fc fa0a 	bl	800606c <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e04d      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c66:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <HAL_RCC_OscConfig+0x4ac>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f0      	bne.n	8009c54 <HAL_RCC_OscConfig+0x480>
 8009c72:	e045      	b.n	8009d00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d107      	bne.n	8009c8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e040      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
 8009c80:	40023800 	.word	0x40023800
 8009c84:	40007000 	.word	0x40007000
 8009c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c8c:	4b1f      	ldr	r3, [pc, #124]	; (8009d0c <HAL_RCC_OscConfig+0x538>)
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d030      	beq.n	8009cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d129      	bne.n	8009cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d122      	bne.n	8009cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d119      	bne.n	8009cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d10f      	bne.n	8009cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d107      	bne.n	8009cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d001      	beq.n	8009d00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e000      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	40023800 	.word	0x40023800

08009d10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e066      	b.n	8009df4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	7f5b      	ldrb	r3, [r3, #29]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d105      	bne.n	8009d3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7fb fb62 	bl	8005400 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	22ca      	movs	r2, #202	; 0xca
 8009d48:	625a      	str	r2, [r3, #36]	; 0x24
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2253      	movs	r2, #83	; 0x53
 8009d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f927 	bl	8009fa6 <RTC_EnterInitMode>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d12c      	bne.n	8009dbc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	6812      	ldr	r2, [r2, #0]
 8009d6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d74:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6899      	ldr	r1, [r3, #8]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	431a      	orrs	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	68d2      	ldr	r2, [r2, #12]
 8009d9c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6919      	ldr	r1, [r3, #16]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	041a      	lsls	r2, r3, #16
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f92e 	bl	800a014 <RTC_ExitInitMode>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d113      	bne.n	8009dea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009dd0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	699a      	ldr	r2, [r3, #24]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	22ff      	movs	r2, #255	; 0xff
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009e2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009e32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	0c1b      	lsrs	r3, r3, #16
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	0a1b      	lsrs	r3, r3, #8
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	0d9b      	lsrs	r3, r3, #22
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11a      	bne.n	8009eae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f8ee 	bl	800a05e <RTC_Bcd2ToByte>
 8009e82:	4603      	mov	r3, r0
 8009e84:	461a      	mov	r2, r3
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f8e5 	bl	800a05e <RTC_Bcd2ToByte>
 8009e94:	4603      	mov	r3, r0
 8009e96:	461a      	mov	r2, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	789b      	ldrb	r3, [r3, #2]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 f8dc 	bl	800a05e <RTC_Bcd2ToByte>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ed2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ed6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 031f 	and.w	r3, r3, #31
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	0b5b      	lsrs	r3, r3, #13
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d11a      	bne.n	8009f4c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	78db      	ldrb	r3, [r3, #3]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f89f 	bl	800a05e <RTC_Bcd2ToByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f896 	bl	800a05e <RTC_Bcd2ToByte>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	789b      	ldrb	r3, [r3, #2]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f88d 	bl	800a05e <RTC_Bcd2ToByte>
 8009f44:	4603      	mov	r3, r0
 8009f46:	461a      	mov	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f70:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f72:	f7fc f87b 	bl	800606c <HAL_GetTick>
 8009f76:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f78:	e009      	b.n	8009f8e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f7a:	f7fc f877 	bl	800606c <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f88:	d901      	bls.n	8009f8e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e007      	b.n	8009f9e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0320 	and.w	r3, r3, #32
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0ee      	beq.n	8009f7a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d122      	bne.n	800a00a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fd2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fd4:	f7fc f84a 	bl	800606c <HAL_GetTick>
 8009fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009fda:	e00c      	b.n	8009ff6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fdc:	f7fc f846 	bl	800606c <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fea:	d904      	bls.n	8009ff6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2204      	movs	r2, #4
 8009ff0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <RTC_EnterInitMode+0x64>
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d1e8      	bne.n	8009fdc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a02e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff ff89 	bl	8009f56 <HAL_RTC_WaitForSynchro>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2204      	movs	r2, #4
 800a04e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a05e:	b480      	push	{r7}
 800a060:	b085      	sub	sp, #20
 800a062:	af00      	add	r7, sp, #0
 800a064:	4603      	mov	r3, r0
 800a066:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	091b      	lsrs	r3, r3, #4
 800a070:	b2db      	uxtb	r3, r3
 800a072:	461a      	mov	r2, r3
 800a074:	0092      	lsls	r2, r2, #2
 800a076:	4413      	add	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	f003 030f 	and.w	r3, r3, #15
 800a082:	b2da      	uxtb	r2, r3
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	4413      	add	r3, r2
 800a088:	b2db      	uxtb	r3, r3
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a096:	b480      	push	{r7}
 800a098:	b087      	sub	sp, #28
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3350      	adds	r3, #80	; 0x50
 800a0ac:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	601a      	str	r2, [r3, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b085      	sub	sp, #20
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3350      	adds	r3, #80	; 0x50
 800a0de:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e03f      	b.n	800a18c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7fb f997 	bl	8005454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	; 0x24
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a13c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 f87c 	bl	800b23c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a152:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695a      	ldr	r2, [r3, #20]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a162:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a172:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e021      	b.n	800a1ea <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2224      	movs	r2, #36	; 0x24
 800a1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1bc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fb fae0 	bl	8005784 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b08a      	sub	sp, #40	; 0x28
 800a1f6:	af02      	add	r7, sp, #8
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	603b      	str	r3, [r7, #0]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b20      	cmp	r3, #32
 800a210:	d17c      	bne.n	800a30c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <HAL_UART_Transmit+0x2c>
 800a218:	88fb      	ldrh	r3, [r7, #6]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e075      	b.n	800a30e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_UART_Transmit+0x3e>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e06e      	b.n	800a30e <HAL_UART_Transmit+0x11c>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2221      	movs	r2, #33	; 0x21
 800a242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a246:	f7fb ff11 	bl	800606c <HAL_GetTick>
 800a24a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	88fa      	ldrh	r2, [r7, #6]
 800a250:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	88fa      	ldrh	r2, [r7, #6]
 800a256:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a260:	d108      	bne.n	800a274 <HAL_UART_Transmit+0x82>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d104      	bne.n	800a274 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	e003      	b.n	800a27c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a284:	e02a      	b.n	800a2dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2200      	movs	r2, #0
 800a28e:	2180      	movs	r1, #128	; 0x80
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 fd04 	bl	800ac9e <UART_WaitOnFlagUntilTimeout>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e036      	b.n	800a30e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	3302      	adds	r3, #2
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e007      	b.n	800a2ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	781a      	ldrb	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1cf      	bne.n	800a286 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2140      	movs	r1, #64	; 0x40
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 fcd4 	bl	800ac9e <UART_WaitOnFlagUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e006      	b.n	800a30e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2220      	movs	r2, #32
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	e000      	b.n	800a30e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a30c:	2302      	movs	r3, #2
  }
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3720      	adds	r7, #32
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08c      	sub	sp, #48	; 0x30
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d165      	bne.n	800a3fe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <HAL_UART_Transmit_DMA+0x26>
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e05e      	b.n	800a400 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_UART_Transmit_DMA+0x38>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e057      	b.n	800a400 <HAL_UART_Transmit_DMA+0xe8>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2221      	movs	r2, #33	; 0x21
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37c:	4a22      	ldr	r2, [pc, #136]	; (800a408 <HAL_UART_Transmit_DMA+0xf0>)
 800a37e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	4a21      	ldr	r2, [pc, #132]	; (800a40c <HAL_UART_Transmit_DMA+0xf4>)
 800a386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	4a20      	ldr	r2, [pc, #128]	; (800a410 <HAL_UART_Transmit_DMA+0xf8>)
 800a38e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a394:	2200      	movs	r2, #0
 800a396:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a398:	f107 0308 	add.w	r3, r7, #8
 800a39c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	6819      	ldr	r1, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	f7fc fcec 	bl	8006d8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3bc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3314      	adds	r3, #20
 800a3cc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3314      	adds	r3, #20
 800a3e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e6:	627a      	str	r2, [r7, #36]	; 0x24
 800a3e8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6a39      	ldr	r1, [r7, #32]
 800a3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e5      	bne.n	800a3c6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e000      	b.n	800a400 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a3fe:	2302      	movs	r3, #2
  }
}
 800a400:	4618      	mov	r0, r3
 800a402:	3730      	adds	r7, #48	; 0x30
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	0800a9f9 	.word	0x0800a9f9
 800a40c:	0800aa93 	.word	0x0800aa93
 800a410:	0800ac0b 	.word	0x0800ac0b

0800a414 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	d11d      	bne.n	800a46a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <HAL_UART_Receive_DMA+0x26>
 800a434:	88fb      	ldrh	r3, [r7, #6]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e016      	b.n	800a46c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_UART_Receive_DMA+0x38>
 800a448:	2302      	movs	r3, #2
 800a44a:	e00f      	b.n	800a46c <HAL_UART_Receive_DMA+0x58>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 fc8b 	bl	800ad7c <UART_Start_Receive_DMA>
 800a466:	4603      	mov	r3, r0
 800a468:	e000      	b.n	800a46c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a46a:	2302      	movs	r3, #2
  }
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b0ba      	sub	sp, #232	; 0xe8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10f      	bne.n	800a4da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <HAL_UART_IRQHandler+0x66>
 800a4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fdf7 	bl	800b0c6 <UART_Receive_IT>
      return;
 800a4d8:	e256      	b.n	800a988 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80de 	beq.w	800a6a0 <HAL_UART_IRQHandler+0x22c>
 800a4e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 80d1 	beq.w	800a6a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00b      	beq.n	800a522 <HAL_UART_IRQHandler+0xae>
 800a50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a512:	2b00      	cmp	r3, #0
 800a514:	d005      	beq.n	800a522 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	f043 0201 	orr.w	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <HAL_UART_IRQHandler+0xd2>
 800a52e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d005      	beq.n	800a546 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53e:	f043 0202 	orr.w	r2, r3, #2
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00b      	beq.n	800a56a <HAL_UART_IRQHandler+0xf6>
 800a552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	f043 0204 	orr.w	r2, r3, #4
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b00      	cmp	r3, #0
 800a574:	d011      	beq.n	800a59a <HAL_UART_IRQHandler+0x126>
 800a576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	f043 0208 	orr.w	r2, r3, #8
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 81ed 	beq.w	800a97e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a8:	f003 0320 	and.w	r3, r3, #32
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d008      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x14e>
 800a5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fd82 	bl	800b0c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5cc:	2b40      	cmp	r3, #64	; 0x40
 800a5ce:	bf0c      	ite	eq
 800a5d0:	2301      	moveq	r3, #1
 800a5d2:	2300      	movne	r3, #0
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d103      	bne.n	800a5ee <HAL_UART_IRQHandler+0x17a>
 800a5e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d04f      	beq.n	800a68e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fc8a 	bl	800af08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d141      	bne.n	800a686 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3314      	adds	r3, #20
 800a608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a61c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3314      	adds	r3, #20
 800a62a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a62e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a63a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1d9      	bne.n	800a602 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	2b00      	cmp	r3, #0
 800a654:	d013      	beq.n	800a67e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	4a7d      	ldr	r2, [pc, #500]	; (800a850 <HAL_UART_IRQHandler+0x3dc>)
 800a65c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	4618      	mov	r0, r3
 800a664:	f7fc fc5a 	bl	8006f1c <HAL_DMA_Abort_IT>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d016      	beq.n	800a69c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a678:	4610      	mov	r0, r2
 800a67a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	e00e      	b.n	800a69c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9a4 	bl	800a9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a684:	e00a      	b.n	800a69c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f9a0 	bl	800a9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68c:	e006      	b.n	800a69c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f99c 	bl	800a9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a69a:	e170      	b.n	800a97e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a69c:	bf00      	nop
    return;
 800a69e:	e16e      	b.n	800a97e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	f040 814a 	bne.w	800a93e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0310 	and.w	r3, r3, #16
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 8143 	beq.w	800a93e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 813c 	beq.w	800a93e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	60bb      	str	r3, [r7, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	60bb      	str	r3, [r7, #8]
 800a6da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e6:	2b40      	cmp	r3, #64	; 0x40
 800a6e8:	f040 80b4 	bne.w	800a854 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8140 	beq.w	800a982 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a70a:	429a      	cmp	r2, r3
 800a70c:	f080 8139 	bcs.w	800a982 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a716:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a722:	f000 8088 	beq.w	800a836 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	330c      	adds	r3, #12
 800a72c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a73c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	330c      	adds	r3, #12
 800a74e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a75e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a76a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1d9      	bne.n	800a726 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3314      	adds	r3, #20
 800a778:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a784:	f023 0301 	bic.w	r3, r3, #1
 800a788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3314      	adds	r3, #20
 800a792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a796:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a79a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a79e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e1      	bne.n	800a772 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3314      	adds	r3, #20
 800a7b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3314      	adds	r3, #20
 800a7ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7da:	e841 2300 	strex	r3, r2, [r1]
 800a7de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1e3      	bne.n	800a7ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a806:	f023 0310 	bic.w	r3, r3, #16
 800a80a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a818:	65ba      	str	r2, [r7, #88]	; 0x58
 800a81a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a81e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a820:	e841 2300 	strex	r3, r2, [r1]
 800a824:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e3      	bne.n	800a7f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	4618      	mov	r0, r3
 800a832:	f7fc fb03 	bl	8006e3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a83e:	b29b      	uxth	r3, r3
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	b29b      	uxth	r3, r3
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f8ca 	bl	800a9e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a84c:	e099      	b.n	800a982 <HAL_UART_IRQHandler+0x50e>
 800a84e:	bf00      	nop
 800a850:	0800afcf 	.word	0x0800afcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a868:	b29b      	uxth	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 808b 	beq.w	800a986 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8086 	beq.w	800a986 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	330c      	adds	r3, #12
 800a880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a884:	e853 3f00 	ldrex	r3, [r3]
 800a888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a89e:	647a      	str	r2, [r7, #68]	; 0x44
 800a8a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e3      	bne.n	800a87a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3314      	adds	r3, #20
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8d6:	633a      	str	r2, [r7, #48]	; 0x30
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e3      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	60fb      	str	r3, [r7, #12]
   return(result);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0310 	bic.w	r3, r3, #16
 800a90e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	330c      	adds	r3, #12
 800a918:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a91c:	61fa      	str	r2, [r7, #28]
 800a91e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	69b9      	ldr	r1, [r7, #24]
 800a922:	69fa      	ldr	r2, [r7, #28]
 800a924:	e841 2300 	strex	r3, r2, [r1]
 800a928:	617b      	str	r3, [r7, #20]
   return(result);
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e3      	bne.n	800a8f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f852 	bl	800a9e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a93c:	e023      	b.n	800a986 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <HAL_UART_IRQHandler+0x4ea>
 800a94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fb4d 	bl	800aff6 <UART_Transmit_IT>
    return;
 800a95c:	e014      	b.n	800a988 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00e      	beq.n	800a988 <HAL_UART_IRQHandler+0x514>
 800a96a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a972:	2b00      	cmp	r3, #0
 800a974:	d008      	beq.n	800a988 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fb8d 	bl	800b096 <UART_EndTransmit_IT>
    return;
 800a97c:	e004      	b.n	800a988 <HAL_UART_IRQHandler+0x514>
    return;
 800a97e:	bf00      	nop
 800a980:	e002      	b.n	800a988 <HAL_UART_IRQHandler+0x514>
      return;
 800a982:	bf00      	nop
 800a984:	e000      	b.n	800a988 <HAL_UART_IRQHandler+0x514>
      return;
 800a986:	bf00      	nop
  }
}
 800a988:	37e8      	adds	r7, #232	; 0xe8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop

0800a990 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b090      	sub	sp, #64	; 0x40
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d137      	bne.n	800aa84 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa16:	2200      	movs	r2, #0
 800aa18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3314      	adds	r3, #20
 800aa20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	623b      	str	r3, [r7, #32]
   return(result);
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa30:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3314      	adds	r3, #20
 800aa38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa3a:	633a      	str	r2, [r7, #48]	; 0x30
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e5      	bne.n	800aa1a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	330c      	adds	r3, #12
 800aa54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
 800aa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	330c      	adds	r3, #12
 800aa6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa6e:	61fa      	str	r2, [r7, #28]
 800aa70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	69b9      	ldr	r1, [r7, #24]
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e5      	bne.n	800aa4e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa82:	e002      	b.n	800aa8a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aa84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa86:	f7ff ff83 	bl	800a990 <HAL_UART_TxCpltCallback>
}
 800aa8a:	bf00      	nop
 800aa8c:	3740      	adds	r7, #64	; 0x40
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff ff7f 	bl	800a9a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b09c      	sub	sp, #112	; 0x70
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d172      	bne.n	800abb0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aaca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aacc:	2200      	movs	r2, #0
 800aace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	330c      	adds	r3, #12
 800aad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aae6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	330c      	adds	r3, #12
 800aaee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaf0:	65ba      	str	r2, [r7, #88]	; 0x58
 800aaf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e5      	bne.n	800aad0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3314      	adds	r3, #20
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	f023 0301 	bic.w	r3, r3, #1
 800ab1a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3314      	adds	r3, #20
 800ab22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab24:	647a      	str	r2, [r7, #68]	; 0x44
 800ab26:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e5      	bne.n	800ab04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	623b      	str	r3, [r7, #32]
   return(result);
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab4e:	663b      	str	r3, [r7, #96]	; 0x60
 800ab50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3314      	adds	r3, #20
 800ab56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab58:	633a      	str	r2, [r7, #48]	; 0x30
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e5      	bne.n	800ab38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d119      	bne.n	800abb0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	330c      	adds	r3, #12
 800ab82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	e853 3f00 	ldrex	r3, [r3]
 800ab8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 0310 	bic.w	r3, r3, #16
 800ab92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	330c      	adds	r3, #12
 800ab9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab9c:	61fa      	str	r2, [r7, #28]
 800ab9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba0:	69b9      	ldr	r1, [r7, #24]
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	e841 2300 	strex	r3, r2, [r1]
 800aba8:	617b      	str	r3, [r7, #20]
   return(result);
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1e5      	bne.n	800ab7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d106      	bne.n	800abc6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abbc:	4619      	mov	r1, r3
 800abbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abc0:	f7ff ff0e 	bl	800a9e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abc4:	e002      	b.n	800abcc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800abc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abc8:	f7fa ff92 	bl	8005af0 <HAL_UART_RxCpltCallback>
}
 800abcc:	bf00      	nop
 800abce:	3770      	adds	r7, #112	; 0x70
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d108      	bne.n	800abfc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abee:	085b      	lsrs	r3, r3, #1
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff fef3 	bl	800a9e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abfa:	e002      	b.n	800ac02 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7ff fedb 	bl	800a9b8 <HAL_UART_RxHalfCpltCallback>
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b80      	cmp	r3, #128	; 0x80
 800ac28:	bf0c      	ite	eq
 800ac2a:	2301      	moveq	r3, #1
 800ac2c:	2300      	movne	r3, #0
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b21      	cmp	r3, #33	; 0x21
 800ac3c:	d108      	bne.n	800ac50 <UART_DMAError+0x46>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac4a:	68b8      	ldr	r0, [r7, #8]
 800ac4c:	f000 f934 	bl	800aeb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	bf0c      	ite	eq
 800ac5e:	2301      	moveq	r3, #1
 800ac60:	2300      	movne	r3, #0
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b22      	cmp	r3, #34	; 0x22
 800ac70:	d108      	bne.n	800ac84 <UART_DMAError+0x7a>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d005      	beq.n	800ac84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac7e:	68b8      	ldr	r0, [r7, #8]
 800ac80:	f000 f942 	bl	800af08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac88:	f043 0210 	orr.w	r2, r3, #16
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac90:	68b8      	ldr	r0, [r7, #8]
 800ac92:	f7ff fe9b 	bl	800a9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac96:	bf00      	nop
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b090      	sub	sp, #64	; 0x40
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	603b      	str	r3, [r7, #0]
 800acaa:	4613      	mov	r3, r2
 800acac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acae:	e050      	b.n	800ad52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d04c      	beq.n	800ad52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800acb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d007      	beq.n	800acce <UART_WaitOnFlagUntilTimeout+0x30>
 800acbe:	f7fb f9d5 	bl	800606c <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acca:	429a      	cmp	r2, r3
 800accc:	d241      	bcs.n	800ad52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	330c      	adds	r3, #12
 800acd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	330c      	adds	r3, #12
 800acec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acee:	637a      	str	r2, [r7, #52]	; 0x34
 800acf0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e5      	bne.n	800acce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3314      	adds	r3, #20
 800ad08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	613b      	str	r3, [r7, #16]
   return(result);
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f023 0301 	bic.w	r3, r3, #1
 800ad18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3314      	adds	r3, #20
 800ad20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad22:	623a      	str	r2, [r7, #32]
 800ad24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	69f9      	ldr	r1, [r7, #28]
 800ad28:	6a3a      	ldr	r2, [r7, #32]
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e5      	bne.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e00f      	b.n	800ad72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	bf0c      	ite	eq
 800ad62:	2301      	moveq	r3, #1
 800ad64:	2300      	movne	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	461a      	mov	r2, r3
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d09f      	beq.n	800acb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3740      	adds	r7, #64	; 0x40
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b098      	sub	sp, #96	; 0x60
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	4613      	mov	r3, r2
 800ad88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	88fa      	ldrh	r2, [r7, #6]
 800ad94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2222      	movs	r2, #34	; 0x22
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	4a40      	ldr	r2, [pc, #256]	; (800aeac <UART_Start_Receive_DMA+0x130>)
 800adaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	4a3f      	ldr	r2, [pc, #252]	; (800aeb0 <UART_Start_Receive_DMA+0x134>)
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb8:	4a3e      	ldr	r2, [pc, #248]	; (800aeb4 <UART_Start_Receive_DMA+0x138>)
 800adba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc0:	2200      	movs	r2, #0
 800adc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3304      	adds	r3, #4
 800add4:	4619      	mov	r1, r3
 800add6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	f7fb ffd6 	bl	8006d8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ade0:	2300      	movs	r3, #0
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	613b      	str	r3, [r7, #16]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d019      	beq.n	800ae3a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	330c      	adds	r3, #12
 800ae0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	330c      	adds	r3, #12
 800ae24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae26:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ae28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ae2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ae34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e5      	bne.n	800ae06 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3314      	adds	r3, #20
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	f043 0301 	orr.w	r3, r3, #1
 800ae50:	657b      	str	r3, [r7, #84]	; 0x54
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3314      	adds	r3, #20
 800ae58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae5a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ae5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e5      	bne.n	800ae3a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3314      	adds	r3, #20
 800ae74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae84:	653b      	str	r3, [r7, #80]	; 0x50
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3314      	adds	r3, #20
 800ae8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae8e:	627a      	str	r2, [r7, #36]	; 0x24
 800ae90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	6a39      	ldr	r1, [r7, #32]
 800ae94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e5      	bne.n	800ae6e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3760      	adds	r7, #96	; 0x60
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	0800aaaf 	.word	0x0800aaaf
 800aeb0:	0800abd5 	.word	0x0800abd5
 800aeb4:	0800ac0b 	.word	0x0800ac0b

0800aeb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b089      	sub	sp, #36	; 0x24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	330c      	adds	r3, #12
 800aec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	60bb      	str	r3, [r7, #8]
   return(result);
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aed6:	61fb      	str	r3, [r7, #28]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	330c      	adds	r3, #12
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	61ba      	str	r2, [r7, #24]
 800aee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	6979      	ldr	r1, [r7, #20]
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	613b      	str	r3, [r7, #16]
   return(result);
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e5      	bne.n	800aec0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aefc:	bf00      	nop
 800aefe:	3724      	adds	r7, #36	; 0x24
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af08:	b480      	push	{r7}
 800af0a:	b095      	sub	sp, #84	; 0x54
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	330c      	adds	r3, #12
 800af16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	330c      	adds	r3, #12
 800af2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af30:	643a      	str	r2, [r7, #64]	; 0x40
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af38:	e841 2300 	strex	r3, r2, [r1]
 800af3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1e5      	bne.n	800af10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3314      	adds	r3, #20
 800af4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	61fb      	str	r3, [r7, #28]
   return(result);
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	f023 0301 	bic.w	r3, r3, #1
 800af5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3314      	adds	r3, #20
 800af62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af64:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e5      	bne.n	800af44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d119      	bne.n	800afb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	330c      	adds	r3, #12
 800af86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f023 0310 	bic.w	r3, r3, #16
 800af96:	647b      	str	r3, [r7, #68]	; 0x44
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	330c      	adds	r3, #12
 800af9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa0:	61ba      	str	r2, [r7, #24]
 800afa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6979      	ldr	r1, [r7, #20]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	e841 2300 	strex	r3, r2, [r1]
 800afac:	613b      	str	r3, [r7, #16]
   return(result);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e5      	bne.n	800af80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800afc2:	bf00      	nop
 800afc4:	3754      	adds	r7, #84	; 0x54
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fcef 	bl	800a9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b085      	sub	sp, #20
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b21      	cmp	r3, #33	; 0x21
 800b008:	d13e      	bne.n	800b088 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b012:	d114      	bne.n	800b03e <UART_Transmit_IT+0x48>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d110      	bne.n	800b03e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b030:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	1c9a      	adds	r2, r3, #2
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	621a      	str	r2, [r3, #32]
 800b03c:	e008      	b.n	800b050 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	1c59      	adds	r1, r3, #1
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	6211      	str	r1, [r2, #32]
 800b048:	781a      	ldrb	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b054:	b29b      	uxth	r3, r3
 800b056:	3b01      	subs	r3, #1
 800b058:	b29b      	uxth	r3, r3
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	4619      	mov	r1, r3
 800b05e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10f      	bne.n	800b084 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	e000      	b.n	800b08a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b088:	2302      	movs	r3, #2
  }
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b082      	sub	sp, #8
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68da      	ldr	r2, [r3, #12]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff fc6a 	bl	800a990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b08c      	sub	sp, #48	; 0x30
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b22      	cmp	r3, #34	; 0x22
 800b0d8:	f040 80ab 	bne.w	800b232 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e4:	d117      	bne.n	800b116 <UART_Receive_IT+0x50>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d113      	bne.n	800b116 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b104:	b29a      	uxth	r2, r3
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10e:	1c9a      	adds	r2, r3, #2
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	629a      	str	r2, [r3, #40]	; 0x28
 800b114:	e026      	b.n	800b164 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b128:	d007      	beq.n	800b13a <UART_Receive_IT+0x74>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10a      	bne.n	800b148 <UART_Receive_IT+0x82>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	b2da      	uxtb	r2, r3
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e008      	b.n	800b15a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b154:	b2da      	uxtb	r2, r3
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b168:	b29b      	uxth	r3, r3
 800b16a:	3b01      	subs	r3, #1
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	4619      	mov	r1, r3
 800b172:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b174:	2b00      	cmp	r3, #0
 800b176:	d15a      	bne.n	800b22e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68da      	ldr	r2, [r3, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f022 0220 	bic.w	r2, r2, #32
 800b186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68da      	ldr	r2, [r3, #12]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695a      	ldr	r2, [r3, #20]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0201 	bic.w	r2, r2, #1
 800b1a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d135      	bne.n	800b224 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	330c      	adds	r3, #12
 800b1c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f023 0310 	bic.w	r3, r3, #16
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	330c      	adds	r3, #12
 800b1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1de:	623a      	str	r2, [r7, #32]
 800b1e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	69f9      	ldr	r1, [r7, #28]
 800b1e4:	6a3a      	ldr	r2, [r7, #32]
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e5      	bne.n	800b1be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0310 	and.w	r3, r3, #16
 800b1fc:	2b10      	cmp	r3, #16
 800b1fe:	d10a      	bne.n	800b216 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff fbdf 	bl	800a9e0 <HAL_UARTEx_RxEventCallback>
 800b222:	e002      	b.n	800b22a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7fa fc63 	bl	8005af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e002      	b.n	800b234 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	e000      	b.n	800b234 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b232:	2302      	movs	r3, #2
  }
}
 800b234:	4618      	mov	r0, r3
 800b236:	3730      	adds	r7, #48	; 0x30
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b23c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b240:	b0c0      	sub	sp, #256	; 0x100
 800b242:	af00      	add	r7, sp, #0
 800b244:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b258:	68d9      	ldr	r1, [r3, #12]
 800b25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	ea40 0301 	orr.w	r3, r0, r1
 800b264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	431a      	orrs	r2, r3
 800b274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	4313      	orrs	r3, r2
 800b284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b294:	f021 010c 	bic.w	r1, r1, #12
 800b298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b6:	6999      	ldr	r1, [r3, #24]
 800b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	ea40 0301 	orr.w	r3, r0, r1
 800b2c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	4b8f      	ldr	r3, [pc, #572]	; (800b508 <UART_SetConfig+0x2cc>)
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d005      	beq.n	800b2dc <UART_SetConfig+0xa0>
 800b2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b8d      	ldr	r3, [pc, #564]	; (800b50c <UART_SetConfig+0x2d0>)
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d104      	bne.n	800b2e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2dc:	f7fd fd0c 	bl	8008cf8 <HAL_RCC_GetPCLK2Freq>
 800b2e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b2e4:	e003      	b.n	800b2ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b2e6:	f7fd fcf3 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 800b2ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2f8:	f040 810c 	bne.w	800b514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b300:	2200      	movs	r2, #0
 800b302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b306:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b30a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b30e:	4622      	mov	r2, r4
 800b310:	462b      	mov	r3, r5
 800b312:	1891      	adds	r1, r2, r2
 800b314:	65b9      	str	r1, [r7, #88]	; 0x58
 800b316:	415b      	adcs	r3, r3
 800b318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b31a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b31e:	4621      	mov	r1, r4
 800b320:	eb12 0801 	adds.w	r8, r2, r1
 800b324:	4629      	mov	r1, r5
 800b326:	eb43 0901 	adc.w	r9, r3, r1
 800b32a:	f04f 0200 	mov.w	r2, #0
 800b32e:	f04f 0300 	mov.w	r3, #0
 800b332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b33a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b33e:	4690      	mov	r8, r2
 800b340:	4699      	mov	r9, r3
 800b342:	4623      	mov	r3, r4
 800b344:	eb18 0303 	adds.w	r3, r8, r3
 800b348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b34c:	462b      	mov	r3, r5
 800b34e:	eb49 0303 	adc.w	r3, r9, r3
 800b352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b362:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b36a:	460b      	mov	r3, r1
 800b36c:	18db      	adds	r3, r3, r3
 800b36e:	653b      	str	r3, [r7, #80]	; 0x50
 800b370:	4613      	mov	r3, r2
 800b372:	eb42 0303 	adc.w	r3, r2, r3
 800b376:	657b      	str	r3, [r7, #84]	; 0x54
 800b378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b37c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b380:	f7f5 fe10 	bl	8000fa4 <__aeabi_uldivmod>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4b61      	ldr	r3, [pc, #388]	; (800b510 <UART_SetConfig+0x2d4>)
 800b38a:	fba3 2302 	umull	r2, r3, r3, r2
 800b38e:	095b      	lsrs	r3, r3, #5
 800b390:	011c      	lsls	r4, r3, #4
 800b392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b396:	2200      	movs	r2, #0
 800b398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b39c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b3a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b3a4:	4642      	mov	r2, r8
 800b3a6:	464b      	mov	r3, r9
 800b3a8:	1891      	adds	r1, r2, r2
 800b3aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800b3ac:	415b      	adcs	r3, r3
 800b3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	eb12 0a01 	adds.w	sl, r2, r1
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	eb43 0b01 	adc.w	fp, r3, r1
 800b3c0:	f04f 0200 	mov.w	r2, #0
 800b3c4:	f04f 0300 	mov.w	r3, #0
 800b3c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3d4:	4692      	mov	sl, r2
 800b3d6:	469b      	mov	fp, r3
 800b3d8:	4643      	mov	r3, r8
 800b3da:	eb1a 0303 	adds.w	r3, sl, r3
 800b3de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	eb4b 0303 	adc.w	r3, fp, r3
 800b3e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b3fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b400:	460b      	mov	r3, r1
 800b402:	18db      	adds	r3, r3, r3
 800b404:	643b      	str	r3, [r7, #64]	; 0x40
 800b406:	4613      	mov	r3, r2
 800b408:	eb42 0303 	adc.w	r3, r2, r3
 800b40c:	647b      	str	r3, [r7, #68]	; 0x44
 800b40e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b416:	f7f5 fdc5 	bl	8000fa4 <__aeabi_uldivmod>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	4b3b      	ldr	r3, [pc, #236]	; (800b510 <UART_SetConfig+0x2d4>)
 800b422:	fba3 2301 	umull	r2, r3, r3, r1
 800b426:	095b      	lsrs	r3, r3, #5
 800b428:	2264      	movs	r2, #100	; 0x64
 800b42a:	fb02 f303 	mul.w	r3, r2, r3
 800b42e:	1acb      	subs	r3, r1, r3
 800b430:	00db      	lsls	r3, r3, #3
 800b432:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b436:	4b36      	ldr	r3, [pc, #216]	; (800b510 <UART_SetConfig+0x2d4>)
 800b438:	fba3 2302 	umull	r2, r3, r3, r2
 800b43c:	095b      	lsrs	r3, r3, #5
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b444:	441c      	add	r4, r3
 800b446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b458:	4642      	mov	r2, r8
 800b45a:	464b      	mov	r3, r9
 800b45c:	1891      	adds	r1, r2, r2
 800b45e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b460:	415b      	adcs	r3, r3
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b468:	4641      	mov	r1, r8
 800b46a:	1851      	adds	r1, r2, r1
 800b46c:	6339      	str	r1, [r7, #48]	; 0x30
 800b46e:	4649      	mov	r1, r9
 800b470:	414b      	adcs	r3, r1
 800b472:	637b      	str	r3, [r7, #52]	; 0x34
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	f04f 0300 	mov.w	r3, #0
 800b47c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b480:	4659      	mov	r1, fp
 800b482:	00cb      	lsls	r3, r1, #3
 800b484:	4651      	mov	r1, sl
 800b486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b48a:	4651      	mov	r1, sl
 800b48c:	00ca      	lsls	r2, r1, #3
 800b48e:	4610      	mov	r0, r2
 800b490:	4619      	mov	r1, r3
 800b492:	4603      	mov	r3, r0
 800b494:	4642      	mov	r2, r8
 800b496:	189b      	adds	r3, r3, r2
 800b498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b49c:	464b      	mov	r3, r9
 800b49e:	460a      	mov	r2, r1
 800b4a0:	eb42 0303 	adc.w	r3, r2, r3
 800b4a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b4b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4bc:	460b      	mov	r3, r1
 800b4be:	18db      	adds	r3, r3, r3
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	eb42 0303 	adc.w	r3, r2, r3
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b4ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b4d2:	f7f5 fd67 	bl	8000fa4 <__aeabi_uldivmod>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <UART_SetConfig+0x2d4>)
 800b4dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b4e0:	095b      	lsrs	r3, r3, #5
 800b4e2:	2164      	movs	r1, #100	; 0x64
 800b4e4:	fb01 f303 	mul.w	r3, r1, r3
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	3332      	adds	r3, #50	; 0x32
 800b4ee:	4a08      	ldr	r2, [pc, #32]	; (800b510 <UART_SetConfig+0x2d4>)
 800b4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f4:	095b      	lsrs	r3, r3, #5
 800b4f6:	f003 0207 	and.w	r2, r3, #7
 800b4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4422      	add	r2, r4
 800b502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b504:	e105      	b.n	800b712 <UART_SetConfig+0x4d6>
 800b506:	bf00      	nop
 800b508:	40011000 	.word	0x40011000
 800b50c:	40011400 	.word	0x40011400
 800b510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b518:	2200      	movs	r2, #0
 800b51a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b51e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b526:	4642      	mov	r2, r8
 800b528:	464b      	mov	r3, r9
 800b52a:	1891      	adds	r1, r2, r2
 800b52c:	6239      	str	r1, [r7, #32]
 800b52e:	415b      	adcs	r3, r3
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
 800b532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b536:	4641      	mov	r1, r8
 800b538:	1854      	adds	r4, r2, r1
 800b53a:	4649      	mov	r1, r9
 800b53c:	eb43 0501 	adc.w	r5, r3, r1
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	f04f 0300 	mov.w	r3, #0
 800b548:	00eb      	lsls	r3, r5, #3
 800b54a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b54e:	00e2      	lsls	r2, r4, #3
 800b550:	4614      	mov	r4, r2
 800b552:	461d      	mov	r5, r3
 800b554:	4643      	mov	r3, r8
 800b556:	18e3      	adds	r3, r4, r3
 800b558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b55c:	464b      	mov	r3, r9
 800b55e:	eb45 0303 	adc.w	r3, r5, r3
 800b562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	f04f 0300 	mov.w	r3, #0
 800b57e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b582:	4629      	mov	r1, r5
 800b584:	008b      	lsls	r3, r1, #2
 800b586:	4621      	mov	r1, r4
 800b588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b58c:	4621      	mov	r1, r4
 800b58e:	008a      	lsls	r2, r1, #2
 800b590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b594:	f7f5 fd06 	bl	8000fa4 <__aeabi_uldivmod>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4b60      	ldr	r3, [pc, #384]	; (800b720 <UART_SetConfig+0x4e4>)
 800b59e:	fba3 2302 	umull	r2, r3, r3, r2
 800b5a2:	095b      	lsrs	r3, r3, #5
 800b5a4:	011c      	lsls	r4, r3, #4
 800b5a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	1891      	adds	r1, r2, r2
 800b5be:	61b9      	str	r1, [r7, #24]
 800b5c0:	415b      	adcs	r3, r3
 800b5c2:	61fb      	str	r3, [r7, #28]
 800b5c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5c8:	4641      	mov	r1, r8
 800b5ca:	1851      	adds	r1, r2, r1
 800b5cc:	6139      	str	r1, [r7, #16]
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	414b      	adcs	r3, r1
 800b5d2:	617b      	str	r3, [r7, #20]
 800b5d4:	f04f 0200 	mov.w	r2, #0
 800b5d8:	f04f 0300 	mov.w	r3, #0
 800b5dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5e0:	4659      	mov	r1, fp
 800b5e2:	00cb      	lsls	r3, r1, #3
 800b5e4:	4651      	mov	r1, sl
 800b5e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5ea:	4651      	mov	r1, sl
 800b5ec:	00ca      	lsls	r2, r1, #3
 800b5ee:	4610      	mov	r0, r2
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	4642      	mov	r2, r8
 800b5f6:	189b      	adds	r3, r3, r2
 800b5f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	460a      	mov	r2, r1
 800b600:	eb42 0303 	adc.w	r3, r2, r3
 800b604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	67bb      	str	r3, [r7, #120]	; 0x78
 800b612:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b614:	f04f 0200 	mov.w	r2, #0
 800b618:	f04f 0300 	mov.w	r3, #0
 800b61c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b620:	4649      	mov	r1, r9
 800b622:	008b      	lsls	r3, r1, #2
 800b624:	4641      	mov	r1, r8
 800b626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b62a:	4641      	mov	r1, r8
 800b62c:	008a      	lsls	r2, r1, #2
 800b62e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b632:	f7f5 fcb7 	bl	8000fa4 <__aeabi_uldivmod>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4b39      	ldr	r3, [pc, #228]	; (800b720 <UART_SetConfig+0x4e4>)
 800b63c:	fba3 1302 	umull	r1, r3, r3, r2
 800b640:	095b      	lsrs	r3, r3, #5
 800b642:	2164      	movs	r1, #100	; 0x64
 800b644:	fb01 f303 	mul.w	r3, r1, r3
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	011b      	lsls	r3, r3, #4
 800b64c:	3332      	adds	r3, #50	; 0x32
 800b64e:	4a34      	ldr	r2, [pc, #208]	; (800b720 <UART_SetConfig+0x4e4>)
 800b650:	fba2 2303 	umull	r2, r3, r2, r3
 800b654:	095b      	lsrs	r3, r3, #5
 800b656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b65a:	441c      	add	r4, r3
 800b65c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b660:	2200      	movs	r2, #0
 800b662:	673b      	str	r3, [r7, #112]	; 0x70
 800b664:	677a      	str	r2, [r7, #116]	; 0x74
 800b666:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b66a:	4642      	mov	r2, r8
 800b66c:	464b      	mov	r3, r9
 800b66e:	1891      	adds	r1, r2, r2
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	415b      	adcs	r3, r3
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b67a:	4641      	mov	r1, r8
 800b67c:	1851      	adds	r1, r2, r1
 800b67e:	6039      	str	r1, [r7, #0]
 800b680:	4649      	mov	r1, r9
 800b682:	414b      	adcs	r3, r1
 800b684:	607b      	str	r3, [r7, #4]
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b692:	4659      	mov	r1, fp
 800b694:	00cb      	lsls	r3, r1, #3
 800b696:	4651      	mov	r1, sl
 800b698:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b69c:	4651      	mov	r1, sl
 800b69e:	00ca      	lsls	r2, r1, #3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	4642      	mov	r2, r8
 800b6a8:	189b      	adds	r3, r3, r2
 800b6aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	460a      	mov	r2, r1
 800b6b0:	eb42 0303 	adc.w	r3, r2, r3
 800b6b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	663b      	str	r3, [r7, #96]	; 0x60
 800b6c0:	667a      	str	r2, [r7, #100]	; 0x64
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	008b      	lsls	r3, r1, #2
 800b6d2:	4641      	mov	r1, r8
 800b6d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6d8:	4641      	mov	r1, r8
 800b6da:	008a      	lsls	r2, r1, #2
 800b6dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b6e0:	f7f5 fc60 	bl	8000fa4 <__aeabi_uldivmod>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4b0d      	ldr	r3, [pc, #52]	; (800b720 <UART_SetConfig+0x4e4>)
 800b6ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ee:	095b      	lsrs	r3, r3, #5
 800b6f0:	2164      	movs	r1, #100	; 0x64
 800b6f2:	fb01 f303 	mul.w	r3, r1, r3
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	3332      	adds	r3, #50	; 0x32
 800b6fc:	4a08      	ldr	r2, [pc, #32]	; (800b720 <UART_SetConfig+0x4e4>)
 800b6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b702:	095b      	lsrs	r3, r3, #5
 800b704:	f003 020f 	and.w	r2, r3, #15
 800b708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4422      	add	r2, r4
 800b710:	609a      	str	r2, [r3, #8]
}
 800b712:	bf00      	nop
 800b714:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b718:	46bd      	mov	sp, r7
 800b71a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b71e:	bf00      	nop
 800b720:	51eb851f 	.word	0x51eb851f

0800b724 <__errno>:
 800b724:	4b01      	ldr	r3, [pc, #4]	; (800b72c <__errno+0x8>)
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20000014 	.word	0x20000014

0800b730 <__libc_init_array>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4d0d      	ldr	r5, [pc, #52]	; (800b768 <__libc_init_array+0x38>)
 800b734:	4c0d      	ldr	r4, [pc, #52]	; (800b76c <__libc_init_array+0x3c>)
 800b736:	1b64      	subs	r4, r4, r5
 800b738:	10a4      	asrs	r4, r4, #2
 800b73a:	2600      	movs	r6, #0
 800b73c:	42a6      	cmp	r6, r4
 800b73e:	d109      	bne.n	800b754 <__libc_init_array+0x24>
 800b740:	4d0b      	ldr	r5, [pc, #44]	; (800b770 <__libc_init_array+0x40>)
 800b742:	4c0c      	ldr	r4, [pc, #48]	; (800b774 <__libc_init_array+0x44>)
 800b744:	f006 ff9a 	bl	801267c <_init>
 800b748:	1b64      	subs	r4, r4, r5
 800b74a:	10a4      	asrs	r4, r4, #2
 800b74c:	2600      	movs	r6, #0
 800b74e:	42a6      	cmp	r6, r4
 800b750:	d105      	bne.n	800b75e <__libc_init_array+0x2e>
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	f855 3b04 	ldr.w	r3, [r5], #4
 800b758:	4798      	blx	r3
 800b75a:	3601      	adds	r6, #1
 800b75c:	e7ee      	b.n	800b73c <__libc_init_array+0xc>
 800b75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b762:	4798      	blx	r3
 800b764:	3601      	adds	r6, #1
 800b766:	e7f2      	b.n	800b74e <__libc_init_array+0x1e>
 800b768:	08012cb0 	.word	0x08012cb0
 800b76c:	08012cb0 	.word	0x08012cb0
 800b770:	08012cb0 	.word	0x08012cb0
 800b774:	08012cb4 	.word	0x08012cb4

0800b778 <memset>:
 800b778:	4402      	add	r2, r0
 800b77a:	4603      	mov	r3, r0
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d100      	bne.n	800b782 <memset+0xa>
 800b780:	4770      	bx	lr
 800b782:	f803 1b01 	strb.w	r1, [r3], #1
 800b786:	e7f9      	b.n	800b77c <memset+0x4>

0800b788 <__cvt>:
 800b788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	ec55 4b10 	vmov	r4, r5, d0
 800b790:	2d00      	cmp	r5, #0
 800b792:	460e      	mov	r6, r1
 800b794:	4619      	mov	r1, r3
 800b796:	462b      	mov	r3, r5
 800b798:	bfbb      	ittet	lt
 800b79a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b79e:	461d      	movlt	r5, r3
 800b7a0:	2300      	movge	r3, #0
 800b7a2:	232d      	movlt	r3, #45	; 0x2d
 800b7a4:	700b      	strb	r3, [r1, #0]
 800b7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7ac:	4691      	mov	r9, r2
 800b7ae:	f023 0820 	bic.w	r8, r3, #32
 800b7b2:	bfbc      	itt	lt
 800b7b4:	4622      	movlt	r2, r4
 800b7b6:	4614      	movlt	r4, r2
 800b7b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7bc:	d005      	beq.n	800b7ca <__cvt+0x42>
 800b7be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7c2:	d100      	bne.n	800b7c6 <__cvt+0x3e>
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	2102      	movs	r1, #2
 800b7c8:	e000      	b.n	800b7cc <__cvt+0x44>
 800b7ca:	2103      	movs	r1, #3
 800b7cc:	ab03      	add	r3, sp, #12
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	ab02      	add	r3, sp, #8
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	ec45 4b10 	vmov	d0, r4, r5
 800b7d8:	4653      	mov	r3, sl
 800b7da:	4632      	mov	r2, r6
 800b7dc:	f001 fe60 	bl	800d4a0 <_dtoa_r>
 800b7e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	d102      	bne.n	800b7ee <__cvt+0x66>
 800b7e8:	f019 0f01 	tst.w	r9, #1
 800b7ec:	d022      	beq.n	800b834 <__cvt+0xac>
 800b7ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7f2:	eb07 0906 	add.w	r9, r7, r6
 800b7f6:	d110      	bne.n	800b81a <__cvt+0x92>
 800b7f8:	783b      	ldrb	r3, [r7, #0]
 800b7fa:	2b30      	cmp	r3, #48	; 0x30
 800b7fc:	d10a      	bne.n	800b814 <__cvt+0x8c>
 800b7fe:	2200      	movs	r2, #0
 800b800:	2300      	movs	r3, #0
 800b802:	4620      	mov	r0, r4
 800b804:	4629      	mov	r1, r5
 800b806:	f7f5 f98f 	bl	8000b28 <__aeabi_dcmpeq>
 800b80a:	b918      	cbnz	r0, 800b814 <__cvt+0x8c>
 800b80c:	f1c6 0601 	rsb	r6, r6, #1
 800b810:	f8ca 6000 	str.w	r6, [sl]
 800b814:	f8da 3000 	ldr.w	r3, [sl]
 800b818:	4499      	add	r9, r3
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	4620      	mov	r0, r4
 800b820:	4629      	mov	r1, r5
 800b822:	f7f5 f981 	bl	8000b28 <__aeabi_dcmpeq>
 800b826:	b108      	cbz	r0, 800b82c <__cvt+0xa4>
 800b828:	f8cd 900c 	str.w	r9, [sp, #12]
 800b82c:	2230      	movs	r2, #48	; 0x30
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	454b      	cmp	r3, r9
 800b832:	d307      	bcc.n	800b844 <__cvt+0xbc>
 800b834:	9b03      	ldr	r3, [sp, #12]
 800b836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b838:	1bdb      	subs	r3, r3, r7
 800b83a:	4638      	mov	r0, r7
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	b004      	add	sp, #16
 800b840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b844:	1c59      	adds	r1, r3, #1
 800b846:	9103      	str	r1, [sp, #12]
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	e7f0      	b.n	800b82e <__cvt+0xa6>

0800b84c <__exponent>:
 800b84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b84e:	4603      	mov	r3, r0
 800b850:	2900      	cmp	r1, #0
 800b852:	bfb8      	it	lt
 800b854:	4249      	neglt	r1, r1
 800b856:	f803 2b02 	strb.w	r2, [r3], #2
 800b85a:	bfb4      	ite	lt
 800b85c:	222d      	movlt	r2, #45	; 0x2d
 800b85e:	222b      	movge	r2, #43	; 0x2b
 800b860:	2909      	cmp	r1, #9
 800b862:	7042      	strb	r2, [r0, #1]
 800b864:	dd2a      	ble.n	800b8bc <__exponent+0x70>
 800b866:	f10d 0407 	add.w	r4, sp, #7
 800b86a:	46a4      	mov	ip, r4
 800b86c:	270a      	movs	r7, #10
 800b86e:	46a6      	mov	lr, r4
 800b870:	460a      	mov	r2, r1
 800b872:	fb91 f6f7 	sdiv	r6, r1, r7
 800b876:	fb07 1516 	mls	r5, r7, r6, r1
 800b87a:	3530      	adds	r5, #48	; 0x30
 800b87c:	2a63      	cmp	r2, #99	; 0x63
 800b87e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b882:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b886:	4631      	mov	r1, r6
 800b888:	dcf1      	bgt.n	800b86e <__exponent+0x22>
 800b88a:	3130      	adds	r1, #48	; 0x30
 800b88c:	f1ae 0502 	sub.w	r5, lr, #2
 800b890:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b894:	1c44      	adds	r4, r0, #1
 800b896:	4629      	mov	r1, r5
 800b898:	4561      	cmp	r1, ip
 800b89a:	d30a      	bcc.n	800b8b2 <__exponent+0x66>
 800b89c:	f10d 0209 	add.w	r2, sp, #9
 800b8a0:	eba2 020e 	sub.w	r2, r2, lr
 800b8a4:	4565      	cmp	r5, ip
 800b8a6:	bf88      	it	hi
 800b8a8:	2200      	movhi	r2, #0
 800b8aa:	4413      	add	r3, r2
 800b8ac:	1a18      	subs	r0, r3, r0
 800b8ae:	b003      	add	sp, #12
 800b8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8ba:	e7ed      	b.n	800b898 <__exponent+0x4c>
 800b8bc:	2330      	movs	r3, #48	; 0x30
 800b8be:	3130      	adds	r1, #48	; 0x30
 800b8c0:	7083      	strb	r3, [r0, #2]
 800b8c2:	70c1      	strb	r1, [r0, #3]
 800b8c4:	1d03      	adds	r3, r0, #4
 800b8c6:	e7f1      	b.n	800b8ac <__exponent+0x60>

0800b8c8 <_printf_float>:
 800b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	ed2d 8b02 	vpush	{d8}
 800b8d0:	b08d      	sub	sp, #52	; 0x34
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8d8:	4616      	mov	r6, r2
 800b8da:	461f      	mov	r7, r3
 800b8dc:	4605      	mov	r5, r0
 800b8de:	f002 ff3d 	bl	800e75c <_localeconv_r>
 800b8e2:	f8d0 a000 	ldr.w	sl, [r0]
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	f7f4 fc9c 	bl	8000224 <strlen>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8fc:	3307      	adds	r3, #7
 800b8fe:	f023 0307 	bic.w	r3, r3, #7
 800b902:	f103 0208 	add.w	r2, r3, #8
 800b906:	f8c8 2000 	str.w	r2, [r8]
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b912:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b920:	ee08 0a10 	vmov	s16, r0
 800b924:	4b9f      	ldr	r3, [pc, #636]	; (800bba4 <_printf_float+0x2dc>)
 800b926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92a:	f04f 32ff 	mov.w	r2, #4294967295
 800b92e:	f7f5 f92d 	bl	8000b8c <__aeabi_dcmpun>
 800b932:	bb88      	cbnz	r0, 800b998 <_printf_float+0xd0>
 800b934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b938:	4b9a      	ldr	r3, [pc, #616]	; (800bba4 <_printf_float+0x2dc>)
 800b93a:	f04f 32ff 	mov.w	r2, #4294967295
 800b93e:	f7f5 f907 	bl	8000b50 <__aeabi_dcmple>
 800b942:	bb48      	cbnz	r0, 800b998 <_printf_float+0xd0>
 800b944:	2200      	movs	r2, #0
 800b946:	2300      	movs	r3, #0
 800b948:	4640      	mov	r0, r8
 800b94a:	4649      	mov	r1, r9
 800b94c:	f7f5 f8f6 	bl	8000b3c <__aeabi_dcmplt>
 800b950:	b110      	cbz	r0, 800b958 <_printf_float+0x90>
 800b952:	232d      	movs	r3, #45	; 0x2d
 800b954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b958:	4b93      	ldr	r3, [pc, #588]	; (800bba8 <_printf_float+0x2e0>)
 800b95a:	4894      	ldr	r0, [pc, #592]	; (800bbac <_printf_float+0x2e4>)
 800b95c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b960:	bf94      	ite	ls
 800b962:	4698      	movls	r8, r3
 800b964:	4680      	movhi	r8, r0
 800b966:	2303      	movs	r3, #3
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	9b05      	ldr	r3, [sp, #20]
 800b96c:	f023 0204 	bic.w	r2, r3, #4
 800b970:	6022      	str	r2, [r4, #0]
 800b972:	f04f 0900 	mov.w	r9, #0
 800b976:	9700      	str	r7, [sp, #0]
 800b978:	4633      	mov	r3, r6
 800b97a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 f9d8 	bl	800bd34 <_printf_common>
 800b984:	3001      	adds	r0, #1
 800b986:	f040 8090 	bne.w	800baaa <_printf_float+0x1e2>
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295
 800b98e:	b00d      	add	sp, #52	; 0x34
 800b990:	ecbd 8b02 	vpop	{d8}
 800b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b998:	4642      	mov	r2, r8
 800b99a:	464b      	mov	r3, r9
 800b99c:	4640      	mov	r0, r8
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f7f5 f8f4 	bl	8000b8c <__aeabi_dcmpun>
 800b9a4:	b140      	cbz	r0, 800b9b8 <_printf_float+0xf0>
 800b9a6:	464b      	mov	r3, r9
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbc      	itt	lt
 800b9ac:	232d      	movlt	r3, #45	; 0x2d
 800b9ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9b2:	487f      	ldr	r0, [pc, #508]	; (800bbb0 <_printf_float+0x2e8>)
 800b9b4:	4b7f      	ldr	r3, [pc, #508]	; (800bbb4 <_printf_float+0x2ec>)
 800b9b6:	e7d1      	b.n	800b95c <_printf_float+0x94>
 800b9b8:	6863      	ldr	r3, [r4, #4]
 800b9ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9be:	9206      	str	r2, [sp, #24]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	d13f      	bne.n	800ba44 <_printf_float+0x17c>
 800b9c4:	2306      	movs	r3, #6
 800b9c6:	6063      	str	r3, [r4, #4]
 800b9c8:	9b05      	ldr	r3, [sp, #20]
 800b9ca:	6861      	ldr	r1, [r4, #4]
 800b9cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	ab0a      	add	r3, sp, #40	; 0x28
 800b9d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9da:	ab09      	add	r3, sp, #36	; 0x24
 800b9dc:	ec49 8b10 	vmov	d0, r8, r9
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	6022      	str	r2, [r4, #0]
 800b9e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f7ff fecd 	bl	800b788 <__cvt>
 800b9ee:	9b06      	ldr	r3, [sp, #24]
 800b9f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9f2:	2b47      	cmp	r3, #71	; 0x47
 800b9f4:	4680      	mov	r8, r0
 800b9f6:	d108      	bne.n	800ba0a <_printf_float+0x142>
 800b9f8:	1cc8      	adds	r0, r1, #3
 800b9fa:	db02      	blt.n	800ba02 <_printf_float+0x13a>
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	4299      	cmp	r1, r3
 800ba00:	dd41      	ble.n	800ba86 <_printf_float+0x1be>
 800ba02:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba06:	fa5f fb8b 	uxtb.w	fp, fp
 800ba0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba0e:	d820      	bhi.n	800ba52 <_printf_float+0x18a>
 800ba10:	3901      	subs	r1, #1
 800ba12:	465a      	mov	r2, fp
 800ba14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba18:	9109      	str	r1, [sp, #36]	; 0x24
 800ba1a:	f7ff ff17 	bl	800b84c <__exponent>
 800ba1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba20:	1813      	adds	r3, r2, r0
 800ba22:	2a01      	cmp	r2, #1
 800ba24:	4681      	mov	r9, r0
 800ba26:	6123      	str	r3, [r4, #16]
 800ba28:	dc02      	bgt.n	800ba30 <_printf_float+0x168>
 800ba2a:	6822      	ldr	r2, [r4, #0]
 800ba2c:	07d2      	lsls	r2, r2, #31
 800ba2e:	d501      	bpl.n	800ba34 <_printf_float+0x16c>
 800ba30:	3301      	adds	r3, #1
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d09c      	beq.n	800b976 <_printf_float+0xae>
 800ba3c:	232d      	movs	r3, #45	; 0x2d
 800ba3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba42:	e798      	b.n	800b976 <_printf_float+0xae>
 800ba44:	9a06      	ldr	r2, [sp, #24]
 800ba46:	2a47      	cmp	r2, #71	; 0x47
 800ba48:	d1be      	bne.n	800b9c8 <_printf_float+0x100>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1bc      	bne.n	800b9c8 <_printf_float+0x100>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e7b9      	b.n	800b9c6 <_printf_float+0xfe>
 800ba52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba56:	d118      	bne.n	800ba8a <_printf_float+0x1c2>
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	6863      	ldr	r3, [r4, #4]
 800ba5c:	dd0b      	ble.n	800ba76 <_printf_float+0x1ae>
 800ba5e:	6121      	str	r1, [r4, #16]
 800ba60:	b913      	cbnz	r3, 800ba68 <_printf_float+0x1a0>
 800ba62:	6822      	ldr	r2, [r4, #0]
 800ba64:	07d0      	lsls	r0, r2, #31
 800ba66:	d502      	bpl.n	800ba6e <_printf_float+0x1a6>
 800ba68:	3301      	adds	r3, #1
 800ba6a:	440b      	add	r3, r1
 800ba6c:	6123      	str	r3, [r4, #16]
 800ba6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba70:	f04f 0900 	mov.w	r9, #0
 800ba74:	e7de      	b.n	800ba34 <_printf_float+0x16c>
 800ba76:	b913      	cbnz	r3, 800ba7e <_printf_float+0x1b6>
 800ba78:	6822      	ldr	r2, [r4, #0]
 800ba7a:	07d2      	lsls	r2, r2, #31
 800ba7c:	d501      	bpl.n	800ba82 <_printf_float+0x1ba>
 800ba7e:	3302      	adds	r3, #2
 800ba80:	e7f4      	b.n	800ba6c <_printf_float+0x1a4>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e7f2      	b.n	800ba6c <_printf_float+0x1a4>
 800ba86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	db05      	blt.n	800ba9c <_printf_float+0x1d4>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	6121      	str	r1, [r4, #16]
 800ba94:	07d8      	lsls	r0, r3, #31
 800ba96:	d5ea      	bpl.n	800ba6e <_printf_float+0x1a6>
 800ba98:	1c4b      	adds	r3, r1, #1
 800ba9a:	e7e7      	b.n	800ba6c <_printf_float+0x1a4>
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	bfd4      	ite	le
 800baa0:	f1c1 0202 	rsble	r2, r1, #2
 800baa4:	2201      	movgt	r2, #1
 800baa6:	4413      	add	r3, r2
 800baa8:	e7e0      	b.n	800ba6c <_printf_float+0x1a4>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	055a      	lsls	r2, r3, #21
 800baae:	d407      	bmi.n	800bac0 <_printf_float+0x1f8>
 800bab0:	6923      	ldr	r3, [r4, #16]
 800bab2:	4642      	mov	r2, r8
 800bab4:	4631      	mov	r1, r6
 800bab6:	4628      	mov	r0, r5
 800bab8:	47b8      	blx	r7
 800baba:	3001      	adds	r0, #1
 800babc:	d12c      	bne.n	800bb18 <_printf_float+0x250>
 800babe:	e764      	b.n	800b98a <_printf_float+0xc2>
 800bac0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bac4:	f240 80e0 	bls.w	800bc88 <_printf_float+0x3c0>
 800bac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bacc:	2200      	movs	r2, #0
 800bace:	2300      	movs	r3, #0
 800bad0:	f7f5 f82a 	bl	8000b28 <__aeabi_dcmpeq>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d034      	beq.n	800bb42 <_printf_float+0x27a>
 800bad8:	4a37      	ldr	r2, [pc, #220]	; (800bbb8 <_printf_float+0x2f0>)
 800bada:	2301      	movs	r3, #1
 800badc:	4631      	mov	r1, r6
 800bade:	4628      	mov	r0, r5
 800bae0:	47b8      	blx	r7
 800bae2:	3001      	adds	r0, #1
 800bae4:	f43f af51 	beq.w	800b98a <_printf_float+0xc2>
 800bae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baec:	429a      	cmp	r2, r3
 800baee:	db02      	blt.n	800baf6 <_printf_float+0x22e>
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	07d8      	lsls	r0, r3, #31
 800baf4:	d510      	bpl.n	800bb18 <_printf_float+0x250>
 800baf6:	ee18 3a10 	vmov	r3, s16
 800bafa:	4652      	mov	r2, sl
 800bafc:	4631      	mov	r1, r6
 800bafe:	4628      	mov	r0, r5
 800bb00:	47b8      	blx	r7
 800bb02:	3001      	adds	r0, #1
 800bb04:	f43f af41 	beq.w	800b98a <_printf_float+0xc2>
 800bb08:	f04f 0800 	mov.w	r8, #0
 800bb0c:	f104 091a 	add.w	r9, r4, #26
 800bb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb12:	3b01      	subs	r3, #1
 800bb14:	4543      	cmp	r3, r8
 800bb16:	dc09      	bgt.n	800bb2c <_printf_float+0x264>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	079b      	lsls	r3, r3, #30
 800bb1c:	f100 8105 	bmi.w	800bd2a <_printf_float+0x462>
 800bb20:	68e0      	ldr	r0, [r4, #12]
 800bb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb24:	4298      	cmp	r0, r3
 800bb26:	bfb8      	it	lt
 800bb28:	4618      	movlt	r0, r3
 800bb2a:	e730      	b.n	800b98e <_printf_float+0xc6>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	464a      	mov	r2, r9
 800bb30:	4631      	mov	r1, r6
 800bb32:	4628      	mov	r0, r5
 800bb34:	47b8      	blx	r7
 800bb36:	3001      	adds	r0, #1
 800bb38:	f43f af27 	beq.w	800b98a <_printf_float+0xc2>
 800bb3c:	f108 0801 	add.w	r8, r8, #1
 800bb40:	e7e6      	b.n	800bb10 <_printf_float+0x248>
 800bb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	dc39      	bgt.n	800bbbc <_printf_float+0x2f4>
 800bb48:	4a1b      	ldr	r2, [pc, #108]	; (800bbb8 <_printf_float+0x2f0>)
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b8      	blx	r7
 800bb52:	3001      	adds	r0, #1
 800bb54:	f43f af19 	beq.w	800b98a <_printf_float+0xc2>
 800bb58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	d102      	bne.n	800bb66 <_printf_float+0x29e>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	07d9      	lsls	r1, r3, #31
 800bb64:	d5d8      	bpl.n	800bb18 <_printf_float+0x250>
 800bb66:	ee18 3a10 	vmov	r3, s16
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4628      	mov	r0, r5
 800bb70:	47b8      	blx	r7
 800bb72:	3001      	adds	r0, #1
 800bb74:	f43f af09 	beq.w	800b98a <_printf_float+0xc2>
 800bb78:	f04f 0900 	mov.w	r9, #0
 800bb7c:	f104 0a1a 	add.w	sl, r4, #26
 800bb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb82:	425b      	negs	r3, r3
 800bb84:	454b      	cmp	r3, r9
 800bb86:	dc01      	bgt.n	800bb8c <_printf_float+0x2c4>
 800bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8a:	e792      	b.n	800bab2 <_printf_float+0x1ea>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	4652      	mov	r2, sl
 800bb90:	4631      	mov	r1, r6
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	f43f aef7 	beq.w	800b98a <_printf_float+0xc2>
 800bb9c:	f109 0901 	add.w	r9, r9, #1
 800bba0:	e7ee      	b.n	800bb80 <_printf_float+0x2b8>
 800bba2:	bf00      	nop
 800bba4:	7fefffff 	.word	0x7fefffff
 800bba8:	0801274c 	.word	0x0801274c
 800bbac:	08012750 	.word	0x08012750
 800bbb0:	08012758 	.word	0x08012758
 800bbb4:	08012754 	.word	0x08012754
 800bbb8:	08012b51 	.word	0x08012b51
 800bbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	bfa8      	it	ge
 800bbc4:	461a      	movge	r2, r3
 800bbc6:	2a00      	cmp	r2, #0
 800bbc8:	4691      	mov	r9, r2
 800bbca:	dc37      	bgt.n	800bc3c <_printf_float+0x374>
 800bbcc:	f04f 0b00 	mov.w	fp, #0
 800bbd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbd4:	f104 021a 	add.w	r2, r4, #26
 800bbd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbda:	9305      	str	r3, [sp, #20]
 800bbdc:	eba3 0309 	sub.w	r3, r3, r9
 800bbe0:	455b      	cmp	r3, fp
 800bbe2:	dc33      	bgt.n	800bc4c <_printf_float+0x384>
 800bbe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	db3b      	blt.n	800bc64 <_printf_float+0x39c>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	07da      	lsls	r2, r3, #31
 800bbf0:	d438      	bmi.n	800bc64 <_printf_float+0x39c>
 800bbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf4:	9a05      	ldr	r2, [sp, #20]
 800bbf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbf8:	1a9a      	subs	r2, r3, r2
 800bbfa:	eba3 0901 	sub.w	r9, r3, r1
 800bbfe:	4591      	cmp	r9, r2
 800bc00:	bfa8      	it	ge
 800bc02:	4691      	movge	r9, r2
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	dc35      	bgt.n	800bc76 <_printf_float+0x3ae>
 800bc0a:	f04f 0800 	mov.w	r8, #0
 800bc0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc12:	f104 0a1a 	add.w	sl, r4, #26
 800bc16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc1a:	1a9b      	subs	r3, r3, r2
 800bc1c:	eba3 0309 	sub.w	r3, r3, r9
 800bc20:	4543      	cmp	r3, r8
 800bc22:	f77f af79 	ble.w	800bb18 <_printf_float+0x250>
 800bc26:	2301      	movs	r3, #1
 800bc28:	4652      	mov	r2, sl
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	47b8      	blx	r7
 800bc30:	3001      	adds	r0, #1
 800bc32:	f43f aeaa 	beq.w	800b98a <_printf_float+0xc2>
 800bc36:	f108 0801 	add.w	r8, r8, #1
 800bc3a:	e7ec      	b.n	800bc16 <_printf_float+0x34e>
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4642      	mov	r2, r8
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	d1c0      	bne.n	800bbcc <_printf_float+0x304>
 800bc4a:	e69e      	b.n	800b98a <_printf_float+0xc2>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4628      	mov	r0, r5
 800bc52:	9205      	str	r2, [sp, #20]
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	f43f ae97 	beq.w	800b98a <_printf_float+0xc2>
 800bc5c:	9a05      	ldr	r2, [sp, #20]
 800bc5e:	f10b 0b01 	add.w	fp, fp, #1
 800bc62:	e7b9      	b.n	800bbd8 <_printf_float+0x310>
 800bc64:	ee18 3a10 	vmov	r3, s16
 800bc68:	4652      	mov	r2, sl
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	d1be      	bne.n	800bbf2 <_printf_float+0x32a>
 800bc74:	e689      	b.n	800b98a <_printf_float+0xc2>
 800bc76:	9a05      	ldr	r2, [sp, #20]
 800bc78:	464b      	mov	r3, r9
 800bc7a:	4442      	add	r2, r8
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	4628      	mov	r0, r5
 800bc80:	47b8      	blx	r7
 800bc82:	3001      	adds	r0, #1
 800bc84:	d1c1      	bne.n	800bc0a <_printf_float+0x342>
 800bc86:	e680      	b.n	800b98a <_printf_float+0xc2>
 800bc88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc8a:	2a01      	cmp	r2, #1
 800bc8c:	dc01      	bgt.n	800bc92 <_printf_float+0x3ca>
 800bc8e:	07db      	lsls	r3, r3, #31
 800bc90:	d538      	bpl.n	800bd04 <_printf_float+0x43c>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4642      	mov	r2, r8
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b8      	blx	r7
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f43f ae74 	beq.w	800b98a <_printf_float+0xc2>
 800bca2:	ee18 3a10 	vmov	r3, s16
 800bca6:	4652      	mov	r2, sl
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4628      	mov	r0, r5
 800bcac:	47b8      	blx	r7
 800bcae:	3001      	adds	r0, #1
 800bcb0:	f43f ae6b 	beq.w	800b98a <_printf_float+0xc2>
 800bcb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f7f4 ff34 	bl	8000b28 <__aeabi_dcmpeq>
 800bcc0:	b9d8      	cbnz	r0, 800bcfa <_printf_float+0x432>
 800bcc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcc4:	f108 0201 	add.w	r2, r8, #1
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	4631      	mov	r1, r6
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d10e      	bne.n	800bcf2 <_printf_float+0x42a>
 800bcd4:	e659      	b.n	800b98a <_printf_float+0xc2>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4652      	mov	r2, sl
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	f43f ae52 	beq.w	800b98a <_printf_float+0xc2>
 800bce6:	f108 0801 	add.w	r8, r8, #1
 800bcea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcec:	3b01      	subs	r3, #1
 800bcee:	4543      	cmp	r3, r8
 800bcf0:	dcf1      	bgt.n	800bcd6 <_printf_float+0x40e>
 800bcf2:	464b      	mov	r3, r9
 800bcf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bcf8:	e6dc      	b.n	800bab4 <_printf_float+0x1ec>
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	f104 0a1a 	add.w	sl, r4, #26
 800bd02:	e7f2      	b.n	800bcea <_printf_float+0x422>
 800bd04:	2301      	movs	r3, #1
 800bd06:	4642      	mov	r2, r8
 800bd08:	e7df      	b.n	800bcca <_printf_float+0x402>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	464a      	mov	r2, r9
 800bd0e:	4631      	mov	r1, r6
 800bd10:	4628      	mov	r0, r5
 800bd12:	47b8      	blx	r7
 800bd14:	3001      	adds	r0, #1
 800bd16:	f43f ae38 	beq.w	800b98a <_printf_float+0xc2>
 800bd1a:	f108 0801 	add.w	r8, r8, #1
 800bd1e:	68e3      	ldr	r3, [r4, #12]
 800bd20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd22:	1a5b      	subs	r3, r3, r1
 800bd24:	4543      	cmp	r3, r8
 800bd26:	dcf0      	bgt.n	800bd0a <_printf_float+0x442>
 800bd28:	e6fa      	b.n	800bb20 <_printf_float+0x258>
 800bd2a:	f04f 0800 	mov.w	r8, #0
 800bd2e:	f104 0919 	add.w	r9, r4, #25
 800bd32:	e7f4      	b.n	800bd1e <_printf_float+0x456>

0800bd34 <_printf_common>:
 800bd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd38:	4616      	mov	r6, r2
 800bd3a:	4699      	mov	r9, r3
 800bd3c:	688a      	ldr	r2, [r1, #8]
 800bd3e:	690b      	ldr	r3, [r1, #16]
 800bd40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bfb8      	it	lt
 800bd48:	4613      	movlt	r3, r2
 800bd4a:	6033      	str	r3, [r6, #0]
 800bd4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd50:	4607      	mov	r7, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	b10a      	cbz	r2, 800bd5a <_printf_common+0x26>
 800bd56:	3301      	adds	r3, #1
 800bd58:	6033      	str	r3, [r6, #0]
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	0699      	lsls	r1, r3, #26
 800bd5e:	bf42      	ittt	mi
 800bd60:	6833      	ldrmi	r3, [r6, #0]
 800bd62:	3302      	addmi	r3, #2
 800bd64:	6033      	strmi	r3, [r6, #0]
 800bd66:	6825      	ldr	r5, [r4, #0]
 800bd68:	f015 0506 	ands.w	r5, r5, #6
 800bd6c:	d106      	bne.n	800bd7c <_printf_common+0x48>
 800bd6e:	f104 0a19 	add.w	sl, r4, #25
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	6832      	ldr	r2, [r6, #0]
 800bd76:	1a9b      	subs	r3, r3, r2
 800bd78:	42ab      	cmp	r3, r5
 800bd7a:	dc26      	bgt.n	800bdca <_printf_common+0x96>
 800bd7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd80:	1e13      	subs	r3, r2, #0
 800bd82:	6822      	ldr	r2, [r4, #0]
 800bd84:	bf18      	it	ne
 800bd86:	2301      	movne	r3, #1
 800bd88:	0692      	lsls	r2, r2, #26
 800bd8a:	d42b      	bmi.n	800bde4 <_printf_common+0xb0>
 800bd8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd90:	4649      	mov	r1, r9
 800bd92:	4638      	mov	r0, r7
 800bd94:	47c0      	blx	r8
 800bd96:	3001      	adds	r0, #1
 800bd98:	d01e      	beq.n	800bdd8 <_printf_common+0xa4>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	68e5      	ldr	r5, [r4, #12]
 800bd9e:	6832      	ldr	r2, [r6, #0]
 800bda0:	f003 0306 	and.w	r3, r3, #6
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	bf08      	it	eq
 800bda8:	1aad      	subeq	r5, r5, r2
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	6922      	ldr	r2, [r4, #16]
 800bdae:	bf0c      	ite	eq
 800bdb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb4:	2500      	movne	r5, #0
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	bfc4      	itt	gt
 800bdba:	1a9b      	subgt	r3, r3, r2
 800bdbc:	18ed      	addgt	r5, r5, r3
 800bdbe:	2600      	movs	r6, #0
 800bdc0:	341a      	adds	r4, #26
 800bdc2:	42b5      	cmp	r5, r6
 800bdc4:	d11a      	bne.n	800bdfc <_printf_common+0xc8>
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	e008      	b.n	800bddc <_printf_common+0xa8>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4652      	mov	r2, sl
 800bdce:	4649      	mov	r1, r9
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	47c0      	blx	r8
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d103      	bne.n	800bde0 <_printf_common+0xac>
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde0:	3501      	adds	r5, #1
 800bde2:	e7c6      	b.n	800bd72 <_printf_common+0x3e>
 800bde4:	18e1      	adds	r1, r4, r3
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	2030      	movs	r0, #48	; 0x30
 800bdea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdee:	4422      	add	r2, r4
 800bdf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdf8:	3302      	adds	r3, #2
 800bdfa:	e7c7      	b.n	800bd8c <_printf_common+0x58>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4622      	mov	r2, r4
 800be00:	4649      	mov	r1, r9
 800be02:	4638      	mov	r0, r7
 800be04:	47c0      	blx	r8
 800be06:	3001      	adds	r0, #1
 800be08:	d0e6      	beq.n	800bdd8 <_printf_common+0xa4>
 800be0a:	3601      	adds	r6, #1
 800be0c:	e7d9      	b.n	800bdc2 <_printf_common+0x8e>
	...

0800be10 <_printf_i>:
 800be10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	7e0f      	ldrb	r7, [r1, #24]
 800be16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be18:	2f78      	cmp	r7, #120	; 0x78
 800be1a:	4691      	mov	r9, r2
 800be1c:	4680      	mov	r8, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	469a      	mov	sl, r3
 800be22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be26:	d807      	bhi.n	800be38 <_printf_i+0x28>
 800be28:	2f62      	cmp	r7, #98	; 0x62
 800be2a:	d80a      	bhi.n	800be42 <_printf_i+0x32>
 800be2c:	2f00      	cmp	r7, #0
 800be2e:	f000 80d8 	beq.w	800bfe2 <_printf_i+0x1d2>
 800be32:	2f58      	cmp	r7, #88	; 0x58
 800be34:	f000 80a3 	beq.w	800bf7e <_printf_i+0x16e>
 800be38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be40:	e03a      	b.n	800beb8 <_printf_i+0xa8>
 800be42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be46:	2b15      	cmp	r3, #21
 800be48:	d8f6      	bhi.n	800be38 <_printf_i+0x28>
 800be4a:	a101      	add	r1, pc, #4	; (adr r1, 800be50 <_printf_i+0x40>)
 800be4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be50:	0800bea9 	.word	0x0800bea9
 800be54:	0800bebd 	.word	0x0800bebd
 800be58:	0800be39 	.word	0x0800be39
 800be5c:	0800be39 	.word	0x0800be39
 800be60:	0800be39 	.word	0x0800be39
 800be64:	0800be39 	.word	0x0800be39
 800be68:	0800bebd 	.word	0x0800bebd
 800be6c:	0800be39 	.word	0x0800be39
 800be70:	0800be39 	.word	0x0800be39
 800be74:	0800be39 	.word	0x0800be39
 800be78:	0800be39 	.word	0x0800be39
 800be7c:	0800bfc9 	.word	0x0800bfc9
 800be80:	0800beed 	.word	0x0800beed
 800be84:	0800bfab 	.word	0x0800bfab
 800be88:	0800be39 	.word	0x0800be39
 800be8c:	0800be39 	.word	0x0800be39
 800be90:	0800bfeb 	.word	0x0800bfeb
 800be94:	0800be39 	.word	0x0800be39
 800be98:	0800beed 	.word	0x0800beed
 800be9c:	0800be39 	.word	0x0800be39
 800bea0:	0800be39 	.word	0x0800be39
 800bea4:	0800bfb3 	.word	0x0800bfb3
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	1d1a      	adds	r2, r3, #4
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	602a      	str	r2, [r5, #0]
 800beb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800beb8:	2301      	movs	r3, #1
 800beba:	e0a3      	b.n	800c004 <_printf_i+0x1f4>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	6829      	ldr	r1, [r5, #0]
 800bec0:	0606      	lsls	r6, r0, #24
 800bec2:	f101 0304 	add.w	r3, r1, #4
 800bec6:	d50a      	bpl.n	800bede <_printf_i+0xce>
 800bec8:	680e      	ldr	r6, [r1, #0]
 800beca:	602b      	str	r3, [r5, #0]
 800becc:	2e00      	cmp	r6, #0
 800bece:	da03      	bge.n	800bed8 <_printf_i+0xc8>
 800bed0:	232d      	movs	r3, #45	; 0x2d
 800bed2:	4276      	negs	r6, r6
 800bed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed8:	485e      	ldr	r0, [pc, #376]	; (800c054 <_printf_i+0x244>)
 800beda:	230a      	movs	r3, #10
 800bedc:	e019      	b.n	800bf12 <_printf_i+0x102>
 800bede:	680e      	ldr	r6, [r1, #0]
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bee6:	bf18      	it	ne
 800bee8:	b236      	sxthne	r6, r6
 800beea:	e7ef      	b.n	800becc <_printf_i+0xbc>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	6820      	ldr	r0, [r4, #0]
 800bef0:	1d19      	adds	r1, r3, #4
 800bef2:	6029      	str	r1, [r5, #0]
 800bef4:	0601      	lsls	r1, r0, #24
 800bef6:	d501      	bpl.n	800befc <_printf_i+0xec>
 800bef8:	681e      	ldr	r6, [r3, #0]
 800befa:	e002      	b.n	800bf02 <_printf_i+0xf2>
 800befc:	0646      	lsls	r6, r0, #25
 800befe:	d5fb      	bpl.n	800bef8 <_printf_i+0xe8>
 800bf00:	881e      	ldrh	r6, [r3, #0]
 800bf02:	4854      	ldr	r0, [pc, #336]	; (800c054 <_printf_i+0x244>)
 800bf04:	2f6f      	cmp	r7, #111	; 0x6f
 800bf06:	bf0c      	ite	eq
 800bf08:	2308      	moveq	r3, #8
 800bf0a:	230a      	movne	r3, #10
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf12:	6865      	ldr	r5, [r4, #4]
 800bf14:	60a5      	str	r5, [r4, #8]
 800bf16:	2d00      	cmp	r5, #0
 800bf18:	bfa2      	ittt	ge
 800bf1a:	6821      	ldrge	r1, [r4, #0]
 800bf1c:	f021 0104 	bicge.w	r1, r1, #4
 800bf20:	6021      	strge	r1, [r4, #0]
 800bf22:	b90e      	cbnz	r6, 800bf28 <_printf_i+0x118>
 800bf24:	2d00      	cmp	r5, #0
 800bf26:	d04d      	beq.n	800bfc4 <_printf_i+0x1b4>
 800bf28:	4615      	mov	r5, r2
 800bf2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf2e:	fb03 6711 	mls	r7, r3, r1, r6
 800bf32:	5dc7      	ldrb	r7, [r0, r7]
 800bf34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf38:	4637      	mov	r7, r6
 800bf3a:	42bb      	cmp	r3, r7
 800bf3c:	460e      	mov	r6, r1
 800bf3e:	d9f4      	bls.n	800bf2a <_printf_i+0x11a>
 800bf40:	2b08      	cmp	r3, #8
 800bf42:	d10b      	bne.n	800bf5c <_printf_i+0x14c>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	07de      	lsls	r6, r3, #31
 800bf48:	d508      	bpl.n	800bf5c <_printf_i+0x14c>
 800bf4a:	6923      	ldr	r3, [r4, #16]
 800bf4c:	6861      	ldr	r1, [r4, #4]
 800bf4e:	4299      	cmp	r1, r3
 800bf50:	bfde      	ittt	le
 800bf52:	2330      	movle	r3, #48	; 0x30
 800bf54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf5c:	1b52      	subs	r2, r2, r5
 800bf5e:	6122      	str	r2, [r4, #16]
 800bf60:	f8cd a000 	str.w	sl, [sp]
 800bf64:	464b      	mov	r3, r9
 800bf66:	aa03      	add	r2, sp, #12
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	f7ff fee2 	bl	800bd34 <_printf_common>
 800bf70:	3001      	adds	r0, #1
 800bf72:	d14c      	bne.n	800c00e <_printf_i+0x1fe>
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
 800bf78:	b004      	add	sp, #16
 800bf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7e:	4835      	ldr	r0, [pc, #212]	; (800c054 <_printf_i+0x244>)
 800bf80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf84:	6829      	ldr	r1, [r5, #0]
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf8c:	6029      	str	r1, [r5, #0]
 800bf8e:	061d      	lsls	r5, r3, #24
 800bf90:	d514      	bpl.n	800bfbc <_printf_i+0x1ac>
 800bf92:	07df      	lsls	r7, r3, #31
 800bf94:	bf44      	itt	mi
 800bf96:	f043 0320 	orrmi.w	r3, r3, #32
 800bf9a:	6023      	strmi	r3, [r4, #0]
 800bf9c:	b91e      	cbnz	r6, 800bfa6 <_printf_i+0x196>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	f023 0320 	bic.w	r3, r3, #32
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	2310      	movs	r3, #16
 800bfa8:	e7b0      	b.n	800bf0c <_printf_i+0xfc>
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	f043 0320 	orr.w	r3, r3, #32
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	2378      	movs	r3, #120	; 0x78
 800bfb4:	4828      	ldr	r0, [pc, #160]	; (800c058 <_printf_i+0x248>)
 800bfb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfba:	e7e3      	b.n	800bf84 <_printf_i+0x174>
 800bfbc:	0659      	lsls	r1, r3, #25
 800bfbe:	bf48      	it	mi
 800bfc0:	b2b6      	uxthmi	r6, r6
 800bfc2:	e7e6      	b.n	800bf92 <_printf_i+0x182>
 800bfc4:	4615      	mov	r5, r2
 800bfc6:	e7bb      	b.n	800bf40 <_printf_i+0x130>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	6826      	ldr	r6, [r4, #0]
 800bfcc:	6961      	ldr	r1, [r4, #20]
 800bfce:	1d18      	adds	r0, r3, #4
 800bfd0:	6028      	str	r0, [r5, #0]
 800bfd2:	0635      	lsls	r5, r6, #24
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	d501      	bpl.n	800bfdc <_printf_i+0x1cc>
 800bfd8:	6019      	str	r1, [r3, #0]
 800bfda:	e002      	b.n	800bfe2 <_printf_i+0x1d2>
 800bfdc:	0670      	lsls	r0, r6, #25
 800bfde:	d5fb      	bpl.n	800bfd8 <_printf_i+0x1c8>
 800bfe0:	8019      	strh	r1, [r3, #0]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	4615      	mov	r5, r2
 800bfe8:	e7ba      	b.n	800bf60 <_printf_i+0x150>
 800bfea:	682b      	ldr	r3, [r5, #0]
 800bfec:	1d1a      	adds	r2, r3, #4
 800bfee:	602a      	str	r2, [r5, #0]
 800bff0:	681d      	ldr	r5, [r3, #0]
 800bff2:	6862      	ldr	r2, [r4, #4]
 800bff4:	2100      	movs	r1, #0
 800bff6:	4628      	mov	r0, r5
 800bff8:	f7f4 f922 	bl	8000240 <memchr>
 800bffc:	b108      	cbz	r0, 800c002 <_printf_i+0x1f2>
 800bffe:	1b40      	subs	r0, r0, r5
 800c000:	6060      	str	r0, [r4, #4]
 800c002:	6863      	ldr	r3, [r4, #4]
 800c004:	6123      	str	r3, [r4, #16]
 800c006:	2300      	movs	r3, #0
 800c008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c00c:	e7a8      	b.n	800bf60 <_printf_i+0x150>
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	462a      	mov	r2, r5
 800c012:	4649      	mov	r1, r9
 800c014:	4640      	mov	r0, r8
 800c016:	47d0      	blx	sl
 800c018:	3001      	adds	r0, #1
 800c01a:	d0ab      	beq.n	800bf74 <_printf_i+0x164>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	079b      	lsls	r3, r3, #30
 800c020:	d413      	bmi.n	800c04a <_printf_i+0x23a>
 800c022:	68e0      	ldr	r0, [r4, #12]
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	4298      	cmp	r0, r3
 800c028:	bfb8      	it	lt
 800c02a:	4618      	movlt	r0, r3
 800c02c:	e7a4      	b.n	800bf78 <_printf_i+0x168>
 800c02e:	2301      	movs	r3, #1
 800c030:	4632      	mov	r2, r6
 800c032:	4649      	mov	r1, r9
 800c034:	4640      	mov	r0, r8
 800c036:	47d0      	blx	sl
 800c038:	3001      	adds	r0, #1
 800c03a:	d09b      	beq.n	800bf74 <_printf_i+0x164>
 800c03c:	3501      	adds	r5, #1
 800c03e:	68e3      	ldr	r3, [r4, #12]
 800c040:	9903      	ldr	r1, [sp, #12]
 800c042:	1a5b      	subs	r3, r3, r1
 800c044:	42ab      	cmp	r3, r5
 800c046:	dcf2      	bgt.n	800c02e <_printf_i+0x21e>
 800c048:	e7eb      	b.n	800c022 <_printf_i+0x212>
 800c04a:	2500      	movs	r5, #0
 800c04c:	f104 0619 	add.w	r6, r4, #25
 800c050:	e7f5      	b.n	800c03e <_printf_i+0x22e>
 800c052:	bf00      	nop
 800c054:	0801275c 	.word	0x0801275c
 800c058:	0801276d 	.word	0x0801276d

0800c05c <_scanf_float>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	b087      	sub	sp, #28
 800c062:	4617      	mov	r7, r2
 800c064:	9303      	str	r3, [sp, #12]
 800c066:	688b      	ldr	r3, [r1, #8]
 800c068:	1e5a      	subs	r2, r3, #1
 800c06a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c06e:	bf83      	ittte	hi
 800c070:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c074:	195b      	addhi	r3, r3, r5
 800c076:	9302      	strhi	r3, [sp, #8]
 800c078:	2300      	movls	r3, #0
 800c07a:	bf86      	itte	hi
 800c07c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c080:	608b      	strhi	r3, [r1, #8]
 800c082:	9302      	strls	r3, [sp, #8]
 800c084:	680b      	ldr	r3, [r1, #0]
 800c086:	468b      	mov	fp, r1
 800c088:	2500      	movs	r5, #0
 800c08a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c08e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c092:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c096:	4680      	mov	r8, r0
 800c098:	460c      	mov	r4, r1
 800c09a:	465e      	mov	r6, fp
 800c09c:	46aa      	mov	sl, r5
 800c09e:	46a9      	mov	r9, r5
 800c0a0:	9501      	str	r5, [sp, #4]
 800c0a2:	68a2      	ldr	r2, [r4, #8]
 800c0a4:	b152      	cbz	r2, 800c0bc <_scanf_float+0x60>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b4e      	cmp	r3, #78	; 0x4e
 800c0ac:	d864      	bhi.n	800c178 <_scanf_float+0x11c>
 800c0ae:	2b40      	cmp	r3, #64	; 0x40
 800c0b0:	d83c      	bhi.n	800c12c <_scanf_float+0xd0>
 800c0b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c0b6:	b2c8      	uxtb	r0, r1
 800c0b8:	280e      	cmp	r0, #14
 800c0ba:	d93a      	bls.n	800c132 <_scanf_float+0xd6>
 800c0bc:	f1b9 0f00 	cmp.w	r9, #0
 800c0c0:	d003      	beq.n	800c0ca <_scanf_float+0x6e>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0ce:	f1ba 0f01 	cmp.w	sl, #1
 800c0d2:	f200 8113 	bhi.w	800c2fc <_scanf_float+0x2a0>
 800c0d6:	455e      	cmp	r6, fp
 800c0d8:	f200 8105 	bhi.w	800c2e6 <_scanf_float+0x28a>
 800c0dc:	2501      	movs	r5, #1
 800c0de:	4628      	mov	r0, r5
 800c0e0:	b007      	add	sp, #28
 800c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c0ea:	2a0d      	cmp	r2, #13
 800c0ec:	d8e6      	bhi.n	800c0bc <_scanf_float+0x60>
 800c0ee:	a101      	add	r1, pc, #4	; (adr r1, 800c0f4 <_scanf_float+0x98>)
 800c0f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0f4:	0800c233 	.word	0x0800c233
 800c0f8:	0800c0bd 	.word	0x0800c0bd
 800c0fc:	0800c0bd 	.word	0x0800c0bd
 800c100:	0800c0bd 	.word	0x0800c0bd
 800c104:	0800c293 	.word	0x0800c293
 800c108:	0800c26b 	.word	0x0800c26b
 800c10c:	0800c0bd 	.word	0x0800c0bd
 800c110:	0800c0bd 	.word	0x0800c0bd
 800c114:	0800c241 	.word	0x0800c241
 800c118:	0800c0bd 	.word	0x0800c0bd
 800c11c:	0800c0bd 	.word	0x0800c0bd
 800c120:	0800c0bd 	.word	0x0800c0bd
 800c124:	0800c0bd 	.word	0x0800c0bd
 800c128:	0800c1f9 	.word	0x0800c1f9
 800c12c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c130:	e7db      	b.n	800c0ea <_scanf_float+0x8e>
 800c132:	290e      	cmp	r1, #14
 800c134:	d8c2      	bhi.n	800c0bc <_scanf_float+0x60>
 800c136:	a001      	add	r0, pc, #4	; (adr r0, 800c13c <_scanf_float+0xe0>)
 800c138:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c13c:	0800c1eb 	.word	0x0800c1eb
 800c140:	0800c0bd 	.word	0x0800c0bd
 800c144:	0800c1eb 	.word	0x0800c1eb
 800c148:	0800c27f 	.word	0x0800c27f
 800c14c:	0800c0bd 	.word	0x0800c0bd
 800c150:	0800c199 	.word	0x0800c199
 800c154:	0800c1d5 	.word	0x0800c1d5
 800c158:	0800c1d5 	.word	0x0800c1d5
 800c15c:	0800c1d5 	.word	0x0800c1d5
 800c160:	0800c1d5 	.word	0x0800c1d5
 800c164:	0800c1d5 	.word	0x0800c1d5
 800c168:	0800c1d5 	.word	0x0800c1d5
 800c16c:	0800c1d5 	.word	0x0800c1d5
 800c170:	0800c1d5 	.word	0x0800c1d5
 800c174:	0800c1d5 	.word	0x0800c1d5
 800c178:	2b6e      	cmp	r3, #110	; 0x6e
 800c17a:	d809      	bhi.n	800c190 <_scanf_float+0x134>
 800c17c:	2b60      	cmp	r3, #96	; 0x60
 800c17e:	d8b2      	bhi.n	800c0e6 <_scanf_float+0x8a>
 800c180:	2b54      	cmp	r3, #84	; 0x54
 800c182:	d077      	beq.n	800c274 <_scanf_float+0x218>
 800c184:	2b59      	cmp	r3, #89	; 0x59
 800c186:	d199      	bne.n	800c0bc <_scanf_float+0x60>
 800c188:	2d07      	cmp	r5, #7
 800c18a:	d197      	bne.n	800c0bc <_scanf_float+0x60>
 800c18c:	2508      	movs	r5, #8
 800c18e:	e029      	b.n	800c1e4 <_scanf_float+0x188>
 800c190:	2b74      	cmp	r3, #116	; 0x74
 800c192:	d06f      	beq.n	800c274 <_scanf_float+0x218>
 800c194:	2b79      	cmp	r3, #121	; 0x79
 800c196:	e7f6      	b.n	800c186 <_scanf_float+0x12a>
 800c198:	6821      	ldr	r1, [r4, #0]
 800c19a:	05c8      	lsls	r0, r1, #23
 800c19c:	d51a      	bpl.n	800c1d4 <_scanf_float+0x178>
 800c19e:	9b02      	ldr	r3, [sp, #8]
 800c1a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1a4:	6021      	str	r1, [r4, #0]
 800c1a6:	f109 0901 	add.w	r9, r9, #1
 800c1aa:	b11b      	cbz	r3, 800c1b4 <_scanf_float+0x158>
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	3201      	adds	r2, #1
 800c1b0:	9302      	str	r3, [sp, #8]
 800c1b2:	60a2      	str	r2, [r4, #8]
 800c1b4:	68a3      	ldr	r3, [r4, #8]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	60a3      	str	r3, [r4, #8]
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	607b      	str	r3, [r7, #4]
 800c1c8:	f340 8084 	ble.w	800c2d4 <_scanf_float+0x278>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	603b      	str	r3, [r7, #0]
 800c1d2:	e766      	b.n	800c0a2 <_scanf_float+0x46>
 800c1d4:	eb1a 0f05 	cmn.w	sl, r5
 800c1d8:	f47f af70 	bne.w	800c0bc <_scanf_float+0x60>
 800c1dc:	6822      	ldr	r2, [r4, #0]
 800c1de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c1e2:	6022      	str	r2, [r4, #0]
 800c1e4:	f806 3b01 	strb.w	r3, [r6], #1
 800c1e8:	e7e4      	b.n	800c1b4 <_scanf_float+0x158>
 800c1ea:	6822      	ldr	r2, [r4, #0]
 800c1ec:	0610      	lsls	r0, r2, #24
 800c1ee:	f57f af65 	bpl.w	800c0bc <_scanf_float+0x60>
 800c1f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1f6:	e7f4      	b.n	800c1e2 <_scanf_float+0x186>
 800c1f8:	f1ba 0f00 	cmp.w	sl, #0
 800c1fc:	d10e      	bne.n	800c21c <_scanf_float+0x1c0>
 800c1fe:	f1b9 0f00 	cmp.w	r9, #0
 800c202:	d10e      	bne.n	800c222 <_scanf_float+0x1c6>
 800c204:	6822      	ldr	r2, [r4, #0]
 800c206:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c20a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c20e:	d108      	bne.n	800c222 <_scanf_float+0x1c6>
 800c210:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c214:	6022      	str	r2, [r4, #0]
 800c216:	f04f 0a01 	mov.w	sl, #1
 800c21a:	e7e3      	b.n	800c1e4 <_scanf_float+0x188>
 800c21c:	f1ba 0f02 	cmp.w	sl, #2
 800c220:	d055      	beq.n	800c2ce <_scanf_float+0x272>
 800c222:	2d01      	cmp	r5, #1
 800c224:	d002      	beq.n	800c22c <_scanf_float+0x1d0>
 800c226:	2d04      	cmp	r5, #4
 800c228:	f47f af48 	bne.w	800c0bc <_scanf_float+0x60>
 800c22c:	3501      	adds	r5, #1
 800c22e:	b2ed      	uxtb	r5, r5
 800c230:	e7d8      	b.n	800c1e4 <_scanf_float+0x188>
 800c232:	f1ba 0f01 	cmp.w	sl, #1
 800c236:	f47f af41 	bne.w	800c0bc <_scanf_float+0x60>
 800c23a:	f04f 0a02 	mov.w	sl, #2
 800c23e:	e7d1      	b.n	800c1e4 <_scanf_float+0x188>
 800c240:	b97d      	cbnz	r5, 800c262 <_scanf_float+0x206>
 800c242:	f1b9 0f00 	cmp.w	r9, #0
 800c246:	f47f af3c 	bne.w	800c0c2 <_scanf_float+0x66>
 800c24a:	6822      	ldr	r2, [r4, #0]
 800c24c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c250:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c254:	f47f af39 	bne.w	800c0ca <_scanf_float+0x6e>
 800c258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c25c:	6022      	str	r2, [r4, #0]
 800c25e:	2501      	movs	r5, #1
 800c260:	e7c0      	b.n	800c1e4 <_scanf_float+0x188>
 800c262:	2d03      	cmp	r5, #3
 800c264:	d0e2      	beq.n	800c22c <_scanf_float+0x1d0>
 800c266:	2d05      	cmp	r5, #5
 800c268:	e7de      	b.n	800c228 <_scanf_float+0x1cc>
 800c26a:	2d02      	cmp	r5, #2
 800c26c:	f47f af26 	bne.w	800c0bc <_scanf_float+0x60>
 800c270:	2503      	movs	r5, #3
 800c272:	e7b7      	b.n	800c1e4 <_scanf_float+0x188>
 800c274:	2d06      	cmp	r5, #6
 800c276:	f47f af21 	bne.w	800c0bc <_scanf_float+0x60>
 800c27a:	2507      	movs	r5, #7
 800c27c:	e7b2      	b.n	800c1e4 <_scanf_float+0x188>
 800c27e:	6822      	ldr	r2, [r4, #0]
 800c280:	0591      	lsls	r1, r2, #22
 800c282:	f57f af1b 	bpl.w	800c0bc <_scanf_float+0x60>
 800c286:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c290:	e7a8      	b.n	800c1e4 <_scanf_float+0x188>
 800c292:	6822      	ldr	r2, [r4, #0]
 800c294:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c298:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c29c:	d006      	beq.n	800c2ac <_scanf_float+0x250>
 800c29e:	0550      	lsls	r0, r2, #21
 800c2a0:	f57f af0c 	bpl.w	800c0bc <_scanf_float+0x60>
 800c2a4:	f1b9 0f00 	cmp.w	r9, #0
 800c2a8:	f43f af0f 	beq.w	800c0ca <_scanf_float+0x6e>
 800c2ac:	0591      	lsls	r1, r2, #22
 800c2ae:	bf58      	it	pl
 800c2b0:	9901      	ldrpl	r1, [sp, #4]
 800c2b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2b6:	bf58      	it	pl
 800c2b8:	eba9 0101 	subpl.w	r1, r9, r1
 800c2bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c2c0:	bf58      	it	pl
 800c2c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2c6:	6022      	str	r2, [r4, #0]
 800c2c8:	f04f 0900 	mov.w	r9, #0
 800c2cc:	e78a      	b.n	800c1e4 <_scanf_float+0x188>
 800c2ce:	f04f 0a03 	mov.w	sl, #3
 800c2d2:	e787      	b.n	800c1e4 <_scanf_float+0x188>
 800c2d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4640      	mov	r0, r8
 800c2dc:	4798      	blx	r3
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	f43f aedf 	beq.w	800c0a2 <_scanf_float+0x46>
 800c2e4:	e6ea      	b.n	800c0bc <_scanf_float+0x60>
 800c2e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4798      	blx	r3
 800c2f4:	6923      	ldr	r3, [r4, #16]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	e6ec      	b.n	800c0d6 <_scanf_float+0x7a>
 800c2fc:	1e6b      	subs	r3, r5, #1
 800c2fe:	2b06      	cmp	r3, #6
 800c300:	d825      	bhi.n	800c34e <_scanf_float+0x2f2>
 800c302:	2d02      	cmp	r5, #2
 800c304:	d836      	bhi.n	800c374 <_scanf_float+0x318>
 800c306:	455e      	cmp	r6, fp
 800c308:	f67f aee8 	bls.w	800c0dc <_scanf_float+0x80>
 800c30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c310:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c314:	463a      	mov	r2, r7
 800c316:	4640      	mov	r0, r8
 800c318:	4798      	blx	r3
 800c31a:	6923      	ldr	r3, [r4, #16]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	6123      	str	r3, [r4, #16]
 800c320:	e7f1      	b.n	800c306 <_scanf_float+0x2aa>
 800c322:	9802      	ldr	r0, [sp, #8]
 800c324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c328:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c32c:	9002      	str	r0, [sp, #8]
 800c32e:	463a      	mov	r2, r7
 800c330:	4640      	mov	r0, r8
 800c332:	4798      	blx	r3
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	3b01      	subs	r3, #1
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c33e:	fa5f fa8a 	uxtb.w	sl, sl
 800c342:	f1ba 0f02 	cmp.w	sl, #2
 800c346:	d1ec      	bne.n	800c322 <_scanf_float+0x2c6>
 800c348:	3d03      	subs	r5, #3
 800c34a:	b2ed      	uxtb	r5, r5
 800c34c:	1b76      	subs	r6, r6, r5
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	05da      	lsls	r2, r3, #23
 800c352:	d52f      	bpl.n	800c3b4 <_scanf_float+0x358>
 800c354:	055b      	lsls	r3, r3, #21
 800c356:	d510      	bpl.n	800c37a <_scanf_float+0x31e>
 800c358:	455e      	cmp	r6, fp
 800c35a:	f67f aebf 	bls.w	800c0dc <_scanf_float+0x80>
 800c35e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c366:	463a      	mov	r2, r7
 800c368:	4640      	mov	r0, r8
 800c36a:	4798      	blx	r3
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	3b01      	subs	r3, #1
 800c370:	6123      	str	r3, [r4, #16]
 800c372:	e7f1      	b.n	800c358 <_scanf_float+0x2fc>
 800c374:	46aa      	mov	sl, r5
 800c376:	9602      	str	r6, [sp, #8]
 800c378:	e7df      	b.n	800c33a <_scanf_float+0x2de>
 800c37a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c37e:	6923      	ldr	r3, [r4, #16]
 800c380:	2965      	cmp	r1, #101	; 0x65
 800c382:	f103 33ff 	add.w	r3, r3, #4294967295
 800c386:	f106 35ff 	add.w	r5, r6, #4294967295
 800c38a:	6123      	str	r3, [r4, #16]
 800c38c:	d00c      	beq.n	800c3a8 <_scanf_float+0x34c>
 800c38e:	2945      	cmp	r1, #69	; 0x45
 800c390:	d00a      	beq.n	800c3a8 <_scanf_float+0x34c>
 800c392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c396:	463a      	mov	r2, r7
 800c398:	4640      	mov	r0, r8
 800c39a:	4798      	blx	r3
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	1eb5      	subs	r5, r6, #2
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ac:	463a      	mov	r2, r7
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	4798      	blx	r3
 800c3b2:	462e      	mov	r6, r5
 800c3b4:	6825      	ldr	r5, [r4, #0]
 800c3b6:	f015 0510 	ands.w	r5, r5, #16
 800c3ba:	d159      	bne.n	800c470 <_scanf_float+0x414>
 800c3bc:	7035      	strb	r5, [r6, #0]
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3c8:	d11b      	bne.n	800c402 <_scanf_float+0x3a6>
 800c3ca:	9b01      	ldr	r3, [sp, #4]
 800c3cc:	454b      	cmp	r3, r9
 800c3ce:	eba3 0209 	sub.w	r2, r3, r9
 800c3d2:	d123      	bne.n	800c41c <_scanf_float+0x3c0>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4659      	mov	r1, fp
 800c3d8:	4640      	mov	r0, r8
 800c3da:	f000 ff27 	bl	800d22c <_strtod_r>
 800c3de:	6822      	ldr	r2, [r4, #0]
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	f012 0f02 	tst.w	r2, #2
 800c3e6:	ec57 6b10 	vmov	r6, r7, d0
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	d021      	beq.n	800c432 <_scanf_float+0x3d6>
 800c3ee:	9903      	ldr	r1, [sp, #12]
 800c3f0:	1d1a      	adds	r2, r3, #4
 800c3f2:	600a      	str	r2, [r1, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	e9c3 6700 	strd	r6, r7, [r3]
 800c3fa:	68e3      	ldr	r3, [r4, #12]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	60e3      	str	r3, [r4, #12]
 800c400:	e66d      	b.n	800c0de <_scanf_float+0x82>
 800c402:	9b04      	ldr	r3, [sp, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0e5      	beq.n	800c3d4 <_scanf_float+0x378>
 800c408:	9905      	ldr	r1, [sp, #20]
 800c40a:	230a      	movs	r3, #10
 800c40c:	462a      	mov	r2, r5
 800c40e:	3101      	adds	r1, #1
 800c410:	4640      	mov	r0, r8
 800c412:	f000 ff93 	bl	800d33c <_strtol_r>
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	9e05      	ldr	r6, [sp, #20]
 800c41a:	1ac2      	subs	r2, r0, r3
 800c41c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c420:	429e      	cmp	r6, r3
 800c422:	bf28      	it	cs
 800c424:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c428:	4912      	ldr	r1, [pc, #72]	; (800c474 <_scanf_float+0x418>)
 800c42a:	4630      	mov	r0, r6
 800c42c:	f000 f82c 	bl	800c488 <siprintf>
 800c430:	e7d0      	b.n	800c3d4 <_scanf_float+0x378>
 800c432:	9903      	ldr	r1, [sp, #12]
 800c434:	f012 0f04 	tst.w	r2, #4
 800c438:	f103 0204 	add.w	r2, r3, #4
 800c43c:	600a      	str	r2, [r1, #0]
 800c43e:	d1d9      	bne.n	800c3f4 <_scanf_float+0x398>
 800c440:	f8d3 8000 	ldr.w	r8, [r3]
 800c444:	ee10 2a10 	vmov	r2, s0
 800c448:	ee10 0a10 	vmov	r0, s0
 800c44c:	463b      	mov	r3, r7
 800c44e:	4639      	mov	r1, r7
 800c450:	f7f4 fb9c 	bl	8000b8c <__aeabi_dcmpun>
 800c454:	b128      	cbz	r0, 800c462 <_scanf_float+0x406>
 800c456:	4808      	ldr	r0, [pc, #32]	; (800c478 <_scanf_float+0x41c>)
 800c458:	f000 f810 	bl	800c47c <nanf>
 800c45c:	ed88 0a00 	vstr	s0, [r8]
 800c460:	e7cb      	b.n	800c3fa <_scanf_float+0x39e>
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	f7f4 fbef 	bl	8000c48 <__aeabi_d2f>
 800c46a:	f8c8 0000 	str.w	r0, [r8]
 800c46e:	e7c4      	b.n	800c3fa <_scanf_float+0x39e>
 800c470:	2500      	movs	r5, #0
 800c472:	e634      	b.n	800c0de <_scanf_float+0x82>
 800c474:	0801277e 	.word	0x0801277e
 800c478:	08012ba3 	.word	0x08012ba3

0800c47c <nanf>:
 800c47c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c484 <nanf+0x8>
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	7fc00000 	.word	0x7fc00000

0800c488 <siprintf>:
 800c488:	b40e      	push	{r1, r2, r3}
 800c48a:	b500      	push	{lr}
 800c48c:	b09c      	sub	sp, #112	; 0x70
 800c48e:	ab1d      	add	r3, sp, #116	; 0x74
 800c490:	9002      	str	r0, [sp, #8]
 800c492:	9006      	str	r0, [sp, #24]
 800c494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c498:	4809      	ldr	r0, [pc, #36]	; (800c4c0 <siprintf+0x38>)
 800c49a:	9107      	str	r1, [sp, #28]
 800c49c:	9104      	str	r1, [sp, #16]
 800c49e:	4909      	ldr	r1, [pc, #36]	; (800c4c4 <siprintf+0x3c>)
 800c4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a4:	9105      	str	r1, [sp, #20]
 800c4a6:	6800      	ldr	r0, [r0, #0]
 800c4a8:	9301      	str	r3, [sp, #4]
 800c4aa:	a902      	add	r1, sp, #8
 800c4ac:	f002 ffa8 	bl	800f400 <_svfiprintf_r>
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	b01c      	add	sp, #112	; 0x70
 800c4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4bc:	b003      	add	sp, #12
 800c4be:	4770      	bx	lr
 800c4c0:	20000014 	.word	0x20000014
 800c4c4:	ffff0208 	.word	0xffff0208

0800c4c8 <siscanf>:
 800c4c8:	b40e      	push	{r1, r2, r3}
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	b09f      	sub	sp, #124	; 0x7c
 800c4ce:	ac21      	add	r4, sp, #132	; 0x84
 800c4d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c4d4:	f854 2b04 	ldr.w	r2, [r4], #4
 800c4d8:	9201      	str	r2, [sp, #4]
 800c4da:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c4de:	9004      	str	r0, [sp, #16]
 800c4e0:	9008      	str	r0, [sp, #32]
 800c4e2:	f7f3 fe9f 	bl	8000224 <strlen>
 800c4e6:	4b0c      	ldr	r3, [pc, #48]	; (800c518 <siscanf+0x50>)
 800c4e8:	9005      	str	r0, [sp, #20]
 800c4ea:	9009      	str	r0, [sp, #36]	; 0x24
 800c4ec:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ee:	480b      	ldr	r0, [pc, #44]	; (800c51c <siscanf+0x54>)
 800c4f0:	9a01      	ldr	r2, [sp, #4]
 800c4f2:	6800      	ldr	r0, [r0, #0]
 800c4f4:	9403      	str	r4, [sp, #12]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9311      	str	r3, [sp, #68]	; 0x44
 800c4fa:	9316      	str	r3, [sp, #88]	; 0x58
 800c4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c500:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c504:	a904      	add	r1, sp, #16
 800c506:	4623      	mov	r3, r4
 800c508:	f003 f8d4 	bl	800f6b4 <__ssvfiscanf_r>
 800c50c:	b01f      	add	sp, #124	; 0x7c
 800c50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c512:	b003      	add	sp, #12
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	0800c543 	.word	0x0800c543
 800c51c:	20000014 	.word	0x20000014

0800c520 <__sread>:
 800c520:	b510      	push	{r4, lr}
 800c522:	460c      	mov	r4, r1
 800c524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c528:	f003 fb8e 	bl	800fc48 <_read_r>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	bfab      	itete	ge
 800c530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c532:	89a3      	ldrhlt	r3, [r4, #12]
 800c534:	181b      	addge	r3, r3, r0
 800c536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c53a:	bfac      	ite	ge
 800c53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c53e:	81a3      	strhlt	r3, [r4, #12]
 800c540:	bd10      	pop	{r4, pc}

0800c542 <__seofread>:
 800c542:	2000      	movs	r0, #0
 800c544:	4770      	bx	lr

0800c546 <__swrite>:
 800c546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	461f      	mov	r7, r3
 800c54c:	898b      	ldrh	r3, [r1, #12]
 800c54e:	05db      	lsls	r3, r3, #23
 800c550:	4605      	mov	r5, r0
 800c552:	460c      	mov	r4, r1
 800c554:	4616      	mov	r6, r2
 800c556:	d505      	bpl.n	800c564 <__swrite+0x1e>
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	2302      	movs	r3, #2
 800c55e:	2200      	movs	r2, #0
 800c560:	f002 f900 	bl	800e764 <_lseek_r>
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c56a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c56e:	81a3      	strh	r3, [r4, #12]
 800c570:	4632      	mov	r2, r6
 800c572:	463b      	mov	r3, r7
 800c574:	4628      	mov	r0, r5
 800c576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	f000 bee1 	b.w	800d340 <_write_r>

0800c57e <__sseek>:
 800c57e:	b510      	push	{r4, lr}
 800c580:	460c      	mov	r4, r1
 800c582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c586:	f002 f8ed 	bl	800e764 <_lseek_r>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	bf15      	itete	ne
 800c590:	6560      	strne	r0, [r4, #84]	; 0x54
 800c592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c59a:	81a3      	strheq	r3, [r4, #12]
 800c59c:	bf18      	it	ne
 800c59e:	81a3      	strhne	r3, [r4, #12]
 800c5a0:	bd10      	pop	{r4, pc}

0800c5a2 <__sclose>:
 800c5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a6:	f000 bedd 	b.w	800d364 <_close_r>

0800c5aa <strcpy>:
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5b0:	f803 2b01 	strb.w	r2, [r3], #1
 800c5b4:	2a00      	cmp	r2, #0
 800c5b6:	d1f9      	bne.n	800c5ac <strcpy+0x2>
 800c5b8:	4770      	bx	lr

0800c5ba <strstr>:
 800c5ba:	780a      	ldrb	r2, [r1, #0]
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	b96a      	cbnz	r2, 800c5dc <strstr+0x22>
 800c5c0:	bd70      	pop	{r4, r5, r6, pc}
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d109      	bne.n	800c5da <strstr+0x20>
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f6      	beq.n	800c5c0 <strstr+0x6>
 800c5d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c5d6:	429e      	cmp	r6, r3
 800c5d8:	d0f7      	beq.n	800c5ca <strstr+0x10>
 800c5da:	3001      	adds	r0, #1
 800c5dc:	7803      	ldrb	r3, [r0, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1ef      	bne.n	800c5c2 <strstr+0x8>
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	e7ec      	b.n	800c5c0 <strstr+0x6>

0800c5e6 <sulp>:
 800c5e6:	b570      	push	{r4, r5, r6, lr}
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	ec45 4b10 	vmov	d0, r4, r5
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	f002 fc63 	bl	800eebc <__ulp>
 800c5f6:	ec51 0b10 	vmov	r0, r1, d0
 800c5fa:	b17e      	cbz	r6, 800c61c <sulp+0x36>
 800c5fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c600:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd09      	ble.n	800c61c <sulp+0x36>
 800c608:	051b      	lsls	r3, r3, #20
 800c60a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c60e:	2400      	movs	r4, #0
 800c610:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c614:	4622      	mov	r2, r4
 800c616:	462b      	mov	r3, r5
 800c618:	f7f4 f81e 	bl	8000658 <__aeabi_dmul>
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c620 <_strtod_l>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	ed2d 8b02 	vpush	{d8}
 800c628:	b09d      	sub	sp, #116	; 0x74
 800c62a:	461f      	mov	r7, r3
 800c62c:	2300      	movs	r3, #0
 800c62e:	9318      	str	r3, [sp, #96]	; 0x60
 800c630:	4ba2      	ldr	r3, [pc, #648]	; (800c8bc <_strtod_l+0x29c>)
 800c632:	9213      	str	r2, [sp, #76]	; 0x4c
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	9305      	str	r3, [sp, #20]
 800c638:	4604      	mov	r4, r0
 800c63a:	4618      	mov	r0, r3
 800c63c:	4688      	mov	r8, r1
 800c63e:	f7f3 fdf1 	bl	8000224 <strlen>
 800c642:	f04f 0a00 	mov.w	sl, #0
 800c646:	4605      	mov	r5, r0
 800c648:	f04f 0b00 	mov.w	fp, #0
 800c64c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c652:	781a      	ldrb	r2, [r3, #0]
 800c654:	2a2b      	cmp	r2, #43	; 0x2b
 800c656:	d04e      	beq.n	800c6f6 <_strtod_l+0xd6>
 800c658:	d83b      	bhi.n	800c6d2 <_strtod_l+0xb2>
 800c65a:	2a0d      	cmp	r2, #13
 800c65c:	d834      	bhi.n	800c6c8 <_strtod_l+0xa8>
 800c65e:	2a08      	cmp	r2, #8
 800c660:	d834      	bhi.n	800c6cc <_strtod_l+0xac>
 800c662:	2a00      	cmp	r2, #0
 800c664:	d03e      	beq.n	800c6e4 <_strtod_l+0xc4>
 800c666:	2300      	movs	r3, #0
 800c668:	930a      	str	r3, [sp, #40]	; 0x28
 800c66a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c66c:	7833      	ldrb	r3, [r6, #0]
 800c66e:	2b30      	cmp	r3, #48	; 0x30
 800c670:	f040 80b0 	bne.w	800c7d4 <_strtod_l+0x1b4>
 800c674:	7873      	ldrb	r3, [r6, #1]
 800c676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c67a:	2b58      	cmp	r3, #88	; 0x58
 800c67c:	d168      	bne.n	800c750 <_strtod_l+0x130>
 800c67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	ab18      	add	r3, sp, #96	; 0x60
 800c684:	9702      	str	r7, [sp, #8]
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	4a8d      	ldr	r2, [pc, #564]	; (800c8c0 <_strtod_l+0x2a0>)
 800c68a:	ab19      	add	r3, sp, #100	; 0x64
 800c68c:	a917      	add	r1, sp, #92	; 0x5c
 800c68e:	4620      	mov	r0, r4
 800c690:	f001 fd5c 	bl	800e14c <__gethex>
 800c694:	f010 0707 	ands.w	r7, r0, #7
 800c698:	4605      	mov	r5, r0
 800c69a:	d005      	beq.n	800c6a8 <_strtod_l+0x88>
 800c69c:	2f06      	cmp	r7, #6
 800c69e:	d12c      	bne.n	800c6fa <_strtod_l+0xda>
 800c6a0:	3601      	adds	r6, #1
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 8590 	bne.w	800d1d0 <_strtod_l+0xbb0>
 800c6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b2:	b1eb      	cbz	r3, 800c6f0 <_strtod_l+0xd0>
 800c6b4:	4652      	mov	r2, sl
 800c6b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6ba:	ec43 2b10 	vmov	d0, r2, r3
 800c6be:	b01d      	add	sp, #116	; 0x74
 800c6c0:	ecbd 8b02 	vpop	{d8}
 800c6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c8:	2a20      	cmp	r2, #32
 800c6ca:	d1cc      	bne.n	800c666 <_strtod_l+0x46>
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6d0:	e7be      	b.n	800c650 <_strtod_l+0x30>
 800c6d2:	2a2d      	cmp	r2, #45	; 0x2d
 800c6d4:	d1c7      	bne.n	800c666 <_strtod_l+0x46>
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	920a      	str	r2, [sp, #40]	; 0x28
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6de:	785b      	ldrb	r3, [r3, #1]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1c2      	bne.n	800c66a <_strtod_l+0x4a>
 800c6e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f040 856e 	bne.w	800d1cc <_strtod_l+0xbac>
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	465b      	mov	r3, fp
 800c6f4:	e7e1      	b.n	800c6ba <_strtod_l+0x9a>
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	e7ee      	b.n	800c6d8 <_strtod_l+0xb8>
 800c6fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6fc:	b13a      	cbz	r2, 800c70e <_strtod_l+0xee>
 800c6fe:	2135      	movs	r1, #53	; 0x35
 800c700:	a81a      	add	r0, sp, #104	; 0x68
 800c702:	f002 fce6 	bl	800f0d2 <__copybits>
 800c706:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c708:	4620      	mov	r0, r4
 800c70a:	f002 f8a5 	bl	800e858 <_Bfree>
 800c70e:	3f01      	subs	r7, #1
 800c710:	2f04      	cmp	r7, #4
 800c712:	d806      	bhi.n	800c722 <_strtod_l+0x102>
 800c714:	e8df f007 	tbb	[pc, r7]
 800c718:	1714030a 	.word	0x1714030a
 800c71c:	0a          	.byte	0x0a
 800c71d:	00          	.byte	0x00
 800c71e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c722:	0728      	lsls	r0, r5, #28
 800c724:	d5c0      	bpl.n	800c6a8 <_strtod_l+0x88>
 800c726:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c72a:	e7bd      	b.n	800c6a8 <_strtod_l+0x88>
 800c72c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c730:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c73a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c73e:	e7f0      	b.n	800c722 <_strtod_l+0x102>
 800c740:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c8c4 <_strtod_l+0x2a4>
 800c744:	e7ed      	b.n	800c722 <_strtod_l+0x102>
 800c746:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c74a:	f04f 3aff 	mov.w	sl, #4294967295
 800c74e:	e7e8      	b.n	800c722 <_strtod_l+0x102>
 800c750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	9217      	str	r2, [sp, #92]	; 0x5c
 800c756:	785b      	ldrb	r3, [r3, #1]
 800c758:	2b30      	cmp	r3, #48	; 0x30
 800c75a:	d0f9      	beq.n	800c750 <_strtod_l+0x130>
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0a3      	beq.n	800c6a8 <_strtod_l+0x88>
 800c760:	2301      	movs	r3, #1
 800c762:	f04f 0900 	mov.w	r9, #0
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c76a:	9308      	str	r3, [sp, #32]
 800c76c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c770:	464f      	mov	r7, r9
 800c772:	220a      	movs	r2, #10
 800c774:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c776:	7806      	ldrb	r6, [r0, #0]
 800c778:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c77c:	b2d9      	uxtb	r1, r3
 800c77e:	2909      	cmp	r1, #9
 800c780:	d92a      	bls.n	800c7d8 <_strtod_l+0x1b8>
 800c782:	9905      	ldr	r1, [sp, #20]
 800c784:	462a      	mov	r2, r5
 800c786:	f003 fac3 	bl	800fd10 <strncmp>
 800c78a:	b398      	cbz	r0, 800c7f4 <_strtod_l+0x1d4>
 800c78c:	2000      	movs	r0, #0
 800c78e:	4632      	mov	r2, r6
 800c790:	463d      	mov	r5, r7
 800c792:	9005      	str	r0, [sp, #20]
 800c794:	4603      	mov	r3, r0
 800c796:	2a65      	cmp	r2, #101	; 0x65
 800c798:	d001      	beq.n	800c79e <_strtod_l+0x17e>
 800c79a:	2a45      	cmp	r2, #69	; 0x45
 800c79c:	d118      	bne.n	800c7d0 <_strtod_l+0x1b0>
 800c79e:	b91d      	cbnz	r5, 800c7a8 <_strtod_l+0x188>
 800c7a0:	9a04      	ldr	r2, [sp, #16]
 800c7a2:	4302      	orrs	r2, r0
 800c7a4:	d09e      	beq.n	800c6e4 <_strtod_l+0xc4>
 800c7a6:	2500      	movs	r5, #0
 800c7a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c7ac:	f108 0201 	add.w	r2, r8, #1
 800c7b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c7b6:	2a2b      	cmp	r2, #43	; 0x2b
 800c7b8:	d075      	beq.n	800c8a6 <_strtod_l+0x286>
 800c7ba:	2a2d      	cmp	r2, #45	; 0x2d
 800c7bc:	d07b      	beq.n	800c8b6 <_strtod_l+0x296>
 800c7be:	f04f 0c00 	mov.w	ip, #0
 800c7c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7c6:	2909      	cmp	r1, #9
 800c7c8:	f240 8082 	bls.w	800c8d0 <_strtod_l+0x2b0>
 800c7cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7d0:	2600      	movs	r6, #0
 800c7d2:	e09d      	b.n	800c910 <_strtod_l+0x2f0>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e7c4      	b.n	800c762 <_strtod_l+0x142>
 800c7d8:	2f08      	cmp	r7, #8
 800c7da:	bfd8      	it	le
 800c7dc:	9907      	ldrle	r1, [sp, #28]
 800c7de:	f100 0001 	add.w	r0, r0, #1
 800c7e2:	bfda      	itte	le
 800c7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7e8:	9307      	strle	r3, [sp, #28]
 800c7ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c7ee:	3701      	adds	r7, #1
 800c7f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c7f2:	e7bf      	b.n	800c774 <_strtod_l+0x154>
 800c7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7f6:	195a      	adds	r2, r3, r5
 800c7f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7fa:	5d5a      	ldrb	r2, [r3, r5]
 800c7fc:	2f00      	cmp	r7, #0
 800c7fe:	d037      	beq.n	800c870 <_strtod_l+0x250>
 800c800:	9005      	str	r0, [sp, #20]
 800c802:	463d      	mov	r5, r7
 800c804:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c808:	2b09      	cmp	r3, #9
 800c80a:	d912      	bls.n	800c832 <_strtod_l+0x212>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e7c2      	b.n	800c796 <_strtod_l+0x176>
 800c810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	9217      	str	r2, [sp, #92]	; 0x5c
 800c816:	785a      	ldrb	r2, [r3, #1]
 800c818:	3001      	adds	r0, #1
 800c81a:	2a30      	cmp	r2, #48	; 0x30
 800c81c:	d0f8      	beq.n	800c810 <_strtod_l+0x1f0>
 800c81e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c822:	2b08      	cmp	r3, #8
 800c824:	f200 84d9 	bhi.w	800d1da <_strtod_l+0xbba>
 800c828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c82a:	9005      	str	r0, [sp, #20]
 800c82c:	2000      	movs	r0, #0
 800c82e:	9308      	str	r3, [sp, #32]
 800c830:	4605      	mov	r5, r0
 800c832:	3a30      	subs	r2, #48	; 0x30
 800c834:	f100 0301 	add.w	r3, r0, #1
 800c838:	d014      	beq.n	800c864 <_strtod_l+0x244>
 800c83a:	9905      	ldr	r1, [sp, #20]
 800c83c:	4419      	add	r1, r3
 800c83e:	9105      	str	r1, [sp, #20]
 800c840:	462b      	mov	r3, r5
 800c842:	eb00 0e05 	add.w	lr, r0, r5
 800c846:	210a      	movs	r1, #10
 800c848:	4573      	cmp	r3, lr
 800c84a:	d113      	bne.n	800c874 <_strtod_l+0x254>
 800c84c:	182b      	adds	r3, r5, r0
 800c84e:	2b08      	cmp	r3, #8
 800c850:	f105 0501 	add.w	r5, r5, #1
 800c854:	4405      	add	r5, r0
 800c856:	dc1c      	bgt.n	800c892 <_strtod_l+0x272>
 800c858:	9907      	ldr	r1, [sp, #28]
 800c85a:	230a      	movs	r3, #10
 800c85c:	fb03 2301 	mla	r3, r3, r1, r2
 800c860:	9307      	str	r3, [sp, #28]
 800c862:	2300      	movs	r3, #0
 800c864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c866:	1c51      	adds	r1, r2, #1
 800c868:	9117      	str	r1, [sp, #92]	; 0x5c
 800c86a:	7852      	ldrb	r2, [r2, #1]
 800c86c:	4618      	mov	r0, r3
 800c86e:	e7c9      	b.n	800c804 <_strtod_l+0x1e4>
 800c870:	4638      	mov	r0, r7
 800c872:	e7d2      	b.n	800c81a <_strtod_l+0x1fa>
 800c874:	2b08      	cmp	r3, #8
 800c876:	dc04      	bgt.n	800c882 <_strtod_l+0x262>
 800c878:	9e07      	ldr	r6, [sp, #28]
 800c87a:	434e      	muls	r6, r1
 800c87c:	9607      	str	r6, [sp, #28]
 800c87e:	3301      	adds	r3, #1
 800c880:	e7e2      	b.n	800c848 <_strtod_l+0x228>
 800c882:	f103 0c01 	add.w	ip, r3, #1
 800c886:	f1bc 0f10 	cmp.w	ip, #16
 800c88a:	bfd8      	it	le
 800c88c:	fb01 f909 	mulle.w	r9, r1, r9
 800c890:	e7f5      	b.n	800c87e <_strtod_l+0x25e>
 800c892:	2d10      	cmp	r5, #16
 800c894:	bfdc      	itt	le
 800c896:	230a      	movle	r3, #10
 800c898:	fb03 2909 	mlale	r9, r3, r9, r2
 800c89c:	e7e1      	b.n	800c862 <_strtod_l+0x242>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e77c      	b.n	800c7a0 <_strtod_l+0x180>
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	f108 0202 	add.w	r2, r8, #2
 800c8ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c8b4:	e785      	b.n	800c7c2 <_strtod_l+0x1a2>
 800c8b6:	f04f 0c01 	mov.w	ip, #1
 800c8ba:	e7f6      	b.n	800c8aa <_strtod_l+0x28a>
 800c8bc:	080129d0 	.word	0x080129d0
 800c8c0:	08012784 	.word	0x08012784
 800c8c4:	7ff00000 	.word	0x7ff00000
 800c8c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8ca:	1c51      	adds	r1, r2, #1
 800c8cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8ce:	7852      	ldrb	r2, [r2, #1]
 800c8d0:	2a30      	cmp	r2, #48	; 0x30
 800c8d2:	d0f9      	beq.n	800c8c8 <_strtod_l+0x2a8>
 800c8d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8d8:	2908      	cmp	r1, #8
 800c8da:	f63f af79 	bhi.w	800c7d0 <_strtod_l+0x1b0>
 800c8de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c8e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8e4:	9206      	str	r2, [sp, #24]
 800c8e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8e8:	1c51      	adds	r1, r2, #1
 800c8ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8ec:	7852      	ldrb	r2, [r2, #1]
 800c8ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c8f2:	2e09      	cmp	r6, #9
 800c8f4:	d937      	bls.n	800c966 <_strtod_l+0x346>
 800c8f6:	9e06      	ldr	r6, [sp, #24]
 800c8f8:	1b89      	subs	r1, r1, r6
 800c8fa:	2908      	cmp	r1, #8
 800c8fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c900:	dc02      	bgt.n	800c908 <_strtod_l+0x2e8>
 800c902:	4576      	cmp	r6, lr
 800c904:	bfa8      	it	ge
 800c906:	4676      	movge	r6, lr
 800c908:	f1bc 0f00 	cmp.w	ip, #0
 800c90c:	d000      	beq.n	800c910 <_strtod_l+0x2f0>
 800c90e:	4276      	negs	r6, r6
 800c910:	2d00      	cmp	r5, #0
 800c912:	d14d      	bne.n	800c9b0 <_strtod_l+0x390>
 800c914:	9904      	ldr	r1, [sp, #16]
 800c916:	4301      	orrs	r1, r0
 800c918:	f47f aec6 	bne.w	800c6a8 <_strtod_l+0x88>
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f47f aee1 	bne.w	800c6e4 <_strtod_l+0xc4>
 800c922:	2a69      	cmp	r2, #105	; 0x69
 800c924:	d027      	beq.n	800c976 <_strtod_l+0x356>
 800c926:	dc24      	bgt.n	800c972 <_strtod_l+0x352>
 800c928:	2a49      	cmp	r2, #73	; 0x49
 800c92a:	d024      	beq.n	800c976 <_strtod_l+0x356>
 800c92c:	2a4e      	cmp	r2, #78	; 0x4e
 800c92e:	f47f aed9 	bne.w	800c6e4 <_strtod_l+0xc4>
 800c932:	499f      	ldr	r1, [pc, #636]	; (800cbb0 <_strtod_l+0x590>)
 800c934:	a817      	add	r0, sp, #92	; 0x5c
 800c936:	f001 fe61 	bl	800e5fc <__match>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	f43f aed2 	beq.w	800c6e4 <_strtod_l+0xc4>
 800c940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b28      	cmp	r3, #40	; 0x28
 800c946:	d12d      	bne.n	800c9a4 <_strtod_l+0x384>
 800c948:	499a      	ldr	r1, [pc, #616]	; (800cbb4 <_strtod_l+0x594>)
 800c94a:	aa1a      	add	r2, sp, #104	; 0x68
 800c94c:	a817      	add	r0, sp, #92	; 0x5c
 800c94e:	f001 fe69 	bl	800e624 <__hexnan>
 800c952:	2805      	cmp	r0, #5
 800c954:	d126      	bne.n	800c9a4 <_strtod_l+0x384>
 800c956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c958:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c95c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c960:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c964:	e6a0      	b.n	800c6a8 <_strtod_l+0x88>
 800c966:	210a      	movs	r1, #10
 800c968:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c96c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c970:	e7b9      	b.n	800c8e6 <_strtod_l+0x2c6>
 800c972:	2a6e      	cmp	r2, #110	; 0x6e
 800c974:	e7db      	b.n	800c92e <_strtod_l+0x30e>
 800c976:	4990      	ldr	r1, [pc, #576]	; (800cbb8 <_strtod_l+0x598>)
 800c978:	a817      	add	r0, sp, #92	; 0x5c
 800c97a:	f001 fe3f 	bl	800e5fc <__match>
 800c97e:	2800      	cmp	r0, #0
 800c980:	f43f aeb0 	beq.w	800c6e4 <_strtod_l+0xc4>
 800c984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c986:	498d      	ldr	r1, [pc, #564]	; (800cbbc <_strtod_l+0x59c>)
 800c988:	3b01      	subs	r3, #1
 800c98a:	a817      	add	r0, sp, #92	; 0x5c
 800c98c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c98e:	f001 fe35 	bl	800e5fc <__match>
 800c992:	b910      	cbnz	r0, 800c99a <_strtod_l+0x37a>
 800c994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c996:	3301      	adds	r3, #1
 800c998:	9317      	str	r3, [sp, #92]	; 0x5c
 800c99a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cbcc <_strtod_l+0x5ac>
 800c99e:	f04f 0a00 	mov.w	sl, #0
 800c9a2:	e681      	b.n	800c6a8 <_strtod_l+0x88>
 800c9a4:	4886      	ldr	r0, [pc, #536]	; (800cbc0 <_strtod_l+0x5a0>)
 800c9a6:	f003 f963 	bl	800fc70 <nan>
 800c9aa:	ec5b ab10 	vmov	sl, fp, d0
 800c9ae:	e67b      	b.n	800c6a8 <_strtod_l+0x88>
 800c9b0:	9b05      	ldr	r3, [sp, #20]
 800c9b2:	9807      	ldr	r0, [sp, #28]
 800c9b4:	1af3      	subs	r3, r6, r3
 800c9b6:	2f00      	cmp	r7, #0
 800c9b8:	bf08      	it	eq
 800c9ba:	462f      	moveq	r7, r5
 800c9bc:	2d10      	cmp	r5, #16
 800c9be:	9306      	str	r3, [sp, #24]
 800c9c0:	46a8      	mov	r8, r5
 800c9c2:	bfa8      	it	ge
 800c9c4:	f04f 0810 	movge.w	r8, #16
 800c9c8:	f7f3 fdcc 	bl	8000564 <__aeabi_ui2d>
 800c9cc:	2d09      	cmp	r5, #9
 800c9ce:	4682      	mov	sl, r0
 800c9d0:	468b      	mov	fp, r1
 800c9d2:	dd13      	ble.n	800c9fc <_strtod_l+0x3dc>
 800c9d4:	4b7b      	ldr	r3, [pc, #492]	; (800cbc4 <_strtod_l+0x5a4>)
 800c9d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c9da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c9de:	f7f3 fe3b 	bl	8000658 <__aeabi_dmul>
 800c9e2:	4682      	mov	sl, r0
 800c9e4:	4648      	mov	r0, r9
 800c9e6:	468b      	mov	fp, r1
 800c9e8:	f7f3 fdbc 	bl	8000564 <__aeabi_ui2d>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4650      	mov	r0, sl
 800c9f2:	4659      	mov	r1, fp
 800c9f4:	f7f3 fc7a 	bl	80002ec <__adddf3>
 800c9f8:	4682      	mov	sl, r0
 800c9fa:	468b      	mov	fp, r1
 800c9fc:	2d0f      	cmp	r5, #15
 800c9fe:	dc38      	bgt.n	800ca72 <_strtod_l+0x452>
 800ca00:	9b06      	ldr	r3, [sp, #24]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f43f ae50 	beq.w	800c6a8 <_strtod_l+0x88>
 800ca08:	dd24      	ble.n	800ca54 <_strtod_l+0x434>
 800ca0a:	2b16      	cmp	r3, #22
 800ca0c:	dc0b      	bgt.n	800ca26 <_strtod_l+0x406>
 800ca0e:	496d      	ldr	r1, [pc, #436]	; (800cbc4 <_strtod_l+0x5a4>)
 800ca10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca18:	4652      	mov	r2, sl
 800ca1a:	465b      	mov	r3, fp
 800ca1c:	f7f3 fe1c 	bl	8000658 <__aeabi_dmul>
 800ca20:	4682      	mov	sl, r0
 800ca22:	468b      	mov	fp, r1
 800ca24:	e640      	b.n	800c6a8 <_strtod_l+0x88>
 800ca26:	9a06      	ldr	r2, [sp, #24]
 800ca28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	db20      	blt.n	800ca72 <_strtod_l+0x452>
 800ca30:	4c64      	ldr	r4, [pc, #400]	; (800cbc4 <_strtod_l+0x5a4>)
 800ca32:	f1c5 050f 	rsb	r5, r5, #15
 800ca36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca42:	f7f3 fe09 	bl	8000658 <__aeabi_dmul>
 800ca46:	9b06      	ldr	r3, [sp, #24]
 800ca48:	1b5d      	subs	r5, r3, r5
 800ca4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca52:	e7e3      	b.n	800ca1c <_strtod_l+0x3fc>
 800ca54:	9b06      	ldr	r3, [sp, #24]
 800ca56:	3316      	adds	r3, #22
 800ca58:	db0b      	blt.n	800ca72 <_strtod_l+0x452>
 800ca5a:	9b05      	ldr	r3, [sp, #20]
 800ca5c:	1b9e      	subs	r6, r3, r6
 800ca5e:	4b59      	ldr	r3, [pc, #356]	; (800cbc4 <_strtod_l+0x5a4>)
 800ca60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ca64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca68:	4650      	mov	r0, sl
 800ca6a:	4659      	mov	r1, fp
 800ca6c:	f7f3 ff1e 	bl	80008ac <__aeabi_ddiv>
 800ca70:	e7d6      	b.n	800ca20 <_strtod_l+0x400>
 800ca72:	9b06      	ldr	r3, [sp, #24]
 800ca74:	eba5 0808 	sub.w	r8, r5, r8
 800ca78:	4498      	add	r8, r3
 800ca7a:	f1b8 0f00 	cmp.w	r8, #0
 800ca7e:	dd74      	ble.n	800cb6a <_strtod_l+0x54a>
 800ca80:	f018 030f 	ands.w	r3, r8, #15
 800ca84:	d00a      	beq.n	800ca9c <_strtod_l+0x47c>
 800ca86:	494f      	ldr	r1, [pc, #316]	; (800cbc4 <_strtod_l+0x5a4>)
 800ca88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca8c:	4652      	mov	r2, sl
 800ca8e:	465b      	mov	r3, fp
 800ca90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca94:	f7f3 fde0 	bl	8000658 <__aeabi_dmul>
 800ca98:	4682      	mov	sl, r0
 800ca9a:	468b      	mov	fp, r1
 800ca9c:	f038 080f 	bics.w	r8, r8, #15
 800caa0:	d04f      	beq.n	800cb42 <_strtod_l+0x522>
 800caa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800caa6:	dd22      	ble.n	800caee <_strtod_l+0x4ce>
 800caa8:	2500      	movs	r5, #0
 800caaa:	462e      	mov	r6, r5
 800caac:	9507      	str	r5, [sp, #28]
 800caae:	9505      	str	r5, [sp, #20]
 800cab0:	2322      	movs	r3, #34	; 0x22
 800cab2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cbcc <_strtod_l+0x5ac>
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	f04f 0a00 	mov.w	sl, #0
 800cabc:	9b07      	ldr	r3, [sp, #28]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f43f adf2 	beq.w	800c6a8 <_strtod_l+0x88>
 800cac4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cac6:	4620      	mov	r0, r4
 800cac8:	f001 fec6 	bl	800e858 <_Bfree>
 800cacc:	9905      	ldr	r1, [sp, #20]
 800cace:	4620      	mov	r0, r4
 800cad0:	f001 fec2 	bl	800e858 <_Bfree>
 800cad4:	4631      	mov	r1, r6
 800cad6:	4620      	mov	r0, r4
 800cad8:	f001 febe 	bl	800e858 <_Bfree>
 800cadc:	9907      	ldr	r1, [sp, #28]
 800cade:	4620      	mov	r0, r4
 800cae0:	f001 feba 	bl	800e858 <_Bfree>
 800cae4:	4629      	mov	r1, r5
 800cae6:	4620      	mov	r0, r4
 800cae8:	f001 feb6 	bl	800e858 <_Bfree>
 800caec:	e5dc      	b.n	800c6a8 <_strtod_l+0x88>
 800caee:	4b36      	ldr	r3, [pc, #216]	; (800cbc8 <_strtod_l+0x5a8>)
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	2300      	movs	r3, #0
 800caf4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800caf8:	4650      	mov	r0, sl
 800cafa:	4659      	mov	r1, fp
 800cafc:	4699      	mov	r9, r3
 800cafe:	f1b8 0f01 	cmp.w	r8, #1
 800cb02:	dc21      	bgt.n	800cb48 <_strtod_l+0x528>
 800cb04:	b10b      	cbz	r3, 800cb0a <_strtod_l+0x4ea>
 800cb06:	4682      	mov	sl, r0
 800cb08:	468b      	mov	fp, r1
 800cb0a:	4b2f      	ldr	r3, [pc, #188]	; (800cbc8 <_strtod_l+0x5a8>)
 800cb0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cb10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cb14:	4652      	mov	r2, sl
 800cb16:	465b      	mov	r3, fp
 800cb18:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cb1c:	f7f3 fd9c 	bl	8000658 <__aeabi_dmul>
 800cb20:	4b2a      	ldr	r3, [pc, #168]	; (800cbcc <_strtod_l+0x5ac>)
 800cb22:	460a      	mov	r2, r1
 800cb24:	400b      	ands	r3, r1
 800cb26:	492a      	ldr	r1, [pc, #168]	; (800cbd0 <_strtod_l+0x5b0>)
 800cb28:	428b      	cmp	r3, r1
 800cb2a:	4682      	mov	sl, r0
 800cb2c:	d8bc      	bhi.n	800caa8 <_strtod_l+0x488>
 800cb2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb32:	428b      	cmp	r3, r1
 800cb34:	bf86      	itte	hi
 800cb36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cbd4 <_strtod_l+0x5b4>
 800cb3a:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cb42:	2300      	movs	r3, #0
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	e084      	b.n	800cc52 <_strtod_l+0x632>
 800cb48:	f018 0f01 	tst.w	r8, #1
 800cb4c:	d005      	beq.n	800cb5a <_strtod_l+0x53a>
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 fd80 	bl	8000658 <__aeabi_dmul>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	9a04      	ldr	r2, [sp, #16]
 800cb5c:	3208      	adds	r2, #8
 800cb5e:	f109 0901 	add.w	r9, r9, #1
 800cb62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb66:	9204      	str	r2, [sp, #16]
 800cb68:	e7c9      	b.n	800cafe <_strtod_l+0x4de>
 800cb6a:	d0ea      	beq.n	800cb42 <_strtod_l+0x522>
 800cb6c:	f1c8 0800 	rsb	r8, r8, #0
 800cb70:	f018 020f 	ands.w	r2, r8, #15
 800cb74:	d00a      	beq.n	800cb8c <_strtod_l+0x56c>
 800cb76:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <_strtod_l+0x5a4>)
 800cb78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb7c:	4650      	mov	r0, sl
 800cb7e:	4659      	mov	r1, fp
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fe92 	bl	80008ac <__aeabi_ddiv>
 800cb88:	4682      	mov	sl, r0
 800cb8a:	468b      	mov	fp, r1
 800cb8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cb90:	d0d7      	beq.n	800cb42 <_strtod_l+0x522>
 800cb92:	f1b8 0f1f 	cmp.w	r8, #31
 800cb96:	dd1f      	ble.n	800cbd8 <_strtod_l+0x5b8>
 800cb98:	2500      	movs	r5, #0
 800cb9a:	462e      	mov	r6, r5
 800cb9c:	9507      	str	r5, [sp, #28]
 800cb9e:	9505      	str	r5, [sp, #20]
 800cba0:	2322      	movs	r3, #34	; 0x22
 800cba2:	f04f 0a00 	mov.w	sl, #0
 800cba6:	f04f 0b00 	mov.w	fp, #0
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	e786      	b.n	800cabc <_strtod_l+0x49c>
 800cbae:	bf00      	nop
 800cbb0:	08012759 	.word	0x08012759
 800cbb4:	08012798 	.word	0x08012798
 800cbb8:	08012751 	.word	0x08012751
 800cbbc:	080128dc 	.word	0x080128dc
 800cbc0:	08012ba3 	.word	0x08012ba3
 800cbc4:	08012a68 	.word	0x08012a68
 800cbc8:	08012a40 	.word	0x08012a40
 800cbcc:	7ff00000 	.word	0x7ff00000
 800cbd0:	7ca00000 	.word	0x7ca00000
 800cbd4:	7fefffff 	.word	0x7fefffff
 800cbd8:	f018 0310 	ands.w	r3, r8, #16
 800cbdc:	bf18      	it	ne
 800cbde:	236a      	movne	r3, #106	; 0x6a
 800cbe0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cf90 <_strtod_l+0x970>
 800cbe4:	9304      	str	r3, [sp, #16]
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	4659      	mov	r1, fp
 800cbea:	2300      	movs	r3, #0
 800cbec:	f018 0f01 	tst.w	r8, #1
 800cbf0:	d004      	beq.n	800cbfc <_strtod_l+0x5dc>
 800cbf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cbf6:	f7f3 fd2f 	bl	8000658 <__aeabi_dmul>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cc00:	f109 0908 	add.w	r9, r9, #8
 800cc04:	d1f2      	bne.n	800cbec <_strtod_l+0x5cc>
 800cc06:	b10b      	cbz	r3, 800cc0c <_strtod_l+0x5ec>
 800cc08:	4682      	mov	sl, r0
 800cc0a:	468b      	mov	fp, r1
 800cc0c:	9b04      	ldr	r3, [sp, #16]
 800cc0e:	b1c3      	cbz	r3, 800cc42 <_strtod_l+0x622>
 800cc10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	4659      	mov	r1, fp
 800cc1c:	dd11      	ble.n	800cc42 <_strtod_l+0x622>
 800cc1e:	2b1f      	cmp	r3, #31
 800cc20:	f340 8124 	ble.w	800ce6c <_strtod_l+0x84c>
 800cc24:	2b34      	cmp	r3, #52	; 0x34
 800cc26:	bfde      	ittt	le
 800cc28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc2c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc30:	fa03 f202 	lslle.w	r2, r3, r2
 800cc34:	f04f 0a00 	mov.w	sl, #0
 800cc38:	bfcc      	ite	gt
 800cc3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cc3e:	ea02 0b01 	andle.w	fp, r2, r1
 800cc42:	2200      	movs	r2, #0
 800cc44:	2300      	movs	r3, #0
 800cc46:	4650      	mov	r0, sl
 800cc48:	4659      	mov	r1, fp
 800cc4a:	f7f3 ff6d 	bl	8000b28 <__aeabi_dcmpeq>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d1a2      	bne.n	800cb98 <_strtod_l+0x578>
 800cc52:	9b07      	ldr	r3, [sp, #28]
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	9908      	ldr	r1, [sp, #32]
 800cc58:	462b      	mov	r3, r5
 800cc5a:	463a      	mov	r2, r7
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f001 fe63 	bl	800e928 <__s2b>
 800cc62:	9007      	str	r0, [sp, #28]
 800cc64:	2800      	cmp	r0, #0
 800cc66:	f43f af1f 	beq.w	800caa8 <_strtod_l+0x488>
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	1b9e      	subs	r6, r3, r6
 800cc6e:	9b06      	ldr	r3, [sp, #24]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	bfb4      	ite	lt
 800cc74:	4633      	movlt	r3, r6
 800cc76:	2300      	movge	r3, #0
 800cc78:	930c      	str	r3, [sp, #48]	; 0x30
 800cc7a:	9b06      	ldr	r3, [sp, #24]
 800cc7c:	2500      	movs	r5, #0
 800cc7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc82:	9312      	str	r3, [sp, #72]	; 0x48
 800cc84:	462e      	mov	r6, r5
 800cc86:	9b07      	ldr	r3, [sp, #28]
 800cc88:	4620      	mov	r0, r4
 800cc8a:	6859      	ldr	r1, [r3, #4]
 800cc8c:	f001 fda4 	bl	800e7d8 <_Balloc>
 800cc90:	9005      	str	r0, [sp, #20]
 800cc92:	2800      	cmp	r0, #0
 800cc94:	f43f af0c 	beq.w	800cab0 <_strtod_l+0x490>
 800cc98:	9b07      	ldr	r3, [sp, #28]
 800cc9a:	691a      	ldr	r2, [r3, #16]
 800cc9c:	3202      	adds	r2, #2
 800cc9e:	f103 010c 	add.w	r1, r3, #12
 800cca2:	0092      	lsls	r2, r2, #2
 800cca4:	300c      	adds	r0, #12
 800cca6:	f001 fd89 	bl	800e7bc <memcpy>
 800ccaa:	ec4b ab10 	vmov	d0, sl, fp
 800ccae:	aa1a      	add	r2, sp, #104	; 0x68
 800ccb0:	a919      	add	r1, sp, #100	; 0x64
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f002 f97e 	bl	800efb4 <__d2b>
 800ccb8:	ec4b ab18 	vmov	d8, sl, fp
 800ccbc:	9018      	str	r0, [sp, #96]	; 0x60
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	f43f aef6 	beq.w	800cab0 <_strtod_l+0x490>
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f001 fec8 	bl	800ea5c <__i2b>
 800cccc:	4606      	mov	r6, r0
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f43f aeee 	beq.w	800cab0 <_strtod_l+0x490>
 800ccd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccd6:	9904      	ldr	r1, [sp, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	bfab      	itete	ge
 800ccdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ccde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cce0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cce2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cce6:	bfac      	ite	ge
 800cce8:	eb03 0902 	addge.w	r9, r3, r2
 800ccec:	1ad7      	sublt	r7, r2, r3
 800ccee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ccf0:	eba3 0801 	sub.w	r8, r3, r1
 800ccf4:	4490      	add	r8, r2
 800ccf6:	4ba1      	ldr	r3, [pc, #644]	; (800cf7c <_strtod_l+0x95c>)
 800ccf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccfc:	4598      	cmp	r8, r3
 800ccfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cd02:	f280 80c7 	bge.w	800ce94 <_strtod_l+0x874>
 800cd06:	eba3 0308 	sub.w	r3, r3, r8
 800cd0a:	2b1f      	cmp	r3, #31
 800cd0c:	eba2 0203 	sub.w	r2, r2, r3
 800cd10:	f04f 0101 	mov.w	r1, #1
 800cd14:	f300 80b1 	bgt.w	800ce7a <_strtod_l+0x85a>
 800cd18:	fa01 f303 	lsl.w	r3, r1, r3
 800cd1c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9308      	str	r3, [sp, #32]
 800cd22:	eb09 0802 	add.w	r8, r9, r2
 800cd26:	9b04      	ldr	r3, [sp, #16]
 800cd28:	45c1      	cmp	r9, r8
 800cd2a:	4417      	add	r7, r2
 800cd2c:	441f      	add	r7, r3
 800cd2e:	464b      	mov	r3, r9
 800cd30:	bfa8      	it	ge
 800cd32:	4643      	movge	r3, r8
 800cd34:	42bb      	cmp	r3, r7
 800cd36:	bfa8      	it	ge
 800cd38:	463b      	movge	r3, r7
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	bfc2      	ittt	gt
 800cd3e:	eba8 0803 	subgt.w	r8, r8, r3
 800cd42:	1aff      	subgt	r7, r7, r3
 800cd44:	eba9 0903 	subgt.w	r9, r9, r3
 800cd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	dd17      	ble.n	800cd7e <_strtod_l+0x75e>
 800cd4e:	4631      	mov	r1, r6
 800cd50:	461a      	mov	r2, r3
 800cd52:	4620      	mov	r0, r4
 800cd54:	f001 ff42 	bl	800ebdc <__pow5mult>
 800cd58:	4606      	mov	r6, r0
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	f43f aea8 	beq.w	800cab0 <_strtod_l+0x490>
 800cd60:	4601      	mov	r1, r0
 800cd62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd64:	4620      	mov	r0, r4
 800cd66:	f001 fe8f 	bl	800ea88 <__multiply>
 800cd6a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f43f ae9f 	beq.w	800cab0 <_strtod_l+0x490>
 800cd72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd74:	4620      	mov	r0, r4
 800cd76:	f001 fd6f 	bl	800e858 <_Bfree>
 800cd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd7c:	9318      	str	r3, [sp, #96]	; 0x60
 800cd7e:	f1b8 0f00 	cmp.w	r8, #0
 800cd82:	f300 808c 	bgt.w	800ce9e <_strtod_l+0x87e>
 800cd86:	9b06      	ldr	r3, [sp, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	dd08      	ble.n	800cd9e <_strtod_l+0x77e>
 800cd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd8e:	9905      	ldr	r1, [sp, #20]
 800cd90:	4620      	mov	r0, r4
 800cd92:	f001 ff23 	bl	800ebdc <__pow5mult>
 800cd96:	9005      	str	r0, [sp, #20]
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	f43f ae89 	beq.w	800cab0 <_strtod_l+0x490>
 800cd9e:	2f00      	cmp	r7, #0
 800cda0:	dd08      	ble.n	800cdb4 <_strtod_l+0x794>
 800cda2:	9905      	ldr	r1, [sp, #20]
 800cda4:	463a      	mov	r2, r7
 800cda6:	4620      	mov	r0, r4
 800cda8:	f001 ff72 	bl	800ec90 <__lshift>
 800cdac:	9005      	str	r0, [sp, #20]
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f43f ae7e 	beq.w	800cab0 <_strtod_l+0x490>
 800cdb4:	f1b9 0f00 	cmp.w	r9, #0
 800cdb8:	dd08      	ble.n	800cdcc <_strtod_l+0x7ac>
 800cdba:	4631      	mov	r1, r6
 800cdbc:	464a      	mov	r2, r9
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f001 ff66 	bl	800ec90 <__lshift>
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	f43f ae72 	beq.w	800cab0 <_strtod_l+0x490>
 800cdcc:	9a05      	ldr	r2, [sp, #20]
 800cdce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f001 ffe9 	bl	800eda8 <__mdiff>
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	f43f ae69 	beq.w	800cab0 <_strtod_l+0x490>
 800cdde:	68c3      	ldr	r3, [r0, #12]
 800cde0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cde2:	2300      	movs	r3, #0
 800cde4:	60c3      	str	r3, [r0, #12]
 800cde6:	4631      	mov	r1, r6
 800cde8:	f001 ffc2 	bl	800ed70 <__mcmp>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	da60      	bge.n	800ceb2 <_strtod_l+0x892>
 800cdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdf2:	ea53 030a 	orrs.w	r3, r3, sl
 800cdf6:	f040 8082 	bne.w	800cefe <_strtod_l+0x8de>
 800cdfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d17d      	bne.n	800cefe <_strtod_l+0x8de>
 800ce02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce06:	0d1b      	lsrs	r3, r3, #20
 800ce08:	051b      	lsls	r3, r3, #20
 800ce0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce0e:	d976      	bls.n	800cefe <_strtod_l+0x8de>
 800ce10:	696b      	ldr	r3, [r5, #20]
 800ce12:	b913      	cbnz	r3, 800ce1a <_strtod_l+0x7fa>
 800ce14:	692b      	ldr	r3, [r5, #16]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	dd71      	ble.n	800cefe <_strtod_l+0x8de>
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f001 ff36 	bl	800ec90 <__lshift>
 800ce24:	4631      	mov	r1, r6
 800ce26:	4605      	mov	r5, r0
 800ce28:	f001 ffa2 	bl	800ed70 <__mcmp>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	dd66      	ble.n	800cefe <_strtod_l+0x8de>
 800ce30:	9904      	ldr	r1, [sp, #16]
 800ce32:	4a53      	ldr	r2, [pc, #332]	; (800cf80 <_strtod_l+0x960>)
 800ce34:	465b      	mov	r3, fp
 800ce36:	2900      	cmp	r1, #0
 800ce38:	f000 8081 	beq.w	800cf3e <_strtod_l+0x91e>
 800ce3c:	ea02 010b 	and.w	r1, r2, fp
 800ce40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce44:	dc7b      	bgt.n	800cf3e <_strtod_l+0x91e>
 800ce46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce4a:	f77f aea9 	ble.w	800cba0 <_strtod_l+0x580>
 800ce4e:	4b4d      	ldr	r3, [pc, #308]	; (800cf84 <_strtod_l+0x964>)
 800ce50:	4650      	mov	r0, sl
 800ce52:	4659      	mov	r1, fp
 800ce54:	2200      	movs	r2, #0
 800ce56:	f7f3 fbff 	bl	8000658 <__aeabi_dmul>
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4303      	orrs	r3, r0
 800ce5e:	bf08      	it	eq
 800ce60:	2322      	moveq	r3, #34	; 0x22
 800ce62:	4682      	mov	sl, r0
 800ce64:	468b      	mov	fp, r1
 800ce66:	bf08      	it	eq
 800ce68:	6023      	streq	r3, [r4, #0]
 800ce6a:	e62b      	b.n	800cac4 <_strtod_l+0x4a4>
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce70:	fa02 f303 	lsl.w	r3, r2, r3
 800ce74:	ea03 0a0a 	and.w	sl, r3, sl
 800ce78:	e6e3      	b.n	800cc42 <_strtod_l+0x622>
 800ce7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ce7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ce82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ce86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ce8a:	fa01 f308 	lsl.w	r3, r1, r8
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	910d      	str	r1, [sp, #52]	; 0x34
 800ce92:	e746      	b.n	800cd22 <_strtod_l+0x702>
 800ce94:	2300      	movs	r3, #0
 800ce96:	9308      	str	r3, [sp, #32]
 800ce98:	2301      	movs	r3, #1
 800ce9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce9c:	e741      	b.n	800cd22 <_strtod_l+0x702>
 800ce9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cea0:	4642      	mov	r2, r8
 800cea2:	4620      	mov	r0, r4
 800cea4:	f001 fef4 	bl	800ec90 <__lshift>
 800cea8:	9018      	str	r0, [sp, #96]	; 0x60
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	f47f af6b 	bne.w	800cd86 <_strtod_l+0x766>
 800ceb0:	e5fe      	b.n	800cab0 <_strtod_l+0x490>
 800ceb2:	465f      	mov	r7, fp
 800ceb4:	d16e      	bne.n	800cf94 <_strtod_l+0x974>
 800ceb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ceb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cebc:	b342      	cbz	r2, 800cf10 <_strtod_l+0x8f0>
 800cebe:	4a32      	ldr	r2, [pc, #200]	; (800cf88 <_strtod_l+0x968>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d128      	bne.n	800cf16 <_strtod_l+0x8f6>
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	4651      	mov	r1, sl
 800cec8:	b1eb      	cbz	r3, 800cf06 <_strtod_l+0x8e6>
 800ceca:	4b2d      	ldr	r3, [pc, #180]	; (800cf80 <_strtod_l+0x960>)
 800cecc:	403b      	ands	r3, r7
 800cece:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ced2:	f04f 32ff 	mov.w	r2, #4294967295
 800ced6:	d819      	bhi.n	800cf0c <_strtod_l+0x8ec>
 800ced8:	0d1b      	lsrs	r3, r3, #20
 800ceda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cede:	fa02 f303 	lsl.w	r3, r2, r3
 800cee2:	4299      	cmp	r1, r3
 800cee4:	d117      	bne.n	800cf16 <_strtod_l+0x8f6>
 800cee6:	4b29      	ldr	r3, [pc, #164]	; (800cf8c <_strtod_l+0x96c>)
 800cee8:	429f      	cmp	r7, r3
 800ceea:	d102      	bne.n	800cef2 <_strtod_l+0x8d2>
 800ceec:	3101      	adds	r1, #1
 800ceee:	f43f addf 	beq.w	800cab0 <_strtod_l+0x490>
 800cef2:	4b23      	ldr	r3, [pc, #140]	; (800cf80 <_strtod_l+0x960>)
 800cef4:	403b      	ands	r3, r7
 800cef6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cefa:	f04f 0a00 	mov.w	sl, #0
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1a4      	bne.n	800ce4e <_strtod_l+0x82e>
 800cf04:	e5de      	b.n	800cac4 <_strtod_l+0x4a4>
 800cf06:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0a:	e7ea      	b.n	800cee2 <_strtod_l+0x8c2>
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	e7e8      	b.n	800cee2 <_strtod_l+0x8c2>
 800cf10:	ea53 030a 	orrs.w	r3, r3, sl
 800cf14:	d08c      	beq.n	800ce30 <_strtod_l+0x810>
 800cf16:	9b08      	ldr	r3, [sp, #32]
 800cf18:	b1db      	cbz	r3, 800cf52 <_strtod_l+0x932>
 800cf1a:	423b      	tst	r3, r7
 800cf1c:	d0ef      	beq.n	800cefe <_strtod_l+0x8de>
 800cf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf20:	9a04      	ldr	r2, [sp, #16]
 800cf22:	4650      	mov	r0, sl
 800cf24:	4659      	mov	r1, fp
 800cf26:	b1c3      	cbz	r3, 800cf5a <_strtod_l+0x93a>
 800cf28:	f7ff fb5d 	bl	800c5e6 <sulp>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	ec51 0b18 	vmov	r0, r1, d8
 800cf34:	f7f3 f9da 	bl	80002ec <__adddf3>
 800cf38:	4682      	mov	sl, r0
 800cf3a:	468b      	mov	fp, r1
 800cf3c:	e7df      	b.n	800cefe <_strtod_l+0x8de>
 800cf3e:	4013      	ands	r3, r2
 800cf40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf4c:	f04f 3aff 	mov.w	sl, #4294967295
 800cf50:	e7d5      	b.n	800cefe <_strtod_l+0x8de>
 800cf52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf54:	ea13 0f0a 	tst.w	r3, sl
 800cf58:	e7e0      	b.n	800cf1c <_strtod_l+0x8fc>
 800cf5a:	f7ff fb44 	bl	800c5e6 <sulp>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	ec51 0b18 	vmov	r0, r1, d8
 800cf66:	f7f3 f9bf 	bl	80002e8 <__aeabi_dsub>
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	4682      	mov	sl, r0
 800cf70:	468b      	mov	fp, r1
 800cf72:	f7f3 fdd9 	bl	8000b28 <__aeabi_dcmpeq>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d0c1      	beq.n	800cefe <_strtod_l+0x8de>
 800cf7a:	e611      	b.n	800cba0 <_strtod_l+0x580>
 800cf7c:	fffffc02 	.word	0xfffffc02
 800cf80:	7ff00000 	.word	0x7ff00000
 800cf84:	39500000 	.word	0x39500000
 800cf88:	000fffff 	.word	0x000fffff
 800cf8c:	7fefffff 	.word	0x7fefffff
 800cf90:	080127b0 	.word	0x080127b0
 800cf94:	4631      	mov	r1, r6
 800cf96:	4628      	mov	r0, r5
 800cf98:	f002 f868 	bl	800f06c <__ratio>
 800cf9c:	ec59 8b10 	vmov	r8, r9, d0
 800cfa0:	ee10 0a10 	vmov	r0, s0
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfaa:	4649      	mov	r1, r9
 800cfac:	f7f3 fdd0 	bl	8000b50 <__aeabi_dcmple>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d07a      	beq.n	800d0aa <_strtod_l+0xa8a>
 800cfb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d04a      	beq.n	800d050 <_strtod_l+0xa30>
 800cfba:	4b95      	ldr	r3, [pc, #596]	; (800d210 <_strtod_l+0xbf0>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d210 <_strtod_l+0xbf0>
 800cfc6:	f04f 0800 	mov.w	r8, #0
 800cfca:	4b92      	ldr	r3, [pc, #584]	; (800d214 <_strtod_l+0xbf4>)
 800cfcc:	403b      	ands	r3, r7
 800cfce:	930d      	str	r3, [sp, #52]	; 0x34
 800cfd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfd2:	4b91      	ldr	r3, [pc, #580]	; (800d218 <_strtod_l+0xbf8>)
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	f040 80b0 	bne.w	800d13a <_strtod_l+0xb1a>
 800cfda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cfe2:	ec4b ab10 	vmov	d0, sl, fp
 800cfe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfea:	f001 ff67 	bl	800eebc <__ulp>
 800cfee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cff2:	ec53 2b10 	vmov	r2, r3, d0
 800cff6:	f7f3 fb2f 	bl	8000658 <__aeabi_dmul>
 800cffa:	4652      	mov	r2, sl
 800cffc:	465b      	mov	r3, fp
 800cffe:	f7f3 f975 	bl	80002ec <__adddf3>
 800d002:	460b      	mov	r3, r1
 800d004:	4983      	ldr	r1, [pc, #524]	; (800d214 <_strtod_l+0xbf4>)
 800d006:	4a85      	ldr	r2, [pc, #532]	; (800d21c <_strtod_l+0xbfc>)
 800d008:	4019      	ands	r1, r3
 800d00a:	4291      	cmp	r1, r2
 800d00c:	4682      	mov	sl, r0
 800d00e:	d960      	bls.n	800d0d2 <_strtod_l+0xab2>
 800d010:	ee18 3a90 	vmov	r3, s17
 800d014:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d018:	4293      	cmp	r3, r2
 800d01a:	d104      	bne.n	800d026 <_strtod_l+0xa06>
 800d01c:	ee18 3a10 	vmov	r3, s16
 800d020:	3301      	adds	r3, #1
 800d022:	f43f ad45 	beq.w	800cab0 <_strtod_l+0x490>
 800d026:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d228 <_strtod_l+0xc08>
 800d02a:	f04f 3aff 	mov.w	sl, #4294967295
 800d02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d030:	4620      	mov	r0, r4
 800d032:	f001 fc11 	bl	800e858 <_Bfree>
 800d036:	9905      	ldr	r1, [sp, #20]
 800d038:	4620      	mov	r0, r4
 800d03a:	f001 fc0d 	bl	800e858 <_Bfree>
 800d03e:	4631      	mov	r1, r6
 800d040:	4620      	mov	r0, r4
 800d042:	f001 fc09 	bl	800e858 <_Bfree>
 800d046:	4629      	mov	r1, r5
 800d048:	4620      	mov	r0, r4
 800d04a:	f001 fc05 	bl	800e858 <_Bfree>
 800d04e:	e61a      	b.n	800cc86 <_strtod_l+0x666>
 800d050:	f1ba 0f00 	cmp.w	sl, #0
 800d054:	d11b      	bne.n	800d08e <_strtod_l+0xa6e>
 800d056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d05a:	b9f3      	cbnz	r3, 800d09a <_strtod_l+0xa7a>
 800d05c:	4b6c      	ldr	r3, [pc, #432]	; (800d210 <_strtod_l+0xbf0>)
 800d05e:	2200      	movs	r2, #0
 800d060:	4640      	mov	r0, r8
 800d062:	4649      	mov	r1, r9
 800d064:	f7f3 fd6a 	bl	8000b3c <__aeabi_dcmplt>
 800d068:	b9d0      	cbnz	r0, 800d0a0 <_strtod_l+0xa80>
 800d06a:	4640      	mov	r0, r8
 800d06c:	4649      	mov	r1, r9
 800d06e:	4b6c      	ldr	r3, [pc, #432]	; (800d220 <_strtod_l+0xc00>)
 800d070:	2200      	movs	r2, #0
 800d072:	f7f3 faf1 	bl	8000658 <__aeabi_dmul>
 800d076:	4680      	mov	r8, r0
 800d078:	4689      	mov	r9, r1
 800d07a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d07e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d082:	9315      	str	r3, [sp, #84]	; 0x54
 800d084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d088:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d08c:	e79d      	b.n	800cfca <_strtod_l+0x9aa>
 800d08e:	f1ba 0f01 	cmp.w	sl, #1
 800d092:	d102      	bne.n	800d09a <_strtod_l+0xa7a>
 800d094:	2f00      	cmp	r7, #0
 800d096:	f43f ad83 	beq.w	800cba0 <_strtod_l+0x580>
 800d09a:	4b62      	ldr	r3, [pc, #392]	; (800d224 <_strtod_l+0xc04>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	e78e      	b.n	800cfbe <_strtod_l+0x99e>
 800d0a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d220 <_strtod_l+0xc00>
 800d0a4:	f04f 0800 	mov.w	r8, #0
 800d0a8:	e7e7      	b.n	800d07a <_strtod_l+0xa5a>
 800d0aa:	4b5d      	ldr	r3, [pc, #372]	; (800d220 <_strtod_l+0xc00>)
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f7f3 fad1 	bl	8000658 <__aeabi_dmul>
 800d0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0b8:	4680      	mov	r8, r0
 800d0ba:	4689      	mov	r9, r1
 800d0bc:	b933      	cbnz	r3, 800d0cc <_strtod_l+0xaac>
 800d0be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0c2:	900e      	str	r0, [sp, #56]	; 0x38
 800d0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0ca:	e7dd      	b.n	800d088 <_strtod_l+0xa68>
 800d0cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d0d0:	e7f9      	b.n	800d0c6 <_strtod_l+0xaa6>
 800d0d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1a8      	bne.n	800d02e <_strtod_l+0xa0e>
 800d0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d0e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0e2:	0d1b      	lsrs	r3, r3, #20
 800d0e4:	051b      	lsls	r3, r3, #20
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d1a1      	bne.n	800d02e <_strtod_l+0xa0e>
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	f7f3 ff71 	bl	8000fd4 <__aeabi_d2lz>
 800d0f2:	f7f3 fa83 	bl	80005fc <__aeabi_l2d>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	4640      	mov	r0, r8
 800d0fc:	4649      	mov	r1, r9
 800d0fe:	f7f3 f8f3 	bl	80002e8 <__aeabi_dsub>
 800d102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d108:	ea43 030a 	orr.w	r3, r3, sl
 800d10c:	4313      	orrs	r3, r2
 800d10e:	4680      	mov	r8, r0
 800d110:	4689      	mov	r9, r1
 800d112:	d055      	beq.n	800d1c0 <_strtod_l+0xba0>
 800d114:	a336      	add	r3, pc, #216	; (adr r3, 800d1f0 <_strtod_l+0xbd0>)
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f7f3 fd0f 	bl	8000b3c <__aeabi_dcmplt>
 800d11e:	2800      	cmp	r0, #0
 800d120:	f47f acd0 	bne.w	800cac4 <_strtod_l+0x4a4>
 800d124:	a334      	add	r3, pc, #208	; (adr r3, 800d1f8 <_strtod_l+0xbd8>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	4640      	mov	r0, r8
 800d12c:	4649      	mov	r1, r9
 800d12e:	f7f3 fd23 	bl	8000b78 <__aeabi_dcmpgt>
 800d132:	2800      	cmp	r0, #0
 800d134:	f43f af7b 	beq.w	800d02e <_strtod_l+0xa0e>
 800d138:	e4c4      	b.n	800cac4 <_strtod_l+0x4a4>
 800d13a:	9b04      	ldr	r3, [sp, #16]
 800d13c:	b333      	cbz	r3, 800d18c <_strtod_l+0xb6c>
 800d13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d140:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d144:	d822      	bhi.n	800d18c <_strtod_l+0xb6c>
 800d146:	a32e      	add	r3, pc, #184	; (adr r3, 800d200 <_strtod_l+0xbe0>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	4640      	mov	r0, r8
 800d14e:	4649      	mov	r1, r9
 800d150:	f7f3 fcfe 	bl	8000b50 <__aeabi_dcmple>
 800d154:	b1a0      	cbz	r0, 800d180 <_strtod_l+0xb60>
 800d156:	4649      	mov	r1, r9
 800d158:	4640      	mov	r0, r8
 800d15a:	f7f3 fd55 	bl	8000c08 <__aeabi_d2uiz>
 800d15e:	2801      	cmp	r0, #1
 800d160:	bf38      	it	cc
 800d162:	2001      	movcc	r0, #1
 800d164:	f7f3 f9fe 	bl	8000564 <__aeabi_ui2d>
 800d168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d16a:	4680      	mov	r8, r0
 800d16c:	4689      	mov	r9, r1
 800d16e:	bb23      	cbnz	r3, 800d1ba <_strtod_l+0xb9a>
 800d170:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d174:	9010      	str	r0, [sp, #64]	; 0x40
 800d176:	9311      	str	r3, [sp, #68]	; 0x44
 800d178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d17c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d184:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d188:	1a9b      	subs	r3, r3, r2
 800d18a:	9309      	str	r3, [sp, #36]	; 0x24
 800d18c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d190:	eeb0 0a48 	vmov.f32	s0, s16
 800d194:	eef0 0a68 	vmov.f32	s1, s17
 800d198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d19c:	f001 fe8e 	bl	800eebc <__ulp>
 800d1a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1a4:	ec53 2b10 	vmov	r2, r3, d0
 800d1a8:	f7f3 fa56 	bl	8000658 <__aeabi_dmul>
 800d1ac:	ec53 2b18 	vmov	r2, r3, d8
 800d1b0:	f7f3 f89c 	bl	80002ec <__adddf3>
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	468b      	mov	fp, r1
 800d1b8:	e78d      	b.n	800d0d6 <_strtod_l+0xab6>
 800d1ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d1be:	e7db      	b.n	800d178 <_strtod_l+0xb58>
 800d1c0:	a311      	add	r3, pc, #68	; (adr r3, 800d208 <_strtod_l+0xbe8>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	f7f3 fcb9 	bl	8000b3c <__aeabi_dcmplt>
 800d1ca:	e7b2      	b.n	800d132 <_strtod_l+0xb12>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d1d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	f7ff ba6b 	b.w	800c6b0 <_strtod_l+0x90>
 800d1da:	2a65      	cmp	r2, #101	; 0x65
 800d1dc:	f43f ab5f 	beq.w	800c89e <_strtod_l+0x27e>
 800d1e0:	2a45      	cmp	r2, #69	; 0x45
 800d1e2:	f43f ab5c 	beq.w	800c89e <_strtod_l+0x27e>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f7ff bb94 	b.w	800c914 <_strtod_l+0x2f4>
 800d1ec:	f3af 8000 	nop.w
 800d1f0:	94a03595 	.word	0x94a03595
 800d1f4:	3fdfffff 	.word	0x3fdfffff
 800d1f8:	35afe535 	.word	0x35afe535
 800d1fc:	3fe00000 	.word	0x3fe00000
 800d200:	ffc00000 	.word	0xffc00000
 800d204:	41dfffff 	.word	0x41dfffff
 800d208:	94a03595 	.word	0x94a03595
 800d20c:	3fcfffff 	.word	0x3fcfffff
 800d210:	3ff00000 	.word	0x3ff00000
 800d214:	7ff00000 	.word	0x7ff00000
 800d218:	7fe00000 	.word	0x7fe00000
 800d21c:	7c9fffff 	.word	0x7c9fffff
 800d220:	3fe00000 	.word	0x3fe00000
 800d224:	bff00000 	.word	0xbff00000
 800d228:	7fefffff 	.word	0x7fefffff

0800d22c <_strtod_r>:
 800d22c:	4b01      	ldr	r3, [pc, #4]	; (800d234 <_strtod_r+0x8>)
 800d22e:	f7ff b9f7 	b.w	800c620 <_strtod_l>
 800d232:	bf00      	nop
 800d234:	2000007c 	.word	0x2000007c

0800d238 <_strtol_l.constprop.0>:
 800d238:	2b01      	cmp	r3, #1
 800d23a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d23e:	d001      	beq.n	800d244 <_strtol_l.constprop.0+0xc>
 800d240:	2b24      	cmp	r3, #36	; 0x24
 800d242:	d906      	bls.n	800d252 <_strtol_l.constprop.0+0x1a>
 800d244:	f7fe fa6e 	bl	800b724 <__errno>
 800d248:	2316      	movs	r3, #22
 800d24a:	6003      	str	r3, [r0, #0]
 800d24c:	2000      	movs	r0, #0
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d338 <_strtol_l.constprop.0+0x100>
 800d256:	460d      	mov	r5, r1
 800d258:	462e      	mov	r6, r5
 800d25a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d25e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d262:	f017 0708 	ands.w	r7, r7, #8
 800d266:	d1f7      	bne.n	800d258 <_strtol_l.constprop.0+0x20>
 800d268:	2c2d      	cmp	r4, #45	; 0x2d
 800d26a:	d132      	bne.n	800d2d2 <_strtol_l.constprop.0+0x9a>
 800d26c:	782c      	ldrb	r4, [r5, #0]
 800d26e:	2701      	movs	r7, #1
 800d270:	1cb5      	adds	r5, r6, #2
 800d272:	2b00      	cmp	r3, #0
 800d274:	d05b      	beq.n	800d32e <_strtol_l.constprop.0+0xf6>
 800d276:	2b10      	cmp	r3, #16
 800d278:	d109      	bne.n	800d28e <_strtol_l.constprop.0+0x56>
 800d27a:	2c30      	cmp	r4, #48	; 0x30
 800d27c:	d107      	bne.n	800d28e <_strtol_l.constprop.0+0x56>
 800d27e:	782c      	ldrb	r4, [r5, #0]
 800d280:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d284:	2c58      	cmp	r4, #88	; 0x58
 800d286:	d14d      	bne.n	800d324 <_strtol_l.constprop.0+0xec>
 800d288:	786c      	ldrb	r4, [r5, #1]
 800d28a:	2310      	movs	r3, #16
 800d28c:	3502      	adds	r5, #2
 800d28e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d292:	f108 38ff 	add.w	r8, r8, #4294967295
 800d296:	f04f 0c00 	mov.w	ip, #0
 800d29a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d29e:	4666      	mov	r6, ip
 800d2a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800d2a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d2a8:	f1be 0f09 	cmp.w	lr, #9
 800d2ac:	d816      	bhi.n	800d2dc <_strtol_l.constprop.0+0xa4>
 800d2ae:	4674      	mov	r4, lr
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	dd24      	ble.n	800d2fe <_strtol_l.constprop.0+0xc6>
 800d2b4:	f1bc 0f00 	cmp.w	ip, #0
 800d2b8:	db1e      	blt.n	800d2f8 <_strtol_l.constprop.0+0xc0>
 800d2ba:	45b1      	cmp	r9, r6
 800d2bc:	d31c      	bcc.n	800d2f8 <_strtol_l.constprop.0+0xc0>
 800d2be:	d101      	bne.n	800d2c4 <_strtol_l.constprop.0+0x8c>
 800d2c0:	45a2      	cmp	sl, r4
 800d2c2:	db19      	blt.n	800d2f8 <_strtol_l.constprop.0+0xc0>
 800d2c4:	fb06 4603 	mla	r6, r6, r3, r4
 800d2c8:	f04f 0c01 	mov.w	ip, #1
 800d2cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2d0:	e7e8      	b.n	800d2a4 <_strtol_l.constprop.0+0x6c>
 800d2d2:	2c2b      	cmp	r4, #43	; 0x2b
 800d2d4:	bf04      	itt	eq
 800d2d6:	782c      	ldrbeq	r4, [r5, #0]
 800d2d8:	1cb5      	addeq	r5, r6, #2
 800d2da:	e7ca      	b.n	800d272 <_strtol_l.constprop.0+0x3a>
 800d2dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d2e0:	f1be 0f19 	cmp.w	lr, #25
 800d2e4:	d801      	bhi.n	800d2ea <_strtol_l.constprop.0+0xb2>
 800d2e6:	3c37      	subs	r4, #55	; 0x37
 800d2e8:	e7e2      	b.n	800d2b0 <_strtol_l.constprop.0+0x78>
 800d2ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d2ee:	f1be 0f19 	cmp.w	lr, #25
 800d2f2:	d804      	bhi.n	800d2fe <_strtol_l.constprop.0+0xc6>
 800d2f4:	3c57      	subs	r4, #87	; 0x57
 800d2f6:	e7db      	b.n	800d2b0 <_strtol_l.constprop.0+0x78>
 800d2f8:	f04f 3cff 	mov.w	ip, #4294967295
 800d2fc:	e7e6      	b.n	800d2cc <_strtol_l.constprop.0+0x94>
 800d2fe:	f1bc 0f00 	cmp.w	ip, #0
 800d302:	da05      	bge.n	800d310 <_strtol_l.constprop.0+0xd8>
 800d304:	2322      	movs	r3, #34	; 0x22
 800d306:	6003      	str	r3, [r0, #0]
 800d308:	4646      	mov	r6, r8
 800d30a:	b942      	cbnz	r2, 800d31e <_strtol_l.constprop.0+0xe6>
 800d30c:	4630      	mov	r0, r6
 800d30e:	e79e      	b.n	800d24e <_strtol_l.constprop.0+0x16>
 800d310:	b107      	cbz	r7, 800d314 <_strtol_l.constprop.0+0xdc>
 800d312:	4276      	negs	r6, r6
 800d314:	2a00      	cmp	r2, #0
 800d316:	d0f9      	beq.n	800d30c <_strtol_l.constprop.0+0xd4>
 800d318:	f1bc 0f00 	cmp.w	ip, #0
 800d31c:	d000      	beq.n	800d320 <_strtol_l.constprop.0+0xe8>
 800d31e:	1e69      	subs	r1, r5, #1
 800d320:	6011      	str	r1, [r2, #0]
 800d322:	e7f3      	b.n	800d30c <_strtol_l.constprop.0+0xd4>
 800d324:	2430      	movs	r4, #48	; 0x30
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1b1      	bne.n	800d28e <_strtol_l.constprop.0+0x56>
 800d32a:	2308      	movs	r3, #8
 800d32c:	e7af      	b.n	800d28e <_strtol_l.constprop.0+0x56>
 800d32e:	2c30      	cmp	r4, #48	; 0x30
 800d330:	d0a5      	beq.n	800d27e <_strtol_l.constprop.0+0x46>
 800d332:	230a      	movs	r3, #10
 800d334:	e7ab      	b.n	800d28e <_strtol_l.constprop.0+0x56>
 800d336:	bf00      	nop
 800d338:	080127d9 	.word	0x080127d9

0800d33c <_strtol_r>:
 800d33c:	f7ff bf7c 	b.w	800d238 <_strtol_l.constprop.0>

0800d340 <_write_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4d07      	ldr	r5, [pc, #28]	; (800d360 <_write_r+0x20>)
 800d344:	4604      	mov	r4, r0
 800d346:	4608      	mov	r0, r1
 800d348:	4611      	mov	r1, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	f7f8 fb35 	bl	80059be <_write>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_write_r+0x1e>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_write_r+0x1e>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	2000122c 	.word	0x2000122c

0800d364 <_close_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d06      	ldr	r5, [pc, #24]	; (800d380 <_close_r+0x1c>)
 800d368:	2300      	movs	r3, #0
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	602b      	str	r3, [r5, #0]
 800d370:	f7f8 fb41 	bl	80059f6 <_close>
 800d374:	1c43      	adds	r3, r0, #1
 800d376:	d102      	bne.n	800d37e <_close_r+0x1a>
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	b103      	cbz	r3, 800d37e <_close_r+0x1a>
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	bd38      	pop	{r3, r4, r5, pc}
 800d380:	2000122c 	.word	0x2000122c

0800d384 <quorem>:
 800d384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	6903      	ldr	r3, [r0, #16]
 800d38a:	690c      	ldr	r4, [r1, #16]
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	4607      	mov	r7, r0
 800d390:	f2c0 8081 	blt.w	800d496 <quorem+0x112>
 800d394:	3c01      	subs	r4, #1
 800d396:	f101 0814 	add.w	r8, r1, #20
 800d39a:	f100 0514 	add.w	r5, r0, #20
 800d39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3bc:	d331      	bcc.n	800d422 <quorem+0x9e>
 800d3be:	f04f 0e00 	mov.w	lr, #0
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	46ac      	mov	ip, r5
 800d3c6:	46f2      	mov	sl, lr
 800d3c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3cc:	b293      	uxth	r3, r2
 800d3ce:	fb06 e303 	mla	r3, r6, r3, lr
 800d3d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	ebaa 0303 	sub.w	r3, sl, r3
 800d3dc:	f8dc a000 	ldr.w	sl, [ip]
 800d3e0:	0c12      	lsrs	r2, r2, #16
 800d3e2:	fa13 f38a 	uxtah	r3, r3, sl
 800d3e6:	fb06 e202 	mla	r2, r6, r2, lr
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	9b00      	ldr	r3, [sp, #0]
 800d3ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3f2:	b292      	uxth	r2, r2
 800d3f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800d400:	4581      	cmp	r9, r0
 800d402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d406:	f84c 3b04 	str.w	r3, [ip], #4
 800d40a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d40e:	d2db      	bcs.n	800d3c8 <quorem+0x44>
 800d410:	f855 300b 	ldr.w	r3, [r5, fp]
 800d414:	b92b      	cbnz	r3, 800d422 <quorem+0x9e>
 800d416:	9b01      	ldr	r3, [sp, #4]
 800d418:	3b04      	subs	r3, #4
 800d41a:	429d      	cmp	r5, r3
 800d41c:	461a      	mov	r2, r3
 800d41e:	d32e      	bcc.n	800d47e <quorem+0xfa>
 800d420:	613c      	str	r4, [r7, #16]
 800d422:	4638      	mov	r0, r7
 800d424:	f001 fca4 	bl	800ed70 <__mcmp>
 800d428:	2800      	cmp	r0, #0
 800d42a:	db24      	blt.n	800d476 <quorem+0xf2>
 800d42c:	3601      	adds	r6, #1
 800d42e:	4628      	mov	r0, r5
 800d430:	f04f 0c00 	mov.w	ip, #0
 800d434:	f858 2b04 	ldr.w	r2, [r8], #4
 800d438:	f8d0 e000 	ldr.w	lr, [r0]
 800d43c:	b293      	uxth	r3, r2
 800d43e:	ebac 0303 	sub.w	r3, ip, r3
 800d442:	0c12      	lsrs	r2, r2, #16
 800d444:	fa13 f38e 	uxtah	r3, r3, lr
 800d448:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d44c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d450:	b29b      	uxth	r3, r3
 800d452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d456:	45c1      	cmp	r9, r8
 800d458:	f840 3b04 	str.w	r3, [r0], #4
 800d45c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d460:	d2e8      	bcs.n	800d434 <quorem+0xb0>
 800d462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d46a:	b922      	cbnz	r2, 800d476 <quorem+0xf2>
 800d46c:	3b04      	subs	r3, #4
 800d46e:	429d      	cmp	r5, r3
 800d470:	461a      	mov	r2, r3
 800d472:	d30a      	bcc.n	800d48a <quorem+0x106>
 800d474:	613c      	str	r4, [r7, #16]
 800d476:	4630      	mov	r0, r6
 800d478:	b003      	add	sp, #12
 800d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	6812      	ldr	r2, [r2, #0]
 800d480:	3b04      	subs	r3, #4
 800d482:	2a00      	cmp	r2, #0
 800d484:	d1cc      	bne.n	800d420 <quorem+0x9c>
 800d486:	3c01      	subs	r4, #1
 800d488:	e7c7      	b.n	800d41a <quorem+0x96>
 800d48a:	6812      	ldr	r2, [r2, #0]
 800d48c:	3b04      	subs	r3, #4
 800d48e:	2a00      	cmp	r2, #0
 800d490:	d1f0      	bne.n	800d474 <quorem+0xf0>
 800d492:	3c01      	subs	r4, #1
 800d494:	e7eb      	b.n	800d46e <quorem+0xea>
 800d496:	2000      	movs	r0, #0
 800d498:	e7ee      	b.n	800d478 <quorem+0xf4>
 800d49a:	0000      	movs	r0, r0
 800d49c:	0000      	movs	r0, r0
	...

0800d4a0 <_dtoa_r>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	ed2d 8b04 	vpush	{d8-d9}
 800d4a8:	ec57 6b10 	vmov	r6, r7, d0
 800d4ac:	b093      	sub	sp, #76	; 0x4c
 800d4ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4b4:	9106      	str	r1, [sp, #24]
 800d4b6:	ee10 aa10 	vmov	sl, s0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4be:	930c      	str	r3, [sp, #48]	; 0x30
 800d4c0:	46bb      	mov	fp, r7
 800d4c2:	b975      	cbnz	r5, 800d4e2 <_dtoa_r+0x42>
 800d4c4:	2010      	movs	r0, #16
 800d4c6:	f001 f95f 	bl	800e788 <malloc>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ce:	b920      	cbnz	r0, 800d4da <_dtoa_r+0x3a>
 800d4d0:	4ba7      	ldr	r3, [pc, #668]	; (800d770 <_dtoa_r+0x2d0>)
 800d4d2:	21ea      	movs	r1, #234	; 0xea
 800d4d4:	48a7      	ldr	r0, [pc, #668]	; (800d774 <_dtoa_r+0x2d4>)
 800d4d6:	f002 fceb 	bl	800feb0 <__assert_func>
 800d4da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4de:	6005      	str	r5, [r0, #0]
 800d4e0:	60c5      	str	r5, [r0, #12]
 800d4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	b151      	cbz	r1, 800d4fe <_dtoa_r+0x5e>
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	604a      	str	r2, [r1, #4]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4093      	lsls	r3, r2
 800d4f0:	608b      	str	r3, [r1, #8]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f001 f9b0 	bl	800e858 <_Bfree>
 800d4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	1e3b      	subs	r3, r7, #0
 800d500:	bfaa      	itet	ge
 800d502:	2300      	movge	r3, #0
 800d504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d508:	f8c8 3000 	strge.w	r3, [r8]
 800d50c:	4b9a      	ldr	r3, [pc, #616]	; (800d778 <_dtoa_r+0x2d8>)
 800d50e:	bfbc      	itt	lt
 800d510:	2201      	movlt	r2, #1
 800d512:	f8c8 2000 	strlt.w	r2, [r8]
 800d516:	ea33 030b 	bics.w	r3, r3, fp
 800d51a:	d11b      	bne.n	800d554 <_dtoa_r+0xb4>
 800d51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d51e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d528:	4333      	orrs	r3, r6
 800d52a:	f000 8592 	beq.w	800e052 <_dtoa_r+0xbb2>
 800d52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d530:	b963      	cbnz	r3, 800d54c <_dtoa_r+0xac>
 800d532:	4b92      	ldr	r3, [pc, #584]	; (800d77c <_dtoa_r+0x2dc>)
 800d534:	e022      	b.n	800d57c <_dtoa_r+0xdc>
 800d536:	4b92      	ldr	r3, [pc, #584]	; (800d780 <_dtoa_r+0x2e0>)
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	3308      	adds	r3, #8
 800d53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	9801      	ldr	r0, [sp, #4]
 800d542:	b013      	add	sp, #76	; 0x4c
 800d544:	ecbd 8b04 	vpop	{d8-d9}
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	4b8b      	ldr	r3, [pc, #556]	; (800d77c <_dtoa_r+0x2dc>)
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	3303      	adds	r3, #3
 800d552:	e7f3      	b.n	800d53c <_dtoa_r+0x9c>
 800d554:	2200      	movs	r2, #0
 800d556:	2300      	movs	r3, #0
 800d558:	4650      	mov	r0, sl
 800d55a:	4659      	mov	r1, fp
 800d55c:	f7f3 fae4 	bl	8000b28 <__aeabi_dcmpeq>
 800d560:	ec4b ab19 	vmov	d9, sl, fp
 800d564:	4680      	mov	r8, r0
 800d566:	b158      	cbz	r0, 800d580 <_dtoa_r+0xe0>
 800d568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d56a:	2301      	movs	r3, #1
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 856b 	beq.w	800e04c <_dtoa_r+0xbac>
 800d576:	4883      	ldr	r0, [pc, #524]	; (800d784 <_dtoa_r+0x2e4>)
 800d578:	6018      	str	r0, [r3, #0]
 800d57a:	1e43      	subs	r3, r0, #1
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	e7df      	b.n	800d540 <_dtoa_r+0xa0>
 800d580:	ec4b ab10 	vmov	d0, sl, fp
 800d584:	aa10      	add	r2, sp, #64	; 0x40
 800d586:	a911      	add	r1, sp, #68	; 0x44
 800d588:	4620      	mov	r0, r4
 800d58a:	f001 fd13 	bl	800efb4 <__d2b>
 800d58e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d592:	ee08 0a10 	vmov	s16, r0
 800d596:	2d00      	cmp	r5, #0
 800d598:	f000 8084 	beq.w	800d6a4 <_dtoa_r+0x204>
 800d59c:	ee19 3a90 	vmov	r3, s19
 800d5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5a8:	4656      	mov	r6, sl
 800d5aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5b6:	4b74      	ldr	r3, [pc, #464]	; (800d788 <_dtoa_r+0x2e8>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	4639      	mov	r1, r7
 800d5be:	f7f2 fe93 	bl	80002e8 <__aeabi_dsub>
 800d5c2:	a365      	add	r3, pc, #404	; (adr r3, 800d758 <_dtoa_r+0x2b8>)
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	f7f3 f846 	bl	8000658 <__aeabi_dmul>
 800d5cc:	a364      	add	r3, pc, #400	; (adr r3, 800d760 <_dtoa_r+0x2c0>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f2 fe8b 	bl	80002ec <__adddf3>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	4628      	mov	r0, r5
 800d5da:	460f      	mov	r7, r1
 800d5dc:	f7f2 ffd2 	bl	8000584 <__aeabi_i2d>
 800d5e0:	a361      	add	r3, pc, #388	; (adr r3, 800d768 <_dtoa_r+0x2c8>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f3 f837 	bl	8000658 <__aeabi_dmul>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	f7f2 fe7b 	bl	80002ec <__adddf3>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	460f      	mov	r7, r1
 800d5fa:	f7f3 fadd 	bl	8000bb8 <__aeabi_d2iz>
 800d5fe:	2200      	movs	r2, #0
 800d600:	9000      	str	r0, [sp, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	4630      	mov	r0, r6
 800d606:	4639      	mov	r1, r7
 800d608:	f7f3 fa98 	bl	8000b3c <__aeabi_dcmplt>
 800d60c:	b150      	cbz	r0, 800d624 <_dtoa_r+0x184>
 800d60e:	9800      	ldr	r0, [sp, #0]
 800d610:	f7f2 ffb8 	bl	8000584 <__aeabi_i2d>
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	f7f3 fa86 	bl	8000b28 <__aeabi_dcmpeq>
 800d61c:	b910      	cbnz	r0, 800d624 <_dtoa_r+0x184>
 800d61e:	9b00      	ldr	r3, [sp, #0]
 800d620:	3b01      	subs	r3, #1
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	9b00      	ldr	r3, [sp, #0]
 800d626:	2b16      	cmp	r3, #22
 800d628:	d85a      	bhi.n	800d6e0 <_dtoa_r+0x240>
 800d62a:	9a00      	ldr	r2, [sp, #0]
 800d62c:	4b57      	ldr	r3, [pc, #348]	; (800d78c <_dtoa_r+0x2ec>)
 800d62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	ec51 0b19 	vmov	r0, r1, d9
 800d63a:	f7f3 fa7f 	bl	8000b3c <__aeabi_dcmplt>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d050      	beq.n	800d6e4 <_dtoa_r+0x244>
 800d642:	9b00      	ldr	r3, [sp, #0]
 800d644:	3b01      	subs	r3, #1
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2300      	movs	r3, #0
 800d64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d64e:	1b5d      	subs	r5, r3, r5
 800d650:	1e6b      	subs	r3, r5, #1
 800d652:	9305      	str	r3, [sp, #20]
 800d654:	bf45      	ittet	mi
 800d656:	f1c5 0301 	rsbmi	r3, r5, #1
 800d65a:	9304      	strmi	r3, [sp, #16]
 800d65c:	2300      	movpl	r3, #0
 800d65e:	2300      	movmi	r3, #0
 800d660:	bf4c      	ite	mi
 800d662:	9305      	strmi	r3, [sp, #20]
 800d664:	9304      	strpl	r3, [sp, #16]
 800d666:	9b00      	ldr	r3, [sp, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	db3d      	blt.n	800d6e8 <_dtoa_r+0x248>
 800d66c:	9b05      	ldr	r3, [sp, #20]
 800d66e:	9a00      	ldr	r2, [sp, #0]
 800d670:	920a      	str	r2, [sp, #40]	; 0x28
 800d672:	4413      	add	r3, r2
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	2300      	movs	r3, #0
 800d678:	9307      	str	r3, [sp, #28]
 800d67a:	9b06      	ldr	r3, [sp, #24]
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	f200 8089 	bhi.w	800d794 <_dtoa_r+0x2f4>
 800d682:	2b05      	cmp	r3, #5
 800d684:	bfc4      	itt	gt
 800d686:	3b04      	subgt	r3, #4
 800d688:	9306      	strgt	r3, [sp, #24]
 800d68a:	9b06      	ldr	r3, [sp, #24]
 800d68c:	f1a3 0302 	sub.w	r3, r3, #2
 800d690:	bfcc      	ite	gt
 800d692:	2500      	movgt	r5, #0
 800d694:	2501      	movle	r5, #1
 800d696:	2b03      	cmp	r3, #3
 800d698:	f200 8087 	bhi.w	800d7aa <_dtoa_r+0x30a>
 800d69c:	e8df f003 	tbb	[pc, r3]
 800d6a0:	59383a2d 	.word	0x59383a2d
 800d6a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6a8:	441d      	add	r5, r3
 800d6aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6ae:	2b20      	cmp	r3, #32
 800d6b0:	bfc1      	itttt	gt
 800d6b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6c2:	bfda      	itte	le
 800d6c4:	f1c3 0320 	rsble	r3, r3, #32
 800d6c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d6cc:	4318      	orrgt	r0, r3
 800d6ce:	f7f2 ff49 	bl	8000564 <__aeabi_ui2d>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6da:	3d01      	subs	r5, #1
 800d6dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6de:	e76a      	b.n	800d5b6 <_dtoa_r+0x116>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e7b2      	b.n	800d64a <_dtoa_r+0x1aa>
 800d6e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6e6:	e7b1      	b.n	800d64c <_dtoa_r+0x1ac>
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	9a00      	ldr	r2, [sp, #0]
 800d6ec:	1a9b      	subs	r3, r3, r2
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	4253      	negs	r3, r2
 800d6f2:	9307      	str	r3, [sp, #28]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6f8:	e7bf      	b.n	800d67a <_dtoa_r+0x1da>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9308      	str	r3, [sp, #32]
 800d6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d700:	2b00      	cmp	r3, #0
 800d702:	dc55      	bgt.n	800d7b0 <_dtoa_r+0x310>
 800d704:	2301      	movs	r3, #1
 800d706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d70a:	461a      	mov	r2, r3
 800d70c:	9209      	str	r2, [sp, #36]	; 0x24
 800d70e:	e00c      	b.n	800d72a <_dtoa_r+0x28a>
 800d710:	2301      	movs	r3, #1
 800d712:	e7f3      	b.n	800d6fc <_dtoa_r+0x25c>
 800d714:	2300      	movs	r3, #0
 800d716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d718:	9308      	str	r3, [sp, #32]
 800d71a:	9b00      	ldr	r3, [sp, #0]
 800d71c:	4413      	add	r3, r2
 800d71e:	9302      	str	r3, [sp, #8]
 800d720:	3301      	adds	r3, #1
 800d722:	2b01      	cmp	r3, #1
 800d724:	9303      	str	r3, [sp, #12]
 800d726:	bfb8      	it	lt
 800d728:	2301      	movlt	r3, #1
 800d72a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d72c:	2200      	movs	r2, #0
 800d72e:	6042      	str	r2, [r0, #4]
 800d730:	2204      	movs	r2, #4
 800d732:	f102 0614 	add.w	r6, r2, #20
 800d736:	429e      	cmp	r6, r3
 800d738:	6841      	ldr	r1, [r0, #4]
 800d73a:	d93d      	bls.n	800d7b8 <_dtoa_r+0x318>
 800d73c:	4620      	mov	r0, r4
 800d73e:	f001 f84b 	bl	800e7d8 <_Balloc>
 800d742:	9001      	str	r0, [sp, #4]
 800d744:	2800      	cmp	r0, #0
 800d746:	d13b      	bne.n	800d7c0 <_dtoa_r+0x320>
 800d748:	4b11      	ldr	r3, [pc, #68]	; (800d790 <_dtoa_r+0x2f0>)
 800d74a:	4602      	mov	r2, r0
 800d74c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d750:	e6c0      	b.n	800d4d4 <_dtoa_r+0x34>
 800d752:	2301      	movs	r3, #1
 800d754:	e7df      	b.n	800d716 <_dtoa_r+0x276>
 800d756:	bf00      	nop
 800d758:	636f4361 	.word	0x636f4361
 800d75c:	3fd287a7 	.word	0x3fd287a7
 800d760:	8b60c8b3 	.word	0x8b60c8b3
 800d764:	3fc68a28 	.word	0x3fc68a28
 800d768:	509f79fb 	.word	0x509f79fb
 800d76c:	3fd34413 	.word	0x3fd34413
 800d770:	080128e6 	.word	0x080128e6
 800d774:	080128fd 	.word	0x080128fd
 800d778:	7ff00000 	.word	0x7ff00000
 800d77c:	080128e2 	.word	0x080128e2
 800d780:	080128d9 	.word	0x080128d9
 800d784:	08012b52 	.word	0x08012b52
 800d788:	3ff80000 	.word	0x3ff80000
 800d78c:	08012a68 	.word	0x08012a68
 800d790:	08012958 	.word	0x08012958
 800d794:	2501      	movs	r5, #1
 800d796:	2300      	movs	r3, #0
 800d798:	9306      	str	r3, [sp, #24]
 800d79a:	9508      	str	r5, [sp, #32]
 800d79c:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2312      	movs	r3, #18
 800d7a8:	e7b0      	b.n	800d70c <_dtoa_r+0x26c>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	9308      	str	r3, [sp, #32]
 800d7ae:	e7f5      	b.n	800d79c <_dtoa_r+0x2fc>
 800d7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7b6:	e7b8      	b.n	800d72a <_dtoa_r+0x28a>
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	6041      	str	r1, [r0, #4]
 800d7bc:	0052      	lsls	r2, r2, #1
 800d7be:	e7b8      	b.n	800d732 <_dtoa_r+0x292>
 800d7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c2:	9a01      	ldr	r2, [sp, #4]
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	9b03      	ldr	r3, [sp, #12]
 800d7c8:	2b0e      	cmp	r3, #14
 800d7ca:	f200 809d 	bhi.w	800d908 <_dtoa_r+0x468>
 800d7ce:	2d00      	cmp	r5, #0
 800d7d0:	f000 809a 	beq.w	800d908 <_dtoa_r+0x468>
 800d7d4:	9b00      	ldr	r3, [sp, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	dd32      	ble.n	800d840 <_dtoa_r+0x3a0>
 800d7da:	4ab7      	ldr	r2, [pc, #732]	; (800dab8 <_dtoa_r+0x618>)
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7e8:	9b00      	ldr	r3, [sp, #0]
 800d7ea:	05d8      	lsls	r0, r3, #23
 800d7ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7f0:	d516      	bpl.n	800d820 <_dtoa_r+0x380>
 800d7f2:	4bb2      	ldr	r3, [pc, #712]	; (800dabc <_dtoa_r+0x61c>)
 800d7f4:	ec51 0b19 	vmov	r0, r1, d9
 800d7f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7fc:	f7f3 f856 	bl	80008ac <__aeabi_ddiv>
 800d800:	f007 070f 	and.w	r7, r7, #15
 800d804:	4682      	mov	sl, r0
 800d806:	468b      	mov	fp, r1
 800d808:	2503      	movs	r5, #3
 800d80a:	4eac      	ldr	r6, [pc, #688]	; (800dabc <_dtoa_r+0x61c>)
 800d80c:	b957      	cbnz	r7, 800d824 <_dtoa_r+0x384>
 800d80e:	4642      	mov	r2, r8
 800d810:	464b      	mov	r3, r9
 800d812:	4650      	mov	r0, sl
 800d814:	4659      	mov	r1, fp
 800d816:	f7f3 f849 	bl	80008ac <__aeabi_ddiv>
 800d81a:	4682      	mov	sl, r0
 800d81c:	468b      	mov	fp, r1
 800d81e:	e028      	b.n	800d872 <_dtoa_r+0x3d2>
 800d820:	2502      	movs	r5, #2
 800d822:	e7f2      	b.n	800d80a <_dtoa_r+0x36a>
 800d824:	07f9      	lsls	r1, r7, #31
 800d826:	d508      	bpl.n	800d83a <_dtoa_r+0x39a>
 800d828:	4640      	mov	r0, r8
 800d82a:	4649      	mov	r1, r9
 800d82c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d830:	f7f2 ff12 	bl	8000658 <__aeabi_dmul>
 800d834:	3501      	adds	r5, #1
 800d836:	4680      	mov	r8, r0
 800d838:	4689      	mov	r9, r1
 800d83a:	107f      	asrs	r7, r7, #1
 800d83c:	3608      	adds	r6, #8
 800d83e:	e7e5      	b.n	800d80c <_dtoa_r+0x36c>
 800d840:	f000 809b 	beq.w	800d97a <_dtoa_r+0x4da>
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	4f9d      	ldr	r7, [pc, #628]	; (800dabc <_dtoa_r+0x61c>)
 800d848:	425e      	negs	r6, r3
 800d84a:	4b9b      	ldr	r3, [pc, #620]	; (800dab8 <_dtoa_r+0x618>)
 800d84c:	f006 020f 	and.w	r2, r6, #15
 800d850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	ec51 0b19 	vmov	r0, r1, d9
 800d85c:	f7f2 fefc 	bl	8000658 <__aeabi_dmul>
 800d860:	1136      	asrs	r6, r6, #4
 800d862:	4682      	mov	sl, r0
 800d864:	468b      	mov	fp, r1
 800d866:	2300      	movs	r3, #0
 800d868:	2502      	movs	r5, #2
 800d86a:	2e00      	cmp	r6, #0
 800d86c:	d17a      	bne.n	800d964 <_dtoa_r+0x4c4>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d3      	bne.n	800d81a <_dtoa_r+0x37a>
 800d872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 8082 	beq.w	800d97e <_dtoa_r+0x4de>
 800d87a:	4b91      	ldr	r3, [pc, #580]	; (800dac0 <_dtoa_r+0x620>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	4650      	mov	r0, sl
 800d880:	4659      	mov	r1, fp
 800d882:	f7f3 f95b 	bl	8000b3c <__aeabi_dcmplt>
 800d886:	2800      	cmp	r0, #0
 800d888:	d079      	beq.n	800d97e <_dtoa_r+0x4de>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d076      	beq.n	800d97e <_dtoa_r+0x4de>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	dd36      	ble.n	800d904 <_dtoa_r+0x464>
 800d896:	9b00      	ldr	r3, [sp, #0]
 800d898:	4650      	mov	r0, sl
 800d89a:	4659      	mov	r1, fp
 800d89c:	1e5f      	subs	r7, r3, #1
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4b88      	ldr	r3, [pc, #544]	; (800dac4 <_dtoa_r+0x624>)
 800d8a2:	f7f2 fed9 	bl	8000658 <__aeabi_dmul>
 800d8a6:	9e02      	ldr	r6, [sp, #8]
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	468b      	mov	fp, r1
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f7f2 fe68 	bl	8000584 <__aeabi_i2d>
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	465b      	mov	r3, fp
 800d8b8:	f7f2 fece 	bl	8000658 <__aeabi_dmul>
 800d8bc:	4b82      	ldr	r3, [pc, #520]	; (800dac8 <_dtoa_r+0x628>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f7f2 fd14 	bl	80002ec <__adddf3>
 800d8c4:	46d0      	mov	r8, sl
 800d8c6:	46d9      	mov	r9, fp
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8ce:	2e00      	cmp	r6, #0
 800d8d0:	d158      	bne.n	800d984 <_dtoa_r+0x4e4>
 800d8d2:	4b7e      	ldr	r3, [pc, #504]	; (800dacc <_dtoa_r+0x62c>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	4649      	mov	r1, r9
 800d8da:	f7f2 fd05 	bl	80002e8 <__aeabi_dsub>
 800d8de:	4652      	mov	r2, sl
 800d8e0:	465b      	mov	r3, fp
 800d8e2:	4680      	mov	r8, r0
 800d8e4:	4689      	mov	r9, r1
 800d8e6:	f7f3 f947 	bl	8000b78 <__aeabi_dcmpgt>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f040 8295 	bne.w	800de1a <_dtoa_r+0x97a>
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	f7f3 f91f 	bl	8000b3c <__aeabi_dcmplt>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f040 8289 	bne.w	800de16 <_dtoa_r+0x976>
 800d904:	ec5b ab19 	vmov	sl, fp, d9
 800d908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f2c0 8148 	blt.w	800dba0 <_dtoa_r+0x700>
 800d910:	9a00      	ldr	r2, [sp, #0]
 800d912:	2a0e      	cmp	r2, #14
 800d914:	f300 8144 	bgt.w	800dba0 <_dtoa_r+0x700>
 800d918:	4b67      	ldr	r3, [pc, #412]	; (800dab8 <_dtoa_r+0x618>)
 800d91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d91e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	f280 80d5 	bge.w	800dad4 <_dtoa_r+0x634>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f300 80d1 	bgt.w	800dad4 <_dtoa_r+0x634>
 800d932:	f040 826f 	bne.w	800de14 <_dtoa_r+0x974>
 800d936:	4b65      	ldr	r3, [pc, #404]	; (800dacc <_dtoa_r+0x62c>)
 800d938:	2200      	movs	r2, #0
 800d93a:	4640      	mov	r0, r8
 800d93c:	4649      	mov	r1, r9
 800d93e:	f7f2 fe8b 	bl	8000658 <__aeabi_dmul>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f3 f90d 	bl	8000b64 <__aeabi_dcmpge>
 800d94a:	9e03      	ldr	r6, [sp, #12]
 800d94c:	4637      	mov	r7, r6
 800d94e:	2800      	cmp	r0, #0
 800d950:	f040 8245 	bne.w	800ddde <_dtoa_r+0x93e>
 800d954:	9d01      	ldr	r5, [sp, #4]
 800d956:	2331      	movs	r3, #49	; 0x31
 800d958:	f805 3b01 	strb.w	r3, [r5], #1
 800d95c:	9b00      	ldr	r3, [sp, #0]
 800d95e:	3301      	adds	r3, #1
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	e240      	b.n	800dde6 <_dtoa_r+0x946>
 800d964:	07f2      	lsls	r2, r6, #31
 800d966:	d505      	bpl.n	800d974 <_dtoa_r+0x4d4>
 800d968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d96c:	f7f2 fe74 	bl	8000658 <__aeabi_dmul>
 800d970:	3501      	adds	r5, #1
 800d972:	2301      	movs	r3, #1
 800d974:	1076      	asrs	r6, r6, #1
 800d976:	3708      	adds	r7, #8
 800d978:	e777      	b.n	800d86a <_dtoa_r+0x3ca>
 800d97a:	2502      	movs	r5, #2
 800d97c:	e779      	b.n	800d872 <_dtoa_r+0x3d2>
 800d97e:	9f00      	ldr	r7, [sp, #0]
 800d980:	9e03      	ldr	r6, [sp, #12]
 800d982:	e794      	b.n	800d8ae <_dtoa_r+0x40e>
 800d984:	9901      	ldr	r1, [sp, #4]
 800d986:	4b4c      	ldr	r3, [pc, #304]	; (800dab8 <_dtoa_r+0x618>)
 800d988:	4431      	add	r1, r6
 800d98a:	910d      	str	r1, [sp, #52]	; 0x34
 800d98c:	9908      	ldr	r1, [sp, #32]
 800d98e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d996:	2900      	cmp	r1, #0
 800d998:	d043      	beq.n	800da22 <_dtoa_r+0x582>
 800d99a:	494d      	ldr	r1, [pc, #308]	; (800dad0 <_dtoa_r+0x630>)
 800d99c:	2000      	movs	r0, #0
 800d99e:	f7f2 ff85 	bl	80008ac <__aeabi_ddiv>
 800d9a2:	4652      	mov	r2, sl
 800d9a4:	465b      	mov	r3, fp
 800d9a6:	f7f2 fc9f 	bl	80002e8 <__aeabi_dsub>
 800d9aa:	9d01      	ldr	r5, [sp, #4]
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	468b      	mov	fp, r1
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f7f3 f900 	bl	8000bb8 <__aeabi_d2iz>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	f7f2 fde3 	bl	8000584 <__aeabi_i2d>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	f7f2 fc8f 	bl	80002e8 <__aeabi_dsub>
 800d9ca:	3630      	adds	r6, #48	; 0x30
 800d9cc:	f805 6b01 	strb.w	r6, [r5], #1
 800d9d0:	4652      	mov	r2, sl
 800d9d2:	465b      	mov	r3, fp
 800d9d4:	4680      	mov	r8, r0
 800d9d6:	4689      	mov	r9, r1
 800d9d8:	f7f3 f8b0 	bl	8000b3c <__aeabi_dcmplt>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d163      	bne.n	800daa8 <_dtoa_r+0x608>
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	4936      	ldr	r1, [pc, #216]	; (800dac0 <_dtoa_r+0x620>)
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f7f2 fc7e 	bl	80002e8 <__aeabi_dsub>
 800d9ec:	4652      	mov	r2, sl
 800d9ee:	465b      	mov	r3, fp
 800d9f0:	f7f3 f8a4 	bl	8000b3c <__aeabi_dcmplt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f040 80b5 	bne.w	800db64 <_dtoa_r+0x6c4>
 800d9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	d081      	beq.n	800d904 <_dtoa_r+0x464>
 800da00:	4b30      	ldr	r3, [pc, #192]	; (800dac4 <_dtoa_r+0x624>)
 800da02:	2200      	movs	r2, #0
 800da04:	4650      	mov	r0, sl
 800da06:	4659      	mov	r1, fp
 800da08:	f7f2 fe26 	bl	8000658 <__aeabi_dmul>
 800da0c:	4b2d      	ldr	r3, [pc, #180]	; (800dac4 <_dtoa_r+0x624>)
 800da0e:	4682      	mov	sl, r0
 800da10:	468b      	mov	fp, r1
 800da12:	4640      	mov	r0, r8
 800da14:	4649      	mov	r1, r9
 800da16:	2200      	movs	r2, #0
 800da18:	f7f2 fe1e 	bl	8000658 <__aeabi_dmul>
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	e7c6      	b.n	800d9b0 <_dtoa_r+0x510>
 800da22:	4650      	mov	r0, sl
 800da24:	4659      	mov	r1, fp
 800da26:	f7f2 fe17 	bl	8000658 <__aeabi_dmul>
 800da2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da2c:	9d01      	ldr	r5, [sp, #4]
 800da2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da30:	4682      	mov	sl, r0
 800da32:	468b      	mov	fp, r1
 800da34:	4649      	mov	r1, r9
 800da36:	4640      	mov	r0, r8
 800da38:	f7f3 f8be 	bl	8000bb8 <__aeabi_d2iz>
 800da3c:	4606      	mov	r6, r0
 800da3e:	f7f2 fda1 	bl	8000584 <__aeabi_i2d>
 800da42:	3630      	adds	r6, #48	; 0x30
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fc4c 	bl	80002e8 <__aeabi_dsub>
 800da50:	f805 6b01 	strb.w	r6, [r5], #1
 800da54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da56:	429d      	cmp	r5, r3
 800da58:	4680      	mov	r8, r0
 800da5a:	4689      	mov	r9, r1
 800da5c:	f04f 0200 	mov.w	r2, #0
 800da60:	d124      	bne.n	800daac <_dtoa_r+0x60c>
 800da62:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <_dtoa_r+0x630>)
 800da64:	4650      	mov	r0, sl
 800da66:	4659      	mov	r1, fp
 800da68:	f7f2 fc40 	bl	80002ec <__adddf3>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4640      	mov	r0, r8
 800da72:	4649      	mov	r1, r9
 800da74:	f7f3 f880 	bl	8000b78 <__aeabi_dcmpgt>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d173      	bne.n	800db64 <_dtoa_r+0x6c4>
 800da7c:	4652      	mov	r2, sl
 800da7e:	465b      	mov	r3, fp
 800da80:	4913      	ldr	r1, [pc, #76]	; (800dad0 <_dtoa_r+0x630>)
 800da82:	2000      	movs	r0, #0
 800da84:	f7f2 fc30 	bl	80002e8 <__aeabi_dsub>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4640      	mov	r0, r8
 800da8e:	4649      	mov	r1, r9
 800da90:	f7f3 f854 	bl	8000b3c <__aeabi_dcmplt>
 800da94:	2800      	cmp	r0, #0
 800da96:	f43f af35 	beq.w	800d904 <_dtoa_r+0x464>
 800da9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da9c:	1e6b      	subs	r3, r5, #1
 800da9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800daa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800daa4:	2b30      	cmp	r3, #48	; 0x30
 800daa6:	d0f8      	beq.n	800da9a <_dtoa_r+0x5fa>
 800daa8:	9700      	str	r7, [sp, #0]
 800daaa:	e049      	b.n	800db40 <_dtoa_r+0x6a0>
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <_dtoa_r+0x624>)
 800daae:	f7f2 fdd3 	bl	8000658 <__aeabi_dmul>
 800dab2:	4680      	mov	r8, r0
 800dab4:	4689      	mov	r9, r1
 800dab6:	e7bd      	b.n	800da34 <_dtoa_r+0x594>
 800dab8:	08012a68 	.word	0x08012a68
 800dabc:	08012a40 	.word	0x08012a40
 800dac0:	3ff00000 	.word	0x3ff00000
 800dac4:	40240000 	.word	0x40240000
 800dac8:	401c0000 	.word	0x401c0000
 800dacc:	40140000 	.word	0x40140000
 800dad0:	3fe00000 	.word	0x3fe00000
 800dad4:	9d01      	ldr	r5, [sp, #4]
 800dad6:	4656      	mov	r6, sl
 800dad8:	465f      	mov	r7, fp
 800dada:	4642      	mov	r2, r8
 800dadc:	464b      	mov	r3, r9
 800dade:	4630      	mov	r0, r6
 800dae0:	4639      	mov	r1, r7
 800dae2:	f7f2 fee3 	bl	80008ac <__aeabi_ddiv>
 800dae6:	f7f3 f867 	bl	8000bb8 <__aeabi_d2iz>
 800daea:	4682      	mov	sl, r0
 800daec:	f7f2 fd4a 	bl	8000584 <__aeabi_i2d>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	f7f2 fdb0 	bl	8000658 <__aeabi_dmul>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4630      	mov	r0, r6
 800dafe:	4639      	mov	r1, r7
 800db00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db04:	f7f2 fbf0 	bl	80002e8 <__aeabi_dsub>
 800db08:	f805 6b01 	strb.w	r6, [r5], #1
 800db0c:	9e01      	ldr	r6, [sp, #4]
 800db0e:	9f03      	ldr	r7, [sp, #12]
 800db10:	1bae      	subs	r6, r5, r6
 800db12:	42b7      	cmp	r7, r6
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	d135      	bne.n	800db86 <_dtoa_r+0x6e6>
 800db1a:	f7f2 fbe7 	bl	80002ec <__adddf3>
 800db1e:	4642      	mov	r2, r8
 800db20:	464b      	mov	r3, r9
 800db22:	4606      	mov	r6, r0
 800db24:	460f      	mov	r7, r1
 800db26:	f7f3 f827 	bl	8000b78 <__aeabi_dcmpgt>
 800db2a:	b9d0      	cbnz	r0, 800db62 <_dtoa_r+0x6c2>
 800db2c:	4642      	mov	r2, r8
 800db2e:	464b      	mov	r3, r9
 800db30:	4630      	mov	r0, r6
 800db32:	4639      	mov	r1, r7
 800db34:	f7f2 fff8 	bl	8000b28 <__aeabi_dcmpeq>
 800db38:	b110      	cbz	r0, 800db40 <_dtoa_r+0x6a0>
 800db3a:	f01a 0f01 	tst.w	sl, #1
 800db3e:	d110      	bne.n	800db62 <_dtoa_r+0x6c2>
 800db40:	4620      	mov	r0, r4
 800db42:	ee18 1a10 	vmov	r1, s16
 800db46:	f000 fe87 	bl	800e858 <_Bfree>
 800db4a:	2300      	movs	r3, #0
 800db4c:	9800      	ldr	r0, [sp, #0]
 800db4e:	702b      	strb	r3, [r5, #0]
 800db50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db52:	3001      	adds	r0, #1
 800db54:	6018      	str	r0, [r3, #0]
 800db56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f acf1 	beq.w	800d540 <_dtoa_r+0xa0>
 800db5e:	601d      	str	r5, [r3, #0]
 800db60:	e4ee      	b.n	800d540 <_dtoa_r+0xa0>
 800db62:	9f00      	ldr	r7, [sp, #0]
 800db64:	462b      	mov	r3, r5
 800db66:	461d      	mov	r5, r3
 800db68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db6c:	2a39      	cmp	r2, #57	; 0x39
 800db6e:	d106      	bne.n	800db7e <_dtoa_r+0x6de>
 800db70:	9a01      	ldr	r2, [sp, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d1f7      	bne.n	800db66 <_dtoa_r+0x6c6>
 800db76:	9901      	ldr	r1, [sp, #4]
 800db78:	2230      	movs	r2, #48	; 0x30
 800db7a:	3701      	adds	r7, #1
 800db7c:	700a      	strb	r2, [r1, #0]
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	3201      	adds	r2, #1
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	e790      	b.n	800daa8 <_dtoa_r+0x608>
 800db86:	4ba6      	ldr	r3, [pc, #664]	; (800de20 <_dtoa_r+0x980>)
 800db88:	2200      	movs	r2, #0
 800db8a:	f7f2 fd65 	bl	8000658 <__aeabi_dmul>
 800db8e:	2200      	movs	r2, #0
 800db90:	2300      	movs	r3, #0
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	f7f2 ffc7 	bl	8000b28 <__aeabi_dcmpeq>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d09d      	beq.n	800dada <_dtoa_r+0x63a>
 800db9e:	e7cf      	b.n	800db40 <_dtoa_r+0x6a0>
 800dba0:	9a08      	ldr	r2, [sp, #32]
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	f000 80d7 	beq.w	800dd56 <_dtoa_r+0x8b6>
 800dba8:	9a06      	ldr	r2, [sp, #24]
 800dbaa:	2a01      	cmp	r2, #1
 800dbac:	f300 80ba 	bgt.w	800dd24 <_dtoa_r+0x884>
 800dbb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	f000 80b2 	beq.w	800dd1c <_dtoa_r+0x87c>
 800dbb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbbc:	9e07      	ldr	r6, [sp, #28]
 800dbbe:	9d04      	ldr	r5, [sp, #16]
 800dbc0:	9a04      	ldr	r2, [sp, #16]
 800dbc2:	441a      	add	r2, r3
 800dbc4:	9204      	str	r2, [sp, #16]
 800dbc6:	9a05      	ldr	r2, [sp, #20]
 800dbc8:	2101      	movs	r1, #1
 800dbca:	441a      	add	r2, r3
 800dbcc:	4620      	mov	r0, r4
 800dbce:	9205      	str	r2, [sp, #20]
 800dbd0:	f000 ff44 	bl	800ea5c <__i2b>
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	dd0c      	ble.n	800dbf4 <_dtoa_r+0x754>
 800dbda:	9b05      	ldr	r3, [sp, #20]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	dd09      	ble.n	800dbf4 <_dtoa_r+0x754>
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	bfa8      	it	ge
 800dbe6:	462b      	movge	r3, r5
 800dbe8:	1ad2      	subs	r2, r2, r3
 800dbea:	9204      	str	r2, [sp, #16]
 800dbec:	9a05      	ldr	r2, [sp, #20]
 800dbee:	1aed      	subs	r5, r5, r3
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	9305      	str	r3, [sp, #20]
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	b31b      	cbz	r3, 800dc40 <_dtoa_r+0x7a0>
 800dbf8:	9b08      	ldr	r3, [sp, #32]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 80af 	beq.w	800dd5e <_dtoa_r+0x8be>
 800dc00:	2e00      	cmp	r6, #0
 800dc02:	dd13      	ble.n	800dc2c <_dtoa_r+0x78c>
 800dc04:	4639      	mov	r1, r7
 800dc06:	4632      	mov	r2, r6
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f000 ffe7 	bl	800ebdc <__pow5mult>
 800dc0e:	ee18 2a10 	vmov	r2, s16
 800dc12:	4601      	mov	r1, r0
 800dc14:	4607      	mov	r7, r0
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 ff36 	bl	800ea88 <__multiply>
 800dc1c:	ee18 1a10 	vmov	r1, s16
 800dc20:	4680      	mov	r8, r0
 800dc22:	4620      	mov	r0, r4
 800dc24:	f000 fe18 	bl	800e858 <_Bfree>
 800dc28:	ee08 8a10 	vmov	s16, r8
 800dc2c:	9b07      	ldr	r3, [sp, #28]
 800dc2e:	1b9a      	subs	r2, r3, r6
 800dc30:	d006      	beq.n	800dc40 <_dtoa_r+0x7a0>
 800dc32:	ee18 1a10 	vmov	r1, s16
 800dc36:	4620      	mov	r0, r4
 800dc38:	f000 ffd0 	bl	800ebdc <__pow5mult>
 800dc3c:	ee08 0a10 	vmov	s16, r0
 800dc40:	2101      	movs	r1, #1
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 ff0a 	bl	800ea5c <__i2b>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	f340 8088 	ble.w	800dd62 <_dtoa_r+0x8c2>
 800dc52:	461a      	mov	r2, r3
 800dc54:	4601      	mov	r1, r0
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 ffc0 	bl	800ebdc <__pow5mult>
 800dc5c:	9b06      	ldr	r3, [sp, #24]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	4606      	mov	r6, r0
 800dc62:	f340 8081 	ble.w	800dd68 <_dtoa_r+0x8c8>
 800dc66:	f04f 0800 	mov.w	r8, #0
 800dc6a:	6933      	ldr	r3, [r6, #16]
 800dc6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc70:	6918      	ldr	r0, [r3, #16]
 800dc72:	f000 fea3 	bl	800e9bc <__hi0bits>
 800dc76:	f1c0 0020 	rsb	r0, r0, #32
 800dc7a:	9b05      	ldr	r3, [sp, #20]
 800dc7c:	4418      	add	r0, r3
 800dc7e:	f010 001f 	ands.w	r0, r0, #31
 800dc82:	f000 8092 	beq.w	800ddaa <_dtoa_r+0x90a>
 800dc86:	f1c0 0320 	rsb	r3, r0, #32
 800dc8a:	2b04      	cmp	r3, #4
 800dc8c:	f340 808a 	ble.w	800dda4 <_dtoa_r+0x904>
 800dc90:	f1c0 001c 	rsb	r0, r0, #28
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	4403      	add	r3, r0
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	4403      	add	r3, r0
 800dc9e:	4405      	add	r5, r0
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	9b04      	ldr	r3, [sp, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dd07      	ble.n	800dcb8 <_dtoa_r+0x818>
 800dca8:	ee18 1a10 	vmov	r1, s16
 800dcac:	461a      	mov	r2, r3
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 ffee 	bl	800ec90 <__lshift>
 800dcb4:	ee08 0a10 	vmov	s16, r0
 800dcb8:	9b05      	ldr	r3, [sp, #20]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd05      	ble.n	800dcca <_dtoa_r+0x82a>
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 ffe4 	bl	800ec90 <__lshift>
 800dcc8:	4606      	mov	r6, r0
 800dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d06e      	beq.n	800ddae <_dtoa_r+0x90e>
 800dcd0:	ee18 0a10 	vmov	r0, s16
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	f001 f84b 	bl	800ed70 <__mcmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	da67      	bge.n	800ddae <_dtoa_r+0x90e>
 800dcde:	9b00      	ldr	r3, [sp, #0]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	ee18 1a10 	vmov	r1, s16
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	220a      	movs	r2, #10
 800dcea:	2300      	movs	r3, #0
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 fdd5 	bl	800e89c <__multadd>
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	ee08 0a10 	vmov	s16, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 81b1 	beq.w	800e060 <_dtoa_r+0xbc0>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	4639      	mov	r1, r7
 800dd02:	220a      	movs	r2, #10
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fdc9 	bl	800e89c <__multadd>
 800dd0a:	9b02      	ldr	r3, [sp, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	4607      	mov	r7, r0
 800dd10:	f300 808e 	bgt.w	800de30 <_dtoa_r+0x990>
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	dc51      	bgt.n	800ddbe <_dtoa_r+0x91e>
 800dd1a:	e089      	b.n	800de30 <_dtoa_r+0x990>
 800dd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd22:	e74b      	b.n	800dbbc <_dtoa_r+0x71c>
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	1e5e      	subs	r6, r3, #1
 800dd28:	9b07      	ldr	r3, [sp, #28]
 800dd2a:	42b3      	cmp	r3, r6
 800dd2c:	bfbf      	itttt	lt
 800dd2e:	9b07      	ldrlt	r3, [sp, #28]
 800dd30:	9607      	strlt	r6, [sp, #28]
 800dd32:	1af2      	sublt	r2, r6, r3
 800dd34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd36:	bfb6      	itet	lt
 800dd38:	189b      	addlt	r3, r3, r2
 800dd3a:	1b9e      	subge	r6, r3, r6
 800dd3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd3e:	9b03      	ldr	r3, [sp, #12]
 800dd40:	bfb8      	it	lt
 800dd42:	2600      	movlt	r6, #0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	bfb7      	itett	lt
 800dd48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd50:	1a9d      	sublt	r5, r3, r2
 800dd52:	2300      	movlt	r3, #0
 800dd54:	e734      	b.n	800dbc0 <_dtoa_r+0x720>
 800dd56:	9e07      	ldr	r6, [sp, #28]
 800dd58:	9d04      	ldr	r5, [sp, #16]
 800dd5a:	9f08      	ldr	r7, [sp, #32]
 800dd5c:	e73b      	b.n	800dbd6 <_dtoa_r+0x736>
 800dd5e:	9a07      	ldr	r2, [sp, #28]
 800dd60:	e767      	b.n	800dc32 <_dtoa_r+0x792>
 800dd62:	9b06      	ldr	r3, [sp, #24]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	dc18      	bgt.n	800dd9a <_dtoa_r+0x8fa>
 800dd68:	f1ba 0f00 	cmp.w	sl, #0
 800dd6c:	d115      	bne.n	800dd9a <_dtoa_r+0x8fa>
 800dd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd72:	b993      	cbnz	r3, 800dd9a <_dtoa_r+0x8fa>
 800dd74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd78:	0d1b      	lsrs	r3, r3, #20
 800dd7a:	051b      	lsls	r3, r3, #20
 800dd7c:	b183      	cbz	r3, 800dda0 <_dtoa_r+0x900>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	9b05      	ldr	r3, [sp, #20]
 800dd86:	3301      	adds	r3, #1
 800dd88:	9305      	str	r3, [sp, #20]
 800dd8a:	f04f 0801 	mov.w	r8, #1
 800dd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f47f af6a 	bne.w	800dc6a <_dtoa_r+0x7ca>
 800dd96:	2001      	movs	r0, #1
 800dd98:	e76f      	b.n	800dc7a <_dtoa_r+0x7da>
 800dd9a:	f04f 0800 	mov.w	r8, #0
 800dd9e:	e7f6      	b.n	800dd8e <_dtoa_r+0x8ee>
 800dda0:	4698      	mov	r8, r3
 800dda2:	e7f4      	b.n	800dd8e <_dtoa_r+0x8ee>
 800dda4:	f43f af7d 	beq.w	800dca2 <_dtoa_r+0x802>
 800dda8:	4618      	mov	r0, r3
 800ddaa:	301c      	adds	r0, #28
 800ddac:	e772      	b.n	800dc94 <_dtoa_r+0x7f4>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dc37      	bgt.n	800de24 <_dtoa_r+0x984>
 800ddb4:	9b06      	ldr	r3, [sp, #24]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	dd34      	ble.n	800de24 <_dtoa_r+0x984>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	9302      	str	r3, [sp, #8]
 800ddbe:	9b02      	ldr	r3, [sp, #8]
 800ddc0:	b96b      	cbnz	r3, 800ddde <_dtoa_r+0x93e>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 fd68 	bl	800e89c <__multadd>
 800ddcc:	4601      	mov	r1, r0
 800ddce:	4606      	mov	r6, r0
 800ddd0:	ee18 0a10 	vmov	r0, s16
 800ddd4:	f000 ffcc 	bl	800ed70 <__mcmp>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	f73f adbb 	bgt.w	800d954 <_dtoa_r+0x4b4>
 800ddde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde0:	9d01      	ldr	r5, [sp, #4]
 800dde2:	43db      	mvns	r3, r3
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	4631      	mov	r1, r6
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 fd33 	bl	800e858 <_Bfree>
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	f43f aea4 	beq.w	800db40 <_dtoa_r+0x6a0>
 800ddf8:	f1b8 0f00 	cmp.w	r8, #0
 800ddfc:	d005      	beq.n	800de0a <_dtoa_r+0x96a>
 800ddfe:	45b8      	cmp	r8, r7
 800de00:	d003      	beq.n	800de0a <_dtoa_r+0x96a>
 800de02:	4641      	mov	r1, r8
 800de04:	4620      	mov	r0, r4
 800de06:	f000 fd27 	bl	800e858 <_Bfree>
 800de0a:	4639      	mov	r1, r7
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 fd23 	bl	800e858 <_Bfree>
 800de12:	e695      	b.n	800db40 <_dtoa_r+0x6a0>
 800de14:	2600      	movs	r6, #0
 800de16:	4637      	mov	r7, r6
 800de18:	e7e1      	b.n	800ddde <_dtoa_r+0x93e>
 800de1a:	9700      	str	r7, [sp, #0]
 800de1c:	4637      	mov	r7, r6
 800de1e:	e599      	b.n	800d954 <_dtoa_r+0x4b4>
 800de20:	40240000 	.word	0x40240000
 800de24:	9b08      	ldr	r3, [sp, #32]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 80ca 	beq.w	800dfc0 <_dtoa_r+0xb20>
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	2d00      	cmp	r5, #0
 800de32:	dd05      	ble.n	800de40 <_dtoa_r+0x9a0>
 800de34:	4639      	mov	r1, r7
 800de36:	462a      	mov	r2, r5
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 ff29 	bl	800ec90 <__lshift>
 800de3e:	4607      	mov	r7, r0
 800de40:	f1b8 0f00 	cmp.w	r8, #0
 800de44:	d05b      	beq.n	800defe <_dtoa_r+0xa5e>
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	4620      	mov	r0, r4
 800de4a:	f000 fcc5 	bl	800e7d8 <_Balloc>
 800de4e:	4605      	mov	r5, r0
 800de50:	b928      	cbnz	r0, 800de5e <_dtoa_r+0x9be>
 800de52:	4b87      	ldr	r3, [pc, #540]	; (800e070 <_dtoa_r+0xbd0>)
 800de54:	4602      	mov	r2, r0
 800de56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de5a:	f7ff bb3b 	b.w	800d4d4 <_dtoa_r+0x34>
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	3202      	adds	r2, #2
 800de62:	0092      	lsls	r2, r2, #2
 800de64:	f107 010c 	add.w	r1, r7, #12
 800de68:	300c      	adds	r0, #12
 800de6a:	f000 fca7 	bl	800e7bc <memcpy>
 800de6e:	2201      	movs	r2, #1
 800de70:	4629      	mov	r1, r5
 800de72:	4620      	mov	r0, r4
 800de74:	f000 ff0c 	bl	800ec90 <__lshift>
 800de78:	9b01      	ldr	r3, [sp, #4]
 800de7a:	f103 0901 	add.w	r9, r3, #1
 800de7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de82:	4413      	add	r3, r2
 800de84:	9305      	str	r3, [sp, #20]
 800de86:	f00a 0301 	and.w	r3, sl, #1
 800de8a:	46b8      	mov	r8, r7
 800de8c:	9304      	str	r3, [sp, #16]
 800de8e:	4607      	mov	r7, r0
 800de90:	4631      	mov	r1, r6
 800de92:	ee18 0a10 	vmov	r0, s16
 800de96:	f7ff fa75 	bl	800d384 <quorem>
 800de9a:	4641      	mov	r1, r8
 800de9c:	9002      	str	r0, [sp, #8]
 800de9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dea2:	ee18 0a10 	vmov	r0, s16
 800dea6:	f000 ff63 	bl	800ed70 <__mcmp>
 800deaa:	463a      	mov	r2, r7
 800deac:	9003      	str	r0, [sp, #12]
 800deae:	4631      	mov	r1, r6
 800deb0:	4620      	mov	r0, r4
 800deb2:	f000 ff79 	bl	800eda8 <__mdiff>
 800deb6:	68c2      	ldr	r2, [r0, #12]
 800deb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800debc:	4605      	mov	r5, r0
 800debe:	bb02      	cbnz	r2, 800df02 <_dtoa_r+0xa62>
 800dec0:	4601      	mov	r1, r0
 800dec2:	ee18 0a10 	vmov	r0, s16
 800dec6:	f000 ff53 	bl	800ed70 <__mcmp>
 800deca:	4602      	mov	r2, r0
 800decc:	4629      	mov	r1, r5
 800dece:	4620      	mov	r0, r4
 800ded0:	9207      	str	r2, [sp, #28]
 800ded2:	f000 fcc1 	bl	800e858 <_Bfree>
 800ded6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800deda:	ea43 0102 	orr.w	r1, r3, r2
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	430b      	orrs	r3, r1
 800dee2:	464d      	mov	r5, r9
 800dee4:	d10f      	bne.n	800df06 <_dtoa_r+0xa66>
 800dee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800deea:	d02a      	beq.n	800df42 <_dtoa_r+0xaa2>
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	dd02      	ble.n	800def8 <_dtoa_r+0xa58>
 800def2:	9b02      	ldr	r3, [sp, #8]
 800def4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800def8:	f88b a000 	strb.w	sl, [fp]
 800defc:	e775      	b.n	800ddea <_dtoa_r+0x94a>
 800defe:	4638      	mov	r0, r7
 800df00:	e7ba      	b.n	800de78 <_dtoa_r+0x9d8>
 800df02:	2201      	movs	r2, #1
 800df04:	e7e2      	b.n	800decc <_dtoa_r+0xa2c>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	db04      	blt.n	800df16 <_dtoa_r+0xa76>
 800df0c:	9906      	ldr	r1, [sp, #24]
 800df0e:	430b      	orrs	r3, r1
 800df10:	9904      	ldr	r1, [sp, #16]
 800df12:	430b      	orrs	r3, r1
 800df14:	d122      	bne.n	800df5c <_dtoa_r+0xabc>
 800df16:	2a00      	cmp	r2, #0
 800df18:	ddee      	ble.n	800def8 <_dtoa_r+0xa58>
 800df1a:	ee18 1a10 	vmov	r1, s16
 800df1e:	2201      	movs	r2, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f000 feb5 	bl	800ec90 <__lshift>
 800df26:	4631      	mov	r1, r6
 800df28:	ee08 0a10 	vmov	s16, r0
 800df2c:	f000 ff20 	bl	800ed70 <__mcmp>
 800df30:	2800      	cmp	r0, #0
 800df32:	dc03      	bgt.n	800df3c <_dtoa_r+0xa9c>
 800df34:	d1e0      	bne.n	800def8 <_dtoa_r+0xa58>
 800df36:	f01a 0f01 	tst.w	sl, #1
 800df3a:	d0dd      	beq.n	800def8 <_dtoa_r+0xa58>
 800df3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df40:	d1d7      	bne.n	800def2 <_dtoa_r+0xa52>
 800df42:	2339      	movs	r3, #57	; 0x39
 800df44:	f88b 3000 	strb.w	r3, [fp]
 800df48:	462b      	mov	r3, r5
 800df4a:	461d      	mov	r5, r3
 800df4c:	3b01      	subs	r3, #1
 800df4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df52:	2a39      	cmp	r2, #57	; 0x39
 800df54:	d071      	beq.n	800e03a <_dtoa_r+0xb9a>
 800df56:	3201      	adds	r2, #1
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	e746      	b.n	800ddea <_dtoa_r+0x94a>
 800df5c:	2a00      	cmp	r2, #0
 800df5e:	dd07      	ble.n	800df70 <_dtoa_r+0xad0>
 800df60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df64:	d0ed      	beq.n	800df42 <_dtoa_r+0xaa2>
 800df66:	f10a 0301 	add.w	r3, sl, #1
 800df6a:	f88b 3000 	strb.w	r3, [fp]
 800df6e:	e73c      	b.n	800ddea <_dtoa_r+0x94a>
 800df70:	9b05      	ldr	r3, [sp, #20]
 800df72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df76:	4599      	cmp	r9, r3
 800df78:	d047      	beq.n	800e00a <_dtoa_r+0xb6a>
 800df7a:	ee18 1a10 	vmov	r1, s16
 800df7e:	2300      	movs	r3, #0
 800df80:	220a      	movs	r2, #10
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fc8a 	bl	800e89c <__multadd>
 800df88:	45b8      	cmp	r8, r7
 800df8a:	ee08 0a10 	vmov	s16, r0
 800df8e:	f04f 0300 	mov.w	r3, #0
 800df92:	f04f 020a 	mov.w	r2, #10
 800df96:	4641      	mov	r1, r8
 800df98:	4620      	mov	r0, r4
 800df9a:	d106      	bne.n	800dfaa <_dtoa_r+0xb0a>
 800df9c:	f000 fc7e 	bl	800e89c <__multadd>
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	f109 0901 	add.w	r9, r9, #1
 800dfa8:	e772      	b.n	800de90 <_dtoa_r+0x9f0>
 800dfaa:	f000 fc77 	bl	800e89c <__multadd>
 800dfae:	4639      	mov	r1, r7
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	220a      	movs	r2, #10
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 fc70 	bl	800e89c <__multadd>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	e7f1      	b.n	800dfa4 <_dtoa_r+0xb04>
 800dfc0:	9b03      	ldr	r3, [sp, #12]
 800dfc2:	9302      	str	r3, [sp, #8]
 800dfc4:	9d01      	ldr	r5, [sp, #4]
 800dfc6:	ee18 0a10 	vmov	r0, s16
 800dfca:	4631      	mov	r1, r6
 800dfcc:	f7ff f9da 	bl	800d384 <quorem>
 800dfd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	f805 ab01 	strb.w	sl, [r5], #1
 800dfda:	1aea      	subs	r2, r5, r3
 800dfdc:	9b02      	ldr	r3, [sp, #8]
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	dd09      	ble.n	800dff6 <_dtoa_r+0xb56>
 800dfe2:	ee18 1a10 	vmov	r1, s16
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	220a      	movs	r2, #10
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fc56 	bl	800e89c <__multadd>
 800dff0:	ee08 0a10 	vmov	s16, r0
 800dff4:	e7e7      	b.n	800dfc6 <_dtoa_r+0xb26>
 800dff6:	9b02      	ldr	r3, [sp, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bfc8      	it	gt
 800dffc:	461d      	movgt	r5, r3
 800dffe:	9b01      	ldr	r3, [sp, #4]
 800e000:	bfd8      	it	le
 800e002:	2501      	movle	r5, #1
 800e004:	441d      	add	r5, r3
 800e006:	f04f 0800 	mov.w	r8, #0
 800e00a:	ee18 1a10 	vmov	r1, s16
 800e00e:	2201      	movs	r2, #1
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fe3d 	bl	800ec90 <__lshift>
 800e016:	4631      	mov	r1, r6
 800e018:	ee08 0a10 	vmov	s16, r0
 800e01c:	f000 fea8 	bl	800ed70 <__mcmp>
 800e020:	2800      	cmp	r0, #0
 800e022:	dc91      	bgt.n	800df48 <_dtoa_r+0xaa8>
 800e024:	d102      	bne.n	800e02c <_dtoa_r+0xb8c>
 800e026:	f01a 0f01 	tst.w	sl, #1
 800e02a:	d18d      	bne.n	800df48 <_dtoa_r+0xaa8>
 800e02c:	462b      	mov	r3, r5
 800e02e:	461d      	mov	r5, r3
 800e030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e034:	2a30      	cmp	r2, #48	; 0x30
 800e036:	d0fa      	beq.n	800e02e <_dtoa_r+0xb8e>
 800e038:	e6d7      	b.n	800ddea <_dtoa_r+0x94a>
 800e03a:	9a01      	ldr	r2, [sp, #4]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d184      	bne.n	800df4a <_dtoa_r+0xaaa>
 800e040:	9b00      	ldr	r3, [sp, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	2331      	movs	r3, #49	; 0x31
 800e048:	7013      	strb	r3, [r2, #0]
 800e04a:	e6ce      	b.n	800ddea <_dtoa_r+0x94a>
 800e04c:	4b09      	ldr	r3, [pc, #36]	; (800e074 <_dtoa_r+0xbd4>)
 800e04e:	f7ff ba95 	b.w	800d57c <_dtoa_r+0xdc>
 800e052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e054:	2b00      	cmp	r3, #0
 800e056:	f47f aa6e 	bne.w	800d536 <_dtoa_r+0x96>
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <_dtoa_r+0xbd8>)
 800e05c:	f7ff ba8e 	b.w	800d57c <_dtoa_r+0xdc>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	dcae      	bgt.n	800dfc4 <_dtoa_r+0xb24>
 800e066:	9b06      	ldr	r3, [sp, #24]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	f73f aea8 	bgt.w	800ddbe <_dtoa_r+0x91e>
 800e06e:	e7a9      	b.n	800dfc4 <_dtoa_r+0xb24>
 800e070:	08012958 	.word	0x08012958
 800e074:	08012b51 	.word	0x08012b51
 800e078:	080128d9 	.word	0x080128d9

0800e07c <rshift>:
 800e07c:	6903      	ldr	r3, [r0, #16]
 800e07e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e08a:	f100 0414 	add.w	r4, r0, #20
 800e08e:	dd45      	ble.n	800e11c <rshift+0xa0>
 800e090:	f011 011f 	ands.w	r1, r1, #31
 800e094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e09c:	d10c      	bne.n	800e0b8 <rshift+0x3c>
 800e09e:	f100 0710 	add.w	r7, r0, #16
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	42b1      	cmp	r1, r6
 800e0a6:	d334      	bcc.n	800e112 <rshift+0x96>
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	1eea      	subs	r2, r5, #3
 800e0ae:	4296      	cmp	r6, r2
 800e0b0:	bf38      	it	cc
 800e0b2:	2300      	movcc	r3, #0
 800e0b4:	4423      	add	r3, r4
 800e0b6:	e015      	b.n	800e0e4 <rshift+0x68>
 800e0b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e0bc:	f1c1 0820 	rsb	r8, r1, #32
 800e0c0:	40cf      	lsrs	r7, r1
 800e0c2:	f105 0e04 	add.w	lr, r5, #4
 800e0c6:	46a1      	mov	r9, r4
 800e0c8:	4576      	cmp	r6, lr
 800e0ca:	46f4      	mov	ip, lr
 800e0cc:	d815      	bhi.n	800e0fa <rshift+0x7e>
 800e0ce:	1a9a      	subs	r2, r3, r2
 800e0d0:	0092      	lsls	r2, r2, #2
 800e0d2:	3a04      	subs	r2, #4
 800e0d4:	3501      	adds	r5, #1
 800e0d6:	42ae      	cmp	r6, r5
 800e0d8:	bf38      	it	cc
 800e0da:	2200      	movcc	r2, #0
 800e0dc:	18a3      	adds	r3, r4, r2
 800e0de:	50a7      	str	r7, [r4, r2]
 800e0e0:	b107      	cbz	r7, 800e0e4 <rshift+0x68>
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	1b1a      	subs	r2, r3, r4
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0ec:	bf08      	it	eq
 800e0ee:	2300      	moveq	r3, #0
 800e0f0:	6102      	str	r2, [r0, #16]
 800e0f2:	bf08      	it	eq
 800e0f4:	6143      	streq	r3, [r0, #20]
 800e0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0fa:	f8dc c000 	ldr.w	ip, [ip]
 800e0fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800e102:	ea4c 0707 	orr.w	r7, ip, r7
 800e106:	f849 7b04 	str.w	r7, [r9], #4
 800e10a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e10e:	40cf      	lsrs	r7, r1
 800e110:	e7da      	b.n	800e0c8 <rshift+0x4c>
 800e112:	f851 cb04 	ldr.w	ip, [r1], #4
 800e116:	f847 cf04 	str.w	ip, [r7, #4]!
 800e11a:	e7c3      	b.n	800e0a4 <rshift+0x28>
 800e11c:	4623      	mov	r3, r4
 800e11e:	e7e1      	b.n	800e0e4 <rshift+0x68>

0800e120 <__hexdig_fun>:
 800e120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e124:	2b09      	cmp	r3, #9
 800e126:	d802      	bhi.n	800e12e <__hexdig_fun+0xe>
 800e128:	3820      	subs	r0, #32
 800e12a:	b2c0      	uxtb	r0, r0
 800e12c:	4770      	bx	lr
 800e12e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e132:	2b05      	cmp	r3, #5
 800e134:	d801      	bhi.n	800e13a <__hexdig_fun+0x1a>
 800e136:	3847      	subs	r0, #71	; 0x47
 800e138:	e7f7      	b.n	800e12a <__hexdig_fun+0xa>
 800e13a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e13e:	2b05      	cmp	r3, #5
 800e140:	d801      	bhi.n	800e146 <__hexdig_fun+0x26>
 800e142:	3827      	subs	r0, #39	; 0x27
 800e144:	e7f1      	b.n	800e12a <__hexdig_fun+0xa>
 800e146:	2000      	movs	r0, #0
 800e148:	4770      	bx	lr
	...

0800e14c <__gethex>:
 800e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	ed2d 8b02 	vpush	{d8}
 800e154:	b089      	sub	sp, #36	; 0x24
 800e156:	ee08 0a10 	vmov	s16, r0
 800e15a:	9304      	str	r3, [sp, #16]
 800e15c:	4bb4      	ldr	r3, [pc, #720]	; (800e430 <__gethex+0x2e4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	4618      	mov	r0, r3
 800e164:	468b      	mov	fp, r1
 800e166:	4690      	mov	r8, r2
 800e168:	f7f2 f85c 	bl	8000224 <strlen>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	f8db 2000 	ldr.w	r2, [fp]
 800e172:	4403      	add	r3, r0
 800e174:	4682      	mov	sl, r0
 800e176:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e17a:	9305      	str	r3, [sp, #20]
 800e17c:	1c93      	adds	r3, r2, #2
 800e17e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e186:	32fe      	adds	r2, #254	; 0xfe
 800e188:	18d1      	adds	r1, r2, r3
 800e18a:	461f      	mov	r7, r3
 800e18c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e190:	9100      	str	r1, [sp, #0]
 800e192:	2830      	cmp	r0, #48	; 0x30
 800e194:	d0f8      	beq.n	800e188 <__gethex+0x3c>
 800e196:	f7ff ffc3 	bl	800e120 <__hexdig_fun>
 800e19a:	4604      	mov	r4, r0
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d13a      	bne.n	800e216 <__gethex+0xca>
 800e1a0:	9901      	ldr	r1, [sp, #4]
 800e1a2:	4652      	mov	r2, sl
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f001 fdb3 	bl	800fd10 <strncmp>
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d168      	bne.n	800e282 <__gethex+0x136>
 800e1b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e1b4:	eb07 060a 	add.w	r6, r7, sl
 800e1b8:	f7ff ffb2 	bl	800e120 <__hexdig_fun>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d062      	beq.n	800e286 <__gethex+0x13a>
 800e1c0:	4633      	mov	r3, r6
 800e1c2:	7818      	ldrb	r0, [r3, #0]
 800e1c4:	2830      	cmp	r0, #48	; 0x30
 800e1c6:	461f      	mov	r7, r3
 800e1c8:	f103 0301 	add.w	r3, r3, #1
 800e1cc:	d0f9      	beq.n	800e1c2 <__gethex+0x76>
 800e1ce:	f7ff ffa7 	bl	800e120 <__hexdig_fun>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	fab0 f480 	clz	r4, r0
 800e1d8:	0964      	lsrs	r4, r4, #5
 800e1da:	4635      	mov	r5, r6
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	463a      	mov	r2, r7
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	7830      	ldrb	r0, [r6, #0]
 800e1e6:	f7ff ff9b 	bl	800e120 <__hexdig_fun>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d1f8      	bne.n	800e1e0 <__gethex+0x94>
 800e1ee:	9901      	ldr	r1, [sp, #4]
 800e1f0:	4652      	mov	r2, sl
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f001 fd8c 	bl	800fd10 <strncmp>
 800e1f8:	b980      	cbnz	r0, 800e21c <__gethex+0xd0>
 800e1fa:	b94d      	cbnz	r5, 800e210 <__gethex+0xc4>
 800e1fc:	eb06 050a 	add.w	r5, r6, sl
 800e200:	462a      	mov	r2, r5
 800e202:	4616      	mov	r6, r2
 800e204:	3201      	adds	r2, #1
 800e206:	7830      	ldrb	r0, [r6, #0]
 800e208:	f7ff ff8a 	bl	800e120 <__hexdig_fun>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d1f8      	bne.n	800e202 <__gethex+0xb6>
 800e210:	1bad      	subs	r5, r5, r6
 800e212:	00ad      	lsls	r5, r5, #2
 800e214:	e004      	b.n	800e220 <__gethex+0xd4>
 800e216:	2400      	movs	r4, #0
 800e218:	4625      	mov	r5, r4
 800e21a:	e7e0      	b.n	800e1de <__gethex+0x92>
 800e21c:	2d00      	cmp	r5, #0
 800e21e:	d1f7      	bne.n	800e210 <__gethex+0xc4>
 800e220:	7833      	ldrb	r3, [r6, #0]
 800e222:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e226:	2b50      	cmp	r3, #80	; 0x50
 800e228:	d13b      	bne.n	800e2a2 <__gethex+0x156>
 800e22a:	7873      	ldrb	r3, [r6, #1]
 800e22c:	2b2b      	cmp	r3, #43	; 0x2b
 800e22e:	d02c      	beq.n	800e28a <__gethex+0x13e>
 800e230:	2b2d      	cmp	r3, #45	; 0x2d
 800e232:	d02e      	beq.n	800e292 <__gethex+0x146>
 800e234:	1c71      	adds	r1, r6, #1
 800e236:	f04f 0900 	mov.w	r9, #0
 800e23a:	7808      	ldrb	r0, [r1, #0]
 800e23c:	f7ff ff70 	bl	800e120 <__hexdig_fun>
 800e240:	1e43      	subs	r3, r0, #1
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b18      	cmp	r3, #24
 800e246:	d82c      	bhi.n	800e2a2 <__gethex+0x156>
 800e248:	f1a0 0210 	sub.w	r2, r0, #16
 800e24c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e250:	f7ff ff66 	bl	800e120 <__hexdig_fun>
 800e254:	1e43      	subs	r3, r0, #1
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b18      	cmp	r3, #24
 800e25a:	d91d      	bls.n	800e298 <__gethex+0x14c>
 800e25c:	f1b9 0f00 	cmp.w	r9, #0
 800e260:	d000      	beq.n	800e264 <__gethex+0x118>
 800e262:	4252      	negs	r2, r2
 800e264:	4415      	add	r5, r2
 800e266:	f8cb 1000 	str.w	r1, [fp]
 800e26a:	b1e4      	cbz	r4, 800e2a6 <__gethex+0x15a>
 800e26c:	9b00      	ldr	r3, [sp, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	bf14      	ite	ne
 800e272:	2700      	movne	r7, #0
 800e274:	2706      	moveq	r7, #6
 800e276:	4638      	mov	r0, r7
 800e278:	b009      	add	sp, #36	; 0x24
 800e27a:	ecbd 8b02 	vpop	{d8}
 800e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e282:	463e      	mov	r6, r7
 800e284:	4625      	mov	r5, r4
 800e286:	2401      	movs	r4, #1
 800e288:	e7ca      	b.n	800e220 <__gethex+0xd4>
 800e28a:	f04f 0900 	mov.w	r9, #0
 800e28e:	1cb1      	adds	r1, r6, #2
 800e290:	e7d3      	b.n	800e23a <__gethex+0xee>
 800e292:	f04f 0901 	mov.w	r9, #1
 800e296:	e7fa      	b.n	800e28e <__gethex+0x142>
 800e298:	230a      	movs	r3, #10
 800e29a:	fb03 0202 	mla	r2, r3, r2, r0
 800e29e:	3a10      	subs	r2, #16
 800e2a0:	e7d4      	b.n	800e24c <__gethex+0x100>
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	e7df      	b.n	800e266 <__gethex+0x11a>
 800e2a6:	1bf3      	subs	r3, r6, r7
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	2b07      	cmp	r3, #7
 800e2ae:	dc0b      	bgt.n	800e2c8 <__gethex+0x17c>
 800e2b0:	ee18 0a10 	vmov	r0, s16
 800e2b4:	f000 fa90 	bl	800e7d8 <_Balloc>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	b940      	cbnz	r0, 800e2ce <__gethex+0x182>
 800e2bc:	4b5d      	ldr	r3, [pc, #372]	; (800e434 <__gethex+0x2e8>)
 800e2be:	4602      	mov	r2, r0
 800e2c0:	21de      	movs	r1, #222	; 0xde
 800e2c2:	485d      	ldr	r0, [pc, #372]	; (800e438 <__gethex+0x2ec>)
 800e2c4:	f001 fdf4 	bl	800feb0 <__assert_func>
 800e2c8:	3101      	adds	r1, #1
 800e2ca:	105b      	asrs	r3, r3, #1
 800e2cc:	e7ee      	b.n	800e2ac <__gethex+0x160>
 800e2ce:	f100 0914 	add.w	r9, r0, #20
 800e2d2:	f04f 0b00 	mov.w	fp, #0
 800e2d6:	f1ca 0301 	rsb	r3, sl, #1
 800e2da:	f8cd 9008 	str.w	r9, [sp, #8]
 800e2de:	f8cd b000 	str.w	fp, [sp]
 800e2e2:	9306      	str	r3, [sp, #24]
 800e2e4:	42b7      	cmp	r7, r6
 800e2e6:	d340      	bcc.n	800e36a <__gethex+0x21e>
 800e2e8:	9802      	ldr	r0, [sp, #8]
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	f840 3b04 	str.w	r3, [r0], #4
 800e2f0:	eba0 0009 	sub.w	r0, r0, r9
 800e2f4:	1080      	asrs	r0, r0, #2
 800e2f6:	0146      	lsls	r6, r0, #5
 800e2f8:	6120      	str	r0, [r4, #16]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 fb5e 	bl	800e9bc <__hi0bits>
 800e300:	1a30      	subs	r0, r6, r0
 800e302:	f8d8 6000 	ldr.w	r6, [r8]
 800e306:	42b0      	cmp	r0, r6
 800e308:	dd63      	ble.n	800e3d2 <__gethex+0x286>
 800e30a:	1b87      	subs	r7, r0, r6
 800e30c:	4639      	mov	r1, r7
 800e30e:	4620      	mov	r0, r4
 800e310:	f000 ff02 	bl	800f118 <__any_on>
 800e314:	4682      	mov	sl, r0
 800e316:	b1a8      	cbz	r0, 800e344 <__gethex+0x1f8>
 800e318:	1e7b      	subs	r3, r7, #1
 800e31a:	1159      	asrs	r1, r3, #5
 800e31c:	f003 021f 	and.w	r2, r3, #31
 800e320:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e324:	f04f 0a01 	mov.w	sl, #1
 800e328:	fa0a f202 	lsl.w	r2, sl, r2
 800e32c:	420a      	tst	r2, r1
 800e32e:	d009      	beq.n	800e344 <__gethex+0x1f8>
 800e330:	4553      	cmp	r3, sl
 800e332:	dd05      	ble.n	800e340 <__gethex+0x1f4>
 800e334:	1eb9      	subs	r1, r7, #2
 800e336:	4620      	mov	r0, r4
 800e338:	f000 feee 	bl	800f118 <__any_on>
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d145      	bne.n	800e3cc <__gethex+0x280>
 800e340:	f04f 0a02 	mov.w	sl, #2
 800e344:	4639      	mov	r1, r7
 800e346:	4620      	mov	r0, r4
 800e348:	f7ff fe98 	bl	800e07c <rshift>
 800e34c:	443d      	add	r5, r7
 800e34e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e352:	42ab      	cmp	r3, r5
 800e354:	da4c      	bge.n	800e3f0 <__gethex+0x2a4>
 800e356:	ee18 0a10 	vmov	r0, s16
 800e35a:	4621      	mov	r1, r4
 800e35c:	f000 fa7c 	bl	800e858 <_Bfree>
 800e360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e362:	2300      	movs	r3, #0
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	27a3      	movs	r7, #163	; 0xa3
 800e368:	e785      	b.n	800e276 <__gethex+0x12a>
 800e36a:	1e73      	subs	r3, r6, #1
 800e36c:	9a05      	ldr	r2, [sp, #20]
 800e36e:	9303      	str	r3, [sp, #12]
 800e370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e374:	4293      	cmp	r3, r2
 800e376:	d019      	beq.n	800e3ac <__gethex+0x260>
 800e378:	f1bb 0f20 	cmp.w	fp, #32
 800e37c:	d107      	bne.n	800e38e <__gethex+0x242>
 800e37e:	9b02      	ldr	r3, [sp, #8]
 800e380:	9a00      	ldr	r2, [sp, #0]
 800e382:	f843 2b04 	str.w	r2, [r3], #4
 800e386:	9302      	str	r3, [sp, #8]
 800e388:	2300      	movs	r3, #0
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	469b      	mov	fp, r3
 800e38e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e392:	f7ff fec5 	bl	800e120 <__hexdig_fun>
 800e396:	9b00      	ldr	r3, [sp, #0]
 800e398:	f000 000f 	and.w	r0, r0, #15
 800e39c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e3a0:	4303      	orrs	r3, r0
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	f10b 0b04 	add.w	fp, fp, #4
 800e3a8:	9b03      	ldr	r3, [sp, #12]
 800e3aa:	e00d      	b.n	800e3c8 <__gethex+0x27c>
 800e3ac:	9b03      	ldr	r3, [sp, #12]
 800e3ae:	9a06      	ldr	r2, [sp, #24]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	42bb      	cmp	r3, r7
 800e3b4:	d3e0      	bcc.n	800e378 <__gethex+0x22c>
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	9901      	ldr	r1, [sp, #4]
 800e3ba:	9307      	str	r3, [sp, #28]
 800e3bc:	4652      	mov	r2, sl
 800e3be:	f001 fca7 	bl	800fd10 <strncmp>
 800e3c2:	9b07      	ldr	r3, [sp, #28]
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d1d7      	bne.n	800e378 <__gethex+0x22c>
 800e3c8:	461e      	mov	r6, r3
 800e3ca:	e78b      	b.n	800e2e4 <__gethex+0x198>
 800e3cc:	f04f 0a03 	mov.w	sl, #3
 800e3d0:	e7b8      	b.n	800e344 <__gethex+0x1f8>
 800e3d2:	da0a      	bge.n	800e3ea <__gethex+0x29e>
 800e3d4:	1a37      	subs	r7, r6, r0
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	ee18 0a10 	vmov	r0, s16
 800e3dc:	463a      	mov	r2, r7
 800e3de:	f000 fc57 	bl	800ec90 <__lshift>
 800e3e2:	1bed      	subs	r5, r5, r7
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	f100 0914 	add.w	r9, r0, #20
 800e3ea:	f04f 0a00 	mov.w	sl, #0
 800e3ee:	e7ae      	b.n	800e34e <__gethex+0x202>
 800e3f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e3f4:	42a8      	cmp	r0, r5
 800e3f6:	dd72      	ble.n	800e4de <__gethex+0x392>
 800e3f8:	1b45      	subs	r5, r0, r5
 800e3fa:	42ae      	cmp	r6, r5
 800e3fc:	dc36      	bgt.n	800e46c <__gethex+0x320>
 800e3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e402:	2b02      	cmp	r3, #2
 800e404:	d02a      	beq.n	800e45c <__gethex+0x310>
 800e406:	2b03      	cmp	r3, #3
 800e408:	d02c      	beq.n	800e464 <__gethex+0x318>
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d11c      	bne.n	800e448 <__gethex+0x2fc>
 800e40e:	42ae      	cmp	r6, r5
 800e410:	d11a      	bne.n	800e448 <__gethex+0x2fc>
 800e412:	2e01      	cmp	r6, #1
 800e414:	d112      	bne.n	800e43c <__gethex+0x2f0>
 800e416:	9a04      	ldr	r2, [sp, #16]
 800e418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e41c:	6013      	str	r3, [r2, #0]
 800e41e:	2301      	movs	r3, #1
 800e420:	6123      	str	r3, [r4, #16]
 800e422:	f8c9 3000 	str.w	r3, [r9]
 800e426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e428:	2762      	movs	r7, #98	; 0x62
 800e42a:	601c      	str	r4, [r3, #0]
 800e42c:	e723      	b.n	800e276 <__gethex+0x12a>
 800e42e:	bf00      	nop
 800e430:	080129d0 	.word	0x080129d0
 800e434:	08012958 	.word	0x08012958
 800e438:	08012969 	.word	0x08012969
 800e43c:	1e71      	subs	r1, r6, #1
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fe6a 	bl	800f118 <__any_on>
 800e444:	2800      	cmp	r0, #0
 800e446:	d1e6      	bne.n	800e416 <__gethex+0x2ca>
 800e448:	ee18 0a10 	vmov	r0, s16
 800e44c:	4621      	mov	r1, r4
 800e44e:	f000 fa03 	bl	800e858 <_Bfree>
 800e452:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e454:	2300      	movs	r3, #0
 800e456:	6013      	str	r3, [r2, #0]
 800e458:	2750      	movs	r7, #80	; 0x50
 800e45a:	e70c      	b.n	800e276 <__gethex+0x12a>
 800e45c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1f2      	bne.n	800e448 <__gethex+0x2fc>
 800e462:	e7d8      	b.n	800e416 <__gethex+0x2ca>
 800e464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1d5      	bne.n	800e416 <__gethex+0x2ca>
 800e46a:	e7ed      	b.n	800e448 <__gethex+0x2fc>
 800e46c:	1e6f      	subs	r7, r5, #1
 800e46e:	f1ba 0f00 	cmp.w	sl, #0
 800e472:	d131      	bne.n	800e4d8 <__gethex+0x38c>
 800e474:	b127      	cbz	r7, 800e480 <__gethex+0x334>
 800e476:	4639      	mov	r1, r7
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 fe4d 	bl	800f118 <__any_on>
 800e47e:	4682      	mov	sl, r0
 800e480:	117b      	asrs	r3, r7, #5
 800e482:	2101      	movs	r1, #1
 800e484:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e488:	f007 071f 	and.w	r7, r7, #31
 800e48c:	fa01 f707 	lsl.w	r7, r1, r7
 800e490:	421f      	tst	r7, r3
 800e492:	4629      	mov	r1, r5
 800e494:	4620      	mov	r0, r4
 800e496:	bf18      	it	ne
 800e498:	f04a 0a02 	orrne.w	sl, sl, #2
 800e49c:	1b76      	subs	r6, r6, r5
 800e49e:	f7ff fded 	bl	800e07c <rshift>
 800e4a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4a6:	2702      	movs	r7, #2
 800e4a8:	f1ba 0f00 	cmp.w	sl, #0
 800e4ac:	d048      	beq.n	800e540 <__gethex+0x3f4>
 800e4ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d015      	beq.n	800e4e2 <__gethex+0x396>
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d017      	beq.n	800e4ea <__gethex+0x39e>
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d109      	bne.n	800e4d2 <__gethex+0x386>
 800e4be:	f01a 0f02 	tst.w	sl, #2
 800e4c2:	d006      	beq.n	800e4d2 <__gethex+0x386>
 800e4c4:	f8d9 0000 	ldr.w	r0, [r9]
 800e4c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e4cc:	f01a 0f01 	tst.w	sl, #1
 800e4d0:	d10e      	bne.n	800e4f0 <__gethex+0x3a4>
 800e4d2:	f047 0710 	orr.w	r7, r7, #16
 800e4d6:	e033      	b.n	800e540 <__gethex+0x3f4>
 800e4d8:	f04f 0a01 	mov.w	sl, #1
 800e4dc:	e7d0      	b.n	800e480 <__gethex+0x334>
 800e4de:	2701      	movs	r7, #1
 800e4e0:	e7e2      	b.n	800e4a8 <__gethex+0x35c>
 800e4e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e4:	f1c3 0301 	rsb	r3, r3, #1
 800e4e8:	9315      	str	r3, [sp, #84]	; 0x54
 800e4ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d0f0      	beq.n	800e4d2 <__gethex+0x386>
 800e4f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4f4:	f104 0314 	add.w	r3, r4, #20
 800e4f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e500:	f04f 0c00 	mov.w	ip, #0
 800e504:	4618      	mov	r0, r3
 800e506:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e50e:	d01c      	beq.n	800e54a <__gethex+0x3fe>
 800e510:	3201      	adds	r2, #1
 800e512:	6002      	str	r2, [r0, #0]
 800e514:	2f02      	cmp	r7, #2
 800e516:	f104 0314 	add.w	r3, r4, #20
 800e51a:	d13f      	bne.n	800e59c <__gethex+0x450>
 800e51c:	f8d8 2000 	ldr.w	r2, [r8]
 800e520:	3a01      	subs	r2, #1
 800e522:	42b2      	cmp	r2, r6
 800e524:	d10a      	bne.n	800e53c <__gethex+0x3f0>
 800e526:	1171      	asrs	r1, r6, #5
 800e528:	2201      	movs	r2, #1
 800e52a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e52e:	f006 061f 	and.w	r6, r6, #31
 800e532:	fa02 f606 	lsl.w	r6, r2, r6
 800e536:	421e      	tst	r6, r3
 800e538:	bf18      	it	ne
 800e53a:	4617      	movne	r7, r2
 800e53c:	f047 0720 	orr.w	r7, r7, #32
 800e540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e542:	601c      	str	r4, [r3, #0]
 800e544:	9b04      	ldr	r3, [sp, #16]
 800e546:	601d      	str	r5, [r3, #0]
 800e548:	e695      	b.n	800e276 <__gethex+0x12a>
 800e54a:	4299      	cmp	r1, r3
 800e54c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e550:	d8d8      	bhi.n	800e504 <__gethex+0x3b8>
 800e552:	68a3      	ldr	r3, [r4, #8]
 800e554:	459b      	cmp	fp, r3
 800e556:	db19      	blt.n	800e58c <__gethex+0x440>
 800e558:	6861      	ldr	r1, [r4, #4]
 800e55a:	ee18 0a10 	vmov	r0, s16
 800e55e:	3101      	adds	r1, #1
 800e560:	f000 f93a 	bl	800e7d8 <_Balloc>
 800e564:	4681      	mov	r9, r0
 800e566:	b918      	cbnz	r0, 800e570 <__gethex+0x424>
 800e568:	4b1a      	ldr	r3, [pc, #104]	; (800e5d4 <__gethex+0x488>)
 800e56a:	4602      	mov	r2, r0
 800e56c:	2184      	movs	r1, #132	; 0x84
 800e56e:	e6a8      	b.n	800e2c2 <__gethex+0x176>
 800e570:	6922      	ldr	r2, [r4, #16]
 800e572:	3202      	adds	r2, #2
 800e574:	f104 010c 	add.w	r1, r4, #12
 800e578:	0092      	lsls	r2, r2, #2
 800e57a:	300c      	adds	r0, #12
 800e57c:	f000 f91e 	bl	800e7bc <memcpy>
 800e580:	4621      	mov	r1, r4
 800e582:	ee18 0a10 	vmov	r0, s16
 800e586:	f000 f967 	bl	800e858 <_Bfree>
 800e58a:	464c      	mov	r4, r9
 800e58c:	6923      	ldr	r3, [r4, #16]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e594:	6122      	str	r2, [r4, #16]
 800e596:	2201      	movs	r2, #1
 800e598:	615a      	str	r2, [r3, #20]
 800e59a:	e7bb      	b.n	800e514 <__gethex+0x3c8>
 800e59c:	6922      	ldr	r2, [r4, #16]
 800e59e:	455a      	cmp	r2, fp
 800e5a0:	dd0b      	ble.n	800e5ba <__gethex+0x46e>
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f7ff fd69 	bl	800e07c <rshift>
 800e5aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5ae:	3501      	adds	r5, #1
 800e5b0:	42ab      	cmp	r3, r5
 800e5b2:	f6ff aed0 	blt.w	800e356 <__gethex+0x20a>
 800e5b6:	2701      	movs	r7, #1
 800e5b8:	e7c0      	b.n	800e53c <__gethex+0x3f0>
 800e5ba:	f016 061f 	ands.w	r6, r6, #31
 800e5be:	d0fa      	beq.n	800e5b6 <__gethex+0x46a>
 800e5c0:	4453      	add	r3, sl
 800e5c2:	f1c6 0620 	rsb	r6, r6, #32
 800e5c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e5ca:	f000 f9f7 	bl	800e9bc <__hi0bits>
 800e5ce:	42b0      	cmp	r0, r6
 800e5d0:	dbe7      	blt.n	800e5a2 <__gethex+0x456>
 800e5d2:	e7f0      	b.n	800e5b6 <__gethex+0x46a>
 800e5d4:	08012958 	.word	0x08012958

0800e5d8 <L_shift>:
 800e5d8:	f1c2 0208 	rsb	r2, r2, #8
 800e5dc:	0092      	lsls	r2, r2, #2
 800e5de:	b570      	push	{r4, r5, r6, lr}
 800e5e0:	f1c2 0620 	rsb	r6, r2, #32
 800e5e4:	6843      	ldr	r3, [r0, #4]
 800e5e6:	6804      	ldr	r4, [r0, #0]
 800e5e8:	fa03 f506 	lsl.w	r5, r3, r6
 800e5ec:	432c      	orrs	r4, r5
 800e5ee:	40d3      	lsrs	r3, r2
 800e5f0:	6004      	str	r4, [r0, #0]
 800e5f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5f6:	4288      	cmp	r0, r1
 800e5f8:	d3f4      	bcc.n	800e5e4 <L_shift+0xc>
 800e5fa:	bd70      	pop	{r4, r5, r6, pc}

0800e5fc <__match>:
 800e5fc:	b530      	push	{r4, r5, lr}
 800e5fe:	6803      	ldr	r3, [r0, #0]
 800e600:	3301      	adds	r3, #1
 800e602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e606:	b914      	cbnz	r4, 800e60e <__match+0x12>
 800e608:	6003      	str	r3, [r0, #0]
 800e60a:	2001      	movs	r0, #1
 800e60c:	bd30      	pop	{r4, r5, pc}
 800e60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e616:	2d19      	cmp	r5, #25
 800e618:	bf98      	it	ls
 800e61a:	3220      	addls	r2, #32
 800e61c:	42a2      	cmp	r2, r4
 800e61e:	d0f0      	beq.n	800e602 <__match+0x6>
 800e620:	2000      	movs	r0, #0
 800e622:	e7f3      	b.n	800e60c <__match+0x10>

0800e624 <__hexnan>:
 800e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e628:	680b      	ldr	r3, [r1, #0]
 800e62a:	115e      	asrs	r6, r3, #5
 800e62c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e630:	f013 031f 	ands.w	r3, r3, #31
 800e634:	b087      	sub	sp, #28
 800e636:	bf18      	it	ne
 800e638:	3604      	addne	r6, #4
 800e63a:	2500      	movs	r5, #0
 800e63c:	1f37      	subs	r7, r6, #4
 800e63e:	4690      	mov	r8, r2
 800e640:	6802      	ldr	r2, [r0, #0]
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	4682      	mov	sl, r0
 800e646:	f846 5c04 	str.w	r5, [r6, #-4]
 800e64a:	46b9      	mov	r9, r7
 800e64c:	463c      	mov	r4, r7
 800e64e:	9502      	str	r5, [sp, #8]
 800e650:	46ab      	mov	fp, r5
 800e652:	7851      	ldrb	r1, [r2, #1]
 800e654:	1c53      	adds	r3, r2, #1
 800e656:	9303      	str	r3, [sp, #12]
 800e658:	b341      	cbz	r1, 800e6ac <__hexnan+0x88>
 800e65a:	4608      	mov	r0, r1
 800e65c:	9205      	str	r2, [sp, #20]
 800e65e:	9104      	str	r1, [sp, #16]
 800e660:	f7ff fd5e 	bl	800e120 <__hexdig_fun>
 800e664:	2800      	cmp	r0, #0
 800e666:	d14f      	bne.n	800e708 <__hexnan+0xe4>
 800e668:	9904      	ldr	r1, [sp, #16]
 800e66a:	9a05      	ldr	r2, [sp, #20]
 800e66c:	2920      	cmp	r1, #32
 800e66e:	d818      	bhi.n	800e6a2 <__hexnan+0x7e>
 800e670:	9b02      	ldr	r3, [sp, #8]
 800e672:	459b      	cmp	fp, r3
 800e674:	dd13      	ble.n	800e69e <__hexnan+0x7a>
 800e676:	454c      	cmp	r4, r9
 800e678:	d206      	bcs.n	800e688 <__hexnan+0x64>
 800e67a:	2d07      	cmp	r5, #7
 800e67c:	dc04      	bgt.n	800e688 <__hexnan+0x64>
 800e67e:	462a      	mov	r2, r5
 800e680:	4649      	mov	r1, r9
 800e682:	4620      	mov	r0, r4
 800e684:	f7ff ffa8 	bl	800e5d8 <L_shift>
 800e688:	4544      	cmp	r4, r8
 800e68a:	d950      	bls.n	800e72e <__hexnan+0x10a>
 800e68c:	2300      	movs	r3, #0
 800e68e:	f1a4 0904 	sub.w	r9, r4, #4
 800e692:	f844 3c04 	str.w	r3, [r4, #-4]
 800e696:	f8cd b008 	str.w	fp, [sp, #8]
 800e69a:	464c      	mov	r4, r9
 800e69c:	461d      	mov	r5, r3
 800e69e:	9a03      	ldr	r2, [sp, #12]
 800e6a0:	e7d7      	b.n	800e652 <__hexnan+0x2e>
 800e6a2:	2929      	cmp	r1, #41	; 0x29
 800e6a4:	d156      	bne.n	800e754 <__hexnan+0x130>
 800e6a6:	3202      	adds	r2, #2
 800e6a8:	f8ca 2000 	str.w	r2, [sl]
 800e6ac:	f1bb 0f00 	cmp.w	fp, #0
 800e6b0:	d050      	beq.n	800e754 <__hexnan+0x130>
 800e6b2:	454c      	cmp	r4, r9
 800e6b4:	d206      	bcs.n	800e6c4 <__hexnan+0xa0>
 800e6b6:	2d07      	cmp	r5, #7
 800e6b8:	dc04      	bgt.n	800e6c4 <__hexnan+0xa0>
 800e6ba:	462a      	mov	r2, r5
 800e6bc:	4649      	mov	r1, r9
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7ff ff8a 	bl	800e5d8 <L_shift>
 800e6c4:	4544      	cmp	r4, r8
 800e6c6:	d934      	bls.n	800e732 <__hexnan+0x10e>
 800e6c8:	f1a8 0204 	sub.w	r2, r8, #4
 800e6cc:	4623      	mov	r3, r4
 800e6ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800e6d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6d6:	429f      	cmp	r7, r3
 800e6d8:	d2f9      	bcs.n	800e6ce <__hexnan+0xaa>
 800e6da:	1b3b      	subs	r3, r7, r4
 800e6dc:	f023 0303 	bic.w	r3, r3, #3
 800e6e0:	3304      	adds	r3, #4
 800e6e2:	3401      	adds	r4, #1
 800e6e4:	3e03      	subs	r6, #3
 800e6e6:	42b4      	cmp	r4, r6
 800e6e8:	bf88      	it	hi
 800e6ea:	2304      	movhi	r3, #4
 800e6ec:	4443      	add	r3, r8
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f843 2b04 	str.w	r2, [r3], #4
 800e6f4:	429f      	cmp	r7, r3
 800e6f6:	d2fb      	bcs.n	800e6f0 <__hexnan+0xcc>
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	b91b      	cbnz	r3, 800e704 <__hexnan+0xe0>
 800e6fc:	4547      	cmp	r7, r8
 800e6fe:	d127      	bne.n	800e750 <__hexnan+0x12c>
 800e700:	2301      	movs	r3, #1
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	2005      	movs	r0, #5
 800e706:	e026      	b.n	800e756 <__hexnan+0x132>
 800e708:	3501      	adds	r5, #1
 800e70a:	2d08      	cmp	r5, #8
 800e70c:	f10b 0b01 	add.w	fp, fp, #1
 800e710:	dd06      	ble.n	800e720 <__hexnan+0xfc>
 800e712:	4544      	cmp	r4, r8
 800e714:	d9c3      	bls.n	800e69e <__hexnan+0x7a>
 800e716:	2300      	movs	r3, #0
 800e718:	f844 3c04 	str.w	r3, [r4, #-4]
 800e71c:	2501      	movs	r5, #1
 800e71e:	3c04      	subs	r4, #4
 800e720:	6822      	ldr	r2, [r4, #0]
 800e722:	f000 000f 	and.w	r0, r0, #15
 800e726:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e72a:	6022      	str	r2, [r4, #0]
 800e72c:	e7b7      	b.n	800e69e <__hexnan+0x7a>
 800e72e:	2508      	movs	r5, #8
 800e730:	e7b5      	b.n	800e69e <__hexnan+0x7a>
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d0df      	beq.n	800e6f8 <__hexnan+0xd4>
 800e738:	f04f 32ff 	mov.w	r2, #4294967295
 800e73c:	f1c3 0320 	rsb	r3, r3, #32
 800e740:	fa22 f303 	lsr.w	r3, r2, r3
 800e744:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e748:	401a      	ands	r2, r3
 800e74a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e74e:	e7d3      	b.n	800e6f8 <__hexnan+0xd4>
 800e750:	3f04      	subs	r7, #4
 800e752:	e7d1      	b.n	800e6f8 <__hexnan+0xd4>
 800e754:	2004      	movs	r0, #4
 800e756:	b007      	add	sp, #28
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e75c <_localeconv_r>:
 800e75c:	4800      	ldr	r0, [pc, #0]	; (800e760 <_localeconv_r+0x4>)
 800e75e:	4770      	bx	lr
 800e760:	2000016c 	.word	0x2000016c

0800e764 <_lseek_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d07      	ldr	r5, [pc, #28]	; (800e784 <_lseek_r+0x20>)
 800e768:	4604      	mov	r4, r0
 800e76a:	4608      	mov	r0, r1
 800e76c:	4611      	mov	r1, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	602a      	str	r2, [r5, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	f7f7 f966 	bl	8005a44 <_lseek>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_lseek_r+0x1e>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_lseek_r+0x1e>
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	2000122c 	.word	0x2000122c

0800e788 <malloc>:
 800e788:	4b02      	ldr	r3, [pc, #8]	; (800e794 <malloc+0xc>)
 800e78a:	4601      	mov	r1, r0
 800e78c:	6818      	ldr	r0, [r3, #0]
 800e78e:	f000 bd67 	b.w	800f260 <_malloc_r>
 800e792:	bf00      	nop
 800e794:	20000014 	.word	0x20000014

0800e798 <__ascii_mbtowc>:
 800e798:	b082      	sub	sp, #8
 800e79a:	b901      	cbnz	r1, 800e79e <__ascii_mbtowc+0x6>
 800e79c:	a901      	add	r1, sp, #4
 800e79e:	b142      	cbz	r2, 800e7b2 <__ascii_mbtowc+0x1a>
 800e7a0:	b14b      	cbz	r3, 800e7b6 <__ascii_mbtowc+0x1e>
 800e7a2:	7813      	ldrb	r3, [r2, #0]
 800e7a4:	600b      	str	r3, [r1, #0]
 800e7a6:	7812      	ldrb	r2, [r2, #0]
 800e7a8:	1e10      	subs	r0, r2, #0
 800e7aa:	bf18      	it	ne
 800e7ac:	2001      	movne	r0, #1
 800e7ae:	b002      	add	sp, #8
 800e7b0:	4770      	bx	lr
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	e7fb      	b.n	800e7ae <__ascii_mbtowc+0x16>
 800e7b6:	f06f 0001 	mvn.w	r0, #1
 800e7ba:	e7f8      	b.n	800e7ae <__ascii_mbtowc+0x16>

0800e7bc <memcpy>:
 800e7bc:	440a      	add	r2, r1
 800e7be:	4291      	cmp	r1, r2
 800e7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7c4:	d100      	bne.n	800e7c8 <memcpy+0xc>
 800e7c6:	4770      	bx	lr
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7d2:	4291      	cmp	r1, r2
 800e7d4:	d1f9      	bne.n	800e7ca <memcpy+0xe>
 800e7d6:	bd10      	pop	{r4, pc}

0800e7d8 <_Balloc>:
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7dc:	4604      	mov	r4, r0
 800e7de:	460d      	mov	r5, r1
 800e7e0:	b976      	cbnz	r6, 800e800 <_Balloc+0x28>
 800e7e2:	2010      	movs	r0, #16
 800e7e4:	f7ff ffd0 	bl	800e788 <malloc>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	6260      	str	r0, [r4, #36]	; 0x24
 800e7ec:	b920      	cbnz	r0, 800e7f8 <_Balloc+0x20>
 800e7ee:	4b18      	ldr	r3, [pc, #96]	; (800e850 <_Balloc+0x78>)
 800e7f0:	4818      	ldr	r0, [pc, #96]	; (800e854 <_Balloc+0x7c>)
 800e7f2:	2166      	movs	r1, #102	; 0x66
 800e7f4:	f001 fb5c 	bl	800feb0 <__assert_func>
 800e7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7fc:	6006      	str	r6, [r0, #0]
 800e7fe:	60c6      	str	r6, [r0, #12]
 800e800:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e802:	68f3      	ldr	r3, [r6, #12]
 800e804:	b183      	cbz	r3, 800e828 <_Balloc+0x50>
 800e806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e80e:	b9b8      	cbnz	r0, 800e840 <_Balloc+0x68>
 800e810:	2101      	movs	r1, #1
 800e812:	fa01 f605 	lsl.w	r6, r1, r5
 800e816:	1d72      	adds	r2, r6, #5
 800e818:	0092      	lsls	r2, r2, #2
 800e81a:	4620      	mov	r0, r4
 800e81c:	f000 fc9d 	bl	800f15a <_calloc_r>
 800e820:	b160      	cbz	r0, 800e83c <_Balloc+0x64>
 800e822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e826:	e00e      	b.n	800e846 <_Balloc+0x6e>
 800e828:	2221      	movs	r2, #33	; 0x21
 800e82a:	2104      	movs	r1, #4
 800e82c:	4620      	mov	r0, r4
 800e82e:	f000 fc94 	bl	800f15a <_calloc_r>
 800e832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e834:	60f0      	str	r0, [r6, #12]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1e4      	bne.n	800e806 <_Balloc+0x2e>
 800e83c:	2000      	movs	r0, #0
 800e83e:	bd70      	pop	{r4, r5, r6, pc}
 800e840:	6802      	ldr	r2, [r0, #0]
 800e842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e846:	2300      	movs	r3, #0
 800e848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e84c:	e7f7      	b.n	800e83e <_Balloc+0x66>
 800e84e:	bf00      	nop
 800e850:	080128e6 	.word	0x080128e6
 800e854:	080129e4 	.word	0x080129e4

0800e858 <_Bfree>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e85c:	4605      	mov	r5, r0
 800e85e:	460c      	mov	r4, r1
 800e860:	b976      	cbnz	r6, 800e880 <_Bfree+0x28>
 800e862:	2010      	movs	r0, #16
 800e864:	f7ff ff90 	bl	800e788 <malloc>
 800e868:	4602      	mov	r2, r0
 800e86a:	6268      	str	r0, [r5, #36]	; 0x24
 800e86c:	b920      	cbnz	r0, 800e878 <_Bfree+0x20>
 800e86e:	4b09      	ldr	r3, [pc, #36]	; (800e894 <_Bfree+0x3c>)
 800e870:	4809      	ldr	r0, [pc, #36]	; (800e898 <_Bfree+0x40>)
 800e872:	218a      	movs	r1, #138	; 0x8a
 800e874:	f001 fb1c 	bl	800feb0 <__assert_func>
 800e878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e87c:	6006      	str	r6, [r0, #0]
 800e87e:	60c6      	str	r6, [r0, #12]
 800e880:	b13c      	cbz	r4, 800e892 <_Bfree+0x3a>
 800e882:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e884:	6862      	ldr	r2, [r4, #4]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e88c:	6021      	str	r1, [r4, #0]
 800e88e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e892:	bd70      	pop	{r4, r5, r6, pc}
 800e894:	080128e6 	.word	0x080128e6
 800e898:	080129e4 	.word	0x080129e4

0800e89c <__multadd>:
 800e89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a0:	690d      	ldr	r5, [r1, #16]
 800e8a2:	4607      	mov	r7, r0
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	461e      	mov	r6, r3
 800e8a8:	f101 0c14 	add.w	ip, r1, #20
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e8b2:	b299      	uxth	r1, r3
 800e8b4:	fb02 6101 	mla	r1, r2, r1, r6
 800e8b8:	0c1e      	lsrs	r6, r3, #16
 800e8ba:	0c0b      	lsrs	r3, r1, #16
 800e8bc:	fb02 3306 	mla	r3, r2, r6, r3
 800e8c0:	b289      	uxth	r1, r1
 800e8c2:	3001      	adds	r0, #1
 800e8c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8c8:	4285      	cmp	r5, r0
 800e8ca:	f84c 1b04 	str.w	r1, [ip], #4
 800e8ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8d2:	dcec      	bgt.n	800e8ae <__multadd+0x12>
 800e8d4:	b30e      	cbz	r6, 800e91a <__multadd+0x7e>
 800e8d6:	68a3      	ldr	r3, [r4, #8]
 800e8d8:	42ab      	cmp	r3, r5
 800e8da:	dc19      	bgt.n	800e910 <__multadd+0x74>
 800e8dc:	6861      	ldr	r1, [r4, #4]
 800e8de:	4638      	mov	r0, r7
 800e8e0:	3101      	adds	r1, #1
 800e8e2:	f7ff ff79 	bl	800e7d8 <_Balloc>
 800e8e6:	4680      	mov	r8, r0
 800e8e8:	b928      	cbnz	r0, 800e8f6 <__multadd+0x5a>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <__multadd+0x84>)
 800e8ee:	480d      	ldr	r0, [pc, #52]	; (800e924 <__multadd+0x88>)
 800e8f0:	21b5      	movs	r1, #181	; 0xb5
 800e8f2:	f001 fadd 	bl	800feb0 <__assert_func>
 800e8f6:	6922      	ldr	r2, [r4, #16]
 800e8f8:	3202      	adds	r2, #2
 800e8fa:	f104 010c 	add.w	r1, r4, #12
 800e8fe:	0092      	lsls	r2, r2, #2
 800e900:	300c      	adds	r0, #12
 800e902:	f7ff ff5b 	bl	800e7bc <memcpy>
 800e906:	4621      	mov	r1, r4
 800e908:	4638      	mov	r0, r7
 800e90a:	f7ff ffa5 	bl	800e858 <_Bfree>
 800e90e:	4644      	mov	r4, r8
 800e910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e914:	3501      	adds	r5, #1
 800e916:	615e      	str	r6, [r3, #20]
 800e918:	6125      	str	r5, [r4, #16]
 800e91a:	4620      	mov	r0, r4
 800e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e920:	08012958 	.word	0x08012958
 800e924:	080129e4 	.word	0x080129e4

0800e928 <__s2b>:
 800e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e92c:	460c      	mov	r4, r1
 800e92e:	4615      	mov	r5, r2
 800e930:	461f      	mov	r7, r3
 800e932:	2209      	movs	r2, #9
 800e934:	3308      	adds	r3, #8
 800e936:	4606      	mov	r6, r0
 800e938:	fb93 f3f2 	sdiv	r3, r3, r2
 800e93c:	2100      	movs	r1, #0
 800e93e:	2201      	movs	r2, #1
 800e940:	429a      	cmp	r2, r3
 800e942:	db09      	blt.n	800e958 <__s2b+0x30>
 800e944:	4630      	mov	r0, r6
 800e946:	f7ff ff47 	bl	800e7d8 <_Balloc>
 800e94a:	b940      	cbnz	r0, 800e95e <__s2b+0x36>
 800e94c:	4602      	mov	r2, r0
 800e94e:	4b19      	ldr	r3, [pc, #100]	; (800e9b4 <__s2b+0x8c>)
 800e950:	4819      	ldr	r0, [pc, #100]	; (800e9b8 <__s2b+0x90>)
 800e952:	21ce      	movs	r1, #206	; 0xce
 800e954:	f001 faac 	bl	800feb0 <__assert_func>
 800e958:	0052      	lsls	r2, r2, #1
 800e95a:	3101      	adds	r1, #1
 800e95c:	e7f0      	b.n	800e940 <__s2b+0x18>
 800e95e:	9b08      	ldr	r3, [sp, #32]
 800e960:	6143      	str	r3, [r0, #20]
 800e962:	2d09      	cmp	r5, #9
 800e964:	f04f 0301 	mov.w	r3, #1
 800e968:	6103      	str	r3, [r0, #16]
 800e96a:	dd16      	ble.n	800e99a <__s2b+0x72>
 800e96c:	f104 0909 	add.w	r9, r4, #9
 800e970:	46c8      	mov	r8, r9
 800e972:	442c      	add	r4, r5
 800e974:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e978:	4601      	mov	r1, r0
 800e97a:	3b30      	subs	r3, #48	; 0x30
 800e97c:	220a      	movs	r2, #10
 800e97e:	4630      	mov	r0, r6
 800e980:	f7ff ff8c 	bl	800e89c <__multadd>
 800e984:	45a0      	cmp	r8, r4
 800e986:	d1f5      	bne.n	800e974 <__s2b+0x4c>
 800e988:	f1a5 0408 	sub.w	r4, r5, #8
 800e98c:	444c      	add	r4, r9
 800e98e:	1b2d      	subs	r5, r5, r4
 800e990:	1963      	adds	r3, r4, r5
 800e992:	42bb      	cmp	r3, r7
 800e994:	db04      	blt.n	800e9a0 <__s2b+0x78>
 800e996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e99a:	340a      	adds	r4, #10
 800e99c:	2509      	movs	r5, #9
 800e99e:	e7f6      	b.n	800e98e <__s2b+0x66>
 800e9a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9a4:	4601      	mov	r1, r0
 800e9a6:	3b30      	subs	r3, #48	; 0x30
 800e9a8:	220a      	movs	r2, #10
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7ff ff76 	bl	800e89c <__multadd>
 800e9b0:	e7ee      	b.n	800e990 <__s2b+0x68>
 800e9b2:	bf00      	nop
 800e9b4:	08012958 	.word	0x08012958
 800e9b8:	080129e4 	.word	0x080129e4

0800e9bc <__hi0bits>:
 800e9bc:	0c03      	lsrs	r3, r0, #16
 800e9be:	041b      	lsls	r3, r3, #16
 800e9c0:	b9d3      	cbnz	r3, 800e9f8 <__hi0bits+0x3c>
 800e9c2:	0400      	lsls	r0, r0, #16
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e9ca:	bf04      	itt	eq
 800e9cc:	0200      	lsleq	r0, r0, #8
 800e9ce:	3308      	addeq	r3, #8
 800e9d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e9d4:	bf04      	itt	eq
 800e9d6:	0100      	lsleq	r0, r0, #4
 800e9d8:	3304      	addeq	r3, #4
 800e9da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e9de:	bf04      	itt	eq
 800e9e0:	0080      	lsleq	r0, r0, #2
 800e9e2:	3302      	addeq	r3, #2
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	db05      	blt.n	800e9f4 <__hi0bits+0x38>
 800e9e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e9ec:	f103 0301 	add.w	r3, r3, #1
 800e9f0:	bf08      	it	eq
 800e9f2:	2320      	moveq	r3, #32
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	4770      	bx	lr
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	e7e4      	b.n	800e9c6 <__hi0bits+0xa>

0800e9fc <__lo0bits>:
 800e9fc:	6803      	ldr	r3, [r0, #0]
 800e9fe:	f013 0207 	ands.w	r2, r3, #7
 800ea02:	4601      	mov	r1, r0
 800ea04:	d00b      	beq.n	800ea1e <__lo0bits+0x22>
 800ea06:	07da      	lsls	r2, r3, #31
 800ea08:	d423      	bmi.n	800ea52 <__lo0bits+0x56>
 800ea0a:	0798      	lsls	r0, r3, #30
 800ea0c:	bf49      	itett	mi
 800ea0e:	085b      	lsrmi	r3, r3, #1
 800ea10:	089b      	lsrpl	r3, r3, #2
 800ea12:	2001      	movmi	r0, #1
 800ea14:	600b      	strmi	r3, [r1, #0]
 800ea16:	bf5c      	itt	pl
 800ea18:	600b      	strpl	r3, [r1, #0]
 800ea1a:	2002      	movpl	r0, #2
 800ea1c:	4770      	bx	lr
 800ea1e:	b298      	uxth	r0, r3
 800ea20:	b9a8      	cbnz	r0, 800ea4e <__lo0bits+0x52>
 800ea22:	0c1b      	lsrs	r3, r3, #16
 800ea24:	2010      	movs	r0, #16
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	b90a      	cbnz	r2, 800ea2e <__lo0bits+0x32>
 800ea2a:	3008      	adds	r0, #8
 800ea2c:	0a1b      	lsrs	r3, r3, #8
 800ea2e:	071a      	lsls	r2, r3, #28
 800ea30:	bf04      	itt	eq
 800ea32:	091b      	lsreq	r3, r3, #4
 800ea34:	3004      	addeq	r0, #4
 800ea36:	079a      	lsls	r2, r3, #30
 800ea38:	bf04      	itt	eq
 800ea3a:	089b      	lsreq	r3, r3, #2
 800ea3c:	3002      	addeq	r0, #2
 800ea3e:	07da      	lsls	r2, r3, #31
 800ea40:	d403      	bmi.n	800ea4a <__lo0bits+0x4e>
 800ea42:	085b      	lsrs	r3, r3, #1
 800ea44:	f100 0001 	add.w	r0, r0, #1
 800ea48:	d005      	beq.n	800ea56 <__lo0bits+0x5a>
 800ea4a:	600b      	str	r3, [r1, #0]
 800ea4c:	4770      	bx	lr
 800ea4e:	4610      	mov	r0, r2
 800ea50:	e7e9      	b.n	800ea26 <__lo0bits+0x2a>
 800ea52:	2000      	movs	r0, #0
 800ea54:	4770      	bx	lr
 800ea56:	2020      	movs	r0, #32
 800ea58:	4770      	bx	lr
	...

0800ea5c <__i2b>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	460c      	mov	r4, r1
 800ea60:	2101      	movs	r1, #1
 800ea62:	f7ff feb9 	bl	800e7d8 <_Balloc>
 800ea66:	4602      	mov	r2, r0
 800ea68:	b928      	cbnz	r0, 800ea76 <__i2b+0x1a>
 800ea6a:	4b05      	ldr	r3, [pc, #20]	; (800ea80 <__i2b+0x24>)
 800ea6c:	4805      	ldr	r0, [pc, #20]	; (800ea84 <__i2b+0x28>)
 800ea6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea72:	f001 fa1d 	bl	800feb0 <__assert_func>
 800ea76:	2301      	movs	r3, #1
 800ea78:	6144      	str	r4, [r0, #20]
 800ea7a:	6103      	str	r3, [r0, #16]
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	bf00      	nop
 800ea80:	08012958 	.word	0x08012958
 800ea84:	080129e4 	.word	0x080129e4

0800ea88 <__multiply>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	4691      	mov	r9, r2
 800ea8e:	690a      	ldr	r2, [r1, #16]
 800ea90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	bfb8      	it	lt
 800ea98:	460b      	movlt	r3, r1
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	bfbc      	itt	lt
 800ea9e:	464c      	movlt	r4, r9
 800eaa0:	4699      	movlt	r9, r3
 800eaa2:	6927      	ldr	r7, [r4, #16]
 800eaa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eaa8:	68a3      	ldr	r3, [r4, #8]
 800eaaa:	6861      	ldr	r1, [r4, #4]
 800eaac:	eb07 060a 	add.w	r6, r7, sl
 800eab0:	42b3      	cmp	r3, r6
 800eab2:	b085      	sub	sp, #20
 800eab4:	bfb8      	it	lt
 800eab6:	3101      	addlt	r1, #1
 800eab8:	f7ff fe8e 	bl	800e7d8 <_Balloc>
 800eabc:	b930      	cbnz	r0, 800eacc <__multiply+0x44>
 800eabe:	4602      	mov	r2, r0
 800eac0:	4b44      	ldr	r3, [pc, #272]	; (800ebd4 <__multiply+0x14c>)
 800eac2:	4845      	ldr	r0, [pc, #276]	; (800ebd8 <__multiply+0x150>)
 800eac4:	f240 115d 	movw	r1, #349	; 0x15d
 800eac8:	f001 f9f2 	bl	800feb0 <__assert_func>
 800eacc:	f100 0514 	add.w	r5, r0, #20
 800ead0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ead4:	462b      	mov	r3, r5
 800ead6:	2200      	movs	r2, #0
 800ead8:	4543      	cmp	r3, r8
 800eada:	d321      	bcc.n	800eb20 <__multiply+0x98>
 800eadc:	f104 0314 	add.w	r3, r4, #20
 800eae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eae4:	f109 0314 	add.w	r3, r9, #20
 800eae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eaec:	9202      	str	r2, [sp, #8]
 800eaee:	1b3a      	subs	r2, r7, r4
 800eaf0:	3a15      	subs	r2, #21
 800eaf2:	f022 0203 	bic.w	r2, r2, #3
 800eaf6:	3204      	adds	r2, #4
 800eaf8:	f104 0115 	add.w	r1, r4, #21
 800eafc:	428f      	cmp	r7, r1
 800eafe:	bf38      	it	cc
 800eb00:	2204      	movcc	r2, #4
 800eb02:	9201      	str	r2, [sp, #4]
 800eb04:	9a02      	ldr	r2, [sp, #8]
 800eb06:	9303      	str	r3, [sp, #12]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d80c      	bhi.n	800eb26 <__multiply+0x9e>
 800eb0c:	2e00      	cmp	r6, #0
 800eb0e:	dd03      	ble.n	800eb18 <__multiply+0x90>
 800eb10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d05a      	beq.n	800ebce <__multiply+0x146>
 800eb18:	6106      	str	r6, [r0, #16]
 800eb1a:	b005      	add	sp, #20
 800eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb20:	f843 2b04 	str.w	r2, [r3], #4
 800eb24:	e7d8      	b.n	800ead8 <__multiply+0x50>
 800eb26:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb2a:	f1ba 0f00 	cmp.w	sl, #0
 800eb2e:	d024      	beq.n	800eb7a <__multiply+0xf2>
 800eb30:	f104 0e14 	add.w	lr, r4, #20
 800eb34:	46a9      	mov	r9, r5
 800eb36:	f04f 0c00 	mov.w	ip, #0
 800eb3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eb3e:	f8d9 1000 	ldr.w	r1, [r9]
 800eb42:	fa1f fb82 	uxth.w	fp, r2
 800eb46:	b289      	uxth	r1, r1
 800eb48:	fb0a 110b 	mla	r1, sl, fp, r1
 800eb4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eb50:	f8d9 2000 	ldr.w	r2, [r9]
 800eb54:	4461      	add	r1, ip
 800eb56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800eb5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb62:	b289      	uxth	r1, r1
 800eb64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb68:	4577      	cmp	r7, lr
 800eb6a:	f849 1b04 	str.w	r1, [r9], #4
 800eb6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb72:	d8e2      	bhi.n	800eb3a <__multiply+0xb2>
 800eb74:	9a01      	ldr	r2, [sp, #4]
 800eb76:	f845 c002 	str.w	ip, [r5, r2]
 800eb7a:	9a03      	ldr	r2, [sp, #12]
 800eb7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb80:	3304      	adds	r3, #4
 800eb82:	f1b9 0f00 	cmp.w	r9, #0
 800eb86:	d020      	beq.n	800ebca <__multiply+0x142>
 800eb88:	6829      	ldr	r1, [r5, #0]
 800eb8a:	f104 0c14 	add.w	ip, r4, #20
 800eb8e:	46ae      	mov	lr, r5
 800eb90:	f04f 0a00 	mov.w	sl, #0
 800eb94:	f8bc b000 	ldrh.w	fp, [ip]
 800eb98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb9c:	fb09 220b 	mla	r2, r9, fp, r2
 800eba0:	4492      	add	sl, r2
 800eba2:	b289      	uxth	r1, r1
 800eba4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eba8:	f84e 1b04 	str.w	r1, [lr], #4
 800ebac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ebb0:	f8be 1000 	ldrh.w	r1, [lr]
 800ebb4:	0c12      	lsrs	r2, r2, #16
 800ebb6:	fb09 1102 	mla	r1, r9, r2, r1
 800ebba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ebbe:	4567      	cmp	r7, ip
 800ebc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ebc4:	d8e6      	bhi.n	800eb94 <__multiply+0x10c>
 800ebc6:	9a01      	ldr	r2, [sp, #4]
 800ebc8:	50a9      	str	r1, [r5, r2]
 800ebca:	3504      	adds	r5, #4
 800ebcc:	e79a      	b.n	800eb04 <__multiply+0x7c>
 800ebce:	3e01      	subs	r6, #1
 800ebd0:	e79c      	b.n	800eb0c <__multiply+0x84>
 800ebd2:	bf00      	nop
 800ebd4:	08012958 	.word	0x08012958
 800ebd8:	080129e4 	.word	0x080129e4

0800ebdc <__pow5mult>:
 800ebdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe0:	4615      	mov	r5, r2
 800ebe2:	f012 0203 	ands.w	r2, r2, #3
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	460f      	mov	r7, r1
 800ebea:	d007      	beq.n	800ebfc <__pow5mult+0x20>
 800ebec:	4c25      	ldr	r4, [pc, #148]	; (800ec84 <__pow5mult+0xa8>)
 800ebee:	3a01      	subs	r2, #1
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebf6:	f7ff fe51 	bl	800e89c <__multadd>
 800ebfa:	4607      	mov	r7, r0
 800ebfc:	10ad      	asrs	r5, r5, #2
 800ebfe:	d03d      	beq.n	800ec7c <__pow5mult+0xa0>
 800ec00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec02:	b97c      	cbnz	r4, 800ec24 <__pow5mult+0x48>
 800ec04:	2010      	movs	r0, #16
 800ec06:	f7ff fdbf 	bl	800e788 <malloc>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	6270      	str	r0, [r6, #36]	; 0x24
 800ec0e:	b928      	cbnz	r0, 800ec1c <__pow5mult+0x40>
 800ec10:	4b1d      	ldr	r3, [pc, #116]	; (800ec88 <__pow5mult+0xac>)
 800ec12:	481e      	ldr	r0, [pc, #120]	; (800ec8c <__pow5mult+0xb0>)
 800ec14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec18:	f001 f94a 	bl	800feb0 <__assert_func>
 800ec1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec20:	6004      	str	r4, [r0, #0]
 800ec22:	60c4      	str	r4, [r0, #12]
 800ec24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec2c:	b94c      	cbnz	r4, 800ec42 <__pow5mult+0x66>
 800ec2e:	f240 2171 	movw	r1, #625	; 0x271
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7ff ff12 	bl	800ea5c <__i2b>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec3e:	4604      	mov	r4, r0
 800ec40:	6003      	str	r3, [r0, #0]
 800ec42:	f04f 0900 	mov.w	r9, #0
 800ec46:	07eb      	lsls	r3, r5, #31
 800ec48:	d50a      	bpl.n	800ec60 <__pow5mult+0x84>
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	4630      	mov	r0, r6
 800ec50:	f7ff ff1a 	bl	800ea88 <__multiply>
 800ec54:	4639      	mov	r1, r7
 800ec56:	4680      	mov	r8, r0
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7ff fdfd 	bl	800e858 <_Bfree>
 800ec5e:	4647      	mov	r7, r8
 800ec60:	106d      	asrs	r5, r5, #1
 800ec62:	d00b      	beq.n	800ec7c <__pow5mult+0xa0>
 800ec64:	6820      	ldr	r0, [r4, #0]
 800ec66:	b938      	cbnz	r0, 800ec78 <__pow5mult+0x9c>
 800ec68:	4622      	mov	r2, r4
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f7ff ff0b 	bl	800ea88 <__multiply>
 800ec72:	6020      	str	r0, [r4, #0]
 800ec74:	f8c0 9000 	str.w	r9, [r0]
 800ec78:	4604      	mov	r4, r0
 800ec7a:	e7e4      	b.n	800ec46 <__pow5mult+0x6a>
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec82:	bf00      	nop
 800ec84:	08012b30 	.word	0x08012b30
 800ec88:	080128e6 	.word	0x080128e6
 800ec8c:	080129e4 	.word	0x080129e4

0800ec90 <__lshift>:
 800ec90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec94:	460c      	mov	r4, r1
 800ec96:	6849      	ldr	r1, [r1, #4]
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec9e:	68a3      	ldr	r3, [r4, #8]
 800eca0:	4607      	mov	r7, r0
 800eca2:	4691      	mov	r9, r2
 800eca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eca8:	f108 0601 	add.w	r6, r8, #1
 800ecac:	42b3      	cmp	r3, r6
 800ecae:	db0b      	blt.n	800ecc8 <__lshift+0x38>
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	f7ff fd91 	bl	800e7d8 <_Balloc>
 800ecb6:	4605      	mov	r5, r0
 800ecb8:	b948      	cbnz	r0, 800ecce <__lshift+0x3e>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	4b2a      	ldr	r3, [pc, #168]	; (800ed68 <__lshift+0xd8>)
 800ecbe:	482b      	ldr	r0, [pc, #172]	; (800ed6c <__lshift+0xdc>)
 800ecc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ecc4:	f001 f8f4 	bl	800feb0 <__assert_func>
 800ecc8:	3101      	adds	r1, #1
 800ecca:	005b      	lsls	r3, r3, #1
 800eccc:	e7ee      	b.n	800ecac <__lshift+0x1c>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f100 0114 	add.w	r1, r0, #20
 800ecd4:	f100 0210 	add.w	r2, r0, #16
 800ecd8:	4618      	mov	r0, r3
 800ecda:	4553      	cmp	r3, sl
 800ecdc:	db37      	blt.n	800ed4e <__lshift+0xbe>
 800ecde:	6920      	ldr	r0, [r4, #16]
 800ece0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ece4:	f104 0314 	add.w	r3, r4, #20
 800ece8:	f019 091f 	ands.w	r9, r9, #31
 800ecec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ecf4:	d02f      	beq.n	800ed56 <__lshift+0xc6>
 800ecf6:	f1c9 0e20 	rsb	lr, r9, #32
 800ecfa:	468a      	mov	sl, r1
 800ecfc:	f04f 0c00 	mov.w	ip, #0
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	fa02 f209 	lsl.w	r2, r2, r9
 800ed06:	ea42 020c 	orr.w	r2, r2, ip
 800ed0a:	f84a 2b04 	str.w	r2, [sl], #4
 800ed0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed12:	4298      	cmp	r0, r3
 800ed14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ed18:	d8f2      	bhi.n	800ed00 <__lshift+0x70>
 800ed1a:	1b03      	subs	r3, r0, r4
 800ed1c:	3b15      	subs	r3, #21
 800ed1e:	f023 0303 	bic.w	r3, r3, #3
 800ed22:	3304      	adds	r3, #4
 800ed24:	f104 0215 	add.w	r2, r4, #21
 800ed28:	4290      	cmp	r0, r2
 800ed2a:	bf38      	it	cc
 800ed2c:	2304      	movcc	r3, #4
 800ed2e:	f841 c003 	str.w	ip, [r1, r3]
 800ed32:	f1bc 0f00 	cmp.w	ip, #0
 800ed36:	d001      	beq.n	800ed3c <__lshift+0xac>
 800ed38:	f108 0602 	add.w	r6, r8, #2
 800ed3c:	3e01      	subs	r6, #1
 800ed3e:	4638      	mov	r0, r7
 800ed40:	612e      	str	r6, [r5, #16]
 800ed42:	4621      	mov	r1, r4
 800ed44:	f7ff fd88 	bl	800e858 <_Bfree>
 800ed48:	4628      	mov	r0, r5
 800ed4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed52:	3301      	adds	r3, #1
 800ed54:	e7c1      	b.n	800ecda <__lshift+0x4a>
 800ed56:	3904      	subs	r1, #4
 800ed58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed60:	4298      	cmp	r0, r3
 800ed62:	d8f9      	bhi.n	800ed58 <__lshift+0xc8>
 800ed64:	e7ea      	b.n	800ed3c <__lshift+0xac>
 800ed66:	bf00      	nop
 800ed68:	08012958 	.word	0x08012958
 800ed6c:	080129e4 	.word	0x080129e4

0800ed70 <__mcmp>:
 800ed70:	b530      	push	{r4, r5, lr}
 800ed72:	6902      	ldr	r2, [r0, #16]
 800ed74:	690c      	ldr	r4, [r1, #16]
 800ed76:	1b12      	subs	r2, r2, r4
 800ed78:	d10e      	bne.n	800ed98 <__mcmp+0x28>
 800ed7a:	f100 0314 	add.w	r3, r0, #20
 800ed7e:	3114      	adds	r1, #20
 800ed80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed90:	42a5      	cmp	r5, r4
 800ed92:	d003      	beq.n	800ed9c <__mcmp+0x2c>
 800ed94:	d305      	bcc.n	800eda2 <__mcmp+0x32>
 800ed96:	2201      	movs	r2, #1
 800ed98:	4610      	mov	r0, r2
 800ed9a:	bd30      	pop	{r4, r5, pc}
 800ed9c:	4283      	cmp	r3, r0
 800ed9e:	d3f3      	bcc.n	800ed88 <__mcmp+0x18>
 800eda0:	e7fa      	b.n	800ed98 <__mcmp+0x28>
 800eda2:	f04f 32ff 	mov.w	r2, #4294967295
 800eda6:	e7f7      	b.n	800ed98 <__mcmp+0x28>

0800eda8 <__mdiff>:
 800eda8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	460c      	mov	r4, r1
 800edae:	4606      	mov	r6, r0
 800edb0:	4611      	mov	r1, r2
 800edb2:	4620      	mov	r0, r4
 800edb4:	4690      	mov	r8, r2
 800edb6:	f7ff ffdb 	bl	800ed70 <__mcmp>
 800edba:	1e05      	subs	r5, r0, #0
 800edbc:	d110      	bne.n	800ede0 <__mdiff+0x38>
 800edbe:	4629      	mov	r1, r5
 800edc0:	4630      	mov	r0, r6
 800edc2:	f7ff fd09 	bl	800e7d8 <_Balloc>
 800edc6:	b930      	cbnz	r0, 800edd6 <__mdiff+0x2e>
 800edc8:	4b3a      	ldr	r3, [pc, #232]	; (800eeb4 <__mdiff+0x10c>)
 800edca:	4602      	mov	r2, r0
 800edcc:	f240 2132 	movw	r1, #562	; 0x232
 800edd0:	4839      	ldr	r0, [pc, #228]	; (800eeb8 <__mdiff+0x110>)
 800edd2:	f001 f86d 	bl	800feb0 <__assert_func>
 800edd6:	2301      	movs	r3, #1
 800edd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede0:	bfa4      	itt	ge
 800ede2:	4643      	movge	r3, r8
 800ede4:	46a0      	movge	r8, r4
 800ede6:	4630      	mov	r0, r6
 800ede8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800edec:	bfa6      	itte	ge
 800edee:	461c      	movge	r4, r3
 800edf0:	2500      	movge	r5, #0
 800edf2:	2501      	movlt	r5, #1
 800edf4:	f7ff fcf0 	bl	800e7d8 <_Balloc>
 800edf8:	b920      	cbnz	r0, 800ee04 <__mdiff+0x5c>
 800edfa:	4b2e      	ldr	r3, [pc, #184]	; (800eeb4 <__mdiff+0x10c>)
 800edfc:	4602      	mov	r2, r0
 800edfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ee02:	e7e5      	b.n	800edd0 <__mdiff+0x28>
 800ee04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee08:	6926      	ldr	r6, [r4, #16]
 800ee0a:	60c5      	str	r5, [r0, #12]
 800ee0c:	f104 0914 	add.w	r9, r4, #20
 800ee10:	f108 0514 	add.w	r5, r8, #20
 800ee14:	f100 0e14 	add.w	lr, r0, #20
 800ee18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ee1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee20:	f108 0210 	add.w	r2, r8, #16
 800ee24:	46f2      	mov	sl, lr
 800ee26:	2100      	movs	r1, #0
 800ee28:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee30:	fa1f f883 	uxth.w	r8, r3
 800ee34:	fa11 f18b 	uxtah	r1, r1, fp
 800ee38:	0c1b      	lsrs	r3, r3, #16
 800ee3a:	eba1 0808 	sub.w	r8, r1, r8
 800ee3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee46:	fa1f f888 	uxth.w	r8, r8
 800ee4a:	1419      	asrs	r1, r3, #16
 800ee4c:	454e      	cmp	r6, r9
 800ee4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ee52:	f84a 3b04 	str.w	r3, [sl], #4
 800ee56:	d8e7      	bhi.n	800ee28 <__mdiff+0x80>
 800ee58:	1b33      	subs	r3, r6, r4
 800ee5a:	3b15      	subs	r3, #21
 800ee5c:	f023 0303 	bic.w	r3, r3, #3
 800ee60:	3304      	adds	r3, #4
 800ee62:	3415      	adds	r4, #21
 800ee64:	42a6      	cmp	r6, r4
 800ee66:	bf38      	it	cc
 800ee68:	2304      	movcc	r3, #4
 800ee6a:	441d      	add	r5, r3
 800ee6c:	4473      	add	r3, lr
 800ee6e:	469e      	mov	lr, r3
 800ee70:	462e      	mov	r6, r5
 800ee72:	4566      	cmp	r6, ip
 800ee74:	d30e      	bcc.n	800ee94 <__mdiff+0xec>
 800ee76:	f10c 0203 	add.w	r2, ip, #3
 800ee7a:	1b52      	subs	r2, r2, r5
 800ee7c:	f022 0203 	bic.w	r2, r2, #3
 800ee80:	3d03      	subs	r5, #3
 800ee82:	45ac      	cmp	ip, r5
 800ee84:	bf38      	it	cc
 800ee86:	2200      	movcc	r2, #0
 800ee88:	441a      	add	r2, r3
 800ee8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee8e:	b17b      	cbz	r3, 800eeb0 <__mdiff+0x108>
 800ee90:	6107      	str	r7, [r0, #16]
 800ee92:	e7a3      	b.n	800eddc <__mdiff+0x34>
 800ee94:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee98:	fa11 f288 	uxtah	r2, r1, r8
 800ee9c:	1414      	asrs	r4, r2, #16
 800ee9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eea2:	b292      	uxth	r2, r2
 800eea4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eea8:	f84e 2b04 	str.w	r2, [lr], #4
 800eeac:	1421      	asrs	r1, r4, #16
 800eeae:	e7e0      	b.n	800ee72 <__mdiff+0xca>
 800eeb0:	3f01      	subs	r7, #1
 800eeb2:	e7ea      	b.n	800ee8a <__mdiff+0xe2>
 800eeb4:	08012958 	.word	0x08012958
 800eeb8:	080129e4 	.word	0x080129e4

0800eebc <__ulp>:
 800eebc:	b082      	sub	sp, #8
 800eebe:	ed8d 0b00 	vstr	d0, [sp]
 800eec2:	9b01      	ldr	r3, [sp, #4]
 800eec4:	4912      	ldr	r1, [pc, #72]	; (800ef10 <__ulp+0x54>)
 800eec6:	4019      	ands	r1, r3
 800eec8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800eecc:	2900      	cmp	r1, #0
 800eece:	dd05      	ble.n	800eedc <__ulp+0x20>
 800eed0:	2200      	movs	r2, #0
 800eed2:	460b      	mov	r3, r1
 800eed4:	ec43 2b10 	vmov	d0, r2, r3
 800eed8:	b002      	add	sp, #8
 800eeda:	4770      	bx	lr
 800eedc:	4249      	negs	r1, r1
 800eede:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eee2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eee6:	f04f 0200 	mov.w	r2, #0
 800eeea:	f04f 0300 	mov.w	r3, #0
 800eeee:	da04      	bge.n	800eefa <__ulp+0x3e>
 800eef0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eef4:	fa41 f300 	asr.w	r3, r1, r0
 800eef8:	e7ec      	b.n	800eed4 <__ulp+0x18>
 800eefa:	f1a0 0114 	sub.w	r1, r0, #20
 800eefe:	291e      	cmp	r1, #30
 800ef00:	bfda      	itte	le
 800ef02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ef06:	fa20 f101 	lsrle.w	r1, r0, r1
 800ef0a:	2101      	movgt	r1, #1
 800ef0c:	460a      	mov	r2, r1
 800ef0e:	e7e1      	b.n	800eed4 <__ulp+0x18>
 800ef10:	7ff00000 	.word	0x7ff00000

0800ef14 <__b2d>:
 800ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef16:	6905      	ldr	r5, [r0, #16]
 800ef18:	f100 0714 	add.w	r7, r0, #20
 800ef1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ef20:	1f2e      	subs	r6, r5, #4
 800ef22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ef26:	4620      	mov	r0, r4
 800ef28:	f7ff fd48 	bl	800e9bc <__hi0bits>
 800ef2c:	f1c0 0320 	rsb	r3, r0, #32
 800ef30:	280a      	cmp	r0, #10
 800ef32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800efb0 <__b2d+0x9c>
 800ef36:	600b      	str	r3, [r1, #0]
 800ef38:	dc14      	bgt.n	800ef64 <__b2d+0x50>
 800ef3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ef3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ef42:	42b7      	cmp	r7, r6
 800ef44:	ea41 030c 	orr.w	r3, r1, ip
 800ef48:	bf34      	ite	cc
 800ef4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ef4e:	2100      	movcs	r1, #0
 800ef50:	3015      	adds	r0, #21
 800ef52:	fa04 f000 	lsl.w	r0, r4, r0
 800ef56:	fa21 f10e 	lsr.w	r1, r1, lr
 800ef5a:	ea40 0201 	orr.w	r2, r0, r1
 800ef5e:	ec43 2b10 	vmov	d0, r2, r3
 800ef62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef64:	42b7      	cmp	r7, r6
 800ef66:	bf3a      	itte	cc
 800ef68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ef6c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ef70:	2100      	movcs	r1, #0
 800ef72:	380b      	subs	r0, #11
 800ef74:	d017      	beq.n	800efa6 <__b2d+0x92>
 800ef76:	f1c0 0c20 	rsb	ip, r0, #32
 800ef7a:	fa04 f500 	lsl.w	r5, r4, r0
 800ef7e:	42be      	cmp	r6, r7
 800ef80:	fa21 f40c 	lsr.w	r4, r1, ip
 800ef84:	ea45 0504 	orr.w	r5, r5, r4
 800ef88:	bf8c      	ite	hi
 800ef8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ef8e:	2400      	movls	r4, #0
 800ef90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ef94:	fa01 f000 	lsl.w	r0, r1, r0
 800ef98:	fa24 f40c 	lsr.w	r4, r4, ip
 800ef9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800efa0:	ea40 0204 	orr.w	r2, r0, r4
 800efa4:	e7db      	b.n	800ef5e <__b2d+0x4a>
 800efa6:	ea44 030c 	orr.w	r3, r4, ip
 800efaa:	460a      	mov	r2, r1
 800efac:	e7d7      	b.n	800ef5e <__b2d+0x4a>
 800efae:	bf00      	nop
 800efb0:	3ff00000 	.word	0x3ff00000

0800efb4 <__d2b>:
 800efb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efb8:	4689      	mov	r9, r1
 800efba:	2101      	movs	r1, #1
 800efbc:	ec57 6b10 	vmov	r6, r7, d0
 800efc0:	4690      	mov	r8, r2
 800efc2:	f7ff fc09 	bl	800e7d8 <_Balloc>
 800efc6:	4604      	mov	r4, r0
 800efc8:	b930      	cbnz	r0, 800efd8 <__d2b+0x24>
 800efca:	4602      	mov	r2, r0
 800efcc:	4b25      	ldr	r3, [pc, #148]	; (800f064 <__d2b+0xb0>)
 800efce:	4826      	ldr	r0, [pc, #152]	; (800f068 <__d2b+0xb4>)
 800efd0:	f240 310a 	movw	r1, #778	; 0x30a
 800efd4:	f000 ff6c 	bl	800feb0 <__assert_func>
 800efd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800efdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800efe0:	bb35      	cbnz	r5, 800f030 <__d2b+0x7c>
 800efe2:	2e00      	cmp	r6, #0
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	d028      	beq.n	800f03a <__d2b+0x86>
 800efe8:	4668      	mov	r0, sp
 800efea:	9600      	str	r6, [sp, #0]
 800efec:	f7ff fd06 	bl	800e9fc <__lo0bits>
 800eff0:	9900      	ldr	r1, [sp, #0]
 800eff2:	b300      	cbz	r0, 800f036 <__d2b+0x82>
 800eff4:	9a01      	ldr	r2, [sp, #4]
 800eff6:	f1c0 0320 	rsb	r3, r0, #32
 800effa:	fa02 f303 	lsl.w	r3, r2, r3
 800effe:	430b      	orrs	r3, r1
 800f000:	40c2      	lsrs	r2, r0
 800f002:	6163      	str	r3, [r4, #20]
 800f004:	9201      	str	r2, [sp, #4]
 800f006:	9b01      	ldr	r3, [sp, #4]
 800f008:	61a3      	str	r3, [r4, #24]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	bf14      	ite	ne
 800f00e:	2202      	movne	r2, #2
 800f010:	2201      	moveq	r2, #1
 800f012:	6122      	str	r2, [r4, #16]
 800f014:	b1d5      	cbz	r5, 800f04c <__d2b+0x98>
 800f016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f01a:	4405      	add	r5, r0
 800f01c:	f8c9 5000 	str.w	r5, [r9]
 800f020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f024:	f8c8 0000 	str.w	r0, [r8]
 800f028:	4620      	mov	r0, r4
 800f02a:	b003      	add	sp, #12
 800f02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f034:	e7d5      	b.n	800efe2 <__d2b+0x2e>
 800f036:	6161      	str	r1, [r4, #20]
 800f038:	e7e5      	b.n	800f006 <__d2b+0x52>
 800f03a:	a801      	add	r0, sp, #4
 800f03c:	f7ff fcde 	bl	800e9fc <__lo0bits>
 800f040:	9b01      	ldr	r3, [sp, #4]
 800f042:	6163      	str	r3, [r4, #20]
 800f044:	2201      	movs	r2, #1
 800f046:	6122      	str	r2, [r4, #16]
 800f048:	3020      	adds	r0, #32
 800f04a:	e7e3      	b.n	800f014 <__d2b+0x60>
 800f04c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f054:	f8c9 0000 	str.w	r0, [r9]
 800f058:	6918      	ldr	r0, [r3, #16]
 800f05a:	f7ff fcaf 	bl	800e9bc <__hi0bits>
 800f05e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f062:	e7df      	b.n	800f024 <__d2b+0x70>
 800f064:	08012958 	.word	0x08012958
 800f068:	080129e4 	.word	0x080129e4

0800f06c <__ratio>:
 800f06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	4688      	mov	r8, r1
 800f072:	4669      	mov	r1, sp
 800f074:	4681      	mov	r9, r0
 800f076:	f7ff ff4d 	bl	800ef14 <__b2d>
 800f07a:	a901      	add	r1, sp, #4
 800f07c:	4640      	mov	r0, r8
 800f07e:	ec55 4b10 	vmov	r4, r5, d0
 800f082:	f7ff ff47 	bl	800ef14 <__b2d>
 800f086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f08a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f08e:	eba3 0c02 	sub.w	ip, r3, r2
 800f092:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f096:	1a9b      	subs	r3, r3, r2
 800f098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f09c:	ec51 0b10 	vmov	r0, r1, d0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	bfd6      	itet	le
 800f0a4:	460a      	movle	r2, r1
 800f0a6:	462a      	movgt	r2, r5
 800f0a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f0ac:	468b      	mov	fp, r1
 800f0ae:	462f      	mov	r7, r5
 800f0b0:	bfd4      	ite	le
 800f0b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f0b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	ee10 2a10 	vmov	r2, s0
 800f0c0:	465b      	mov	r3, fp
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f7f1 fbf2 	bl	80008ac <__aeabi_ddiv>
 800f0c8:	ec41 0b10 	vmov	d0, r0, r1
 800f0cc:	b003      	add	sp, #12
 800f0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0d2 <__copybits>:
 800f0d2:	3901      	subs	r1, #1
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	1149      	asrs	r1, r1, #5
 800f0d8:	6914      	ldr	r4, [r2, #16]
 800f0da:	3101      	adds	r1, #1
 800f0dc:	f102 0314 	add.w	r3, r2, #20
 800f0e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0e8:	1f05      	subs	r5, r0, #4
 800f0ea:	42a3      	cmp	r3, r4
 800f0ec:	d30c      	bcc.n	800f108 <__copybits+0x36>
 800f0ee:	1aa3      	subs	r3, r4, r2
 800f0f0:	3b11      	subs	r3, #17
 800f0f2:	f023 0303 	bic.w	r3, r3, #3
 800f0f6:	3211      	adds	r2, #17
 800f0f8:	42a2      	cmp	r2, r4
 800f0fa:	bf88      	it	hi
 800f0fc:	2300      	movhi	r3, #0
 800f0fe:	4418      	add	r0, r3
 800f100:	2300      	movs	r3, #0
 800f102:	4288      	cmp	r0, r1
 800f104:	d305      	bcc.n	800f112 <__copybits+0x40>
 800f106:	bd70      	pop	{r4, r5, r6, pc}
 800f108:	f853 6b04 	ldr.w	r6, [r3], #4
 800f10c:	f845 6f04 	str.w	r6, [r5, #4]!
 800f110:	e7eb      	b.n	800f0ea <__copybits+0x18>
 800f112:	f840 3b04 	str.w	r3, [r0], #4
 800f116:	e7f4      	b.n	800f102 <__copybits+0x30>

0800f118 <__any_on>:
 800f118:	f100 0214 	add.w	r2, r0, #20
 800f11c:	6900      	ldr	r0, [r0, #16]
 800f11e:	114b      	asrs	r3, r1, #5
 800f120:	4298      	cmp	r0, r3
 800f122:	b510      	push	{r4, lr}
 800f124:	db11      	blt.n	800f14a <__any_on+0x32>
 800f126:	dd0a      	ble.n	800f13e <__any_on+0x26>
 800f128:	f011 011f 	ands.w	r1, r1, #31
 800f12c:	d007      	beq.n	800f13e <__any_on+0x26>
 800f12e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f132:	fa24 f001 	lsr.w	r0, r4, r1
 800f136:	fa00 f101 	lsl.w	r1, r0, r1
 800f13a:	428c      	cmp	r4, r1
 800f13c:	d10b      	bne.n	800f156 <__any_on+0x3e>
 800f13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f142:	4293      	cmp	r3, r2
 800f144:	d803      	bhi.n	800f14e <__any_on+0x36>
 800f146:	2000      	movs	r0, #0
 800f148:	bd10      	pop	{r4, pc}
 800f14a:	4603      	mov	r3, r0
 800f14c:	e7f7      	b.n	800f13e <__any_on+0x26>
 800f14e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f152:	2900      	cmp	r1, #0
 800f154:	d0f5      	beq.n	800f142 <__any_on+0x2a>
 800f156:	2001      	movs	r0, #1
 800f158:	e7f6      	b.n	800f148 <__any_on+0x30>

0800f15a <_calloc_r>:
 800f15a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f15c:	fba1 2402 	umull	r2, r4, r1, r2
 800f160:	b94c      	cbnz	r4, 800f176 <_calloc_r+0x1c>
 800f162:	4611      	mov	r1, r2
 800f164:	9201      	str	r2, [sp, #4]
 800f166:	f000 f87b 	bl	800f260 <_malloc_r>
 800f16a:	9a01      	ldr	r2, [sp, #4]
 800f16c:	4605      	mov	r5, r0
 800f16e:	b930      	cbnz	r0, 800f17e <_calloc_r+0x24>
 800f170:	4628      	mov	r0, r5
 800f172:	b003      	add	sp, #12
 800f174:	bd30      	pop	{r4, r5, pc}
 800f176:	220c      	movs	r2, #12
 800f178:	6002      	str	r2, [r0, #0]
 800f17a:	2500      	movs	r5, #0
 800f17c:	e7f8      	b.n	800f170 <_calloc_r+0x16>
 800f17e:	4621      	mov	r1, r4
 800f180:	f7fc fafa 	bl	800b778 <memset>
 800f184:	e7f4      	b.n	800f170 <_calloc_r+0x16>
	...

0800f188 <_free_r>:
 800f188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f18a:	2900      	cmp	r1, #0
 800f18c:	d044      	beq.n	800f218 <_free_r+0x90>
 800f18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f192:	9001      	str	r0, [sp, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f1a1 0404 	sub.w	r4, r1, #4
 800f19a:	bfb8      	it	lt
 800f19c:	18e4      	addlt	r4, r4, r3
 800f19e:	f001 f88b 	bl	80102b8 <__malloc_lock>
 800f1a2:	4a1e      	ldr	r2, [pc, #120]	; (800f21c <_free_r+0x94>)
 800f1a4:	9801      	ldr	r0, [sp, #4]
 800f1a6:	6813      	ldr	r3, [r2, #0]
 800f1a8:	b933      	cbnz	r3, 800f1b8 <_free_r+0x30>
 800f1aa:	6063      	str	r3, [r4, #4]
 800f1ac:	6014      	str	r4, [r2, #0]
 800f1ae:	b003      	add	sp, #12
 800f1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b4:	f001 b886 	b.w	80102c4 <__malloc_unlock>
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	d908      	bls.n	800f1ce <_free_r+0x46>
 800f1bc:	6825      	ldr	r5, [r4, #0]
 800f1be:	1961      	adds	r1, r4, r5
 800f1c0:	428b      	cmp	r3, r1
 800f1c2:	bf01      	itttt	eq
 800f1c4:	6819      	ldreq	r1, [r3, #0]
 800f1c6:	685b      	ldreq	r3, [r3, #4]
 800f1c8:	1949      	addeq	r1, r1, r5
 800f1ca:	6021      	streq	r1, [r4, #0]
 800f1cc:	e7ed      	b.n	800f1aa <_free_r+0x22>
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	b10b      	cbz	r3, 800f1d8 <_free_r+0x50>
 800f1d4:	42a3      	cmp	r3, r4
 800f1d6:	d9fa      	bls.n	800f1ce <_free_r+0x46>
 800f1d8:	6811      	ldr	r1, [r2, #0]
 800f1da:	1855      	adds	r5, r2, r1
 800f1dc:	42a5      	cmp	r5, r4
 800f1de:	d10b      	bne.n	800f1f8 <_free_r+0x70>
 800f1e0:	6824      	ldr	r4, [r4, #0]
 800f1e2:	4421      	add	r1, r4
 800f1e4:	1854      	adds	r4, r2, r1
 800f1e6:	42a3      	cmp	r3, r4
 800f1e8:	6011      	str	r1, [r2, #0]
 800f1ea:	d1e0      	bne.n	800f1ae <_free_r+0x26>
 800f1ec:	681c      	ldr	r4, [r3, #0]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	6053      	str	r3, [r2, #4]
 800f1f2:	4421      	add	r1, r4
 800f1f4:	6011      	str	r1, [r2, #0]
 800f1f6:	e7da      	b.n	800f1ae <_free_r+0x26>
 800f1f8:	d902      	bls.n	800f200 <_free_r+0x78>
 800f1fa:	230c      	movs	r3, #12
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	e7d6      	b.n	800f1ae <_free_r+0x26>
 800f200:	6825      	ldr	r5, [r4, #0]
 800f202:	1961      	adds	r1, r4, r5
 800f204:	428b      	cmp	r3, r1
 800f206:	bf04      	itt	eq
 800f208:	6819      	ldreq	r1, [r3, #0]
 800f20a:	685b      	ldreq	r3, [r3, #4]
 800f20c:	6063      	str	r3, [r4, #4]
 800f20e:	bf04      	itt	eq
 800f210:	1949      	addeq	r1, r1, r5
 800f212:	6021      	streq	r1, [r4, #0]
 800f214:	6054      	str	r4, [r2, #4]
 800f216:	e7ca      	b.n	800f1ae <_free_r+0x26>
 800f218:	b003      	add	sp, #12
 800f21a:	bd30      	pop	{r4, r5, pc}
 800f21c:	20001224 	.word	0x20001224

0800f220 <sbrk_aligned>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4e0e      	ldr	r6, [pc, #56]	; (800f25c <sbrk_aligned+0x3c>)
 800f224:	460c      	mov	r4, r1
 800f226:	6831      	ldr	r1, [r6, #0]
 800f228:	4605      	mov	r5, r0
 800f22a:	b911      	cbnz	r1, 800f232 <sbrk_aligned+0x12>
 800f22c:	f000 fd28 	bl	800fc80 <_sbrk_r>
 800f230:	6030      	str	r0, [r6, #0]
 800f232:	4621      	mov	r1, r4
 800f234:	4628      	mov	r0, r5
 800f236:	f000 fd23 	bl	800fc80 <_sbrk_r>
 800f23a:	1c43      	adds	r3, r0, #1
 800f23c:	d00a      	beq.n	800f254 <sbrk_aligned+0x34>
 800f23e:	1cc4      	adds	r4, r0, #3
 800f240:	f024 0403 	bic.w	r4, r4, #3
 800f244:	42a0      	cmp	r0, r4
 800f246:	d007      	beq.n	800f258 <sbrk_aligned+0x38>
 800f248:	1a21      	subs	r1, r4, r0
 800f24a:	4628      	mov	r0, r5
 800f24c:	f000 fd18 	bl	800fc80 <_sbrk_r>
 800f250:	3001      	adds	r0, #1
 800f252:	d101      	bne.n	800f258 <sbrk_aligned+0x38>
 800f254:	f04f 34ff 	mov.w	r4, #4294967295
 800f258:	4620      	mov	r0, r4
 800f25a:	bd70      	pop	{r4, r5, r6, pc}
 800f25c:	20001228 	.word	0x20001228

0800f260 <_malloc_r>:
 800f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f264:	1ccd      	adds	r5, r1, #3
 800f266:	f025 0503 	bic.w	r5, r5, #3
 800f26a:	3508      	adds	r5, #8
 800f26c:	2d0c      	cmp	r5, #12
 800f26e:	bf38      	it	cc
 800f270:	250c      	movcc	r5, #12
 800f272:	2d00      	cmp	r5, #0
 800f274:	4607      	mov	r7, r0
 800f276:	db01      	blt.n	800f27c <_malloc_r+0x1c>
 800f278:	42a9      	cmp	r1, r5
 800f27a:	d905      	bls.n	800f288 <_malloc_r+0x28>
 800f27c:	230c      	movs	r3, #12
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	2600      	movs	r6, #0
 800f282:	4630      	mov	r0, r6
 800f284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f288:	4e2e      	ldr	r6, [pc, #184]	; (800f344 <_malloc_r+0xe4>)
 800f28a:	f001 f815 	bl	80102b8 <__malloc_lock>
 800f28e:	6833      	ldr	r3, [r6, #0]
 800f290:	461c      	mov	r4, r3
 800f292:	bb34      	cbnz	r4, 800f2e2 <_malloc_r+0x82>
 800f294:	4629      	mov	r1, r5
 800f296:	4638      	mov	r0, r7
 800f298:	f7ff ffc2 	bl	800f220 <sbrk_aligned>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	4604      	mov	r4, r0
 800f2a0:	d14d      	bne.n	800f33e <_malloc_r+0xde>
 800f2a2:	6834      	ldr	r4, [r6, #0]
 800f2a4:	4626      	mov	r6, r4
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d140      	bne.n	800f32c <_malloc_r+0xcc>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	eb04 0803 	add.w	r8, r4, r3
 800f2b4:	f000 fce4 	bl	800fc80 <_sbrk_r>
 800f2b8:	4580      	cmp	r8, r0
 800f2ba:	d13a      	bne.n	800f332 <_malloc_r+0xd2>
 800f2bc:	6821      	ldr	r1, [r4, #0]
 800f2be:	3503      	adds	r5, #3
 800f2c0:	1a6d      	subs	r5, r5, r1
 800f2c2:	f025 0503 	bic.w	r5, r5, #3
 800f2c6:	3508      	adds	r5, #8
 800f2c8:	2d0c      	cmp	r5, #12
 800f2ca:	bf38      	it	cc
 800f2cc:	250c      	movcc	r5, #12
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	4638      	mov	r0, r7
 800f2d2:	f7ff ffa5 	bl	800f220 <sbrk_aligned>
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	d02b      	beq.n	800f332 <_malloc_r+0xd2>
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	442b      	add	r3, r5
 800f2de:	6023      	str	r3, [r4, #0]
 800f2e0:	e00e      	b.n	800f300 <_malloc_r+0xa0>
 800f2e2:	6822      	ldr	r2, [r4, #0]
 800f2e4:	1b52      	subs	r2, r2, r5
 800f2e6:	d41e      	bmi.n	800f326 <_malloc_r+0xc6>
 800f2e8:	2a0b      	cmp	r2, #11
 800f2ea:	d916      	bls.n	800f31a <_malloc_r+0xba>
 800f2ec:	1961      	adds	r1, r4, r5
 800f2ee:	42a3      	cmp	r3, r4
 800f2f0:	6025      	str	r5, [r4, #0]
 800f2f2:	bf18      	it	ne
 800f2f4:	6059      	strne	r1, [r3, #4]
 800f2f6:	6863      	ldr	r3, [r4, #4]
 800f2f8:	bf08      	it	eq
 800f2fa:	6031      	streq	r1, [r6, #0]
 800f2fc:	5162      	str	r2, [r4, r5]
 800f2fe:	604b      	str	r3, [r1, #4]
 800f300:	4638      	mov	r0, r7
 800f302:	f104 060b 	add.w	r6, r4, #11
 800f306:	f000 ffdd 	bl	80102c4 <__malloc_unlock>
 800f30a:	f026 0607 	bic.w	r6, r6, #7
 800f30e:	1d23      	adds	r3, r4, #4
 800f310:	1af2      	subs	r2, r6, r3
 800f312:	d0b6      	beq.n	800f282 <_malloc_r+0x22>
 800f314:	1b9b      	subs	r3, r3, r6
 800f316:	50a3      	str	r3, [r4, r2]
 800f318:	e7b3      	b.n	800f282 <_malloc_r+0x22>
 800f31a:	6862      	ldr	r2, [r4, #4]
 800f31c:	42a3      	cmp	r3, r4
 800f31e:	bf0c      	ite	eq
 800f320:	6032      	streq	r2, [r6, #0]
 800f322:	605a      	strne	r2, [r3, #4]
 800f324:	e7ec      	b.n	800f300 <_malloc_r+0xa0>
 800f326:	4623      	mov	r3, r4
 800f328:	6864      	ldr	r4, [r4, #4]
 800f32a:	e7b2      	b.n	800f292 <_malloc_r+0x32>
 800f32c:	4634      	mov	r4, r6
 800f32e:	6876      	ldr	r6, [r6, #4]
 800f330:	e7b9      	b.n	800f2a6 <_malloc_r+0x46>
 800f332:	230c      	movs	r3, #12
 800f334:	603b      	str	r3, [r7, #0]
 800f336:	4638      	mov	r0, r7
 800f338:	f000 ffc4 	bl	80102c4 <__malloc_unlock>
 800f33c:	e7a1      	b.n	800f282 <_malloc_r+0x22>
 800f33e:	6025      	str	r5, [r4, #0]
 800f340:	e7de      	b.n	800f300 <_malloc_r+0xa0>
 800f342:	bf00      	nop
 800f344:	20001224 	.word	0x20001224

0800f348 <__ssputs_r>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	688e      	ldr	r6, [r1, #8]
 800f34e:	429e      	cmp	r6, r3
 800f350:	4682      	mov	sl, r0
 800f352:	460c      	mov	r4, r1
 800f354:	4690      	mov	r8, r2
 800f356:	461f      	mov	r7, r3
 800f358:	d838      	bhi.n	800f3cc <__ssputs_r+0x84>
 800f35a:	898a      	ldrh	r2, [r1, #12]
 800f35c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f360:	d032      	beq.n	800f3c8 <__ssputs_r+0x80>
 800f362:	6825      	ldr	r5, [r4, #0]
 800f364:	6909      	ldr	r1, [r1, #16]
 800f366:	eba5 0901 	sub.w	r9, r5, r1
 800f36a:	6965      	ldr	r5, [r4, #20]
 800f36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f374:	3301      	adds	r3, #1
 800f376:	444b      	add	r3, r9
 800f378:	106d      	asrs	r5, r5, #1
 800f37a:	429d      	cmp	r5, r3
 800f37c:	bf38      	it	cc
 800f37e:	461d      	movcc	r5, r3
 800f380:	0553      	lsls	r3, r2, #21
 800f382:	d531      	bpl.n	800f3e8 <__ssputs_r+0xa0>
 800f384:	4629      	mov	r1, r5
 800f386:	f7ff ff6b 	bl	800f260 <_malloc_r>
 800f38a:	4606      	mov	r6, r0
 800f38c:	b950      	cbnz	r0, 800f3a4 <__ssputs_r+0x5c>
 800f38e:	230c      	movs	r3, #12
 800f390:	f8ca 3000 	str.w	r3, [sl]
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a4:	6921      	ldr	r1, [r4, #16]
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	f7ff fa08 	bl	800e7bc <memcpy>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b6:	81a3      	strh	r3, [r4, #12]
 800f3b8:	6126      	str	r6, [r4, #16]
 800f3ba:	6165      	str	r5, [r4, #20]
 800f3bc:	444e      	add	r6, r9
 800f3be:	eba5 0509 	sub.w	r5, r5, r9
 800f3c2:	6026      	str	r6, [r4, #0]
 800f3c4:	60a5      	str	r5, [r4, #8]
 800f3c6:	463e      	mov	r6, r7
 800f3c8:	42be      	cmp	r6, r7
 800f3ca:	d900      	bls.n	800f3ce <__ssputs_r+0x86>
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	6820      	ldr	r0, [r4, #0]
 800f3d0:	4632      	mov	r2, r6
 800f3d2:	4641      	mov	r1, r8
 800f3d4:	f000 ff56 	bl	8010284 <memmove>
 800f3d8:	68a3      	ldr	r3, [r4, #8]
 800f3da:	1b9b      	subs	r3, r3, r6
 800f3dc:	60a3      	str	r3, [r4, #8]
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	4433      	add	r3, r6
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	e7db      	b.n	800f3a0 <__ssputs_r+0x58>
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	f000 ff71 	bl	80102d0 <_realloc_r>
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d1e1      	bne.n	800f3b8 <__ssputs_r+0x70>
 800f3f4:	6921      	ldr	r1, [r4, #16]
 800f3f6:	4650      	mov	r0, sl
 800f3f8:	f7ff fec6 	bl	800f188 <_free_r>
 800f3fc:	e7c7      	b.n	800f38e <__ssputs_r+0x46>
	...

0800f400 <_svfiprintf_r>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	4698      	mov	r8, r3
 800f406:	898b      	ldrh	r3, [r1, #12]
 800f408:	061b      	lsls	r3, r3, #24
 800f40a:	b09d      	sub	sp, #116	; 0x74
 800f40c:	4607      	mov	r7, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	4614      	mov	r4, r2
 800f412:	d50e      	bpl.n	800f432 <_svfiprintf_r+0x32>
 800f414:	690b      	ldr	r3, [r1, #16]
 800f416:	b963      	cbnz	r3, 800f432 <_svfiprintf_r+0x32>
 800f418:	2140      	movs	r1, #64	; 0x40
 800f41a:	f7ff ff21 	bl	800f260 <_malloc_r>
 800f41e:	6028      	str	r0, [r5, #0]
 800f420:	6128      	str	r0, [r5, #16]
 800f422:	b920      	cbnz	r0, 800f42e <_svfiprintf_r+0x2e>
 800f424:	230c      	movs	r3, #12
 800f426:	603b      	str	r3, [r7, #0]
 800f428:	f04f 30ff 	mov.w	r0, #4294967295
 800f42c:	e0d1      	b.n	800f5d2 <_svfiprintf_r+0x1d2>
 800f42e:	2340      	movs	r3, #64	; 0x40
 800f430:	616b      	str	r3, [r5, #20]
 800f432:	2300      	movs	r3, #0
 800f434:	9309      	str	r3, [sp, #36]	; 0x24
 800f436:	2320      	movs	r3, #32
 800f438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f43c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f440:	2330      	movs	r3, #48	; 0x30
 800f442:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5ec <_svfiprintf_r+0x1ec>
 800f446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f44a:	f04f 0901 	mov.w	r9, #1
 800f44e:	4623      	mov	r3, r4
 800f450:	469a      	mov	sl, r3
 800f452:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f456:	b10a      	cbz	r2, 800f45c <_svfiprintf_r+0x5c>
 800f458:	2a25      	cmp	r2, #37	; 0x25
 800f45a:	d1f9      	bne.n	800f450 <_svfiprintf_r+0x50>
 800f45c:	ebba 0b04 	subs.w	fp, sl, r4
 800f460:	d00b      	beq.n	800f47a <_svfiprintf_r+0x7a>
 800f462:	465b      	mov	r3, fp
 800f464:	4622      	mov	r2, r4
 800f466:	4629      	mov	r1, r5
 800f468:	4638      	mov	r0, r7
 800f46a:	f7ff ff6d 	bl	800f348 <__ssputs_r>
 800f46e:	3001      	adds	r0, #1
 800f470:	f000 80aa 	beq.w	800f5c8 <_svfiprintf_r+0x1c8>
 800f474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f476:	445a      	add	r2, fp
 800f478:	9209      	str	r2, [sp, #36]	; 0x24
 800f47a:	f89a 3000 	ldrb.w	r3, [sl]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 80a2 	beq.w	800f5c8 <_svfiprintf_r+0x1c8>
 800f484:	2300      	movs	r3, #0
 800f486:	f04f 32ff 	mov.w	r2, #4294967295
 800f48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f48e:	f10a 0a01 	add.w	sl, sl, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	9307      	str	r3, [sp, #28]
 800f496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f49a:	931a      	str	r3, [sp, #104]	; 0x68
 800f49c:	4654      	mov	r4, sl
 800f49e:	2205      	movs	r2, #5
 800f4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4a4:	4851      	ldr	r0, [pc, #324]	; (800f5ec <_svfiprintf_r+0x1ec>)
 800f4a6:	f7f0 fecb 	bl	8000240 <memchr>
 800f4aa:	9a04      	ldr	r2, [sp, #16]
 800f4ac:	b9d8      	cbnz	r0, 800f4e6 <_svfiprintf_r+0xe6>
 800f4ae:	06d0      	lsls	r0, r2, #27
 800f4b0:	bf44      	itt	mi
 800f4b2:	2320      	movmi	r3, #32
 800f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b8:	0711      	lsls	r1, r2, #28
 800f4ba:	bf44      	itt	mi
 800f4bc:	232b      	movmi	r3, #43	; 0x2b
 800f4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c8:	d015      	beq.n	800f4f6 <_svfiprintf_r+0xf6>
 800f4ca:	9a07      	ldr	r2, [sp, #28]
 800f4cc:	4654      	mov	r4, sl
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	f04f 0c0a 	mov.w	ip, #10
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4da:	3b30      	subs	r3, #48	; 0x30
 800f4dc:	2b09      	cmp	r3, #9
 800f4de:	d94e      	bls.n	800f57e <_svfiprintf_r+0x17e>
 800f4e0:	b1b0      	cbz	r0, 800f510 <_svfiprintf_r+0x110>
 800f4e2:	9207      	str	r2, [sp, #28]
 800f4e4:	e014      	b.n	800f510 <_svfiprintf_r+0x110>
 800f4e6:	eba0 0308 	sub.w	r3, r0, r8
 800f4ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	46a2      	mov	sl, r4
 800f4f4:	e7d2      	b.n	800f49c <_svfiprintf_r+0x9c>
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	1d19      	adds	r1, r3, #4
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	9103      	str	r1, [sp, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bfbb      	ittet	lt
 800f502:	425b      	neglt	r3, r3
 800f504:	f042 0202 	orrlt.w	r2, r2, #2
 800f508:	9307      	strge	r3, [sp, #28]
 800f50a:	9307      	strlt	r3, [sp, #28]
 800f50c:	bfb8      	it	lt
 800f50e:	9204      	strlt	r2, [sp, #16]
 800f510:	7823      	ldrb	r3, [r4, #0]
 800f512:	2b2e      	cmp	r3, #46	; 0x2e
 800f514:	d10c      	bne.n	800f530 <_svfiprintf_r+0x130>
 800f516:	7863      	ldrb	r3, [r4, #1]
 800f518:	2b2a      	cmp	r3, #42	; 0x2a
 800f51a:	d135      	bne.n	800f588 <_svfiprintf_r+0x188>
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	1d1a      	adds	r2, r3, #4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	9203      	str	r2, [sp, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	bfb8      	it	lt
 800f528:	f04f 33ff 	movlt.w	r3, #4294967295
 800f52c:	3402      	adds	r4, #2
 800f52e:	9305      	str	r3, [sp, #20]
 800f530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5fc <_svfiprintf_r+0x1fc>
 800f534:	7821      	ldrb	r1, [r4, #0]
 800f536:	2203      	movs	r2, #3
 800f538:	4650      	mov	r0, sl
 800f53a:	f7f0 fe81 	bl	8000240 <memchr>
 800f53e:	b140      	cbz	r0, 800f552 <_svfiprintf_r+0x152>
 800f540:	2340      	movs	r3, #64	; 0x40
 800f542:	eba0 000a 	sub.w	r0, r0, sl
 800f546:	fa03 f000 	lsl.w	r0, r3, r0
 800f54a:	9b04      	ldr	r3, [sp, #16]
 800f54c:	4303      	orrs	r3, r0
 800f54e:	3401      	adds	r4, #1
 800f550:	9304      	str	r3, [sp, #16]
 800f552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f556:	4826      	ldr	r0, [pc, #152]	; (800f5f0 <_svfiprintf_r+0x1f0>)
 800f558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f55c:	2206      	movs	r2, #6
 800f55e:	f7f0 fe6f 	bl	8000240 <memchr>
 800f562:	2800      	cmp	r0, #0
 800f564:	d038      	beq.n	800f5d8 <_svfiprintf_r+0x1d8>
 800f566:	4b23      	ldr	r3, [pc, #140]	; (800f5f4 <_svfiprintf_r+0x1f4>)
 800f568:	bb1b      	cbnz	r3, 800f5b2 <_svfiprintf_r+0x1b2>
 800f56a:	9b03      	ldr	r3, [sp, #12]
 800f56c:	3307      	adds	r3, #7
 800f56e:	f023 0307 	bic.w	r3, r3, #7
 800f572:	3308      	adds	r3, #8
 800f574:	9303      	str	r3, [sp, #12]
 800f576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f578:	4433      	add	r3, r6
 800f57a:	9309      	str	r3, [sp, #36]	; 0x24
 800f57c:	e767      	b.n	800f44e <_svfiprintf_r+0x4e>
 800f57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f582:	460c      	mov	r4, r1
 800f584:	2001      	movs	r0, #1
 800f586:	e7a5      	b.n	800f4d4 <_svfiprintf_r+0xd4>
 800f588:	2300      	movs	r3, #0
 800f58a:	3401      	adds	r4, #1
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	4619      	mov	r1, r3
 800f590:	f04f 0c0a 	mov.w	ip, #10
 800f594:	4620      	mov	r0, r4
 800f596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f59a:	3a30      	subs	r2, #48	; 0x30
 800f59c:	2a09      	cmp	r2, #9
 800f59e:	d903      	bls.n	800f5a8 <_svfiprintf_r+0x1a8>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d0c5      	beq.n	800f530 <_svfiprintf_r+0x130>
 800f5a4:	9105      	str	r1, [sp, #20]
 800f5a6:	e7c3      	b.n	800f530 <_svfiprintf_r+0x130>
 800f5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e7f0      	b.n	800f594 <_svfiprintf_r+0x194>
 800f5b2:	ab03      	add	r3, sp, #12
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	462a      	mov	r2, r5
 800f5b8:	4b0f      	ldr	r3, [pc, #60]	; (800f5f8 <_svfiprintf_r+0x1f8>)
 800f5ba:	a904      	add	r1, sp, #16
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f7fc f983 	bl	800b8c8 <_printf_float>
 800f5c2:	1c42      	adds	r2, r0, #1
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	d1d6      	bne.n	800f576 <_svfiprintf_r+0x176>
 800f5c8:	89ab      	ldrh	r3, [r5, #12]
 800f5ca:	065b      	lsls	r3, r3, #25
 800f5cc:	f53f af2c 	bmi.w	800f428 <_svfiprintf_r+0x28>
 800f5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5d2:	b01d      	add	sp, #116	; 0x74
 800f5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d8:	ab03      	add	r3, sp, #12
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <_svfiprintf_r+0x1f8>)
 800f5e0:	a904      	add	r1, sp, #16
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	f7fc fc14 	bl	800be10 <_printf_i>
 800f5e8:	e7eb      	b.n	800f5c2 <_svfiprintf_r+0x1c2>
 800f5ea:	bf00      	nop
 800f5ec:	08012b3c 	.word	0x08012b3c
 800f5f0:	08012b46 	.word	0x08012b46
 800f5f4:	0800b8c9 	.word	0x0800b8c9
 800f5f8:	0800f349 	.word	0x0800f349
 800f5fc:	08012b42 	.word	0x08012b42

0800f600 <_sungetc_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	1c4b      	adds	r3, r1, #1
 800f604:	4614      	mov	r4, r2
 800f606:	d103      	bne.n	800f610 <_sungetc_r+0x10>
 800f608:	f04f 35ff 	mov.w	r5, #4294967295
 800f60c:	4628      	mov	r0, r5
 800f60e:	bd38      	pop	{r3, r4, r5, pc}
 800f610:	8993      	ldrh	r3, [r2, #12]
 800f612:	f023 0320 	bic.w	r3, r3, #32
 800f616:	8193      	strh	r3, [r2, #12]
 800f618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f61a:	6852      	ldr	r2, [r2, #4]
 800f61c:	b2cd      	uxtb	r5, r1
 800f61e:	b18b      	cbz	r3, 800f644 <_sungetc_r+0x44>
 800f620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f622:	4293      	cmp	r3, r2
 800f624:	dd08      	ble.n	800f638 <_sungetc_r+0x38>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	1e5a      	subs	r2, r3, #1
 800f62a:	6022      	str	r2, [r4, #0]
 800f62c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f630:	6863      	ldr	r3, [r4, #4]
 800f632:	3301      	adds	r3, #1
 800f634:	6063      	str	r3, [r4, #4]
 800f636:	e7e9      	b.n	800f60c <_sungetc_r+0xc>
 800f638:	4621      	mov	r1, r4
 800f63a:	f000 fbf1 	bl	800fe20 <__submore>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d0f1      	beq.n	800f626 <_sungetc_r+0x26>
 800f642:	e7e1      	b.n	800f608 <_sungetc_r+0x8>
 800f644:	6921      	ldr	r1, [r4, #16]
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	b151      	cbz	r1, 800f660 <_sungetc_r+0x60>
 800f64a:	4299      	cmp	r1, r3
 800f64c:	d208      	bcs.n	800f660 <_sungetc_r+0x60>
 800f64e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f652:	42a9      	cmp	r1, r5
 800f654:	d104      	bne.n	800f660 <_sungetc_r+0x60>
 800f656:	3b01      	subs	r3, #1
 800f658:	3201      	adds	r2, #1
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	6062      	str	r2, [r4, #4]
 800f65e:	e7d5      	b.n	800f60c <_sungetc_r+0xc>
 800f660:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f668:	6363      	str	r3, [r4, #52]	; 0x34
 800f66a:	2303      	movs	r3, #3
 800f66c:	63a3      	str	r3, [r4, #56]	; 0x38
 800f66e:	4623      	mov	r3, r4
 800f670:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f674:	6023      	str	r3, [r4, #0]
 800f676:	2301      	movs	r3, #1
 800f678:	e7dc      	b.n	800f634 <_sungetc_r+0x34>

0800f67a <__ssrefill_r>:
 800f67a:	b510      	push	{r4, lr}
 800f67c:	460c      	mov	r4, r1
 800f67e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f680:	b169      	cbz	r1, 800f69e <__ssrefill_r+0x24>
 800f682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f686:	4299      	cmp	r1, r3
 800f688:	d001      	beq.n	800f68e <__ssrefill_r+0x14>
 800f68a:	f7ff fd7d 	bl	800f188 <_free_r>
 800f68e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f690:	6063      	str	r3, [r4, #4]
 800f692:	2000      	movs	r0, #0
 800f694:	6360      	str	r0, [r4, #52]	; 0x34
 800f696:	b113      	cbz	r3, 800f69e <__ssrefill_r+0x24>
 800f698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f69a:	6023      	str	r3, [r4, #0]
 800f69c:	bd10      	pop	{r4, pc}
 800f69e:	6923      	ldr	r3, [r4, #16]
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	6063      	str	r3, [r4, #4]
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	f043 0320 	orr.w	r3, r3, #32
 800f6ac:	81a3      	strh	r3, [r4, #12]
 800f6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b2:	e7f3      	b.n	800f69c <__ssrefill_r+0x22>

0800f6b4 <__ssvfiscanf_r>:
 800f6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	460c      	mov	r4, r1
 800f6ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f6be:	2100      	movs	r1, #0
 800f6c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f6c4:	49a6      	ldr	r1, [pc, #664]	; (800f960 <__ssvfiscanf_r+0x2ac>)
 800f6c6:	91a0      	str	r1, [sp, #640]	; 0x280
 800f6c8:	f10d 0804 	add.w	r8, sp, #4
 800f6cc:	49a5      	ldr	r1, [pc, #660]	; (800f964 <__ssvfiscanf_r+0x2b0>)
 800f6ce:	4fa6      	ldr	r7, [pc, #664]	; (800f968 <__ssvfiscanf_r+0x2b4>)
 800f6d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f96c <__ssvfiscanf_r+0x2b8>
 800f6d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f6d8:	4606      	mov	r6, r0
 800f6da:	91a1      	str	r1, [sp, #644]	; 0x284
 800f6dc:	9300      	str	r3, [sp, #0]
 800f6de:	7813      	ldrb	r3, [r2, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f000 815a 	beq.w	800f99a <__ssvfiscanf_r+0x2e6>
 800f6e6:	5dd9      	ldrb	r1, [r3, r7]
 800f6e8:	f011 0108 	ands.w	r1, r1, #8
 800f6ec:	f102 0501 	add.w	r5, r2, #1
 800f6f0:	d019      	beq.n	800f726 <__ssvfiscanf_r+0x72>
 800f6f2:	6863      	ldr	r3, [r4, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	dd0f      	ble.n	800f718 <__ssvfiscanf_r+0x64>
 800f6f8:	6823      	ldr	r3, [r4, #0]
 800f6fa:	781a      	ldrb	r2, [r3, #0]
 800f6fc:	5cba      	ldrb	r2, [r7, r2]
 800f6fe:	0712      	lsls	r2, r2, #28
 800f700:	d401      	bmi.n	800f706 <__ssvfiscanf_r+0x52>
 800f702:	462a      	mov	r2, r5
 800f704:	e7eb      	b.n	800f6de <__ssvfiscanf_r+0x2a>
 800f706:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f708:	3201      	adds	r2, #1
 800f70a:	9245      	str	r2, [sp, #276]	; 0x114
 800f70c:	6862      	ldr	r2, [r4, #4]
 800f70e:	3301      	adds	r3, #1
 800f710:	3a01      	subs	r2, #1
 800f712:	6062      	str	r2, [r4, #4]
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	e7ec      	b.n	800f6f2 <__ssvfiscanf_r+0x3e>
 800f718:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f71a:	4621      	mov	r1, r4
 800f71c:	4630      	mov	r0, r6
 800f71e:	4798      	blx	r3
 800f720:	2800      	cmp	r0, #0
 800f722:	d0e9      	beq.n	800f6f8 <__ssvfiscanf_r+0x44>
 800f724:	e7ed      	b.n	800f702 <__ssvfiscanf_r+0x4e>
 800f726:	2b25      	cmp	r3, #37	; 0x25
 800f728:	d012      	beq.n	800f750 <__ssvfiscanf_r+0x9c>
 800f72a:	469a      	mov	sl, r3
 800f72c:	6863      	ldr	r3, [r4, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f340 8091 	ble.w	800f856 <__ssvfiscanf_r+0x1a2>
 800f734:	6822      	ldr	r2, [r4, #0]
 800f736:	7813      	ldrb	r3, [r2, #0]
 800f738:	4553      	cmp	r3, sl
 800f73a:	f040 812e 	bne.w	800f99a <__ssvfiscanf_r+0x2e6>
 800f73e:	6863      	ldr	r3, [r4, #4]
 800f740:	3b01      	subs	r3, #1
 800f742:	6063      	str	r3, [r4, #4]
 800f744:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f746:	3201      	adds	r2, #1
 800f748:	3301      	adds	r3, #1
 800f74a:	6022      	str	r2, [r4, #0]
 800f74c:	9345      	str	r3, [sp, #276]	; 0x114
 800f74e:	e7d8      	b.n	800f702 <__ssvfiscanf_r+0x4e>
 800f750:	9141      	str	r1, [sp, #260]	; 0x104
 800f752:	9143      	str	r1, [sp, #268]	; 0x10c
 800f754:	7853      	ldrb	r3, [r2, #1]
 800f756:	2b2a      	cmp	r3, #42	; 0x2a
 800f758:	bf02      	ittt	eq
 800f75a:	2310      	moveq	r3, #16
 800f75c:	1c95      	addeq	r5, r2, #2
 800f75e:	9341      	streq	r3, [sp, #260]	; 0x104
 800f760:	220a      	movs	r2, #10
 800f762:	46aa      	mov	sl, r5
 800f764:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f768:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f76c:	2b09      	cmp	r3, #9
 800f76e:	d91d      	bls.n	800f7ac <__ssvfiscanf_r+0xf8>
 800f770:	487e      	ldr	r0, [pc, #504]	; (800f96c <__ssvfiscanf_r+0x2b8>)
 800f772:	2203      	movs	r2, #3
 800f774:	f7f0 fd64 	bl	8000240 <memchr>
 800f778:	b140      	cbz	r0, 800f78c <__ssvfiscanf_r+0xd8>
 800f77a:	2301      	movs	r3, #1
 800f77c:	eba0 0009 	sub.w	r0, r0, r9
 800f780:	fa03 f000 	lsl.w	r0, r3, r0
 800f784:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f786:	4318      	orrs	r0, r3
 800f788:	9041      	str	r0, [sp, #260]	; 0x104
 800f78a:	4655      	mov	r5, sl
 800f78c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f790:	2b78      	cmp	r3, #120	; 0x78
 800f792:	d806      	bhi.n	800f7a2 <__ssvfiscanf_r+0xee>
 800f794:	2b57      	cmp	r3, #87	; 0x57
 800f796:	d810      	bhi.n	800f7ba <__ssvfiscanf_r+0x106>
 800f798:	2b25      	cmp	r3, #37	; 0x25
 800f79a:	d0c6      	beq.n	800f72a <__ssvfiscanf_r+0x76>
 800f79c:	d856      	bhi.n	800f84c <__ssvfiscanf_r+0x198>
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d064      	beq.n	800f86c <__ssvfiscanf_r+0x1b8>
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	9347      	str	r3, [sp, #284]	; 0x11c
 800f7a6:	230a      	movs	r3, #10
 800f7a8:	9342      	str	r3, [sp, #264]	; 0x108
 800f7aa:	e071      	b.n	800f890 <__ssvfiscanf_r+0x1dc>
 800f7ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f7ae:	fb02 1103 	mla	r1, r2, r3, r1
 800f7b2:	3930      	subs	r1, #48	; 0x30
 800f7b4:	9143      	str	r1, [sp, #268]	; 0x10c
 800f7b6:	4655      	mov	r5, sl
 800f7b8:	e7d3      	b.n	800f762 <__ssvfiscanf_r+0xae>
 800f7ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f7be:	2a20      	cmp	r2, #32
 800f7c0:	d8ef      	bhi.n	800f7a2 <__ssvfiscanf_r+0xee>
 800f7c2:	a101      	add	r1, pc, #4	; (adr r1, 800f7c8 <__ssvfiscanf_r+0x114>)
 800f7c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f7c8:	0800f87b 	.word	0x0800f87b
 800f7cc:	0800f7a3 	.word	0x0800f7a3
 800f7d0:	0800f7a3 	.word	0x0800f7a3
 800f7d4:	0800f8d9 	.word	0x0800f8d9
 800f7d8:	0800f7a3 	.word	0x0800f7a3
 800f7dc:	0800f7a3 	.word	0x0800f7a3
 800f7e0:	0800f7a3 	.word	0x0800f7a3
 800f7e4:	0800f7a3 	.word	0x0800f7a3
 800f7e8:	0800f7a3 	.word	0x0800f7a3
 800f7ec:	0800f7a3 	.word	0x0800f7a3
 800f7f0:	0800f7a3 	.word	0x0800f7a3
 800f7f4:	0800f8ef 	.word	0x0800f8ef
 800f7f8:	0800f8c5 	.word	0x0800f8c5
 800f7fc:	0800f853 	.word	0x0800f853
 800f800:	0800f853 	.word	0x0800f853
 800f804:	0800f853 	.word	0x0800f853
 800f808:	0800f7a3 	.word	0x0800f7a3
 800f80c:	0800f8c9 	.word	0x0800f8c9
 800f810:	0800f7a3 	.word	0x0800f7a3
 800f814:	0800f7a3 	.word	0x0800f7a3
 800f818:	0800f7a3 	.word	0x0800f7a3
 800f81c:	0800f7a3 	.word	0x0800f7a3
 800f820:	0800f8ff 	.word	0x0800f8ff
 800f824:	0800f8d1 	.word	0x0800f8d1
 800f828:	0800f873 	.word	0x0800f873
 800f82c:	0800f7a3 	.word	0x0800f7a3
 800f830:	0800f7a3 	.word	0x0800f7a3
 800f834:	0800f8fb 	.word	0x0800f8fb
 800f838:	0800f7a3 	.word	0x0800f7a3
 800f83c:	0800f8c5 	.word	0x0800f8c5
 800f840:	0800f7a3 	.word	0x0800f7a3
 800f844:	0800f7a3 	.word	0x0800f7a3
 800f848:	0800f87b 	.word	0x0800f87b
 800f84c:	3b45      	subs	r3, #69	; 0x45
 800f84e:	2b02      	cmp	r3, #2
 800f850:	d8a7      	bhi.n	800f7a2 <__ssvfiscanf_r+0xee>
 800f852:	2305      	movs	r3, #5
 800f854:	e01b      	b.n	800f88e <__ssvfiscanf_r+0x1da>
 800f856:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f858:	4621      	mov	r1, r4
 800f85a:	4630      	mov	r0, r6
 800f85c:	4798      	blx	r3
 800f85e:	2800      	cmp	r0, #0
 800f860:	f43f af68 	beq.w	800f734 <__ssvfiscanf_r+0x80>
 800f864:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f866:	2800      	cmp	r0, #0
 800f868:	f040 808d 	bne.w	800f986 <__ssvfiscanf_r+0x2d2>
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	e08f      	b.n	800f992 <__ssvfiscanf_r+0x2de>
 800f872:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f874:	f042 0220 	orr.w	r2, r2, #32
 800f878:	9241      	str	r2, [sp, #260]	; 0x104
 800f87a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f87c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f880:	9241      	str	r2, [sp, #260]	; 0x104
 800f882:	2210      	movs	r2, #16
 800f884:	2b6f      	cmp	r3, #111	; 0x6f
 800f886:	9242      	str	r2, [sp, #264]	; 0x108
 800f888:	bf34      	ite	cc
 800f88a:	2303      	movcc	r3, #3
 800f88c:	2304      	movcs	r3, #4
 800f88e:	9347      	str	r3, [sp, #284]	; 0x11c
 800f890:	6863      	ldr	r3, [r4, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	dd42      	ble.n	800f91c <__ssvfiscanf_r+0x268>
 800f896:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f898:	0659      	lsls	r1, r3, #25
 800f89a:	d404      	bmi.n	800f8a6 <__ssvfiscanf_r+0x1f2>
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	781a      	ldrb	r2, [r3, #0]
 800f8a0:	5cba      	ldrb	r2, [r7, r2]
 800f8a2:	0712      	lsls	r2, r2, #28
 800f8a4:	d441      	bmi.n	800f92a <__ssvfiscanf_r+0x276>
 800f8a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	dc50      	bgt.n	800f94e <__ssvfiscanf_r+0x29a>
 800f8ac:	466b      	mov	r3, sp
 800f8ae:	4622      	mov	r2, r4
 800f8b0:	a941      	add	r1, sp, #260	; 0x104
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	f000 f876 	bl	800f9a4 <_scanf_chars>
 800f8b8:	2801      	cmp	r0, #1
 800f8ba:	d06e      	beq.n	800f99a <__ssvfiscanf_r+0x2e6>
 800f8bc:	2802      	cmp	r0, #2
 800f8be:	f47f af20 	bne.w	800f702 <__ssvfiscanf_r+0x4e>
 800f8c2:	e7cf      	b.n	800f864 <__ssvfiscanf_r+0x1b0>
 800f8c4:	220a      	movs	r2, #10
 800f8c6:	e7dd      	b.n	800f884 <__ssvfiscanf_r+0x1d0>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	9342      	str	r3, [sp, #264]	; 0x108
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	e7de      	b.n	800f88e <__ssvfiscanf_r+0x1da>
 800f8d0:	2308      	movs	r3, #8
 800f8d2:	9342      	str	r3, [sp, #264]	; 0x108
 800f8d4:	2304      	movs	r3, #4
 800f8d6:	e7da      	b.n	800f88e <__ssvfiscanf_r+0x1da>
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4640      	mov	r0, r8
 800f8dc:	f000 f9e0 	bl	800fca0 <__sccl>
 800f8e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8e6:	9341      	str	r3, [sp, #260]	; 0x104
 800f8e8:	4605      	mov	r5, r0
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e7cf      	b.n	800f88e <__ssvfiscanf_r+0x1da>
 800f8ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8f4:	9341      	str	r3, [sp, #260]	; 0x104
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	e7c9      	b.n	800f88e <__ssvfiscanf_r+0x1da>
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	e7c7      	b.n	800f88e <__ssvfiscanf_r+0x1da>
 800f8fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f900:	06c3      	lsls	r3, r0, #27
 800f902:	f53f aefe 	bmi.w	800f702 <__ssvfiscanf_r+0x4e>
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f90a:	1d19      	adds	r1, r3, #4
 800f90c:	9100      	str	r1, [sp, #0]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f010 0f01 	tst.w	r0, #1
 800f914:	bf14      	ite	ne
 800f916:	801a      	strhne	r2, [r3, #0]
 800f918:	601a      	streq	r2, [r3, #0]
 800f91a:	e6f2      	b.n	800f702 <__ssvfiscanf_r+0x4e>
 800f91c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f91e:	4621      	mov	r1, r4
 800f920:	4630      	mov	r0, r6
 800f922:	4798      	blx	r3
 800f924:	2800      	cmp	r0, #0
 800f926:	d0b6      	beq.n	800f896 <__ssvfiscanf_r+0x1e2>
 800f928:	e79c      	b.n	800f864 <__ssvfiscanf_r+0x1b0>
 800f92a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f92c:	3201      	adds	r2, #1
 800f92e:	9245      	str	r2, [sp, #276]	; 0x114
 800f930:	6862      	ldr	r2, [r4, #4]
 800f932:	3a01      	subs	r2, #1
 800f934:	2a00      	cmp	r2, #0
 800f936:	6062      	str	r2, [r4, #4]
 800f938:	dd02      	ble.n	800f940 <__ssvfiscanf_r+0x28c>
 800f93a:	3301      	adds	r3, #1
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	e7ad      	b.n	800f89c <__ssvfiscanf_r+0x1e8>
 800f940:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f942:	4621      	mov	r1, r4
 800f944:	4630      	mov	r0, r6
 800f946:	4798      	blx	r3
 800f948:	2800      	cmp	r0, #0
 800f94a:	d0a7      	beq.n	800f89c <__ssvfiscanf_r+0x1e8>
 800f94c:	e78a      	b.n	800f864 <__ssvfiscanf_r+0x1b0>
 800f94e:	2b04      	cmp	r3, #4
 800f950:	dc0e      	bgt.n	800f970 <__ssvfiscanf_r+0x2bc>
 800f952:	466b      	mov	r3, sp
 800f954:	4622      	mov	r2, r4
 800f956:	a941      	add	r1, sp, #260	; 0x104
 800f958:	4630      	mov	r0, r6
 800f95a:	f000 f87d 	bl	800fa58 <_scanf_i>
 800f95e:	e7ab      	b.n	800f8b8 <__ssvfiscanf_r+0x204>
 800f960:	0800f601 	.word	0x0800f601
 800f964:	0800f67b 	.word	0x0800f67b
 800f968:	080127d9 	.word	0x080127d9
 800f96c:	08012b42 	.word	0x08012b42
 800f970:	4b0b      	ldr	r3, [pc, #44]	; (800f9a0 <__ssvfiscanf_r+0x2ec>)
 800f972:	2b00      	cmp	r3, #0
 800f974:	f43f aec5 	beq.w	800f702 <__ssvfiscanf_r+0x4e>
 800f978:	466b      	mov	r3, sp
 800f97a:	4622      	mov	r2, r4
 800f97c:	a941      	add	r1, sp, #260	; 0x104
 800f97e:	4630      	mov	r0, r6
 800f980:	f7fc fb6c 	bl	800c05c <_scanf_float>
 800f984:	e798      	b.n	800f8b8 <__ssvfiscanf_r+0x204>
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f98c:	bf18      	it	ne
 800f98e:	f04f 30ff 	movne.w	r0, #4294967295
 800f992:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f99c:	e7f9      	b.n	800f992 <__ssvfiscanf_r+0x2de>
 800f99e:	bf00      	nop
 800f9a0:	0800c05d 	.word	0x0800c05d

0800f9a4 <_scanf_chars>:
 800f9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9a8:	4615      	mov	r5, r2
 800f9aa:	688a      	ldr	r2, [r1, #8]
 800f9ac:	4680      	mov	r8, r0
 800f9ae:	460c      	mov	r4, r1
 800f9b0:	b932      	cbnz	r2, 800f9c0 <_scanf_chars+0x1c>
 800f9b2:	698a      	ldr	r2, [r1, #24]
 800f9b4:	2a00      	cmp	r2, #0
 800f9b6:	bf0c      	ite	eq
 800f9b8:	2201      	moveq	r2, #1
 800f9ba:	f04f 32ff 	movne.w	r2, #4294967295
 800f9be:	608a      	str	r2, [r1, #8]
 800f9c0:	6822      	ldr	r2, [r4, #0]
 800f9c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fa54 <_scanf_chars+0xb0>
 800f9c6:	06d1      	lsls	r1, r2, #27
 800f9c8:	bf5f      	itttt	pl
 800f9ca:	681a      	ldrpl	r2, [r3, #0]
 800f9cc:	1d11      	addpl	r1, r2, #4
 800f9ce:	6019      	strpl	r1, [r3, #0]
 800f9d0:	6816      	ldrpl	r6, [r2, #0]
 800f9d2:	2700      	movs	r7, #0
 800f9d4:	69a0      	ldr	r0, [r4, #24]
 800f9d6:	b188      	cbz	r0, 800f9fc <_scanf_chars+0x58>
 800f9d8:	2801      	cmp	r0, #1
 800f9da:	d107      	bne.n	800f9ec <_scanf_chars+0x48>
 800f9dc:	682a      	ldr	r2, [r5, #0]
 800f9de:	7811      	ldrb	r1, [r2, #0]
 800f9e0:	6962      	ldr	r2, [r4, #20]
 800f9e2:	5c52      	ldrb	r2, [r2, r1]
 800f9e4:	b952      	cbnz	r2, 800f9fc <_scanf_chars+0x58>
 800f9e6:	2f00      	cmp	r7, #0
 800f9e8:	d031      	beq.n	800fa4e <_scanf_chars+0xaa>
 800f9ea:	e022      	b.n	800fa32 <_scanf_chars+0x8e>
 800f9ec:	2802      	cmp	r0, #2
 800f9ee:	d120      	bne.n	800fa32 <_scanf_chars+0x8e>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f9f8:	071b      	lsls	r3, r3, #28
 800f9fa:	d41a      	bmi.n	800fa32 <_scanf_chars+0x8e>
 800f9fc:	6823      	ldr	r3, [r4, #0]
 800f9fe:	06da      	lsls	r2, r3, #27
 800fa00:	bf5e      	ittt	pl
 800fa02:	682b      	ldrpl	r3, [r5, #0]
 800fa04:	781b      	ldrbpl	r3, [r3, #0]
 800fa06:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fa0a:	682a      	ldr	r2, [r5, #0]
 800fa0c:	686b      	ldr	r3, [r5, #4]
 800fa0e:	3201      	adds	r2, #1
 800fa10:	602a      	str	r2, [r5, #0]
 800fa12:	68a2      	ldr	r2, [r4, #8]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	3a01      	subs	r2, #1
 800fa18:	606b      	str	r3, [r5, #4]
 800fa1a:	3701      	adds	r7, #1
 800fa1c:	60a2      	str	r2, [r4, #8]
 800fa1e:	b142      	cbz	r2, 800fa32 <_scanf_chars+0x8e>
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	dcd7      	bgt.n	800f9d4 <_scanf_chars+0x30>
 800fa24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa28:	4629      	mov	r1, r5
 800fa2a:	4640      	mov	r0, r8
 800fa2c:	4798      	blx	r3
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d0d0      	beq.n	800f9d4 <_scanf_chars+0x30>
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	f013 0310 	ands.w	r3, r3, #16
 800fa38:	d105      	bne.n	800fa46 <_scanf_chars+0xa2>
 800fa3a:	68e2      	ldr	r2, [r4, #12]
 800fa3c:	3201      	adds	r2, #1
 800fa3e:	60e2      	str	r2, [r4, #12]
 800fa40:	69a2      	ldr	r2, [r4, #24]
 800fa42:	b102      	cbz	r2, 800fa46 <_scanf_chars+0xa2>
 800fa44:	7033      	strb	r3, [r6, #0]
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	443b      	add	r3, r7
 800fa4a:	6123      	str	r3, [r4, #16]
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa52:	bf00      	nop
 800fa54:	080127d9 	.word	0x080127d9

0800fa58 <_scanf_i>:
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	4698      	mov	r8, r3
 800fa5e:	4b76      	ldr	r3, [pc, #472]	; (800fc38 <_scanf_i+0x1e0>)
 800fa60:	460c      	mov	r4, r1
 800fa62:	4682      	mov	sl, r0
 800fa64:	4616      	mov	r6, r2
 800fa66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa6a:	b087      	sub	sp, #28
 800fa6c:	ab03      	add	r3, sp, #12
 800fa6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fa72:	4b72      	ldr	r3, [pc, #456]	; (800fc3c <_scanf_i+0x1e4>)
 800fa74:	69a1      	ldr	r1, [r4, #24]
 800fa76:	4a72      	ldr	r2, [pc, #456]	; (800fc40 <_scanf_i+0x1e8>)
 800fa78:	2903      	cmp	r1, #3
 800fa7a:	bf18      	it	ne
 800fa7c:	461a      	movne	r2, r3
 800fa7e:	68a3      	ldr	r3, [r4, #8]
 800fa80:	9201      	str	r2, [sp, #4]
 800fa82:	1e5a      	subs	r2, r3, #1
 800fa84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fa88:	bf88      	it	hi
 800fa8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fa8e:	4627      	mov	r7, r4
 800fa90:	bf82      	ittt	hi
 800fa92:	eb03 0905 	addhi.w	r9, r3, r5
 800fa96:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fa9a:	60a3      	strhi	r3, [r4, #8]
 800fa9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800faa0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800faa4:	bf98      	it	ls
 800faa6:	f04f 0900 	movls.w	r9, #0
 800faaa:	6023      	str	r3, [r4, #0]
 800faac:	463d      	mov	r5, r7
 800faae:	f04f 0b00 	mov.w	fp, #0
 800fab2:	6831      	ldr	r1, [r6, #0]
 800fab4:	ab03      	add	r3, sp, #12
 800fab6:	7809      	ldrb	r1, [r1, #0]
 800fab8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fabc:	2202      	movs	r2, #2
 800fabe:	f7f0 fbbf 	bl	8000240 <memchr>
 800fac2:	b328      	cbz	r0, 800fb10 <_scanf_i+0xb8>
 800fac4:	f1bb 0f01 	cmp.w	fp, #1
 800fac8:	d159      	bne.n	800fb7e <_scanf_i+0x126>
 800faca:	6862      	ldr	r2, [r4, #4]
 800facc:	b92a      	cbnz	r2, 800fada <_scanf_i+0x82>
 800face:	6822      	ldr	r2, [r4, #0]
 800fad0:	2308      	movs	r3, #8
 800fad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fad6:	6063      	str	r3, [r4, #4]
 800fad8:	6022      	str	r2, [r4, #0]
 800fada:	6822      	ldr	r2, [r4, #0]
 800fadc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fae0:	6022      	str	r2, [r4, #0]
 800fae2:	68a2      	ldr	r2, [r4, #8]
 800fae4:	1e51      	subs	r1, r2, #1
 800fae6:	60a1      	str	r1, [r4, #8]
 800fae8:	b192      	cbz	r2, 800fb10 <_scanf_i+0xb8>
 800faea:	6832      	ldr	r2, [r6, #0]
 800faec:	1c51      	adds	r1, r2, #1
 800faee:	6031      	str	r1, [r6, #0]
 800faf0:	7812      	ldrb	r2, [r2, #0]
 800faf2:	f805 2b01 	strb.w	r2, [r5], #1
 800faf6:	6872      	ldr	r2, [r6, #4]
 800faf8:	3a01      	subs	r2, #1
 800fafa:	2a00      	cmp	r2, #0
 800fafc:	6072      	str	r2, [r6, #4]
 800fafe:	dc07      	bgt.n	800fb10 <_scanf_i+0xb8>
 800fb00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fb04:	4631      	mov	r1, r6
 800fb06:	4650      	mov	r0, sl
 800fb08:	4790      	blx	r2
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	f040 8085 	bne.w	800fc1a <_scanf_i+0x1c2>
 800fb10:	f10b 0b01 	add.w	fp, fp, #1
 800fb14:	f1bb 0f03 	cmp.w	fp, #3
 800fb18:	d1cb      	bne.n	800fab2 <_scanf_i+0x5a>
 800fb1a:	6863      	ldr	r3, [r4, #4]
 800fb1c:	b90b      	cbnz	r3, 800fb22 <_scanf_i+0xca>
 800fb1e:	230a      	movs	r3, #10
 800fb20:	6063      	str	r3, [r4, #4]
 800fb22:	6863      	ldr	r3, [r4, #4]
 800fb24:	4947      	ldr	r1, [pc, #284]	; (800fc44 <_scanf_i+0x1ec>)
 800fb26:	6960      	ldr	r0, [r4, #20]
 800fb28:	1ac9      	subs	r1, r1, r3
 800fb2a:	f000 f8b9 	bl	800fca0 <__sccl>
 800fb2e:	f04f 0b00 	mov.w	fp, #0
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	6822      	ldr	r2, [r4, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d03d      	beq.n	800fbb6 <_scanf_i+0x15e>
 800fb3a:	6831      	ldr	r1, [r6, #0]
 800fb3c:	6960      	ldr	r0, [r4, #20]
 800fb3e:	f891 c000 	ldrb.w	ip, [r1]
 800fb42:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d035      	beq.n	800fbb6 <_scanf_i+0x15e>
 800fb4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fb4e:	d124      	bne.n	800fb9a <_scanf_i+0x142>
 800fb50:	0510      	lsls	r0, r2, #20
 800fb52:	d522      	bpl.n	800fb9a <_scanf_i+0x142>
 800fb54:	f10b 0b01 	add.w	fp, fp, #1
 800fb58:	f1b9 0f00 	cmp.w	r9, #0
 800fb5c:	d003      	beq.n	800fb66 <_scanf_i+0x10e>
 800fb5e:	3301      	adds	r3, #1
 800fb60:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb64:	60a3      	str	r3, [r4, #8]
 800fb66:	6873      	ldr	r3, [r6, #4]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	6073      	str	r3, [r6, #4]
 800fb6e:	dd1b      	ble.n	800fba8 <_scanf_i+0x150>
 800fb70:	6833      	ldr	r3, [r6, #0]
 800fb72:	3301      	adds	r3, #1
 800fb74:	6033      	str	r3, [r6, #0]
 800fb76:	68a3      	ldr	r3, [r4, #8]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	60a3      	str	r3, [r4, #8]
 800fb7c:	e7d9      	b.n	800fb32 <_scanf_i+0xda>
 800fb7e:	f1bb 0f02 	cmp.w	fp, #2
 800fb82:	d1ae      	bne.n	800fae2 <_scanf_i+0x8a>
 800fb84:	6822      	ldr	r2, [r4, #0]
 800fb86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fb8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fb8e:	d1bf      	bne.n	800fb10 <_scanf_i+0xb8>
 800fb90:	2310      	movs	r3, #16
 800fb92:	6063      	str	r3, [r4, #4]
 800fb94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb98:	e7a2      	b.n	800fae0 <_scanf_i+0x88>
 800fb9a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fb9e:	6022      	str	r2, [r4, #0]
 800fba0:	780b      	ldrb	r3, [r1, #0]
 800fba2:	f805 3b01 	strb.w	r3, [r5], #1
 800fba6:	e7de      	b.n	800fb66 <_scanf_i+0x10e>
 800fba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fbac:	4631      	mov	r1, r6
 800fbae:	4650      	mov	r0, sl
 800fbb0:	4798      	blx	r3
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	d0df      	beq.n	800fb76 <_scanf_i+0x11e>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	05db      	lsls	r3, r3, #23
 800fbba:	d50d      	bpl.n	800fbd8 <_scanf_i+0x180>
 800fbbc:	42bd      	cmp	r5, r7
 800fbbe:	d909      	bls.n	800fbd4 <_scanf_i+0x17c>
 800fbc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fbc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbc8:	4632      	mov	r2, r6
 800fbca:	4650      	mov	r0, sl
 800fbcc:	4798      	blx	r3
 800fbce:	f105 39ff 	add.w	r9, r5, #4294967295
 800fbd2:	464d      	mov	r5, r9
 800fbd4:	42bd      	cmp	r5, r7
 800fbd6:	d02d      	beq.n	800fc34 <_scanf_i+0x1dc>
 800fbd8:	6822      	ldr	r2, [r4, #0]
 800fbda:	f012 0210 	ands.w	r2, r2, #16
 800fbde:	d113      	bne.n	800fc08 <_scanf_i+0x1b0>
 800fbe0:	702a      	strb	r2, [r5, #0]
 800fbe2:	6863      	ldr	r3, [r4, #4]
 800fbe4:	9e01      	ldr	r6, [sp, #4]
 800fbe6:	4639      	mov	r1, r7
 800fbe8:	4650      	mov	r0, sl
 800fbea:	47b0      	blx	r6
 800fbec:	6821      	ldr	r1, [r4, #0]
 800fbee:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf2:	f011 0f20 	tst.w	r1, #32
 800fbf6:	d013      	beq.n	800fc20 <_scanf_i+0x1c8>
 800fbf8:	1d1a      	adds	r2, r3, #4
 800fbfa:	f8c8 2000 	str.w	r2, [r8]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	6018      	str	r0, [r3, #0]
 800fc02:	68e3      	ldr	r3, [r4, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	60e3      	str	r3, [r4, #12]
 800fc08:	1bed      	subs	r5, r5, r7
 800fc0a:	44ab      	add	fp, r5
 800fc0c:	6925      	ldr	r5, [r4, #16]
 800fc0e:	445d      	add	r5, fp
 800fc10:	6125      	str	r5, [r4, #16]
 800fc12:	2000      	movs	r0, #0
 800fc14:	b007      	add	sp, #28
 800fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1a:	f04f 0b00 	mov.w	fp, #0
 800fc1e:	e7ca      	b.n	800fbb6 <_scanf_i+0x15e>
 800fc20:	1d1a      	adds	r2, r3, #4
 800fc22:	f8c8 2000 	str.w	r2, [r8]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f011 0f01 	tst.w	r1, #1
 800fc2c:	bf14      	ite	ne
 800fc2e:	8018      	strhne	r0, [r3, #0]
 800fc30:	6018      	streq	r0, [r3, #0]
 800fc32:	e7e6      	b.n	800fc02 <_scanf_i+0x1aa>
 800fc34:	2001      	movs	r0, #1
 800fc36:	e7ed      	b.n	800fc14 <_scanf_i+0x1bc>
 800fc38:	0801271c 	.word	0x0801271c
 800fc3c:	0800fe1d 	.word	0x0800fe1d
 800fc40:	0800d33d 	.word	0x0800d33d
 800fc44:	08012b66 	.word	0x08012b66

0800fc48 <_read_r>:
 800fc48:	b538      	push	{r3, r4, r5, lr}
 800fc4a:	4d07      	ldr	r5, [pc, #28]	; (800fc68 <_read_r+0x20>)
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	4608      	mov	r0, r1
 800fc50:	4611      	mov	r1, r2
 800fc52:	2200      	movs	r2, #0
 800fc54:	602a      	str	r2, [r5, #0]
 800fc56:	461a      	mov	r2, r3
 800fc58:	f7f5 fe94 	bl	8005984 <_read>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d102      	bne.n	800fc66 <_read_r+0x1e>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	b103      	cbz	r3, 800fc66 <_read_r+0x1e>
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	bd38      	pop	{r3, r4, r5, pc}
 800fc68:	2000122c 	.word	0x2000122c
 800fc6c:	00000000 	.word	0x00000000

0800fc70 <nan>:
 800fc70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc78 <nan+0x8>
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	7ff80000 	.word	0x7ff80000

0800fc80 <_sbrk_r>:
 800fc80:	b538      	push	{r3, r4, r5, lr}
 800fc82:	4d06      	ldr	r5, [pc, #24]	; (800fc9c <_sbrk_r+0x1c>)
 800fc84:	2300      	movs	r3, #0
 800fc86:	4604      	mov	r4, r0
 800fc88:	4608      	mov	r0, r1
 800fc8a:	602b      	str	r3, [r5, #0]
 800fc8c:	f7f5 fee8 	bl	8005a60 <_sbrk>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	d102      	bne.n	800fc9a <_sbrk_r+0x1a>
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	b103      	cbz	r3, 800fc9a <_sbrk_r+0x1a>
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	2000122c 	.word	0x2000122c

0800fca0 <__sccl>:
 800fca0:	b570      	push	{r4, r5, r6, lr}
 800fca2:	780b      	ldrb	r3, [r1, #0]
 800fca4:	4604      	mov	r4, r0
 800fca6:	2b5e      	cmp	r3, #94	; 0x5e
 800fca8:	bf0b      	itete	eq
 800fcaa:	784b      	ldrbeq	r3, [r1, #1]
 800fcac:	1c48      	addne	r0, r1, #1
 800fcae:	1c88      	addeq	r0, r1, #2
 800fcb0:	2200      	movne	r2, #0
 800fcb2:	bf08      	it	eq
 800fcb4:	2201      	moveq	r2, #1
 800fcb6:	1e61      	subs	r1, r4, #1
 800fcb8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fcbc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fcc0:	42a9      	cmp	r1, r5
 800fcc2:	d1fb      	bne.n	800fcbc <__sccl+0x1c>
 800fcc4:	b90b      	cbnz	r3, 800fcca <__sccl+0x2a>
 800fcc6:	3801      	subs	r0, #1
 800fcc8:	bd70      	pop	{r4, r5, r6, pc}
 800fcca:	f082 0201 	eor.w	r2, r2, #1
 800fcce:	54e2      	strb	r2, [r4, r3]
 800fcd0:	4605      	mov	r5, r0
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fcd8:	292d      	cmp	r1, #45	; 0x2d
 800fcda:	d006      	beq.n	800fcea <__sccl+0x4a>
 800fcdc:	295d      	cmp	r1, #93	; 0x5d
 800fcde:	d0f3      	beq.n	800fcc8 <__sccl+0x28>
 800fce0:	b909      	cbnz	r1, 800fce6 <__sccl+0x46>
 800fce2:	4628      	mov	r0, r5
 800fce4:	e7f0      	b.n	800fcc8 <__sccl+0x28>
 800fce6:	460b      	mov	r3, r1
 800fce8:	e7f1      	b.n	800fcce <__sccl+0x2e>
 800fcea:	786e      	ldrb	r6, [r5, #1]
 800fcec:	2e5d      	cmp	r6, #93	; 0x5d
 800fcee:	d0fa      	beq.n	800fce6 <__sccl+0x46>
 800fcf0:	42b3      	cmp	r3, r6
 800fcf2:	dcf8      	bgt.n	800fce6 <__sccl+0x46>
 800fcf4:	3502      	adds	r5, #2
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	3101      	adds	r1, #1
 800fcfa:	428e      	cmp	r6, r1
 800fcfc:	5462      	strb	r2, [r4, r1]
 800fcfe:	dcfb      	bgt.n	800fcf8 <__sccl+0x58>
 800fd00:	1af1      	subs	r1, r6, r3
 800fd02:	3901      	subs	r1, #1
 800fd04:	1c58      	adds	r0, r3, #1
 800fd06:	42b3      	cmp	r3, r6
 800fd08:	bfa8      	it	ge
 800fd0a:	2100      	movge	r1, #0
 800fd0c:	1843      	adds	r3, r0, r1
 800fd0e:	e7e0      	b.n	800fcd2 <__sccl+0x32>

0800fd10 <strncmp>:
 800fd10:	b510      	push	{r4, lr}
 800fd12:	b17a      	cbz	r2, 800fd34 <strncmp+0x24>
 800fd14:	4603      	mov	r3, r0
 800fd16:	3901      	subs	r1, #1
 800fd18:	1884      	adds	r4, r0, r2
 800fd1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd22:	4290      	cmp	r0, r2
 800fd24:	d101      	bne.n	800fd2a <strncmp+0x1a>
 800fd26:	42a3      	cmp	r3, r4
 800fd28:	d101      	bne.n	800fd2e <strncmp+0x1e>
 800fd2a:	1a80      	subs	r0, r0, r2
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d1f3      	bne.n	800fd1a <strncmp+0xa>
 800fd32:	e7fa      	b.n	800fd2a <strncmp+0x1a>
 800fd34:	4610      	mov	r0, r2
 800fd36:	e7f9      	b.n	800fd2c <strncmp+0x1c>

0800fd38 <_strtoul_l.constprop.0>:
 800fd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd3c:	4f36      	ldr	r7, [pc, #216]	; (800fe18 <_strtoul_l.constprop.0+0xe0>)
 800fd3e:	4686      	mov	lr, r0
 800fd40:	460d      	mov	r5, r1
 800fd42:	4628      	mov	r0, r5
 800fd44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd48:	5de6      	ldrb	r6, [r4, r7]
 800fd4a:	f016 0608 	ands.w	r6, r6, #8
 800fd4e:	d1f8      	bne.n	800fd42 <_strtoul_l.constprop.0+0xa>
 800fd50:	2c2d      	cmp	r4, #45	; 0x2d
 800fd52:	d12f      	bne.n	800fdb4 <_strtoul_l.constprop.0+0x7c>
 800fd54:	782c      	ldrb	r4, [r5, #0]
 800fd56:	2601      	movs	r6, #1
 800fd58:	1c85      	adds	r5, r0, #2
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d057      	beq.n	800fe0e <_strtoul_l.constprop.0+0xd6>
 800fd5e:	2b10      	cmp	r3, #16
 800fd60:	d109      	bne.n	800fd76 <_strtoul_l.constprop.0+0x3e>
 800fd62:	2c30      	cmp	r4, #48	; 0x30
 800fd64:	d107      	bne.n	800fd76 <_strtoul_l.constprop.0+0x3e>
 800fd66:	7828      	ldrb	r0, [r5, #0]
 800fd68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fd6c:	2858      	cmp	r0, #88	; 0x58
 800fd6e:	d149      	bne.n	800fe04 <_strtoul_l.constprop.0+0xcc>
 800fd70:	786c      	ldrb	r4, [r5, #1]
 800fd72:	2310      	movs	r3, #16
 800fd74:	3502      	adds	r5, #2
 800fd76:	f04f 38ff 	mov.w	r8, #4294967295
 800fd7a:	2700      	movs	r7, #0
 800fd7c:	fbb8 f8f3 	udiv	r8, r8, r3
 800fd80:	fb03 f908 	mul.w	r9, r3, r8
 800fd84:	ea6f 0909 	mvn.w	r9, r9
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fd8e:	f1bc 0f09 	cmp.w	ip, #9
 800fd92:	d814      	bhi.n	800fdbe <_strtoul_l.constprop.0+0x86>
 800fd94:	4664      	mov	r4, ip
 800fd96:	42a3      	cmp	r3, r4
 800fd98:	dd22      	ble.n	800fde0 <_strtoul_l.constprop.0+0xa8>
 800fd9a:	2f00      	cmp	r7, #0
 800fd9c:	db1d      	blt.n	800fdda <_strtoul_l.constprop.0+0xa2>
 800fd9e:	4580      	cmp	r8, r0
 800fda0:	d31b      	bcc.n	800fdda <_strtoul_l.constprop.0+0xa2>
 800fda2:	d101      	bne.n	800fda8 <_strtoul_l.constprop.0+0x70>
 800fda4:	45a1      	cmp	r9, r4
 800fda6:	db18      	blt.n	800fdda <_strtoul_l.constprop.0+0xa2>
 800fda8:	fb00 4003 	mla	r0, r0, r3, r4
 800fdac:	2701      	movs	r7, #1
 800fdae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdb2:	e7ea      	b.n	800fd8a <_strtoul_l.constprop.0+0x52>
 800fdb4:	2c2b      	cmp	r4, #43	; 0x2b
 800fdb6:	bf04      	itt	eq
 800fdb8:	782c      	ldrbeq	r4, [r5, #0]
 800fdba:	1c85      	addeq	r5, r0, #2
 800fdbc:	e7cd      	b.n	800fd5a <_strtoul_l.constprop.0+0x22>
 800fdbe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fdc2:	f1bc 0f19 	cmp.w	ip, #25
 800fdc6:	d801      	bhi.n	800fdcc <_strtoul_l.constprop.0+0x94>
 800fdc8:	3c37      	subs	r4, #55	; 0x37
 800fdca:	e7e4      	b.n	800fd96 <_strtoul_l.constprop.0+0x5e>
 800fdcc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fdd0:	f1bc 0f19 	cmp.w	ip, #25
 800fdd4:	d804      	bhi.n	800fde0 <_strtoul_l.constprop.0+0xa8>
 800fdd6:	3c57      	subs	r4, #87	; 0x57
 800fdd8:	e7dd      	b.n	800fd96 <_strtoul_l.constprop.0+0x5e>
 800fdda:	f04f 37ff 	mov.w	r7, #4294967295
 800fdde:	e7e6      	b.n	800fdae <_strtoul_l.constprop.0+0x76>
 800fde0:	2f00      	cmp	r7, #0
 800fde2:	da07      	bge.n	800fdf4 <_strtoul_l.constprop.0+0xbc>
 800fde4:	2322      	movs	r3, #34	; 0x22
 800fde6:	f8ce 3000 	str.w	r3, [lr]
 800fdea:	f04f 30ff 	mov.w	r0, #4294967295
 800fdee:	b932      	cbnz	r2, 800fdfe <_strtoul_l.constprop.0+0xc6>
 800fdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdf4:	b106      	cbz	r6, 800fdf8 <_strtoul_l.constprop.0+0xc0>
 800fdf6:	4240      	negs	r0, r0
 800fdf8:	2a00      	cmp	r2, #0
 800fdfa:	d0f9      	beq.n	800fdf0 <_strtoul_l.constprop.0+0xb8>
 800fdfc:	b107      	cbz	r7, 800fe00 <_strtoul_l.constprop.0+0xc8>
 800fdfe:	1e69      	subs	r1, r5, #1
 800fe00:	6011      	str	r1, [r2, #0]
 800fe02:	e7f5      	b.n	800fdf0 <_strtoul_l.constprop.0+0xb8>
 800fe04:	2430      	movs	r4, #48	; 0x30
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1b5      	bne.n	800fd76 <_strtoul_l.constprop.0+0x3e>
 800fe0a:	2308      	movs	r3, #8
 800fe0c:	e7b3      	b.n	800fd76 <_strtoul_l.constprop.0+0x3e>
 800fe0e:	2c30      	cmp	r4, #48	; 0x30
 800fe10:	d0a9      	beq.n	800fd66 <_strtoul_l.constprop.0+0x2e>
 800fe12:	230a      	movs	r3, #10
 800fe14:	e7af      	b.n	800fd76 <_strtoul_l.constprop.0+0x3e>
 800fe16:	bf00      	nop
 800fe18:	080127d9 	.word	0x080127d9

0800fe1c <_strtoul_r>:
 800fe1c:	f7ff bf8c 	b.w	800fd38 <_strtoul_l.constprop.0>

0800fe20 <__submore>:
 800fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe24:	460c      	mov	r4, r1
 800fe26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fe28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe2c:	4299      	cmp	r1, r3
 800fe2e:	d11d      	bne.n	800fe6c <__submore+0x4c>
 800fe30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fe34:	f7ff fa14 	bl	800f260 <_malloc_r>
 800fe38:	b918      	cbnz	r0, 800fe42 <__submore+0x22>
 800fe3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe46:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fe4c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe4e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fe52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fe56:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fe5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fe5e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fe62:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fe66:	6020      	str	r0, [r4, #0]
 800fe68:	2000      	movs	r0, #0
 800fe6a:	e7e8      	b.n	800fe3e <__submore+0x1e>
 800fe6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fe6e:	0077      	lsls	r7, r6, #1
 800fe70:	463a      	mov	r2, r7
 800fe72:	f000 fa2d 	bl	80102d0 <_realloc_r>
 800fe76:	4605      	mov	r5, r0
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d0de      	beq.n	800fe3a <__submore+0x1a>
 800fe7c:	eb00 0806 	add.w	r8, r0, r6
 800fe80:	4601      	mov	r1, r0
 800fe82:	4632      	mov	r2, r6
 800fe84:	4640      	mov	r0, r8
 800fe86:	f7fe fc99 	bl	800e7bc <memcpy>
 800fe8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fe8e:	f8c4 8000 	str.w	r8, [r4]
 800fe92:	e7e9      	b.n	800fe68 <__submore+0x48>

0800fe94 <__ascii_wctomb>:
 800fe94:	b149      	cbz	r1, 800feaa <__ascii_wctomb+0x16>
 800fe96:	2aff      	cmp	r2, #255	; 0xff
 800fe98:	bf85      	ittet	hi
 800fe9a:	238a      	movhi	r3, #138	; 0x8a
 800fe9c:	6003      	strhi	r3, [r0, #0]
 800fe9e:	700a      	strbls	r2, [r1, #0]
 800fea0:	f04f 30ff 	movhi.w	r0, #4294967295
 800fea4:	bf98      	it	ls
 800fea6:	2001      	movls	r0, #1
 800fea8:	4770      	bx	lr
 800feaa:	4608      	mov	r0, r1
 800feac:	4770      	bx	lr
	...

0800feb0 <__assert_func>:
 800feb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feb2:	4614      	mov	r4, r2
 800feb4:	461a      	mov	r2, r3
 800feb6:	4b09      	ldr	r3, [pc, #36]	; (800fedc <__assert_func+0x2c>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4605      	mov	r5, r0
 800febc:	68d8      	ldr	r0, [r3, #12]
 800febe:	b14c      	cbz	r4, 800fed4 <__assert_func+0x24>
 800fec0:	4b07      	ldr	r3, [pc, #28]	; (800fee0 <__assert_func+0x30>)
 800fec2:	9100      	str	r1, [sp, #0]
 800fec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fec8:	4906      	ldr	r1, [pc, #24]	; (800fee4 <__assert_func+0x34>)
 800feca:	462b      	mov	r3, r5
 800fecc:	f000 f9a6 	bl	801021c <fiprintf>
 800fed0:	f000 fc46 	bl	8010760 <abort>
 800fed4:	4b04      	ldr	r3, [pc, #16]	; (800fee8 <__assert_func+0x38>)
 800fed6:	461c      	mov	r4, r3
 800fed8:	e7f3      	b.n	800fec2 <__assert_func+0x12>
 800feda:	bf00      	nop
 800fedc:	20000014 	.word	0x20000014
 800fee0:	08012b68 	.word	0x08012b68
 800fee4:	08012b75 	.word	0x08012b75
 800fee8:	08012ba3 	.word	0x08012ba3

0800feec <__sflush_r>:
 800feec:	898a      	ldrh	r2, [r1, #12]
 800feee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef2:	4605      	mov	r5, r0
 800fef4:	0710      	lsls	r0, r2, #28
 800fef6:	460c      	mov	r4, r1
 800fef8:	d458      	bmi.n	800ffac <__sflush_r+0xc0>
 800fefa:	684b      	ldr	r3, [r1, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	dc05      	bgt.n	800ff0c <__sflush_r+0x20>
 800ff00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	dc02      	bgt.n	800ff0c <__sflush_r+0x20>
 800ff06:	2000      	movs	r0, #0
 800ff08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff0e:	2e00      	cmp	r6, #0
 800ff10:	d0f9      	beq.n	800ff06 <__sflush_r+0x1a>
 800ff12:	2300      	movs	r3, #0
 800ff14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff18:	682f      	ldr	r7, [r5, #0]
 800ff1a:	602b      	str	r3, [r5, #0]
 800ff1c:	d032      	beq.n	800ff84 <__sflush_r+0x98>
 800ff1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff20:	89a3      	ldrh	r3, [r4, #12]
 800ff22:	075a      	lsls	r2, r3, #29
 800ff24:	d505      	bpl.n	800ff32 <__sflush_r+0x46>
 800ff26:	6863      	ldr	r3, [r4, #4]
 800ff28:	1ac0      	subs	r0, r0, r3
 800ff2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff2c:	b10b      	cbz	r3, 800ff32 <__sflush_r+0x46>
 800ff2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff30:	1ac0      	subs	r0, r0, r3
 800ff32:	2300      	movs	r3, #0
 800ff34:	4602      	mov	r2, r0
 800ff36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff38:	6a21      	ldr	r1, [r4, #32]
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b0      	blx	r6
 800ff3e:	1c43      	adds	r3, r0, #1
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	d106      	bne.n	800ff52 <__sflush_r+0x66>
 800ff44:	6829      	ldr	r1, [r5, #0]
 800ff46:	291d      	cmp	r1, #29
 800ff48:	d82c      	bhi.n	800ffa4 <__sflush_r+0xb8>
 800ff4a:	4a2a      	ldr	r2, [pc, #168]	; (800fff4 <__sflush_r+0x108>)
 800ff4c:	40ca      	lsrs	r2, r1
 800ff4e:	07d6      	lsls	r6, r2, #31
 800ff50:	d528      	bpl.n	800ffa4 <__sflush_r+0xb8>
 800ff52:	2200      	movs	r2, #0
 800ff54:	6062      	str	r2, [r4, #4]
 800ff56:	04d9      	lsls	r1, r3, #19
 800ff58:	6922      	ldr	r2, [r4, #16]
 800ff5a:	6022      	str	r2, [r4, #0]
 800ff5c:	d504      	bpl.n	800ff68 <__sflush_r+0x7c>
 800ff5e:	1c42      	adds	r2, r0, #1
 800ff60:	d101      	bne.n	800ff66 <__sflush_r+0x7a>
 800ff62:	682b      	ldr	r3, [r5, #0]
 800ff64:	b903      	cbnz	r3, 800ff68 <__sflush_r+0x7c>
 800ff66:	6560      	str	r0, [r4, #84]	; 0x54
 800ff68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff6a:	602f      	str	r7, [r5, #0]
 800ff6c:	2900      	cmp	r1, #0
 800ff6e:	d0ca      	beq.n	800ff06 <__sflush_r+0x1a>
 800ff70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff74:	4299      	cmp	r1, r3
 800ff76:	d002      	beq.n	800ff7e <__sflush_r+0x92>
 800ff78:	4628      	mov	r0, r5
 800ff7a:	f7ff f905 	bl	800f188 <_free_r>
 800ff7e:	2000      	movs	r0, #0
 800ff80:	6360      	str	r0, [r4, #52]	; 0x34
 800ff82:	e7c1      	b.n	800ff08 <__sflush_r+0x1c>
 800ff84:	6a21      	ldr	r1, [r4, #32]
 800ff86:	2301      	movs	r3, #1
 800ff88:	4628      	mov	r0, r5
 800ff8a:	47b0      	blx	r6
 800ff8c:	1c41      	adds	r1, r0, #1
 800ff8e:	d1c7      	bne.n	800ff20 <__sflush_r+0x34>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d0c4      	beq.n	800ff20 <__sflush_r+0x34>
 800ff96:	2b1d      	cmp	r3, #29
 800ff98:	d001      	beq.n	800ff9e <__sflush_r+0xb2>
 800ff9a:	2b16      	cmp	r3, #22
 800ff9c:	d101      	bne.n	800ffa2 <__sflush_r+0xb6>
 800ff9e:	602f      	str	r7, [r5, #0]
 800ffa0:	e7b1      	b.n	800ff06 <__sflush_r+0x1a>
 800ffa2:	89a3      	ldrh	r3, [r4, #12]
 800ffa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa8:	81a3      	strh	r3, [r4, #12]
 800ffaa:	e7ad      	b.n	800ff08 <__sflush_r+0x1c>
 800ffac:	690f      	ldr	r7, [r1, #16]
 800ffae:	2f00      	cmp	r7, #0
 800ffb0:	d0a9      	beq.n	800ff06 <__sflush_r+0x1a>
 800ffb2:	0793      	lsls	r3, r2, #30
 800ffb4:	680e      	ldr	r6, [r1, #0]
 800ffb6:	bf08      	it	eq
 800ffb8:	694b      	ldreq	r3, [r1, #20]
 800ffba:	600f      	str	r7, [r1, #0]
 800ffbc:	bf18      	it	ne
 800ffbe:	2300      	movne	r3, #0
 800ffc0:	eba6 0807 	sub.w	r8, r6, r7
 800ffc4:	608b      	str	r3, [r1, #8]
 800ffc6:	f1b8 0f00 	cmp.w	r8, #0
 800ffca:	dd9c      	ble.n	800ff06 <__sflush_r+0x1a>
 800ffcc:	6a21      	ldr	r1, [r4, #32]
 800ffce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ffd0:	4643      	mov	r3, r8
 800ffd2:	463a      	mov	r2, r7
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	47b0      	blx	r6
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	dc06      	bgt.n	800ffea <__sflush_r+0xfe>
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe2:	81a3      	strh	r3, [r4, #12]
 800ffe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe8:	e78e      	b.n	800ff08 <__sflush_r+0x1c>
 800ffea:	4407      	add	r7, r0
 800ffec:	eba8 0800 	sub.w	r8, r8, r0
 800fff0:	e7e9      	b.n	800ffc6 <__sflush_r+0xda>
 800fff2:	bf00      	nop
 800fff4:	20400001 	.word	0x20400001

0800fff8 <_fflush_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	690b      	ldr	r3, [r1, #16]
 800fffc:	4605      	mov	r5, r0
 800fffe:	460c      	mov	r4, r1
 8010000:	b913      	cbnz	r3, 8010008 <_fflush_r+0x10>
 8010002:	2500      	movs	r5, #0
 8010004:	4628      	mov	r0, r5
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	b118      	cbz	r0, 8010012 <_fflush_r+0x1a>
 801000a:	6983      	ldr	r3, [r0, #24]
 801000c:	b90b      	cbnz	r3, 8010012 <_fflush_r+0x1a>
 801000e:	f000 f887 	bl	8010120 <__sinit>
 8010012:	4b14      	ldr	r3, [pc, #80]	; (8010064 <_fflush_r+0x6c>)
 8010014:	429c      	cmp	r4, r3
 8010016:	d11b      	bne.n	8010050 <_fflush_r+0x58>
 8010018:	686c      	ldr	r4, [r5, #4]
 801001a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d0ef      	beq.n	8010002 <_fflush_r+0xa>
 8010022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010024:	07d0      	lsls	r0, r2, #31
 8010026:	d404      	bmi.n	8010032 <_fflush_r+0x3a>
 8010028:	0599      	lsls	r1, r3, #22
 801002a:	d402      	bmi.n	8010032 <_fflush_r+0x3a>
 801002c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801002e:	f000 f927 	bl	8010280 <__retarget_lock_acquire_recursive>
 8010032:	4628      	mov	r0, r5
 8010034:	4621      	mov	r1, r4
 8010036:	f7ff ff59 	bl	800feec <__sflush_r>
 801003a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801003c:	07da      	lsls	r2, r3, #31
 801003e:	4605      	mov	r5, r0
 8010040:	d4e0      	bmi.n	8010004 <_fflush_r+0xc>
 8010042:	89a3      	ldrh	r3, [r4, #12]
 8010044:	059b      	lsls	r3, r3, #22
 8010046:	d4dd      	bmi.n	8010004 <_fflush_r+0xc>
 8010048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801004a:	f000 f91a 	bl	8010282 <__retarget_lock_release_recursive>
 801004e:	e7d9      	b.n	8010004 <_fflush_r+0xc>
 8010050:	4b05      	ldr	r3, [pc, #20]	; (8010068 <_fflush_r+0x70>)
 8010052:	429c      	cmp	r4, r3
 8010054:	d101      	bne.n	801005a <_fflush_r+0x62>
 8010056:	68ac      	ldr	r4, [r5, #8]
 8010058:	e7df      	b.n	801001a <_fflush_r+0x22>
 801005a:	4b04      	ldr	r3, [pc, #16]	; (801006c <_fflush_r+0x74>)
 801005c:	429c      	cmp	r4, r3
 801005e:	bf08      	it	eq
 8010060:	68ec      	ldreq	r4, [r5, #12]
 8010062:	e7da      	b.n	801001a <_fflush_r+0x22>
 8010064:	08012bc4 	.word	0x08012bc4
 8010068:	08012be4 	.word	0x08012be4
 801006c:	08012ba4 	.word	0x08012ba4

08010070 <std>:
 8010070:	2300      	movs	r3, #0
 8010072:	b510      	push	{r4, lr}
 8010074:	4604      	mov	r4, r0
 8010076:	e9c0 3300 	strd	r3, r3, [r0]
 801007a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801007e:	6083      	str	r3, [r0, #8]
 8010080:	8181      	strh	r1, [r0, #12]
 8010082:	6643      	str	r3, [r0, #100]	; 0x64
 8010084:	81c2      	strh	r2, [r0, #14]
 8010086:	6183      	str	r3, [r0, #24]
 8010088:	4619      	mov	r1, r3
 801008a:	2208      	movs	r2, #8
 801008c:	305c      	adds	r0, #92	; 0x5c
 801008e:	f7fb fb73 	bl	800b778 <memset>
 8010092:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <std+0x38>)
 8010094:	6263      	str	r3, [r4, #36]	; 0x24
 8010096:	4b05      	ldr	r3, [pc, #20]	; (80100ac <std+0x3c>)
 8010098:	62a3      	str	r3, [r4, #40]	; 0x28
 801009a:	4b05      	ldr	r3, [pc, #20]	; (80100b0 <std+0x40>)
 801009c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801009e:	4b05      	ldr	r3, [pc, #20]	; (80100b4 <std+0x44>)
 80100a0:	6224      	str	r4, [r4, #32]
 80100a2:	6323      	str	r3, [r4, #48]	; 0x30
 80100a4:	bd10      	pop	{r4, pc}
 80100a6:	bf00      	nop
 80100a8:	0800c521 	.word	0x0800c521
 80100ac:	0800c547 	.word	0x0800c547
 80100b0:	0800c57f 	.word	0x0800c57f
 80100b4:	0800c5a3 	.word	0x0800c5a3

080100b8 <_cleanup_r>:
 80100b8:	4901      	ldr	r1, [pc, #4]	; (80100c0 <_cleanup_r+0x8>)
 80100ba:	f000 b8c1 	b.w	8010240 <_fwalk_reent>
 80100be:	bf00      	nop
 80100c0:	0800fff9 	.word	0x0800fff9

080100c4 <__sfmoreglue>:
 80100c4:	b570      	push	{r4, r5, r6, lr}
 80100c6:	2268      	movs	r2, #104	; 0x68
 80100c8:	1e4d      	subs	r5, r1, #1
 80100ca:	4355      	muls	r5, r2
 80100cc:	460e      	mov	r6, r1
 80100ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80100d2:	f7ff f8c5 	bl	800f260 <_malloc_r>
 80100d6:	4604      	mov	r4, r0
 80100d8:	b140      	cbz	r0, 80100ec <__sfmoreglue+0x28>
 80100da:	2100      	movs	r1, #0
 80100dc:	e9c0 1600 	strd	r1, r6, [r0]
 80100e0:	300c      	adds	r0, #12
 80100e2:	60a0      	str	r0, [r4, #8]
 80100e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100e8:	f7fb fb46 	bl	800b778 <memset>
 80100ec:	4620      	mov	r0, r4
 80100ee:	bd70      	pop	{r4, r5, r6, pc}

080100f0 <__sfp_lock_acquire>:
 80100f0:	4801      	ldr	r0, [pc, #4]	; (80100f8 <__sfp_lock_acquire+0x8>)
 80100f2:	f000 b8c5 	b.w	8010280 <__retarget_lock_acquire_recursive>
 80100f6:	bf00      	nop
 80100f8:	20001231 	.word	0x20001231

080100fc <__sfp_lock_release>:
 80100fc:	4801      	ldr	r0, [pc, #4]	; (8010104 <__sfp_lock_release+0x8>)
 80100fe:	f000 b8c0 	b.w	8010282 <__retarget_lock_release_recursive>
 8010102:	bf00      	nop
 8010104:	20001231 	.word	0x20001231

08010108 <__sinit_lock_acquire>:
 8010108:	4801      	ldr	r0, [pc, #4]	; (8010110 <__sinit_lock_acquire+0x8>)
 801010a:	f000 b8b9 	b.w	8010280 <__retarget_lock_acquire_recursive>
 801010e:	bf00      	nop
 8010110:	20001232 	.word	0x20001232

08010114 <__sinit_lock_release>:
 8010114:	4801      	ldr	r0, [pc, #4]	; (801011c <__sinit_lock_release+0x8>)
 8010116:	f000 b8b4 	b.w	8010282 <__retarget_lock_release_recursive>
 801011a:	bf00      	nop
 801011c:	20001232 	.word	0x20001232

08010120 <__sinit>:
 8010120:	b510      	push	{r4, lr}
 8010122:	4604      	mov	r4, r0
 8010124:	f7ff fff0 	bl	8010108 <__sinit_lock_acquire>
 8010128:	69a3      	ldr	r3, [r4, #24]
 801012a:	b11b      	cbz	r3, 8010134 <__sinit+0x14>
 801012c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010130:	f7ff bff0 	b.w	8010114 <__sinit_lock_release>
 8010134:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010138:	6523      	str	r3, [r4, #80]	; 0x50
 801013a:	4b13      	ldr	r3, [pc, #76]	; (8010188 <__sinit+0x68>)
 801013c:	4a13      	ldr	r2, [pc, #76]	; (801018c <__sinit+0x6c>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	62a2      	str	r2, [r4, #40]	; 0x28
 8010142:	42a3      	cmp	r3, r4
 8010144:	bf04      	itt	eq
 8010146:	2301      	moveq	r3, #1
 8010148:	61a3      	streq	r3, [r4, #24]
 801014a:	4620      	mov	r0, r4
 801014c:	f000 f820 	bl	8010190 <__sfp>
 8010150:	6060      	str	r0, [r4, #4]
 8010152:	4620      	mov	r0, r4
 8010154:	f000 f81c 	bl	8010190 <__sfp>
 8010158:	60a0      	str	r0, [r4, #8]
 801015a:	4620      	mov	r0, r4
 801015c:	f000 f818 	bl	8010190 <__sfp>
 8010160:	2200      	movs	r2, #0
 8010162:	60e0      	str	r0, [r4, #12]
 8010164:	2104      	movs	r1, #4
 8010166:	6860      	ldr	r0, [r4, #4]
 8010168:	f7ff ff82 	bl	8010070 <std>
 801016c:	68a0      	ldr	r0, [r4, #8]
 801016e:	2201      	movs	r2, #1
 8010170:	2109      	movs	r1, #9
 8010172:	f7ff ff7d 	bl	8010070 <std>
 8010176:	68e0      	ldr	r0, [r4, #12]
 8010178:	2202      	movs	r2, #2
 801017a:	2112      	movs	r1, #18
 801017c:	f7ff ff78 	bl	8010070 <std>
 8010180:	2301      	movs	r3, #1
 8010182:	61a3      	str	r3, [r4, #24]
 8010184:	e7d2      	b.n	801012c <__sinit+0xc>
 8010186:	bf00      	nop
 8010188:	08012748 	.word	0x08012748
 801018c:	080100b9 	.word	0x080100b9

08010190 <__sfp>:
 8010190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010192:	4607      	mov	r7, r0
 8010194:	f7ff ffac 	bl	80100f0 <__sfp_lock_acquire>
 8010198:	4b1e      	ldr	r3, [pc, #120]	; (8010214 <__sfp+0x84>)
 801019a:	681e      	ldr	r6, [r3, #0]
 801019c:	69b3      	ldr	r3, [r6, #24]
 801019e:	b913      	cbnz	r3, 80101a6 <__sfp+0x16>
 80101a0:	4630      	mov	r0, r6
 80101a2:	f7ff ffbd 	bl	8010120 <__sinit>
 80101a6:	3648      	adds	r6, #72	; 0x48
 80101a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80101ac:	3b01      	subs	r3, #1
 80101ae:	d503      	bpl.n	80101b8 <__sfp+0x28>
 80101b0:	6833      	ldr	r3, [r6, #0]
 80101b2:	b30b      	cbz	r3, 80101f8 <__sfp+0x68>
 80101b4:	6836      	ldr	r6, [r6, #0]
 80101b6:	e7f7      	b.n	80101a8 <__sfp+0x18>
 80101b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80101bc:	b9d5      	cbnz	r5, 80101f4 <__sfp+0x64>
 80101be:	4b16      	ldr	r3, [pc, #88]	; (8010218 <__sfp+0x88>)
 80101c0:	60e3      	str	r3, [r4, #12]
 80101c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101c6:	6665      	str	r5, [r4, #100]	; 0x64
 80101c8:	f000 f859 	bl	801027e <__retarget_lock_init_recursive>
 80101cc:	f7ff ff96 	bl	80100fc <__sfp_lock_release>
 80101d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80101d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80101d8:	6025      	str	r5, [r4, #0]
 80101da:	61a5      	str	r5, [r4, #24]
 80101dc:	2208      	movs	r2, #8
 80101de:	4629      	mov	r1, r5
 80101e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80101e4:	f7fb fac8 	bl	800b778 <memset>
 80101e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80101ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80101f0:	4620      	mov	r0, r4
 80101f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101f4:	3468      	adds	r4, #104	; 0x68
 80101f6:	e7d9      	b.n	80101ac <__sfp+0x1c>
 80101f8:	2104      	movs	r1, #4
 80101fa:	4638      	mov	r0, r7
 80101fc:	f7ff ff62 	bl	80100c4 <__sfmoreglue>
 8010200:	4604      	mov	r4, r0
 8010202:	6030      	str	r0, [r6, #0]
 8010204:	2800      	cmp	r0, #0
 8010206:	d1d5      	bne.n	80101b4 <__sfp+0x24>
 8010208:	f7ff ff78 	bl	80100fc <__sfp_lock_release>
 801020c:	230c      	movs	r3, #12
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	e7ee      	b.n	80101f0 <__sfp+0x60>
 8010212:	bf00      	nop
 8010214:	08012748 	.word	0x08012748
 8010218:	ffff0001 	.word	0xffff0001

0801021c <fiprintf>:
 801021c:	b40e      	push	{r1, r2, r3}
 801021e:	b503      	push	{r0, r1, lr}
 8010220:	4601      	mov	r1, r0
 8010222:	ab03      	add	r3, sp, #12
 8010224:	4805      	ldr	r0, [pc, #20]	; (801023c <fiprintf+0x20>)
 8010226:	f853 2b04 	ldr.w	r2, [r3], #4
 801022a:	6800      	ldr	r0, [r0, #0]
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	f000 f8a7 	bl	8010380 <_vfiprintf_r>
 8010232:	b002      	add	sp, #8
 8010234:	f85d eb04 	ldr.w	lr, [sp], #4
 8010238:	b003      	add	sp, #12
 801023a:	4770      	bx	lr
 801023c:	20000014 	.word	0x20000014

08010240 <_fwalk_reent>:
 8010240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010244:	4606      	mov	r6, r0
 8010246:	4688      	mov	r8, r1
 8010248:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801024c:	2700      	movs	r7, #0
 801024e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010252:	f1b9 0901 	subs.w	r9, r9, #1
 8010256:	d505      	bpl.n	8010264 <_fwalk_reent+0x24>
 8010258:	6824      	ldr	r4, [r4, #0]
 801025a:	2c00      	cmp	r4, #0
 801025c:	d1f7      	bne.n	801024e <_fwalk_reent+0xe>
 801025e:	4638      	mov	r0, r7
 8010260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010264:	89ab      	ldrh	r3, [r5, #12]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d907      	bls.n	801027a <_fwalk_reent+0x3a>
 801026a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801026e:	3301      	adds	r3, #1
 8010270:	d003      	beq.n	801027a <_fwalk_reent+0x3a>
 8010272:	4629      	mov	r1, r5
 8010274:	4630      	mov	r0, r6
 8010276:	47c0      	blx	r8
 8010278:	4307      	orrs	r7, r0
 801027a:	3568      	adds	r5, #104	; 0x68
 801027c:	e7e9      	b.n	8010252 <_fwalk_reent+0x12>

0801027e <__retarget_lock_init_recursive>:
 801027e:	4770      	bx	lr

08010280 <__retarget_lock_acquire_recursive>:
 8010280:	4770      	bx	lr

08010282 <__retarget_lock_release_recursive>:
 8010282:	4770      	bx	lr

08010284 <memmove>:
 8010284:	4288      	cmp	r0, r1
 8010286:	b510      	push	{r4, lr}
 8010288:	eb01 0402 	add.w	r4, r1, r2
 801028c:	d902      	bls.n	8010294 <memmove+0x10>
 801028e:	4284      	cmp	r4, r0
 8010290:	4623      	mov	r3, r4
 8010292:	d807      	bhi.n	80102a4 <memmove+0x20>
 8010294:	1e43      	subs	r3, r0, #1
 8010296:	42a1      	cmp	r1, r4
 8010298:	d008      	beq.n	80102ac <memmove+0x28>
 801029a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801029e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102a2:	e7f8      	b.n	8010296 <memmove+0x12>
 80102a4:	4402      	add	r2, r0
 80102a6:	4601      	mov	r1, r0
 80102a8:	428a      	cmp	r2, r1
 80102aa:	d100      	bne.n	80102ae <memmove+0x2a>
 80102ac:	bd10      	pop	{r4, pc}
 80102ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102b6:	e7f7      	b.n	80102a8 <memmove+0x24>

080102b8 <__malloc_lock>:
 80102b8:	4801      	ldr	r0, [pc, #4]	; (80102c0 <__malloc_lock+0x8>)
 80102ba:	f7ff bfe1 	b.w	8010280 <__retarget_lock_acquire_recursive>
 80102be:	bf00      	nop
 80102c0:	20001230 	.word	0x20001230

080102c4 <__malloc_unlock>:
 80102c4:	4801      	ldr	r0, [pc, #4]	; (80102cc <__malloc_unlock+0x8>)
 80102c6:	f7ff bfdc 	b.w	8010282 <__retarget_lock_release_recursive>
 80102ca:	bf00      	nop
 80102cc:	20001230 	.word	0x20001230

080102d0 <_realloc_r>:
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	4680      	mov	r8, r0
 80102d6:	4614      	mov	r4, r2
 80102d8:	460e      	mov	r6, r1
 80102da:	b921      	cbnz	r1, 80102e6 <_realloc_r+0x16>
 80102dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102e0:	4611      	mov	r1, r2
 80102e2:	f7fe bfbd 	b.w	800f260 <_malloc_r>
 80102e6:	b92a      	cbnz	r2, 80102f4 <_realloc_r+0x24>
 80102e8:	f7fe ff4e 	bl	800f188 <_free_r>
 80102ec:	4625      	mov	r5, r4
 80102ee:	4628      	mov	r0, r5
 80102f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f4:	f000 faa0 	bl	8010838 <_malloc_usable_size_r>
 80102f8:	4284      	cmp	r4, r0
 80102fa:	4607      	mov	r7, r0
 80102fc:	d802      	bhi.n	8010304 <_realloc_r+0x34>
 80102fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010302:	d812      	bhi.n	801032a <_realloc_r+0x5a>
 8010304:	4621      	mov	r1, r4
 8010306:	4640      	mov	r0, r8
 8010308:	f7fe ffaa 	bl	800f260 <_malloc_r>
 801030c:	4605      	mov	r5, r0
 801030e:	2800      	cmp	r0, #0
 8010310:	d0ed      	beq.n	80102ee <_realloc_r+0x1e>
 8010312:	42bc      	cmp	r4, r7
 8010314:	4622      	mov	r2, r4
 8010316:	4631      	mov	r1, r6
 8010318:	bf28      	it	cs
 801031a:	463a      	movcs	r2, r7
 801031c:	f7fe fa4e 	bl	800e7bc <memcpy>
 8010320:	4631      	mov	r1, r6
 8010322:	4640      	mov	r0, r8
 8010324:	f7fe ff30 	bl	800f188 <_free_r>
 8010328:	e7e1      	b.n	80102ee <_realloc_r+0x1e>
 801032a:	4635      	mov	r5, r6
 801032c:	e7df      	b.n	80102ee <_realloc_r+0x1e>

0801032e <__sfputc_r>:
 801032e:	6893      	ldr	r3, [r2, #8]
 8010330:	3b01      	subs	r3, #1
 8010332:	2b00      	cmp	r3, #0
 8010334:	b410      	push	{r4}
 8010336:	6093      	str	r3, [r2, #8]
 8010338:	da08      	bge.n	801034c <__sfputc_r+0x1e>
 801033a:	6994      	ldr	r4, [r2, #24]
 801033c:	42a3      	cmp	r3, r4
 801033e:	db01      	blt.n	8010344 <__sfputc_r+0x16>
 8010340:	290a      	cmp	r1, #10
 8010342:	d103      	bne.n	801034c <__sfputc_r+0x1e>
 8010344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010348:	f000 b94a 	b.w	80105e0 <__swbuf_r>
 801034c:	6813      	ldr	r3, [r2, #0]
 801034e:	1c58      	adds	r0, r3, #1
 8010350:	6010      	str	r0, [r2, #0]
 8010352:	7019      	strb	r1, [r3, #0]
 8010354:	4608      	mov	r0, r1
 8010356:	f85d 4b04 	ldr.w	r4, [sp], #4
 801035a:	4770      	bx	lr

0801035c <__sfputs_r>:
 801035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035e:	4606      	mov	r6, r0
 8010360:	460f      	mov	r7, r1
 8010362:	4614      	mov	r4, r2
 8010364:	18d5      	adds	r5, r2, r3
 8010366:	42ac      	cmp	r4, r5
 8010368:	d101      	bne.n	801036e <__sfputs_r+0x12>
 801036a:	2000      	movs	r0, #0
 801036c:	e007      	b.n	801037e <__sfputs_r+0x22>
 801036e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010372:	463a      	mov	r2, r7
 8010374:	4630      	mov	r0, r6
 8010376:	f7ff ffda 	bl	801032e <__sfputc_r>
 801037a:	1c43      	adds	r3, r0, #1
 801037c:	d1f3      	bne.n	8010366 <__sfputs_r+0xa>
 801037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010380 <_vfiprintf_r>:
 8010380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	460d      	mov	r5, r1
 8010386:	b09d      	sub	sp, #116	; 0x74
 8010388:	4614      	mov	r4, r2
 801038a:	4698      	mov	r8, r3
 801038c:	4606      	mov	r6, r0
 801038e:	b118      	cbz	r0, 8010398 <_vfiprintf_r+0x18>
 8010390:	6983      	ldr	r3, [r0, #24]
 8010392:	b90b      	cbnz	r3, 8010398 <_vfiprintf_r+0x18>
 8010394:	f7ff fec4 	bl	8010120 <__sinit>
 8010398:	4b89      	ldr	r3, [pc, #548]	; (80105c0 <_vfiprintf_r+0x240>)
 801039a:	429d      	cmp	r5, r3
 801039c:	d11b      	bne.n	80103d6 <_vfiprintf_r+0x56>
 801039e:	6875      	ldr	r5, [r6, #4]
 80103a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103a2:	07d9      	lsls	r1, r3, #31
 80103a4:	d405      	bmi.n	80103b2 <_vfiprintf_r+0x32>
 80103a6:	89ab      	ldrh	r3, [r5, #12]
 80103a8:	059a      	lsls	r2, r3, #22
 80103aa:	d402      	bmi.n	80103b2 <_vfiprintf_r+0x32>
 80103ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ae:	f7ff ff67 	bl	8010280 <__retarget_lock_acquire_recursive>
 80103b2:	89ab      	ldrh	r3, [r5, #12]
 80103b4:	071b      	lsls	r3, r3, #28
 80103b6:	d501      	bpl.n	80103bc <_vfiprintf_r+0x3c>
 80103b8:	692b      	ldr	r3, [r5, #16]
 80103ba:	b9eb      	cbnz	r3, 80103f8 <_vfiprintf_r+0x78>
 80103bc:	4629      	mov	r1, r5
 80103be:	4630      	mov	r0, r6
 80103c0:	f000 f960 	bl	8010684 <__swsetup_r>
 80103c4:	b1c0      	cbz	r0, 80103f8 <_vfiprintf_r+0x78>
 80103c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103c8:	07dc      	lsls	r4, r3, #31
 80103ca:	d50e      	bpl.n	80103ea <_vfiprintf_r+0x6a>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	b01d      	add	sp, #116	; 0x74
 80103d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d6:	4b7b      	ldr	r3, [pc, #492]	; (80105c4 <_vfiprintf_r+0x244>)
 80103d8:	429d      	cmp	r5, r3
 80103da:	d101      	bne.n	80103e0 <_vfiprintf_r+0x60>
 80103dc:	68b5      	ldr	r5, [r6, #8]
 80103de:	e7df      	b.n	80103a0 <_vfiprintf_r+0x20>
 80103e0:	4b79      	ldr	r3, [pc, #484]	; (80105c8 <_vfiprintf_r+0x248>)
 80103e2:	429d      	cmp	r5, r3
 80103e4:	bf08      	it	eq
 80103e6:	68f5      	ldreq	r5, [r6, #12]
 80103e8:	e7da      	b.n	80103a0 <_vfiprintf_r+0x20>
 80103ea:	89ab      	ldrh	r3, [r5, #12]
 80103ec:	0598      	lsls	r0, r3, #22
 80103ee:	d4ed      	bmi.n	80103cc <_vfiprintf_r+0x4c>
 80103f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103f2:	f7ff ff46 	bl	8010282 <__retarget_lock_release_recursive>
 80103f6:	e7e9      	b.n	80103cc <_vfiprintf_r+0x4c>
 80103f8:	2300      	movs	r3, #0
 80103fa:	9309      	str	r3, [sp, #36]	; 0x24
 80103fc:	2320      	movs	r3, #32
 80103fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010402:	f8cd 800c 	str.w	r8, [sp, #12]
 8010406:	2330      	movs	r3, #48	; 0x30
 8010408:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80105cc <_vfiprintf_r+0x24c>
 801040c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010410:	f04f 0901 	mov.w	r9, #1
 8010414:	4623      	mov	r3, r4
 8010416:	469a      	mov	sl, r3
 8010418:	f813 2b01 	ldrb.w	r2, [r3], #1
 801041c:	b10a      	cbz	r2, 8010422 <_vfiprintf_r+0xa2>
 801041e:	2a25      	cmp	r2, #37	; 0x25
 8010420:	d1f9      	bne.n	8010416 <_vfiprintf_r+0x96>
 8010422:	ebba 0b04 	subs.w	fp, sl, r4
 8010426:	d00b      	beq.n	8010440 <_vfiprintf_r+0xc0>
 8010428:	465b      	mov	r3, fp
 801042a:	4622      	mov	r2, r4
 801042c:	4629      	mov	r1, r5
 801042e:	4630      	mov	r0, r6
 8010430:	f7ff ff94 	bl	801035c <__sfputs_r>
 8010434:	3001      	adds	r0, #1
 8010436:	f000 80aa 	beq.w	801058e <_vfiprintf_r+0x20e>
 801043a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801043c:	445a      	add	r2, fp
 801043e:	9209      	str	r2, [sp, #36]	; 0x24
 8010440:	f89a 3000 	ldrb.w	r3, [sl]
 8010444:	2b00      	cmp	r3, #0
 8010446:	f000 80a2 	beq.w	801058e <_vfiprintf_r+0x20e>
 801044a:	2300      	movs	r3, #0
 801044c:	f04f 32ff 	mov.w	r2, #4294967295
 8010450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010454:	f10a 0a01 	add.w	sl, sl, #1
 8010458:	9304      	str	r3, [sp, #16]
 801045a:	9307      	str	r3, [sp, #28]
 801045c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010460:	931a      	str	r3, [sp, #104]	; 0x68
 8010462:	4654      	mov	r4, sl
 8010464:	2205      	movs	r2, #5
 8010466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801046a:	4858      	ldr	r0, [pc, #352]	; (80105cc <_vfiprintf_r+0x24c>)
 801046c:	f7ef fee8 	bl	8000240 <memchr>
 8010470:	9a04      	ldr	r2, [sp, #16]
 8010472:	b9d8      	cbnz	r0, 80104ac <_vfiprintf_r+0x12c>
 8010474:	06d1      	lsls	r1, r2, #27
 8010476:	bf44      	itt	mi
 8010478:	2320      	movmi	r3, #32
 801047a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801047e:	0713      	lsls	r3, r2, #28
 8010480:	bf44      	itt	mi
 8010482:	232b      	movmi	r3, #43	; 0x2b
 8010484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010488:	f89a 3000 	ldrb.w	r3, [sl]
 801048c:	2b2a      	cmp	r3, #42	; 0x2a
 801048e:	d015      	beq.n	80104bc <_vfiprintf_r+0x13c>
 8010490:	9a07      	ldr	r2, [sp, #28]
 8010492:	4654      	mov	r4, sl
 8010494:	2000      	movs	r0, #0
 8010496:	f04f 0c0a 	mov.w	ip, #10
 801049a:	4621      	mov	r1, r4
 801049c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104a0:	3b30      	subs	r3, #48	; 0x30
 80104a2:	2b09      	cmp	r3, #9
 80104a4:	d94e      	bls.n	8010544 <_vfiprintf_r+0x1c4>
 80104a6:	b1b0      	cbz	r0, 80104d6 <_vfiprintf_r+0x156>
 80104a8:	9207      	str	r2, [sp, #28]
 80104aa:	e014      	b.n	80104d6 <_vfiprintf_r+0x156>
 80104ac:	eba0 0308 	sub.w	r3, r0, r8
 80104b0:	fa09 f303 	lsl.w	r3, r9, r3
 80104b4:	4313      	orrs	r3, r2
 80104b6:	9304      	str	r3, [sp, #16]
 80104b8:	46a2      	mov	sl, r4
 80104ba:	e7d2      	b.n	8010462 <_vfiprintf_r+0xe2>
 80104bc:	9b03      	ldr	r3, [sp, #12]
 80104be:	1d19      	adds	r1, r3, #4
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	9103      	str	r1, [sp, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	bfbb      	ittet	lt
 80104c8:	425b      	neglt	r3, r3
 80104ca:	f042 0202 	orrlt.w	r2, r2, #2
 80104ce:	9307      	strge	r3, [sp, #28]
 80104d0:	9307      	strlt	r3, [sp, #28]
 80104d2:	bfb8      	it	lt
 80104d4:	9204      	strlt	r2, [sp, #16]
 80104d6:	7823      	ldrb	r3, [r4, #0]
 80104d8:	2b2e      	cmp	r3, #46	; 0x2e
 80104da:	d10c      	bne.n	80104f6 <_vfiprintf_r+0x176>
 80104dc:	7863      	ldrb	r3, [r4, #1]
 80104de:	2b2a      	cmp	r3, #42	; 0x2a
 80104e0:	d135      	bne.n	801054e <_vfiprintf_r+0x1ce>
 80104e2:	9b03      	ldr	r3, [sp, #12]
 80104e4:	1d1a      	adds	r2, r3, #4
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	9203      	str	r2, [sp, #12]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	bfb8      	it	lt
 80104ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80104f2:	3402      	adds	r4, #2
 80104f4:	9305      	str	r3, [sp, #20]
 80104f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105dc <_vfiprintf_r+0x25c>
 80104fa:	7821      	ldrb	r1, [r4, #0]
 80104fc:	2203      	movs	r2, #3
 80104fe:	4650      	mov	r0, sl
 8010500:	f7ef fe9e 	bl	8000240 <memchr>
 8010504:	b140      	cbz	r0, 8010518 <_vfiprintf_r+0x198>
 8010506:	2340      	movs	r3, #64	; 0x40
 8010508:	eba0 000a 	sub.w	r0, r0, sl
 801050c:	fa03 f000 	lsl.w	r0, r3, r0
 8010510:	9b04      	ldr	r3, [sp, #16]
 8010512:	4303      	orrs	r3, r0
 8010514:	3401      	adds	r4, #1
 8010516:	9304      	str	r3, [sp, #16]
 8010518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801051c:	482c      	ldr	r0, [pc, #176]	; (80105d0 <_vfiprintf_r+0x250>)
 801051e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010522:	2206      	movs	r2, #6
 8010524:	f7ef fe8c 	bl	8000240 <memchr>
 8010528:	2800      	cmp	r0, #0
 801052a:	d03f      	beq.n	80105ac <_vfiprintf_r+0x22c>
 801052c:	4b29      	ldr	r3, [pc, #164]	; (80105d4 <_vfiprintf_r+0x254>)
 801052e:	bb1b      	cbnz	r3, 8010578 <_vfiprintf_r+0x1f8>
 8010530:	9b03      	ldr	r3, [sp, #12]
 8010532:	3307      	adds	r3, #7
 8010534:	f023 0307 	bic.w	r3, r3, #7
 8010538:	3308      	adds	r3, #8
 801053a:	9303      	str	r3, [sp, #12]
 801053c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801053e:	443b      	add	r3, r7
 8010540:	9309      	str	r3, [sp, #36]	; 0x24
 8010542:	e767      	b.n	8010414 <_vfiprintf_r+0x94>
 8010544:	fb0c 3202 	mla	r2, ip, r2, r3
 8010548:	460c      	mov	r4, r1
 801054a:	2001      	movs	r0, #1
 801054c:	e7a5      	b.n	801049a <_vfiprintf_r+0x11a>
 801054e:	2300      	movs	r3, #0
 8010550:	3401      	adds	r4, #1
 8010552:	9305      	str	r3, [sp, #20]
 8010554:	4619      	mov	r1, r3
 8010556:	f04f 0c0a 	mov.w	ip, #10
 801055a:	4620      	mov	r0, r4
 801055c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010560:	3a30      	subs	r2, #48	; 0x30
 8010562:	2a09      	cmp	r2, #9
 8010564:	d903      	bls.n	801056e <_vfiprintf_r+0x1ee>
 8010566:	2b00      	cmp	r3, #0
 8010568:	d0c5      	beq.n	80104f6 <_vfiprintf_r+0x176>
 801056a:	9105      	str	r1, [sp, #20]
 801056c:	e7c3      	b.n	80104f6 <_vfiprintf_r+0x176>
 801056e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010572:	4604      	mov	r4, r0
 8010574:	2301      	movs	r3, #1
 8010576:	e7f0      	b.n	801055a <_vfiprintf_r+0x1da>
 8010578:	ab03      	add	r3, sp, #12
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	462a      	mov	r2, r5
 801057e:	4b16      	ldr	r3, [pc, #88]	; (80105d8 <_vfiprintf_r+0x258>)
 8010580:	a904      	add	r1, sp, #16
 8010582:	4630      	mov	r0, r6
 8010584:	f7fb f9a0 	bl	800b8c8 <_printf_float>
 8010588:	4607      	mov	r7, r0
 801058a:	1c78      	adds	r0, r7, #1
 801058c:	d1d6      	bne.n	801053c <_vfiprintf_r+0x1bc>
 801058e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010590:	07d9      	lsls	r1, r3, #31
 8010592:	d405      	bmi.n	80105a0 <_vfiprintf_r+0x220>
 8010594:	89ab      	ldrh	r3, [r5, #12]
 8010596:	059a      	lsls	r2, r3, #22
 8010598:	d402      	bmi.n	80105a0 <_vfiprintf_r+0x220>
 801059a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801059c:	f7ff fe71 	bl	8010282 <__retarget_lock_release_recursive>
 80105a0:	89ab      	ldrh	r3, [r5, #12]
 80105a2:	065b      	lsls	r3, r3, #25
 80105a4:	f53f af12 	bmi.w	80103cc <_vfiprintf_r+0x4c>
 80105a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105aa:	e711      	b.n	80103d0 <_vfiprintf_r+0x50>
 80105ac:	ab03      	add	r3, sp, #12
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	462a      	mov	r2, r5
 80105b2:	4b09      	ldr	r3, [pc, #36]	; (80105d8 <_vfiprintf_r+0x258>)
 80105b4:	a904      	add	r1, sp, #16
 80105b6:	4630      	mov	r0, r6
 80105b8:	f7fb fc2a 	bl	800be10 <_printf_i>
 80105bc:	e7e4      	b.n	8010588 <_vfiprintf_r+0x208>
 80105be:	bf00      	nop
 80105c0:	08012bc4 	.word	0x08012bc4
 80105c4:	08012be4 	.word	0x08012be4
 80105c8:	08012ba4 	.word	0x08012ba4
 80105cc:	08012b3c 	.word	0x08012b3c
 80105d0:	08012b46 	.word	0x08012b46
 80105d4:	0800b8c9 	.word	0x0800b8c9
 80105d8:	0801035d 	.word	0x0801035d
 80105dc:	08012b42 	.word	0x08012b42

080105e0 <__swbuf_r>:
 80105e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e2:	460e      	mov	r6, r1
 80105e4:	4614      	mov	r4, r2
 80105e6:	4605      	mov	r5, r0
 80105e8:	b118      	cbz	r0, 80105f2 <__swbuf_r+0x12>
 80105ea:	6983      	ldr	r3, [r0, #24]
 80105ec:	b90b      	cbnz	r3, 80105f2 <__swbuf_r+0x12>
 80105ee:	f7ff fd97 	bl	8010120 <__sinit>
 80105f2:	4b21      	ldr	r3, [pc, #132]	; (8010678 <__swbuf_r+0x98>)
 80105f4:	429c      	cmp	r4, r3
 80105f6:	d12b      	bne.n	8010650 <__swbuf_r+0x70>
 80105f8:	686c      	ldr	r4, [r5, #4]
 80105fa:	69a3      	ldr	r3, [r4, #24]
 80105fc:	60a3      	str	r3, [r4, #8]
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	071a      	lsls	r2, r3, #28
 8010602:	d52f      	bpl.n	8010664 <__swbuf_r+0x84>
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	b36b      	cbz	r3, 8010664 <__swbuf_r+0x84>
 8010608:	6923      	ldr	r3, [r4, #16]
 801060a:	6820      	ldr	r0, [r4, #0]
 801060c:	1ac0      	subs	r0, r0, r3
 801060e:	6963      	ldr	r3, [r4, #20]
 8010610:	b2f6      	uxtb	r6, r6
 8010612:	4283      	cmp	r3, r0
 8010614:	4637      	mov	r7, r6
 8010616:	dc04      	bgt.n	8010622 <__swbuf_r+0x42>
 8010618:	4621      	mov	r1, r4
 801061a:	4628      	mov	r0, r5
 801061c:	f7ff fcec 	bl	800fff8 <_fflush_r>
 8010620:	bb30      	cbnz	r0, 8010670 <__swbuf_r+0x90>
 8010622:	68a3      	ldr	r3, [r4, #8]
 8010624:	3b01      	subs	r3, #1
 8010626:	60a3      	str	r3, [r4, #8]
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	6022      	str	r2, [r4, #0]
 801062e:	701e      	strb	r6, [r3, #0]
 8010630:	6963      	ldr	r3, [r4, #20]
 8010632:	3001      	adds	r0, #1
 8010634:	4283      	cmp	r3, r0
 8010636:	d004      	beq.n	8010642 <__swbuf_r+0x62>
 8010638:	89a3      	ldrh	r3, [r4, #12]
 801063a:	07db      	lsls	r3, r3, #31
 801063c:	d506      	bpl.n	801064c <__swbuf_r+0x6c>
 801063e:	2e0a      	cmp	r6, #10
 8010640:	d104      	bne.n	801064c <__swbuf_r+0x6c>
 8010642:	4621      	mov	r1, r4
 8010644:	4628      	mov	r0, r5
 8010646:	f7ff fcd7 	bl	800fff8 <_fflush_r>
 801064a:	b988      	cbnz	r0, 8010670 <__swbuf_r+0x90>
 801064c:	4638      	mov	r0, r7
 801064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010650:	4b0a      	ldr	r3, [pc, #40]	; (801067c <__swbuf_r+0x9c>)
 8010652:	429c      	cmp	r4, r3
 8010654:	d101      	bne.n	801065a <__swbuf_r+0x7a>
 8010656:	68ac      	ldr	r4, [r5, #8]
 8010658:	e7cf      	b.n	80105fa <__swbuf_r+0x1a>
 801065a:	4b09      	ldr	r3, [pc, #36]	; (8010680 <__swbuf_r+0xa0>)
 801065c:	429c      	cmp	r4, r3
 801065e:	bf08      	it	eq
 8010660:	68ec      	ldreq	r4, [r5, #12]
 8010662:	e7ca      	b.n	80105fa <__swbuf_r+0x1a>
 8010664:	4621      	mov	r1, r4
 8010666:	4628      	mov	r0, r5
 8010668:	f000 f80c 	bl	8010684 <__swsetup_r>
 801066c:	2800      	cmp	r0, #0
 801066e:	d0cb      	beq.n	8010608 <__swbuf_r+0x28>
 8010670:	f04f 37ff 	mov.w	r7, #4294967295
 8010674:	e7ea      	b.n	801064c <__swbuf_r+0x6c>
 8010676:	bf00      	nop
 8010678:	08012bc4 	.word	0x08012bc4
 801067c:	08012be4 	.word	0x08012be4
 8010680:	08012ba4 	.word	0x08012ba4

08010684 <__swsetup_r>:
 8010684:	4b32      	ldr	r3, [pc, #200]	; (8010750 <__swsetup_r+0xcc>)
 8010686:	b570      	push	{r4, r5, r6, lr}
 8010688:	681d      	ldr	r5, [r3, #0]
 801068a:	4606      	mov	r6, r0
 801068c:	460c      	mov	r4, r1
 801068e:	b125      	cbz	r5, 801069a <__swsetup_r+0x16>
 8010690:	69ab      	ldr	r3, [r5, #24]
 8010692:	b913      	cbnz	r3, 801069a <__swsetup_r+0x16>
 8010694:	4628      	mov	r0, r5
 8010696:	f7ff fd43 	bl	8010120 <__sinit>
 801069a:	4b2e      	ldr	r3, [pc, #184]	; (8010754 <__swsetup_r+0xd0>)
 801069c:	429c      	cmp	r4, r3
 801069e:	d10f      	bne.n	80106c0 <__swsetup_r+0x3c>
 80106a0:	686c      	ldr	r4, [r5, #4]
 80106a2:	89a3      	ldrh	r3, [r4, #12]
 80106a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106a8:	0719      	lsls	r1, r3, #28
 80106aa:	d42c      	bmi.n	8010706 <__swsetup_r+0x82>
 80106ac:	06dd      	lsls	r5, r3, #27
 80106ae:	d411      	bmi.n	80106d4 <__swsetup_r+0x50>
 80106b0:	2309      	movs	r3, #9
 80106b2:	6033      	str	r3, [r6, #0]
 80106b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80106b8:	81a3      	strh	r3, [r4, #12]
 80106ba:	f04f 30ff 	mov.w	r0, #4294967295
 80106be:	e03e      	b.n	801073e <__swsetup_r+0xba>
 80106c0:	4b25      	ldr	r3, [pc, #148]	; (8010758 <__swsetup_r+0xd4>)
 80106c2:	429c      	cmp	r4, r3
 80106c4:	d101      	bne.n	80106ca <__swsetup_r+0x46>
 80106c6:	68ac      	ldr	r4, [r5, #8]
 80106c8:	e7eb      	b.n	80106a2 <__swsetup_r+0x1e>
 80106ca:	4b24      	ldr	r3, [pc, #144]	; (801075c <__swsetup_r+0xd8>)
 80106cc:	429c      	cmp	r4, r3
 80106ce:	bf08      	it	eq
 80106d0:	68ec      	ldreq	r4, [r5, #12]
 80106d2:	e7e6      	b.n	80106a2 <__swsetup_r+0x1e>
 80106d4:	0758      	lsls	r0, r3, #29
 80106d6:	d512      	bpl.n	80106fe <__swsetup_r+0x7a>
 80106d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106da:	b141      	cbz	r1, 80106ee <__swsetup_r+0x6a>
 80106dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106e0:	4299      	cmp	r1, r3
 80106e2:	d002      	beq.n	80106ea <__swsetup_r+0x66>
 80106e4:	4630      	mov	r0, r6
 80106e6:	f7fe fd4f 	bl	800f188 <_free_r>
 80106ea:	2300      	movs	r3, #0
 80106ec:	6363      	str	r3, [r4, #52]	; 0x34
 80106ee:	89a3      	ldrh	r3, [r4, #12]
 80106f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106f4:	81a3      	strh	r3, [r4, #12]
 80106f6:	2300      	movs	r3, #0
 80106f8:	6063      	str	r3, [r4, #4]
 80106fa:	6923      	ldr	r3, [r4, #16]
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	89a3      	ldrh	r3, [r4, #12]
 8010700:	f043 0308 	orr.w	r3, r3, #8
 8010704:	81a3      	strh	r3, [r4, #12]
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	b94b      	cbnz	r3, 801071e <__swsetup_r+0x9a>
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010714:	d003      	beq.n	801071e <__swsetup_r+0x9a>
 8010716:	4621      	mov	r1, r4
 8010718:	4630      	mov	r0, r6
 801071a:	f000 f84d 	bl	80107b8 <__smakebuf_r>
 801071e:	89a0      	ldrh	r0, [r4, #12]
 8010720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010724:	f010 0301 	ands.w	r3, r0, #1
 8010728:	d00a      	beq.n	8010740 <__swsetup_r+0xbc>
 801072a:	2300      	movs	r3, #0
 801072c:	60a3      	str	r3, [r4, #8]
 801072e:	6963      	ldr	r3, [r4, #20]
 8010730:	425b      	negs	r3, r3
 8010732:	61a3      	str	r3, [r4, #24]
 8010734:	6923      	ldr	r3, [r4, #16]
 8010736:	b943      	cbnz	r3, 801074a <__swsetup_r+0xc6>
 8010738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801073c:	d1ba      	bne.n	80106b4 <__swsetup_r+0x30>
 801073e:	bd70      	pop	{r4, r5, r6, pc}
 8010740:	0781      	lsls	r1, r0, #30
 8010742:	bf58      	it	pl
 8010744:	6963      	ldrpl	r3, [r4, #20]
 8010746:	60a3      	str	r3, [r4, #8]
 8010748:	e7f4      	b.n	8010734 <__swsetup_r+0xb0>
 801074a:	2000      	movs	r0, #0
 801074c:	e7f7      	b.n	801073e <__swsetup_r+0xba>
 801074e:	bf00      	nop
 8010750:	20000014 	.word	0x20000014
 8010754:	08012bc4 	.word	0x08012bc4
 8010758:	08012be4 	.word	0x08012be4
 801075c:	08012ba4 	.word	0x08012ba4

08010760 <abort>:
 8010760:	b508      	push	{r3, lr}
 8010762:	2006      	movs	r0, #6
 8010764:	f000 f898 	bl	8010898 <raise>
 8010768:	2001      	movs	r0, #1
 801076a:	f7f5 f901 	bl	8005970 <_exit>

0801076e <__swhatbuf_r>:
 801076e:	b570      	push	{r4, r5, r6, lr}
 8010770:	460e      	mov	r6, r1
 8010772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010776:	2900      	cmp	r1, #0
 8010778:	b096      	sub	sp, #88	; 0x58
 801077a:	4614      	mov	r4, r2
 801077c:	461d      	mov	r5, r3
 801077e:	da08      	bge.n	8010792 <__swhatbuf_r+0x24>
 8010780:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010784:	2200      	movs	r2, #0
 8010786:	602a      	str	r2, [r5, #0]
 8010788:	061a      	lsls	r2, r3, #24
 801078a:	d410      	bmi.n	80107ae <__swhatbuf_r+0x40>
 801078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010790:	e00e      	b.n	80107b0 <__swhatbuf_r+0x42>
 8010792:	466a      	mov	r2, sp
 8010794:	f000 f89c 	bl	80108d0 <_fstat_r>
 8010798:	2800      	cmp	r0, #0
 801079a:	dbf1      	blt.n	8010780 <__swhatbuf_r+0x12>
 801079c:	9a01      	ldr	r2, [sp, #4]
 801079e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107a6:	425a      	negs	r2, r3
 80107a8:	415a      	adcs	r2, r3
 80107aa:	602a      	str	r2, [r5, #0]
 80107ac:	e7ee      	b.n	801078c <__swhatbuf_r+0x1e>
 80107ae:	2340      	movs	r3, #64	; 0x40
 80107b0:	2000      	movs	r0, #0
 80107b2:	6023      	str	r3, [r4, #0]
 80107b4:	b016      	add	sp, #88	; 0x58
 80107b6:	bd70      	pop	{r4, r5, r6, pc}

080107b8 <__smakebuf_r>:
 80107b8:	898b      	ldrh	r3, [r1, #12]
 80107ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107bc:	079d      	lsls	r5, r3, #30
 80107be:	4606      	mov	r6, r0
 80107c0:	460c      	mov	r4, r1
 80107c2:	d507      	bpl.n	80107d4 <__smakebuf_r+0x1c>
 80107c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107c8:	6023      	str	r3, [r4, #0]
 80107ca:	6123      	str	r3, [r4, #16]
 80107cc:	2301      	movs	r3, #1
 80107ce:	6163      	str	r3, [r4, #20]
 80107d0:	b002      	add	sp, #8
 80107d2:	bd70      	pop	{r4, r5, r6, pc}
 80107d4:	ab01      	add	r3, sp, #4
 80107d6:	466a      	mov	r2, sp
 80107d8:	f7ff ffc9 	bl	801076e <__swhatbuf_r>
 80107dc:	9900      	ldr	r1, [sp, #0]
 80107de:	4605      	mov	r5, r0
 80107e0:	4630      	mov	r0, r6
 80107e2:	f7fe fd3d 	bl	800f260 <_malloc_r>
 80107e6:	b948      	cbnz	r0, 80107fc <__smakebuf_r+0x44>
 80107e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ec:	059a      	lsls	r2, r3, #22
 80107ee:	d4ef      	bmi.n	80107d0 <__smakebuf_r+0x18>
 80107f0:	f023 0303 	bic.w	r3, r3, #3
 80107f4:	f043 0302 	orr.w	r3, r3, #2
 80107f8:	81a3      	strh	r3, [r4, #12]
 80107fa:	e7e3      	b.n	80107c4 <__smakebuf_r+0xc>
 80107fc:	4b0d      	ldr	r3, [pc, #52]	; (8010834 <__smakebuf_r+0x7c>)
 80107fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8010800:	89a3      	ldrh	r3, [r4, #12]
 8010802:	6020      	str	r0, [r4, #0]
 8010804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010808:	81a3      	strh	r3, [r4, #12]
 801080a:	9b00      	ldr	r3, [sp, #0]
 801080c:	6163      	str	r3, [r4, #20]
 801080e:	9b01      	ldr	r3, [sp, #4]
 8010810:	6120      	str	r0, [r4, #16]
 8010812:	b15b      	cbz	r3, 801082c <__smakebuf_r+0x74>
 8010814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010818:	4630      	mov	r0, r6
 801081a:	f000 f86b 	bl	80108f4 <_isatty_r>
 801081e:	b128      	cbz	r0, 801082c <__smakebuf_r+0x74>
 8010820:	89a3      	ldrh	r3, [r4, #12]
 8010822:	f023 0303 	bic.w	r3, r3, #3
 8010826:	f043 0301 	orr.w	r3, r3, #1
 801082a:	81a3      	strh	r3, [r4, #12]
 801082c:	89a0      	ldrh	r0, [r4, #12]
 801082e:	4305      	orrs	r5, r0
 8010830:	81a5      	strh	r5, [r4, #12]
 8010832:	e7cd      	b.n	80107d0 <__smakebuf_r+0x18>
 8010834:	080100b9 	.word	0x080100b9

08010838 <_malloc_usable_size_r>:
 8010838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801083c:	1f18      	subs	r0, r3, #4
 801083e:	2b00      	cmp	r3, #0
 8010840:	bfbc      	itt	lt
 8010842:	580b      	ldrlt	r3, [r1, r0]
 8010844:	18c0      	addlt	r0, r0, r3
 8010846:	4770      	bx	lr

08010848 <_raise_r>:
 8010848:	291f      	cmp	r1, #31
 801084a:	b538      	push	{r3, r4, r5, lr}
 801084c:	4604      	mov	r4, r0
 801084e:	460d      	mov	r5, r1
 8010850:	d904      	bls.n	801085c <_raise_r+0x14>
 8010852:	2316      	movs	r3, #22
 8010854:	6003      	str	r3, [r0, #0]
 8010856:	f04f 30ff 	mov.w	r0, #4294967295
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801085e:	b112      	cbz	r2, 8010866 <_raise_r+0x1e>
 8010860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010864:	b94b      	cbnz	r3, 801087a <_raise_r+0x32>
 8010866:	4620      	mov	r0, r4
 8010868:	f000 f830 	bl	80108cc <_getpid_r>
 801086c:	462a      	mov	r2, r5
 801086e:	4601      	mov	r1, r0
 8010870:	4620      	mov	r0, r4
 8010872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010876:	f000 b817 	b.w	80108a8 <_kill_r>
 801087a:	2b01      	cmp	r3, #1
 801087c:	d00a      	beq.n	8010894 <_raise_r+0x4c>
 801087e:	1c59      	adds	r1, r3, #1
 8010880:	d103      	bne.n	801088a <_raise_r+0x42>
 8010882:	2316      	movs	r3, #22
 8010884:	6003      	str	r3, [r0, #0]
 8010886:	2001      	movs	r0, #1
 8010888:	e7e7      	b.n	801085a <_raise_r+0x12>
 801088a:	2400      	movs	r4, #0
 801088c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010890:	4628      	mov	r0, r5
 8010892:	4798      	blx	r3
 8010894:	2000      	movs	r0, #0
 8010896:	e7e0      	b.n	801085a <_raise_r+0x12>

08010898 <raise>:
 8010898:	4b02      	ldr	r3, [pc, #8]	; (80108a4 <raise+0xc>)
 801089a:	4601      	mov	r1, r0
 801089c:	6818      	ldr	r0, [r3, #0]
 801089e:	f7ff bfd3 	b.w	8010848 <_raise_r>
 80108a2:	bf00      	nop
 80108a4:	20000014 	.word	0x20000014

080108a8 <_kill_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d07      	ldr	r5, [pc, #28]	; (80108c8 <_kill_r+0x20>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	4604      	mov	r4, r0
 80108b0:	4608      	mov	r0, r1
 80108b2:	4611      	mov	r1, r2
 80108b4:	602b      	str	r3, [r5, #0]
 80108b6:	f7f5 f84b 	bl	8005950 <_kill>
 80108ba:	1c43      	adds	r3, r0, #1
 80108bc:	d102      	bne.n	80108c4 <_kill_r+0x1c>
 80108be:	682b      	ldr	r3, [r5, #0]
 80108c0:	b103      	cbz	r3, 80108c4 <_kill_r+0x1c>
 80108c2:	6023      	str	r3, [r4, #0]
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	bf00      	nop
 80108c8:	2000122c 	.word	0x2000122c

080108cc <_getpid_r>:
 80108cc:	f7f5 b838 	b.w	8005940 <_getpid>

080108d0 <_fstat_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	4d07      	ldr	r5, [pc, #28]	; (80108f0 <_fstat_r+0x20>)
 80108d4:	2300      	movs	r3, #0
 80108d6:	4604      	mov	r4, r0
 80108d8:	4608      	mov	r0, r1
 80108da:	4611      	mov	r1, r2
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	f7f5 f896 	bl	8005a0e <_fstat>
 80108e2:	1c43      	adds	r3, r0, #1
 80108e4:	d102      	bne.n	80108ec <_fstat_r+0x1c>
 80108e6:	682b      	ldr	r3, [r5, #0]
 80108e8:	b103      	cbz	r3, 80108ec <_fstat_r+0x1c>
 80108ea:	6023      	str	r3, [r4, #0]
 80108ec:	bd38      	pop	{r3, r4, r5, pc}
 80108ee:	bf00      	nop
 80108f0:	2000122c 	.word	0x2000122c

080108f4 <_isatty_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4d06      	ldr	r5, [pc, #24]	; (8010910 <_isatty_r+0x1c>)
 80108f8:	2300      	movs	r3, #0
 80108fa:	4604      	mov	r4, r0
 80108fc:	4608      	mov	r0, r1
 80108fe:	602b      	str	r3, [r5, #0]
 8010900:	f7f5 f895 	bl	8005a2e <_isatty>
 8010904:	1c43      	adds	r3, r0, #1
 8010906:	d102      	bne.n	801090e <_isatty_r+0x1a>
 8010908:	682b      	ldr	r3, [r5, #0]
 801090a:	b103      	cbz	r3, 801090e <_isatty_r+0x1a>
 801090c:	6023      	str	r3, [r4, #0]
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	2000122c 	.word	0x2000122c

08010914 <acos>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	ed2d 8b02 	vpush	{d8}
 801091a:	ec55 4b10 	vmov	r4, r5, d0
 801091e:	f000 f91f 	bl	8010b60 <__ieee754_acos>
 8010922:	4622      	mov	r2, r4
 8010924:	462b      	mov	r3, r5
 8010926:	4620      	mov	r0, r4
 8010928:	4629      	mov	r1, r5
 801092a:	eeb0 8a40 	vmov.f32	s16, s0
 801092e:	eef0 8a60 	vmov.f32	s17, s1
 8010932:	f7f0 f92b 	bl	8000b8c <__aeabi_dcmpun>
 8010936:	b9a8      	cbnz	r0, 8010964 <acos+0x50>
 8010938:	ec45 4b10 	vmov	d0, r4, r5
 801093c:	f001 fe04 	bl	8012548 <fabs>
 8010940:	4b0c      	ldr	r3, [pc, #48]	; (8010974 <acos+0x60>)
 8010942:	ec51 0b10 	vmov	r0, r1, d0
 8010946:	2200      	movs	r2, #0
 8010948:	f7f0 f916 	bl	8000b78 <__aeabi_dcmpgt>
 801094c:	b150      	cbz	r0, 8010964 <acos+0x50>
 801094e:	f7fa fee9 	bl	800b724 <__errno>
 8010952:	ecbd 8b02 	vpop	{d8}
 8010956:	2321      	movs	r3, #33	; 0x21
 8010958:	6003      	str	r3, [r0, #0]
 801095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801095e:	4806      	ldr	r0, [pc, #24]	; (8010978 <acos+0x64>)
 8010960:	f7ff b986 	b.w	800fc70 <nan>
 8010964:	eeb0 0a48 	vmov.f32	s0, s16
 8010968:	eef0 0a68 	vmov.f32	s1, s17
 801096c:	ecbd 8b02 	vpop	{d8}
 8010970:	bd38      	pop	{r3, r4, r5, pc}
 8010972:	bf00      	nop
 8010974:	3ff00000 	.word	0x3ff00000
 8010978:	08012ba3 	.word	0x08012ba3

0801097c <asin>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	ed2d 8b02 	vpush	{d8}
 8010982:	ec55 4b10 	vmov	r4, r5, d0
 8010986:	f000 fb4b 	bl	8011020 <__ieee754_asin>
 801098a:	4622      	mov	r2, r4
 801098c:	462b      	mov	r3, r5
 801098e:	4620      	mov	r0, r4
 8010990:	4629      	mov	r1, r5
 8010992:	eeb0 8a40 	vmov.f32	s16, s0
 8010996:	eef0 8a60 	vmov.f32	s17, s1
 801099a:	f7f0 f8f7 	bl	8000b8c <__aeabi_dcmpun>
 801099e:	b9a8      	cbnz	r0, 80109cc <asin+0x50>
 80109a0:	ec45 4b10 	vmov	d0, r4, r5
 80109a4:	f001 fdd0 	bl	8012548 <fabs>
 80109a8:	4b0c      	ldr	r3, [pc, #48]	; (80109dc <asin+0x60>)
 80109aa:	ec51 0b10 	vmov	r0, r1, d0
 80109ae:	2200      	movs	r2, #0
 80109b0:	f7f0 f8e2 	bl	8000b78 <__aeabi_dcmpgt>
 80109b4:	b150      	cbz	r0, 80109cc <asin+0x50>
 80109b6:	f7fa feb5 	bl	800b724 <__errno>
 80109ba:	ecbd 8b02 	vpop	{d8}
 80109be:	2321      	movs	r3, #33	; 0x21
 80109c0:	6003      	str	r3, [r0, #0]
 80109c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109c6:	4806      	ldr	r0, [pc, #24]	; (80109e0 <asin+0x64>)
 80109c8:	f7ff b952 	b.w	800fc70 <nan>
 80109cc:	eeb0 0a48 	vmov.f32	s0, s16
 80109d0:	eef0 0a68 	vmov.f32	s1, s17
 80109d4:	ecbd 8b02 	vpop	{d8}
 80109d8:	bd38      	pop	{r3, r4, r5, pc}
 80109da:	bf00      	nop
 80109dc:	3ff00000 	.word	0x3ff00000
 80109e0:	08012ba3 	.word	0x08012ba3

080109e4 <atan2>:
 80109e4:	f000 bd30 	b.w	8011448 <__ieee754_atan2>

080109e8 <pow>:
 80109e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ea:	ed2d 8b02 	vpush	{d8}
 80109ee:	eeb0 8a40 	vmov.f32	s16, s0
 80109f2:	eef0 8a60 	vmov.f32	s17, s1
 80109f6:	ec55 4b11 	vmov	r4, r5, d1
 80109fa:	f000 fdf1 	bl	80115e0 <__ieee754_pow>
 80109fe:	4622      	mov	r2, r4
 8010a00:	462b      	mov	r3, r5
 8010a02:	4620      	mov	r0, r4
 8010a04:	4629      	mov	r1, r5
 8010a06:	ec57 6b10 	vmov	r6, r7, d0
 8010a0a:	f7f0 f8bf 	bl	8000b8c <__aeabi_dcmpun>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d13b      	bne.n	8010a8a <pow+0xa2>
 8010a12:	ec51 0b18 	vmov	r0, r1, d8
 8010a16:	2200      	movs	r2, #0
 8010a18:	2300      	movs	r3, #0
 8010a1a:	f7f0 f885 	bl	8000b28 <__aeabi_dcmpeq>
 8010a1e:	b1b8      	cbz	r0, 8010a50 <pow+0x68>
 8010a20:	2200      	movs	r2, #0
 8010a22:	2300      	movs	r3, #0
 8010a24:	4620      	mov	r0, r4
 8010a26:	4629      	mov	r1, r5
 8010a28:	f7f0 f87e 	bl	8000b28 <__aeabi_dcmpeq>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d146      	bne.n	8010abe <pow+0xd6>
 8010a30:	ec45 4b10 	vmov	d0, r4, r5
 8010a34:	f001 fd91 	bl	801255a <finite>
 8010a38:	b338      	cbz	r0, 8010a8a <pow+0xa2>
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	4620      	mov	r0, r4
 8010a40:	4629      	mov	r1, r5
 8010a42:	f7f0 f87b 	bl	8000b3c <__aeabi_dcmplt>
 8010a46:	b300      	cbz	r0, 8010a8a <pow+0xa2>
 8010a48:	f7fa fe6c 	bl	800b724 <__errno>
 8010a4c:	2322      	movs	r3, #34	; 0x22
 8010a4e:	e01b      	b.n	8010a88 <pow+0xa0>
 8010a50:	ec47 6b10 	vmov	d0, r6, r7
 8010a54:	f001 fd81 	bl	801255a <finite>
 8010a58:	b9e0      	cbnz	r0, 8010a94 <pow+0xac>
 8010a5a:	eeb0 0a48 	vmov.f32	s0, s16
 8010a5e:	eef0 0a68 	vmov.f32	s1, s17
 8010a62:	f001 fd7a 	bl	801255a <finite>
 8010a66:	b1a8      	cbz	r0, 8010a94 <pow+0xac>
 8010a68:	ec45 4b10 	vmov	d0, r4, r5
 8010a6c:	f001 fd75 	bl	801255a <finite>
 8010a70:	b180      	cbz	r0, 8010a94 <pow+0xac>
 8010a72:	4632      	mov	r2, r6
 8010a74:	463b      	mov	r3, r7
 8010a76:	4630      	mov	r0, r6
 8010a78:	4639      	mov	r1, r7
 8010a7a:	f7f0 f887 	bl	8000b8c <__aeabi_dcmpun>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d0e2      	beq.n	8010a48 <pow+0x60>
 8010a82:	f7fa fe4f 	bl	800b724 <__errno>
 8010a86:	2321      	movs	r3, #33	; 0x21
 8010a88:	6003      	str	r3, [r0, #0]
 8010a8a:	ecbd 8b02 	vpop	{d8}
 8010a8e:	ec47 6b10 	vmov	d0, r6, r7
 8010a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a94:	2200      	movs	r2, #0
 8010a96:	2300      	movs	r3, #0
 8010a98:	4630      	mov	r0, r6
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	f7f0 f844 	bl	8000b28 <__aeabi_dcmpeq>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d0f2      	beq.n	8010a8a <pow+0xa2>
 8010aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8010aa8:	eef0 0a68 	vmov.f32	s1, s17
 8010aac:	f001 fd55 	bl	801255a <finite>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	d0ea      	beq.n	8010a8a <pow+0xa2>
 8010ab4:	ec45 4b10 	vmov	d0, r4, r5
 8010ab8:	f001 fd4f 	bl	801255a <finite>
 8010abc:	e7c3      	b.n	8010a46 <pow+0x5e>
 8010abe:	4f01      	ldr	r7, [pc, #4]	; (8010ac4 <pow+0xdc>)
 8010ac0:	2600      	movs	r6, #0
 8010ac2:	e7e2      	b.n	8010a8a <pow+0xa2>
 8010ac4:	3ff00000 	.word	0x3ff00000

08010ac8 <sqrt>:
 8010ac8:	b538      	push	{r3, r4, r5, lr}
 8010aca:	ed2d 8b02 	vpush	{d8}
 8010ace:	ec55 4b10 	vmov	r4, r5, d0
 8010ad2:	f001 fab3 	bl	801203c <__ieee754_sqrt>
 8010ad6:	4622      	mov	r2, r4
 8010ad8:	462b      	mov	r3, r5
 8010ada:	4620      	mov	r0, r4
 8010adc:	4629      	mov	r1, r5
 8010ade:	eeb0 8a40 	vmov.f32	s16, s0
 8010ae2:	eef0 8a60 	vmov.f32	s17, s1
 8010ae6:	f7f0 f851 	bl	8000b8c <__aeabi_dcmpun>
 8010aea:	b990      	cbnz	r0, 8010b12 <sqrt+0x4a>
 8010aec:	2200      	movs	r2, #0
 8010aee:	2300      	movs	r3, #0
 8010af0:	4620      	mov	r0, r4
 8010af2:	4629      	mov	r1, r5
 8010af4:	f7f0 f822 	bl	8000b3c <__aeabi_dcmplt>
 8010af8:	b158      	cbz	r0, 8010b12 <sqrt+0x4a>
 8010afa:	f7fa fe13 	bl	800b724 <__errno>
 8010afe:	2321      	movs	r3, #33	; 0x21
 8010b00:	6003      	str	r3, [r0, #0]
 8010b02:	2200      	movs	r2, #0
 8010b04:	2300      	movs	r3, #0
 8010b06:	4610      	mov	r0, r2
 8010b08:	4619      	mov	r1, r3
 8010b0a:	f7ef fecf 	bl	80008ac <__aeabi_ddiv>
 8010b0e:	ec41 0b18 	vmov	d8, r0, r1
 8010b12:	eeb0 0a48 	vmov.f32	s0, s16
 8010b16:	eef0 0a68 	vmov.f32	s1, s17
 8010b1a:	ecbd 8b02 	vpop	{d8}
 8010b1e:	bd38      	pop	{r3, r4, r5, pc}

08010b20 <sqrtf>:
 8010b20:	b508      	push	{r3, lr}
 8010b22:	ed2d 8b02 	vpush	{d8}
 8010b26:	eeb0 8a40 	vmov.f32	s16, s0
 8010b2a:	f001 fb39 	bl	80121a0 <__ieee754_sqrtf>
 8010b2e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b36:	d60c      	bvs.n	8010b52 <sqrtf+0x32>
 8010b38:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010b58 <sqrtf+0x38>
 8010b3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b44:	d505      	bpl.n	8010b52 <sqrtf+0x32>
 8010b46:	f7fa fded 	bl	800b724 <__errno>
 8010b4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b4e:	2321      	movs	r3, #33	; 0x21
 8010b50:	6003      	str	r3, [r0, #0]
 8010b52:	ecbd 8b02 	vpop	{d8}
 8010b56:	bd08      	pop	{r3, pc}
	...

08010b60 <__ieee754_acos>:
 8010b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	ec55 4b10 	vmov	r4, r5, d0
 8010b68:	49b7      	ldr	r1, [pc, #732]	; (8010e48 <__ieee754_acos+0x2e8>)
 8010b6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010b6e:	428b      	cmp	r3, r1
 8010b70:	dd1b      	ble.n	8010baa <__ieee754_acos+0x4a>
 8010b72:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010b76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010b7a:	4323      	orrs	r3, r4
 8010b7c:	d106      	bne.n	8010b8c <__ieee754_acos+0x2c>
 8010b7e:	2d00      	cmp	r5, #0
 8010b80:	f300 8211 	bgt.w	8010fa6 <__ieee754_acos+0x446>
 8010b84:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010de0 <__ieee754_acos+0x280>
 8010b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8c:	ee10 2a10 	vmov	r2, s0
 8010b90:	462b      	mov	r3, r5
 8010b92:	ee10 0a10 	vmov	r0, s0
 8010b96:	4629      	mov	r1, r5
 8010b98:	f7ef fba6 	bl	80002e8 <__aeabi_dsub>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	f7ef fe84 	bl	80008ac <__aeabi_ddiv>
 8010ba4:	ec41 0b10 	vmov	d0, r0, r1
 8010ba8:	e7ee      	b.n	8010b88 <__ieee754_acos+0x28>
 8010baa:	49a8      	ldr	r1, [pc, #672]	; (8010e4c <__ieee754_acos+0x2ec>)
 8010bac:	428b      	cmp	r3, r1
 8010bae:	f300 8087 	bgt.w	8010cc0 <__ieee754_acos+0x160>
 8010bb2:	4aa7      	ldr	r2, [pc, #668]	; (8010e50 <__ieee754_acos+0x2f0>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	f340 81f9 	ble.w	8010fac <__ieee754_acos+0x44c>
 8010bba:	ee10 2a10 	vmov	r2, s0
 8010bbe:	ee10 0a10 	vmov	r0, s0
 8010bc2:	462b      	mov	r3, r5
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ef fd47 	bl	8000658 <__aeabi_dmul>
 8010bca:	a387      	add	r3, pc, #540	; (adr r3, 8010de8 <__ieee754_acos+0x288>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	4606      	mov	r6, r0
 8010bd2:	460f      	mov	r7, r1
 8010bd4:	f7ef fd40 	bl	8000658 <__aeabi_dmul>
 8010bd8:	a385      	add	r3, pc, #532	; (adr r3, 8010df0 <__ieee754_acos+0x290>)
 8010bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bde:	f7ef fb85 	bl	80002ec <__adddf3>
 8010be2:	4632      	mov	r2, r6
 8010be4:	463b      	mov	r3, r7
 8010be6:	f7ef fd37 	bl	8000658 <__aeabi_dmul>
 8010bea:	a383      	add	r3, pc, #524	; (adr r3, 8010df8 <__ieee754_acos+0x298>)
 8010bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf0:	f7ef fb7a 	bl	80002e8 <__aeabi_dsub>
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	f7ef fd2e 	bl	8000658 <__aeabi_dmul>
 8010bfc:	a380      	add	r3, pc, #512	; (adr r3, 8010e00 <__ieee754_acos+0x2a0>)
 8010bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c02:	f7ef fb73 	bl	80002ec <__adddf3>
 8010c06:	4632      	mov	r2, r6
 8010c08:	463b      	mov	r3, r7
 8010c0a:	f7ef fd25 	bl	8000658 <__aeabi_dmul>
 8010c0e:	a37e      	add	r3, pc, #504	; (adr r3, 8010e08 <__ieee754_acos+0x2a8>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	f7ef fb68 	bl	80002e8 <__aeabi_dsub>
 8010c18:	4632      	mov	r2, r6
 8010c1a:	463b      	mov	r3, r7
 8010c1c:	f7ef fd1c 	bl	8000658 <__aeabi_dmul>
 8010c20:	a37b      	add	r3, pc, #492	; (adr r3, 8010e10 <__ieee754_acos+0x2b0>)
 8010c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c26:	f7ef fb61 	bl	80002ec <__adddf3>
 8010c2a:	4632      	mov	r2, r6
 8010c2c:	463b      	mov	r3, r7
 8010c2e:	f7ef fd13 	bl	8000658 <__aeabi_dmul>
 8010c32:	a379      	add	r3, pc, #484	; (adr r3, 8010e18 <__ieee754_acos+0x2b8>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	4680      	mov	r8, r0
 8010c3a:	4689      	mov	r9, r1
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4639      	mov	r1, r7
 8010c40:	f7ef fd0a 	bl	8000658 <__aeabi_dmul>
 8010c44:	a376      	add	r3, pc, #472	; (adr r3, 8010e20 <__ieee754_acos+0x2c0>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	f7ef fb4d 	bl	80002e8 <__aeabi_dsub>
 8010c4e:	4632      	mov	r2, r6
 8010c50:	463b      	mov	r3, r7
 8010c52:	f7ef fd01 	bl	8000658 <__aeabi_dmul>
 8010c56:	a374      	add	r3, pc, #464	; (adr r3, 8010e28 <__ieee754_acos+0x2c8>)
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f7ef fb46 	bl	80002ec <__adddf3>
 8010c60:	4632      	mov	r2, r6
 8010c62:	463b      	mov	r3, r7
 8010c64:	f7ef fcf8 	bl	8000658 <__aeabi_dmul>
 8010c68:	a371      	add	r3, pc, #452	; (adr r3, 8010e30 <__ieee754_acos+0x2d0>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	f7ef fb3b 	bl	80002e8 <__aeabi_dsub>
 8010c72:	4632      	mov	r2, r6
 8010c74:	463b      	mov	r3, r7
 8010c76:	f7ef fcef 	bl	8000658 <__aeabi_dmul>
 8010c7a:	4b76      	ldr	r3, [pc, #472]	; (8010e54 <__ieee754_acos+0x2f4>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f7ef fb35 	bl	80002ec <__adddf3>
 8010c82:	4602      	mov	r2, r0
 8010c84:	460b      	mov	r3, r1
 8010c86:	4640      	mov	r0, r8
 8010c88:	4649      	mov	r1, r9
 8010c8a:	f7ef fe0f 	bl	80008ac <__aeabi_ddiv>
 8010c8e:	4622      	mov	r2, r4
 8010c90:	462b      	mov	r3, r5
 8010c92:	f7ef fce1 	bl	8000658 <__aeabi_dmul>
 8010c96:	4602      	mov	r2, r0
 8010c98:	460b      	mov	r3, r1
 8010c9a:	a167      	add	r1, pc, #412	; (adr r1, 8010e38 <__ieee754_acos+0x2d8>)
 8010c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ca0:	f7ef fb22 	bl	80002e8 <__aeabi_dsub>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4620      	mov	r0, r4
 8010caa:	4629      	mov	r1, r5
 8010cac:	f7ef fb1c 	bl	80002e8 <__aeabi_dsub>
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	a162      	add	r1, pc, #392	; (adr r1, 8010e40 <__ieee754_acos+0x2e0>)
 8010cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cba:	f7ef fb15 	bl	80002e8 <__aeabi_dsub>
 8010cbe:	e771      	b.n	8010ba4 <__ieee754_acos+0x44>
 8010cc0:	2d00      	cmp	r5, #0
 8010cc2:	f280 80cb 	bge.w	8010e5c <__ieee754_acos+0x2fc>
 8010cc6:	ee10 0a10 	vmov	r0, s0
 8010cca:	4b62      	ldr	r3, [pc, #392]	; (8010e54 <__ieee754_acos+0x2f4>)
 8010ccc:	2200      	movs	r2, #0
 8010cce:	4629      	mov	r1, r5
 8010cd0:	f7ef fb0c 	bl	80002ec <__adddf3>
 8010cd4:	4b60      	ldr	r3, [pc, #384]	; (8010e58 <__ieee754_acos+0x2f8>)
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f7ef fcbe 	bl	8000658 <__aeabi_dmul>
 8010cdc:	a342      	add	r3, pc, #264	; (adr r3, 8010de8 <__ieee754_acos+0x288>)
 8010cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	f7ef fcb7 	bl	8000658 <__aeabi_dmul>
 8010cea:	a341      	add	r3, pc, #260	; (adr r3, 8010df0 <__ieee754_acos+0x290>)
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	f7ef fafc 	bl	80002ec <__adddf3>
 8010cf4:	4622      	mov	r2, r4
 8010cf6:	462b      	mov	r3, r5
 8010cf8:	f7ef fcae 	bl	8000658 <__aeabi_dmul>
 8010cfc:	a33e      	add	r3, pc, #248	; (adr r3, 8010df8 <__ieee754_acos+0x298>)
 8010cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d02:	f7ef faf1 	bl	80002e8 <__aeabi_dsub>
 8010d06:	4622      	mov	r2, r4
 8010d08:	462b      	mov	r3, r5
 8010d0a:	f7ef fca5 	bl	8000658 <__aeabi_dmul>
 8010d0e:	a33c      	add	r3, pc, #240	; (adr r3, 8010e00 <__ieee754_acos+0x2a0>)
 8010d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d14:	f7ef faea 	bl	80002ec <__adddf3>
 8010d18:	4622      	mov	r2, r4
 8010d1a:	462b      	mov	r3, r5
 8010d1c:	f7ef fc9c 	bl	8000658 <__aeabi_dmul>
 8010d20:	a339      	add	r3, pc, #228	; (adr r3, 8010e08 <__ieee754_acos+0x2a8>)
 8010d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d26:	f7ef fadf 	bl	80002e8 <__aeabi_dsub>
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	f7ef fc93 	bl	8000658 <__aeabi_dmul>
 8010d32:	a337      	add	r3, pc, #220	; (adr r3, 8010e10 <__ieee754_acos+0x2b0>)
 8010d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d38:	f7ef fad8 	bl	80002ec <__adddf3>
 8010d3c:	4622      	mov	r2, r4
 8010d3e:	462b      	mov	r3, r5
 8010d40:	f7ef fc8a 	bl	8000658 <__aeabi_dmul>
 8010d44:	ec45 4b10 	vmov	d0, r4, r5
 8010d48:	4680      	mov	r8, r0
 8010d4a:	4689      	mov	r9, r1
 8010d4c:	f001 f976 	bl	801203c <__ieee754_sqrt>
 8010d50:	a331      	add	r3, pc, #196	; (adr r3, 8010e18 <__ieee754_acos+0x2b8>)
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	4620      	mov	r0, r4
 8010d58:	4629      	mov	r1, r5
 8010d5a:	ec57 6b10 	vmov	r6, r7, d0
 8010d5e:	f7ef fc7b 	bl	8000658 <__aeabi_dmul>
 8010d62:	a32f      	add	r3, pc, #188	; (adr r3, 8010e20 <__ieee754_acos+0x2c0>)
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	f7ef fabe 	bl	80002e8 <__aeabi_dsub>
 8010d6c:	4622      	mov	r2, r4
 8010d6e:	462b      	mov	r3, r5
 8010d70:	f7ef fc72 	bl	8000658 <__aeabi_dmul>
 8010d74:	a32c      	add	r3, pc, #176	; (adr r3, 8010e28 <__ieee754_acos+0x2c8>)
 8010d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7a:	f7ef fab7 	bl	80002ec <__adddf3>
 8010d7e:	4622      	mov	r2, r4
 8010d80:	462b      	mov	r3, r5
 8010d82:	f7ef fc69 	bl	8000658 <__aeabi_dmul>
 8010d86:	a32a      	add	r3, pc, #168	; (adr r3, 8010e30 <__ieee754_acos+0x2d0>)
 8010d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8c:	f7ef faac 	bl	80002e8 <__aeabi_dsub>
 8010d90:	4622      	mov	r2, r4
 8010d92:	462b      	mov	r3, r5
 8010d94:	f7ef fc60 	bl	8000658 <__aeabi_dmul>
 8010d98:	4b2e      	ldr	r3, [pc, #184]	; (8010e54 <__ieee754_acos+0x2f4>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f7ef faa6 	bl	80002ec <__adddf3>
 8010da0:	4602      	mov	r2, r0
 8010da2:	460b      	mov	r3, r1
 8010da4:	4640      	mov	r0, r8
 8010da6:	4649      	mov	r1, r9
 8010da8:	f7ef fd80 	bl	80008ac <__aeabi_ddiv>
 8010dac:	4632      	mov	r2, r6
 8010dae:	463b      	mov	r3, r7
 8010db0:	f7ef fc52 	bl	8000658 <__aeabi_dmul>
 8010db4:	a320      	add	r3, pc, #128	; (adr r3, 8010e38 <__ieee754_acos+0x2d8>)
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	f7ef fa95 	bl	80002e8 <__aeabi_dsub>
 8010dbe:	4632      	mov	r2, r6
 8010dc0:	463b      	mov	r3, r7
 8010dc2:	f7ef fa93 	bl	80002ec <__adddf3>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	f7ef fa8f 	bl	80002ec <__adddf3>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	a103      	add	r1, pc, #12	; (adr r1, 8010de0 <__ieee754_acos+0x280>)
 8010dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dd8:	e76f      	b.n	8010cba <__ieee754_acos+0x15a>
 8010dda:	bf00      	nop
 8010ddc:	f3af 8000 	nop.w
 8010de0:	54442d18 	.word	0x54442d18
 8010de4:	400921fb 	.word	0x400921fb
 8010de8:	0dfdf709 	.word	0x0dfdf709
 8010dec:	3f023de1 	.word	0x3f023de1
 8010df0:	7501b288 	.word	0x7501b288
 8010df4:	3f49efe0 	.word	0x3f49efe0
 8010df8:	b5688f3b 	.word	0xb5688f3b
 8010dfc:	3fa48228 	.word	0x3fa48228
 8010e00:	0e884455 	.word	0x0e884455
 8010e04:	3fc9c155 	.word	0x3fc9c155
 8010e08:	03eb6f7d 	.word	0x03eb6f7d
 8010e0c:	3fd4d612 	.word	0x3fd4d612
 8010e10:	55555555 	.word	0x55555555
 8010e14:	3fc55555 	.word	0x3fc55555
 8010e18:	b12e9282 	.word	0xb12e9282
 8010e1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010e20:	1b8d0159 	.word	0x1b8d0159
 8010e24:	3fe6066c 	.word	0x3fe6066c
 8010e28:	9c598ac8 	.word	0x9c598ac8
 8010e2c:	40002ae5 	.word	0x40002ae5
 8010e30:	1c8a2d4b 	.word	0x1c8a2d4b
 8010e34:	40033a27 	.word	0x40033a27
 8010e38:	33145c07 	.word	0x33145c07
 8010e3c:	3c91a626 	.word	0x3c91a626
 8010e40:	54442d18 	.word	0x54442d18
 8010e44:	3ff921fb 	.word	0x3ff921fb
 8010e48:	3fefffff 	.word	0x3fefffff
 8010e4c:	3fdfffff 	.word	0x3fdfffff
 8010e50:	3c600000 	.word	0x3c600000
 8010e54:	3ff00000 	.word	0x3ff00000
 8010e58:	3fe00000 	.word	0x3fe00000
 8010e5c:	ee10 2a10 	vmov	r2, s0
 8010e60:	462b      	mov	r3, r5
 8010e62:	496d      	ldr	r1, [pc, #436]	; (8011018 <__ieee754_acos+0x4b8>)
 8010e64:	2000      	movs	r0, #0
 8010e66:	f7ef fa3f 	bl	80002e8 <__aeabi_dsub>
 8010e6a:	4b6c      	ldr	r3, [pc, #432]	; (801101c <__ieee754_acos+0x4bc>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f7ef fbf3 	bl	8000658 <__aeabi_dmul>
 8010e72:	4604      	mov	r4, r0
 8010e74:	460d      	mov	r5, r1
 8010e76:	ec45 4b10 	vmov	d0, r4, r5
 8010e7a:	f001 f8df 	bl	801203c <__ieee754_sqrt>
 8010e7e:	a34e      	add	r3, pc, #312	; (adr r3, 8010fb8 <__ieee754_acos+0x458>)
 8010e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e84:	4620      	mov	r0, r4
 8010e86:	4629      	mov	r1, r5
 8010e88:	ec59 8b10 	vmov	r8, r9, d0
 8010e8c:	f7ef fbe4 	bl	8000658 <__aeabi_dmul>
 8010e90:	a34b      	add	r3, pc, #300	; (adr r3, 8010fc0 <__ieee754_acos+0x460>)
 8010e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e96:	f7ef fa29 	bl	80002ec <__adddf3>
 8010e9a:	4622      	mov	r2, r4
 8010e9c:	462b      	mov	r3, r5
 8010e9e:	f7ef fbdb 	bl	8000658 <__aeabi_dmul>
 8010ea2:	a349      	add	r3, pc, #292	; (adr r3, 8010fc8 <__ieee754_acos+0x468>)
 8010ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea8:	f7ef fa1e 	bl	80002e8 <__aeabi_dsub>
 8010eac:	4622      	mov	r2, r4
 8010eae:	462b      	mov	r3, r5
 8010eb0:	f7ef fbd2 	bl	8000658 <__aeabi_dmul>
 8010eb4:	a346      	add	r3, pc, #280	; (adr r3, 8010fd0 <__ieee754_acos+0x470>)
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	f7ef fa17 	bl	80002ec <__adddf3>
 8010ebe:	4622      	mov	r2, r4
 8010ec0:	462b      	mov	r3, r5
 8010ec2:	f7ef fbc9 	bl	8000658 <__aeabi_dmul>
 8010ec6:	a344      	add	r3, pc, #272	; (adr r3, 8010fd8 <__ieee754_acos+0x478>)
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	f7ef fa0c 	bl	80002e8 <__aeabi_dsub>
 8010ed0:	4622      	mov	r2, r4
 8010ed2:	462b      	mov	r3, r5
 8010ed4:	f7ef fbc0 	bl	8000658 <__aeabi_dmul>
 8010ed8:	a341      	add	r3, pc, #260	; (adr r3, 8010fe0 <__ieee754_acos+0x480>)
 8010eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ede:	f7ef fa05 	bl	80002ec <__adddf3>
 8010ee2:	4622      	mov	r2, r4
 8010ee4:	462b      	mov	r3, r5
 8010ee6:	f7ef fbb7 	bl	8000658 <__aeabi_dmul>
 8010eea:	a33f      	add	r3, pc, #252	; (adr r3, 8010fe8 <__ieee754_acos+0x488>)
 8010eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef0:	4682      	mov	sl, r0
 8010ef2:	468b      	mov	fp, r1
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	f7ef fbae 	bl	8000658 <__aeabi_dmul>
 8010efc:	a33c      	add	r3, pc, #240	; (adr r3, 8010ff0 <__ieee754_acos+0x490>)
 8010efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f02:	f7ef f9f1 	bl	80002e8 <__aeabi_dsub>
 8010f06:	4622      	mov	r2, r4
 8010f08:	462b      	mov	r3, r5
 8010f0a:	f7ef fba5 	bl	8000658 <__aeabi_dmul>
 8010f0e:	a33a      	add	r3, pc, #232	; (adr r3, 8010ff8 <__ieee754_acos+0x498>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	f7ef f9ea 	bl	80002ec <__adddf3>
 8010f18:	4622      	mov	r2, r4
 8010f1a:	462b      	mov	r3, r5
 8010f1c:	f7ef fb9c 	bl	8000658 <__aeabi_dmul>
 8010f20:	a337      	add	r3, pc, #220	; (adr r3, 8011000 <__ieee754_acos+0x4a0>)
 8010f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f26:	f7ef f9df 	bl	80002e8 <__aeabi_dsub>
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	f7ef fb93 	bl	8000658 <__aeabi_dmul>
 8010f32:	4b39      	ldr	r3, [pc, #228]	; (8011018 <__ieee754_acos+0x4b8>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	f7ef f9d9 	bl	80002ec <__adddf3>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	4650      	mov	r0, sl
 8010f40:	4659      	mov	r1, fp
 8010f42:	f7ef fcb3 	bl	80008ac <__aeabi_ddiv>
 8010f46:	4642      	mov	r2, r8
 8010f48:	464b      	mov	r3, r9
 8010f4a:	f7ef fb85 	bl	8000658 <__aeabi_dmul>
 8010f4e:	2600      	movs	r6, #0
 8010f50:	4682      	mov	sl, r0
 8010f52:	468b      	mov	fp, r1
 8010f54:	4632      	mov	r2, r6
 8010f56:	464b      	mov	r3, r9
 8010f58:	4630      	mov	r0, r6
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	f7ef fb7c 	bl	8000658 <__aeabi_dmul>
 8010f60:	4602      	mov	r2, r0
 8010f62:	460b      	mov	r3, r1
 8010f64:	4620      	mov	r0, r4
 8010f66:	4629      	mov	r1, r5
 8010f68:	f7ef f9be 	bl	80002e8 <__aeabi_dsub>
 8010f6c:	4632      	mov	r2, r6
 8010f6e:	4604      	mov	r4, r0
 8010f70:	460d      	mov	r5, r1
 8010f72:	464b      	mov	r3, r9
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	f7ef f9b8 	bl	80002ec <__adddf3>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	4620      	mov	r0, r4
 8010f82:	4629      	mov	r1, r5
 8010f84:	f7ef fc92 	bl	80008ac <__aeabi_ddiv>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	4650      	mov	r0, sl
 8010f8e:	4659      	mov	r1, fp
 8010f90:	f7ef f9ac 	bl	80002ec <__adddf3>
 8010f94:	4632      	mov	r2, r6
 8010f96:	464b      	mov	r3, r9
 8010f98:	f7ef f9a8 	bl	80002ec <__adddf3>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	f7ef f9a4 	bl	80002ec <__adddf3>
 8010fa4:	e5fe      	b.n	8010ba4 <__ieee754_acos+0x44>
 8010fa6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011008 <__ieee754_acos+0x4a8>
 8010faa:	e5ed      	b.n	8010b88 <__ieee754_acos+0x28>
 8010fac:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011010 <__ieee754_acos+0x4b0>
 8010fb0:	e5ea      	b.n	8010b88 <__ieee754_acos+0x28>
 8010fb2:	bf00      	nop
 8010fb4:	f3af 8000 	nop.w
 8010fb8:	0dfdf709 	.word	0x0dfdf709
 8010fbc:	3f023de1 	.word	0x3f023de1
 8010fc0:	7501b288 	.word	0x7501b288
 8010fc4:	3f49efe0 	.word	0x3f49efe0
 8010fc8:	b5688f3b 	.word	0xb5688f3b
 8010fcc:	3fa48228 	.word	0x3fa48228
 8010fd0:	0e884455 	.word	0x0e884455
 8010fd4:	3fc9c155 	.word	0x3fc9c155
 8010fd8:	03eb6f7d 	.word	0x03eb6f7d
 8010fdc:	3fd4d612 	.word	0x3fd4d612
 8010fe0:	55555555 	.word	0x55555555
 8010fe4:	3fc55555 	.word	0x3fc55555
 8010fe8:	b12e9282 	.word	0xb12e9282
 8010fec:	3fb3b8c5 	.word	0x3fb3b8c5
 8010ff0:	1b8d0159 	.word	0x1b8d0159
 8010ff4:	3fe6066c 	.word	0x3fe6066c
 8010ff8:	9c598ac8 	.word	0x9c598ac8
 8010ffc:	40002ae5 	.word	0x40002ae5
 8011000:	1c8a2d4b 	.word	0x1c8a2d4b
 8011004:	40033a27 	.word	0x40033a27
	...
 8011010:	54442d18 	.word	0x54442d18
 8011014:	3ff921fb 	.word	0x3ff921fb
 8011018:	3ff00000 	.word	0x3ff00000
 801101c:	3fe00000 	.word	0x3fe00000

08011020 <__ieee754_asin>:
 8011020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011024:	ed2d 8b04 	vpush	{d8-d9}
 8011028:	ec55 4b10 	vmov	r4, r5, d0
 801102c:	4bcc      	ldr	r3, [pc, #816]	; (8011360 <__ieee754_asin+0x340>)
 801102e:	b083      	sub	sp, #12
 8011030:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011034:	4598      	cmp	r8, r3
 8011036:	9501      	str	r5, [sp, #4]
 8011038:	dd35      	ble.n	80110a6 <__ieee754_asin+0x86>
 801103a:	ee10 3a10 	vmov	r3, s0
 801103e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8011042:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8011046:	ea58 0303 	orrs.w	r3, r8, r3
 801104a:	d117      	bne.n	801107c <__ieee754_asin+0x5c>
 801104c:	a3aa      	add	r3, pc, #680	; (adr r3, 80112f8 <__ieee754_asin+0x2d8>)
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	ee10 0a10 	vmov	r0, s0
 8011056:	4629      	mov	r1, r5
 8011058:	f7ef fafe 	bl	8000658 <__aeabi_dmul>
 801105c:	a3a8      	add	r3, pc, #672	; (adr r3, 8011300 <__ieee754_asin+0x2e0>)
 801105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011062:	4606      	mov	r6, r0
 8011064:	460f      	mov	r7, r1
 8011066:	4620      	mov	r0, r4
 8011068:	4629      	mov	r1, r5
 801106a:	f7ef faf5 	bl	8000658 <__aeabi_dmul>
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	4630      	mov	r0, r6
 8011074:	4639      	mov	r1, r7
 8011076:	f7ef f939 	bl	80002ec <__adddf3>
 801107a:	e00b      	b.n	8011094 <__ieee754_asin+0x74>
 801107c:	ee10 2a10 	vmov	r2, s0
 8011080:	462b      	mov	r3, r5
 8011082:	ee10 0a10 	vmov	r0, s0
 8011086:	4629      	mov	r1, r5
 8011088:	f7ef f92e 	bl	80002e8 <__aeabi_dsub>
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	f7ef fc0c 	bl	80008ac <__aeabi_ddiv>
 8011094:	4604      	mov	r4, r0
 8011096:	460d      	mov	r5, r1
 8011098:	ec45 4b10 	vmov	d0, r4, r5
 801109c:	b003      	add	sp, #12
 801109e:	ecbd 8b04 	vpop	{d8-d9}
 80110a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a6:	4baf      	ldr	r3, [pc, #700]	; (8011364 <__ieee754_asin+0x344>)
 80110a8:	4598      	cmp	r8, r3
 80110aa:	dc11      	bgt.n	80110d0 <__ieee754_asin+0xb0>
 80110ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80110b0:	f280 80ae 	bge.w	8011210 <__ieee754_asin+0x1f0>
 80110b4:	a394      	add	r3, pc, #592	; (adr r3, 8011308 <__ieee754_asin+0x2e8>)
 80110b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ba:	ee10 0a10 	vmov	r0, s0
 80110be:	4629      	mov	r1, r5
 80110c0:	f7ef f914 	bl	80002ec <__adddf3>
 80110c4:	4ba8      	ldr	r3, [pc, #672]	; (8011368 <__ieee754_asin+0x348>)
 80110c6:	2200      	movs	r2, #0
 80110c8:	f7ef fd56 	bl	8000b78 <__aeabi_dcmpgt>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d1e3      	bne.n	8011098 <__ieee754_asin+0x78>
 80110d0:	ec45 4b10 	vmov	d0, r4, r5
 80110d4:	f001 fa38 	bl	8012548 <fabs>
 80110d8:	49a3      	ldr	r1, [pc, #652]	; (8011368 <__ieee754_asin+0x348>)
 80110da:	ec53 2b10 	vmov	r2, r3, d0
 80110de:	2000      	movs	r0, #0
 80110e0:	f7ef f902 	bl	80002e8 <__aeabi_dsub>
 80110e4:	4ba1      	ldr	r3, [pc, #644]	; (801136c <__ieee754_asin+0x34c>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	f7ef fab6 	bl	8000658 <__aeabi_dmul>
 80110ec:	a388      	add	r3, pc, #544	; (adr r3, 8011310 <__ieee754_asin+0x2f0>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	4604      	mov	r4, r0
 80110f4:	460d      	mov	r5, r1
 80110f6:	f7ef faaf 	bl	8000658 <__aeabi_dmul>
 80110fa:	a387      	add	r3, pc, #540	; (adr r3, 8011318 <__ieee754_asin+0x2f8>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef f8f4 	bl	80002ec <__adddf3>
 8011104:	4622      	mov	r2, r4
 8011106:	462b      	mov	r3, r5
 8011108:	f7ef faa6 	bl	8000658 <__aeabi_dmul>
 801110c:	a384      	add	r3, pc, #528	; (adr r3, 8011320 <__ieee754_asin+0x300>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	f7ef f8e9 	bl	80002e8 <__aeabi_dsub>
 8011116:	4622      	mov	r2, r4
 8011118:	462b      	mov	r3, r5
 801111a:	f7ef fa9d 	bl	8000658 <__aeabi_dmul>
 801111e:	a382      	add	r3, pc, #520	; (adr r3, 8011328 <__ieee754_asin+0x308>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef f8e2 	bl	80002ec <__adddf3>
 8011128:	4622      	mov	r2, r4
 801112a:	462b      	mov	r3, r5
 801112c:	f7ef fa94 	bl	8000658 <__aeabi_dmul>
 8011130:	a37f      	add	r3, pc, #508	; (adr r3, 8011330 <__ieee754_asin+0x310>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef f8d7 	bl	80002e8 <__aeabi_dsub>
 801113a:	4622      	mov	r2, r4
 801113c:	462b      	mov	r3, r5
 801113e:	f7ef fa8b 	bl	8000658 <__aeabi_dmul>
 8011142:	a37d      	add	r3, pc, #500	; (adr r3, 8011338 <__ieee754_asin+0x318>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef f8d0 	bl	80002ec <__adddf3>
 801114c:	4622      	mov	r2, r4
 801114e:	462b      	mov	r3, r5
 8011150:	f7ef fa82 	bl	8000658 <__aeabi_dmul>
 8011154:	a37a      	add	r3, pc, #488	; (adr r3, 8011340 <__ieee754_asin+0x320>)
 8011156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115a:	ec41 0b18 	vmov	d8, r0, r1
 801115e:	4620      	mov	r0, r4
 8011160:	4629      	mov	r1, r5
 8011162:	f7ef fa79 	bl	8000658 <__aeabi_dmul>
 8011166:	a378      	add	r3, pc, #480	; (adr r3, 8011348 <__ieee754_asin+0x328>)
 8011168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116c:	f7ef f8bc 	bl	80002e8 <__aeabi_dsub>
 8011170:	4622      	mov	r2, r4
 8011172:	462b      	mov	r3, r5
 8011174:	f7ef fa70 	bl	8000658 <__aeabi_dmul>
 8011178:	a375      	add	r3, pc, #468	; (adr r3, 8011350 <__ieee754_asin+0x330>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	f7ef f8b5 	bl	80002ec <__adddf3>
 8011182:	4622      	mov	r2, r4
 8011184:	462b      	mov	r3, r5
 8011186:	f7ef fa67 	bl	8000658 <__aeabi_dmul>
 801118a:	a373      	add	r3, pc, #460	; (adr r3, 8011358 <__ieee754_asin+0x338>)
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	f7ef f8aa 	bl	80002e8 <__aeabi_dsub>
 8011194:	4622      	mov	r2, r4
 8011196:	462b      	mov	r3, r5
 8011198:	f7ef fa5e 	bl	8000658 <__aeabi_dmul>
 801119c:	4b72      	ldr	r3, [pc, #456]	; (8011368 <__ieee754_asin+0x348>)
 801119e:	2200      	movs	r2, #0
 80111a0:	f7ef f8a4 	bl	80002ec <__adddf3>
 80111a4:	ec45 4b10 	vmov	d0, r4, r5
 80111a8:	4606      	mov	r6, r0
 80111aa:	460f      	mov	r7, r1
 80111ac:	f000 ff46 	bl	801203c <__ieee754_sqrt>
 80111b0:	4b6f      	ldr	r3, [pc, #444]	; (8011370 <__ieee754_asin+0x350>)
 80111b2:	4598      	cmp	r8, r3
 80111b4:	ec5b ab10 	vmov	sl, fp, d0
 80111b8:	f340 80dc 	ble.w	8011374 <__ieee754_asin+0x354>
 80111bc:	4632      	mov	r2, r6
 80111be:	463b      	mov	r3, r7
 80111c0:	ec51 0b18 	vmov	r0, r1, d8
 80111c4:	f7ef fb72 	bl	80008ac <__aeabi_ddiv>
 80111c8:	4652      	mov	r2, sl
 80111ca:	465b      	mov	r3, fp
 80111cc:	f7ef fa44 	bl	8000658 <__aeabi_dmul>
 80111d0:	4652      	mov	r2, sl
 80111d2:	465b      	mov	r3, fp
 80111d4:	f7ef f88a 	bl	80002ec <__adddf3>
 80111d8:	4602      	mov	r2, r0
 80111da:	460b      	mov	r3, r1
 80111dc:	f7ef f886 	bl	80002ec <__adddf3>
 80111e0:	a347      	add	r3, pc, #284	; (adr r3, 8011300 <__ieee754_asin+0x2e0>)
 80111e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e6:	f7ef f87f 	bl	80002e8 <__aeabi_dsub>
 80111ea:	4602      	mov	r2, r0
 80111ec:	460b      	mov	r3, r1
 80111ee:	a142      	add	r1, pc, #264	; (adr r1, 80112f8 <__ieee754_asin+0x2d8>)
 80111f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111f4:	f7ef f878 	bl	80002e8 <__aeabi_dsub>
 80111f8:	9b01      	ldr	r3, [sp, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	bfdc      	itt	le
 80111fe:	4602      	movle	r2, r0
 8011200:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8011204:	4604      	mov	r4, r0
 8011206:	460d      	mov	r5, r1
 8011208:	bfdc      	itt	le
 801120a:	4614      	movle	r4, r2
 801120c:	461d      	movle	r5, r3
 801120e:	e743      	b.n	8011098 <__ieee754_asin+0x78>
 8011210:	ee10 2a10 	vmov	r2, s0
 8011214:	ee10 0a10 	vmov	r0, s0
 8011218:	462b      	mov	r3, r5
 801121a:	4629      	mov	r1, r5
 801121c:	f7ef fa1c 	bl	8000658 <__aeabi_dmul>
 8011220:	a33b      	add	r3, pc, #236	; (adr r3, 8011310 <__ieee754_asin+0x2f0>)
 8011222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011226:	4606      	mov	r6, r0
 8011228:	460f      	mov	r7, r1
 801122a:	f7ef fa15 	bl	8000658 <__aeabi_dmul>
 801122e:	a33a      	add	r3, pc, #232	; (adr r3, 8011318 <__ieee754_asin+0x2f8>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	f7ef f85a 	bl	80002ec <__adddf3>
 8011238:	4632      	mov	r2, r6
 801123a:	463b      	mov	r3, r7
 801123c:	f7ef fa0c 	bl	8000658 <__aeabi_dmul>
 8011240:	a337      	add	r3, pc, #220	; (adr r3, 8011320 <__ieee754_asin+0x300>)
 8011242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011246:	f7ef f84f 	bl	80002e8 <__aeabi_dsub>
 801124a:	4632      	mov	r2, r6
 801124c:	463b      	mov	r3, r7
 801124e:	f7ef fa03 	bl	8000658 <__aeabi_dmul>
 8011252:	a335      	add	r3, pc, #212	; (adr r3, 8011328 <__ieee754_asin+0x308>)
 8011254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011258:	f7ef f848 	bl	80002ec <__adddf3>
 801125c:	4632      	mov	r2, r6
 801125e:	463b      	mov	r3, r7
 8011260:	f7ef f9fa 	bl	8000658 <__aeabi_dmul>
 8011264:	a332      	add	r3, pc, #200	; (adr r3, 8011330 <__ieee754_asin+0x310>)
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	f7ef f83d 	bl	80002e8 <__aeabi_dsub>
 801126e:	4632      	mov	r2, r6
 8011270:	463b      	mov	r3, r7
 8011272:	f7ef f9f1 	bl	8000658 <__aeabi_dmul>
 8011276:	a330      	add	r3, pc, #192	; (adr r3, 8011338 <__ieee754_asin+0x318>)
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f7ef f836 	bl	80002ec <__adddf3>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	f7ef f9e8 	bl	8000658 <__aeabi_dmul>
 8011288:	a32d      	add	r3, pc, #180	; (adr r3, 8011340 <__ieee754_asin+0x320>)
 801128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128e:	4680      	mov	r8, r0
 8011290:	4689      	mov	r9, r1
 8011292:	4630      	mov	r0, r6
 8011294:	4639      	mov	r1, r7
 8011296:	f7ef f9df 	bl	8000658 <__aeabi_dmul>
 801129a:	a32b      	add	r3, pc, #172	; (adr r3, 8011348 <__ieee754_asin+0x328>)
 801129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a0:	f7ef f822 	bl	80002e8 <__aeabi_dsub>
 80112a4:	4632      	mov	r2, r6
 80112a6:	463b      	mov	r3, r7
 80112a8:	f7ef f9d6 	bl	8000658 <__aeabi_dmul>
 80112ac:	a328      	add	r3, pc, #160	; (adr r3, 8011350 <__ieee754_asin+0x330>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ef f81b 	bl	80002ec <__adddf3>
 80112b6:	4632      	mov	r2, r6
 80112b8:	463b      	mov	r3, r7
 80112ba:	f7ef f9cd 	bl	8000658 <__aeabi_dmul>
 80112be:	a326      	add	r3, pc, #152	; (adr r3, 8011358 <__ieee754_asin+0x338>)
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	f7ef f810 	bl	80002e8 <__aeabi_dsub>
 80112c8:	4632      	mov	r2, r6
 80112ca:	463b      	mov	r3, r7
 80112cc:	f7ef f9c4 	bl	8000658 <__aeabi_dmul>
 80112d0:	4b25      	ldr	r3, [pc, #148]	; (8011368 <__ieee754_asin+0x348>)
 80112d2:	2200      	movs	r2, #0
 80112d4:	f7ef f80a 	bl	80002ec <__adddf3>
 80112d8:	4602      	mov	r2, r0
 80112da:	460b      	mov	r3, r1
 80112dc:	4640      	mov	r0, r8
 80112de:	4649      	mov	r1, r9
 80112e0:	f7ef fae4 	bl	80008ac <__aeabi_ddiv>
 80112e4:	4622      	mov	r2, r4
 80112e6:	462b      	mov	r3, r5
 80112e8:	f7ef f9b6 	bl	8000658 <__aeabi_dmul>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	4620      	mov	r0, r4
 80112f2:	4629      	mov	r1, r5
 80112f4:	e6bf      	b.n	8011076 <__ieee754_asin+0x56>
 80112f6:	bf00      	nop
 80112f8:	54442d18 	.word	0x54442d18
 80112fc:	3ff921fb 	.word	0x3ff921fb
 8011300:	33145c07 	.word	0x33145c07
 8011304:	3c91a626 	.word	0x3c91a626
 8011308:	8800759c 	.word	0x8800759c
 801130c:	7e37e43c 	.word	0x7e37e43c
 8011310:	0dfdf709 	.word	0x0dfdf709
 8011314:	3f023de1 	.word	0x3f023de1
 8011318:	7501b288 	.word	0x7501b288
 801131c:	3f49efe0 	.word	0x3f49efe0
 8011320:	b5688f3b 	.word	0xb5688f3b
 8011324:	3fa48228 	.word	0x3fa48228
 8011328:	0e884455 	.word	0x0e884455
 801132c:	3fc9c155 	.word	0x3fc9c155
 8011330:	03eb6f7d 	.word	0x03eb6f7d
 8011334:	3fd4d612 	.word	0x3fd4d612
 8011338:	55555555 	.word	0x55555555
 801133c:	3fc55555 	.word	0x3fc55555
 8011340:	b12e9282 	.word	0xb12e9282
 8011344:	3fb3b8c5 	.word	0x3fb3b8c5
 8011348:	1b8d0159 	.word	0x1b8d0159
 801134c:	3fe6066c 	.word	0x3fe6066c
 8011350:	9c598ac8 	.word	0x9c598ac8
 8011354:	40002ae5 	.word	0x40002ae5
 8011358:	1c8a2d4b 	.word	0x1c8a2d4b
 801135c:	40033a27 	.word	0x40033a27
 8011360:	3fefffff 	.word	0x3fefffff
 8011364:	3fdfffff 	.word	0x3fdfffff
 8011368:	3ff00000 	.word	0x3ff00000
 801136c:	3fe00000 	.word	0x3fe00000
 8011370:	3fef3332 	.word	0x3fef3332
 8011374:	ee10 2a10 	vmov	r2, s0
 8011378:	ee10 0a10 	vmov	r0, s0
 801137c:	465b      	mov	r3, fp
 801137e:	4659      	mov	r1, fp
 8011380:	f7ee ffb4 	bl	80002ec <__adddf3>
 8011384:	4632      	mov	r2, r6
 8011386:	463b      	mov	r3, r7
 8011388:	ec41 0b19 	vmov	d9, r0, r1
 801138c:	ec51 0b18 	vmov	r0, r1, d8
 8011390:	f7ef fa8c 	bl	80008ac <__aeabi_ddiv>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	ec51 0b19 	vmov	r0, r1, d9
 801139c:	f7ef f95c 	bl	8000658 <__aeabi_dmul>
 80113a0:	f04f 0800 	mov.w	r8, #0
 80113a4:	4606      	mov	r6, r0
 80113a6:	460f      	mov	r7, r1
 80113a8:	4642      	mov	r2, r8
 80113aa:	465b      	mov	r3, fp
 80113ac:	4640      	mov	r0, r8
 80113ae:	4659      	mov	r1, fp
 80113b0:	f7ef f952 	bl	8000658 <__aeabi_dmul>
 80113b4:	4602      	mov	r2, r0
 80113b6:	460b      	mov	r3, r1
 80113b8:	4620      	mov	r0, r4
 80113ba:	4629      	mov	r1, r5
 80113bc:	f7ee ff94 	bl	80002e8 <__aeabi_dsub>
 80113c0:	4642      	mov	r2, r8
 80113c2:	4604      	mov	r4, r0
 80113c4:	460d      	mov	r5, r1
 80113c6:	465b      	mov	r3, fp
 80113c8:	4650      	mov	r0, sl
 80113ca:	4659      	mov	r1, fp
 80113cc:	f7ee ff8e 	bl	80002ec <__adddf3>
 80113d0:	4602      	mov	r2, r0
 80113d2:	460b      	mov	r3, r1
 80113d4:	4620      	mov	r0, r4
 80113d6:	4629      	mov	r1, r5
 80113d8:	f7ef fa68 	bl	80008ac <__aeabi_ddiv>
 80113dc:	4602      	mov	r2, r0
 80113de:	460b      	mov	r3, r1
 80113e0:	f7ee ff84 	bl	80002ec <__adddf3>
 80113e4:	4602      	mov	r2, r0
 80113e6:	460b      	mov	r3, r1
 80113e8:	a113      	add	r1, pc, #76	; (adr r1, 8011438 <__ieee754_asin+0x418>)
 80113ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ee:	f7ee ff7b 	bl	80002e8 <__aeabi_dsub>
 80113f2:	4602      	mov	r2, r0
 80113f4:	460b      	mov	r3, r1
 80113f6:	4630      	mov	r0, r6
 80113f8:	4639      	mov	r1, r7
 80113fa:	f7ee ff75 	bl	80002e8 <__aeabi_dsub>
 80113fe:	4642      	mov	r2, r8
 8011400:	4604      	mov	r4, r0
 8011402:	460d      	mov	r5, r1
 8011404:	465b      	mov	r3, fp
 8011406:	4640      	mov	r0, r8
 8011408:	4659      	mov	r1, fp
 801140a:	f7ee ff6f 	bl	80002ec <__adddf3>
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	a10b      	add	r1, pc, #44	; (adr r1, 8011440 <__ieee754_asin+0x420>)
 8011414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011418:	f7ee ff66 	bl	80002e8 <__aeabi_dsub>
 801141c:	4602      	mov	r2, r0
 801141e:	460b      	mov	r3, r1
 8011420:	4620      	mov	r0, r4
 8011422:	4629      	mov	r1, r5
 8011424:	f7ee ff60 	bl	80002e8 <__aeabi_dsub>
 8011428:	4602      	mov	r2, r0
 801142a:	460b      	mov	r3, r1
 801142c:	a104      	add	r1, pc, #16	; (adr r1, 8011440 <__ieee754_asin+0x420>)
 801142e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011432:	e6df      	b.n	80111f4 <__ieee754_asin+0x1d4>
 8011434:	f3af 8000 	nop.w
 8011438:	33145c07 	.word	0x33145c07
 801143c:	3c91a626 	.word	0x3c91a626
 8011440:	54442d18 	.word	0x54442d18
 8011444:	3fe921fb 	.word	0x3fe921fb

08011448 <__ieee754_atan2>:
 8011448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801144c:	ec57 6b11 	vmov	r6, r7, d1
 8011450:	4273      	negs	r3, r6
 8011452:	f8df e184 	ldr.w	lr, [pc, #388]	; 80115d8 <__ieee754_atan2+0x190>
 8011456:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801145a:	4333      	orrs	r3, r6
 801145c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011460:	4573      	cmp	r3, lr
 8011462:	ec51 0b10 	vmov	r0, r1, d0
 8011466:	ee11 8a10 	vmov	r8, s2
 801146a:	d80a      	bhi.n	8011482 <__ieee754_atan2+0x3a>
 801146c:	4244      	negs	r4, r0
 801146e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011472:	4304      	orrs	r4, r0
 8011474:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011478:	4574      	cmp	r4, lr
 801147a:	ee10 9a10 	vmov	r9, s0
 801147e:	468c      	mov	ip, r1
 8011480:	d907      	bls.n	8011492 <__ieee754_atan2+0x4a>
 8011482:	4632      	mov	r2, r6
 8011484:	463b      	mov	r3, r7
 8011486:	f7ee ff31 	bl	80002ec <__adddf3>
 801148a:	ec41 0b10 	vmov	d0, r0, r1
 801148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011492:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011496:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801149a:	4334      	orrs	r4, r6
 801149c:	d103      	bne.n	80114a6 <__ieee754_atan2+0x5e>
 801149e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a2:	f000 beb1 	b.w	8012208 <atan>
 80114a6:	17bc      	asrs	r4, r7, #30
 80114a8:	f004 0402 	and.w	r4, r4, #2
 80114ac:	ea53 0909 	orrs.w	r9, r3, r9
 80114b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80114b4:	d107      	bne.n	80114c6 <__ieee754_atan2+0x7e>
 80114b6:	2c02      	cmp	r4, #2
 80114b8:	d060      	beq.n	801157c <__ieee754_atan2+0x134>
 80114ba:	2c03      	cmp	r4, #3
 80114bc:	d1e5      	bne.n	801148a <__ieee754_atan2+0x42>
 80114be:	a142      	add	r1, pc, #264	; (adr r1, 80115c8 <__ieee754_atan2+0x180>)
 80114c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c4:	e7e1      	b.n	801148a <__ieee754_atan2+0x42>
 80114c6:	ea52 0808 	orrs.w	r8, r2, r8
 80114ca:	d106      	bne.n	80114da <__ieee754_atan2+0x92>
 80114cc:	f1bc 0f00 	cmp.w	ip, #0
 80114d0:	da5f      	bge.n	8011592 <__ieee754_atan2+0x14a>
 80114d2:	a13f      	add	r1, pc, #252	; (adr r1, 80115d0 <__ieee754_atan2+0x188>)
 80114d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114d8:	e7d7      	b.n	801148a <__ieee754_atan2+0x42>
 80114da:	4572      	cmp	r2, lr
 80114dc:	d10f      	bne.n	80114fe <__ieee754_atan2+0xb6>
 80114de:	4293      	cmp	r3, r2
 80114e0:	f104 34ff 	add.w	r4, r4, #4294967295
 80114e4:	d107      	bne.n	80114f6 <__ieee754_atan2+0xae>
 80114e6:	2c02      	cmp	r4, #2
 80114e8:	d84c      	bhi.n	8011584 <__ieee754_atan2+0x13c>
 80114ea:	4b35      	ldr	r3, [pc, #212]	; (80115c0 <__ieee754_atan2+0x178>)
 80114ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80114f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80114f4:	e7c9      	b.n	801148a <__ieee754_atan2+0x42>
 80114f6:	2c02      	cmp	r4, #2
 80114f8:	d848      	bhi.n	801158c <__ieee754_atan2+0x144>
 80114fa:	4b32      	ldr	r3, [pc, #200]	; (80115c4 <__ieee754_atan2+0x17c>)
 80114fc:	e7f6      	b.n	80114ec <__ieee754_atan2+0xa4>
 80114fe:	4573      	cmp	r3, lr
 8011500:	d0e4      	beq.n	80114cc <__ieee754_atan2+0x84>
 8011502:	1a9b      	subs	r3, r3, r2
 8011504:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011508:	ea4f 5223 	mov.w	r2, r3, asr #20
 801150c:	da1e      	bge.n	801154c <__ieee754_atan2+0x104>
 801150e:	2f00      	cmp	r7, #0
 8011510:	da01      	bge.n	8011516 <__ieee754_atan2+0xce>
 8011512:	323c      	adds	r2, #60	; 0x3c
 8011514:	db1e      	blt.n	8011554 <__ieee754_atan2+0x10c>
 8011516:	4632      	mov	r2, r6
 8011518:	463b      	mov	r3, r7
 801151a:	f7ef f9c7 	bl	80008ac <__aeabi_ddiv>
 801151e:	ec41 0b10 	vmov	d0, r0, r1
 8011522:	f001 f811 	bl	8012548 <fabs>
 8011526:	f000 fe6f 	bl	8012208 <atan>
 801152a:	ec51 0b10 	vmov	r0, r1, d0
 801152e:	2c01      	cmp	r4, #1
 8011530:	d013      	beq.n	801155a <__ieee754_atan2+0x112>
 8011532:	2c02      	cmp	r4, #2
 8011534:	d015      	beq.n	8011562 <__ieee754_atan2+0x11a>
 8011536:	2c00      	cmp	r4, #0
 8011538:	d0a7      	beq.n	801148a <__ieee754_atan2+0x42>
 801153a:	a319      	add	r3, pc, #100	; (adr r3, 80115a0 <__ieee754_atan2+0x158>)
 801153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011540:	f7ee fed2 	bl	80002e8 <__aeabi_dsub>
 8011544:	a318      	add	r3, pc, #96	; (adr r3, 80115a8 <__ieee754_atan2+0x160>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	e014      	b.n	8011576 <__ieee754_atan2+0x12e>
 801154c:	a118      	add	r1, pc, #96	; (adr r1, 80115b0 <__ieee754_atan2+0x168>)
 801154e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011552:	e7ec      	b.n	801152e <__ieee754_atan2+0xe6>
 8011554:	2000      	movs	r0, #0
 8011556:	2100      	movs	r1, #0
 8011558:	e7e9      	b.n	801152e <__ieee754_atan2+0xe6>
 801155a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801155e:	4619      	mov	r1, r3
 8011560:	e793      	b.n	801148a <__ieee754_atan2+0x42>
 8011562:	a30f      	add	r3, pc, #60	; (adr r3, 80115a0 <__ieee754_atan2+0x158>)
 8011564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011568:	f7ee febe 	bl	80002e8 <__aeabi_dsub>
 801156c:	4602      	mov	r2, r0
 801156e:	460b      	mov	r3, r1
 8011570:	a10d      	add	r1, pc, #52	; (adr r1, 80115a8 <__ieee754_atan2+0x160>)
 8011572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011576:	f7ee feb7 	bl	80002e8 <__aeabi_dsub>
 801157a:	e786      	b.n	801148a <__ieee754_atan2+0x42>
 801157c:	a10a      	add	r1, pc, #40	; (adr r1, 80115a8 <__ieee754_atan2+0x160>)
 801157e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011582:	e782      	b.n	801148a <__ieee754_atan2+0x42>
 8011584:	a10c      	add	r1, pc, #48	; (adr r1, 80115b8 <__ieee754_atan2+0x170>)
 8011586:	e9d1 0100 	ldrd	r0, r1, [r1]
 801158a:	e77e      	b.n	801148a <__ieee754_atan2+0x42>
 801158c:	2000      	movs	r0, #0
 801158e:	2100      	movs	r1, #0
 8011590:	e77b      	b.n	801148a <__ieee754_atan2+0x42>
 8011592:	a107      	add	r1, pc, #28	; (adr r1, 80115b0 <__ieee754_atan2+0x168>)
 8011594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011598:	e777      	b.n	801148a <__ieee754_atan2+0x42>
 801159a:	bf00      	nop
 801159c:	f3af 8000 	nop.w
 80115a0:	33145c07 	.word	0x33145c07
 80115a4:	3ca1a626 	.word	0x3ca1a626
 80115a8:	54442d18 	.word	0x54442d18
 80115ac:	400921fb 	.word	0x400921fb
 80115b0:	54442d18 	.word	0x54442d18
 80115b4:	3ff921fb 	.word	0x3ff921fb
 80115b8:	54442d18 	.word	0x54442d18
 80115bc:	3fe921fb 	.word	0x3fe921fb
 80115c0:	08012c08 	.word	0x08012c08
 80115c4:	08012c20 	.word	0x08012c20
 80115c8:	54442d18 	.word	0x54442d18
 80115cc:	c00921fb 	.word	0xc00921fb
 80115d0:	54442d18 	.word	0x54442d18
 80115d4:	bff921fb 	.word	0xbff921fb
 80115d8:	7ff00000 	.word	0x7ff00000
 80115dc:	00000000 	.word	0x00000000

080115e0 <__ieee754_pow>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	ed2d 8b06 	vpush	{d8-d10}
 80115e8:	b089      	sub	sp, #36	; 0x24
 80115ea:	ed8d 1b00 	vstr	d1, [sp]
 80115ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80115f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80115f6:	ea58 0102 	orrs.w	r1, r8, r2
 80115fa:	ec57 6b10 	vmov	r6, r7, d0
 80115fe:	d115      	bne.n	801162c <__ieee754_pow+0x4c>
 8011600:	19b3      	adds	r3, r6, r6
 8011602:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011606:	4152      	adcs	r2, r2
 8011608:	4299      	cmp	r1, r3
 801160a:	4b89      	ldr	r3, [pc, #548]	; (8011830 <__ieee754_pow+0x250>)
 801160c:	4193      	sbcs	r3, r2
 801160e:	f080 84d2 	bcs.w	8011fb6 <__ieee754_pow+0x9d6>
 8011612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011616:	4630      	mov	r0, r6
 8011618:	4639      	mov	r1, r7
 801161a:	f7ee fe67 	bl	80002ec <__adddf3>
 801161e:	ec41 0b10 	vmov	d0, r0, r1
 8011622:	b009      	add	sp, #36	; 0x24
 8011624:	ecbd 8b06 	vpop	{d8-d10}
 8011628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162c:	4b81      	ldr	r3, [pc, #516]	; (8011834 <__ieee754_pow+0x254>)
 801162e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011632:	429c      	cmp	r4, r3
 8011634:	ee10 aa10 	vmov	sl, s0
 8011638:	463d      	mov	r5, r7
 801163a:	dc06      	bgt.n	801164a <__ieee754_pow+0x6a>
 801163c:	d101      	bne.n	8011642 <__ieee754_pow+0x62>
 801163e:	2e00      	cmp	r6, #0
 8011640:	d1e7      	bne.n	8011612 <__ieee754_pow+0x32>
 8011642:	4598      	cmp	r8, r3
 8011644:	dc01      	bgt.n	801164a <__ieee754_pow+0x6a>
 8011646:	d10f      	bne.n	8011668 <__ieee754_pow+0x88>
 8011648:	b172      	cbz	r2, 8011668 <__ieee754_pow+0x88>
 801164a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801164e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011652:	ea55 050a 	orrs.w	r5, r5, sl
 8011656:	d1dc      	bne.n	8011612 <__ieee754_pow+0x32>
 8011658:	e9dd 3200 	ldrd	r3, r2, [sp]
 801165c:	18db      	adds	r3, r3, r3
 801165e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011662:	4152      	adcs	r2, r2
 8011664:	429d      	cmp	r5, r3
 8011666:	e7d0      	b.n	801160a <__ieee754_pow+0x2a>
 8011668:	2d00      	cmp	r5, #0
 801166a:	da3b      	bge.n	80116e4 <__ieee754_pow+0x104>
 801166c:	4b72      	ldr	r3, [pc, #456]	; (8011838 <__ieee754_pow+0x258>)
 801166e:	4598      	cmp	r8, r3
 8011670:	dc51      	bgt.n	8011716 <__ieee754_pow+0x136>
 8011672:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011676:	4598      	cmp	r8, r3
 8011678:	f340 84ac 	ble.w	8011fd4 <__ieee754_pow+0x9f4>
 801167c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011680:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011684:	2b14      	cmp	r3, #20
 8011686:	dd0f      	ble.n	80116a8 <__ieee754_pow+0xc8>
 8011688:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801168c:	fa22 f103 	lsr.w	r1, r2, r3
 8011690:	fa01 f303 	lsl.w	r3, r1, r3
 8011694:	4293      	cmp	r3, r2
 8011696:	f040 849d 	bne.w	8011fd4 <__ieee754_pow+0x9f4>
 801169a:	f001 0101 	and.w	r1, r1, #1
 801169e:	f1c1 0302 	rsb	r3, r1, #2
 80116a2:	9304      	str	r3, [sp, #16]
 80116a4:	b182      	cbz	r2, 80116c8 <__ieee754_pow+0xe8>
 80116a6:	e05f      	b.n	8011768 <__ieee754_pow+0x188>
 80116a8:	2a00      	cmp	r2, #0
 80116aa:	d15b      	bne.n	8011764 <__ieee754_pow+0x184>
 80116ac:	f1c3 0314 	rsb	r3, r3, #20
 80116b0:	fa48 f103 	asr.w	r1, r8, r3
 80116b4:	fa01 f303 	lsl.w	r3, r1, r3
 80116b8:	4543      	cmp	r3, r8
 80116ba:	f040 8488 	bne.w	8011fce <__ieee754_pow+0x9ee>
 80116be:	f001 0101 	and.w	r1, r1, #1
 80116c2:	f1c1 0302 	rsb	r3, r1, #2
 80116c6:	9304      	str	r3, [sp, #16]
 80116c8:	4b5c      	ldr	r3, [pc, #368]	; (801183c <__ieee754_pow+0x25c>)
 80116ca:	4598      	cmp	r8, r3
 80116cc:	d132      	bne.n	8011734 <__ieee754_pow+0x154>
 80116ce:	f1b9 0f00 	cmp.w	r9, #0
 80116d2:	f280 8478 	bge.w	8011fc6 <__ieee754_pow+0x9e6>
 80116d6:	4959      	ldr	r1, [pc, #356]	; (801183c <__ieee754_pow+0x25c>)
 80116d8:	4632      	mov	r2, r6
 80116da:	463b      	mov	r3, r7
 80116dc:	2000      	movs	r0, #0
 80116de:	f7ef f8e5 	bl	80008ac <__aeabi_ddiv>
 80116e2:	e79c      	b.n	801161e <__ieee754_pow+0x3e>
 80116e4:	2300      	movs	r3, #0
 80116e6:	9304      	str	r3, [sp, #16]
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	d13d      	bne.n	8011768 <__ieee754_pow+0x188>
 80116ec:	4b51      	ldr	r3, [pc, #324]	; (8011834 <__ieee754_pow+0x254>)
 80116ee:	4598      	cmp	r8, r3
 80116f0:	d1ea      	bne.n	80116c8 <__ieee754_pow+0xe8>
 80116f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80116f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80116fa:	ea53 030a 	orrs.w	r3, r3, sl
 80116fe:	f000 845a 	beq.w	8011fb6 <__ieee754_pow+0x9d6>
 8011702:	4b4f      	ldr	r3, [pc, #316]	; (8011840 <__ieee754_pow+0x260>)
 8011704:	429c      	cmp	r4, r3
 8011706:	dd08      	ble.n	801171a <__ieee754_pow+0x13a>
 8011708:	f1b9 0f00 	cmp.w	r9, #0
 801170c:	f2c0 8457 	blt.w	8011fbe <__ieee754_pow+0x9de>
 8011710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011714:	e783      	b.n	801161e <__ieee754_pow+0x3e>
 8011716:	2302      	movs	r3, #2
 8011718:	e7e5      	b.n	80116e6 <__ieee754_pow+0x106>
 801171a:	f1b9 0f00 	cmp.w	r9, #0
 801171e:	f04f 0000 	mov.w	r0, #0
 8011722:	f04f 0100 	mov.w	r1, #0
 8011726:	f6bf af7a 	bge.w	801161e <__ieee754_pow+0x3e>
 801172a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801172e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011732:	e774      	b.n	801161e <__ieee754_pow+0x3e>
 8011734:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011738:	d106      	bne.n	8011748 <__ieee754_pow+0x168>
 801173a:	4632      	mov	r2, r6
 801173c:	463b      	mov	r3, r7
 801173e:	4630      	mov	r0, r6
 8011740:	4639      	mov	r1, r7
 8011742:	f7ee ff89 	bl	8000658 <__aeabi_dmul>
 8011746:	e76a      	b.n	801161e <__ieee754_pow+0x3e>
 8011748:	4b3e      	ldr	r3, [pc, #248]	; (8011844 <__ieee754_pow+0x264>)
 801174a:	4599      	cmp	r9, r3
 801174c:	d10c      	bne.n	8011768 <__ieee754_pow+0x188>
 801174e:	2d00      	cmp	r5, #0
 8011750:	db0a      	blt.n	8011768 <__ieee754_pow+0x188>
 8011752:	ec47 6b10 	vmov	d0, r6, r7
 8011756:	b009      	add	sp, #36	; 0x24
 8011758:	ecbd 8b06 	vpop	{d8-d10}
 801175c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011760:	f000 bc6c 	b.w	801203c <__ieee754_sqrt>
 8011764:	2300      	movs	r3, #0
 8011766:	9304      	str	r3, [sp, #16]
 8011768:	ec47 6b10 	vmov	d0, r6, r7
 801176c:	f000 feec 	bl	8012548 <fabs>
 8011770:	ec51 0b10 	vmov	r0, r1, d0
 8011774:	f1ba 0f00 	cmp.w	sl, #0
 8011778:	d129      	bne.n	80117ce <__ieee754_pow+0x1ee>
 801177a:	b124      	cbz	r4, 8011786 <__ieee754_pow+0x1a6>
 801177c:	4b2f      	ldr	r3, [pc, #188]	; (801183c <__ieee754_pow+0x25c>)
 801177e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011782:	429a      	cmp	r2, r3
 8011784:	d123      	bne.n	80117ce <__ieee754_pow+0x1ee>
 8011786:	f1b9 0f00 	cmp.w	r9, #0
 801178a:	da05      	bge.n	8011798 <__ieee754_pow+0x1b8>
 801178c:	4602      	mov	r2, r0
 801178e:	460b      	mov	r3, r1
 8011790:	2000      	movs	r0, #0
 8011792:	492a      	ldr	r1, [pc, #168]	; (801183c <__ieee754_pow+0x25c>)
 8011794:	f7ef f88a 	bl	80008ac <__aeabi_ddiv>
 8011798:	2d00      	cmp	r5, #0
 801179a:	f6bf af40 	bge.w	801161e <__ieee754_pow+0x3e>
 801179e:	9b04      	ldr	r3, [sp, #16]
 80117a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80117a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80117a8:	4323      	orrs	r3, r4
 80117aa:	d108      	bne.n	80117be <__ieee754_pow+0x1de>
 80117ac:	4602      	mov	r2, r0
 80117ae:	460b      	mov	r3, r1
 80117b0:	4610      	mov	r0, r2
 80117b2:	4619      	mov	r1, r3
 80117b4:	f7ee fd98 	bl	80002e8 <__aeabi_dsub>
 80117b8:	4602      	mov	r2, r0
 80117ba:	460b      	mov	r3, r1
 80117bc:	e78f      	b.n	80116de <__ieee754_pow+0xfe>
 80117be:	9b04      	ldr	r3, [sp, #16]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	f47f af2c 	bne.w	801161e <__ieee754_pow+0x3e>
 80117c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117ca:	4619      	mov	r1, r3
 80117cc:	e727      	b.n	801161e <__ieee754_pow+0x3e>
 80117ce:	0feb      	lsrs	r3, r5, #31
 80117d0:	3b01      	subs	r3, #1
 80117d2:	9306      	str	r3, [sp, #24]
 80117d4:	9a06      	ldr	r2, [sp, #24]
 80117d6:	9b04      	ldr	r3, [sp, #16]
 80117d8:	4313      	orrs	r3, r2
 80117da:	d102      	bne.n	80117e2 <__ieee754_pow+0x202>
 80117dc:	4632      	mov	r2, r6
 80117de:	463b      	mov	r3, r7
 80117e0:	e7e6      	b.n	80117b0 <__ieee754_pow+0x1d0>
 80117e2:	4b19      	ldr	r3, [pc, #100]	; (8011848 <__ieee754_pow+0x268>)
 80117e4:	4598      	cmp	r8, r3
 80117e6:	f340 80fb 	ble.w	80119e0 <__ieee754_pow+0x400>
 80117ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80117ee:	4598      	cmp	r8, r3
 80117f0:	4b13      	ldr	r3, [pc, #76]	; (8011840 <__ieee754_pow+0x260>)
 80117f2:	dd0c      	ble.n	801180e <__ieee754_pow+0x22e>
 80117f4:	429c      	cmp	r4, r3
 80117f6:	dc0f      	bgt.n	8011818 <__ieee754_pow+0x238>
 80117f8:	f1b9 0f00 	cmp.w	r9, #0
 80117fc:	da0f      	bge.n	801181e <__ieee754_pow+0x23e>
 80117fe:	2000      	movs	r0, #0
 8011800:	b009      	add	sp, #36	; 0x24
 8011802:	ecbd 8b06 	vpop	{d8-d10}
 8011806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801180a:	f000 bcf3 	b.w	80121f4 <__math_oflow>
 801180e:	429c      	cmp	r4, r3
 8011810:	dbf2      	blt.n	80117f8 <__ieee754_pow+0x218>
 8011812:	4b0a      	ldr	r3, [pc, #40]	; (801183c <__ieee754_pow+0x25c>)
 8011814:	429c      	cmp	r4, r3
 8011816:	dd19      	ble.n	801184c <__ieee754_pow+0x26c>
 8011818:	f1b9 0f00 	cmp.w	r9, #0
 801181c:	dcef      	bgt.n	80117fe <__ieee754_pow+0x21e>
 801181e:	2000      	movs	r0, #0
 8011820:	b009      	add	sp, #36	; 0x24
 8011822:	ecbd 8b06 	vpop	{d8-d10}
 8011826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801182a:	f000 bcda 	b.w	80121e2 <__math_uflow>
 801182e:	bf00      	nop
 8011830:	fff00000 	.word	0xfff00000
 8011834:	7ff00000 	.word	0x7ff00000
 8011838:	433fffff 	.word	0x433fffff
 801183c:	3ff00000 	.word	0x3ff00000
 8011840:	3fefffff 	.word	0x3fefffff
 8011844:	3fe00000 	.word	0x3fe00000
 8011848:	41e00000 	.word	0x41e00000
 801184c:	4b60      	ldr	r3, [pc, #384]	; (80119d0 <__ieee754_pow+0x3f0>)
 801184e:	2200      	movs	r2, #0
 8011850:	f7ee fd4a 	bl	80002e8 <__aeabi_dsub>
 8011854:	a354      	add	r3, pc, #336	; (adr r3, 80119a8 <__ieee754_pow+0x3c8>)
 8011856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185a:	4604      	mov	r4, r0
 801185c:	460d      	mov	r5, r1
 801185e:	f7ee fefb 	bl	8000658 <__aeabi_dmul>
 8011862:	a353      	add	r3, pc, #332	; (adr r3, 80119b0 <__ieee754_pow+0x3d0>)
 8011864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011868:	4606      	mov	r6, r0
 801186a:	460f      	mov	r7, r1
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ee fef2 	bl	8000658 <__aeabi_dmul>
 8011874:	4b57      	ldr	r3, [pc, #348]	; (80119d4 <__ieee754_pow+0x3f4>)
 8011876:	4682      	mov	sl, r0
 8011878:	468b      	mov	fp, r1
 801187a:	2200      	movs	r2, #0
 801187c:	4620      	mov	r0, r4
 801187e:	4629      	mov	r1, r5
 8011880:	f7ee feea 	bl	8000658 <__aeabi_dmul>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	a14b      	add	r1, pc, #300	; (adr r1, 80119b8 <__ieee754_pow+0x3d8>)
 801188a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801188e:	f7ee fd2b 	bl	80002e8 <__aeabi_dsub>
 8011892:	4622      	mov	r2, r4
 8011894:	462b      	mov	r3, r5
 8011896:	f7ee fedf 	bl	8000658 <__aeabi_dmul>
 801189a:	4602      	mov	r2, r0
 801189c:	460b      	mov	r3, r1
 801189e:	2000      	movs	r0, #0
 80118a0:	494d      	ldr	r1, [pc, #308]	; (80119d8 <__ieee754_pow+0x3f8>)
 80118a2:	f7ee fd21 	bl	80002e8 <__aeabi_dsub>
 80118a6:	4622      	mov	r2, r4
 80118a8:	4680      	mov	r8, r0
 80118aa:	4689      	mov	r9, r1
 80118ac:	462b      	mov	r3, r5
 80118ae:	4620      	mov	r0, r4
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7ee fed1 	bl	8000658 <__aeabi_dmul>
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	4640      	mov	r0, r8
 80118bc:	4649      	mov	r1, r9
 80118be:	f7ee fecb 	bl	8000658 <__aeabi_dmul>
 80118c2:	a33f      	add	r3, pc, #252	; (adr r3, 80119c0 <__ieee754_pow+0x3e0>)
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	f7ee fec6 	bl	8000658 <__aeabi_dmul>
 80118cc:	4602      	mov	r2, r0
 80118ce:	460b      	mov	r3, r1
 80118d0:	4650      	mov	r0, sl
 80118d2:	4659      	mov	r1, fp
 80118d4:	f7ee fd08 	bl	80002e8 <__aeabi_dsub>
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	4680      	mov	r8, r0
 80118de:	4689      	mov	r9, r1
 80118e0:	4630      	mov	r0, r6
 80118e2:	4639      	mov	r1, r7
 80118e4:	f7ee fd02 	bl	80002ec <__adddf3>
 80118e8:	2000      	movs	r0, #0
 80118ea:	4632      	mov	r2, r6
 80118ec:	463b      	mov	r3, r7
 80118ee:	4604      	mov	r4, r0
 80118f0:	460d      	mov	r5, r1
 80118f2:	f7ee fcf9 	bl	80002e8 <__aeabi_dsub>
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	4640      	mov	r0, r8
 80118fc:	4649      	mov	r1, r9
 80118fe:	f7ee fcf3 	bl	80002e8 <__aeabi_dsub>
 8011902:	9b04      	ldr	r3, [sp, #16]
 8011904:	9a06      	ldr	r2, [sp, #24]
 8011906:	3b01      	subs	r3, #1
 8011908:	4313      	orrs	r3, r2
 801190a:	4682      	mov	sl, r0
 801190c:	468b      	mov	fp, r1
 801190e:	f040 81e7 	bne.w	8011ce0 <__ieee754_pow+0x700>
 8011912:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80119c8 <__ieee754_pow+0x3e8>
 8011916:	eeb0 8a47 	vmov.f32	s16, s14
 801191a:	eef0 8a67 	vmov.f32	s17, s15
 801191e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011922:	2600      	movs	r6, #0
 8011924:	4632      	mov	r2, r6
 8011926:	463b      	mov	r3, r7
 8011928:	e9dd 0100 	ldrd	r0, r1, [sp]
 801192c:	f7ee fcdc 	bl	80002e8 <__aeabi_dsub>
 8011930:	4622      	mov	r2, r4
 8011932:	462b      	mov	r3, r5
 8011934:	f7ee fe90 	bl	8000658 <__aeabi_dmul>
 8011938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801193c:	4680      	mov	r8, r0
 801193e:	4689      	mov	r9, r1
 8011940:	4650      	mov	r0, sl
 8011942:	4659      	mov	r1, fp
 8011944:	f7ee fe88 	bl	8000658 <__aeabi_dmul>
 8011948:	4602      	mov	r2, r0
 801194a:	460b      	mov	r3, r1
 801194c:	4640      	mov	r0, r8
 801194e:	4649      	mov	r1, r9
 8011950:	f7ee fccc 	bl	80002ec <__adddf3>
 8011954:	4632      	mov	r2, r6
 8011956:	463b      	mov	r3, r7
 8011958:	4680      	mov	r8, r0
 801195a:	4689      	mov	r9, r1
 801195c:	4620      	mov	r0, r4
 801195e:	4629      	mov	r1, r5
 8011960:	f7ee fe7a 	bl	8000658 <__aeabi_dmul>
 8011964:	460b      	mov	r3, r1
 8011966:	4604      	mov	r4, r0
 8011968:	460d      	mov	r5, r1
 801196a:	4602      	mov	r2, r0
 801196c:	4649      	mov	r1, r9
 801196e:	4640      	mov	r0, r8
 8011970:	f7ee fcbc 	bl	80002ec <__adddf3>
 8011974:	4b19      	ldr	r3, [pc, #100]	; (80119dc <__ieee754_pow+0x3fc>)
 8011976:	4299      	cmp	r1, r3
 8011978:	ec45 4b19 	vmov	d9, r4, r5
 801197c:	4606      	mov	r6, r0
 801197e:	460f      	mov	r7, r1
 8011980:	468b      	mov	fp, r1
 8011982:	f340 82f1 	ble.w	8011f68 <__ieee754_pow+0x988>
 8011986:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801198a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801198e:	4303      	orrs	r3, r0
 8011990:	f000 81e4 	beq.w	8011d5c <__ieee754_pow+0x77c>
 8011994:	ec51 0b18 	vmov	r0, r1, d8
 8011998:	2200      	movs	r2, #0
 801199a:	2300      	movs	r3, #0
 801199c:	f7ef f8ce 	bl	8000b3c <__aeabi_dcmplt>
 80119a0:	3800      	subs	r0, #0
 80119a2:	bf18      	it	ne
 80119a4:	2001      	movne	r0, #1
 80119a6:	e72b      	b.n	8011800 <__ieee754_pow+0x220>
 80119a8:	60000000 	.word	0x60000000
 80119ac:	3ff71547 	.word	0x3ff71547
 80119b0:	f85ddf44 	.word	0xf85ddf44
 80119b4:	3e54ae0b 	.word	0x3e54ae0b
 80119b8:	55555555 	.word	0x55555555
 80119bc:	3fd55555 	.word	0x3fd55555
 80119c0:	652b82fe 	.word	0x652b82fe
 80119c4:	3ff71547 	.word	0x3ff71547
 80119c8:	00000000 	.word	0x00000000
 80119cc:	bff00000 	.word	0xbff00000
 80119d0:	3ff00000 	.word	0x3ff00000
 80119d4:	3fd00000 	.word	0x3fd00000
 80119d8:	3fe00000 	.word	0x3fe00000
 80119dc:	408fffff 	.word	0x408fffff
 80119e0:	4bd5      	ldr	r3, [pc, #852]	; (8011d38 <__ieee754_pow+0x758>)
 80119e2:	402b      	ands	r3, r5
 80119e4:	2200      	movs	r2, #0
 80119e6:	b92b      	cbnz	r3, 80119f4 <__ieee754_pow+0x414>
 80119e8:	4bd4      	ldr	r3, [pc, #848]	; (8011d3c <__ieee754_pow+0x75c>)
 80119ea:	f7ee fe35 	bl	8000658 <__aeabi_dmul>
 80119ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80119f2:	460c      	mov	r4, r1
 80119f4:	1523      	asrs	r3, r4, #20
 80119f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80119fa:	4413      	add	r3, r2
 80119fc:	9305      	str	r3, [sp, #20]
 80119fe:	4bd0      	ldr	r3, [pc, #832]	; (8011d40 <__ieee754_pow+0x760>)
 8011a00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011a04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011a08:	429c      	cmp	r4, r3
 8011a0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a0e:	dd08      	ble.n	8011a22 <__ieee754_pow+0x442>
 8011a10:	4bcc      	ldr	r3, [pc, #816]	; (8011d44 <__ieee754_pow+0x764>)
 8011a12:	429c      	cmp	r4, r3
 8011a14:	f340 8162 	ble.w	8011cdc <__ieee754_pow+0x6fc>
 8011a18:	9b05      	ldr	r3, [sp, #20]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	9305      	str	r3, [sp, #20]
 8011a1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011a22:	2400      	movs	r4, #0
 8011a24:	00e3      	lsls	r3, r4, #3
 8011a26:	9307      	str	r3, [sp, #28]
 8011a28:	4bc7      	ldr	r3, [pc, #796]	; (8011d48 <__ieee754_pow+0x768>)
 8011a2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a2e:	ed93 7b00 	vldr	d7, [r3]
 8011a32:	4629      	mov	r1, r5
 8011a34:	ec53 2b17 	vmov	r2, r3, d7
 8011a38:	eeb0 9a47 	vmov.f32	s18, s14
 8011a3c:	eef0 9a67 	vmov.f32	s19, s15
 8011a40:	4682      	mov	sl, r0
 8011a42:	f7ee fc51 	bl	80002e8 <__aeabi_dsub>
 8011a46:	4652      	mov	r2, sl
 8011a48:	4606      	mov	r6, r0
 8011a4a:	460f      	mov	r7, r1
 8011a4c:	462b      	mov	r3, r5
 8011a4e:	ec51 0b19 	vmov	r0, r1, d9
 8011a52:	f7ee fc4b 	bl	80002ec <__adddf3>
 8011a56:	4602      	mov	r2, r0
 8011a58:	460b      	mov	r3, r1
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	49bb      	ldr	r1, [pc, #748]	; (8011d4c <__ieee754_pow+0x76c>)
 8011a5e:	f7ee ff25 	bl	80008ac <__aeabi_ddiv>
 8011a62:	ec41 0b1a 	vmov	d10, r0, r1
 8011a66:	4602      	mov	r2, r0
 8011a68:	460b      	mov	r3, r1
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	4639      	mov	r1, r7
 8011a6e:	f7ee fdf3 	bl	8000658 <__aeabi_dmul>
 8011a72:	2300      	movs	r3, #0
 8011a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a78:	9302      	str	r3, [sp, #8]
 8011a7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011a7e:	46ab      	mov	fp, r5
 8011a80:	106d      	asrs	r5, r5, #1
 8011a82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011a86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011a8a:	ec41 0b18 	vmov	d8, r0, r1
 8011a8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011a92:	2200      	movs	r2, #0
 8011a94:	4640      	mov	r0, r8
 8011a96:	4649      	mov	r1, r9
 8011a98:	4614      	mov	r4, r2
 8011a9a:	461d      	mov	r5, r3
 8011a9c:	f7ee fddc 	bl	8000658 <__aeabi_dmul>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	4639      	mov	r1, r7
 8011aa8:	f7ee fc1e 	bl	80002e8 <__aeabi_dsub>
 8011aac:	ec53 2b19 	vmov	r2, r3, d9
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	460f      	mov	r7, r1
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f7ee fc16 	bl	80002e8 <__aeabi_dsub>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4650      	mov	r0, sl
 8011ac2:	4659      	mov	r1, fp
 8011ac4:	f7ee fc10 	bl	80002e8 <__aeabi_dsub>
 8011ac8:	4642      	mov	r2, r8
 8011aca:	464b      	mov	r3, r9
 8011acc:	f7ee fdc4 	bl	8000658 <__aeabi_dmul>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	4639      	mov	r1, r7
 8011ad8:	f7ee fc06 	bl	80002e8 <__aeabi_dsub>
 8011adc:	ec53 2b1a 	vmov	r2, r3, d10
 8011ae0:	f7ee fdba 	bl	8000658 <__aeabi_dmul>
 8011ae4:	ec53 2b18 	vmov	r2, r3, d8
 8011ae8:	ec41 0b19 	vmov	d9, r0, r1
 8011aec:	ec51 0b18 	vmov	r0, r1, d8
 8011af0:	f7ee fdb2 	bl	8000658 <__aeabi_dmul>
 8011af4:	a37c      	add	r3, pc, #496	; (adr r3, 8011ce8 <__ieee754_pow+0x708>)
 8011af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afa:	4604      	mov	r4, r0
 8011afc:	460d      	mov	r5, r1
 8011afe:	f7ee fdab 	bl	8000658 <__aeabi_dmul>
 8011b02:	a37b      	add	r3, pc, #492	; (adr r3, 8011cf0 <__ieee754_pow+0x710>)
 8011b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b08:	f7ee fbf0 	bl	80002ec <__adddf3>
 8011b0c:	4622      	mov	r2, r4
 8011b0e:	462b      	mov	r3, r5
 8011b10:	f7ee fda2 	bl	8000658 <__aeabi_dmul>
 8011b14:	a378      	add	r3, pc, #480	; (adr r3, 8011cf8 <__ieee754_pow+0x718>)
 8011b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1a:	f7ee fbe7 	bl	80002ec <__adddf3>
 8011b1e:	4622      	mov	r2, r4
 8011b20:	462b      	mov	r3, r5
 8011b22:	f7ee fd99 	bl	8000658 <__aeabi_dmul>
 8011b26:	a376      	add	r3, pc, #472	; (adr r3, 8011d00 <__ieee754_pow+0x720>)
 8011b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2c:	f7ee fbde 	bl	80002ec <__adddf3>
 8011b30:	4622      	mov	r2, r4
 8011b32:	462b      	mov	r3, r5
 8011b34:	f7ee fd90 	bl	8000658 <__aeabi_dmul>
 8011b38:	a373      	add	r3, pc, #460	; (adr r3, 8011d08 <__ieee754_pow+0x728>)
 8011b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3e:	f7ee fbd5 	bl	80002ec <__adddf3>
 8011b42:	4622      	mov	r2, r4
 8011b44:	462b      	mov	r3, r5
 8011b46:	f7ee fd87 	bl	8000658 <__aeabi_dmul>
 8011b4a:	a371      	add	r3, pc, #452	; (adr r3, 8011d10 <__ieee754_pow+0x730>)
 8011b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b50:	f7ee fbcc 	bl	80002ec <__adddf3>
 8011b54:	4622      	mov	r2, r4
 8011b56:	4606      	mov	r6, r0
 8011b58:	460f      	mov	r7, r1
 8011b5a:	462b      	mov	r3, r5
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	4629      	mov	r1, r5
 8011b60:	f7ee fd7a 	bl	8000658 <__aeabi_dmul>
 8011b64:	4602      	mov	r2, r0
 8011b66:	460b      	mov	r3, r1
 8011b68:	4630      	mov	r0, r6
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	f7ee fd74 	bl	8000658 <__aeabi_dmul>
 8011b70:	4642      	mov	r2, r8
 8011b72:	4604      	mov	r4, r0
 8011b74:	460d      	mov	r5, r1
 8011b76:	464b      	mov	r3, r9
 8011b78:	ec51 0b18 	vmov	r0, r1, d8
 8011b7c:	f7ee fbb6 	bl	80002ec <__adddf3>
 8011b80:	ec53 2b19 	vmov	r2, r3, d9
 8011b84:	f7ee fd68 	bl	8000658 <__aeabi_dmul>
 8011b88:	4622      	mov	r2, r4
 8011b8a:	462b      	mov	r3, r5
 8011b8c:	f7ee fbae 	bl	80002ec <__adddf3>
 8011b90:	4642      	mov	r2, r8
 8011b92:	4682      	mov	sl, r0
 8011b94:	468b      	mov	fp, r1
 8011b96:	464b      	mov	r3, r9
 8011b98:	4640      	mov	r0, r8
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	f7ee fd5c 	bl	8000658 <__aeabi_dmul>
 8011ba0:	4b6b      	ldr	r3, [pc, #428]	; (8011d50 <__ieee754_pow+0x770>)
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	4606      	mov	r6, r0
 8011ba6:	460f      	mov	r7, r1
 8011ba8:	f7ee fba0 	bl	80002ec <__adddf3>
 8011bac:	4652      	mov	r2, sl
 8011bae:	465b      	mov	r3, fp
 8011bb0:	f7ee fb9c 	bl	80002ec <__adddf3>
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	460d      	mov	r5, r1
 8011bba:	4602      	mov	r2, r0
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	4640      	mov	r0, r8
 8011bc0:	4649      	mov	r1, r9
 8011bc2:	f7ee fd49 	bl	8000658 <__aeabi_dmul>
 8011bc6:	4b62      	ldr	r3, [pc, #392]	; (8011d50 <__ieee754_pow+0x770>)
 8011bc8:	4680      	mov	r8, r0
 8011bca:	4689      	mov	r9, r1
 8011bcc:	2200      	movs	r2, #0
 8011bce:	4620      	mov	r0, r4
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	f7ee fb89 	bl	80002e8 <__aeabi_dsub>
 8011bd6:	4632      	mov	r2, r6
 8011bd8:	463b      	mov	r3, r7
 8011bda:	f7ee fb85 	bl	80002e8 <__aeabi_dsub>
 8011bde:	4602      	mov	r2, r0
 8011be0:	460b      	mov	r3, r1
 8011be2:	4650      	mov	r0, sl
 8011be4:	4659      	mov	r1, fp
 8011be6:	f7ee fb7f 	bl	80002e8 <__aeabi_dsub>
 8011bea:	ec53 2b18 	vmov	r2, r3, d8
 8011bee:	f7ee fd33 	bl	8000658 <__aeabi_dmul>
 8011bf2:	4622      	mov	r2, r4
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	462b      	mov	r3, r5
 8011bfa:	ec51 0b19 	vmov	r0, r1, d9
 8011bfe:	f7ee fd2b 	bl	8000658 <__aeabi_dmul>
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4630      	mov	r0, r6
 8011c08:	4639      	mov	r1, r7
 8011c0a:	f7ee fb6f 	bl	80002ec <__adddf3>
 8011c0e:	4606      	mov	r6, r0
 8011c10:	460f      	mov	r7, r1
 8011c12:	4602      	mov	r2, r0
 8011c14:	460b      	mov	r3, r1
 8011c16:	4640      	mov	r0, r8
 8011c18:	4649      	mov	r1, r9
 8011c1a:	f7ee fb67 	bl	80002ec <__adddf3>
 8011c1e:	a33e      	add	r3, pc, #248	; (adr r3, 8011d18 <__ieee754_pow+0x738>)
 8011c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c24:	2000      	movs	r0, #0
 8011c26:	4604      	mov	r4, r0
 8011c28:	460d      	mov	r5, r1
 8011c2a:	f7ee fd15 	bl	8000658 <__aeabi_dmul>
 8011c2e:	4642      	mov	r2, r8
 8011c30:	ec41 0b18 	vmov	d8, r0, r1
 8011c34:	464b      	mov	r3, r9
 8011c36:	4620      	mov	r0, r4
 8011c38:	4629      	mov	r1, r5
 8011c3a:	f7ee fb55 	bl	80002e8 <__aeabi_dsub>
 8011c3e:	4602      	mov	r2, r0
 8011c40:	460b      	mov	r3, r1
 8011c42:	4630      	mov	r0, r6
 8011c44:	4639      	mov	r1, r7
 8011c46:	f7ee fb4f 	bl	80002e8 <__aeabi_dsub>
 8011c4a:	a335      	add	r3, pc, #212	; (adr r3, 8011d20 <__ieee754_pow+0x740>)
 8011c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c50:	f7ee fd02 	bl	8000658 <__aeabi_dmul>
 8011c54:	a334      	add	r3, pc, #208	; (adr r3, 8011d28 <__ieee754_pow+0x748>)
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	460f      	mov	r7, r1
 8011c5e:	4620      	mov	r0, r4
 8011c60:	4629      	mov	r1, r5
 8011c62:	f7ee fcf9 	bl	8000658 <__aeabi_dmul>
 8011c66:	4602      	mov	r2, r0
 8011c68:	460b      	mov	r3, r1
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	4639      	mov	r1, r7
 8011c6e:	f7ee fb3d 	bl	80002ec <__adddf3>
 8011c72:	9a07      	ldr	r2, [sp, #28]
 8011c74:	4b37      	ldr	r3, [pc, #220]	; (8011d54 <__ieee754_pow+0x774>)
 8011c76:	4413      	add	r3, r2
 8011c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7c:	f7ee fb36 	bl	80002ec <__adddf3>
 8011c80:	4682      	mov	sl, r0
 8011c82:	9805      	ldr	r0, [sp, #20]
 8011c84:	468b      	mov	fp, r1
 8011c86:	f7ee fc7d 	bl	8000584 <__aeabi_i2d>
 8011c8a:	9a07      	ldr	r2, [sp, #28]
 8011c8c:	4b32      	ldr	r3, [pc, #200]	; (8011d58 <__ieee754_pow+0x778>)
 8011c8e:	4413      	add	r3, r2
 8011c90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c94:	4606      	mov	r6, r0
 8011c96:	460f      	mov	r7, r1
 8011c98:	4652      	mov	r2, sl
 8011c9a:	465b      	mov	r3, fp
 8011c9c:	ec51 0b18 	vmov	r0, r1, d8
 8011ca0:	f7ee fb24 	bl	80002ec <__adddf3>
 8011ca4:	4642      	mov	r2, r8
 8011ca6:	464b      	mov	r3, r9
 8011ca8:	f7ee fb20 	bl	80002ec <__adddf3>
 8011cac:	4632      	mov	r2, r6
 8011cae:	463b      	mov	r3, r7
 8011cb0:	f7ee fb1c 	bl	80002ec <__adddf3>
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	4632      	mov	r2, r6
 8011cb8:	463b      	mov	r3, r7
 8011cba:	4604      	mov	r4, r0
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	f7ee fb13 	bl	80002e8 <__aeabi_dsub>
 8011cc2:	4642      	mov	r2, r8
 8011cc4:	464b      	mov	r3, r9
 8011cc6:	f7ee fb0f 	bl	80002e8 <__aeabi_dsub>
 8011cca:	ec53 2b18 	vmov	r2, r3, d8
 8011cce:	f7ee fb0b 	bl	80002e8 <__aeabi_dsub>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	4650      	mov	r0, sl
 8011cd8:	4659      	mov	r1, fp
 8011cda:	e610      	b.n	80118fe <__ieee754_pow+0x31e>
 8011cdc:	2401      	movs	r4, #1
 8011cde:	e6a1      	b.n	8011a24 <__ieee754_pow+0x444>
 8011ce0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011d30 <__ieee754_pow+0x750>
 8011ce4:	e617      	b.n	8011916 <__ieee754_pow+0x336>
 8011ce6:	bf00      	nop
 8011ce8:	4a454eef 	.word	0x4a454eef
 8011cec:	3fca7e28 	.word	0x3fca7e28
 8011cf0:	93c9db65 	.word	0x93c9db65
 8011cf4:	3fcd864a 	.word	0x3fcd864a
 8011cf8:	a91d4101 	.word	0xa91d4101
 8011cfc:	3fd17460 	.word	0x3fd17460
 8011d00:	518f264d 	.word	0x518f264d
 8011d04:	3fd55555 	.word	0x3fd55555
 8011d08:	db6fabff 	.word	0xdb6fabff
 8011d0c:	3fdb6db6 	.word	0x3fdb6db6
 8011d10:	33333303 	.word	0x33333303
 8011d14:	3fe33333 	.word	0x3fe33333
 8011d18:	e0000000 	.word	0xe0000000
 8011d1c:	3feec709 	.word	0x3feec709
 8011d20:	dc3a03fd 	.word	0xdc3a03fd
 8011d24:	3feec709 	.word	0x3feec709
 8011d28:	145b01f5 	.word	0x145b01f5
 8011d2c:	be3e2fe0 	.word	0xbe3e2fe0
 8011d30:	00000000 	.word	0x00000000
 8011d34:	3ff00000 	.word	0x3ff00000
 8011d38:	7ff00000 	.word	0x7ff00000
 8011d3c:	43400000 	.word	0x43400000
 8011d40:	0003988e 	.word	0x0003988e
 8011d44:	000bb679 	.word	0x000bb679
 8011d48:	08012c38 	.word	0x08012c38
 8011d4c:	3ff00000 	.word	0x3ff00000
 8011d50:	40080000 	.word	0x40080000
 8011d54:	08012c58 	.word	0x08012c58
 8011d58:	08012c48 	.word	0x08012c48
 8011d5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8012034 <__ieee754_pow+0xa54>)
 8011d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d62:	4640      	mov	r0, r8
 8011d64:	4649      	mov	r1, r9
 8011d66:	f7ee fac1 	bl	80002ec <__adddf3>
 8011d6a:	4622      	mov	r2, r4
 8011d6c:	ec41 0b1a 	vmov	d10, r0, r1
 8011d70:	462b      	mov	r3, r5
 8011d72:	4630      	mov	r0, r6
 8011d74:	4639      	mov	r1, r7
 8011d76:	f7ee fab7 	bl	80002e8 <__aeabi_dsub>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	ec51 0b1a 	vmov	r0, r1, d10
 8011d82:	f7ee fef9 	bl	8000b78 <__aeabi_dcmpgt>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	f47f ae04 	bne.w	8011994 <__ieee754_pow+0x3b4>
 8011d8c:	4aa4      	ldr	r2, [pc, #656]	; (8012020 <__ieee754_pow+0xa40>)
 8011d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d92:	4293      	cmp	r3, r2
 8011d94:	f340 8108 	ble.w	8011fa8 <__ieee754_pow+0x9c8>
 8011d98:	151b      	asrs	r3, r3, #20
 8011d9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011d9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011da2:	fa4a f303 	asr.w	r3, sl, r3
 8011da6:	445b      	add	r3, fp
 8011da8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011dac:	4e9d      	ldr	r6, [pc, #628]	; (8012024 <__ieee754_pow+0xa44>)
 8011dae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011db2:	4116      	asrs	r6, r2
 8011db4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011db8:	2000      	movs	r0, #0
 8011dba:	ea23 0106 	bic.w	r1, r3, r6
 8011dbe:	f1c2 0214 	rsb	r2, r2, #20
 8011dc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011dc6:	fa4a fa02 	asr.w	sl, sl, r2
 8011dca:	f1bb 0f00 	cmp.w	fp, #0
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	bfb8      	it	lt
 8011dd8:	f1ca 0a00 	rsblt	sl, sl, #0
 8011ddc:	f7ee fa84 	bl	80002e8 <__aeabi_dsub>
 8011de0:	ec41 0b19 	vmov	d9, r0, r1
 8011de4:	4642      	mov	r2, r8
 8011de6:	464b      	mov	r3, r9
 8011de8:	ec51 0b19 	vmov	r0, r1, d9
 8011dec:	f7ee fa7e 	bl	80002ec <__adddf3>
 8011df0:	a37b      	add	r3, pc, #492	; (adr r3, 8011fe0 <__ieee754_pow+0xa00>)
 8011df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df6:	2000      	movs	r0, #0
 8011df8:	4604      	mov	r4, r0
 8011dfa:	460d      	mov	r5, r1
 8011dfc:	f7ee fc2c 	bl	8000658 <__aeabi_dmul>
 8011e00:	ec53 2b19 	vmov	r2, r3, d9
 8011e04:	4606      	mov	r6, r0
 8011e06:	460f      	mov	r7, r1
 8011e08:	4620      	mov	r0, r4
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	f7ee fa6c 	bl	80002e8 <__aeabi_dsub>
 8011e10:	4602      	mov	r2, r0
 8011e12:	460b      	mov	r3, r1
 8011e14:	4640      	mov	r0, r8
 8011e16:	4649      	mov	r1, r9
 8011e18:	f7ee fa66 	bl	80002e8 <__aeabi_dsub>
 8011e1c:	a372      	add	r3, pc, #456	; (adr r3, 8011fe8 <__ieee754_pow+0xa08>)
 8011e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e22:	f7ee fc19 	bl	8000658 <__aeabi_dmul>
 8011e26:	a372      	add	r3, pc, #456	; (adr r3, 8011ff0 <__ieee754_pow+0xa10>)
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	4680      	mov	r8, r0
 8011e2e:	4689      	mov	r9, r1
 8011e30:	4620      	mov	r0, r4
 8011e32:	4629      	mov	r1, r5
 8011e34:	f7ee fc10 	bl	8000658 <__aeabi_dmul>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	4649      	mov	r1, r9
 8011e40:	f7ee fa54 	bl	80002ec <__adddf3>
 8011e44:	4604      	mov	r4, r0
 8011e46:	460d      	mov	r5, r1
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	4639      	mov	r1, r7
 8011e50:	f7ee fa4c 	bl	80002ec <__adddf3>
 8011e54:	4632      	mov	r2, r6
 8011e56:	463b      	mov	r3, r7
 8011e58:	4680      	mov	r8, r0
 8011e5a:	4689      	mov	r9, r1
 8011e5c:	f7ee fa44 	bl	80002e8 <__aeabi_dsub>
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	4620      	mov	r0, r4
 8011e66:	4629      	mov	r1, r5
 8011e68:	f7ee fa3e 	bl	80002e8 <__aeabi_dsub>
 8011e6c:	4642      	mov	r2, r8
 8011e6e:	4606      	mov	r6, r0
 8011e70:	460f      	mov	r7, r1
 8011e72:	464b      	mov	r3, r9
 8011e74:	4640      	mov	r0, r8
 8011e76:	4649      	mov	r1, r9
 8011e78:	f7ee fbee 	bl	8000658 <__aeabi_dmul>
 8011e7c:	a35e      	add	r3, pc, #376	; (adr r3, 8011ff8 <__ieee754_pow+0xa18>)
 8011e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e82:	4604      	mov	r4, r0
 8011e84:	460d      	mov	r5, r1
 8011e86:	f7ee fbe7 	bl	8000658 <__aeabi_dmul>
 8011e8a:	a35d      	add	r3, pc, #372	; (adr r3, 8012000 <__ieee754_pow+0xa20>)
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	f7ee fa2a 	bl	80002e8 <__aeabi_dsub>
 8011e94:	4622      	mov	r2, r4
 8011e96:	462b      	mov	r3, r5
 8011e98:	f7ee fbde 	bl	8000658 <__aeabi_dmul>
 8011e9c:	a35a      	add	r3, pc, #360	; (adr r3, 8012008 <__ieee754_pow+0xa28>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	f7ee fa23 	bl	80002ec <__adddf3>
 8011ea6:	4622      	mov	r2, r4
 8011ea8:	462b      	mov	r3, r5
 8011eaa:	f7ee fbd5 	bl	8000658 <__aeabi_dmul>
 8011eae:	a358      	add	r3, pc, #352	; (adr r3, 8012010 <__ieee754_pow+0xa30>)
 8011eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb4:	f7ee fa18 	bl	80002e8 <__aeabi_dsub>
 8011eb8:	4622      	mov	r2, r4
 8011eba:	462b      	mov	r3, r5
 8011ebc:	f7ee fbcc 	bl	8000658 <__aeabi_dmul>
 8011ec0:	a355      	add	r3, pc, #340	; (adr r3, 8012018 <__ieee754_pow+0xa38>)
 8011ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec6:	f7ee fa11 	bl	80002ec <__adddf3>
 8011eca:	4622      	mov	r2, r4
 8011ecc:	462b      	mov	r3, r5
 8011ece:	f7ee fbc3 	bl	8000658 <__aeabi_dmul>
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	4640      	mov	r0, r8
 8011ed8:	4649      	mov	r1, r9
 8011eda:	f7ee fa05 	bl	80002e8 <__aeabi_dsub>
 8011ede:	4604      	mov	r4, r0
 8011ee0:	460d      	mov	r5, r1
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	460b      	mov	r3, r1
 8011ee6:	4640      	mov	r0, r8
 8011ee8:	4649      	mov	r1, r9
 8011eea:	f7ee fbb5 	bl	8000658 <__aeabi_dmul>
 8011eee:	2200      	movs	r2, #0
 8011ef0:	ec41 0b19 	vmov	d9, r0, r1
 8011ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ef8:	4620      	mov	r0, r4
 8011efa:	4629      	mov	r1, r5
 8011efc:	f7ee f9f4 	bl	80002e8 <__aeabi_dsub>
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	ec51 0b19 	vmov	r0, r1, d9
 8011f08:	f7ee fcd0 	bl	80008ac <__aeabi_ddiv>
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	4604      	mov	r4, r0
 8011f10:	460d      	mov	r5, r1
 8011f12:	463b      	mov	r3, r7
 8011f14:	4640      	mov	r0, r8
 8011f16:	4649      	mov	r1, r9
 8011f18:	f7ee fb9e 	bl	8000658 <__aeabi_dmul>
 8011f1c:	4632      	mov	r2, r6
 8011f1e:	463b      	mov	r3, r7
 8011f20:	f7ee f9e4 	bl	80002ec <__adddf3>
 8011f24:	4602      	mov	r2, r0
 8011f26:	460b      	mov	r3, r1
 8011f28:	4620      	mov	r0, r4
 8011f2a:	4629      	mov	r1, r5
 8011f2c:	f7ee f9dc 	bl	80002e8 <__aeabi_dsub>
 8011f30:	4642      	mov	r2, r8
 8011f32:	464b      	mov	r3, r9
 8011f34:	f7ee f9d8 	bl	80002e8 <__aeabi_dsub>
 8011f38:	460b      	mov	r3, r1
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	493a      	ldr	r1, [pc, #232]	; (8012028 <__ieee754_pow+0xa48>)
 8011f3e:	2000      	movs	r0, #0
 8011f40:	f7ee f9d2 	bl	80002e8 <__aeabi_dsub>
 8011f44:	ec41 0b10 	vmov	d0, r0, r1
 8011f48:	ee10 3a90 	vmov	r3, s1
 8011f4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f54:	da2b      	bge.n	8011fae <__ieee754_pow+0x9ce>
 8011f56:	4650      	mov	r0, sl
 8011f58:	f000 fb0a 	bl	8012570 <scalbn>
 8011f5c:	ec51 0b10 	vmov	r0, r1, d0
 8011f60:	ec53 2b18 	vmov	r2, r3, d8
 8011f64:	f7ff bbed 	b.w	8011742 <__ieee754_pow+0x162>
 8011f68:	4b30      	ldr	r3, [pc, #192]	; (801202c <__ieee754_pow+0xa4c>)
 8011f6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011f6e:	429e      	cmp	r6, r3
 8011f70:	f77f af0c 	ble.w	8011d8c <__ieee754_pow+0x7ac>
 8011f74:	4b2e      	ldr	r3, [pc, #184]	; (8012030 <__ieee754_pow+0xa50>)
 8011f76:	440b      	add	r3, r1
 8011f78:	4303      	orrs	r3, r0
 8011f7a:	d009      	beq.n	8011f90 <__ieee754_pow+0x9b0>
 8011f7c:	ec51 0b18 	vmov	r0, r1, d8
 8011f80:	2200      	movs	r2, #0
 8011f82:	2300      	movs	r3, #0
 8011f84:	f7ee fdda 	bl	8000b3c <__aeabi_dcmplt>
 8011f88:	3800      	subs	r0, #0
 8011f8a:	bf18      	it	ne
 8011f8c:	2001      	movne	r0, #1
 8011f8e:	e447      	b.n	8011820 <__ieee754_pow+0x240>
 8011f90:	4622      	mov	r2, r4
 8011f92:	462b      	mov	r3, r5
 8011f94:	f7ee f9a8 	bl	80002e8 <__aeabi_dsub>
 8011f98:	4642      	mov	r2, r8
 8011f9a:	464b      	mov	r3, r9
 8011f9c:	f7ee fde2 	bl	8000b64 <__aeabi_dcmpge>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	f43f aef3 	beq.w	8011d8c <__ieee754_pow+0x7ac>
 8011fa6:	e7e9      	b.n	8011f7c <__ieee754_pow+0x99c>
 8011fa8:	f04f 0a00 	mov.w	sl, #0
 8011fac:	e71a      	b.n	8011de4 <__ieee754_pow+0x804>
 8011fae:	ec51 0b10 	vmov	r0, r1, d0
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	e7d4      	b.n	8011f60 <__ieee754_pow+0x980>
 8011fb6:	491c      	ldr	r1, [pc, #112]	; (8012028 <__ieee754_pow+0xa48>)
 8011fb8:	2000      	movs	r0, #0
 8011fba:	f7ff bb30 	b.w	801161e <__ieee754_pow+0x3e>
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	f7ff bb2c 	b.w	801161e <__ieee754_pow+0x3e>
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	4639      	mov	r1, r7
 8011fca:	f7ff bb28 	b.w	801161e <__ieee754_pow+0x3e>
 8011fce:	9204      	str	r2, [sp, #16]
 8011fd0:	f7ff bb7a 	b.w	80116c8 <__ieee754_pow+0xe8>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	f7ff bb64 	b.w	80116a2 <__ieee754_pow+0xc2>
 8011fda:	bf00      	nop
 8011fdc:	f3af 8000 	nop.w
 8011fe0:	00000000 	.word	0x00000000
 8011fe4:	3fe62e43 	.word	0x3fe62e43
 8011fe8:	fefa39ef 	.word	0xfefa39ef
 8011fec:	3fe62e42 	.word	0x3fe62e42
 8011ff0:	0ca86c39 	.word	0x0ca86c39
 8011ff4:	be205c61 	.word	0xbe205c61
 8011ff8:	72bea4d0 	.word	0x72bea4d0
 8011ffc:	3e663769 	.word	0x3e663769
 8012000:	c5d26bf1 	.word	0xc5d26bf1
 8012004:	3ebbbd41 	.word	0x3ebbbd41
 8012008:	af25de2c 	.word	0xaf25de2c
 801200c:	3f11566a 	.word	0x3f11566a
 8012010:	16bebd93 	.word	0x16bebd93
 8012014:	3f66c16c 	.word	0x3f66c16c
 8012018:	5555553e 	.word	0x5555553e
 801201c:	3fc55555 	.word	0x3fc55555
 8012020:	3fe00000 	.word	0x3fe00000
 8012024:	000fffff 	.word	0x000fffff
 8012028:	3ff00000 	.word	0x3ff00000
 801202c:	4090cbff 	.word	0x4090cbff
 8012030:	3f6f3400 	.word	0x3f6f3400
 8012034:	652b82fe 	.word	0x652b82fe
 8012038:	3c971547 	.word	0x3c971547

0801203c <__ieee754_sqrt>:
 801203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	ec55 4b10 	vmov	r4, r5, d0
 8012044:	4e55      	ldr	r6, [pc, #340]	; (801219c <__ieee754_sqrt+0x160>)
 8012046:	43ae      	bics	r6, r5
 8012048:	ee10 0a10 	vmov	r0, s0
 801204c:	ee10 3a10 	vmov	r3, s0
 8012050:	462a      	mov	r2, r5
 8012052:	4629      	mov	r1, r5
 8012054:	d110      	bne.n	8012078 <__ieee754_sqrt+0x3c>
 8012056:	ee10 2a10 	vmov	r2, s0
 801205a:	462b      	mov	r3, r5
 801205c:	f7ee fafc 	bl	8000658 <__aeabi_dmul>
 8012060:	4602      	mov	r2, r0
 8012062:	460b      	mov	r3, r1
 8012064:	4620      	mov	r0, r4
 8012066:	4629      	mov	r1, r5
 8012068:	f7ee f940 	bl	80002ec <__adddf3>
 801206c:	4604      	mov	r4, r0
 801206e:	460d      	mov	r5, r1
 8012070:	ec45 4b10 	vmov	d0, r4, r5
 8012074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012078:	2d00      	cmp	r5, #0
 801207a:	dc10      	bgt.n	801209e <__ieee754_sqrt+0x62>
 801207c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012080:	4330      	orrs	r0, r6
 8012082:	d0f5      	beq.n	8012070 <__ieee754_sqrt+0x34>
 8012084:	b15d      	cbz	r5, 801209e <__ieee754_sqrt+0x62>
 8012086:	ee10 2a10 	vmov	r2, s0
 801208a:	462b      	mov	r3, r5
 801208c:	ee10 0a10 	vmov	r0, s0
 8012090:	f7ee f92a 	bl	80002e8 <__aeabi_dsub>
 8012094:	4602      	mov	r2, r0
 8012096:	460b      	mov	r3, r1
 8012098:	f7ee fc08 	bl	80008ac <__aeabi_ddiv>
 801209c:	e7e6      	b.n	801206c <__ieee754_sqrt+0x30>
 801209e:	1512      	asrs	r2, r2, #20
 80120a0:	d074      	beq.n	801218c <__ieee754_sqrt+0x150>
 80120a2:	07d4      	lsls	r4, r2, #31
 80120a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80120a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80120ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80120b0:	bf5e      	ittt	pl
 80120b2:	0fda      	lsrpl	r2, r3, #31
 80120b4:	005b      	lslpl	r3, r3, #1
 80120b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80120ba:	2400      	movs	r4, #0
 80120bc:	0fda      	lsrs	r2, r3, #31
 80120be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80120c2:	107f      	asrs	r7, r7, #1
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	2516      	movs	r5, #22
 80120c8:	4620      	mov	r0, r4
 80120ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80120ce:	1886      	adds	r6, r0, r2
 80120d0:	428e      	cmp	r6, r1
 80120d2:	bfde      	ittt	le
 80120d4:	1b89      	suble	r1, r1, r6
 80120d6:	18b0      	addle	r0, r6, r2
 80120d8:	18a4      	addle	r4, r4, r2
 80120da:	0049      	lsls	r1, r1, #1
 80120dc:	3d01      	subs	r5, #1
 80120de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80120e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80120e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80120ea:	d1f0      	bne.n	80120ce <__ieee754_sqrt+0x92>
 80120ec:	462a      	mov	r2, r5
 80120ee:	f04f 0e20 	mov.w	lr, #32
 80120f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80120f6:	4281      	cmp	r1, r0
 80120f8:	eb06 0c05 	add.w	ip, r6, r5
 80120fc:	dc02      	bgt.n	8012104 <__ieee754_sqrt+0xc8>
 80120fe:	d113      	bne.n	8012128 <__ieee754_sqrt+0xec>
 8012100:	459c      	cmp	ip, r3
 8012102:	d811      	bhi.n	8012128 <__ieee754_sqrt+0xec>
 8012104:	f1bc 0f00 	cmp.w	ip, #0
 8012108:	eb0c 0506 	add.w	r5, ip, r6
 801210c:	da43      	bge.n	8012196 <__ieee754_sqrt+0x15a>
 801210e:	2d00      	cmp	r5, #0
 8012110:	db41      	blt.n	8012196 <__ieee754_sqrt+0x15a>
 8012112:	f100 0801 	add.w	r8, r0, #1
 8012116:	1a09      	subs	r1, r1, r0
 8012118:	459c      	cmp	ip, r3
 801211a:	bf88      	it	hi
 801211c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012120:	eba3 030c 	sub.w	r3, r3, ip
 8012124:	4432      	add	r2, r6
 8012126:	4640      	mov	r0, r8
 8012128:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801212c:	f1be 0e01 	subs.w	lr, lr, #1
 8012130:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012134:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012138:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801213c:	d1db      	bne.n	80120f6 <__ieee754_sqrt+0xba>
 801213e:	430b      	orrs	r3, r1
 8012140:	d006      	beq.n	8012150 <__ieee754_sqrt+0x114>
 8012142:	1c50      	adds	r0, r2, #1
 8012144:	bf13      	iteet	ne
 8012146:	3201      	addne	r2, #1
 8012148:	3401      	addeq	r4, #1
 801214a:	4672      	moveq	r2, lr
 801214c:	f022 0201 	bicne.w	r2, r2, #1
 8012150:	1063      	asrs	r3, r4, #1
 8012152:	0852      	lsrs	r2, r2, #1
 8012154:	07e1      	lsls	r1, r4, #31
 8012156:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801215a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801215e:	bf48      	it	mi
 8012160:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012164:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012168:	4614      	mov	r4, r2
 801216a:	e781      	b.n	8012070 <__ieee754_sqrt+0x34>
 801216c:	0ad9      	lsrs	r1, r3, #11
 801216e:	3815      	subs	r0, #21
 8012170:	055b      	lsls	r3, r3, #21
 8012172:	2900      	cmp	r1, #0
 8012174:	d0fa      	beq.n	801216c <__ieee754_sqrt+0x130>
 8012176:	02cd      	lsls	r5, r1, #11
 8012178:	d50a      	bpl.n	8012190 <__ieee754_sqrt+0x154>
 801217a:	f1c2 0420 	rsb	r4, r2, #32
 801217e:	fa23 f404 	lsr.w	r4, r3, r4
 8012182:	1e55      	subs	r5, r2, #1
 8012184:	4093      	lsls	r3, r2
 8012186:	4321      	orrs	r1, r4
 8012188:	1b42      	subs	r2, r0, r5
 801218a:	e78a      	b.n	80120a2 <__ieee754_sqrt+0x66>
 801218c:	4610      	mov	r0, r2
 801218e:	e7f0      	b.n	8012172 <__ieee754_sqrt+0x136>
 8012190:	0049      	lsls	r1, r1, #1
 8012192:	3201      	adds	r2, #1
 8012194:	e7ef      	b.n	8012176 <__ieee754_sqrt+0x13a>
 8012196:	4680      	mov	r8, r0
 8012198:	e7bd      	b.n	8012116 <__ieee754_sqrt+0xda>
 801219a:	bf00      	nop
 801219c:	7ff00000 	.word	0x7ff00000

080121a0 <__ieee754_sqrtf>:
 80121a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80121a4:	4770      	bx	lr

080121a6 <with_errno>:
 80121a6:	b570      	push	{r4, r5, r6, lr}
 80121a8:	4604      	mov	r4, r0
 80121aa:	460d      	mov	r5, r1
 80121ac:	4616      	mov	r6, r2
 80121ae:	f7f9 fab9 	bl	800b724 <__errno>
 80121b2:	4629      	mov	r1, r5
 80121b4:	6006      	str	r6, [r0, #0]
 80121b6:	4620      	mov	r0, r4
 80121b8:	bd70      	pop	{r4, r5, r6, pc}

080121ba <xflow>:
 80121ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121bc:	4614      	mov	r4, r2
 80121be:	461d      	mov	r5, r3
 80121c0:	b108      	cbz	r0, 80121c6 <xflow+0xc>
 80121c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80121c6:	e9cd 2300 	strd	r2, r3, [sp]
 80121ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121ce:	4620      	mov	r0, r4
 80121d0:	4629      	mov	r1, r5
 80121d2:	f7ee fa41 	bl	8000658 <__aeabi_dmul>
 80121d6:	2222      	movs	r2, #34	; 0x22
 80121d8:	b003      	add	sp, #12
 80121da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121de:	f7ff bfe2 	b.w	80121a6 <with_errno>

080121e2 <__math_uflow>:
 80121e2:	b508      	push	{r3, lr}
 80121e4:	2200      	movs	r2, #0
 80121e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80121ea:	f7ff ffe6 	bl	80121ba <xflow>
 80121ee:	ec41 0b10 	vmov	d0, r0, r1
 80121f2:	bd08      	pop	{r3, pc}

080121f4 <__math_oflow>:
 80121f4:	b508      	push	{r3, lr}
 80121f6:	2200      	movs	r2, #0
 80121f8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80121fc:	f7ff ffdd 	bl	80121ba <xflow>
 8012200:	ec41 0b10 	vmov	d0, r0, r1
 8012204:	bd08      	pop	{r3, pc}
	...

08012208 <atan>:
 8012208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801220c:	ec55 4b10 	vmov	r4, r5, d0
 8012210:	4bc3      	ldr	r3, [pc, #780]	; (8012520 <atan+0x318>)
 8012212:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012216:	429e      	cmp	r6, r3
 8012218:	46ab      	mov	fp, r5
 801221a:	dd18      	ble.n	801224e <atan+0x46>
 801221c:	4bc1      	ldr	r3, [pc, #772]	; (8012524 <atan+0x31c>)
 801221e:	429e      	cmp	r6, r3
 8012220:	dc01      	bgt.n	8012226 <atan+0x1e>
 8012222:	d109      	bne.n	8012238 <atan+0x30>
 8012224:	b144      	cbz	r4, 8012238 <atan+0x30>
 8012226:	4622      	mov	r2, r4
 8012228:	462b      	mov	r3, r5
 801222a:	4620      	mov	r0, r4
 801222c:	4629      	mov	r1, r5
 801222e:	f7ee f85d 	bl	80002ec <__adddf3>
 8012232:	4604      	mov	r4, r0
 8012234:	460d      	mov	r5, r1
 8012236:	e006      	b.n	8012246 <atan+0x3e>
 8012238:	f1bb 0f00 	cmp.w	fp, #0
 801223c:	f300 8131 	bgt.w	80124a2 <atan+0x29a>
 8012240:	a59b      	add	r5, pc, #620	; (adr r5, 80124b0 <atan+0x2a8>)
 8012242:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012246:	ec45 4b10 	vmov	d0, r4, r5
 801224a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801224e:	4bb6      	ldr	r3, [pc, #728]	; (8012528 <atan+0x320>)
 8012250:	429e      	cmp	r6, r3
 8012252:	dc14      	bgt.n	801227e <atan+0x76>
 8012254:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012258:	429e      	cmp	r6, r3
 801225a:	dc0d      	bgt.n	8012278 <atan+0x70>
 801225c:	a396      	add	r3, pc, #600	; (adr r3, 80124b8 <atan+0x2b0>)
 801225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012262:	ee10 0a10 	vmov	r0, s0
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee f840 	bl	80002ec <__adddf3>
 801226c:	4baf      	ldr	r3, [pc, #700]	; (801252c <atan+0x324>)
 801226e:	2200      	movs	r2, #0
 8012270:	f7ee fc82 	bl	8000b78 <__aeabi_dcmpgt>
 8012274:	2800      	cmp	r0, #0
 8012276:	d1e6      	bne.n	8012246 <atan+0x3e>
 8012278:	f04f 3aff 	mov.w	sl, #4294967295
 801227c:	e02b      	b.n	80122d6 <atan+0xce>
 801227e:	f000 f963 	bl	8012548 <fabs>
 8012282:	4bab      	ldr	r3, [pc, #684]	; (8012530 <atan+0x328>)
 8012284:	429e      	cmp	r6, r3
 8012286:	ec55 4b10 	vmov	r4, r5, d0
 801228a:	f300 80bf 	bgt.w	801240c <atan+0x204>
 801228e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012292:	429e      	cmp	r6, r3
 8012294:	f300 80a0 	bgt.w	80123d8 <atan+0x1d0>
 8012298:	ee10 2a10 	vmov	r2, s0
 801229c:	ee10 0a10 	vmov	r0, s0
 80122a0:	462b      	mov	r3, r5
 80122a2:	4629      	mov	r1, r5
 80122a4:	f7ee f822 	bl	80002ec <__adddf3>
 80122a8:	4ba0      	ldr	r3, [pc, #640]	; (801252c <atan+0x324>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	f7ee f81c 	bl	80002e8 <__aeabi_dsub>
 80122b0:	2200      	movs	r2, #0
 80122b2:	4606      	mov	r6, r0
 80122b4:	460f      	mov	r7, r1
 80122b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80122ba:	4620      	mov	r0, r4
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ee f815 	bl	80002ec <__adddf3>
 80122c2:	4602      	mov	r2, r0
 80122c4:	460b      	mov	r3, r1
 80122c6:	4630      	mov	r0, r6
 80122c8:	4639      	mov	r1, r7
 80122ca:	f7ee faef 	bl	80008ac <__aeabi_ddiv>
 80122ce:	f04f 0a00 	mov.w	sl, #0
 80122d2:	4604      	mov	r4, r0
 80122d4:	460d      	mov	r5, r1
 80122d6:	4622      	mov	r2, r4
 80122d8:	462b      	mov	r3, r5
 80122da:	4620      	mov	r0, r4
 80122dc:	4629      	mov	r1, r5
 80122de:	f7ee f9bb 	bl	8000658 <__aeabi_dmul>
 80122e2:	4602      	mov	r2, r0
 80122e4:	460b      	mov	r3, r1
 80122e6:	4680      	mov	r8, r0
 80122e8:	4689      	mov	r9, r1
 80122ea:	f7ee f9b5 	bl	8000658 <__aeabi_dmul>
 80122ee:	a374      	add	r3, pc, #464	; (adr r3, 80124c0 <atan+0x2b8>)
 80122f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f4:	4606      	mov	r6, r0
 80122f6:	460f      	mov	r7, r1
 80122f8:	f7ee f9ae 	bl	8000658 <__aeabi_dmul>
 80122fc:	a372      	add	r3, pc, #456	; (adr r3, 80124c8 <atan+0x2c0>)
 80122fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012302:	f7ed fff3 	bl	80002ec <__adddf3>
 8012306:	4632      	mov	r2, r6
 8012308:	463b      	mov	r3, r7
 801230a:	f7ee f9a5 	bl	8000658 <__aeabi_dmul>
 801230e:	a370      	add	r3, pc, #448	; (adr r3, 80124d0 <atan+0x2c8>)
 8012310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012314:	f7ed ffea 	bl	80002ec <__adddf3>
 8012318:	4632      	mov	r2, r6
 801231a:	463b      	mov	r3, r7
 801231c:	f7ee f99c 	bl	8000658 <__aeabi_dmul>
 8012320:	a36d      	add	r3, pc, #436	; (adr r3, 80124d8 <atan+0x2d0>)
 8012322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012326:	f7ed ffe1 	bl	80002ec <__adddf3>
 801232a:	4632      	mov	r2, r6
 801232c:	463b      	mov	r3, r7
 801232e:	f7ee f993 	bl	8000658 <__aeabi_dmul>
 8012332:	a36b      	add	r3, pc, #428	; (adr r3, 80124e0 <atan+0x2d8>)
 8012334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012338:	f7ed ffd8 	bl	80002ec <__adddf3>
 801233c:	4632      	mov	r2, r6
 801233e:	463b      	mov	r3, r7
 8012340:	f7ee f98a 	bl	8000658 <__aeabi_dmul>
 8012344:	a368      	add	r3, pc, #416	; (adr r3, 80124e8 <atan+0x2e0>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	f7ed ffcf 	bl	80002ec <__adddf3>
 801234e:	4642      	mov	r2, r8
 8012350:	464b      	mov	r3, r9
 8012352:	f7ee f981 	bl	8000658 <__aeabi_dmul>
 8012356:	a366      	add	r3, pc, #408	; (adr r3, 80124f0 <atan+0x2e8>)
 8012358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235c:	4680      	mov	r8, r0
 801235e:	4689      	mov	r9, r1
 8012360:	4630      	mov	r0, r6
 8012362:	4639      	mov	r1, r7
 8012364:	f7ee f978 	bl	8000658 <__aeabi_dmul>
 8012368:	a363      	add	r3, pc, #396	; (adr r3, 80124f8 <atan+0x2f0>)
 801236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236e:	f7ed ffbb 	bl	80002e8 <__aeabi_dsub>
 8012372:	4632      	mov	r2, r6
 8012374:	463b      	mov	r3, r7
 8012376:	f7ee f96f 	bl	8000658 <__aeabi_dmul>
 801237a:	a361      	add	r3, pc, #388	; (adr r3, 8012500 <atan+0x2f8>)
 801237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012380:	f7ed ffb2 	bl	80002e8 <__aeabi_dsub>
 8012384:	4632      	mov	r2, r6
 8012386:	463b      	mov	r3, r7
 8012388:	f7ee f966 	bl	8000658 <__aeabi_dmul>
 801238c:	a35e      	add	r3, pc, #376	; (adr r3, 8012508 <atan+0x300>)
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	f7ed ffa9 	bl	80002e8 <__aeabi_dsub>
 8012396:	4632      	mov	r2, r6
 8012398:	463b      	mov	r3, r7
 801239a:	f7ee f95d 	bl	8000658 <__aeabi_dmul>
 801239e:	a35c      	add	r3, pc, #368	; (adr r3, 8012510 <atan+0x308>)
 80123a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a4:	f7ed ffa0 	bl	80002e8 <__aeabi_dsub>
 80123a8:	4632      	mov	r2, r6
 80123aa:	463b      	mov	r3, r7
 80123ac:	f7ee f954 	bl	8000658 <__aeabi_dmul>
 80123b0:	4602      	mov	r2, r0
 80123b2:	460b      	mov	r3, r1
 80123b4:	4640      	mov	r0, r8
 80123b6:	4649      	mov	r1, r9
 80123b8:	f7ed ff98 	bl	80002ec <__adddf3>
 80123bc:	4622      	mov	r2, r4
 80123be:	462b      	mov	r3, r5
 80123c0:	f7ee f94a 	bl	8000658 <__aeabi_dmul>
 80123c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	d14b      	bne.n	8012466 <atan+0x25e>
 80123ce:	4620      	mov	r0, r4
 80123d0:	4629      	mov	r1, r5
 80123d2:	f7ed ff89 	bl	80002e8 <__aeabi_dsub>
 80123d6:	e72c      	b.n	8012232 <atan+0x2a>
 80123d8:	ee10 0a10 	vmov	r0, s0
 80123dc:	4b53      	ldr	r3, [pc, #332]	; (801252c <atan+0x324>)
 80123de:	2200      	movs	r2, #0
 80123e0:	4629      	mov	r1, r5
 80123e2:	f7ed ff81 	bl	80002e8 <__aeabi_dsub>
 80123e6:	4b51      	ldr	r3, [pc, #324]	; (801252c <atan+0x324>)
 80123e8:	4606      	mov	r6, r0
 80123ea:	460f      	mov	r7, r1
 80123ec:	2200      	movs	r2, #0
 80123ee:	4620      	mov	r0, r4
 80123f0:	4629      	mov	r1, r5
 80123f2:	f7ed ff7b 	bl	80002ec <__adddf3>
 80123f6:	4602      	mov	r2, r0
 80123f8:	460b      	mov	r3, r1
 80123fa:	4630      	mov	r0, r6
 80123fc:	4639      	mov	r1, r7
 80123fe:	f7ee fa55 	bl	80008ac <__aeabi_ddiv>
 8012402:	f04f 0a01 	mov.w	sl, #1
 8012406:	4604      	mov	r4, r0
 8012408:	460d      	mov	r5, r1
 801240a:	e764      	b.n	80122d6 <atan+0xce>
 801240c:	4b49      	ldr	r3, [pc, #292]	; (8012534 <atan+0x32c>)
 801240e:	429e      	cmp	r6, r3
 8012410:	da1d      	bge.n	801244e <atan+0x246>
 8012412:	ee10 0a10 	vmov	r0, s0
 8012416:	4b48      	ldr	r3, [pc, #288]	; (8012538 <atan+0x330>)
 8012418:	2200      	movs	r2, #0
 801241a:	4629      	mov	r1, r5
 801241c:	f7ed ff64 	bl	80002e8 <__aeabi_dsub>
 8012420:	4b45      	ldr	r3, [pc, #276]	; (8012538 <atan+0x330>)
 8012422:	4606      	mov	r6, r0
 8012424:	460f      	mov	r7, r1
 8012426:	2200      	movs	r2, #0
 8012428:	4620      	mov	r0, r4
 801242a:	4629      	mov	r1, r5
 801242c:	f7ee f914 	bl	8000658 <__aeabi_dmul>
 8012430:	4b3e      	ldr	r3, [pc, #248]	; (801252c <atan+0x324>)
 8012432:	2200      	movs	r2, #0
 8012434:	f7ed ff5a 	bl	80002ec <__adddf3>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	4630      	mov	r0, r6
 801243e:	4639      	mov	r1, r7
 8012440:	f7ee fa34 	bl	80008ac <__aeabi_ddiv>
 8012444:	f04f 0a02 	mov.w	sl, #2
 8012448:	4604      	mov	r4, r0
 801244a:	460d      	mov	r5, r1
 801244c:	e743      	b.n	80122d6 <atan+0xce>
 801244e:	462b      	mov	r3, r5
 8012450:	ee10 2a10 	vmov	r2, s0
 8012454:	4939      	ldr	r1, [pc, #228]	; (801253c <atan+0x334>)
 8012456:	2000      	movs	r0, #0
 8012458:	f7ee fa28 	bl	80008ac <__aeabi_ddiv>
 801245c:	f04f 0a03 	mov.w	sl, #3
 8012460:	4604      	mov	r4, r0
 8012462:	460d      	mov	r5, r1
 8012464:	e737      	b.n	80122d6 <atan+0xce>
 8012466:	4b36      	ldr	r3, [pc, #216]	; (8012540 <atan+0x338>)
 8012468:	4e36      	ldr	r6, [pc, #216]	; (8012544 <atan+0x33c>)
 801246a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801246e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012472:	e9da 2300 	ldrd	r2, r3, [sl]
 8012476:	f7ed ff37 	bl	80002e8 <__aeabi_dsub>
 801247a:	4622      	mov	r2, r4
 801247c:	462b      	mov	r3, r5
 801247e:	f7ed ff33 	bl	80002e8 <__aeabi_dsub>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	e9d6 0100 	ldrd	r0, r1, [r6]
 801248a:	f7ed ff2d 	bl	80002e8 <__aeabi_dsub>
 801248e:	f1bb 0f00 	cmp.w	fp, #0
 8012492:	4604      	mov	r4, r0
 8012494:	460d      	mov	r5, r1
 8012496:	f6bf aed6 	bge.w	8012246 <atan+0x3e>
 801249a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801249e:	461d      	mov	r5, r3
 80124a0:	e6d1      	b.n	8012246 <atan+0x3e>
 80124a2:	a51d      	add	r5, pc, #116	; (adr r5, 8012518 <atan+0x310>)
 80124a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80124a8:	e6cd      	b.n	8012246 <atan+0x3e>
 80124aa:	bf00      	nop
 80124ac:	f3af 8000 	nop.w
 80124b0:	54442d18 	.word	0x54442d18
 80124b4:	bff921fb 	.word	0xbff921fb
 80124b8:	8800759c 	.word	0x8800759c
 80124bc:	7e37e43c 	.word	0x7e37e43c
 80124c0:	e322da11 	.word	0xe322da11
 80124c4:	3f90ad3a 	.word	0x3f90ad3a
 80124c8:	24760deb 	.word	0x24760deb
 80124cc:	3fa97b4b 	.word	0x3fa97b4b
 80124d0:	a0d03d51 	.word	0xa0d03d51
 80124d4:	3fb10d66 	.word	0x3fb10d66
 80124d8:	c54c206e 	.word	0xc54c206e
 80124dc:	3fb745cd 	.word	0x3fb745cd
 80124e0:	920083ff 	.word	0x920083ff
 80124e4:	3fc24924 	.word	0x3fc24924
 80124e8:	5555550d 	.word	0x5555550d
 80124ec:	3fd55555 	.word	0x3fd55555
 80124f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80124f4:	bfa2b444 	.word	0xbfa2b444
 80124f8:	52defd9a 	.word	0x52defd9a
 80124fc:	3fadde2d 	.word	0x3fadde2d
 8012500:	af749a6d 	.word	0xaf749a6d
 8012504:	3fb3b0f2 	.word	0x3fb3b0f2
 8012508:	fe231671 	.word	0xfe231671
 801250c:	3fbc71c6 	.word	0x3fbc71c6
 8012510:	9998ebc4 	.word	0x9998ebc4
 8012514:	3fc99999 	.word	0x3fc99999
 8012518:	54442d18 	.word	0x54442d18
 801251c:	3ff921fb 	.word	0x3ff921fb
 8012520:	440fffff 	.word	0x440fffff
 8012524:	7ff00000 	.word	0x7ff00000
 8012528:	3fdbffff 	.word	0x3fdbffff
 801252c:	3ff00000 	.word	0x3ff00000
 8012530:	3ff2ffff 	.word	0x3ff2ffff
 8012534:	40038000 	.word	0x40038000
 8012538:	3ff80000 	.word	0x3ff80000
 801253c:	bff00000 	.word	0xbff00000
 8012540:	08012c88 	.word	0x08012c88
 8012544:	08012c68 	.word	0x08012c68

08012548 <fabs>:
 8012548:	ec51 0b10 	vmov	r0, r1, d0
 801254c:	ee10 2a10 	vmov	r2, s0
 8012550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012554:	ec43 2b10 	vmov	d0, r2, r3
 8012558:	4770      	bx	lr

0801255a <finite>:
 801255a:	b082      	sub	sp, #8
 801255c:	ed8d 0b00 	vstr	d0, [sp]
 8012560:	9801      	ldr	r0, [sp, #4]
 8012562:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012566:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801256a:	0fc0      	lsrs	r0, r0, #31
 801256c:	b002      	add	sp, #8
 801256e:	4770      	bx	lr

08012570 <scalbn>:
 8012570:	b570      	push	{r4, r5, r6, lr}
 8012572:	ec55 4b10 	vmov	r4, r5, d0
 8012576:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801257a:	4606      	mov	r6, r0
 801257c:	462b      	mov	r3, r5
 801257e:	b99a      	cbnz	r2, 80125a8 <scalbn+0x38>
 8012580:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012584:	4323      	orrs	r3, r4
 8012586:	d036      	beq.n	80125f6 <scalbn+0x86>
 8012588:	4b39      	ldr	r3, [pc, #228]	; (8012670 <scalbn+0x100>)
 801258a:	4629      	mov	r1, r5
 801258c:	ee10 0a10 	vmov	r0, s0
 8012590:	2200      	movs	r2, #0
 8012592:	f7ee f861 	bl	8000658 <__aeabi_dmul>
 8012596:	4b37      	ldr	r3, [pc, #220]	; (8012674 <scalbn+0x104>)
 8012598:	429e      	cmp	r6, r3
 801259a:	4604      	mov	r4, r0
 801259c:	460d      	mov	r5, r1
 801259e:	da10      	bge.n	80125c2 <scalbn+0x52>
 80125a0:	a32b      	add	r3, pc, #172	; (adr r3, 8012650 <scalbn+0xe0>)
 80125a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a6:	e03a      	b.n	801261e <scalbn+0xae>
 80125a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80125ac:	428a      	cmp	r2, r1
 80125ae:	d10c      	bne.n	80125ca <scalbn+0x5a>
 80125b0:	ee10 2a10 	vmov	r2, s0
 80125b4:	4620      	mov	r0, r4
 80125b6:	4629      	mov	r1, r5
 80125b8:	f7ed fe98 	bl	80002ec <__adddf3>
 80125bc:	4604      	mov	r4, r0
 80125be:	460d      	mov	r5, r1
 80125c0:	e019      	b.n	80125f6 <scalbn+0x86>
 80125c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80125c6:	460b      	mov	r3, r1
 80125c8:	3a36      	subs	r2, #54	; 0x36
 80125ca:	4432      	add	r2, r6
 80125cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80125d0:	428a      	cmp	r2, r1
 80125d2:	dd08      	ble.n	80125e6 <scalbn+0x76>
 80125d4:	2d00      	cmp	r5, #0
 80125d6:	a120      	add	r1, pc, #128	; (adr r1, 8012658 <scalbn+0xe8>)
 80125d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125dc:	da1c      	bge.n	8012618 <scalbn+0xa8>
 80125de:	a120      	add	r1, pc, #128	; (adr r1, 8012660 <scalbn+0xf0>)
 80125e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125e4:	e018      	b.n	8012618 <scalbn+0xa8>
 80125e6:	2a00      	cmp	r2, #0
 80125e8:	dd08      	ble.n	80125fc <scalbn+0x8c>
 80125ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80125ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80125f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80125f6:	ec45 4b10 	vmov	d0, r4, r5
 80125fa:	bd70      	pop	{r4, r5, r6, pc}
 80125fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012600:	da19      	bge.n	8012636 <scalbn+0xc6>
 8012602:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012606:	429e      	cmp	r6, r3
 8012608:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801260c:	dd0a      	ble.n	8012624 <scalbn+0xb4>
 801260e:	a112      	add	r1, pc, #72	; (adr r1, 8012658 <scalbn+0xe8>)
 8012610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1e2      	bne.n	80125de <scalbn+0x6e>
 8012618:	a30f      	add	r3, pc, #60	; (adr r3, 8012658 <scalbn+0xe8>)
 801261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261e:	f7ee f81b 	bl	8000658 <__aeabi_dmul>
 8012622:	e7cb      	b.n	80125bc <scalbn+0x4c>
 8012624:	a10a      	add	r1, pc, #40	; (adr r1, 8012650 <scalbn+0xe0>)
 8012626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d0b8      	beq.n	80125a0 <scalbn+0x30>
 801262e:	a10e      	add	r1, pc, #56	; (adr r1, 8012668 <scalbn+0xf8>)
 8012630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012634:	e7b4      	b.n	80125a0 <scalbn+0x30>
 8012636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801263a:	3236      	adds	r2, #54	; 0x36
 801263c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012640:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012644:	4620      	mov	r0, r4
 8012646:	4b0c      	ldr	r3, [pc, #48]	; (8012678 <scalbn+0x108>)
 8012648:	2200      	movs	r2, #0
 801264a:	e7e8      	b.n	801261e <scalbn+0xae>
 801264c:	f3af 8000 	nop.w
 8012650:	c2f8f359 	.word	0xc2f8f359
 8012654:	01a56e1f 	.word	0x01a56e1f
 8012658:	8800759c 	.word	0x8800759c
 801265c:	7e37e43c 	.word	0x7e37e43c
 8012660:	8800759c 	.word	0x8800759c
 8012664:	fe37e43c 	.word	0xfe37e43c
 8012668:	c2f8f359 	.word	0xc2f8f359
 801266c:	81a56e1f 	.word	0x81a56e1f
 8012670:	43500000 	.word	0x43500000
 8012674:	ffff3cb0 	.word	0xffff3cb0
 8012678:	3c900000 	.word	0x3c900000

0801267c <_init>:
 801267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267e:	bf00      	nop
 8012680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012682:	bc08      	pop	{r3}
 8012684:	469e      	mov	lr, r3
 8012686:	4770      	bx	lr

08012688 <_fini>:
 8012688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268a:	bf00      	nop
 801268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801268e:	bc08      	pop	{r3}
 8012690:	469e      	mov	lr, r3
 8012692:	4770      	bx	lr
