
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800cf38  0800cf38  0001cf38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d458  0800d458  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d458  0800d458  0001d458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d460  0800d460  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d464  0800d464  0001d464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200001e0  0800d648  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800d648  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e29  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a70  00000000  00000000  00032039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00034ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d03  00000000  00000000  00036410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001366f  00000000  00000000  0003a113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db4c4  00000000  00000000  0004d782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128c46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  00128c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf1c 	.word	0x0800cf1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800cf1c 	.word	0x0800cf1c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 20);
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <bme280_getVals+0xa8>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2314      	movs	r3, #20
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f3      	movs	r2, #243	; 0xf3
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	f003 fdfe 	bl	8004f10 <HAL_I2C_Mem_Read>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <bme280_getVals+0xac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 8001322:	793b      	ldrb	r3, [r7, #4]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d032      	beq.n	8001392 <bme280_getVals+0x9e>
	{
		BME->isUpdated = 1;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <bme280_getVals+0xac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 200);
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <bme280_getVals+0xa8>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	23c8      	movs	r3, #200	; 0xc8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2308      	movs	r3, #8
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f7      	movs	r2, #247	; 0xf7
 800134a:	21ec      	movs	r1, #236	; 0xec
 800134c:	f003 fde0 	bl	8004f10 <HAL_I2C_Mem_Read>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
		BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	031a      	lsls	r2, r3, #12
 8001358:	7a3b      	ldrb	r3, [r7, #8]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4313      	orrs	r3, r2
 800135e:	7a7a      	ldrb	r2, [r7, #9]
 8001360:	0912      	lsrs	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	431a      	orrs	r2, r3
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <bme280_getVals+0xac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
		BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800136c:	793b      	ldrb	r3, [r7, #4]
 800136e:	031a      	lsls	r2, r3, #12
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4313      	orrs	r3, r2
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	0912      	lsrs	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	431a      	orrs	r2, r3
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <bme280_getVals+0xac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
		BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 8001384:	7abb      	ldrb	r3, [r7, #10]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	7afa      	ldrb	r2, [r7, #11]
 800138a:	431a      	orrs	r2, r3
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <bme280_getVals+0xac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	UNUSED(retVal);
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001fc 	.word	0x200001fc
 80013a0:	20000200 	.word	0x20000200
 80013a4:	00000000 	.word	0x00000000

080013a8 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <bme280_get_altitude+0x98>)
 80013b0:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <bme280_get_altitude+0x9c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80013ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80013be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013c2:	ee16 0a90 	vmov	r0, s13
 80013c6:	f7ff f8df 	bl	8000588 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001430 <bme280_get_altitude+0x88>
 80013d2:	ec43 2b10 	vmov	d0, r2, r3
 80013d6:	f00a fe8d 	bl	800c0f4 <pow>
 80013da:	ec53 2b10 	vmov	r2, r3, d0
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	4919      	ldr	r1, [pc, #100]	; (8001448 <bme280_get_altitude+0xa0>)
 80013e4:	f7fe ff70 	bl	80002c8 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	a311      	add	r3, pc, #68	; (adr r3, 8001438 <bme280_get_altitude+0x90>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f91f 	bl	8000638 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fc11 	bl	8000c28 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - BME->baseAltitude;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <bme280_get_altitude+0x9c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <bme280_get_altitude+0x9c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	ed97 7a00 	vldr	s14, [r7]
 800141a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	ccd9456c 	.word	0xccd9456c
 8001434:	3fc85b95 	.word	0x3fc85b95
 8001438:	00000000 	.word	0x00000000
 800143c:	40e5a540 	.word	0x40e5a540
 8001440:	447d5000 	.word	0x447d5000
 8001444:	20000200 	.word	0x20000200
 8001448:	3ff00000 	.word	0x3ff00000

0800144c <bme280_init>:

HAL_StatusTypeDef bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme, uint8_t mode, uint8_t OS, uint8_t filter){
 800144c:	b580      	push	{r7, lr}
 800144e:	b092      	sub	sp, #72	; 0x48
 8001450:	af04      	add	r7, sp, #16
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4611      	mov	r1, r2
 8001458:	461a      	mov	r2, r3
 800145a:	460b      	mov	r3, r1
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	4613      	mov	r3, r2
 8001460:	71bb      	strb	r3, [r7, #6]
	BME = BME_sensor;
 8001462:	4aa6      	ldr	r2, [pc, #664]	; (80016fc <bme280_init+0x2b0>)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001468:	4aa5      	ldr	r2, [pc, #660]	; (8001700 <bme280_init+0x2b4>)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	6013      	str	r3, [r2, #0]
	BME->baseAltitude = 0.0;
 800146e:	4ba3      	ldr	r3, [pc, #652]	; (80016fc <bme280_init+0x2b0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	645a      	str	r2, [r3, #68]	; 0x44

	uint8_t params[25];

	HAL_StatusTypeDef retVal;

	uint8_t resetData = BME280_SOFT_RESET;
 8001478:	23b6      	movs	r3, #182	; 0xb6
 800147a:	74fb      	strb	r3, [r7, #19]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
 800147c:	2332      	movs	r3, #50	; 0x32
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	2301      	movs	r3, #1
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	f107 0313 	add.w	r3, r7, #19
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	22e0      	movs	r2, #224	; 0xe0
 800148e:	21ec      	movs	r1, #236	; 0xec
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f003 fc43 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_Delay(50);
 800149c:	2032      	movs	r0, #50	; 0x32
 800149e:	f002 f841 	bl	8003524 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014a2:	23c8      	movs	r3, #200	; 0xc8
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2319      	movs	r3, #25
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2288      	movs	r2, #136	; 0x88
 80014b4:	21ec      	movs	r1, #236	; 0xec
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f003 fd2a 	bl	8004f10 <HAL_I2C_Mem_Read>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014c2:	7d3b      	ldrb	r3, [r7, #20]
 80014c4:	b299      	uxth	r1, r3
 80014c6:	7d7b      	ldrb	r3, [r7, #21]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <bme280_init+0x2b0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	b292      	uxth	r2, r2
 80014d6:	801a      	strh	r2, [r3, #0]
	BME->parameters.dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014d8:	7dbb      	ldrb	r3, [r7, #22]
 80014da:	b219      	sxth	r1, r3
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b86      	ldr	r3, [pc, #536]	; (80016fc <bme280_init+0x2b0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	b212      	sxth	r2, r2
 80014ea:	805a      	strh	r2, [r3, #2]
	BME->parameters.dig_T3 = params[4] | ((int16_t)params[5] << 8);
 80014ec:	7e3b      	ldrb	r3, [r7, #24]
 80014ee:	b219      	sxth	r1, r3
 80014f0:	7e7b      	ldrb	r3, [r7, #25]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b81      	ldr	r3, [pc, #516]	; (80016fc <bme280_init+0x2b0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	b212      	sxth	r2, r2
 80014fe:	809a      	strh	r2, [r3, #4]
	BME->parameters.dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001500:	7ebb      	ldrb	r3, [r7, #26]
 8001502:	b21a      	sxth	r2, r3
 8001504:	7efb      	ldrb	r3, [r7, #27]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b7b      	ldr	r3, [pc, #492]	; (80016fc <bme280_init+0x2b0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b292      	uxth	r2, r2
 8001514:	80da      	strh	r2, [r3, #6]
	BME->parameters.dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001516:	7f3b      	ldrb	r3, [r7, #28]
 8001518:	b219      	sxth	r1, r3
 800151a:	7f7b      	ldrb	r3, [r7, #29]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b76      	ldr	r3, [pc, #472]	; (80016fc <bme280_init+0x2b0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	b212      	sxth	r2, r2
 8001528:	811a      	strh	r2, [r3, #8]
	BME->parameters.dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800152a:	7fbb      	ldrb	r3, [r7, #30]
 800152c:	b219      	sxth	r1, r3
 800152e:	7ffb      	ldrb	r3, [r7, #31]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b71      	ldr	r3, [pc, #452]	; (80016fc <bme280_init+0x2b0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	b212      	sxth	r2, r2
 800153c:	815a      	strh	r2, [r3, #10]
	BME->parameters.dig_P4 = params[12] | ((int16_t)params[13] << 8);
 800153e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001542:	b219      	sxth	r1, r3
 8001544:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <bme280_init+0x2b0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	b212      	sxth	r2, r2
 8001554:	819a      	strh	r2, [r3, #12]
	BME->parameters.dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001556:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800155a:	b219      	sxth	r1, r3
 800155c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b65      	ldr	r3, [pc, #404]	; (80016fc <bme280_init+0x2b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	b212      	sxth	r2, r2
 800156c:	81da      	strh	r2, [r3, #14]
	BME->parameters.dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800156e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001572:	b219      	sxth	r1, r3
 8001574:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <bme280_init+0x2b0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	b212      	sxth	r2, r2
 8001584:	821a      	strh	r2, [r3, #16]
	BME->parameters.dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001586:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800158a:	b219      	sxth	r1, r3
 800158c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b59      	ldr	r3, [pc, #356]	; (80016fc <bme280_init+0x2b0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	b212      	sxth	r2, r2
 800159c:	825a      	strh	r2, [r3, #18]
	BME->parameters.dig_P8 = params[20] | ((int16_t)params[21] << 8);
 800159e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015a2:	b219      	sxth	r1, r3
 80015a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <bme280_init+0x2b0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	b212      	sxth	r2, r2
 80015b4:	829a      	strh	r2, [r3, #20]
	BME->parameters.dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015ba:	b219      	sxth	r1, r3
 80015bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <bme280_init+0x2b0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	82da      	strh	r2, [r3, #22]
	BME->parameters.dig_H1 = params[24];
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <bme280_init+0x2b0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80015d6:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015d8:	2332      	movs	r3, #50	; 0x32
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	2307      	movs	r3, #7
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	22e1      	movs	r2, #225	; 0xe1
 80015ea:	21ec      	movs	r1, #236	; 0xec
 80015ec:	68b8      	ldr	r0, [r7, #8]
 80015ee:	f003 fc8f 	bl	8004f10 <HAL_I2C_Mem_Read>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_H2 = params[0] | ((int16_t)params[1] << 8);
 80015f8:	7d3b      	ldrb	r3, [r7, #20]
 80015fa:	b219      	sxth	r1, r3
 80015fc:	7d7b      	ldrb	r3, [r7, #21]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <bme280_init+0x2b0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	b212      	sxth	r2, r2
 800160a:	835a      	strh	r2, [r3, #26]
	BME->parameters.dig_H3	= params[2];
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <bme280_init+0x2b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	7dba      	ldrb	r2, [r7, #22]
 8001612:	771a      	strb	r2, [r3, #28]
	BME->parameters.dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001614:	7e3b      	ldrb	r3, [r7, #24]
 8001616:	b21b      	sxth	r3, r3
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	b219      	sxth	r1, r3
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	b21a      	sxth	r2, r3
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <bme280_init+0x2b0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	b212      	sxth	r2, r2
 800162c:	83da      	strh	r2, [r3, #30]
	BME->parameters.dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 800162e:	7e3b      	ldrb	r3, [r7, #24]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	b2db      	uxtb	r3, r3
 8001634:	b219      	sxth	r1, r3
 8001636:	7e7b      	ldrb	r3, [r7, #25]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <bme280_init+0x2b0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	b212      	sxth	r2, r2
 8001644:	841a      	strh	r2, [r3, #32]
	BME->parameters.dig_H6 = params[6];
 8001646:	7eba      	ldrb	r2, [r7, #26]
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <bme280_init+0x2b0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b252      	sxtb	r2, r2
 800164e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	74bb      	strb	r3, [r7, #18]
	data_ctrl = OS;
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 800165a:	2332      	movs	r3, #50	; 0x32
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2301      	movs	r3, #1
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	f107 0312 	add.w	r3, r7, #18
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	22f2      	movs	r2, #242	; 0xf2
 800166c:	21ec      	movs	r1, #236	; 0xec
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f003 fb54 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	74bb      	strb	r3, [r7, #18]
	data_ctrl = mode | (OS << 2) | (OS << 5);																		//Mode has been chosed.
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	b25a      	sxtb	r2, r3
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4313      	orrs	r3, r2
 800168a:	b25a      	sxtb	r2, r3
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	b25b      	sxtb	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b25b      	sxtb	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 800169a:	2332      	movs	r3, #50	; 0x32
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 0312 	add.w	r3, r7, #18
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	22f4      	movs	r2, #244	; 0xf4
 80016ac:	21ec      	movs	r1, #236	; 0xec
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f003 fb34 	bl	8004d1c <HAL_I2C_Mem_Write>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	74bb      	strb	r3, [r7, #18]
	data_ctrl = (filter << 2);
 80016be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c8:	2332      	movs	r3, #50	; 0x32
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	f107 0312 	add.w	r3, r7, #18
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f5      	movs	r2, #245	; 0xf5
 80016da:	21ec      	movs	r1, #236	; 0xec
 80016dc:	68b8      	ldr	r0, [r7, #8]
 80016de:	f003 fb1d 	bl	8004d1c <HAL_I2C_Mem_Write>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//uint8_t buf[50];

	float base = 0.0;
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_Delay(200);
 80016ee:	20c8      	movs	r0, #200	; 0xc8
 80016f0:	f001 ff18 	bl	8003524 <HAL_Delay>
	for(int i = 0; i < 10; i++)		//base aliniyor
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
 80016f8:	e016      	b.n	8001728 <bme280_init+0x2dc>
 80016fa:	bf00      	nop
 80016fc:	20000200 	.word	0x20000200
 8001700:	200001fc 	.word	0x200001fc
	{
	  bme280_update();
 8001704:	f000 f826 	bl	8001754 <bme280_update>
	  base +=  BME->altitude;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <bme280_init+0x304>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001710:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	 // sprintf((char*)buf, "alt: %0.f\r\n", base);
	 // HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), 50);
	  HAL_Delay(10);
 800171c:	200a      	movs	r0, #10
 800171e:	f001 ff01 	bl	8003524 <HAL_Delay>
	for(int i = 0; i < 10; i++)		//base aliniyor
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	3301      	adds	r3, #1
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
 8001728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172a:	2b09      	cmp	r3, #9
 800172c:	ddea      	ble.n	8001704 <bme280_init+0x2b8>
	}
	BME->baseAltitude = (base / 10.0);
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <bme280_init+0x304>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001736:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800173a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800173e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	return retVal;
 8001742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001746:	4618      	mov	r0, r3
 8001748:	3738      	adds	r7, #56	; 0x38
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000200 	.word	0x20000200

08001754 <bme280_update>:


void bme280_update(){
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	; 0x148
 800175a:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 800175c:	f7ff fdca 	bl	80012f4 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001760:	4bd9      	ldr	r3, [pc, #868]	; (8001ac8 <bme280_update+0x374>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 83a7 	bne.w	8001ebc <bme280_update+0x768>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 800176e:	4bd6      	ldr	r3, [pc, #856]	; (8001ac8 <bme280_update+0x374>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters.dig_T1 << 1))) * ((int32_t)BME->parameters.dig_T2)) >> 11;
 8001778:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800177c:	10da      	asrs	r2, r3, #3
 800177e:	4bd2      	ldr	r3, [pc, #840]	; (8001ac8 <bme280_update+0x374>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	4bcf      	ldr	r3, [pc, #828]	; (8001ac8 <bme280_update+0x374>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	885b      	ldrh	r3, [r3, #2]
 8001790:	b21b      	sxth	r3, r3
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	12db      	asrs	r3, r3, #11
 8001798:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1))) >> 12) * ((int32_t)BME->parameters.dig_T3)) >> 14;
 800179c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80017a0:	111a      	asrs	r2, r3, #4
 80017a2:	4bc9      	ldr	r3, [pc, #804]	; (8001ac8 <bme280_update+0x374>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	1ad1      	subs	r1, r2, r3
 80017ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80017b0:	111a      	asrs	r2, r3, #4
 80017b2:	4bc5      	ldr	r3, [pc, #788]	; (8001ac8 <bme280_update+0x374>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	131a      	asrs	r2, r3, #12
 80017c2:	4bc1      	ldr	r3, [pc, #772]	; (8001ac8 <bme280_update+0x374>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	139b      	asrs	r3, r3, #14
 80017d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 80017d4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80017d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017dc:	4413      	add	r3, r2
 80017de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 80017e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3380      	adds	r3, #128	; 0x80
 80017ee:	121b      	asrs	r3, r3, #8
 80017f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 80017f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001800:	4bb1      	ldr	r3, [pc, #708]	; (8001ac8 <bme280_update+0x374>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001acc <bme280_update+0x378>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001810:	4bad      	ldr	r3, [pc, #692]	; (8001ac8 <bme280_update+0x374>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2200      	movs	r2, #0
 8001818:	653b      	str	r3, [r7, #80]	; 0x50
 800181a:	657a      	str	r2, [r7, #84]	; 0x54
 800181c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001820:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001824:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001828:	17da      	asrs	r2, r3, #31
 800182a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800182e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001832:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001836:	460b      	mov	r3, r1
 8001838:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 800183c:	64bb      	str	r3, [r7, #72]	; 0x48
 800183e:	4613      	mov	r3, r2
 8001840:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001846:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800184a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters.dig_P6;
 800184e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001852:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001856:	fb03 f102 	mul.w	r1, r3, r2
 800185a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800185e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	18ca      	adds	r2, r1, r3
 8001868:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800186c:	fba3 4503 	umull	r4, r5, r3, r3
 8001870:	1953      	adds	r3, r2, r5
 8001872:	461d      	mov	r5, r3
 8001874:	4b94      	ldr	r3, [pc, #592]	; (8001ac8 <bme280_update+0x374>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	8a1b      	ldrh	r3, [r3, #16]
 800187a:	b21b      	sxth	r3, r3
 800187c:	b21b      	sxth	r3, r3
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001888:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800188c:	4603      	mov	r3, r0
 800188e:	fb03 f205 	mul.w	r2, r3, r5
 8001892:	460b      	mov	r3, r1
 8001894:	fb04 f303 	mul.w	r3, r4, r3
 8001898:	4413      	add	r3, r2
 800189a:	4602      	mov	r2, r0
 800189c:	fba4 ab02 	umull	sl, fp, r4, r2
 80018a0:	445b      	add	r3, fp
 80018a2:	469b      	mov	fp, r3
 80018a4:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 80018a8:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters.dig_P5) <<17);
 80018ac:	4b86      	ldr	r3, [pc, #536]	; (8001ac8 <bme280_update+0x374>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	89db      	ldrh	r3, [r3, #14]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	17da      	asrs	r2, r3, #31
 80018b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80018c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018c4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80018c8:	462a      	mov	r2, r5
 80018ca:	fb02 f203 	mul.w	r2, r2, r3
 80018ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018d2:	4621      	mov	r1, r4
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	441a      	add	r2, r3
 80018da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018de:	4621      	mov	r1, r4
 80018e0:	fba3 8901 	umull	r8, r9, r3, r1
 80018e4:	eb02 0309 	add.w	r3, r2, r9
 80018e8:	4699      	mov	r9, r3
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	ea4f 4149 	mov.w	r1, r9, lsl #17
 80018f6:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 80018fa:	ea4f 4048 	mov.w	r0, r8, lsl #17
 80018fe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001902:	1814      	adds	r4, r2, r0
 8001904:	643c      	str	r4, [r7, #64]	; 0x40
 8001906:	414b      	adcs	r3, r1
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
 800190a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800190e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters.dig_P4) << 35);
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <bme280_update+0x374>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	899b      	ldrh	r3, [r3, #12]
 8001918:	b21b      	sxth	r3, r3
 800191a:	b21b      	sxth	r3, r3
 800191c:	17da      	asrs	r2, r3, #31
 800191e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001922:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001932:	00d9      	lsls	r1, r3, #3
 8001934:	2000      	movs	r0, #0
 8001936:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800193a:	1814      	adds	r4, r2, r0
 800193c:	63bc      	str	r4, [r7, #56]	; 0x38
 800193e:	414b      	adcs	r3, r1
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001942:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001946:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters.dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters.dig_P2) << 12);
 800194a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800194e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001952:	fb03 f102 	mul.w	r1, r3, r2
 8001956:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800195a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	18ca      	adds	r2, r1, r3
 8001964:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001968:	fba3 1303 	umull	r1, r3, r3, r3
 800196c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001970:	460b      	mov	r3, r1
 8001972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800197a:	18d3      	adds	r3, r2, r3
 800197c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <bme280_update+0x374>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	895b      	ldrh	r3, [r3, #10]
 8001986:	b21b      	sxth	r3, r3
 8001988:	b21b      	sxth	r3, r3
 800198a:	17da      	asrs	r2, r3, #31
 800198c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001994:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001998:	462b      	mov	r3, r5
 800199a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800199e:	4642      	mov	r2, r8
 80019a0:	fb02 f203 	mul.w	r2, r2, r3
 80019a4:	464b      	mov	r3, r9
 80019a6:	4621      	mov	r1, r4
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	4622      	mov	r2, r4
 80019b0:	4641      	mov	r1, r8
 80019b2:	fba2 1201 	umull	r1, r2, r2, r1
 80019b6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80019ba:	460a      	mov	r2, r1
 80019bc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80019c0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80019c4:	4413      	add	r3, r2
 80019c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80019d6:	4623      	mov	r3, r4
 80019d8:	0a18      	lsrs	r0, r3, #8
 80019da:	462b      	mov	r3, r5
 80019dc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019e0:	462b      	mov	r3, r5
 80019e2:	1219      	asrs	r1, r3, #8
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <bme280_update+0x374>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	891b      	ldrh	r3, [r3, #8]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	17da      	asrs	r2, r3, #31
 80019f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80019f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001a00:	464a      	mov	r2, r9
 8001a02:	fb02 f203 	mul.w	r2, r2, r3
 8001a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a0a:	4644      	mov	r4, r8
 8001a0c:	fb04 f303 	mul.w	r3, r4, r3
 8001a10:	441a      	add	r2, r3
 8001a12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a16:	4644      	mov	r4, r8
 8001a18:	fba3 4304 	umull	r4, r3, r3, r4
 8001a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a20:	4623      	mov	r3, r4
 8001a22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a2a:	18d3      	adds	r3, r2, r3
 8001a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001a3c:	464c      	mov	r4, r9
 8001a3e:	0323      	lsls	r3, r4, #12
 8001a40:	4644      	mov	r4, r8
 8001a42:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001a46:	4644      	mov	r4, r8
 8001a48:	0322      	lsls	r2, r4, #12
 8001a4a:	1884      	adds	r4, r0, r2
 8001a4c:	633c      	str	r4, [r7, #48]	; 0x30
 8001a4e:	eb41 0303 	adc.w	r3, r1, r3
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
 8001a54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters.dig_P1) >> 33;
 8001a5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a60:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a64:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001a68:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <bme280_update+0x374>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	88db      	ldrh	r3, [r3, #6]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2200      	movs	r2, #0
 8001a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001a80:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001a84:	462b      	mov	r3, r5
 8001a86:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	fb02 f203 	mul.w	r2, r2, r3
 8001a90:	464b      	mov	r3, r9
 8001a92:	4621      	mov	r1, r4
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	fba2 1201 	umull	r1, r2, r2, r1
 8001aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001aac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	104a      	asrs	r2, r1, #1
 8001ac6:	e003      	b.n	8001ad0 <bme280_update+0x37c>
 8001ac8:	20000200 	.word	0x20000200
 8001acc:	42c80000 	.word	0x42c80000
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	17cb      	asrs	r3, r1, #31
 8001ad4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8001ad8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001adc:	4313      	orrs	r3, r2
 8001ade:	d106      	bne.n	8001aee <bme280_update+0x39a>
		{
			P = 0;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 8001aec:	e148      	b.n	8001d80 <bme280_update+0x62c>
		}else
		{
		P = 1048576 - adc_P;
 8001aee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001af2:	2100      	movs	r1, #0
 8001af4:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 8001af8:	62b8      	str	r0, [r7, #40]	; 0x28
 8001afa:	eb61 0303 	sbc.w	r3, r1, r3
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b00:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b04:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001b08:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	07d9      	lsls	r1, r3, #31
 8001b16:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001b1a:	07d0      	lsls	r0, r2, #31
 8001b1c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b20:	1a84      	subs	r4, r0, r2
 8001b22:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001b26:	eb61 0303 	sbc.w	r3, r1, r3
 8001b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b2e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	1891      	adds	r1, r2, r2
 8001b38:	6239      	str	r1, [r7, #32]
 8001b3a:	415b      	adcs	r3, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b42:	4621      	mov	r1, r4
 8001b44:	1851      	adds	r1, r2, r1
 8001b46:	61b9      	str	r1, [r7, #24]
 8001b48:	4629      	mov	r1, r5
 8001b4a:	414b      	adcs	r3, r1
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	018b      	lsls	r3, r1, #6
 8001b5e:	4641      	mov	r1, r8
 8001b60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b64:	4641      	mov	r1, r8
 8001b66:	018a      	lsls	r2, r1, #6
 8001b68:	4641      	mov	r1, r8
 8001b6a:	1889      	adds	r1, r1, r2
 8001b6c:	6139      	str	r1, [r7, #16]
 8001b6e:	4649      	mov	r1, r9
 8001b70:	eb43 0101 	adc.w	r1, r3, r1
 8001b74:	6179      	str	r1, [r7, #20]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b82:	4649      	mov	r1, r9
 8001b84:	008b      	lsls	r3, r1, #2
 8001b86:	4641      	mov	r1, r8
 8001b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	008a      	lsls	r2, r1, #2
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	4622      	mov	r2, r4
 8001b98:	189b      	adds	r3, r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	462a      	mov	r2, r5
 8001ba0:	eb42 0303 	adc.w	r3, r2, r3
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	008b      	lsls	r3, r1, #2
 8001bb6:	4641      	mov	r1, r8
 8001bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	008a      	lsls	r2, r1, #2
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	189b      	adds	r3, r3, r2
 8001bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bce:	462b      	mov	r3, r5
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	eb42 0303 	adc.w	r3, r2, r3
 8001bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001be2:	f7ff f97f 	bl	8000ee4 <__aeabi_ldivmod>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters.dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001bee:	4bb6      	ldr	r3, [pc, #728]	; (8001ec8 <bme280_update+0x774>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	8adb      	ldrh	r3, [r3, #22]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	17da      	asrs	r2, r3, #31
 8001bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bfc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001bfe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	0b50      	lsrs	r0, r2, #13
 8001c0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c10:	1359      	asrs	r1, r3, #13
 8001c12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c16:	462b      	mov	r3, r5
 8001c18:	fb00 f203 	mul.w	r2, r0, r3
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	fb03 f301 	mul.w	r3, r3, r1
 8001c22:	4413      	add	r3, r2
 8001c24:	4622      	mov	r2, r4
 8001c26:	fba2 1200 	umull	r1, r2, r2, r0
 8001c2a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001c2e:	460a      	mov	r2, r1
 8001c30:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001c34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001c38:	4413      	add	r3, r2
 8001c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c3e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0b50      	lsrs	r0, r2, #13
 8001c4c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c50:	1359      	asrs	r1, r3, #13
 8001c52:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001c56:	462b      	mov	r3, r5
 8001c58:	fb00 f203 	mul.w	r2, r0, r3
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	fb03 f301 	mul.w	r3, r3, r1
 8001c62:	4413      	add	r3, r2
 8001c64:	4622      	mov	r2, r4
 8001c66:	fba2 1200 	umull	r1, r2, r2, r0
 8001c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c6e:	460a      	mov	r2, r1
 8001c70:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001c74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c78:	4413      	add	r3, r2
 8001c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	0e4a      	lsrs	r2, r1, #25
 8001c8e:	4629      	mov	r1, r5
 8001c90:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001c94:	4629      	mov	r1, r5
 8001c96:	164b      	asrs	r3, r1, #25
 8001c98:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters.dig_P8) * P) >> 19;
 8001c9c:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <bme280_update+0x774>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	8a9b      	ldrh	r3, [r3, #20]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	17da      	asrs	r2, r3, #31
 8001ca8:	673b      	str	r3, [r7, #112]	; 0x70
 8001caa:	677a      	str	r2, [r7, #116]	; 0x74
 8001cac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001cb0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	fb02 f203 	mul.w	r2, r2, r3
 8001cba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001cca:	4621      	mov	r1, r4
 8001ccc:	fba2 1201 	umull	r1, r2, r2, r1
 8001cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001cda:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001cde:	4413      	add	r3, r2
 8001ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	0cca      	lsrs	r2, r1, #19
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	14cb      	asrs	r3, r1, #19
 8001cfe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters.dig_P7) << 4);
 8001d02:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001d06:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001d0a:	1884      	adds	r4, r0, r2
 8001d0c:	66bc      	str	r4, [r7, #104]	; 0x68
 8001d0e:	eb41 0303 	adc.w	r3, r1, r3
 8001d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d14:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d18:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	1889      	adds	r1, r1, r2
 8001d20:	6639      	str	r1, [r7, #96]	; 0x60
 8001d22:	4629      	mov	r1, r5
 8001d24:	eb43 0101 	adc.w	r1, r3, r1
 8001d28:	6679      	str	r1, [r7, #100]	; 0x64
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d36:	4623      	mov	r3, r4
 8001d38:	0a18      	lsrs	r0, r3, #8
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d40:	462b      	mov	r3, r5
 8001d42:	1219      	asrs	r1, r3, #8
 8001d44:	4b60      	ldr	r3, [pc, #384]	; (8001ec8 <bme280_update+0x774>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	8a5b      	ldrh	r3, [r3, #18]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	17da      	asrs	r2, r3, #31
 8001d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8001d60:	464c      	mov	r4, r9
 8001d62:	0123      	lsls	r3, r4, #4
 8001d64:	4644      	mov	r4, r8
 8001d66:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d6a:	4644      	mov	r4, r8
 8001d6c:	0122      	lsls	r2, r4, #4
 8001d6e:	1884      	adds	r4, r0, r2
 8001d70:	603c      	str	r4, [r7, #0]
 8001d72:	eb41 0303 	adc.w	r3, r1, r3
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d7c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 8001d80:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001d84:	f7ff f870 	bl	8000e68 <__aeabi_l2f>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbfc 	bl	8000588 <__aeabi_f2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <bme280_update+0x778>)
 8001d96:	f7fe fd79 	bl	800088c <__aeabi_ddiv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <bme280_update+0x77c>)
 8001da8:	f7fe fd70 	bl	800088c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4945      	ldr	r1, [pc, #276]	; (8001ec8 <bme280_update+0x774>)
 8001db2:	680c      	ldr	r4, [r1, #0]
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe ff36 	bl	8000c28 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	6363      	str	r3, [r4, #52]	; 0x34

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <bme280_update+0x774>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 8001dca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dce:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001dd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters.dig_H4) << 20) - (((int32_t)BME->parameters.dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters.dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters.dig_H2) + 8192) >> 14));
 8001dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001dda:	039b      	lsls	r3, r3, #14
 8001ddc:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <bme280_update+0x774>)
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	8bd2      	ldrh	r2, [r2, #30]
 8001de2:	b212      	sxth	r2, r2
 8001de4:	0512      	lsls	r2, r2, #20
 8001de6:	1a9a      	subs	r2, r3, r2
 8001de8:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <bme280_update+0x774>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	8c1b      	ldrh	r3, [r3, #32]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e00:	0bdb      	lsrs	r3, r3, #15
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <bme280_update+0x774>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8001e0a:	b252      	sxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001e12:	fb01 f202 	mul.w	r2, r1, r2
 8001e16:	0a92      	lsrs	r2, r2, #10
 8001e18:	492b      	ldr	r1, [pc, #172]	; (8001ec8 <bme280_update+0x774>)
 8001e1a:	6809      	ldr	r1, [r1, #0]
 8001e1c:	7f09      	ldrb	r1, [r1, #28]
 8001e1e:	b2c9      	uxtb	r1, r1
 8001e20:	4608      	mov	r0, r1
 8001e22:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001e26:	fb00 f101 	mul.w	r1, r0, r1
 8001e2a:	0ac9      	lsrs	r1, r1, #11
 8001e2c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001e30:	fb01 f202 	mul.w	r2, r1, r2
 8001e34:	0a92      	lsrs	r2, r2, #10
 8001e36:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001e3a:	4923      	ldr	r1, [pc, #140]	; (8001ec8 <bme280_update+0x774>)
 8001e3c:	6809      	ldr	r1, [r1, #0]
 8001e3e:	8b49      	ldrh	r1, [r1, #26]
 8001e40:	b209      	sxth	r1, r1
 8001e42:	fb01 f202 	mul.w	r2, r1, r2
 8001e46:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e4a:	0b92      	lsrs	r2, r2, #14
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters.dig_H1)) >> 4));
 8001e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e58:	0bdb      	lsrs	r3, r3, #15
 8001e5a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001e5e:	0bd2      	lsrs	r2, r2, #15
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	09db      	lsrs	r3, r3, #7
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <bme280_update+0x774>)
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	7e12      	ldrb	r2, [r2, #24]
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001e7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e82:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001e86:	bf28      	it	cs
 8001e88:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 8001e8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e94:	0b1b      	lsrs	r3, r3, #12
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <bme280_update+0x774>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001ed4 <bme280_update+0x780>
 8001ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eaa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		//get altitude
		bme280_get_altitude();
 8001eae:	f7ff fa7b 	bl	80013a8 <bme280_get_altitude>
		BME->isUpdated = 0;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <bme280_update+0x774>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}

}
 8001ebc:	bf00      	nop
 8001ebe:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec8:	20000200 	.word	0x20000200
 8001ecc:	40700000 	.word	0x40700000
 8001ed0:	40590000 	.word	0x40590000
 8001ed4:	44800000 	.word	0x44800000

08001ed8 <bmi088_init>:
	if(retVal != HAL_OK)
		Error_Handler();
}

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	quaternionSet_zero();
 8001ee2:	f000 fe5d 	bl	8002ba0 <quaternionSet_zero>
	HAL_StatusTypeDef retVal = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
	bmi_I2C = I2C_;
 8001eea:	4ab9      	ldr	r2, [pc, #740]	; (80021d0 <bmi088_init+0x2f8>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8001ef0:	4ab8      	ldr	r2, [pc, #736]	; (80021d4 <bmi088_init+0x2fc>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 8001ef6:	4bb7      	ldr	r3, [pc, #732]	; (80021d4 <bmi088_init+0x2fc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 8001efe:	4bb5      	ldr	r3, [pc, #724]	; (80021d4 <bmi088_init+0x2fc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	749a      	strb	r2, [r3, #18]
	HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 50);
	while(1);
#endif
	uint8_t buf[1];

	HAL_Delay(10);
 8001f06:	200a      	movs	r0, #10
 8001f08:	f001 fb0c 	bl	8003524 <HAL_Delay>

	buf[0] = 0x01;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // power save ultra
 8001f10:	4baf      	ldr	r3, [pc, #700]	; (80021d0 <bmi088_init+0x2f8>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	2314      	movs	r3, #20
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2301      	movs	r3, #1
 8001f24:	227c      	movs	r2, #124	; 0x7c
 8001f26:	2130      	movs	r1, #48	; 0x30
 8001f28:	f002 fef8 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // accel disable
 8001f3a:	4ba5      	ldr	r3, [pc, #660]	; (80021d0 <bmi088_init+0x2f8>)
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	2314      	movs	r3, #20
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	2301      	movs	r3, #1
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	227d      	movs	r2, #125	; 0x7d
 8001f50:	2130      	movs	r1, #48	; 0x30
 8001f52:	f002 fee3 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8001f60:	2014      	movs	r0, #20
 8001f62:	f001 fadf 	bl	8003524 <HAL_Delay>

	buf[0] = ACC_RESET;
 8001f66:	23b6      	movs	r3, #182	; 0xb6
 8001f68:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel reset
 8001f6a:	4b99      	ldr	r3, [pc, #612]	; (80021d0 <bmi088_init+0x2f8>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	2314      	movs	r3, #20
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	2301      	movs	r3, #1
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	227e      	movs	r2, #126	; 0x7e
 8001f80:	2130      	movs	r1, #48	; 0x30
 8001f82:	f002 fecb 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <bmi088_init+0xc4>
 8001f96:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <bmi088_init+0x300>)
 8001f98:	2274      	movs	r2, #116	; 0x74
 8001f9a:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8001f9c:	2028      	movs	r0, #40	; 0x28
 8001f9e:	f001 fac1 	bl	8003524 <HAL_Delay>

	buf[0] = FIFO_RESET;
 8001fa2:	23b0      	movs	r3, #176	; 0xb0
 8001fa4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // FIFO reset
 8001fa6:	4b8a      	ldr	r3, [pc, #552]	; (80021d0 <bmi088_init+0x2f8>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	2314      	movs	r3, #20
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	227e      	movs	r2, #126	; 0x7e
 8001fbc:	2130      	movs	r1, #48	; 0x30
 8001fbe:	f002 fead 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <bmi088_init+0x100>
 8001fd2:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <bmi088_init+0x300>)
 8001fd4:	2279      	movs	r2, #121	; 0x79
 8001fd6:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8001fd8:	2028      	movs	r0, #40	; 0x28
 8001fda:	f001 faa3 	bl	8003524 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8001fde:	23b6      	movs	r3, #182	; 0xb6
 8001fe0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro reset
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <bmi088_init+0x2f8>)
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	2314      	movs	r3, #20
 8001fe8:	9302      	str	r3, [sp, #8]
 8001fea:	2301      	movs	r3, #1
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2214      	movs	r2, #20
 8001ff8:	21d0      	movs	r1, #208	; 0xd0
 8001ffa:	f002 fe8f 	bl	8004d1c <HAL_I2C_Mem_Write>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	4313      	orrs	r3, r2
 8002006:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <bmi088_init+0x13c>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <bmi088_init+0x300>)
 8002010:	227e      	movs	r2, #126	; 0x7e
 8002012:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002014:	2028      	movs	r0, #40	; 0x28
 8002016:	f001 fa85 	bl	8003524 <HAL_Delay>

	HAL_I2C_DeInit(bmi_I2C);  // I2C arayüzünü de-initialize edin
 800201a:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <bmi088_init+0x2f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fe4c 	bl	8004cbc <HAL_I2C_DeInit>
	HAL_I2C_Init(bmi_I2C);    // I2C arayüzünü yeniden initialize edin
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <bmi088_init+0x2f8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f002 fd03 	bl	8004a34 <HAL_I2C_Init>
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
	HAL_Delay(40);
*/

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 800202e:	4b69      	ldr	r3, [pc, #420]	; (80021d4 <bmi088_init+0x2fc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	7e5b      	ldrb	r3, [r3, #25]
 8002034:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro range config
 8002036:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <bmi088_init+0x2f8>)
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	2314      	movs	r3, #20
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	2301      	movs	r3, #1
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	220f      	movs	r2, #15
 800204c:	21d0      	movs	r1, #208	; 0xd0
 800204e:	f002 fe65 	bl	8004d1c <HAL_I2C_Mem_Write>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4313      	orrs	r3, r2
 800205a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <bmi088_init+0x190>
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <bmi088_init+0x300>)
 8002064:	2292      	movs	r2, #146	; 0x92
 8002066:	601a      	str	r2, [r3, #0]


	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 8002068:	4b5a      	ldr	r3, [pc, #360]	; (80021d4 <bmi088_init+0x2fc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
 800206e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002070:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <bmi088_init+0x2f8>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	2314      	movs	r3, #20
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	2301      	movs	r3, #1
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	2210      	movs	r2, #16
 8002086:	21d0      	movs	r1, #208	; 0xd0
 8002088:	f002 fe48 	bl	8004d1c <HAL_I2C_Mem_Write>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4313      	orrs	r3, r2
 8002094:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <bmi088_init+0x1ca>
 800209c:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <bmi088_init+0x300>)
 800209e:	2297      	movs	r2, #151	; 0x97
 80020a0:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <bmi088_init+0x2fc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	7ddb      	ldrb	r3, [r3, #23]
 80020a8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <bmi088_init+0x2f8>)
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	2314      	movs	r3, #20
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	2301      	movs	r3, #1
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2301      	movs	r3, #1
 80020be:	2211      	movs	r2, #17
 80020c0:	21d0      	movs	r1, #208	; 0xd0
 80020c2:	f002 fe2b 	bl	8004d1c <HAL_I2C_Mem_Write>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <bmi088_init+0x204>
 80020d6:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <bmi088_init+0x300>)
 80020d8:	229b      	movs	r2, #155	; 0x9b
 80020da:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 80020dc:	2028      	movs	r0, #40	; 0x28
 80020de:	f001 fa21 	bl	8003524 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <bmi088_init+0x2f8>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	2314      	movs	r3, #20
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	2301      	movs	r3, #1
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	2215      	movs	r2, #21
 80020fc:	21d0      	movs	r1, #208	; 0xd0
 80020fe:	f002 fe0d 	bl	8004d1c <HAL_I2C_Mem_Write>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4313      	orrs	r3, r2
 800210a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <bmi088_init+0x240>
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <bmi088_init+0x300>)
 8002114:	22a1      	movs	r2, #161	; 0xa1
 8002116:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 8002118:	2301      	movs	r3, #1
 800211a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <bmi088_init+0x2f8>)
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	2314      	movs	r3, #20
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2301      	movs	r3, #1
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	2216      	movs	r2, #22
 8002132:	21d0      	movs	r1, #208	; 0xd0
 8002134:	f002 fdf2 	bl	8004d1c <HAL_I2C_Mem_Write>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	4313      	orrs	r3, r2
 8002140:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <bmi088_init+0x276>
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <bmi088_init+0x300>)
 800214a:	22a5      	movs	r2, #165	; 0xa5
 800214c:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 800214e:	2301      	movs	r3, #1
 8002150:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <bmi088_init+0x2f8>)
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	2314      	movs	r3, #20
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2301      	movs	r3, #1
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	2218      	movs	r2, #24
 8002168:	21d0      	movs	r1, #208	; 0xd0
 800216a:	f002 fdd7 	bl	8004d1c <HAL_I2C_Mem_Write>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	4313      	orrs	r3, r2
 8002176:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <bmi088_init+0x2ac>
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <bmi088_init+0x300>)
 8002180:	22a9      	movs	r2, #169	; 0xa9
 8002182:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002184:	2304      	movs	r3, #4
 8002186:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <bmi088_init+0x2f8>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	2314      	movs	r3, #20
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	227d      	movs	r2, #125	; 0x7d
 800219e:	2130      	movs	r1, #48	; 0x30
 80021a0:	f002 fdbc 	bl	8004d1c <HAL_I2C_Mem_Write>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <bmi088_init+0x2e2>
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <bmi088_init+0x300>)
 80021b6:	22ae      	movs	r2, #174	; 0xae
 80021b8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80021ba:	2008      	movs	r0, #8
 80021bc:	f001 f9b2 	bl	8003524 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <bmi088_init+0x2fc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	7cdb      	ldrb	r3, [r3, #19]
 80021c6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80021c8:	4b01      	ldr	r3, [pc, #4]	; (80021d0 <bmi088_init+0x2f8>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	2314      	movs	r3, #20
 80021ce:	e005      	b.n	80021dc <bmi088_init+0x304>
 80021d0:	20000204 	.word	0x20000204
 80021d4:	20000208 	.word	0x20000208
 80021d8:	2000020c 	.word	0x2000020c
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	227c      	movs	r2, #124	; 0x7c
 80021ec:	2130      	movs	r1, #48	; 0x30
 80021ee:	f002 fd95 	bl	8004d1c <HAL_I2C_Mem_Write>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <bmi088_init+0x330>
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <bmi088_init+0x424>)
 8002204:	22b3      	movs	r2, #179	; 0xb3
 8002206:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002208:	2008      	movs	r0, #8
 800220a:	f001 f98b 	bl	8003524 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <bmi088_init+0x428>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	7d5b      	ldrb	r3, [r3, #21]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	b25a      	sxtb	r2, r3
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <bmi088_init+0x428>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	7d9b      	ldrb	r3, [r3, #22]
 800221e:	b25b      	sxtb	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b25b      	sxtb	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <bmi088_init+0x42c>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	2314      	movs	r3, #20
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	2301      	movs	r3, #1
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2301      	movs	r3, #1
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	2130      	movs	r1, #48	; 0x30
 8002240:	f002 fd6c 	bl	8004d1c <HAL_I2C_Mem_Write>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	4313      	orrs	r3, r2
 800224c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <bmi088_init+0x382>
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <bmi088_init+0x424>)
 8002256:	22b8      	movs	r2, #184	; 0xb8
 8002258:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <bmi088_init+0x428>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7d1b      	ldrb	r3, [r3, #20]
 8002260:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <bmi088_init+0x42c>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	2314      	movs	r3, #20
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2301      	movs	r3, #1
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2301      	movs	r3, #1
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2130      	movs	r1, #48	; 0x30
 800227a:	f002 fd4f 	bl	8004d1c <HAL_I2C_Mem_Write>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	4313      	orrs	r3, r2
 8002286:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <bmi088_init+0x3bc>
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <bmi088_init+0x424>)
 8002290:	22bc      	movs	r2, #188	; 0xbc
 8002292:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002294:	230a      	movs	r3, #10
 8002296:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <bmi088_init+0x42c>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	2314      	movs	r3, #20
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	2301      	movs	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	2253      	movs	r2, #83	; 0x53
 80022ae:	2130      	movs	r1, #48	; 0x30
 80022b0:	f002 fd34 	bl	8004d1c <HAL_I2C_Mem_Write>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80022be:	2304      	movs	r3, #4
 80022c0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <bmi088_init+0x42c>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	2314      	movs	r3, #20
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2301      	movs	r3, #1
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2301      	movs	r3, #1
 80022d6:	2258      	movs	r2, #88	; 0x58
 80022d8:	2130      	movs	r1, #48	; 0x30
 80022da:	f002 fd1f 	bl	8004d1c <HAL_I2C_Mem_Write>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022e8:	2009      	movs	r0, #9
 80022ea:	f001 fccc 	bl	8003c86 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022ee:	200a      	movs	r0, #10
 80022f0:	f001 fcc9 	bl	8003c86 <HAL_NVIC_EnableIRQ>
	//if(retVal != HAL_OK)

		//Error_Handler();

}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000020c 	.word	0x2000020c
 8002300:	20000208 	.word	0x20000208
 8002304:	20000204 	.word	0x20000204

08002308 <bmi088_getAccelDatas_INT>:
	}
}


void bmi088_getAccelDatas_INT()
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <bmi088_getAccelDatas_INT+0x18>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	749a      	strb	r2, [r3, #18]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000208 	.word	0x20000208

08002324 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <bmi088_getGyroDatas_INT+0x18>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	745a      	strb	r2, [r3, #17]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000208 	.word	0x20000208

08002340 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	460b      	mov	r3, r1
 800234e:	71bb      	strb	r3, [r7, #6]
 8002350:	4613      	mov	r3, r2
 8002352:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 800235c:	797b      	ldrb	r3, [r7, #5]
 800235e:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e00c      	b.n	8002380 <send_command+0x40>
        command[3 + i] = data[i];
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	441a      	add	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3303      	adds	r3, #3
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	3318      	adds	r3, #24
 8002374:	443b      	add	r3, r7
 8002376:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b08      	cmp	r3, #8
 8002384:	ddef      	ble.n	8002366 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 8002386:	f107 0108 	add.w	r1, r7, #8
 800238a:	2364      	movs	r3, #100	; 0x64
 800238c:	220c      	movs	r2, #12
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <send_command+0x5c>)
 8002390:	f004 f9a4 	bl	80066dc <HAL_UART_Transmit>
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000300 	.word	0x20000300

080023a0 <lora_configure>:

void lora_configure(lorastruct *config)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2208      	movs	r2, #8
 80023d6:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2207      	movs	r2, #7
 80023dc:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[0];
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[1];
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	79db      	ldrb	r3, [r3, #7]
 80023e8:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7a5b      	ldrb	r3, [r3, #9]
 80023ee:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7c5b      	ldrb	r3, [r3, #17]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	4313      	orrs	r3, r2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	789a      	ldrb	r2, [r3, #2]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7a9b      	ldrb	r3, [r3, #10]
 800240e:	4313      	orrs	r3, r2
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	78db      	ldrb	r3, [r3, #3]
 8002416:	4313      	orrs	r3, r2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7a1b      	ldrb	r3, [r3, #8]
 8002420:	2b53      	cmp	r3, #83	; 0x53
 8002422:	d902      	bls.n	800242a <lora_configure+0x8a>
    	config->channel = 83;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2253      	movs	r2, #83	; 0x53
 8002428:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7a1b      	ldrb	r3, [r3, #8]
 800242e:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7ada      	ldrb	r2, [r3, #11]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7b1b      	ldrb	r3, [r3, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	b2da      	uxtb	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7b5b      	ldrb	r3, [r3, #13]
 8002440:	4313      	orrs	r3, r2
 8002442:	b2da      	uxtb	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7b9b      	ldrb	r3, [r3, #14]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7bdb      	ldrb	r3, [r3, #15]
 8002450:	4313      	orrs	r3, r2
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7c1b      	ldrb	r3, [r3, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	b2db      	uxtb	r3, r3
 800245c:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[0];
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[1];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	795b      	ldrb	r3, [r3, #5]
 8002468:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	2209      	movs	r2, #9
 8002470:	2100      	movs	r1, #0
 8002472:	20c0      	movs	r0, #192	; 0xc0
 8002474:	f7ff ff64 	bl	8002340 <send_command>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002486:	f000 ffdb 	bl	8003440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800248a:	f000 f869 	bl	8002560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248e:	f000 fa43 	bl	8002918 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002492:	f000 f931 	bl	80026f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002496:	f000 f95d 	bl	8002754 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800249a:	f000 f9b3 	bl	8002804 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800249e:	f000 f9db 	bl	8002858 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80024a2:	f000 fa03 	bl	80028ac <MX_DMA_Init>
  MX_ADC1_Init();
 80024a6:	f000 f8c7 	bl	8002638 <MX_ADC1_Init>
  MX_UART4_Init();
 80024aa:	f000 f981 	bl	80027b0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80024ae:	2009      	movs	r0, #9
 80024b0:	f001 fbf7 	bl	8003ca2 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80024b4:	200a      	movs	r0, #10
 80024b6:	f001 fbf4 	bl	8003ca2 <HAL_NVIC_DisableIRQ>


  bmiBegin();
 80024ba:	f000 facf 	bl	8002a5c <bmiBegin>
  bme280_init(&BME280_sensor, &hi2c1, BME280_MODE_NORMAL, BME280_OS_8, BME280_FILTER_8);
 80024be:	2303      	movs	r3, #3
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2304      	movs	r3, #4
 80024c4:	2203      	movs	r2, #3
 80024c6:	491e      	ldr	r1, [pc, #120]	; (8002540 <main+0xc0>)
 80024c8:	481e      	ldr	r0, [pc, #120]	; (8002544 <main+0xc4>)
 80024ca:	f7fe ffbf 	bl	800144c <bme280_init>
  loraBegin();
 80024ce:	f000 fae7 	bl	8002aa0 <loraBegin>
  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 80024d2:	2364      	movs	r3, #100	; 0x64
 80024d4:	2213      	movs	r2, #19
 80024d6:	491c      	ldr	r1, [pc, #112]	; (8002548 <main+0xc8>)
 80024d8:	481c      	ldr	r0, [pc, #112]	; (800254c <main+0xcc>)
 80024da:	f004 f8ff 	bl	80066dc <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
  HAL_UART_DeInit(&huart4);
 80024de:	481c      	ldr	r0, [pc, #112]	; (8002550 <main+0xd0>)
 80024e0:	f004 f8cd 	bl	800667e <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 80024e4:	4819      	ldr	r0, [pc, #100]	; (800254c <main+0xcc>)
 80024e6:	f004 f8ca 	bl	800667e <HAL_UART_DeInit>
  HAL_Delay(10);
 80024ea:	200a      	movs	r0, #10
 80024ec:	f001 f81a 	bl	8003524 <HAL_Delay>
  huart4.Init.BaudRate = 115200;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <main+0xd0>)
 80024f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f6:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <main+0xcc>)
 80024fa:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80024fe:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);
 8002500:	4813      	ldr	r0, [pc, #76]	; (8002550 <main+0xd0>)
 8002502:	f004 f86f 	bl	80065e4 <HAL_UART_Init>
  HAL_UART_Init(&huart2);
 8002506:	4811      	ldr	r0, [pc, #68]	; (800254c <main+0xcc>)
 8002508:	f004 f86c 	bl	80065e4 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <main+0xd4>)
 800250e:	f001 fbe3 	bl	8003cd8 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 8002512:	4811      	ldr	r0, [pc, #68]	; (8002558 <main+0xd8>)
 8002514:	f001 fbe0 	bl	8003cd8 <HAL_DMA_Init>
   // Timer'ı başlat

  //Bu makro gps verisini gözlemlemek içindir.
  VIEW_GPS()
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <main+0xcc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b20      	cmp	r3, #32
 8002524:	d1f8      	bne.n	8002518 <main+0x98>
 8002526:	1d39      	adds	r1, r7, #4
 8002528:	2364      	movs	r3, #100	; 0x64
 800252a:	2201      	movs	r2, #1
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <main+0xcc>)
 800252e:	f004 f967 	bl	8006800 <HAL_UART_Receive>
 8002532:	1d39      	adds	r1, r7, #4
 8002534:	2364      	movs	r3, #100	; 0x64
 8002536:	2201      	movs	r2, #1
 8002538:	4808      	ldr	r0, [pc, #32]	; (800255c <main+0xdc>)
 800253a:	f004 f8cf 	bl	80066dc <HAL_UART_Transmit>
 800253e:	e7eb      	b.n	8002518 <main+0x98>
 8002540:	20000258 	.word	0x20000258
 8002544:	2000048c 	.word	0x2000048c
 8002548:	0800cf38 	.word	0x0800cf38
 800254c:	20000388 	.word	0x20000388
 8002550:	20000300 	.word	0x20000300
 8002554:	200003cc 	.word	0x200003cc
 8002558:	2000042c 	.word	0x2000042c
 800255c:	20000344 	.word	0x20000344

08002560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b094      	sub	sp, #80	; 0x50
 8002564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	2234      	movs	r2, #52	; 0x34
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f005 f93c 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <SystemClock_Config+0xd0>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <SystemClock_Config+0xd0>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b26      	ldr	r3, [pc, #152]	; (8002630 <SystemClock_Config+0xd0>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025a0:	2300      	movs	r3, #0
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <SystemClock_Config+0xd4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025ac:	4a21      	ldr	r2, [pc, #132]	; (8002634 <SystemClock_Config+0xd4>)
 80025ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <SystemClock_Config+0xd4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ca:	2302      	movs	r3, #2
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025d4:	2304      	movs	r3, #4
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025dc:	2302      	movs	r3, #2
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025e0:	2302      	movs	r3, #2
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 fd5b 	bl	80060a8 <HAL_RCC_OscConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80025f8:	f000 faaa 	bl	8002b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fc:	230f      	movs	r3, #15
 80025fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002600:	2302      	movs	r3, #2
 8002602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	2102      	movs	r1, #2
 8002618:	4618      	mov	r0, r3
 800261a:	f003 f9fb 	bl	8005a14 <HAL_RCC_ClockConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002624:	f000 fa94 	bl	8002b50 <Error_Handler>
  }
}
 8002628:	bf00      	nop
 800262a:	3750      	adds	r7, #80	; 0x50
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000

08002638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <MX_ADC1_Init+0xb4>)
 800264c:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <MX_ADC1_Init+0xb8>)
 800264e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <MX_ADC1_Init+0xb4>)
 800265e:	2201      	movs	r2, #1
 8002660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002664:	2201      	movs	r2, #1
 8002666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <MX_ADC1_Init+0xb4>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002672:	2200      	movs	r2, #0
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <MX_ADC1_Init+0xbc>)
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_ADC1_Init+0xb4>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002684:	2202      	movs	r2, #2
 8002686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_ADC1_Init+0xb4>)
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002692:	2201      	movs	r2, #1
 8002694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002696:	4815      	ldr	r0, [pc, #84]	; (80026ec <MX_ADC1_Init+0xb4>)
 8002698:	f000 ff68 	bl	800356c <HAL_ADC_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80026a2:	f000 fa55 	bl	8002b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80026a6:	230c      	movs	r3, #12
 80026a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80026ae:	2304      	movs	r3, #4
 80026b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b2:	463b      	mov	r3, r7
 80026b4:	4619      	mov	r1, r3
 80026b6:	480d      	ldr	r0, [pc, #52]	; (80026ec <MX_ADC1_Init+0xb4>)
 80026b8:	f000 ff9c 	bl	80035f4 <HAL_ADC_ConfigChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80026c2:	f000 fa45 	bl	8002b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80026c6:	230b      	movs	r3, #11
 80026c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80026ca:	2302      	movs	r3, #2
 80026cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ce:	463b      	mov	r3, r7
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <MX_ADC1_Init+0xb4>)
 80026d4:	f000 ff8e 	bl	80035f4 <HAL_ADC_ConfigChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80026de:	f000 fa37 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000210 	.word	0x20000210
 80026f0:	40012000 	.word	0x40012000
 80026f4:	0f000001 	.word	0x0f000001

080026f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_I2C1_Init+0x50>)
 80026fe:	4a13      	ldr	r2, [pc, #76]	; (800274c <MX_I2C1_Init+0x54>)
 8002700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_I2C1_Init+0x50>)
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_I2C1_Init+0x58>)
 8002706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_I2C1_Init+0x50>)
 8002716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <MX_I2C1_Init+0x50>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_I2C1_Init+0x50>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <MX_I2C1_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_I2C1_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <MX_I2C1_Init+0x50>)
 8002736:	f002 f97d 	bl	8004a34 <HAL_I2C_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002740:	f000 fa06 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000258 	.word	0x20000258
 800274c:	40005400 	.word	0x40005400
 8002750:	000186a0 	.word	0x000186a0

08002754 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <MX_I2C3_Init+0x50>)
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <MX_I2C3_Init+0x54>)
 800275c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <MX_I2C3_Init+0x50>)
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <MX_I2C3_Init+0x58>)
 8002762:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <MX_I2C3_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_I2C3_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_I2C3_Init+0x50>)
 8002772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002776:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <MX_I2C3_Init+0x50>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_I2C3_Init+0x50>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <MX_I2C3_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_I2C3_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002790:	4804      	ldr	r0, [pc, #16]	; (80027a4 <MX_I2C3_Init+0x50>)
 8002792:	f002 f94f 	bl	8004a34 <HAL_I2C_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800279c:	f000 f9d8 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200002ac 	.word	0x200002ac
 80027a8:	40005c00 	.word	0x40005c00
 80027ac:	000186a0 	.word	0x000186a0

080027b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_UART4_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_UART4_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_UART4_Init+0x4c>)
 80027bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_UART4_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_UART4_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_UART4_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_UART4_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_UART4_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_UART4_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_UART4_Init+0x4c>)
 80027e8:	f003 fefc 	bl	80065e4 <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027f2:	f000 f9ad 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000300 	.word	0x20000300
 8002800:	40004c00 	.word	0x40004c00

08002804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <MX_USART1_UART_Init+0x50>)
 800280c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_USART1_UART_Init+0x4c>)
 800283c:	f003 fed2 	bl	80065e4 <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002846:	f000 f983 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000344 	.word	0x20000344
 8002854:	40011000 	.word	0x40011000

08002858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <MX_USART2_UART_Init+0x50>)
 8002860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 8002864:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 800287e:	220c      	movs	r2, #12
 8002880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART2_UART_Init+0x4c>)
 8002890:	f003 fea8 	bl	80065e4 <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800289a:	f000 f959 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000388 	.word	0x20000388
 80028a8:	40004400 	.word	0x40004400

080028ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <MX_DMA_Init+0x68>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a16      	ldr	r2, [pc, #88]	; (8002914 <MX_DMA_Init+0x68>)
 80028bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <MX_DMA_Init+0x68>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_DMA_Init+0x68>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <MX_DMA_Init+0x68>)
 80028d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <MX_DMA_Init+0x68>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2010      	movs	r0, #16
 80028f0:	f001 f9ad 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028f4:	2010      	movs	r0, #16
 80028f6:	f001 f9c6 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2046      	movs	r0, #70	; 0x46
 8002900:	f001 f9a5 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002904:	2046      	movs	r0, #70	; 0x46
 8002906:	f001 f9be 	bl	8003c86 <HAL_NVIC_EnableIRQ>

}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a46      	ldr	r2, [pc, #280]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a3f      	ldr	r2, [pc, #252]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <MX_GPIO_Init+0x138>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <MX_GPIO_Init+0x138>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <MX_GPIO_Init+0x138>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <MX_GPIO_Init+0x138>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|Led_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80029a4:	482b      	ldr	r0, [pc, #172]	; (8002a54 <MX_GPIO_Init+0x13c>)
 80029a6:	f001 fff9 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80029b0:	4829      	ldr	r0, [pc, #164]	; (8002a58 <MX_GPIO_Init+0x140>)
 80029b2:	f001 fff3 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin Led_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|Led_Pin;
 80029b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4821      	ldr	r0, [pc, #132]	; (8002a54 <MX_GPIO_Init+0x13c>)
 80029d0:	f001 fd5c 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin;
 80029d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	481a      	ldr	r0, [pc, #104]	; (8002a58 <MX_GPIO_Init+0x140>)
 80029ee:	f001 fd4d 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 80029f2:	2318      	movs	r3, #24
 80029f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	4813      	ldr	r0, [pc, #76]	; (8002a54 <MX_GPIO_Init+0x13c>)
 8002a08:	f001 fd40 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480c      	ldr	r0, [pc, #48]	; (8002a54 <MX_GPIO_Init+0x13c>)
 8002a22:	f001 fd33 	bl	800448c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2102      	movs	r1, #2
 8002a2a:	2009      	movs	r0, #9
 8002a2c:	f001 f90f 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a30:	2009      	movs	r0, #9
 8002a32:	f001 f928 	bl	8003c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2102      	movs	r1, #2
 8002a3a:	200a      	movs	r0, #10
 8002a3c:	f001 f907 	bl	8003c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a40:	200a      	movs	r0, #10
 8002a42:	f001 f920 	bl	8003c86 <HAL_NVIC_EnableIRQ>

}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800

08002a5c <bmiBegin>:

/* USER CODE BEGIN 4 */
void bmiBegin()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <bmiBegin+0x3c>)
 8002a62:	2208      	movs	r2, #8
 8002a64:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <bmiBegin+0x3c>)
 8002a68:	2209      	movs	r2, #9
 8002a6a:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <bmiBegin+0x3c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <bmiBegin+0x3c>)
 8002a74:	2202      	movs	r2, #2
 8002a76:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <bmiBegin+0x3c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <bmiBegin+0x3c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <bmiBegin+0x3c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <bmiBegin+0x40>)
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <bmiBegin+0x3c>)
 8002a8e:	f7ff fa23 	bl	8001ed8 <bmi088_init>
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200004e0 	.word	0x200004e0
 8002a9c:	200002ac 	.word	0x200002ac

08002aa0 <loraBegin>:


void loraBegin()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aaa:	481a      	ldr	r0, [pc, #104]	; (8002b14 <loraBegin+0x74>)
 8002aac:	f001 ff76 	bl	800499c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ab6:	4817      	ldr	r0, [pc, #92]	; (8002b14 <loraBegin+0x74>)
 8002ab8:	f001 ff70 	bl	800499c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002abc:	2064      	movs	r0, #100	; 0x64
 8002abe:	f000 fd31 	bl	8003524 <HAL_Delay>
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <loraBegin+0x78>)
 8002ac4:	22e0      	movs	r2, #224	; 0xe0
 8002ac6:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <loraBegin+0x78>)
 8002aca:	2206      	movs	r2, #6
 8002acc:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <loraBegin+0x78>)
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <loraBegin+0x78>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <loraBegin+0x78>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <loraBegin+0x78>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	809a      	strh	r2, [r3, #4]
    e22_lora.channel = 25;
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <loraBegin+0x78>)
 8002ae8:	2219      	movs	r2, #25
 8002aea:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 8002aec:	480a      	ldr	r0, [pc, #40]	; (8002b18 <loraBegin+0x78>)
 8002aee:	f7ff fc57 	bl	80023a0 <lora_configure>
   		 HAL_UART_Transmit(&huart1, (uint8_t *) dat, 1, 100);
   		 HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
   	 }
    }
    */
    HAL_Delay(100);
 8002af2:	2064      	movs	r0, #100	; 0x64
 8002af4:	f000 fd16 	bl	8003524 <HAL_Delay>

	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8002af8:	2200      	movs	r2, #0
 8002afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <loraBegin+0x74>)
 8002b00:	f001 ff4c 	bl	800499c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b0a:	4802      	ldr	r0, [pc, #8]	; (8002b14 <loraBegin+0x74>)
 8002b0c:	f001 ff46 	bl	800499c <HAL_GPIO_WritePin>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40020800 	.word	0x40020800
 8002b18:	200005b8 	.word	0x200005b8

08002b1c <HAL_GPIO_EXTI_Callback>:
	  guc_->akim =   (float)adc1 * 3300 / 4096;
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d101      	bne.n	8002b30 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8002b2c:	f7ff fbfa 	bl	8002324 <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d106      	bne.n	8002b44 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 8002b36:	f7ff fbe7 	bl	8002308 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x30>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	4a02      	ldr	r2, [pc, #8]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x30>)
 8002b42:	6013      	str	r3, [r2, #0]
    }
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200005cc 	.word	0x200005cc

08002b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <Error_Handler+0x3c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	490d      	ldr	r1, [pc, #52]	; (8002b90 <Error_Handler+0x40>)
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <Error_Handler+0x44>)
 8002b5e:	f005 fccd 	bl	80084fc <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 8002b62:	480c      	ldr	r0, [pc, #48]	; (8002b94 <Error_Handler+0x44>)
 8002b64:	f7fd fb54 	bl	8000210 <strlen>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	23fa      	movs	r3, #250	; 0xfa
 8002b6e:	4909      	ldr	r1, [pc, #36]	; (8002b94 <Error_Handler+0x44>)
 8002b70:	4809      	ldr	r0, [pc, #36]	; (8002b98 <Error_Handler+0x48>)
 8002b72:	f003 fdb3 	bl	80066dc <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b76:	b672      	cpsid	i
}
 8002b78:	bf00      	nop

	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b7e:	4807      	ldr	r0, [pc, #28]	; (8002b9c <Error_Handler+0x4c>)
 8002b80:	f001 ff25 	bl	80049ce <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	f000 fccd 	bl	8003524 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002b8a:	e7f6      	b.n	8002b7a <Error_Handler+0x2a>
 8002b8c:	2000020c 	.word	0x2000020c
 8002b90:	0800cf4c 	.word	0x0800cf4c
 8002b94:	200005d0 	.word	0x200005d0
 8002b98:	20000344 	.word	0x20000344
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <quaternionSet_zero>:
  euler[0] = asin(2.0f * (q[0] * q[2] - q[3] * q[1])) * (180.0 / M_PI);
  euler[2] = atan2(2.0f * (q[0] * q[3] + q[1] * q[2]), 1.0f - 2.0f * (q[2] * q[2] + q[3] * q[3])) * (180.0 / M_PI);
}

void quaternionSet_zero(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
	q[0] = 1.0f;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <quaternionSet_zero+0x30>)
 8002ba6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002baa:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <quaternionSet_zero+0x30>)
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <quaternionSet_zero+0x30>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <quaternionSet_zero+0x30>)
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	200006cc 	.word	0x200006cc

08002bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_MspInit+0x4c>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <HAL_MspInit+0x4c>)
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_MspInit+0x4c>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_MspInit+0x4c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <HAL_MspInit+0x4c>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_MspInit+0x4c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_ADC_MspInit+0x7c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d127      	bne.n	8002c96 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_ADC_MspInit+0x80>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <HAL_ADC_MspInit+0x80>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_ADC_MspInit+0x80>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_ADC_MspInit+0x80>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_ADC_MspInit+0x80>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_ADC_MspInit+0x80>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8002c7e:	2306      	movs	r3, #6
 8002c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c82:	2303      	movs	r3, #3
 8002c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_ADC_MspInit+0x84>)
 8002c92:	f001 fbfb 	bl	800448c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40012000 	.word	0x40012000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020800 	.word	0x40020800

08002cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a42      	ldr	r2, [pc, #264]	; (8002dd4 <HAL_I2C_MspInit+0x128>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d12c      	bne.n	8002d28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a40      	ldr	r2, [pc, #256]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cea:	23c0      	movs	r3, #192	; 0xc0
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cee:	2312      	movs	r3, #18
 8002cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	4835      	ldr	r0, [pc, #212]	; (8002ddc <HAL_I2C_MspInit+0x130>)
 8002d06:	f001 fbc1 	bl	800448c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d26:	e050      	b.n	8002dca <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <HAL_I2C_MspInit+0x134>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d14b      	bne.n	8002dca <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d70:	2312      	movs	r3, #18
 8002d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	4619      	mov	r1, r3
 8002d86:	4817      	ldr	r0, [pc, #92]	; (8002de4 <HAL_I2C_MspInit+0x138>)
 8002d88:	f001 fb80 	bl	800448c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d92:	2312      	movs	r3, #18
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	4619      	mov	r1, r3
 8002da8:	480f      	ldr	r0, [pc, #60]	; (8002de8 <HAL_I2C_MspInit+0x13c>)
 8002daa:	f001 fb6f 	bl	800448c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_I2C_MspInit+0x12c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
}
 8002dca:	bf00      	nop
 8002dcc:	3730      	adds	r7, #48	; 0x30
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40005c00 	.word	0x40005c00
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020000 	.word	0x40020000

08002dec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_I2C_MspDeInit+0x64>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10e      	bne.n	8002e1c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_I2C_MspDeInit+0x68>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <HAL_I2C_MspDeInit+0x68>)
 8002e04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <HAL_I2C_MspDeInit+0x6c>)
 8002e0e:	f001 fcd1 	bl	80047b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	4810      	ldr	r0, [pc, #64]	; (8002e58 <HAL_I2C_MspDeInit+0x6c>)
 8002e16:	f001 fccd 	bl	80047b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002e1a:	e014      	b.n	8002e46 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_I2C_MspDeInit+0x70>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d10f      	bne.n	8002e46 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_I2C_MspDeInit+0x68>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_I2C_MspDeInit+0x68>)
 8002e2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e36:	480a      	ldr	r0, [pc, #40]	; (8002e60 <HAL_I2C_MspDeInit+0x74>)
 8002e38:	f001 fcbc 	bl	80047b4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8002e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e40:	4808      	ldr	r0, [pc, #32]	; (8002e64 <HAL_I2C_MspDeInit+0x78>)
 8002e42:	f001 fcb7 	bl	80047b4 <HAL_GPIO_DeInit>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40005400 	.word	0x40005400
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40005c00 	.word	0x40005c00
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020000 	.word	0x40020000

08002e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a81      	ldr	r2, [pc, #516]	; (800308c <HAL_UART_MspInit+0x224>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d12c      	bne.n	8002ee4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	4b80      	ldr	r3, [pc, #512]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a7f      	ldr	r2, [pc, #508]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	4b79      	ldr	r3, [pc, #484]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a78      	ldr	r2, [pc, #480]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	486d      	ldr	r0, [pc, #436]	; (8003094 <HAL_UART_MspInit+0x22c>)
 8002ede:	f001 fad5 	bl	800448c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee2:	e0cf      	b.n	8003084 <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <HAL_UART_MspInit+0x230>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d163      	bne.n	8002fb6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a66      	ldr	r2, [pc, #408]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002ef8:	f043 0310 	orr.w	r3, r3, #16
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	4b60      	ldr	r3, [pc, #384]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a5f      	ldr	r2, [pc, #380]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f38:	2307      	movs	r3, #7
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f40:	4619      	mov	r1, r3
 8002f42:	4854      	ldr	r0, [pc, #336]	; (8003094 <HAL_UART_MspInit+0x22c>)
 8002f44:	f001 faa2 	bl	800448c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f48:	4b54      	ldr	r3, [pc, #336]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f4a:	4a55      	ldr	r2, [pc, #340]	; (80030a0 <HAL_UART_MspInit+0x238>)
 8002f4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f4e:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f54:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5c:	4b4f      	ldr	r3, [pc, #316]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f62:	4b4e      	ldr	r3, [pc, #312]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f6a:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f7c:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f88:	4844      	ldr	r0, [pc, #272]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f8a:	f000 fea5 	bl	8003cd8 <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002f94:	f7ff fddc 	bl	8002b50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <HAL_UART_MspInit+0x234>)
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9e:	4a3f      	ldr	r2, [pc, #252]	; (800309c <HAL_UART_MspInit+0x234>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2025      	movs	r0, #37	; 0x25
 8002faa:	f000 fe50 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fae:	2025      	movs	r0, #37	; 0x25
 8002fb0:	f000 fe69 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8002fb4:	e066      	b.n	8003084 <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <HAL_UART_MspInit+0x23c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d161      	bne.n	8003084 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a31      	ldr	r2, [pc, #196]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6313      	str	r3, [r2, #48]	; 0x30
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_UART_MspInit+0x228>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003008:	2307      	movs	r3, #7
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	4820      	ldr	r0, [pc, #128]	; (8003094 <HAL_UART_MspInit+0x22c>)
 8003014:	f001 fa3a 	bl	800448c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_UART_MspInit+0x240>)
 800301a:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_UART_MspInit+0x244>)
 800301c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003024:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_UART_MspInit+0x240>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003038:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_UART_MspInit+0x240>)
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003048:	2200      	movs	r2, #0
 800304a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_UART_MspInit+0x240>)
 800304e:	2200      	movs	r2, #0
 8003050:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003054:	2200      	movs	r2, #0
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003058:	4813      	ldr	r0, [pc, #76]	; (80030a8 <HAL_UART_MspInit+0x240>)
 800305a:	f000 fe3d 	bl	8003cd8 <HAL_DMA_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8003064:	f7ff fd74 	bl	8002b50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <HAL_UART_MspInit+0x240>)
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_UART_MspInit+0x240>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2101      	movs	r1, #1
 8003078:	2026      	movs	r0, #38	; 0x26
 800307a:	f000 fde8 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800307e:	2026      	movs	r0, #38	; 0x26
 8003080:	f000 fe01 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8003084:	bf00      	nop
 8003086:	3738      	adds	r7, #56	; 0x38
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40004c00 	.word	0x40004c00
 8003090:	40023800 	.word	0x40023800
 8003094:	40020000 	.word	0x40020000
 8003098:	40011000 	.word	0x40011000
 800309c:	200003cc 	.word	0x200003cc
 80030a0:	400264b8 	.word	0x400264b8
 80030a4:	40004400 	.word	0x40004400
 80030a8:	2000042c 	.word	0x2000042c
 80030ac:	40026088 	.word	0x40026088

080030b0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_UART_MspDeInit+0x90>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10a      	bne.n	80030d8 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_UART_MspDeInit+0x94>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_UART_MspDeInit+0x94>)
 80030c8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80030ce:	2103      	movs	r1, #3
 80030d0:	481d      	ldr	r0, [pc, #116]	; (8003148 <HAL_UART_MspDeInit+0x98>)
 80030d2:	f001 fb6f 	bl	80047b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80030d6:	e02f      	b.n	8003138 <HAL_UART_MspDeInit+0x88>
  else if(huart->Instance==USART1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1b      	ldr	r2, [pc, #108]	; (800314c <HAL_UART_MspDeInit+0x9c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d113      	bne.n	800310a <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART1_CLK_DISABLE();
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_UART_MspDeInit+0x94>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_UART_MspDeInit+0x94>)
 80030e8:	f023 0310 	bic.w	r3, r3, #16
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80030ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030f2:	4815      	ldr	r0, [pc, #84]	; (8003148 <HAL_UART_MspDeInit+0x98>)
 80030f4:	f001 fb5e 	bl	80047b4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fe99 	bl	8003e34 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003102:	2025      	movs	r0, #37	; 0x25
 8003104:	f000 fdcd 	bl	8003ca2 <HAL_NVIC_DisableIRQ>
}
 8003108:	e016      	b.n	8003138 <HAL_UART_MspDeInit+0x88>
  else if(huart->Instance==USART2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_UART_MspDeInit+0xa0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d111      	bne.n	8003138 <HAL_UART_MspDeInit+0x88>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_UART_MspDeInit+0x94>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_UART_MspDeInit+0x94>)
 800311a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800311e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003120:	210c      	movs	r1, #12
 8003122:	4809      	ldr	r0, [pc, #36]	; (8003148 <HAL_UART_MspDeInit+0x98>)
 8003124:	f001 fb46 	bl	80047b4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fe81 	bl	8003e34 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003132:	2026      	movs	r0, #38	; 0x26
 8003134:	f000 fdb5 	bl	8003ca2 <HAL_NVIC_DisableIRQ>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40004c00 	.word	0x40004c00
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	40011000 	.word	0x40011000
 8003150:	40004400 	.word	0x40004400

08003154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <NMI_Handler+0x4>

0800315a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <HardFault_Handler+0x4>

08003160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <MemManage_Handler+0x4>

08003166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <BusFault_Handler+0x4>

0800316c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <UsageFault_Handler+0x4>

08003172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a0:	f000 f9a0 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80031ac:	2008      	movs	r0, #8
 80031ae:	f001 fc29 	bl	8004a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80031ba:	2010      	movs	r0, #16
 80031bc:	f001 fc22 	bl	8004a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA1_Stream5_IRQHandler+0x10>)
 80031ca:	f000 ff23 	bl	8004014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000042c 	.word	0x2000042c

080031d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <USART1_IRQHandler+0x10>)
 80031de:	f003 fbb1 	bl	8006944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000344 	.word	0x20000344

080031ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <USART2_IRQHandler+0x10>)
 80031f2:	f003 fba7 	bl	8006944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000388 	.word	0x20000388

08003200 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <DMA2_Stream7_IRQHandler+0x10>)
 8003206:	f000 ff05 	bl	8004014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200003cc 	.word	0x200003cc

08003214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
	return 1;
 8003218:	2301      	movs	r3, #1
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_kill>:

int _kill(int pid, int sig)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800322e:	f004 fab3 	bl	8007798 <__errno>
 8003232:	4603      	mov	r3, r0
 8003234:	2216      	movs	r2, #22
 8003236:	601a      	str	r2, [r3, #0]
	return -1;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <_exit>:

void _exit (int status)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ffe7 	bl	8003224 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003256:	e7fe      	b.n	8003256 <_exit+0x12>

08003258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	e00a      	b.n	8003280 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800326a:	f3af 8000 	nop.w
 800326e:	4601      	mov	r1, r0
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	60ba      	str	r2, [r7, #8]
 8003276:	b2ca      	uxtb	r2, r1
 8003278:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	429a      	cmp	r2, r3
 8003286:	dbf0      	blt.n	800326a <_read+0x12>
	}

return len;
 8003288:	687b      	ldr	r3, [r7, #4]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e009      	b.n	80032b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	60ba      	str	r2, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	dbf1      	blt.n	80032a4 <_write+0x12>
	}
	return len;
 80032c0:	687b      	ldr	r3, [r7, #4]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_close>:

int _close(int file)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
	return -1;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032f2:	605a      	str	r2, [r3, #4]
	return 0;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <_isatty>:

int _isatty(int file)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
	return 1;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	return 0;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <_sbrk+0x5c>)
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <_sbrk+0x60>)
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <_sbrk+0x64>)
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <_sbrk+0x68>)
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <_sbrk+0x64>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d207      	bcs.n	8003374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003364:	f004 fa18 	bl	8007798 <__errno>
 8003368:	4603      	mov	r3, r0
 800336a:	220c      	movs	r2, #12
 800336c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	e009      	b.n	8003388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <_sbrk+0x64>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <_sbrk+0x64>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	4a05      	ldr	r2, [pc, #20]	; (8003398 <_sbrk+0x64>)
 8003384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003386:	68fb      	ldr	r3, [r7, #12]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20020000 	.word	0x20020000
 8003394:	00000400 	.word	0x00000400
 8003398:	200006dc 	.word	0x200006dc
 800339c:	200006f8 	.word	0x200006f8

080033a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <SystemInit+0x20>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <SystemInit+0x20>)
 80033ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	g_GnssRx_Flag = true;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_UART_RxCpltCallback+0x20>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
	g_openFixedDataTransmition = true;
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_UART_RxCpltCallback+0x24>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200006e0 	.word	0x200006e0
 80033e8:	200006e1 	.word	0x200006e1

080033ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003424 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033f0:	480d      	ldr	r0, [pc, #52]	; (8003428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033f2:	490e      	ldr	r1, [pc, #56]	; (800342c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033f4:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f8:	e002      	b.n	8003400 <LoopCopyDataInit>

080033fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fe:	3304      	adds	r3, #4

08003400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003404:	d3f9      	bcc.n	80033fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003408:	4c0b      	ldr	r4, [pc, #44]	; (8003438 <LoopFillZerobss+0x26>)
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800340c:	e001      	b.n	8003412 <LoopFillZerobss>

0800340e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003410:	3204      	adds	r2, #4

08003412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003414:	d3fb      	bcc.n	800340e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003416:	f7ff ffc3 	bl	80033a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341a:	f004 f9c3 	bl	80077a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800341e:	f7ff f82f 	bl	8002480 <main>
  bx  lr    
 8003422:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800342c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003430:	0800d468 	.word	0x0800d468
  ldr r2, =_sbss
 8003434:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003438:	200006f8 	.word	0x200006f8

0800343c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800343c:	e7fe      	b.n	800343c <ADC_IRQHandler>
	...

08003440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <HAL_Init+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <HAL_Init+0x40>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_Init+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_Init+0x40>)
 8003456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_Init+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_Init+0x40>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003468:	2003      	movs	r0, #3
 800346a:	f000 fbe5 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346e:	200f      	movs	r0, #15
 8003470:	f000 f808 	bl	8003484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003474:	f7ff fbae 	bl	8002bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_InitTick+0x54>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_InitTick+0x58>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	fbb3 f3f1 	udiv	r3, r3, r1
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fc0b 	bl	8003cbe <HAL_SYSTICK_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00e      	b.n	80034d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d80a      	bhi.n	80034ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b8:	2200      	movs	r2, #0
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f000 fbc5 	bl	8003c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c4:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <HAL_InitTick+0x5c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000008 	.word	0x20000008
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_IncTick+0x20>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_IncTick+0x24>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <HAL_IncTick+0x24>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000008 	.word	0x20000008
 8003508:	200006e4 	.word	0x200006e4

0800350c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return uwTick;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_GetTick+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200006e4 	.word	0x200006e4

08003524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff ffee 	bl	800350c <HAL_GetTick>
 8003530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d005      	beq.n	800354a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_Delay+0x44>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800354a:	bf00      	nop
 800354c:	f7ff ffde 	bl	800350c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d8f7      	bhi.n	800354c <HAL_Delay+0x28>
  {
  }
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000008 	.word	0x20000008

0800356c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e033      	b.n	80035ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fb4a 	bl	8002c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035b2:	f023 0302 	bic.w	r3, r3, #2
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f94a 	bl	8003858 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
 80035da:	e001      	b.n	80035e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x1c>
 800360c:	2302      	movs	r3, #2
 800360e:	e113      	b.n	8003838 <HAL_ADC_ConfigChannel+0x244>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b09      	cmp	r3, #9
 800361e:	d925      	bls.n	800366c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68d9      	ldr	r1, [r3, #12]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	3b1e      	subs	r3, #30
 8003636:	2207      	movs	r2, #7
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43da      	mvns	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	400a      	ands	r2, r1
 8003644:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68d9      	ldr	r1, [r3, #12]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	4618      	mov	r0, r3
 8003658:	4603      	mov	r3, r0
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4403      	add	r3, r0
 800365e:	3b1e      	subs	r3, #30
 8003660:	409a      	lsls	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	e022      	b.n	80036b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6919      	ldr	r1, [r3, #16]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	2207      	movs	r2, #7
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	400a      	ands	r2, r1
 800368e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6919      	ldr	r1, [r3, #16]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4618      	mov	r0, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4403      	add	r3, r0
 80036a8:	409a      	lsls	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d824      	bhi.n	8003704 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	3b05      	subs	r3, #5
 80036cc:	221f      	movs	r2, #31
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	400a      	ands	r2, r1
 80036da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3b05      	subs	r3, #5
 80036f6:	fa00 f203 	lsl.w	r2, r0, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
 8003702:	e04c      	b.n	800379e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b0c      	cmp	r3, #12
 800370a:	d824      	bhi.n	8003756 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	3b23      	subs	r3, #35	; 0x23
 800371e:	221f      	movs	r2, #31
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43da      	mvns	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	400a      	ands	r2, r1
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	4618      	mov	r0, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b23      	subs	r3, #35	; 0x23
 8003748:	fa00 f203 	lsl.w	r2, r0, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
 8003754:	e023      	b.n	800379e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	3b41      	subs	r3, #65	; 0x41
 8003768:	221f      	movs	r2, #31
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	400a      	ands	r2, r1
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	4618      	mov	r0, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	3b41      	subs	r3, #65	; 0x41
 8003792:	fa00 f203 	lsl.w	r2, r0, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_ADC_ConfigChannel+0x250>)
 80037a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_ADC_ConfigChannel+0x254>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10f      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1d8>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b12      	cmp	r3, #18
 80037b2:	d10b      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_ADC_ConfigChannel+0x254>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d12b      	bne.n	800382e <HAL_ADC_ConfigChannel+0x23a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_ADC_ConfigChannel+0x258>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0x1f4>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b11      	cmp	r3, #17
 80037e6:	d122      	bne.n	800382e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a11      	ldr	r2, [pc, #68]	; (800384c <HAL_ADC_ConfigChannel+0x258>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_ADC_ConfigChannel+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <HAL_ADC_ConfigChannel+0x260>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	0c9a      	lsrs	r2, r3, #18
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003820:	e002      	b.n	8003828 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3b01      	subs	r3, #1
 8003826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f9      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40012300 	.word	0x40012300
 8003848:	40012000 	.word	0x40012000
 800384c:	10000012 	.word	0x10000012
 8003850:	20000000 	.word	0x20000000
 8003854:	431bde83 	.word	0x431bde83

08003858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003860:	4b79      	ldr	r3, [pc, #484]	; (8003a48 <ADC_Init+0x1f0>)
 8003862:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	021a      	lsls	r2, r3, #8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <ADC_Init+0x1f4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	e00f      	b.n	8003956 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003954:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0202 	bic.w	r2, r2, #2
 8003964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7e1b      	ldrb	r3, [r3, #24]
 8003970:	005a      	lsls	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003992:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	3b01      	subs	r3, #1
 80039b0:	035a      	lsls	r2, r3, #13
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	e007      	b.n	80039cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	051a      	lsls	r2, r3, #20
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6899      	ldr	r1, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a0e:	025a      	lsls	r2, r3, #9
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6899      	ldr	r1, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	029a      	lsls	r2, r3, #10
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40012300 	.word	0x40012300
 8003a4c:	0f000001 	.word	0x0f000001

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <__NVIC_EnableIRQ+0x38>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db12      	blt.n	8003b28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	490a      	ldr	r1, [pc, #40]	; (8003b34 <__NVIC_DisableIRQ+0x44>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f202 	lsl.w	r2, r0, r2
 8003b16:	3320      	adds	r3, #32
 8003b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b1c:	f3bf 8f4f 	dsb	sy
}
 8003b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b22:	f3bf 8f6f 	isb	sy
}
 8003b26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	; (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c04:	d301      	bcc.n	8003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <SysTick_Config+0x40>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c12:	210f      	movs	r1, #15
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	f7ff ff8e 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SysTick_Config+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <SysTick_Config+0x40>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff05 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff1a 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff8e 	bl	8003b8c <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5d 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff0d 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff1d 	bl	8003af0 <__NVIC_DisableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff ff94 	bl	8003bf4 <SysTick_Config>
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff fc12 	bl	800350c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e099      	b.n	8003e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d14:	e00f      	b.n	8003d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d16:	f7ff fbf9 	bl	800350c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d908      	bls.n	8003d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e078      	b.n	8003e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e8      	bne.n	8003d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4b38      	ldr	r3, [pc, #224]	; (8003e30 <HAL_DMA_Init+0x158>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d117      	bne.n	8003dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fad9 	bl	8004394 <DMA_CheckFifoParam>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003df6:	2301      	movs	r3, #1
 8003df8:	e016      	b.n	8003e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa90 	bl	8004328 <DMA_CalcBaseAndBitshift>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	223f      	movs	r2, #63	; 0x3f
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	f010803f 	.word	0xf010803f

08003e34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e050      	b.n	8003ee8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d101      	bne.n	8003e56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e048      	b.n	8003ee8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2221      	movs	r2, #33	; 0x21
 8003e94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa46 	bl	8004328 <DMA_CalcBaseAndBitshift>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	223f      	movs	r2, #63	; 0x3f
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003efe:	f7ff fb05 	bl	800350c <HAL_GetTick>
 8003f02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d008      	beq.n	8003f22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e052      	b.n	8003fc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0216 	bic.w	r2, r2, #22
 8003f30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_DMA_Abort+0x62>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0208 	bic.w	r2, r2, #8
 8003f60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f72:	e013      	b.n	8003f9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f74:	f7ff faca 	bl	800350c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d90c      	bls.n	8003f9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e015      	b.n	8003fc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e4      	bne.n	8003f74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	223f      	movs	r2, #63	; 0x3f
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d004      	beq.n	8003fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00c      	b.n	8004008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2205      	movs	r2, #5
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004020:	4b8e      	ldr	r3, [pc, #568]	; (800425c <HAL_DMA_IRQHandler+0x248>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a8e      	ldr	r2, [pc, #568]	; (8004260 <HAL_DMA_IRQHandler+0x24c>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0a9b      	lsrs	r3, r3, #10
 800402c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	2208      	movs	r2, #8
 8004040:	409a      	lsls	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01a      	beq.n	8004080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0204 	bic.w	r2, r2, #4
 8004066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	2208      	movs	r2, #8
 800406e:	409a      	lsls	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	2201      	movs	r2, #1
 8004086:	409a      	lsls	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	2201      	movs	r2, #1
 80040a4:	409a      	lsls	r2, r3
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f043 0202 	orr.w	r2, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	2204      	movs	r2, #4
 80040bc:	409a      	lsls	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2204      	movs	r2, #4
 80040da:	409a      	lsls	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	2210      	movs	r2, #16
 80040f2:	409a      	lsls	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d043      	beq.n	8004184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d03c      	beq.n	8004184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	2210      	movs	r2, #16
 8004110:	409a      	lsls	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d018      	beq.n	8004156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d108      	bne.n	8004144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d024      	beq.n	8004184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
 8004142:	e01f      	b.n	8004184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
 8004154:	e016      	b.n	8004184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d107      	bne.n	8004174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0208 	bic.w	r2, r2, #8
 8004172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	2220      	movs	r2, #32
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 808f 	beq.w	80042b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8087 	beq.w	80042b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	2220      	movs	r2, #32
 80041ac:	409a      	lsls	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d136      	bne.n	800422c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0216 	bic.w	r2, r2, #22
 80041cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <HAL_DMA_IRQHandler+0x1da>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0208 	bic.w	r2, r2, #8
 80041fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	223f      	movs	r2, #63	; 0x3f
 8004204:	409a      	lsls	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	2b00      	cmp	r3, #0
 8004220:	d07e      	beq.n	8004320 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
        }
        return;
 800422a:	e079      	b.n	8004320 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01d      	beq.n	8004276 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10d      	bne.n	8004264 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	2b00      	cmp	r3, #0
 800424e:	d031      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
 8004258:	e02c      	b.n	80042b4 <HAL_DMA_IRQHandler+0x2a0>
 800425a:	bf00      	nop
 800425c:	20000000 	.word	0x20000000
 8004260:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d023      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
 8004274:	e01e      	b.n	80042b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10f      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0210 	bic.w	r2, r2, #16
 8004292:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d032      	beq.n	8004322 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d022      	beq.n	800430e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2205      	movs	r2, #5
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	3301      	adds	r3, #1
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d307      	bcc.n	80042fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f2      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x2cc>
 80042fa:	e000      	b.n	80042fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
 800431e:	e000      	b.n	8004322 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004320:	bf00      	nop
    }
  }
}
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	3b10      	subs	r3, #16
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <DMA_CalcBaseAndBitshift+0x64>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004342:	4a13      	ldr	r2, [pc, #76]	; (8004390 <DMA_CalcBaseAndBitshift+0x68>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d909      	bls.n	800436a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	659a      	str	r2, [r3, #88]	; 0x58
 8004368:	e007      	b.n	800437a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	aaaaaaab 	.word	0xaaaaaaab
 8004390:	0800cf78 	.word	0x0800cf78

08004394 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11f      	bne.n	80043ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d856      	bhi.n	8004462 <DMA_CheckFifoParam+0xce>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <DMA_CheckFifoParam+0x28>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043cd 	.word	0x080043cd
 80043c0:	080043df 	.word	0x080043df
 80043c4:	080043cd 	.word	0x080043cd
 80043c8:	08004463 	.word	0x08004463
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d046      	beq.n	8004466 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e043      	b.n	8004466 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043e6:	d140      	bne.n	800446a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ec:	e03d      	b.n	800446a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f6:	d121      	bne.n	800443c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d837      	bhi.n	800446e <DMA_CheckFifoParam+0xda>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <DMA_CheckFifoParam+0x70>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004415 	.word	0x08004415
 8004408:	0800441b 	.word	0x0800441b
 800440c:	08004415 	.word	0x08004415
 8004410:	0800442d 	.word	0x0800442d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      break;
 8004418:	e030      	b.n	800447c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d025      	beq.n	8004472 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800442a:	e022      	b.n	8004472 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004434:	d11f      	bne.n	8004476 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800443a:	e01c      	b.n	8004476 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d903      	bls.n	800444a <DMA_CheckFifoParam+0xb6>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d003      	beq.n	8004450 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004448:	e018      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      break;
 800444e:	e015      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e00b      	b.n	800447a <DMA_CheckFifoParam+0xe6>
      break;
 8004462:	bf00      	nop
 8004464:	e00a      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      break;
 8004466:	bf00      	nop
 8004468:	e008      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      break;
 800446a:	bf00      	nop
 800446c:	e006      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      break;   
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <DMA_CheckFifoParam+0xe8>
      break;
 800447a:	bf00      	nop
    }
  } 
  
  return status; 
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop

0800448c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e165      	b.n	8004774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044a8:	2201      	movs	r2, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	f040 8154 	bne.w	800476e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d005      	beq.n	80044de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d130      	bne.n	8004540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004514:	2201      	movs	r2, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 0201 	and.w	r2, r3, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b03      	cmp	r3, #3
 800454a:	d017      	beq.n	800457c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	2203      	movs	r2, #3
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d123      	bne.n	80045d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	08da      	lsrs	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3208      	adds	r2, #8
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0203 	and.w	r2, r3, #3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80ae 	beq.w	800476e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	4b5d      	ldr	r3, [pc, #372]	; (800478c <HAL_GPIO_Init+0x300>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	4a5c      	ldr	r2, [pc, #368]	; (800478c <HAL_GPIO_Init+0x300>)
 800461c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004620:	6453      	str	r3, [r2, #68]	; 0x44
 8004622:	4b5a      	ldr	r3, [pc, #360]	; (800478c <HAL_GPIO_Init+0x300>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462e:	4a58      	ldr	r2, [pc, #352]	; (8004790 <HAL_GPIO_Init+0x304>)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4f      	ldr	r2, [pc, #316]	; (8004794 <HAL_GPIO_Init+0x308>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d025      	beq.n	80046a6 <HAL_GPIO_Init+0x21a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4e      	ldr	r2, [pc, #312]	; (8004798 <HAL_GPIO_Init+0x30c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01f      	beq.n	80046a2 <HAL_GPIO_Init+0x216>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4d      	ldr	r2, [pc, #308]	; (800479c <HAL_GPIO_Init+0x310>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d019      	beq.n	800469e <HAL_GPIO_Init+0x212>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4c      	ldr	r2, [pc, #304]	; (80047a0 <HAL_GPIO_Init+0x314>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_GPIO_Init+0x20e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <HAL_GPIO_Init+0x318>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00d      	beq.n	8004696 <HAL_GPIO_Init+0x20a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4a      	ldr	r2, [pc, #296]	; (80047a8 <HAL_GPIO_Init+0x31c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <HAL_GPIO_Init+0x206>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a49      	ldr	r2, [pc, #292]	; (80047ac <HAL_GPIO_Init+0x320>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_GPIO_Init+0x202>
 800468a:	2306      	movs	r3, #6
 800468c:	e00c      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 800468e:	2307      	movs	r3, #7
 8004690:	e00a      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 8004692:	2305      	movs	r3, #5
 8004694:	e008      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 8004696:	2304      	movs	r3, #4
 8004698:	e006      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 800469a:	2303      	movs	r3, #3
 800469c:	e004      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_GPIO_Init+0x21c>
 80046a6:	2300      	movs	r3, #0
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	4093      	lsls	r3, r2
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b8:	4935      	ldr	r1, [pc, #212]	; (8004790 <HAL_GPIO_Init+0x304>)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c6:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <HAL_GPIO_Init+0x324>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ea:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <HAL_GPIO_Init+0x324>)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f0:	4b2f      	ldr	r3, [pc, #188]	; (80047b0 <HAL_GPIO_Init+0x324>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <HAL_GPIO_Init+0x324>)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800471a:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_GPIO_Init+0x324>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_GPIO_Init+0x324>)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_GPIO_Init+0x324>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004768:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <HAL_GPIO_Init+0x324>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	f67f ae96 	bls.w	80044a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3724      	adds	r7, #36	; 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	40013800 	.word	0x40013800
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400
 800479c:	40020800 	.word	0x40020800
 80047a0:	40020c00 	.word	0x40020c00
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40021400 	.word	0x40021400
 80047ac:	40021800 	.word	0x40021800
 80047b0:	40013c00 	.word	0x40013c00

080047b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e0c7      	b.n	8004960 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4013      	ands	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	f040 80b7 	bne.w	800495a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80047ec:	4a62      	ldr	r2, [pc, #392]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	220f      	movs	r2, #15
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a5a      	ldr	r2, [pc, #360]	; (800497c <HAL_GPIO_DeInit+0x1c8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d025      	beq.n	8004862 <HAL_GPIO_DeInit+0xae>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a59      	ldr	r2, [pc, #356]	; (8004980 <HAL_GPIO_DeInit+0x1cc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01f      	beq.n	800485e <HAL_GPIO_DeInit+0xaa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_GPIO_DeInit+0x1d0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d019      	beq.n	800485a <HAL_GPIO_DeInit+0xa6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a57      	ldr	r2, [pc, #348]	; (8004988 <HAL_GPIO_DeInit+0x1d4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_GPIO_DeInit+0xa2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a56      	ldr	r2, [pc, #344]	; (800498c <HAL_GPIO_DeInit+0x1d8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_GPIO_DeInit+0x9e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a55      	ldr	r2, [pc, #340]	; (8004990 <HAL_GPIO_DeInit+0x1dc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <HAL_GPIO_DeInit+0x9a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a54      	ldr	r2, [pc, #336]	; (8004994 <HAL_GPIO_DeInit+0x1e0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_GPIO_DeInit+0x96>
 8004846:	2306      	movs	r3, #6
 8004848:	e00c      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 800484a:	2307      	movs	r3, #7
 800484c:	e00a      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 800484e:	2305      	movs	r3, #5
 8004850:	e008      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 8004852:	2304      	movs	r3, #4
 8004854:	e006      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 8004856:	2303      	movs	r3, #3
 8004858:	e004      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 800485a:	2302      	movs	r3, #2
 800485c:	e002      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_GPIO_DeInit+0xb0>
 8004862:	2300      	movs	r3, #0
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	f002 0203 	and.w	r2, r2, #3
 800486a:	0092      	lsls	r2, r2, #2
 800486c:	4093      	lsls	r3, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	d132      	bne.n	80048da <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004874:	4b48      	ldr	r3, [pc, #288]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	4946      	ldr	r1, [pc, #280]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 800487e:	4013      	ands	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004882:	4b45      	ldr	r3, [pc, #276]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	43db      	mvns	r3, r3
 800488a:	4943      	ldr	r1, [pc, #268]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 800488c:	4013      	ands	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43db      	mvns	r3, r3
 8004898:	493f      	ldr	r1, [pc, #252]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 800489a:	4013      	ands	r3, r2
 800489c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	493c      	ldr	r1, [pc, #240]	; (8004998 <HAL_GPIO_DeInit+0x1e4>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	220f      	movs	r2, #15
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80048bc:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3302      	adds	r3, #2
 80048c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	43da      	mvns	r2, r3
 80048cc:	482a      	ldr	r0, [pc, #168]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	400a      	ands	r2, r1
 80048d4:	3302      	adds	r3, #2
 80048d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	2103      	movs	r1, #3
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	401a      	ands	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	220f      	movs	r2, #15
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	08d2      	lsrs	r2, r2, #3
 8004910:	4019      	ands	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	2103      	movs	r1, #3
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	401a      	ands	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	2101      	movs	r1, #1
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2103      	movs	r1, #3
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	401a      	ands	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3301      	adds	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	f67f af34 	bls.w	80047d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40013800 	.word	0x40013800
 800497c:	40020000 	.word	0x40020000
 8004980:	40020400 	.word	0x40020400
 8004984:	40020800 	.word	0x40020800
 8004988:	40020c00 	.word	0x40020c00
 800498c:	40021000 	.word	0x40021000
 8004990:	40021400 	.word	0x40021400
 8004994:	40021800 	.word	0x40021800
 8004998:	40013c00 	.word	0x40013c00

0800499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049b8:	e003      	b.n	80049c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049e0:	887a      	ldrh	r2, [r7, #2]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4013      	ands	r3, r2
 80049e6:	041a      	lsls	r2, r3, #16
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	43d9      	mvns	r1, r3
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	400b      	ands	r3, r1
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	619a      	str	r2, [r3, #24]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d006      	beq.n	8004a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe f87a 	bl	8002b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40013c00 	.word	0x40013c00

08004a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e12b      	b.n	8004c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fe f926 	bl	8002cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	; 0x24
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a98:	f001 f8ae 	bl	8005bf8 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4a81      	ldr	r2, [pc, #516]	; (8004ca8 <HAL_I2C_Init+0x274>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d807      	bhi.n	8004ab8 <HAL_I2C_Init+0x84>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a80      	ldr	r2, [pc, #512]	; (8004cac <HAL_I2C_Init+0x278>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bf94      	ite	ls
 8004ab0:	2301      	movls	r3, #1
 8004ab2:	2300      	movhi	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e006      	b.n	8004ac6 <HAL_I2C_Init+0x92>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a7d      	ldr	r2, [pc, #500]	; (8004cb0 <HAL_I2C_Init+0x27c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0e7      	b.n	8004c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a78      	ldr	r2, [pc, #480]	; (8004cb4 <HAL_I2C_Init+0x280>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0c9b      	lsrs	r3, r3, #18
 8004ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a6a      	ldr	r2, [pc, #424]	; (8004ca8 <HAL_I2C_Init+0x274>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d802      	bhi.n	8004b08 <HAL_I2C_Init+0xd4>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	3301      	adds	r3, #1
 8004b06:	e009      	b.n	8004b1c <HAL_I2C_Init+0xe8>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	4a69      	ldr	r2, [pc, #420]	; (8004cb8 <HAL_I2C_Init+0x284>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	495c      	ldr	r1, [pc, #368]	; (8004ca8 <HAL_I2C_Init+0x274>)
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d819      	bhi.n	8004b70 <HAL_I2C_Init+0x13c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e59      	subs	r1, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b50:	400b      	ands	r3, r1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_I2C_Init+0x138>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1e59      	subs	r1, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6a:	e051      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	e04f      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d111      	bne.n	8004b9c <HAL_I2C_Init+0x168>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1e58      	subs	r0, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6859      	ldr	r1, [r3, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e012      	b.n	8004bc2 <HAL_I2C_Init+0x18e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e58      	subs	r0, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	0099      	lsls	r1, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_Init+0x196>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_I2C_Init+0x1bc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1e58      	subs	r0, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	440b      	add	r3, r1
 8004be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bee:	e00f      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e58      	subs	r0, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	0099      	lsls	r1, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c06:	3301      	adds	r3, #1
 8004c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	6809      	ldr	r1, [r1, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6911      	ldr	r1, [r2, #16]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68d2      	ldr	r2, [r2, #12]
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	000186a0 	.word	0x000186a0
 8004cac:	001e847f 	.word	0x001e847f
 8004cb0:	003d08ff 	.word	0x003d08ff
 8004cb4:	431bde83 	.word	0x431bde83
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e021      	b.n	8004d12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2224      	movs	r2, #36	; 0x24
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0201 	bic.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fe f880 	bl	8002dec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	817b      	strh	r3, [r7, #10]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	813b      	strh	r3, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d36:	f7fe fbe9 	bl	800350c <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	f040 80d9 	bne.w	8004efc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2319      	movs	r3, #25
 8004d50:	2201      	movs	r2, #1
 8004d52:	496d      	ldr	r1, [pc, #436]	; (8004f08 <HAL_I2C_Mem_Write+0x1ec>)
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fc7f 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
 8004d62:	e0cc      	b.n	8004efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_I2C_Mem_Write+0x56>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e0c5      	b.n	8004efe <HAL_I2C_Mem_Write+0x1e2>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d007      	beq.n	8004d98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2221      	movs	r2, #33	; 0x21
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2240      	movs	r2, #64	; 0x40
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a4d      	ldr	r2, [pc, #308]	; (8004f0c <HAL_I2C_Mem_Write+0x1f0>)
 8004dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dda:	88f8      	ldrh	r0, [r7, #6]
 8004ddc:	893a      	ldrh	r2, [r7, #8]
 8004dde:	8979      	ldrh	r1, [r7, #10]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	4603      	mov	r3, r0
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fab6 	bl	800535c <I2C_RequestMemoryWrite>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d052      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e081      	b.n	8004efe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fd00 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00d      	beq.n	8004e26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d107      	bne.n	8004e22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e06b      	b.n	8004efe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d11b      	bne.n	8004e9c <HAL_I2C_Mem_Write+0x180>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d017      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1aa      	bne.n	8004dfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fcec 	bl	8005886 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d107      	bne.n	8004ecc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e016      	b.n	8004efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	00100002 	.word	0x00100002
 8004f0c:	ffff0000 	.word	0xffff0000

08004f10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08c      	sub	sp, #48	; 0x30
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	817b      	strh	r3, [r7, #10]
 8004f22:	460b      	mov	r3, r1
 8004f24:	813b      	strh	r3, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f2a:	f7fe faef 	bl	800350c <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	f040 8208 	bne.w	800534e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2319      	movs	r3, #25
 8004f44:	2201      	movs	r2, #1
 8004f46:	497b      	ldr	r1, [pc, #492]	; (8005134 <HAL_I2C_Mem_Read+0x224>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fb85 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
 8004f56:	e1fb      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2C_Mem_Read+0x56>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e1f4      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d007      	beq.n	8004f8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2222      	movs	r2, #34	; 0x22
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2240      	movs	r2, #64	; 0x40
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a5b      	ldr	r2, [pc, #364]	; (8005138 <HAL_I2C_Mem_Read+0x228>)
 8004fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fce:	88f8      	ldrh	r0, [r7, #6]
 8004fd0:	893a      	ldrh	r2, [r7, #8]
 8004fd2:	8979      	ldrh	r1, [r7, #10]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fa52 	bl	8005488 <I2C_RequestMemoryRead>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e1b0      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d113      	bne.n	800501e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e184      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b01      	cmp	r3, #1
 8005024:	d11b      	bne.n	800505e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e164      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	2b02      	cmp	r3, #2
 8005064:	d11b      	bne.n	800509e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	e144      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050b4:	e138      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	f200 80f1 	bhi.w	80052a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d123      	bne.n	8005110 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fc1b 	bl	8005908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e139      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800510e:	e10b      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005114:	2b02      	cmp	r3, #2
 8005116:	d14e      	bne.n	80051b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	2200      	movs	r2, #0
 8005120:	4906      	ldr	r1, [pc, #24]	; (800513c <HAL_I2C_Mem_Read+0x22c>)
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fa98 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e10e      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
 8005132:	bf00      	nop
 8005134:	00100002 	.word	0x00100002
 8005138:	ffff0000 	.word	0xffff0000
 800513c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051b4:	e0b8      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2200      	movs	r2, #0
 80051be:	4966      	ldr	r1, [pc, #408]	; (8005358 <HAL_I2C_Mem_Read+0x448>)
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fa49 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0bf      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	2200      	movs	r2, #0
 800521a:	494f      	ldr	r1, [pc, #316]	; (8005358 <HAL_I2C_Mem_Read+0x448>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fa1b 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e091      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052a0:	e042      	b.n	8005328 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb2e 	bl	8005908 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e04c      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d118      	bne.n	8005328 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	f47f aec2 	bne.w	80050b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3728      	adds	r7, #40	; 0x28
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	00010004 	.word	0x00010004

0800535c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	4608      	mov	r0, r1
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	4603      	mov	r3, r0
 800536c:	817b      	strh	r3, [r7, #10]
 800536e:	460b      	mov	r3, r1
 8005370:	813b      	strh	r3, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2200      	movs	r2, #0
 800538e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f960 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ac:	d103      	bne.n	80053b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e05f      	b.n	800547a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ba:	897b      	ldrh	r3, [r7, #10]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	492d      	ldr	r1, [pc, #180]	; (8005484 <I2C_RequestMemoryWrite+0x128>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f998 	bl	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e04c      	b.n	800547a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	6a39      	ldr	r1, [r7, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fa02 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b04      	cmp	r3, #4
 800540c:	d107      	bne.n	800541e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e02b      	b.n	800547a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d105      	bne.n	8005434 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	611a      	str	r2, [r3, #16]
 8005432:	e021      	b.n	8005478 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005434:	893b      	ldrh	r3, [r7, #8]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	b29b      	uxth	r3, r3
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	6a39      	ldr	r1, [r7, #32]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f9dc 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2b04      	cmp	r3, #4
 8005458:	d107      	bne.n	800546a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e005      	b.n	800547a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800546e:	893b      	ldrh	r3, [r7, #8]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	00010002 	.word	0x00010002

08005488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4603      	mov	r3, r0
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	460b      	mov	r3, r1
 800549c:	813b      	strh	r3, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f8c2 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e8:	d103      	bne.n	80054f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0aa      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	4952      	ldr	r1, [pc, #328]	; (8005654 <I2C_RequestMemoryRead+0x1cc>)
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f8fa 	bl	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e097      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	6a39      	ldr	r1, [r7, #32]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f964 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b04      	cmp	r3, #4
 8005548:	d107      	bne.n	800555a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e076      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005564:	893b      	ldrh	r3, [r7, #8]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	611a      	str	r2, [r3, #16]
 800556e:	e021      	b.n	80055b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	b29b      	uxth	r3, r3
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	6a39      	ldr	r1, [r7, #32]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f93e 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b04      	cmp	r3, #4
 8005594:	d107      	bne.n	80055a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e050      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055aa:	893b      	ldrh	r3, [r7, #8]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b6:	6a39      	ldr	r1, [r7, #32]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f923 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00d      	beq.n	80055e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d107      	bne.n	80055dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e035      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f82b 	bl	8005658 <I2C_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d103      	bne.n	8005620 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e013      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005624:	897b      	ldrh	r3, [r7, #10]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	4906      	ldr	r1, [pc, #24]	; (8005654 <I2C_RequestMemoryRead+0x1cc>)
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f863 	bl	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	00010002 	.word	0x00010002

08005658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005668:	e025      	b.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d021      	beq.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fd ff4b 	bl	800350c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d116      	bne.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e023      	b.n	80056fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10d      	bne.n	80056dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	e00c      	b.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d0b6      	beq.n	800566a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005714:	e051      	b.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d123      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800573e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f043 0204 	orr.w	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e046      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d021      	beq.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fd fec9 	bl	800350c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d116      	bne.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e020      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10c      	bne.n	80057de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	43da      	mvns	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e00b      	b.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d18d      	bne.n	8005716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005810:	e02d      	b.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f8ce 	bl	80059b4 <I2C_IsAcknowledgeFailed>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e02d      	b.n	800587e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d021      	beq.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fd fe6f 	bl	800350c <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d116      	bne.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e007      	b.n	800587e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b80      	cmp	r3, #128	; 0x80
 800587a:	d1ca      	bne.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005892:	e02d      	b.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f88d 	bl	80059b4 <I2C_IsAcknowledgeFailed>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e02d      	b.n	8005900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d021      	beq.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fd fe2e 	bl	800350c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e007      	b.n	8005900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d1ca      	bne.n	8005894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005914:	e042      	b.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b10      	cmp	r3, #16
 8005922:	d119      	bne.n	8005958 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0210 	mvn.w	r2, #16
 800592c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e029      	b.n	80059ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005958:	f7fd fdd8 	bl	800350c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d116      	bne.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e007      	b.n	80059ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	d1b5      	bne.n	8005916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ca:	d11b      	bne.n	8005a04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	f043 0204 	orr.w	r2, r3, #4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0cc      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a28:	4b68      	ldr	r3, [pc, #416]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d90c      	bls.n	8005a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3e:	4b63      	ldr	r3, [pc, #396]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0b8      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d020      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a68:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a58      	ldr	r2, [pc, #352]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a80:	4b53      	ldr	r3, [pc, #332]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4a52      	ldr	r2, [pc, #328]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8c:	4b50      	ldr	r3, [pc, #320]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	494d      	ldr	r1, [pc, #308]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d044      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d119      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e07f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad2:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e06f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e067      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4934      	ldr	r1, [pc, #208]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b04:	f7fd fd02 	bl	800350c <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0c:	f7fd fcfe 	bl	800350c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e04f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b22:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 020c 	and.w	r2, r3, #12
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d1eb      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d20c      	bcs.n	8005b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e032      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4916      	ldr	r1, [pc, #88]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b9a:	f000 f855 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	490a      	ldr	r1, [pc, #40]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005bac:	5ccb      	ldrb	r3, [r1, r3]
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fd fc62 	bl	8003484 <HAL_InitTick>

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023c00 	.word	0x40023c00
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	0800cf60 	.word	0x0800cf60
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	20000004 	.word	0x20000004

08005be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005be6:	681b      	ldr	r3, [r3, #0]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	20000000 	.word	0x20000000

08005bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bfc:	f7ff fff0 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c00:	4602      	mov	r2, r0
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	0a9b      	lsrs	r3, r3, #10
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	4903      	ldr	r1, [pc, #12]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c0e:	5ccb      	ldrb	r3, [r1, r3]
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	0800cf70 	.word	0x0800cf70

08005c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c24:	f7ff ffdc 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0b5b      	lsrs	r3, r3, #13
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4903      	ldr	r1, [pc, #12]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40023800 	.word	0x40023800
 8005c44:	0800cf70 	.word	0x0800cf70

08005c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b0ae      	sub	sp, #184	; 0xb8
 8005c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c6e:	4bcb      	ldr	r3, [pc, #812]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	f200 8206 	bhi.w	8006088 <HAL_RCC_GetSysClockFreq+0x440>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08006089 	.word	0x08006089
 8005c8c:	08006089 	.word	0x08006089
 8005c90:	08006089 	.word	0x08006089
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08006089 	.word	0x08006089
 8005c9c:	08006089 	.word	0x08006089
 8005ca0:	08006089 	.word	0x08006089
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08006089 	.word	0x08006089
 8005cac:	08006089 	.word	0x08006089
 8005cb0:	08006089 	.word	0x08006089
 8005cb4:	08005eb9 	.word	0x08005eb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cb8:	4bb9      	ldr	r3, [pc, #740]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005cbe:	e1e7      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cc0:	4bb8      	ldr	r3, [pc, #736]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005cc6:	e1e3      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc8:	4bb4      	ldr	r3, [pc, #720]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cd4:	4bb1      	ldr	r3, [pc, #708]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d071      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce0:	4bae      	ldr	r3, [pc, #696]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	099b      	lsrs	r3, r3, #6
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d06:	4622      	mov	r2, r4
 8005d08:	462b      	mov	r3, r5
 8005d0a:	f04f 0000 	mov.w	r0, #0
 8005d0e:	f04f 0100 	mov.w	r1, #0
 8005d12:	0159      	lsls	r1, r3, #5
 8005d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d18:	0150      	lsls	r0, r2, #5
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4621      	mov	r1, r4
 8005d20:	1a51      	subs	r1, r2, r1
 8005d22:	6439      	str	r1, [r7, #64]	; 0x40
 8005d24:	4629      	mov	r1, r5
 8005d26:	eb63 0301 	sbc.w	r3, r3, r1
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005d38:	4649      	mov	r1, r9
 8005d3a:	018b      	lsls	r3, r1, #6
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d42:	4641      	mov	r1, r8
 8005d44:	018a      	lsls	r2, r1, #6
 8005d46:	4641      	mov	r1, r8
 8005d48:	1a51      	subs	r1, r2, r1
 8005d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005d60:	4649      	mov	r1, r9
 8005d62:	00cb      	lsls	r3, r1, #3
 8005d64:	4641      	mov	r1, r8
 8005d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	00ca      	lsls	r2, r1, #3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4619      	mov	r1, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	4622      	mov	r2, r4
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	eb42 0303 	adc.w	r3, r2, r3
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d90:	4629      	mov	r1, r5
 8005d92:	024b      	lsls	r3, r1, #9
 8005d94:	4621      	mov	r1, r4
 8005d96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	024a      	lsls	r2, r1, #9
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005db4:	f7fb f8e6 	bl	8000f84 <__aeabi_uldivmod>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dc2:	e067      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc4:	4b75      	ldr	r3, [pc, #468]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dde:	2300      	movs	r3, #0
 8005de0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005de2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f04f 0000 	mov.w	r0, #0
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	0159      	lsls	r1, r3, #5
 8005df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df8:	0150      	lsls	r0, r2, #5
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4621      	mov	r1, r4
 8005e00:	1a51      	subs	r1, r2, r1
 8005e02:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e04:	4629      	mov	r1, r5
 8005e06:	eb63 0301 	sbc.w	r3, r3, r1
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005e18:	4649      	mov	r1, r9
 8005e1a:	018b      	lsls	r3, r1, #6
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e22:	4641      	mov	r1, r8
 8005e24:	018a      	lsls	r2, r1, #6
 8005e26:	4641      	mov	r1, r8
 8005e28:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e46:	4692      	mov	sl, r2
 8005e48:	469b      	mov	fp, r3
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	eb1a 0303 	adds.w	r3, sl, r3
 8005e50:	623b      	str	r3, [r7, #32]
 8005e52:	462b      	mov	r3, r5
 8005e54:	eb4b 0303 	adc.w	r3, fp, r3
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005e66:	4629      	mov	r1, r5
 8005e68:	028b      	lsls	r3, r1, #10
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e70:	4621      	mov	r1, r4
 8005e72:	028a      	lsls	r2, r1, #10
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e80:	677a      	str	r2, [r7, #116]	; 0x74
 8005e82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005e86:	f7fb f87d 	bl	8000f84 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4613      	mov	r3, r2
 8005e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e94:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005eb6:	e0eb      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb8:	4b38      	ldr	r3, [pc, #224]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ec4:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d06b      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed0:	4b32      	ldr	r3, [pc, #200]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	099b      	lsrs	r3, r3, #6
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005eec:	4622      	mov	r2, r4
 8005eee:	462b      	mov	r3, r5
 8005ef0:	f04f 0000 	mov.w	r0, #0
 8005ef4:	f04f 0100 	mov.w	r1, #0
 8005ef8:	0159      	lsls	r1, r3, #5
 8005efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005efe:	0150      	lsls	r0, r2, #5
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4621      	mov	r1, r4
 8005f06:	1a51      	subs	r1, r2, r1
 8005f08:	61b9      	str	r1, [r7, #24]
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	eb63 0301 	sbc.w	r3, r3, r1
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005f1e:	4659      	mov	r1, fp
 8005f20:	018b      	lsls	r3, r1, #6
 8005f22:	4651      	mov	r1, sl
 8005f24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f28:	4651      	mov	r1, sl
 8005f2a:	018a      	lsls	r2, r1, #6
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	ebb2 0801 	subs.w	r8, r2, r1
 8005f32:	4659      	mov	r1, fp
 8005f34:	eb63 0901 	sbc.w	r9, r3, r1
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4c:	4690      	mov	r8, r2
 8005f4e:	4699      	mov	r9, r3
 8005f50:	4623      	mov	r3, r4
 8005f52:	eb18 0303 	adds.w	r3, r8, r3
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	462b      	mov	r3, r5
 8005f5a:	eb49 0303 	adc.w	r3, r9, r3
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	024b      	lsls	r3, r1, #9
 8005f70:	4621      	mov	r1, r4
 8005f72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f76:	4621      	mov	r1, r4
 8005f78:	024a      	lsls	r2, r1, #9
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f82:	2200      	movs	r2, #0
 8005f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f8c:	f7fa fffa 	bl	8000f84 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4613      	mov	r3, r2
 8005f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f9a:	e065      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x420>
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	00f42400 	.word	0x00f42400
 8005fa4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa8:	4b3d      	ldr	r3, [pc, #244]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x458>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	099b      	lsrs	r3, r3, #6
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005fba:	2300      	movs	r3, #0
 8005fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005fbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005fc2:	4642      	mov	r2, r8
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	0159      	lsls	r1, r3, #5
 8005fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd4:	0150      	lsls	r0, r2, #5
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4641      	mov	r1, r8
 8005fdc:	1a51      	subs	r1, r2, r1
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	018b      	lsls	r3, r1, #6
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ffe:	4651      	mov	r1, sl
 8006000:	018a      	lsls	r2, r1, #6
 8006002:	4651      	mov	r1, sl
 8006004:	1a54      	subs	r4, r2, r1
 8006006:	4659      	mov	r1, fp
 8006008:	eb63 0501 	sbc.w	r5, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	00eb      	lsls	r3, r5, #3
 8006016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800601a:	00e2      	lsls	r2, r4, #3
 800601c:	4614      	mov	r4, r2
 800601e:	461d      	mov	r5, r3
 8006020:	4643      	mov	r3, r8
 8006022:	18e3      	adds	r3, r4, r3
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	464b      	mov	r3, r9
 8006028:	eb45 0303 	adc.w	r3, r5, r3
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800603a:	4629      	mov	r1, r5
 800603c:	028b      	lsls	r3, r1, #10
 800603e:	4621      	mov	r1, r4
 8006040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006044:	4621      	mov	r1, r4
 8006046:	028a      	lsls	r2, r1, #10
 8006048:	4610      	mov	r0, r2
 800604a:	4619      	mov	r1, r3
 800604c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006050:	2200      	movs	r2, #0
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
 8006054:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006056:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800605a:	f7fa ff93 	bl	8000f84 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4613      	mov	r3, r2
 8006064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	0f1b      	lsrs	r3, r3, #28
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800607a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006086:	e003      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006088:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800608a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800608e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006094:	4618      	mov	r0, r3
 8006096:	37b8      	adds	r7, #184	; 0xb8
 8006098:	46bd      	mov	sp, r7
 800609a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	00f42400 	.word	0x00f42400

080060a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e28d      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8083 	beq.w	80061ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80060c8:	4b94      	ldr	r3, [pc, #592]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 030c 	and.w	r3, r3, #12
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d019      	beq.n	8006108 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060d4:	4b91      	ldr	r3, [pc, #580]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d106      	bne.n	80060ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060e0:	4b8e      	ldr	r3, [pc, #568]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ec:	d00c      	beq.n	8006108 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ee:	4b8b      	ldr	r3, [pc, #556]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	d112      	bne.n	8006120 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060fa:	4b88      	ldr	r3, [pc, #544]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006106:	d10b      	bne.n	8006120 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	4b84      	ldr	r3, [pc, #528]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d05b      	beq.n	80061cc <HAL_RCC_OscConfig+0x124>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d157      	bne.n	80061cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e25a      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006128:	d106      	bne.n	8006138 <HAL_RCC_OscConfig+0x90>
 800612a:	4b7c      	ldr	r3, [pc, #496]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a7b      	ldr	r2, [pc, #492]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e01d      	b.n	8006174 <HAL_RCC_OscConfig+0xcc>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006140:	d10c      	bne.n	800615c <HAL_RCC_OscConfig+0xb4>
 8006142:	4b76      	ldr	r3, [pc, #472]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a75      	ldr	r2, [pc, #468]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b73      	ldr	r3, [pc, #460]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a72      	ldr	r2, [pc, #456]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e00b      	b.n	8006174 <HAL_RCC_OscConfig+0xcc>
 800615c:	4b6f      	ldr	r3, [pc, #444]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6e      	ldr	r2, [pc, #440]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4b6c      	ldr	r3, [pc, #432]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a6b      	ldr	r2, [pc, #428]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800616e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fd f9c6 	bl	800350c <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006184:	f7fd f9c2 	bl	800350c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e21f      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	4b61      	ldr	r3, [pc, #388]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0xdc>
 80061a2:	e014      	b.n	80061ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fd f9b2 	bl	800350c <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ac:	f7fd f9ae 	bl	800350c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b64      	cmp	r3, #100	; 0x64
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e20b      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	4b57      	ldr	r3, [pc, #348]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x104>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06f      	beq.n	80062ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061da:	4b50      	ldr	r3, [pc, #320]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d017      	beq.n	8006216 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061e6:	4b4d      	ldr	r3, [pc, #308]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d105      	bne.n	80061fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061f2:	4b4a      	ldr	r3, [pc, #296]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061fe:	4b47      	ldr	r3, [pc, #284]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d11c      	bne.n	8006244 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800620a:	4b44      	ldr	r3, [pc, #272]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d116      	bne.n	8006244 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006216:	4b41      	ldr	r3, [pc, #260]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_RCC_OscConfig+0x186>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e1d3      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622e:	4b3b      	ldr	r3, [pc, #236]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4937      	ldr	r1, [pc, #220]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006242:	e03a      	b.n	80062ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800624c:	4b34      	ldr	r3, [pc, #208]	; (8006320 <HAL_RCC_OscConfig+0x278>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006252:	f7fd f95b 	bl	800350c <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800625a:	f7fd f957 	bl	800350c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e1b4      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626c:	4b2b      	ldr	r3, [pc, #172]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006278:	4b28      	ldr	r3, [pc, #160]	; (800631c <HAL_RCC_OscConfig+0x274>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4925      	ldr	r1, [pc, #148]	; (800631c <HAL_RCC_OscConfig+0x274>)
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	e015      	b.n	80062ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <HAL_RCC_OscConfig+0x278>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7fd f93a 	bl	800350c <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800629c:	f7fd f936 	bl	800350c <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e193      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ae:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d036      	beq.n	8006334 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	4b15      	ldr	r3, [pc, #84]	; (8006324 <HAL_RCC_OscConfig+0x27c>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d4:	f7fd f91a 	bl	800350c <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062dc:	f7fd f916 	bl	800350c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e173      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_RCC_OscConfig+0x274>)
 80062f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0x234>
 80062fa:	e01b      	b.n	8006334 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_OscConfig+0x27c>)
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006302:	f7fd f903 	bl	800350c <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	e00e      	b.n	8006328 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800630a:	f7fd f8ff 	bl	800350c <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d907      	bls.n	8006328 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e15c      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
 800631c:	40023800 	.word	0x40023800
 8006320:	42470000 	.word	0x42470000
 8006324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006328:	4b8a      	ldr	r3, [pc, #552]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 800632a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ea      	bne.n	800630a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8097 	beq.w	8006470 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006346:	4b83      	ldr	r3, [pc, #524]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10f      	bne.n	8006372 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	4b7f      	ldr	r3, [pc, #508]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	4a7e      	ldr	r2, [pc, #504]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 800635c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006360:	6413      	str	r3, [r2, #64]	; 0x40
 8006362:	4b7c      	ldr	r3, [pc, #496]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636a:	60bb      	str	r3, [r7, #8]
 800636c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006372:	4b79      	ldr	r3, [pc, #484]	; (8006558 <HAL_RCC_OscConfig+0x4b0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637a:	2b00      	cmp	r3, #0
 800637c:	d118      	bne.n	80063b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637e:	4b76      	ldr	r3, [pc, #472]	; (8006558 <HAL_RCC_OscConfig+0x4b0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a75      	ldr	r2, [pc, #468]	; (8006558 <HAL_RCC_OscConfig+0x4b0>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800638a:	f7fd f8bf 	bl	800350c <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006392:	f7fd f8bb 	bl	800350c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e118      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a4:	4b6c      	ldr	r3, [pc, #432]	; (8006558 <HAL_RCC_OscConfig+0x4b0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d106      	bne.n	80063c6 <HAL_RCC_OscConfig+0x31e>
 80063b8:	4b66      	ldr	r3, [pc, #408]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063bc:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6713      	str	r3, [r2, #112]	; 0x70
 80063c4:	e01c      	b.n	8006400 <HAL_RCC_OscConfig+0x358>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x340>
 80063ce:	4b61      	ldr	r3, [pc, #388]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	4a60      	ldr	r2, [pc, #384]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063d4:	f043 0304 	orr.w	r3, r3, #4
 80063d8:	6713      	str	r3, [r2, #112]	; 0x70
 80063da:	4b5e      	ldr	r3, [pc, #376]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	6713      	str	r3, [r2, #112]	; 0x70
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0x358>
 80063e8:	4b5a      	ldr	r3, [pc, #360]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ec:	4a59      	ldr	r2, [pc, #356]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6713      	str	r3, [r2, #112]	; 0x70
 80063f4:	4b57      	ldr	r3, [pc, #348]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a56      	ldr	r2, [pc, #344]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80063fa:	f023 0304 	bic.w	r3, r3, #4
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006408:	f7fd f880 	bl	800350c <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640e:	e00a      	b.n	8006426 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006410:	f7fd f87c 	bl	800350c <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	; 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e0d7      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006426:	4b4b      	ldr	r3, [pc, #300]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ee      	beq.n	8006410 <HAL_RCC_OscConfig+0x368>
 8006432:	e014      	b.n	800645e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fd f86a 	bl	800350c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fd f866 	bl	800350c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e0c1      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006452:	4b40      	ldr	r3, [pc, #256]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ee      	bne.n	800643c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d105      	bne.n	8006470 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006464:	4b3b      	ldr	r3, [pc, #236]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	4a3a      	ldr	r2, [pc, #232]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 800646a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80ad 	beq.w	80065d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800647a:	4b36      	ldr	r3, [pc, #216]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b08      	cmp	r3, #8
 8006484:	d060      	beq.n	8006548 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d145      	bne.n	800651a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648e:	4b33      	ldr	r3, [pc, #204]	; (800655c <HAL_RCC_OscConfig+0x4b4>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fd f83a 	bl	800350c <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649c:	f7fd f836 	bl	800350c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e093      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ae:	4b29      	ldr	r3, [pc, #164]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	071b      	lsls	r3, r3, #28
 80064e6:	491b      	ldr	r1, [pc, #108]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_RCC_OscConfig+0x4b4>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f2:	f7fd f80b 	bl	800350c <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fd f807 	bl	800350c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e064      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x452>
 8006518:	e05c      	b.n	80065d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_RCC_OscConfig+0x4b4>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fc fff4 	bl	800350c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fc fff0 	bl	800350c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e04d      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_OscConfig+0x4ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x480>
 8006546:	e045      	b.n	80065d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e040      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
 8006554:	40023800 	.word	0x40023800
 8006558:	40007000 	.word	0x40007000
 800655c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006560:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <HAL_RCC_OscConfig+0x538>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d030      	beq.n	80065d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d129      	bne.n	80065d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d122      	bne.n	80065d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006590:	4013      	ands	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006598:	4293      	cmp	r3, r2
 800659a:	d119      	bne.n	80065d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	3b01      	subs	r3, #1
 80065aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d10f      	bne.n	80065d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d107      	bne.n	80065d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40023800 	.word	0x40023800

080065e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e03f      	b.n	8006676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fc fc2c 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2224      	movs	r2, #36	; 0x24
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fe41 	bl	80072b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800663c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800664c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800665c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e021      	b.n	80066d4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2224      	movs	r2, #36	; 0x24
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066a6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fc fd01 	bl	80030b0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d17c      	bne.n	80067f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_UART_Transmit+0x2c>
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e075      	b.n	80067f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_UART_Transmit+0x3e>
 8006716:	2302      	movs	r3, #2
 8006718:	e06e      	b.n	80067f8 <HAL_UART_Transmit+0x11c>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2221      	movs	r2, #33	; 0x21
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006730:	f7fc feec 	bl	800350c <HAL_GetTick>
 8006734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d108      	bne.n	800675e <HAL_UART_Transmit+0x82>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e003      	b.n	8006766 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800676e:	e02a      	b.n	80067c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	2180      	movs	r1, #128	; 0x80
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fb90 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e036      	b.n	80067f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	3302      	adds	r3, #2
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e007      	b.n	80067b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1cf      	bne.n	8006770 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	2140      	movs	r1, #64	; 0x40
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fb60 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e006      	b.n	80067f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e000      	b.n	80067f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b20      	cmp	r3, #32
 800681e:	f040 808c 	bne.w	800693a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_UART_Receive+0x2e>
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e084      	b.n	800693c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_UART_Receive+0x40>
 800683c:	2302      	movs	r3, #2
 800683e:	e07d      	b.n	800693c <HAL_UART_Receive+0x13c>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2222      	movs	r2, #34	; 0x22
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800685c:	f7fc fe56 	bl	800350c <HAL_GetTick>
 8006860:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	88fa      	ldrh	r2, [r7, #6]
 8006866:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d108      	bne.n	800688a <HAL_UART_Receive+0x8a>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	e003      	b.n	8006892 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800689a:	e043      	b.n	8006924 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2200      	movs	r2, #0
 80068a4:	2120      	movs	r1, #32
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fafa 	bl	8006ea0 <UART_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e042      	b.n	800693c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10c      	bne.n	80068d6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	3302      	adds	r3, #2
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	e01f      	b.n	8006916 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	d007      	beq.n	80068f0 <HAL_UART_Receive+0xf0>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_UART_Receive+0xfe>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e008      	b.n	8006910 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690a:	b2da      	uxtb	r2, r3
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	3301      	adds	r3, #1
 8006914:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1b6      	bne.n	800689c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800693a:	2302      	movs	r3, #2
  }
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b0ba      	sub	sp, #232	; 0xe8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800696a:	2300      	movs	r3, #0
 800696c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006970:	2300      	movs	r3, #0
 8006972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10f      	bne.n	80069aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_UART_IRQHandler+0x66>
 8006996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fbc9 	bl	800713a <UART_Receive_IT>
      return;
 80069a8:	e256      	b.n	8006e58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80de 	beq.w	8006b70 <HAL_UART_IRQHandler+0x22c>
 80069b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80d1 	beq.w	8006b70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <HAL_UART_IRQHandler+0xae>
 80069da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	f043 0201 	orr.w	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_UART_IRQHandler+0xd2>
 80069fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f043 0202 	orr.w	r2, r3, #2
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <HAL_UART_IRQHandler+0xf6>
 8006a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f043 0204 	orr.w	r2, r3, #4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d011      	beq.n	8006a6a <HAL_UART_IRQHandler+0x126>
 8006a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d105      	bne.n	8006a5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f043 0208 	orr.w	r2, r3, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 81ed 	beq.w	8006e4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <HAL_UART_IRQHandler+0x14e>
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb54 	bl	800713a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	bf0c      	ite	eq
 8006aa0:	2301      	moveq	r3, #1
 8006aa2:	2300      	movne	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <HAL_UART_IRQHandler+0x17a>
 8006ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d04f      	beq.n	8006b5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa5c 	bl	8006f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d141      	bne.n	8006b56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3314      	adds	r3, #20
 8006afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006afe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1d9      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d013      	beq.n	8006b4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	4a7d      	ldr	r2, [pc, #500]	; (8006d20 <HAL_UART_IRQHandler+0x3dc>)
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd fa4c 	bl	8003fd0 <HAL_DMA_Abort_IT>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	e00e      	b.n	8006b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f990 	bl	8006e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	e00a      	b.n	8006b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f98c 	bl	8006e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e006      	b.n	8006b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f988 	bl	8006e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b6a:	e170      	b.n	8006e4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	bf00      	nop
    return;
 8006b6e:	e16e      	b.n	8006e4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	f040 814a 	bne.w	8006e0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8143 	beq.w	8006e0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 813c 	beq.w	8006e0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb6:	2b40      	cmp	r3, #64	; 0x40
 8006bb8:	f040 80b4 	bne.w	8006d24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8140 	beq.w	8006e52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	f080 8139 	bcs.w	8006e52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006be6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf2:	f000 8088 	beq.w	8006d06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1d9      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3314      	adds	r3, #20
 8006c48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3314      	adds	r3, #20
 8006c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e1      	bne.n	8006c42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3314      	adds	r3, #20
 8006c84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3314      	adds	r3, #20
 8006c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ca2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ca4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ca8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e3      	bne.n	8006c7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd6:	f023 0310 	bic.w	r3, r3, #16
 8006cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e3      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd f8f5 	bl	8003ef0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f8b6 	bl	8006e88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d1c:	e099      	b.n	8006e52 <HAL_UART_IRQHandler+0x50e>
 8006d1e:	bf00      	nop
 8006d20:	08007043 	.word	0x08007043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 808b 	beq.w	8006e56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8086 	beq.w	8006e56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e3      	bne.n	8006d4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	623b      	str	r3, [r7, #32]
   return(result);
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3314      	adds	r3, #20
 8006da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006da6:	633a      	str	r2, [r7, #48]	; 0x30
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e3      	bne.n	8006d82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0310 	bic.w	r3, r3, #16
 8006dde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dec:	61fa      	str	r2, [r7, #28]
 8006dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	69b9      	ldr	r1, [r7, #24]
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e3      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f83e 	bl	8006e88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e0c:	e023      	b.n	8006e56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <HAL_UART_IRQHandler+0x4ea>
 8006e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f91f 	bl	800706a <UART_Transmit_IT>
    return;
 8006e2c:	e014      	b.n	8006e58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00e      	beq.n	8006e58 <HAL_UART_IRQHandler+0x514>
 8006e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d008      	beq.n	8006e58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f95f 	bl	800710a <UART_EndTransmit_IT>
    return;
 8006e4c:	e004      	b.n	8006e58 <HAL_UART_IRQHandler+0x514>
    return;
 8006e4e:	bf00      	nop
 8006e50:	e002      	b.n	8006e58 <HAL_UART_IRQHandler+0x514>
      return;
 8006e52:	bf00      	nop
 8006e54:	e000      	b.n	8006e58 <HAL_UART_IRQHandler+0x514>
      return;
 8006e56:	bf00      	nop
  }
}
 8006e58:	37e8      	adds	r7, #232	; 0xe8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop

08006e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b090      	sub	sp, #64	; 0x40
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb0:	e050      	b.n	8006f54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d04c      	beq.n	8006f54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ec0:	f7fc fb24 	bl	800350c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d241      	bcs.n	8006f54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ef0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3314      	adds	r3, #20
 8006f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	613b      	str	r3, [r7, #16]
   return(result);
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f24:	623a      	str	r2, [r7, #32]
 8006f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	69f9      	ldr	r1, [r7, #28]
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e00f      	b.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d09f      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3740      	adds	r7, #64	; 0x40
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b095      	sub	sp, #84	; 0x54
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3314      	adds	r3, #20
 8006fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e5      	bne.n	8006fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d119      	bne.n	8007028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	330c      	adds	r3, #12
 8006ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	60bb      	str	r3, [r7, #8]
   return(result);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f023 0310 	bic.w	r3, r3, #16
 800700a:	647b      	str	r3, [r7, #68]	; 0x44
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	330c      	adds	r3, #12
 8007012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007014:	61ba      	str	r2, [r7, #24]
 8007016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6979      	ldr	r1, [r7, #20]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	613b      	str	r3, [r7, #16]
   return(result);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e5      	bne.n	8006ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007036:	bf00      	nop
 8007038:	3754      	adds	r7, #84	; 0x54
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff ff09 	bl	8006e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b21      	cmp	r3, #33	; 0x21
 800707c:	d13e      	bne.n	80070fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	d114      	bne.n	80070b2 <UART_Transmit_IT+0x48>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d110      	bne.n	80070b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	621a      	str	r2, [r3, #32]
 80070b0:	e008      	b.n	80070c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6211      	str	r1, [r2, #32]
 80070bc:	781a      	ldrb	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4619      	mov	r1, r3
 80070d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10f      	bne.n	80070f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e000      	b.n	80070fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070fc:	2302      	movs	r3, #2
  }
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fe98 	bl	8006e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b08c      	sub	sp, #48	; 0x30
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b22      	cmp	r3, #34	; 0x22
 800714c:	f040 80ab 	bne.w	80072a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d117      	bne.n	800718a <UART_Receive_IT+0x50>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d113      	bne.n	800718a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007162:	2300      	movs	r3, #0
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007178:	b29a      	uxth	r2, r3
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	1c9a      	adds	r2, r3, #2
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	629a      	str	r2, [r3, #40]	; 0x28
 8007188:	e026      	b.n	80071d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719c:	d007      	beq.n	80071ae <UART_Receive_IT+0x74>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <UART_Receive_IT+0x82>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	e008      	b.n	80071ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4619      	mov	r1, r3
 80071e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d15a      	bne.n	80072a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0220 	bic.w	r2, r2, #32
 80071fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800720a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695a      	ldr	r2, [r3, #20]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0201 	bic.w	r2, r2, #1
 800721a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	2b01      	cmp	r3, #1
 800722a:	d135      	bne.n	8007298 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	623a      	str	r2, [r7, #32]
 8007254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	69f9      	ldr	r1, [r7, #28]
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0310 	and.w	r3, r3, #16
 8007270:	2b10      	cmp	r3, #16
 8007272:	d10a      	bne.n	800728a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fdf9 	bl	8006e88 <HAL_UARTEx_RxEventCallback>
 8007296:	e002      	b.n	800729e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fc f893 	bl	80033c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e002      	b.n	80072a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e000      	b.n	80072a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
  }
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3730      	adds	r7, #48	; 0x30
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b0c0      	sub	sp, #256	; 0x100
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072cc:	68d9      	ldr	r1, [r3, #12]
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	ea40 0301 	orr.w	r3, r0, r1
 80072d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007308:	f021 010c 	bic.w	r1, r1, #12
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007316:	430b      	orrs	r3, r1
 8007318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732a:	6999      	ldr	r1, [r3, #24]
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	ea40 0301 	orr.w	r3, r0, r1
 8007336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b8f      	ldr	r3, [pc, #572]	; (800757c <UART_SetConfig+0x2cc>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d005      	beq.n	8007350 <UART_SetConfig+0xa0>
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b8d      	ldr	r3, [pc, #564]	; (8007580 <UART_SetConfig+0x2d0>)
 800734c:	429a      	cmp	r2, r3
 800734e:	d104      	bne.n	800735a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007350:	f7fe fc66 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8007354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007358:	e003      	b.n	8007362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800735a:	f7fe fc4d 	bl	8005bf8 <HAL_RCC_GetPCLK1Freq>
 800735e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736c:	f040 810c 	bne.w	8007588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007374:	2200      	movs	r2, #0
 8007376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800737a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800737e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007382:	4622      	mov	r2, r4
 8007384:	462b      	mov	r3, r5
 8007386:	1891      	adds	r1, r2, r2
 8007388:	65b9      	str	r1, [r7, #88]	; 0x58
 800738a:	415b      	adcs	r3, r3
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800738e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007392:	4621      	mov	r1, r4
 8007394:	eb12 0801 	adds.w	r8, r2, r1
 8007398:	4629      	mov	r1, r5
 800739a:	eb43 0901 	adc.w	r9, r3, r1
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073b2:	4690      	mov	r8, r2
 80073b4:	4699      	mov	r9, r3
 80073b6:	4623      	mov	r3, r4
 80073b8:	eb18 0303 	adds.w	r3, r8, r3
 80073bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073c0:	462b      	mov	r3, r5
 80073c2:	eb49 0303 	adc.w	r3, r9, r3
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073de:	460b      	mov	r3, r1
 80073e0:	18db      	adds	r3, r3, r3
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
 80073e4:	4613      	mov	r3, r2
 80073e6:	eb42 0303 	adc.w	r3, r2, r3
 80073ea:	657b      	str	r3, [r7, #84]	; 0x54
 80073ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073f4:	f7f9 fdc6 	bl	8000f84 <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4b61      	ldr	r3, [pc, #388]	; (8007584 <UART_SetConfig+0x2d4>)
 80073fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	011c      	lsls	r4, r3, #4
 8007406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	1891      	adds	r1, r2, r2
 800741e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007420:	415b      	adcs	r3, r3
 8007422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007428:	4641      	mov	r1, r8
 800742a:	eb12 0a01 	adds.w	sl, r2, r1
 800742e:	4649      	mov	r1, r9
 8007430:	eb43 0b01 	adc.w	fp, r3, r1
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007448:	4692      	mov	sl, r2
 800744a:	469b      	mov	fp, r3
 800744c:	4643      	mov	r3, r8
 800744e:	eb1a 0303 	adds.w	r3, sl, r3
 8007452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007456:	464b      	mov	r3, r9
 8007458:	eb4b 0303 	adc.w	r3, fp, r3
 800745c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007474:	460b      	mov	r3, r1
 8007476:	18db      	adds	r3, r3, r3
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
 800747a:	4613      	mov	r3, r2
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	647b      	str	r3, [r7, #68]	; 0x44
 8007482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800748a:	f7f9 fd7b 	bl	8000f84 <__aeabi_uldivmod>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4611      	mov	r1, r2
 8007494:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <UART_SetConfig+0x2d4>)
 8007496:	fba3 2301 	umull	r2, r3, r3, r1
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2264      	movs	r2, #100	; 0x64
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	1acb      	subs	r3, r1, r3
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074aa:	4b36      	ldr	r3, [pc, #216]	; (8007584 <UART_SetConfig+0x2d4>)
 80074ac:	fba3 2302 	umull	r2, r3, r3, r2
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074b8:	441c      	add	r4, r3
 80074ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074cc:	4642      	mov	r2, r8
 80074ce:	464b      	mov	r3, r9
 80074d0:	1891      	adds	r1, r2, r2
 80074d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80074d4:	415b      	adcs	r3, r3
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074dc:	4641      	mov	r1, r8
 80074de:	1851      	adds	r1, r2, r1
 80074e0:	6339      	str	r1, [r7, #48]	; 0x30
 80074e2:	4649      	mov	r1, r9
 80074e4:	414b      	adcs	r3, r1
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074f4:	4659      	mov	r1, fp
 80074f6:	00cb      	lsls	r3, r1, #3
 80074f8:	4651      	mov	r1, sl
 80074fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fe:	4651      	mov	r1, sl
 8007500:	00ca      	lsls	r2, r1, #3
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	4603      	mov	r3, r0
 8007508:	4642      	mov	r2, r8
 800750a:	189b      	adds	r3, r3, r2
 800750c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007510:	464b      	mov	r3, r9
 8007512:	460a      	mov	r2, r1
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800752c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007530:	460b      	mov	r3, r1
 8007532:	18db      	adds	r3, r3, r3
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
 8007536:	4613      	mov	r3, r2
 8007538:	eb42 0303 	adc.w	r3, r2, r3
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800753e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007546:	f7f9 fd1d 	bl	8000f84 <__aeabi_uldivmod>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <UART_SetConfig+0x2d4>)
 8007550:	fba3 1302 	umull	r1, r3, r3, r2
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	2164      	movs	r1, #100	; 0x64
 8007558:	fb01 f303 	mul.w	r3, r1, r3
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	3332      	adds	r3, #50	; 0x32
 8007562:	4a08      	ldr	r2, [pc, #32]	; (8007584 <UART_SetConfig+0x2d4>)
 8007564:	fba2 2303 	umull	r2, r3, r2, r3
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	f003 0207 	and.w	r2, r3, #7
 800756e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4422      	add	r2, r4
 8007576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007578:	e105      	b.n	8007786 <UART_SetConfig+0x4d6>
 800757a:	bf00      	nop
 800757c:	40011000 	.word	0x40011000
 8007580:	40011400 	.word	0x40011400
 8007584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758c:	2200      	movs	r2, #0
 800758e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800759a:	4642      	mov	r2, r8
 800759c:	464b      	mov	r3, r9
 800759e:	1891      	adds	r1, r2, r2
 80075a0:	6239      	str	r1, [r7, #32]
 80075a2:	415b      	adcs	r3, r3
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
 80075a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075aa:	4641      	mov	r1, r8
 80075ac:	1854      	adds	r4, r2, r1
 80075ae:	4649      	mov	r1, r9
 80075b0:	eb43 0501 	adc.w	r5, r3, r1
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	00eb      	lsls	r3, r5, #3
 80075be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075c2:	00e2      	lsls	r2, r4, #3
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	4643      	mov	r3, r8
 80075ca:	18e3      	adds	r3, r4, r3
 80075cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d0:	464b      	mov	r3, r9
 80075d2:	eb45 0303 	adc.w	r3, r5, r3
 80075d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075f6:	4629      	mov	r1, r5
 80075f8:	008b      	lsls	r3, r1, #2
 80075fa:	4621      	mov	r1, r4
 80075fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007600:	4621      	mov	r1, r4
 8007602:	008a      	lsls	r2, r1, #2
 8007604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007608:	f7f9 fcbc 	bl	8000f84 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4b60      	ldr	r3, [pc, #384]	; (8007794 <UART_SetConfig+0x4e4>)
 8007612:	fba3 2302 	umull	r2, r3, r3, r2
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	011c      	lsls	r4, r3, #4
 800761a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800761e:	2200      	movs	r2, #0
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	1891      	adds	r1, r2, r2
 8007632:	61b9      	str	r1, [r7, #24]
 8007634:	415b      	adcs	r3, r3
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800763c:	4641      	mov	r1, r8
 800763e:	1851      	adds	r1, r2, r1
 8007640:	6139      	str	r1, [r7, #16]
 8007642:	4649      	mov	r1, r9
 8007644:	414b      	adcs	r3, r1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007654:	4659      	mov	r1, fp
 8007656:	00cb      	lsls	r3, r1, #3
 8007658:	4651      	mov	r1, sl
 800765a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765e:	4651      	mov	r1, sl
 8007660:	00ca      	lsls	r2, r1, #3
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	4603      	mov	r3, r0
 8007668:	4642      	mov	r2, r8
 800766a:	189b      	adds	r3, r3, r2
 800766c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007670:	464b      	mov	r3, r9
 8007672:	460a      	mov	r2, r1
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	67bb      	str	r3, [r7, #120]	; 0x78
 8007686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007694:	4649      	mov	r1, r9
 8007696:	008b      	lsls	r3, r1, #2
 8007698:	4641      	mov	r1, r8
 800769a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769e:	4641      	mov	r1, r8
 80076a0:	008a      	lsls	r2, r1, #2
 80076a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076a6:	f7f9 fc6d 	bl	8000f84 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4b39      	ldr	r3, [pc, #228]	; (8007794 <UART_SetConfig+0x4e4>)
 80076b0:	fba3 1302 	umull	r1, r3, r3, r2
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	2164      	movs	r1, #100	; 0x64
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	3332      	adds	r3, #50	; 0x32
 80076c2:	4a34      	ldr	r2, [pc, #208]	; (8007794 <UART_SetConfig+0x4e4>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ce:	441c      	add	r4, r3
 80076d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d4:	2200      	movs	r2, #0
 80076d6:	673b      	str	r3, [r7, #112]	; 0x70
 80076d8:	677a      	str	r2, [r7, #116]	; 0x74
 80076da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076de:	4642      	mov	r2, r8
 80076e0:	464b      	mov	r3, r9
 80076e2:	1891      	adds	r1, r2, r2
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	415b      	adcs	r3, r3
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ee:	4641      	mov	r1, r8
 80076f0:	1851      	adds	r1, r2, r1
 80076f2:	6039      	str	r1, [r7, #0]
 80076f4:	4649      	mov	r1, r9
 80076f6:	414b      	adcs	r3, r1
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007706:	4659      	mov	r1, fp
 8007708:	00cb      	lsls	r3, r1, #3
 800770a:	4651      	mov	r1, sl
 800770c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007710:	4651      	mov	r1, sl
 8007712:	00ca      	lsls	r2, r1, #3
 8007714:	4610      	mov	r0, r2
 8007716:	4619      	mov	r1, r3
 8007718:	4603      	mov	r3, r0
 800771a:	4642      	mov	r2, r8
 800771c:	189b      	adds	r3, r3, r2
 800771e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007720:	464b      	mov	r3, r9
 8007722:	460a      	mov	r2, r1
 8007724:	eb42 0303 	adc.w	r3, r2, r3
 8007728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	663b      	str	r3, [r7, #96]	; 0x60
 8007734:	667a      	str	r2, [r7, #100]	; 0x64
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007742:	4649      	mov	r1, r9
 8007744:	008b      	lsls	r3, r1, #2
 8007746:	4641      	mov	r1, r8
 8007748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774c:	4641      	mov	r1, r8
 800774e:	008a      	lsls	r2, r1, #2
 8007750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007754:	f7f9 fc16 	bl	8000f84 <__aeabi_uldivmod>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <UART_SetConfig+0x4e4>)
 800775e:	fba3 1302 	umull	r1, r3, r3, r2
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2164      	movs	r1, #100	; 0x64
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	3332      	adds	r3, #50	; 0x32
 8007770:	4a08      	ldr	r2, [pc, #32]	; (8007794 <UART_SetConfig+0x4e4>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4422      	add	r2, r4
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800778c:	46bd      	mov	sp, r7
 800778e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007792:	bf00      	nop
 8007794:	51eb851f 	.word	0x51eb851f

08007798 <__errno>:
 8007798:	4b01      	ldr	r3, [pc, #4]	; (80077a0 <__errno+0x8>)
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c

080077a4 <__libc_init_array>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4d0d      	ldr	r5, [pc, #52]	; (80077dc <__libc_init_array+0x38>)
 80077a8:	4c0d      	ldr	r4, [pc, #52]	; (80077e0 <__libc_init_array+0x3c>)
 80077aa:	1b64      	subs	r4, r4, r5
 80077ac:	10a4      	asrs	r4, r4, #2
 80077ae:	2600      	movs	r6, #0
 80077b0:	42a6      	cmp	r6, r4
 80077b2:	d109      	bne.n	80077c8 <__libc_init_array+0x24>
 80077b4:	4d0b      	ldr	r5, [pc, #44]	; (80077e4 <__libc_init_array+0x40>)
 80077b6:	4c0c      	ldr	r4, [pc, #48]	; (80077e8 <__libc_init_array+0x44>)
 80077b8:	f005 fbb0 	bl	800cf1c <_init>
 80077bc:	1b64      	subs	r4, r4, r5
 80077be:	10a4      	asrs	r4, r4, #2
 80077c0:	2600      	movs	r6, #0
 80077c2:	42a6      	cmp	r6, r4
 80077c4:	d105      	bne.n	80077d2 <__libc_init_array+0x2e>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077cc:	4798      	blx	r3
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7ee      	b.n	80077b0 <__libc_init_array+0xc>
 80077d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d6:	4798      	blx	r3
 80077d8:	3601      	adds	r6, #1
 80077da:	e7f2      	b.n	80077c2 <__libc_init_array+0x1e>
 80077dc:	0800d460 	.word	0x0800d460
 80077e0:	0800d460 	.word	0x0800d460
 80077e4:	0800d460 	.word	0x0800d460
 80077e8:	0800d464 	.word	0x0800d464

080077ec <memset>:
 80077ec:	4402      	add	r2, r0
 80077ee:	4603      	mov	r3, r0
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	f803 1b01 	strb.w	r1, [r3], #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <__cvt>:
 80077fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	ec55 4b10 	vmov	r4, r5, d0
 8007804:	2d00      	cmp	r5, #0
 8007806:	460e      	mov	r6, r1
 8007808:	4619      	mov	r1, r3
 800780a:	462b      	mov	r3, r5
 800780c:	bfbb      	ittet	lt
 800780e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007812:	461d      	movlt	r5, r3
 8007814:	2300      	movge	r3, #0
 8007816:	232d      	movlt	r3, #45	; 0x2d
 8007818:	700b      	strb	r3, [r1, #0]
 800781a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800781c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007820:	4691      	mov	r9, r2
 8007822:	f023 0820 	bic.w	r8, r3, #32
 8007826:	bfbc      	itt	lt
 8007828:	4622      	movlt	r2, r4
 800782a:	4614      	movlt	r4, r2
 800782c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007830:	d005      	beq.n	800783e <__cvt+0x42>
 8007832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007836:	d100      	bne.n	800783a <__cvt+0x3e>
 8007838:	3601      	adds	r6, #1
 800783a:	2102      	movs	r1, #2
 800783c:	e000      	b.n	8007840 <__cvt+0x44>
 800783e:	2103      	movs	r1, #3
 8007840:	ab03      	add	r3, sp, #12
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	ab02      	add	r3, sp, #8
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	ec45 4b10 	vmov	d0, r4, r5
 800784c:	4653      	mov	r3, sl
 800784e:	4632      	mov	r2, r6
 8007850:	f001 fe16 	bl	8009480 <_dtoa_r>
 8007854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007858:	4607      	mov	r7, r0
 800785a:	d102      	bne.n	8007862 <__cvt+0x66>
 800785c:	f019 0f01 	tst.w	r9, #1
 8007860:	d022      	beq.n	80078a8 <__cvt+0xac>
 8007862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007866:	eb07 0906 	add.w	r9, r7, r6
 800786a:	d110      	bne.n	800788e <__cvt+0x92>
 800786c:	783b      	ldrb	r3, [r7, #0]
 800786e:	2b30      	cmp	r3, #48	; 0x30
 8007870:	d10a      	bne.n	8007888 <__cvt+0x8c>
 8007872:	2200      	movs	r2, #0
 8007874:	2300      	movs	r3, #0
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 f945 	bl	8000b08 <__aeabi_dcmpeq>
 800787e:	b918      	cbnz	r0, 8007888 <__cvt+0x8c>
 8007880:	f1c6 0601 	rsb	r6, r6, #1
 8007884:	f8ca 6000 	str.w	r6, [sl]
 8007888:	f8da 3000 	ldr.w	r3, [sl]
 800788c:	4499      	add	r9, r3
 800788e:	2200      	movs	r2, #0
 8007890:	2300      	movs	r3, #0
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f9 f937 	bl	8000b08 <__aeabi_dcmpeq>
 800789a:	b108      	cbz	r0, 80078a0 <__cvt+0xa4>
 800789c:	f8cd 900c 	str.w	r9, [sp, #12]
 80078a0:	2230      	movs	r2, #48	; 0x30
 80078a2:	9b03      	ldr	r3, [sp, #12]
 80078a4:	454b      	cmp	r3, r9
 80078a6:	d307      	bcc.n	80078b8 <__cvt+0xbc>
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ac:	1bdb      	subs	r3, r3, r7
 80078ae:	4638      	mov	r0, r7
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	b004      	add	sp, #16
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	1c59      	adds	r1, r3, #1
 80078ba:	9103      	str	r1, [sp, #12]
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e7f0      	b.n	80078a2 <__cvt+0xa6>

080078c0 <__exponent>:
 80078c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078c2:	4603      	mov	r3, r0
 80078c4:	2900      	cmp	r1, #0
 80078c6:	bfb8      	it	lt
 80078c8:	4249      	neglt	r1, r1
 80078ca:	f803 2b02 	strb.w	r2, [r3], #2
 80078ce:	bfb4      	ite	lt
 80078d0:	222d      	movlt	r2, #45	; 0x2d
 80078d2:	222b      	movge	r2, #43	; 0x2b
 80078d4:	2909      	cmp	r1, #9
 80078d6:	7042      	strb	r2, [r0, #1]
 80078d8:	dd2a      	ble.n	8007930 <__exponent+0x70>
 80078da:	f10d 0407 	add.w	r4, sp, #7
 80078de:	46a4      	mov	ip, r4
 80078e0:	270a      	movs	r7, #10
 80078e2:	46a6      	mov	lr, r4
 80078e4:	460a      	mov	r2, r1
 80078e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80078ea:	fb07 1516 	mls	r5, r7, r6, r1
 80078ee:	3530      	adds	r5, #48	; 0x30
 80078f0:	2a63      	cmp	r2, #99	; 0x63
 80078f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80078f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078fa:	4631      	mov	r1, r6
 80078fc:	dcf1      	bgt.n	80078e2 <__exponent+0x22>
 80078fe:	3130      	adds	r1, #48	; 0x30
 8007900:	f1ae 0502 	sub.w	r5, lr, #2
 8007904:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007908:	1c44      	adds	r4, r0, #1
 800790a:	4629      	mov	r1, r5
 800790c:	4561      	cmp	r1, ip
 800790e:	d30a      	bcc.n	8007926 <__exponent+0x66>
 8007910:	f10d 0209 	add.w	r2, sp, #9
 8007914:	eba2 020e 	sub.w	r2, r2, lr
 8007918:	4565      	cmp	r5, ip
 800791a:	bf88      	it	hi
 800791c:	2200      	movhi	r2, #0
 800791e:	4413      	add	r3, r2
 8007920:	1a18      	subs	r0, r3, r0
 8007922:	b003      	add	sp, #12
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800792a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800792e:	e7ed      	b.n	800790c <__exponent+0x4c>
 8007930:	2330      	movs	r3, #48	; 0x30
 8007932:	3130      	adds	r1, #48	; 0x30
 8007934:	7083      	strb	r3, [r0, #2]
 8007936:	70c1      	strb	r1, [r0, #3]
 8007938:	1d03      	adds	r3, r0, #4
 800793a:	e7f1      	b.n	8007920 <__exponent+0x60>

0800793c <_printf_float>:
 800793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	ed2d 8b02 	vpush	{d8}
 8007944:	b08d      	sub	sp, #52	; 0x34
 8007946:	460c      	mov	r4, r1
 8007948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800794c:	4616      	mov	r6, r2
 800794e:	461f      	mov	r7, r3
 8007950:	4605      	mov	r5, r0
 8007952:	f002 fef3 	bl	800a73c <_localeconv_r>
 8007956:	f8d0 a000 	ldr.w	sl, [r0]
 800795a:	4650      	mov	r0, sl
 800795c:	f7f8 fc58 	bl	8000210 <strlen>
 8007960:	2300      	movs	r3, #0
 8007962:	930a      	str	r3, [sp, #40]	; 0x28
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	9305      	str	r3, [sp, #20]
 8007968:	f8d8 3000 	ldr.w	r3, [r8]
 800796c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007970:	3307      	adds	r3, #7
 8007972:	f023 0307 	bic.w	r3, r3, #7
 8007976:	f103 0208 	add.w	r2, r3, #8
 800797a:	f8c8 2000 	str.w	r2, [r8]
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007986:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800798a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	f8cd 8018 	str.w	r8, [sp, #24]
 8007994:	ee08 0a10 	vmov	s16, r0
 8007998:	4b9f      	ldr	r3, [pc, #636]	; (8007c18 <_printf_float+0x2dc>)
 800799a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	f7f9 f8e3 	bl	8000b6c <__aeabi_dcmpun>
 80079a6:	bb88      	cbnz	r0, 8007a0c <_printf_float+0xd0>
 80079a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ac:	4b9a      	ldr	r3, [pc, #616]	; (8007c18 <_printf_float+0x2dc>)
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	f7f9 f8bd 	bl	8000b30 <__aeabi_dcmple>
 80079b6:	bb48      	cbnz	r0, 8007a0c <_printf_float+0xd0>
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80079c4:	b110      	cbz	r0, 80079cc <_printf_float+0x90>
 80079c6:	232d      	movs	r3, #45	; 0x2d
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079cc:	4b93      	ldr	r3, [pc, #588]	; (8007c1c <_printf_float+0x2e0>)
 80079ce:	4894      	ldr	r0, [pc, #592]	; (8007c20 <_printf_float+0x2e4>)
 80079d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079d4:	bf94      	ite	ls
 80079d6:	4698      	movls	r8, r3
 80079d8:	4680      	movhi	r8, r0
 80079da:	2303      	movs	r3, #3
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	9b05      	ldr	r3, [sp, #20]
 80079e0:	f023 0204 	bic.w	r2, r3, #4
 80079e4:	6022      	str	r2, [r4, #0]
 80079e6:	f04f 0900 	mov.w	r9, #0
 80079ea:	9700      	str	r7, [sp, #0]
 80079ec:	4633      	mov	r3, r6
 80079ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f9d8 	bl	8007da8 <_printf_common>
 80079f8:	3001      	adds	r0, #1
 80079fa:	f040 8090 	bne.w	8007b1e <_printf_float+0x1e2>
 80079fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007a02:	b00d      	add	sp, #52	; 0x34
 8007a04:	ecbd 8b02 	vpop	{d8}
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	4649      	mov	r1, r9
 8007a14:	f7f9 f8aa 	bl	8000b6c <__aeabi_dcmpun>
 8007a18:	b140      	cbz	r0, 8007a2c <_printf_float+0xf0>
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bfbc      	itt	lt
 8007a20:	232d      	movlt	r3, #45	; 0x2d
 8007a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a26:	487f      	ldr	r0, [pc, #508]	; (8007c24 <_printf_float+0x2e8>)
 8007a28:	4b7f      	ldr	r3, [pc, #508]	; (8007c28 <_printf_float+0x2ec>)
 8007a2a:	e7d1      	b.n	80079d0 <_printf_float+0x94>
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a32:	9206      	str	r2, [sp, #24]
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	d13f      	bne.n	8007ab8 <_printf_float+0x17c>
 8007a38:	2306      	movs	r3, #6
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	6861      	ldr	r1, [r4, #4]
 8007a40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a44:	2300      	movs	r3, #0
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	ab0a      	add	r3, sp, #40	; 0x28
 8007a4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a4e:	ab09      	add	r3, sp, #36	; 0x24
 8007a50:	ec49 8b10 	vmov	d0, r8, r9
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	6022      	str	r2, [r4, #0]
 8007a58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f7ff fecd 	bl	80077fc <__cvt>
 8007a62:	9b06      	ldr	r3, [sp, #24]
 8007a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a66:	2b47      	cmp	r3, #71	; 0x47
 8007a68:	4680      	mov	r8, r0
 8007a6a:	d108      	bne.n	8007a7e <_printf_float+0x142>
 8007a6c:	1cc8      	adds	r0, r1, #3
 8007a6e:	db02      	blt.n	8007a76 <_printf_float+0x13a>
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	4299      	cmp	r1, r3
 8007a74:	dd41      	ble.n	8007afa <_printf_float+0x1be>
 8007a76:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a7a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a82:	d820      	bhi.n	8007ac6 <_printf_float+0x18a>
 8007a84:	3901      	subs	r1, #1
 8007a86:	465a      	mov	r2, fp
 8007a88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a8e:	f7ff ff17 	bl	80078c0 <__exponent>
 8007a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a94:	1813      	adds	r3, r2, r0
 8007a96:	2a01      	cmp	r2, #1
 8007a98:	4681      	mov	r9, r0
 8007a9a:	6123      	str	r3, [r4, #16]
 8007a9c:	dc02      	bgt.n	8007aa4 <_printf_float+0x168>
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	07d2      	lsls	r2, r2, #31
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_float+0x16c>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d09c      	beq.n	80079ea <_printf_float+0xae>
 8007ab0:	232d      	movs	r3, #45	; 0x2d
 8007ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab6:	e798      	b.n	80079ea <_printf_float+0xae>
 8007ab8:	9a06      	ldr	r2, [sp, #24]
 8007aba:	2a47      	cmp	r2, #71	; 0x47
 8007abc:	d1be      	bne.n	8007a3c <_printf_float+0x100>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1bc      	bne.n	8007a3c <_printf_float+0x100>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e7b9      	b.n	8007a3a <_printf_float+0xfe>
 8007ac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aca:	d118      	bne.n	8007afe <_printf_float+0x1c2>
 8007acc:	2900      	cmp	r1, #0
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	dd0b      	ble.n	8007aea <_printf_float+0x1ae>
 8007ad2:	6121      	str	r1, [r4, #16]
 8007ad4:	b913      	cbnz	r3, 8007adc <_printf_float+0x1a0>
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	07d0      	lsls	r0, r2, #31
 8007ada:	d502      	bpl.n	8007ae2 <_printf_float+0x1a6>
 8007adc:	3301      	adds	r3, #1
 8007ade:	440b      	add	r3, r1
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ae4:	f04f 0900 	mov.w	r9, #0
 8007ae8:	e7de      	b.n	8007aa8 <_printf_float+0x16c>
 8007aea:	b913      	cbnz	r3, 8007af2 <_printf_float+0x1b6>
 8007aec:	6822      	ldr	r2, [r4, #0]
 8007aee:	07d2      	lsls	r2, r2, #31
 8007af0:	d501      	bpl.n	8007af6 <_printf_float+0x1ba>
 8007af2:	3302      	adds	r3, #2
 8007af4:	e7f4      	b.n	8007ae0 <_printf_float+0x1a4>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e7f2      	b.n	8007ae0 <_printf_float+0x1a4>
 8007afa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	4299      	cmp	r1, r3
 8007b02:	db05      	blt.n	8007b10 <_printf_float+0x1d4>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	6121      	str	r1, [r4, #16]
 8007b08:	07d8      	lsls	r0, r3, #31
 8007b0a:	d5ea      	bpl.n	8007ae2 <_printf_float+0x1a6>
 8007b0c:	1c4b      	adds	r3, r1, #1
 8007b0e:	e7e7      	b.n	8007ae0 <_printf_float+0x1a4>
 8007b10:	2900      	cmp	r1, #0
 8007b12:	bfd4      	ite	le
 8007b14:	f1c1 0202 	rsble	r2, r1, #2
 8007b18:	2201      	movgt	r2, #1
 8007b1a:	4413      	add	r3, r2
 8007b1c:	e7e0      	b.n	8007ae0 <_printf_float+0x1a4>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	055a      	lsls	r2, r3, #21
 8007b22:	d407      	bmi.n	8007b34 <_printf_float+0x1f8>
 8007b24:	6923      	ldr	r3, [r4, #16]
 8007b26:	4642      	mov	r2, r8
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d12c      	bne.n	8007b8c <_printf_float+0x250>
 8007b32:	e764      	b.n	80079fe <_printf_float+0xc2>
 8007b34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b38:	f240 80e0 	bls.w	8007cfc <_printf_float+0x3c0>
 8007b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b40:	2200      	movs	r2, #0
 8007b42:	2300      	movs	r3, #0
 8007b44:	f7f8 ffe0 	bl	8000b08 <__aeabi_dcmpeq>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d034      	beq.n	8007bb6 <_printf_float+0x27a>
 8007b4c:	4a37      	ldr	r2, [pc, #220]	; (8007c2c <_printf_float+0x2f0>)
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af51 	beq.w	80079fe <_printf_float+0xc2>
 8007b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b60:	429a      	cmp	r2, r3
 8007b62:	db02      	blt.n	8007b6a <_printf_float+0x22e>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07d8      	lsls	r0, r3, #31
 8007b68:	d510      	bpl.n	8007b8c <_printf_float+0x250>
 8007b6a:	ee18 3a10 	vmov	r3, s16
 8007b6e:	4652      	mov	r2, sl
 8007b70:	4631      	mov	r1, r6
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f af41 	beq.w	80079fe <_printf_float+0xc2>
 8007b7c:	f04f 0800 	mov.w	r8, #0
 8007b80:	f104 091a 	add.w	r9, r4, #26
 8007b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b86:	3b01      	subs	r3, #1
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	dc09      	bgt.n	8007ba0 <_printf_float+0x264>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	079b      	lsls	r3, r3, #30
 8007b90:	f100 8105 	bmi.w	8007d9e <_printf_float+0x462>
 8007b94:	68e0      	ldr	r0, [r4, #12]
 8007b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b98:	4298      	cmp	r0, r3
 8007b9a:	bfb8      	it	lt
 8007b9c:	4618      	movlt	r0, r3
 8007b9e:	e730      	b.n	8007a02 <_printf_float+0xc6>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	464a      	mov	r2, r9
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	f43f af27 	beq.w	80079fe <_printf_float+0xc2>
 8007bb0:	f108 0801 	add.w	r8, r8, #1
 8007bb4:	e7e6      	b.n	8007b84 <_printf_float+0x248>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	dc39      	bgt.n	8007c30 <_printf_float+0x2f4>
 8007bbc:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <_printf_float+0x2f0>)
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af19 	beq.w	80079fe <_printf_float+0xc2>
 8007bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d102      	bne.n	8007bda <_printf_float+0x29e>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	07d9      	lsls	r1, r3, #31
 8007bd8:	d5d8      	bpl.n	8007b8c <_printf_float+0x250>
 8007bda:	ee18 3a10 	vmov	r3, s16
 8007bde:	4652      	mov	r2, sl
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f af09 	beq.w	80079fe <_printf_float+0xc2>
 8007bec:	f04f 0900 	mov.w	r9, #0
 8007bf0:	f104 0a1a 	add.w	sl, r4, #26
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	425b      	negs	r3, r3
 8007bf8:	454b      	cmp	r3, r9
 8007bfa:	dc01      	bgt.n	8007c00 <_printf_float+0x2c4>
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfe:	e792      	b.n	8007b26 <_printf_float+0x1ea>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4652      	mov	r2, sl
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f aef7 	beq.w	80079fe <_printf_float+0xc2>
 8007c10:	f109 0901 	add.w	r9, r9, #1
 8007c14:	e7ee      	b.n	8007bf4 <_printf_float+0x2b8>
 8007c16:	bf00      	nop
 8007c18:	7fefffff 	.word	0x7fefffff
 8007c1c:	0800cf84 	.word	0x0800cf84
 8007c20:	0800cf88 	.word	0x0800cf88
 8007c24:	0800cf90 	.word	0x0800cf90
 8007c28:	0800cf8c 	.word	0x0800cf8c
 8007c2c:	0800cf94 	.word	0x0800cf94
 8007c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c34:	429a      	cmp	r2, r3
 8007c36:	bfa8      	it	ge
 8007c38:	461a      	movge	r2, r3
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	4691      	mov	r9, r2
 8007c3e:	dc37      	bgt.n	8007cb0 <_printf_float+0x374>
 8007c40:	f04f 0b00 	mov.w	fp, #0
 8007c44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c48:	f104 021a 	add.w	r2, r4, #26
 8007c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	eba3 0309 	sub.w	r3, r3, r9
 8007c54:	455b      	cmp	r3, fp
 8007c56:	dc33      	bgt.n	8007cc0 <_printf_float+0x384>
 8007c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	db3b      	blt.n	8007cd8 <_printf_float+0x39c>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07da      	lsls	r2, r3, #31
 8007c64:	d438      	bmi.n	8007cd8 <_printf_float+0x39c>
 8007c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c68:	9a05      	ldr	r2, [sp, #20]
 8007c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c6c:	1a9a      	subs	r2, r3, r2
 8007c6e:	eba3 0901 	sub.w	r9, r3, r1
 8007c72:	4591      	cmp	r9, r2
 8007c74:	bfa8      	it	ge
 8007c76:	4691      	movge	r9, r2
 8007c78:	f1b9 0f00 	cmp.w	r9, #0
 8007c7c:	dc35      	bgt.n	8007cea <_printf_float+0x3ae>
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c86:	f104 0a1a 	add.w	sl, r4, #26
 8007c8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	eba3 0309 	sub.w	r3, r3, r9
 8007c94:	4543      	cmp	r3, r8
 8007c96:	f77f af79 	ble.w	8007b8c <_printf_float+0x250>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f43f aeaa 	beq.w	80079fe <_printf_float+0xc2>
 8007caa:	f108 0801 	add.w	r8, r8, #1
 8007cae:	e7ec      	b.n	8007c8a <_printf_float+0x34e>
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d1c0      	bne.n	8007c40 <_printf_float+0x304>
 8007cbe:	e69e      	b.n	80079fe <_printf_float+0xc2>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	9205      	str	r2, [sp, #20]
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f43f ae97 	beq.w	80079fe <_printf_float+0xc2>
 8007cd0:	9a05      	ldr	r2, [sp, #20]
 8007cd2:	f10b 0b01 	add.w	fp, fp, #1
 8007cd6:	e7b9      	b.n	8007c4c <_printf_float+0x310>
 8007cd8:	ee18 3a10 	vmov	r3, s16
 8007cdc:	4652      	mov	r2, sl
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d1be      	bne.n	8007c66 <_printf_float+0x32a>
 8007ce8:	e689      	b.n	80079fe <_printf_float+0xc2>
 8007cea:	9a05      	ldr	r2, [sp, #20]
 8007cec:	464b      	mov	r3, r9
 8007cee:	4442      	add	r2, r8
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b8      	blx	r7
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d1c1      	bne.n	8007c7e <_printf_float+0x342>
 8007cfa:	e680      	b.n	80079fe <_printf_float+0xc2>
 8007cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfe:	2a01      	cmp	r2, #1
 8007d00:	dc01      	bgt.n	8007d06 <_printf_float+0x3ca>
 8007d02:	07db      	lsls	r3, r3, #31
 8007d04:	d538      	bpl.n	8007d78 <_printf_float+0x43c>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4642      	mov	r2, r8
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f ae74 	beq.w	80079fe <_printf_float+0xc2>
 8007d16:	ee18 3a10 	vmov	r3, s16
 8007d1a:	4652      	mov	r2, sl
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4628      	mov	r0, r5
 8007d20:	47b8      	blx	r7
 8007d22:	3001      	adds	r0, #1
 8007d24:	f43f ae6b 	beq.w	80079fe <_printf_float+0xc2>
 8007d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f7f8 feea 	bl	8000b08 <__aeabi_dcmpeq>
 8007d34:	b9d8      	cbnz	r0, 8007d6e <_printf_float+0x432>
 8007d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d38:	f108 0201 	add.w	r2, r8, #1
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	d10e      	bne.n	8007d66 <_printf_float+0x42a>
 8007d48:	e659      	b.n	80079fe <_printf_float+0xc2>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	f43f ae52 	beq.w	80079fe <_printf_float+0xc2>
 8007d5a:	f108 0801 	add.w	r8, r8, #1
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	3b01      	subs	r3, #1
 8007d62:	4543      	cmp	r3, r8
 8007d64:	dcf1      	bgt.n	8007d4a <_printf_float+0x40e>
 8007d66:	464b      	mov	r3, r9
 8007d68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d6c:	e6dc      	b.n	8007b28 <_printf_float+0x1ec>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	f104 0a1a 	add.w	sl, r4, #26
 8007d76:	e7f2      	b.n	8007d5e <_printf_float+0x422>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	e7df      	b.n	8007d3e <_printf_float+0x402>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	464a      	mov	r2, r9
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f43f ae38 	beq.w	80079fe <_printf_float+0xc2>
 8007d8e:	f108 0801 	add.w	r8, r8, #1
 8007d92:	68e3      	ldr	r3, [r4, #12]
 8007d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d96:	1a5b      	subs	r3, r3, r1
 8007d98:	4543      	cmp	r3, r8
 8007d9a:	dcf0      	bgt.n	8007d7e <_printf_float+0x442>
 8007d9c:	e6fa      	b.n	8007b94 <_printf_float+0x258>
 8007d9e:	f04f 0800 	mov.w	r8, #0
 8007da2:	f104 0919 	add.w	r9, r4, #25
 8007da6:	e7f4      	b.n	8007d92 <_printf_float+0x456>

08007da8 <_printf_common>:
 8007da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	4616      	mov	r6, r2
 8007dae:	4699      	mov	r9, r3
 8007db0:	688a      	ldr	r2, [r1, #8]
 8007db2:	690b      	ldr	r3, [r1, #16]
 8007db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bfb8      	it	lt
 8007dbc:	4613      	movlt	r3, r2
 8007dbe:	6033      	str	r3, [r6, #0]
 8007dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	b10a      	cbz	r2, 8007dce <_printf_common+0x26>
 8007dca:	3301      	adds	r3, #1
 8007dcc:	6033      	str	r3, [r6, #0]
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	0699      	lsls	r1, r3, #26
 8007dd2:	bf42      	ittt	mi
 8007dd4:	6833      	ldrmi	r3, [r6, #0]
 8007dd6:	3302      	addmi	r3, #2
 8007dd8:	6033      	strmi	r3, [r6, #0]
 8007dda:	6825      	ldr	r5, [r4, #0]
 8007ddc:	f015 0506 	ands.w	r5, r5, #6
 8007de0:	d106      	bne.n	8007df0 <_printf_common+0x48>
 8007de2:	f104 0a19 	add.w	sl, r4, #25
 8007de6:	68e3      	ldr	r3, [r4, #12]
 8007de8:	6832      	ldr	r2, [r6, #0]
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	42ab      	cmp	r3, r5
 8007dee:	dc26      	bgt.n	8007e3e <_printf_common+0x96>
 8007df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007df4:	1e13      	subs	r3, r2, #0
 8007df6:	6822      	ldr	r2, [r4, #0]
 8007df8:	bf18      	it	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	0692      	lsls	r2, r2, #26
 8007dfe:	d42b      	bmi.n	8007e58 <_printf_common+0xb0>
 8007e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e04:	4649      	mov	r1, r9
 8007e06:	4638      	mov	r0, r7
 8007e08:	47c0      	blx	r8
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d01e      	beq.n	8007e4c <_printf_common+0xa4>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	68e5      	ldr	r5, [r4, #12]
 8007e12:	6832      	ldr	r2, [r6, #0]
 8007e14:	f003 0306 	and.w	r3, r3, #6
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	bf08      	it	eq
 8007e1c:	1aad      	subeq	r5, r5, r2
 8007e1e:	68a3      	ldr	r3, [r4, #8]
 8007e20:	6922      	ldr	r2, [r4, #16]
 8007e22:	bf0c      	ite	eq
 8007e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e28:	2500      	movne	r5, #0
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	bfc4      	itt	gt
 8007e2e:	1a9b      	subgt	r3, r3, r2
 8007e30:	18ed      	addgt	r5, r5, r3
 8007e32:	2600      	movs	r6, #0
 8007e34:	341a      	adds	r4, #26
 8007e36:	42b5      	cmp	r5, r6
 8007e38:	d11a      	bne.n	8007e70 <_printf_common+0xc8>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e008      	b.n	8007e50 <_printf_common+0xa8>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4652      	mov	r2, sl
 8007e42:	4649      	mov	r1, r9
 8007e44:	4638      	mov	r0, r7
 8007e46:	47c0      	blx	r8
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d103      	bne.n	8007e54 <_printf_common+0xac>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e54:	3501      	adds	r5, #1
 8007e56:	e7c6      	b.n	8007de6 <_printf_common+0x3e>
 8007e58:	18e1      	adds	r1, r4, r3
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	2030      	movs	r0, #48	; 0x30
 8007e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e62:	4422      	add	r2, r4
 8007e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	e7c7      	b.n	8007e00 <_printf_common+0x58>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4622      	mov	r2, r4
 8007e74:	4649      	mov	r1, r9
 8007e76:	4638      	mov	r0, r7
 8007e78:	47c0      	blx	r8
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d0e6      	beq.n	8007e4c <_printf_common+0xa4>
 8007e7e:	3601      	adds	r6, #1
 8007e80:	e7d9      	b.n	8007e36 <_printf_common+0x8e>
	...

08007e84 <_printf_i>:
 8007e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e88:	7e0f      	ldrb	r7, [r1, #24]
 8007e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e8c:	2f78      	cmp	r7, #120	; 0x78
 8007e8e:	4691      	mov	r9, r2
 8007e90:	4680      	mov	r8, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	469a      	mov	sl, r3
 8007e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e9a:	d807      	bhi.n	8007eac <_printf_i+0x28>
 8007e9c:	2f62      	cmp	r7, #98	; 0x62
 8007e9e:	d80a      	bhi.n	8007eb6 <_printf_i+0x32>
 8007ea0:	2f00      	cmp	r7, #0
 8007ea2:	f000 80d8 	beq.w	8008056 <_printf_i+0x1d2>
 8007ea6:	2f58      	cmp	r7, #88	; 0x58
 8007ea8:	f000 80a3 	beq.w	8007ff2 <_printf_i+0x16e>
 8007eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007eb4:	e03a      	b.n	8007f2c <_printf_i+0xa8>
 8007eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eba:	2b15      	cmp	r3, #21
 8007ebc:	d8f6      	bhi.n	8007eac <_printf_i+0x28>
 8007ebe:	a101      	add	r1, pc, #4	; (adr r1, 8007ec4 <_printf_i+0x40>)
 8007ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ec4:	08007f1d 	.word	0x08007f1d
 8007ec8:	08007f31 	.word	0x08007f31
 8007ecc:	08007ead 	.word	0x08007ead
 8007ed0:	08007ead 	.word	0x08007ead
 8007ed4:	08007ead 	.word	0x08007ead
 8007ed8:	08007ead 	.word	0x08007ead
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007ead 	.word	0x08007ead
 8007ee4:	08007ead 	.word	0x08007ead
 8007ee8:	08007ead 	.word	0x08007ead
 8007eec:	08007ead 	.word	0x08007ead
 8007ef0:	0800803d 	.word	0x0800803d
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	0800801f 	.word	0x0800801f
 8007efc:	08007ead 	.word	0x08007ead
 8007f00:	08007ead 	.word	0x08007ead
 8007f04:	0800805f 	.word	0x0800805f
 8007f08:	08007ead 	.word	0x08007ead
 8007f0c:	08007f61 	.word	0x08007f61
 8007f10:	08007ead 	.word	0x08007ead
 8007f14:	08007ead 	.word	0x08007ead
 8007f18:	08008027 	.word	0x08008027
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	1d1a      	adds	r2, r3, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	602a      	str	r2, [r5, #0]
 8007f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e0a3      	b.n	8008078 <_printf_i+0x1f4>
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	6829      	ldr	r1, [r5, #0]
 8007f34:	0606      	lsls	r6, r0, #24
 8007f36:	f101 0304 	add.w	r3, r1, #4
 8007f3a:	d50a      	bpl.n	8007f52 <_printf_i+0xce>
 8007f3c:	680e      	ldr	r6, [r1, #0]
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	da03      	bge.n	8007f4c <_printf_i+0xc8>
 8007f44:	232d      	movs	r3, #45	; 0x2d
 8007f46:	4276      	negs	r6, r6
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4c:	485e      	ldr	r0, [pc, #376]	; (80080c8 <_printf_i+0x244>)
 8007f4e:	230a      	movs	r3, #10
 8007f50:	e019      	b.n	8007f86 <_printf_i+0x102>
 8007f52:	680e      	ldr	r6, [r1, #0]
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f5a:	bf18      	it	ne
 8007f5c:	b236      	sxthne	r6, r6
 8007f5e:	e7ef      	b.n	8007f40 <_printf_i+0xbc>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	6820      	ldr	r0, [r4, #0]
 8007f64:	1d19      	adds	r1, r3, #4
 8007f66:	6029      	str	r1, [r5, #0]
 8007f68:	0601      	lsls	r1, r0, #24
 8007f6a:	d501      	bpl.n	8007f70 <_printf_i+0xec>
 8007f6c:	681e      	ldr	r6, [r3, #0]
 8007f6e:	e002      	b.n	8007f76 <_printf_i+0xf2>
 8007f70:	0646      	lsls	r6, r0, #25
 8007f72:	d5fb      	bpl.n	8007f6c <_printf_i+0xe8>
 8007f74:	881e      	ldrh	r6, [r3, #0]
 8007f76:	4854      	ldr	r0, [pc, #336]	; (80080c8 <_printf_i+0x244>)
 8007f78:	2f6f      	cmp	r7, #111	; 0x6f
 8007f7a:	bf0c      	ite	eq
 8007f7c:	2308      	moveq	r3, #8
 8007f7e:	230a      	movne	r3, #10
 8007f80:	2100      	movs	r1, #0
 8007f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f86:	6865      	ldr	r5, [r4, #4]
 8007f88:	60a5      	str	r5, [r4, #8]
 8007f8a:	2d00      	cmp	r5, #0
 8007f8c:	bfa2      	ittt	ge
 8007f8e:	6821      	ldrge	r1, [r4, #0]
 8007f90:	f021 0104 	bicge.w	r1, r1, #4
 8007f94:	6021      	strge	r1, [r4, #0]
 8007f96:	b90e      	cbnz	r6, 8007f9c <_printf_i+0x118>
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	d04d      	beq.n	8008038 <_printf_i+0x1b4>
 8007f9c:	4615      	mov	r5, r2
 8007f9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fa2:	fb03 6711 	mls	r7, r3, r1, r6
 8007fa6:	5dc7      	ldrb	r7, [r0, r7]
 8007fa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fac:	4637      	mov	r7, r6
 8007fae:	42bb      	cmp	r3, r7
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	d9f4      	bls.n	8007f9e <_printf_i+0x11a>
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d10b      	bne.n	8007fd0 <_printf_i+0x14c>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07de      	lsls	r6, r3, #31
 8007fbc:	d508      	bpl.n	8007fd0 <_printf_i+0x14c>
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	6861      	ldr	r1, [r4, #4]
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	bfde      	ittt	le
 8007fc6:	2330      	movle	r3, #48	; 0x30
 8007fc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fd0:	1b52      	subs	r2, r2, r5
 8007fd2:	6122      	str	r2, [r4, #16]
 8007fd4:	f8cd a000 	str.w	sl, [sp]
 8007fd8:	464b      	mov	r3, r9
 8007fda:	aa03      	add	r2, sp, #12
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4640      	mov	r0, r8
 8007fe0:	f7ff fee2 	bl	8007da8 <_printf_common>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d14c      	bne.n	8008082 <_printf_i+0x1fe>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b004      	add	sp, #16
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	4835      	ldr	r0, [pc, #212]	; (80080c8 <_printf_i+0x244>)
 8007ff4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ff8:	6829      	ldr	r1, [r5, #0]
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008000:	6029      	str	r1, [r5, #0]
 8008002:	061d      	lsls	r5, r3, #24
 8008004:	d514      	bpl.n	8008030 <_printf_i+0x1ac>
 8008006:	07df      	lsls	r7, r3, #31
 8008008:	bf44      	itt	mi
 800800a:	f043 0320 	orrmi.w	r3, r3, #32
 800800e:	6023      	strmi	r3, [r4, #0]
 8008010:	b91e      	cbnz	r6, 800801a <_printf_i+0x196>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f023 0320 	bic.w	r3, r3, #32
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	2310      	movs	r3, #16
 800801c:	e7b0      	b.n	8007f80 <_printf_i+0xfc>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	f043 0320 	orr.w	r3, r3, #32
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	2378      	movs	r3, #120	; 0x78
 8008028:	4828      	ldr	r0, [pc, #160]	; (80080cc <_printf_i+0x248>)
 800802a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800802e:	e7e3      	b.n	8007ff8 <_printf_i+0x174>
 8008030:	0659      	lsls	r1, r3, #25
 8008032:	bf48      	it	mi
 8008034:	b2b6      	uxthmi	r6, r6
 8008036:	e7e6      	b.n	8008006 <_printf_i+0x182>
 8008038:	4615      	mov	r5, r2
 800803a:	e7bb      	b.n	8007fb4 <_printf_i+0x130>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	6826      	ldr	r6, [r4, #0]
 8008040:	6961      	ldr	r1, [r4, #20]
 8008042:	1d18      	adds	r0, r3, #4
 8008044:	6028      	str	r0, [r5, #0]
 8008046:	0635      	lsls	r5, r6, #24
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	d501      	bpl.n	8008050 <_printf_i+0x1cc>
 800804c:	6019      	str	r1, [r3, #0]
 800804e:	e002      	b.n	8008056 <_printf_i+0x1d2>
 8008050:	0670      	lsls	r0, r6, #25
 8008052:	d5fb      	bpl.n	800804c <_printf_i+0x1c8>
 8008054:	8019      	strh	r1, [r3, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	4615      	mov	r5, r2
 800805c:	e7ba      	b.n	8007fd4 <_printf_i+0x150>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	1d1a      	adds	r2, r3, #4
 8008062:	602a      	str	r2, [r5, #0]
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	2100      	movs	r1, #0
 800806a:	4628      	mov	r0, r5
 800806c:	f7f8 f8d8 	bl	8000220 <memchr>
 8008070:	b108      	cbz	r0, 8008076 <_printf_i+0x1f2>
 8008072:	1b40      	subs	r0, r0, r5
 8008074:	6060      	str	r0, [r4, #4]
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	2300      	movs	r3, #0
 800807c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008080:	e7a8      	b.n	8007fd4 <_printf_i+0x150>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	462a      	mov	r2, r5
 8008086:	4649      	mov	r1, r9
 8008088:	4640      	mov	r0, r8
 800808a:	47d0      	blx	sl
 800808c:	3001      	adds	r0, #1
 800808e:	d0ab      	beq.n	8007fe8 <_printf_i+0x164>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	d413      	bmi.n	80080be <_printf_i+0x23a>
 8008096:	68e0      	ldr	r0, [r4, #12]
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	4298      	cmp	r0, r3
 800809c:	bfb8      	it	lt
 800809e:	4618      	movlt	r0, r3
 80080a0:	e7a4      	b.n	8007fec <_printf_i+0x168>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4632      	mov	r2, r6
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	47d0      	blx	sl
 80080ac:	3001      	adds	r0, #1
 80080ae:	d09b      	beq.n	8007fe8 <_printf_i+0x164>
 80080b0:	3501      	adds	r5, #1
 80080b2:	68e3      	ldr	r3, [r4, #12]
 80080b4:	9903      	ldr	r1, [sp, #12]
 80080b6:	1a5b      	subs	r3, r3, r1
 80080b8:	42ab      	cmp	r3, r5
 80080ba:	dcf2      	bgt.n	80080a2 <_printf_i+0x21e>
 80080bc:	e7eb      	b.n	8008096 <_printf_i+0x212>
 80080be:	2500      	movs	r5, #0
 80080c0:	f104 0619 	add.w	r6, r4, #25
 80080c4:	e7f5      	b.n	80080b2 <_printf_i+0x22e>
 80080c6:	bf00      	nop
 80080c8:	0800cf96 	.word	0x0800cf96
 80080cc:	0800cfa7 	.word	0x0800cfa7

080080d0 <_scanf_float>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	b087      	sub	sp, #28
 80080d6:	4617      	mov	r7, r2
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	688b      	ldr	r3, [r1, #8]
 80080dc:	1e5a      	subs	r2, r3, #1
 80080de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80080e2:	bf83      	ittte	hi
 80080e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80080e8:	195b      	addhi	r3, r3, r5
 80080ea:	9302      	strhi	r3, [sp, #8]
 80080ec:	2300      	movls	r3, #0
 80080ee:	bf86      	itte	hi
 80080f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80080f4:	608b      	strhi	r3, [r1, #8]
 80080f6:	9302      	strls	r3, [sp, #8]
 80080f8:	680b      	ldr	r3, [r1, #0]
 80080fa:	468b      	mov	fp, r1
 80080fc:	2500      	movs	r5, #0
 80080fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008102:	f84b 3b1c 	str.w	r3, [fp], #28
 8008106:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800810a:	4680      	mov	r8, r0
 800810c:	460c      	mov	r4, r1
 800810e:	465e      	mov	r6, fp
 8008110:	46aa      	mov	sl, r5
 8008112:	46a9      	mov	r9, r5
 8008114:	9501      	str	r5, [sp, #4]
 8008116:	68a2      	ldr	r2, [r4, #8]
 8008118:	b152      	cbz	r2, 8008130 <_scanf_float+0x60>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b4e      	cmp	r3, #78	; 0x4e
 8008120:	d864      	bhi.n	80081ec <_scanf_float+0x11c>
 8008122:	2b40      	cmp	r3, #64	; 0x40
 8008124:	d83c      	bhi.n	80081a0 <_scanf_float+0xd0>
 8008126:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800812a:	b2c8      	uxtb	r0, r1
 800812c:	280e      	cmp	r0, #14
 800812e:	d93a      	bls.n	80081a6 <_scanf_float+0xd6>
 8008130:	f1b9 0f00 	cmp.w	r9, #0
 8008134:	d003      	beq.n	800813e <_scanf_float+0x6e>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008142:	f1ba 0f01 	cmp.w	sl, #1
 8008146:	f200 8113 	bhi.w	8008370 <_scanf_float+0x2a0>
 800814a:	455e      	cmp	r6, fp
 800814c:	f200 8105 	bhi.w	800835a <_scanf_float+0x28a>
 8008150:	2501      	movs	r5, #1
 8008152:	4628      	mov	r0, r5
 8008154:	b007      	add	sp, #28
 8008156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800815e:	2a0d      	cmp	r2, #13
 8008160:	d8e6      	bhi.n	8008130 <_scanf_float+0x60>
 8008162:	a101      	add	r1, pc, #4	; (adr r1, 8008168 <_scanf_float+0x98>)
 8008164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008168:	080082a7 	.word	0x080082a7
 800816c:	08008131 	.word	0x08008131
 8008170:	08008131 	.word	0x08008131
 8008174:	08008131 	.word	0x08008131
 8008178:	08008307 	.word	0x08008307
 800817c:	080082df 	.word	0x080082df
 8008180:	08008131 	.word	0x08008131
 8008184:	08008131 	.word	0x08008131
 8008188:	080082b5 	.word	0x080082b5
 800818c:	08008131 	.word	0x08008131
 8008190:	08008131 	.word	0x08008131
 8008194:	08008131 	.word	0x08008131
 8008198:	08008131 	.word	0x08008131
 800819c:	0800826d 	.word	0x0800826d
 80081a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80081a4:	e7db      	b.n	800815e <_scanf_float+0x8e>
 80081a6:	290e      	cmp	r1, #14
 80081a8:	d8c2      	bhi.n	8008130 <_scanf_float+0x60>
 80081aa:	a001      	add	r0, pc, #4	; (adr r0, 80081b0 <_scanf_float+0xe0>)
 80081ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80081b0:	0800825f 	.word	0x0800825f
 80081b4:	08008131 	.word	0x08008131
 80081b8:	0800825f 	.word	0x0800825f
 80081bc:	080082f3 	.word	0x080082f3
 80081c0:	08008131 	.word	0x08008131
 80081c4:	0800820d 	.word	0x0800820d
 80081c8:	08008249 	.word	0x08008249
 80081cc:	08008249 	.word	0x08008249
 80081d0:	08008249 	.word	0x08008249
 80081d4:	08008249 	.word	0x08008249
 80081d8:	08008249 	.word	0x08008249
 80081dc:	08008249 	.word	0x08008249
 80081e0:	08008249 	.word	0x08008249
 80081e4:	08008249 	.word	0x08008249
 80081e8:	08008249 	.word	0x08008249
 80081ec:	2b6e      	cmp	r3, #110	; 0x6e
 80081ee:	d809      	bhi.n	8008204 <_scanf_float+0x134>
 80081f0:	2b60      	cmp	r3, #96	; 0x60
 80081f2:	d8b2      	bhi.n	800815a <_scanf_float+0x8a>
 80081f4:	2b54      	cmp	r3, #84	; 0x54
 80081f6:	d077      	beq.n	80082e8 <_scanf_float+0x218>
 80081f8:	2b59      	cmp	r3, #89	; 0x59
 80081fa:	d199      	bne.n	8008130 <_scanf_float+0x60>
 80081fc:	2d07      	cmp	r5, #7
 80081fe:	d197      	bne.n	8008130 <_scanf_float+0x60>
 8008200:	2508      	movs	r5, #8
 8008202:	e029      	b.n	8008258 <_scanf_float+0x188>
 8008204:	2b74      	cmp	r3, #116	; 0x74
 8008206:	d06f      	beq.n	80082e8 <_scanf_float+0x218>
 8008208:	2b79      	cmp	r3, #121	; 0x79
 800820a:	e7f6      	b.n	80081fa <_scanf_float+0x12a>
 800820c:	6821      	ldr	r1, [r4, #0]
 800820e:	05c8      	lsls	r0, r1, #23
 8008210:	d51a      	bpl.n	8008248 <_scanf_float+0x178>
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008218:	6021      	str	r1, [r4, #0]
 800821a:	f109 0901 	add.w	r9, r9, #1
 800821e:	b11b      	cbz	r3, 8008228 <_scanf_float+0x158>
 8008220:	3b01      	subs	r3, #1
 8008222:	3201      	adds	r2, #1
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	60a2      	str	r2, [r4, #8]
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	3b01      	subs	r3, #1
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	3301      	adds	r3, #1
 8008232:	6123      	str	r3, [r4, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3b01      	subs	r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	607b      	str	r3, [r7, #4]
 800823c:	f340 8084 	ble.w	8008348 <_scanf_float+0x278>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	e766      	b.n	8008116 <_scanf_float+0x46>
 8008248:	eb1a 0f05 	cmn.w	sl, r5
 800824c:	f47f af70 	bne.w	8008130 <_scanf_float+0x60>
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008256:	6022      	str	r2, [r4, #0]
 8008258:	f806 3b01 	strb.w	r3, [r6], #1
 800825c:	e7e4      	b.n	8008228 <_scanf_float+0x158>
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	0610      	lsls	r0, r2, #24
 8008262:	f57f af65 	bpl.w	8008130 <_scanf_float+0x60>
 8008266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800826a:	e7f4      	b.n	8008256 <_scanf_float+0x186>
 800826c:	f1ba 0f00 	cmp.w	sl, #0
 8008270:	d10e      	bne.n	8008290 <_scanf_float+0x1c0>
 8008272:	f1b9 0f00 	cmp.w	r9, #0
 8008276:	d10e      	bne.n	8008296 <_scanf_float+0x1c6>
 8008278:	6822      	ldr	r2, [r4, #0]
 800827a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800827e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008282:	d108      	bne.n	8008296 <_scanf_float+0x1c6>
 8008284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	f04f 0a01 	mov.w	sl, #1
 800828e:	e7e3      	b.n	8008258 <_scanf_float+0x188>
 8008290:	f1ba 0f02 	cmp.w	sl, #2
 8008294:	d055      	beq.n	8008342 <_scanf_float+0x272>
 8008296:	2d01      	cmp	r5, #1
 8008298:	d002      	beq.n	80082a0 <_scanf_float+0x1d0>
 800829a:	2d04      	cmp	r5, #4
 800829c:	f47f af48 	bne.w	8008130 <_scanf_float+0x60>
 80082a0:	3501      	adds	r5, #1
 80082a2:	b2ed      	uxtb	r5, r5
 80082a4:	e7d8      	b.n	8008258 <_scanf_float+0x188>
 80082a6:	f1ba 0f01 	cmp.w	sl, #1
 80082aa:	f47f af41 	bne.w	8008130 <_scanf_float+0x60>
 80082ae:	f04f 0a02 	mov.w	sl, #2
 80082b2:	e7d1      	b.n	8008258 <_scanf_float+0x188>
 80082b4:	b97d      	cbnz	r5, 80082d6 <_scanf_float+0x206>
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	f47f af3c 	bne.w	8008136 <_scanf_float+0x66>
 80082be:	6822      	ldr	r2, [r4, #0]
 80082c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082c8:	f47f af39 	bne.w	800813e <_scanf_float+0x6e>
 80082cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082d0:	6022      	str	r2, [r4, #0]
 80082d2:	2501      	movs	r5, #1
 80082d4:	e7c0      	b.n	8008258 <_scanf_float+0x188>
 80082d6:	2d03      	cmp	r5, #3
 80082d8:	d0e2      	beq.n	80082a0 <_scanf_float+0x1d0>
 80082da:	2d05      	cmp	r5, #5
 80082dc:	e7de      	b.n	800829c <_scanf_float+0x1cc>
 80082de:	2d02      	cmp	r5, #2
 80082e0:	f47f af26 	bne.w	8008130 <_scanf_float+0x60>
 80082e4:	2503      	movs	r5, #3
 80082e6:	e7b7      	b.n	8008258 <_scanf_float+0x188>
 80082e8:	2d06      	cmp	r5, #6
 80082ea:	f47f af21 	bne.w	8008130 <_scanf_float+0x60>
 80082ee:	2507      	movs	r5, #7
 80082f0:	e7b2      	b.n	8008258 <_scanf_float+0x188>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	0591      	lsls	r1, r2, #22
 80082f6:	f57f af1b 	bpl.w	8008130 <_scanf_float+0x60>
 80082fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80082fe:	6022      	str	r2, [r4, #0]
 8008300:	f8cd 9004 	str.w	r9, [sp, #4]
 8008304:	e7a8      	b.n	8008258 <_scanf_float+0x188>
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800830c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008310:	d006      	beq.n	8008320 <_scanf_float+0x250>
 8008312:	0550      	lsls	r0, r2, #21
 8008314:	f57f af0c 	bpl.w	8008130 <_scanf_float+0x60>
 8008318:	f1b9 0f00 	cmp.w	r9, #0
 800831c:	f43f af0f 	beq.w	800813e <_scanf_float+0x6e>
 8008320:	0591      	lsls	r1, r2, #22
 8008322:	bf58      	it	pl
 8008324:	9901      	ldrpl	r1, [sp, #4]
 8008326:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800832a:	bf58      	it	pl
 800832c:	eba9 0101 	subpl.w	r1, r9, r1
 8008330:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008334:	bf58      	it	pl
 8008336:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800833a:	6022      	str	r2, [r4, #0]
 800833c:	f04f 0900 	mov.w	r9, #0
 8008340:	e78a      	b.n	8008258 <_scanf_float+0x188>
 8008342:	f04f 0a03 	mov.w	sl, #3
 8008346:	e787      	b.n	8008258 <_scanf_float+0x188>
 8008348:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800834c:	4639      	mov	r1, r7
 800834e:	4640      	mov	r0, r8
 8008350:	4798      	blx	r3
 8008352:	2800      	cmp	r0, #0
 8008354:	f43f aedf 	beq.w	8008116 <_scanf_float+0x46>
 8008358:	e6ea      	b.n	8008130 <_scanf_float+0x60>
 800835a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800835e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008362:	463a      	mov	r2, r7
 8008364:	4640      	mov	r0, r8
 8008366:	4798      	blx	r3
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	3b01      	subs	r3, #1
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	e6ec      	b.n	800814a <_scanf_float+0x7a>
 8008370:	1e6b      	subs	r3, r5, #1
 8008372:	2b06      	cmp	r3, #6
 8008374:	d825      	bhi.n	80083c2 <_scanf_float+0x2f2>
 8008376:	2d02      	cmp	r5, #2
 8008378:	d836      	bhi.n	80083e8 <_scanf_float+0x318>
 800837a:	455e      	cmp	r6, fp
 800837c:	f67f aee8 	bls.w	8008150 <_scanf_float+0x80>
 8008380:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008384:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008388:	463a      	mov	r2, r7
 800838a:	4640      	mov	r0, r8
 800838c:	4798      	blx	r3
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	3b01      	subs	r3, #1
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	e7f1      	b.n	800837a <_scanf_float+0x2aa>
 8008396:	9802      	ldr	r0, [sp, #8]
 8008398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800839c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80083a0:	9002      	str	r0, [sp, #8]
 80083a2:	463a      	mov	r2, r7
 80083a4:	4640      	mov	r0, r8
 80083a6:	4798      	blx	r3
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083b2:	fa5f fa8a 	uxtb.w	sl, sl
 80083b6:	f1ba 0f02 	cmp.w	sl, #2
 80083ba:	d1ec      	bne.n	8008396 <_scanf_float+0x2c6>
 80083bc:	3d03      	subs	r5, #3
 80083be:	b2ed      	uxtb	r5, r5
 80083c0:	1b76      	subs	r6, r6, r5
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	05da      	lsls	r2, r3, #23
 80083c6:	d52f      	bpl.n	8008428 <_scanf_float+0x358>
 80083c8:	055b      	lsls	r3, r3, #21
 80083ca:	d510      	bpl.n	80083ee <_scanf_float+0x31e>
 80083cc:	455e      	cmp	r6, fp
 80083ce:	f67f aebf 	bls.w	8008150 <_scanf_float+0x80>
 80083d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083da:	463a      	mov	r2, r7
 80083dc:	4640      	mov	r0, r8
 80083de:	4798      	blx	r3
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	e7f1      	b.n	80083cc <_scanf_float+0x2fc>
 80083e8:	46aa      	mov	sl, r5
 80083ea:	9602      	str	r6, [sp, #8]
 80083ec:	e7df      	b.n	80083ae <_scanf_float+0x2de>
 80083ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	2965      	cmp	r1, #101	; 0x65
 80083f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80083fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	d00c      	beq.n	800841c <_scanf_float+0x34c>
 8008402:	2945      	cmp	r1, #69	; 0x45
 8008404:	d00a      	beq.n	800841c <_scanf_float+0x34c>
 8008406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800840a:	463a      	mov	r2, r7
 800840c:	4640      	mov	r0, r8
 800840e:	4798      	blx	r3
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008416:	3b01      	subs	r3, #1
 8008418:	1eb5      	subs	r5, r6, #2
 800841a:	6123      	str	r3, [r4, #16]
 800841c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008420:	463a      	mov	r2, r7
 8008422:	4640      	mov	r0, r8
 8008424:	4798      	blx	r3
 8008426:	462e      	mov	r6, r5
 8008428:	6825      	ldr	r5, [r4, #0]
 800842a:	f015 0510 	ands.w	r5, r5, #16
 800842e:	d159      	bne.n	80084e4 <_scanf_float+0x414>
 8008430:	7035      	strb	r5, [r6, #0]
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843c:	d11b      	bne.n	8008476 <_scanf_float+0x3a6>
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	454b      	cmp	r3, r9
 8008442:	eba3 0209 	sub.w	r2, r3, r9
 8008446:	d123      	bne.n	8008490 <_scanf_float+0x3c0>
 8008448:	2200      	movs	r2, #0
 800844a:	4659      	mov	r1, fp
 800844c:	4640      	mov	r0, r8
 800844e:	f000 fedd 	bl	800920c <_strtod_r>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	f012 0f02 	tst.w	r2, #2
 800845a:	ec57 6b10 	vmov	r6, r7, d0
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	d021      	beq.n	80084a6 <_scanf_float+0x3d6>
 8008462:	9903      	ldr	r1, [sp, #12]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	600a      	str	r2, [r1, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	e9c3 6700 	strd	r6, r7, [r3]
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	3301      	adds	r3, #1
 8008472:	60e3      	str	r3, [r4, #12]
 8008474:	e66d      	b.n	8008152 <_scanf_float+0x82>
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0e5      	beq.n	8008448 <_scanf_float+0x378>
 800847c:	9905      	ldr	r1, [sp, #20]
 800847e:	230a      	movs	r3, #10
 8008480:	462a      	mov	r2, r5
 8008482:	3101      	adds	r1, #1
 8008484:	4640      	mov	r0, r8
 8008486:	f000 ff49 	bl	800931c <_strtol_r>
 800848a:	9b04      	ldr	r3, [sp, #16]
 800848c:	9e05      	ldr	r6, [sp, #20]
 800848e:	1ac2      	subs	r2, r0, r3
 8008490:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008494:	429e      	cmp	r6, r3
 8008496:	bf28      	it	cs
 8008498:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800849c:	4912      	ldr	r1, [pc, #72]	; (80084e8 <_scanf_float+0x418>)
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f82c 	bl	80084fc <siprintf>
 80084a4:	e7d0      	b.n	8008448 <_scanf_float+0x378>
 80084a6:	9903      	ldr	r1, [sp, #12]
 80084a8:	f012 0f04 	tst.w	r2, #4
 80084ac:	f103 0204 	add.w	r2, r3, #4
 80084b0:	600a      	str	r2, [r1, #0]
 80084b2:	d1d9      	bne.n	8008468 <_scanf_float+0x398>
 80084b4:	f8d3 8000 	ldr.w	r8, [r3]
 80084b8:	ee10 2a10 	vmov	r2, s0
 80084bc:	ee10 0a10 	vmov	r0, s0
 80084c0:	463b      	mov	r3, r7
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 fb52 	bl	8000b6c <__aeabi_dcmpun>
 80084c8:	b128      	cbz	r0, 80084d6 <_scanf_float+0x406>
 80084ca:	4808      	ldr	r0, [pc, #32]	; (80084ec <_scanf_float+0x41c>)
 80084cc:	f000 f810 	bl	80084f0 <nanf>
 80084d0:	ed88 0a00 	vstr	s0, [r8]
 80084d4:	e7cb      	b.n	800846e <_scanf_float+0x39e>
 80084d6:	4630      	mov	r0, r6
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f8 fba5 	bl	8000c28 <__aeabi_d2f>
 80084de:	f8c8 0000 	str.w	r0, [r8]
 80084e2:	e7c4      	b.n	800846e <_scanf_float+0x39e>
 80084e4:	2500      	movs	r5, #0
 80084e6:	e634      	b.n	8008152 <_scanf_float+0x82>
 80084e8:	0800cfb8 	.word	0x0800cfb8
 80084ec:	0800d3c0 	.word	0x0800d3c0

080084f0 <nanf>:
 80084f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084f8 <nanf+0x8>
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	7fc00000 	.word	0x7fc00000

080084fc <siprintf>:
 80084fc:	b40e      	push	{r1, r2, r3}
 80084fe:	b500      	push	{lr}
 8008500:	b09c      	sub	sp, #112	; 0x70
 8008502:	ab1d      	add	r3, sp, #116	; 0x74
 8008504:	9002      	str	r0, [sp, #8]
 8008506:	9006      	str	r0, [sp, #24]
 8008508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800850c:	4809      	ldr	r0, [pc, #36]	; (8008534 <siprintf+0x38>)
 800850e:	9107      	str	r1, [sp, #28]
 8008510:	9104      	str	r1, [sp, #16]
 8008512:	4909      	ldr	r1, [pc, #36]	; (8008538 <siprintf+0x3c>)
 8008514:	f853 2b04 	ldr.w	r2, [r3], #4
 8008518:	9105      	str	r1, [sp, #20]
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	a902      	add	r1, sp, #8
 8008520:	f002 ff5e 	bl	800b3e0 <_svfiprintf_r>
 8008524:	9b02      	ldr	r3, [sp, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	b01c      	add	sp, #112	; 0x70
 800852c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008530:	b003      	add	sp, #12
 8008532:	4770      	bx	lr
 8008534:	2000000c 	.word	0x2000000c
 8008538:	ffff0208 	.word	0xffff0208

0800853c <__sread>:
 800853c:	b510      	push	{r4, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008544:	f003 f84c 	bl	800b5e0 <_read_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	bfab      	itete	ge
 800854c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800854e:	89a3      	ldrhlt	r3, [r4, #12]
 8008550:	181b      	addge	r3, r3, r0
 8008552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008556:	bfac      	ite	ge
 8008558:	6563      	strge	r3, [r4, #84]	; 0x54
 800855a:	81a3      	strhlt	r3, [r4, #12]
 800855c:	bd10      	pop	{r4, pc}

0800855e <__swrite>:
 800855e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008562:	461f      	mov	r7, r3
 8008564:	898b      	ldrh	r3, [r1, #12]
 8008566:	05db      	lsls	r3, r3, #23
 8008568:	4605      	mov	r5, r0
 800856a:	460c      	mov	r4, r1
 800856c:	4616      	mov	r6, r2
 800856e:	d505      	bpl.n	800857c <__swrite+0x1e>
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	2302      	movs	r3, #2
 8008576:	2200      	movs	r2, #0
 8008578:	f002 f8e4 	bl	800a744 <_lseek_r>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	4632      	mov	r2, r6
 800858a:	463b      	mov	r3, r7
 800858c:	4628      	mov	r0, r5
 800858e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008592:	f000 bec5 	b.w	8009320 <_write_r>

08008596 <__sseek>:
 8008596:	b510      	push	{r4, lr}
 8008598:	460c      	mov	r4, r1
 800859a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859e:	f002 f8d1 	bl	800a744 <_lseek_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	bf15      	itete	ne
 80085a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085b2:	81a3      	strheq	r3, [r4, #12]
 80085b4:	bf18      	it	ne
 80085b6:	81a3      	strhne	r3, [r4, #12]
 80085b8:	bd10      	pop	{r4, pc}

080085ba <__sclose>:
 80085ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085be:	f000 bec1 	b.w	8009344 <_close_r>

080085c2 <sulp>:
 80085c2:	b570      	push	{r4, r5, r6, lr}
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	ec45 4b10 	vmov	d0, r4, r5
 80085cc:	4616      	mov	r6, r2
 80085ce:	f002 fc65 	bl	800ae9c <__ulp>
 80085d2:	ec51 0b10 	vmov	r0, r1, d0
 80085d6:	b17e      	cbz	r6, 80085f8 <sulp+0x36>
 80085d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dd09      	ble.n	80085f8 <sulp+0x36>
 80085e4:	051b      	lsls	r3, r3, #20
 80085e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085ea:	2400      	movs	r4, #0
 80085ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80085f0:	4622      	mov	r2, r4
 80085f2:	462b      	mov	r3, r5
 80085f4:	f7f8 f820 	bl	8000638 <__aeabi_dmul>
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	0000      	movs	r0, r0
 80085fc:	0000      	movs	r0, r0
	...

08008600 <_strtod_l>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	ed2d 8b02 	vpush	{d8}
 8008608:	b09d      	sub	sp, #116	; 0x74
 800860a:	461f      	mov	r7, r3
 800860c:	2300      	movs	r3, #0
 800860e:	9318      	str	r3, [sp, #96]	; 0x60
 8008610:	4ba2      	ldr	r3, [pc, #648]	; (800889c <_strtod_l+0x29c>)
 8008612:	9213      	str	r2, [sp, #76]	; 0x4c
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	4604      	mov	r4, r0
 800861a:	4618      	mov	r0, r3
 800861c:	4688      	mov	r8, r1
 800861e:	f7f7 fdf7 	bl	8000210 <strlen>
 8008622:	f04f 0a00 	mov.w	sl, #0
 8008626:	4605      	mov	r5, r0
 8008628:	f04f 0b00 	mov.w	fp, #0
 800862c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008632:	781a      	ldrb	r2, [r3, #0]
 8008634:	2a2b      	cmp	r2, #43	; 0x2b
 8008636:	d04e      	beq.n	80086d6 <_strtod_l+0xd6>
 8008638:	d83b      	bhi.n	80086b2 <_strtod_l+0xb2>
 800863a:	2a0d      	cmp	r2, #13
 800863c:	d834      	bhi.n	80086a8 <_strtod_l+0xa8>
 800863e:	2a08      	cmp	r2, #8
 8008640:	d834      	bhi.n	80086ac <_strtod_l+0xac>
 8008642:	2a00      	cmp	r2, #0
 8008644:	d03e      	beq.n	80086c4 <_strtod_l+0xc4>
 8008646:	2300      	movs	r3, #0
 8008648:	930a      	str	r3, [sp, #40]	; 0x28
 800864a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800864c:	7833      	ldrb	r3, [r6, #0]
 800864e:	2b30      	cmp	r3, #48	; 0x30
 8008650:	f040 80b0 	bne.w	80087b4 <_strtod_l+0x1b4>
 8008654:	7873      	ldrb	r3, [r6, #1]
 8008656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800865a:	2b58      	cmp	r3, #88	; 0x58
 800865c:	d168      	bne.n	8008730 <_strtod_l+0x130>
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	ab18      	add	r3, sp, #96	; 0x60
 8008664:	9702      	str	r7, [sp, #8]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4a8d      	ldr	r2, [pc, #564]	; (80088a0 <_strtod_l+0x2a0>)
 800866a:	ab19      	add	r3, sp, #100	; 0x64
 800866c:	a917      	add	r1, sp, #92	; 0x5c
 800866e:	4620      	mov	r0, r4
 8008670:	f001 fd5c 	bl	800a12c <__gethex>
 8008674:	f010 0707 	ands.w	r7, r0, #7
 8008678:	4605      	mov	r5, r0
 800867a:	d005      	beq.n	8008688 <_strtod_l+0x88>
 800867c:	2f06      	cmp	r7, #6
 800867e:	d12c      	bne.n	80086da <_strtod_l+0xda>
 8008680:	3601      	adds	r6, #1
 8008682:	2300      	movs	r3, #0
 8008684:	9617      	str	r6, [sp, #92]	; 0x5c
 8008686:	930a      	str	r3, [sp, #40]	; 0x28
 8008688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 8590 	bne.w	80091b0 <_strtod_l+0xbb0>
 8008690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008692:	b1eb      	cbz	r3, 80086d0 <_strtod_l+0xd0>
 8008694:	4652      	mov	r2, sl
 8008696:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800869a:	ec43 2b10 	vmov	d0, r2, r3
 800869e:	b01d      	add	sp, #116	; 0x74
 80086a0:	ecbd 8b02 	vpop	{d8}
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	2a20      	cmp	r2, #32
 80086aa:	d1cc      	bne.n	8008646 <_strtod_l+0x46>
 80086ac:	3301      	adds	r3, #1
 80086ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80086b0:	e7be      	b.n	8008630 <_strtod_l+0x30>
 80086b2:	2a2d      	cmp	r2, #45	; 0x2d
 80086b4:	d1c7      	bne.n	8008646 <_strtod_l+0x46>
 80086b6:	2201      	movs	r2, #1
 80086b8:	920a      	str	r2, [sp, #40]	; 0x28
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1c2      	bne.n	800864a <_strtod_l+0x4a>
 80086c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 856e 	bne.w	80091ac <_strtod_l+0xbac>
 80086d0:	4652      	mov	r2, sl
 80086d2:	465b      	mov	r3, fp
 80086d4:	e7e1      	b.n	800869a <_strtod_l+0x9a>
 80086d6:	2200      	movs	r2, #0
 80086d8:	e7ee      	b.n	80086b8 <_strtod_l+0xb8>
 80086da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086dc:	b13a      	cbz	r2, 80086ee <_strtod_l+0xee>
 80086de:	2135      	movs	r1, #53	; 0x35
 80086e0:	a81a      	add	r0, sp, #104	; 0x68
 80086e2:	f002 fce6 	bl	800b0b2 <__copybits>
 80086e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086e8:	4620      	mov	r0, r4
 80086ea:	f002 f8a5 	bl	800a838 <_Bfree>
 80086ee:	3f01      	subs	r7, #1
 80086f0:	2f04      	cmp	r7, #4
 80086f2:	d806      	bhi.n	8008702 <_strtod_l+0x102>
 80086f4:	e8df f007 	tbb	[pc, r7]
 80086f8:	1714030a 	.word	0x1714030a
 80086fc:	0a          	.byte	0x0a
 80086fd:	00          	.byte	0x00
 80086fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008702:	0728      	lsls	r0, r5, #28
 8008704:	d5c0      	bpl.n	8008688 <_strtod_l+0x88>
 8008706:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800870a:	e7bd      	b.n	8008688 <_strtod_l+0x88>
 800870c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008710:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008716:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800871a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800871e:	e7f0      	b.n	8008702 <_strtod_l+0x102>
 8008720:	f8df b180 	ldr.w	fp, [pc, #384]	; 80088a4 <_strtod_l+0x2a4>
 8008724:	e7ed      	b.n	8008702 <_strtod_l+0x102>
 8008726:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800872a:	f04f 3aff 	mov.w	sl, #4294967295
 800872e:	e7e8      	b.n	8008702 <_strtod_l+0x102>
 8008730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	9217      	str	r2, [sp, #92]	; 0x5c
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	2b30      	cmp	r3, #48	; 0x30
 800873a:	d0f9      	beq.n	8008730 <_strtod_l+0x130>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0a3      	beq.n	8008688 <_strtod_l+0x88>
 8008740:	2301      	movs	r3, #1
 8008742:	f04f 0900 	mov.w	r9, #0
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008750:	464f      	mov	r7, r9
 8008752:	220a      	movs	r2, #10
 8008754:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008756:	7806      	ldrb	r6, [r0, #0]
 8008758:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800875c:	b2d9      	uxtb	r1, r3
 800875e:	2909      	cmp	r1, #9
 8008760:	d92a      	bls.n	80087b8 <_strtod_l+0x1b8>
 8008762:	9905      	ldr	r1, [sp, #20]
 8008764:	462a      	mov	r2, r5
 8008766:	f002 ff67 	bl	800b638 <strncmp>
 800876a:	b398      	cbz	r0, 80087d4 <_strtod_l+0x1d4>
 800876c:	2000      	movs	r0, #0
 800876e:	4632      	mov	r2, r6
 8008770:	463d      	mov	r5, r7
 8008772:	9005      	str	r0, [sp, #20]
 8008774:	4603      	mov	r3, r0
 8008776:	2a65      	cmp	r2, #101	; 0x65
 8008778:	d001      	beq.n	800877e <_strtod_l+0x17e>
 800877a:	2a45      	cmp	r2, #69	; 0x45
 800877c:	d118      	bne.n	80087b0 <_strtod_l+0x1b0>
 800877e:	b91d      	cbnz	r5, 8008788 <_strtod_l+0x188>
 8008780:	9a04      	ldr	r2, [sp, #16]
 8008782:	4302      	orrs	r2, r0
 8008784:	d09e      	beq.n	80086c4 <_strtod_l+0xc4>
 8008786:	2500      	movs	r5, #0
 8008788:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800878c:	f108 0201 	add.w	r2, r8, #1
 8008790:	9217      	str	r2, [sp, #92]	; 0x5c
 8008792:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008796:	2a2b      	cmp	r2, #43	; 0x2b
 8008798:	d075      	beq.n	8008886 <_strtod_l+0x286>
 800879a:	2a2d      	cmp	r2, #45	; 0x2d
 800879c:	d07b      	beq.n	8008896 <_strtod_l+0x296>
 800879e:	f04f 0c00 	mov.w	ip, #0
 80087a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087a6:	2909      	cmp	r1, #9
 80087a8:	f240 8082 	bls.w	80088b0 <_strtod_l+0x2b0>
 80087ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80087b0:	2600      	movs	r6, #0
 80087b2:	e09d      	b.n	80088f0 <_strtod_l+0x2f0>
 80087b4:	2300      	movs	r3, #0
 80087b6:	e7c4      	b.n	8008742 <_strtod_l+0x142>
 80087b8:	2f08      	cmp	r7, #8
 80087ba:	bfd8      	it	le
 80087bc:	9907      	ldrle	r1, [sp, #28]
 80087be:	f100 0001 	add.w	r0, r0, #1
 80087c2:	bfda      	itte	le
 80087c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087c8:	9307      	strle	r3, [sp, #28]
 80087ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80087ce:	3701      	adds	r7, #1
 80087d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80087d2:	e7bf      	b.n	8008754 <_strtod_l+0x154>
 80087d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087d6:	195a      	adds	r2, r3, r5
 80087d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80087da:	5d5a      	ldrb	r2, [r3, r5]
 80087dc:	2f00      	cmp	r7, #0
 80087de:	d037      	beq.n	8008850 <_strtod_l+0x250>
 80087e0:	9005      	str	r0, [sp, #20]
 80087e2:	463d      	mov	r5, r7
 80087e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	d912      	bls.n	8008812 <_strtod_l+0x212>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e7c2      	b.n	8008776 <_strtod_l+0x176>
 80087f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80087f6:	785a      	ldrb	r2, [r3, #1]
 80087f8:	3001      	adds	r0, #1
 80087fa:	2a30      	cmp	r2, #48	; 0x30
 80087fc:	d0f8      	beq.n	80087f0 <_strtod_l+0x1f0>
 80087fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008802:	2b08      	cmp	r3, #8
 8008804:	f200 84d9 	bhi.w	80091ba <_strtod_l+0xbba>
 8008808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800880a:	9005      	str	r0, [sp, #20]
 800880c:	2000      	movs	r0, #0
 800880e:	9308      	str	r3, [sp, #32]
 8008810:	4605      	mov	r5, r0
 8008812:	3a30      	subs	r2, #48	; 0x30
 8008814:	f100 0301 	add.w	r3, r0, #1
 8008818:	d014      	beq.n	8008844 <_strtod_l+0x244>
 800881a:	9905      	ldr	r1, [sp, #20]
 800881c:	4419      	add	r1, r3
 800881e:	9105      	str	r1, [sp, #20]
 8008820:	462b      	mov	r3, r5
 8008822:	eb00 0e05 	add.w	lr, r0, r5
 8008826:	210a      	movs	r1, #10
 8008828:	4573      	cmp	r3, lr
 800882a:	d113      	bne.n	8008854 <_strtod_l+0x254>
 800882c:	182b      	adds	r3, r5, r0
 800882e:	2b08      	cmp	r3, #8
 8008830:	f105 0501 	add.w	r5, r5, #1
 8008834:	4405      	add	r5, r0
 8008836:	dc1c      	bgt.n	8008872 <_strtod_l+0x272>
 8008838:	9907      	ldr	r1, [sp, #28]
 800883a:	230a      	movs	r3, #10
 800883c:	fb03 2301 	mla	r3, r3, r1, r2
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	2300      	movs	r3, #0
 8008844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008846:	1c51      	adds	r1, r2, #1
 8008848:	9117      	str	r1, [sp, #92]	; 0x5c
 800884a:	7852      	ldrb	r2, [r2, #1]
 800884c:	4618      	mov	r0, r3
 800884e:	e7c9      	b.n	80087e4 <_strtod_l+0x1e4>
 8008850:	4638      	mov	r0, r7
 8008852:	e7d2      	b.n	80087fa <_strtod_l+0x1fa>
 8008854:	2b08      	cmp	r3, #8
 8008856:	dc04      	bgt.n	8008862 <_strtod_l+0x262>
 8008858:	9e07      	ldr	r6, [sp, #28]
 800885a:	434e      	muls	r6, r1
 800885c:	9607      	str	r6, [sp, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	e7e2      	b.n	8008828 <_strtod_l+0x228>
 8008862:	f103 0c01 	add.w	ip, r3, #1
 8008866:	f1bc 0f10 	cmp.w	ip, #16
 800886a:	bfd8      	it	le
 800886c:	fb01 f909 	mulle.w	r9, r1, r9
 8008870:	e7f5      	b.n	800885e <_strtod_l+0x25e>
 8008872:	2d10      	cmp	r5, #16
 8008874:	bfdc      	itt	le
 8008876:	230a      	movle	r3, #10
 8008878:	fb03 2909 	mlale	r9, r3, r9, r2
 800887c:	e7e1      	b.n	8008842 <_strtod_l+0x242>
 800887e:	2300      	movs	r3, #0
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	2301      	movs	r3, #1
 8008884:	e77c      	b.n	8008780 <_strtod_l+0x180>
 8008886:	f04f 0c00 	mov.w	ip, #0
 800888a:	f108 0202 	add.w	r2, r8, #2
 800888e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008890:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008894:	e785      	b.n	80087a2 <_strtod_l+0x1a2>
 8008896:	f04f 0c01 	mov.w	ip, #1
 800889a:	e7f6      	b.n	800888a <_strtod_l+0x28a>
 800889c:	0800d208 	.word	0x0800d208
 80088a0:	0800cfc0 	.word	0x0800cfc0
 80088a4:	7ff00000 	.word	0x7ff00000
 80088a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088aa:	1c51      	adds	r1, r2, #1
 80088ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80088ae:	7852      	ldrb	r2, [r2, #1]
 80088b0:	2a30      	cmp	r2, #48	; 0x30
 80088b2:	d0f9      	beq.n	80088a8 <_strtod_l+0x2a8>
 80088b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80088b8:	2908      	cmp	r1, #8
 80088ba:	f63f af79 	bhi.w	80087b0 <_strtod_l+0x1b0>
 80088be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088c4:	9206      	str	r2, [sp, #24]
 80088c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088c8:	1c51      	adds	r1, r2, #1
 80088ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80088cc:	7852      	ldrb	r2, [r2, #1]
 80088ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80088d2:	2e09      	cmp	r6, #9
 80088d4:	d937      	bls.n	8008946 <_strtod_l+0x346>
 80088d6:	9e06      	ldr	r6, [sp, #24]
 80088d8:	1b89      	subs	r1, r1, r6
 80088da:	2908      	cmp	r1, #8
 80088dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80088e0:	dc02      	bgt.n	80088e8 <_strtod_l+0x2e8>
 80088e2:	4576      	cmp	r6, lr
 80088e4:	bfa8      	it	ge
 80088e6:	4676      	movge	r6, lr
 80088e8:	f1bc 0f00 	cmp.w	ip, #0
 80088ec:	d000      	beq.n	80088f0 <_strtod_l+0x2f0>
 80088ee:	4276      	negs	r6, r6
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	d14d      	bne.n	8008990 <_strtod_l+0x390>
 80088f4:	9904      	ldr	r1, [sp, #16]
 80088f6:	4301      	orrs	r1, r0
 80088f8:	f47f aec6 	bne.w	8008688 <_strtod_l+0x88>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f47f aee1 	bne.w	80086c4 <_strtod_l+0xc4>
 8008902:	2a69      	cmp	r2, #105	; 0x69
 8008904:	d027      	beq.n	8008956 <_strtod_l+0x356>
 8008906:	dc24      	bgt.n	8008952 <_strtod_l+0x352>
 8008908:	2a49      	cmp	r2, #73	; 0x49
 800890a:	d024      	beq.n	8008956 <_strtod_l+0x356>
 800890c:	2a4e      	cmp	r2, #78	; 0x4e
 800890e:	f47f aed9 	bne.w	80086c4 <_strtod_l+0xc4>
 8008912:	499f      	ldr	r1, [pc, #636]	; (8008b90 <_strtod_l+0x590>)
 8008914:	a817      	add	r0, sp, #92	; 0x5c
 8008916:	f001 fe61 	bl	800a5dc <__match>
 800891a:	2800      	cmp	r0, #0
 800891c:	f43f aed2 	beq.w	80086c4 <_strtod_l+0xc4>
 8008920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b28      	cmp	r3, #40	; 0x28
 8008926:	d12d      	bne.n	8008984 <_strtod_l+0x384>
 8008928:	499a      	ldr	r1, [pc, #616]	; (8008b94 <_strtod_l+0x594>)
 800892a:	aa1a      	add	r2, sp, #104	; 0x68
 800892c:	a817      	add	r0, sp, #92	; 0x5c
 800892e:	f001 fe69 	bl	800a604 <__hexnan>
 8008932:	2805      	cmp	r0, #5
 8008934:	d126      	bne.n	8008984 <_strtod_l+0x384>
 8008936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008938:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800893c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008940:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008944:	e6a0      	b.n	8008688 <_strtod_l+0x88>
 8008946:	210a      	movs	r1, #10
 8008948:	fb01 2e0e 	mla	lr, r1, lr, r2
 800894c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008950:	e7b9      	b.n	80088c6 <_strtod_l+0x2c6>
 8008952:	2a6e      	cmp	r2, #110	; 0x6e
 8008954:	e7db      	b.n	800890e <_strtod_l+0x30e>
 8008956:	4990      	ldr	r1, [pc, #576]	; (8008b98 <_strtod_l+0x598>)
 8008958:	a817      	add	r0, sp, #92	; 0x5c
 800895a:	f001 fe3f 	bl	800a5dc <__match>
 800895e:	2800      	cmp	r0, #0
 8008960:	f43f aeb0 	beq.w	80086c4 <_strtod_l+0xc4>
 8008964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008966:	498d      	ldr	r1, [pc, #564]	; (8008b9c <_strtod_l+0x59c>)
 8008968:	3b01      	subs	r3, #1
 800896a:	a817      	add	r0, sp, #92	; 0x5c
 800896c:	9317      	str	r3, [sp, #92]	; 0x5c
 800896e:	f001 fe35 	bl	800a5dc <__match>
 8008972:	b910      	cbnz	r0, 800897a <_strtod_l+0x37a>
 8008974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008976:	3301      	adds	r3, #1
 8008978:	9317      	str	r3, [sp, #92]	; 0x5c
 800897a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008bac <_strtod_l+0x5ac>
 800897e:	f04f 0a00 	mov.w	sl, #0
 8008982:	e681      	b.n	8008688 <_strtod_l+0x88>
 8008984:	4886      	ldr	r0, [pc, #536]	; (8008ba0 <_strtod_l+0x5a0>)
 8008986:	f002 fe3f 	bl	800b608 <nan>
 800898a:	ec5b ab10 	vmov	sl, fp, d0
 800898e:	e67b      	b.n	8008688 <_strtod_l+0x88>
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	9807      	ldr	r0, [sp, #28]
 8008994:	1af3      	subs	r3, r6, r3
 8008996:	2f00      	cmp	r7, #0
 8008998:	bf08      	it	eq
 800899a:	462f      	moveq	r7, r5
 800899c:	2d10      	cmp	r5, #16
 800899e:	9306      	str	r3, [sp, #24]
 80089a0:	46a8      	mov	r8, r5
 80089a2:	bfa8      	it	ge
 80089a4:	f04f 0810 	movge.w	r8, #16
 80089a8:	f7f7 fdcc 	bl	8000544 <__aeabi_ui2d>
 80089ac:	2d09      	cmp	r5, #9
 80089ae:	4682      	mov	sl, r0
 80089b0:	468b      	mov	fp, r1
 80089b2:	dd13      	ble.n	80089dc <_strtod_l+0x3dc>
 80089b4:	4b7b      	ldr	r3, [pc, #492]	; (8008ba4 <_strtod_l+0x5a4>)
 80089b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80089ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089be:	f7f7 fe3b 	bl	8000638 <__aeabi_dmul>
 80089c2:	4682      	mov	sl, r0
 80089c4:	4648      	mov	r0, r9
 80089c6:	468b      	mov	fp, r1
 80089c8:	f7f7 fdbc 	bl	8000544 <__aeabi_ui2d>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4650      	mov	r0, sl
 80089d2:	4659      	mov	r1, fp
 80089d4:	f7f7 fc7a 	bl	80002cc <__adddf3>
 80089d8:	4682      	mov	sl, r0
 80089da:	468b      	mov	fp, r1
 80089dc:	2d0f      	cmp	r5, #15
 80089de:	dc38      	bgt.n	8008a52 <_strtod_l+0x452>
 80089e0:	9b06      	ldr	r3, [sp, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f43f ae50 	beq.w	8008688 <_strtod_l+0x88>
 80089e8:	dd24      	ble.n	8008a34 <_strtod_l+0x434>
 80089ea:	2b16      	cmp	r3, #22
 80089ec:	dc0b      	bgt.n	8008a06 <_strtod_l+0x406>
 80089ee:	496d      	ldr	r1, [pc, #436]	; (8008ba4 <_strtod_l+0x5a4>)
 80089f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f8:	4652      	mov	r2, sl
 80089fa:	465b      	mov	r3, fp
 80089fc:	f7f7 fe1c 	bl	8000638 <__aeabi_dmul>
 8008a00:	4682      	mov	sl, r0
 8008a02:	468b      	mov	fp, r1
 8008a04:	e640      	b.n	8008688 <_strtod_l+0x88>
 8008a06:	9a06      	ldr	r2, [sp, #24]
 8008a08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	db20      	blt.n	8008a52 <_strtod_l+0x452>
 8008a10:	4c64      	ldr	r4, [pc, #400]	; (8008ba4 <_strtod_l+0x5a4>)
 8008a12:	f1c5 050f 	rsb	r5, r5, #15
 8008a16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	465b      	mov	r3, fp
 8008a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a22:	f7f7 fe09 	bl	8000638 <__aeabi_dmul>
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	1b5d      	subs	r5, r3, r5
 8008a2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a32:	e7e3      	b.n	80089fc <_strtod_l+0x3fc>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	3316      	adds	r3, #22
 8008a38:	db0b      	blt.n	8008a52 <_strtod_l+0x452>
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	1b9e      	subs	r6, r3, r6
 8008a3e:	4b59      	ldr	r3, [pc, #356]	; (8008ba4 <_strtod_l+0x5a4>)
 8008a40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a48:	4650      	mov	r0, sl
 8008a4a:	4659      	mov	r1, fp
 8008a4c:	f7f7 ff1e 	bl	800088c <__aeabi_ddiv>
 8008a50:	e7d6      	b.n	8008a00 <_strtod_l+0x400>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	eba5 0808 	sub.w	r8, r5, r8
 8008a58:	4498      	add	r8, r3
 8008a5a:	f1b8 0f00 	cmp.w	r8, #0
 8008a5e:	dd74      	ble.n	8008b4a <_strtod_l+0x54a>
 8008a60:	f018 030f 	ands.w	r3, r8, #15
 8008a64:	d00a      	beq.n	8008a7c <_strtod_l+0x47c>
 8008a66:	494f      	ldr	r1, [pc, #316]	; (8008ba4 <_strtod_l+0x5a4>)
 8008a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	465b      	mov	r3, fp
 8008a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a74:	f7f7 fde0 	bl	8000638 <__aeabi_dmul>
 8008a78:	4682      	mov	sl, r0
 8008a7a:	468b      	mov	fp, r1
 8008a7c:	f038 080f 	bics.w	r8, r8, #15
 8008a80:	d04f      	beq.n	8008b22 <_strtod_l+0x522>
 8008a82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008a86:	dd22      	ble.n	8008ace <_strtod_l+0x4ce>
 8008a88:	2500      	movs	r5, #0
 8008a8a:	462e      	mov	r6, r5
 8008a8c:	9507      	str	r5, [sp, #28]
 8008a8e:	9505      	str	r5, [sp, #20]
 8008a90:	2322      	movs	r3, #34	; 0x22
 8008a92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008bac <_strtod_l+0x5ac>
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	f04f 0a00 	mov.w	sl, #0
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f43f adf2 	beq.w	8008688 <_strtod_l+0x88>
 8008aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f001 fec6 	bl	800a838 <_Bfree>
 8008aac:	9905      	ldr	r1, [sp, #20]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f001 fec2 	bl	800a838 <_Bfree>
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f001 febe 	bl	800a838 <_Bfree>
 8008abc:	9907      	ldr	r1, [sp, #28]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f001 feba 	bl	800a838 <_Bfree>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f001 feb6 	bl	800a838 <_Bfree>
 8008acc:	e5dc      	b.n	8008688 <_strtod_l+0x88>
 8008ace:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <_strtod_l+0x5a8>)
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ad8:	4650      	mov	r0, sl
 8008ada:	4659      	mov	r1, fp
 8008adc:	4699      	mov	r9, r3
 8008ade:	f1b8 0f01 	cmp.w	r8, #1
 8008ae2:	dc21      	bgt.n	8008b28 <_strtod_l+0x528>
 8008ae4:	b10b      	cbz	r3, 8008aea <_strtod_l+0x4ea>
 8008ae6:	4682      	mov	sl, r0
 8008ae8:	468b      	mov	fp, r1
 8008aea:	4b2f      	ldr	r3, [pc, #188]	; (8008ba8 <_strtod_l+0x5a8>)
 8008aec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008af0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008af4:	4652      	mov	r2, sl
 8008af6:	465b      	mov	r3, fp
 8008af8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008afc:	f7f7 fd9c 	bl	8000638 <__aeabi_dmul>
 8008b00:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <_strtod_l+0x5ac>)
 8008b02:	460a      	mov	r2, r1
 8008b04:	400b      	ands	r3, r1
 8008b06:	492a      	ldr	r1, [pc, #168]	; (8008bb0 <_strtod_l+0x5b0>)
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	4682      	mov	sl, r0
 8008b0c:	d8bc      	bhi.n	8008a88 <_strtod_l+0x488>
 8008b0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008b12:	428b      	cmp	r3, r1
 8008b14:	bf86      	itte	hi
 8008b16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008bb4 <_strtod_l+0x5b4>
 8008b1a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008b22:	2300      	movs	r3, #0
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	e084      	b.n	8008c32 <_strtod_l+0x632>
 8008b28:	f018 0f01 	tst.w	r8, #1
 8008b2c:	d005      	beq.n	8008b3a <_strtod_l+0x53a>
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fd80 	bl	8000638 <__aeabi_dmul>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	3208      	adds	r2, #8
 8008b3e:	f109 0901 	add.w	r9, r9, #1
 8008b42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b46:	9204      	str	r2, [sp, #16]
 8008b48:	e7c9      	b.n	8008ade <_strtod_l+0x4de>
 8008b4a:	d0ea      	beq.n	8008b22 <_strtod_l+0x522>
 8008b4c:	f1c8 0800 	rsb	r8, r8, #0
 8008b50:	f018 020f 	ands.w	r2, r8, #15
 8008b54:	d00a      	beq.n	8008b6c <_strtod_l+0x56c>
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <_strtod_l+0x5a4>)
 8008b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	4659      	mov	r1, fp
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	f7f7 fe92 	bl	800088c <__aeabi_ddiv>
 8008b68:	4682      	mov	sl, r0
 8008b6a:	468b      	mov	fp, r1
 8008b6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008b70:	d0d7      	beq.n	8008b22 <_strtod_l+0x522>
 8008b72:	f1b8 0f1f 	cmp.w	r8, #31
 8008b76:	dd1f      	ble.n	8008bb8 <_strtod_l+0x5b8>
 8008b78:	2500      	movs	r5, #0
 8008b7a:	462e      	mov	r6, r5
 8008b7c:	9507      	str	r5, [sp, #28]
 8008b7e:	9505      	str	r5, [sp, #20]
 8008b80:	2322      	movs	r3, #34	; 0x22
 8008b82:	f04f 0a00 	mov.w	sl, #0
 8008b86:	f04f 0b00 	mov.w	fp, #0
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	e786      	b.n	8008a9c <_strtod_l+0x49c>
 8008b8e:	bf00      	nop
 8008b90:	0800cf91 	.word	0x0800cf91
 8008b94:	0800cfd4 	.word	0x0800cfd4
 8008b98:	0800cf89 	.word	0x0800cf89
 8008b9c:	0800d114 	.word	0x0800d114
 8008ba0:	0800d3c0 	.word	0x0800d3c0
 8008ba4:	0800d2a0 	.word	0x0800d2a0
 8008ba8:	0800d278 	.word	0x0800d278
 8008bac:	7ff00000 	.word	0x7ff00000
 8008bb0:	7ca00000 	.word	0x7ca00000
 8008bb4:	7fefffff 	.word	0x7fefffff
 8008bb8:	f018 0310 	ands.w	r3, r8, #16
 8008bbc:	bf18      	it	ne
 8008bbe:	236a      	movne	r3, #106	; 0x6a
 8008bc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008f70 <_strtod_l+0x970>
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	4650      	mov	r0, sl
 8008bc8:	4659      	mov	r1, fp
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f018 0f01 	tst.w	r8, #1
 8008bd0:	d004      	beq.n	8008bdc <_strtod_l+0x5dc>
 8008bd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008bd6:	f7f7 fd2f 	bl	8000638 <__aeabi_dmul>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008be0:	f109 0908 	add.w	r9, r9, #8
 8008be4:	d1f2      	bne.n	8008bcc <_strtod_l+0x5cc>
 8008be6:	b10b      	cbz	r3, 8008bec <_strtod_l+0x5ec>
 8008be8:	4682      	mov	sl, r0
 8008bea:	468b      	mov	fp, r1
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	b1c3      	cbz	r3, 8008c22 <_strtod_l+0x622>
 8008bf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008bf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	4659      	mov	r1, fp
 8008bfc:	dd11      	ble.n	8008c22 <_strtod_l+0x622>
 8008bfe:	2b1f      	cmp	r3, #31
 8008c00:	f340 8124 	ble.w	8008e4c <_strtod_l+0x84c>
 8008c04:	2b34      	cmp	r3, #52	; 0x34
 8008c06:	bfde      	ittt	le
 8008c08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008c0c:	f04f 33ff 	movle.w	r3, #4294967295
 8008c10:	fa03 f202 	lslle.w	r2, r3, r2
 8008c14:	f04f 0a00 	mov.w	sl, #0
 8008c18:	bfcc      	ite	gt
 8008c1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008c1e:	ea02 0b01 	andle.w	fp, r2, r1
 8008c22:	2200      	movs	r2, #0
 8008c24:	2300      	movs	r3, #0
 8008c26:	4650      	mov	r0, sl
 8008c28:	4659      	mov	r1, fp
 8008c2a:	f7f7 ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d1a2      	bne.n	8008b78 <_strtod_l+0x578>
 8008c32:	9b07      	ldr	r3, [sp, #28]
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	9908      	ldr	r1, [sp, #32]
 8008c38:	462b      	mov	r3, r5
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f001 fe63 	bl	800a908 <__s2b>
 8008c42:	9007      	str	r0, [sp, #28]
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f43f af1f 	beq.w	8008a88 <_strtod_l+0x488>
 8008c4a:	9b05      	ldr	r3, [sp, #20]
 8008c4c:	1b9e      	subs	r6, r3, r6
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfb4      	ite	lt
 8008c54:	4633      	movlt	r3, r6
 8008c56:	2300      	movge	r3, #0
 8008c58:	930c      	str	r3, [sp, #48]	; 0x30
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c62:	9312      	str	r3, [sp, #72]	; 0x48
 8008c64:	462e      	mov	r6, r5
 8008c66:	9b07      	ldr	r3, [sp, #28]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	6859      	ldr	r1, [r3, #4]
 8008c6c:	f001 fda4 	bl	800a7b8 <_Balloc>
 8008c70:	9005      	str	r0, [sp, #20]
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f43f af0c 	beq.w	8008a90 <_strtod_l+0x490>
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	3202      	adds	r2, #2
 8008c7e:	f103 010c 	add.w	r1, r3, #12
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	300c      	adds	r0, #12
 8008c86:	f001 fd89 	bl	800a79c <memcpy>
 8008c8a:	ec4b ab10 	vmov	d0, sl, fp
 8008c8e:	aa1a      	add	r2, sp, #104	; 0x68
 8008c90:	a919      	add	r1, sp, #100	; 0x64
 8008c92:	4620      	mov	r0, r4
 8008c94:	f002 f97e 	bl	800af94 <__d2b>
 8008c98:	ec4b ab18 	vmov	d8, sl, fp
 8008c9c:	9018      	str	r0, [sp, #96]	; 0x60
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f43f aef6 	beq.w	8008a90 <_strtod_l+0x490>
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f001 fec8 	bl	800aa3c <__i2b>
 8008cac:	4606      	mov	r6, r0
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f aeee 	beq.w	8008a90 <_strtod_l+0x490>
 8008cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cb6:	9904      	ldr	r1, [sp, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bfab      	itete	ge
 8008cbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008cbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008cc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008cc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008cc6:	bfac      	ite	ge
 8008cc8:	eb03 0902 	addge.w	r9, r3, r2
 8008ccc:	1ad7      	sublt	r7, r2, r3
 8008cce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008cd0:	eba3 0801 	sub.w	r8, r3, r1
 8008cd4:	4490      	add	r8, r2
 8008cd6:	4ba1      	ldr	r3, [pc, #644]	; (8008f5c <_strtod_l+0x95c>)
 8008cd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cdc:	4598      	cmp	r8, r3
 8008cde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ce2:	f280 80c7 	bge.w	8008e74 <_strtod_l+0x874>
 8008ce6:	eba3 0308 	sub.w	r3, r3, r8
 8008cea:	2b1f      	cmp	r3, #31
 8008cec:	eba2 0203 	sub.w	r2, r2, r3
 8008cf0:	f04f 0101 	mov.w	r1, #1
 8008cf4:	f300 80b1 	bgt.w	8008e5a <_strtod_l+0x85a>
 8008cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9308      	str	r3, [sp, #32]
 8008d02:	eb09 0802 	add.w	r8, r9, r2
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	45c1      	cmp	r9, r8
 8008d0a:	4417      	add	r7, r2
 8008d0c:	441f      	add	r7, r3
 8008d0e:	464b      	mov	r3, r9
 8008d10:	bfa8      	it	ge
 8008d12:	4643      	movge	r3, r8
 8008d14:	42bb      	cmp	r3, r7
 8008d16:	bfa8      	it	ge
 8008d18:	463b      	movge	r3, r7
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bfc2      	ittt	gt
 8008d1e:	eba8 0803 	subgt.w	r8, r8, r3
 8008d22:	1aff      	subgt	r7, r7, r3
 8008d24:	eba9 0903 	subgt.w	r9, r9, r3
 8008d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd17      	ble.n	8008d5e <_strtod_l+0x75e>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	461a      	mov	r2, r3
 8008d32:	4620      	mov	r0, r4
 8008d34:	f001 ff42 	bl	800abbc <__pow5mult>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f43f aea8 	beq.w	8008a90 <_strtod_l+0x490>
 8008d40:	4601      	mov	r1, r0
 8008d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d44:	4620      	mov	r0, r4
 8008d46:	f001 fe8f 	bl	800aa68 <__multiply>
 8008d4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f ae9f 	beq.w	8008a90 <_strtod_l+0x490>
 8008d52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d54:	4620      	mov	r0, r4
 8008d56:	f001 fd6f 	bl	800a838 <_Bfree>
 8008d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5c:	9318      	str	r3, [sp, #96]	; 0x60
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	f300 808c 	bgt.w	8008e7e <_strtod_l+0x87e>
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dd08      	ble.n	8008d7e <_strtod_l+0x77e>
 8008d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d6e:	9905      	ldr	r1, [sp, #20]
 8008d70:	4620      	mov	r0, r4
 8008d72:	f001 ff23 	bl	800abbc <__pow5mult>
 8008d76:	9005      	str	r0, [sp, #20]
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f43f ae89 	beq.w	8008a90 <_strtod_l+0x490>
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	dd08      	ble.n	8008d94 <_strtod_l+0x794>
 8008d82:	9905      	ldr	r1, [sp, #20]
 8008d84:	463a      	mov	r2, r7
 8008d86:	4620      	mov	r0, r4
 8008d88:	f001 ff72 	bl	800ac70 <__lshift>
 8008d8c:	9005      	str	r0, [sp, #20]
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f ae7e 	beq.w	8008a90 <_strtod_l+0x490>
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	dd08      	ble.n	8008dac <_strtod_l+0x7ac>
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	464a      	mov	r2, r9
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f001 ff66 	bl	800ac70 <__lshift>
 8008da4:	4606      	mov	r6, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f43f ae72 	beq.w	8008a90 <_strtod_l+0x490>
 8008dac:	9a05      	ldr	r2, [sp, #20]
 8008dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008db0:	4620      	mov	r0, r4
 8008db2:	f001 ffe9 	bl	800ad88 <__mdiff>
 8008db6:	4605      	mov	r5, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	f43f ae69 	beq.w	8008a90 <_strtod_l+0x490>
 8008dbe:	68c3      	ldr	r3, [r0, #12]
 8008dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60c3      	str	r3, [r0, #12]
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	f001 ffc2 	bl	800ad50 <__mcmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	da60      	bge.n	8008e92 <_strtod_l+0x892>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd2:	ea53 030a 	orrs.w	r3, r3, sl
 8008dd6:	f040 8082 	bne.w	8008ede <_strtod_l+0x8de>
 8008dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d17d      	bne.n	8008ede <_strtod_l+0x8de>
 8008de2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008de6:	0d1b      	lsrs	r3, r3, #20
 8008de8:	051b      	lsls	r3, r3, #20
 8008dea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dee:	d976      	bls.n	8008ede <_strtod_l+0x8de>
 8008df0:	696b      	ldr	r3, [r5, #20]
 8008df2:	b913      	cbnz	r3, 8008dfa <_strtod_l+0x7fa>
 8008df4:	692b      	ldr	r3, [r5, #16]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	dd71      	ble.n	8008ede <_strtod_l+0x8de>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f001 ff36 	bl	800ac70 <__lshift>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4605      	mov	r5, r0
 8008e08:	f001 ffa2 	bl	800ad50 <__mcmp>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	dd66      	ble.n	8008ede <_strtod_l+0x8de>
 8008e10:	9904      	ldr	r1, [sp, #16]
 8008e12:	4a53      	ldr	r2, [pc, #332]	; (8008f60 <_strtod_l+0x960>)
 8008e14:	465b      	mov	r3, fp
 8008e16:	2900      	cmp	r1, #0
 8008e18:	f000 8081 	beq.w	8008f1e <_strtod_l+0x91e>
 8008e1c:	ea02 010b 	and.w	r1, r2, fp
 8008e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e24:	dc7b      	bgt.n	8008f1e <_strtod_l+0x91e>
 8008e26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e2a:	f77f aea9 	ble.w	8008b80 <_strtod_l+0x580>
 8008e2e:	4b4d      	ldr	r3, [pc, #308]	; (8008f64 <_strtod_l+0x964>)
 8008e30:	4650      	mov	r0, sl
 8008e32:	4659      	mov	r1, fp
 8008e34:	2200      	movs	r2, #0
 8008e36:	f7f7 fbff 	bl	8000638 <__aeabi_dmul>
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4303      	orrs	r3, r0
 8008e3e:	bf08      	it	eq
 8008e40:	2322      	moveq	r3, #34	; 0x22
 8008e42:	4682      	mov	sl, r0
 8008e44:	468b      	mov	fp, r1
 8008e46:	bf08      	it	eq
 8008e48:	6023      	streq	r3, [r4, #0]
 8008e4a:	e62b      	b.n	8008aa4 <_strtod_l+0x4a4>
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	ea03 0a0a 	and.w	sl, r3, sl
 8008e58:	e6e3      	b.n	8008c22 <_strtod_l+0x622>
 8008e5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008e5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008e62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008e66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008e6a:	fa01 f308 	lsl.w	r3, r1, r8
 8008e6e:	9308      	str	r3, [sp, #32]
 8008e70:	910d      	str	r1, [sp, #52]	; 0x34
 8008e72:	e746      	b.n	8008d02 <_strtod_l+0x702>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9308      	str	r3, [sp, #32]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e7c:	e741      	b.n	8008d02 <_strtod_l+0x702>
 8008e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e80:	4642      	mov	r2, r8
 8008e82:	4620      	mov	r0, r4
 8008e84:	f001 fef4 	bl	800ac70 <__lshift>
 8008e88:	9018      	str	r0, [sp, #96]	; 0x60
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f47f af6b 	bne.w	8008d66 <_strtod_l+0x766>
 8008e90:	e5fe      	b.n	8008a90 <_strtod_l+0x490>
 8008e92:	465f      	mov	r7, fp
 8008e94:	d16e      	bne.n	8008f74 <_strtod_l+0x974>
 8008e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e9c:	b342      	cbz	r2, 8008ef0 <_strtod_l+0x8f0>
 8008e9e:	4a32      	ldr	r2, [pc, #200]	; (8008f68 <_strtod_l+0x968>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d128      	bne.n	8008ef6 <_strtod_l+0x8f6>
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	b1eb      	cbz	r3, 8008ee6 <_strtod_l+0x8e6>
 8008eaa:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <_strtod_l+0x960>)
 8008eac:	403b      	ands	r3, r7
 8008eae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb6:	d819      	bhi.n	8008eec <_strtod_l+0x8ec>
 8008eb8:	0d1b      	lsrs	r3, r3, #20
 8008eba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	d117      	bne.n	8008ef6 <_strtod_l+0x8f6>
 8008ec6:	4b29      	ldr	r3, [pc, #164]	; (8008f6c <_strtod_l+0x96c>)
 8008ec8:	429f      	cmp	r7, r3
 8008eca:	d102      	bne.n	8008ed2 <_strtod_l+0x8d2>
 8008ecc:	3101      	adds	r1, #1
 8008ece:	f43f addf 	beq.w	8008a90 <_strtod_l+0x490>
 8008ed2:	4b23      	ldr	r3, [pc, #140]	; (8008f60 <_strtod_l+0x960>)
 8008ed4:	403b      	ands	r3, r7
 8008ed6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008eda:	f04f 0a00 	mov.w	sl, #0
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1a4      	bne.n	8008e2e <_strtod_l+0x82e>
 8008ee4:	e5de      	b.n	8008aa4 <_strtod_l+0x4a4>
 8008ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eea:	e7ea      	b.n	8008ec2 <_strtod_l+0x8c2>
 8008eec:	4613      	mov	r3, r2
 8008eee:	e7e8      	b.n	8008ec2 <_strtod_l+0x8c2>
 8008ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ef4:	d08c      	beq.n	8008e10 <_strtod_l+0x810>
 8008ef6:	9b08      	ldr	r3, [sp, #32]
 8008ef8:	b1db      	cbz	r3, 8008f32 <_strtod_l+0x932>
 8008efa:	423b      	tst	r3, r7
 8008efc:	d0ef      	beq.n	8008ede <_strtod_l+0x8de>
 8008efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f00:	9a04      	ldr	r2, [sp, #16]
 8008f02:	4650      	mov	r0, sl
 8008f04:	4659      	mov	r1, fp
 8008f06:	b1c3      	cbz	r3, 8008f3a <_strtod_l+0x93a>
 8008f08:	f7ff fb5b 	bl	80085c2 <sulp>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	ec51 0b18 	vmov	r0, r1, d8
 8008f14:	f7f7 f9da 	bl	80002cc <__adddf3>
 8008f18:	4682      	mov	sl, r0
 8008f1a:	468b      	mov	fp, r1
 8008f1c:	e7df      	b.n	8008ede <_strtod_l+0x8de>
 8008f1e:	4013      	ands	r3, r2
 8008f20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f2c:	f04f 3aff 	mov.w	sl, #4294967295
 8008f30:	e7d5      	b.n	8008ede <_strtod_l+0x8de>
 8008f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f34:	ea13 0f0a 	tst.w	r3, sl
 8008f38:	e7e0      	b.n	8008efc <_strtod_l+0x8fc>
 8008f3a:	f7ff fb42 	bl	80085c2 <sulp>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	ec51 0b18 	vmov	r0, r1, d8
 8008f46:	f7f7 f9bf 	bl	80002c8 <__aeabi_dsub>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	f7f7 fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0c1      	beq.n	8008ede <_strtod_l+0x8de>
 8008f5a:	e611      	b.n	8008b80 <_strtod_l+0x580>
 8008f5c:	fffffc02 	.word	0xfffffc02
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	39500000 	.word	0x39500000
 8008f68:	000fffff 	.word	0x000fffff
 8008f6c:	7fefffff 	.word	0x7fefffff
 8008f70:	0800cfe8 	.word	0x0800cfe8
 8008f74:	4631      	mov	r1, r6
 8008f76:	4628      	mov	r0, r5
 8008f78:	f002 f868 	bl	800b04c <__ratio>
 8008f7c:	ec59 8b10 	vmov	r8, r9, d0
 8008f80:	ee10 0a10 	vmov	r0, s0
 8008f84:	2200      	movs	r2, #0
 8008f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 fdd0 	bl	8000b30 <__aeabi_dcmple>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d07a      	beq.n	800908a <_strtod_l+0xa8a>
 8008f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04a      	beq.n	8009030 <_strtod_l+0xa30>
 8008f9a:	4b95      	ldr	r3, [pc, #596]	; (80091f0 <_strtod_l+0xbf0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008fa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80091f0 <_strtod_l+0xbf0>
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	4b92      	ldr	r3, [pc, #584]	; (80091f4 <_strtod_l+0xbf4>)
 8008fac:	403b      	ands	r3, r7
 8008fae:	930d      	str	r3, [sp, #52]	; 0x34
 8008fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb2:	4b91      	ldr	r3, [pc, #580]	; (80091f8 <_strtod_l+0xbf8>)
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	f040 80b0 	bne.w	800911a <_strtod_l+0xb1a>
 8008fba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008fc2:	ec4b ab10 	vmov	d0, sl, fp
 8008fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fca:	f001 ff67 	bl	800ae9c <__ulp>
 8008fce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fd2:	ec53 2b10 	vmov	r2, r3, d0
 8008fd6:	f7f7 fb2f 	bl	8000638 <__aeabi_dmul>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	f7f7 f975 	bl	80002cc <__adddf3>
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4983      	ldr	r1, [pc, #524]	; (80091f4 <_strtod_l+0xbf4>)
 8008fe6:	4a85      	ldr	r2, [pc, #532]	; (80091fc <_strtod_l+0xbfc>)
 8008fe8:	4019      	ands	r1, r3
 8008fea:	4291      	cmp	r1, r2
 8008fec:	4682      	mov	sl, r0
 8008fee:	d960      	bls.n	80090b2 <_strtod_l+0xab2>
 8008ff0:	ee18 3a90 	vmov	r3, s17
 8008ff4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d104      	bne.n	8009006 <_strtod_l+0xa06>
 8008ffc:	ee18 3a10 	vmov	r3, s16
 8009000:	3301      	adds	r3, #1
 8009002:	f43f ad45 	beq.w	8008a90 <_strtod_l+0x490>
 8009006:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009208 <_strtod_l+0xc08>
 800900a:	f04f 3aff 	mov.w	sl, #4294967295
 800900e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009010:	4620      	mov	r0, r4
 8009012:	f001 fc11 	bl	800a838 <_Bfree>
 8009016:	9905      	ldr	r1, [sp, #20]
 8009018:	4620      	mov	r0, r4
 800901a:	f001 fc0d 	bl	800a838 <_Bfree>
 800901e:	4631      	mov	r1, r6
 8009020:	4620      	mov	r0, r4
 8009022:	f001 fc09 	bl	800a838 <_Bfree>
 8009026:	4629      	mov	r1, r5
 8009028:	4620      	mov	r0, r4
 800902a:	f001 fc05 	bl	800a838 <_Bfree>
 800902e:	e61a      	b.n	8008c66 <_strtod_l+0x666>
 8009030:	f1ba 0f00 	cmp.w	sl, #0
 8009034:	d11b      	bne.n	800906e <_strtod_l+0xa6e>
 8009036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800903a:	b9f3      	cbnz	r3, 800907a <_strtod_l+0xa7a>
 800903c:	4b6c      	ldr	r3, [pc, #432]	; (80091f0 <_strtod_l+0xbf0>)
 800903e:	2200      	movs	r2, #0
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fd6a 	bl	8000b1c <__aeabi_dcmplt>
 8009048:	b9d0      	cbnz	r0, 8009080 <_strtod_l+0xa80>
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	4b6c      	ldr	r3, [pc, #432]	; (8009200 <_strtod_l+0xc00>)
 8009050:	2200      	movs	r2, #0
 8009052:	f7f7 faf1 	bl	8000638 <__aeabi_dmul>
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800905e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009062:	9315      	str	r3, [sp, #84]	; 0x54
 8009064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800906c:	e79d      	b.n	8008faa <_strtod_l+0x9aa>
 800906e:	f1ba 0f01 	cmp.w	sl, #1
 8009072:	d102      	bne.n	800907a <_strtod_l+0xa7a>
 8009074:	2f00      	cmp	r7, #0
 8009076:	f43f ad83 	beq.w	8008b80 <_strtod_l+0x580>
 800907a:	4b62      	ldr	r3, [pc, #392]	; (8009204 <_strtod_l+0xc04>)
 800907c:	2200      	movs	r2, #0
 800907e:	e78e      	b.n	8008f9e <_strtod_l+0x99e>
 8009080:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009200 <_strtod_l+0xc00>
 8009084:	f04f 0800 	mov.w	r8, #0
 8009088:	e7e7      	b.n	800905a <_strtod_l+0xa5a>
 800908a:	4b5d      	ldr	r3, [pc, #372]	; (8009200 <_strtod_l+0xc00>)
 800908c:	4640      	mov	r0, r8
 800908e:	4649      	mov	r1, r9
 8009090:	2200      	movs	r2, #0
 8009092:	f7f7 fad1 	bl	8000638 <__aeabi_dmul>
 8009096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009098:	4680      	mov	r8, r0
 800909a:	4689      	mov	r9, r1
 800909c:	b933      	cbnz	r3, 80090ac <_strtod_l+0xaac>
 800909e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a2:	900e      	str	r0, [sp, #56]	; 0x38
 80090a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80090aa:	e7dd      	b.n	8009068 <_strtod_l+0xa68>
 80090ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80090b0:	e7f9      	b.n	80090a6 <_strtod_l+0xaa6>
 80090b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1a8      	bne.n	800900e <_strtod_l+0xa0e>
 80090bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090c2:	0d1b      	lsrs	r3, r3, #20
 80090c4:	051b      	lsls	r3, r3, #20
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d1a1      	bne.n	800900e <_strtod_l+0xa0e>
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 ff71 	bl	8000fb4 <__aeabi_d2lz>
 80090d2:	f7f7 fa83 	bl	80005dc <__aeabi_l2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 f8f3 	bl	80002c8 <__aeabi_dsub>
 80090e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090e8:	ea43 030a 	orr.w	r3, r3, sl
 80090ec:	4313      	orrs	r3, r2
 80090ee:	4680      	mov	r8, r0
 80090f0:	4689      	mov	r9, r1
 80090f2:	d055      	beq.n	80091a0 <_strtod_l+0xba0>
 80090f4:	a336      	add	r3, pc, #216	; (adr r3, 80091d0 <_strtod_l+0xbd0>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	f47f acd0 	bne.w	8008aa4 <_strtod_l+0x4a4>
 8009104:	a334      	add	r3, pc, #208	; (adr r3, 80091d8 <_strtod_l+0xbd8>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 fd23 	bl	8000b58 <__aeabi_dcmpgt>
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f af7b 	beq.w	800900e <_strtod_l+0xa0e>
 8009118:	e4c4      	b.n	8008aa4 <_strtod_l+0x4a4>
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	b333      	cbz	r3, 800916c <_strtod_l+0xb6c>
 800911e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009120:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009124:	d822      	bhi.n	800916c <_strtod_l+0xb6c>
 8009126:	a32e      	add	r3, pc, #184	; (adr r3, 80091e0 <_strtod_l+0xbe0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	4640      	mov	r0, r8
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fcfe 	bl	8000b30 <__aeabi_dcmple>
 8009134:	b1a0      	cbz	r0, 8009160 <_strtod_l+0xb60>
 8009136:	4649      	mov	r1, r9
 8009138:	4640      	mov	r0, r8
 800913a:	f7f7 fd55 	bl	8000be8 <__aeabi_d2uiz>
 800913e:	2801      	cmp	r0, #1
 8009140:	bf38      	it	cc
 8009142:	2001      	movcc	r0, #1
 8009144:	f7f7 f9fe 	bl	8000544 <__aeabi_ui2d>
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	4680      	mov	r8, r0
 800914c:	4689      	mov	r9, r1
 800914e:	bb23      	cbnz	r3, 800919a <_strtod_l+0xb9a>
 8009150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009154:	9010      	str	r0, [sp, #64]	; 0x40
 8009156:	9311      	str	r3, [sp, #68]	; 0x44
 8009158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800915c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009164:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
 800916c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009170:	eeb0 0a48 	vmov.f32	s0, s16
 8009174:	eef0 0a68 	vmov.f32	s1, s17
 8009178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800917c:	f001 fe8e 	bl	800ae9c <__ulp>
 8009180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009184:	ec53 2b10 	vmov	r2, r3, d0
 8009188:	f7f7 fa56 	bl	8000638 <__aeabi_dmul>
 800918c:	ec53 2b18 	vmov	r2, r3, d8
 8009190:	f7f7 f89c 	bl	80002cc <__adddf3>
 8009194:	4682      	mov	sl, r0
 8009196:	468b      	mov	fp, r1
 8009198:	e78d      	b.n	80090b6 <_strtod_l+0xab6>
 800919a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800919e:	e7db      	b.n	8009158 <_strtod_l+0xb58>
 80091a0:	a311      	add	r3, pc, #68	; (adr r3, 80091e8 <_strtod_l+0xbe8>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 fcb9 	bl	8000b1c <__aeabi_dcmplt>
 80091aa:	e7b2      	b.n	8009112 <_strtod_l+0xb12>
 80091ac:	2300      	movs	r3, #0
 80091ae:	930a      	str	r3, [sp, #40]	; 0x28
 80091b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	f7ff ba6b 	b.w	8008690 <_strtod_l+0x90>
 80091ba:	2a65      	cmp	r2, #101	; 0x65
 80091bc:	f43f ab5f 	beq.w	800887e <_strtod_l+0x27e>
 80091c0:	2a45      	cmp	r2, #69	; 0x45
 80091c2:	f43f ab5c 	beq.w	800887e <_strtod_l+0x27e>
 80091c6:	2301      	movs	r3, #1
 80091c8:	f7ff bb94 	b.w	80088f4 <_strtod_l+0x2f4>
 80091cc:	f3af 8000 	nop.w
 80091d0:	94a03595 	.word	0x94a03595
 80091d4:	3fdfffff 	.word	0x3fdfffff
 80091d8:	35afe535 	.word	0x35afe535
 80091dc:	3fe00000 	.word	0x3fe00000
 80091e0:	ffc00000 	.word	0xffc00000
 80091e4:	41dfffff 	.word	0x41dfffff
 80091e8:	94a03595 	.word	0x94a03595
 80091ec:	3fcfffff 	.word	0x3fcfffff
 80091f0:	3ff00000 	.word	0x3ff00000
 80091f4:	7ff00000 	.word	0x7ff00000
 80091f8:	7fe00000 	.word	0x7fe00000
 80091fc:	7c9fffff 	.word	0x7c9fffff
 8009200:	3fe00000 	.word	0x3fe00000
 8009204:	bff00000 	.word	0xbff00000
 8009208:	7fefffff 	.word	0x7fefffff

0800920c <_strtod_r>:
 800920c:	4b01      	ldr	r3, [pc, #4]	; (8009214 <_strtod_r+0x8>)
 800920e:	f7ff b9f7 	b.w	8008600 <_strtod_l>
 8009212:	bf00      	nop
 8009214:	20000074 	.word	0x20000074

08009218 <_strtol_l.constprop.0>:
 8009218:	2b01      	cmp	r3, #1
 800921a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921e:	d001      	beq.n	8009224 <_strtol_l.constprop.0+0xc>
 8009220:	2b24      	cmp	r3, #36	; 0x24
 8009222:	d906      	bls.n	8009232 <_strtol_l.constprop.0+0x1a>
 8009224:	f7fe fab8 	bl	8007798 <__errno>
 8009228:	2316      	movs	r3, #22
 800922a:	6003      	str	r3, [r0, #0]
 800922c:	2000      	movs	r0, #0
 800922e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009232:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009318 <_strtol_l.constprop.0+0x100>
 8009236:	460d      	mov	r5, r1
 8009238:	462e      	mov	r6, r5
 800923a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800923e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009242:	f017 0708 	ands.w	r7, r7, #8
 8009246:	d1f7      	bne.n	8009238 <_strtol_l.constprop.0+0x20>
 8009248:	2c2d      	cmp	r4, #45	; 0x2d
 800924a:	d132      	bne.n	80092b2 <_strtol_l.constprop.0+0x9a>
 800924c:	782c      	ldrb	r4, [r5, #0]
 800924e:	2701      	movs	r7, #1
 8009250:	1cb5      	adds	r5, r6, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d05b      	beq.n	800930e <_strtol_l.constprop.0+0xf6>
 8009256:	2b10      	cmp	r3, #16
 8009258:	d109      	bne.n	800926e <_strtol_l.constprop.0+0x56>
 800925a:	2c30      	cmp	r4, #48	; 0x30
 800925c:	d107      	bne.n	800926e <_strtol_l.constprop.0+0x56>
 800925e:	782c      	ldrb	r4, [r5, #0]
 8009260:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009264:	2c58      	cmp	r4, #88	; 0x58
 8009266:	d14d      	bne.n	8009304 <_strtol_l.constprop.0+0xec>
 8009268:	786c      	ldrb	r4, [r5, #1]
 800926a:	2310      	movs	r3, #16
 800926c:	3502      	adds	r5, #2
 800926e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009272:	f108 38ff 	add.w	r8, r8, #4294967295
 8009276:	f04f 0c00 	mov.w	ip, #0
 800927a:	fbb8 f9f3 	udiv	r9, r8, r3
 800927e:	4666      	mov	r6, ip
 8009280:	fb03 8a19 	mls	sl, r3, r9, r8
 8009284:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009288:	f1be 0f09 	cmp.w	lr, #9
 800928c:	d816      	bhi.n	80092bc <_strtol_l.constprop.0+0xa4>
 800928e:	4674      	mov	r4, lr
 8009290:	42a3      	cmp	r3, r4
 8009292:	dd24      	ble.n	80092de <_strtol_l.constprop.0+0xc6>
 8009294:	f1bc 0f00 	cmp.w	ip, #0
 8009298:	db1e      	blt.n	80092d8 <_strtol_l.constprop.0+0xc0>
 800929a:	45b1      	cmp	r9, r6
 800929c:	d31c      	bcc.n	80092d8 <_strtol_l.constprop.0+0xc0>
 800929e:	d101      	bne.n	80092a4 <_strtol_l.constprop.0+0x8c>
 80092a0:	45a2      	cmp	sl, r4
 80092a2:	db19      	blt.n	80092d8 <_strtol_l.constprop.0+0xc0>
 80092a4:	fb06 4603 	mla	r6, r6, r3, r4
 80092a8:	f04f 0c01 	mov.w	ip, #1
 80092ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092b0:	e7e8      	b.n	8009284 <_strtol_l.constprop.0+0x6c>
 80092b2:	2c2b      	cmp	r4, #43	; 0x2b
 80092b4:	bf04      	itt	eq
 80092b6:	782c      	ldrbeq	r4, [r5, #0]
 80092b8:	1cb5      	addeq	r5, r6, #2
 80092ba:	e7ca      	b.n	8009252 <_strtol_l.constprop.0+0x3a>
 80092bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80092c0:	f1be 0f19 	cmp.w	lr, #25
 80092c4:	d801      	bhi.n	80092ca <_strtol_l.constprop.0+0xb2>
 80092c6:	3c37      	subs	r4, #55	; 0x37
 80092c8:	e7e2      	b.n	8009290 <_strtol_l.constprop.0+0x78>
 80092ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80092ce:	f1be 0f19 	cmp.w	lr, #25
 80092d2:	d804      	bhi.n	80092de <_strtol_l.constprop.0+0xc6>
 80092d4:	3c57      	subs	r4, #87	; 0x57
 80092d6:	e7db      	b.n	8009290 <_strtol_l.constprop.0+0x78>
 80092d8:	f04f 3cff 	mov.w	ip, #4294967295
 80092dc:	e7e6      	b.n	80092ac <_strtol_l.constprop.0+0x94>
 80092de:	f1bc 0f00 	cmp.w	ip, #0
 80092e2:	da05      	bge.n	80092f0 <_strtol_l.constprop.0+0xd8>
 80092e4:	2322      	movs	r3, #34	; 0x22
 80092e6:	6003      	str	r3, [r0, #0]
 80092e8:	4646      	mov	r6, r8
 80092ea:	b942      	cbnz	r2, 80092fe <_strtol_l.constprop.0+0xe6>
 80092ec:	4630      	mov	r0, r6
 80092ee:	e79e      	b.n	800922e <_strtol_l.constprop.0+0x16>
 80092f0:	b107      	cbz	r7, 80092f4 <_strtol_l.constprop.0+0xdc>
 80092f2:	4276      	negs	r6, r6
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d0f9      	beq.n	80092ec <_strtol_l.constprop.0+0xd4>
 80092f8:	f1bc 0f00 	cmp.w	ip, #0
 80092fc:	d000      	beq.n	8009300 <_strtol_l.constprop.0+0xe8>
 80092fe:	1e69      	subs	r1, r5, #1
 8009300:	6011      	str	r1, [r2, #0]
 8009302:	e7f3      	b.n	80092ec <_strtol_l.constprop.0+0xd4>
 8009304:	2430      	movs	r4, #48	; 0x30
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1b1      	bne.n	800926e <_strtol_l.constprop.0+0x56>
 800930a:	2308      	movs	r3, #8
 800930c:	e7af      	b.n	800926e <_strtol_l.constprop.0+0x56>
 800930e:	2c30      	cmp	r4, #48	; 0x30
 8009310:	d0a5      	beq.n	800925e <_strtol_l.constprop.0+0x46>
 8009312:	230a      	movs	r3, #10
 8009314:	e7ab      	b.n	800926e <_strtol_l.constprop.0+0x56>
 8009316:	bf00      	nop
 8009318:	0800d011 	.word	0x0800d011

0800931c <_strtol_r>:
 800931c:	f7ff bf7c 	b.w	8009218 <_strtol_l.constprop.0>

08009320 <_write_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	; (8009340 <_write_r+0x20>)
 8009324:	4604      	mov	r4, r0
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	2200      	movs	r2, #0
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7f9 ffaf 	bl	8003292 <_write>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_write_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_write_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	200006f0 	.word	0x200006f0

08009344 <_close_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	; (8009360 <_close_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f9 ffbb 	bl	80032ca <_close>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_close_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_close_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200006f0 	.word	0x200006f0

08009364 <quorem>:
 8009364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	6903      	ldr	r3, [r0, #16]
 800936a:	690c      	ldr	r4, [r1, #16]
 800936c:	42a3      	cmp	r3, r4
 800936e:	4607      	mov	r7, r0
 8009370:	f2c0 8081 	blt.w	8009476 <quorem+0x112>
 8009374:	3c01      	subs	r4, #1
 8009376:	f101 0814 	add.w	r8, r1, #20
 800937a:	f100 0514 	add.w	r5, r0, #20
 800937e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800938c:	3301      	adds	r3, #1
 800938e:	429a      	cmp	r2, r3
 8009390:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009394:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009398:	fbb2 f6f3 	udiv	r6, r2, r3
 800939c:	d331      	bcc.n	8009402 <quorem+0x9e>
 800939e:	f04f 0e00 	mov.w	lr, #0
 80093a2:	4640      	mov	r0, r8
 80093a4:	46ac      	mov	ip, r5
 80093a6:	46f2      	mov	sl, lr
 80093a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80093ac:	b293      	uxth	r3, r2
 80093ae:	fb06 e303 	mla	r3, r6, r3, lr
 80093b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	ebaa 0303 	sub.w	r3, sl, r3
 80093bc:	f8dc a000 	ldr.w	sl, [ip]
 80093c0:	0c12      	lsrs	r2, r2, #16
 80093c2:	fa13 f38a 	uxtah	r3, r3, sl
 80093c6:	fb06 e202 	mla	r2, r6, r2, lr
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	9b00      	ldr	r3, [sp, #0]
 80093ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093d2:	b292      	uxth	r2, r2
 80093d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80093e0:	4581      	cmp	r9, r0
 80093e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e6:	f84c 3b04 	str.w	r3, [ip], #4
 80093ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093ee:	d2db      	bcs.n	80093a8 <quorem+0x44>
 80093f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80093f4:	b92b      	cbnz	r3, 8009402 <quorem+0x9e>
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	3b04      	subs	r3, #4
 80093fa:	429d      	cmp	r5, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	d32e      	bcc.n	800945e <quorem+0xfa>
 8009400:	613c      	str	r4, [r7, #16]
 8009402:	4638      	mov	r0, r7
 8009404:	f001 fca4 	bl	800ad50 <__mcmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	db24      	blt.n	8009456 <quorem+0xf2>
 800940c:	3601      	adds	r6, #1
 800940e:	4628      	mov	r0, r5
 8009410:	f04f 0c00 	mov.w	ip, #0
 8009414:	f858 2b04 	ldr.w	r2, [r8], #4
 8009418:	f8d0 e000 	ldr.w	lr, [r0]
 800941c:	b293      	uxth	r3, r2
 800941e:	ebac 0303 	sub.w	r3, ip, r3
 8009422:	0c12      	lsrs	r2, r2, #16
 8009424:	fa13 f38e 	uxtah	r3, r3, lr
 8009428:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800942c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009430:	b29b      	uxth	r3, r3
 8009432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009436:	45c1      	cmp	r9, r8
 8009438:	f840 3b04 	str.w	r3, [r0], #4
 800943c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009440:	d2e8      	bcs.n	8009414 <quorem+0xb0>
 8009442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800944a:	b922      	cbnz	r2, 8009456 <quorem+0xf2>
 800944c:	3b04      	subs	r3, #4
 800944e:	429d      	cmp	r5, r3
 8009450:	461a      	mov	r2, r3
 8009452:	d30a      	bcc.n	800946a <quorem+0x106>
 8009454:	613c      	str	r4, [r7, #16]
 8009456:	4630      	mov	r0, r6
 8009458:	b003      	add	sp, #12
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	3b04      	subs	r3, #4
 8009462:	2a00      	cmp	r2, #0
 8009464:	d1cc      	bne.n	8009400 <quorem+0x9c>
 8009466:	3c01      	subs	r4, #1
 8009468:	e7c7      	b.n	80093fa <quorem+0x96>
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	3b04      	subs	r3, #4
 800946e:	2a00      	cmp	r2, #0
 8009470:	d1f0      	bne.n	8009454 <quorem+0xf0>
 8009472:	3c01      	subs	r4, #1
 8009474:	e7eb      	b.n	800944e <quorem+0xea>
 8009476:	2000      	movs	r0, #0
 8009478:	e7ee      	b.n	8009458 <quorem+0xf4>
 800947a:	0000      	movs	r0, r0
 800947c:	0000      	movs	r0, r0
	...

08009480 <_dtoa_r>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	ed2d 8b04 	vpush	{d8-d9}
 8009488:	ec57 6b10 	vmov	r6, r7, d0
 800948c:	b093      	sub	sp, #76	; 0x4c
 800948e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009490:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009494:	9106      	str	r1, [sp, #24]
 8009496:	ee10 aa10 	vmov	sl, s0
 800949a:	4604      	mov	r4, r0
 800949c:	9209      	str	r2, [sp, #36]	; 0x24
 800949e:	930c      	str	r3, [sp, #48]	; 0x30
 80094a0:	46bb      	mov	fp, r7
 80094a2:	b975      	cbnz	r5, 80094c2 <_dtoa_r+0x42>
 80094a4:	2010      	movs	r0, #16
 80094a6:	f001 f95f 	bl	800a768 <malloc>
 80094aa:	4602      	mov	r2, r0
 80094ac:	6260      	str	r0, [r4, #36]	; 0x24
 80094ae:	b920      	cbnz	r0, 80094ba <_dtoa_r+0x3a>
 80094b0:	4ba7      	ldr	r3, [pc, #668]	; (8009750 <_dtoa_r+0x2d0>)
 80094b2:	21ea      	movs	r1, #234	; 0xea
 80094b4:	48a7      	ldr	r0, [pc, #668]	; (8009754 <_dtoa_r+0x2d4>)
 80094b6:	f002 f8e1 	bl	800b67c <__assert_func>
 80094ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094be:	6005      	str	r5, [r0, #0]
 80094c0:	60c5      	str	r5, [r0, #12]
 80094c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c4:	6819      	ldr	r1, [r3, #0]
 80094c6:	b151      	cbz	r1, 80094de <_dtoa_r+0x5e>
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	604a      	str	r2, [r1, #4]
 80094cc:	2301      	movs	r3, #1
 80094ce:	4093      	lsls	r3, r2
 80094d0:	608b      	str	r3, [r1, #8]
 80094d2:	4620      	mov	r0, r4
 80094d4:	f001 f9b0 	bl	800a838 <_Bfree>
 80094d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	1e3b      	subs	r3, r7, #0
 80094e0:	bfaa      	itet	ge
 80094e2:	2300      	movge	r3, #0
 80094e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80094e8:	f8c8 3000 	strge.w	r3, [r8]
 80094ec:	4b9a      	ldr	r3, [pc, #616]	; (8009758 <_dtoa_r+0x2d8>)
 80094ee:	bfbc      	itt	lt
 80094f0:	2201      	movlt	r2, #1
 80094f2:	f8c8 2000 	strlt.w	r2, [r8]
 80094f6:	ea33 030b 	bics.w	r3, r3, fp
 80094fa:	d11b      	bne.n	8009534 <_dtoa_r+0xb4>
 80094fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009508:	4333      	orrs	r3, r6
 800950a:	f000 8592 	beq.w	800a032 <_dtoa_r+0xbb2>
 800950e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009510:	b963      	cbnz	r3, 800952c <_dtoa_r+0xac>
 8009512:	4b92      	ldr	r3, [pc, #584]	; (800975c <_dtoa_r+0x2dc>)
 8009514:	e022      	b.n	800955c <_dtoa_r+0xdc>
 8009516:	4b92      	ldr	r3, [pc, #584]	; (8009760 <_dtoa_r+0x2e0>)
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	3308      	adds	r3, #8
 800951c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	9801      	ldr	r0, [sp, #4]
 8009522:	b013      	add	sp, #76	; 0x4c
 8009524:	ecbd 8b04 	vpop	{d8-d9}
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	4b8b      	ldr	r3, [pc, #556]	; (800975c <_dtoa_r+0x2dc>)
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	3303      	adds	r3, #3
 8009532:	e7f3      	b.n	800951c <_dtoa_r+0x9c>
 8009534:	2200      	movs	r2, #0
 8009536:	2300      	movs	r3, #0
 8009538:	4650      	mov	r0, sl
 800953a:	4659      	mov	r1, fp
 800953c:	f7f7 fae4 	bl	8000b08 <__aeabi_dcmpeq>
 8009540:	ec4b ab19 	vmov	d9, sl, fp
 8009544:	4680      	mov	r8, r0
 8009546:	b158      	cbz	r0, 8009560 <_dtoa_r+0xe0>
 8009548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800954a:	2301      	movs	r3, #1
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 856b 	beq.w	800a02c <_dtoa_r+0xbac>
 8009556:	4883      	ldr	r0, [pc, #524]	; (8009764 <_dtoa_r+0x2e4>)
 8009558:	6018      	str	r0, [r3, #0]
 800955a:	1e43      	subs	r3, r0, #1
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	e7df      	b.n	8009520 <_dtoa_r+0xa0>
 8009560:	ec4b ab10 	vmov	d0, sl, fp
 8009564:	aa10      	add	r2, sp, #64	; 0x40
 8009566:	a911      	add	r1, sp, #68	; 0x44
 8009568:	4620      	mov	r0, r4
 800956a:	f001 fd13 	bl	800af94 <__d2b>
 800956e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009572:	ee08 0a10 	vmov	s16, r0
 8009576:	2d00      	cmp	r5, #0
 8009578:	f000 8084 	beq.w	8009684 <_dtoa_r+0x204>
 800957c:	ee19 3a90 	vmov	r3, s19
 8009580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009584:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009588:	4656      	mov	r6, sl
 800958a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800958e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009592:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009596:	4b74      	ldr	r3, [pc, #464]	; (8009768 <_dtoa_r+0x2e8>)
 8009598:	2200      	movs	r2, #0
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	f7f6 fe93 	bl	80002c8 <__aeabi_dsub>
 80095a2:	a365      	add	r3, pc, #404	; (adr r3, 8009738 <_dtoa_r+0x2b8>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f7 f846 	bl	8000638 <__aeabi_dmul>
 80095ac:	a364      	add	r3, pc, #400	; (adr r3, 8009740 <_dtoa_r+0x2c0>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	f7f6 fe8b 	bl	80002cc <__adddf3>
 80095b6:	4606      	mov	r6, r0
 80095b8:	4628      	mov	r0, r5
 80095ba:	460f      	mov	r7, r1
 80095bc:	f7f6 ffd2 	bl	8000564 <__aeabi_i2d>
 80095c0:	a361      	add	r3, pc, #388	; (adr r3, 8009748 <_dtoa_r+0x2c8>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f7 f837 	bl	8000638 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4630      	mov	r0, r6
 80095d0:	4639      	mov	r1, r7
 80095d2:	f7f6 fe7b 	bl	80002cc <__adddf3>
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	f7f7 fadd 	bl	8000b98 <__aeabi_d2iz>
 80095de:	2200      	movs	r2, #0
 80095e0:	9000      	str	r0, [sp, #0]
 80095e2:	2300      	movs	r3, #0
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f7 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80095ec:	b150      	cbz	r0, 8009604 <_dtoa_r+0x184>
 80095ee:	9800      	ldr	r0, [sp, #0]
 80095f0:	f7f6 ffb8 	bl	8000564 <__aeabi_i2d>
 80095f4:	4632      	mov	r2, r6
 80095f6:	463b      	mov	r3, r7
 80095f8:	f7f7 fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80095fc:	b910      	cbnz	r0, 8009604 <_dtoa_r+0x184>
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	9b00      	ldr	r3, [sp, #0]
 8009606:	2b16      	cmp	r3, #22
 8009608:	d85a      	bhi.n	80096c0 <_dtoa_r+0x240>
 800960a:	9a00      	ldr	r2, [sp, #0]
 800960c:	4b57      	ldr	r3, [pc, #348]	; (800976c <_dtoa_r+0x2ec>)
 800960e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	ec51 0b19 	vmov	r0, r1, d9
 800961a:	f7f7 fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800961e:	2800      	cmp	r0, #0
 8009620:	d050      	beq.n	80096c4 <_dtoa_r+0x244>
 8009622:	9b00      	ldr	r3, [sp, #0]
 8009624:	3b01      	subs	r3, #1
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	930b      	str	r3, [sp, #44]	; 0x2c
 800962c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800962e:	1b5d      	subs	r5, r3, r5
 8009630:	1e6b      	subs	r3, r5, #1
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	bf45      	ittet	mi
 8009636:	f1c5 0301 	rsbmi	r3, r5, #1
 800963a:	9304      	strmi	r3, [sp, #16]
 800963c:	2300      	movpl	r3, #0
 800963e:	2300      	movmi	r3, #0
 8009640:	bf4c      	ite	mi
 8009642:	9305      	strmi	r3, [sp, #20]
 8009644:	9304      	strpl	r3, [sp, #16]
 8009646:	9b00      	ldr	r3, [sp, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	db3d      	blt.n	80096c8 <_dtoa_r+0x248>
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	9a00      	ldr	r2, [sp, #0]
 8009650:	920a      	str	r2, [sp, #40]	; 0x28
 8009652:	4413      	add	r3, r2
 8009654:	9305      	str	r3, [sp, #20]
 8009656:	2300      	movs	r3, #0
 8009658:	9307      	str	r3, [sp, #28]
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	2b09      	cmp	r3, #9
 800965e:	f200 8089 	bhi.w	8009774 <_dtoa_r+0x2f4>
 8009662:	2b05      	cmp	r3, #5
 8009664:	bfc4      	itt	gt
 8009666:	3b04      	subgt	r3, #4
 8009668:	9306      	strgt	r3, [sp, #24]
 800966a:	9b06      	ldr	r3, [sp, #24]
 800966c:	f1a3 0302 	sub.w	r3, r3, #2
 8009670:	bfcc      	ite	gt
 8009672:	2500      	movgt	r5, #0
 8009674:	2501      	movle	r5, #1
 8009676:	2b03      	cmp	r3, #3
 8009678:	f200 8087 	bhi.w	800978a <_dtoa_r+0x30a>
 800967c:	e8df f003 	tbb	[pc, r3]
 8009680:	59383a2d 	.word	0x59383a2d
 8009684:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009688:	441d      	add	r5, r3
 800968a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800968e:	2b20      	cmp	r3, #32
 8009690:	bfc1      	itttt	gt
 8009692:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009696:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800969a:	fa0b f303 	lslgt.w	r3, fp, r3
 800969e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80096a2:	bfda      	itte	le
 80096a4:	f1c3 0320 	rsble	r3, r3, #32
 80096a8:	fa06 f003 	lslle.w	r0, r6, r3
 80096ac:	4318      	orrgt	r0, r3
 80096ae:	f7f6 ff49 	bl	8000544 <__aeabi_ui2d>
 80096b2:	2301      	movs	r3, #1
 80096b4:	4606      	mov	r6, r0
 80096b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80096ba:	3d01      	subs	r5, #1
 80096bc:	930e      	str	r3, [sp, #56]	; 0x38
 80096be:	e76a      	b.n	8009596 <_dtoa_r+0x116>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e7b2      	b.n	800962a <_dtoa_r+0x1aa>
 80096c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80096c6:	e7b1      	b.n	800962c <_dtoa_r+0x1ac>
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	9a00      	ldr	r2, [sp, #0]
 80096cc:	1a9b      	subs	r3, r3, r2
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	4253      	negs	r3, r2
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	2300      	movs	r3, #0
 80096d6:	930a      	str	r3, [sp, #40]	; 0x28
 80096d8:	e7bf      	b.n	800965a <_dtoa_r+0x1da>
 80096da:	2300      	movs	r3, #0
 80096dc:	9308      	str	r3, [sp, #32]
 80096de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dc55      	bgt.n	8009790 <_dtoa_r+0x310>
 80096e4:	2301      	movs	r3, #1
 80096e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096ea:	461a      	mov	r2, r3
 80096ec:	9209      	str	r2, [sp, #36]	; 0x24
 80096ee:	e00c      	b.n	800970a <_dtoa_r+0x28a>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e7f3      	b.n	80096dc <_dtoa_r+0x25c>
 80096f4:	2300      	movs	r3, #0
 80096f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f8:	9308      	str	r3, [sp, #32]
 80096fa:	9b00      	ldr	r3, [sp, #0]
 80096fc:	4413      	add	r3, r2
 80096fe:	9302      	str	r3, [sp, #8]
 8009700:	3301      	adds	r3, #1
 8009702:	2b01      	cmp	r3, #1
 8009704:	9303      	str	r3, [sp, #12]
 8009706:	bfb8      	it	lt
 8009708:	2301      	movlt	r3, #1
 800970a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800970c:	2200      	movs	r2, #0
 800970e:	6042      	str	r2, [r0, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	f102 0614 	add.w	r6, r2, #20
 8009716:	429e      	cmp	r6, r3
 8009718:	6841      	ldr	r1, [r0, #4]
 800971a:	d93d      	bls.n	8009798 <_dtoa_r+0x318>
 800971c:	4620      	mov	r0, r4
 800971e:	f001 f84b 	bl	800a7b8 <_Balloc>
 8009722:	9001      	str	r0, [sp, #4]
 8009724:	2800      	cmp	r0, #0
 8009726:	d13b      	bne.n	80097a0 <_dtoa_r+0x320>
 8009728:	4b11      	ldr	r3, [pc, #68]	; (8009770 <_dtoa_r+0x2f0>)
 800972a:	4602      	mov	r2, r0
 800972c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009730:	e6c0      	b.n	80094b4 <_dtoa_r+0x34>
 8009732:	2301      	movs	r3, #1
 8009734:	e7df      	b.n	80096f6 <_dtoa_r+0x276>
 8009736:	bf00      	nop
 8009738:	636f4361 	.word	0x636f4361
 800973c:	3fd287a7 	.word	0x3fd287a7
 8009740:	8b60c8b3 	.word	0x8b60c8b3
 8009744:	3fc68a28 	.word	0x3fc68a28
 8009748:	509f79fb 	.word	0x509f79fb
 800974c:	3fd34413 	.word	0x3fd34413
 8009750:	0800d11e 	.word	0x0800d11e
 8009754:	0800d135 	.word	0x0800d135
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	0800d11a 	.word	0x0800d11a
 8009760:	0800d111 	.word	0x0800d111
 8009764:	0800cf95 	.word	0x0800cf95
 8009768:	3ff80000 	.word	0x3ff80000
 800976c:	0800d2a0 	.word	0x0800d2a0
 8009770:	0800d190 	.word	0x0800d190
 8009774:	2501      	movs	r5, #1
 8009776:	2300      	movs	r3, #0
 8009778:	9306      	str	r3, [sp, #24]
 800977a:	9508      	str	r5, [sp, #32]
 800977c:	f04f 33ff 	mov.w	r3, #4294967295
 8009780:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009784:	2200      	movs	r2, #0
 8009786:	2312      	movs	r3, #18
 8009788:	e7b0      	b.n	80096ec <_dtoa_r+0x26c>
 800978a:	2301      	movs	r3, #1
 800978c:	9308      	str	r3, [sp, #32]
 800978e:	e7f5      	b.n	800977c <_dtoa_r+0x2fc>
 8009790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009792:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009796:	e7b8      	b.n	800970a <_dtoa_r+0x28a>
 8009798:	3101      	adds	r1, #1
 800979a:	6041      	str	r1, [r0, #4]
 800979c:	0052      	lsls	r2, r2, #1
 800979e:	e7b8      	b.n	8009712 <_dtoa_r+0x292>
 80097a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	2b0e      	cmp	r3, #14
 80097aa:	f200 809d 	bhi.w	80098e8 <_dtoa_r+0x468>
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	f000 809a 	beq.w	80098e8 <_dtoa_r+0x468>
 80097b4:	9b00      	ldr	r3, [sp, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd32      	ble.n	8009820 <_dtoa_r+0x3a0>
 80097ba:	4ab7      	ldr	r2, [pc, #732]	; (8009a98 <_dtoa_r+0x618>)
 80097bc:	f003 030f 	and.w	r3, r3, #15
 80097c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80097c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	05d8      	lsls	r0, r3, #23
 80097cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80097d0:	d516      	bpl.n	8009800 <_dtoa_r+0x380>
 80097d2:	4bb2      	ldr	r3, [pc, #712]	; (8009a9c <_dtoa_r+0x61c>)
 80097d4:	ec51 0b19 	vmov	r0, r1, d9
 80097d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097dc:	f7f7 f856 	bl	800088c <__aeabi_ddiv>
 80097e0:	f007 070f 	and.w	r7, r7, #15
 80097e4:	4682      	mov	sl, r0
 80097e6:	468b      	mov	fp, r1
 80097e8:	2503      	movs	r5, #3
 80097ea:	4eac      	ldr	r6, [pc, #688]	; (8009a9c <_dtoa_r+0x61c>)
 80097ec:	b957      	cbnz	r7, 8009804 <_dtoa_r+0x384>
 80097ee:	4642      	mov	r2, r8
 80097f0:	464b      	mov	r3, r9
 80097f2:	4650      	mov	r0, sl
 80097f4:	4659      	mov	r1, fp
 80097f6:	f7f7 f849 	bl	800088c <__aeabi_ddiv>
 80097fa:	4682      	mov	sl, r0
 80097fc:	468b      	mov	fp, r1
 80097fe:	e028      	b.n	8009852 <_dtoa_r+0x3d2>
 8009800:	2502      	movs	r5, #2
 8009802:	e7f2      	b.n	80097ea <_dtoa_r+0x36a>
 8009804:	07f9      	lsls	r1, r7, #31
 8009806:	d508      	bpl.n	800981a <_dtoa_r+0x39a>
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009810:	f7f6 ff12 	bl	8000638 <__aeabi_dmul>
 8009814:	3501      	adds	r5, #1
 8009816:	4680      	mov	r8, r0
 8009818:	4689      	mov	r9, r1
 800981a:	107f      	asrs	r7, r7, #1
 800981c:	3608      	adds	r6, #8
 800981e:	e7e5      	b.n	80097ec <_dtoa_r+0x36c>
 8009820:	f000 809b 	beq.w	800995a <_dtoa_r+0x4da>
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	4f9d      	ldr	r7, [pc, #628]	; (8009a9c <_dtoa_r+0x61c>)
 8009828:	425e      	negs	r6, r3
 800982a:	4b9b      	ldr	r3, [pc, #620]	; (8009a98 <_dtoa_r+0x618>)
 800982c:	f006 020f 	and.w	r2, r6, #15
 8009830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	ec51 0b19 	vmov	r0, r1, d9
 800983c:	f7f6 fefc 	bl	8000638 <__aeabi_dmul>
 8009840:	1136      	asrs	r6, r6, #4
 8009842:	4682      	mov	sl, r0
 8009844:	468b      	mov	fp, r1
 8009846:	2300      	movs	r3, #0
 8009848:	2502      	movs	r5, #2
 800984a:	2e00      	cmp	r6, #0
 800984c:	d17a      	bne.n	8009944 <_dtoa_r+0x4c4>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1d3      	bne.n	80097fa <_dtoa_r+0x37a>
 8009852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8082 	beq.w	800995e <_dtoa_r+0x4de>
 800985a:	4b91      	ldr	r3, [pc, #580]	; (8009aa0 <_dtoa_r+0x620>)
 800985c:	2200      	movs	r2, #0
 800985e:	4650      	mov	r0, sl
 8009860:	4659      	mov	r1, fp
 8009862:	f7f7 f95b 	bl	8000b1c <__aeabi_dcmplt>
 8009866:	2800      	cmp	r0, #0
 8009868:	d079      	beq.n	800995e <_dtoa_r+0x4de>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d076      	beq.n	800995e <_dtoa_r+0x4de>
 8009870:	9b02      	ldr	r3, [sp, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	dd36      	ble.n	80098e4 <_dtoa_r+0x464>
 8009876:	9b00      	ldr	r3, [sp, #0]
 8009878:	4650      	mov	r0, sl
 800987a:	4659      	mov	r1, fp
 800987c:	1e5f      	subs	r7, r3, #1
 800987e:	2200      	movs	r2, #0
 8009880:	4b88      	ldr	r3, [pc, #544]	; (8009aa4 <_dtoa_r+0x624>)
 8009882:	f7f6 fed9 	bl	8000638 <__aeabi_dmul>
 8009886:	9e02      	ldr	r6, [sp, #8]
 8009888:	4682      	mov	sl, r0
 800988a:	468b      	mov	fp, r1
 800988c:	3501      	adds	r5, #1
 800988e:	4628      	mov	r0, r5
 8009890:	f7f6 fe68 	bl	8000564 <__aeabi_i2d>
 8009894:	4652      	mov	r2, sl
 8009896:	465b      	mov	r3, fp
 8009898:	f7f6 fece 	bl	8000638 <__aeabi_dmul>
 800989c:	4b82      	ldr	r3, [pc, #520]	; (8009aa8 <_dtoa_r+0x628>)
 800989e:	2200      	movs	r2, #0
 80098a0:	f7f6 fd14 	bl	80002cc <__adddf3>
 80098a4:	46d0      	mov	r8, sl
 80098a6:	46d9      	mov	r9, fp
 80098a8:	4682      	mov	sl, r0
 80098aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	d158      	bne.n	8009964 <_dtoa_r+0x4e4>
 80098b2:	4b7e      	ldr	r3, [pc, #504]	; (8009aac <_dtoa_r+0x62c>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	4640      	mov	r0, r8
 80098b8:	4649      	mov	r1, r9
 80098ba:	f7f6 fd05 	bl	80002c8 <__aeabi_dsub>
 80098be:	4652      	mov	r2, sl
 80098c0:	465b      	mov	r3, fp
 80098c2:	4680      	mov	r8, r0
 80098c4:	4689      	mov	r9, r1
 80098c6:	f7f7 f947 	bl	8000b58 <__aeabi_dcmpgt>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f040 8295 	bne.w	8009dfa <_dtoa_r+0x97a>
 80098d0:	4652      	mov	r2, sl
 80098d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f7 f91f 	bl	8000b1c <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	f040 8289 	bne.w	8009df6 <_dtoa_r+0x976>
 80098e4:	ec5b ab19 	vmov	sl, fp, d9
 80098e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f2c0 8148 	blt.w	8009b80 <_dtoa_r+0x700>
 80098f0:	9a00      	ldr	r2, [sp, #0]
 80098f2:	2a0e      	cmp	r2, #14
 80098f4:	f300 8144 	bgt.w	8009b80 <_dtoa_r+0x700>
 80098f8:	4b67      	ldr	r3, [pc, #412]	; (8009a98 <_dtoa_r+0x618>)
 80098fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	f280 80d5 	bge.w	8009ab4 <_dtoa_r+0x634>
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f300 80d1 	bgt.w	8009ab4 <_dtoa_r+0x634>
 8009912:	f040 826f 	bne.w	8009df4 <_dtoa_r+0x974>
 8009916:	4b65      	ldr	r3, [pc, #404]	; (8009aac <_dtoa_r+0x62c>)
 8009918:	2200      	movs	r2, #0
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 fe8b 	bl	8000638 <__aeabi_dmul>
 8009922:	4652      	mov	r2, sl
 8009924:	465b      	mov	r3, fp
 8009926:	f7f7 f90d 	bl	8000b44 <__aeabi_dcmpge>
 800992a:	9e03      	ldr	r6, [sp, #12]
 800992c:	4637      	mov	r7, r6
 800992e:	2800      	cmp	r0, #0
 8009930:	f040 8245 	bne.w	8009dbe <_dtoa_r+0x93e>
 8009934:	9d01      	ldr	r5, [sp, #4]
 8009936:	2331      	movs	r3, #49	; 0x31
 8009938:	f805 3b01 	strb.w	r3, [r5], #1
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	3301      	adds	r3, #1
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	e240      	b.n	8009dc6 <_dtoa_r+0x946>
 8009944:	07f2      	lsls	r2, r6, #31
 8009946:	d505      	bpl.n	8009954 <_dtoa_r+0x4d4>
 8009948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800994c:	f7f6 fe74 	bl	8000638 <__aeabi_dmul>
 8009950:	3501      	adds	r5, #1
 8009952:	2301      	movs	r3, #1
 8009954:	1076      	asrs	r6, r6, #1
 8009956:	3708      	adds	r7, #8
 8009958:	e777      	b.n	800984a <_dtoa_r+0x3ca>
 800995a:	2502      	movs	r5, #2
 800995c:	e779      	b.n	8009852 <_dtoa_r+0x3d2>
 800995e:	9f00      	ldr	r7, [sp, #0]
 8009960:	9e03      	ldr	r6, [sp, #12]
 8009962:	e794      	b.n	800988e <_dtoa_r+0x40e>
 8009964:	9901      	ldr	r1, [sp, #4]
 8009966:	4b4c      	ldr	r3, [pc, #304]	; (8009a98 <_dtoa_r+0x618>)
 8009968:	4431      	add	r1, r6
 800996a:	910d      	str	r1, [sp, #52]	; 0x34
 800996c:	9908      	ldr	r1, [sp, #32]
 800996e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009976:	2900      	cmp	r1, #0
 8009978:	d043      	beq.n	8009a02 <_dtoa_r+0x582>
 800997a:	494d      	ldr	r1, [pc, #308]	; (8009ab0 <_dtoa_r+0x630>)
 800997c:	2000      	movs	r0, #0
 800997e:	f7f6 ff85 	bl	800088c <__aeabi_ddiv>
 8009982:	4652      	mov	r2, sl
 8009984:	465b      	mov	r3, fp
 8009986:	f7f6 fc9f 	bl	80002c8 <__aeabi_dsub>
 800998a:	9d01      	ldr	r5, [sp, #4]
 800998c:	4682      	mov	sl, r0
 800998e:	468b      	mov	fp, r1
 8009990:	4649      	mov	r1, r9
 8009992:	4640      	mov	r0, r8
 8009994:	f7f7 f900 	bl	8000b98 <__aeabi_d2iz>
 8009998:	4606      	mov	r6, r0
 800999a:	f7f6 fde3 	bl	8000564 <__aeabi_i2d>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f6 fc8f 	bl	80002c8 <__aeabi_dsub>
 80099aa:	3630      	adds	r6, #48	; 0x30
 80099ac:	f805 6b01 	strb.w	r6, [r5], #1
 80099b0:	4652      	mov	r2, sl
 80099b2:	465b      	mov	r3, fp
 80099b4:	4680      	mov	r8, r0
 80099b6:	4689      	mov	r9, r1
 80099b8:	f7f7 f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d163      	bne.n	8009a88 <_dtoa_r+0x608>
 80099c0:	4642      	mov	r2, r8
 80099c2:	464b      	mov	r3, r9
 80099c4:	4936      	ldr	r1, [pc, #216]	; (8009aa0 <_dtoa_r+0x620>)
 80099c6:	2000      	movs	r0, #0
 80099c8:	f7f6 fc7e 	bl	80002c8 <__aeabi_dsub>
 80099cc:	4652      	mov	r2, sl
 80099ce:	465b      	mov	r3, fp
 80099d0:	f7f7 f8a4 	bl	8000b1c <__aeabi_dcmplt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 80b5 	bne.w	8009b44 <_dtoa_r+0x6c4>
 80099da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099dc:	429d      	cmp	r5, r3
 80099de:	d081      	beq.n	80098e4 <_dtoa_r+0x464>
 80099e0:	4b30      	ldr	r3, [pc, #192]	; (8009aa4 <_dtoa_r+0x624>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	4650      	mov	r0, sl
 80099e6:	4659      	mov	r1, fp
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <_dtoa_r+0x624>)
 80099ee:	4682      	mov	sl, r0
 80099f0:	468b      	mov	fp, r1
 80099f2:	4640      	mov	r0, r8
 80099f4:	4649      	mov	r1, r9
 80099f6:	2200      	movs	r2, #0
 80099f8:	f7f6 fe1e 	bl	8000638 <__aeabi_dmul>
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	e7c6      	b.n	8009990 <_dtoa_r+0x510>
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	f7f6 fe17 	bl	8000638 <__aeabi_dmul>
 8009a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a0c:	9d01      	ldr	r5, [sp, #4]
 8009a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a10:	4682      	mov	sl, r0
 8009a12:	468b      	mov	fp, r1
 8009a14:	4649      	mov	r1, r9
 8009a16:	4640      	mov	r0, r8
 8009a18:	f7f7 f8be 	bl	8000b98 <__aeabi_d2iz>
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	f7f6 fda1 	bl	8000564 <__aeabi_i2d>
 8009a22:	3630      	adds	r6, #48	; 0x30
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f7f6 fc4c 	bl	80002c8 <__aeabi_dsub>
 8009a30:	f805 6b01 	strb.w	r6, [r5], #1
 8009a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a36:	429d      	cmp	r5, r3
 8009a38:	4680      	mov	r8, r0
 8009a3a:	4689      	mov	r9, r1
 8009a3c:	f04f 0200 	mov.w	r2, #0
 8009a40:	d124      	bne.n	8009a8c <_dtoa_r+0x60c>
 8009a42:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <_dtoa_r+0x630>)
 8009a44:	4650      	mov	r0, sl
 8009a46:	4659      	mov	r1, fp
 8009a48:	f7f6 fc40 	bl	80002cc <__adddf3>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4640      	mov	r0, r8
 8009a52:	4649      	mov	r1, r9
 8009a54:	f7f7 f880 	bl	8000b58 <__aeabi_dcmpgt>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d173      	bne.n	8009b44 <_dtoa_r+0x6c4>
 8009a5c:	4652      	mov	r2, sl
 8009a5e:	465b      	mov	r3, fp
 8009a60:	4913      	ldr	r1, [pc, #76]	; (8009ab0 <_dtoa_r+0x630>)
 8009a62:	2000      	movs	r0, #0
 8009a64:	f7f6 fc30 	bl	80002c8 <__aeabi_dsub>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7f7 f854 	bl	8000b1c <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f43f af35 	beq.w	80098e4 <_dtoa_r+0x464>
 8009a7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a7c:	1e6b      	subs	r3, r5, #1
 8009a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a84:	2b30      	cmp	r3, #48	; 0x30
 8009a86:	d0f8      	beq.n	8009a7a <_dtoa_r+0x5fa>
 8009a88:	9700      	str	r7, [sp, #0]
 8009a8a:	e049      	b.n	8009b20 <_dtoa_r+0x6a0>
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <_dtoa_r+0x624>)
 8009a8e:	f7f6 fdd3 	bl	8000638 <__aeabi_dmul>
 8009a92:	4680      	mov	r8, r0
 8009a94:	4689      	mov	r9, r1
 8009a96:	e7bd      	b.n	8009a14 <_dtoa_r+0x594>
 8009a98:	0800d2a0 	.word	0x0800d2a0
 8009a9c:	0800d278 	.word	0x0800d278
 8009aa0:	3ff00000 	.word	0x3ff00000
 8009aa4:	40240000 	.word	0x40240000
 8009aa8:	401c0000 	.word	0x401c0000
 8009aac:	40140000 	.word	0x40140000
 8009ab0:	3fe00000 	.word	0x3fe00000
 8009ab4:	9d01      	ldr	r5, [sp, #4]
 8009ab6:	4656      	mov	r6, sl
 8009ab8:	465f      	mov	r7, fp
 8009aba:	4642      	mov	r2, r8
 8009abc:	464b      	mov	r3, r9
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 fee3 	bl	800088c <__aeabi_ddiv>
 8009ac6:	f7f7 f867 	bl	8000b98 <__aeabi_d2iz>
 8009aca:	4682      	mov	sl, r0
 8009acc:	f7f6 fd4a 	bl	8000564 <__aeabi_i2d>
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	f7f6 fdb0 	bl	8000638 <__aeabi_dmul>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4630      	mov	r0, r6
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ae4:	f7f6 fbf0 	bl	80002c8 <__aeabi_dsub>
 8009ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8009aec:	9e01      	ldr	r6, [sp, #4]
 8009aee:	9f03      	ldr	r7, [sp, #12]
 8009af0:	1bae      	subs	r6, r5, r6
 8009af2:	42b7      	cmp	r7, r6
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	d135      	bne.n	8009b66 <_dtoa_r+0x6e6>
 8009afa:	f7f6 fbe7 	bl	80002cc <__adddf3>
 8009afe:	4642      	mov	r2, r8
 8009b00:	464b      	mov	r3, r9
 8009b02:	4606      	mov	r6, r0
 8009b04:	460f      	mov	r7, r1
 8009b06:	f7f7 f827 	bl	8000b58 <__aeabi_dcmpgt>
 8009b0a:	b9d0      	cbnz	r0, 8009b42 <_dtoa_r+0x6c2>
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	4630      	mov	r0, r6
 8009b12:	4639      	mov	r1, r7
 8009b14:	f7f6 fff8 	bl	8000b08 <__aeabi_dcmpeq>
 8009b18:	b110      	cbz	r0, 8009b20 <_dtoa_r+0x6a0>
 8009b1a:	f01a 0f01 	tst.w	sl, #1
 8009b1e:	d110      	bne.n	8009b42 <_dtoa_r+0x6c2>
 8009b20:	4620      	mov	r0, r4
 8009b22:	ee18 1a10 	vmov	r1, s16
 8009b26:	f000 fe87 	bl	800a838 <_Bfree>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9800      	ldr	r0, [sp, #0]
 8009b2e:	702b      	strb	r3, [r5, #0]
 8009b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b32:	3001      	adds	r0, #1
 8009b34:	6018      	str	r0, [r3, #0]
 8009b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f43f acf1 	beq.w	8009520 <_dtoa_r+0xa0>
 8009b3e:	601d      	str	r5, [r3, #0]
 8009b40:	e4ee      	b.n	8009520 <_dtoa_r+0xa0>
 8009b42:	9f00      	ldr	r7, [sp, #0]
 8009b44:	462b      	mov	r3, r5
 8009b46:	461d      	mov	r5, r3
 8009b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b4c:	2a39      	cmp	r2, #57	; 0x39
 8009b4e:	d106      	bne.n	8009b5e <_dtoa_r+0x6de>
 8009b50:	9a01      	ldr	r2, [sp, #4]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d1f7      	bne.n	8009b46 <_dtoa_r+0x6c6>
 8009b56:	9901      	ldr	r1, [sp, #4]
 8009b58:	2230      	movs	r2, #48	; 0x30
 8009b5a:	3701      	adds	r7, #1
 8009b5c:	700a      	strb	r2, [r1, #0]
 8009b5e:	781a      	ldrb	r2, [r3, #0]
 8009b60:	3201      	adds	r2, #1
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e790      	b.n	8009a88 <_dtoa_r+0x608>
 8009b66:	4ba6      	ldr	r3, [pc, #664]	; (8009e00 <_dtoa_r+0x980>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f7f6 fd65 	bl	8000638 <__aeabi_dmul>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2300      	movs	r3, #0
 8009b72:	4606      	mov	r6, r0
 8009b74:	460f      	mov	r7, r1
 8009b76:	f7f6 ffc7 	bl	8000b08 <__aeabi_dcmpeq>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d09d      	beq.n	8009aba <_dtoa_r+0x63a>
 8009b7e:	e7cf      	b.n	8009b20 <_dtoa_r+0x6a0>
 8009b80:	9a08      	ldr	r2, [sp, #32]
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	f000 80d7 	beq.w	8009d36 <_dtoa_r+0x8b6>
 8009b88:	9a06      	ldr	r2, [sp, #24]
 8009b8a:	2a01      	cmp	r2, #1
 8009b8c:	f300 80ba 	bgt.w	8009d04 <_dtoa_r+0x884>
 8009b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	f000 80b2 	beq.w	8009cfc <_dtoa_r+0x87c>
 8009b98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b9c:	9e07      	ldr	r6, [sp, #28]
 8009b9e:	9d04      	ldr	r5, [sp, #16]
 8009ba0:	9a04      	ldr	r2, [sp, #16]
 8009ba2:	441a      	add	r2, r3
 8009ba4:	9204      	str	r2, [sp, #16]
 8009ba6:	9a05      	ldr	r2, [sp, #20]
 8009ba8:	2101      	movs	r1, #1
 8009baa:	441a      	add	r2, r3
 8009bac:	4620      	mov	r0, r4
 8009bae:	9205      	str	r2, [sp, #20]
 8009bb0:	f000 ff44 	bl	800aa3c <__i2b>
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	dd0c      	ble.n	8009bd4 <_dtoa_r+0x754>
 8009bba:	9b05      	ldr	r3, [sp, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dd09      	ble.n	8009bd4 <_dtoa_r+0x754>
 8009bc0:	42ab      	cmp	r3, r5
 8009bc2:	9a04      	ldr	r2, [sp, #16]
 8009bc4:	bfa8      	it	ge
 8009bc6:	462b      	movge	r3, r5
 8009bc8:	1ad2      	subs	r2, r2, r3
 8009bca:	9204      	str	r2, [sp, #16]
 8009bcc:	9a05      	ldr	r2, [sp, #20]
 8009bce:	1aed      	subs	r5, r5, r3
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	b31b      	cbz	r3, 8009c20 <_dtoa_r+0x7a0>
 8009bd8:	9b08      	ldr	r3, [sp, #32]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 80af 	beq.w	8009d3e <_dtoa_r+0x8be>
 8009be0:	2e00      	cmp	r6, #0
 8009be2:	dd13      	ble.n	8009c0c <_dtoa_r+0x78c>
 8009be4:	4639      	mov	r1, r7
 8009be6:	4632      	mov	r2, r6
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 ffe7 	bl	800abbc <__pow5mult>
 8009bee:	ee18 2a10 	vmov	r2, s16
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 ff36 	bl	800aa68 <__multiply>
 8009bfc:	ee18 1a10 	vmov	r1, s16
 8009c00:	4680      	mov	r8, r0
 8009c02:	4620      	mov	r0, r4
 8009c04:	f000 fe18 	bl	800a838 <_Bfree>
 8009c08:	ee08 8a10 	vmov	s16, r8
 8009c0c:	9b07      	ldr	r3, [sp, #28]
 8009c0e:	1b9a      	subs	r2, r3, r6
 8009c10:	d006      	beq.n	8009c20 <_dtoa_r+0x7a0>
 8009c12:	ee18 1a10 	vmov	r1, s16
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 ffd0 	bl	800abbc <__pow5mult>
 8009c1c:	ee08 0a10 	vmov	s16, r0
 8009c20:	2101      	movs	r1, #1
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 ff0a 	bl	800aa3c <__i2b>
 8009c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	f340 8088 	ble.w	8009d42 <_dtoa_r+0x8c2>
 8009c32:	461a      	mov	r2, r3
 8009c34:	4601      	mov	r1, r0
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 ffc0 	bl	800abbc <__pow5mult>
 8009c3c:	9b06      	ldr	r3, [sp, #24]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	4606      	mov	r6, r0
 8009c42:	f340 8081 	ble.w	8009d48 <_dtoa_r+0x8c8>
 8009c46:	f04f 0800 	mov.w	r8, #0
 8009c4a:	6933      	ldr	r3, [r6, #16]
 8009c4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c50:	6918      	ldr	r0, [r3, #16]
 8009c52:	f000 fea3 	bl	800a99c <__hi0bits>
 8009c56:	f1c0 0020 	rsb	r0, r0, #32
 8009c5a:	9b05      	ldr	r3, [sp, #20]
 8009c5c:	4418      	add	r0, r3
 8009c5e:	f010 001f 	ands.w	r0, r0, #31
 8009c62:	f000 8092 	beq.w	8009d8a <_dtoa_r+0x90a>
 8009c66:	f1c0 0320 	rsb	r3, r0, #32
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	f340 808a 	ble.w	8009d84 <_dtoa_r+0x904>
 8009c70:	f1c0 001c 	rsb	r0, r0, #28
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	4403      	add	r3, r0
 8009c78:	9304      	str	r3, [sp, #16]
 8009c7a:	9b05      	ldr	r3, [sp, #20]
 8009c7c:	4403      	add	r3, r0
 8009c7e:	4405      	add	r5, r0
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd07      	ble.n	8009c98 <_dtoa_r+0x818>
 8009c88:	ee18 1a10 	vmov	r1, s16
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 ffee 	bl	800ac70 <__lshift>
 8009c94:	ee08 0a10 	vmov	s16, r0
 8009c98:	9b05      	ldr	r3, [sp, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dd05      	ble.n	8009caa <_dtoa_r+0x82a>
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f000 ffe4 	bl	800ac70 <__lshift>
 8009ca8:	4606      	mov	r6, r0
 8009caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d06e      	beq.n	8009d8e <_dtoa_r+0x90e>
 8009cb0:	ee18 0a10 	vmov	r0, s16
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	f001 f84b 	bl	800ad50 <__mcmp>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	da67      	bge.n	8009d8e <_dtoa_r+0x90e>
 8009cbe:	9b00      	ldr	r3, [sp, #0]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	ee18 1a10 	vmov	r1, s16
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	220a      	movs	r2, #10
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 fdd5 	bl	800a87c <__multadd>
 8009cd2:	9b08      	ldr	r3, [sp, #32]
 8009cd4:	ee08 0a10 	vmov	s16, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 81b1 	beq.w	800a040 <_dtoa_r+0xbc0>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	220a      	movs	r2, #10
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 fdc9 	bl	800a87c <__multadd>
 8009cea:	9b02      	ldr	r3, [sp, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	4607      	mov	r7, r0
 8009cf0:	f300 808e 	bgt.w	8009e10 <_dtoa_r+0x990>
 8009cf4:	9b06      	ldr	r3, [sp, #24]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	dc51      	bgt.n	8009d9e <_dtoa_r+0x91e>
 8009cfa:	e089      	b.n	8009e10 <_dtoa_r+0x990>
 8009cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d02:	e74b      	b.n	8009b9c <_dtoa_r+0x71c>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	1e5e      	subs	r6, r3, #1
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	42b3      	cmp	r3, r6
 8009d0c:	bfbf      	itttt	lt
 8009d0e:	9b07      	ldrlt	r3, [sp, #28]
 8009d10:	9607      	strlt	r6, [sp, #28]
 8009d12:	1af2      	sublt	r2, r6, r3
 8009d14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d16:	bfb6      	itet	lt
 8009d18:	189b      	addlt	r3, r3, r2
 8009d1a:	1b9e      	subge	r6, r3, r6
 8009d1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	bfb8      	it	lt
 8009d22:	2600      	movlt	r6, #0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfb7      	itett	lt
 8009d28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009d2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d30:	1a9d      	sublt	r5, r3, r2
 8009d32:	2300      	movlt	r3, #0
 8009d34:	e734      	b.n	8009ba0 <_dtoa_r+0x720>
 8009d36:	9e07      	ldr	r6, [sp, #28]
 8009d38:	9d04      	ldr	r5, [sp, #16]
 8009d3a:	9f08      	ldr	r7, [sp, #32]
 8009d3c:	e73b      	b.n	8009bb6 <_dtoa_r+0x736>
 8009d3e:	9a07      	ldr	r2, [sp, #28]
 8009d40:	e767      	b.n	8009c12 <_dtoa_r+0x792>
 8009d42:	9b06      	ldr	r3, [sp, #24]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	dc18      	bgt.n	8009d7a <_dtoa_r+0x8fa>
 8009d48:	f1ba 0f00 	cmp.w	sl, #0
 8009d4c:	d115      	bne.n	8009d7a <_dtoa_r+0x8fa>
 8009d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d52:	b993      	cbnz	r3, 8009d7a <_dtoa_r+0x8fa>
 8009d54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d58:	0d1b      	lsrs	r3, r3, #20
 8009d5a:	051b      	lsls	r3, r3, #20
 8009d5c:	b183      	cbz	r3, 8009d80 <_dtoa_r+0x900>
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	3301      	adds	r3, #1
 8009d62:	9304      	str	r3, [sp, #16]
 8009d64:	9b05      	ldr	r3, [sp, #20]
 8009d66:	3301      	adds	r3, #1
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	f04f 0801 	mov.w	r8, #1
 8009d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f47f af6a 	bne.w	8009c4a <_dtoa_r+0x7ca>
 8009d76:	2001      	movs	r0, #1
 8009d78:	e76f      	b.n	8009c5a <_dtoa_r+0x7da>
 8009d7a:	f04f 0800 	mov.w	r8, #0
 8009d7e:	e7f6      	b.n	8009d6e <_dtoa_r+0x8ee>
 8009d80:	4698      	mov	r8, r3
 8009d82:	e7f4      	b.n	8009d6e <_dtoa_r+0x8ee>
 8009d84:	f43f af7d 	beq.w	8009c82 <_dtoa_r+0x802>
 8009d88:	4618      	mov	r0, r3
 8009d8a:	301c      	adds	r0, #28
 8009d8c:	e772      	b.n	8009c74 <_dtoa_r+0x7f4>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc37      	bgt.n	8009e04 <_dtoa_r+0x984>
 8009d94:	9b06      	ldr	r3, [sp, #24]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	dd34      	ble.n	8009e04 <_dtoa_r+0x984>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	9b02      	ldr	r3, [sp, #8]
 8009da0:	b96b      	cbnz	r3, 8009dbe <_dtoa_r+0x93e>
 8009da2:	4631      	mov	r1, r6
 8009da4:	2205      	movs	r2, #5
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fd68 	bl	800a87c <__multadd>
 8009dac:	4601      	mov	r1, r0
 8009dae:	4606      	mov	r6, r0
 8009db0:	ee18 0a10 	vmov	r0, s16
 8009db4:	f000 ffcc 	bl	800ad50 <__mcmp>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	f73f adbb 	bgt.w	8009934 <_dtoa_r+0x4b4>
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	9d01      	ldr	r5, [sp, #4]
 8009dc2:	43db      	mvns	r3, r3
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fd33 	bl	800a838 <_Bfree>
 8009dd2:	2f00      	cmp	r7, #0
 8009dd4:	f43f aea4 	beq.w	8009b20 <_dtoa_r+0x6a0>
 8009dd8:	f1b8 0f00 	cmp.w	r8, #0
 8009ddc:	d005      	beq.n	8009dea <_dtoa_r+0x96a>
 8009dde:	45b8      	cmp	r8, r7
 8009de0:	d003      	beq.n	8009dea <_dtoa_r+0x96a>
 8009de2:	4641      	mov	r1, r8
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 fd27 	bl	800a838 <_Bfree>
 8009dea:	4639      	mov	r1, r7
 8009dec:	4620      	mov	r0, r4
 8009dee:	f000 fd23 	bl	800a838 <_Bfree>
 8009df2:	e695      	b.n	8009b20 <_dtoa_r+0x6a0>
 8009df4:	2600      	movs	r6, #0
 8009df6:	4637      	mov	r7, r6
 8009df8:	e7e1      	b.n	8009dbe <_dtoa_r+0x93e>
 8009dfa:	9700      	str	r7, [sp, #0]
 8009dfc:	4637      	mov	r7, r6
 8009dfe:	e599      	b.n	8009934 <_dtoa_r+0x4b4>
 8009e00:	40240000 	.word	0x40240000
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 80ca 	beq.w	8009fa0 <_dtoa_r+0xb20>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	9302      	str	r3, [sp, #8]
 8009e10:	2d00      	cmp	r5, #0
 8009e12:	dd05      	ble.n	8009e20 <_dtoa_r+0x9a0>
 8009e14:	4639      	mov	r1, r7
 8009e16:	462a      	mov	r2, r5
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f000 ff29 	bl	800ac70 <__lshift>
 8009e1e:	4607      	mov	r7, r0
 8009e20:	f1b8 0f00 	cmp.w	r8, #0
 8009e24:	d05b      	beq.n	8009ede <_dtoa_r+0xa5e>
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 fcc5 	bl	800a7b8 <_Balloc>
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b928      	cbnz	r0, 8009e3e <_dtoa_r+0x9be>
 8009e32:	4b87      	ldr	r3, [pc, #540]	; (800a050 <_dtoa_r+0xbd0>)
 8009e34:	4602      	mov	r2, r0
 8009e36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e3a:	f7ff bb3b 	b.w	80094b4 <_dtoa_r+0x34>
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	3202      	adds	r2, #2
 8009e42:	0092      	lsls	r2, r2, #2
 8009e44:	f107 010c 	add.w	r1, r7, #12
 8009e48:	300c      	adds	r0, #12
 8009e4a:	f000 fca7 	bl	800a79c <memcpy>
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4629      	mov	r1, r5
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 ff0c 	bl	800ac70 <__lshift>
 8009e58:	9b01      	ldr	r3, [sp, #4]
 8009e5a:	f103 0901 	add.w	r9, r3, #1
 8009e5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e62:	4413      	add	r3, r2
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	f00a 0301 	and.w	r3, sl, #1
 8009e6a:	46b8      	mov	r8, r7
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	4607      	mov	r7, r0
 8009e70:	4631      	mov	r1, r6
 8009e72:	ee18 0a10 	vmov	r0, s16
 8009e76:	f7ff fa75 	bl	8009364 <quorem>
 8009e7a:	4641      	mov	r1, r8
 8009e7c:	9002      	str	r0, [sp, #8]
 8009e7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e82:	ee18 0a10 	vmov	r0, s16
 8009e86:	f000 ff63 	bl	800ad50 <__mcmp>
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	9003      	str	r0, [sp, #12]
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 ff79 	bl	800ad88 <__mdiff>
 8009e96:	68c2      	ldr	r2, [r0, #12]
 8009e98:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	bb02      	cbnz	r2, 8009ee2 <_dtoa_r+0xa62>
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	ee18 0a10 	vmov	r0, s16
 8009ea6:	f000 ff53 	bl	800ad50 <__mcmp>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4629      	mov	r1, r5
 8009eae:	4620      	mov	r0, r4
 8009eb0:	9207      	str	r2, [sp, #28]
 8009eb2:	f000 fcc1 	bl	800a838 <_Bfree>
 8009eb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009eba:	ea43 0102 	orr.w	r1, r3, r2
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	430b      	orrs	r3, r1
 8009ec2:	464d      	mov	r5, r9
 8009ec4:	d10f      	bne.n	8009ee6 <_dtoa_r+0xa66>
 8009ec6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009eca:	d02a      	beq.n	8009f22 <_dtoa_r+0xaa2>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dd02      	ble.n	8009ed8 <_dtoa_r+0xa58>
 8009ed2:	9b02      	ldr	r3, [sp, #8]
 8009ed4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ed8:	f88b a000 	strb.w	sl, [fp]
 8009edc:	e775      	b.n	8009dca <_dtoa_r+0x94a>
 8009ede:	4638      	mov	r0, r7
 8009ee0:	e7ba      	b.n	8009e58 <_dtoa_r+0x9d8>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	e7e2      	b.n	8009eac <_dtoa_r+0xa2c>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db04      	blt.n	8009ef6 <_dtoa_r+0xa76>
 8009eec:	9906      	ldr	r1, [sp, #24]
 8009eee:	430b      	orrs	r3, r1
 8009ef0:	9904      	ldr	r1, [sp, #16]
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	d122      	bne.n	8009f3c <_dtoa_r+0xabc>
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	ddee      	ble.n	8009ed8 <_dtoa_r+0xa58>
 8009efa:	ee18 1a10 	vmov	r1, s16
 8009efe:	2201      	movs	r2, #1
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 feb5 	bl	800ac70 <__lshift>
 8009f06:	4631      	mov	r1, r6
 8009f08:	ee08 0a10 	vmov	s16, r0
 8009f0c:	f000 ff20 	bl	800ad50 <__mcmp>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	dc03      	bgt.n	8009f1c <_dtoa_r+0xa9c>
 8009f14:	d1e0      	bne.n	8009ed8 <_dtoa_r+0xa58>
 8009f16:	f01a 0f01 	tst.w	sl, #1
 8009f1a:	d0dd      	beq.n	8009ed8 <_dtoa_r+0xa58>
 8009f1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f20:	d1d7      	bne.n	8009ed2 <_dtoa_r+0xa52>
 8009f22:	2339      	movs	r3, #57	; 0x39
 8009f24:	f88b 3000 	strb.w	r3, [fp]
 8009f28:	462b      	mov	r3, r5
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f32:	2a39      	cmp	r2, #57	; 0x39
 8009f34:	d071      	beq.n	800a01a <_dtoa_r+0xb9a>
 8009f36:	3201      	adds	r2, #1
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	e746      	b.n	8009dca <_dtoa_r+0x94a>
 8009f3c:	2a00      	cmp	r2, #0
 8009f3e:	dd07      	ble.n	8009f50 <_dtoa_r+0xad0>
 8009f40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f44:	d0ed      	beq.n	8009f22 <_dtoa_r+0xaa2>
 8009f46:	f10a 0301 	add.w	r3, sl, #1
 8009f4a:	f88b 3000 	strb.w	r3, [fp]
 8009f4e:	e73c      	b.n	8009dca <_dtoa_r+0x94a>
 8009f50:	9b05      	ldr	r3, [sp, #20]
 8009f52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f56:	4599      	cmp	r9, r3
 8009f58:	d047      	beq.n	8009fea <_dtoa_r+0xb6a>
 8009f5a:	ee18 1a10 	vmov	r1, s16
 8009f5e:	2300      	movs	r3, #0
 8009f60:	220a      	movs	r2, #10
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fc8a 	bl	800a87c <__multadd>
 8009f68:	45b8      	cmp	r8, r7
 8009f6a:	ee08 0a10 	vmov	s16, r0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	f04f 020a 	mov.w	r2, #10
 8009f76:	4641      	mov	r1, r8
 8009f78:	4620      	mov	r0, r4
 8009f7a:	d106      	bne.n	8009f8a <_dtoa_r+0xb0a>
 8009f7c:	f000 fc7e 	bl	800a87c <__multadd>
 8009f80:	4680      	mov	r8, r0
 8009f82:	4607      	mov	r7, r0
 8009f84:	f109 0901 	add.w	r9, r9, #1
 8009f88:	e772      	b.n	8009e70 <_dtoa_r+0x9f0>
 8009f8a:	f000 fc77 	bl	800a87c <__multadd>
 8009f8e:	4639      	mov	r1, r7
 8009f90:	4680      	mov	r8, r0
 8009f92:	2300      	movs	r3, #0
 8009f94:	220a      	movs	r2, #10
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fc70 	bl	800a87c <__multadd>
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	e7f1      	b.n	8009f84 <_dtoa_r+0xb04>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	9302      	str	r3, [sp, #8]
 8009fa4:	9d01      	ldr	r5, [sp, #4]
 8009fa6:	ee18 0a10 	vmov	r0, s16
 8009faa:	4631      	mov	r1, r6
 8009fac:	f7ff f9da 	bl	8009364 <quorem>
 8009fb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	f805 ab01 	strb.w	sl, [r5], #1
 8009fba:	1aea      	subs	r2, r5, r3
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	dd09      	ble.n	8009fd6 <_dtoa_r+0xb56>
 8009fc2:	ee18 1a10 	vmov	r1, s16
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	220a      	movs	r2, #10
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 fc56 	bl	800a87c <__multadd>
 8009fd0:	ee08 0a10 	vmov	s16, r0
 8009fd4:	e7e7      	b.n	8009fa6 <_dtoa_r+0xb26>
 8009fd6:	9b02      	ldr	r3, [sp, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	bfc8      	it	gt
 8009fdc:	461d      	movgt	r5, r3
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	bfd8      	it	le
 8009fe2:	2501      	movle	r5, #1
 8009fe4:	441d      	add	r5, r3
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	ee18 1a10 	vmov	r1, s16
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fe3d 	bl	800ac70 <__lshift>
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	ee08 0a10 	vmov	s16, r0
 8009ffc:	f000 fea8 	bl	800ad50 <__mcmp>
 800a000:	2800      	cmp	r0, #0
 800a002:	dc91      	bgt.n	8009f28 <_dtoa_r+0xaa8>
 800a004:	d102      	bne.n	800a00c <_dtoa_r+0xb8c>
 800a006:	f01a 0f01 	tst.w	sl, #1
 800a00a:	d18d      	bne.n	8009f28 <_dtoa_r+0xaa8>
 800a00c:	462b      	mov	r3, r5
 800a00e:	461d      	mov	r5, r3
 800a010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a014:	2a30      	cmp	r2, #48	; 0x30
 800a016:	d0fa      	beq.n	800a00e <_dtoa_r+0xb8e>
 800a018:	e6d7      	b.n	8009dca <_dtoa_r+0x94a>
 800a01a:	9a01      	ldr	r2, [sp, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d184      	bne.n	8009f2a <_dtoa_r+0xaaa>
 800a020:	9b00      	ldr	r3, [sp, #0]
 800a022:	3301      	adds	r3, #1
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	2331      	movs	r3, #49	; 0x31
 800a028:	7013      	strb	r3, [r2, #0]
 800a02a:	e6ce      	b.n	8009dca <_dtoa_r+0x94a>
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <_dtoa_r+0xbd4>)
 800a02e:	f7ff ba95 	b.w	800955c <_dtoa_r+0xdc>
 800a032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a034:	2b00      	cmp	r3, #0
 800a036:	f47f aa6e 	bne.w	8009516 <_dtoa_r+0x96>
 800a03a:	4b07      	ldr	r3, [pc, #28]	; (800a058 <_dtoa_r+0xbd8>)
 800a03c:	f7ff ba8e 	b.w	800955c <_dtoa_r+0xdc>
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	dcae      	bgt.n	8009fa4 <_dtoa_r+0xb24>
 800a046:	9b06      	ldr	r3, [sp, #24]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	f73f aea8 	bgt.w	8009d9e <_dtoa_r+0x91e>
 800a04e:	e7a9      	b.n	8009fa4 <_dtoa_r+0xb24>
 800a050:	0800d190 	.word	0x0800d190
 800a054:	0800cf94 	.word	0x0800cf94
 800a058:	0800d111 	.word	0x0800d111

0800a05c <rshift>:
 800a05c:	6903      	ldr	r3, [r0, #16]
 800a05e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a066:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a06a:	f100 0414 	add.w	r4, r0, #20
 800a06e:	dd45      	ble.n	800a0fc <rshift+0xa0>
 800a070:	f011 011f 	ands.w	r1, r1, #31
 800a074:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a078:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a07c:	d10c      	bne.n	800a098 <rshift+0x3c>
 800a07e:	f100 0710 	add.w	r7, r0, #16
 800a082:	4629      	mov	r1, r5
 800a084:	42b1      	cmp	r1, r6
 800a086:	d334      	bcc.n	800a0f2 <rshift+0x96>
 800a088:	1a9b      	subs	r3, r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	1eea      	subs	r2, r5, #3
 800a08e:	4296      	cmp	r6, r2
 800a090:	bf38      	it	cc
 800a092:	2300      	movcc	r3, #0
 800a094:	4423      	add	r3, r4
 800a096:	e015      	b.n	800a0c4 <rshift+0x68>
 800a098:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a09c:	f1c1 0820 	rsb	r8, r1, #32
 800a0a0:	40cf      	lsrs	r7, r1
 800a0a2:	f105 0e04 	add.w	lr, r5, #4
 800a0a6:	46a1      	mov	r9, r4
 800a0a8:	4576      	cmp	r6, lr
 800a0aa:	46f4      	mov	ip, lr
 800a0ac:	d815      	bhi.n	800a0da <rshift+0x7e>
 800a0ae:	1a9a      	subs	r2, r3, r2
 800a0b0:	0092      	lsls	r2, r2, #2
 800a0b2:	3a04      	subs	r2, #4
 800a0b4:	3501      	adds	r5, #1
 800a0b6:	42ae      	cmp	r6, r5
 800a0b8:	bf38      	it	cc
 800a0ba:	2200      	movcc	r2, #0
 800a0bc:	18a3      	adds	r3, r4, r2
 800a0be:	50a7      	str	r7, [r4, r2]
 800a0c0:	b107      	cbz	r7, 800a0c4 <rshift+0x68>
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	1b1a      	subs	r2, r3, r4
 800a0c6:	42a3      	cmp	r3, r4
 800a0c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0cc:	bf08      	it	eq
 800a0ce:	2300      	moveq	r3, #0
 800a0d0:	6102      	str	r2, [r0, #16]
 800a0d2:	bf08      	it	eq
 800a0d4:	6143      	streq	r3, [r0, #20]
 800a0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0da:	f8dc c000 	ldr.w	ip, [ip]
 800a0de:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0e2:	ea4c 0707 	orr.w	r7, ip, r7
 800a0e6:	f849 7b04 	str.w	r7, [r9], #4
 800a0ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0ee:	40cf      	lsrs	r7, r1
 800a0f0:	e7da      	b.n	800a0a8 <rshift+0x4c>
 800a0f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0fa:	e7c3      	b.n	800a084 <rshift+0x28>
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	e7e1      	b.n	800a0c4 <rshift+0x68>

0800a100 <__hexdig_fun>:
 800a100:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a104:	2b09      	cmp	r3, #9
 800a106:	d802      	bhi.n	800a10e <__hexdig_fun+0xe>
 800a108:	3820      	subs	r0, #32
 800a10a:	b2c0      	uxtb	r0, r0
 800a10c:	4770      	bx	lr
 800a10e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a112:	2b05      	cmp	r3, #5
 800a114:	d801      	bhi.n	800a11a <__hexdig_fun+0x1a>
 800a116:	3847      	subs	r0, #71	; 0x47
 800a118:	e7f7      	b.n	800a10a <__hexdig_fun+0xa>
 800a11a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a11e:	2b05      	cmp	r3, #5
 800a120:	d801      	bhi.n	800a126 <__hexdig_fun+0x26>
 800a122:	3827      	subs	r0, #39	; 0x27
 800a124:	e7f1      	b.n	800a10a <__hexdig_fun+0xa>
 800a126:	2000      	movs	r0, #0
 800a128:	4770      	bx	lr
	...

0800a12c <__gethex>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	ed2d 8b02 	vpush	{d8}
 800a134:	b089      	sub	sp, #36	; 0x24
 800a136:	ee08 0a10 	vmov	s16, r0
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	4bb4      	ldr	r3, [pc, #720]	; (800a410 <__gethex+0x2e4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	4618      	mov	r0, r3
 800a144:	468b      	mov	fp, r1
 800a146:	4690      	mov	r8, r2
 800a148:	f7f6 f862 	bl	8000210 <strlen>
 800a14c:	9b01      	ldr	r3, [sp, #4]
 800a14e:	f8db 2000 	ldr.w	r2, [fp]
 800a152:	4403      	add	r3, r0
 800a154:	4682      	mov	sl, r0
 800a156:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	1c93      	adds	r3, r2, #2
 800a15e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a162:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a166:	32fe      	adds	r2, #254	; 0xfe
 800a168:	18d1      	adds	r1, r2, r3
 800a16a:	461f      	mov	r7, r3
 800a16c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a170:	9100      	str	r1, [sp, #0]
 800a172:	2830      	cmp	r0, #48	; 0x30
 800a174:	d0f8      	beq.n	800a168 <__gethex+0x3c>
 800a176:	f7ff ffc3 	bl	800a100 <__hexdig_fun>
 800a17a:	4604      	mov	r4, r0
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d13a      	bne.n	800a1f6 <__gethex+0xca>
 800a180:	9901      	ldr	r1, [sp, #4]
 800a182:	4652      	mov	r2, sl
 800a184:	4638      	mov	r0, r7
 800a186:	f001 fa57 	bl	800b638 <strncmp>
 800a18a:	4605      	mov	r5, r0
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d168      	bne.n	800a262 <__gethex+0x136>
 800a190:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a194:	eb07 060a 	add.w	r6, r7, sl
 800a198:	f7ff ffb2 	bl	800a100 <__hexdig_fun>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d062      	beq.n	800a266 <__gethex+0x13a>
 800a1a0:	4633      	mov	r3, r6
 800a1a2:	7818      	ldrb	r0, [r3, #0]
 800a1a4:	2830      	cmp	r0, #48	; 0x30
 800a1a6:	461f      	mov	r7, r3
 800a1a8:	f103 0301 	add.w	r3, r3, #1
 800a1ac:	d0f9      	beq.n	800a1a2 <__gethex+0x76>
 800a1ae:	f7ff ffa7 	bl	800a100 <__hexdig_fun>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	fab0 f480 	clz	r4, r0
 800a1b8:	0964      	lsrs	r4, r4, #5
 800a1ba:	4635      	mov	r5, r6
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	463a      	mov	r2, r7
 800a1c0:	4616      	mov	r6, r2
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	7830      	ldrb	r0, [r6, #0]
 800a1c6:	f7ff ff9b 	bl	800a100 <__hexdig_fun>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d1f8      	bne.n	800a1c0 <__gethex+0x94>
 800a1ce:	9901      	ldr	r1, [sp, #4]
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f001 fa30 	bl	800b638 <strncmp>
 800a1d8:	b980      	cbnz	r0, 800a1fc <__gethex+0xd0>
 800a1da:	b94d      	cbnz	r5, 800a1f0 <__gethex+0xc4>
 800a1dc:	eb06 050a 	add.w	r5, r6, sl
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4616      	mov	r6, r2
 800a1e4:	3201      	adds	r2, #1
 800a1e6:	7830      	ldrb	r0, [r6, #0]
 800a1e8:	f7ff ff8a 	bl	800a100 <__hexdig_fun>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d1f8      	bne.n	800a1e2 <__gethex+0xb6>
 800a1f0:	1bad      	subs	r5, r5, r6
 800a1f2:	00ad      	lsls	r5, r5, #2
 800a1f4:	e004      	b.n	800a200 <__gethex+0xd4>
 800a1f6:	2400      	movs	r4, #0
 800a1f8:	4625      	mov	r5, r4
 800a1fa:	e7e0      	b.n	800a1be <__gethex+0x92>
 800a1fc:	2d00      	cmp	r5, #0
 800a1fe:	d1f7      	bne.n	800a1f0 <__gethex+0xc4>
 800a200:	7833      	ldrb	r3, [r6, #0]
 800a202:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a206:	2b50      	cmp	r3, #80	; 0x50
 800a208:	d13b      	bne.n	800a282 <__gethex+0x156>
 800a20a:	7873      	ldrb	r3, [r6, #1]
 800a20c:	2b2b      	cmp	r3, #43	; 0x2b
 800a20e:	d02c      	beq.n	800a26a <__gethex+0x13e>
 800a210:	2b2d      	cmp	r3, #45	; 0x2d
 800a212:	d02e      	beq.n	800a272 <__gethex+0x146>
 800a214:	1c71      	adds	r1, r6, #1
 800a216:	f04f 0900 	mov.w	r9, #0
 800a21a:	7808      	ldrb	r0, [r1, #0]
 800a21c:	f7ff ff70 	bl	800a100 <__hexdig_fun>
 800a220:	1e43      	subs	r3, r0, #1
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b18      	cmp	r3, #24
 800a226:	d82c      	bhi.n	800a282 <__gethex+0x156>
 800a228:	f1a0 0210 	sub.w	r2, r0, #16
 800a22c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a230:	f7ff ff66 	bl	800a100 <__hexdig_fun>
 800a234:	1e43      	subs	r3, r0, #1
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b18      	cmp	r3, #24
 800a23a:	d91d      	bls.n	800a278 <__gethex+0x14c>
 800a23c:	f1b9 0f00 	cmp.w	r9, #0
 800a240:	d000      	beq.n	800a244 <__gethex+0x118>
 800a242:	4252      	negs	r2, r2
 800a244:	4415      	add	r5, r2
 800a246:	f8cb 1000 	str.w	r1, [fp]
 800a24a:	b1e4      	cbz	r4, 800a286 <__gethex+0x15a>
 800a24c:	9b00      	ldr	r3, [sp, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bf14      	ite	ne
 800a252:	2700      	movne	r7, #0
 800a254:	2706      	moveq	r7, #6
 800a256:	4638      	mov	r0, r7
 800a258:	b009      	add	sp, #36	; 0x24
 800a25a:	ecbd 8b02 	vpop	{d8}
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	463e      	mov	r6, r7
 800a264:	4625      	mov	r5, r4
 800a266:	2401      	movs	r4, #1
 800a268:	e7ca      	b.n	800a200 <__gethex+0xd4>
 800a26a:	f04f 0900 	mov.w	r9, #0
 800a26e:	1cb1      	adds	r1, r6, #2
 800a270:	e7d3      	b.n	800a21a <__gethex+0xee>
 800a272:	f04f 0901 	mov.w	r9, #1
 800a276:	e7fa      	b.n	800a26e <__gethex+0x142>
 800a278:	230a      	movs	r3, #10
 800a27a:	fb03 0202 	mla	r2, r3, r2, r0
 800a27e:	3a10      	subs	r2, #16
 800a280:	e7d4      	b.n	800a22c <__gethex+0x100>
 800a282:	4631      	mov	r1, r6
 800a284:	e7df      	b.n	800a246 <__gethex+0x11a>
 800a286:	1bf3      	subs	r3, r6, r7
 800a288:	3b01      	subs	r3, #1
 800a28a:	4621      	mov	r1, r4
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	dc0b      	bgt.n	800a2a8 <__gethex+0x17c>
 800a290:	ee18 0a10 	vmov	r0, s16
 800a294:	f000 fa90 	bl	800a7b8 <_Balloc>
 800a298:	4604      	mov	r4, r0
 800a29a:	b940      	cbnz	r0, 800a2ae <__gethex+0x182>
 800a29c:	4b5d      	ldr	r3, [pc, #372]	; (800a414 <__gethex+0x2e8>)
 800a29e:	4602      	mov	r2, r0
 800a2a0:	21de      	movs	r1, #222	; 0xde
 800a2a2:	485d      	ldr	r0, [pc, #372]	; (800a418 <__gethex+0x2ec>)
 800a2a4:	f001 f9ea 	bl	800b67c <__assert_func>
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	105b      	asrs	r3, r3, #1
 800a2ac:	e7ee      	b.n	800a28c <__gethex+0x160>
 800a2ae:	f100 0914 	add.w	r9, r0, #20
 800a2b2:	f04f 0b00 	mov.w	fp, #0
 800a2b6:	f1ca 0301 	rsb	r3, sl, #1
 800a2ba:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2be:	f8cd b000 	str.w	fp, [sp]
 800a2c2:	9306      	str	r3, [sp, #24]
 800a2c4:	42b7      	cmp	r7, r6
 800a2c6:	d340      	bcc.n	800a34a <__gethex+0x21e>
 800a2c8:	9802      	ldr	r0, [sp, #8]
 800a2ca:	9b00      	ldr	r3, [sp, #0]
 800a2cc:	f840 3b04 	str.w	r3, [r0], #4
 800a2d0:	eba0 0009 	sub.w	r0, r0, r9
 800a2d4:	1080      	asrs	r0, r0, #2
 800a2d6:	0146      	lsls	r6, r0, #5
 800a2d8:	6120      	str	r0, [r4, #16]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fb5e 	bl	800a99c <__hi0bits>
 800a2e0:	1a30      	subs	r0, r6, r0
 800a2e2:	f8d8 6000 	ldr.w	r6, [r8]
 800a2e6:	42b0      	cmp	r0, r6
 800a2e8:	dd63      	ble.n	800a3b2 <__gethex+0x286>
 800a2ea:	1b87      	subs	r7, r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 ff02 	bl	800b0f8 <__any_on>
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	b1a8      	cbz	r0, 800a324 <__gethex+0x1f8>
 800a2f8:	1e7b      	subs	r3, r7, #1
 800a2fa:	1159      	asrs	r1, r3, #5
 800a2fc:	f003 021f 	and.w	r2, r3, #31
 800a300:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a304:	f04f 0a01 	mov.w	sl, #1
 800a308:	fa0a f202 	lsl.w	r2, sl, r2
 800a30c:	420a      	tst	r2, r1
 800a30e:	d009      	beq.n	800a324 <__gethex+0x1f8>
 800a310:	4553      	cmp	r3, sl
 800a312:	dd05      	ble.n	800a320 <__gethex+0x1f4>
 800a314:	1eb9      	subs	r1, r7, #2
 800a316:	4620      	mov	r0, r4
 800a318:	f000 feee 	bl	800b0f8 <__any_on>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d145      	bne.n	800a3ac <__gethex+0x280>
 800a320:	f04f 0a02 	mov.w	sl, #2
 800a324:	4639      	mov	r1, r7
 800a326:	4620      	mov	r0, r4
 800a328:	f7ff fe98 	bl	800a05c <rshift>
 800a32c:	443d      	add	r5, r7
 800a32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a332:	42ab      	cmp	r3, r5
 800a334:	da4c      	bge.n	800a3d0 <__gethex+0x2a4>
 800a336:	ee18 0a10 	vmov	r0, s16
 800a33a:	4621      	mov	r1, r4
 800a33c:	f000 fa7c 	bl	800a838 <_Bfree>
 800a340:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a342:	2300      	movs	r3, #0
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	27a3      	movs	r7, #163	; 0xa3
 800a348:	e785      	b.n	800a256 <__gethex+0x12a>
 800a34a:	1e73      	subs	r3, r6, #1
 800a34c:	9a05      	ldr	r2, [sp, #20]
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a354:	4293      	cmp	r3, r2
 800a356:	d019      	beq.n	800a38c <__gethex+0x260>
 800a358:	f1bb 0f20 	cmp.w	fp, #32
 800a35c:	d107      	bne.n	800a36e <__gethex+0x242>
 800a35e:	9b02      	ldr	r3, [sp, #8]
 800a360:	9a00      	ldr	r2, [sp, #0]
 800a362:	f843 2b04 	str.w	r2, [r3], #4
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	2300      	movs	r3, #0
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	469b      	mov	fp, r3
 800a36e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a372:	f7ff fec5 	bl	800a100 <__hexdig_fun>
 800a376:	9b00      	ldr	r3, [sp, #0]
 800a378:	f000 000f 	and.w	r0, r0, #15
 800a37c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a380:	4303      	orrs	r3, r0
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	f10b 0b04 	add.w	fp, fp, #4
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	e00d      	b.n	800a3a8 <__gethex+0x27c>
 800a38c:	9b03      	ldr	r3, [sp, #12]
 800a38e:	9a06      	ldr	r2, [sp, #24]
 800a390:	4413      	add	r3, r2
 800a392:	42bb      	cmp	r3, r7
 800a394:	d3e0      	bcc.n	800a358 <__gethex+0x22c>
 800a396:	4618      	mov	r0, r3
 800a398:	9901      	ldr	r1, [sp, #4]
 800a39a:	9307      	str	r3, [sp, #28]
 800a39c:	4652      	mov	r2, sl
 800a39e:	f001 f94b 	bl	800b638 <strncmp>
 800a3a2:	9b07      	ldr	r3, [sp, #28]
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1d7      	bne.n	800a358 <__gethex+0x22c>
 800a3a8:	461e      	mov	r6, r3
 800a3aa:	e78b      	b.n	800a2c4 <__gethex+0x198>
 800a3ac:	f04f 0a03 	mov.w	sl, #3
 800a3b0:	e7b8      	b.n	800a324 <__gethex+0x1f8>
 800a3b2:	da0a      	bge.n	800a3ca <__gethex+0x29e>
 800a3b4:	1a37      	subs	r7, r6, r0
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	ee18 0a10 	vmov	r0, s16
 800a3bc:	463a      	mov	r2, r7
 800a3be:	f000 fc57 	bl	800ac70 <__lshift>
 800a3c2:	1bed      	subs	r5, r5, r7
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	f100 0914 	add.w	r9, r0, #20
 800a3ca:	f04f 0a00 	mov.w	sl, #0
 800a3ce:	e7ae      	b.n	800a32e <__gethex+0x202>
 800a3d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3d4:	42a8      	cmp	r0, r5
 800a3d6:	dd72      	ble.n	800a4be <__gethex+0x392>
 800a3d8:	1b45      	subs	r5, r0, r5
 800a3da:	42ae      	cmp	r6, r5
 800a3dc:	dc36      	bgt.n	800a44c <__gethex+0x320>
 800a3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d02a      	beq.n	800a43c <__gethex+0x310>
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d02c      	beq.n	800a444 <__gethex+0x318>
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d11c      	bne.n	800a428 <__gethex+0x2fc>
 800a3ee:	42ae      	cmp	r6, r5
 800a3f0:	d11a      	bne.n	800a428 <__gethex+0x2fc>
 800a3f2:	2e01      	cmp	r6, #1
 800a3f4:	d112      	bne.n	800a41c <__gethex+0x2f0>
 800a3f6:	9a04      	ldr	r2, [sp, #16]
 800a3f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	2301      	movs	r3, #1
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	f8c9 3000 	str.w	r3, [r9]
 800a406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a408:	2762      	movs	r7, #98	; 0x62
 800a40a:	601c      	str	r4, [r3, #0]
 800a40c:	e723      	b.n	800a256 <__gethex+0x12a>
 800a40e:	bf00      	nop
 800a410:	0800d208 	.word	0x0800d208
 800a414:	0800d190 	.word	0x0800d190
 800a418:	0800d1a1 	.word	0x0800d1a1
 800a41c:	1e71      	subs	r1, r6, #1
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fe6a 	bl	800b0f8 <__any_on>
 800a424:	2800      	cmp	r0, #0
 800a426:	d1e6      	bne.n	800a3f6 <__gethex+0x2ca>
 800a428:	ee18 0a10 	vmov	r0, s16
 800a42c:	4621      	mov	r1, r4
 800a42e:	f000 fa03 	bl	800a838 <_Bfree>
 800a432:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a434:	2300      	movs	r3, #0
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	2750      	movs	r7, #80	; 0x50
 800a43a:	e70c      	b.n	800a256 <__gethex+0x12a>
 800a43c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f2      	bne.n	800a428 <__gethex+0x2fc>
 800a442:	e7d8      	b.n	800a3f6 <__gethex+0x2ca>
 800a444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1d5      	bne.n	800a3f6 <__gethex+0x2ca>
 800a44a:	e7ed      	b.n	800a428 <__gethex+0x2fc>
 800a44c:	1e6f      	subs	r7, r5, #1
 800a44e:	f1ba 0f00 	cmp.w	sl, #0
 800a452:	d131      	bne.n	800a4b8 <__gethex+0x38c>
 800a454:	b127      	cbz	r7, 800a460 <__gethex+0x334>
 800a456:	4639      	mov	r1, r7
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fe4d 	bl	800b0f8 <__any_on>
 800a45e:	4682      	mov	sl, r0
 800a460:	117b      	asrs	r3, r7, #5
 800a462:	2101      	movs	r1, #1
 800a464:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a468:	f007 071f 	and.w	r7, r7, #31
 800a46c:	fa01 f707 	lsl.w	r7, r1, r7
 800a470:	421f      	tst	r7, r3
 800a472:	4629      	mov	r1, r5
 800a474:	4620      	mov	r0, r4
 800a476:	bf18      	it	ne
 800a478:	f04a 0a02 	orrne.w	sl, sl, #2
 800a47c:	1b76      	subs	r6, r6, r5
 800a47e:	f7ff fded 	bl	800a05c <rshift>
 800a482:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a486:	2702      	movs	r7, #2
 800a488:	f1ba 0f00 	cmp.w	sl, #0
 800a48c:	d048      	beq.n	800a520 <__gethex+0x3f4>
 800a48e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d015      	beq.n	800a4c2 <__gethex+0x396>
 800a496:	2b03      	cmp	r3, #3
 800a498:	d017      	beq.n	800a4ca <__gethex+0x39e>
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d109      	bne.n	800a4b2 <__gethex+0x386>
 800a49e:	f01a 0f02 	tst.w	sl, #2
 800a4a2:	d006      	beq.n	800a4b2 <__gethex+0x386>
 800a4a4:	f8d9 0000 	ldr.w	r0, [r9]
 800a4a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4ac:	f01a 0f01 	tst.w	sl, #1
 800a4b0:	d10e      	bne.n	800a4d0 <__gethex+0x3a4>
 800a4b2:	f047 0710 	orr.w	r7, r7, #16
 800a4b6:	e033      	b.n	800a520 <__gethex+0x3f4>
 800a4b8:	f04f 0a01 	mov.w	sl, #1
 800a4bc:	e7d0      	b.n	800a460 <__gethex+0x334>
 800a4be:	2701      	movs	r7, #1
 800a4c0:	e7e2      	b.n	800a488 <__gethex+0x35c>
 800a4c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c4:	f1c3 0301 	rsb	r3, r3, #1
 800a4c8:	9315      	str	r3, [sp, #84]	; 0x54
 800a4ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0f0      	beq.n	800a4b2 <__gethex+0x386>
 800a4d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4d4:	f104 0314 	add.w	r3, r4, #20
 800a4d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4e0:	f04f 0c00 	mov.w	ip, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4ee:	d01c      	beq.n	800a52a <__gethex+0x3fe>
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	6002      	str	r2, [r0, #0]
 800a4f4:	2f02      	cmp	r7, #2
 800a4f6:	f104 0314 	add.w	r3, r4, #20
 800a4fa:	d13f      	bne.n	800a57c <__gethex+0x450>
 800a4fc:	f8d8 2000 	ldr.w	r2, [r8]
 800a500:	3a01      	subs	r2, #1
 800a502:	42b2      	cmp	r2, r6
 800a504:	d10a      	bne.n	800a51c <__gethex+0x3f0>
 800a506:	1171      	asrs	r1, r6, #5
 800a508:	2201      	movs	r2, #1
 800a50a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a50e:	f006 061f 	and.w	r6, r6, #31
 800a512:	fa02 f606 	lsl.w	r6, r2, r6
 800a516:	421e      	tst	r6, r3
 800a518:	bf18      	it	ne
 800a51a:	4617      	movne	r7, r2
 800a51c:	f047 0720 	orr.w	r7, r7, #32
 800a520:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a522:	601c      	str	r4, [r3, #0]
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	601d      	str	r5, [r3, #0]
 800a528:	e695      	b.n	800a256 <__gethex+0x12a>
 800a52a:	4299      	cmp	r1, r3
 800a52c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a530:	d8d8      	bhi.n	800a4e4 <__gethex+0x3b8>
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	459b      	cmp	fp, r3
 800a536:	db19      	blt.n	800a56c <__gethex+0x440>
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	ee18 0a10 	vmov	r0, s16
 800a53e:	3101      	adds	r1, #1
 800a540:	f000 f93a 	bl	800a7b8 <_Balloc>
 800a544:	4681      	mov	r9, r0
 800a546:	b918      	cbnz	r0, 800a550 <__gethex+0x424>
 800a548:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <__gethex+0x488>)
 800a54a:	4602      	mov	r2, r0
 800a54c:	2184      	movs	r1, #132	; 0x84
 800a54e:	e6a8      	b.n	800a2a2 <__gethex+0x176>
 800a550:	6922      	ldr	r2, [r4, #16]
 800a552:	3202      	adds	r2, #2
 800a554:	f104 010c 	add.w	r1, r4, #12
 800a558:	0092      	lsls	r2, r2, #2
 800a55a:	300c      	adds	r0, #12
 800a55c:	f000 f91e 	bl	800a79c <memcpy>
 800a560:	4621      	mov	r1, r4
 800a562:	ee18 0a10 	vmov	r0, s16
 800a566:	f000 f967 	bl	800a838 <_Bfree>
 800a56a:	464c      	mov	r4, r9
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a574:	6122      	str	r2, [r4, #16]
 800a576:	2201      	movs	r2, #1
 800a578:	615a      	str	r2, [r3, #20]
 800a57a:	e7bb      	b.n	800a4f4 <__gethex+0x3c8>
 800a57c:	6922      	ldr	r2, [r4, #16]
 800a57e:	455a      	cmp	r2, fp
 800a580:	dd0b      	ble.n	800a59a <__gethex+0x46e>
 800a582:	2101      	movs	r1, #1
 800a584:	4620      	mov	r0, r4
 800a586:	f7ff fd69 	bl	800a05c <rshift>
 800a58a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a58e:	3501      	adds	r5, #1
 800a590:	42ab      	cmp	r3, r5
 800a592:	f6ff aed0 	blt.w	800a336 <__gethex+0x20a>
 800a596:	2701      	movs	r7, #1
 800a598:	e7c0      	b.n	800a51c <__gethex+0x3f0>
 800a59a:	f016 061f 	ands.w	r6, r6, #31
 800a59e:	d0fa      	beq.n	800a596 <__gethex+0x46a>
 800a5a0:	4453      	add	r3, sl
 800a5a2:	f1c6 0620 	rsb	r6, r6, #32
 800a5a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5aa:	f000 f9f7 	bl	800a99c <__hi0bits>
 800a5ae:	42b0      	cmp	r0, r6
 800a5b0:	dbe7      	blt.n	800a582 <__gethex+0x456>
 800a5b2:	e7f0      	b.n	800a596 <__gethex+0x46a>
 800a5b4:	0800d190 	.word	0x0800d190

0800a5b8 <L_shift>:
 800a5b8:	f1c2 0208 	rsb	r2, r2, #8
 800a5bc:	0092      	lsls	r2, r2, #2
 800a5be:	b570      	push	{r4, r5, r6, lr}
 800a5c0:	f1c2 0620 	rsb	r6, r2, #32
 800a5c4:	6843      	ldr	r3, [r0, #4]
 800a5c6:	6804      	ldr	r4, [r0, #0]
 800a5c8:	fa03 f506 	lsl.w	r5, r3, r6
 800a5cc:	432c      	orrs	r4, r5
 800a5ce:	40d3      	lsrs	r3, r2
 800a5d0:	6004      	str	r4, [r0, #0]
 800a5d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5d6:	4288      	cmp	r0, r1
 800a5d8:	d3f4      	bcc.n	800a5c4 <L_shift+0xc>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}

0800a5dc <__match>:
 800a5dc:	b530      	push	{r4, r5, lr}
 800a5de:	6803      	ldr	r3, [r0, #0]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e6:	b914      	cbnz	r4, 800a5ee <__match+0x12>
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	bd30      	pop	{r4, r5, pc}
 800a5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5f6:	2d19      	cmp	r5, #25
 800a5f8:	bf98      	it	ls
 800a5fa:	3220      	addls	r2, #32
 800a5fc:	42a2      	cmp	r2, r4
 800a5fe:	d0f0      	beq.n	800a5e2 <__match+0x6>
 800a600:	2000      	movs	r0, #0
 800a602:	e7f3      	b.n	800a5ec <__match+0x10>

0800a604 <__hexnan>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	680b      	ldr	r3, [r1, #0]
 800a60a:	115e      	asrs	r6, r3, #5
 800a60c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a610:	f013 031f 	ands.w	r3, r3, #31
 800a614:	b087      	sub	sp, #28
 800a616:	bf18      	it	ne
 800a618:	3604      	addne	r6, #4
 800a61a:	2500      	movs	r5, #0
 800a61c:	1f37      	subs	r7, r6, #4
 800a61e:	4690      	mov	r8, r2
 800a620:	6802      	ldr	r2, [r0, #0]
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	4682      	mov	sl, r0
 800a626:	f846 5c04 	str.w	r5, [r6, #-4]
 800a62a:	46b9      	mov	r9, r7
 800a62c:	463c      	mov	r4, r7
 800a62e:	9502      	str	r5, [sp, #8]
 800a630:	46ab      	mov	fp, r5
 800a632:	7851      	ldrb	r1, [r2, #1]
 800a634:	1c53      	adds	r3, r2, #1
 800a636:	9303      	str	r3, [sp, #12]
 800a638:	b341      	cbz	r1, 800a68c <__hexnan+0x88>
 800a63a:	4608      	mov	r0, r1
 800a63c:	9205      	str	r2, [sp, #20]
 800a63e:	9104      	str	r1, [sp, #16]
 800a640:	f7ff fd5e 	bl	800a100 <__hexdig_fun>
 800a644:	2800      	cmp	r0, #0
 800a646:	d14f      	bne.n	800a6e8 <__hexnan+0xe4>
 800a648:	9904      	ldr	r1, [sp, #16]
 800a64a:	9a05      	ldr	r2, [sp, #20]
 800a64c:	2920      	cmp	r1, #32
 800a64e:	d818      	bhi.n	800a682 <__hexnan+0x7e>
 800a650:	9b02      	ldr	r3, [sp, #8]
 800a652:	459b      	cmp	fp, r3
 800a654:	dd13      	ble.n	800a67e <__hexnan+0x7a>
 800a656:	454c      	cmp	r4, r9
 800a658:	d206      	bcs.n	800a668 <__hexnan+0x64>
 800a65a:	2d07      	cmp	r5, #7
 800a65c:	dc04      	bgt.n	800a668 <__hexnan+0x64>
 800a65e:	462a      	mov	r2, r5
 800a660:	4649      	mov	r1, r9
 800a662:	4620      	mov	r0, r4
 800a664:	f7ff ffa8 	bl	800a5b8 <L_shift>
 800a668:	4544      	cmp	r4, r8
 800a66a:	d950      	bls.n	800a70e <__hexnan+0x10a>
 800a66c:	2300      	movs	r3, #0
 800a66e:	f1a4 0904 	sub.w	r9, r4, #4
 800a672:	f844 3c04 	str.w	r3, [r4, #-4]
 800a676:	f8cd b008 	str.w	fp, [sp, #8]
 800a67a:	464c      	mov	r4, r9
 800a67c:	461d      	mov	r5, r3
 800a67e:	9a03      	ldr	r2, [sp, #12]
 800a680:	e7d7      	b.n	800a632 <__hexnan+0x2e>
 800a682:	2929      	cmp	r1, #41	; 0x29
 800a684:	d156      	bne.n	800a734 <__hexnan+0x130>
 800a686:	3202      	adds	r2, #2
 800a688:	f8ca 2000 	str.w	r2, [sl]
 800a68c:	f1bb 0f00 	cmp.w	fp, #0
 800a690:	d050      	beq.n	800a734 <__hexnan+0x130>
 800a692:	454c      	cmp	r4, r9
 800a694:	d206      	bcs.n	800a6a4 <__hexnan+0xa0>
 800a696:	2d07      	cmp	r5, #7
 800a698:	dc04      	bgt.n	800a6a4 <__hexnan+0xa0>
 800a69a:	462a      	mov	r2, r5
 800a69c:	4649      	mov	r1, r9
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7ff ff8a 	bl	800a5b8 <L_shift>
 800a6a4:	4544      	cmp	r4, r8
 800a6a6:	d934      	bls.n	800a712 <__hexnan+0x10e>
 800a6a8:	f1a8 0204 	sub.w	r2, r8, #4
 800a6ac:	4623      	mov	r3, r4
 800a6ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6b6:	429f      	cmp	r7, r3
 800a6b8:	d2f9      	bcs.n	800a6ae <__hexnan+0xaa>
 800a6ba:	1b3b      	subs	r3, r7, r4
 800a6bc:	f023 0303 	bic.w	r3, r3, #3
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	3401      	adds	r4, #1
 800a6c4:	3e03      	subs	r6, #3
 800a6c6:	42b4      	cmp	r4, r6
 800a6c8:	bf88      	it	hi
 800a6ca:	2304      	movhi	r3, #4
 800a6cc:	4443      	add	r3, r8
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f843 2b04 	str.w	r2, [r3], #4
 800a6d4:	429f      	cmp	r7, r3
 800a6d6:	d2fb      	bcs.n	800a6d0 <__hexnan+0xcc>
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	b91b      	cbnz	r3, 800a6e4 <__hexnan+0xe0>
 800a6dc:	4547      	cmp	r7, r8
 800a6de:	d127      	bne.n	800a730 <__hexnan+0x12c>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	2005      	movs	r0, #5
 800a6e6:	e026      	b.n	800a736 <__hexnan+0x132>
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	2d08      	cmp	r5, #8
 800a6ec:	f10b 0b01 	add.w	fp, fp, #1
 800a6f0:	dd06      	ble.n	800a700 <__hexnan+0xfc>
 800a6f2:	4544      	cmp	r4, r8
 800a6f4:	d9c3      	bls.n	800a67e <__hexnan+0x7a>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6fc:	2501      	movs	r5, #1
 800a6fe:	3c04      	subs	r4, #4
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	f000 000f 	and.w	r0, r0, #15
 800a706:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a70a:	6022      	str	r2, [r4, #0]
 800a70c:	e7b7      	b.n	800a67e <__hexnan+0x7a>
 800a70e:	2508      	movs	r5, #8
 800a710:	e7b5      	b.n	800a67e <__hexnan+0x7a>
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0df      	beq.n	800a6d8 <__hexnan+0xd4>
 800a718:	f04f 32ff 	mov.w	r2, #4294967295
 800a71c:	f1c3 0320 	rsb	r3, r3, #32
 800a720:	fa22 f303 	lsr.w	r3, r2, r3
 800a724:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a728:	401a      	ands	r2, r3
 800a72a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a72e:	e7d3      	b.n	800a6d8 <__hexnan+0xd4>
 800a730:	3f04      	subs	r7, #4
 800a732:	e7d1      	b.n	800a6d8 <__hexnan+0xd4>
 800a734:	2004      	movs	r0, #4
 800a736:	b007      	add	sp, #28
 800a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a73c <_localeconv_r>:
 800a73c:	4800      	ldr	r0, [pc, #0]	; (800a740 <_localeconv_r+0x4>)
 800a73e:	4770      	bx	lr
 800a740:	20000164 	.word	0x20000164

0800a744 <_lseek_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d07      	ldr	r5, [pc, #28]	; (800a764 <_lseek_r+0x20>)
 800a748:	4604      	mov	r4, r0
 800a74a:	4608      	mov	r0, r1
 800a74c:	4611      	mov	r1, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f7f8 fde0 	bl	8003318 <_lseek>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_lseek_r+0x1e>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_lseek_r+0x1e>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	200006f0 	.word	0x200006f0

0800a768 <malloc>:
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <malloc+0xc>)
 800a76a:	4601      	mov	r1, r0
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	f000 bd67 	b.w	800b240 <_malloc_r>
 800a772:	bf00      	nop
 800a774:	2000000c 	.word	0x2000000c

0800a778 <__ascii_mbtowc>:
 800a778:	b082      	sub	sp, #8
 800a77a:	b901      	cbnz	r1, 800a77e <__ascii_mbtowc+0x6>
 800a77c:	a901      	add	r1, sp, #4
 800a77e:	b142      	cbz	r2, 800a792 <__ascii_mbtowc+0x1a>
 800a780:	b14b      	cbz	r3, 800a796 <__ascii_mbtowc+0x1e>
 800a782:	7813      	ldrb	r3, [r2, #0]
 800a784:	600b      	str	r3, [r1, #0]
 800a786:	7812      	ldrb	r2, [r2, #0]
 800a788:	1e10      	subs	r0, r2, #0
 800a78a:	bf18      	it	ne
 800a78c:	2001      	movne	r0, #1
 800a78e:	b002      	add	sp, #8
 800a790:	4770      	bx	lr
 800a792:	4610      	mov	r0, r2
 800a794:	e7fb      	b.n	800a78e <__ascii_mbtowc+0x16>
 800a796:	f06f 0001 	mvn.w	r0, #1
 800a79a:	e7f8      	b.n	800a78e <__ascii_mbtowc+0x16>

0800a79c <memcpy>:
 800a79c:	440a      	add	r2, r1
 800a79e:	4291      	cmp	r1, r2
 800a7a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7a4:	d100      	bne.n	800a7a8 <memcpy+0xc>
 800a7a6:	4770      	bx	lr
 800a7a8:	b510      	push	{r4, lr}
 800a7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	d1f9      	bne.n	800a7aa <memcpy+0xe>
 800a7b6:	bd10      	pop	{r4, pc}

0800a7b8 <_Balloc>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	b976      	cbnz	r6, 800a7e0 <_Balloc+0x28>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f7ff ffd0 	bl	800a768 <malloc>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	6260      	str	r0, [r4, #36]	; 0x24
 800a7cc:	b920      	cbnz	r0, 800a7d8 <_Balloc+0x20>
 800a7ce:	4b18      	ldr	r3, [pc, #96]	; (800a830 <_Balloc+0x78>)
 800a7d0:	4818      	ldr	r0, [pc, #96]	; (800a834 <_Balloc+0x7c>)
 800a7d2:	2166      	movs	r1, #102	; 0x66
 800a7d4:	f000 ff52 	bl	800b67c <__assert_func>
 800a7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7dc:	6006      	str	r6, [r0, #0]
 800a7de:	60c6      	str	r6, [r0, #12]
 800a7e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7e2:	68f3      	ldr	r3, [r6, #12]
 800a7e4:	b183      	cbz	r3, 800a808 <_Balloc+0x50>
 800a7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7ee:	b9b8      	cbnz	r0, 800a820 <_Balloc+0x68>
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a7f6:	1d72      	adds	r2, r6, #5
 800a7f8:	0092      	lsls	r2, r2, #2
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 fc9d 	bl	800b13a <_calloc_r>
 800a800:	b160      	cbz	r0, 800a81c <_Balloc+0x64>
 800a802:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a806:	e00e      	b.n	800a826 <_Balloc+0x6e>
 800a808:	2221      	movs	r2, #33	; 0x21
 800a80a:	2104      	movs	r1, #4
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fc94 	bl	800b13a <_calloc_r>
 800a812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a814:	60f0      	str	r0, [r6, #12]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e4      	bne.n	800a7e6 <_Balloc+0x2e>
 800a81c:	2000      	movs	r0, #0
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	6802      	ldr	r2, [r0, #0]
 800a822:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a826:	2300      	movs	r3, #0
 800a828:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a82c:	e7f7      	b.n	800a81e <_Balloc+0x66>
 800a82e:	bf00      	nop
 800a830:	0800d11e 	.word	0x0800d11e
 800a834:	0800d21c 	.word	0x0800d21c

0800a838 <_Bfree>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a83c:	4605      	mov	r5, r0
 800a83e:	460c      	mov	r4, r1
 800a840:	b976      	cbnz	r6, 800a860 <_Bfree+0x28>
 800a842:	2010      	movs	r0, #16
 800a844:	f7ff ff90 	bl	800a768 <malloc>
 800a848:	4602      	mov	r2, r0
 800a84a:	6268      	str	r0, [r5, #36]	; 0x24
 800a84c:	b920      	cbnz	r0, 800a858 <_Bfree+0x20>
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <_Bfree+0x3c>)
 800a850:	4809      	ldr	r0, [pc, #36]	; (800a878 <_Bfree+0x40>)
 800a852:	218a      	movs	r1, #138	; 0x8a
 800a854:	f000 ff12 	bl	800b67c <__assert_func>
 800a858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a85c:	6006      	str	r6, [r0, #0]
 800a85e:	60c6      	str	r6, [r0, #12]
 800a860:	b13c      	cbz	r4, 800a872 <_Bfree+0x3a>
 800a862:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a864:	6862      	ldr	r2, [r4, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a86c:	6021      	str	r1, [r4, #0]
 800a86e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	0800d11e 	.word	0x0800d11e
 800a878:	0800d21c 	.word	0x0800d21c

0800a87c <__multadd>:
 800a87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a880:	690d      	ldr	r5, [r1, #16]
 800a882:	4607      	mov	r7, r0
 800a884:	460c      	mov	r4, r1
 800a886:	461e      	mov	r6, r3
 800a888:	f101 0c14 	add.w	ip, r1, #20
 800a88c:	2000      	movs	r0, #0
 800a88e:	f8dc 3000 	ldr.w	r3, [ip]
 800a892:	b299      	uxth	r1, r3
 800a894:	fb02 6101 	mla	r1, r2, r1, r6
 800a898:	0c1e      	lsrs	r6, r3, #16
 800a89a:	0c0b      	lsrs	r3, r1, #16
 800a89c:	fb02 3306 	mla	r3, r2, r6, r3
 800a8a0:	b289      	uxth	r1, r1
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8a8:	4285      	cmp	r5, r0
 800a8aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a8ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8b2:	dcec      	bgt.n	800a88e <__multadd+0x12>
 800a8b4:	b30e      	cbz	r6, 800a8fa <__multadd+0x7e>
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	dc19      	bgt.n	800a8f0 <__multadd+0x74>
 800a8bc:	6861      	ldr	r1, [r4, #4]
 800a8be:	4638      	mov	r0, r7
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	f7ff ff79 	bl	800a7b8 <_Balloc>
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	b928      	cbnz	r0, 800a8d6 <__multadd+0x5a>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	4b0c      	ldr	r3, [pc, #48]	; (800a900 <__multadd+0x84>)
 800a8ce:	480d      	ldr	r0, [pc, #52]	; (800a904 <__multadd+0x88>)
 800a8d0:	21b5      	movs	r1, #181	; 0xb5
 800a8d2:	f000 fed3 	bl	800b67c <__assert_func>
 800a8d6:	6922      	ldr	r2, [r4, #16]
 800a8d8:	3202      	adds	r2, #2
 800a8da:	f104 010c 	add.w	r1, r4, #12
 800a8de:	0092      	lsls	r2, r2, #2
 800a8e0:	300c      	adds	r0, #12
 800a8e2:	f7ff ff5b 	bl	800a79c <memcpy>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff ffa5 	bl	800a838 <_Bfree>
 800a8ee:	4644      	mov	r4, r8
 800a8f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	615e      	str	r6, [r3, #20]
 800a8f8:	6125      	str	r5, [r4, #16]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a900:	0800d190 	.word	0x0800d190
 800a904:	0800d21c 	.word	0x0800d21c

0800a908 <__s2b>:
 800a908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a90c:	460c      	mov	r4, r1
 800a90e:	4615      	mov	r5, r2
 800a910:	461f      	mov	r7, r3
 800a912:	2209      	movs	r2, #9
 800a914:	3308      	adds	r3, #8
 800a916:	4606      	mov	r6, r0
 800a918:	fb93 f3f2 	sdiv	r3, r3, r2
 800a91c:	2100      	movs	r1, #0
 800a91e:	2201      	movs	r2, #1
 800a920:	429a      	cmp	r2, r3
 800a922:	db09      	blt.n	800a938 <__s2b+0x30>
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ff47 	bl	800a7b8 <_Balloc>
 800a92a:	b940      	cbnz	r0, 800a93e <__s2b+0x36>
 800a92c:	4602      	mov	r2, r0
 800a92e:	4b19      	ldr	r3, [pc, #100]	; (800a994 <__s2b+0x8c>)
 800a930:	4819      	ldr	r0, [pc, #100]	; (800a998 <__s2b+0x90>)
 800a932:	21ce      	movs	r1, #206	; 0xce
 800a934:	f000 fea2 	bl	800b67c <__assert_func>
 800a938:	0052      	lsls	r2, r2, #1
 800a93a:	3101      	adds	r1, #1
 800a93c:	e7f0      	b.n	800a920 <__s2b+0x18>
 800a93e:	9b08      	ldr	r3, [sp, #32]
 800a940:	6143      	str	r3, [r0, #20]
 800a942:	2d09      	cmp	r5, #9
 800a944:	f04f 0301 	mov.w	r3, #1
 800a948:	6103      	str	r3, [r0, #16]
 800a94a:	dd16      	ble.n	800a97a <__s2b+0x72>
 800a94c:	f104 0909 	add.w	r9, r4, #9
 800a950:	46c8      	mov	r8, r9
 800a952:	442c      	add	r4, r5
 800a954:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a958:	4601      	mov	r1, r0
 800a95a:	3b30      	subs	r3, #48	; 0x30
 800a95c:	220a      	movs	r2, #10
 800a95e:	4630      	mov	r0, r6
 800a960:	f7ff ff8c 	bl	800a87c <__multadd>
 800a964:	45a0      	cmp	r8, r4
 800a966:	d1f5      	bne.n	800a954 <__s2b+0x4c>
 800a968:	f1a5 0408 	sub.w	r4, r5, #8
 800a96c:	444c      	add	r4, r9
 800a96e:	1b2d      	subs	r5, r5, r4
 800a970:	1963      	adds	r3, r4, r5
 800a972:	42bb      	cmp	r3, r7
 800a974:	db04      	blt.n	800a980 <__s2b+0x78>
 800a976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97a:	340a      	adds	r4, #10
 800a97c:	2509      	movs	r5, #9
 800a97e:	e7f6      	b.n	800a96e <__s2b+0x66>
 800a980:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a984:	4601      	mov	r1, r0
 800a986:	3b30      	subs	r3, #48	; 0x30
 800a988:	220a      	movs	r2, #10
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff ff76 	bl	800a87c <__multadd>
 800a990:	e7ee      	b.n	800a970 <__s2b+0x68>
 800a992:	bf00      	nop
 800a994:	0800d190 	.word	0x0800d190
 800a998:	0800d21c 	.word	0x0800d21c

0800a99c <__hi0bits>:
 800a99c:	0c03      	lsrs	r3, r0, #16
 800a99e:	041b      	lsls	r3, r3, #16
 800a9a0:	b9d3      	cbnz	r3, 800a9d8 <__hi0bits+0x3c>
 800a9a2:	0400      	lsls	r0, r0, #16
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9aa:	bf04      	itt	eq
 800a9ac:	0200      	lsleq	r0, r0, #8
 800a9ae:	3308      	addeq	r3, #8
 800a9b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9b4:	bf04      	itt	eq
 800a9b6:	0100      	lsleq	r0, r0, #4
 800a9b8:	3304      	addeq	r3, #4
 800a9ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9be:	bf04      	itt	eq
 800a9c0:	0080      	lsleq	r0, r0, #2
 800a9c2:	3302      	addeq	r3, #2
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	db05      	blt.n	800a9d4 <__hi0bits+0x38>
 800a9c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9cc:	f103 0301 	add.w	r3, r3, #1
 800a9d0:	bf08      	it	eq
 800a9d2:	2320      	moveq	r3, #32
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	4770      	bx	lr
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e7e4      	b.n	800a9a6 <__hi0bits+0xa>

0800a9dc <__lo0bits>:
 800a9dc:	6803      	ldr	r3, [r0, #0]
 800a9de:	f013 0207 	ands.w	r2, r3, #7
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	d00b      	beq.n	800a9fe <__lo0bits+0x22>
 800a9e6:	07da      	lsls	r2, r3, #31
 800a9e8:	d423      	bmi.n	800aa32 <__lo0bits+0x56>
 800a9ea:	0798      	lsls	r0, r3, #30
 800a9ec:	bf49      	itett	mi
 800a9ee:	085b      	lsrmi	r3, r3, #1
 800a9f0:	089b      	lsrpl	r3, r3, #2
 800a9f2:	2001      	movmi	r0, #1
 800a9f4:	600b      	strmi	r3, [r1, #0]
 800a9f6:	bf5c      	itt	pl
 800a9f8:	600b      	strpl	r3, [r1, #0]
 800a9fa:	2002      	movpl	r0, #2
 800a9fc:	4770      	bx	lr
 800a9fe:	b298      	uxth	r0, r3
 800aa00:	b9a8      	cbnz	r0, 800aa2e <__lo0bits+0x52>
 800aa02:	0c1b      	lsrs	r3, r3, #16
 800aa04:	2010      	movs	r0, #16
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	b90a      	cbnz	r2, 800aa0e <__lo0bits+0x32>
 800aa0a:	3008      	adds	r0, #8
 800aa0c:	0a1b      	lsrs	r3, r3, #8
 800aa0e:	071a      	lsls	r2, r3, #28
 800aa10:	bf04      	itt	eq
 800aa12:	091b      	lsreq	r3, r3, #4
 800aa14:	3004      	addeq	r0, #4
 800aa16:	079a      	lsls	r2, r3, #30
 800aa18:	bf04      	itt	eq
 800aa1a:	089b      	lsreq	r3, r3, #2
 800aa1c:	3002      	addeq	r0, #2
 800aa1e:	07da      	lsls	r2, r3, #31
 800aa20:	d403      	bmi.n	800aa2a <__lo0bits+0x4e>
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	f100 0001 	add.w	r0, r0, #1
 800aa28:	d005      	beq.n	800aa36 <__lo0bits+0x5a>
 800aa2a:	600b      	str	r3, [r1, #0]
 800aa2c:	4770      	bx	lr
 800aa2e:	4610      	mov	r0, r2
 800aa30:	e7e9      	b.n	800aa06 <__lo0bits+0x2a>
 800aa32:	2000      	movs	r0, #0
 800aa34:	4770      	bx	lr
 800aa36:	2020      	movs	r0, #32
 800aa38:	4770      	bx	lr
	...

0800aa3c <__i2b>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	460c      	mov	r4, r1
 800aa40:	2101      	movs	r1, #1
 800aa42:	f7ff feb9 	bl	800a7b8 <_Balloc>
 800aa46:	4602      	mov	r2, r0
 800aa48:	b928      	cbnz	r0, 800aa56 <__i2b+0x1a>
 800aa4a:	4b05      	ldr	r3, [pc, #20]	; (800aa60 <__i2b+0x24>)
 800aa4c:	4805      	ldr	r0, [pc, #20]	; (800aa64 <__i2b+0x28>)
 800aa4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa52:	f000 fe13 	bl	800b67c <__assert_func>
 800aa56:	2301      	movs	r3, #1
 800aa58:	6144      	str	r4, [r0, #20]
 800aa5a:	6103      	str	r3, [r0, #16]
 800aa5c:	bd10      	pop	{r4, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800d190 	.word	0x0800d190
 800aa64:	0800d21c 	.word	0x0800d21c

0800aa68 <__multiply>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	4691      	mov	r9, r2
 800aa6e:	690a      	ldr	r2, [r1, #16]
 800aa70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	bfb8      	it	lt
 800aa78:	460b      	movlt	r3, r1
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	bfbc      	itt	lt
 800aa7e:	464c      	movlt	r4, r9
 800aa80:	4699      	movlt	r9, r3
 800aa82:	6927      	ldr	r7, [r4, #16]
 800aa84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa88:	68a3      	ldr	r3, [r4, #8]
 800aa8a:	6861      	ldr	r1, [r4, #4]
 800aa8c:	eb07 060a 	add.w	r6, r7, sl
 800aa90:	42b3      	cmp	r3, r6
 800aa92:	b085      	sub	sp, #20
 800aa94:	bfb8      	it	lt
 800aa96:	3101      	addlt	r1, #1
 800aa98:	f7ff fe8e 	bl	800a7b8 <_Balloc>
 800aa9c:	b930      	cbnz	r0, 800aaac <__multiply+0x44>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	4b44      	ldr	r3, [pc, #272]	; (800abb4 <__multiply+0x14c>)
 800aaa2:	4845      	ldr	r0, [pc, #276]	; (800abb8 <__multiply+0x150>)
 800aaa4:	f240 115d 	movw	r1, #349	; 0x15d
 800aaa8:	f000 fde8 	bl	800b67c <__assert_func>
 800aaac:	f100 0514 	add.w	r5, r0, #20
 800aab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aab4:	462b      	mov	r3, r5
 800aab6:	2200      	movs	r2, #0
 800aab8:	4543      	cmp	r3, r8
 800aaba:	d321      	bcc.n	800ab00 <__multiply+0x98>
 800aabc:	f104 0314 	add.w	r3, r4, #20
 800aac0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aac4:	f109 0314 	add.w	r3, r9, #20
 800aac8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aacc:	9202      	str	r2, [sp, #8]
 800aace:	1b3a      	subs	r2, r7, r4
 800aad0:	3a15      	subs	r2, #21
 800aad2:	f022 0203 	bic.w	r2, r2, #3
 800aad6:	3204      	adds	r2, #4
 800aad8:	f104 0115 	add.w	r1, r4, #21
 800aadc:	428f      	cmp	r7, r1
 800aade:	bf38      	it	cc
 800aae0:	2204      	movcc	r2, #4
 800aae2:	9201      	str	r2, [sp, #4]
 800aae4:	9a02      	ldr	r2, [sp, #8]
 800aae6:	9303      	str	r3, [sp, #12]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d80c      	bhi.n	800ab06 <__multiply+0x9e>
 800aaec:	2e00      	cmp	r6, #0
 800aaee:	dd03      	ble.n	800aaf8 <__multiply+0x90>
 800aaf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d05a      	beq.n	800abae <__multiply+0x146>
 800aaf8:	6106      	str	r6, [r0, #16]
 800aafa:	b005      	add	sp, #20
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	f843 2b04 	str.w	r2, [r3], #4
 800ab04:	e7d8      	b.n	800aab8 <__multiply+0x50>
 800ab06:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab0a:	f1ba 0f00 	cmp.w	sl, #0
 800ab0e:	d024      	beq.n	800ab5a <__multiply+0xf2>
 800ab10:	f104 0e14 	add.w	lr, r4, #20
 800ab14:	46a9      	mov	r9, r5
 800ab16:	f04f 0c00 	mov.w	ip, #0
 800ab1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab1e:	f8d9 1000 	ldr.w	r1, [r9]
 800ab22:	fa1f fb82 	uxth.w	fp, r2
 800ab26:	b289      	uxth	r1, r1
 800ab28:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab30:	f8d9 2000 	ldr.w	r2, [r9]
 800ab34:	4461      	add	r1, ip
 800ab36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab3a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab42:	b289      	uxth	r1, r1
 800ab44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab48:	4577      	cmp	r7, lr
 800ab4a:	f849 1b04 	str.w	r1, [r9], #4
 800ab4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab52:	d8e2      	bhi.n	800ab1a <__multiply+0xb2>
 800ab54:	9a01      	ldr	r2, [sp, #4]
 800ab56:	f845 c002 	str.w	ip, [r5, r2]
 800ab5a:	9a03      	ldr	r2, [sp, #12]
 800ab5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab60:	3304      	adds	r3, #4
 800ab62:	f1b9 0f00 	cmp.w	r9, #0
 800ab66:	d020      	beq.n	800abaa <__multiply+0x142>
 800ab68:	6829      	ldr	r1, [r5, #0]
 800ab6a:	f104 0c14 	add.w	ip, r4, #20
 800ab6e:	46ae      	mov	lr, r5
 800ab70:	f04f 0a00 	mov.w	sl, #0
 800ab74:	f8bc b000 	ldrh.w	fp, [ip]
 800ab78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab7c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab80:	4492      	add	sl, r2
 800ab82:	b289      	uxth	r1, r1
 800ab84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab88:	f84e 1b04 	str.w	r1, [lr], #4
 800ab8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab90:	f8be 1000 	ldrh.w	r1, [lr]
 800ab94:	0c12      	lsrs	r2, r2, #16
 800ab96:	fb09 1102 	mla	r1, r9, r2, r1
 800ab9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab9e:	4567      	cmp	r7, ip
 800aba0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aba4:	d8e6      	bhi.n	800ab74 <__multiply+0x10c>
 800aba6:	9a01      	ldr	r2, [sp, #4]
 800aba8:	50a9      	str	r1, [r5, r2]
 800abaa:	3504      	adds	r5, #4
 800abac:	e79a      	b.n	800aae4 <__multiply+0x7c>
 800abae:	3e01      	subs	r6, #1
 800abb0:	e79c      	b.n	800aaec <__multiply+0x84>
 800abb2:	bf00      	nop
 800abb4:	0800d190 	.word	0x0800d190
 800abb8:	0800d21c 	.word	0x0800d21c

0800abbc <__pow5mult>:
 800abbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc0:	4615      	mov	r5, r2
 800abc2:	f012 0203 	ands.w	r2, r2, #3
 800abc6:	4606      	mov	r6, r0
 800abc8:	460f      	mov	r7, r1
 800abca:	d007      	beq.n	800abdc <__pow5mult+0x20>
 800abcc:	4c25      	ldr	r4, [pc, #148]	; (800ac64 <__pow5mult+0xa8>)
 800abce:	3a01      	subs	r2, #1
 800abd0:	2300      	movs	r3, #0
 800abd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abd6:	f7ff fe51 	bl	800a87c <__multadd>
 800abda:	4607      	mov	r7, r0
 800abdc:	10ad      	asrs	r5, r5, #2
 800abde:	d03d      	beq.n	800ac5c <__pow5mult+0xa0>
 800abe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abe2:	b97c      	cbnz	r4, 800ac04 <__pow5mult+0x48>
 800abe4:	2010      	movs	r0, #16
 800abe6:	f7ff fdbf 	bl	800a768 <malloc>
 800abea:	4602      	mov	r2, r0
 800abec:	6270      	str	r0, [r6, #36]	; 0x24
 800abee:	b928      	cbnz	r0, 800abfc <__pow5mult+0x40>
 800abf0:	4b1d      	ldr	r3, [pc, #116]	; (800ac68 <__pow5mult+0xac>)
 800abf2:	481e      	ldr	r0, [pc, #120]	; (800ac6c <__pow5mult+0xb0>)
 800abf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abf8:	f000 fd40 	bl	800b67c <__assert_func>
 800abfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac00:	6004      	str	r4, [r0, #0]
 800ac02:	60c4      	str	r4, [r0, #12]
 800ac04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac0c:	b94c      	cbnz	r4, 800ac22 <__pow5mult+0x66>
 800ac0e:	f240 2171 	movw	r1, #625	; 0x271
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7ff ff12 	bl	800aa3c <__i2b>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac1e:	4604      	mov	r4, r0
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	f04f 0900 	mov.w	r9, #0
 800ac26:	07eb      	lsls	r3, r5, #31
 800ac28:	d50a      	bpl.n	800ac40 <__pow5mult+0x84>
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f7ff ff1a 	bl	800aa68 <__multiply>
 800ac34:	4639      	mov	r1, r7
 800ac36:	4680      	mov	r8, r0
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f7ff fdfd 	bl	800a838 <_Bfree>
 800ac3e:	4647      	mov	r7, r8
 800ac40:	106d      	asrs	r5, r5, #1
 800ac42:	d00b      	beq.n	800ac5c <__pow5mult+0xa0>
 800ac44:	6820      	ldr	r0, [r4, #0]
 800ac46:	b938      	cbnz	r0, 800ac58 <__pow5mult+0x9c>
 800ac48:	4622      	mov	r2, r4
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f7ff ff0b 	bl	800aa68 <__multiply>
 800ac52:	6020      	str	r0, [r4, #0]
 800ac54:	f8c0 9000 	str.w	r9, [r0]
 800ac58:	4604      	mov	r4, r0
 800ac5a:	e7e4      	b.n	800ac26 <__pow5mult+0x6a>
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac62:	bf00      	nop
 800ac64:	0800d368 	.word	0x0800d368
 800ac68:	0800d11e 	.word	0x0800d11e
 800ac6c:	0800d21c 	.word	0x0800d21c

0800ac70 <__lshift>:
 800ac70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	460c      	mov	r4, r1
 800ac76:	6849      	ldr	r1, [r1, #4]
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	4607      	mov	r7, r0
 800ac82:	4691      	mov	r9, r2
 800ac84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac88:	f108 0601 	add.w	r6, r8, #1
 800ac8c:	42b3      	cmp	r3, r6
 800ac8e:	db0b      	blt.n	800aca8 <__lshift+0x38>
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff fd91 	bl	800a7b8 <_Balloc>
 800ac96:	4605      	mov	r5, r0
 800ac98:	b948      	cbnz	r0, 800acae <__lshift+0x3e>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4b2a      	ldr	r3, [pc, #168]	; (800ad48 <__lshift+0xd8>)
 800ac9e:	482b      	ldr	r0, [pc, #172]	; (800ad4c <__lshift+0xdc>)
 800aca0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aca4:	f000 fcea 	bl	800b67c <__assert_func>
 800aca8:	3101      	adds	r1, #1
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	e7ee      	b.n	800ac8c <__lshift+0x1c>
 800acae:	2300      	movs	r3, #0
 800acb0:	f100 0114 	add.w	r1, r0, #20
 800acb4:	f100 0210 	add.w	r2, r0, #16
 800acb8:	4618      	mov	r0, r3
 800acba:	4553      	cmp	r3, sl
 800acbc:	db37      	blt.n	800ad2e <__lshift+0xbe>
 800acbe:	6920      	ldr	r0, [r4, #16]
 800acc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acc4:	f104 0314 	add.w	r3, r4, #20
 800acc8:	f019 091f 	ands.w	r9, r9, #31
 800accc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acd4:	d02f      	beq.n	800ad36 <__lshift+0xc6>
 800acd6:	f1c9 0e20 	rsb	lr, r9, #32
 800acda:	468a      	mov	sl, r1
 800acdc:	f04f 0c00 	mov.w	ip, #0
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	fa02 f209 	lsl.w	r2, r2, r9
 800ace6:	ea42 020c 	orr.w	r2, r2, ip
 800acea:	f84a 2b04 	str.w	r2, [sl], #4
 800acee:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf2:	4298      	cmp	r0, r3
 800acf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800acf8:	d8f2      	bhi.n	800ace0 <__lshift+0x70>
 800acfa:	1b03      	subs	r3, r0, r4
 800acfc:	3b15      	subs	r3, #21
 800acfe:	f023 0303 	bic.w	r3, r3, #3
 800ad02:	3304      	adds	r3, #4
 800ad04:	f104 0215 	add.w	r2, r4, #21
 800ad08:	4290      	cmp	r0, r2
 800ad0a:	bf38      	it	cc
 800ad0c:	2304      	movcc	r3, #4
 800ad0e:	f841 c003 	str.w	ip, [r1, r3]
 800ad12:	f1bc 0f00 	cmp.w	ip, #0
 800ad16:	d001      	beq.n	800ad1c <__lshift+0xac>
 800ad18:	f108 0602 	add.w	r6, r8, #2
 800ad1c:	3e01      	subs	r6, #1
 800ad1e:	4638      	mov	r0, r7
 800ad20:	612e      	str	r6, [r5, #16]
 800ad22:	4621      	mov	r1, r4
 800ad24:	f7ff fd88 	bl	800a838 <_Bfree>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad32:	3301      	adds	r3, #1
 800ad34:	e7c1      	b.n	800acba <__lshift+0x4a>
 800ad36:	3904      	subs	r1, #4
 800ad38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad40:	4298      	cmp	r0, r3
 800ad42:	d8f9      	bhi.n	800ad38 <__lshift+0xc8>
 800ad44:	e7ea      	b.n	800ad1c <__lshift+0xac>
 800ad46:	bf00      	nop
 800ad48:	0800d190 	.word	0x0800d190
 800ad4c:	0800d21c 	.word	0x0800d21c

0800ad50 <__mcmp>:
 800ad50:	b530      	push	{r4, r5, lr}
 800ad52:	6902      	ldr	r2, [r0, #16]
 800ad54:	690c      	ldr	r4, [r1, #16]
 800ad56:	1b12      	subs	r2, r2, r4
 800ad58:	d10e      	bne.n	800ad78 <__mcmp+0x28>
 800ad5a:	f100 0314 	add.w	r3, r0, #20
 800ad5e:	3114      	adds	r1, #20
 800ad60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad70:	42a5      	cmp	r5, r4
 800ad72:	d003      	beq.n	800ad7c <__mcmp+0x2c>
 800ad74:	d305      	bcc.n	800ad82 <__mcmp+0x32>
 800ad76:	2201      	movs	r2, #1
 800ad78:	4610      	mov	r0, r2
 800ad7a:	bd30      	pop	{r4, r5, pc}
 800ad7c:	4283      	cmp	r3, r0
 800ad7e:	d3f3      	bcc.n	800ad68 <__mcmp+0x18>
 800ad80:	e7fa      	b.n	800ad78 <__mcmp+0x28>
 800ad82:	f04f 32ff 	mov.w	r2, #4294967295
 800ad86:	e7f7      	b.n	800ad78 <__mcmp+0x28>

0800ad88 <__mdiff>:
 800ad88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	4606      	mov	r6, r0
 800ad90:	4611      	mov	r1, r2
 800ad92:	4620      	mov	r0, r4
 800ad94:	4690      	mov	r8, r2
 800ad96:	f7ff ffdb 	bl	800ad50 <__mcmp>
 800ad9a:	1e05      	subs	r5, r0, #0
 800ad9c:	d110      	bne.n	800adc0 <__mdiff+0x38>
 800ad9e:	4629      	mov	r1, r5
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff fd09 	bl	800a7b8 <_Balloc>
 800ada6:	b930      	cbnz	r0, 800adb6 <__mdiff+0x2e>
 800ada8:	4b3a      	ldr	r3, [pc, #232]	; (800ae94 <__mdiff+0x10c>)
 800adaa:	4602      	mov	r2, r0
 800adac:	f240 2132 	movw	r1, #562	; 0x232
 800adb0:	4839      	ldr	r0, [pc, #228]	; (800ae98 <__mdiff+0x110>)
 800adb2:	f000 fc63 	bl	800b67c <__assert_func>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc0:	bfa4      	itt	ge
 800adc2:	4643      	movge	r3, r8
 800adc4:	46a0      	movge	r8, r4
 800adc6:	4630      	mov	r0, r6
 800adc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adcc:	bfa6      	itte	ge
 800adce:	461c      	movge	r4, r3
 800add0:	2500      	movge	r5, #0
 800add2:	2501      	movlt	r5, #1
 800add4:	f7ff fcf0 	bl	800a7b8 <_Balloc>
 800add8:	b920      	cbnz	r0, 800ade4 <__mdiff+0x5c>
 800adda:	4b2e      	ldr	r3, [pc, #184]	; (800ae94 <__mdiff+0x10c>)
 800addc:	4602      	mov	r2, r0
 800adde:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ade2:	e7e5      	b.n	800adb0 <__mdiff+0x28>
 800ade4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ade8:	6926      	ldr	r6, [r4, #16]
 800adea:	60c5      	str	r5, [r0, #12]
 800adec:	f104 0914 	add.w	r9, r4, #20
 800adf0:	f108 0514 	add.w	r5, r8, #20
 800adf4:	f100 0e14 	add.w	lr, r0, #20
 800adf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae00:	f108 0210 	add.w	r2, r8, #16
 800ae04:	46f2      	mov	sl, lr
 800ae06:	2100      	movs	r1, #0
 800ae08:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae10:	fa1f f883 	uxth.w	r8, r3
 800ae14:	fa11 f18b 	uxtah	r1, r1, fp
 800ae18:	0c1b      	lsrs	r3, r3, #16
 800ae1a:	eba1 0808 	sub.w	r8, r1, r8
 800ae1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae26:	fa1f f888 	uxth.w	r8, r8
 800ae2a:	1419      	asrs	r1, r3, #16
 800ae2c:	454e      	cmp	r6, r9
 800ae2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae32:	f84a 3b04 	str.w	r3, [sl], #4
 800ae36:	d8e7      	bhi.n	800ae08 <__mdiff+0x80>
 800ae38:	1b33      	subs	r3, r6, r4
 800ae3a:	3b15      	subs	r3, #21
 800ae3c:	f023 0303 	bic.w	r3, r3, #3
 800ae40:	3304      	adds	r3, #4
 800ae42:	3415      	adds	r4, #21
 800ae44:	42a6      	cmp	r6, r4
 800ae46:	bf38      	it	cc
 800ae48:	2304      	movcc	r3, #4
 800ae4a:	441d      	add	r5, r3
 800ae4c:	4473      	add	r3, lr
 800ae4e:	469e      	mov	lr, r3
 800ae50:	462e      	mov	r6, r5
 800ae52:	4566      	cmp	r6, ip
 800ae54:	d30e      	bcc.n	800ae74 <__mdiff+0xec>
 800ae56:	f10c 0203 	add.w	r2, ip, #3
 800ae5a:	1b52      	subs	r2, r2, r5
 800ae5c:	f022 0203 	bic.w	r2, r2, #3
 800ae60:	3d03      	subs	r5, #3
 800ae62:	45ac      	cmp	ip, r5
 800ae64:	bf38      	it	cc
 800ae66:	2200      	movcc	r2, #0
 800ae68:	441a      	add	r2, r3
 800ae6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae6e:	b17b      	cbz	r3, 800ae90 <__mdiff+0x108>
 800ae70:	6107      	str	r7, [r0, #16]
 800ae72:	e7a3      	b.n	800adbc <__mdiff+0x34>
 800ae74:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae78:	fa11 f288 	uxtah	r2, r1, r8
 800ae7c:	1414      	asrs	r4, r2, #16
 800ae7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae82:	b292      	uxth	r2, r2
 800ae84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae88:	f84e 2b04 	str.w	r2, [lr], #4
 800ae8c:	1421      	asrs	r1, r4, #16
 800ae8e:	e7e0      	b.n	800ae52 <__mdiff+0xca>
 800ae90:	3f01      	subs	r7, #1
 800ae92:	e7ea      	b.n	800ae6a <__mdiff+0xe2>
 800ae94:	0800d190 	.word	0x0800d190
 800ae98:	0800d21c 	.word	0x0800d21c

0800ae9c <__ulp>:
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	ed8d 0b00 	vstr	d0, [sp]
 800aea2:	9b01      	ldr	r3, [sp, #4]
 800aea4:	4912      	ldr	r1, [pc, #72]	; (800aef0 <__ulp+0x54>)
 800aea6:	4019      	ands	r1, r3
 800aea8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aeac:	2900      	cmp	r1, #0
 800aeae:	dd05      	ble.n	800aebc <__ulp+0x20>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	ec43 2b10 	vmov	d0, r2, r3
 800aeb8:	b002      	add	sp, #8
 800aeba:	4770      	bx	lr
 800aebc:	4249      	negs	r1, r1
 800aebe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aec2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aec6:	f04f 0200 	mov.w	r2, #0
 800aeca:	f04f 0300 	mov.w	r3, #0
 800aece:	da04      	bge.n	800aeda <__ulp+0x3e>
 800aed0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aed4:	fa41 f300 	asr.w	r3, r1, r0
 800aed8:	e7ec      	b.n	800aeb4 <__ulp+0x18>
 800aeda:	f1a0 0114 	sub.w	r1, r0, #20
 800aede:	291e      	cmp	r1, #30
 800aee0:	bfda      	itte	le
 800aee2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aee6:	fa20 f101 	lsrle.w	r1, r0, r1
 800aeea:	2101      	movgt	r1, #1
 800aeec:	460a      	mov	r2, r1
 800aeee:	e7e1      	b.n	800aeb4 <__ulp+0x18>
 800aef0:	7ff00000 	.word	0x7ff00000

0800aef4 <__b2d>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	6905      	ldr	r5, [r0, #16]
 800aef8:	f100 0714 	add.w	r7, r0, #20
 800aefc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af00:	1f2e      	subs	r6, r5, #4
 800af02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af06:	4620      	mov	r0, r4
 800af08:	f7ff fd48 	bl	800a99c <__hi0bits>
 800af0c:	f1c0 0320 	rsb	r3, r0, #32
 800af10:	280a      	cmp	r0, #10
 800af12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800af90 <__b2d+0x9c>
 800af16:	600b      	str	r3, [r1, #0]
 800af18:	dc14      	bgt.n	800af44 <__b2d+0x50>
 800af1a:	f1c0 0e0b 	rsb	lr, r0, #11
 800af1e:	fa24 f10e 	lsr.w	r1, r4, lr
 800af22:	42b7      	cmp	r7, r6
 800af24:	ea41 030c 	orr.w	r3, r1, ip
 800af28:	bf34      	ite	cc
 800af2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af2e:	2100      	movcs	r1, #0
 800af30:	3015      	adds	r0, #21
 800af32:	fa04 f000 	lsl.w	r0, r4, r0
 800af36:	fa21 f10e 	lsr.w	r1, r1, lr
 800af3a:	ea40 0201 	orr.w	r2, r0, r1
 800af3e:	ec43 2b10 	vmov	d0, r2, r3
 800af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af44:	42b7      	cmp	r7, r6
 800af46:	bf3a      	itte	cc
 800af48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af4c:	f1a5 0608 	subcc.w	r6, r5, #8
 800af50:	2100      	movcs	r1, #0
 800af52:	380b      	subs	r0, #11
 800af54:	d017      	beq.n	800af86 <__b2d+0x92>
 800af56:	f1c0 0c20 	rsb	ip, r0, #32
 800af5a:	fa04 f500 	lsl.w	r5, r4, r0
 800af5e:	42be      	cmp	r6, r7
 800af60:	fa21 f40c 	lsr.w	r4, r1, ip
 800af64:	ea45 0504 	orr.w	r5, r5, r4
 800af68:	bf8c      	ite	hi
 800af6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af6e:	2400      	movls	r4, #0
 800af70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800af74:	fa01 f000 	lsl.w	r0, r1, r0
 800af78:	fa24 f40c 	lsr.w	r4, r4, ip
 800af7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af80:	ea40 0204 	orr.w	r2, r0, r4
 800af84:	e7db      	b.n	800af3e <__b2d+0x4a>
 800af86:	ea44 030c 	orr.w	r3, r4, ip
 800af8a:	460a      	mov	r2, r1
 800af8c:	e7d7      	b.n	800af3e <__b2d+0x4a>
 800af8e:	bf00      	nop
 800af90:	3ff00000 	.word	0x3ff00000

0800af94 <__d2b>:
 800af94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af98:	4689      	mov	r9, r1
 800af9a:	2101      	movs	r1, #1
 800af9c:	ec57 6b10 	vmov	r6, r7, d0
 800afa0:	4690      	mov	r8, r2
 800afa2:	f7ff fc09 	bl	800a7b8 <_Balloc>
 800afa6:	4604      	mov	r4, r0
 800afa8:	b930      	cbnz	r0, 800afb8 <__d2b+0x24>
 800afaa:	4602      	mov	r2, r0
 800afac:	4b25      	ldr	r3, [pc, #148]	; (800b044 <__d2b+0xb0>)
 800afae:	4826      	ldr	r0, [pc, #152]	; (800b048 <__d2b+0xb4>)
 800afb0:	f240 310a 	movw	r1, #778	; 0x30a
 800afb4:	f000 fb62 	bl	800b67c <__assert_func>
 800afb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afc0:	bb35      	cbnz	r5, 800b010 <__d2b+0x7c>
 800afc2:	2e00      	cmp	r6, #0
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	d028      	beq.n	800b01a <__d2b+0x86>
 800afc8:	4668      	mov	r0, sp
 800afca:	9600      	str	r6, [sp, #0]
 800afcc:	f7ff fd06 	bl	800a9dc <__lo0bits>
 800afd0:	9900      	ldr	r1, [sp, #0]
 800afd2:	b300      	cbz	r0, 800b016 <__d2b+0x82>
 800afd4:	9a01      	ldr	r2, [sp, #4]
 800afd6:	f1c0 0320 	rsb	r3, r0, #32
 800afda:	fa02 f303 	lsl.w	r3, r2, r3
 800afde:	430b      	orrs	r3, r1
 800afe0:	40c2      	lsrs	r2, r0
 800afe2:	6163      	str	r3, [r4, #20]
 800afe4:	9201      	str	r2, [sp, #4]
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	61a3      	str	r3, [r4, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	bf14      	ite	ne
 800afee:	2202      	movne	r2, #2
 800aff0:	2201      	moveq	r2, #1
 800aff2:	6122      	str	r2, [r4, #16]
 800aff4:	b1d5      	cbz	r5, 800b02c <__d2b+0x98>
 800aff6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800affa:	4405      	add	r5, r0
 800affc:	f8c9 5000 	str.w	r5, [r9]
 800b000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b004:	f8c8 0000 	str.w	r0, [r8]
 800b008:	4620      	mov	r0, r4
 800b00a:	b003      	add	sp, #12
 800b00c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b014:	e7d5      	b.n	800afc2 <__d2b+0x2e>
 800b016:	6161      	str	r1, [r4, #20]
 800b018:	e7e5      	b.n	800afe6 <__d2b+0x52>
 800b01a:	a801      	add	r0, sp, #4
 800b01c:	f7ff fcde 	bl	800a9dc <__lo0bits>
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	6163      	str	r3, [r4, #20]
 800b024:	2201      	movs	r2, #1
 800b026:	6122      	str	r2, [r4, #16]
 800b028:	3020      	adds	r0, #32
 800b02a:	e7e3      	b.n	800aff4 <__d2b+0x60>
 800b02c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b034:	f8c9 0000 	str.w	r0, [r9]
 800b038:	6918      	ldr	r0, [r3, #16]
 800b03a:	f7ff fcaf 	bl	800a99c <__hi0bits>
 800b03e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b042:	e7df      	b.n	800b004 <__d2b+0x70>
 800b044:	0800d190 	.word	0x0800d190
 800b048:	0800d21c 	.word	0x0800d21c

0800b04c <__ratio>:
 800b04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	4688      	mov	r8, r1
 800b052:	4669      	mov	r1, sp
 800b054:	4681      	mov	r9, r0
 800b056:	f7ff ff4d 	bl	800aef4 <__b2d>
 800b05a:	a901      	add	r1, sp, #4
 800b05c:	4640      	mov	r0, r8
 800b05e:	ec55 4b10 	vmov	r4, r5, d0
 800b062:	f7ff ff47 	bl	800aef4 <__b2d>
 800b066:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b06a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b06e:	eba3 0c02 	sub.w	ip, r3, r2
 800b072:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b07c:	ec51 0b10 	vmov	r0, r1, d0
 800b080:	2b00      	cmp	r3, #0
 800b082:	bfd6      	itet	le
 800b084:	460a      	movle	r2, r1
 800b086:	462a      	movgt	r2, r5
 800b088:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b08c:	468b      	mov	fp, r1
 800b08e:	462f      	mov	r7, r5
 800b090:	bfd4      	ite	le
 800b092:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b096:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b09a:	4620      	mov	r0, r4
 800b09c:	ee10 2a10 	vmov	r2, s0
 800b0a0:	465b      	mov	r3, fp
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 fbf2 	bl	800088c <__aeabi_ddiv>
 800b0a8:	ec41 0b10 	vmov	d0, r0, r1
 800b0ac:	b003      	add	sp, #12
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0b2 <__copybits>:
 800b0b2:	3901      	subs	r1, #1
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	1149      	asrs	r1, r1, #5
 800b0b8:	6914      	ldr	r4, [r2, #16]
 800b0ba:	3101      	adds	r1, #1
 800b0bc:	f102 0314 	add.w	r3, r2, #20
 800b0c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0c8:	1f05      	subs	r5, r0, #4
 800b0ca:	42a3      	cmp	r3, r4
 800b0cc:	d30c      	bcc.n	800b0e8 <__copybits+0x36>
 800b0ce:	1aa3      	subs	r3, r4, r2
 800b0d0:	3b11      	subs	r3, #17
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	3211      	adds	r2, #17
 800b0d8:	42a2      	cmp	r2, r4
 800b0da:	bf88      	it	hi
 800b0dc:	2300      	movhi	r3, #0
 800b0de:	4418      	add	r0, r3
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4288      	cmp	r0, r1
 800b0e4:	d305      	bcc.n	800b0f2 <__copybits+0x40>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0ec:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0f0:	e7eb      	b.n	800b0ca <__copybits+0x18>
 800b0f2:	f840 3b04 	str.w	r3, [r0], #4
 800b0f6:	e7f4      	b.n	800b0e2 <__copybits+0x30>

0800b0f8 <__any_on>:
 800b0f8:	f100 0214 	add.w	r2, r0, #20
 800b0fc:	6900      	ldr	r0, [r0, #16]
 800b0fe:	114b      	asrs	r3, r1, #5
 800b100:	4298      	cmp	r0, r3
 800b102:	b510      	push	{r4, lr}
 800b104:	db11      	blt.n	800b12a <__any_on+0x32>
 800b106:	dd0a      	ble.n	800b11e <__any_on+0x26>
 800b108:	f011 011f 	ands.w	r1, r1, #31
 800b10c:	d007      	beq.n	800b11e <__any_on+0x26>
 800b10e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b112:	fa24 f001 	lsr.w	r0, r4, r1
 800b116:	fa00 f101 	lsl.w	r1, r0, r1
 800b11a:	428c      	cmp	r4, r1
 800b11c:	d10b      	bne.n	800b136 <__any_on+0x3e>
 800b11e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b122:	4293      	cmp	r3, r2
 800b124:	d803      	bhi.n	800b12e <__any_on+0x36>
 800b126:	2000      	movs	r0, #0
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	4603      	mov	r3, r0
 800b12c:	e7f7      	b.n	800b11e <__any_on+0x26>
 800b12e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b132:	2900      	cmp	r1, #0
 800b134:	d0f5      	beq.n	800b122 <__any_on+0x2a>
 800b136:	2001      	movs	r0, #1
 800b138:	e7f6      	b.n	800b128 <__any_on+0x30>

0800b13a <_calloc_r>:
 800b13a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b13c:	fba1 2402 	umull	r2, r4, r1, r2
 800b140:	b94c      	cbnz	r4, 800b156 <_calloc_r+0x1c>
 800b142:	4611      	mov	r1, r2
 800b144:	9201      	str	r2, [sp, #4]
 800b146:	f000 f87b 	bl	800b240 <_malloc_r>
 800b14a:	9a01      	ldr	r2, [sp, #4]
 800b14c:	4605      	mov	r5, r0
 800b14e:	b930      	cbnz	r0, 800b15e <_calloc_r+0x24>
 800b150:	4628      	mov	r0, r5
 800b152:	b003      	add	sp, #12
 800b154:	bd30      	pop	{r4, r5, pc}
 800b156:	220c      	movs	r2, #12
 800b158:	6002      	str	r2, [r0, #0]
 800b15a:	2500      	movs	r5, #0
 800b15c:	e7f8      	b.n	800b150 <_calloc_r+0x16>
 800b15e:	4621      	mov	r1, r4
 800b160:	f7fc fb44 	bl	80077ec <memset>
 800b164:	e7f4      	b.n	800b150 <_calloc_r+0x16>
	...

0800b168 <_free_r>:
 800b168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b16a:	2900      	cmp	r1, #0
 800b16c:	d044      	beq.n	800b1f8 <_free_r+0x90>
 800b16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b172:	9001      	str	r0, [sp, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f1a1 0404 	sub.w	r4, r1, #4
 800b17a:	bfb8      	it	lt
 800b17c:	18e4      	addlt	r4, r4, r3
 800b17e:	f000 fc81 	bl	800ba84 <__malloc_lock>
 800b182:	4a1e      	ldr	r2, [pc, #120]	; (800b1fc <_free_r+0x94>)
 800b184:	9801      	ldr	r0, [sp, #4]
 800b186:	6813      	ldr	r3, [r2, #0]
 800b188:	b933      	cbnz	r3, 800b198 <_free_r+0x30>
 800b18a:	6063      	str	r3, [r4, #4]
 800b18c:	6014      	str	r4, [r2, #0]
 800b18e:	b003      	add	sp, #12
 800b190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b194:	f000 bc7c 	b.w	800ba90 <__malloc_unlock>
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d908      	bls.n	800b1ae <_free_r+0x46>
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	1961      	adds	r1, r4, r5
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	bf01      	itttt	eq
 800b1a4:	6819      	ldreq	r1, [r3, #0]
 800b1a6:	685b      	ldreq	r3, [r3, #4]
 800b1a8:	1949      	addeq	r1, r1, r5
 800b1aa:	6021      	streq	r1, [r4, #0]
 800b1ac:	e7ed      	b.n	800b18a <_free_r+0x22>
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	b10b      	cbz	r3, 800b1b8 <_free_r+0x50>
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	d9fa      	bls.n	800b1ae <_free_r+0x46>
 800b1b8:	6811      	ldr	r1, [r2, #0]
 800b1ba:	1855      	adds	r5, r2, r1
 800b1bc:	42a5      	cmp	r5, r4
 800b1be:	d10b      	bne.n	800b1d8 <_free_r+0x70>
 800b1c0:	6824      	ldr	r4, [r4, #0]
 800b1c2:	4421      	add	r1, r4
 800b1c4:	1854      	adds	r4, r2, r1
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	6011      	str	r1, [r2, #0]
 800b1ca:	d1e0      	bne.n	800b18e <_free_r+0x26>
 800b1cc:	681c      	ldr	r4, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	6053      	str	r3, [r2, #4]
 800b1d2:	4421      	add	r1, r4
 800b1d4:	6011      	str	r1, [r2, #0]
 800b1d6:	e7da      	b.n	800b18e <_free_r+0x26>
 800b1d8:	d902      	bls.n	800b1e0 <_free_r+0x78>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6003      	str	r3, [r0, #0]
 800b1de:	e7d6      	b.n	800b18e <_free_r+0x26>
 800b1e0:	6825      	ldr	r5, [r4, #0]
 800b1e2:	1961      	adds	r1, r4, r5
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	bf04      	itt	eq
 800b1e8:	6819      	ldreq	r1, [r3, #0]
 800b1ea:	685b      	ldreq	r3, [r3, #4]
 800b1ec:	6063      	str	r3, [r4, #4]
 800b1ee:	bf04      	itt	eq
 800b1f0:	1949      	addeq	r1, r1, r5
 800b1f2:	6021      	streq	r1, [r4, #0]
 800b1f4:	6054      	str	r4, [r2, #4]
 800b1f6:	e7ca      	b.n	800b18e <_free_r+0x26>
 800b1f8:	b003      	add	sp, #12
 800b1fa:	bd30      	pop	{r4, r5, pc}
 800b1fc:	200006e8 	.word	0x200006e8

0800b200 <sbrk_aligned>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4e0e      	ldr	r6, [pc, #56]	; (800b23c <sbrk_aligned+0x3c>)
 800b204:	460c      	mov	r4, r1
 800b206:	6831      	ldr	r1, [r6, #0]
 800b208:	4605      	mov	r5, r0
 800b20a:	b911      	cbnz	r1, 800b212 <sbrk_aligned+0x12>
 800b20c:	f000 fa04 	bl	800b618 <_sbrk_r>
 800b210:	6030      	str	r0, [r6, #0]
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f000 f9ff 	bl	800b618 <_sbrk_r>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d00a      	beq.n	800b234 <sbrk_aligned+0x34>
 800b21e:	1cc4      	adds	r4, r0, #3
 800b220:	f024 0403 	bic.w	r4, r4, #3
 800b224:	42a0      	cmp	r0, r4
 800b226:	d007      	beq.n	800b238 <sbrk_aligned+0x38>
 800b228:	1a21      	subs	r1, r4, r0
 800b22a:	4628      	mov	r0, r5
 800b22c:	f000 f9f4 	bl	800b618 <_sbrk_r>
 800b230:	3001      	adds	r0, #1
 800b232:	d101      	bne.n	800b238 <sbrk_aligned+0x38>
 800b234:	f04f 34ff 	mov.w	r4, #4294967295
 800b238:	4620      	mov	r0, r4
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	200006ec 	.word	0x200006ec

0800b240 <_malloc_r>:
 800b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b244:	1ccd      	adds	r5, r1, #3
 800b246:	f025 0503 	bic.w	r5, r5, #3
 800b24a:	3508      	adds	r5, #8
 800b24c:	2d0c      	cmp	r5, #12
 800b24e:	bf38      	it	cc
 800b250:	250c      	movcc	r5, #12
 800b252:	2d00      	cmp	r5, #0
 800b254:	4607      	mov	r7, r0
 800b256:	db01      	blt.n	800b25c <_malloc_r+0x1c>
 800b258:	42a9      	cmp	r1, r5
 800b25a:	d905      	bls.n	800b268 <_malloc_r+0x28>
 800b25c:	230c      	movs	r3, #12
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	2600      	movs	r6, #0
 800b262:	4630      	mov	r0, r6
 800b264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b268:	4e2e      	ldr	r6, [pc, #184]	; (800b324 <_malloc_r+0xe4>)
 800b26a:	f000 fc0b 	bl	800ba84 <__malloc_lock>
 800b26e:	6833      	ldr	r3, [r6, #0]
 800b270:	461c      	mov	r4, r3
 800b272:	bb34      	cbnz	r4, 800b2c2 <_malloc_r+0x82>
 800b274:	4629      	mov	r1, r5
 800b276:	4638      	mov	r0, r7
 800b278:	f7ff ffc2 	bl	800b200 <sbrk_aligned>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	4604      	mov	r4, r0
 800b280:	d14d      	bne.n	800b31e <_malloc_r+0xde>
 800b282:	6834      	ldr	r4, [r6, #0]
 800b284:	4626      	mov	r6, r4
 800b286:	2e00      	cmp	r6, #0
 800b288:	d140      	bne.n	800b30c <_malloc_r+0xcc>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	4631      	mov	r1, r6
 800b28e:	4638      	mov	r0, r7
 800b290:	eb04 0803 	add.w	r8, r4, r3
 800b294:	f000 f9c0 	bl	800b618 <_sbrk_r>
 800b298:	4580      	cmp	r8, r0
 800b29a:	d13a      	bne.n	800b312 <_malloc_r+0xd2>
 800b29c:	6821      	ldr	r1, [r4, #0]
 800b29e:	3503      	adds	r5, #3
 800b2a0:	1a6d      	subs	r5, r5, r1
 800b2a2:	f025 0503 	bic.w	r5, r5, #3
 800b2a6:	3508      	adds	r5, #8
 800b2a8:	2d0c      	cmp	r5, #12
 800b2aa:	bf38      	it	cc
 800b2ac:	250c      	movcc	r5, #12
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7ff ffa5 	bl	800b200 <sbrk_aligned>
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d02b      	beq.n	800b312 <_malloc_r+0xd2>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	442b      	add	r3, r5
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	e00e      	b.n	800b2e0 <_malloc_r+0xa0>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	1b52      	subs	r2, r2, r5
 800b2c6:	d41e      	bmi.n	800b306 <_malloc_r+0xc6>
 800b2c8:	2a0b      	cmp	r2, #11
 800b2ca:	d916      	bls.n	800b2fa <_malloc_r+0xba>
 800b2cc:	1961      	adds	r1, r4, r5
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	6025      	str	r5, [r4, #0]
 800b2d2:	bf18      	it	ne
 800b2d4:	6059      	strne	r1, [r3, #4]
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	bf08      	it	eq
 800b2da:	6031      	streq	r1, [r6, #0]
 800b2dc:	5162      	str	r2, [r4, r5]
 800b2de:	604b      	str	r3, [r1, #4]
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f104 060b 	add.w	r6, r4, #11
 800b2e6:	f000 fbd3 	bl	800ba90 <__malloc_unlock>
 800b2ea:	f026 0607 	bic.w	r6, r6, #7
 800b2ee:	1d23      	adds	r3, r4, #4
 800b2f0:	1af2      	subs	r2, r6, r3
 800b2f2:	d0b6      	beq.n	800b262 <_malloc_r+0x22>
 800b2f4:	1b9b      	subs	r3, r3, r6
 800b2f6:	50a3      	str	r3, [r4, r2]
 800b2f8:	e7b3      	b.n	800b262 <_malloc_r+0x22>
 800b2fa:	6862      	ldr	r2, [r4, #4]
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	bf0c      	ite	eq
 800b300:	6032      	streq	r2, [r6, #0]
 800b302:	605a      	strne	r2, [r3, #4]
 800b304:	e7ec      	b.n	800b2e0 <_malloc_r+0xa0>
 800b306:	4623      	mov	r3, r4
 800b308:	6864      	ldr	r4, [r4, #4]
 800b30a:	e7b2      	b.n	800b272 <_malloc_r+0x32>
 800b30c:	4634      	mov	r4, r6
 800b30e:	6876      	ldr	r6, [r6, #4]
 800b310:	e7b9      	b.n	800b286 <_malloc_r+0x46>
 800b312:	230c      	movs	r3, #12
 800b314:	603b      	str	r3, [r7, #0]
 800b316:	4638      	mov	r0, r7
 800b318:	f000 fbba 	bl	800ba90 <__malloc_unlock>
 800b31c:	e7a1      	b.n	800b262 <_malloc_r+0x22>
 800b31e:	6025      	str	r5, [r4, #0]
 800b320:	e7de      	b.n	800b2e0 <_malloc_r+0xa0>
 800b322:	bf00      	nop
 800b324:	200006e8 	.word	0x200006e8

0800b328 <__ssputs_r>:
 800b328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	688e      	ldr	r6, [r1, #8]
 800b32e:	429e      	cmp	r6, r3
 800b330:	4682      	mov	sl, r0
 800b332:	460c      	mov	r4, r1
 800b334:	4690      	mov	r8, r2
 800b336:	461f      	mov	r7, r3
 800b338:	d838      	bhi.n	800b3ac <__ssputs_r+0x84>
 800b33a:	898a      	ldrh	r2, [r1, #12]
 800b33c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b340:	d032      	beq.n	800b3a8 <__ssputs_r+0x80>
 800b342:	6825      	ldr	r5, [r4, #0]
 800b344:	6909      	ldr	r1, [r1, #16]
 800b346:	eba5 0901 	sub.w	r9, r5, r1
 800b34a:	6965      	ldr	r5, [r4, #20]
 800b34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b354:	3301      	adds	r3, #1
 800b356:	444b      	add	r3, r9
 800b358:	106d      	asrs	r5, r5, #1
 800b35a:	429d      	cmp	r5, r3
 800b35c:	bf38      	it	cc
 800b35e:	461d      	movcc	r5, r3
 800b360:	0553      	lsls	r3, r2, #21
 800b362:	d531      	bpl.n	800b3c8 <__ssputs_r+0xa0>
 800b364:	4629      	mov	r1, r5
 800b366:	f7ff ff6b 	bl	800b240 <_malloc_r>
 800b36a:	4606      	mov	r6, r0
 800b36c:	b950      	cbnz	r0, 800b384 <__ssputs_r+0x5c>
 800b36e:	230c      	movs	r3, #12
 800b370:	f8ca 3000 	str.w	r3, [sl]
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b384:	6921      	ldr	r1, [r4, #16]
 800b386:	464a      	mov	r2, r9
 800b388:	f7ff fa08 	bl	800a79c <memcpy>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b396:	81a3      	strh	r3, [r4, #12]
 800b398:	6126      	str	r6, [r4, #16]
 800b39a:	6165      	str	r5, [r4, #20]
 800b39c:	444e      	add	r6, r9
 800b39e:	eba5 0509 	sub.w	r5, r5, r9
 800b3a2:	6026      	str	r6, [r4, #0]
 800b3a4:	60a5      	str	r5, [r4, #8]
 800b3a6:	463e      	mov	r6, r7
 800b3a8:	42be      	cmp	r6, r7
 800b3aa:	d900      	bls.n	800b3ae <__ssputs_r+0x86>
 800b3ac:	463e      	mov	r6, r7
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	f000 fb4c 	bl	800ba50 <memmove>
 800b3b8:	68a3      	ldr	r3, [r4, #8]
 800b3ba:	1b9b      	subs	r3, r3, r6
 800b3bc:	60a3      	str	r3, [r4, #8]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	4433      	add	r3, r6
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e7db      	b.n	800b380 <__ssputs_r+0x58>
 800b3c8:	462a      	mov	r2, r5
 800b3ca:	f000 fb67 	bl	800ba9c <_realloc_r>
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d1e1      	bne.n	800b398 <__ssputs_r+0x70>
 800b3d4:	6921      	ldr	r1, [r4, #16]
 800b3d6:	4650      	mov	r0, sl
 800b3d8:	f7ff fec6 	bl	800b168 <_free_r>
 800b3dc:	e7c7      	b.n	800b36e <__ssputs_r+0x46>
	...

0800b3e0 <_svfiprintf_r>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	4698      	mov	r8, r3
 800b3e6:	898b      	ldrh	r3, [r1, #12]
 800b3e8:	061b      	lsls	r3, r3, #24
 800b3ea:	b09d      	sub	sp, #116	; 0x74
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	d50e      	bpl.n	800b412 <_svfiprintf_r+0x32>
 800b3f4:	690b      	ldr	r3, [r1, #16]
 800b3f6:	b963      	cbnz	r3, 800b412 <_svfiprintf_r+0x32>
 800b3f8:	2140      	movs	r1, #64	; 0x40
 800b3fa:	f7ff ff21 	bl	800b240 <_malloc_r>
 800b3fe:	6028      	str	r0, [r5, #0]
 800b400:	6128      	str	r0, [r5, #16]
 800b402:	b920      	cbnz	r0, 800b40e <_svfiprintf_r+0x2e>
 800b404:	230c      	movs	r3, #12
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	e0d1      	b.n	800b5b2 <_svfiprintf_r+0x1d2>
 800b40e:	2340      	movs	r3, #64	; 0x40
 800b410:	616b      	str	r3, [r5, #20]
 800b412:	2300      	movs	r3, #0
 800b414:	9309      	str	r3, [sp, #36]	; 0x24
 800b416:	2320      	movs	r3, #32
 800b418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b420:	2330      	movs	r3, #48	; 0x30
 800b422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5cc <_svfiprintf_r+0x1ec>
 800b426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b42a:	f04f 0901 	mov.w	r9, #1
 800b42e:	4623      	mov	r3, r4
 800b430:	469a      	mov	sl, r3
 800b432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b436:	b10a      	cbz	r2, 800b43c <_svfiprintf_r+0x5c>
 800b438:	2a25      	cmp	r2, #37	; 0x25
 800b43a:	d1f9      	bne.n	800b430 <_svfiprintf_r+0x50>
 800b43c:	ebba 0b04 	subs.w	fp, sl, r4
 800b440:	d00b      	beq.n	800b45a <_svfiprintf_r+0x7a>
 800b442:	465b      	mov	r3, fp
 800b444:	4622      	mov	r2, r4
 800b446:	4629      	mov	r1, r5
 800b448:	4638      	mov	r0, r7
 800b44a:	f7ff ff6d 	bl	800b328 <__ssputs_r>
 800b44e:	3001      	adds	r0, #1
 800b450:	f000 80aa 	beq.w	800b5a8 <_svfiprintf_r+0x1c8>
 800b454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b456:	445a      	add	r2, fp
 800b458:	9209      	str	r2, [sp, #36]	; 0x24
 800b45a:	f89a 3000 	ldrb.w	r3, [sl]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 80a2 	beq.w	800b5a8 <_svfiprintf_r+0x1c8>
 800b464:	2300      	movs	r3, #0
 800b466:	f04f 32ff 	mov.w	r2, #4294967295
 800b46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b46e:	f10a 0a01 	add.w	sl, sl, #1
 800b472:	9304      	str	r3, [sp, #16]
 800b474:	9307      	str	r3, [sp, #28]
 800b476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b47a:	931a      	str	r3, [sp, #104]	; 0x68
 800b47c:	4654      	mov	r4, sl
 800b47e:	2205      	movs	r2, #5
 800b480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b484:	4851      	ldr	r0, [pc, #324]	; (800b5cc <_svfiprintf_r+0x1ec>)
 800b486:	f7f4 fecb 	bl	8000220 <memchr>
 800b48a:	9a04      	ldr	r2, [sp, #16]
 800b48c:	b9d8      	cbnz	r0, 800b4c6 <_svfiprintf_r+0xe6>
 800b48e:	06d0      	lsls	r0, r2, #27
 800b490:	bf44      	itt	mi
 800b492:	2320      	movmi	r3, #32
 800b494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b498:	0711      	lsls	r1, r2, #28
 800b49a:	bf44      	itt	mi
 800b49c:	232b      	movmi	r3, #43	; 0x2b
 800b49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4a8:	d015      	beq.n	800b4d6 <_svfiprintf_r+0xf6>
 800b4aa:	9a07      	ldr	r2, [sp, #28]
 800b4ac:	4654      	mov	r4, sl
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	f04f 0c0a 	mov.w	ip, #10
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ba:	3b30      	subs	r3, #48	; 0x30
 800b4bc:	2b09      	cmp	r3, #9
 800b4be:	d94e      	bls.n	800b55e <_svfiprintf_r+0x17e>
 800b4c0:	b1b0      	cbz	r0, 800b4f0 <_svfiprintf_r+0x110>
 800b4c2:	9207      	str	r2, [sp, #28]
 800b4c4:	e014      	b.n	800b4f0 <_svfiprintf_r+0x110>
 800b4c6:	eba0 0308 	sub.w	r3, r0, r8
 800b4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	9304      	str	r3, [sp, #16]
 800b4d2:	46a2      	mov	sl, r4
 800b4d4:	e7d2      	b.n	800b47c <_svfiprintf_r+0x9c>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	1d19      	adds	r1, r3, #4
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	9103      	str	r1, [sp, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	bfbb      	ittet	lt
 800b4e2:	425b      	neglt	r3, r3
 800b4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b4e8:	9307      	strge	r3, [sp, #28]
 800b4ea:	9307      	strlt	r3, [sp, #28]
 800b4ec:	bfb8      	it	lt
 800b4ee:	9204      	strlt	r2, [sp, #16]
 800b4f0:	7823      	ldrb	r3, [r4, #0]
 800b4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f4:	d10c      	bne.n	800b510 <_svfiprintf_r+0x130>
 800b4f6:	7863      	ldrb	r3, [r4, #1]
 800b4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fa:	d135      	bne.n	800b568 <_svfiprintf_r+0x188>
 800b4fc:	9b03      	ldr	r3, [sp, #12]
 800b4fe:	1d1a      	adds	r2, r3, #4
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	9203      	str	r2, [sp, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfb8      	it	lt
 800b508:	f04f 33ff 	movlt.w	r3, #4294967295
 800b50c:	3402      	adds	r4, #2
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5dc <_svfiprintf_r+0x1fc>
 800b514:	7821      	ldrb	r1, [r4, #0]
 800b516:	2203      	movs	r2, #3
 800b518:	4650      	mov	r0, sl
 800b51a:	f7f4 fe81 	bl	8000220 <memchr>
 800b51e:	b140      	cbz	r0, 800b532 <_svfiprintf_r+0x152>
 800b520:	2340      	movs	r3, #64	; 0x40
 800b522:	eba0 000a 	sub.w	r0, r0, sl
 800b526:	fa03 f000 	lsl.w	r0, r3, r0
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	4303      	orrs	r3, r0
 800b52e:	3401      	adds	r4, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	4826      	ldr	r0, [pc, #152]	; (800b5d0 <_svfiprintf_r+0x1f0>)
 800b538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53c:	2206      	movs	r2, #6
 800b53e:	f7f4 fe6f 	bl	8000220 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d038      	beq.n	800b5b8 <_svfiprintf_r+0x1d8>
 800b546:	4b23      	ldr	r3, [pc, #140]	; (800b5d4 <_svfiprintf_r+0x1f4>)
 800b548:	bb1b      	cbnz	r3, 800b592 <_svfiprintf_r+0x1b2>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	4433      	add	r3, r6
 800b55a:	9309      	str	r3, [sp, #36]	; 0x24
 800b55c:	e767      	b.n	800b42e <_svfiprintf_r+0x4e>
 800b55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b562:	460c      	mov	r4, r1
 800b564:	2001      	movs	r0, #1
 800b566:	e7a5      	b.n	800b4b4 <_svfiprintf_r+0xd4>
 800b568:	2300      	movs	r3, #0
 800b56a:	3401      	adds	r4, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	f04f 0c0a 	mov.w	ip, #10
 800b574:	4620      	mov	r0, r4
 800b576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b57a:	3a30      	subs	r2, #48	; 0x30
 800b57c:	2a09      	cmp	r2, #9
 800b57e:	d903      	bls.n	800b588 <_svfiprintf_r+0x1a8>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0c5      	beq.n	800b510 <_svfiprintf_r+0x130>
 800b584:	9105      	str	r1, [sp, #20]
 800b586:	e7c3      	b.n	800b510 <_svfiprintf_r+0x130>
 800b588:	fb0c 2101 	mla	r1, ip, r1, r2
 800b58c:	4604      	mov	r4, r0
 800b58e:	2301      	movs	r3, #1
 800b590:	e7f0      	b.n	800b574 <_svfiprintf_r+0x194>
 800b592:	ab03      	add	r3, sp, #12
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	462a      	mov	r2, r5
 800b598:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <_svfiprintf_r+0x1f8>)
 800b59a:	a904      	add	r1, sp, #16
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7fc f9cd 	bl	800793c <_printf_float>
 800b5a2:	1c42      	adds	r2, r0, #1
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	d1d6      	bne.n	800b556 <_svfiprintf_r+0x176>
 800b5a8:	89ab      	ldrh	r3, [r5, #12]
 800b5aa:	065b      	lsls	r3, r3, #25
 800b5ac:	f53f af2c 	bmi.w	800b408 <_svfiprintf_r+0x28>
 800b5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b2:	b01d      	add	sp, #116	; 0x74
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	ab03      	add	r3, sp, #12
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	462a      	mov	r2, r5
 800b5be:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <_svfiprintf_r+0x1f8>)
 800b5c0:	a904      	add	r1, sp, #16
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	f7fc fc5e 	bl	8007e84 <_printf_i>
 800b5c8:	e7eb      	b.n	800b5a2 <_svfiprintf_r+0x1c2>
 800b5ca:	bf00      	nop
 800b5cc:	0800d374 	.word	0x0800d374
 800b5d0:	0800d37e 	.word	0x0800d37e
 800b5d4:	0800793d 	.word	0x0800793d
 800b5d8:	0800b329 	.word	0x0800b329
 800b5dc:	0800d37a 	.word	0x0800d37a

0800b5e0 <_read_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d07      	ldr	r5, [pc, #28]	; (800b600 <_read_r+0x20>)
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	4608      	mov	r0, r1
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	602a      	str	r2, [r5, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f7f7 fe32 	bl	8003258 <_read>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d102      	bne.n	800b5fe <_read_r+0x1e>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	b103      	cbz	r3, 800b5fe <_read_r+0x1e>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	200006f0 	.word	0x200006f0
 800b604:	00000000 	.word	0x00000000

0800b608 <nan>:
 800b608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b610 <nan+0x8>
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	00000000 	.word	0x00000000
 800b614:	7ff80000 	.word	0x7ff80000

0800b618 <_sbrk_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d06      	ldr	r5, [pc, #24]	; (800b634 <_sbrk_r+0x1c>)
 800b61c:	2300      	movs	r3, #0
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	f7f7 fe86 	bl	8003334 <_sbrk>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_sbrk_r+0x1a>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_sbrk_r+0x1a>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	200006f0 	.word	0x200006f0

0800b638 <strncmp>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	b17a      	cbz	r2, 800b65c <strncmp+0x24>
 800b63c:	4603      	mov	r3, r0
 800b63e:	3901      	subs	r1, #1
 800b640:	1884      	adds	r4, r0, r2
 800b642:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b646:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b64a:	4290      	cmp	r0, r2
 800b64c:	d101      	bne.n	800b652 <strncmp+0x1a>
 800b64e:	42a3      	cmp	r3, r4
 800b650:	d101      	bne.n	800b656 <strncmp+0x1e>
 800b652:	1a80      	subs	r0, r0, r2
 800b654:	bd10      	pop	{r4, pc}
 800b656:	2800      	cmp	r0, #0
 800b658:	d1f3      	bne.n	800b642 <strncmp+0xa>
 800b65a:	e7fa      	b.n	800b652 <strncmp+0x1a>
 800b65c:	4610      	mov	r0, r2
 800b65e:	e7f9      	b.n	800b654 <strncmp+0x1c>

0800b660 <__ascii_wctomb>:
 800b660:	b149      	cbz	r1, 800b676 <__ascii_wctomb+0x16>
 800b662:	2aff      	cmp	r2, #255	; 0xff
 800b664:	bf85      	ittet	hi
 800b666:	238a      	movhi	r3, #138	; 0x8a
 800b668:	6003      	strhi	r3, [r0, #0]
 800b66a:	700a      	strbls	r2, [r1, #0]
 800b66c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b670:	bf98      	it	ls
 800b672:	2001      	movls	r0, #1
 800b674:	4770      	bx	lr
 800b676:	4608      	mov	r0, r1
 800b678:	4770      	bx	lr
	...

0800b67c <__assert_func>:
 800b67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b67e:	4614      	mov	r4, r2
 800b680:	461a      	mov	r2, r3
 800b682:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <__assert_func+0x2c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4605      	mov	r5, r0
 800b688:	68d8      	ldr	r0, [r3, #12]
 800b68a:	b14c      	cbz	r4, 800b6a0 <__assert_func+0x24>
 800b68c:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <__assert_func+0x30>)
 800b68e:	9100      	str	r1, [sp, #0]
 800b690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b694:	4906      	ldr	r1, [pc, #24]	; (800b6b0 <__assert_func+0x34>)
 800b696:	462b      	mov	r3, r5
 800b698:	f000 f9a6 	bl	800b9e8 <fiprintf>
 800b69c:	f000 fc46 	bl	800bf2c <abort>
 800b6a0:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <__assert_func+0x38>)
 800b6a2:	461c      	mov	r4, r3
 800b6a4:	e7f3      	b.n	800b68e <__assert_func+0x12>
 800b6a6:	bf00      	nop
 800b6a8:	2000000c 	.word	0x2000000c
 800b6ac:	0800d385 	.word	0x0800d385
 800b6b0:	0800d392 	.word	0x0800d392
 800b6b4:	0800d3c0 	.word	0x0800d3c0

0800b6b8 <__sflush_r>:
 800b6b8:	898a      	ldrh	r2, [r1, #12]
 800b6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	4605      	mov	r5, r0
 800b6c0:	0710      	lsls	r0, r2, #28
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	d458      	bmi.n	800b778 <__sflush_r+0xc0>
 800b6c6:	684b      	ldr	r3, [r1, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	dc05      	bgt.n	800b6d8 <__sflush_r+0x20>
 800b6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	dc02      	bgt.n	800b6d8 <__sflush_r+0x20>
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6da:	2e00      	cmp	r6, #0
 800b6dc:	d0f9      	beq.n	800b6d2 <__sflush_r+0x1a>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6e4:	682f      	ldr	r7, [r5, #0]
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	d032      	beq.n	800b750 <__sflush_r+0x98>
 800b6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	075a      	lsls	r2, r3, #29
 800b6f0:	d505      	bpl.n	800b6fe <__sflush_r+0x46>
 800b6f2:	6863      	ldr	r3, [r4, #4]
 800b6f4:	1ac0      	subs	r0, r0, r3
 800b6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6f8:	b10b      	cbz	r3, 800b6fe <__sflush_r+0x46>
 800b6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6fc:	1ac0      	subs	r0, r0, r3
 800b6fe:	2300      	movs	r3, #0
 800b700:	4602      	mov	r2, r0
 800b702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b704:	6a21      	ldr	r1, [r4, #32]
 800b706:	4628      	mov	r0, r5
 800b708:	47b0      	blx	r6
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	d106      	bne.n	800b71e <__sflush_r+0x66>
 800b710:	6829      	ldr	r1, [r5, #0]
 800b712:	291d      	cmp	r1, #29
 800b714:	d82c      	bhi.n	800b770 <__sflush_r+0xb8>
 800b716:	4a2a      	ldr	r2, [pc, #168]	; (800b7c0 <__sflush_r+0x108>)
 800b718:	40ca      	lsrs	r2, r1
 800b71a:	07d6      	lsls	r6, r2, #31
 800b71c:	d528      	bpl.n	800b770 <__sflush_r+0xb8>
 800b71e:	2200      	movs	r2, #0
 800b720:	6062      	str	r2, [r4, #4]
 800b722:	04d9      	lsls	r1, r3, #19
 800b724:	6922      	ldr	r2, [r4, #16]
 800b726:	6022      	str	r2, [r4, #0]
 800b728:	d504      	bpl.n	800b734 <__sflush_r+0x7c>
 800b72a:	1c42      	adds	r2, r0, #1
 800b72c:	d101      	bne.n	800b732 <__sflush_r+0x7a>
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	b903      	cbnz	r3, 800b734 <__sflush_r+0x7c>
 800b732:	6560      	str	r0, [r4, #84]	; 0x54
 800b734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b736:	602f      	str	r7, [r5, #0]
 800b738:	2900      	cmp	r1, #0
 800b73a:	d0ca      	beq.n	800b6d2 <__sflush_r+0x1a>
 800b73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b740:	4299      	cmp	r1, r3
 800b742:	d002      	beq.n	800b74a <__sflush_r+0x92>
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff fd0f 	bl	800b168 <_free_r>
 800b74a:	2000      	movs	r0, #0
 800b74c:	6360      	str	r0, [r4, #52]	; 0x34
 800b74e:	e7c1      	b.n	800b6d4 <__sflush_r+0x1c>
 800b750:	6a21      	ldr	r1, [r4, #32]
 800b752:	2301      	movs	r3, #1
 800b754:	4628      	mov	r0, r5
 800b756:	47b0      	blx	r6
 800b758:	1c41      	adds	r1, r0, #1
 800b75a:	d1c7      	bne.n	800b6ec <__sflush_r+0x34>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0c4      	beq.n	800b6ec <__sflush_r+0x34>
 800b762:	2b1d      	cmp	r3, #29
 800b764:	d001      	beq.n	800b76a <__sflush_r+0xb2>
 800b766:	2b16      	cmp	r3, #22
 800b768:	d101      	bne.n	800b76e <__sflush_r+0xb6>
 800b76a:	602f      	str	r7, [r5, #0]
 800b76c:	e7b1      	b.n	800b6d2 <__sflush_r+0x1a>
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	e7ad      	b.n	800b6d4 <__sflush_r+0x1c>
 800b778:	690f      	ldr	r7, [r1, #16]
 800b77a:	2f00      	cmp	r7, #0
 800b77c:	d0a9      	beq.n	800b6d2 <__sflush_r+0x1a>
 800b77e:	0793      	lsls	r3, r2, #30
 800b780:	680e      	ldr	r6, [r1, #0]
 800b782:	bf08      	it	eq
 800b784:	694b      	ldreq	r3, [r1, #20]
 800b786:	600f      	str	r7, [r1, #0]
 800b788:	bf18      	it	ne
 800b78a:	2300      	movne	r3, #0
 800b78c:	eba6 0807 	sub.w	r8, r6, r7
 800b790:	608b      	str	r3, [r1, #8]
 800b792:	f1b8 0f00 	cmp.w	r8, #0
 800b796:	dd9c      	ble.n	800b6d2 <__sflush_r+0x1a>
 800b798:	6a21      	ldr	r1, [r4, #32]
 800b79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b79c:	4643      	mov	r3, r8
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b0      	blx	r6
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	dc06      	bgt.n	800b7b6 <__sflush_r+0xfe>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	e78e      	b.n	800b6d4 <__sflush_r+0x1c>
 800b7b6:	4407      	add	r7, r0
 800b7b8:	eba8 0800 	sub.w	r8, r8, r0
 800b7bc:	e7e9      	b.n	800b792 <__sflush_r+0xda>
 800b7be:	bf00      	nop
 800b7c0:	20400001 	.word	0x20400001

0800b7c4 <_fflush_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	690b      	ldr	r3, [r1, #16]
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	b913      	cbnz	r3, 800b7d4 <_fflush_r+0x10>
 800b7ce:	2500      	movs	r5, #0
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	b118      	cbz	r0, 800b7de <_fflush_r+0x1a>
 800b7d6:	6983      	ldr	r3, [r0, #24]
 800b7d8:	b90b      	cbnz	r3, 800b7de <_fflush_r+0x1a>
 800b7da:	f000 f887 	bl	800b8ec <__sinit>
 800b7de:	4b14      	ldr	r3, [pc, #80]	; (800b830 <_fflush_r+0x6c>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	d11b      	bne.n	800b81c <_fflush_r+0x58>
 800b7e4:	686c      	ldr	r4, [r5, #4]
 800b7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d0ef      	beq.n	800b7ce <_fflush_r+0xa>
 800b7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7f0:	07d0      	lsls	r0, r2, #31
 800b7f2:	d404      	bmi.n	800b7fe <_fflush_r+0x3a>
 800b7f4:	0599      	lsls	r1, r3, #22
 800b7f6:	d402      	bmi.n	800b7fe <_fflush_r+0x3a>
 800b7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7fa:	f000 f927 	bl	800ba4c <__retarget_lock_acquire_recursive>
 800b7fe:	4628      	mov	r0, r5
 800b800:	4621      	mov	r1, r4
 800b802:	f7ff ff59 	bl	800b6b8 <__sflush_r>
 800b806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b808:	07da      	lsls	r2, r3, #31
 800b80a:	4605      	mov	r5, r0
 800b80c:	d4e0      	bmi.n	800b7d0 <_fflush_r+0xc>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	059b      	lsls	r3, r3, #22
 800b812:	d4dd      	bmi.n	800b7d0 <_fflush_r+0xc>
 800b814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b816:	f000 f91a 	bl	800ba4e <__retarget_lock_release_recursive>
 800b81a:	e7d9      	b.n	800b7d0 <_fflush_r+0xc>
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <_fflush_r+0x70>)
 800b81e:	429c      	cmp	r4, r3
 800b820:	d101      	bne.n	800b826 <_fflush_r+0x62>
 800b822:	68ac      	ldr	r4, [r5, #8]
 800b824:	e7df      	b.n	800b7e6 <_fflush_r+0x22>
 800b826:	4b04      	ldr	r3, [pc, #16]	; (800b838 <_fflush_r+0x74>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	bf08      	it	eq
 800b82c:	68ec      	ldreq	r4, [r5, #12]
 800b82e:	e7da      	b.n	800b7e6 <_fflush_r+0x22>
 800b830:	0800d3e4 	.word	0x0800d3e4
 800b834:	0800d404 	.word	0x0800d404
 800b838:	0800d3c4 	.word	0x0800d3c4

0800b83c <std>:
 800b83c:	2300      	movs	r3, #0
 800b83e:	b510      	push	{r4, lr}
 800b840:	4604      	mov	r4, r0
 800b842:	e9c0 3300 	strd	r3, r3, [r0]
 800b846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b84a:	6083      	str	r3, [r0, #8]
 800b84c:	8181      	strh	r1, [r0, #12]
 800b84e:	6643      	str	r3, [r0, #100]	; 0x64
 800b850:	81c2      	strh	r2, [r0, #14]
 800b852:	6183      	str	r3, [r0, #24]
 800b854:	4619      	mov	r1, r3
 800b856:	2208      	movs	r2, #8
 800b858:	305c      	adds	r0, #92	; 0x5c
 800b85a:	f7fb ffc7 	bl	80077ec <memset>
 800b85e:	4b05      	ldr	r3, [pc, #20]	; (800b874 <std+0x38>)
 800b860:	6263      	str	r3, [r4, #36]	; 0x24
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <std+0x3c>)
 800b864:	62a3      	str	r3, [r4, #40]	; 0x28
 800b866:	4b05      	ldr	r3, [pc, #20]	; (800b87c <std+0x40>)
 800b868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b86a:	4b05      	ldr	r3, [pc, #20]	; (800b880 <std+0x44>)
 800b86c:	6224      	str	r4, [r4, #32]
 800b86e:	6323      	str	r3, [r4, #48]	; 0x30
 800b870:	bd10      	pop	{r4, pc}
 800b872:	bf00      	nop
 800b874:	0800853d 	.word	0x0800853d
 800b878:	0800855f 	.word	0x0800855f
 800b87c:	08008597 	.word	0x08008597
 800b880:	080085bb 	.word	0x080085bb

0800b884 <_cleanup_r>:
 800b884:	4901      	ldr	r1, [pc, #4]	; (800b88c <_cleanup_r+0x8>)
 800b886:	f000 b8c1 	b.w	800ba0c <_fwalk_reent>
 800b88a:	bf00      	nop
 800b88c:	0800b7c5 	.word	0x0800b7c5

0800b890 <__sfmoreglue>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	2268      	movs	r2, #104	; 0x68
 800b894:	1e4d      	subs	r5, r1, #1
 800b896:	4355      	muls	r5, r2
 800b898:	460e      	mov	r6, r1
 800b89a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b89e:	f7ff fccf 	bl	800b240 <_malloc_r>
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	b140      	cbz	r0, 800b8b8 <__sfmoreglue+0x28>
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b8ac:	300c      	adds	r0, #12
 800b8ae:	60a0      	str	r0, [r4, #8]
 800b8b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8b4:	f7fb ff9a 	bl	80077ec <memset>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}

0800b8bc <__sfp_lock_acquire>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__sfp_lock_acquire+0x8>)
 800b8be:	f000 b8c5 	b.w	800ba4c <__retarget_lock_acquire_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	200006f5 	.word	0x200006f5

0800b8c8 <__sfp_lock_release>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__sfp_lock_release+0x8>)
 800b8ca:	f000 b8c0 	b.w	800ba4e <__retarget_lock_release_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	200006f5 	.word	0x200006f5

0800b8d4 <__sinit_lock_acquire>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__sinit_lock_acquire+0x8>)
 800b8d6:	f000 b8b9 	b.w	800ba4c <__retarget_lock_acquire_recursive>
 800b8da:	bf00      	nop
 800b8dc:	200006f6 	.word	0x200006f6

0800b8e0 <__sinit_lock_release>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	; (800b8e8 <__sinit_lock_release+0x8>)
 800b8e2:	f000 b8b4 	b.w	800ba4e <__retarget_lock_release_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	200006f6 	.word	0x200006f6

0800b8ec <__sinit>:
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	f7ff fff0 	bl	800b8d4 <__sinit_lock_acquire>
 800b8f4:	69a3      	ldr	r3, [r4, #24]
 800b8f6:	b11b      	cbz	r3, 800b900 <__sinit+0x14>
 800b8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8fc:	f7ff bff0 	b.w	800b8e0 <__sinit_lock_release>
 800b900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b904:	6523      	str	r3, [r4, #80]	; 0x50
 800b906:	4b13      	ldr	r3, [pc, #76]	; (800b954 <__sinit+0x68>)
 800b908:	4a13      	ldr	r2, [pc, #76]	; (800b958 <__sinit+0x6c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b90e:	42a3      	cmp	r3, r4
 800b910:	bf04      	itt	eq
 800b912:	2301      	moveq	r3, #1
 800b914:	61a3      	streq	r3, [r4, #24]
 800b916:	4620      	mov	r0, r4
 800b918:	f000 f820 	bl	800b95c <__sfp>
 800b91c:	6060      	str	r0, [r4, #4]
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 f81c 	bl	800b95c <__sfp>
 800b924:	60a0      	str	r0, [r4, #8]
 800b926:	4620      	mov	r0, r4
 800b928:	f000 f818 	bl	800b95c <__sfp>
 800b92c:	2200      	movs	r2, #0
 800b92e:	60e0      	str	r0, [r4, #12]
 800b930:	2104      	movs	r1, #4
 800b932:	6860      	ldr	r0, [r4, #4]
 800b934:	f7ff ff82 	bl	800b83c <std>
 800b938:	68a0      	ldr	r0, [r4, #8]
 800b93a:	2201      	movs	r2, #1
 800b93c:	2109      	movs	r1, #9
 800b93e:	f7ff ff7d 	bl	800b83c <std>
 800b942:	68e0      	ldr	r0, [r4, #12]
 800b944:	2202      	movs	r2, #2
 800b946:	2112      	movs	r1, #18
 800b948:	f7ff ff78 	bl	800b83c <std>
 800b94c:	2301      	movs	r3, #1
 800b94e:	61a3      	str	r3, [r4, #24]
 800b950:	e7d2      	b.n	800b8f8 <__sinit+0xc>
 800b952:	bf00      	nop
 800b954:	0800cf80 	.word	0x0800cf80
 800b958:	0800b885 	.word	0x0800b885

0800b95c <__sfp>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	4607      	mov	r7, r0
 800b960:	f7ff ffac 	bl	800b8bc <__sfp_lock_acquire>
 800b964:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <__sfp+0x84>)
 800b966:	681e      	ldr	r6, [r3, #0]
 800b968:	69b3      	ldr	r3, [r6, #24]
 800b96a:	b913      	cbnz	r3, 800b972 <__sfp+0x16>
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff ffbd 	bl	800b8ec <__sinit>
 800b972:	3648      	adds	r6, #72	; 0x48
 800b974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b978:	3b01      	subs	r3, #1
 800b97a:	d503      	bpl.n	800b984 <__sfp+0x28>
 800b97c:	6833      	ldr	r3, [r6, #0]
 800b97e:	b30b      	cbz	r3, 800b9c4 <__sfp+0x68>
 800b980:	6836      	ldr	r6, [r6, #0]
 800b982:	e7f7      	b.n	800b974 <__sfp+0x18>
 800b984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b988:	b9d5      	cbnz	r5, 800b9c0 <__sfp+0x64>
 800b98a:	4b16      	ldr	r3, [pc, #88]	; (800b9e4 <__sfp+0x88>)
 800b98c:	60e3      	str	r3, [r4, #12]
 800b98e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b992:	6665      	str	r5, [r4, #100]	; 0x64
 800b994:	f000 f859 	bl	800ba4a <__retarget_lock_init_recursive>
 800b998:	f7ff ff96 	bl	800b8c8 <__sfp_lock_release>
 800b99c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9a4:	6025      	str	r5, [r4, #0]
 800b9a6:	61a5      	str	r5, [r4, #24]
 800b9a8:	2208      	movs	r2, #8
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9b0:	f7fb ff1c 	bl	80077ec <memset>
 800b9b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9bc:	4620      	mov	r0, r4
 800b9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9c0:	3468      	adds	r4, #104	; 0x68
 800b9c2:	e7d9      	b.n	800b978 <__sfp+0x1c>
 800b9c4:	2104      	movs	r1, #4
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7ff ff62 	bl	800b890 <__sfmoreglue>
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	6030      	str	r0, [r6, #0]
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d1d5      	bne.n	800b980 <__sfp+0x24>
 800b9d4:	f7ff ff78 	bl	800b8c8 <__sfp_lock_release>
 800b9d8:	230c      	movs	r3, #12
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	e7ee      	b.n	800b9bc <__sfp+0x60>
 800b9de:	bf00      	nop
 800b9e0:	0800cf80 	.word	0x0800cf80
 800b9e4:	ffff0001 	.word	0xffff0001

0800b9e8 <fiprintf>:
 800b9e8:	b40e      	push	{r1, r2, r3}
 800b9ea:	b503      	push	{r0, r1, lr}
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	ab03      	add	r3, sp, #12
 800b9f0:	4805      	ldr	r0, [pc, #20]	; (800ba08 <fiprintf+0x20>)
 800b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f6:	6800      	ldr	r0, [r0, #0]
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	f000 f8a7 	bl	800bb4c <_vfiprintf_r>
 800b9fe:	b002      	add	sp, #8
 800ba00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba04:	b003      	add	sp, #12
 800ba06:	4770      	bx	lr
 800ba08:	2000000c 	.word	0x2000000c

0800ba0c <_fwalk_reent>:
 800ba0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba10:	4606      	mov	r6, r0
 800ba12:	4688      	mov	r8, r1
 800ba14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba18:	2700      	movs	r7, #0
 800ba1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba1e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba22:	d505      	bpl.n	800ba30 <_fwalk_reent+0x24>
 800ba24:	6824      	ldr	r4, [r4, #0]
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d1f7      	bne.n	800ba1a <_fwalk_reent+0xe>
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba30:	89ab      	ldrh	r3, [r5, #12]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d907      	bls.n	800ba46 <_fwalk_reent+0x3a>
 800ba36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	d003      	beq.n	800ba46 <_fwalk_reent+0x3a>
 800ba3e:	4629      	mov	r1, r5
 800ba40:	4630      	mov	r0, r6
 800ba42:	47c0      	blx	r8
 800ba44:	4307      	orrs	r7, r0
 800ba46:	3568      	adds	r5, #104	; 0x68
 800ba48:	e7e9      	b.n	800ba1e <_fwalk_reent+0x12>

0800ba4a <__retarget_lock_init_recursive>:
 800ba4a:	4770      	bx	lr

0800ba4c <__retarget_lock_acquire_recursive>:
 800ba4c:	4770      	bx	lr

0800ba4e <__retarget_lock_release_recursive>:
 800ba4e:	4770      	bx	lr

0800ba50 <memmove>:
 800ba50:	4288      	cmp	r0, r1
 800ba52:	b510      	push	{r4, lr}
 800ba54:	eb01 0402 	add.w	r4, r1, r2
 800ba58:	d902      	bls.n	800ba60 <memmove+0x10>
 800ba5a:	4284      	cmp	r4, r0
 800ba5c:	4623      	mov	r3, r4
 800ba5e:	d807      	bhi.n	800ba70 <memmove+0x20>
 800ba60:	1e43      	subs	r3, r0, #1
 800ba62:	42a1      	cmp	r1, r4
 800ba64:	d008      	beq.n	800ba78 <memmove+0x28>
 800ba66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba6e:	e7f8      	b.n	800ba62 <memmove+0x12>
 800ba70:	4402      	add	r2, r0
 800ba72:	4601      	mov	r1, r0
 800ba74:	428a      	cmp	r2, r1
 800ba76:	d100      	bne.n	800ba7a <memmove+0x2a>
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba82:	e7f7      	b.n	800ba74 <memmove+0x24>

0800ba84 <__malloc_lock>:
 800ba84:	4801      	ldr	r0, [pc, #4]	; (800ba8c <__malloc_lock+0x8>)
 800ba86:	f7ff bfe1 	b.w	800ba4c <__retarget_lock_acquire_recursive>
 800ba8a:	bf00      	nop
 800ba8c:	200006f4 	.word	0x200006f4

0800ba90 <__malloc_unlock>:
 800ba90:	4801      	ldr	r0, [pc, #4]	; (800ba98 <__malloc_unlock+0x8>)
 800ba92:	f7ff bfdc 	b.w	800ba4e <__retarget_lock_release_recursive>
 800ba96:	bf00      	nop
 800ba98:	200006f4 	.word	0x200006f4

0800ba9c <_realloc_r>:
 800ba9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa0:	4680      	mov	r8, r0
 800baa2:	4614      	mov	r4, r2
 800baa4:	460e      	mov	r6, r1
 800baa6:	b921      	cbnz	r1, 800bab2 <_realloc_r+0x16>
 800baa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baac:	4611      	mov	r1, r2
 800baae:	f7ff bbc7 	b.w	800b240 <_malloc_r>
 800bab2:	b92a      	cbnz	r2, 800bac0 <_realloc_r+0x24>
 800bab4:	f7ff fb58 	bl	800b168 <_free_r>
 800bab8:	4625      	mov	r5, r4
 800baba:	4628      	mov	r0, r5
 800babc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac0:	f000 faa0 	bl	800c004 <_malloc_usable_size_r>
 800bac4:	4284      	cmp	r4, r0
 800bac6:	4607      	mov	r7, r0
 800bac8:	d802      	bhi.n	800bad0 <_realloc_r+0x34>
 800baca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bace:	d812      	bhi.n	800baf6 <_realloc_r+0x5a>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4640      	mov	r0, r8
 800bad4:	f7ff fbb4 	bl	800b240 <_malloc_r>
 800bad8:	4605      	mov	r5, r0
 800bada:	2800      	cmp	r0, #0
 800badc:	d0ed      	beq.n	800baba <_realloc_r+0x1e>
 800bade:	42bc      	cmp	r4, r7
 800bae0:	4622      	mov	r2, r4
 800bae2:	4631      	mov	r1, r6
 800bae4:	bf28      	it	cs
 800bae6:	463a      	movcs	r2, r7
 800bae8:	f7fe fe58 	bl	800a79c <memcpy>
 800baec:	4631      	mov	r1, r6
 800baee:	4640      	mov	r0, r8
 800baf0:	f7ff fb3a 	bl	800b168 <_free_r>
 800baf4:	e7e1      	b.n	800baba <_realloc_r+0x1e>
 800baf6:	4635      	mov	r5, r6
 800baf8:	e7df      	b.n	800baba <_realloc_r+0x1e>

0800bafa <__sfputc_r>:
 800bafa:	6893      	ldr	r3, [r2, #8]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	b410      	push	{r4}
 800bb02:	6093      	str	r3, [r2, #8]
 800bb04:	da08      	bge.n	800bb18 <__sfputc_r+0x1e>
 800bb06:	6994      	ldr	r4, [r2, #24]
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	db01      	blt.n	800bb10 <__sfputc_r+0x16>
 800bb0c:	290a      	cmp	r1, #10
 800bb0e:	d103      	bne.n	800bb18 <__sfputc_r+0x1e>
 800bb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb14:	f000 b94a 	b.w	800bdac <__swbuf_r>
 800bb18:	6813      	ldr	r3, [r2, #0]
 800bb1a:	1c58      	adds	r0, r3, #1
 800bb1c:	6010      	str	r0, [r2, #0]
 800bb1e:	7019      	strb	r1, [r3, #0]
 800bb20:	4608      	mov	r0, r1
 800bb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <__sfputs_r>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	4614      	mov	r4, r2
 800bb30:	18d5      	adds	r5, r2, r3
 800bb32:	42ac      	cmp	r4, r5
 800bb34:	d101      	bne.n	800bb3a <__sfputs_r+0x12>
 800bb36:	2000      	movs	r0, #0
 800bb38:	e007      	b.n	800bb4a <__sfputs_r+0x22>
 800bb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3e:	463a      	mov	r2, r7
 800bb40:	4630      	mov	r0, r6
 800bb42:	f7ff ffda 	bl	800bafa <__sfputc_r>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d1f3      	bne.n	800bb32 <__sfputs_r+0xa>
 800bb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb4c <_vfiprintf_r>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	460d      	mov	r5, r1
 800bb52:	b09d      	sub	sp, #116	; 0x74
 800bb54:	4614      	mov	r4, r2
 800bb56:	4698      	mov	r8, r3
 800bb58:	4606      	mov	r6, r0
 800bb5a:	b118      	cbz	r0, 800bb64 <_vfiprintf_r+0x18>
 800bb5c:	6983      	ldr	r3, [r0, #24]
 800bb5e:	b90b      	cbnz	r3, 800bb64 <_vfiprintf_r+0x18>
 800bb60:	f7ff fec4 	bl	800b8ec <__sinit>
 800bb64:	4b89      	ldr	r3, [pc, #548]	; (800bd8c <_vfiprintf_r+0x240>)
 800bb66:	429d      	cmp	r5, r3
 800bb68:	d11b      	bne.n	800bba2 <_vfiprintf_r+0x56>
 800bb6a:	6875      	ldr	r5, [r6, #4]
 800bb6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb6e:	07d9      	lsls	r1, r3, #31
 800bb70:	d405      	bmi.n	800bb7e <_vfiprintf_r+0x32>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	059a      	lsls	r2, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_vfiprintf_r+0x32>
 800bb78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb7a:	f7ff ff67 	bl	800ba4c <__retarget_lock_acquire_recursive>
 800bb7e:	89ab      	ldrh	r3, [r5, #12]
 800bb80:	071b      	lsls	r3, r3, #28
 800bb82:	d501      	bpl.n	800bb88 <_vfiprintf_r+0x3c>
 800bb84:	692b      	ldr	r3, [r5, #16]
 800bb86:	b9eb      	cbnz	r3, 800bbc4 <_vfiprintf_r+0x78>
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f000 f960 	bl	800be50 <__swsetup_r>
 800bb90:	b1c0      	cbz	r0, 800bbc4 <_vfiprintf_r+0x78>
 800bb92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb94:	07dc      	lsls	r4, r3, #31
 800bb96:	d50e      	bpl.n	800bbb6 <_vfiprintf_r+0x6a>
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9c:	b01d      	add	sp, #116	; 0x74
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	4b7b      	ldr	r3, [pc, #492]	; (800bd90 <_vfiprintf_r+0x244>)
 800bba4:	429d      	cmp	r5, r3
 800bba6:	d101      	bne.n	800bbac <_vfiprintf_r+0x60>
 800bba8:	68b5      	ldr	r5, [r6, #8]
 800bbaa:	e7df      	b.n	800bb6c <_vfiprintf_r+0x20>
 800bbac:	4b79      	ldr	r3, [pc, #484]	; (800bd94 <_vfiprintf_r+0x248>)
 800bbae:	429d      	cmp	r5, r3
 800bbb0:	bf08      	it	eq
 800bbb2:	68f5      	ldreq	r5, [r6, #12]
 800bbb4:	e7da      	b.n	800bb6c <_vfiprintf_r+0x20>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	0598      	lsls	r0, r3, #22
 800bbba:	d4ed      	bmi.n	800bb98 <_vfiprintf_r+0x4c>
 800bbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbbe:	f7ff ff46 	bl	800ba4e <__retarget_lock_release_recursive>
 800bbc2:	e7e9      	b.n	800bb98 <_vfiprintf_r+0x4c>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc8:	2320      	movs	r3, #32
 800bbca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbce:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd2:	2330      	movs	r3, #48	; 0x30
 800bbd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd98 <_vfiprintf_r+0x24c>
 800bbd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbdc:	f04f 0901 	mov.w	r9, #1
 800bbe0:	4623      	mov	r3, r4
 800bbe2:	469a      	mov	sl, r3
 800bbe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe8:	b10a      	cbz	r2, 800bbee <_vfiprintf_r+0xa2>
 800bbea:	2a25      	cmp	r2, #37	; 0x25
 800bbec:	d1f9      	bne.n	800bbe2 <_vfiprintf_r+0x96>
 800bbee:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf2:	d00b      	beq.n	800bc0c <_vfiprintf_r+0xc0>
 800bbf4:	465b      	mov	r3, fp
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7ff ff94 	bl	800bb28 <__sfputs_r>
 800bc00:	3001      	adds	r0, #1
 800bc02:	f000 80aa 	beq.w	800bd5a <_vfiprintf_r+0x20e>
 800bc06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc08:	445a      	add	r2, fp
 800bc0a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 80a2 	beq.w	800bd5a <_vfiprintf_r+0x20e>
 800bc16:	2300      	movs	r3, #0
 800bc18:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc20:	f10a 0a01 	add.w	sl, sl, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	9307      	str	r3, [sp, #28]
 800bc28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc2e:	4654      	mov	r4, sl
 800bc30:	2205      	movs	r2, #5
 800bc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc36:	4858      	ldr	r0, [pc, #352]	; (800bd98 <_vfiprintf_r+0x24c>)
 800bc38:	f7f4 faf2 	bl	8000220 <memchr>
 800bc3c:	9a04      	ldr	r2, [sp, #16]
 800bc3e:	b9d8      	cbnz	r0, 800bc78 <_vfiprintf_r+0x12c>
 800bc40:	06d1      	lsls	r1, r2, #27
 800bc42:	bf44      	itt	mi
 800bc44:	2320      	movmi	r3, #32
 800bc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc4a:	0713      	lsls	r3, r2, #28
 800bc4c:	bf44      	itt	mi
 800bc4e:	232b      	movmi	r3, #43	; 0x2b
 800bc50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc54:	f89a 3000 	ldrb.w	r3, [sl]
 800bc58:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5a:	d015      	beq.n	800bc88 <_vfiprintf_r+0x13c>
 800bc5c:	9a07      	ldr	r2, [sp, #28]
 800bc5e:	4654      	mov	r4, sl
 800bc60:	2000      	movs	r0, #0
 800bc62:	f04f 0c0a 	mov.w	ip, #10
 800bc66:	4621      	mov	r1, r4
 800bc68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6c:	3b30      	subs	r3, #48	; 0x30
 800bc6e:	2b09      	cmp	r3, #9
 800bc70:	d94e      	bls.n	800bd10 <_vfiprintf_r+0x1c4>
 800bc72:	b1b0      	cbz	r0, 800bca2 <_vfiprintf_r+0x156>
 800bc74:	9207      	str	r2, [sp, #28]
 800bc76:	e014      	b.n	800bca2 <_vfiprintf_r+0x156>
 800bc78:	eba0 0308 	sub.w	r3, r0, r8
 800bc7c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc80:	4313      	orrs	r3, r2
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	46a2      	mov	sl, r4
 800bc86:	e7d2      	b.n	800bc2e <_vfiprintf_r+0xe2>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	1d19      	adds	r1, r3, #4
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	9103      	str	r1, [sp, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bfbb      	ittet	lt
 800bc94:	425b      	neglt	r3, r3
 800bc96:	f042 0202 	orrlt.w	r2, r2, #2
 800bc9a:	9307      	strge	r3, [sp, #28]
 800bc9c:	9307      	strlt	r3, [sp, #28]
 800bc9e:	bfb8      	it	lt
 800bca0:	9204      	strlt	r2, [sp, #16]
 800bca2:	7823      	ldrb	r3, [r4, #0]
 800bca4:	2b2e      	cmp	r3, #46	; 0x2e
 800bca6:	d10c      	bne.n	800bcc2 <_vfiprintf_r+0x176>
 800bca8:	7863      	ldrb	r3, [r4, #1]
 800bcaa:	2b2a      	cmp	r3, #42	; 0x2a
 800bcac:	d135      	bne.n	800bd1a <_vfiprintf_r+0x1ce>
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	1d1a      	adds	r2, r3, #4
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	9203      	str	r2, [sp, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	bfb8      	it	lt
 800bcba:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcbe:	3402      	adds	r4, #2
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bda8 <_vfiprintf_r+0x25c>
 800bcc6:	7821      	ldrb	r1, [r4, #0]
 800bcc8:	2203      	movs	r2, #3
 800bcca:	4650      	mov	r0, sl
 800bccc:	f7f4 faa8 	bl	8000220 <memchr>
 800bcd0:	b140      	cbz	r0, 800bce4 <_vfiprintf_r+0x198>
 800bcd2:	2340      	movs	r3, #64	; 0x40
 800bcd4:	eba0 000a 	sub.w	r0, r0, sl
 800bcd8:	fa03 f000 	lsl.w	r0, r3, r0
 800bcdc:	9b04      	ldr	r3, [sp, #16]
 800bcde:	4303      	orrs	r3, r0
 800bce0:	3401      	adds	r4, #1
 800bce2:	9304      	str	r3, [sp, #16]
 800bce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce8:	482c      	ldr	r0, [pc, #176]	; (800bd9c <_vfiprintf_r+0x250>)
 800bcea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcee:	2206      	movs	r2, #6
 800bcf0:	f7f4 fa96 	bl	8000220 <memchr>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d03f      	beq.n	800bd78 <_vfiprintf_r+0x22c>
 800bcf8:	4b29      	ldr	r3, [pc, #164]	; (800bda0 <_vfiprintf_r+0x254>)
 800bcfa:	bb1b      	cbnz	r3, 800bd44 <_vfiprintf_r+0x1f8>
 800bcfc:	9b03      	ldr	r3, [sp, #12]
 800bcfe:	3307      	adds	r3, #7
 800bd00:	f023 0307 	bic.w	r3, r3, #7
 800bd04:	3308      	adds	r3, #8
 800bd06:	9303      	str	r3, [sp, #12]
 800bd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0a:	443b      	add	r3, r7
 800bd0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0e:	e767      	b.n	800bbe0 <_vfiprintf_r+0x94>
 800bd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd14:	460c      	mov	r4, r1
 800bd16:	2001      	movs	r0, #1
 800bd18:	e7a5      	b.n	800bc66 <_vfiprintf_r+0x11a>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	3401      	adds	r4, #1
 800bd1e:	9305      	str	r3, [sp, #20]
 800bd20:	4619      	mov	r1, r3
 800bd22:	f04f 0c0a 	mov.w	ip, #10
 800bd26:	4620      	mov	r0, r4
 800bd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2c:	3a30      	subs	r2, #48	; 0x30
 800bd2e:	2a09      	cmp	r2, #9
 800bd30:	d903      	bls.n	800bd3a <_vfiprintf_r+0x1ee>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c5      	beq.n	800bcc2 <_vfiprintf_r+0x176>
 800bd36:	9105      	str	r1, [sp, #20]
 800bd38:	e7c3      	b.n	800bcc2 <_vfiprintf_r+0x176>
 800bd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3e:	4604      	mov	r4, r0
 800bd40:	2301      	movs	r3, #1
 800bd42:	e7f0      	b.n	800bd26 <_vfiprintf_r+0x1da>
 800bd44:	ab03      	add	r3, sp, #12
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4b16      	ldr	r3, [pc, #88]	; (800bda4 <_vfiprintf_r+0x258>)
 800bd4c:	a904      	add	r1, sp, #16
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f7fb fdf4 	bl	800793c <_printf_float>
 800bd54:	4607      	mov	r7, r0
 800bd56:	1c78      	adds	r0, r7, #1
 800bd58:	d1d6      	bne.n	800bd08 <_vfiprintf_r+0x1bc>
 800bd5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd5c:	07d9      	lsls	r1, r3, #31
 800bd5e:	d405      	bmi.n	800bd6c <_vfiprintf_r+0x220>
 800bd60:	89ab      	ldrh	r3, [r5, #12]
 800bd62:	059a      	lsls	r2, r3, #22
 800bd64:	d402      	bmi.n	800bd6c <_vfiprintf_r+0x220>
 800bd66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd68:	f7ff fe71 	bl	800ba4e <__retarget_lock_release_recursive>
 800bd6c:	89ab      	ldrh	r3, [r5, #12]
 800bd6e:	065b      	lsls	r3, r3, #25
 800bd70:	f53f af12 	bmi.w	800bb98 <_vfiprintf_r+0x4c>
 800bd74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd76:	e711      	b.n	800bb9c <_vfiprintf_r+0x50>
 800bd78:	ab03      	add	r3, sp, #12
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4b09      	ldr	r3, [pc, #36]	; (800bda4 <_vfiprintf_r+0x258>)
 800bd80:	a904      	add	r1, sp, #16
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7fc f87e 	bl	8007e84 <_printf_i>
 800bd88:	e7e4      	b.n	800bd54 <_vfiprintf_r+0x208>
 800bd8a:	bf00      	nop
 800bd8c:	0800d3e4 	.word	0x0800d3e4
 800bd90:	0800d404 	.word	0x0800d404
 800bd94:	0800d3c4 	.word	0x0800d3c4
 800bd98:	0800d374 	.word	0x0800d374
 800bd9c:	0800d37e 	.word	0x0800d37e
 800bda0:	0800793d 	.word	0x0800793d
 800bda4:	0800bb29 	.word	0x0800bb29
 800bda8:	0800d37a 	.word	0x0800d37a

0800bdac <__swbuf_r>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	460e      	mov	r6, r1
 800bdb0:	4614      	mov	r4, r2
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	b118      	cbz	r0, 800bdbe <__swbuf_r+0x12>
 800bdb6:	6983      	ldr	r3, [r0, #24]
 800bdb8:	b90b      	cbnz	r3, 800bdbe <__swbuf_r+0x12>
 800bdba:	f7ff fd97 	bl	800b8ec <__sinit>
 800bdbe:	4b21      	ldr	r3, [pc, #132]	; (800be44 <__swbuf_r+0x98>)
 800bdc0:	429c      	cmp	r4, r3
 800bdc2:	d12b      	bne.n	800be1c <__swbuf_r+0x70>
 800bdc4:	686c      	ldr	r4, [r5, #4]
 800bdc6:	69a3      	ldr	r3, [r4, #24]
 800bdc8:	60a3      	str	r3, [r4, #8]
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	071a      	lsls	r2, r3, #28
 800bdce:	d52f      	bpl.n	800be30 <__swbuf_r+0x84>
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	b36b      	cbz	r3, 800be30 <__swbuf_r+0x84>
 800bdd4:	6923      	ldr	r3, [r4, #16]
 800bdd6:	6820      	ldr	r0, [r4, #0]
 800bdd8:	1ac0      	subs	r0, r0, r3
 800bdda:	6963      	ldr	r3, [r4, #20]
 800bddc:	b2f6      	uxtb	r6, r6
 800bdde:	4283      	cmp	r3, r0
 800bde0:	4637      	mov	r7, r6
 800bde2:	dc04      	bgt.n	800bdee <__swbuf_r+0x42>
 800bde4:	4621      	mov	r1, r4
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7ff fcec 	bl	800b7c4 <_fflush_r>
 800bdec:	bb30      	cbnz	r0, 800be3c <__swbuf_r+0x90>
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	60a3      	str	r3, [r4, #8]
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	6022      	str	r2, [r4, #0]
 800bdfa:	701e      	strb	r6, [r3, #0]
 800bdfc:	6963      	ldr	r3, [r4, #20]
 800bdfe:	3001      	adds	r0, #1
 800be00:	4283      	cmp	r3, r0
 800be02:	d004      	beq.n	800be0e <__swbuf_r+0x62>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	07db      	lsls	r3, r3, #31
 800be08:	d506      	bpl.n	800be18 <__swbuf_r+0x6c>
 800be0a:	2e0a      	cmp	r6, #10
 800be0c:	d104      	bne.n	800be18 <__swbuf_r+0x6c>
 800be0e:	4621      	mov	r1, r4
 800be10:	4628      	mov	r0, r5
 800be12:	f7ff fcd7 	bl	800b7c4 <_fflush_r>
 800be16:	b988      	cbnz	r0, 800be3c <__swbuf_r+0x90>
 800be18:	4638      	mov	r0, r7
 800be1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be1c:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <__swbuf_r+0x9c>)
 800be1e:	429c      	cmp	r4, r3
 800be20:	d101      	bne.n	800be26 <__swbuf_r+0x7a>
 800be22:	68ac      	ldr	r4, [r5, #8]
 800be24:	e7cf      	b.n	800bdc6 <__swbuf_r+0x1a>
 800be26:	4b09      	ldr	r3, [pc, #36]	; (800be4c <__swbuf_r+0xa0>)
 800be28:	429c      	cmp	r4, r3
 800be2a:	bf08      	it	eq
 800be2c:	68ec      	ldreq	r4, [r5, #12]
 800be2e:	e7ca      	b.n	800bdc6 <__swbuf_r+0x1a>
 800be30:	4621      	mov	r1, r4
 800be32:	4628      	mov	r0, r5
 800be34:	f000 f80c 	bl	800be50 <__swsetup_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d0cb      	beq.n	800bdd4 <__swbuf_r+0x28>
 800be3c:	f04f 37ff 	mov.w	r7, #4294967295
 800be40:	e7ea      	b.n	800be18 <__swbuf_r+0x6c>
 800be42:	bf00      	nop
 800be44:	0800d3e4 	.word	0x0800d3e4
 800be48:	0800d404 	.word	0x0800d404
 800be4c:	0800d3c4 	.word	0x0800d3c4

0800be50 <__swsetup_r>:
 800be50:	4b32      	ldr	r3, [pc, #200]	; (800bf1c <__swsetup_r+0xcc>)
 800be52:	b570      	push	{r4, r5, r6, lr}
 800be54:	681d      	ldr	r5, [r3, #0]
 800be56:	4606      	mov	r6, r0
 800be58:	460c      	mov	r4, r1
 800be5a:	b125      	cbz	r5, 800be66 <__swsetup_r+0x16>
 800be5c:	69ab      	ldr	r3, [r5, #24]
 800be5e:	b913      	cbnz	r3, 800be66 <__swsetup_r+0x16>
 800be60:	4628      	mov	r0, r5
 800be62:	f7ff fd43 	bl	800b8ec <__sinit>
 800be66:	4b2e      	ldr	r3, [pc, #184]	; (800bf20 <__swsetup_r+0xd0>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	d10f      	bne.n	800be8c <__swsetup_r+0x3c>
 800be6c:	686c      	ldr	r4, [r5, #4]
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be74:	0719      	lsls	r1, r3, #28
 800be76:	d42c      	bmi.n	800bed2 <__swsetup_r+0x82>
 800be78:	06dd      	lsls	r5, r3, #27
 800be7a:	d411      	bmi.n	800bea0 <__swsetup_r+0x50>
 800be7c:	2309      	movs	r3, #9
 800be7e:	6033      	str	r3, [r6, #0]
 800be80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	f04f 30ff 	mov.w	r0, #4294967295
 800be8a:	e03e      	b.n	800bf0a <__swsetup_r+0xba>
 800be8c:	4b25      	ldr	r3, [pc, #148]	; (800bf24 <__swsetup_r+0xd4>)
 800be8e:	429c      	cmp	r4, r3
 800be90:	d101      	bne.n	800be96 <__swsetup_r+0x46>
 800be92:	68ac      	ldr	r4, [r5, #8]
 800be94:	e7eb      	b.n	800be6e <__swsetup_r+0x1e>
 800be96:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <__swsetup_r+0xd8>)
 800be98:	429c      	cmp	r4, r3
 800be9a:	bf08      	it	eq
 800be9c:	68ec      	ldreq	r4, [r5, #12]
 800be9e:	e7e6      	b.n	800be6e <__swsetup_r+0x1e>
 800bea0:	0758      	lsls	r0, r3, #29
 800bea2:	d512      	bpl.n	800beca <__swsetup_r+0x7a>
 800bea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bea6:	b141      	cbz	r1, 800beba <__swsetup_r+0x6a>
 800bea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beac:	4299      	cmp	r1, r3
 800beae:	d002      	beq.n	800beb6 <__swsetup_r+0x66>
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff f959 	bl	800b168 <_free_r>
 800beb6:	2300      	movs	r3, #0
 800beb8:	6363      	str	r3, [r4, #52]	; 0x34
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	2300      	movs	r3, #0
 800bec4:	6063      	str	r3, [r4, #4]
 800bec6:	6923      	ldr	r3, [r4, #16]
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	f043 0308 	orr.w	r3, r3, #8
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	b94b      	cbnz	r3, 800beea <__swsetup_r+0x9a>
 800bed6:	89a3      	ldrh	r3, [r4, #12]
 800bed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bee0:	d003      	beq.n	800beea <__swsetup_r+0x9a>
 800bee2:	4621      	mov	r1, r4
 800bee4:	4630      	mov	r0, r6
 800bee6:	f000 f84d 	bl	800bf84 <__smakebuf_r>
 800beea:	89a0      	ldrh	r0, [r4, #12]
 800beec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bef0:	f010 0301 	ands.w	r3, r0, #1
 800bef4:	d00a      	beq.n	800bf0c <__swsetup_r+0xbc>
 800bef6:	2300      	movs	r3, #0
 800bef8:	60a3      	str	r3, [r4, #8]
 800befa:	6963      	ldr	r3, [r4, #20]
 800befc:	425b      	negs	r3, r3
 800befe:	61a3      	str	r3, [r4, #24]
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	b943      	cbnz	r3, 800bf16 <__swsetup_r+0xc6>
 800bf04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf08:	d1ba      	bne.n	800be80 <__swsetup_r+0x30>
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}
 800bf0c:	0781      	lsls	r1, r0, #30
 800bf0e:	bf58      	it	pl
 800bf10:	6963      	ldrpl	r3, [r4, #20]
 800bf12:	60a3      	str	r3, [r4, #8]
 800bf14:	e7f4      	b.n	800bf00 <__swsetup_r+0xb0>
 800bf16:	2000      	movs	r0, #0
 800bf18:	e7f7      	b.n	800bf0a <__swsetup_r+0xba>
 800bf1a:	bf00      	nop
 800bf1c:	2000000c 	.word	0x2000000c
 800bf20:	0800d3e4 	.word	0x0800d3e4
 800bf24:	0800d404 	.word	0x0800d404
 800bf28:	0800d3c4 	.word	0x0800d3c4

0800bf2c <abort>:
 800bf2c:	b508      	push	{r3, lr}
 800bf2e:	2006      	movs	r0, #6
 800bf30:	f000 f898 	bl	800c064 <raise>
 800bf34:	2001      	movs	r0, #1
 800bf36:	f7f7 f985 	bl	8003244 <_exit>

0800bf3a <__swhatbuf_r>:
 800bf3a:	b570      	push	{r4, r5, r6, lr}
 800bf3c:	460e      	mov	r6, r1
 800bf3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf42:	2900      	cmp	r1, #0
 800bf44:	b096      	sub	sp, #88	; 0x58
 800bf46:	4614      	mov	r4, r2
 800bf48:	461d      	mov	r5, r3
 800bf4a:	da08      	bge.n	800bf5e <__swhatbuf_r+0x24>
 800bf4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	602a      	str	r2, [r5, #0]
 800bf54:	061a      	lsls	r2, r3, #24
 800bf56:	d410      	bmi.n	800bf7a <__swhatbuf_r+0x40>
 800bf58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf5c:	e00e      	b.n	800bf7c <__swhatbuf_r+0x42>
 800bf5e:	466a      	mov	r2, sp
 800bf60:	f000 f89c 	bl	800c09c <_fstat_r>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	dbf1      	blt.n	800bf4c <__swhatbuf_r+0x12>
 800bf68:	9a01      	ldr	r2, [sp, #4]
 800bf6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf72:	425a      	negs	r2, r3
 800bf74:	415a      	adcs	r2, r3
 800bf76:	602a      	str	r2, [r5, #0]
 800bf78:	e7ee      	b.n	800bf58 <__swhatbuf_r+0x1e>
 800bf7a:	2340      	movs	r3, #64	; 0x40
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	b016      	add	sp, #88	; 0x58
 800bf82:	bd70      	pop	{r4, r5, r6, pc}

0800bf84 <__smakebuf_r>:
 800bf84:	898b      	ldrh	r3, [r1, #12]
 800bf86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf88:	079d      	lsls	r5, r3, #30
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	d507      	bpl.n	800bfa0 <__smakebuf_r+0x1c>
 800bf90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	2301      	movs	r3, #1
 800bf9a:	6163      	str	r3, [r4, #20]
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	ab01      	add	r3, sp, #4
 800bfa2:	466a      	mov	r2, sp
 800bfa4:	f7ff ffc9 	bl	800bf3a <__swhatbuf_r>
 800bfa8:	9900      	ldr	r1, [sp, #0]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff f947 	bl	800b240 <_malloc_r>
 800bfb2:	b948      	cbnz	r0, 800bfc8 <__smakebuf_r+0x44>
 800bfb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb8:	059a      	lsls	r2, r3, #22
 800bfba:	d4ef      	bmi.n	800bf9c <__smakebuf_r+0x18>
 800bfbc:	f023 0303 	bic.w	r3, r3, #3
 800bfc0:	f043 0302 	orr.w	r3, r3, #2
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	e7e3      	b.n	800bf90 <__smakebuf_r+0xc>
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <__smakebuf_r+0x7c>)
 800bfca:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	6020      	str	r0, [r4, #0]
 800bfd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	9b00      	ldr	r3, [sp, #0]
 800bfd8:	6163      	str	r3, [r4, #20]
 800bfda:	9b01      	ldr	r3, [sp, #4]
 800bfdc:	6120      	str	r0, [r4, #16]
 800bfde:	b15b      	cbz	r3, 800bff8 <__smakebuf_r+0x74>
 800bfe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f000 f86b 	bl	800c0c0 <_isatty_r>
 800bfea:	b128      	cbz	r0, 800bff8 <__smakebuf_r+0x74>
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f023 0303 	bic.w	r3, r3, #3
 800bff2:	f043 0301 	orr.w	r3, r3, #1
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	89a0      	ldrh	r0, [r4, #12]
 800bffa:	4305      	orrs	r5, r0
 800bffc:	81a5      	strh	r5, [r4, #12]
 800bffe:	e7cd      	b.n	800bf9c <__smakebuf_r+0x18>
 800c000:	0800b885 	.word	0x0800b885

0800c004 <_malloc_usable_size_r>:
 800c004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c008:	1f18      	subs	r0, r3, #4
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfbc      	itt	lt
 800c00e:	580b      	ldrlt	r3, [r1, r0]
 800c010:	18c0      	addlt	r0, r0, r3
 800c012:	4770      	bx	lr

0800c014 <_raise_r>:
 800c014:	291f      	cmp	r1, #31
 800c016:	b538      	push	{r3, r4, r5, lr}
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	d904      	bls.n	800c028 <_raise_r+0x14>
 800c01e:	2316      	movs	r3, #22
 800c020:	6003      	str	r3, [r0, #0]
 800c022:	f04f 30ff 	mov.w	r0, #4294967295
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c02a:	b112      	cbz	r2, 800c032 <_raise_r+0x1e>
 800c02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c030:	b94b      	cbnz	r3, 800c046 <_raise_r+0x32>
 800c032:	4620      	mov	r0, r4
 800c034:	f000 f830 	bl	800c098 <_getpid_r>
 800c038:	462a      	mov	r2, r5
 800c03a:	4601      	mov	r1, r0
 800c03c:	4620      	mov	r0, r4
 800c03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c042:	f000 b817 	b.w	800c074 <_kill_r>
 800c046:	2b01      	cmp	r3, #1
 800c048:	d00a      	beq.n	800c060 <_raise_r+0x4c>
 800c04a:	1c59      	adds	r1, r3, #1
 800c04c:	d103      	bne.n	800c056 <_raise_r+0x42>
 800c04e:	2316      	movs	r3, #22
 800c050:	6003      	str	r3, [r0, #0]
 800c052:	2001      	movs	r0, #1
 800c054:	e7e7      	b.n	800c026 <_raise_r+0x12>
 800c056:	2400      	movs	r4, #0
 800c058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c05c:	4628      	mov	r0, r5
 800c05e:	4798      	blx	r3
 800c060:	2000      	movs	r0, #0
 800c062:	e7e0      	b.n	800c026 <_raise_r+0x12>

0800c064 <raise>:
 800c064:	4b02      	ldr	r3, [pc, #8]	; (800c070 <raise+0xc>)
 800c066:	4601      	mov	r1, r0
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f7ff bfd3 	b.w	800c014 <_raise_r>
 800c06e:	bf00      	nop
 800c070:	2000000c 	.word	0x2000000c

0800c074 <_kill_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_kill_r+0x20>)
 800c078:	2300      	movs	r3, #0
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	f7f7 f8cf 	bl	8003224 <_kill>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	d102      	bne.n	800c090 <_kill_r+0x1c>
 800c08a:	682b      	ldr	r3, [r5, #0]
 800c08c:	b103      	cbz	r3, 800c090 <_kill_r+0x1c>
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	bf00      	nop
 800c094:	200006f0 	.word	0x200006f0

0800c098 <_getpid_r>:
 800c098:	f7f7 b8bc 	b.w	8003214 <_getpid>

0800c09c <_fstat_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_fstat_r+0x20>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	f7f7 f91a 	bl	80032e2 <_fstat>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	d102      	bne.n	800c0b8 <_fstat_r+0x1c>
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	b103      	cbz	r3, 800c0b8 <_fstat_r+0x1c>
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	200006f0 	.word	0x200006f0

0800c0c0 <_isatty_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	; (800c0dc <_isatty_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f7 f919 	bl	8003302 <_isatty>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_isatty_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_isatty_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	200006f0 	.word	0x200006f0

0800c0e0 <fabs>:
 800c0e0:	ec51 0b10 	vmov	r0, r1, d0
 800c0e4:	ee10 2a10 	vmov	r2, s0
 800c0e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0ec:	ec43 2b10 	vmov	d0, r2, r3
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <pow>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	ed2d 8b02 	vpush	{d8}
 800c0fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c0fe:	eef0 8a60 	vmov.f32	s17, s1
 800c102:	ec55 4b11 	vmov	r4, r5, d1
 800c106:	f000 f867 	bl	800c1d8 <__ieee754_pow>
 800c10a:	4622      	mov	r2, r4
 800c10c:	462b      	mov	r3, r5
 800c10e:	4620      	mov	r0, r4
 800c110:	4629      	mov	r1, r5
 800c112:	ec57 6b10 	vmov	r6, r7, d0
 800c116:	f7f4 fd29 	bl	8000b6c <__aeabi_dcmpun>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d13b      	bne.n	800c196 <pow+0xa2>
 800c11e:	ec51 0b18 	vmov	r0, r1, d8
 800c122:	2200      	movs	r2, #0
 800c124:	2300      	movs	r3, #0
 800c126:	f7f4 fcef 	bl	8000b08 <__aeabi_dcmpeq>
 800c12a:	b1b8      	cbz	r0, 800c15c <pow+0x68>
 800c12c:	2200      	movs	r2, #0
 800c12e:	2300      	movs	r3, #0
 800c130:	4620      	mov	r0, r4
 800c132:	4629      	mov	r1, r5
 800c134:	f7f4 fce8 	bl	8000b08 <__aeabi_dcmpeq>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d146      	bne.n	800c1ca <pow+0xd6>
 800c13c:	ec45 4b10 	vmov	d0, r4, r5
 800c140:	f000 fe5a 	bl	800cdf8 <finite>
 800c144:	b338      	cbz	r0, 800c196 <pow+0xa2>
 800c146:	2200      	movs	r2, #0
 800c148:	2300      	movs	r3, #0
 800c14a:	4620      	mov	r0, r4
 800c14c:	4629      	mov	r1, r5
 800c14e:	f7f4 fce5 	bl	8000b1c <__aeabi_dcmplt>
 800c152:	b300      	cbz	r0, 800c196 <pow+0xa2>
 800c154:	f7fb fb20 	bl	8007798 <__errno>
 800c158:	2322      	movs	r3, #34	; 0x22
 800c15a:	e01b      	b.n	800c194 <pow+0xa0>
 800c15c:	ec47 6b10 	vmov	d0, r6, r7
 800c160:	f000 fe4a 	bl	800cdf8 <finite>
 800c164:	b9e0      	cbnz	r0, 800c1a0 <pow+0xac>
 800c166:	eeb0 0a48 	vmov.f32	s0, s16
 800c16a:	eef0 0a68 	vmov.f32	s1, s17
 800c16e:	f000 fe43 	bl	800cdf8 <finite>
 800c172:	b1a8      	cbz	r0, 800c1a0 <pow+0xac>
 800c174:	ec45 4b10 	vmov	d0, r4, r5
 800c178:	f000 fe3e 	bl	800cdf8 <finite>
 800c17c:	b180      	cbz	r0, 800c1a0 <pow+0xac>
 800c17e:	4632      	mov	r2, r6
 800c180:	463b      	mov	r3, r7
 800c182:	4630      	mov	r0, r6
 800c184:	4639      	mov	r1, r7
 800c186:	f7f4 fcf1 	bl	8000b6c <__aeabi_dcmpun>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0e2      	beq.n	800c154 <pow+0x60>
 800c18e:	f7fb fb03 	bl	8007798 <__errno>
 800c192:	2321      	movs	r3, #33	; 0x21
 800c194:	6003      	str	r3, [r0, #0]
 800c196:	ecbd 8b02 	vpop	{d8}
 800c19a:	ec47 6b10 	vmov	d0, r6, r7
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fcae 	bl	8000b08 <__aeabi_dcmpeq>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d0f2      	beq.n	800c196 <pow+0xa2>
 800c1b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c1b4:	eef0 0a68 	vmov.f32	s1, s17
 800c1b8:	f000 fe1e 	bl	800cdf8 <finite>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d0ea      	beq.n	800c196 <pow+0xa2>
 800c1c0:	ec45 4b10 	vmov	d0, r4, r5
 800c1c4:	f000 fe18 	bl	800cdf8 <finite>
 800c1c8:	e7c3      	b.n	800c152 <pow+0x5e>
 800c1ca:	4f01      	ldr	r7, [pc, #4]	; (800c1d0 <pow+0xdc>)
 800c1cc:	2600      	movs	r6, #0
 800c1ce:	e7e2      	b.n	800c196 <pow+0xa2>
 800c1d0:	3ff00000 	.word	0x3ff00000
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <__ieee754_pow>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	ed2d 8b06 	vpush	{d8-d10}
 800c1e0:	b089      	sub	sp, #36	; 0x24
 800c1e2:	ed8d 1b00 	vstr	d1, [sp]
 800c1e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c1ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c1ee:	ea58 0102 	orrs.w	r1, r8, r2
 800c1f2:	ec57 6b10 	vmov	r6, r7, d0
 800c1f6:	d115      	bne.n	800c224 <__ieee754_pow+0x4c>
 800c1f8:	19b3      	adds	r3, r6, r6
 800c1fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c1fe:	4152      	adcs	r2, r2
 800c200:	4299      	cmp	r1, r3
 800c202:	4b89      	ldr	r3, [pc, #548]	; (800c428 <__ieee754_pow+0x250>)
 800c204:	4193      	sbcs	r3, r2
 800c206:	f080 84d2 	bcs.w	800cbae <__ieee754_pow+0x9d6>
 800c20a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c20e:	4630      	mov	r0, r6
 800c210:	4639      	mov	r1, r7
 800c212:	f7f4 f85b 	bl	80002cc <__adddf3>
 800c216:	ec41 0b10 	vmov	d0, r0, r1
 800c21a:	b009      	add	sp, #36	; 0x24
 800c21c:	ecbd 8b06 	vpop	{d8-d10}
 800c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c224:	4b81      	ldr	r3, [pc, #516]	; (800c42c <__ieee754_pow+0x254>)
 800c226:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c22a:	429c      	cmp	r4, r3
 800c22c:	ee10 aa10 	vmov	sl, s0
 800c230:	463d      	mov	r5, r7
 800c232:	dc06      	bgt.n	800c242 <__ieee754_pow+0x6a>
 800c234:	d101      	bne.n	800c23a <__ieee754_pow+0x62>
 800c236:	2e00      	cmp	r6, #0
 800c238:	d1e7      	bne.n	800c20a <__ieee754_pow+0x32>
 800c23a:	4598      	cmp	r8, r3
 800c23c:	dc01      	bgt.n	800c242 <__ieee754_pow+0x6a>
 800c23e:	d10f      	bne.n	800c260 <__ieee754_pow+0x88>
 800c240:	b172      	cbz	r2, 800c260 <__ieee754_pow+0x88>
 800c242:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c246:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c24a:	ea55 050a 	orrs.w	r5, r5, sl
 800c24e:	d1dc      	bne.n	800c20a <__ieee754_pow+0x32>
 800c250:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c254:	18db      	adds	r3, r3, r3
 800c256:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c25a:	4152      	adcs	r2, r2
 800c25c:	429d      	cmp	r5, r3
 800c25e:	e7d0      	b.n	800c202 <__ieee754_pow+0x2a>
 800c260:	2d00      	cmp	r5, #0
 800c262:	da3b      	bge.n	800c2dc <__ieee754_pow+0x104>
 800c264:	4b72      	ldr	r3, [pc, #456]	; (800c430 <__ieee754_pow+0x258>)
 800c266:	4598      	cmp	r8, r3
 800c268:	dc51      	bgt.n	800c30e <__ieee754_pow+0x136>
 800c26a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c26e:	4598      	cmp	r8, r3
 800c270:	f340 84ac 	ble.w	800cbcc <__ieee754_pow+0x9f4>
 800c274:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c278:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c27c:	2b14      	cmp	r3, #20
 800c27e:	dd0f      	ble.n	800c2a0 <__ieee754_pow+0xc8>
 800c280:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c284:	fa22 f103 	lsr.w	r1, r2, r3
 800c288:	fa01 f303 	lsl.w	r3, r1, r3
 800c28c:	4293      	cmp	r3, r2
 800c28e:	f040 849d 	bne.w	800cbcc <__ieee754_pow+0x9f4>
 800c292:	f001 0101 	and.w	r1, r1, #1
 800c296:	f1c1 0302 	rsb	r3, r1, #2
 800c29a:	9304      	str	r3, [sp, #16]
 800c29c:	b182      	cbz	r2, 800c2c0 <__ieee754_pow+0xe8>
 800c29e:	e05f      	b.n	800c360 <__ieee754_pow+0x188>
 800c2a0:	2a00      	cmp	r2, #0
 800c2a2:	d15b      	bne.n	800c35c <__ieee754_pow+0x184>
 800c2a4:	f1c3 0314 	rsb	r3, r3, #20
 800c2a8:	fa48 f103 	asr.w	r1, r8, r3
 800c2ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c2b0:	4543      	cmp	r3, r8
 800c2b2:	f040 8488 	bne.w	800cbc6 <__ieee754_pow+0x9ee>
 800c2b6:	f001 0101 	and.w	r1, r1, #1
 800c2ba:	f1c1 0302 	rsb	r3, r1, #2
 800c2be:	9304      	str	r3, [sp, #16]
 800c2c0:	4b5c      	ldr	r3, [pc, #368]	; (800c434 <__ieee754_pow+0x25c>)
 800c2c2:	4598      	cmp	r8, r3
 800c2c4:	d132      	bne.n	800c32c <__ieee754_pow+0x154>
 800c2c6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ca:	f280 8478 	bge.w	800cbbe <__ieee754_pow+0x9e6>
 800c2ce:	4959      	ldr	r1, [pc, #356]	; (800c434 <__ieee754_pow+0x25c>)
 800c2d0:	4632      	mov	r2, r6
 800c2d2:	463b      	mov	r3, r7
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	f7f4 fad9 	bl	800088c <__aeabi_ddiv>
 800c2da:	e79c      	b.n	800c216 <__ieee754_pow+0x3e>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9304      	str	r3, [sp, #16]
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	d13d      	bne.n	800c360 <__ieee754_pow+0x188>
 800c2e4:	4b51      	ldr	r3, [pc, #324]	; (800c42c <__ieee754_pow+0x254>)
 800c2e6:	4598      	cmp	r8, r3
 800c2e8:	d1ea      	bne.n	800c2c0 <__ieee754_pow+0xe8>
 800c2ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c2ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c2f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c2f6:	f000 845a 	beq.w	800cbae <__ieee754_pow+0x9d6>
 800c2fa:	4b4f      	ldr	r3, [pc, #316]	; (800c438 <__ieee754_pow+0x260>)
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	dd08      	ble.n	800c312 <__ieee754_pow+0x13a>
 800c300:	f1b9 0f00 	cmp.w	r9, #0
 800c304:	f2c0 8457 	blt.w	800cbb6 <__ieee754_pow+0x9de>
 800c308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c30c:	e783      	b.n	800c216 <__ieee754_pow+0x3e>
 800c30e:	2302      	movs	r3, #2
 800c310:	e7e5      	b.n	800c2de <__ieee754_pow+0x106>
 800c312:	f1b9 0f00 	cmp.w	r9, #0
 800c316:	f04f 0000 	mov.w	r0, #0
 800c31a:	f04f 0100 	mov.w	r1, #0
 800c31e:	f6bf af7a 	bge.w	800c216 <__ieee754_pow+0x3e>
 800c322:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c326:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c32a:	e774      	b.n	800c216 <__ieee754_pow+0x3e>
 800c32c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c330:	d106      	bne.n	800c340 <__ieee754_pow+0x168>
 800c332:	4632      	mov	r2, r6
 800c334:	463b      	mov	r3, r7
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f4 f97d 	bl	8000638 <__aeabi_dmul>
 800c33e:	e76a      	b.n	800c216 <__ieee754_pow+0x3e>
 800c340:	4b3e      	ldr	r3, [pc, #248]	; (800c43c <__ieee754_pow+0x264>)
 800c342:	4599      	cmp	r9, r3
 800c344:	d10c      	bne.n	800c360 <__ieee754_pow+0x188>
 800c346:	2d00      	cmp	r5, #0
 800c348:	db0a      	blt.n	800c360 <__ieee754_pow+0x188>
 800c34a:	ec47 6b10 	vmov	d0, r6, r7
 800c34e:	b009      	add	sp, #36	; 0x24
 800c350:	ecbd 8b06 	vpop	{d8-d10}
 800c354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	f000 bc6c 	b.w	800cc34 <__ieee754_sqrt>
 800c35c:	2300      	movs	r3, #0
 800c35e:	9304      	str	r3, [sp, #16]
 800c360:	ec47 6b10 	vmov	d0, r6, r7
 800c364:	f7ff febc 	bl	800c0e0 <fabs>
 800c368:	ec51 0b10 	vmov	r0, r1, d0
 800c36c:	f1ba 0f00 	cmp.w	sl, #0
 800c370:	d129      	bne.n	800c3c6 <__ieee754_pow+0x1ee>
 800c372:	b124      	cbz	r4, 800c37e <__ieee754_pow+0x1a6>
 800c374:	4b2f      	ldr	r3, [pc, #188]	; (800c434 <__ieee754_pow+0x25c>)
 800c376:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d123      	bne.n	800c3c6 <__ieee754_pow+0x1ee>
 800c37e:	f1b9 0f00 	cmp.w	r9, #0
 800c382:	da05      	bge.n	800c390 <__ieee754_pow+0x1b8>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	2000      	movs	r0, #0
 800c38a:	492a      	ldr	r1, [pc, #168]	; (800c434 <__ieee754_pow+0x25c>)
 800c38c:	f7f4 fa7e 	bl	800088c <__aeabi_ddiv>
 800c390:	2d00      	cmp	r5, #0
 800c392:	f6bf af40 	bge.w	800c216 <__ieee754_pow+0x3e>
 800c396:	9b04      	ldr	r3, [sp, #16]
 800c398:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c39c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3a0:	4323      	orrs	r3, r4
 800c3a2:	d108      	bne.n	800c3b6 <__ieee754_pow+0x1de>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	f7f3 ff8c 	bl	80002c8 <__aeabi_dsub>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	e78f      	b.n	800c2d6 <__ieee754_pow+0xfe>
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	f47f af2c 	bne.w	800c216 <__ieee754_pow+0x3e>
 800c3be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	e727      	b.n	800c216 <__ieee754_pow+0x3e>
 800c3c6:	0feb      	lsrs	r3, r5, #31
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	9306      	str	r3, [sp, #24]
 800c3cc:	9a06      	ldr	r2, [sp, #24]
 800c3ce:	9b04      	ldr	r3, [sp, #16]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	d102      	bne.n	800c3da <__ieee754_pow+0x202>
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	e7e6      	b.n	800c3a8 <__ieee754_pow+0x1d0>
 800c3da:	4b19      	ldr	r3, [pc, #100]	; (800c440 <__ieee754_pow+0x268>)
 800c3dc:	4598      	cmp	r8, r3
 800c3de:	f340 80fb 	ble.w	800c5d8 <__ieee754_pow+0x400>
 800c3e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c3e6:	4598      	cmp	r8, r3
 800c3e8:	4b13      	ldr	r3, [pc, #76]	; (800c438 <__ieee754_pow+0x260>)
 800c3ea:	dd0c      	ble.n	800c406 <__ieee754_pow+0x22e>
 800c3ec:	429c      	cmp	r4, r3
 800c3ee:	dc0f      	bgt.n	800c410 <__ieee754_pow+0x238>
 800c3f0:	f1b9 0f00 	cmp.w	r9, #0
 800c3f4:	da0f      	bge.n	800c416 <__ieee754_pow+0x23e>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	b009      	add	sp, #36	; 0x24
 800c3fa:	ecbd 8b06 	vpop	{d8-d10}
 800c3fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c402:	f000 bcf0 	b.w	800cde6 <__math_oflow>
 800c406:	429c      	cmp	r4, r3
 800c408:	dbf2      	blt.n	800c3f0 <__ieee754_pow+0x218>
 800c40a:	4b0a      	ldr	r3, [pc, #40]	; (800c434 <__ieee754_pow+0x25c>)
 800c40c:	429c      	cmp	r4, r3
 800c40e:	dd19      	ble.n	800c444 <__ieee754_pow+0x26c>
 800c410:	f1b9 0f00 	cmp.w	r9, #0
 800c414:	dcef      	bgt.n	800c3f6 <__ieee754_pow+0x21e>
 800c416:	2000      	movs	r0, #0
 800c418:	b009      	add	sp, #36	; 0x24
 800c41a:	ecbd 8b06 	vpop	{d8-d10}
 800c41e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c422:	f000 bcd7 	b.w	800cdd4 <__math_uflow>
 800c426:	bf00      	nop
 800c428:	fff00000 	.word	0xfff00000
 800c42c:	7ff00000 	.word	0x7ff00000
 800c430:	433fffff 	.word	0x433fffff
 800c434:	3ff00000 	.word	0x3ff00000
 800c438:	3fefffff 	.word	0x3fefffff
 800c43c:	3fe00000 	.word	0x3fe00000
 800c440:	41e00000 	.word	0x41e00000
 800c444:	4b60      	ldr	r3, [pc, #384]	; (800c5c8 <__ieee754_pow+0x3f0>)
 800c446:	2200      	movs	r2, #0
 800c448:	f7f3 ff3e 	bl	80002c8 <__aeabi_dsub>
 800c44c:	a354      	add	r3, pc, #336	; (adr r3, 800c5a0 <__ieee754_pow+0x3c8>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	4604      	mov	r4, r0
 800c454:	460d      	mov	r5, r1
 800c456:	f7f4 f8ef 	bl	8000638 <__aeabi_dmul>
 800c45a:	a353      	add	r3, pc, #332	; (adr r3, 800c5a8 <__ieee754_pow+0x3d0>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f7f4 f8e6 	bl	8000638 <__aeabi_dmul>
 800c46c:	4b57      	ldr	r3, [pc, #348]	; (800c5cc <__ieee754_pow+0x3f4>)
 800c46e:	4682      	mov	sl, r0
 800c470:	468b      	mov	fp, r1
 800c472:	2200      	movs	r2, #0
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f4 f8de 	bl	8000638 <__aeabi_dmul>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	a14b      	add	r1, pc, #300	; (adr r1, 800c5b0 <__ieee754_pow+0x3d8>)
 800c482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c486:	f7f3 ff1f 	bl	80002c8 <__aeabi_dsub>
 800c48a:	4622      	mov	r2, r4
 800c48c:	462b      	mov	r3, r5
 800c48e:	f7f4 f8d3 	bl	8000638 <__aeabi_dmul>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	2000      	movs	r0, #0
 800c498:	494d      	ldr	r1, [pc, #308]	; (800c5d0 <__ieee754_pow+0x3f8>)
 800c49a:	f7f3 ff15 	bl	80002c8 <__aeabi_dsub>
 800c49e:	4622      	mov	r2, r4
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4689      	mov	r9, r1
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7f4 f8c5 	bl	8000638 <__aeabi_dmul>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	4649      	mov	r1, r9
 800c4b6:	f7f4 f8bf 	bl	8000638 <__aeabi_dmul>
 800c4ba:	a33f      	add	r3, pc, #252	; (adr r3, 800c5b8 <__ieee754_pow+0x3e0>)
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f7f4 f8ba 	bl	8000638 <__aeabi_dmul>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4650      	mov	r0, sl
 800c4ca:	4659      	mov	r1, fp
 800c4cc:	f7f3 fefc 	bl	80002c8 <__aeabi_dsub>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	4689      	mov	r9, r1
 800c4d8:	4630      	mov	r0, r6
 800c4da:	4639      	mov	r1, r7
 800c4dc:	f7f3 fef6 	bl	80002cc <__adddf3>
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	4632      	mov	r2, r6
 800c4e4:	463b      	mov	r3, r7
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	f7f3 feed 	bl	80002c8 <__aeabi_dsub>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f3 fee7 	bl	80002c8 <__aeabi_dsub>
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	9a06      	ldr	r2, [sp, #24]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4313      	orrs	r3, r2
 800c502:	4682      	mov	sl, r0
 800c504:	468b      	mov	fp, r1
 800c506:	f040 81e7 	bne.w	800c8d8 <__ieee754_pow+0x700>
 800c50a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c5c0 <__ieee754_pow+0x3e8>
 800c50e:	eeb0 8a47 	vmov.f32	s16, s14
 800c512:	eef0 8a67 	vmov.f32	s17, s15
 800c516:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c51a:	2600      	movs	r6, #0
 800c51c:	4632      	mov	r2, r6
 800c51e:	463b      	mov	r3, r7
 800c520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c524:	f7f3 fed0 	bl	80002c8 <__aeabi_dsub>
 800c528:	4622      	mov	r2, r4
 800c52a:	462b      	mov	r3, r5
 800c52c:	f7f4 f884 	bl	8000638 <__aeabi_dmul>
 800c530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c534:	4680      	mov	r8, r0
 800c536:	4689      	mov	r9, r1
 800c538:	4650      	mov	r0, sl
 800c53a:	4659      	mov	r1, fp
 800c53c:	f7f4 f87c 	bl	8000638 <__aeabi_dmul>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4640      	mov	r0, r8
 800c546:	4649      	mov	r1, r9
 800c548:	f7f3 fec0 	bl	80002cc <__adddf3>
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	4680      	mov	r8, r0
 800c552:	4689      	mov	r9, r1
 800c554:	4620      	mov	r0, r4
 800c556:	4629      	mov	r1, r5
 800c558:	f7f4 f86e 	bl	8000638 <__aeabi_dmul>
 800c55c:	460b      	mov	r3, r1
 800c55e:	4604      	mov	r4, r0
 800c560:	460d      	mov	r5, r1
 800c562:	4602      	mov	r2, r0
 800c564:	4649      	mov	r1, r9
 800c566:	4640      	mov	r0, r8
 800c568:	f7f3 feb0 	bl	80002cc <__adddf3>
 800c56c:	4b19      	ldr	r3, [pc, #100]	; (800c5d4 <__ieee754_pow+0x3fc>)
 800c56e:	4299      	cmp	r1, r3
 800c570:	ec45 4b19 	vmov	d9, r4, r5
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	468b      	mov	fp, r1
 800c57a:	f340 82f1 	ble.w	800cb60 <__ieee754_pow+0x988>
 800c57e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c582:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c586:	4303      	orrs	r3, r0
 800c588:	f000 81e4 	beq.w	800c954 <__ieee754_pow+0x77c>
 800c58c:	ec51 0b18 	vmov	r0, r1, d8
 800c590:	2200      	movs	r2, #0
 800c592:	2300      	movs	r3, #0
 800c594:	f7f4 fac2 	bl	8000b1c <__aeabi_dcmplt>
 800c598:	3800      	subs	r0, #0
 800c59a:	bf18      	it	ne
 800c59c:	2001      	movne	r0, #1
 800c59e:	e72b      	b.n	800c3f8 <__ieee754_pow+0x220>
 800c5a0:	60000000 	.word	0x60000000
 800c5a4:	3ff71547 	.word	0x3ff71547
 800c5a8:	f85ddf44 	.word	0xf85ddf44
 800c5ac:	3e54ae0b 	.word	0x3e54ae0b
 800c5b0:	55555555 	.word	0x55555555
 800c5b4:	3fd55555 	.word	0x3fd55555
 800c5b8:	652b82fe 	.word	0x652b82fe
 800c5bc:	3ff71547 	.word	0x3ff71547
 800c5c0:	00000000 	.word	0x00000000
 800c5c4:	bff00000 	.word	0xbff00000
 800c5c8:	3ff00000 	.word	0x3ff00000
 800c5cc:	3fd00000 	.word	0x3fd00000
 800c5d0:	3fe00000 	.word	0x3fe00000
 800c5d4:	408fffff 	.word	0x408fffff
 800c5d8:	4bd5      	ldr	r3, [pc, #852]	; (800c930 <__ieee754_pow+0x758>)
 800c5da:	402b      	ands	r3, r5
 800c5dc:	2200      	movs	r2, #0
 800c5de:	b92b      	cbnz	r3, 800c5ec <__ieee754_pow+0x414>
 800c5e0:	4bd4      	ldr	r3, [pc, #848]	; (800c934 <__ieee754_pow+0x75c>)
 800c5e2:	f7f4 f829 	bl	8000638 <__aeabi_dmul>
 800c5e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	1523      	asrs	r3, r4, #20
 800c5ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c5f2:	4413      	add	r3, r2
 800c5f4:	9305      	str	r3, [sp, #20]
 800c5f6:	4bd0      	ldr	r3, [pc, #832]	; (800c938 <__ieee754_pow+0x760>)
 800c5f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c5fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c600:	429c      	cmp	r4, r3
 800c602:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c606:	dd08      	ble.n	800c61a <__ieee754_pow+0x442>
 800c608:	4bcc      	ldr	r3, [pc, #816]	; (800c93c <__ieee754_pow+0x764>)
 800c60a:	429c      	cmp	r4, r3
 800c60c:	f340 8162 	ble.w	800c8d4 <__ieee754_pow+0x6fc>
 800c610:	9b05      	ldr	r3, [sp, #20]
 800c612:	3301      	adds	r3, #1
 800c614:	9305      	str	r3, [sp, #20]
 800c616:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c61a:	2400      	movs	r4, #0
 800c61c:	00e3      	lsls	r3, r4, #3
 800c61e:	9307      	str	r3, [sp, #28]
 800c620:	4bc7      	ldr	r3, [pc, #796]	; (800c940 <__ieee754_pow+0x768>)
 800c622:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c626:	ed93 7b00 	vldr	d7, [r3]
 800c62a:	4629      	mov	r1, r5
 800c62c:	ec53 2b17 	vmov	r2, r3, d7
 800c630:	eeb0 9a47 	vmov.f32	s18, s14
 800c634:	eef0 9a67 	vmov.f32	s19, s15
 800c638:	4682      	mov	sl, r0
 800c63a:	f7f3 fe45 	bl	80002c8 <__aeabi_dsub>
 800c63e:	4652      	mov	r2, sl
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	462b      	mov	r3, r5
 800c646:	ec51 0b19 	vmov	r0, r1, d9
 800c64a:	f7f3 fe3f 	bl	80002cc <__adddf3>
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	2000      	movs	r0, #0
 800c654:	49bb      	ldr	r1, [pc, #748]	; (800c944 <__ieee754_pow+0x76c>)
 800c656:	f7f4 f919 	bl	800088c <__aeabi_ddiv>
 800c65a:	ec41 0b1a 	vmov	d10, r0, r1
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4630      	mov	r0, r6
 800c664:	4639      	mov	r1, r7
 800c666:	f7f3 ffe7 	bl	8000638 <__aeabi_dmul>
 800c66a:	2300      	movs	r3, #0
 800c66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c670:	9302      	str	r3, [sp, #8]
 800c672:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c676:	46ab      	mov	fp, r5
 800c678:	106d      	asrs	r5, r5, #1
 800c67a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c67e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c682:	ec41 0b18 	vmov	d8, r0, r1
 800c686:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c68a:	2200      	movs	r2, #0
 800c68c:	4640      	mov	r0, r8
 800c68e:	4649      	mov	r1, r9
 800c690:	4614      	mov	r4, r2
 800c692:	461d      	mov	r5, r3
 800c694:	f7f3 ffd0 	bl	8000638 <__aeabi_dmul>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f3 fe12 	bl	80002c8 <__aeabi_dsub>
 800c6a4:	ec53 2b19 	vmov	r2, r3, d9
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	460f      	mov	r7, r1
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	f7f3 fe0a 	bl	80002c8 <__aeabi_dsub>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	f7f3 fe04 	bl	80002c8 <__aeabi_dsub>
 800c6c0:	4642      	mov	r2, r8
 800c6c2:	464b      	mov	r3, r9
 800c6c4:	f7f3 ffb8 	bl	8000638 <__aeabi_dmul>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	f7f3 fdfa 	bl	80002c8 <__aeabi_dsub>
 800c6d4:	ec53 2b1a 	vmov	r2, r3, d10
 800c6d8:	f7f3 ffae 	bl	8000638 <__aeabi_dmul>
 800c6dc:	ec53 2b18 	vmov	r2, r3, d8
 800c6e0:	ec41 0b19 	vmov	d9, r0, r1
 800c6e4:	ec51 0b18 	vmov	r0, r1, d8
 800c6e8:	f7f3 ffa6 	bl	8000638 <__aeabi_dmul>
 800c6ec:	a37c      	add	r3, pc, #496	; (adr r3, 800c8e0 <__ieee754_pow+0x708>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	f7f3 ff9f 	bl	8000638 <__aeabi_dmul>
 800c6fa:	a37b      	add	r3, pc, #492	; (adr r3, 800c8e8 <__ieee754_pow+0x710>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7f3 fde4 	bl	80002cc <__adddf3>
 800c704:	4622      	mov	r2, r4
 800c706:	462b      	mov	r3, r5
 800c708:	f7f3 ff96 	bl	8000638 <__aeabi_dmul>
 800c70c:	a378      	add	r3, pc, #480	; (adr r3, 800c8f0 <__ieee754_pow+0x718>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fddb 	bl	80002cc <__adddf3>
 800c716:	4622      	mov	r2, r4
 800c718:	462b      	mov	r3, r5
 800c71a:	f7f3 ff8d 	bl	8000638 <__aeabi_dmul>
 800c71e:	a376      	add	r3, pc, #472	; (adr r3, 800c8f8 <__ieee754_pow+0x720>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f3 fdd2 	bl	80002cc <__adddf3>
 800c728:	4622      	mov	r2, r4
 800c72a:	462b      	mov	r3, r5
 800c72c:	f7f3 ff84 	bl	8000638 <__aeabi_dmul>
 800c730:	a373      	add	r3, pc, #460	; (adr r3, 800c900 <__ieee754_pow+0x728>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fdc9 	bl	80002cc <__adddf3>
 800c73a:	4622      	mov	r2, r4
 800c73c:	462b      	mov	r3, r5
 800c73e:	f7f3 ff7b 	bl	8000638 <__aeabi_dmul>
 800c742:	a371      	add	r3, pc, #452	; (adr r3, 800c908 <__ieee754_pow+0x730>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fdc0 	bl	80002cc <__adddf3>
 800c74c:	4622      	mov	r2, r4
 800c74e:	4606      	mov	r6, r0
 800c750:	460f      	mov	r7, r1
 800c752:	462b      	mov	r3, r5
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 ff6e 	bl	8000638 <__aeabi_dmul>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4630      	mov	r0, r6
 800c762:	4639      	mov	r1, r7
 800c764:	f7f3 ff68 	bl	8000638 <__aeabi_dmul>
 800c768:	4642      	mov	r2, r8
 800c76a:	4604      	mov	r4, r0
 800c76c:	460d      	mov	r5, r1
 800c76e:	464b      	mov	r3, r9
 800c770:	ec51 0b18 	vmov	r0, r1, d8
 800c774:	f7f3 fdaa 	bl	80002cc <__adddf3>
 800c778:	ec53 2b19 	vmov	r2, r3, d9
 800c77c:	f7f3 ff5c 	bl	8000638 <__aeabi_dmul>
 800c780:	4622      	mov	r2, r4
 800c782:	462b      	mov	r3, r5
 800c784:	f7f3 fda2 	bl	80002cc <__adddf3>
 800c788:	4642      	mov	r2, r8
 800c78a:	4682      	mov	sl, r0
 800c78c:	468b      	mov	fp, r1
 800c78e:	464b      	mov	r3, r9
 800c790:	4640      	mov	r0, r8
 800c792:	4649      	mov	r1, r9
 800c794:	f7f3 ff50 	bl	8000638 <__aeabi_dmul>
 800c798:	4b6b      	ldr	r3, [pc, #428]	; (800c948 <__ieee754_pow+0x770>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	4606      	mov	r6, r0
 800c79e:	460f      	mov	r7, r1
 800c7a0:	f7f3 fd94 	bl	80002cc <__adddf3>
 800c7a4:	4652      	mov	r2, sl
 800c7a6:	465b      	mov	r3, fp
 800c7a8:	f7f3 fd90 	bl	80002cc <__adddf3>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	f7f3 ff3d 	bl	8000638 <__aeabi_dmul>
 800c7be:	4b62      	ldr	r3, [pc, #392]	; (800c948 <__ieee754_pow+0x770>)
 800c7c0:	4680      	mov	r8, r0
 800c7c2:	4689      	mov	r9, r1
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 fd7d 	bl	80002c8 <__aeabi_dsub>
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	f7f3 fd79 	bl	80002c8 <__aeabi_dsub>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4650      	mov	r0, sl
 800c7dc:	4659      	mov	r1, fp
 800c7de:	f7f3 fd73 	bl	80002c8 <__aeabi_dsub>
 800c7e2:	ec53 2b18 	vmov	r2, r3, d8
 800c7e6:	f7f3 ff27 	bl	8000638 <__aeabi_dmul>
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	460f      	mov	r7, r1
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	ec51 0b19 	vmov	r0, r1, d9
 800c7f6:	f7f3 ff1f 	bl	8000638 <__aeabi_dmul>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7f3 fd63 	bl	80002cc <__adddf3>
 800c806:	4606      	mov	r6, r0
 800c808:	460f      	mov	r7, r1
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4640      	mov	r0, r8
 800c810:	4649      	mov	r1, r9
 800c812:	f7f3 fd5b 	bl	80002cc <__adddf3>
 800c816:	a33e      	add	r3, pc, #248	; (adr r3, 800c910 <__ieee754_pow+0x738>)
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	2000      	movs	r0, #0
 800c81e:	4604      	mov	r4, r0
 800c820:	460d      	mov	r5, r1
 800c822:	f7f3 ff09 	bl	8000638 <__aeabi_dmul>
 800c826:	4642      	mov	r2, r8
 800c828:	ec41 0b18 	vmov	d8, r0, r1
 800c82c:	464b      	mov	r3, r9
 800c82e:	4620      	mov	r0, r4
 800c830:	4629      	mov	r1, r5
 800c832:	f7f3 fd49 	bl	80002c8 <__aeabi_dsub>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	4630      	mov	r0, r6
 800c83c:	4639      	mov	r1, r7
 800c83e:	f7f3 fd43 	bl	80002c8 <__aeabi_dsub>
 800c842:	a335      	add	r3, pc, #212	; (adr r3, 800c918 <__ieee754_pow+0x740>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fef6 	bl	8000638 <__aeabi_dmul>
 800c84c:	a334      	add	r3, pc, #208	; (adr r3, 800c920 <__ieee754_pow+0x748>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	4620      	mov	r0, r4
 800c858:	4629      	mov	r1, r5
 800c85a:	f7f3 feed 	bl	8000638 <__aeabi_dmul>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	4630      	mov	r0, r6
 800c864:	4639      	mov	r1, r7
 800c866:	f7f3 fd31 	bl	80002cc <__adddf3>
 800c86a:	9a07      	ldr	r2, [sp, #28]
 800c86c:	4b37      	ldr	r3, [pc, #220]	; (800c94c <__ieee754_pow+0x774>)
 800c86e:	4413      	add	r3, r2
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	f7f3 fd2a 	bl	80002cc <__adddf3>
 800c878:	4682      	mov	sl, r0
 800c87a:	9805      	ldr	r0, [sp, #20]
 800c87c:	468b      	mov	fp, r1
 800c87e:	f7f3 fe71 	bl	8000564 <__aeabi_i2d>
 800c882:	9a07      	ldr	r2, [sp, #28]
 800c884:	4b32      	ldr	r3, [pc, #200]	; (800c950 <__ieee754_pow+0x778>)
 800c886:	4413      	add	r3, r2
 800c888:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c88c:	4606      	mov	r6, r0
 800c88e:	460f      	mov	r7, r1
 800c890:	4652      	mov	r2, sl
 800c892:	465b      	mov	r3, fp
 800c894:	ec51 0b18 	vmov	r0, r1, d8
 800c898:	f7f3 fd18 	bl	80002cc <__adddf3>
 800c89c:	4642      	mov	r2, r8
 800c89e:	464b      	mov	r3, r9
 800c8a0:	f7f3 fd14 	bl	80002cc <__adddf3>
 800c8a4:	4632      	mov	r2, r6
 800c8a6:	463b      	mov	r3, r7
 800c8a8:	f7f3 fd10 	bl	80002cc <__adddf3>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	f7f3 fd07 	bl	80002c8 <__aeabi_dsub>
 800c8ba:	4642      	mov	r2, r8
 800c8bc:	464b      	mov	r3, r9
 800c8be:	f7f3 fd03 	bl	80002c8 <__aeabi_dsub>
 800c8c2:	ec53 2b18 	vmov	r2, r3, d8
 800c8c6:	f7f3 fcff 	bl	80002c8 <__aeabi_dsub>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4650      	mov	r0, sl
 800c8d0:	4659      	mov	r1, fp
 800c8d2:	e610      	b.n	800c4f6 <__ieee754_pow+0x31e>
 800c8d4:	2401      	movs	r4, #1
 800c8d6:	e6a1      	b.n	800c61c <__ieee754_pow+0x444>
 800c8d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c928 <__ieee754_pow+0x750>
 800c8dc:	e617      	b.n	800c50e <__ieee754_pow+0x336>
 800c8de:	bf00      	nop
 800c8e0:	4a454eef 	.word	0x4a454eef
 800c8e4:	3fca7e28 	.word	0x3fca7e28
 800c8e8:	93c9db65 	.word	0x93c9db65
 800c8ec:	3fcd864a 	.word	0x3fcd864a
 800c8f0:	a91d4101 	.word	0xa91d4101
 800c8f4:	3fd17460 	.word	0x3fd17460
 800c8f8:	518f264d 	.word	0x518f264d
 800c8fc:	3fd55555 	.word	0x3fd55555
 800c900:	db6fabff 	.word	0xdb6fabff
 800c904:	3fdb6db6 	.word	0x3fdb6db6
 800c908:	33333303 	.word	0x33333303
 800c90c:	3fe33333 	.word	0x3fe33333
 800c910:	e0000000 	.word	0xe0000000
 800c914:	3feec709 	.word	0x3feec709
 800c918:	dc3a03fd 	.word	0xdc3a03fd
 800c91c:	3feec709 	.word	0x3feec709
 800c920:	145b01f5 	.word	0x145b01f5
 800c924:	be3e2fe0 	.word	0xbe3e2fe0
 800c928:	00000000 	.word	0x00000000
 800c92c:	3ff00000 	.word	0x3ff00000
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	43400000 	.word	0x43400000
 800c938:	0003988e 	.word	0x0003988e
 800c93c:	000bb679 	.word	0x000bb679
 800c940:	0800d428 	.word	0x0800d428
 800c944:	3ff00000 	.word	0x3ff00000
 800c948:	40080000 	.word	0x40080000
 800c94c:	0800d448 	.word	0x0800d448
 800c950:	0800d438 	.word	0x0800d438
 800c954:	a3b5      	add	r3, pc, #724	; (adr r3, 800cc2c <__ieee754_pow+0xa54>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	4640      	mov	r0, r8
 800c95c:	4649      	mov	r1, r9
 800c95e:	f7f3 fcb5 	bl	80002cc <__adddf3>
 800c962:	4622      	mov	r2, r4
 800c964:	ec41 0b1a 	vmov	d10, r0, r1
 800c968:	462b      	mov	r3, r5
 800c96a:	4630      	mov	r0, r6
 800c96c:	4639      	mov	r1, r7
 800c96e:	f7f3 fcab 	bl	80002c8 <__aeabi_dsub>
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	ec51 0b1a 	vmov	r0, r1, d10
 800c97a:	f7f4 f8ed 	bl	8000b58 <__aeabi_dcmpgt>
 800c97e:	2800      	cmp	r0, #0
 800c980:	f47f ae04 	bne.w	800c58c <__ieee754_pow+0x3b4>
 800c984:	4aa4      	ldr	r2, [pc, #656]	; (800cc18 <__ieee754_pow+0xa40>)
 800c986:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c98a:	4293      	cmp	r3, r2
 800c98c:	f340 8108 	ble.w	800cba0 <__ieee754_pow+0x9c8>
 800c990:	151b      	asrs	r3, r3, #20
 800c992:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c996:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c99a:	fa4a f303 	asr.w	r3, sl, r3
 800c99e:	445b      	add	r3, fp
 800c9a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c9a4:	4e9d      	ldr	r6, [pc, #628]	; (800cc1c <__ieee754_pow+0xa44>)
 800c9a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c9aa:	4116      	asrs	r6, r2
 800c9ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	ea23 0106 	bic.w	r1, r3, r6
 800c9b6:	f1c2 0214 	rsb	r2, r2, #20
 800c9ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c9be:	fa4a fa02 	asr.w	sl, sl, r2
 800c9c2:	f1bb 0f00 	cmp.w	fp, #0
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	bfb8      	it	lt
 800c9d0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c9d4:	f7f3 fc78 	bl	80002c8 <__aeabi_dsub>
 800c9d8:	ec41 0b19 	vmov	d9, r0, r1
 800c9dc:	4642      	mov	r2, r8
 800c9de:	464b      	mov	r3, r9
 800c9e0:	ec51 0b19 	vmov	r0, r1, d9
 800c9e4:	f7f3 fc72 	bl	80002cc <__adddf3>
 800c9e8:	a37b      	add	r3, pc, #492	; (adr r3, 800cbd8 <__ieee754_pow+0xa00>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	460d      	mov	r5, r1
 800c9f4:	f7f3 fe20 	bl	8000638 <__aeabi_dmul>
 800c9f8:	ec53 2b19 	vmov	r2, r3, d9
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	460f      	mov	r7, r1
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fc60 	bl	80002c8 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4640      	mov	r0, r8
 800ca0e:	4649      	mov	r1, r9
 800ca10:	f7f3 fc5a 	bl	80002c8 <__aeabi_dsub>
 800ca14:	a372      	add	r3, pc, #456	; (adr r3, 800cbe0 <__ieee754_pow+0xa08>)
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	f7f3 fe0d 	bl	8000638 <__aeabi_dmul>
 800ca1e:	a372      	add	r3, pc, #456	; (adr r3, 800cbe8 <__ieee754_pow+0xa10>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	4680      	mov	r8, r0
 800ca26:	4689      	mov	r9, r1
 800ca28:	4620      	mov	r0, r4
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	f7f3 fe04 	bl	8000638 <__aeabi_dmul>
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fc48 	bl	80002cc <__adddf3>
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f3 fc40 	bl	80002cc <__adddf3>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	4680      	mov	r8, r0
 800ca52:	4689      	mov	r9, r1
 800ca54:	f7f3 fc38 	bl	80002c8 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fc32 	bl	80002c8 <__aeabi_dsub>
 800ca64:	4642      	mov	r2, r8
 800ca66:	4606      	mov	r6, r0
 800ca68:	460f      	mov	r7, r1
 800ca6a:	464b      	mov	r3, r9
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f3 fde2 	bl	8000638 <__aeabi_dmul>
 800ca74:	a35e      	add	r3, pc, #376	; (adr r3, 800cbf0 <__ieee754_pow+0xa18>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	460d      	mov	r5, r1
 800ca7e:	f7f3 fddb 	bl	8000638 <__aeabi_dmul>
 800ca82:	a35d      	add	r3, pc, #372	; (adr r3, 800cbf8 <__ieee754_pow+0xa20>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	f7f3 fc1e 	bl	80002c8 <__aeabi_dsub>
 800ca8c:	4622      	mov	r2, r4
 800ca8e:	462b      	mov	r3, r5
 800ca90:	f7f3 fdd2 	bl	8000638 <__aeabi_dmul>
 800ca94:	a35a      	add	r3, pc, #360	; (adr r3, 800cc00 <__ieee754_pow+0xa28>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fc17 	bl	80002cc <__adddf3>
 800ca9e:	4622      	mov	r2, r4
 800caa0:	462b      	mov	r3, r5
 800caa2:	f7f3 fdc9 	bl	8000638 <__aeabi_dmul>
 800caa6:	a358      	add	r3, pc, #352	; (adr r3, 800cc08 <__ieee754_pow+0xa30>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f7f3 fc0c 	bl	80002c8 <__aeabi_dsub>
 800cab0:	4622      	mov	r2, r4
 800cab2:	462b      	mov	r3, r5
 800cab4:	f7f3 fdc0 	bl	8000638 <__aeabi_dmul>
 800cab8:	a355      	add	r3, pc, #340	; (adr r3, 800cc10 <__ieee754_pow+0xa38>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	f7f3 fc05 	bl	80002cc <__adddf3>
 800cac2:	4622      	mov	r2, r4
 800cac4:	462b      	mov	r3, r5
 800cac6:	f7f3 fdb7 	bl	8000638 <__aeabi_dmul>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 fbf9 	bl	80002c8 <__aeabi_dsub>
 800cad6:	4604      	mov	r4, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4640      	mov	r0, r8
 800cae0:	4649      	mov	r1, r9
 800cae2:	f7f3 fda9 	bl	8000638 <__aeabi_dmul>
 800cae6:	2200      	movs	r2, #0
 800cae8:	ec41 0b19 	vmov	d9, r0, r1
 800caec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800caf0:	4620      	mov	r0, r4
 800caf2:	4629      	mov	r1, r5
 800caf4:	f7f3 fbe8 	bl	80002c8 <__aeabi_dsub>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	ec51 0b19 	vmov	r0, r1, d9
 800cb00:	f7f3 fec4 	bl	800088c <__aeabi_ddiv>
 800cb04:	4632      	mov	r2, r6
 800cb06:	4604      	mov	r4, r0
 800cb08:	460d      	mov	r5, r1
 800cb0a:	463b      	mov	r3, r7
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	4649      	mov	r1, r9
 800cb10:	f7f3 fd92 	bl	8000638 <__aeabi_dmul>
 800cb14:	4632      	mov	r2, r6
 800cb16:	463b      	mov	r3, r7
 800cb18:	f7f3 fbd8 	bl	80002cc <__adddf3>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4620      	mov	r0, r4
 800cb22:	4629      	mov	r1, r5
 800cb24:	f7f3 fbd0 	bl	80002c8 <__aeabi_dsub>
 800cb28:	4642      	mov	r2, r8
 800cb2a:	464b      	mov	r3, r9
 800cb2c:	f7f3 fbcc 	bl	80002c8 <__aeabi_dsub>
 800cb30:	460b      	mov	r3, r1
 800cb32:	4602      	mov	r2, r0
 800cb34:	493a      	ldr	r1, [pc, #232]	; (800cc20 <__ieee754_pow+0xa48>)
 800cb36:	2000      	movs	r0, #0
 800cb38:	f7f3 fbc6 	bl	80002c8 <__aeabi_dsub>
 800cb3c:	ec41 0b10 	vmov	d0, r0, r1
 800cb40:	ee10 3a90 	vmov	r3, s1
 800cb44:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cb48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb4c:	da2b      	bge.n	800cba6 <__ieee754_pow+0x9ce>
 800cb4e:	4650      	mov	r0, sl
 800cb50:	f000 f95e 	bl	800ce10 <scalbn>
 800cb54:	ec51 0b10 	vmov	r0, r1, d0
 800cb58:	ec53 2b18 	vmov	r2, r3, d8
 800cb5c:	f7ff bbed 	b.w	800c33a <__ieee754_pow+0x162>
 800cb60:	4b30      	ldr	r3, [pc, #192]	; (800cc24 <__ieee754_pow+0xa4c>)
 800cb62:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cb66:	429e      	cmp	r6, r3
 800cb68:	f77f af0c 	ble.w	800c984 <__ieee754_pow+0x7ac>
 800cb6c:	4b2e      	ldr	r3, [pc, #184]	; (800cc28 <__ieee754_pow+0xa50>)
 800cb6e:	440b      	add	r3, r1
 800cb70:	4303      	orrs	r3, r0
 800cb72:	d009      	beq.n	800cb88 <__ieee754_pow+0x9b0>
 800cb74:	ec51 0b18 	vmov	r0, r1, d8
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f7f3 ffce 	bl	8000b1c <__aeabi_dcmplt>
 800cb80:	3800      	subs	r0, #0
 800cb82:	bf18      	it	ne
 800cb84:	2001      	movne	r0, #1
 800cb86:	e447      	b.n	800c418 <__ieee754_pow+0x240>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	f7f3 fb9c 	bl	80002c8 <__aeabi_dsub>
 800cb90:	4642      	mov	r2, r8
 800cb92:	464b      	mov	r3, r9
 800cb94:	f7f3 ffd6 	bl	8000b44 <__aeabi_dcmpge>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	f43f aef3 	beq.w	800c984 <__ieee754_pow+0x7ac>
 800cb9e:	e7e9      	b.n	800cb74 <__ieee754_pow+0x99c>
 800cba0:	f04f 0a00 	mov.w	sl, #0
 800cba4:	e71a      	b.n	800c9dc <__ieee754_pow+0x804>
 800cba6:	ec51 0b10 	vmov	r0, r1, d0
 800cbaa:	4619      	mov	r1, r3
 800cbac:	e7d4      	b.n	800cb58 <__ieee754_pow+0x980>
 800cbae:	491c      	ldr	r1, [pc, #112]	; (800cc20 <__ieee754_pow+0xa48>)
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	f7ff bb30 	b.w	800c216 <__ieee754_pow+0x3e>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	2100      	movs	r1, #0
 800cbba:	f7ff bb2c 	b.w	800c216 <__ieee754_pow+0x3e>
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	4639      	mov	r1, r7
 800cbc2:	f7ff bb28 	b.w	800c216 <__ieee754_pow+0x3e>
 800cbc6:	9204      	str	r2, [sp, #16]
 800cbc8:	f7ff bb7a 	b.w	800c2c0 <__ieee754_pow+0xe8>
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f7ff bb64 	b.w	800c29a <__ieee754_pow+0xc2>
 800cbd2:	bf00      	nop
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	3fe62e43 	.word	0x3fe62e43
 800cbe0:	fefa39ef 	.word	0xfefa39ef
 800cbe4:	3fe62e42 	.word	0x3fe62e42
 800cbe8:	0ca86c39 	.word	0x0ca86c39
 800cbec:	be205c61 	.word	0xbe205c61
 800cbf0:	72bea4d0 	.word	0x72bea4d0
 800cbf4:	3e663769 	.word	0x3e663769
 800cbf8:	c5d26bf1 	.word	0xc5d26bf1
 800cbfc:	3ebbbd41 	.word	0x3ebbbd41
 800cc00:	af25de2c 	.word	0xaf25de2c
 800cc04:	3f11566a 	.word	0x3f11566a
 800cc08:	16bebd93 	.word	0x16bebd93
 800cc0c:	3f66c16c 	.word	0x3f66c16c
 800cc10:	5555553e 	.word	0x5555553e
 800cc14:	3fc55555 	.word	0x3fc55555
 800cc18:	3fe00000 	.word	0x3fe00000
 800cc1c:	000fffff 	.word	0x000fffff
 800cc20:	3ff00000 	.word	0x3ff00000
 800cc24:	4090cbff 	.word	0x4090cbff
 800cc28:	3f6f3400 	.word	0x3f6f3400
 800cc2c:	652b82fe 	.word	0x652b82fe
 800cc30:	3c971547 	.word	0x3c971547

0800cc34 <__ieee754_sqrt>:
 800cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc38:	ec55 4b10 	vmov	r4, r5, d0
 800cc3c:	4e55      	ldr	r6, [pc, #340]	; (800cd94 <__ieee754_sqrt+0x160>)
 800cc3e:	43ae      	bics	r6, r5
 800cc40:	ee10 0a10 	vmov	r0, s0
 800cc44:	ee10 3a10 	vmov	r3, s0
 800cc48:	462a      	mov	r2, r5
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	d110      	bne.n	800cc70 <__ieee754_sqrt+0x3c>
 800cc4e:	ee10 2a10 	vmov	r2, s0
 800cc52:	462b      	mov	r3, r5
 800cc54:	f7f3 fcf0 	bl	8000638 <__aeabi_dmul>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fb34 	bl	80002cc <__adddf3>
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	ec45 4b10 	vmov	d0, r4, r5
 800cc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	dc10      	bgt.n	800cc96 <__ieee754_sqrt+0x62>
 800cc74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc78:	4330      	orrs	r0, r6
 800cc7a:	d0f5      	beq.n	800cc68 <__ieee754_sqrt+0x34>
 800cc7c:	b15d      	cbz	r5, 800cc96 <__ieee754_sqrt+0x62>
 800cc7e:	ee10 2a10 	vmov	r2, s0
 800cc82:	462b      	mov	r3, r5
 800cc84:	ee10 0a10 	vmov	r0, s0
 800cc88:	f7f3 fb1e 	bl	80002c8 <__aeabi_dsub>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	f7f3 fdfc 	bl	800088c <__aeabi_ddiv>
 800cc94:	e7e6      	b.n	800cc64 <__ieee754_sqrt+0x30>
 800cc96:	1512      	asrs	r2, r2, #20
 800cc98:	d074      	beq.n	800cd84 <__ieee754_sqrt+0x150>
 800cc9a:	07d4      	lsls	r4, r2, #31
 800cc9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cca0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cca8:	bf5e      	ittt	pl
 800ccaa:	0fda      	lsrpl	r2, r3, #31
 800ccac:	005b      	lslpl	r3, r3, #1
 800ccae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ccb2:	2400      	movs	r4, #0
 800ccb4:	0fda      	lsrs	r2, r3, #31
 800ccb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ccba:	107f      	asrs	r7, r7, #1
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	2516      	movs	r5, #22
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ccc6:	1886      	adds	r6, r0, r2
 800ccc8:	428e      	cmp	r6, r1
 800ccca:	bfde      	ittt	le
 800cccc:	1b89      	suble	r1, r1, r6
 800ccce:	18b0      	addle	r0, r6, r2
 800ccd0:	18a4      	addle	r4, r4, r2
 800ccd2:	0049      	lsls	r1, r1, #1
 800ccd4:	3d01      	subs	r5, #1
 800ccd6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ccda:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ccde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cce2:	d1f0      	bne.n	800ccc6 <__ieee754_sqrt+0x92>
 800cce4:	462a      	mov	r2, r5
 800cce6:	f04f 0e20 	mov.w	lr, #32
 800ccea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ccee:	4281      	cmp	r1, r0
 800ccf0:	eb06 0c05 	add.w	ip, r6, r5
 800ccf4:	dc02      	bgt.n	800ccfc <__ieee754_sqrt+0xc8>
 800ccf6:	d113      	bne.n	800cd20 <__ieee754_sqrt+0xec>
 800ccf8:	459c      	cmp	ip, r3
 800ccfa:	d811      	bhi.n	800cd20 <__ieee754_sqrt+0xec>
 800ccfc:	f1bc 0f00 	cmp.w	ip, #0
 800cd00:	eb0c 0506 	add.w	r5, ip, r6
 800cd04:	da43      	bge.n	800cd8e <__ieee754_sqrt+0x15a>
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	db41      	blt.n	800cd8e <__ieee754_sqrt+0x15a>
 800cd0a:	f100 0801 	add.w	r8, r0, #1
 800cd0e:	1a09      	subs	r1, r1, r0
 800cd10:	459c      	cmp	ip, r3
 800cd12:	bf88      	it	hi
 800cd14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cd18:	eba3 030c 	sub.w	r3, r3, ip
 800cd1c:	4432      	add	r2, r6
 800cd1e:	4640      	mov	r0, r8
 800cd20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cd24:	f1be 0e01 	subs.w	lr, lr, #1
 800cd28:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cd2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cd34:	d1db      	bne.n	800ccee <__ieee754_sqrt+0xba>
 800cd36:	430b      	orrs	r3, r1
 800cd38:	d006      	beq.n	800cd48 <__ieee754_sqrt+0x114>
 800cd3a:	1c50      	adds	r0, r2, #1
 800cd3c:	bf13      	iteet	ne
 800cd3e:	3201      	addne	r2, #1
 800cd40:	3401      	addeq	r4, #1
 800cd42:	4672      	moveq	r2, lr
 800cd44:	f022 0201 	bicne.w	r2, r2, #1
 800cd48:	1063      	asrs	r3, r4, #1
 800cd4a:	0852      	lsrs	r2, r2, #1
 800cd4c:	07e1      	lsls	r1, r4, #31
 800cd4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cd52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cd56:	bf48      	it	mi
 800cd58:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cd5c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cd60:	4614      	mov	r4, r2
 800cd62:	e781      	b.n	800cc68 <__ieee754_sqrt+0x34>
 800cd64:	0ad9      	lsrs	r1, r3, #11
 800cd66:	3815      	subs	r0, #21
 800cd68:	055b      	lsls	r3, r3, #21
 800cd6a:	2900      	cmp	r1, #0
 800cd6c:	d0fa      	beq.n	800cd64 <__ieee754_sqrt+0x130>
 800cd6e:	02cd      	lsls	r5, r1, #11
 800cd70:	d50a      	bpl.n	800cd88 <__ieee754_sqrt+0x154>
 800cd72:	f1c2 0420 	rsb	r4, r2, #32
 800cd76:	fa23 f404 	lsr.w	r4, r3, r4
 800cd7a:	1e55      	subs	r5, r2, #1
 800cd7c:	4093      	lsls	r3, r2
 800cd7e:	4321      	orrs	r1, r4
 800cd80:	1b42      	subs	r2, r0, r5
 800cd82:	e78a      	b.n	800cc9a <__ieee754_sqrt+0x66>
 800cd84:	4610      	mov	r0, r2
 800cd86:	e7f0      	b.n	800cd6a <__ieee754_sqrt+0x136>
 800cd88:	0049      	lsls	r1, r1, #1
 800cd8a:	3201      	adds	r2, #1
 800cd8c:	e7ef      	b.n	800cd6e <__ieee754_sqrt+0x13a>
 800cd8e:	4680      	mov	r8, r0
 800cd90:	e7bd      	b.n	800cd0e <__ieee754_sqrt+0xda>
 800cd92:	bf00      	nop
 800cd94:	7ff00000 	.word	0x7ff00000

0800cd98 <with_errno>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	4616      	mov	r6, r2
 800cda0:	f7fa fcfa 	bl	8007798 <__errno>
 800cda4:	4629      	mov	r1, r5
 800cda6:	6006      	str	r6, [r0, #0]
 800cda8:	4620      	mov	r0, r4
 800cdaa:	bd70      	pop	{r4, r5, r6, pc}

0800cdac <xflow>:
 800cdac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdae:	4614      	mov	r4, r2
 800cdb0:	461d      	mov	r5, r3
 800cdb2:	b108      	cbz	r0, 800cdb8 <xflow+0xc>
 800cdb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cdb8:	e9cd 2300 	strd	r2, r3, [sp]
 800cdbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	f7f3 fc38 	bl	8000638 <__aeabi_dmul>
 800cdc8:	2222      	movs	r2, #34	; 0x22
 800cdca:	b003      	add	sp, #12
 800cdcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdd0:	f7ff bfe2 	b.w	800cd98 <with_errno>

0800cdd4 <__math_uflow>:
 800cdd4:	b508      	push	{r3, lr}
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cddc:	f7ff ffe6 	bl	800cdac <xflow>
 800cde0:	ec41 0b10 	vmov	d0, r0, r1
 800cde4:	bd08      	pop	{r3, pc}

0800cde6 <__math_oflow>:
 800cde6:	b508      	push	{r3, lr}
 800cde8:	2200      	movs	r2, #0
 800cdea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cdee:	f7ff ffdd 	bl	800cdac <xflow>
 800cdf2:	ec41 0b10 	vmov	d0, r0, r1
 800cdf6:	bd08      	pop	{r3, pc}

0800cdf8 <finite>:
 800cdf8:	b082      	sub	sp, #8
 800cdfa:	ed8d 0b00 	vstr	d0, [sp]
 800cdfe:	9801      	ldr	r0, [sp, #4]
 800ce00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ce04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce08:	0fc0      	lsrs	r0, r0, #31
 800ce0a:	b002      	add	sp, #8
 800ce0c:	4770      	bx	lr
	...

0800ce10 <scalbn>:
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	ec55 4b10 	vmov	r4, r5, d0
 800ce16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	b99a      	cbnz	r2, 800ce48 <scalbn+0x38>
 800ce20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce24:	4323      	orrs	r3, r4
 800ce26:	d036      	beq.n	800ce96 <scalbn+0x86>
 800ce28:	4b39      	ldr	r3, [pc, #228]	; (800cf10 <scalbn+0x100>)
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	ee10 0a10 	vmov	r0, s0
 800ce30:	2200      	movs	r2, #0
 800ce32:	f7f3 fc01 	bl	8000638 <__aeabi_dmul>
 800ce36:	4b37      	ldr	r3, [pc, #220]	; (800cf14 <scalbn+0x104>)
 800ce38:	429e      	cmp	r6, r3
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	da10      	bge.n	800ce62 <scalbn+0x52>
 800ce40:	a32b      	add	r3, pc, #172	; (adr r3, 800cef0 <scalbn+0xe0>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	e03a      	b.n	800cebe <scalbn+0xae>
 800ce48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ce4c:	428a      	cmp	r2, r1
 800ce4e:	d10c      	bne.n	800ce6a <scalbn+0x5a>
 800ce50:	ee10 2a10 	vmov	r2, s0
 800ce54:	4620      	mov	r0, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	f7f3 fa38 	bl	80002cc <__adddf3>
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	460d      	mov	r5, r1
 800ce60:	e019      	b.n	800ce96 <scalbn+0x86>
 800ce62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce66:	460b      	mov	r3, r1
 800ce68:	3a36      	subs	r2, #54	; 0x36
 800ce6a:	4432      	add	r2, r6
 800ce6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce70:	428a      	cmp	r2, r1
 800ce72:	dd08      	ble.n	800ce86 <scalbn+0x76>
 800ce74:	2d00      	cmp	r5, #0
 800ce76:	a120      	add	r1, pc, #128	; (adr r1, 800cef8 <scalbn+0xe8>)
 800ce78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce7c:	da1c      	bge.n	800ceb8 <scalbn+0xa8>
 800ce7e:	a120      	add	r1, pc, #128	; (adr r1, 800cf00 <scalbn+0xf0>)
 800ce80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce84:	e018      	b.n	800ceb8 <scalbn+0xa8>
 800ce86:	2a00      	cmp	r2, #0
 800ce88:	dd08      	ble.n	800ce9c <scalbn+0x8c>
 800ce8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce96:	ec45 4b10 	vmov	d0, r4, r5
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cea0:	da19      	bge.n	800ced6 <scalbn+0xc6>
 800cea2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cea6:	429e      	cmp	r6, r3
 800cea8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ceac:	dd0a      	ble.n	800cec4 <scalbn+0xb4>
 800ceae:	a112      	add	r1, pc, #72	; (adr r1, 800cef8 <scalbn+0xe8>)
 800ceb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1e2      	bne.n	800ce7e <scalbn+0x6e>
 800ceb8:	a30f      	add	r3, pc, #60	; (adr r3, 800cef8 <scalbn+0xe8>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 fbbb 	bl	8000638 <__aeabi_dmul>
 800cec2:	e7cb      	b.n	800ce5c <scalbn+0x4c>
 800cec4:	a10a      	add	r1, pc, #40	; (adr r1, 800cef0 <scalbn+0xe0>)
 800cec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0b8      	beq.n	800ce40 <scalbn+0x30>
 800cece:	a10e      	add	r1, pc, #56	; (adr r1, 800cf08 <scalbn+0xf8>)
 800ced0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced4:	e7b4      	b.n	800ce40 <scalbn+0x30>
 800ced6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceda:	3236      	adds	r2, #54	; 0x36
 800cedc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cee0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cee4:	4620      	mov	r0, r4
 800cee6:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <scalbn+0x108>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	e7e8      	b.n	800cebe <scalbn+0xae>
 800ceec:	f3af 8000 	nop.w
 800cef0:	c2f8f359 	.word	0xc2f8f359
 800cef4:	01a56e1f 	.word	0x01a56e1f
 800cef8:	8800759c 	.word	0x8800759c
 800cefc:	7e37e43c 	.word	0x7e37e43c
 800cf00:	8800759c 	.word	0x8800759c
 800cf04:	fe37e43c 	.word	0xfe37e43c
 800cf08:	c2f8f359 	.word	0xc2f8f359
 800cf0c:	81a56e1f 	.word	0x81a56e1f
 800cf10:	43500000 	.word	0x43500000
 800cf14:	ffff3cb0 	.word	0xffff3cb0
 800cf18:	3c900000 	.word	0x3c900000

0800cf1c <_init>:
 800cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1e:	bf00      	nop
 800cf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf22:	bc08      	pop	{r3}
 800cf24:	469e      	mov	lr, r3
 800cf26:	4770      	bx	lr

0800cf28 <_fini>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	bf00      	nop
 800cf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2e:	bc08      	pop	{r3}
 800cf30:	469e      	mov	lr, r3
 800cf32:	4770      	bx	lr
