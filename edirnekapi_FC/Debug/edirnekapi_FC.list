
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012774  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08012948  08012948  00022948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f58  08012f58  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012f58  08012f58  00022f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f60  08012f60  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f60  08012f60  00022f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f64  08012f64  00022f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  200001e8  08013150  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  08013150  00031250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c41  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbd  00000000  00000000  00048e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0004cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0004dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a34  00000000  00000000  0004ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b263  00000000  00000000  0007677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e25de  00000000  00000000  000919df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173fbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  00174010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801292c 	.word	0x0801292c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0801292c 	.word	0x0801292c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_frsub>:
 8000ce8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	e002      	b.n	8000cf4 <__addsf3>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fsub>:
 8000cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cf4 <__addsf3>:
 8000cf4:	0042      	lsls	r2, r0, #1
 8000cf6:	bf1f      	itttt	ne
 8000cf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cfc:	ea92 0f03 	teqne	r2, r3
 8000d00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d08:	d06a      	beq.n	8000de0 <__addsf3+0xec>
 8000d0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d12:	bfc1      	itttt	gt
 8000d14:	18d2      	addgt	r2, r2, r3
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	4048      	eorgt	r0, r1
 8000d1a:	4041      	eorgt	r1, r0
 8000d1c:	bfb8      	it	lt
 8000d1e:	425b      	neglt	r3, r3
 8000d20:	2b19      	cmp	r3, #25
 8000d22:	bf88      	it	hi
 8000d24:	4770      	bxhi	lr
 8000d26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4240      	negne	r0, r0
 8000d36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d42:	bf18      	it	ne
 8000d44:	4249      	negne	r1, r1
 8000d46:	ea92 0f03 	teq	r2, r3
 8000d4a:	d03f      	beq.n	8000dcc <__addsf3+0xd8>
 8000d4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d50:	fa41 fc03 	asr.w	ip, r1, r3
 8000d54:	eb10 000c 	adds.w	r0, r0, ip
 8000d58:	f1c3 0320 	rsb	r3, r3, #32
 8000d5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__addsf3+0x78>
 8000d66:	4249      	negs	r1, r1
 8000d68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d70:	d313      	bcc.n	8000d9a <__addsf3+0xa6>
 8000d72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d76:	d306      	bcc.n	8000d86 <__addsf3+0x92>
 8000d78:	0840      	lsrs	r0, r0, #1
 8000d7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7e:	f102 0201 	add.w	r2, r2, #1
 8000d82:	2afe      	cmp	r2, #254	; 0xfe
 8000d84:	d251      	bcs.n	8000e2a <__addsf3+0x136>
 8000d86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	ea40 0003 	orr.w	r0, r0, r3
 8000d98:	4770      	bx	lr
 8000d9a:	0049      	lsls	r1, r1, #1
 8000d9c:	eb40 0000 	adc.w	r0, r0, r0
 8000da0:	3a01      	subs	r2, #1
 8000da2:	bf28      	it	cs
 8000da4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000da8:	d2ed      	bcs.n	8000d86 <__addsf3+0x92>
 8000daa:	fab0 fc80 	clz	ip, r0
 8000dae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000db2:	ebb2 020c 	subs.w	r2, r2, ip
 8000db6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dba:	bfaa      	itet	ge
 8000dbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dc0:	4252      	neglt	r2, r2
 8000dc2:	4318      	orrge	r0, r3
 8000dc4:	bfbc      	itt	lt
 8000dc6:	40d0      	lsrlt	r0, r2
 8000dc8:	4318      	orrlt	r0, r3
 8000dca:	4770      	bx	lr
 8000dcc:	f092 0f00 	teq	r2, #0
 8000dd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dd4:	bf06      	itte	eq
 8000dd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dda:	3201      	addeq	r2, #1
 8000ddc:	3b01      	subne	r3, #1
 8000dde:	e7b5      	b.n	8000d4c <__addsf3+0x58>
 8000de0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de8:	bf18      	it	ne
 8000dea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dee:	d021      	beq.n	8000e34 <__addsf3+0x140>
 8000df0:	ea92 0f03 	teq	r2, r3
 8000df4:	d004      	beq.n	8000e00 <__addsf3+0x10c>
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	4770      	bx	lr
 8000e00:	ea90 0f01 	teq	r0, r1
 8000e04:	bf1c      	itt	ne
 8000e06:	2000      	movne	r0, #0
 8000e08:	4770      	bxne	lr
 8000e0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e0e:	d104      	bne.n	8000e1a <__addsf3+0x126>
 8000e10:	0040      	lsls	r0, r0, #1
 8000e12:	bf28      	it	cs
 8000e14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	4770      	bx	lr
 8000e1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e1e:	bf3c      	itt	cc
 8000e20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bxcc	lr
 8000e26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	4770      	bx	lr
 8000e34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e38:	bf16      	itet	ne
 8000e3a:	4608      	movne	r0, r1
 8000e3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e40:	4601      	movne	r1, r0
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	bf06      	itte	eq
 8000e46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e4a:	ea90 0f01 	teqeq	r0, r1
 8000e4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_ui2f>:
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e004      	b.n	8000e64 <__aeabi_i2f+0x8>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_i2f>:
 8000e5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e60:	bf48      	it	mi
 8000e62:	4240      	negmi	r0, r0
 8000e64:	ea5f 0c00 	movs.w	ip, r0
 8000e68:	bf08      	it	eq
 8000e6a:	4770      	bxeq	lr
 8000e6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e70:	4601      	mov	r1, r0
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	e01c      	b.n	8000eb2 <__aeabi_l2f+0x2a>

08000e78 <__aeabi_ul2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e00a      	b.n	8000e9c <__aeabi_l2f+0x14>
 8000e86:	bf00      	nop

08000e88 <__aeabi_l2f>:
 8000e88:	ea50 0201 	orrs.w	r2, r0, r1
 8000e8c:	bf08      	it	eq
 8000e8e:	4770      	bxeq	lr
 8000e90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e94:	d502      	bpl.n	8000e9c <__aeabi_l2f+0x14>
 8000e96:	4240      	negs	r0, r0
 8000e98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9c:	ea5f 0c01 	movs.w	ip, r1
 8000ea0:	bf02      	ittt	eq
 8000ea2:	4684      	moveq	ip, r0
 8000ea4:	4601      	moveq	r1, r0
 8000ea6:	2000      	moveq	r0, #0
 8000ea8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000eac:	bf08      	it	eq
 8000eae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eb6:	fabc f28c 	clz	r2, ip
 8000eba:	3a08      	subs	r2, #8
 8000ebc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ec0:	db10      	blt.n	8000ee4 <__aeabi_l2f+0x5c>
 8000ec2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ed4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f102 0220 	add.w	r2, r2, #32
 8000ee8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_ldivmod>:
 8000f04:	b97b      	cbnz	r3, 8000f26 <__aeabi_ldivmod+0x22>
 8000f06:	b972      	cbnz	r2, 8000f26 <__aeabi_ldivmod+0x22>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bfbe      	ittt	lt
 8000f0c:	2000      	movlt	r0, #0
 8000f0e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f12:	e006      	blt.n	8000f22 <__aeabi_ldivmod+0x1e>
 8000f14:	bf08      	it	eq
 8000f16:	2800      	cmpeq	r0, #0
 8000f18:	bf1c      	itt	ne
 8000f1a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f22:	f000 b9f5 	b.w	8001310 <__aeabi_idiv0>
 8000f26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f2e:	2900      	cmp	r1, #0
 8000f30:	db09      	blt.n	8000f46 <__aeabi_ldivmod+0x42>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db1a      	blt.n	8000f6c <__aeabi_ldivmod+0x68>
 8000f36:	f000 f883 	bl	8001040 <__udivmoddi4>
 8000f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f42:	b004      	add	sp, #16
 8000f44:	4770      	bx	lr
 8000f46:	4240      	negs	r0, r0
 8000f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db1b      	blt.n	8000f88 <__aeabi_ldivmod+0x84>
 8000f50:	f000 f876 	bl	8001040 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	4252      	negs	r2, r2
 8000f66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6a:	4770      	bx	lr
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	f000 f865 	bl	8001040 <__udivmoddi4>
 8000f76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7e:	b004      	add	sp, #16
 8000f80:	4240      	negs	r0, r0
 8000f82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f86:	4770      	bx	lr
 8000f88:	4252      	negs	r2, r2
 8000f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8e:	f000 f857 	bl	8001040 <__udivmoddi4>
 8000f92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9a:	b004      	add	sp, #16
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_uldivmod>:
 8000fa4:	b953      	cbnz	r3, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa6:	b94a      	cbnz	r2, 8000fbc <__aeabi_uldivmod+0x18>
 8000fa8:	2900      	cmp	r1, #0
 8000faa:	bf08      	it	eq
 8000fac:	2800      	cmpeq	r0, #0
 8000fae:	bf1c      	itt	ne
 8000fb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fb8:	f000 b9aa 	b.w	8001310 <__aeabi_idiv0>
 8000fbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fc4:	f000 f83c 	bl	8001040 <__udivmoddi4>
 8000fc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd0:	b004      	add	sp, #16
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_d2lz>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	f7ff fdad 	bl	8000b3c <__aeabi_dcmplt>
 8000fe2:	b928      	cbnz	r0, 8000ff0 <__aeabi_d2lz+0x1c>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fec:	f000 b80a 	b.w	8001004 <__aeabi_d2ulz>
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ff6:	f000 f805 	bl	8001004 <__aeabi_d2ulz>
 8000ffa:	4240      	negs	r0, r0
 8000ffc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop

08001004 <__aeabi_d2ulz>:
 8001004:	b5d0      	push	{r4, r6, r7, lr}
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__aeabi_d2ulz+0x34>)
 8001008:	2200      	movs	r2, #0
 800100a:	4606      	mov	r6, r0
 800100c:	460f      	mov	r7, r1
 800100e:	f7ff fb23 	bl	8000658 <__aeabi_dmul>
 8001012:	f7ff fdf9 	bl	8000c08 <__aeabi_d2uiz>
 8001016:	4604      	mov	r4, r0
 8001018:	f7ff faa4 	bl	8000564 <__aeabi_ui2d>
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <__aeabi_d2ulz+0x38>)
 800101e:	2200      	movs	r2, #0
 8001020:	f7ff fb1a 	bl	8000658 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4630      	mov	r0, r6
 800102a:	4639      	mov	r1, r7
 800102c:	f7ff f95c 	bl	80002e8 <__aeabi_dsub>
 8001030:	f7ff fdea 	bl	8000c08 <__aeabi_d2uiz>
 8001034:	4621      	mov	r1, r4
 8001036:	bdd0      	pop	{r4, r6, r7, pc}
 8001038:	3df00000 	.word	0x3df00000
 800103c:	41f00000 	.word	0x41f00000

08001040 <__udivmoddi4>:
 8001040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	9d08      	ldr	r5, [sp, #32]
 8001046:	4604      	mov	r4, r0
 8001048:	468e      	mov	lr, r1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d14d      	bne.n	80010ea <__udivmoddi4+0xaa>
 800104e:	428a      	cmp	r2, r1
 8001050:	4694      	mov	ip, r2
 8001052:	d969      	bls.n	8001128 <__udivmoddi4+0xe8>
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	b152      	cbz	r2, 8001070 <__udivmoddi4+0x30>
 800105a:	fa01 f302 	lsl.w	r3, r1, r2
 800105e:	f1c2 0120 	rsb	r1, r2, #32
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	fa0c fc02 	lsl.w	ip, ip, r2
 800106a:	ea41 0e03 	orr.w	lr, r1, r3
 800106e:	4094      	lsls	r4, r2
 8001070:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001074:	0c21      	lsrs	r1, r4, #16
 8001076:	fbbe f6f8 	udiv	r6, lr, r8
 800107a:	fa1f f78c 	uxth.w	r7, ip
 800107e:	fb08 e316 	mls	r3, r8, r6, lr
 8001082:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001086:	fb06 f107 	mul.w	r1, r6, r7
 800108a:	4299      	cmp	r1, r3
 800108c:	d90a      	bls.n	80010a4 <__udivmoddi4+0x64>
 800108e:	eb1c 0303 	adds.w	r3, ip, r3
 8001092:	f106 30ff 	add.w	r0, r6, #4294967295
 8001096:	f080 811f 	bcs.w	80012d8 <__udivmoddi4+0x298>
 800109a:	4299      	cmp	r1, r3
 800109c:	f240 811c 	bls.w	80012d8 <__udivmoddi4+0x298>
 80010a0:	3e02      	subs	r6, #2
 80010a2:	4463      	add	r3, ip
 80010a4:	1a5b      	subs	r3, r3, r1
 80010a6:	b2a4      	uxth	r4, r4
 80010a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ac:	fb08 3310 	mls	r3, r8, r0, r3
 80010b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b4:	fb00 f707 	mul.w	r7, r0, r7
 80010b8:	42a7      	cmp	r7, r4
 80010ba:	d90a      	bls.n	80010d2 <__udivmoddi4+0x92>
 80010bc:	eb1c 0404 	adds.w	r4, ip, r4
 80010c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c4:	f080 810a 	bcs.w	80012dc <__udivmoddi4+0x29c>
 80010c8:	42a7      	cmp	r7, r4
 80010ca:	f240 8107 	bls.w	80012dc <__udivmoddi4+0x29c>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010d6:	1be4      	subs	r4, r4, r7
 80010d8:	2600      	movs	r6, #0
 80010da:	b11d      	cbz	r5, 80010e4 <__udivmoddi4+0xa4>
 80010dc:	40d4      	lsrs	r4, r2
 80010de:	2300      	movs	r3, #0
 80010e0:	e9c5 4300 	strd	r4, r3, [r5]
 80010e4:	4631      	mov	r1, r6
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d909      	bls.n	8001102 <__udivmoddi4+0xc2>
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	f000 80ef 	beq.w	80012d2 <__udivmoddi4+0x292>
 80010f4:	2600      	movs	r6, #0
 80010f6:	e9c5 0100 	strd	r0, r1, [r5]
 80010fa:	4630      	mov	r0, r6
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	fab3 f683 	clz	r6, r3
 8001106:	2e00      	cmp	r6, #0
 8001108:	d14a      	bne.n	80011a0 <__udivmoddi4+0x160>
 800110a:	428b      	cmp	r3, r1
 800110c:	d302      	bcc.n	8001114 <__udivmoddi4+0xd4>
 800110e:	4282      	cmp	r2, r0
 8001110:	f200 80f9 	bhi.w	8001306 <__udivmoddi4+0x2c6>
 8001114:	1a84      	subs	r4, r0, r2
 8001116:	eb61 0303 	sbc.w	r3, r1, r3
 800111a:	2001      	movs	r0, #1
 800111c:	469e      	mov	lr, r3
 800111e:	2d00      	cmp	r5, #0
 8001120:	d0e0      	beq.n	80010e4 <__udivmoddi4+0xa4>
 8001122:	e9c5 4e00 	strd	r4, lr, [r5]
 8001126:	e7dd      	b.n	80010e4 <__udivmoddi4+0xa4>
 8001128:	b902      	cbnz	r2, 800112c <__udivmoddi4+0xec>
 800112a:	deff      	udf	#255	; 0xff
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	2a00      	cmp	r2, #0
 8001132:	f040 8092 	bne.w	800125a <__udivmoddi4+0x21a>
 8001136:	eba1 010c 	sub.w	r1, r1, ip
 800113a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800113e:	fa1f fe8c 	uxth.w	lr, ip
 8001142:	2601      	movs	r6, #1
 8001144:	0c20      	lsrs	r0, r4, #16
 8001146:	fbb1 f3f7 	udiv	r3, r1, r7
 800114a:	fb07 1113 	mls	r1, r7, r3, r1
 800114e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001152:	fb0e f003 	mul.w	r0, lr, r3
 8001156:	4288      	cmp	r0, r1
 8001158:	d908      	bls.n	800116c <__udivmoddi4+0x12c>
 800115a:	eb1c 0101 	adds.w	r1, ip, r1
 800115e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001162:	d202      	bcs.n	800116a <__udivmoddi4+0x12a>
 8001164:	4288      	cmp	r0, r1
 8001166:	f200 80cb 	bhi.w	8001300 <__udivmoddi4+0x2c0>
 800116a:	4643      	mov	r3, r8
 800116c:	1a09      	subs	r1, r1, r0
 800116e:	b2a4      	uxth	r4, r4
 8001170:	fbb1 f0f7 	udiv	r0, r1, r7
 8001174:	fb07 1110 	mls	r1, r7, r0, r1
 8001178:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800117c:	fb0e fe00 	mul.w	lr, lr, r0
 8001180:	45a6      	cmp	lr, r4
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x156>
 8001184:	eb1c 0404 	adds.w	r4, ip, r4
 8001188:	f100 31ff 	add.w	r1, r0, #4294967295
 800118c:	d202      	bcs.n	8001194 <__udivmoddi4+0x154>
 800118e:	45a6      	cmp	lr, r4
 8001190:	f200 80bb 	bhi.w	800130a <__udivmoddi4+0x2ca>
 8001194:	4608      	mov	r0, r1
 8001196:	eba4 040e 	sub.w	r4, r4, lr
 800119a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800119e:	e79c      	b.n	80010da <__udivmoddi4+0x9a>
 80011a0:	f1c6 0720 	rsb	r7, r6, #32
 80011a4:	40b3      	lsls	r3, r6
 80011a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ae:	fa20 f407 	lsr.w	r4, r0, r7
 80011b2:	fa01 f306 	lsl.w	r3, r1, r6
 80011b6:	431c      	orrs	r4, r3
 80011b8:	40f9      	lsrs	r1, r7
 80011ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011be:	fa00 f306 	lsl.w	r3, r0, r6
 80011c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011c6:	0c20      	lsrs	r0, r4, #16
 80011c8:	fa1f fe8c 	uxth.w	lr, ip
 80011cc:	fb09 1118 	mls	r1, r9, r8, r1
 80011d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011d4:	fb08 f00e 	mul.w	r0, r8, lr
 80011d8:	4288      	cmp	r0, r1
 80011da:	fa02 f206 	lsl.w	r2, r2, r6
 80011de:	d90b      	bls.n	80011f8 <__udivmoddi4+0x1b8>
 80011e0:	eb1c 0101 	adds.w	r1, ip, r1
 80011e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011e8:	f080 8088 	bcs.w	80012fc <__udivmoddi4+0x2bc>
 80011ec:	4288      	cmp	r0, r1
 80011ee:	f240 8085 	bls.w	80012fc <__udivmoddi4+0x2bc>
 80011f2:	f1a8 0802 	sub.w	r8, r8, #2
 80011f6:	4461      	add	r1, ip
 80011f8:	1a09      	subs	r1, r1, r0
 80011fa:	b2a4      	uxth	r4, r4
 80011fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001200:	fb09 1110 	mls	r1, r9, r0, r1
 8001204:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001208:	fb00 fe0e 	mul.w	lr, r0, lr
 800120c:	458e      	cmp	lr, r1
 800120e:	d908      	bls.n	8001222 <__udivmoddi4+0x1e2>
 8001210:	eb1c 0101 	adds.w	r1, ip, r1
 8001214:	f100 34ff 	add.w	r4, r0, #4294967295
 8001218:	d26c      	bcs.n	80012f4 <__udivmoddi4+0x2b4>
 800121a:	458e      	cmp	lr, r1
 800121c:	d96a      	bls.n	80012f4 <__udivmoddi4+0x2b4>
 800121e:	3802      	subs	r0, #2
 8001220:	4461      	add	r1, ip
 8001222:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001226:	fba0 9402 	umull	r9, r4, r0, r2
 800122a:	eba1 010e 	sub.w	r1, r1, lr
 800122e:	42a1      	cmp	r1, r4
 8001230:	46c8      	mov	r8, r9
 8001232:	46a6      	mov	lr, r4
 8001234:	d356      	bcc.n	80012e4 <__udivmoddi4+0x2a4>
 8001236:	d053      	beq.n	80012e0 <__udivmoddi4+0x2a0>
 8001238:	b15d      	cbz	r5, 8001252 <__udivmoddi4+0x212>
 800123a:	ebb3 0208 	subs.w	r2, r3, r8
 800123e:	eb61 010e 	sbc.w	r1, r1, lr
 8001242:	fa01 f707 	lsl.w	r7, r1, r7
 8001246:	fa22 f306 	lsr.w	r3, r2, r6
 800124a:	40f1      	lsrs	r1, r6
 800124c:	431f      	orrs	r7, r3
 800124e:	e9c5 7100 	strd	r7, r1, [r5]
 8001252:	2600      	movs	r6, #0
 8001254:	4631      	mov	r1, r6
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125a:	f1c2 0320 	rsb	r3, r2, #32
 800125e:	40d8      	lsrs	r0, r3
 8001260:	fa0c fc02 	lsl.w	ip, ip, r2
 8001264:	fa21 f303 	lsr.w	r3, r1, r3
 8001268:	4091      	lsls	r1, r2
 800126a:	4301      	orrs	r1, r0
 800126c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fbb3 f0f7 	udiv	r0, r3, r7
 8001278:	fb07 3610 	mls	r6, r7, r0, r3
 800127c:	0c0b      	lsrs	r3, r1, #16
 800127e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001282:	fb00 f60e 	mul.w	r6, r0, lr
 8001286:	429e      	cmp	r6, r3
 8001288:	fa04 f402 	lsl.w	r4, r4, r2
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x260>
 800128e:	eb1c 0303 	adds.w	r3, ip, r3
 8001292:	f100 38ff 	add.w	r8, r0, #4294967295
 8001296:	d22f      	bcs.n	80012f8 <__udivmoddi4+0x2b8>
 8001298:	429e      	cmp	r6, r3
 800129a:	d92d      	bls.n	80012f8 <__udivmoddi4+0x2b8>
 800129c:	3802      	subs	r0, #2
 800129e:	4463      	add	r3, ip
 80012a0:	1b9b      	subs	r3, r3, r6
 80012a2:	b289      	uxth	r1, r1
 80012a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80012a8:	fb07 3316 	mls	r3, r7, r6, r3
 80012ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80012b0:	fb06 f30e 	mul.w	r3, r6, lr
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d908      	bls.n	80012ca <__udivmoddi4+0x28a>
 80012b8:	eb1c 0101 	adds.w	r1, ip, r1
 80012bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80012c0:	d216      	bcs.n	80012f0 <__udivmoddi4+0x2b0>
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d914      	bls.n	80012f0 <__udivmoddi4+0x2b0>
 80012c6:	3e02      	subs	r6, #2
 80012c8:	4461      	add	r1, ip
 80012ca:	1ac9      	subs	r1, r1, r3
 80012cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012d0:	e738      	b.n	8001144 <__udivmoddi4+0x104>
 80012d2:	462e      	mov	r6, r5
 80012d4:	4628      	mov	r0, r5
 80012d6:	e705      	b.n	80010e4 <__udivmoddi4+0xa4>
 80012d8:	4606      	mov	r6, r0
 80012da:	e6e3      	b.n	80010a4 <__udivmoddi4+0x64>
 80012dc:	4618      	mov	r0, r3
 80012de:	e6f8      	b.n	80010d2 <__udivmoddi4+0x92>
 80012e0:	454b      	cmp	r3, r9
 80012e2:	d2a9      	bcs.n	8001238 <__udivmoddi4+0x1f8>
 80012e4:	ebb9 0802 	subs.w	r8, r9, r2
 80012e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7a3      	b.n	8001238 <__udivmoddi4+0x1f8>
 80012f0:	4646      	mov	r6, r8
 80012f2:	e7ea      	b.n	80012ca <__udivmoddi4+0x28a>
 80012f4:	4620      	mov	r0, r4
 80012f6:	e794      	b.n	8001222 <__udivmoddi4+0x1e2>
 80012f8:	4640      	mov	r0, r8
 80012fa:	e7d1      	b.n	80012a0 <__udivmoddi4+0x260>
 80012fc:	46d0      	mov	r8, sl
 80012fe:	e77b      	b.n	80011f8 <__udivmoddi4+0x1b8>
 8001300:	3b02      	subs	r3, #2
 8001302:	4461      	add	r1, ip
 8001304:	e732      	b.n	800116c <__udivmoddi4+0x12c>
 8001306:	4630      	mov	r0, r6
 8001308:	e709      	b.n	800111e <__udivmoddi4+0xde>
 800130a:	4464      	add	r4, ip
 800130c:	3802      	subs	r0, #2
 800130e:	e742      	b.n	8001196 <__udivmoddi4+0x156>

08001310 <__aeabi_idiv0>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	0000      	movs	r0, r0
	...

08001318 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001322:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001348 <sqr+0x30>
 8001326:	ed97 0b00 	vldr	d0, [r7]
 800132a:	f00f fcb5 	bl	8010c98 <pow>
 800132e:	eeb0 7a40 	vmov.f32	s14, s0
 8001332:	eef0 7a60 	vmov.f32	s15, s1
}
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	00000000 	.word	0x00000000
 800134c:	40000000 	.word	0x40000000

08001350 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(BME_280_t* BME)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	//velocity measuiring
	currentTime_1 = (float)HAL_GetTick() / 1000.0;
 8001358:	f004 ffc6 	bl	80062e8 <HAL_GetTick>
 800135c:	ee07 0a90 	vmov	s15, r0
 8001360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f91e 	bl	80005a8 <__aeabi_f2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <algorithm_1_update+0x218>)
 8001372:	f7ff fa9b 	bl	80008ac <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc63 	bl	8000c48 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a79      	ldr	r2, [pc, #484]	; (800156c <algorithm_1_update+0x21c>)
 8001386:	6013      	str	r3, [r2, #0]
  if(fabs(currentTime_1 - lastTime_1) > 0.1)
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <algorithm_1_update+0x21c>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <algorithm_1_update+0x220>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	eef0 7ae7 	vabs.f32	s15, s15
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f902 	bl	80005a8 <__aeabi_f2d>
 80013a4:	a36e      	add	r3, pc, #440	; (adr r3, 8001560 <algorithm_1_update+0x210>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff fbe5 	bl	8000b78 <__aeabi_dcmpgt>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <algorithm_1_update+0xa6>
  {
	  float currentAltitude = BME->altitude;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	60fb      	str	r3, [r7, #12]
	  BME->velocity = (currentAltitude - lastAltitude_1) / (currentTime_1 - lastTime_1);
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <algorithm_1_update+0x224>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013c8:	4b68      	ldr	r3, [pc, #416]	; (800156c <algorithm_1_update+0x21c>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <algorithm_1_update+0x220>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  lastAltitude_1 = currentAltitude;
 80013e2:	4a64      	ldr	r2, [pc, #400]	; (8001574 <algorithm_1_update+0x224>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6013      	str	r3, [r2, #0]
	  lastTime_1 = currentTime_1;
 80013e8:	4b60      	ldr	r3, [pc, #384]	; (800156c <algorithm_1_update+0x21c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <algorithm_1_update+0x220>)
 80013ee:	6013      	str	r3, [r2, #0]
	  isUpdated_1 = 1;
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <algorithm_1_update+0x228>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
  }

  if(isUpdated_1)
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <algorithm_1_update+0x228>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80ab 	beq.w	8001556 <algorithm_1_update+0x206>
  {
	isUpdated_1 = 0;
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <algorithm_1_update+0x228>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]

	//rising detection
	if(BME->velocity > RISING_VELOCITY_TRESHOLD && isRising == 0)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800140c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd09      	ble.n	800142e <algorithm_1_update+0xde>
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <algorithm_1_update+0x22c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <algorithm_1_update+0xde>
	{
	  risingCounter++;
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <algorithm_1_update+0x230>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a55      	ldr	r2, [pc, #340]	; (8001580 <algorithm_1_update+0x230>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e002      	b.n	8001434 <algorithm_1_update+0xe4>
	}
	else
	{
	  risingCounter = 0;
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <algorithm_1_update+0x230>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	}

	if(risingCounter == 1 && isRising == 0 && isFalling == 0 )
 8001434:	4b52      	ldr	r3, [pc, #328]	; (8001580 <algorithm_1_update+0x230>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11c      	bne.n	8001476 <algorithm_1_update+0x126>
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <algorithm_1_update+0x22c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d118      	bne.n	8001476 <algorithm_1_update+0x126>
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <algorithm_1_update+0x234>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d114      	bne.n	8001476 <algorithm_1_update+0x126>
	{
	  isRising = 1;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <algorithm_1_update+0x22c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
	  algorithm_1_start_time_u32 = HAL_GetTick();
 8001452:	f004 ff49 	bl	80062e8 <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <algorithm_1_update+0x238>)
 800145a:	6013      	str	r3, [r2, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <algorithm_1_update+0x23c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <algorithm_1_update+0x23c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2a02      	cmp	r2, #2
 8001468:	bf38      	it	cc
 800146a:	2202      	movcc	r2, #2
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001470:	4847      	ldr	r0, [pc, #284]	; (8001590 <algorithm_1_update+0x240>)
 8001472:	f002 f96b 	bl	800374c <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BME->velocity < FALLING_VELOCITY_TRESHOLD && HAL_GetTick() - algorithm_1_start_time_u32 > ALGORITHM_1_LOCKOUT_TIME)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800147c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d50f      	bpl.n	80014aa <algorithm_1_update+0x15a>
 800148a:	f004 ff2d 	bl	80062e8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <algorithm_1_update+0x238>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800149a:	4293      	cmp	r3, r2
 800149c:	d905      	bls.n	80014aa <algorithm_1_update+0x15a>
	{
	  fallingCounter++;
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <algorithm_1_update+0x244>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <algorithm_1_update+0x244>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e002      	b.n	80014b0 <algorithm_1_update+0x160>
	}
	else
	{
	  fallingCounter = 0;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <algorithm_1_update+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	}

	if(fallingCounter == 1 && isRising == 1 && isFalling == 0 && BME->altitude > ARMING_ALTITUDE_1)
 80014b0:	4b38      	ldr	r3, [pc, #224]	; (8001594 <algorithm_1_update+0x244>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d120      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <algorithm_1_update+0x22c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d11c      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <algorithm_1_update+0x234>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d118      	bne.n	80014fa <algorithm_1_update+0x1aa>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001598 <algorithm_1_update+0x248>
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	dd0e      	ble.n	80014fa <algorithm_1_update+0x1aa>
	{
	  isFalling = 1;
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <algorithm_1_update+0x234>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <algorithm_1_update+0x23c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <algorithm_1_update+0x23c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2a04      	cmp	r2, #4
 80014ee:	bf38      	it	cc
 80014f0:	2204      	movcc	r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
	  deploy_p_1();
 80014f6:	f003 f961 	bl	80047bc <deploy_p_1>

	//Second Parachute
	static int second_p_counter_1 = 0;
	static uint8_t is_second_p_OK_1 = 0;

	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling == 1 && is_second_p_OK_1 == 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001500:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800159c <algorithm_1_update+0x24c>
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d50d      	bpl.n	800152a <algorithm_1_update+0x1da>
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <algorithm_1_update+0x234>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d109      	bne.n	800152a <algorithm_1_update+0x1da>
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <algorithm_1_update+0x250>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <algorithm_1_update+0x1da>
	{
		second_p_counter_1++;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <algorithm_1_update+0x254>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <algorithm_1_update+0x254>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e002      	b.n	8001530 <algorithm_1_update+0x1e0>
	}
	else{
		second_p_counter_1 = 0;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <algorithm_1_update+0x254>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	}
	if(second_p_counter_1 == 10)
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <algorithm_1_update+0x254>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b0a      	cmp	r3, #10
 8001536:	d10e      	bne.n	8001556 <algorithm_1_update+0x206>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <algorithm_1_update+0x23c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <algorithm_1_update+0x23c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2a05      	cmp	r2, #5
 8001544:	bf38      	it	cc
 8001546:	2205      	movcc	r2, #5
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
		is_second_p_OK_1 = 1;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <algorithm_1_update+0x250>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 8001552:	f003 f943 	bl	80047dc <deploy_p_2>
	}
  }
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	9999999a 	.word	0x9999999a
 8001564:	3fb99999 	.word	0x3fb99999
 8001568:	408f4000 	.word	0x408f4000
 800156c:	20000204 	.word	0x20000204
 8001570:	20000208 	.word	0x20000208
 8001574:	2000020c 	.word	0x2000020c
 8001578:	20000228 	.word	0x20000228
 800157c:	20000226 	.word	0x20000226
 8001580:	20000210 	.word	0x20000210
 8001584:	20000224 	.word	0x20000224
 8001588:	20000220 	.word	0x20000220
 800158c:	20000004 	.word	0x20000004
 8001590:	200007b4 	.word	0x200007b4
 8001594:	20000214 	.word	0x20000214
 8001598:	447a0000 	.word	0x447a0000
 800159c:	440e8000 	.word	0x440e8000
 80015a0:	2000022a 	.word	0x2000022a
 80015a4:	2000022c 	.word	0x2000022c

080015a8 <algorithm_2_update>:

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI, float angle)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	ed87 0a01 	vstr	s0, [r7, #4]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fff3 	bl	80005a8 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b10 	vmov	d0, r2, r3
 80015ca:	f7ff fea5 	bl	8001318 <sqr>
 80015ce:	ec55 4b10 	vmov	r4, r5, d0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffe5 	bl	80005a8 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b10 	vmov	d0, r2, r3
 80015e6:	f7ff fe97 	bl	8001318 <sqr>
 80015ea:	ec53 2b10 	vmov	r2, r3, d0
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fe7b 	bl	80002ec <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	461d      	mov	r5, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffcf 	bl	80005a8 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b10 	vmov	d0, r2, r3
 8001612:	f7ff fe81 	bl	8001318 <sqr>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fe65 	bl	80002ec <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb0d 	bl	8000c48 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	ee00 3a10 	vmov	s0, r3
 8001634:	f00f fbcc 	bl	8010dd0 <sqrtf>
 8001638:	eef0 7a40 	vmov.f32	s15, s0
 800163c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800189c <algorithm_2_update+0x2f4>
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	dd34      	ble.n	80016b4 <algorithm_2_update+0x10c>
 800164a:	4b95      	ldr	r3, [pc, #596]	; (80018a0 <algorithm_2_update+0x2f8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d130      	bne.n	80016b4 <algorithm_2_update+0x10c>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001658:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80018a4 <algorithm_2_update+0x2fc>
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d516      	bpl.n	8001694 <algorithm_2_update+0xec>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800166c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80018a8 <algorithm_2_update+0x300>
 8001670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd0c      	ble.n	8001694 <algorithm_2_update+0xec>
			saved_datas->base_altitude = BME->altitude + saved_datas->base_altitude;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001680:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <algorithm_2_update+0x304>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <algorithm_2_update+0x304>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		isRising_2 = 1;
 8001694:	4b82      	ldr	r3, [pc, #520]	; (80018a0 <algorithm_2_update+0x2f8>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800169a:	4b84      	ldr	r3, [pc, #528]	; (80018ac <algorithm_2_update+0x304>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b82      	ldr	r3, [pc, #520]	; (80018ac <algorithm_2_update+0x304>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2a02      	cmp	r2, #2
 80016a6:	bf38      	it	cc
 80016a8:	2202      	movcc	r2, #2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016ae:	4880      	ldr	r0, [pc, #512]	; (80018b0 <algorithm_2_update+0x308>)
 80016b0:	f002 f84c 	bl	800374c <ext_pin_open>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 101)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80016ba:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80018b4 <algorithm_2_update+0x30c>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d50c      	bpl.n	80016e2 <algorithm_2_update+0x13a>
 80016c8:	4b75      	ldr	r3, [pc, #468]	; (80018a0 <algorithm_2_update+0x2f8>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <algorithm_2_update+0x13a>
 80016d0:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <algorithm_2_update+0x310>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	dc04      	bgt.n	80016e2 <algorithm_2_update+0x13a>
	{
		burnout_counter++;
 80016d8:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <algorithm_2_update+0x310>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a76      	ldr	r2, [pc, #472]	; (80018b8 <algorithm_2_update+0x310>)
 80016e0:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <algorithm_2_update+0x310>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d10c      	bne.n	8001704 <algorithm_2_update+0x15c>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : saved_datas->r_status;
 80016ea:	4b70      	ldr	r3, [pc, #448]	; (80018ac <algorithm_2_update+0x304>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <algorithm_2_update+0x304>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2a03      	cmp	r2, #3
 80016f6:	bf38      	it	cc
 80016f8:	2203      	movcc	r2, #3
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016fe:	486c      	ldr	r0, [pc, #432]	; (80018b0 <algorithm_2_update+0x308>)
 8001700:	f002 f824 	bl	800374c <ext_pin_open>
	}

	//Falling detection || First parachute
	if(angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && BME->altitude > ARMING_ALTITUDE_2)
 8001704:	edd7 7a01 	vldr	s15, [r7, #4]
 8001708:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80018bc <algorithm_2_update+0x314>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	dd20      	ble.n	8001758 <algorithm_2_update+0x1b0>
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <algorithm_2_update+0x2f8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d11c      	bne.n	8001758 <algorithm_2_update+0x1b0>
 800171e:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <algorithm_2_update+0x318>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <algorithm_2_update+0x1b0>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800172c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	dd0e      	ble.n	8001758 <algorithm_2_update+0x1b0>
	{
		isFalling_2 = 1;
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <algorithm_2_update+0x318>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <algorithm_2_update+0x304>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <algorithm_2_update+0x304>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2a04      	cmp	r2, #4
 800174c:	bf38      	it	cc
 800174e:	2204      	movcc	r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 8001754:	f003 f832 	bl	80047bc <deploy_p_1>
	}

	if(is_BME_ok == 1)
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <algorithm_2_update+0x31c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d12d      	bne.n	80017bc <algorithm_2_update+0x214>
	{
		//Second Parachute
		if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001766:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80018c8 <algorithm_2_update+0x320>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d50d      	bpl.n	8001790 <algorithm_2_update+0x1e8>
 8001774:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <algorithm_2_update+0x318>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d109      	bne.n	8001790 <algorithm_2_update+0x1e8>
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <algorithm_2_update+0x324>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <algorithm_2_update+0x1e8>
		{
			secondP_counter++;
 8001784:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <algorithm_2_update+0x328>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <algorithm_2_update+0x328>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e002      	b.n	8001796 <algorithm_2_update+0x1ee>
		}
		else{
			secondP_counter = 0;
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <algorithm_2_update+0x328>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
		}
		if(secondP_counter == 10)
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <algorithm_2_update+0x328>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d10e      	bne.n	80017bc <algorithm_2_update+0x214>
		{
			saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <algorithm_2_update+0x304>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <algorithm_2_update+0x304>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2a05      	cmp	r2, #5
 80017aa:	bf38      	it	cc
 80017ac:	2205      	movcc	r2, #5
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
			is_secondP_OK = 1;
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <algorithm_2_update+0x324>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
			deploy_p_2();
 80017b8:	f003 f810 	bl	80047dc <deploy_p_2>
		}
	}
	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80017c2:	eeb0 0a47 	vmov.f32	s0, s14
 80017c6:	eef0 0a67 	vmov.f32	s1, s15
 80017ca:	f7ff fda5 	bl	8001318 <sqr>
 80017ce:	ec55 4b10 	vmov	r4, r5, d0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80017d8:	eeb0 0a47 	vmov.f32	s0, s14
 80017dc:	eef0 0a67 	vmov.f32	s1, s15
 80017e0:	f7ff fd9a 	bl	8001318 <sqr>
 80017e4:	ec53 2b10 	vmov	r2, r3, d0
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fd7e 	bl	80002ec <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	f7ff fd87 	bl	8001318 <sqr>
 800180a:	ec53 2b10 	vmov	r2, r3, d0
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd6b 	bl	80002ec <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	f00f faa7 	bl	8010d78 <sqrt>
 800182a:	ec51 0b10 	vmov	r0, r1, d0
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <algorithm_2_update+0x32c>)
 8001834:	f7ff f982 	bl	8000b3c <__aeabi_dcmplt>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d011      	beq.n	8001862 <algorithm_2_update+0x2ba>
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <algorithm_2_update+0x318>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10d      	bne.n	8001862 <algorithm_2_update+0x2ba>
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <algorithm_2_update+0x324>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d109      	bne.n	8001862 <algorithm_2_update+0x2ba>
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <algorithm_2_update+0x330>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <algorithm_2_update+0x2ba>
	{
			TD_counter++;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <algorithm_2_update+0x334>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <algorithm_2_update+0x334>)
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e002      	b.n	8001868 <algorithm_2_update+0x2c0>
	}
	else{
		TD_counter = 0;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <algorithm_2_update+0x334>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <algorithm_2_update+0x334>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001870:	dd0f      	ble.n	8001892 <algorithm_2_update+0x2ea>
	{
		is_TD = 1;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <algorithm_2_update+0x330>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : saved_datas->r_status;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <algorithm_2_update+0x304>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <algorithm_2_update+0x304>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2a06      	cmp	r2, #6
 8001884:	bf38      	it	cc
 8001886:	2206      	movcc	r2, #6
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <algorithm_2_update+0x308>)
 800188e:	f001 ff5d 	bl	800374c <ext_pin_open>
	}
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	453b8000 	.word	0x453b8000
 80018a0:	20000227 	.word	0x20000227
 80018a4:	43480000 	.word	0x43480000
 80018a8:	c3480000 	.word	0xc3480000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	200007b4 	.word	0x200007b4
 80018b4:	c4fa0000 	.word	0xc4fa0000
 80018b8:	20000230 	.word	0x20000230
 80018bc:	42a00000 	.word	0x42a00000
 80018c0:	20000225 	.word	0x20000225
 80018c4:	20000814 	.word	0x20000814
 80018c8:	440e8000 	.word	0x440e8000
 80018cc:	20000229 	.word	0x20000229
 80018d0:	2000021c 	.word	0x2000021c
 80018d4:	40240000 	.word	0x40240000
 80018d8:	20000234 	.word	0x20000234
 80018dc:	20000218 	.word	0x20000218

080018e0 <bme280_getVals>:
float array[filterSize];

int currentIndex = 0;

static void bme280_getVals()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <bme280_getVals+0xac>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	22f3      	movs	r2, #243	; 0xf3
 80018fa:	21ec      	movs	r1, #236	; 0xec
 80018fc:	f006 fc40 	bl	8008180 <HAL_I2C_Mem_Read>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <bme280_getVals+0xb0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 800190e:	793b      	ldrb	r3, [r7, #4]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d035      	beq.n	8001984 <bme280_getVals+0xa4>
	{
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <bme280_getVals+0xac>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	2314      	movs	r3, #20
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2308      	movs	r3, #8
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	22f7      	movs	r2, #247	; 0xf7
 800192c:	21ec      	movs	r1, #236	; 0xec
 800192e:	f006 fc27 	bl	8008180 <HAL_I2C_Mem_Read>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
		if (retVal == HAL_OK){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d123      	bne.n	8001984 <bme280_getVals+0xa4>
			BME->isUpdated = 1;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <bme280_getVals+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	031a      	lsls	r2, r3, #12
 800194a:	7a3b      	ldrb	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4313      	orrs	r3, r2
 8001950:	7a7a      	ldrb	r2, [r7, #9]
 8001952:	0912      	lsrs	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	431a      	orrs	r2, r3
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <bme280_getVals+0xb0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
			BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	031a      	lsls	r2, r3, #12
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4313      	orrs	r3, r2
 8001968:	79ba      	ldrb	r2, [r7, #6]
 800196a:	0912      	lsrs	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	431a      	orrs	r2, r3
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <bme280_getVals+0xb0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	609a      	str	r2, [r3, #8]
			BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 8001976:	7abb      	ldrb	r3, [r7, #10]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	7afa      	ldrb	r2, [r7, #11]
 800197c:	431a      	orrs	r2, r3
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <bme280_getVals+0xb0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60da      	str	r2, [r3, #12]
		}
	}
	UNUSED(retVal);
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000238 	.word	0x20000238
 8001990:	2000023c 	.word	0x2000023c
 8001994:	00000000 	.word	0x00000000

08001998 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <bme280_get_altitude+0xd0>)
 80019a0:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <bme280_get_altitude+0xd4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019b2:	ee16 0a90 	vmov	r0, s13
 80019b6:	f7fe fdf7 	bl	80005a8 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001a58 <bme280_get_altitude+0xc0>
 80019c2:	ec43 2b10 	vmov	d0, r2, r3
 80019c6:	f00f f967 	bl	8010c98 <pow>
 80019ca:	ec53 2b10 	vmov	r2, r3, d0
 80019ce:	f04f 0000 	mov.w	r0, #0
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <bme280_get_altitude+0xd8>)
 80019d4:	f7fe fc88 	bl	80002e8 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	a31f      	add	r3, pc, #124	; (adr r3, 8001a60 <bme280_get_altitude+0xc8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe37 	bl	8000658 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f929 	bl	8000c48 <__aeabi_d2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - saved_datas->base_altitude;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <bme280_get_altitude+0xdc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	ed97 7a00 	vldr	s14, [r7]
 8001a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dc00      	bgt.n	8001a2e <bme280_get_altitude+0x96>
	{
		saved_datas->max_altitude = BME->altitude;
	}
}
 8001a2c:	e00e      	b.n	8001a4c <bme280_get_altitude+0xb4>
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d005      	beq.n	8001a4c <bme280_get_altitude+0xb4>
		saved_datas->max_altitude = BME->altitude;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <bme280_get_altitude+0xd4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <bme280_get_altitude+0xdc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	ccd9456c 	.word	0xccd9456c
 8001a5c:	3fc85b95 	.word	0x3fc85b95
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40e5a540 	.word	0x40e5a540
 8001a68:	447d5000 	.word	0x447d5000
 8001a6c:	2000023c 	.word	0x2000023c
 8001a70:	3ff00000 	.word	0x3ff00000
 8001a74:	20000004 	.word	0x20000004

08001a78 <bme280_config>:
void bme280_config()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af04      	add	r7, sp, #16
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	saved_datas->base_altitude = 0.0;
 8001a7e:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <bme280_config+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(I2C_);
 8001a88:	4b98      	ldr	r3, [pc, #608]	; (8001cec <bme280_config+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 fa4d 	bl	8007f2c <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f004 fc34 	bl	8006300 <HAL_Delay>
	HAL_I2C_Init(I2C_);
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <bme280_config+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 f901 	bl	8007ca4 <HAL_I2C_Init>
	HAL_Delay(5);
 8001aa2:	2005      	movs	r0, #5
 8001aa4:	f004 fc2c 	bl	8006300 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 8001aa8:	4b90      	ldr	r3, [pc, #576]	; (8001cec <bme280_config+0x274>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	23c8      	movs	r3, #200	; 0xc8
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	2319      	movs	r3, #25
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2288      	movs	r2, #136	; 0x88
 8001abc:	21ec      	movs	r1, #236	; 0xec
 8001abe:	f006 fb5f 	bl	8008180 <HAL_I2C_Mem_Read>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001ac6:	793b      	ldrb	r3, [r7, #4]
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b87      	ldr	r3, [pc, #540]	; (8001cf0 <bme280_config+0x278>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	b292      	uxth	r2, r2
 8001adc:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	b219      	sxth	r1, r3
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <bme280_config+0x278>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	b212      	sxth	r2, r2
 8001af2:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001af4:	7a3b      	ldrb	r3, [r7, #8]
 8001af6:	b219      	sxth	r1, r3
 8001af8:	7a7b      	ldrb	r3, [r7, #9]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <bme280_config+0x278>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	b212      	sxth	r2, r2
 8001b08:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001b0a:	7abb      	ldrb	r3, [r7, #10]
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <bme280_config+0x278>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	b219      	sxth	r1, r3
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <bme280_config+0x278>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	b212      	sxth	r2, r2
 8001b36:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	b219      	sxth	r1, r3
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <bme280_config+0x278>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	b212      	sxth	r2, r2
 8001b4c:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001b4e:	7c3b      	ldrb	r3, [r7, #16]
 8001b50:	b219      	sxth	r1, r3
 8001b52:	7c7b      	ldrb	r3, [r7, #17]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <bme280_config+0x278>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	b212      	sxth	r2, r2
 8001b62:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001b64:	7cbb      	ldrb	r3, [r7, #18]
 8001b66:	b219      	sxth	r1, r3
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <bme280_config+0x278>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	b212      	sxth	r2, r2
 8001b78:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001b7a:	7d3b      	ldrb	r3, [r7, #20]
 8001b7c:	b219      	sxth	r1, r3
 8001b7e:	7d7b      	ldrb	r3, [r7, #21]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <bme280_config+0x278>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	b212      	sxth	r2, r2
 8001b8e:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001b90:	7dbb      	ldrb	r3, [r7, #22]
 8001b92:	b219      	sxth	r1, r3
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <bme280_config+0x278>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	b212      	sxth	r2, r2
 8001ba4:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001ba6:	7e3b      	ldrb	r3, [r7, #24]
 8001ba8:	b219      	sxth	r1, r3
 8001baa:	7e7b      	ldrb	r3, [r7, #25]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <bme280_config+0x278>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	b212      	sxth	r2, r2
 8001bba:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001bbc:	7ebb      	ldrb	r3, [r7, #26]
 8001bbe:	b219      	sxth	r1, r3
 8001bc0:	7efb      	ldrb	r3, [r7, #27]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <bme280_config+0x278>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	b212      	sxth	r2, r2
 8001bd0:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <bme280_config+0x278>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	7f3a      	ldrb	r2, [r7, #28]
 8001bda:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <bme280_config+0x274>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2307      	movs	r3, #7
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2301      	movs	r3, #1
 8001bee:	22e1      	movs	r2, #225	; 0xe1
 8001bf0:	21ec      	movs	r1, #236	; 0xec
 8001bf2:	f006 fac5 	bl	8008180 <HAL_I2C_Mem_Read>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001bfa:	793b      	ldrb	r3, [r7, #4]
 8001bfc:	b219      	sxth	r1, r3
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <bme280_config+0x278>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	b212      	sxth	r2, r2
 8001c0e:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <bme280_config+0x278>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	79ba      	ldrb	r2, [r7, #6]
 8001c18:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001c1a:	7a3b      	ldrb	r3, [r7, #8]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b219      	sxth	r1, r3
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <bme280_config+0x278>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	b212      	sxth	r2, r2
 8001c34:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001c36:	7a3b      	ldrb	r3, [r7, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b219      	sxth	r1, r3
 8001c3e:	7a7b      	ldrb	r3, [r7, #9]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <bme280_config+0x278>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	b212      	sxth	r2, r2
 8001c4e:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 8001c50:	7aba      	ldrb	r2, [r7, #10]
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <bme280_config+0x278>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b252      	sxtb	r2, r2
 8001c5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_output_speed;
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <bme280_config+0x278>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	7c5b      	ldrb	r3, [r3, #17]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <bme280_config+0x274>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	2332      	movs	r3, #50	; 0x32
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	1cfb      	adds	r3, r7, #3
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	22f2      	movs	r2, #242	; 0xf2
 8001c80:	21ec      	movs	r1, #236	; 0xec
 8001c82:	f006 f983 	bl	8007f8c <HAL_I2C_Mem_Write>
 8001c86:	4603      	mov	r3, r0
 8001c88:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);																		//Mode has been chosed.
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <bme280_config+0x278>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	7c1b      	ldrb	r3, [r3, #16]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	b25a      	sxtb	r2, r3
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <bme280_config+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	7c5b      	ldrb	r3, [r3, #17]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <bme280_config+0x278>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	7c5b      	ldrb	r3, [r3, #17]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <bme280_config+0x274>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	2332      	movs	r3, #50	; 0x32
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	1cfb      	adds	r3, r7, #3
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	22f4      	movs	r2, #244	; 0xf4
 8001cd0:	21ec      	movs	r1, #236	; 0xec
 8001cd2:	f006 f95b 	bl	8007f8c <HAL_I2C_Mem_Write>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	70fb      	strb	r3, [r7, #3]
	data_ctrl = (BME->device_config.bme280_filter << 2);
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <bme280_config+0x278>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	7c9b      	ldrb	r3, [r3, #18]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e005      	b.n	8001cf4 <bme280_config+0x27c>
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000238 	.word	0x20000238
 8001cf0:	2000023c 	.word	0x2000023c
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <bme280_config+0x308>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2332      	movs	r3, #50	; 0x32
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	1cfb      	adds	r3, r7, #3
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	22f5      	movs	r2, #245	; 0xf5
 8001d0e:	21ec      	movs	r1, #236	; 0xec
 8001d10:	f006 f93c 	bl	8007f8c <HAL_I2C_Mem_Write>
 8001d14:	4603      	mov	r3, r0
 8001d16:	77fb      	strb	r3, [r7, #31]

	float base = 0.0;
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_Delay(100);
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f004 faee 	bl	8006300 <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	e011      	b.n	8001d4e <bme280_config+0x2d6>
	{
	  bme280_update();
 8001d2a:	f000 f865 	bl	8001df8 <bme280_update>
	  base +=  BME->altitude;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <bme280_config+0x30c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  HAL_Delay(30);
 8001d42:	201e      	movs	r0, #30
 8001d44:	f004 fadc 	bl	8006300 <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b1d      	cmp	r3, #29
 8001d52:	ddea      	ble.n	8001d2a <bme280_config+0x2b2>
	}
	saved_datas->base_altitude = (base / 30.0);
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <bme280_config+0x310>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d5c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	bme280_update();
 8001d68:	f000 f846 	bl	8001df8 <bme280_update>
	saved_datas->max_altitude = 0.0;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <bme280_config+0x310>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	63da      	str	r2, [r3, #60]	; 0x3c

	UNUSED(retVal);
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000238 	.word	0x20000238
 8001d84:	2000023c 	.word	0x2000023c
 8001d88:	20000004 	.word	0x20000004

08001d8c <bme280_init>:

void bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af04      	add	r7, sp, #16
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	BME = BME_sensor;
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <bme280_init+0x5c>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <bme280_init+0x60>)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6013      	str	r3, [r2, #0]
	BME->parameters = (BME_parameters_t *) &saved_datas->bme_params;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <bme280_init+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <bme280_init+0x5c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3214      	adds	r2, #20
 8001dac:	601a      	str	r2, [r3, #0]
	uint8_t buf[1];
	HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <bme280_init+0x60>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	2332      	movs	r3, #50	; 0x32
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	22d0      	movs	r2, #208	; 0xd0
 8001dc4:	21ec      	movs	r1, #236	; 0xec
 8001dc6:	f006 f9db 	bl	8008180 <HAL_I2C_Mem_Read>
	if(*buf == 0x60)
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	2b60      	cmp	r3, #96	; 0x60
 8001dce:	d103      	bne.n	8001dd8 <bme280_init+0x4c>
		is_BME_ok = 1;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <bme280_init+0x68>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
	else
		is_BME_ok = 0;


}
 8001dd6:	e002      	b.n	8001dde <bme280_init+0x52>
		is_BME_ok = 0;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <bme280_init+0x68>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000023c 	.word	0x2000023c
 8001dec:	20000238 	.word	0x20000238
 8001df0:	20000004 	.word	0x20000004
 8001df4:	20000814 	.word	0x20000814

08001df8 <bme280_update>:


void bme280_update(){
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b0d2      	sub	sp, #328	; 0x148
 8001dfe:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001e00:	f7ff fd6e 	bl	80018e0 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001e04:	4bd4      	ldr	r3, [pc, #848]	; (8002158 <bme280_update+0x360>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 83bc 	bne.w	800258a <bme280_update+0x792>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001e12:	4bd1      	ldr	r3, [pc, #836]	; (8002158 <bme280_update+0x360>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001e1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e20:	10da      	asrs	r2, r3, #3
 8001e22:	4bcd      	ldr	r3, [pc, #820]	; (8002158 <bme280_update+0x360>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	4bc9      	ldr	r3, [pc, #804]	; (8002158 <bme280_update+0x360>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	12db      	asrs	r3, r3, #11
 8001e40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001e44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e48:	111a      	asrs	r2, r3, #4
 8001e4a:	4bc3      	ldr	r3, [pc, #780]	; (8002158 <bme280_update+0x360>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	1ad1      	subs	r1, r2, r3
 8001e56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e5a:	111a      	asrs	r2, r3, #4
 8001e5c:	4bbe      	ldr	r3, [pc, #760]	; (8002158 <bme280_update+0x360>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	131a      	asrs	r2, r3, #12
 8001e6e:	4bba      	ldr	r3, [pc, #744]	; (8002158 <bme280_update+0x360>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	139b      	asrs	r3, r3, #14
 8001e7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001e82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001e90:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3380      	adds	r3, #128	; 0x80
 8001e9c:	121b      	asrs	r3, r3, #8
 8001e9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eae:	4baa      	ldr	r3, [pc, #680]	; (8002158 <bme280_update+0x360>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800215c <bme280_update+0x364>
 8001eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eba:	edc3 7a05 	vstr	s15, [r3, #20]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001ebe:	4ba6      	ldr	r3, [pc, #664]	; (8002158 <bme280_update+0x360>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec8:	657a      	str	r2, [r7, #84]	; 0x54
 8001eca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ece:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ed6:	17da      	asrs	r2, r3, #31
 8001ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001edc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001ee0:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eec:	4613      	mov	r3, r2
 8001eee:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001efc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f04:	fb03 f102 	mul.w	r1, r3, r2
 8001f08:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	18ca      	adds	r2, r1, r3
 8001f16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f1a:	fba3 4503 	umull	r4, r5, r3, r3
 8001f1e:	1953      	adds	r3, r2, r5
 8001f20:	461d      	mov	r5, r3
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <bme280_update+0x360>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	8a1b      	ldrh	r3, [r3, #16]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	17da      	asrs	r2, r3, #31
 8001f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f38:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	fb03 f205 	mul.w	r2, r3, r5
 8001f42:	460b      	mov	r3, r1
 8001f44:	fb04 f303 	mul.w	r3, r4, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	fba4 ab02 	umull	sl, fp, r4, r2
 8001f50:	445b      	add	r3, fp
 8001f52:	469b      	mov	fp, r3
 8001f54:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001f58:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001f5c:	4b7e      	ldr	r3, [pc, #504]	; (8002158 <bme280_update+0x360>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	89db      	ldrh	r3, [r3, #14]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	17da      	asrs	r2, r3, #31
 8001f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f6e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f76:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	fb02 f203 	mul.w	r2, r2, r3
 8001f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f84:	4621      	mov	r1, r4
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	441a      	add	r2, r3
 8001f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f90:	4621      	mov	r1, r4
 8001f92:	fba3 8901 	umull	r8, r9, r3, r1
 8001f96:	eb02 0309 	add.w	r3, r2, r9
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001fa8:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001fac:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001fb0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fb4:	1814      	adds	r4, r2, r0
 8001fb6:	643c      	str	r4, [r7, #64]	; 0x40
 8001fb8:	414b      	adcs	r3, r1
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
 8001fbc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001fc0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <bme280_update+0x360>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	899b      	ldrh	r3, [r3, #12]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	17da      	asrs	r2, r3, #31
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fd6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fe6:	00d9      	lsls	r1, r3, #3
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fee:	1814      	adds	r4, r2, r0
 8001ff0:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ff2:	414b      	adcs	r3, r1
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001ffa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001ffe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002002:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002006:	fb03 f102 	mul.w	r1, r3, r2
 800200a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800200e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	18ca      	adds	r2, r1, r3
 8002018:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800201c:	fba3 1303 	umull	r1, r3, r3, r3
 8002020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002024:	460b      	mov	r3, r1
 8002026:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800202a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <bme280_update+0x360>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	895b      	ldrh	r3, [r3, #10]
 800203c:	b21b      	sxth	r3, r3
 800203e:	b21b      	sxth	r3, r3
 8002040:	17da      	asrs	r2, r3, #31
 8002042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002046:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800204a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800204e:	462b      	mov	r3, r5
 8002050:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002054:	4642      	mov	r2, r8
 8002056:	fb02 f203 	mul.w	r2, r2, r3
 800205a:	464b      	mov	r3, r9
 800205c:	4621      	mov	r1, r4
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	4622      	mov	r2, r4
 8002066:	4641      	mov	r1, r8
 8002068:	fba2 1201 	umull	r1, r2, r2, r1
 800206c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002070:	460a      	mov	r2, r1
 8002072:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002076:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800207a:	4413      	add	r3, r2
 800207c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002080:	f04f 0000 	mov.w	r0, #0
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800208c:	4623      	mov	r3, r4
 800208e:	0a18      	lsrs	r0, r3, #8
 8002090:	462b      	mov	r3, r5
 8002092:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002096:	462b      	mov	r3, r5
 8002098:	1219      	asrs	r1, r3, #8
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <bme280_update+0x360>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	891b      	ldrh	r3, [r3, #8]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	17da      	asrs	r2, r3, #31
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020b8:	464a      	mov	r2, r9
 80020ba:	fb02 f203 	mul.w	r2, r2, r3
 80020be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020c2:	4644      	mov	r4, r8
 80020c4:	fb04 f303 	mul.w	r3, r4, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ce:	4644      	mov	r4, r8
 80020d0:	fba3 4304 	umull	r4, r3, r3, r4
 80020d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020d8:	4623      	mov	r3, r4
 80020da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80020f4:	464c      	mov	r4, r9
 80020f6:	0323      	lsls	r3, r4, #12
 80020f8:	4644      	mov	r4, r8
 80020fa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80020fe:	4644      	mov	r4, r8
 8002100:	0322      	lsls	r2, r4, #12
 8002102:	1884      	adds	r4, r0, r2
 8002104:	633c      	str	r4, [r7, #48]	; 0x30
 8002106:	eb41 0303 	adc.w	r3, r1, r3
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002110:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8002114:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002118:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800211c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002120:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <bme280_update+0x360>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	88db      	ldrh	r3, [r3, #6]
 800212c:	b29b      	uxth	r3, r3
 800212e:	b29b      	uxth	r3, r3
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800213a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800213e:	462b      	mov	r3, r5
 8002140:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002144:	4642      	mov	r2, r8
 8002146:	fb02 f203 	mul.w	r2, r2, r3
 800214a:	464b      	mov	r3, r9
 800214c:	4621      	mov	r1, r4
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	e004      	b.n	8002160 <bme280_update+0x368>
 8002156:	bf00      	nop
 8002158:	2000023c 	.word	0x2000023c
 800215c:	42c80000 	.word	0x42c80000
 8002160:	4622      	mov	r2, r4
 8002162:	4641      	mov	r1, r8
 8002164:	fba2 1201 	umull	r1, r2, r2, r1
 8002168:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800216c:	460a      	mov	r2, r1
 800216e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002172:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002176:	4413      	add	r3, r2
 8002178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002188:	4629      	mov	r1, r5
 800218a:	104a      	asrs	r2, r1, #1
 800218c:	4629      	mov	r1, r5
 800218e:	17cb      	asrs	r3, r1, #31
 8002190:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8002194:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002198:	4313      	orrs	r3, r2
 800219a:	d106      	bne.n	80021aa <bme280_update+0x3b2>
		{
			P = 0;
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 80021a8:	e14b      	b.n	8002442 <bme280_update+0x64a>
		}else
		{
		P = 1048576 - adc_P;
 80021aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021ae:	2100      	movs	r1, #0
 80021b0:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 80021b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80021b6:	eb61 0303 	sbc.w	r3, r1, r3
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021bc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021c0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 80021c4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	f04f 0100 	mov.w	r1, #0
 80021d0:	07d9      	lsls	r1, r3, #31
 80021d2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80021d6:	07d0      	lsls	r0, r2, #31
 80021d8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80021dc:	1a84      	subs	r4, r0, r2
 80021de:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80021e2:	eb61 0303 	sbc.w	r3, r1, r3
 80021e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021ea:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	1891      	adds	r1, r2, r2
 80021f4:	6239      	str	r1, [r7, #32]
 80021f6:	415b      	adcs	r3, r3
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fe:	4621      	mov	r1, r4
 8002200:	1851      	adds	r1, r2, r1
 8002202:	61b9      	str	r1, [r7, #24]
 8002204:	4629      	mov	r1, r5
 8002206:	414b      	adcs	r3, r1
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002216:	4649      	mov	r1, r9
 8002218:	018b      	lsls	r3, r1, #6
 800221a:	4641      	mov	r1, r8
 800221c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002220:	4641      	mov	r1, r8
 8002222:	018a      	lsls	r2, r1, #6
 8002224:	4641      	mov	r1, r8
 8002226:	1889      	adds	r1, r1, r2
 8002228:	6139      	str	r1, [r7, #16]
 800222a:	4649      	mov	r1, r9
 800222c:	eb43 0101 	adc.w	r1, r3, r1
 8002230:	6179      	str	r1, [r7, #20]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800223e:	4649      	mov	r1, r9
 8002240:	008b      	lsls	r3, r1, #2
 8002242:	4641      	mov	r1, r8
 8002244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002248:	4641      	mov	r1, r8
 800224a:	008a      	lsls	r2, r1, #2
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	4603      	mov	r3, r0
 8002252:	4622      	mov	r2, r4
 8002254:	189b      	adds	r3, r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	460b      	mov	r3, r1
 800225a:	462a      	mov	r2, r5
 800225c:	eb42 0303 	adc.w	r3, r2, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800226e:	4649      	mov	r1, r9
 8002270:	008b      	lsls	r3, r1, #2
 8002272:	4641      	mov	r1, r8
 8002274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002278:	4641      	mov	r1, r8
 800227a:	008a      	lsls	r2, r1, #2
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	4603      	mov	r3, r0
 8002282:	4622      	mov	r2, r4
 8002284:	189b      	adds	r3, r3, r2
 8002286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800228a:	462b      	mov	r3, r5
 800228c:	460a      	mov	r2, r1
 800228e:	eb42 0303 	adc.w	r3, r2, r3
 8002292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002296:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800229a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800229e:	f7fe fe31 	bl	8000f04 <__aeabi_ldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 80022aa:	4bbb      	ldr	r3, [pc, #748]	; (8002598 <bme280_update+0x7a0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	8adb      	ldrh	r3, [r3, #22]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	17da      	asrs	r2, r3, #31
 80022b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022bc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0b50      	lsrs	r0, r2, #13
 80022ca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022ce:	1359      	asrs	r1, r3, #13
 80022d0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022d4:	462b      	mov	r3, r5
 80022d6:	fb00 f203 	mul.w	r2, r0, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	fb03 f301 	mul.w	r3, r3, r1
 80022e0:	4413      	add	r3, r2
 80022e2:	4622      	mov	r2, r4
 80022e4:	fba2 1200 	umull	r1, r2, r2, r0
 80022e8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80022ec:	460a      	mov	r2, r1
 80022ee:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80022f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80022f6:	4413      	add	r3, r2
 80022f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022fc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	0b50      	lsrs	r0, r2, #13
 800230a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800230e:	1359      	asrs	r1, r3, #13
 8002310:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002314:	462b      	mov	r3, r5
 8002316:	fb00 f203 	mul.w	r2, r0, r3
 800231a:	4623      	mov	r3, r4
 800231c:	fb03 f301 	mul.w	r3, r3, r1
 8002320:	4413      	add	r3, r2
 8002322:	4622      	mov	r2, r4
 8002324:	fba2 1200 	umull	r1, r2, r2, r0
 8002328:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800232c:	460a      	mov	r2, r1
 800232e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002336:	4413      	add	r3, r2
 8002338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002348:	4621      	mov	r1, r4
 800234a:	0e4a      	lsrs	r2, r1, #25
 800234c:	4629      	mov	r1, r5
 800234e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002352:	4629      	mov	r1, r5
 8002354:	164b      	asrs	r3, r1, #25
 8002356:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800235a:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <bme280_update+0x7a0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	8a9b      	ldrh	r3, [r3, #20]
 8002362:	b21b      	sxth	r3, r3
 8002364:	b21b      	sxth	r3, r3
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	673b      	str	r3, [r7, #112]	; 0x70
 800236a:	677a      	str	r2, [r7, #116]	; 0x74
 800236c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002370:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002374:	462a      	mov	r2, r5
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800237e:	4621      	mov	r1, r4
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800238a:	4621      	mov	r1, r4
 800238c:	fba2 1201 	umull	r1, r2, r2, r1
 8002390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002394:	460a      	mov	r2, r1
 8002396:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800239a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800239e:	4413      	add	r3, r2
 80023a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023b0:	4621      	mov	r1, r4
 80023b2:	0cca      	lsrs	r2, r1, #19
 80023b4:	4629      	mov	r1, r5
 80023b6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80023ba:	4629      	mov	r1, r5
 80023bc:	14cb      	asrs	r3, r1, #19
 80023be:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 80023c2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023ca:	1884      	adds	r4, r0, r2
 80023cc:	66bc      	str	r4, [r7, #104]	; 0x68
 80023ce:	eb41 0303 	adc.w	r3, r1, r3
 80023d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023d4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023d8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80023dc:	4621      	mov	r1, r4
 80023de:	1889      	adds	r1, r1, r2
 80023e0:	6639      	str	r1, [r7, #96]	; 0x60
 80023e2:	4629      	mov	r1, r5
 80023e4:	eb43 0101 	adc.w	r1, r3, r1
 80023e8:	6679      	str	r1, [r7, #100]	; 0x64
 80023ea:	f04f 0000 	mov.w	r0, #0
 80023ee:	f04f 0100 	mov.w	r1, #0
 80023f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023f6:	4623      	mov	r3, r4
 80023f8:	0a18      	lsrs	r0, r3, #8
 80023fa:	462b      	mov	r3, r5
 80023fc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002400:	462b      	mov	r3, r5
 8002402:	1219      	asrs	r1, r3, #8
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <bme280_update+0x7a0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	8a5b      	ldrh	r3, [r3, #18]
 800240c:	b21b      	sxth	r3, r3
 800240e:	b21b      	sxth	r3, r3
 8002410:	17da      	asrs	r2, r3, #31
 8002412:	65bb      	str	r3, [r7, #88]	; 0x58
 8002414:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8002422:	464c      	mov	r4, r9
 8002424:	0123      	lsls	r3, r4, #4
 8002426:	4644      	mov	r4, r8
 8002428:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800242c:	4644      	mov	r4, r8
 800242e:	0122      	lsls	r2, r4, #4
 8002430:	1884      	adds	r4, r0, r2
 8002432:	603c      	str	r4, [r7, #0]
 8002434:	eb41 0303 	adc.w	r3, r1, r3
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800243e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 8002442:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002446:	f7fe fd1f 	bl	8000e88 <__aeabi_l2f>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f8ab 	bl	80005a8 <__aeabi_f2d>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <bme280_update+0x7a4>)
 8002458:	f7fe fa28 	bl	80008ac <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <bme280_update+0x7a8>)
 800246a:	f7fe fa1f 	bl	80008ac <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4949      	ldr	r1, [pc, #292]	; (8002598 <bme280_update+0x7a0>)
 8002474:	680c      	ldr	r4, [r1, #0]
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fbe5 	bl	8000c48 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	61a3      	str	r3, [r4, #24]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 8002482:	4b45      	ldr	r3, [pc, #276]	; (8002598 <bme280_update+0x7a0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 800248c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002490:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002494:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8002498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249c:	039b      	lsls	r3, r3, #14
 800249e:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <bme280_update+0x7a0>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	8bd2      	ldrh	r2, [r2, #30]
 80024a6:	b212      	sxth	r2, r2
 80024a8:	0512      	lsls	r2, r2, #20
 80024aa:	1a9a      	subs	r2, r3, r2
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <bme280_update+0x7a0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	8c1b      	ldrh	r3, [r3, #32]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80024c6:	0bdb      	lsrs	r3, r3, #15
 80024c8:	4a33      	ldr	r2, [pc, #204]	; (8002598 <bme280_update+0x7a0>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80024d2:	b252      	sxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80024da:	fb01 f202 	mul.w	r2, r1, r2
 80024de:	0a92      	lsrs	r2, r2, #10
 80024e0:	492d      	ldr	r1, [pc, #180]	; (8002598 <bme280_update+0x7a0>)
 80024e2:	6809      	ldr	r1, [r1, #0]
 80024e4:	6809      	ldr	r1, [r1, #0]
 80024e6:	7f09      	ldrb	r1, [r1, #28]
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4608      	mov	r0, r1
 80024ec:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80024f0:	fb00 f101 	mul.w	r1, r0, r1
 80024f4:	0ac9      	lsrs	r1, r1, #11
 80024f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80024fa:	fb01 f202 	mul.w	r2, r1, r2
 80024fe:	0a92      	lsrs	r2, r2, #10
 8002500:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002504:	4924      	ldr	r1, [pc, #144]	; (8002598 <bme280_update+0x7a0>)
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	6809      	ldr	r1, [r1, #0]
 800250a:	8b49      	ldrh	r1, [r1, #26]
 800250c:	b209      	sxth	r1, r1
 800250e:	fb01 f202 	mul.w	r2, r1, r2
 8002512:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002516:	0b92      	lsrs	r2, r2, #14
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8002520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002524:	0bdb      	lsrs	r3, r3, #15
 8002526:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800252a:	0bd2      	lsrs	r2, r2, #15
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	09db      	lsrs	r3, r3, #7
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <bme280_update+0x7a0>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	7e12      	ldrb	r2, [r2, #24]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800254c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002550:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002554:	bf28      	it	cs
 8002556:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 800255a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800255e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002562:	0b1b      	lsrs	r3, r3, #12
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <bme280_update+0x7a0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80025a4 <bme280_update+0x7ac>
 8002574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002578:	edc3 7a07 	vstr	s15, [r3, #28]

		//get altitude
		bme280_get_altitude();
 800257c:	f7ff fa0c 	bl	8001998 <bme280_get_altitude>
		BME->isUpdated = 0;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <bme280_update+0x7a0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

}
 800258a:	bf00      	nop
 800258c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	2000023c 	.word	0x2000023c
 800259c:	40700000 	.word	0x40700000
 80025a0:	40590000 	.word	0x40590000
 80025a4:	44800000 	.word	0x44800000

080025a8 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025ae:	2009      	movs	r0, #9
 80025b0:	f004 fbf5 	bl	8006d9e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025b4:	200a      	movs	r0, #10
 80025b6:	f004 fbf2 	bl	8006d9e <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80025be:	2301      	movs	r3, #1
 80025c0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80025c2:	4bb7      	ldr	r3, [pc, #732]	; (80028a0 <bmi088_config+0x2f8>)
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	9302      	str	r3, [sp, #8]
 80025ca:	2301      	movs	r3, #1
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	227c      	movs	r2, #124	; 0x7c
 80025d6:	2130      	movs	r1, #48	; 0x30
 80025d8:	f005 fcd8 	bl	8007f8c <HAL_I2C_Mem_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80025ea:	4bad      	ldr	r3, [pc, #692]	; (80028a0 <bmi088_config+0x2f8>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2301      	movs	r3, #1
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	227d      	movs	r2, #125	; 0x7d
 80025fe:	2130      	movs	r1, #48	; 0x30
 8002600:	f005 fcc4 	bl	8007f8c <HAL_I2C_Mem_Write>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	4313      	orrs	r3, r2
 800260c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 800260e:	2014      	movs	r0, #20
 8002610:	f003 fe76 	bl	8006300 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002614:	23b6      	movs	r3, #182	; 0xb6
 8002616:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002618:	4ba1      	ldr	r3, [pc, #644]	; (80028a0 <bmi088_config+0x2f8>)
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	2364      	movs	r3, #100	; 0x64
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	2301      	movs	r3, #1
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	227e      	movs	r2, #126	; 0x7e
 800262c:	2130      	movs	r1, #48	; 0x30
 800262e:	f005 fcad 	bl	8007f8c <HAL_I2C_Mem_Write>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4313      	orrs	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <bmi088_config+0xa0>
 8002642:	4b98      	ldr	r3, [pc, #608]	; (80028a4 <bmi088_config+0x2fc>)
 8002644:	2285      	movs	r2, #133	; 0x85
 8002646:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002648:	200a      	movs	r0, #10
 800264a:	f003 fe59 	bl	8006300 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800264e:	23b0      	movs	r3, #176	; 0xb0
 8002650:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <bmi088_config+0x2f8>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	2364      	movs	r3, #100	; 0x64
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2301      	movs	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2301      	movs	r3, #1
 8002664:	227e      	movs	r2, #126	; 0x7e
 8002666:	2130      	movs	r1, #48	; 0x30
 8002668:	f005 fc90 	bl	8007f8c <HAL_I2C_Mem_Write>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4313      	orrs	r3, r2
 8002674:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <bmi088_config+0xda>
 800267c:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <bmi088_config+0x2fc>)
 800267e:	228a      	movs	r2, #138	; 0x8a
 8002680:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002682:	200a      	movs	r0, #10
 8002684:	f003 fe3c 	bl	8006300 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002688:	23b6      	movs	r3, #182	; 0xb6
 800268a:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <bmi088_config+0x2f8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	2301      	movs	r3, #1
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	2214      	movs	r2, #20
 80026a0:	21d0      	movs	r1, #208	; 0xd0
 80026a2:	f005 fc73 	bl	8007f8c <HAL_I2C_Mem_Write>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <bmi088_config+0x114>
 80026b6:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <bmi088_config+0x2fc>)
 80026b8:	228f      	movs	r2, #143	; 0x8f
 80026ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026bc:	200a      	movs	r0, #10
 80026be:	f003 fe1f 	bl	8006300 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80026c2:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <bmi088_config+0x300>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	7e5b      	ldrb	r3, [r3, #25]
 80026c8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80026ca:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <bmi088_config+0x2f8>)
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2301      	movs	r3, #1
 80026dc:	220f      	movs	r2, #15
 80026de:	21d0      	movs	r1, #208	; 0xd0
 80026e0:	f005 fc54 	bl	8007f8c <HAL_I2C_Mem_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <bmi088_config+0x152>
 80026f4:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <bmi088_config+0x2fc>)
 80026f6:	2295      	movs	r2, #149	; 0x95
 80026f8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80026fa:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <bmi088_config+0x300>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	7e1b      	ldrb	r3, [r3, #24]
 8002700:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <bmi088_config+0x2f8>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	2314      	movs	r3, #20
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	2301      	movs	r3, #1
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	2210      	movs	r2, #16
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f005 fc38 	bl	8007f8c <HAL_I2C_Mem_Write>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4313      	orrs	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <bmi088_config+0x18a>
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <bmi088_config+0x2fc>)
 800272e:	2299      	movs	r2, #153	; 0x99
 8002730:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002732:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <bmi088_config+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	7ddb      	ldrb	r3, [r3, #23]
 8002738:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800273a:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <bmi088_config+0x2f8>)
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	2314      	movs	r3, #20
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	2211      	movs	r2, #17
 800274e:	21d0      	movs	r1, #208	; 0xd0
 8002750:	f005 fc1c 	bl	8007f8c <HAL_I2C_Mem_Write>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4313      	orrs	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <bmi088_config+0x1c2>
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <bmi088_config+0x2fc>)
 8002766:	229d      	movs	r2, #157	; 0x9d
 8002768:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800276a:	2014      	movs	r0, #20
 800276c:	f003 fdc8 	bl	8006300 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002774:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <bmi088_config+0x2f8>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	2314      	movs	r3, #20
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2301      	movs	r3, #1
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	2215      	movs	r2, #21
 8002788:	21d0      	movs	r1, #208	; 0xd0
 800278a:	f005 fbff 	bl	8007f8c <HAL_I2C_Mem_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4313      	orrs	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <bmi088_config+0x1fc>
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <bmi088_config+0x2fc>)
 80027a0:	22a3      	movs	r2, #163	; 0xa3
 80027a2:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80027a4:	2301      	movs	r3, #1
 80027a6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <bmi088_config+0x2f8>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	2314      	movs	r3, #20
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	2301      	movs	r3, #1
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	2216      	movs	r2, #22
 80027bc:	21d0      	movs	r1, #208	; 0xd0
 80027be:	f005 fbe5 	bl	8007f8c <HAL_I2C_Mem_Write>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <bmi088_config+0x230>
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <bmi088_config+0x2fc>)
 80027d4:	22a7      	movs	r2, #167	; 0xa7
 80027d6:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80027d8:	2301      	movs	r3, #1
 80027da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <bmi088_config+0x2f8>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	2314      	movs	r3, #20
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	2218      	movs	r2, #24
 80027f0:	21d0      	movs	r1, #208	; 0xd0
 80027f2:	f005 fbcb 	bl	8007f8c <HAL_I2C_Mem_Write>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <bmi088_config+0x264>
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <bmi088_config+0x2fc>)
 8002808:	22ab      	movs	r2, #171	; 0xab
 800280a:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800280c:	2304      	movs	r3, #4
 800280e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <bmi088_config+0x2f8>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	2314      	movs	r3, #20
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2301      	movs	r3, #1
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	227d      	movs	r2, #125	; 0x7d
 8002824:	2130      	movs	r1, #48	; 0x30
 8002826:	f005 fbb1 	bl	8007f8c <HAL_I2C_Mem_Write>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4313      	orrs	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <bmi088_config+0x298>
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <bmi088_config+0x2fc>)
 800283c:	22b0      	movs	r2, #176	; 0xb0
 800283e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002840:	2008      	movs	r0, #8
 8002842:	f003 fd5d 	bl	8006300 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <bmi088_config+0x300>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	7cdb      	ldrb	r3, [r3, #19]
 800284c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <bmi088_config+0x2f8>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	2314      	movs	r3, #20
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	2301      	movs	r3, #1
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	227c      	movs	r2, #124	; 0x7c
 8002862:	2130      	movs	r1, #48	; 0x30
 8002864:	f005 fb92 	bl	8007f8c <HAL_I2C_Mem_Write>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	4313      	orrs	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <bmi088_config+0x2d6>
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <bmi088_config+0x2fc>)
 800287a:	22b5      	movs	r2, #181	; 0xb5
 800287c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800287e:	2008      	movs	r0, #8
 8002880:	f003 fd3e 	bl	8006300 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <bmi088_config+0x300>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	7d5b      	ldrb	r3, [r3, #21]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b25a      	sxtb	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <bmi088_config+0x300>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	7d9b      	ldrb	r3, [r3, #22]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b25b      	sxtb	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	713b      	strb	r3, [r7, #4]
 800289e:	e005      	b.n	80028ac <bmi088_config+0x304>
 80028a0:	20000240 	.word	0x20000240
 80028a4:	2000024c 	.word	0x2000024c
 80028a8:	20000244 	.word	0x20000244
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <bmi088_config+0x3d0>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	2314      	movs	r3, #20
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2301      	movs	r3, #1
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	2130      	movs	r1, #48	; 0x30
 80028c2:	f005 fb63 	bl	8007f8c <HAL_I2C_Mem_Write>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <bmi088_config+0x334>
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <bmi088_config+0x3d4>)
 80028d8:	22ba      	movs	r2, #186	; 0xba
 80028da:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <bmi088_config+0x3d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	7d1b      	ldrb	r3, [r3, #20]
 80028e2:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <bmi088_config+0x3d0>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	2314      	movs	r3, #20
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	2301      	movs	r3, #1
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	2241      	movs	r2, #65	; 0x41
 80028f8:	2130      	movs	r1, #48	; 0x30
 80028fa:	f005 fb47 	bl	8007f8c <HAL_I2C_Mem_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4313      	orrs	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <bmi088_config+0x36c>
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <bmi088_config+0x3d4>)
 8002910:	22be      	movs	r2, #190	; 0xbe
 8002912:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002914:	230a      	movs	r3, #10
 8002916:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <bmi088_config+0x3d0>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	2314      	movs	r3, #20
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2301      	movs	r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	2253      	movs	r2, #83	; 0x53
 800292c:	2130      	movs	r1, #48	; 0x30
 800292e:	f005 fb2d 	bl	8007f8c <HAL_I2C_Mem_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4313      	orrs	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800293c:	2304      	movs	r3, #4
 800293e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <bmi088_config+0x3d0>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	2314      	movs	r3, #20
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	2258      	movs	r2, #88	; 0x58
 8002954:	2130      	movs	r1, #48	; 0x30
 8002956:	f005 fb19 	bl	8007f8c <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4313      	orrs	r3, r2
 8002962:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002964:	2009      	movs	r0, #9
 8002966:	f004 fa1a 	bl	8006d9e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800296a:	200a      	movs	r0, #10
 800296c:	f004 fa17 	bl	8006d9e <HAL_NVIC_EnableIRQ>
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000240 	.word	0x20000240
 800297c:	2000024c 	.word	0x2000024c
 8002980:	20000244 	.word	0x20000244

08002984 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af04      	add	r7, sp, #16
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <bmi088_init+0x90>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <bmi088_init+0x94>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <bmi088_init+0x94>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <bmi088_init+0x94>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <bmi088_init+0x98>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <bmi088_init+0x9c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80029b6:	2332      	movs	r3, #50	; 0x32
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2200      	movs	r2, #0
 80029c8:	21d0      	movs	r1, #208	; 0xd0
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f005 fbd8 	bl	8008180 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80029d0:	7b3b      	ldrb	r3, [r7, #12]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	d103      	bne.n	80029de <bmi088_init+0x5a>
		is_BMI_ok = 1;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <bmi088_init+0xa0>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
		saved_datas->q[1] = 0;
		saved_datas->q[2] = 0;
		saved_datas->q[3] = 0;
	}
}
 80029dc:	e016      	b.n	8002a0c <bmi088_init+0x88>
		is_BMI_ok = 0;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <bmi088_init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <bmi088_init+0xa4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ec:	605a      	str	r2, [r3, #4]
		saved_datas->q[1] = 0;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <bmi088_init+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
		saved_datas->q[2] = 0;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <bmi088_init+0xa4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
		saved_datas->q[3] = 0;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <bmi088_init+0xa4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000240 	.word	0x20000240
 8002a18:	20000244 	.word	0x20000244
 8002a1c:	20000248 	.word	0x20000248
 8002a20:	20000249 	.word	0x20000249
 8002a24:	20000818 	.word	0x20000818
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	00000000 	.word	0x00000000

08002a30 <bmi088_update>:
void bmi088_update()
{
 8002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a34:	b08d      	sub	sp, #52	; 0x34
 8002a36:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <bmi088_update+0x94>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	7c9b      	ldrb	r3, [r3, #18]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 81eb 	beq.w	8002e1e <bmi088_update+0x3ee>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <bmi088_update+0x98>)
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <bmi088_update+0x94>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2314      	movs	r3, #20
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2309      	movs	r3, #9
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9200      	str	r2, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2212      	movs	r2, #18
 8002a60:	2130      	movs	r1, #48	; 0x30
 8002a62:	f005 fb8d 	bl	8008180 <HAL_I2C_Mem_Read>
 8002a66:	4603      	mov	r3, r0
 8002a68:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 83a9 	bne.w	80031c4 <bmi088_update+0x794>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <bmi088_update+0x98>)
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <bmi088_update+0x94>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3309      	adds	r3, #9
 8002a7c:	2214      	movs	r2, #20
 8002a7e:	9202      	str	r2, [sp, #8]
 8002a80:	2202      	movs	r2, #2
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2301      	movs	r3, #1
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	2130      	movs	r1, #48	; 0x30
 8002a8c:	f005 fb78 	bl	8008180 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <bmi088_update+0x94>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a5b      	ldrb	r3, [r3, #9]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <bmi088_update+0x94>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	7a9b      	ldrb	r3, [r3, #10]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 8002ab0:	8bbb      	ldrh	r3, [r7, #28]
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d309      	bcc.n	8002acc <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 8002ab8:	8bbb      	ldrh	r3, [r7, #28]
 8002aba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	837b      	strh	r3, [r7, #26]
 8002ac2:	e029      	b.n	8002b18 <bmi088_update+0xe8>
 8002ac4:	20000244 	.word	0x20000244
 8002ac8:	20000240 	.word	0x20000240
			}
			else{
				Temp_int11 = Temp_uint11;
 8002acc:	8bbb      	ldrh	r3, [r7, #28]
 8002ace:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002ad0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd62 	bl	80005a8 <__aeabi_f2d>
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002aec:	f7fd fdb4 	bl	8000658 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4bb6      	ldr	r3, [pc, #728]	; (8002dd8 <bmi088_update+0x3a8>)
 8002afe:	f7fd fbf5 	bl	80002ec <__adddf3>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	49b5      	ldr	r1, [pc, #724]	; (8002ddc <bmi088_update+0x3ac>)
 8002b08:	680e      	ldr	r6, [r1, #0]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f89b 	bl	8000c48 <__aeabi_d2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002b18:	4bb0      	ldr	r3, [pc, #704]	; (8002ddc <bmi088_update+0x3ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	7a1b      	ldrb	r3, [r3, #8]
 8002b1e:	041a      	lsls	r2, r3, #16
 8002b20:	4bae      	ldr	r3, [pc, #696]	; (8002ddc <bmi088_update+0x3ac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	79db      	ldrb	r3, [r3, #7]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4aac      	ldr	r2, [pc, #688]	; (8002ddc <bmi088_update+0x3ac>)
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	7992      	ldrb	r2, [r2, #6]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	ee17 0a90 	vmov	r0, s15
 8002b42:	f7fd fd31 	bl	80005a8 <__aeabi_f2d>
 8002b46:	a39e      	add	r3, pc, #632	; (adr r3, 8002dc0 <bmi088_update+0x390>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fd84 	bl	8000658 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	a39b      	add	r3, pc, #620	; (adr r3, 8002dc8 <bmi088_update+0x398>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd fea5 	bl	80008ac <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	499d      	ldr	r1, [pc, #628]	; (8002ddc <bmi088_update+0x3ac>)
 8002b68:	680e      	ldr	r6, [r1, #0]
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f86b 	bl	8000c48 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002b78:	4b98      	ldr	r3, [pc, #608]	; (8002ddc <bmi088_update+0x3ac>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	795b      	ldrb	r3, [r3, #5]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	4b96      	ldr	r3, [pc, #600]	; (8002ddc <bmi088_update+0x3ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002b8e:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <bmi088_update+0x3ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	4b90      	ldr	r3, [pc, #576]	; (8002ddc <bmi088_update+0x3ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	789b      	ldrb	r3, [r3, #2]
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	; (8002ddc <bmi088_update+0x3ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	b21a      	sxth	r2, r3
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <bmi088_update+0x3ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b21b      	sxth	r3, r3
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 8002bba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc6:	ee17 0a90 	vmov	r0, s15
 8002bca:	f7fd fced 	bl	80005a8 <__aeabi_f2d>
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b83      	ldr	r3, [pc, #524]	; (8002de0 <bmi088_update+0x3b0>)
 8002bd4:	f7fd fe6a 	bl	80008ac <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <bmi088_update+0x3b4>)
 8002be6:	f7fd fd37 	bl	8000658 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <bmi088_update+0x3b8>)
 8002bf8:	f7fd fd2e 	bl	8000658 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4692      	mov	sl, r2
 8002c02:	469b      	mov	fp, r3
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <bmi088_update+0x3ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	7d1b      	ldrb	r3, [r3, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fcc6 	bl	80005a8 <__aeabi_f2d>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	ec43 2b11 	vmov	d1, r2, r3
 8002c24:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8002dd0 <bmi088_update+0x3a0>
 8002c28:	f00e f836 	bl	8010c98 <pow>
 8002c2c:	ec53 2b10 	vmov	r2, r3, d0
 8002c30:	4650      	mov	r0, sl
 8002c32:	4659      	mov	r1, fp
 8002c34:	f7fd fd10 	bl	8000658 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4967      	ldr	r1, [pc, #412]	; (8002ddc <bmi088_update+0x3ac>)
 8002c3e:	680e      	ldr	r6, [r1, #0]
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fe f800 	bl	8000c48 <__aeabi_d2f>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 8002c4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5a:	ee17 0a90 	vmov	r0, s15
 8002c5e:	f7fd fca3 	bl	80005a8 <__aeabi_f2d>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <bmi088_update+0x3b0>)
 8002c68:	f7fd fe20 	bl	80008ac <__aeabi_ddiv>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <bmi088_update+0x3b4>)
 8002c7a:	f7fd fced 	bl	8000658 <__aeabi_dmul>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <bmi088_update+0x3b8>)
 8002c8c:	f7fd fce4 	bl	8000658 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4692      	mov	sl, r2
 8002c96:	469b      	mov	fp, r3
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <bmi088_update+0x3ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	7d1b      	ldrb	r3, [r3, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca8:	ee17 0a90 	vmov	r0, s15
 8002cac:	f7fd fc7c 	bl	80005a8 <__aeabi_f2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	ec43 2b11 	vmov	d1, r2, r3
 8002cb8:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8002dd0 <bmi088_update+0x3a0>
 8002cbc:	f00d ffec 	bl	8010c98 <pow>
 8002cc0:	ec53 2b10 	vmov	r2, r3, d0
 8002cc4:	4650      	mov	r0, sl
 8002cc6:	4659      	mov	r1, fp
 8002cc8:	f7fd fcc6 	bl	8000658 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4942      	ldr	r1, [pc, #264]	; (8002ddc <bmi088_update+0x3ac>)
 8002cd2:	680e      	ldr	r6, [r1, #0]
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ffb6 	bl	8000c48 <__aeabi_d2f>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 8002ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cee:	ee17 0a90 	vmov	r0, s15
 8002cf2:	f7fd fc59 	bl	80005a8 <__aeabi_f2d>
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <bmi088_update+0x3b0>)
 8002cfc:	f7fd fdd6 	bl	80008ac <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <bmi088_update+0x3b4>)
 8002d0e:	f7fd fca3 	bl	8000658 <__aeabi_dmul>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <bmi088_update+0x3b8>)
 8002d20:	f7fd fc9a 	bl	8000658 <__aeabi_dmul>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4692      	mov	sl, r2
 8002d2a:	469b      	mov	fp, r3
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <bmi088_update+0x3ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	7d1b      	ldrb	r3, [r3, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3c:	ee17 0a90 	vmov	r0, s15
 8002d40:	f7fd fc32 	bl	80005a8 <__aeabi_f2d>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	ec43 2b11 	vmov	d1, r2, r3
 8002d4c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8002dd0 <bmi088_update+0x3a0>
 8002d50:	f00d ffa2 	bl	8010c98 <pow>
 8002d54:	ec53 2b10 	vmov	r2, r3, d0
 8002d58:	4650      	mov	r0, sl
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	f7fd fc7c 	bl	8000658 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	491d      	ldr	r1, [pc, #116]	; (8002ddc <bmi088_update+0x3ac>)
 8002d66:	680e      	ldr	r6, [r1, #0]
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd ff6c 	bl	8000c48 <__aeabi_d2f>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

			if(isStarded)
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <bmi088_update+0x3bc>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d03a      	beq.n	8002df4 <bmi088_update+0x3c4>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <bmi088_update+0x3ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <bmi088_update+0x3ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d502      	bpl.n	8002da2 <bmi088_update+0x372>
 8002d9c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002df0 <bmi088_update+0x3c0>
 8002da0:	e009      	b.n	8002db6 <bmi088_update+0x386>
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <bmi088_update+0x3ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <bmi088_update+0x3ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <bmi088_update+0x3ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8002dbe:	e01f      	b.n	8002e00 <bmi088_update+0x3d0>
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40438800 	.word	0x40438800
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	412e8480 	.word	0x412e8480
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	40000000 	.word	0x40000000
 8002dd8:	40370000 	.word	0x40370000
 8002ddc:	20000244 	.word	0x20000244
 8002de0:	40e00000 	.word	0x40e00000
 8002de4:	408f4000 	.word	0x408f4000
 8002de8:	3ff80000 	.word	0x3ff80000
 8002dec:	20000249 	.word	0x20000249
 8002df0:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 8002df4:	4bb6      	ldr	r3, [pc, #728]	; (80030d0 <bmi088_update+0x6a0>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4bb4      	ldr	r3, [pc, #720]	; (80030d0 <bmi088_update+0x6a0>)
 8002dfe:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002e00:	4bb4      	ldr	r3, [pc, #720]	; (80030d4 <bmi088_update+0x6a4>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4bb3      	ldr	r3, [pc, #716]	; (80030d4 <bmi088_update+0x6a4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e0c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4


			BMI->rawDatas.isAccelUpdated = 0;
 8002e10:	4bb0      	ldr	r3, [pc, #704]	; (80030d4 <bmi088_update+0x6a4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 8002e18:	4baf      	ldr	r3, [pc, #700]	; (80030d8 <bmi088_update+0x6a8>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002e1e:	4bad      	ldr	r3, [pc, #692]	; (80030d4 <bmi088_update+0x6a4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	7c5b      	ldrb	r3, [r3, #17]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 81d0 	beq.w	80031ca <bmi088_update+0x79a>
 8002e2a:	4bab      	ldr	r3, [pc, #684]	; (80030d8 <bmi088_update+0x6a8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 81cb 	beq.w	80031ca <bmi088_update+0x79a>
		{
			if(isStarded){
 8002e34:	4ba6      	ldr	r3, [pc, #664]	; (80030d0 <bmi088_update+0x6a0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 81bb 	beq.w	80031b4 <bmi088_update+0x784>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 8002e3e:	4ba7      	ldr	r3, [pc, #668]	; (80030dc <bmi088_update+0x6ac>)
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	4ba4      	ldr	r3, [pc, #656]	; (80030d4 <bmi088_update+0x6a4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330b      	adds	r3, #11
 8002e48:	220a      	movs	r2, #10
 8002e4a:	9202      	str	r2, [sp, #8]
 8002e4c:	2206      	movs	r2, #6
 8002e4e:	9201      	str	r2, [sp, #4]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2301      	movs	r3, #1
 8002e54:	2202      	movs	r2, #2
 8002e56:	21d0      	movs	r1, #208	; 0xd0
 8002e58:	f005 f992 	bl	8008180 <HAL_I2C_Mem_Read>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 81b0 	bne.w	80031c8 <bmi088_update+0x798>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002e68:	4b9a      	ldr	r3, [pc, #616]	; (80030d4 <bmi088_update+0x6a4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	7c1b      	ldrb	r3, [r3, #16]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	b21a      	sxth	r2, r3
 8002e72:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <bmi088_update+0x6a4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	7bdb      	ldrb	r3, [r3, #15]
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002e7e:	4b95      	ldr	r3, [pc, #596]	; (80030d4 <bmi088_update+0x6a4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	7b9b      	ldrb	r3, [r3, #14]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	4b92      	ldr	r3, [pc, #584]	; (80030d4 <bmi088_update+0x6a4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	7b5b      	ldrb	r3, [r3, #13]
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002e94:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <bmi088_update+0x6a4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	7b1b      	ldrb	r3, [r3, #12]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	; (80030d4 <bmi088_update+0x6a4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	7adb      	ldrb	r3, [r3, #11]
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[0]);
 8002eaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb68 	bl	8000584 <__aeabi_i2d>
 8002eb4:	a384      	add	r3, pc, #528	; (adr r3, 80030c8 <bmi088_update+0x698>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fcf7 	bl	80008ac <__aeabi_ddiv>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4692      	mov	sl, r2
 8002ec4:	469b      	mov	fp, r3
 8002ec6:	4b83      	ldr	r3, [pc, #524]	; (80030d4 <bmi088_update+0x6a4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	7e5b      	ldrb	r3, [r3, #25]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ed2:	4113      	asrs	r3, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb55 	bl	8000584 <__aeabi_i2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4650      	mov	r0, sl
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	f7fd fbb9 	bl	8000658 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <bmi088_update+0x6b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ef6:	4e77      	ldr	r6, [pc, #476]	; (80030d4 <bmi088_update+0x6a4>)
 8002ef8:	6836      	ldr	r6, [r6, #0]
 8002efa:	f7fd f9f5 	bl	80002e8 <__aeabi_dsub>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[1]);
 8002f06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fb3a 	bl	8000584 <__aeabi_i2d>
 8002f10:	a36d      	add	r3, pc, #436	; (adr r3, 80030c8 <bmi088_update+0x698>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fcc9 	bl	80008ac <__aeabi_ddiv>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4692      	mov	sl, r2
 8002f20:	469b      	mov	fp, r3
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <bmi088_update+0x6a4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	7e5b      	ldrb	r3, [r3, #25]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f2e:	4113      	asrs	r3, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fb27 	bl	8000584 <__aeabi_i2d>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4650      	mov	r0, sl
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	f7fd fb8b 	bl	8000658 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <bmi088_update+0x6b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f52:	4e60      	ldr	r6, [pc, #384]	; (80030d4 <bmi088_update+0x6a4>)
 8002f54:	6836      	ldr	r6, [r6, #0]
 8002f56:	f7fd f9c7 	bl	80002e8 <__aeabi_dsub>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[2]);
 8002f62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fb0c 	bl	8000584 <__aeabi_i2d>
 8002f6c:	a356      	add	r3, pc, #344	; (adr r3, 80030c8 <bmi088_update+0x698>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fc9b 	bl	80008ac <__aeabi_ddiv>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4692      	mov	sl, r2
 8002f7c:	469b      	mov	fp, r3
 8002f7e:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <bmi088_update+0x6a4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	7e5b      	ldrb	r3, [r3, #25]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f8a:	4113      	asrs	r3, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd faf9 	bl	8000584 <__aeabi_i2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4650      	mov	r0, sl
 8002f98:	4659      	mov	r1, fp
 8002f9a:	f7fd fb5d 	bl	8000658 <__aeabi_dmul>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <bmi088_update+0x6b0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fae:	4e49      	ldr	r6, [pc, #292]	; (80030d4 <bmi088_update+0x6a4>)
 8002fb0:	6836      	ldr	r6, [r6, #0]
 8002fb2:	f7fd f999 	bl	80002e8 <__aeabi_dsub>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <bmi088_update+0x6a4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd faee 	bl	80005a8 <__aeabi_f2d>
 8002fcc:	e9c7 0100 	strd	r0, r1, [r7]
 8002fd0:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <bmi088_update+0x6a4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <bmi088_update+0x6a4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fae1 	bl	80005a8 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4650      	mov	r0, sl
 8002fec:	4659      	mov	r1, fp
 8002fee:	f7fd fb33 	bl	8000658 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ffa:	f7fd f977 	bl	80002ec <__adddf3>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4934      	ldr	r1, [pc, #208]	; (80030d4 <bmi088_update+0x6a4>)
 8003004:	680e      	ldr	r6, [r1, #0]
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fe1d 	bl	8000c48 <__aeabi_d2f>
 800300e:	4603      	mov	r3, r0
 8003010:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8003014:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <bmi088_update+0x6a4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fac3 	bl	80005a8 <__aeabi_f2d>
 8003022:	e9c7 0100 	strd	r0, r1, [r7]
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <bmi088_update+0x6a4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <bmi088_update+0x6a4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fab6 	bl	80005a8 <__aeabi_f2d>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4650      	mov	r0, sl
 8003042:	4659      	mov	r1, fp
 8003044:	f7fd fb08 	bl	8000658 <__aeabi_dmul>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003050:	f7fd f94c 	bl	80002ec <__adddf3>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	491e      	ldr	r1, [pc, #120]	; (80030d4 <bmi088_update+0x6a4>)
 800305a:	680e      	ldr	r6, [r1, #0]
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdf2 	bl	8000c48 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <bmi088_update+0x6a4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa98 	bl	80005a8 <__aeabi_f2d>
 8003078:	e9c7 0100 	strd	r0, r1, [r7]
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <bmi088_update+0x6a4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <bmi088_update+0x6a4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa8b 	bl	80005a8 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4650      	mov	r0, sl
 8003098:	4659      	mov	r1, fp
 800309a:	f7fd fadd 	bl	8000658 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030a6:	f7fd f921 	bl	80002ec <__adddf3>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4909      	ldr	r1, [pc, #36]	; (80030d4 <bmi088_update+0x6a4>)
 80030b0:	680e      	ldr	r6, [r1, #0]
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fdc7 	bl	8000c48 <__aeabi_d2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 80030c0:	e010      	b.n	80030e4 <bmi088_update+0x6b4>
 80030c2:	bf00      	nop
 80030c4:	f3af 8000 	nop.w
 80030c8:	00000000 	.word	0x00000000
 80030cc:	40dfffc0 	.word	0x40dfffc0
 80030d0:	20000249 	.word	0x20000249
 80030d4:	20000244 	.word	0x20000244
 80030d8:	20000248 	.word	0x20000248
 80030dc:	20000240 	.word	0x20000240
 80030e0:	20000004 	.word	0x20000004


				//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
				//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 80030e4:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <bmi088_update+0x7b0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80030ec:	4690      	mov	r8, r2
 80030ee:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80030f2:	a339      	add	r3, pc, #228	; (adr r3, 80031d8 <bmi088_update+0x7a8>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	4640      	mov	r0, r8
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd faac 	bl	8000658 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <bmi088_update+0x7b4>)
 800310e:	f7fd fbcd 	bl	80008ac <__aeabi_ddiv>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd95 	bl	8000c48 <__aeabi_d2f>
 800311e:	4606      	mov	r6, r0
 8003120:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <bmi088_update+0x7b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003128:	a32b      	add	r3, pc, #172	; (adr r3, 80031d8 <bmi088_update+0x7a8>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd fa93 	bl	8000658 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <bmi088_update+0x7b4>)
 8003140:	f7fd fbb4 	bl	80008ac <__aeabi_ddiv>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fd7c 	bl	8000c48 <__aeabi_d2f>
 8003150:	4680      	mov	r8, r0
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <bmi088_update+0x7b0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800315a:	4614      	mov	r4, r2
 800315c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003160:	a31d      	add	r3, pc, #116	; (adr r3, 80031d8 <bmi088_update+0x7a8>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd fa75 	bl	8000658 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <bmi088_update+0x7b4>)
 800317c:	f7fd fb96 	bl	80008ac <__aeabi_ddiv>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f7fd fd5e 	bl	8000c48 <__aeabi_d2f>
 800318c:	4602      	mov	r2, r0
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <bmi088_update+0x7b0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003196:	eef0 1a67 	vmov.f32	s3, s15
 800319a:	ee01 2a10 	vmov	s2, r2
 800319e:	ee00 8a90 	vmov	s1, r8
 80031a2:	ee00 6a10 	vmov	s0, r6
 80031a6:	f001 fb59 	bl	800485c <updateQuaternion>
				quaternionToEuler();
 80031aa:	f001 fca5 	bl	8004af8 <quaternionToEuler>

				is_gyro_offset = 1;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <bmi088_update+0x7b8>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <bmi088_update+0x7b0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <bmi088_update+0x7bc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e002      	b.n	80031ca <bmi088_update+0x79a>
				return;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <bmi088_update+0x79a>
					return;
 80031c8:	bf00      	nop
		}


}
 80031ca:	3724      	adds	r7, #36	; 0x24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d2:	bf00      	nop
 80031d4:	f3af 8000 	nop.w
 80031d8:	54442d18 	.word	0x54442d18
 80031dc:	400921fb 	.word	0x400921fb
 80031e0:	20000244 	.word	0x20000244
 80031e4:	40668000 	.word	0x40668000
 80031e8:	2000024a 	.word	0x2000024a
 80031ec:	20000248 	.word	0x20000248

080031f0 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <bmi088_getAccelDatas_INT+0x18>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	749a      	strb	r2, [r3, #18]
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000244 	.word	0x20000244

0800320c <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <bmi088_getGyroDatas_INT+0x18>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	745a      	strb	r2, [r3, #17]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000244 	.word	0x20000244

08003228 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 800322c:	f7ff fc00 	bl	8002a30 <bmi088_update>
		if(is_gyro_offset == 1)
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <getOffset+0x104>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d1f9      	bne.n	800322c <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <getOffset+0x108>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003240:	da32      	bge.n	80032a8 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <getOffset+0x10c>)
 8003244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <getOffset+0x110>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003250:	f7fd f84c 	bl	80002ec <__adddf3>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4936      	ldr	r1, [pc, #216]	; (8003334 <getOffset+0x10c>)
 800325a:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <getOffset+0x10c>)
 8003260:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003264:	4b34      	ldr	r3, [pc, #208]	; (8003338 <getOffset+0x110>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800326c:	f7fd f83e 	bl	80002ec <__adddf3>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	492f      	ldr	r1, [pc, #188]	; (8003334 <getOffset+0x10c>)
 8003276:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <getOffset+0x10c>)
 800327c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <getOffset+0x110>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003288:	f7fd f830 	bl	80002ec <__adddf3>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4928      	ldr	r1, [pc, #160]	; (8003334 <getOffset+0x10c>)
 8003292:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <getOffset+0x108>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <getOffset+0x108>)
 800329e:	6013      	str	r3, [r2, #0]
					 saved_datas->offset_vals[2] = g[0][2];
					 getInitialQuaternion();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <getOffset+0x104>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e7c1      	b.n	800322c <getOffset+0x4>
					 g[0][0] /= 1000.0;
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <getOffset+0x10c>)
 80032aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <getOffset+0x114>)
 80032b4:	f7fd fafa 	bl	80008ac <__aeabi_ddiv>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	491d      	ldr	r1, [pc, #116]	; (8003334 <getOffset+0x10c>)
 80032be:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <getOffset+0x10c>)
 80032c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <getOffset+0x114>)
 80032ce:	f7fd faed 	bl	80008ac <__aeabi_ddiv>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4917      	ldr	r1, [pc, #92]	; (8003334 <getOffset+0x10c>)
 80032d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 80032dc:	4b15      	ldr	r3, [pc, #84]	; (8003334 <getOffset+0x10c>)
 80032de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <getOffset+0x114>)
 80032e8:	f7fd fae0 	bl	80008ac <__aeabi_ddiv>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4910      	ldr	r1, [pc, #64]	; (8003334 <getOffset+0x10c>)
 80032f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 saved_datas->offset_vals[0] = g[0][0];
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <getOffset+0x118>)
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <getOffset+0x10c>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					 saved_datas->offset_vals[1] = g[0][1];
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <getOffset+0x118>)
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <getOffset+0x10c>)
 800330a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800330e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					 saved_datas->offset_vals[2] = g[0][2];
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <getOffset+0x118>)
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <getOffset+0x10c>)
 8003318:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800331c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					 getInitialQuaternion();
 8003320:	f001 fd96 	bl	8004e50 <getInitialQuaternion>
					 break;
 8003324:	bf00      	nop
		}

	}
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000024a 	.word	0x2000024a
 8003330:	20000280 	.word	0x20000280
 8003334:	20000250 	.word	0x20000250
 8003338:	20000244 	.word	0x20000244
 800333c:	408f4000 	.word	0x408f4000
 8003340:	20000004 	.word	0x20000004

08003344 <calculateCRC>:

union DataPack veriler;
uint8_t bufferPrint[400];

static uint8_t calculateCRC()
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
	int check_sum = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800334e:	2301      	movs	r3, #1
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	e00a      	b.n	800336a <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <calculateCRC+0x48>)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4413      	add	r3, r2
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b3c      	cmp	r3, #60	; 0x3c
 800336e:	d9f1      	bls.n	8003354 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	425a      	negs	r2, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	bf58      	it	pl
 800337a:	4253      	negpl	r3, r2
 800337c:	b2db      	uxtb	r3, r3
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000284 	.word	0x20000284

08003390 <sendRF>:

static void sendRF()
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 8003394:	4806      	ldr	r0, [pc, #24]	; (80033b0 <sendRF+0x20>)
 8003396:	f004 f8ab 	bl	80074f0 <HAL_DMA_GetState>
 800339a:	4603      	mov	r3, r0
 800339c:	2b02      	cmp	r3, #2
 800339e:	d004      	beq.n	80033aa <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.dataYapi));
 80033a0:	2240      	movs	r2, #64	; 0x40
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <sendRF+0x24>)
 80033a4:	4804      	ldr	r0, [pc, #16]	; (80033b8 <sendRF+0x28>)
 80033a6:	f007 f90d 	bl	800a5c4 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200004a0 	.word	0x200004a0
 80033b4:	20000284 	.word	0x20000284
 80033b8:	200003d4 	.word	0x200003d4

080033bc <sendPC>:

static void sendPC()
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 80033c0:	4806      	ldr	r0, [pc, #24]	; (80033dc <sendPC+0x20>)
 80033c2:	f004 f895 	bl	80074f0 <HAL_DMA_GetState>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d004      	beq.n	80033d6 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	4904      	ldr	r1, [pc, #16]	; (80033e0 <sendPC+0x24>)
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <sendPC+0x28>)
 80033d2:	f007 f8f7 	bl	800a5c4 <HAL_UART_Transmit_DMA>
	}
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000560 	.word	0x20000560
 80033e0:	20000284 	.word	0x20000284
 80033e4:	20000418 	.word	0x20000418

080033e8 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6178      	str	r0, [r7, #20]
 80033f0:	6139      	str	r1, [r7, #16]
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 80033f6:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <packDatas+0x1fc>)
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	edd3 7a03 	vldr	s15, [r3, #12]
 800340a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800340e:	ee17 3a90 	vmov	r3, s15
 8003412:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4a74      	ldr	r2, [pc, #464]	; (80035e8 <packDatas+0x200>)
 8003418:	fb82 1203 	smull	r1, r2, r2, r3
 800341c:	1151      	asrs	r1, r2, #5
 800341e:	17da      	asrs	r2, r3, #31
 8003420:	1a8a      	subs	r2, r1, r2
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	fb01 f202 	mul.w	r2, r1, r2
 8003428:	1a9a      	subs	r2, r3, r2
 800342a:	4613      	mov	r3, r2
 800342c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4a6d      	ldr	r2, [pc, #436]	; (80035e8 <packDatas+0x200>)
 8003432:	fb82 1203 	smull	r1, r2, r2, r3
 8003436:	1152      	asrs	r2, r2, #5
 8003438:	17db      	asrs	r3, r3, #31
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <packDatas+0x200>)
 8003442:	fb82 1203 	smull	r1, r2, r2, r3
 8003446:	1151      	asrs	r1, r2, #5
 8003448:	17da      	asrs	r2, r3, #31
 800344a:	1a8a      	subs	r2, r1, r2
 800344c:	2164      	movs	r1, #100	; 0x64
 800344e:	fb01 f202 	mul.w	r2, r1, r2
 8003452:	1a9a      	subs	r2, r3, r2
 8003454:	4613      	mov	r3, r2
 8003456:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	b25a      	sxtb	r2, r3
 800345e:	7fbb      	ldrb	r3, [r7, #30]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b25b      	sxtb	r3, r3
 8003466:	4313      	orrs	r3, r2
 8003468:	b25b      	sxtb	r3, r3
 800346a:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 800346c:	7fbb      	ldrb	r3, [r7, #30]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	b25a      	sxtb	r2, r3
 8003472:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8003476:	4313      	orrs	r3, r2
 8003478:	b25b      	sxtb	r3, r3
 800347a:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 800347c:	4a59      	ldr	r2, [pc, #356]	; (80035e4 <packDatas+0x1fc>)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 8003482:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <packDatas+0x1fc>)
 8003484:	7fbb      	ldrb	r3, [r7, #30]
 8003486:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80035ec <packDatas+0x204>
 8003492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800349a:	ee17 3a90 	vmov	r3, s15
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <packDatas+0x1fc>)
 80034a2:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80034aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ae:	ee17 3a90 	vmov	r3, s15
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <packDatas+0x1fc>)
 80034b6:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80034be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80034ca:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80034ce:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <packDatas+0x1fc>)
 80034d0:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80034d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80034e0:	793a      	ldrb	r2, [r7, #4]
 80034e2:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <packDatas+0x1fc>)
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <packDatas+0x1fc>)
 80034ee:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)saved_datas->max_altitude;
#else
	veriler.dataYapi.maxAltitude = (int16_t)(int)((float)strain_gage_get_vals(&loadcell) / 1000.0);
 80034f0:	483f      	ldr	r0, [pc, #252]	; (80035f0 <packDatas+0x208>)
 80034f2:	f002 faf4 	bl	8005ade <strain_gage_get_vals>
 80034f6:	ee07 0a90 	vmov	s15, r0
 80034fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f851 	bl	80005a8 <__aeabi_f2d>
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <packDatas+0x20c>)
 800350c:	f7fd f9ce 	bl	80008ac <__aeabi_ddiv>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7fd fb4e 	bl	8000bb8 <__aeabi_d2iz>
 800351c:	4603      	mov	r3, r0
 800351e:	b21a      	sxth	r2, r3
 8003520:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <packDatas+0x1fc>)
 8003522:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	4a2e      	ldr	r2, [pc, #184]	; (80035e4 <packDatas+0x1fc>)
 800352a:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <packDatas+0x1fc>)
 8003532:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <packDatas+0x1fc>)
 800353a:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f7fd fb7f 	bl	8000c48 <__aeabi_d2f>
 800354a:	4603      	mov	r3, r0
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef1 7a67 	vneg.f32	s15, s15
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <packDatas+0x1fc>)
 8003556:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fb70 	bl	8000c48 <__aeabi_d2f>
 8003568:	4603      	mov	r3, r0
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef1 7a67 	vneg.f32	s15, s15
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <packDatas+0x1fc>)
 8003574:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f7fd fb61 	bl	8000c48 <__aeabi_d2f>
 8003586:	4603      	mov	r3, r0
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef1 7a67 	vneg.f32	s15, s15
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <packDatas+0x1fc>)
 8003592:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800359c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80035f8 <packDatas+0x210>
 80035a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <packDatas+0x1fc>)
 80035a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80035b0:	eddf 6a11 	vldr	s13, [pc, #68]	; 80035f8 <packDatas+0x210>
 80035b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <packDatas+0x1fc>)
 80035ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 80035be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d91a      	bls.n	80035fc <packDatas+0x214>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80035cc:	eeb1 7a67 	vneg.f32	s14, s15
 80035d0:	eddf 6a09 	vldr	s13, [pc, #36]	; 80035f8 <packDatas+0x210>
 80035d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035e0:	e013      	b.n	800360a <packDatas+0x222>
 80035e2:	bf00      	nop
 80035e4:	20000284 	.word	0x20000284
 80035e8:	51eb851f 	.word	0x51eb851f
 80035ec:	42c80000 	.word	0x42c80000
 80035f0:	200007c4 	.word	0x200007c4
 80035f4:	408f4000 	.word	0x408f4000
 80035f8:	447a0000 	.word	0x447a0000
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003602:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80035f8 <packDatas+0x210>
 8003606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800360a:	4b4e      	ldr	r3, [pc, #312]	; (8003744 <packDatas+0x35c>)
 800360c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	b25a      	sxtb	r2, r3
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <packDatas+0x360>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003624:	ee17 3a90 	vmov	r3, s15
 8003628:	135b      	asrs	r3, r3, #13
 800362a:	b25b      	sxtb	r3, r3
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	b25b      	sxtb	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	b25a      	sxtb	r2, r3
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <packDatas+0x360>)
 8003638:	edd3 7a01 	vldr	s15, [r3, #4]
 800363c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	139b      	asrs	r3, r3, #14
 8003646:	b25b      	sxtb	r3, r3
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	b25b      	sxtb	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b25a      	sxtb	r2, r3
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <packDatas+0x360>)
 8003654:	edd3 7a02 	vldr	s15, [r3, #8]
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 3a90 	vmov	r3, s15
 8003660:	13db      	asrs	r3, r3, #15
 8003662:	b25b      	sxtb	r3, r3
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	b25b      	sxtb	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b25b      	sxtb	r3, r3
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <packDatas+0x35c>)
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800367c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003688:	ee17 3a90 	vmov	r3, s15
 800368c:	b21a      	sxth	r2, r3
 800368e:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <packDatas+0x35c>)
 8003690:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 8003692:	f001 fb1d 	bl	8004cd0 <quaternionToTheta>
 8003696:	eef0 7a40 	vmov.f32	s15, s0
 800369a:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <packDatas+0x35c>)
 800369c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <packDatas+0x360>)
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036aa:	ee17 3a90 	vmov	r3, s15
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfb8      	it	lt
 80036b2:	425b      	neglt	r3, r3
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <packDatas+0x35c>)
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <packDatas+0x360>)
 80036be:	edd3 7a01 	vldr	s15, [r3, #4]
 80036c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c6:	ee17 3a90 	vmov	r3, s15
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bfb8      	it	lt
 80036ce:	425b      	neglt	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <packDatas+0x35c>)
 80036d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <packDatas+0x360>)
 80036da:	edd3 7a02 	vldr	s15, [r3, #8]
 80036de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e2:	ee17 3a90 	vmov	r3, s15
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	425b      	neglt	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <packDatas+0x35c>)
 80036f0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 80036f4:	f7ff fe26 	bl	8003344 <calculateCRC>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <packDatas+0x35c>)
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <packDatas+0x35c>)
 8003704:	220d      	movs	r2, #13
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <packDatas+0x35c>)
 800370c:	220a      	movs	r2, #10
 800370e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	dd06      	ble.n	8003734 <packDatas+0x34c>
		lora_activate();
 8003726:	f000 f88d 	bl	8003844 <lora_activate>
		sendRF();
 800372a:	f7ff fe31 	bl	8003390 <sendRF>
		sendPC();
 800372e:	f7ff fe45 	bl	80033bc <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 8003732:	e003      	b.n	800373c <packDatas+0x354>
		sendPC();
 8003734:	f7ff fe42 	bl	80033bc <sendPC>
		lora_deactivate();
 8003738:	f000 f896 	bl	8003868 <lora_deactivate>
}
 800373c:	bf00      	nop
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000284 	.word	0x20000284
 8003748:	2000091c 	.word	0x2000091c

0800374c <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	899b      	ldrh	r3, [r3, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	4619      	mov	r1, r3
 8003760:	f004 fa54 	bl	8007c0c <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 8003764:	f002 fdc0 	bl	80062e8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2264      	movs	r2, #100	; 0x64
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	899b      	ldrh	r3, [r3, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	4619      	mov	r1, r3
 8003792:	f004 fa3b 	bl	8007c0c <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 8003796:	f002 fda7 	bl	80062e8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 80037b6:	f002 fd97 	bl	80062e8 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	1ad2      	subs	r2, r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d907      	bls.n	80037da <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	899b      	ldrh	r3, [r3, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	f004 fa19 	bl	8007c0c <HAL_GPIO_WritePin>
	}
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
 80037f0:	460b      	mov	r3, r1
 80037f2:	71bb      	strb	r3, [r7, #6]
 80037f4:	4613      	mov	r3, r2
 80037f6:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 8003800:	797b      	ldrb	r3, [r7, #5]
 8003802:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e00c      	b.n	8003824 <send_command+0x40>
        command[3 + i] = data[i];
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	441a      	add	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3303      	adds	r3, #3
 8003814:	7812      	ldrb	r2, [r2, #0]
 8003816:	3318      	adds	r3, #24
 8003818:	443b      	add	r3, r7
 800381a:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3301      	adds	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b08      	cmp	r3, #8
 8003828:	ddef      	ble.n	800380a <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 800382a:	f107 0108 	add.w	r1, r7, #8
 800382e:	2364      	movs	r3, #100	; 0x64
 8003830:	220c      	movs	r2, #12
 8003832:	4803      	ldr	r0, [pc, #12]	; (8003840 <send_command+0x5c>)
 8003834:	f006 fe33 	bl	800a49e <HAL_UART_Transmit>
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200003d4 	.word	0x200003d4

08003844 <lora_activate>:

void lora_activate()
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800384e:	4805      	ldr	r0, [pc, #20]	; (8003864 <lora_activate+0x20>)
 8003850:	f004 f9dc 	bl	8007c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8003854:	2200      	movs	r2, #0
 8003856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800385a:	4802      	ldr	r0, [pc, #8]	; (8003864 <lora_activate+0x20>)
 800385c:	f004 f9d6 	bl	8007c0c <HAL_GPIO_WritePin>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40020800 	.word	0x40020800

08003868 <lora_deactivate>:

void lora_deactivate()
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
 800386c:	2201      	movs	r2, #1
 800386e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003872:	4805      	ldr	r0, [pc, #20]	; (8003888 <lora_deactivate+0x20>)
 8003874:	f004 f9ca 	bl	8007c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8003878:	2201      	movs	r2, #1
 800387a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800387e:	4802      	ldr	r0, [pc, #8]	; (8003888 <lora_deactivate+0x20>)
 8003880:	f004 f9c4 	bl	8007c0c <HAL_GPIO_WritePin>
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40020800 	.word	0x40020800

0800388c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2208      	movs	r2, #8
 80038c2:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2207      	movs	r2, #7
 80038c8:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	79db      	ldrb	r3, [r3, #7]
 80038ce:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	799b      	ldrb	r3, [r3, #6]
 80038d4:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7a5b      	ldrb	r3, [r3, #9]
 80038da:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7c5b      	ldrb	r3, [r3, #17]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	789a      	ldrb	r2, [r3, #2]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7a9b      	ldrb	r3, [r3, #10]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	78db      	ldrb	r3, [r3, #3]
 8003902:	4313      	orrs	r3, r2
 8003904:	b2db      	uxtb	r3, r3
 8003906:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7a1b      	ldrb	r3, [r3, #8]
 800390c:	2b53      	cmp	r3, #83	; 0x53
 800390e:	d902      	bls.n	8003916 <lora_configure+0x8a>
    	config->channel = 83;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2253      	movs	r2, #83	; 0x53
 8003914:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7a1b      	ldrb	r3, [r3, #8]
 800391a:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7ada      	ldrb	r2, [r3, #11]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7b1b      	ldrb	r3, [r3, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	b2da      	uxtb	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7b5b      	ldrb	r3, [r3, #13]
 800392c:	4313      	orrs	r3, r2
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7b9b      	ldrb	r3, [r3, #14]
 8003934:	4313      	orrs	r3, r2
 8003936:	b2da      	uxtb	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7bdb      	ldrb	r3, [r3, #15]
 800393c:	4313      	orrs	r3, r2
 800393e:	b2da      	uxtb	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7c1b      	ldrb	r3, [r3, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	b2db      	uxtb	r3, r3
 8003948:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	795b      	ldrb	r3, [r3, #5]
 800394e:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	791b      	ldrb	r3, [r3, #4]
 8003954:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	2209      	movs	r2, #9
 800395c:	2100      	movs	r1, #0
 800395e:	20c0      	movs	r0, #192	; 0xc0
 8003960:	f7ff ff40 	bl	80037e4 <send_command>
}
 8003964:	bf00      	nop
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	0000      	movs	r0, r0
	...

08003970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003976:	f002 fc51 	bl	800621c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800397a:	f000 fb03 	bl	8003f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800397e:	f000 fd1b 	bl	80043b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003982:	f000 fbd3 	bl	800412c <MX_I2C1_Init>
  MX_I2C3_Init();
 8003986:	f000 fbff 	bl	8004188 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800398a:	f000 fc7b 	bl	8004284 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800398e:	f000 fca3 	bl	80042d8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8003992:	f000 fccb 	bl	800432c <MX_DMA_Init>
  MX_ADC1_Init();
 8003996:	f000 fb69 	bl	800406c <MX_ADC1_Init>
  MX_UART4_Init();
 800399a:	f000 fc49 	bl	8004230 <MX_UART4_Init>
  MX_RTC_Init();
 800399e:	f000 fc21 	bl	80041e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2102      	movs	r1, #2
 80039a6:	2009      	movs	r0, #9
 80039a8:	f003 f9dd 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2102      	movs	r1, #2
 80039b0:	200a      	movs	r0, #10
 80039b2:	f003 f9d8 	bl	8006d66 <HAL_NVIC_SetPriority>
  lora_deactivate();
 80039b6:	f7ff ff57 	bl	8003868 <lora_deactivate>
  HAL_PWR_EnableBkUpAccess();
 80039ba:	f005 f963 	bl	8008c84 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 80039be:	4b93      	ldr	r3, [pc, #588]	; (8003c0c <main+0x29c>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a92      	ldr	r2, [pc, #584]	; (8003c0c <main+0x29c>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
  HAL_PWR_EnableBkUpReg();
 80039ca:	f005 f96f 	bl	8008cac <HAL_PWREx_EnableBkUpReg>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80039ce:	2200      	movs	r2, #0
 80039d0:	498f      	ldr	r1, [pc, #572]	; (8003c10 <main+0x2a0>)
 80039d2:	4890      	ldr	r0, [pc, #576]	; (8003c14 <main+0x2a4>)
 80039d4:	f006 fb68 	bl	800a0a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80039d8:	2200      	movs	r2, #0
 80039da:	498f      	ldr	r1, [pc, #572]	; (8003c18 <main+0x2a8>)
 80039dc:	488d      	ldr	r0, [pc, #564]	; (8003c14 <main+0x2a4>)
 80039de:	f006 fbc1 	bl	800a164 <HAL_RTC_GetDate>

  HAL_Delay(5);
 80039e2:	2005      	movs	r0, #5
 80039e4:	f002 fc8c 	bl	8006300 <HAL_Delay>
  bme280_begin();
 80039e8:	f000 fd9a 	bl	8004520 <bme280_begin>
  bmi088_begin();
 80039ec:	f000 fdae 	bl	800454c <bmi088_begin>



  if(measure_abs_time(sTime, sDate) > 1)
 80039f0:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <main+0x2a0>)
 80039f2:	4a89      	ldr	r2, [pc, #548]	; (8003c18 <main+0x2a8>)
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	9201      	str	r2, [sp, #4]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	9200      	str	r2, [sp, #0]
 80039fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039fe:	f001 fbbd 	bl	800517c <measure_abs_time>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d96c      	bls.n	8003ae2 <main+0x172>
  {
	  if(is_BMI_ok)
 8003a08:	4b84      	ldr	r3, [pc, #528]	; (8003c1c <main+0x2ac>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <main+0xa4>
		  bmi088_config();
 8003a10:	f7fe fdca 	bl	80025a8 <bmi088_config>
	  if(is_BME_ok)
 8003a14:	4b82      	ldr	r3, [pc, #520]	; (8003c20 <main+0x2b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <main+0xb0>
		  bme280_config();
 8003a1c:	f7fe f82c 	bl	8001a78 <bme280_config>

	  saved_datas->r_status = STAT_ROCKET_READY;
 8003a20:	4b80      	ldr	r3, [pc, #512]	; (8003c24 <main+0x2b4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
	  saved_datas->max_altitude = 0.0;
 8003a28:	4b7e      	ldr	r3, [pc, #504]	; (8003c24 <main+0x2b4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c
	  saved_datas->offset_vals[0] = 0.0;
 8003a32:	4b7c      	ldr	r3, [pc, #496]	; (8003c24 <main+0x2b4>)
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  saved_datas->offset_vals[1] = 0.0;
 8003a42:	4b78      	ldr	r3, [pc, #480]	; (8003c24 <main+0x2b4>)
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  saved_datas->offset_vals[2] = 0.0;
 8003a52:	4b74      	ldr	r3, [pc, #464]	; (8003c24 <main+0x2b4>)
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  saved_datas->q[0] = 0.0;
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <main+0x2b4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	605a      	str	r2, [r3, #4]
	  saved_datas->q[1] = 0.0;
 8003a6c:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <main+0x2b4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
	  saved_datas->q[2] = 0.0;
 8003a76:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <main+0x2b4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
	  saved_datas->q[3] = 0.0;
 8003a80:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <main+0x2b4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]

	  for(int i = 0; i < 20; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	e00a      	b.n	8003aa6 <main+0x136>
	  {
		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a94:	4864      	ldr	r0, [pc, #400]	; (8003c28 <main+0x2b8>)
 8003a96:	f004 f8d2 	bl	8007c3e <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8003a9a:	2032      	movs	r0, #50	; 0x32
 8003a9c:	f002 fc30 	bl	8006300 <HAL_Delay>
	  for(int i = 0; i < 20; i++)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b13      	cmp	r3, #19
 8003aaa:	ddf1      	ble.n	8003a90 <main+0x120>
	  }

	  loraBegin();
 8003aac:	f000 fd70 	bl	8004590 <loraBegin>
	  lora_deactivate();
 8003ab0:	f7ff feda 	bl	8003868 <lora_deactivate>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8003ab4:	2364      	movs	r3, #100	; 0x64
 8003ab6:	2213      	movs	r2, #19
 8003ab8:	495c      	ldr	r1, [pc, #368]	; (8003c2c <main+0x2bc>)
 8003aba:	485d      	ldr	r0, [pc, #372]	; (8003c30 <main+0x2c0>)
 8003abc:	f006 fcef 	bl	800a49e <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
	  if(is_BMI_ok)
 8003ac0:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <main+0x2ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <main+0x15c>
		  getOffset();
 8003ac8:	f7ff fbae 	bl	8003228 <getOffset>

#ifndef	ROCKET_CARD
  straing_gage_gpio_init(&loadcell, GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_1_GPIO_Port, GPIO_1_Pin);
 8003acc:	2302      	movs	r3, #2
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <main+0x2b8>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4954      	ldr	r1, [pc, #336]	; (8003c28 <main+0x2b8>)
 8003ad6:	4857      	ldr	r0, [pc, #348]	; (8003c34 <main+0x2c4>)
 8003ad8:	f001 ff91 	bl	80059fe <straing_gage_gpio_init>
#endif
	  HAL_Delay(10);
 8003adc:	200a      	movs	r0, #10
 8003ade:	f002 fc0f 	bl	8006300 <HAL_Delay>
  }



  HAL_UART_DeInit(&huart4);
 8003ae2:	4855      	ldr	r0, [pc, #340]	; (8003c38 <main+0x2c8>)
 8003ae4:	f006 fcac 	bl	800a440 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8003ae8:	4851      	ldr	r0, [pc, #324]	; (8003c30 <main+0x2c0>)
 8003aea:	f006 fca9 	bl	800a440 <HAL_UART_DeInit>
  huart4.Init.BaudRate = 115200;
 8003aee:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <main+0x2c8>)
 8003af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003af4:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8003af6:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <main+0x2c0>)
 8003af8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003afc:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//Telemetry
 8003afe:	484e      	ldr	r0, [pc, #312]	; (8003c38 <main+0x2c8>)
 8003b00:	f006 fc51 	bl	800a3a6 <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8003b04:	484a      	ldr	r0, [pc, #296]	; (8003c30 <main+0x2c0>)
 8003b06:	f006 fc4e 	bl	800a3a6 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8003b0a:	484c      	ldr	r0, [pc, #304]	; (8003c3c <main+0x2cc>)
 8003b0c:	f003 f970 	bl	8006df0 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 8003b10:	484b      	ldr	r0, [pc, #300]	; (8003c40 <main+0x2d0>)
 8003b12:	f003 f96d 	bl	8006df0 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8003b16:	484b      	ldr	r0, [pc, #300]	; (8003c44 <main+0x2d4>)
 8003b18:	f003 f96a 	bl	8006df0 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 8003b1c:	484a      	ldr	r0, [pc, #296]	; (8003c48 <main+0x2d8>)
 8003b1e:	f003 f967 	bl	8006df0 <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8003b22:	2203      	movs	r2, #3
 8003b24:	4949      	ldr	r1, [pc, #292]	; (8003c4c <main+0x2dc>)
 8003b26:	4844      	ldr	r0, [pc, #272]	; (8003c38 <main+0x2c8>)
 8003b28:	f006 fdca 	bl	800a6c0 <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 8003b2c:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <main+0x2e0>)
 8003b2e:	4a49      	ldr	r2, [pc, #292]	; (8003c54 <main+0x2e4>)
 8003b30:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <main+0x2e0>)
 8003b34:	2208      	movs	r2, #8
 8003b36:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 8003b38:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <main+0x2e8>)
 8003b3a:	4a46      	ldr	r2, [pc, #280]	; (8003c54 <main+0x2e4>)
 8003b3c:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 8003b3e:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <main+0x2e8>)
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 8003b44:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <main+0x2ec>)
 8003b46:	4a38      	ldr	r2, [pc, #224]	; (8003c28 <main+0x2b8>)
 8003b48:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 8003b4a:	4b44      	ldr	r3, [pc, #272]	; (8003c5c <main+0x2ec>)
 8003b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b50:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <main+0x2f0>)
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <main+0x2b8>)
 8003b56:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <main+0x2f0>)
 8003b5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b5e:	819a      	strh	r2, [r3, #12]

  //Interrupt activation for IMU sensor.
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b60:	2009      	movs	r0, #9
 8003b62:	f003 f91c 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003b66:	200a      	movs	r0, #10
 8003b68:	f003 f919 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  loraLastTime = -1.0;
 8003b6c:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <main+0x2f4>)
 8003b6e:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <main+0x2f8>)
 8003b70:	601a      	str	r2, [r3, #0]

  //This macro for viewing the gps raw data.
  //VIEW_GPS()

  UsrGpsL86Init(&huart2);
 8003b72:	482f      	ldr	r0, [pc, #188]	; (8003c30 <main+0x2c0>)
 8003b74:	f002 f92a 	bl	8005dcc <UsrGpsL86Init>

  ext_pin_open_duration(&buzzer, 1000);
 8003b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b7c:	4838      	ldr	r0, [pc, #224]	; (8003c60 <main+0x2f0>)
 8003b7e:	f7ff fdfd 	bl	800377c <ext_pin_open_duration>
  BMI_sensor.rawDatas.isGyroUpdated = 0;
 8003b82:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <main+0x2fc>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	745a      	strb	r2, [r3, #17]
  BMI_sensor.rawDatas.isAccelUpdated = 0;
 8003b88:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <main+0x2fc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	749a      	strb	r2, [r3, #18]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_BMI_ok)
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <main+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <main+0x22a>
		  bmi088_update();
 8003b96:	f7fe ff4b 	bl	8002a30 <bmi088_update>
	  if(is_BME_ok)
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <main+0x2b0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <main+0x236>
		  bme280_update();
 8003ba2:	f7fe f929 	bl	8001df8 <bme280_update>

	  measurePower(&guc);
 8003ba6:	4832      	ldr	r0, [pc, #200]	; (8003c70 <main+0x300>)
 8003ba8:	f000 fd26 	bl	80045f8 <measurePower>

	  ext_pin_update(&mos_1);
 8003bac:	4828      	ldr	r0, [pc, #160]	; (8003c50 <main+0x2e0>)
 8003bae:	f7ff fdfe 	bl	80037ae <ext_pin_update>
	  ext_pin_update(&mos_2);
 8003bb2:	4829      	ldr	r0, [pc, #164]	; (8003c58 <main+0x2e8>)
 8003bb4:	f7ff fdfb 	bl	80037ae <ext_pin_update>
	  ext_pin_update(&led);
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <main+0x2ec>)
 8003bba:	f7ff fdf8 	bl	80037ae <ext_pin_update>
	  ext_pin_update(&buzzer);
 8003bbe:	4828      	ldr	r0, [pc, #160]	; (8003c60 <main+0x2f0>)
 8003bc0:	f7ff fdf5 	bl	80037ae <ext_pin_update>

#if defined(ALGORITHM_1)
	  if(is_BME_ok)
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <main+0x2b0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <main+0x262>
		  algorithm_1_update(&BME280_sensor);
 8003bcc:	4829      	ldr	r0, [pc, #164]	; (8003c74 <main+0x304>)
 8003bce:	f7fd fbbf 	bl	8001350 <algorithm_1_update>
#endif
#if defined(ALGORITHM_2)
	  teta = quaternionToTheta();
 8003bd2:	f001 f87d 	bl	8004cd0 <quaternionToTheta>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <main+0x308>)
 8003bdc:	edc3 7a00 	vstr	s15, [r3]
	  if(is_BMI_ok)
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <main+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <main+0x28a>
		  algorithm_2_update(&BME280_sensor, &BMI_sensor, teta);
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <main+0x308>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf2:	491e      	ldr	r1, [pc, #120]	; (8003c6c <main+0x2fc>)
 8003bf4:	481f      	ldr	r0, [pc, #124]	; (8003c74 <main+0x304>)
 8003bf6:	f7fd fcd7 	bl	80015a8 <algorithm_2_update>
#endif

		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <main+0x2b4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d13f      	bne.n	8003c84 <main+0x314>
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <main+0x30c>)
 8003c06:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <main+0x310>)
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e044      	b.n	8003c96 <main+0x326>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	200007dc 	.word	0x200007dc
 8003c14:	200003b4 	.word	0x200003b4
 8003c18:	200007f0 	.word	0x200007f0
 8003c1c:	20000818 	.word	0x20000818
 8003c20:	20000814 	.word	0x20000814
 8003c24:	20000004 	.word	0x20000004
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	08012948 	.word	0x08012948
 8003c30:	2000045c 	.word	0x2000045c
 8003c34:	200007c4 	.word	0x200007c4
 8003c38:	200003d4 	.word	0x200003d4
 8003c3c:	20000560 	.word	0x20000560
 8003c40:	200005c0 	.word	0x200005c0
 8003c44:	200004a0 	.word	0x200004a0
 8003c48:	20000500 	.word	0x20000500
 8003c4c:	2000077c 	.word	0x2000077c
 8003c50:	20000784 	.word	0x20000784
 8003c54:	40020800 	.word	0x40020800
 8003c58:	20000794 	.word	0x20000794
 8003c5c:	200007a4 	.word	0x200007a4
 8003c60:	200007b4 	.word	0x200007b4
 8003c64:	20000804 	.word	0x20000804
 8003c68:	bf800000 	.word	0xbf800000
 8003c6c:	20000650 	.word	0x20000650
 8003c70:	2000076c 	.word	0x2000076c
 8003c74:	20000620 	.word	0x20000620
 8003c78:	2000080c 	.word	0x2000080c
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	40a00000 	.word	0x40a00000
		  else if(saved_datas->r_status > STAT_MOTOR_BURNOUT){lora_hz = 1;}
 8003c84:	4ba4      	ldr	r3, [pc, #656]	; (8003f18 <main+0x5a8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d903      	bls.n	8003c96 <main+0x326>
 8003c8e:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <main+0x5ac>)
 8003c90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c94:	601a      	str	r2, [r3, #0]

		  if(BME280_sensor.altitude > 4000 && is_quaternion_zeroed == 0)
 8003c96:	4ba2      	ldr	r3, [pc, #648]	; (8003f20 <main+0x5b0>)
 8003c98:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003c9c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003f24 <main+0x5b4>
 8003ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca8:	dd08      	ble.n	8003cbc <main+0x34c>
 8003caa:	4b9f      	ldr	r3, [pc, #636]	; (8003f28 <main+0x5b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <main+0x34c>
		  {
			  quaternionSet_zero();
 8003cb2:	f001 fa0b 	bl	80050cc <quaternionSet_zero>
			  is_quaternion_zeroed = 1;
 8003cb6:	4b9c      	ldr	r3, [pc, #624]	; (8003f28 <main+0x5b8>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
		  }
	  	  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003cbc:	f002 fb14 	bl	80062e8 <HAL_GetTick>
 8003cc0:	ee07 0a90 	vmov	s15, r0
 8003cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc8:	ee17 0a90 	vmov	r0, s15
 8003ccc:	f7fc fc6c 	bl	80005a8 <__aeabi_f2d>
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	4b95      	ldr	r3, [pc, #596]	; (8003f2c <main+0x5bc>)
 8003cd6:	f7fc fde9 	bl	80008ac <__aeabi_ddiv>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ffb1 	bl	8000c48 <__aeabi_d2f>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a91      	ldr	r2, [pc, #580]	; (8003f30 <main+0x5c0>)
 8003cea:	6013      	str	r3, [r2, #0]

	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 8003cec:	4b90      	ldr	r3, [pc, #576]	; (8003f30 <main+0x5c0>)
 8003cee:	ed93 7a00 	vldr	s14, [r3]
 8003cf2:	4b90      	ldr	r3, [pc, #576]	; (8003f34 <main+0x5c4>)
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfc:	eef0 7ae7 	vabs.f32	s15, s15
 8003d00:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003f38 <main+0x5c8>
 8003d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	dd5a      	ble.n	8003dc4 <main+0x454>
		 {
			 if(saved_datas->r_status == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0 && is_BMI_ok == 1)
 8003d0e:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <main+0x5a8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d151      	bne.n	8003dbc <main+0x44c>
 8003d18:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <main+0x5cc>)
 8003d1a:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8003d1e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003f08 <main+0x598>
 8003d22:	eeb0 0a47 	vmov.f32	s0, s14
 8003d26:	eef0 0a67 	vmov.f32	s1, s15
 8003d2a:	f00c ffb5 	bl	8010c98 <pow>
 8003d2e:	ec55 4b10 	vmov	r4, r5, d0
 8003d32:	4b82      	ldr	r3, [pc, #520]	; (8003f3c <main+0x5cc>)
 8003d34:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8003d38:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8003f08 <main+0x598>
 8003d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d40:	eef0 0a67 	vmov.f32	s1, s15
 8003d44:	f00c ffa8 	bl	8010c98 <pow>
 8003d48:	ec53 2b10 	vmov	r2, r3, d0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f7fc facc 	bl	80002ec <__adddf3>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <main+0x5cc>)
 8003d5e:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8003d62:	ed9f 1b69 	vldr	d1, [pc, #420]	; 8003f08 <main+0x598>
 8003d66:	eeb0 0a47 	vmov.f32	s0, s14
 8003d6a:	eef0 0a67 	vmov.f32	s1, s15
 8003d6e:	f00c ff93 	bl	8010c98 <pow>
 8003d72:	ec53 2b10 	vmov	r2, r3, d0
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fab7 	bl	80002ec <__adddf3>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	ec43 2b17 	vmov	d7, r2, r3
 8003d86:	eeb0 0a47 	vmov.f32	s0, s14
 8003d8a:	eef0 0a67 	vmov.f32	s1, s15
 8003d8e:	f00c fff3 	bl	8010d78 <sqrt>
 8003d92:	ec51 0b10 	vmov	r0, r1, d0
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	4b69      	ldr	r3, [pc, #420]	; (8003f40 <main+0x5d0>)
 8003d9c:	f7fc fece 	bl	8000b3c <__aeabi_dcmplt>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <main+0x44c>
 8003da6:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <main+0x5d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d106      	bne.n	8003dbc <main+0x44c>
			 {
				 getInitialQuaternion();
 8003dae:	f001 f84f 	bl	8004e50 <getInitialQuaternion>
				 ext_pin_open_duration(&buzzer, 500);
 8003db2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003db6:	4864      	ldr	r0, [pc, #400]	; (8003f48 <main+0x5d8>)
 8003db8:	f7ff fce0 	bl	800377c <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 8003dbc:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <main+0x5c0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5c      	ldr	r2, [pc, #368]	; (8003f34 <main+0x5c4>)
 8003dc2:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS get location
		 if(g_GnssRx_Flag)
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <main+0x5dc>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <main+0x462>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 8003dcc:	4860      	ldr	r0, [pc, #384]	; (8003f50 <main+0x5e0>)
 8003dce:	f002 f80d 	bl	8005dec <Usr_GpsL86GetValues>
		 }

		 //Lora timer;
		 //loop_counter += 1;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003dd2:	f002 fa89 	bl	80062e8 <HAL_GetTick>
 8003dd6:	ee07 0a90 	vmov	s15, r0
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	ee17 0a90 	vmov	r0, s15
 8003de2:	f7fc fbe1 	bl	80005a8 <__aeabi_f2d>
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <main+0x5bc>)
 8003dec:	f7fc fd5e 	bl	80008ac <__aeabi_ddiv>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	f7fc ff26 	bl	8000c48 <__aeabi_d2f>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <main+0x5c0>)
 8003e00:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <main+0x5c0>)
 8003e04:	ed93 7a00 	vldr	s14, [r3]
 8003e08:	4b52      	ldr	r3, [pc, #328]	; (8003f54 <main+0x5e4>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e12:	eef0 7ae7 	vabs.f32	s15, s15
 8003e16:	ee17 0a90 	vmov	r0, s15
 8003e1a:	f7fc fbc5 	bl	80005a8 <__aeabi_f2d>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	460d      	mov	r5, r1
 8003e22:	4b3e      	ldr	r3, [pc, #248]	; (8003f1c <main+0x5ac>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fbbe 	bl	80005a8 <__aeabi_f2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	4948      	ldr	r1, [pc, #288]	; (8003f58 <main+0x5e8>)
 8003e36:	f7fc fd39 	bl	80008ac <__aeabi_ddiv>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4629      	mov	r1, r5
 8003e42:	f7fc fe99 	bl	8000b78 <__aeabi_dcmpgt>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00f      	beq.n	8003e6c <main+0x4fc>
		 {
			 //BME280_sensor.velocity = (float)(loop_counter);
			 getWatt();
 8003e4c:	f000 fc68 	bl	8004720 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, saved_datas->r_status);
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <main+0x5a8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <main+0x5ec>)
 8003e5a:	4a3d      	ldr	r2, [pc, #244]	; (8003f50 <main+0x5e0>)
 8003e5c:	4930      	ldr	r1, [pc, #192]	; (8003f20 <main+0x5b0>)
 8003e5e:	4837      	ldr	r0, [pc, #220]	; (8003f3c <main+0x5cc>)
 8003e60:	f7ff fac2 	bl	80033e8 <packDatas>
			 loraLastTime = currentTime;
 8003e64:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <main+0x5c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3a      	ldr	r2, [pc, #232]	; (8003f54 <main+0x5e4>)
 8003e6a:	6013      	str	r3, [r2, #0]
			 //loop_counter = 0;
		 }


		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 8003e6c:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <main+0x5c0>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <main+0x5f0>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7c:	eef0 7ae7 	vabs.f32	s15, s15
 8003e80:	ee17 0a90 	vmov	r0, s15
 8003e84:	f7fc fb90 	bl	80005a8 <__aeabi_f2d>
 8003e88:	a321      	add	r3, pc, #132	; (adr r3, 8003f10 <main+0x5a0>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc fe73 	bl	8000b78 <__aeabi_dcmpgt>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d016      	beq.n	8003ec6 <main+0x556>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4932      	ldr	r1, [pc, #200]	; (8003f64 <main+0x5f4>)
 8003e9c:	4832      	ldr	r0, [pc, #200]	; (8003f68 <main+0x5f8>)
 8003e9e:	f006 f903 	bl	800a0a8 <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4931      	ldr	r1, [pc, #196]	; (8003f6c <main+0x5fc>)
 8003ea6:	4830      	ldr	r0, [pc, #192]	; (8003f68 <main+0x5f8>)
 8003ea8:	f006 f95c 	bl	800a164 <HAL_RTC_GetDate>
			 save_time(sTime, sDate);
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <main+0x5f4>)
 8003eae:	4a2f      	ldr	r2, [pc, #188]	; (8003f6c <main+0x5fc>)
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	9201      	str	r2, [sp, #4]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	9200      	str	r2, [sp, #0]
 8003eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eba:	f001 f925 	bl	8005108 <save_time>
			 lastTime = currentTime;
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <main+0x5c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <main+0x5f0>)
 8003ec4:	6013      	str	r3, [r2, #0]
		 }

		 //This block is used for manual deploy via telemetry for testing.
		if(is_updated_uart4 == 1)
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <main+0x600>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	f47f ae5f 	bne.w	8003b8e <main+0x21e>
		{
			//ext_pin_open(&buzzer);
		  if(strcmp((char*)mosfet_buffer, "OK1") == 0)
 8003ed0:	4928      	ldr	r1, [pc, #160]	; (8003f74 <main+0x604>)
 8003ed2:	4829      	ldr	r0, [pc, #164]	; (8003f78 <main+0x608>)
 8003ed4:	f7fc f99c 	bl	8000210 <strcmp>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <main+0x578>
		  {
			  deploy_p_1();
 8003ede:	f000 fc6d 	bl	80047bc <deploy_p_1>
			  ext_pin_open(&led);
 8003ee2:	4826      	ldr	r0, [pc, #152]	; (8003f7c <main+0x60c>)
 8003ee4:	f7ff fc32 	bl	800374c <ext_pin_open>
		  }
		  if(strcmp((char*)mosfet_buffer, "OK2") == 0)
 8003ee8:	4925      	ldr	r1, [pc, #148]	; (8003f80 <main+0x610>)
 8003eea:	4823      	ldr	r0, [pc, #140]	; (8003f78 <main+0x608>)
 8003eec:	f7fc f990 	bl	8000210 <strcmp>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <main+0x590>
		  {
			  deploy_p_2();
 8003ef6:	f000 fc71 	bl	80047dc <deploy_p_2>
			  ext_pin_open(&led);
 8003efa:	4820      	ldr	r0, [pc, #128]	; (8003f7c <main+0x60c>)
 8003efc:	f7ff fc26 	bl	800374c <ext_pin_open>
		  }
		  is_updated_uart4 = 0;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <main+0x600>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
	  if(is_BMI_ok)
 8003f06:	e642      	b.n	8003b8e <main+0x21e>
 8003f08:	00000000 	.word	0x00000000
 8003f0c:	40000000 	.word	0x40000000
 8003f10:	9999999a 	.word	0x9999999a
 8003f14:	3fc99999 	.word	0x3fc99999
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000620 	.word	0x20000620
 8003f24:	457a0000 	.word	0x457a0000
 8003f28:	2000081c 	.word	0x2000081c
 8003f2c:	408f4000 	.word	0x408f4000
 8003f30:	200007f4 	.word	0x200007f4
 8003f34:	200007fc 	.word	0x200007fc
 8003f38:	42700000 	.word	0x42700000
 8003f3c:	20000650 	.word	0x20000650
 8003f40:	40140000 	.word	0x40140000
 8003f44:	20000818 	.word	0x20000818
 8003f48:	200007b4 	.word	0x200007b4
 8003f4c:	2000092c 	.word	0x2000092c
 8003f50:	2000073c 	.word	0x2000073c
 8003f54:	20000804 	.word	0x20000804
 8003f58:	3ff00000 	.word	0x3ff00000
 8003f5c:	2000076c 	.word	0x2000076c
 8003f60:	200007f8 	.word	0x200007f8
 8003f64:	200007dc 	.word	0x200007dc
 8003f68:	200003b4 	.word	0x200003b4
 8003f6c:	200007f0 	.word	0x200007f0
 8003f70:	20000780 	.word	0x20000780
 8003f74:	0801295c 	.word	0x0801295c
 8003f78:	2000077c 	.word	0x2000077c
 8003f7c:	200007a4 	.word	0x200007a4
 8003f80:	08012960 	.word	0x08012960

08003f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b094      	sub	sp, #80	; 0x50
 8003f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	f107 031c 	add.w	r3, r7, #28
 8003f8e:	2234      	movs	r2, #52	; 0x34
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f007 fd46 	bl	800ba24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f98:	f107 0308 	add.w	r3, r7, #8
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fa8:	2300      	movs	r3, #0
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <SystemClock_Config+0xe0>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <SystemClock_Config+0xe0>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <SystemClock_Config+0xe0>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <SystemClock_Config+0xe4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	; (8004068 <SystemClock_Config+0xe4>)
 8003fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <SystemClock_Config+0xe4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003fe0:	2305      	movs	r3, #5
 8003fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fe8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003ffc:	23b4      	movs	r3, #180	; 0xb4
 8003ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004000:	2302      	movs	r3, #2
 8004002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004004:	2302      	movs	r3, #2
 8004006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004008:	2302      	movs	r3, #2
 800400a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800400c:	f107 031c 	add.w	r3, r7, #28
 8004010:	4618      	mov	r0, r3
 8004012:	f005 fd35 	bl	8009a80 <HAL_RCC_OscConfig>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800401c:	f000 fbee 	bl	80047fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004020:	f004 fe6a 	bl	8008cf8 <HAL_PWREx_EnableOverDrive>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800402a:	f000 fbe7 	bl	80047fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800402e:	230f      	movs	r3, #15
 8004030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004032:	2302      	movs	r3, #2
 8004034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800403a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800403e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004044:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	2105      	movs	r1, #5
 800404c:	4618      	mov	r0, r3
 800404e:	f004 fea3 	bl	8008d98 <HAL_RCC_ClockConfig>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004058:	f000 fbd0 	bl	80047fc <Error_Handler>
  }
}
 800405c:	bf00      	nop
 800405e:	3750      	adds	r7, #80	; 0x50
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000

0800406c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004072:	463b      	mov	r3, r7
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <MX_ADC1_Init+0xb4>)
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <MX_ADC1_Init+0xb8>)
 8004082:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004084:	4b26      	ldr	r3, [pc, #152]	; (8004120 <MX_ADC1_Init+0xb4>)
 8004086:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800408a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <MX_ADC1_Init+0xb4>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <MX_ADC1_Init+0xb4>)
 8004094:	2201      	movs	r2, #1
 8004096:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <MX_ADC1_Init+0xb4>)
 800409a:	2201      	movs	r2, #1
 800409c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040ac:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040ae:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <MX_ADC1_Init+0xbc>)
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040ba:	2202      	movs	r2, #2
 80040bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040cc:	4814      	ldr	r0, [pc, #80]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040ce:	f002 f93b 	bl	8006348 <HAL_ADC_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80040d8:	f000 fb90 	bl	80047fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040dc:	230c      	movs	r3, #12
 80040de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040e0:	2301      	movs	r3, #1
 80040e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80040e4:	2304      	movs	r3, #4
 80040e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040e8:	463b      	mov	r3, r7
 80040ea:	4619      	mov	r1, r3
 80040ec:	480c      	ldr	r0, [pc, #48]	; (8004120 <MX_ADC1_Init+0xb4>)
 80040ee:	f002 fb0d 	bl	800670c <HAL_ADC_ConfigChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80040f8:	f000 fb80 	bl	80047fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80040fc:	230b      	movs	r3, #11
 80040fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004100:	2302      	movs	r3, #2
 8004102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004104:	463b      	mov	r3, r7
 8004106:	4619      	mov	r1, r3
 8004108:	4805      	ldr	r0, [pc, #20]	; (8004120 <MX_ADC1_Init+0xb4>)
 800410a:	f002 faff 	bl	800670c <HAL_ADC_ConfigChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004114:	f000 fb72 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200002c4 	.word	0x200002c4
 8004124:	40012000 	.word	0x40012000
 8004128:	0f000001 	.word	0x0f000001

0800412c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <MX_I2C1_Init+0x50>)
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <MX_I2C1_Init+0x54>)
 8004134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <MX_I2C1_Init+0x50>)
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <MX_I2C1_Init+0x58>)
 800413a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <MX_I2C1_Init+0x50>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <MX_I2C1_Init+0x50>)
 8004144:	2200      	movs	r2, #0
 8004146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <MX_I2C1_Init+0x50>)
 800414a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800414e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <MX_I2C1_Init+0x50>)
 8004152:	2200      	movs	r2, #0
 8004154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <MX_I2C1_Init+0x50>)
 8004158:	2200      	movs	r2, #0
 800415a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <MX_I2C1_Init+0x50>)
 800415e:	2200      	movs	r2, #0
 8004160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <MX_I2C1_Init+0x50>)
 8004164:	2200      	movs	r2, #0
 8004166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004168:	4804      	ldr	r0, [pc, #16]	; (800417c <MX_I2C1_Init+0x50>)
 800416a:	f003 fd9b 	bl	8007ca4 <HAL_I2C_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004174:	f000 fb42 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	2000030c 	.word	0x2000030c
 8004180:	40005400 	.word	0x40005400
 8004184:	000186a0 	.word	0x000186a0

08004188 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <MX_I2C3_Init+0x50>)
 800418e:	4a13      	ldr	r2, [pc, #76]	; (80041dc <MX_I2C3_Init+0x54>)
 8004190:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <MX_I2C3_Init+0x50>)
 8004194:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <MX_I2C3_Init+0x58>)
 8004196:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <MX_I2C3_Init+0x50>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80041c4:	4804      	ldr	r0, [pc, #16]	; (80041d8 <MX_I2C3_Init+0x50>)
 80041c6:	f003 fd6d 	bl	8007ca4 <HAL_I2C_Init>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80041d0:	f000 fb14 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000360 	.word	0x20000360
 80041dc:	40005c00 	.word	0x40005c00
 80041e0:	000186a0 	.word	0x000186a0

080041e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <MX_RTC_Init+0x44>)
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <MX_RTC_Init+0x48>)
 80041ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <MX_RTC_Init+0x44>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <MX_RTC_Init+0x44>)
 80041f6:	227f      	movs	r2, #127	; 0x7f
 80041f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <MX_RTC_Init+0x44>)
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <MX_RTC_Init+0x44>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <MX_RTC_Init+0x44>)
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <MX_RTC_Init+0x44>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004212:	4805      	ldr	r0, [pc, #20]	; (8004228 <MX_RTC_Init+0x44>)
 8004214:	f005 fed2 	bl	8009fbc <HAL_RTC_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800421e:	f000 faed 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200003b4 	.word	0x200003b4
 800422c:	40002800 	.word	0x40002800

08004230 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <MX_UART4_Init+0x4c>)
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <MX_UART4_Init+0x50>)
 8004238:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <MX_UART4_Init+0x4c>)
 800423c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004240:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <MX_UART4_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <MX_UART4_Init+0x4c>)
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <MX_UART4_Init+0x4c>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <MX_UART4_Init+0x4c>)
 8004256:	220c      	movs	r2, #12
 8004258:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <MX_UART4_Init+0x4c>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <MX_UART4_Init+0x4c>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <MX_UART4_Init+0x4c>)
 8004268:	f006 f89d 	bl	800a3a6 <HAL_UART_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004272:	f000 fac3 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200003d4 	.word	0x200003d4
 8004280:	40004c00 	.word	0x40004c00

08004284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 800428a:	4a12      	ldr	r2, [pc, #72]	; (80042d4 <MX_USART1_UART_Init+0x50>)
 800428c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 8004290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004296:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 80042aa:	220c      	movs	r2, #12
 80042ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042ba:	4805      	ldr	r0, [pc, #20]	; (80042d0 <MX_USART1_UART_Init+0x4c>)
 80042bc:	f006 f873 	bl	800a3a6 <HAL_UART_Init>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042c6:	f000 fa99 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000418 	.word	0x20000418
 80042d4:	40011000 	.word	0x40011000

080042d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <MX_USART2_UART_Init+0x50>)
 80042e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 80042e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 80042fe:	220c      	movs	r2, #12
 8004300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 8004304:	2200      	movs	r2, #0
 8004306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 800430a:	2200      	movs	r2, #0
 800430c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800430e:	4805      	ldr	r0, [pc, #20]	; (8004324 <MX_USART2_UART_Init+0x4c>)
 8004310:	f006 f849 	bl	800a3a6 <HAL_UART_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800431a:	f000 fa6f 	bl	80047fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2000045c 	.word	0x2000045c
 8004328:	40004400 	.word	0x40004400

0800432c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <MX_DMA_Init+0x88>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <MX_DMA_Init+0x88>)
 800433c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004340:	6313      	str	r3, [r2, #48]	; 0x30
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <MX_DMA_Init+0x88>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <MX_DMA_Init+0x88>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <MX_DMA_Init+0x88>)
 8004358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <MX_DMA_Init+0x88>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	200d      	movs	r0, #13
 8004370:	f002 fcf9 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004374:	200d      	movs	r0, #13
 8004376:	f002 fd12 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2100      	movs	r1, #0
 800437e:	200f      	movs	r0, #15
 8004380:	f002 fcf1 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004384:	200f      	movs	r0, #15
 8004386:	f002 fd0a 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	2010      	movs	r0, #16
 8004390:	f002 fce9 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004394:	2010      	movs	r0, #16
 8004396:	f002 fd02 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	2046      	movs	r0, #70	; 0x46
 80043a0:	f002 fce1 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80043a4:	2046      	movs	r0, #70	; 0x46
 80043a6:	f002 fcfa 	bl	8006d9e <HAL_NVIC_EnableIRQ>

}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800

080043b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043be:	f107 0314 	add.w	r3, r7, #20
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	4b50      	ldr	r3, [pc, #320]	; (8004514 <MX_GPIO_Init+0x15c>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	4a4f      	ldr	r2, [pc, #316]	; (8004514 <MX_GPIO_Init+0x15c>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	6313      	str	r3, [r2, #48]	; 0x30
 80043de:	4b4d      	ldr	r3, [pc, #308]	; (8004514 <MX_GPIO_Init+0x15c>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b49      	ldr	r3, [pc, #292]	; (8004514 <MX_GPIO_Init+0x15c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a48      	ldr	r2, [pc, #288]	; (8004514 <MX_GPIO_Init+0x15c>)
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b46      	ldr	r3, [pc, #280]	; (8004514 <MX_GPIO_Init+0x15c>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <MX_GPIO_Init+0x15c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4a41      	ldr	r2, [pc, #260]	; (8004514 <MX_GPIO_Init+0x15c>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6313      	str	r3, [r2, #48]	; 0x30
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <MX_GPIO_Init+0x15c>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <MX_GPIO_Init+0x15c>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <MX_GPIO_Init+0x15c>)
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
 8004432:	4b38      	ldr	r3, [pc, #224]	; (8004514 <MX_GPIO_Init+0x15c>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 800443e:	2200      	movs	r2, #0
 8004440:	f640 4188 	movw	r1, #3208	; 0xc88
 8004444:	4834      	ldr	r0, [pc, #208]	; (8004518 <MX_GPIO_Init+0x160>)
 8004446:	f003 fbe1 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_0_Pin|GPIO_1_Pin, GPIO_PIN_SET);
 800444a:	2201      	movs	r2, #1
 800444c:	2103      	movs	r1, #3
 800444e:	4833      	ldr	r0, [pc, #204]	; (800451c <MX_GPIO_Init+0x164>)
 8004450:	f003 fbdc 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800445a:	4830      	ldr	r0, [pc, #192]	; (800451c <MX_GPIO_Init+0x164>)
 800445c:	f003 fbd6 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 8004460:	f640 4388 	movw	r3, #3208	; 0xc88
 8004464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004472:	f107 0314 	add.w	r3, r7, #20
 8004476:	4619      	mov	r1, r3
 8004478:	4827      	ldr	r0, [pc, #156]	; (8004518 <MX_GPIO_Init+0x160>)
 800447a:	f003 f927 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_0_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin;
 800447e:	2301      	movs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004482:	2301      	movs	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448a:	2303      	movs	r3, #3
 800448c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_0_GPIO_Port, &GPIO_InitStruct);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	4821      	ldr	r0, [pc, #132]	; (800451c <MX_GPIO_Init+0x164>)
 8004496:	f003 f919 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_1_Pin BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = GPIO_1_Pin|BUZZER_Pin|LED_Pin;
 800449a:	f243 0302 	movw	r3, #12290	; 0x3002
 800449e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a0:	2301      	movs	r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	4619      	mov	r1, r3
 80044b2:	481a      	ldr	r0, [pc, #104]	; (800451c <MX_GPIO_Init+0x164>)
 80044b4:	f003 f90a 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 80044b8:	2318      	movs	r3, #24
 80044ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80044c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c6:	f107 0314 	add.w	r3, r7, #20
 80044ca:	4619      	mov	r1, r3
 80044cc:	4813      	ldr	r0, [pc, #76]	; (800451c <MX_GPIO_Init+0x164>)
 80044ce:	f003 f8fd 	bl	80076cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 80044d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	4619      	mov	r1, r3
 80044e6:	480d      	ldr	r0, [pc, #52]	; (800451c <MX_GPIO_Init+0x164>)
 80044e8:	f003 f8f0 	bl	80076cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2102      	movs	r1, #2
 80044f0:	2009      	movs	r0, #9
 80044f2:	f002 fc38 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80044f6:	2009      	movs	r0, #9
 80044f8:	f002 fc51 	bl	8006d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2102      	movs	r1, #2
 8004500:	200a      	movs	r0, #10
 8004502:	f002 fc30 	bl	8006d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004506:	200a      	movs	r0, #10
 8004508:	f002 fc49 	bl	8006d9e <HAL_NVIC_EnableIRQ>

}
 800450c:	bf00      	nop
 800450e:	3728      	adds	r7, #40	; 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	40020800 	.word	0x40020800
 800451c:	40020400 	.word	0x40020400

08004520 <bme280_begin>:

/* USER CODE BEGIN 4 */

void bme280_begin()
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <bme280_begin+0x24>)
 8004526:	2203      	movs	r2, #3
 8004528:	749a      	strb	r2, [r3, #18]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <bme280_begin+0x24>)
 800452c:	2203      	movs	r2, #3
 800452e:	741a      	strb	r2, [r3, #16]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <bme280_begin+0x24>)
 8004532:	2204      	movs	r2, #4
 8004534:	745a      	strb	r2, [r3, #17]
	bme280_init(&BME280_sensor, &hi2c1);
 8004536:	4904      	ldr	r1, [pc, #16]	; (8004548 <bme280_begin+0x28>)
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <bme280_begin+0x24>)
 800453a:	f7fd fc27 	bl	8001d8c <bme280_init>
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000620 	.word	0x20000620
 8004548:	2000030c 	.word	0x2000030c

0800454c <bmi088_begin>:
void bmi088_begin()
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <bmi088_begin+0x3c>)
 8004552:	2208      	movs	r2, #8
 8004554:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <bmi088_begin+0x3c>)
 8004558:	2209      	movs	r2, #9
 800455a:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <bmi088_begin+0x3c>)
 800455e:	2200      	movs	r2, #0
 8004560:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <bmi088_begin+0x3c>)
 8004564:	2202      	movs	r2, #2
 8004566:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <bmi088_begin+0x3c>)
 800456a:	2201      	movs	r2, #1
 800456c:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <bmi088_begin+0x3c>)
 8004570:	2200      	movs	r2, #0
 8004572:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <bmi088_begin+0x3c>)
 8004576:	2200      	movs	r2, #0
 8004578:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 800457a:	4904      	ldr	r1, [pc, #16]	; (800458c <bmi088_begin+0x40>)
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <bmi088_begin+0x3c>)
 800457e:	f7fe fa01 	bl	8002984 <bmi088_init>
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000650 	.word	0x20000650
 800458c:	20000360 	.word	0x20000360

08004590 <loraBegin>:


void loraBegin()
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8004594:	2200      	movs	r2, #0
 8004596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800459a:	4814      	ldr	r0, [pc, #80]	; (80045ec <loraBegin+0x5c>)
 800459c:	f003 fb36 	bl	8007c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 80045a0:	2201      	movs	r2, #1
 80045a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045a6:	4811      	ldr	r0, [pc, #68]	; (80045ec <loraBegin+0x5c>)
 80045a8:	f003 fb30 	bl	8007c0c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80045ac:	2064      	movs	r0, #100	; 0x64
 80045ae:	f001 fea7 	bl	8006300 <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 80045b2:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <loraBegin+0x60>)
 80045b4:	22e0      	movs	r2, #224	; 0xe0
 80045b6:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 80045b8:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <loraBegin+0x60>)
 80045ba:	2206      	movs	r2, #6
 80045bc:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <loraBegin+0x60>)
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <loraBegin+0x60>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <loraBegin+0x60>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <loraBegin+0x60>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <loraBegin+0x60>)
 80045d8:	221e      	movs	r2, #30
 80045da:	721a      	strb	r2, [r3, #8]
#endif

    lora_configure(&e22_lora);
 80045dc:	4804      	ldr	r0, [pc, #16]	; (80045f0 <loraBegin+0x60>)
 80045de:	f7ff f955 	bl	800388c <lora_configure>

    HAL_Delay(100);
 80045e2:	2064      	movs	r0, #100	; 0x64
 80045e4:	f001 fe8c 	bl	8006300 <HAL_Delay>
}
 80045e8:	bf00      	nop
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40020800 	.word	0x40020800
 80045f0:	20000728 	.word	0x20000728
 80045f4:	00000000 	.word	0x00000000

080045f8 <measurePower>:

void measurePower(power *guc_)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	ed2d 8b02 	vpush	{d8}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 8004604:	4840      	ldr	r0, [pc, #256]	; (8004708 <measurePower+0x110>)
 8004606:	f001 fee3 	bl	80063d0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800460a:	210a      	movs	r1, #10
 800460c:	483e      	ldr	r0, [pc, #248]	; (8004708 <measurePower+0x110>)
 800460e:	f001 ffe4 	bl	80065da <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 8004612:	483d      	ldr	r0, [pc, #244]	; (8004708 <measurePower+0x110>)
 8004614:	f002 f86c 	bl	80066f0 <HAL_ADC_GetValue>
 8004618:	4603      	mov	r3, r0
 800461a:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800461c:	210a      	movs	r1, #10
 800461e:	483a      	ldr	r0, [pc, #232]	; (8004708 <measurePower+0x110>)
 8004620:	f001 ffdb 	bl	80065da <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 8004624:	4838      	ldr	r0, [pc, #224]	; (8004708 <measurePower+0x110>)
 8004626:	f002 f863 	bl	80066f0 <HAL_ADC_GetValue>
 800462a:	4603      	mov	r3, r0
 800462c:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 800462e:	4836      	ldr	r0, [pc, #216]	; (8004708 <measurePower+0x110>)
 8004630:	f001 ffa0 	bl	8006574 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800470c <measurePower+0x114>
 8004642:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004646:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004710 <measurePower+0x118>
 800464a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465e:	ee17 0a90 	vmov	r0, s15
 8004662:	f7fb ffa1 	bl	80005a8 <__aeabi_f2d>
 8004666:	a326      	add	r3, pc, #152	; (adr r3, 8004700 <measurePower+0x108>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb fff4 	bl	8000658 <__aeabi_dmul>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <measurePower+0x11c>)
 800467e:	f7fc f915 	bl	80008ac <__aeabi_ddiv>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f7fc fadd 	bl	8000c48 <__aeabi_d2f>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	ed93 7a01 	vldr	s14, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80046a4:	f001 fe20 	bl	80062e8 <HAL_GetTick>
 80046a8:	ee07 0a90 	vmov	s15, r0
 80046ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004718 <measurePower+0x120>
 80046b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <measurePower+0x124>)
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 80046d6:	f001 fe07 	bl	80062e8 <HAL_GetTick>
 80046da:	ee07 0a90 	vmov	s15, r0
 80046de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046e2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004718 <measurePower+0x120>
 80046e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <measurePower+0x124>)
 80046ec:	edc3 7a00 	vstr	s15, [r3]
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	ecbd 8b02 	vpop	{d8}
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	f3af 8000 	nop.w
 8004700:	66666666 	.word	0x66666666
 8004704:	402a6666 	.word	0x402a6666
 8004708:	200002c4 	.word	0x200002c4
 800470c:	454e4000 	.word	0x454e4000
 8004710:	45800000 	.word	0x45800000
 8004714:	40b00000 	.word	0x40b00000
 8004718:	447a0000 	.word	0x447a0000
 800471c:	20000800 	.word	0x20000800

08004720 <getWatt>:

void getWatt()
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 8004726:	f001 fddf 	bl	80062e8 <HAL_GetTick>
 800472a:	ee07 0a90 	vmov	s15, r0
 800472e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004732:	eddf 6a12 	vldr	s13, [pc, #72]	; 800477c <getWatt+0x5c>
 8004736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800473a:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <getWatt+0x60>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	ed97 7a01 	vldr	s14, [r7, #4]
 8004748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474c:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <getWatt+0x60>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <getWatt+0x64>)
 8004758:	edd3 6a02 	vldr	s13, [r3, #8]
 800475c:	ed97 7a00 	vldr	s14, [r7]
 8004760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004764:	4b07      	ldr	r3, [pc, #28]	; (8004784 <getWatt+0x64>)
 8004766:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <getWatt+0x64>)
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	447a0000 	.word	0x447a0000
 8004780:	20000808 	.word	0x20000808
 8004784:	2000076c 	.word	0x2000076c

08004788 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	2b10      	cmp	r3, #16
 8004796:	d101      	bne.n	800479c <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8004798:	f7fe fd38 	bl	800320c <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d106      	bne.n	80047b0 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 80047a2:	f7fe fd25 	bl	80031f0 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_GPIO_EXTI_Callback+0x30>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a02      	ldr	r2, [pc, #8]	; (80047b8 <HAL_GPIO_EXTI_Callback+0x30>)
 80047ae:	6013      	str	r3, [r2, #0]
    }
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000810 	.word	0x20000810

080047bc <deploy_p_1>:

void deploy_p_1()
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 80047c0:	2164      	movs	r1, #100	; 0x64
 80047c2:	4804      	ldr	r0, [pc, #16]	; (80047d4 <deploy_p_1+0x18>)
 80047c4:	f7fe ffda 	bl	800377c <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 80047c8:	4803      	ldr	r0, [pc, #12]	; (80047d8 <deploy_p_1+0x1c>)
 80047ca:	f7fe ffbf 	bl	800374c <ext_pin_open>
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000784 	.word	0x20000784
 80047d8:	200007b4 	.word	0x200007b4

080047dc <deploy_p_2>:

void deploy_p_2()
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 80047e0:	2164      	movs	r1, #100	; 0x64
 80047e2:	4804      	ldr	r0, [pc, #16]	; (80047f4 <deploy_p_2+0x18>)
 80047e4:	f7fe ffca 	bl	800377c <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 80047e8:	4803      	ldr	r0, [pc, #12]	; (80047f8 <deploy_p_2+0x1c>)
 80047ea:	f7fe ffaf 	bl	800374c <ext_pin_open>
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000794 	.word	0x20000794
 80047f8:	200007b4 	.word	0x200007b4

080047fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <Error_Handler+0x4c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	4911      	ldr	r1, [pc, #68]	; (800484c <Error_Handler+0x50>)
 8004808:	4811      	ldr	r0, [pc, #68]	; (8004850 <Error_Handler+0x54>)
 800480a:	f007 ff93 	bl	800c734 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 800480e:	4810      	ldr	r0, [pc, #64]	; (8004850 <Error_Handler+0x54>)
 8004810:	f7fb fd08 	bl	8000224 <strlen>
 8004814:	4603      	mov	r3, r0
 8004816:	b29a      	uxth	r2, r3
 8004818:	23fa      	movs	r3, #250	; 0xfa
 800481a:	490d      	ldr	r1, [pc, #52]	; (8004850 <Error_Handler+0x54>)
 800481c:	480d      	ldr	r0, [pc, #52]	; (8004854 <Error_Handler+0x58>)
 800481e:	f005 fe3e 	bl	800a49e <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004822:	b672      	cpsid	i
}
 8004824:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8004826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800482a:	480b      	ldr	r0, [pc, #44]	; (8004858 <Error_Handler+0x5c>)
 800482c:	f003 fa07 	bl	8007c3e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004830:	2064      	movs	r0, #100	; 0x64
 8004832:	f001 fd65 	bl	8006300 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8004836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800483a:	4807      	ldr	r0, [pc, #28]	; (8004858 <Error_Handler+0x5c>)
 800483c:	f003 f9ff 	bl	8007c3e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004840:	2064      	movs	r0, #100	; 0x64
 8004842:	f001 fd5d 	bl	8006300 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8004846:	e7ee      	b.n	8004826 <Error_Handler+0x2a>
 8004848:	2000024c 	.word	0x2000024c
 800484c:	08012964 	.word	0x08012964
 8004850:	20000820 	.word	0x20000820
 8004854:	20000418 	.word	0x20000418
 8004858:	40020400 	.word	0x40020400

0800485c <updateQuaternion>:

extern backup_sram_datas_s *saved_datas;

float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	ed87 0a03 	vstr	s0, [r7, #12]
 8004866:	edc7 0a02 	vstr	s1, [r7, #8]
 800486a:	ed87 1a01 	vstr	s2, [r7, #4]
 800486e:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_datas->q[1] * gx - saved_datas->q[2] * gy - saved_datas->q[3] * gz);
 8004872:	4b9f      	ldr	r3, [pc, #636]	; (8004af0 <updateQuaternion+0x294>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	edd3 7a02 	vldr	s15, [r3, #8]
 800487a:	eeb1 7a67 	vneg.f32	s14, s15
 800487e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004886:	4b9a      	ldr	r3, [pc, #616]	; (8004af0 <updateQuaternion+0x294>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	edd3 6a03 	vldr	s13, [r3, #12]
 800488e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800489a:	4b95      	ldr	r3, [pc, #596]	; (8004af0 <updateQuaternion+0x294>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	edd3 6a04 	vldr	s13, [r3, #16]
 80048a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (saved_datas->q[0] * gx + saved_datas->q[2] * gz - saved_datas->q[3] * gy);
 80048ba:	4b8d      	ldr	r3, [pc, #564]	; (8004af0 <updateQuaternion+0x294>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	ed93 7a01 	vldr	s14, [r3, #4]
 80048c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80048c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ca:	4b89      	ldr	r3, [pc, #548]	; (8004af0 <updateQuaternion+0x294>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80048d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048de:	4b84      	ldr	r3, [pc, #528]	; (8004af0 <updateQuaternion+0x294>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	edd3 6a04 	vldr	s13, [r3, #16]
 80048e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048fa:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_datas->q[0] * gy - saved_datas->q[1] * gz + saved_datas->q[3] * gx);
 80048fe:	4b7c      	ldr	r3, [pc, #496]	; (8004af0 <updateQuaternion+0x294>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	ed93 7a01 	vldr	s14, [r3, #4]
 8004906:	edd7 7a02 	vldr	s15, [r7, #8]
 800490a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800490e:	4b78      	ldr	r3, [pc, #480]	; (8004af0 <updateQuaternion+0x294>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	edd3 6a02 	vldr	s13, [r3, #8]
 8004916:	edd7 7a01 	vldr	s15, [r7, #4]
 800491a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800491e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004922:	4b73      	ldr	r3, [pc, #460]	; (8004af0 <updateQuaternion+0x294>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	edd3 6a04 	vldr	s13, [r3, #16]
 800492a:	edd7 7a03 	vldr	s15, [r7, #12]
 800492e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004936:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493e:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_datas->q[0] * gz + saved_datas->q[1] * gy - saved_datas->q[2] * gx);
 8004942:	4b6b      	ldr	r3, [pc, #428]	; (8004af0 <updateQuaternion+0x294>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	ed93 7a01 	vldr	s14, [r3, #4]
 800494a:	edd7 7a01 	vldr	s15, [r7, #4]
 800494e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004952:	4b67      	ldr	r3, [pc, #412]	; (8004af0 <updateQuaternion+0x294>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	edd3 6a02 	vldr	s13, [r3, #8]
 800495a:	edd7 7a02 	vldr	s15, [r7, #8]
 800495e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004966:	4b62      	ldr	r3, [pc, #392]	; (8004af0 <updateQuaternion+0x294>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	edd3 6a03 	vldr	s13, [r3, #12]
 800496e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800497a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800497e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004982:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_datas->q[0] += qDot1 * dt;
 8004986:	4b5a      	ldr	r3, [pc, #360]	; (8004af0 <updateQuaternion+0x294>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	ed93 7a01 	vldr	s14, [r3, #4]
 800498e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004992:	edd7 7a00 	vldr	s15, [r7]
 8004996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800499a:	4b55      	ldr	r3, [pc, #340]	; (8004af0 <updateQuaternion+0x294>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a2:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] += qDot2 * dt;
 80049a6:	4b52      	ldr	r3, [pc, #328]	; (8004af0 <updateQuaternion+0x294>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80049ae:	edd7 6a08 	vldr	s13, [r7, #32]
 80049b2:	edd7 7a00 	vldr	s15, [r7]
 80049b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ba:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <updateQuaternion+0x294>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049c2:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] += qDot3 * dt;
 80049c6:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <updateQuaternion+0x294>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	edd7 7a00 	vldr	s15, [r7]
 80049d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049da:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <updateQuaternion+0x294>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049e2:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] += qDot4 * dt;
 80049e6:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <updateQuaternion+0x294>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80049ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80049f2:	edd7 7a00 	vldr	s15, [r7]
 80049f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049fa:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <updateQuaternion+0x294>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a02:	edc3 7a04 	vstr	s15, [r3, #16]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_datas->q[0] * saved_datas->q[0] + saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3]);
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <updateQuaternion+0x294>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a0e:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <updateQuaternion+0x294>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a1a:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <updateQuaternion+0x294>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a22:	4b33      	ldr	r3, [pc, #204]	; (8004af0 <updateQuaternion+0x294>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a32:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <updateQuaternion+0x294>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <updateQuaternion+0x294>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <updateQuaternion+0x294>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	edd3 6a04 	vldr	s13, [r3, #16]
 8004a52:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <updateQuaternion+0x294>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a62:	ee17 0a90 	vmov	r0, s15
 8004a66:	f7fb fd9f 	bl	80005a8 <__aeabi_f2d>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	ec43 2b10 	vmov	d0, r2, r3
 8004a72:	f00c f981 	bl	8010d78 <sqrt>
 8004a76:	ec53 2b10 	vmov	r2, r3, d0
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f7fc f8e3 	bl	8000c48 <__aeabi_d2f>
 8004a82:	4603      	mov	r3, r0
 8004a84:	617b      	str	r3, [r7, #20]
  saved_datas->q[0] /= norm;
 8004a86:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <updateQuaternion+0x294>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <updateQuaternion+0x294>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9a:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] /= norm;
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <updateQuaternion+0x294>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <updateQuaternion+0x294>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8004aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab2:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] /= norm;
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <updateQuaternion+0x294>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	edd3 6a03 	vldr	s13, [r3, #12]
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <updateQuaternion+0x294>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aca:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] /= norm;
 8004ace:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <updateQuaternion+0x294>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	edd3 6a04 	vldr	s13, [r3, #16]
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <updateQuaternion+0x294>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae2:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8004ae6:	bf00      	nop
 8004ae8:	3728      	adds	r7, #40	; 0x28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000004 	.word	0x20000004
 8004af4:	00000000 	.word	0x00000000

08004af8 <quaternionToEuler>:

void quaternionToEuler(void) {
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[3]), 1.0f - 2.0f * (saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2])) * (180.0 / M_PI);
 8004afc:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b04:	4b70      	ldr	r3, [pc, #448]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b10:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b18:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b2c:	ee17 0a90 	vmov	r0, s15
 8004b30:	f7fb fd3a 	bl	80005a8 <__aeabi_f2d>
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	4b63      	ldr	r3, [pc, #396]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b40:	4b61      	ldr	r3, [pc, #388]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b4c:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	edd3 6a03 	vldr	s13, [r3, #12]
 8004b54:	4b5c      	ldr	r3, [pc, #368]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b70:	ee17 0a90 	vmov	r0, s15
 8004b74:	f7fb fd18 	bl	80005a8 <__aeabi_f2d>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	ec43 2b11 	vmov	d1, r2, r3
 8004b80:	ec45 4b10 	vmov	d0, r4, r5
 8004b84:	f00c f886 	bl	8010c94 <atan2>
 8004b88:	ec51 0b10 	vmov	r0, r1, d0
 8004b8c:	a34c      	add	r3, pc, #304	; (adr r3, 8004cc0 <quaternionToEuler+0x1c8>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fd61 	bl	8000658 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f7fc f853 	bl	8000c48 <__aeabi_d2f>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4a49      	ldr	r2, [pc, #292]	; (8004ccc <quaternionToEuler+0x1d4>)
 8004ba6:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_datas->q[0] * saved_datas->q[2] - saved_datas->q[3] * saved_datas->q[1])) * (180.0 / M_PI);
 8004ba8:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bb0:	4b45      	ldr	r3, [pc, #276]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bbc:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	edd3 6a04 	vldr	s13, [r3, #16]
 8004bc4:	4b40      	ldr	r3, [pc, #256]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004bd8:	ee17 0a90 	vmov	r0, s15
 8004bdc:	f7fb fce4 	bl	80005a8 <__aeabi_f2d>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	ec43 2b10 	vmov	d0, r2, r3
 8004be8:	f00c f820 	bl	8010c2c <asin>
 8004bec:	ec51 0b10 	vmov	r0, r1, d0
 8004bf0:	a333      	add	r3, pc, #204	; (adr r3, 8004cc0 <quaternionToEuler+0x1c8>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fd2f 	bl	8000658 <__aeabi_dmul>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f7fc f821 	bl	8000c48 <__aeabi_d2f>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <quaternionToEuler+0x1d4>)
 8004c0a:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[3] + saved_datas->q[1] * saved_datas->q[2]), 1.0f - 2.0f * (saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3])) * (180.0 / M_PI);
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c3c:	ee17 0a90 	vmov	r0, s15
 8004c40:	f7fb fcb2 	bl	80005a8 <__aeabi_f2d>
 8004c44:	4604      	mov	r4, r0
 8004c46:	460d      	mov	r5, r1
 8004c48:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	edd3 6a04 	vldr	s13, [r3, #16]
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <quaternionToEuler+0x1d0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c80:	ee17 0a90 	vmov	r0, s15
 8004c84:	f7fb fc90 	bl	80005a8 <__aeabi_f2d>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	ec43 2b11 	vmov	d1, r2, r3
 8004c90:	ec45 4b10 	vmov	d0, r4, r5
 8004c94:	f00b fffe 	bl	8010c94 <atan2>
 8004c98:	ec51 0b10 	vmov	r0, r1, d0
 8004c9c:	a308      	add	r3, pc, #32	; (adr r3, 8004cc0 <quaternionToEuler+0x1c8>)
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fcd9 	bl	8000658 <__aeabi_dmul>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7fb ffcb 	bl	8000c48 <__aeabi_d2f>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <quaternionToEuler+0x1d4>)
 8004cb6:	6093      	str	r3, [r2, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	bdb0      	pop	{r4, r5, r7, pc}
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	1a63c1f8 	.word	0x1a63c1f8
 8004cc4:	404ca5dc 	.word	0x404ca5dc
 8004cc8:	20000004 	.word	0x20000004
 8004ccc:	2000091c 	.word	0x2000091c

08004cd0 <quaternionToTheta>:


float quaternionToTheta(){
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0

	float theta = 0.0;
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * saved_datas->q[1] * saved_datas->q[3] + 2 * saved_datas->q[2] * saved_datas->q[0];
 8004cdc:	4b5a      	ldr	r3, [pc, #360]	; (8004e48 <quaternionToTheta+0x178>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ce4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004ce8:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <quaternionToTheta+0x178>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cf4:	4b54      	ldr	r3, [pc, #336]	; (8004e48 <quaternionToTheta+0x178>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cfc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d00:	4b51      	ldr	r3, [pc, #324]	; (8004e48 <quaternionToTheta+0x178>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d10:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_datas->q[2] * saved_datas->q[3] - 2 * saved_datas->q[1] * saved_datas->q[0];
 8004d14:	4b4c      	ldr	r3, [pc, #304]	; (8004e48 <quaternionToTheta+0x178>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004d20:	4b49      	ldr	r3, [pc, #292]	; (8004e48 <quaternionToTheta+0x178>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <quaternionToTheta+0x178>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d34:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d38:	4b43      	ldr	r3, [pc, #268]	; (8004e48 <quaternionToTheta+0x178>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d48:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_datas->q[1] * saved_datas->q[1] - 2 * saved_datas->q[2] * saved_datas->q[2];
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <quaternionToTheta+0x178>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <quaternionToTheta+0x178>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <quaternionToTheta+0x178>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d74:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d78:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <quaternionToTheta+0x178>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d88:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 8004d9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004da0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004da4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004da8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004db4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbc:	ee17 0a90 	vmov	r0, s15
 8004dc0:	f7fb fbf2 	bl	80005a8 <__aeabi_f2d>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	ec43 2b10 	vmov	d0, r2, r3
 8004dcc:	f00b ffd4 	bl	8010d78 <sqrt>
 8004dd0:	ec53 2b10 	vmov	r2, r3, d0
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f7fb ff36 	bl	8000c48 <__aeabi_d2f>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8004de0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004de8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004dec:	ee16 0a90 	vmov	r0, s13
 8004df0:	f7fb fbda 	bl	80005a8 <__aeabi_f2d>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	ec43 2b10 	vmov	d0, r2, r3
 8004dfc:	f00b fee2 	bl	8010bc4 <acos>
 8004e00:	ec51 0b10 	vmov	r0, r1, d0
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <quaternionToTheta+0x17c>)
 8004e0a:	f7fb fc25 	bl	8000658 <__aeabi_dmul>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	a30a      	add	r3, pc, #40	; (adr r3, 8004e40 <quaternionToTheta+0x170>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fd46 	bl	80008ac <__aeabi_ddiv>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	f7fb ff0e 	bl	8000c48 <__aeabi_d2f>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	ee07 3a90 	vmov	s15, r3
}
 8004e36:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	51eb851f 	.word	0x51eb851f
 8004e44:	40091eb8 	.word	0x40091eb8
 8004e48:	20000004 	.word	0x20000004
 8004e4c:	40668000 	.word	0x40668000

08004e50 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion() {
 8004e50:	b5b0      	push	{r4, r5, r7, lr}
 8004e52:	b092      	sub	sp, #72	; 0x48
 8004e54:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8004e56:	4b99      	ldr	r3, [pc, #612]	; (80050bc <getInitialQuaternion+0x26c>)
 8004e58:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8004e5c:	4b97      	ldr	r3, [pc, #604]	; (80050bc <getInitialQuaternion+0x26c>)
 8004e5e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e66:	4b95      	ldr	r3, [pc, #596]	; (80050bc <getInitialQuaternion+0x26c>)
 8004e68:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 8004e6c:	4b93      	ldr	r3, [pc, #588]	; (80050bc <getInitialQuaternion+0x26c>)
 8004e6e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8004e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e7a:	4b90      	ldr	r3, [pc, #576]	; (80050bc <getInitialQuaternion+0x26c>)
 8004e7c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8004e80:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <getInitialQuaternion+0x26c>)
 8004e82:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e8e:	ee17 0a90 	vmov	r0, s15
 8004e92:	f7fb fb89 	bl	80005a8 <__aeabi_f2d>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	ec43 2b10 	vmov	d0, r2, r3
 8004e9e:	f00b ff6b 	bl	8010d78 <sqrt>
 8004ea2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 8004ea6:	4b85      	ldr	r3, [pc, #532]	; (80050bc <getInitialQuaternion+0x26c>)
 8004ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fb7b 	bl	80005a8 <__aeabi_f2d>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 8004eba:	4b80      	ldr	r3, [pc, #512]	; (80050bc <getInitialQuaternion+0x26c>)
 8004ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb fb71 	bl	80005a8 <__aeabi_f2d>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 8004ece:	4b7b      	ldr	r3, [pc, #492]	; (80050bc <getInitialQuaternion+0x26c>)
 8004ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fb fb67 	bl	80005a8 <__aeabi_f2d>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 8004ee2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eea:	f7fb fcdf 	bl	80008ac <__aeabi_ddiv>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8004ef6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004efe:	f7fb fcd5 	bl	80008ac <__aeabi_ddiv>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 8004f0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f12:	f7fb fccb 	bl	80008ac <__aeabi_ddiv>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8004f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	4966      	ldr	r1, [pc, #408]	; (80050c0 <getInitialQuaternion+0x270>)
 8004f28:	f7fb f9de 	bl	80002e8 <__aeabi_dsub>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	ec43 2b17 	vmov	d7, r2, r3
 8004f34:	eeb0 0a47 	vmov.f32	s0, s14
 8004f38:	eef0 0a67 	vmov.f32	s1, s15
 8004f3c:	f00b ff1c 	bl	8010d78 <sqrt>
 8004f40:	ec51 0b10 	vmov	r0, r1, d0
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <getInitialQuaternion+0x274>)
 8004f4a:	f7fb fb85 	bl	8000658 <__aeabi_dmul>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8004f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5a:	f04f 0000 	mov.w	r0, #0
 8004f5e:	4959      	ldr	r1, [pc, #356]	; (80050c4 <getInitialQuaternion+0x274>)
 8004f60:	f7fb fca4 	bl	80008ac <__aeabi_ddiv>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8004f6c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f74:	f7fb fb70 	bl	8000658 <__aeabi_dmul>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	4b4f      	ldr	r3, [pc, #316]	; (80050c4 <getInitialQuaternion+0x274>)
 8004f86:	f7fb fb67 	bl	8000658 <__aeabi_dmul>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8004f92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f9a:	f7fb fb5d 	bl	8000658 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <getInitialQuaternion+0x274>)
 8004fac:	f7fb fb54 	bl	8000658 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8004fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fcc:	f7fb fb44 	bl	8000658 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fe0:	f7fb fb3a 	bl	8000658 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb f97e 	bl	80002ec <__adddf3>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005000:	f7fb fb2a 	bl	8000658 <__aeabi_dmul>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4620      	mov	r0, r4
 800500a:	4629      	mov	r1, r5
 800500c:	f7fb f96e 	bl	80002ec <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800501c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005020:	f7fb fb1a 	bl	8000658 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	f7fb f95e 	bl	80002ec <__adddf3>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	ec43 2b17 	vmov	d7, r2, r3
 8005038:	eeb0 0a47 	vmov.f32	s0, s14
 800503c:	eef0 0a67 	vmov.f32	s1, s15
 8005040:	f00b fe9a 	bl	8010d78 <sqrt>
 8005044:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    saved_datas->q[0] = q_temp[0] / norm;
 8005048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800504c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005050:	f7fb fc2c 	bl	80008ac <__aeabi_ddiv>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	491b      	ldr	r1, [pc, #108]	; (80050c8 <getInitialQuaternion+0x278>)
 800505a:	680c      	ldr	r4, [r1, #0]
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	f7fb fdf2 	bl	8000c48 <__aeabi_d2f>
 8005064:	4603      	mov	r3, r0
 8005066:	6063      	str	r3, [r4, #4]
    saved_datas->q[1] = q_temp[1] / norm;
 8005068:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800506c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005070:	f7fb fc1c 	bl	80008ac <__aeabi_ddiv>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4913      	ldr	r1, [pc, #76]	; (80050c8 <getInitialQuaternion+0x278>)
 800507a:	680c      	ldr	r4, [r1, #0]
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	f7fb fde2 	bl	8000c48 <__aeabi_d2f>
 8005084:	4603      	mov	r3, r0
 8005086:	60a3      	str	r3, [r4, #8]
    saved_datas->q[2] = q_temp[2] / norm;
 8005088:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800508c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005090:	f7fb fc0c 	bl	80008ac <__aeabi_ddiv>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	490b      	ldr	r1, [pc, #44]	; (80050c8 <getInitialQuaternion+0x278>)
 800509a:	680c      	ldr	r4, [r1, #0]
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	f7fb fdd2 	bl	8000c48 <__aeabi_d2f>
 80050a4:	4603      	mov	r3, r0
 80050a6:	60e3      	str	r3, [r4, #12]
    saved_datas->q[3] = 0.0f;
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <getInitialQuaternion+0x278>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]
}
 80050b2:	bf00      	nop
 80050b4:	3748      	adds	r7, #72	; 0x48
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bdb0      	pop	{r4, r5, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000650 	.word	0x20000650
 80050c0:	3ff00000 	.word	0x3ff00000
 80050c4:	3fe00000 	.word	0x3fe00000
 80050c8:	20000004 	.word	0x20000004

080050cc <quaternionSet_zero>:

void quaternionSet_zero(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
	saved_datas->q[0] = 0.0;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <quaternionSet_zero+0x38>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	605a      	str	r2, [r3, #4]
	saved_datas->q[1] = 0.0;
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <quaternionSet_zero+0x38>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
	saved_datas->q[2] = 0.0;
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <quaternionSet_zero+0x38>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	60da      	str	r2, [r3, #12]
	saved_datas->q[3] = 1.0f;
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <quaternionSet_zero+0x38>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80050f6:	611a      	str	r2, [r3, #16]
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000004 	.word	0x20000004

08005108 <save_time>:
	HAL_PWR_EnableBkUpAccess();
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, (uint32_t)status);
}

void save_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005108:	b084      	sub	sp, #16
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	f107 0c10 	add.w	ip, r7, #16
 8005114:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 800511c:	7c3b      	ldrb	r3, [r7, #16]
 800511e:	461a      	mov	r2, r3
 8005120:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005124:	fb03 f202 	mul.w	r2, r3, r2
 8005128:	7c7b      	ldrb	r3, [r7, #17]
 800512a:	4619      	mov	r1, r3
 800512c:	460b      	mov	r3, r1
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a5b      	subs	r3, r3, r1
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	7cba      	ldrb	r2, [r7, #18]
 8005138:	4413      	add	r3, r2
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005146:	461a      	mov	r2, r3
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <save_time+0x6c>)
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005156:	f003 fd95 	bl	8008c84 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, seconds);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	2102      	movs	r1, #2
 800515e:	4806      	ldr	r0, [pc, #24]	; (8005178 <save_time+0x70>)
 8005160:	f005 f8ef 	bl	800a342 <HAL_RTCEx_BKUPWrite>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516e:	b004      	add	sp, #16
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	00015180 	.word	0x00015180
 8005178:	200003b4 	.word	0x200003b4

0800517c <measure_abs_time>:

uint32_t measure_abs_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 800517c:	b084      	sub	sp, #16
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	f107 0c10 	add.w	ip, r7, #16
 8005188:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005190:	7c3b      	ldrb	r3, [r7, #16]
 8005192:	461a      	mov	r2, r3
 8005194:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005198:	fb03 f202 	mul.w	r2, r3, r2
 800519c:	7c7b      	ldrb	r3, [r7, #17]
 800519e:	4619      	mov	r1, r3
 80051a0:	460b      	mov	r3, r1
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	1a5b      	subs	r3, r3, r1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	7cba      	ldrb	r2, [r7, #18]
 80051ac:	4413      	add	r3, r2
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 80051b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <measure_abs_time+0x78>)
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4413      	add	r3, r2
 80051c8:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 80051ca:	f003 fd5b 	bl	8008c84 <HAL_PWR_EnableBkUpAccess>
	uint32_t saved_seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80051ce:	2102      	movs	r1, #2
 80051d0:	4809      	ldr	r0, [pc, #36]	; (80051f8 <measure_abs_time+0x7c>)
 80051d2:	f005 f8d0 	bl	800a376 <HAL_RTCEx_BKUPRead>
 80051d6:	6038      	str	r0, [r7, #0]
	return((uint32_t)abs((int32_t)seconds - (int32_t)saved_seconds));
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bfb8      	it	lt
 80051e2:	425b      	neglt	r3, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ee:	b004      	add	sp, #16
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	00015180 	.word	0x00015180
 80051f8:	200003b4 	.word	0x200003b4

080051fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_MspInit+0x4c>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	4a0f      	ldr	r2, [pc, #60]	; (8005248 <HAL_MspInit+0x4c>)
 800520c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005210:	6453      	str	r3, [r2, #68]	; 0x44
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_MspInit+0x4c>)
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <HAL_MspInit+0x4c>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	4a08      	ldr	r2, [pc, #32]	; (8005248 <HAL_MspInit+0x4c>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6413      	str	r3, [r2, #64]	; 0x40
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_MspInit+0x4c>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <HAL_ADC_MspInit+0x7c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d127      	bne.n	80052be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	4b16      	ldr	r3, [pc, #88]	; (80052cc <HAL_ADC_MspInit+0x80>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	4a15      	ldr	r2, [pc, #84]	; (80052cc <HAL_ADC_MspInit+0x80>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6453      	str	r3, [r2, #68]	; 0x44
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_ADC_MspInit+0x80>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <HAL_ADC_MspInit+0x80>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	4a0e      	ldr	r2, [pc, #56]	; (80052cc <HAL_ADC_MspInit+0x80>)
 8005294:	f043 0304 	orr.w	r3, r3, #4
 8005298:	6313      	str	r3, [r2, #48]	; 0x30
 800529a:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <HAL_ADC_MspInit+0x80>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 80052a6:	2306      	movs	r3, #6
 80052a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052aa:	2303      	movs	r3, #3
 80052ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b2:	f107 0314 	add.w	r3, r7, #20
 80052b6:	4619      	mov	r1, r3
 80052b8:	4805      	ldr	r0, [pc, #20]	; (80052d0 <HAL_ADC_MspInit+0x84>)
 80052ba:	f002 fa07 	bl	80076cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80052be:	bf00      	nop
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40012000 	.word	0x40012000
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40020800 	.word	0x40020800

080052d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08c      	sub	sp, #48	; 0x30
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052dc:	f107 031c 	add.w	r3, r7, #28
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	605a      	str	r2, [r3, #4]
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a42      	ldr	r2, [pc, #264]	; (80053fc <HAL_I2C_MspInit+0x128>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d12c      	bne.n	8005350 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a40      	ldr	r2, [pc, #256]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b3e      	ldr	r3, [pc, #248]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005312:	23c0      	movs	r3, #192	; 0xc0
 8005314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005316:	2312      	movs	r3, #18
 8005318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531e:	2303      	movs	r3, #3
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005322:	2304      	movs	r3, #4
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005326:	f107 031c 	add.w	r3, r7, #28
 800532a:	4619      	mov	r1, r3
 800532c:	4835      	ldr	r0, [pc, #212]	; (8005404 <HAL_I2C_MspInit+0x130>)
 800532e:	f002 f9cd 	bl	80076cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a31      	ldr	r2, [pc, #196]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 800533c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800534e:	e050      	b.n	80053f2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <HAL_I2C_MspInit+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d14b      	bne.n	80053f2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a27      	ldr	r2, [pc, #156]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005364:	f043 0304 	orr.w	r3, r3, #4
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4b21      	ldr	r3, [pc, #132]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	4a20      	ldr	r2, [pc, #128]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	6313      	str	r3, [r2, #48]	; 0x30
 8005386:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005398:	2312      	movs	r3, #18
 800539a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a0:	2303      	movs	r3, #3
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80053a4:	2304      	movs	r3, #4
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a8:	f107 031c 	add.w	r3, r7, #28
 80053ac:	4619      	mov	r1, r3
 80053ae:	4817      	ldr	r0, [pc, #92]	; (800540c <HAL_I2C_MspInit+0x138>)
 80053b0:	f002 f98c 	bl	80076cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053ba:	2312      	movs	r3, #18
 80053bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80053c6:	2304      	movs	r3, #4
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ca:	f107 031c 	add.w	r3, r7, #28
 80053ce:	4619      	mov	r1, r3
 80053d0:	480f      	ldr	r0, [pc, #60]	; (8005410 <HAL_I2C_MspInit+0x13c>)
 80053d2:	f002 f97b 	bl	80076cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 80053e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_I2C_MspInit+0x12c>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
}
 80053f2:	bf00      	nop
 80053f4:	3730      	adds	r7, #48	; 0x30
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40005400 	.word	0x40005400
 8005400:	40023800 	.word	0x40023800
 8005404:	40020400 	.word	0x40020400
 8005408:	40005c00 	.word	0x40005c00
 800540c:	40020800 	.word	0x40020800
 8005410:	40020000 	.word	0x40020000

08005414 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <HAL_I2C_MspDeInit+0x64>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d10e      	bne.n	8005444 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005426:	4b15      	ldr	r3, [pc, #84]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4a14      	ldr	r2, [pc, #80]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 800542c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005430:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005432:	2140      	movs	r1, #64	; 0x40
 8005434:	4812      	ldr	r0, [pc, #72]	; (8005480 <HAL_I2C_MspDeInit+0x6c>)
 8005436:	f002 fadd 	bl	80079f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	4810      	ldr	r0, [pc, #64]	; (8005480 <HAL_I2C_MspDeInit+0x6c>)
 800543e:	f002 fad9 	bl	80079f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005442:	e014      	b.n	800546e <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <HAL_I2C_MspDeInit+0x70>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10f      	bne.n	800546e <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	4a0a      	ldr	r2, [pc, #40]	; (800547c <HAL_I2C_MspDeInit+0x68>)
 8005454:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005458:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800545a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800545e:	480a      	ldr	r0, [pc, #40]	; (8005488 <HAL_I2C_MspDeInit+0x74>)
 8005460:	f002 fac8 	bl	80079f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005468:	4808      	ldr	r0, [pc, #32]	; (800548c <HAL_I2C_MspDeInit+0x78>)
 800546a:	f002 fac3 	bl	80079f4 <HAL_GPIO_DeInit>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40005400 	.word	0x40005400
 800547c:	40023800 	.word	0x40023800
 8005480:	40020400 	.word	0x40020400
 8005484:	40005c00 	.word	0x40005c00
 8005488:	40020800 	.word	0x40020800
 800548c:	40020000 	.word	0x40020000

08005490 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b09a      	sub	sp, #104	; 0x68
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005498:	f107 030c 	add.w	r3, r7, #12
 800549c:	225c      	movs	r2, #92	; 0x5c
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f006 fabf 	bl	800ba24 <memset>
  if(hrtc->Instance==RTC)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <HAL_RTC_MspInit+0x4c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d111      	bne.n	80054d4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054b0:	2320      	movs	r3, #32
 80054b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80054b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054ba:	f107 030c 	add.w	r3, r7, #12
 80054be:	4618      	mov	r0, r3
 80054c0:	f003 fd84 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80054ca:	f7ff f997 	bl	80047fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80054ce:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <HAL_RTC_MspInit+0x50>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80054d4:	bf00      	nop
 80054d6:	3768      	adds	r7, #104	; 0x68
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40002800 	.word	0x40002800
 80054e0:	42470e3c 	.word	0x42470e3c

080054e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	; 0x38
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <HAL_UART_MspInit+0x21c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f040 8092 	bne.w	800562c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005508:	2300      	movs	r3, #0
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	4b7d      	ldr	r3, [pc, #500]	; (8005704 <HAL_UART_MspInit+0x220>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	4a7c      	ldr	r2, [pc, #496]	; (8005704 <HAL_UART_MspInit+0x220>)
 8005512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005516:	6413      	str	r3, [r2, #64]	; 0x40
 8005518:	4b7a      	ldr	r3, [pc, #488]	; (8005704 <HAL_UART_MspInit+0x220>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	4b76      	ldr	r3, [pc, #472]	; (8005704 <HAL_UART_MspInit+0x220>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	4a75      	ldr	r2, [pc, #468]	; (8005704 <HAL_UART_MspInit+0x220>)
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	6313      	str	r3, [r2, #48]	; 0x30
 8005534:	4b73      	ldr	r3, [pc, #460]	; (8005704 <HAL_UART_MspInit+0x220>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005540:	2303      	movs	r3, #3
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	2302      	movs	r3, #2
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554c:	2303      	movs	r3, #3
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005550:	2308      	movs	r3, #8
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005558:	4619      	mov	r1, r3
 800555a:	486b      	ldr	r0, [pc, #428]	; (8005708 <HAL_UART_MspInit+0x224>)
 800555c:	f002 f8b6 	bl	80076cc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005560:	4b6a      	ldr	r3, [pc, #424]	; (800570c <HAL_UART_MspInit+0x228>)
 8005562:	4a6b      	ldr	r2, [pc, #428]	; (8005710 <HAL_UART_MspInit+0x22c>)
 8005564:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005566:	4b69      	ldr	r3, [pc, #420]	; (800570c <HAL_UART_MspInit+0x228>)
 8005568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800556c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800556e:	4b67      	ldr	r3, [pc, #412]	; (800570c <HAL_UART_MspInit+0x228>)
 8005570:	2240      	movs	r2, #64	; 0x40
 8005572:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005574:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_UART_MspInit+0x228>)
 8005576:	2200      	movs	r2, #0
 8005578:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800557a:	4b64      	ldr	r3, [pc, #400]	; (800570c <HAL_UART_MspInit+0x228>)
 800557c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005580:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005582:	4b62      	ldr	r3, [pc, #392]	; (800570c <HAL_UART_MspInit+0x228>)
 8005584:	2200      	movs	r2, #0
 8005586:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005588:	4b60      	ldr	r3, [pc, #384]	; (800570c <HAL_UART_MspInit+0x228>)
 800558a:	2200      	movs	r2, #0
 800558c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800558e:	4b5f      	ldr	r3, [pc, #380]	; (800570c <HAL_UART_MspInit+0x228>)
 8005590:	2200      	movs	r2, #0
 8005592:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005594:	4b5d      	ldr	r3, [pc, #372]	; (800570c <HAL_UART_MspInit+0x228>)
 8005596:	2200      	movs	r2, #0
 8005598:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800559a:	4b5c      	ldr	r3, [pc, #368]	; (800570c <HAL_UART_MspInit+0x228>)
 800559c:	2200      	movs	r2, #0
 800559e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80055a0:	485a      	ldr	r0, [pc, #360]	; (800570c <HAL_UART_MspInit+0x228>)
 80055a2:	f001 fc25 	bl	8006df0 <HAL_DMA_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80055ac:	f7ff f926 	bl	80047fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a56      	ldr	r2, [pc, #344]	; (800570c <HAL_UART_MspInit+0x228>)
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34
 80055b6:	4a55      	ldr	r2, [pc, #340]	; (800570c <HAL_UART_MspInit+0x228>)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80055bc:	4b55      	ldr	r3, [pc, #340]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055be:	4a56      	ldr	r2, [pc, #344]	; (8005718 <HAL_UART_MspInit+0x234>)
 80055c0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80055c2:	4b54      	ldr	r3, [pc, #336]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055c8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055ca:	4b52      	ldr	r3, [pc, #328]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055d6:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055dc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055de:	4b4d      	ldr	r3, [pc, #308]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055e4:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80055ea:	4b4a      	ldr	r3, [pc, #296]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055f2:	4b48      	ldr	r3, [pc, #288]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055f8:	4b46      	ldr	r3, [pc, #280]	; (8005714 <HAL_UART_MspInit+0x230>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80055fe:	4845      	ldr	r0, [pc, #276]	; (8005714 <HAL_UART_MspInit+0x230>)
 8005600:	f001 fbf6 	bl	8006df0 <HAL_DMA_Init>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800560a:	f7ff f8f7 	bl	80047fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a40      	ldr	r2, [pc, #256]	; (8005714 <HAL_UART_MspInit+0x230>)
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
 8005614:	4a3f      	ldr	r2, [pc, #252]	; (8005714 <HAL_UART_MspInit+0x230>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	2100      	movs	r1, #0
 800561e:	2034      	movs	r0, #52	; 0x34
 8005620:	f001 fba1 	bl	8006d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005624:	2034      	movs	r0, #52	; 0x34
 8005626:	f001 fbba 	bl	8006d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800562a:	e0e4      	b.n	80057f6 <HAL_UART_MspInit+0x312>
  else if(huart->Instance==USART1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a3a      	ldr	r2, [pc, #232]	; (800571c <HAL_UART_MspInit+0x238>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d178      	bne.n	8005728 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	4b32      	ldr	r3, [pc, #200]	; (8005704 <HAL_UART_MspInit+0x220>)
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_UART_MspInit+0x220>)
 8005640:	f043 0310 	orr.w	r3, r3, #16
 8005644:	6453      	str	r3, [r2, #68]	; 0x44
 8005646:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <HAL_UART_MspInit+0x220>)
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_UART_MspInit+0x220>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <HAL_UART_MspInit+0x220>)
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	6313      	str	r3, [r2, #48]	; 0x30
 8005662:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_UART_MspInit+0x220>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800566e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005674:	2302      	movs	r3, #2
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2300      	movs	r3, #0
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567c:	2303      	movs	r3, #3
 800567e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005680:	2307      	movs	r3, #7
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005688:	4619      	mov	r1, r3
 800568a:	481f      	ldr	r0, [pc, #124]	; (8005708 <HAL_UART_MspInit+0x224>)
 800568c:	f002 f81e 	bl	80076cc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <HAL_UART_MspInit+0x23c>)
 8005692:	4a24      	ldr	r2, [pc, #144]	; (8005724 <HAL_UART_MspInit+0x240>)
 8005694:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <HAL_UART_MspInit+0x23c>)
 8005698:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800569c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056a0:	2240      	movs	r2, #64	; 0x40
 80056a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056a4:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056aa:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056b2:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056b8:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80056be:	4b18      	ldr	r3, [pc, #96]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80056d0:	4813      	ldr	r0, [pc, #76]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056d2:	f001 fb8d 	bl	8006df0 <HAL_DMA_Init>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80056dc:	f7ff f88e 	bl	80047fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34
 80056e6:	4a0e      	ldr	r2, [pc, #56]	; (8005720 <HAL_UART_MspInit+0x23c>)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056ec:	2200      	movs	r2, #0
 80056ee:	2100      	movs	r1, #0
 80056f0:	2025      	movs	r0, #37	; 0x25
 80056f2:	f001 fb38 	bl	8006d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056f6:	2025      	movs	r0, #37	; 0x25
 80056f8:	f001 fb51 	bl	8006d9e <HAL_NVIC_EnableIRQ>
}
 80056fc:	e07b      	b.n	80057f6 <HAL_UART_MspInit+0x312>
 80056fe:	bf00      	nop
 8005700:	40004c00 	.word	0x40004c00
 8005704:	40023800 	.word	0x40023800
 8005708:	40020000 	.word	0x40020000
 800570c:	200004a0 	.word	0x200004a0
 8005710:	40026070 	.word	0x40026070
 8005714:	20000500 	.word	0x20000500
 8005718:	40026040 	.word	0x40026040
 800571c:	40011000 	.word	0x40011000
 8005720:	20000560 	.word	0x20000560
 8005724:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a34      	ldr	r2, [pc, #208]	; (8005800 <HAL_UART_MspInit+0x31c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d161      	bne.n	80057f6 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	4b33      	ldr	r3, [pc, #204]	; (8005804 <HAL_UART_MspInit+0x320>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	4a32      	ldr	r2, [pc, #200]	; (8005804 <HAL_UART_MspInit+0x320>)
 800573c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005740:	6413      	str	r3, [r2, #64]	; 0x40
 8005742:	4b30      	ldr	r3, [pc, #192]	; (8005804 <HAL_UART_MspInit+0x320>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_UART_MspInit+0x320>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <HAL_UART_MspInit+0x320>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6313      	str	r3, [r2, #48]	; 0x30
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <HAL_UART_MspInit+0x320>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800576a:	230c      	movs	r3, #12
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576e:	2302      	movs	r3, #2
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005776:	2303      	movs	r3, #3
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800577a:	2307      	movs	r3, #7
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005782:	4619      	mov	r1, r3
 8005784:	4820      	ldr	r0, [pc, #128]	; (8005808 <HAL_UART_MspInit+0x324>)
 8005786:	f001 ffa1 	bl	80076cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800578a:	4b20      	ldr	r3, [pc, #128]	; (800580c <HAL_UART_MspInit+0x328>)
 800578c:	4a20      	ldr	r2, [pc, #128]	; (8005810 <HAL_UART_MspInit+0x32c>)
 800578e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005790:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_UART_MspInit+0x328>)
 8005792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005796:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005798:	4b1c      	ldr	r3, [pc, #112]	; (800580c <HAL_UART_MspInit+0x328>)
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_UART_MspInit+0x328>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_UART_MspInit+0x328>)
 80057a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057ac:	4b17      	ldr	r3, [pc, #92]	; (800580c <HAL_UART_MspInit+0x328>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_UART_MspInit+0x328>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <HAL_UART_MspInit+0x328>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_UART_MspInit+0x328>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_UART_MspInit+0x328>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80057ca:	4810      	ldr	r0, [pc, #64]	; (800580c <HAL_UART_MspInit+0x328>)
 80057cc:	f001 fb10 	bl	8006df0 <HAL_DMA_Init>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80057d6:	f7ff f811 	bl	80047fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a0b      	ldr	r2, [pc, #44]	; (800580c <HAL_UART_MspInit+0x328>)
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
 80057e0:	4a0a      	ldr	r2, [pc, #40]	; (800580c <HAL_UART_MspInit+0x328>)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2101      	movs	r1, #1
 80057ea:	2026      	movs	r0, #38	; 0x26
 80057ec:	f001 fabb 	bl	8006d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057f0:	2026      	movs	r0, #38	; 0x26
 80057f2:	f001 fad4 	bl	8006d9e <HAL_NVIC_EnableIRQ>
}
 80057f6:	bf00      	nop
 80057f8:	3738      	adds	r7, #56	; 0x38
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40004400 	.word	0x40004400
 8005804:	40023800 	.word	0x40023800
 8005808:	40020000 	.word	0x40020000
 800580c:	200005c0 	.word	0x200005c0
 8005810:	40026088 	.word	0x40026088

08005814 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <HAL_UART_MspDeInit+0xac>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d117      	bne.n	8005856 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_UART_MspDeInit+0xb0>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <HAL_UART_MspDeInit+0xb0>)
 800582c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005830:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8005832:	2103      	movs	r1, #3
 8005834:	4824      	ldr	r0, [pc, #144]	; (80058c8 <HAL_UART_MspDeInit+0xb4>)
 8005836:	f002 f8dd 	bl	80079f4 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fb84 	bl	8006f4c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fb7f 	bl	8006f4c <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800584e:	2034      	movs	r0, #52	; 0x34
 8005850:	f001 fab3 	bl	8006dba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8005854:	e02f      	b.n	80058b6 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <HAL_UART_MspDeInit+0xb8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d113      	bne.n	8005888 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 8005860:	4b18      	ldr	r3, [pc, #96]	; (80058c4 <HAL_UART_MspDeInit+0xb0>)
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <HAL_UART_MspDeInit+0xb0>)
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800586c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005870:	4815      	ldr	r0, [pc, #84]	; (80058c8 <HAL_UART_MspDeInit+0xb4>)
 8005872:	f002 f8bf 	bl	80079f4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fb66 	bl	8006f4c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005880:	2025      	movs	r0, #37	; 0x25
 8005882:	f001 fa9a 	bl	8006dba <HAL_NVIC_DisableIRQ>
}
 8005886:	e016      	b.n	80058b6 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a10      	ldr	r2, [pc, #64]	; (80058d0 <HAL_UART_MspDeInit+0xbc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d111      	bne.n	80058b6 <HAL_UART_MspDeInit+0xa2>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_UART_MspDeInit+0xb0>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <HAL_UART_MspDeInit+0xb0>)
 8005898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800589e:	210c      	movs	r1, #12
 80058a0:	4809      	ldr	r0, [pc, #36]	; (80058c8 <HAL_UART_MspDeInit+0xb4>)
 80058a2:	f002 f8a7 	bl	80079f4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 fb4e 	bl	8006f4c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80058b0:	2026      	movs	r0, #38	; 0x26
 80058b2:	f001 fa82 	bl	8006dba <HAL_NVIC_DisableIRQ>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40004c00 	.word	0x40004c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40020000 	.word	0x40020000
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40004400 	.word	0x40004400

080058d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058d8:	e7fe      	b.n	80058d8 <NMI_Handler+0x4>

080058da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058da:	b480      	push	{r7}
 80058dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058de:	e7fe      	b.n	80058de <HardFault_Handler+0x4>

080058e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058e4:	e7fe      	b.n	80058e4 <MemManage_Handler+0x4>

080058e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058ea:	e7fe      	b.n	80058ea <BusFault_Handler+0x4>

080058ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058f0:	e7fe      	b.n	80058f0 <UsageFault_Handler+0x4>

080058f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800590e:	b480      	push	{r7}
 8005910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005920:	f000 fcce 	bl	80062c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}

08005928 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 800592c:	2008      	movs	r0, #8
 800592e:	f002 f9a1 	bl	8007c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}

08005936 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 800593a:	2010      	movs	r0, #16
 800593c:	f002 f99a 	bl	8007c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005940:	bf00      	nop
 8005942:	bd80      	pop	{r7, pc}

08005944 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <DMA1_Stream2_IRQHandler+0x10>)
 800594a:	f001 fc47 	bl	80071dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000500 	.word	0x20000500

08005958 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <DMA1_Stream4_IRQHandler+0x10>)
 800595e:	f001 fc3d 	bl	80071dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200004a0 	.word	0x200004a0

0800596c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <DMA1_Stream5_IRQHandler+0x10>)
 8005972:	f001 fc33 	bl	80071dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200005c0 	.word	0x200005c0

08005980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005984:	4802      	ldr	r0, [pc, #8]	; (8005990 <USART1_IRQHandler+0x10>)
 8005986:	f004 fecb 	bl	800a720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000418 	.word	0x20000418

08005994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005998:	4802      	ldr	r0, [pc, #8]	; (80059a4 <USART2_IRQHandler+0x10>)
 800599a:	f004 fec1 	bl	800a720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	2000045c 	.word	0x2000045c

080059a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <UART4_IRQHandler+0x10>)
 80059ae:	f004 feb7 	bl	800a720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200003d4 	.word	0x200003d4

080059bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <DMA2_Stream7_IRQHandler+0x10>)
 80059c2:	f001 fc0b 	bl	80071dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000560 	.word	0x20000560

080059d0 <strain_gage_delay_us>:
#include "strain_gauge.h"

extern UART_HandleTypeDef huart1;

static void strain_gage_delay_us(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
  uint32_t delay = 4;
 80059d6:	2304      	movs	r3, #4
 80059d8:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 80059da:	e006      	b.n	80059ea <strain_gage_delay_us+0x1a>
  {
    delay--;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3b01      	subs	r3, #1
 80059e0:	607b      	str	r3, [r7, #4]
    __nop(); __nop(); __nop(); __nop();
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
  while (delay > 0)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f5      	bne.n	80059dc <strain_gage_delay_us+0xc>
  }
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <straing_gage_gpio_init>:

void straing_gage_gpio_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b09a      	sub	sp, #104	; 0x68
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[50];
  hx711->clk_gpio = clk_gpio;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8005a26:	815a      	strh	r2, [r3, #10]

  HAL_GPIO_DeInit(clk_gpio, clk_pin);
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68b8      	ldr	r0, [r7, #8]
 8005a2e:	f001 ffe1 	bl	80079f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(dat_gpio, dat_pin);
 8005a32:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005a36:	4619      	mov	r1, r3
 8005a38:	6838      	ldr	r0, [r7, #0]
 8005a3a:	f001 ffdb 	bl	80079f4 <HAL_GPIO_DeInit>

  GPIO_InitTypeDef  gpio = {0};
 8005a3e:	f107 0310 	add.w	r3, r7, #16
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a56:	2302      	movs	r3, #2
 8005a58:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8005a5e:	f107 0310 	add.w	r3, r7, #16
 8005a62:	4619      	mov	r1, r3
 8005a64:	68b8      	ldr	r0, [r7, #8]
 8005a66:	f001 fe31 	bl	80076cc <HAL_GPIO_Init>

  gpio.Mode = GPIO_MODE_INPUT;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a72:	2302      	movs	r3, #2
 8005a74:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 8005a76:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005a7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	4619      	mov	r1, r3
 8005a82:	6838      	ldr	r0, [r7, #0]
 8005a84:	f001 fe22 	bl	80076cc <HAL_GPIO_Init>

  hx711_delay(10);
 8005a88:	200a      	movs	r0, #10
 8005a8a:	f000 fc39 	bl	8006300 <HAL_Delay>
  int counter = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	667b      	str	r3, [r7, #100]	; 0x64
  int32_t offset = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
  for(int i = 0; i < 20; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a9a:	e013      	b.n	8005ac4 <straing_gage_gpio_init+0xc6>
  {
	  int32_t value = strain_gage_get_vals(hx711);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f81e 	bl	8005ade <strain_gage_get_vals>
 8005aa2:	65b8      	str	r0, [r7, #88]	; 0x58
	  if(value != 0)
 8005aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d006      	beq.n	8005ab8 <straing_gage_gpio_init+0xba>
	  {
		  offset += value;
 8005aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aae:	4413      	add	r3, r2
 8005ab0:	663b      	str	r3, [r7, #96]	; 0x60
		  counter++;
 8005ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	667b      	str	r3, [r7, #100]	; 0x64

	  }
	  hx711_delay(10);
 8005ab8:	200a      	movs	r0, #10
 8005aba:	f000 fc21 	bl	8006300 <HAL_Delay>
  for(int i = 0; i < 20; i++)
 8005abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac6:	2b13      	cmp	r3, #19
 8005ac8:	dde8      	ble.n	8005a9c <straing_gage_gpio_init+0x9e>
  }
  hx711->offset = offset / counter;
 8005aca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ace:	fb92 f2f3 	sdiv	r2, r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	60da      	str	r2, [r3, #12]
}
 8005ad6:	bf00      	nop
 8005ad8:	3768      	adds	r7, #104	; 0x68
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <strain_gage_get_vals>:

int32_t strain_gage_get_vals(hx711_t *hx711)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b086      	sub	sp, #24
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8005aea:	f000 fbfd 	bl	80062e8 <HAL_GetTick>
 8005aee:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005af0:	e00b      	b.n	8005b0a <strain_gage_get_vals+0x2c>
  {
    hx711_delay(1);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f000 fc04 	bl	8006300 <HAL_Delay>
    if(HAL_GetTick() - startTime > 1)
 8005af8:	f000 fbf6 	bl	80062e8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d901      	bls.n	8005b0a <strain_gage_get_vals+0x2c>
      return 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e058      	b.n	8005bbc <strain_gage_get_vals+0xde>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	895b      	ldrh	r3, [r3, #10]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f002 f861 	bl	8007bdc <HAL_GPIO_ReadPin>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d0e8      	beq.n	8005af2 <strain_gage_get_vals+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	74fb      	strb	r3, [r7, #19]
 8005b24:	e02a      	b.n	8005b7c <strain_gage_get_vals+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	891b      	ldrh	r3, [r3, #8]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4619      	mov	r1, r3
 8005b32:	f002 f86b 	bl	8007c0c <HAL_GPIO_WritePin>
    strain_gage_delay_us();
 8005b36:	f7ff ff4b 	bl	80059d0 <strain_gage_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	891b      	ldrh	r3, [r3, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	4619      	mov	r1, r3
 8005b46:	f002 f861 	bl	8007c0c <HAL_GPIO_WritePin>
    strain_gage_delay_us();
 8005b4a:	f7ff ff41 	bl	80059d0 <strain_gage_delay_us>
    data = data << 1;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	895b      	ldrh	r3, [r3, #10]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f002 f83c 	bl	8007bdc <HAL_GPIO_ReadPin>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <strain_gage_get_vals+0x92>
      data ++;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8005b70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	3301      	adds	r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	74fb      	strb	r3, [r7, #19]
 8005b7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005b80:	2b17      	cmp	r3, #23
 8005b82:	ddd0      	ble.n	8005b26 <strain_gage_get_vals+0x48>
  }
  data = data ^ 0x800000;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8005b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	891b      	ldrh	r3, [r3, #8]
 8005b94:	2201      	movs	r2, #1
 8005b96:	4619      	mov	r1, r3
 8005b98:	f002 f838 	bl	8007c0c <HAL_GPIO_WritePin>
  strain_gage_delay_us();
 8005b9c:	f7ff ff18 	bl	80059d0 <strain_gage_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	891b      	ldrh	r3, [r3, #8]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	4619      	mov	r1, r3
 8005bac:	f002 f82e 	bl	8007c0c <HAL_GPIO_WritePin>
  strain_gage_delay_us();
 8005bb0:	f7ff ff0e 	bl	80059d0 <strain_gage_delay_us>
  return (int32_t)data - hx711->offset;
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	1ad3      	subs	r3, r2, r3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
	return 1;
 8005bc8:	2301      	movs	r3, #1
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_kill>:

int _kill(int pid, int sig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005bde:	f005 fef7 	bl	800b9d0 <__errno>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2216      	movs	r2, #22
 8005be6:	601a      	str	r2, [r3, #0]
	return -1;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <_exit>:

void _exit (int status)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ffe7 	bl	8005bd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005c06:	e7fe      	b.n	8005c06 <_exit+0x12>

08005c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e00a      	b.n	8005c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c1a:	f3af 8000 	nop.w
 8005c1e:	4601      	mov	r1, r0
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	60ba      	str	r2, [r7, #8]
 8005c26:	b2ca      	uxtb	r2, r1
 8005c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	dbf0      	blt.n	8005c1a <_read+0x12>
	}

return len;
 8005c38:	687b      	ldr	r3, [r7, #4]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e009      	b.n	8005c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	60ba      	str	r2, [r7, #8]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	3301      	adds	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	dbf1      	blt.n	8005c54 <_write+0x12>
	}
	return len;
 8005c70:	687b      	ldr	r3, [r7, #4]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <_close>:

int _close(int file)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
	return -1;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_isatty>:

int _isatty(int file)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8005cba:	2301      	movs	r3, #1
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <_sbrk+0x5c>)
 8005cee:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <_sbrk+0x60>)
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cf8:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <_sbrk+0x64>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <_sbrk+0x64>)
 8005d02:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <_sbrk+0x68>)
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <_sbrk+0x64>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d207      	bcs.n	8005d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d14:	f005 fe5c 	bl	800b9d0 <__errno>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	220c      	movs	r2, #12
 8005d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d22:	e009      	b.n	8005d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <_sbrk+0x64>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <_sbrk+0x64>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	4a05      	ldr	r2, [pc, #20]	; (8005d48 <_sbrk+0x64>)
 8005d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20020000 	.word	0x20020000
 8005d44:	00000400 	.word	0x00000400
 8005d48:	20000928 	.word	0x20000928
 8005d4c:	20001250 	.word	0x20001250

08005d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <SystemInit+0x20>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <SystemInit+0x20>)
 8005d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <HAL_UART_RxCpltCallback+0x40>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d105      	bne.n	8005d90 <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <HAL_UART_RxCpltCallback+0x44>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_UART_RxCpltCallback+0x48>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0b      	ldr	r2, [pc, #44]	; (8005dc0 <HAL_UART_RxCpltCallback+0x4c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <HAL_UART_RxCpltCallback+0x50>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <HAL_UART_RxCpltCallback+0x54>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2203      	movs	r2, #3
 8005da4:	4619      	mov	r1, r3
 8005da6:	4806      	ldr	r0, [pc, #24]	; (8005dc0 <HAL_UART_RxCpltCallback+0x4c>)
 8005da8:	f004 fc8a 	bl	800a6c0 <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	2000045c 	.word	0x2000045c
 8005db8:	2000092c 	.word	0x2000092c
 8005dbc:	2000092d 	.word	0x2000092d
 8005dc0:	200003d4 	.word	0x200003d4
 8005dc4:	20000780 	.word	0x20000780
 8005dc8:	2000077c 	.word	0x2000077c

08005dcc <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8005dd4:	f240 228a 	movw	r2, #650	; 0x28a
 8005dd8:	4903      	ldr	r1, [pc, #12]	; (8005de8 <UsrGpsL86Init+0x1c>)
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f004 fc70 	bl	800a6c0 <HAL_UART_Receive_DMA>
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000a04 	.word	0x20000a04

08005dec <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
    getRmc();
 8005df4:	f000 f83a 	bl	8005e6c <getRmc>
    getGGA();
 8005df8:	f000 f95c 	bl	80060b4 <getGGA>
    if (rmcValidFlag)
 8005dfc:	4b18      	ldr	r3, [pc, #96]	; (8005e60 <Usr_GpsL86GetValues+0x74>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <Usr_GpsL86GetValues+0x74>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8005e0c:	f000 f8e4 	bl	8005fd8 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8005e18:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8005e20:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8005e40:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <Usr_GpsL86GetValues+0x78>)
 8005e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8005e50:	4805      	ldr	r0, [pc, #20]	; (8005e68 <Usr_GpsL86GetValues+0x7c>)
 8005e52:	f7ff ffbb 	bl	8005dcc <UsrGpsL86Init>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2000092e 	.word	0x2000092e
 8005e64:	2000120c 	.word	0x2000120c
 8005e68:	2000045c 	.word	0x2000045c

08005e6c <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af02      	add	r7, sp, #8
	if (g_GnssRx_Flag)
 8005e72:	4b4a      	ldr	r3, [pc, #296]	; (8005f9c <getRmc+0x130>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 808a 	beq.w	8005f92 <getRmc+0x126>
	    {
	        MsgIndex = 0;
 8005e7e:	4b48      	ldr	r3, [pc, #288]	; (8005fa0 <getRmc+0x134>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005e84:	4947      	ldr	r1, [pc, #284]	; (8005fa4 <getRmc+0x138>)
 8005e86:	4848      	ldr	r0, [pc, #288]	; (8005fa8 <getRmc+0x13c>)
 8005e88:	f006 fce5 	bl	800c856 <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8005e8c:	4947      	ldr	r1, [pc, #284]	; (8005fac <getRmc+0x140>)
 8005e8e:	4846      	ldr	r0, [pc, #280]	; (8005fa8 <getRmc+0x13c>)
 8005e90:	f006 fce9 	bl	800c866 <strstr>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4a46      	ldr	r2, [pc, #280]	; (8005fb0 <getRmc+0x144>)
 8005e98:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8005e9a:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <getRmc+0x144>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b47      	cmp	r3, #71	; 0x47
 8005ea2:	d173      	bne.n	8005f8c <getRmc+0x120>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8005ea4:	4b42      	ldr	r3, [pc, #264]	; (8005fb0 <getRmc+0x144>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <getRmc+0x134>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	7811      	ldrb	r1, [r2, #0]
 8005eae:	4a41      	ldr	r2, [pc, #260]	; (8005fb4 <getRmc+0x148>)
 8005eb0:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <getRmc+0x134>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a39      	ldr	r2, [pc, #228]	; (8005fa0 <getRmc+0x134>)
 8005eba:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <getRmc+0x144>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a37      	ldr	r2, [pc, #220]	; (8005fa0 <getRmc+0x134>)
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <getRmc+0x144>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8005ece:	4b38      	ldr	r3, [pc, #224]	; (8005fb0 <getRmc+0x144>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b0a      	cmp	r3, #10
 8005ed6:	d003      	beq.n	8005ee0 <getRmc+0x74>
 8005ed8:	4b31      	ldr	r3, [pc, #196]	; (8005fa0 <getRmc+0x134>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b5a      	cmp	r3, #90	; 0x5a
 8005ede:	dde1      	ble.n	8005ea4 <getRmc+0x38>
	                {
	                    MsgIndex = 0;
 8005ee0:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <getRmc+0x134>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8005ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eea:	2100      	movs	r1, #0
 8005eec:	482e      	ldr	r0, [pc, #184]	; (8005fa8 <getRmc+0x13c>)
 8005eee:	f005 fd99 	bl	800ba24 <memset>
	                    memset(m_rxData, 0, sizeof(m_rxData));
 8005ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	482a      	ldr	r0, [pc, #168]	; (8005fa4 <getRmc+0x138>)
 8005efa:	f005 fd93 	bl	800ba24 <memset>

	                    for (int i = 0; i < 100; i++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	e014      	b.n	8005f2e <getRmc+0xc2>
	                    {
	                        if (gpsPayload[i] == 'N')
 8005f04:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <getRmc+0x148>)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b4e      	cmp	r3, #78	; 0x4e
 8005f0e:	d102      	bne.n	8005f16 <getRmc+0xaa>
	                            f_northFlag = true;
 8005f10:	4b29      	ldr	r3, [pc, #164]	; (8005fb8 <getRmc+0x14c>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 8005f16:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <getRmc+0x148>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b45      	cmp	r3, #69	; 0x45
 8005f20:	d102      	bne.n	8005f28 <getRmc+0xbc>
	                            f_eastFlag = true;
 8005f22:	4b26      	ldr	r3, [pc, #152]	; (8005fbc <getRmc+0x150>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b63      	cmp	r3, #99	; 0x63
 8005f32:	dde7      	ble.n	8005f04 <getRmc+0x98>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8005f34:	481f      	ldr	r0, [pc, #124]	; (8005fb4 <getRmc+0x148>)
 8005f36:	f7fa f975 	bl	8000224 <strlen>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b0a      	cmp	r3, #10
 8005f3e:	d91f      	bls.n	8005f80 <getRmc+0x114>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8005f40:	4b1e      	ldr	r3, [pc, #120]	; (8005fbc <getRmc+0x150>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01f      	beq.n	8005f8a <getRmc+0x11e>
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <getRmc+0x14c>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01a      	beq.n	8005f8a <getRmc+0x11e>
	                        {
	                            f_northFlag = false;
 8005f54:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <getRmc+0x14c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8005f5a:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <getRmc+0x150>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <getRmc+0x154>)
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <getRmc+0x158>)
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <getRmc+0x15c>)
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <getRmc+0x160>)
 8005f6c:	4918      	ldr	r1, [pc, #96]	; (8005fd0 <getRmc+0x164>)
 8005f6e:	4811      	ldr	r0, [pc, #68]	; (8005fb4 <getRmc+0x148>)
 8005f70:	f006 fc00 	bl	800c774 <siscanf>
	                            rmcValidFlag = true;
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <getRmc+0x168>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8005f7a:	f000 f82d 	bl	8005fd8 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8005f7e:	e004      	b.n	8005f8a <getRmc+0x11e>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005f80:	2264      	movs	r2, #100	; 0x64
 8005f82:	2100      	movs	r1, #0
 8005f84:	480b      	ldr	r0, [pc, #44]	; (8005fb4 <getRmc+0x148>)
 8005f86:	f005 fd4d 	bl	800ba24 <memset>
	                    break;
 8005f8a:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <getRmc+0x130>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]

	    }

}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000092c 	.word	0x2000092c
 8005fa0:	20000934 	.word	0x20000934
 8005fa4:	20000a04 	.word	0x20000a04
 8005fa8:	20000e04 	.word	0x20000e04
 8005fac:	08012978 	.word	0x08012978
 8005fb0:	20000938 	.word	0x20000938
 8005fb4:	2000093c 	.word	0x2000093c
 8005fb8:	2000092f 	.word	0x2000092f
 8005fbc:	20000930 	.word	0x20000930
 8005fc0:	20001214 	.word	0x20001214
 8005fc4:	20001208 	.word	0x20001208
 8005fc8:	20001204 	.word	0x20001204
 8005fcc:	20001218 	.word	0x20001218
 8005fd0:	08012980 	.word	0x08012980
 8005fd4:	2000092e 	.word	0x2000092e

08005fd8 <formatLatLong>:

_io void formatLatLong(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8005fde:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <formatLatLong+0xc8>)
 8005fe0:	edd3 7a00 	vldr	s15, [r3]
 8005fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fe8:	ee17 1a90 	vmov	r1, s15
 8005fec:	4b2d      	ldr	r3, [pc, #180]	; (80060a4 <formatLatLong+0xcc>)
 8005fee:	fb83 2301 	smull	r2, r3, r3, r1
 8005ff2:	115a      	asrs	r2, r3, #5
 8005ff4:	17cb      	asrs	r3, r1, #31
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8005ffa:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <formatLatLong+0xc8>)
 8005ffc:	ed93 7a00 	vldr	s14, [r3]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2264      	movs	r2, #100	; 0x64
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006014:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006022:	edd7 6a00 	vldr	s13, [r7]
 8006026:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80060a8 <formatLatLong+0xd0>
 800602a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800602e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006032:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <formatLatLong+0xd4>)
 8006034:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8006038:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <formatLatLong+0xd8>)
 800603a:	edd3 7a00 	vldr	s15, [r3]
 800603e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006042:	ee17 1a90 	vmov	r1, s15
 8006046:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <formatLatLong+0xcc>)
 8006048:	fb83 2301 	smull	r2, r3, r3, r1
 800604c:	115a      	asrs	r2, r3, #5
 800604e:	17cb      	asrs	r3, r1, #31
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8006054:	4b16      	ldr	r3, [pc, #88]	; (80060b0 <formatLatLong+0xd8>)
 8006056:	ed93 7a00 	vldr	s14, [r3]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2264      	movs	r2, #100	; 0x64
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800606a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800606e:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800607c:	edd7 6a00 	vldr	s13, [r7]
 8006080:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80060a8 <formatLatLong+0xd0>
 8006084:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <formatLatLong+0xd4>)
 800608e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20001204 	.word	0x20001204
 80060a4:	51eb851f 	.word	0x51eb851f
 80060a8:	42700000 	.word	0x42700000
 80060ac:	2000120c 	.word	0x2000120c
 80060b0:	20001208 	.word	0x20001208

080060b4 <getGGA>:

_io void getGGA(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 80060ba:	4b32      	ldr	r3, [pc, #200]	; (8006184 <getGGA+0xd0>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05c      	beq.n	800617e <getGGA+0xca>
    {
        MsgIndex = 0;
 80060c4:	4b30      	ldr	r3, [pc, #192]	; (8006188 <getGGA+0xd4>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 80060ca:	4930      	ldr	r1, [pc, #192]	; (800618c <getGGA+0xd8>)
 80060cc:	4830      	ldr	r0, [pc, #192]	; (8006190 <getGGA+0xdc>)
 80060ce:	f006 fbca 	bl	800c866 <strstr>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4a2f      	ldr	r2, [pc, #188]	; (8006194 <getGGA+0xe0>)
 80060d6:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 80060d8:	4b2e      	ldr	r3, [pc, #184]	; (8006194 <getGGA+0xe0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b47      	cmp	r3, #71	; 0x47
 80060e0:	d14a      	bne.n	8006178 <getGGA+0xc4>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 80060e2:	4b2c      	ldr	r3, [pc, #176]	; (8006194 <getGGA+0xe0>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b28      	ldr	r3, [pc, #160]	; (8006188 <getGGA+0xd4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	7811      	ldrb	r1, [r2, #0]
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <getGGA+0xe4>)
 80060ee:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 80060f0:	4b25      	ldr	r3, [pc, #148]	; (8006188 <getGGA+0xd4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	4a24      	ldr	r2, [pc, #144]	; (8006188 <getGGA+0xd4>)
 80060f8:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 80060fa:	4b26      	ldr	r3, [pc, #152]	; (8006194 <getGGA+0xe0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a22      	ldr	r2, [pc, #136]	; (8006188 <getGGA+0xd4>)
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	441a      	add	r2, r3
 8006104:	4b23      	ldr	r3, [pc, #140]	; (8006194 <getGGA+0xe0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	7812      	ldrb	r2, [r2, #0]
 800610a:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800610c:	4b21      	ldr	r3, [pc, #132]	; (8006194 <getGGA+0xe0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b0a      	cmp	r3, #10
 8006114:	d003      	beq.n	800611e <getGGA+0x6a>
 8006116:	4b1c      	ldr	r3, [pc, #112]	; (8006188 <getGGA+0xd4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b5a      	cmp	r3, #90	; 0x5a
 800611c:	dde1      	ble.n	80060e2 <getGGA+0x2e>
                {
                    MsgIndex = 0;
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <getGGA+0xd4>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8006124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006128:	2100      	movs	r1, #0
 800612a:	4819      	ldr	r0, [pc, #100]	; (8006190 <getGGA+0xdc>)
 800612c:	f005 fc7a 	bl	800ba24 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8006130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006134:	2100      	movs	r1, #0
 8006136:	4819      	ldr	r0, [pc, #100]	; (800619c <getGGA+0xe8>)
 8006138:	f005 fc74 	bl	800ba24 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 800613c:	4816      	ldr	r0, [pc, #88]	; (8006198 <getGGA+0xe4>)
 800613e:	f7fa f871 	bl	8000224 <strlen>
 8006142:	4603      	mov	r3, r0
 8006144:	2b0a      	cmp	r3, #10
 8006146:	d912      	bls.n	800616e <getGGA+0xba>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <getGGA+0xec>)
 800614a:	9305      	str	r3, [sp, #20]
 800614c:	4b15      	ldr	r3, [pc, #84]	; (80061a4 <getGGA+0xf0>)
 800614e:	9304      	str	r3, [sp, #16]
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <getGGA+0xf4>)
 8006152:	9303      	str	r3, [sp, #12]
 8006154:	4b15      	ldr	r3, [pc, #84]	; (80061ac <getGGA+0xf8>)
 8006156:	9302      	str	r3, [sp, #8]
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <getGGA+0xfc>)
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <getGGA+0x100>)
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <getGGA+0x104>)
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <getGGA+0x108>)
 8006164:	4916      	ldr	r1, [pc, #88]	; (80061c0 <getGGA+0x10c>)
 8006166:	480c      	ldr	r0, [pc, #48]	; (8006198 <getGGA+0xe4>)
 8006168:	f006 fb04 	bl	800c774 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 800616c:	e004      	b.n	8006178 <getGGA+0xc4>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 800616e:	2264      	movs	r2, #100	; 0x64
 8006170:	2100      	movs	r1, #0
 8006172:	4814      	ldr	r0, [pc, #80]	; (80061c4 <getGGA+0x110>)
 8006174:	f005 fc56 	bl	800ba24 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8006178:	4b02      	ldr	r3, [pc, #8]	; (8006184 <getGGA+0xd0>)
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);
    }
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	2000092d 	.word	0x2000092d
 8006188:	20000934 	.word	0x20000934
 800618c:	0801299c 	.word	0x0801299c
 8006190:	20000e04 	.word	0x20000e04
 8006194:	20000938 	.word	0x20000938
 8006198:	200009a0 	.word	0x200009a0
 800619c:	20000a04 	.word	0x20000a04
 80061a0:	20001238 	.word	0x20001238
 80061a4:	20001234 	.word	0x20001234
 80061a8:	20001230 	.word	0x20001230
 80061ac:	2000122c 	.word	0x2000122c
 80061b0:	20001228 	.word	0x20001228
 80061b4:	20001224 	.word	0x20001224
 80061b8:	20001220 	.word	0x20001220
 80061bc:	2000121c 	.word	0x2000121c
 80061c0:	080129a4 	.word	0x080129a4
 80061c4:	2000093c 	.word	0x2000093c

080061c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80061c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061cc:	480d      	ldr	r0, [pc, #52]	; (8006204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061ce:	490e      	ldr	r1, [pc, #56]	; (8006208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061d0:	4a0e      	ldr	r2, [pc, #56]	; (800620c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061d4:	e002      	b.n	80061dc <LoopCopyDataInit>

080061d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061da:	3304      	adds	r3, #4

080061dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061e0:	d3f9      	bcc.n	80061d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061e2:	4a0b      	ldr	r2, [pc, #44]	; (8006210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061e4:	4c0b      	ldr	r4, [pc, #44]	; (8006214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80061e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061e8:	e001      	b.n	80061ee <LoopFillZerobss>

080061ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061ec:	3204      	adds	r2, #4

080061ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061f0:	d3fb      	bcc.n	80061ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80061f2:	f7ff fdad 	bl	8005d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061f6:	f005 fbf1 	bl	800b9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061fa:	f7fd fbb9 	bl	8003970 <main>
  bx  lr    
 80061fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006208:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800620c:	08012f68 	.word	0x08012f68
  ldr r2, =_sbss
 8006210:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006214:	20001250 	.word	0x20001250

08006218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006218:	e7fe      	b.n	8006218 <ADC_IRQHandler>
	...

0800621c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <HAL_Init+0x40>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0d      	ldr	r2, [pc, #52]	; (800625c <HAL_Init+0x40>)
 8006226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800622a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_Init+0x40>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <HAL_Init+0x40>)
 8006232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <HAL_Init+0x40>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a07      	ldr	r2, [pc, #28]	; (800625c <HAL_Init+0x40>)
 800623e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006244:	2003      	movs	r0, #3
 8006246:	f000 fd83 	bl	8006d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800624a:	200f      	movs	r0, #15
 800624c:	f000 f808 	bl	8006260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006250:	f7fe ffd4 	bl	80051fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40023c00 	.word	0x40023c00

08006260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <HAL_InitTick+0x54>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_InitTick+0x58>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	4619      	mov	r1, r3
 8006272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006276:	fbb3 f3f1 	udiv	r3, r3, r1
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fda9 	bl	8006dd6 <HAL_SYSTICK_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e00e      	b.n	80062ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b0f      	cmp	r3, #15
 8006292:	d80a      	bhi.n	80062aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006294:	2200      	movs	r2, #0
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	f000 fd63 	bl	8006d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062a0:	4a06      	ldr	r2, [pc, #24]	; (80062bc <HAL_InitTick+0x5c>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e000      	b.n	80062ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000008 	.word	0x20000008
 80062b8:	20000010 	.word	0x20000010
 80062bc:	2000000c 	.word	0x2000000c

080062c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_IncTick+0x20>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_IncTick+0x24>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <HAL_IncTick+0x24>)
 80062d2:	6013      	str	r3, [r2, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000010 	.word	0x20000010
 80062e4:	2000123c 	.word	0x2000123c

080062e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return uwTick;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_GetTick+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	2000123c 	.word	0x2000123c

08006300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006308:	f7ff ffee 	bl	80062e8 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d005      	beq.n	8006326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_Delay+0x44>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006326:	bf00      	nop
 8006328:	f7ff ffde 	bl	80062e8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d8f7      	bhi.n	8006328 <HAL_Delay+0x28>
  {
  }
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000010 	.word	0x20000010

08006348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e033      	b.n	80063c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fe ff70 	bl	800524c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b00      	cmp	r3, #0
 8006384:	d118      	bne.n	80063b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800638e:	f023 0302 	bic.w	r3, r3, #2
 8006392:	f043 0202 	orr.w	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fae8 	bl	8006970 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	f043 0201 	orr.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
 80063b6:	e001      	b.n	80063bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_ADC_Start+0x1a>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0b2      	b.n	8006550 <HAL_ADC_Start+0x180>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d018      	beq.n	8006432 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006410:	4b52      	ldr	r3, [pc, #328]	; (800655c <HAL_ADC_Start+0x18c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a52      	ldr	r2, [pc, #328]	; (8006560 <HAL_ADC_Start+0x190>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	0c9a      	lsrs	r2, r3, #18
 800641c:	4613      	mov	r3, r2
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	4413      	add	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006424:	e002      	b.n	800642c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	3b01      	subs	r3, #1
 800642a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f9      	bne.n	8006426 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d17a      	bne.n	8006536 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800646a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d106      	bne.n	800648e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	f023 0206 	bic.w	r2, r3, #6
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	645a      	str	r2, [r3, #68]	; 0x44
 800648c:	e002      	b.n	8006494 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800649c:	4b31      	ldr	r3, [pc, #196]	; (8006564 <HAL_ADC_Start+0x194>)
 800649e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80064a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d12a      	bne.n	800650c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2b      	ldr	r2, [pc, #172]	; (8006568 <HAL_ADC_Start+0x198>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d015      	beq.n	80064ec <HAL_ADC_Start+0x11c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a29      	ldr	r2, [pc, #164]	; (800656c <HAL_ADC_Start+0x19c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d105      	bne.n	80064d6 <HAL_ADC_Start+0x106>
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_ADC_Start+0x194>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a25      	ldr	r2, [pc, #148]	; (8006570 <HAL_ADC_Start+0x1a0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d136      	bne.n	800654e <HAL_ADC_Start+0x17e>
 80064e0:	4b20      	ldr	r3, [pc, #128]	; (8006564 <HAL_ADC_Start+0x194>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d130      	bne.n	800654e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d129      	bne.n	800654e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006508:	609a      	str	r2, [r3, #8]
 800650a:	e020      	b.n	800654e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a15      	ldr	r2, [pc, #84]	; (8006568 <HAL_ADC_Start+0x198>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d11b      	bne.n	800654e <HAL_ADC_Start+0x17e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d114      	bne.n	800654e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006532:	609a      	str	r2, [r3, #8]
 8006534:	e00b      	b.n	800654e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f043 0210 	orr.w	r2, r3, #16
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f043 0201 	orr.w	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20000008 	.word	0x20000008
 8006560:	431bde83 	.word	0x431bde83
 8006564:	40012300 	.word	0x40012300
 8006568:	40012000 	.word	0x40012000
 800656c:	40012100 	.word	0x40012100
 8006570:	40012200 	.word	0x40012200

08006574 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_ADC_Stop+0x16>
 8006586:	2302      	movs	r3, #2
 8006588:	e021      	b.n	80065ce <HAL_ADC_Stop+0x5a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	f043 0201 	orr.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d113      	bne.n	8006620 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006606:	d10b      	bne.n	8006620 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	f043 0220 	orr.w	r2, r3, #32
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e063      	b.n	80066e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006620:	f7ff fe62 	bl	80062e8 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006626:	e021      	b.n	800666c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d01d      	beq.n	800666c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_ADC_PollForConversion+0x6c>
 8006636:	f7ff fe57 	bl	80062e8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d212      	bcs.n	800666c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d00b      	beq.n	800666c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f043 0204 	orr.w	r2, r3, #4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e03d      	b.n	80066e8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d1d6      	bne.n	8006628 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0212 	mvn.w	r2, #18
 8006682:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d123      	bne.n	80066e6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d11f      	bne.n	80066e6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d006      	beq.n	80066c2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d111      	bne.n	80066e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x1c>
 8006724:	2302      	movs	r3, #2
 8006726:	e113      	b.n	8006950 <HAL_ADC_ConfigChannel+0x244>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b09      	cmp	r3, #9
 8006736:	d925      	bls.n	8006784 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68d9      	ldr	r1, [r3, #12]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	4613      	mov	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	4413      	add	r3, r2
 800674c:	3b1e      	subs	r3, #30
 800674e:	2207      	movs	r2, #7
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	43da      	mvns	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	400a      	ands	r2, r1
 800675c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68d9      	ldr	r1, [r3, #12]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	4618      	mov	r0, r3
 8006770:	4603      	mov	r3, r0
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	4403      	add	r3, r0
 8006776:	3b1e      	subs	r3, #30
 8006778:	409a      	lsls	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	e022      	b.n	80067ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6919      	ldr	r1, [r3, #16]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	4613      	mov	r3, r2
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	4413      	add	r3, r2
 8006798:	2207      	movs	r2, #7
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43da      	mvns	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	400a      	ands	r2, r1
 80067a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6919      	ldr	r1, [r3, #16]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	4618      	mov	r0, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4403      	add	r3, r0
 80067c0:	409a      	lsls	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d824      	bhi.n	800681c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	3b05      	subs	r3, #5
 80067e4:	221f      	movs	r2, #31
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43da      	mvns	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	400a      	ands	r2, r1
 80067f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4618      	mov	r0, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	3b05      	subs	r3, #5
 800680e:	fa00 f203 	lsl.w	r2, r0, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	635a      	str	r2, [r3, #52]	; 0x34
 800681a:	e04c      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b0c      	cmp	r3, #12
 8006822:	d824      	bhi.n	800686e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	3b23      	subs	r3, #35	; 0x23
 8006836:	221f      	movs	r2, #31
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	43da      	mvns	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	400a      	ands	r2, r1
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	4618      	mov	r0, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	3b23      	subs	r3, #35	; 0x23
 8006860:	fa00 f203 	lsl.w	r2, r0, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
 800686c:	e023      	b.n	80068b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	3b41      	subs	r3, #65	; 0x41
 8006880:	221f      	movs	r2, #31
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43da      	mvns	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	400a      	ands	r2, r1
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	4618      	mov	r0, r3
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	3b41      	subs	r3, #65	; 0x41
 80068aa:	fa00 f203 	lsl.w	r2, r0, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068b6:	4b29      	ldr	r3, [pc, #164]	; (800695c <HAL_ADC_ConfigChannel+0x250>)
 80068b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a28      	ldr	r2, [pc, #160]	; (8006960 <HAL_ADC_ConfigChannel+0x254>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10f      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x1d8>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b12      	cmp	r3, #18
 80068ca:	d10b      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <HAL_ADC_ConfigChannel+0x254>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d12b      	bne.n	8006946 <HAL_ADC_ConfigChannel+0x23a>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <HAL_ADC_ConfigChannel+0x258>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <HAL_ADC_ConfigChannel+0x1f4>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b11      	cmp	r3, #17
 80068fe:	d122      	bne.n	8006946 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <HAL_ADC_ConfigChannel+0x258>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d111      	bne.n	8006946 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <HAL_ADC_ConfigChannel+0x25c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a11      	ldr	r2, [pc, #68]	; (800696c <HAL_ADC_ConfigChannel+0x260>)
 8006928:	fba2 2303 	umull	r2, r3, r2, r3
 800692c:	0c9a      	lsrs	r2, r3, #18
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006938:	e002      	b.n	8006940 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3b01      	subs	r3, #1
 800693e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f9      	bne.n	800693a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40012300 	.word	0x40012300
 8006960:	40012000 	.word	0x40012000
 8006964:	10000012 	.word	0x10000012
 8006968:	20000008 	.word	0x20000008
 800696c:	431bde83 	.word	0x431bde83

08006970 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006978:	4b79      	ldr	r3, [pc, #484]	; (8006b60 <ADC_Init+0x1f0>)
 800697a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6859      	ldr	r1, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	021a      	lsls	r2, r3, #8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80069c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6899      	ldr	r1, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	4a58      	ldr	r2, [pc, #352]	; (8006b64 <ADC_Init+0x1f4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6899      	ldr	r1, [r3, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6899      	ldr	r1, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	e00f      	b.n	8006a6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0202 	bic.w	r2, r2, #2
 8006a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6899      	ldr	r1, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7e1b      	ldrb	r3, [r3, #24]
 8006a88:	005a      	lsls	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01b      	beq.n	8006ad4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006aba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	035a      	lsls	r2, r3, #13
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	e007      	b.n	8006ae4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	051a      	lsls	r2, r3, #20
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6899      	ldr	r1, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b26:	025a      	lsls	r2, r3, #9
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6899      	ldr	r1, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	029a      	lsls	r2, r3, #10
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40012300 	.word	0x40012300
 8006b64:	0f000001 	.word	0x0f000001

08006b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <__NVIC_SetPriorityGrouping+0x44>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b84:	4013      	ands	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b9a:	4a04      	ldr	r2, [pc, #16]	; (8006bac <__NVIC_SetPriorityGrouping+0x44>)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	60d3      	str	r3, [r2, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	f003 0307 	and.w	r3, r3, #7
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	e000ed00 	.word	0xe000ed00

08006bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	db0b      	blt.n	8006bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	f003 021f 	and.w	r2, r3, #31
 8006be4:	4907      	ldr	r1, [pc, #28]	; (8006c04 <__NVIC_EnableIRQ+0x38>)
 8006be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	2001      	movs	r0, #1
 8006bee:	fa00 f202 	lsl.w	r2, r0, r2
 8006bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	e000e100 	.word	0xe000e100

08006c08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	db12      	blt.n	8006c40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	f003 021f 	and.w	r2, r3, #31
 8006c20:	490a      	ldr	r1, [pc, #40]	; (8006c4c <__NVIC_DisableIRQ+0x44>)
 8006c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	2001      	movs	r0, #1
 8006c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c2e:	3320      	adds	r3, #32
 8006c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006c34:	f3bf 8f4f 	dsb	sy
}
 8006c38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c3a:	f3bf 8f6f 	isb	sy
}
 8006c3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	e000e100 	.word	0xe000e100

08006c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	6039      	str	r1, [r7, #0]
 8006c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	db0a      	blt.n	8006c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	490c      	ldr	r1, [pc, #48]	; (8006c9c <__NVIC_SetPriority+0x4c>)
 8006c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6e:	0112      	lsls	r2, r2, #4
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	440b      	add	r3, r1
 8006c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c78:	e00a      	b.n	8006c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4908      	ldr	r1, [pc, #32]	; (8006ca0 <__NVIC_SetPriority+0x50>)
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	3b04      	subs	r3, #4
 8006c88:	0112      	lsls	r2, r2, #4
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	761a      	strb	r2, [r3, #24]
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	e000e100 	.word	0xe000e100
 8006ca0:	e000ed00 	.word	0xe000ed00

08006ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b089      	sub	sp, #36	; 0x24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f1c3 0307 	rsb	r3, r3, #7
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	bf28      	it	cs
 8006cc2:	2304      	movcs	r3, #4
 8006cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d902      	bls.n	8006cd4 <NVIC_EncodePriority+0x30>
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3b03      	subs	r3, #3
 8006cd2:	e000      	b.n	8006cd6 <NVIC_EncodePriority+0x32>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43da      	mvns	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	401a      	ands	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cec:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	43d9      	mvns	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cfc:	4313      	orrs	r3, r2
         );
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3724      	adds	r7, #36	; 0x24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d1c:	d301      	bcc.n	8006d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e00f      	b.n	8006d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d22:	4a0a      	ldr	r2, [pc, #40]	; (8006d4c <SysTick_Config+0x40>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d2a:	210f      	movs	r1, #15
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	f7ff ff8e 	bl	8006c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <SysTick_Config+0x40>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d3a:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <SysTick_Config+0x40>)
 8006d3c:	2207      	movs	r2, #7
 8006d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	e000e010 	.word	0xe000e010

08006d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff05 	bl	8006b68 <__NVIC_SetPriorityGrouping>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d78:	f7ff ff1a 	bl	8006bb0 <__NVIC_GetPriorityGrouping>
 8006d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff8e 	bl	8006ca4 <NVIC_EncodePriority>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff5d 	bl	8006c50 <__NVIC_SetPriority>
}
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	4603      	mov	r3, r0
 8006da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ff0d 	bl	8006bcc <__NVIC_EnableIRQ>
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff ff1d 	bl	8006c08 <__NVIC_DisableIRQ>
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff ff94 	bl	8006d0c <SysTick_Config>
 8006de4:	4603      	mov	r3, r0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006dfc:	f7ff fa74 	bl	80062e8 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e099      	b.n	8006f40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e2c:	e00f      	b.n	8006e4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e2e:	f7ff fa5b 	bl	80062e8 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b05      	cmp	r3, #5
 8006e3a:	d908      	bls.n	8006e4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2203      	movs	r2, #3
 8006e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e078      	b.n	8006f40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e8      	bne.n	8006e2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4b38      	ldr	r3, [pc, #224]	; (8006f48 <HAL_DMA_Init+0x158>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d107      	bne.n	8006eb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d117      	bne.n	8006f12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00e      	beq.n	8006f12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb6d 	bl	80075d4 <DMA_CheckFifoParam>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2240      	movs	r2, #64	; 0x40
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e016      	b.n	8006f40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb24 	bl	8007568 <DMA_CalcBaseAndBitshift>
 8006f20:	4603      	mov	r3, r0
 8006f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f28:	223f      	movs	r2, #63	; 0x3f
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	f010803f 	.word	0xf010803f

08006f4c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e050      	b.n	8007000 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d101      	bne.n	8006f6e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e048      	b.n	8007000 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0201 	bic.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2221      	movs	r2, #33	; 0x21
 8006fac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fada 	bl	8007568 <DMA_CalcBaseAndBitshift>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe0:	223f      	movs	r2, #63	; 0x3f
 8006fe2:	409a      	lsls	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_DMA_Start_IT+0x26>
 800702a:	2302      	movs	r3, #2
 800702c:	e040      	b.n	80070b0 <HAL_DMA_Start_IT+0xa8>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	d12f      	bne.n	80070a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fa58 	bl	800750c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	223f      	movs	r2, #63	; 0x3f
 8007062:	409a      	lsls	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0216 	orr.w	r2, r2, #22
 8007076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0208 	orr.w	r2, r2, #8
 800708e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e005      	b.n	80070ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80070aa:	2302      	movs	r3, #2
 80070ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80070c6:	f7ff f90f 	bl	80062e8 <HAL_GetTick>
 80070ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d008      	beq.n	80070ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e052      	b.n	8007190 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0216 	bic.w	r2, r2, #22
 80070f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695a      	ldr	r2, [r3, #20]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007108:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d103      	bne.n	800711a <HAL_DMA_Abort+0x62>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0208 	bic.w	r2, r2, #8
 8007128:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800713a:	e013      	b.n	8007164 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800713c:	f7ff f8d4 	bl	80062e8 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b05      	cmp	r3, #5
 8007148:	d90c      	bls.n	8007164 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2203      	movs	r2, #3
 8007154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e015      	b.n	8007190 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e4      	bne.n	800713c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007176:	223f      	movs	r2, #63	; 0x3f
 8007178:	409a      	lsls	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d004      	beq.n	80071b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e00c      	b.n	80071d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2205      	movs	r2, #5
 80071ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071e8:	4b8e      	ldr	r3, [pc, #568]	; (8007424 <HAL_DMA_IRQHandler+0x248>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a8e      	ldr	r2, [pc, #568]	; (8007428 <HAL_DMA_IRQHandler+0x24c>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0a9b      	lsrs	r3, r3, #10
 80071f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	2208      	movs	r2, #8
 8007208:	409a      	lsls	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01a      	beq.n	8007248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d013      	beq.n	8007248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0204 	bic.w	r2, r2, #4
 800722e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007234:	2208      	movs	r2, #8
 8007236:	409a      	lsls	r2, r3
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	f043 0201 	orr.w	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724c:	2201      	movs	r2, #1
 800724e:	409a      	lsls	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d012      	beq.n	800727e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726a:	2201      	movs	r2, #1
 800726c:	409a      	lsls	r2, r3
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007282:	2204      	movs	r2, #4
 8007284:	409a      	lsls	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4013      	ands	r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d012      	beq.n	80072b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a0:	2204      	movs	r2, #4
 80072a2:	409a      	lsls	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f043 0204 	orr.w	r2, r3, #4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b8:	2210      	movs	r2, #16
 80072ba:	409a      	lsls	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d043      	beq.n	800734c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d03c      	beq.n	800734c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	2210      	movs	r2, #16
 80072d8:	409a      	lsls	r2, r3
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d018      	beq.n	800731e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d024      	beq.n	800734c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
 800730a:	e01f      	b.n	800734c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01b      	beq.n	800734c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	4798      	blx	r3
 800731c:	e016      	b.n	800734c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007328:	2b00      	cmp	r3, #0
 800732a:	d107      	bne.n	800733c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0208 	bic.w	r2, r2, #8
 800733a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007350:	2220      	movs	r2, #32
 8007352:	409a      	lsls	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 808f 	beq.w	800747c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0310 	and.w	r3, r3, #16
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8087 	beq.w	800747c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007372:	2220      	movs	r2, #32
 8007374:	409a      	lsls	r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b05      	cmp	r3, #5
 8007384:	d136      	bne.n	80073f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0216 	bic.w	r2, r2, #22
 8007394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d103      	bne.n	80073b6 <HAL_DMA_IRQHandler+0x1da>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0208 	bic.w	r2, r2, #8
 80073c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ca:	223f      	movs	r2, #63	; 0x3f
 80073cc:	409a      	lsls	r2, r3
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d07e      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
        }
        return;
 80073f2:	e079      	b.n	80074e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01d      	beq.n	800743e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10d      	bne.n	800742c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007414:	2b00      	cmp	r3, #0
 8007416:	d031      	beq.n	800747c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
 8007420:	e02c      	b.n	800747c <HAL_DMA_IRQHandler+0x2a0>
 8007422:	bf00      	nop
 8007424:	20000008 	.word	0x20000008
 8007428:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d023      	beq.n	800747c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	e01e      	b.n	800747c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10f      	bne.n	800746c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0210 	bic.w	r2, r2, #16
 800745a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	2b00      	cmp	r3, #0
 8007482:	d032      	beq.n	80074ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d022      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2205      	movs	r2, #5
 8007494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d307      	bcc.n	80074c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f2      	bne.n	80074a8 <HAL_DMA_IRQHandler+0x2cc>
 80074c2:	e000      	b.n	80074c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80074c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
 80074e6:	e000      	b.n	80074ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80074e8:	bf00      	nop
    }
  }
}
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074fe:	b2db      	uxtb	r3, r3
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007528:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d108      	bne.n	800754c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800754a:	e007      	b.n	800755c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]
}
 800755c:	bf00      	nop
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	3b10      	subs	r3, #16
 8007578:	4a14      	ldr	r2, [pc, #80]	; (80075cc <DMA_CalcBaseAndBitshift+0x64>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007582:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <DMA_CalcBaseAndBitshift+0x68>)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b03      	cmp	r3, #3
 8007594:	d909      	bls.n	80075aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800759e:	f023 0303 	bic.w	r3, r3, #3
 80075a2:	1d1a      	adds	r2, r3, #4
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	659a      	str	r2, [r3, #88]	; 0x58
 80075a8:	e007      	b.n	80075ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	aaaaaaab 	.word	0xaaaaaaab
 80075d0:	080129f0 	.word	0x080129f0

080075d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d11f      	bne.n	800762e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d856      	bhi.n	80076a2 <DMA_CheckFifoParam+0xce>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <DMA_CheckFifoParam+0x28>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	0800761f 	.word	0x0800761f
 8007604:	0800760d 	.word	0x0800760d
 8007608:	080076a3 	.word	0x080076a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d046      	beq.n	80076a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800761c:	e043      	b.n	80076a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007626:	d140      	bne.n	80076aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800762c:	e03d      	b.n	80076aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007636:	d121      	bne.n	800767c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b03      	cmp	r3, #3
 800763c:	d837      	bhi.n	80076ae <DMA_CheckFifoParam+0xda>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <DMA_CheckFifoParam+0x70>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007655 	.word	0x08007655
 8007648:	0800765b 	.word	0x0800765b
 800764c:	08007655 	.word	0x08007655
 8007650:	0800766d 	.word	0x0800766d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
      break;
 8007658:	e030      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d025      	beq.n	80076b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800766a:	e022      	b.n	80076b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007674:	d11f      	bne.n	80076b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800767a:	e01c      	b.n	80076b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d903      	bls.n	800768a <DMA_CheckFifoParam+0xb6>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d003      	beq.n	8007690 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007688:	e018      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]
      break;
 800768e:	e015      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00e      	beq.n	80076ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e00b      	b.n	80076ba <DMA_CheckFifoParam+0xe6>
      break;
 80076a2:	bf00      	nop
 80076a4:	e00a      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      break;
 80076a6:	bf00      	nop
 80076a8:	e008      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      break;
 80076aa:	bf00      	nop
 80076ac:	e006      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      break;
 80076ae:	bf00      	nop
 80076b0:	e004      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      break;
 80076b2:	bf00      	nop
 80076b4:	e002      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      break;   
 80076b6:	bf00      	nop
 80076b8:	e000      	b.n	80076bc <DMA_CheckFifoParam+0xe8>
      break;
 80076ba:	bf00      	nop
    }
  } 
  
  return status; 
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e165      	b.n	80079b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076e8:	2201      	movs	r2, #1
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4013      	ands	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	429a      	cmp	r2, r3
 8007702:	f040 8154 	bne.w	80079ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d005      	beq.n	800771e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800771a:	2b02      	cmp	r3, #2
 800771c:	d130      	bne.n	8007780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	2203      	movs	r2, #3
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	43db      	mvns	r3, r3
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	4013      	ands	r3, r2
 8007734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4313      	orrs	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007754:	2201      	movs	r2, #1
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	091b      	lsrs	r3, r3, #4
 800776a:	f003 0201 	and.w	r2, r3, #1
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d017      	beq.n	80077bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	2203      	movs	r2, #3
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4013      	ands	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d123      	bne.n	8007810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	08da      	lsrs	r2, r3, #3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3208      	adds	r2, #8
 80077d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	220f      	movs	r2, #15
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	08da      	lsrs	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3208      	adds	r2, #8
 800780a:	69b9      	ldr	r1, [r7, #24]
 800780c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	2203      	movs	r2, #3
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4013      	ands	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f003 0203 	and.w	r2, r3, #3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80ae 	beq.w	80079ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	4b5d      	ldr	r3, [pc, #372]	; (80079cc <HAL_GPIO_Init+0x300>)
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	4a5c      	ldr	r2, [pc, #368]	; (80079cc <HAL_GPIO_Init+0x300>)
 800785c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007860:	6453      	str	r3, [r2, #68]	; 0x44
 8007862:	4b5a      	ldr	r3, [pc, #360]	; (80079cc <HAL_GPIO_Init+0x300>)
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800786e:	4a58      	ldr	r2, [pc, #352]	; (80079d0 <HAL_GPIO_Init+0x304>)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	3302      	adds	r3, #2
 8007876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	220f      	movs	r2, #15
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a4f      	ldr	r2, [pc, #316]	; (80079d4 <HAL_GPIO_Init+0x308>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d025      	beq.n	80078e6 <HAL_GPIO_Init+0x21a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a4e      	ldr	r2, [pc, #312]	; (80079d8 <HAL_GPIO_Init+0x30c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01f      	beq.n	80078e2 <HAL_GPIO_Init+0x216>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a4d      	ldr	r2, [pc, #308]	; (80079dc <HAL_GPIO_Init+0x310>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d019      	beq.n	80078de <HAL_GPIO_Init+0x212>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a4c      	ldr	r2, [pc, #304]	; (80079e0 <HAL_GPIO_Init+0x314>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_GPIO_Init+0x20e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a4b      	ldr	r2, [pc, #300]	; (80079e4 <HAL_GPIO_Init+0x318>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00d      	beq.n	80078d6 <HAL_GPIO_Init+0x20a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a4a      	ldr	r2, [pc, #296]	; (80079e8 <HAL_GPIO_Init+0x31c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <HAL_GPIO_Init+0x206>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a49      	ldr	r2, [pc, #292]	; (80079ec <HAL_GPIO_Init+0x320>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_GPIO_Init+0x202>
 80078ca:	2306      	movs	r3, #6
 80078cc:	e00c      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078ce:	2307      	movs	r3, #7
 80078d0:	e00a      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078d2:	2305      	movs	r3, #5
 80078d4:	e008      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078d6:	2304      	movs	r3, #4
 80078d8:	e006      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078da:	2303      	movs	r3, #3
 80078dc:	e004      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078de:	2302      	movs	r3, #2
 80078e0:	e002      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <HAL_GPIO_Init+0x21c>
 80078e6:	2300      	movs	r3, #0
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	f002 0203 	and.w	r2, r2, #3
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	4093      	lsls	r3, r2
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078f8:	4935      	ldr	r1, [pc, #212]	; (80079d0 <HAL_GPIO_Init+0x304>)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	089b      	lsrs	r3, r3, #2
 80078fe:	3302      	adds	r3, #2
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007906:	4b3a      	ldr	r3, [pc, #232]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	43db      	mvns	r3, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4013      	ands	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800792a:	4a31      	ldr	r2, [pc, #196]	; (80079f0 <HAL_GPIO_Init+0x324>)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007930:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	43db      	mvns	r3, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4013      	ands	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007954:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800795a:	4b25      	ldr	r3, [pc, #148]	; (80079f0 <HAL_GPIO_Init+0x324>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	43db      	mvns	r3, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4013      	ands	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800797e:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <HAL_GPIO_Init+0x324>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079a8:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <HAL_GPIO_Init+0x324>)
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	f67f ae96 	bls.w	80076e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	3724      	adds	r7, #36	; 0x24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800
 80079d0:	40013800 	.word	0x40013800
 80079d4:	40020000 	.word	0x40020000
 80079d8:	40020400 	.word	0x40020400
 80079dc:	40020800 	.word	0x40020800
 80079e0:	40020c00 	.word	0x40020c00
 80079e4:	40021000 	.word	0x40021000
 80079e8:	40021400 	.word	0x40021400
 80079ec:	40021800 	.word	0x40021800
 80079f0:	40013c00 	.word	0x40013c00

080079f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	e0c7      	b.n	8007ba0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a10:	2201      	movs	r2, #1
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	f040 80b7 	bne.w	8007b9a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007a2c:	4a62      	ldr	r2, [pc, #392]	; (8007bb8 <HAL_GPIO_DeInit+0x1c4>)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	089b      	lsrs	r3, r3, #2
 8007a32:	3302      	adds	r3, #2
 8007a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a38:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	220f      	movs	r2, #15
 8007a44:	fa02 f303 	lsl.w	r3, r2, r3
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a5a      	ldr	r2, [pc, #360]	; (8007bbc <HAL_GPIO_DeInit+0x1c8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d025      	beq.n	8007aa2 <HAL_GPIO_DeInit+0xae>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a59      	ldr	r2, [pc, #356]	; (8007bc0 <HAL_GPIO_DeInit+0x1cc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01f      	beq.n	8007a9e <HAL_GPIO_DeInit+0xaa>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a58      	ldr	r2, [pc, #352]	; (8007bc4 <HAL_GPIO_DeInit+0x1d0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d019      	beq.n	8007a9a <HAL_GPIO_DeInit+0xa6>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a57      	ldr	r2, [pc, #348]	; (8007bc8 <HAL_GPIO_DeInit+0x1d4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <HAL_GPIO_DeInit+0xa2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a56      	ldr	r2, [pc, #344]	; (8007bcc <HAL_GPIO_DeInit+0x1d8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00d      	beq.n	8007a92 <HAL_GPIO_DeInit+0x9e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a55      	ldr	r2, [pc, #340]	; (8007bd0 <HAL_GPIO_DeInit+0x1dc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d007      	beq.n	8007a8e <HAL_GPIO_DeInit+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a54      	ldr	r2, [pc, #336]	; (8007bd4 <HAL_GPIO_DeInit+0x1e0>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d101      	bne.n	8007a8a <HAL_GPIO_DeInit+0x96>
 8007a86:	2306      	movs	r3, #6
 8007a88:	e00c      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007a8a:	2307      	movs	r3, #7
 8007a8c:	e00a      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007a8e:	2305      	movs	r3, #5
 8007a90:	e008      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007a92:	2304      	movs	r3, #4
 8007a94:	e006      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007a96:	2303      	movs	r3, #3
 8007a98:	e004      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e002      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <HAL_GPIO_DeInit+0xb0>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	f002 0203 	and.w	r2, r2, #3
 8007aaa:	0092      	lsls	r2, r2, #2
 8007aac:	4093      	lsls	r3, r2
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d132      	bne.n	8007b1a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007ab4:	4b48      	ldr	r3, [pc, #288]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	43db      	mvns	r3, r3
 8007abc:	4946      	ldr	r1, [pc, #280]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007ac2:	4b45      	ldr	r3, [pc, #276]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	4943      	ldr	r1, [pc, #268]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007ad0:	4b41      	ldr	r3, [pc, #260]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	493f      	ldr	r1, [pc, #252]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007ade:	4b3e      	ldr	r3, [pc, #248]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	493c      	ldr	r1, [pc, #240]	; (8007bd8 <HAL_GPIO_DeInit+0x1e4>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	220f      	movs	r2, #15
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007afc:	4a2e      	ldr	r2, [pc, #184]	; (8007bb8 <HAL_GPIO_DeInit+0x1c4>)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	089b      	lsrs	r3, r3, #2
 8007b02:	3302      	adds	r3, #2
 8007b04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	43da      	mvns	r2, r3
 8007b0c:	482a      	ldr	r0, [pc, #168]	; (8007bb8 <HAL_GPIO_DeInit+0x1c4>)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	089b      	lsrs	r3, r3, #2
 8007b12:	400a      	ands	r2, r1
 8007b14:	3302      	adds	r3, #2
 8007b16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	2103      	movs	r1, #3
 8007b24:	fa01 f303 	lsl.w	r3, r1, r3
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	08da      	lsrs	r2, r3, #3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3208      	adds	r2, #8
 8007b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	220f      	movs	r2, #15
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	08d2      	lsrs	r2, r2, #3
 8007b50:	4019      	ands	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3208      	adds	r2, #8
 8007b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	2103      	movs	r1, #3
 8007b64:	fa01 f303 	lsl.w	r3, r1, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	2101      	movs	r1, #1
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	401a      	ands	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	2103      	movs	r1, #3
 8007b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b92:	43db      	mvns	r3, r3
 8007b94:	401a      	ands	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b0f      	cmp	r3, #15
 8007ba4:	f67f af34 	bls.w	8007a10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40013800 	.word	0x40013800
 8007bbc:	40020000 	.word	0x40020000
 8007bc0:	40020400 	.word	0x40020400
 8007bc4:	40020800 	.word	0x40020800
 8007bc8:	40020c00 	.word	0x40020c00
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	40021400 	.word	0x40021400
 8007bd4:	40021800 	.word	0x40021800
 8007bd8:	40013c00 	.word	0x40013c00

08007bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	887b      	ldrh	r3, [r7, #2]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
 8007bf8:	e001      	b.n	8007bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	807b      	strh	r3, [r7, #2]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c1c:	787b      	ldrb	r3, [r7, #1]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c22:	887a      	ldrh	r2, [r7, #2]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c28:	e003      	b.n	8007c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c2a:	887b      	ldrh	r3, [r7, #2]
 8007c2c:	041a      	lsls	r2, r3, #16
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	619a      	str	r2, [r3, #24]
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c50:	887a      	ldrh	r2, [r7, #2]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4013      	ands	r3, r2
 8007c56:	041a      	lsls	r2, r3, #16
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	43d9      	mvns	r1, r3
 8007c5c:	887b      	ldrh	r3, [r7, #2]
 8007c5e:	400b      	ands	r3, r1
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	619a      	str	r2, [r3, #24]
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
	...

08007c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c80:	695a      	ldr	r2, [r3, #20]
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	4013      	ands	r3, r2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d006      	beq.n	8007c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c8a:	4a05      	ldr	r2, [pc, #20]	; (8007ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fc fd78 	bl	8004788 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	40013c00 	.word	0x40013c00

08007ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e12b      	b.n	8007f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fd fb02 	bl	80052d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2224      	movs	r2, #36	; 0x24
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0201 	bic.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d08:	f001 f938 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
 8007d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	4a81      	ldr	r2, [pc, #516]	; (8007f18 <HAL_I2C_Init+0x274>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d807      	bhi.n	8007d28 <HAL_I2C_Init+0x84>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4a80      	ldr	r2, [pc, #512]	; (8007f1c <HAL_I2C_Init+0x278>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	bf94      	ite	ls
 8007d20:	2301      	movls	r3, #1
 8007d22:	2300      	movhi	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e006      	b.n	8007d36 <HAL_I2C_Init+0x92>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4a7d      	ldr	r2, [pc, #500]	; (8007f20 <HAL_I2C_Init+0x27c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	bf94      	ite	ls
 8007d30:	2301      	movls	r3, #1
 8007d32:	2300      	movhi	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e0e7      	b.n	8007f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a78      	ldr	r2, [pc, #480]	; (8007f24 <HAL_I2C_Init+0x280>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	0c9b      	lsrs	r3, r3, #18
 8007d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a6a      	ldr	r2, [pc, #424]	; (8007f18 <HAL_I2C_Init+0x274>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d802      	bhi.n	8007d78 <HAL_I2C_Init+0xd4>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	3301      	adds	r3, #1
 8007d76:	e009      	b.n	8007d8c <HAL_I2C_Init+0xe8>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	4a69      	ldr	r2, [pc, #420]	; (8007f28 <HAL_I2C_Init+0x284>)
 8007d84:	fba2 2303 	umull	r2, r3, r2, r3
 8007d88:	099b      	lsrs	r3, r3, #6
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	495c      	ldr	r1, [pc, #368]	; (8007f18 <HAL_I2C_Init+0x274>)
 8007da8:	428b      	cmp	r3, r1
 8007daa:	d819      	bhi.n	8007de0 <HAL_I2C_Init+0x13c>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1e59      	subs	r1, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007dc0:	400b      	ands	r3, r1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <HAL_I2C_Init+0x138>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1e59      	subs	r1, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dda:	e051      	b.n	8007e80 <HAL_I2C_Init+0x1dc>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	e04f      	b.n	8007e80 <HAL_I2C_Init+0x1dc>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d111      	bne.n	8007e0c <HAL_I2C_Init+0x168>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	1e58      	subs	r0, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6859      	ldr	r1, [r3, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	440b      	add	r3, r1
 8007df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bf0c      	ite	eq
 8007e04:	2301      	moveq	r3, #1
 8007e06:	2300      	movne	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	e012      	b.n	8007e32 <HAL_I2C_Init+0x18e>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	1e58      	subs	r0, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6859      	ldr	r1, [r3, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	0099      	lsls	r1, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e22:	3301      	adds	r3, #1
 8007e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <HAL_I2C_Init+0x196>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e022      	b.n	8007e80 <HAL_I2C_Init+0x1dc>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10e      	bne.n	8007e60 <HAL_I2C_Init+0x1bc>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1e58      	subs	r0, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	440b      	add	r3, r1
 8007e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e54:	3301      	adds	r3, #1
 8007e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5e:	e00f      	b.n	8007e80 <HAL_I2C_Init+0x1dc>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	1e58      	subs	r0, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6859      	ldr	r1, [r3, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	0099      	lsls	r1, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e76:	3301      	adds	r3, #1
 8007e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	6809      	ldr	r1, [r1, #0]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69da      	ldr	r2, [r3, #28]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6911      	ldr	r1, [r2, #16]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	68d2      	ldr	r2, [r2, #12]
 8007eba:	4311      	orrs	r1, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695a      	ldr	r2, [r3, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	000186a0 	.word	0x000186a0
 8007f1c:	001e847f 	.word	0x001e847f
 8007f20:	003d08ff 	.word	0x003d08ff
 8007f24:	431bde83 	.word	0x431bde83
 8007f28:	10624dd3 	.word	0x10624dd3

08007f2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e021      	b.n	8007f82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2224      	movs	r2, #36	; 0x24
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0201 	bic.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fd fa5c 	bl	8005414 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	817b      	strh	r3, [r7, #10]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	813b      	strh	r3, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fa6:	f7fe f99f 	bl	80062e8 <HAL_GetTick>
 8007faa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	f040 80d9 	bne.w	800816c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2319      	movs	r3, #25
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	496d      	ldr	r1, [pc, #436]	; (8008178 <HAL_I2C_Mem_Write+0x1ec>)
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fc7f 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e0cc      	b.n	800816e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <HAL_I2C_Mem_Write+0x56>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e0c5      	b.n	800816e <HAL_I2C_Mem_Write+0x1e2>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d007      	beq.n	8008008 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2221      	movs	r2, #33	; 0x21
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2240      	movs	r2, #64	; 0x40
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a3a      	ldr	r2, [r7, #32]
 8008032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4a4d      	ldr	r2, [pc, #308]	; (800817c <HAL_I2C_Mem_Write+0x1f0>)
 8008048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800804a:	88f8      	ldrh	r0, [r7, #6]
 800804c:	893a      	ldrh	r2, [r7, #8]
 800804e:	8979      	ldrh	r1, [r7, #10]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4603      	mov	r3, r0
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fab6 	bl	80085cc <I2C_RequestMemoryWrite>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d052      	beq.n	800810c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e081      	b.n	800816e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fd00 	bl	8008a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	2b04      	cmp	r3, #4
 8008080:	d107      	bne.n	8008092 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e06b      	b.n	800816e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d11b      	bne.n	800810c <HAL_I2C_Mem_Write+0x180>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1aa      	bne.n	800806a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fcec 	bl	8008af6 <I2C_WaitOnBTFFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00d      	beq.n	8008140 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	2b04      	cmp	r3, #4
 800812a:	d107      	bne.n	800813c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e016      	b.n	800816e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800814e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	e000      	b.n	800816e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800816c:	2302      	movs	r3, #2
  }
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	00100002 	.word	0x00100002
 800817c:	ffff0000 	.word	0xffff0000

08008180 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08c      	sub	sp, #48	; 0x30
 8008184:	af02      	add	r7, sp, #8
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	461a      	mov	r2, r3
 800818e:	4603      	mov	r3, r0
 8008190:	817b      	strh	r3, [r7, #10]
 8008192:	460b      	mov	r3, r1
 8008194:	813b      	strh	r3, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800819a:	f7fe f8a5 	bl	80062e8 <HAL_GetTick>
 800819e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	f040 8208 	bne.w	80085be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2319      	movs	r3, #25
 80081b4:	2201      	movs	r2, #1
 80081b6:	497b      	ldr	r1, [pc, #492]	; (80083a4 <HAL_I2C_Mem_Read+0x224>)
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fb85 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80081c4:	2302      	movs	r3, #2
 80081c6:	e1fb      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <HAL_I2C_Mem_Read+0x56>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e1f4      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d007      	beq.n	80081fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800820a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2222      	movs	r2, #34	; 0x22
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2240      	movs	r2, #64	; 0x40
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800822c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4a5b      	ldr	r2, [pc, #364]	; (80083a8 <HAL_I2C_Mem_Read+0x228>)
 800823c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800823e:	88f8      	ldrh	r0, [r7, #6]
 8008240:	893a      	ldrh	r2, [r7, #8]
 8008242:	8979      	ldrh	r1, [r7, #10]
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	4603      	mov	r3, r0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fa52 	bl	80086f8 <I2C_RequestMemoryRead>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e1b0      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	d113      	bne.n	800828e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008266:	2300      	movs	r3, #0
 8008268:	623b      	str	r3, [r7, #32]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	623b      	str	r3, [r7, #32]
 800827a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e184      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008292:	2b01      	cmp	r3, #1
 8008294:	d11b      	bne.n	80082ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082a6:	2300      	movs	r3, #0
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e164      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d11b      	bne.n	800830e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	e144      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008324:	e138      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832a:	2b03      	cmp	r3, #3
 800832c:	f200 80f1 	bhi.w	8008512 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008334:	2b01      	cmp	r3, #1
 8008336:	d123      	bne.n	8008380 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fc1b 	bl	8008b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e139      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800837e:	e10b      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008384:	2b02      	cmp	r3, #2
 8008386:	d14e      	bne.n	8008426 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	2200      	movs	r2, #0
 8008390:	4906      	ldr	r1, [pc, #24]	; (80083ac <HAL_I2C_Mem_Read+0x22c>)
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 fa98 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d008      	beq.n	80083b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e10e      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
 80083a2:	bf00      	nop
 80083a4:	00100002 	.word	0x00100002
 80083a8:	ffff0000 	.word	0xffff0000
 80083ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691a      	ldr	r2, [r3, #16]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008424:	e0b8      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	2200      	movs	r2, #0
 800842e:	4966      	ldr	r1, [pc, #408]	; (80085c8 <HAL_I2C_Mem_Read+0x448>)
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fa49 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e0bf      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800844e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008478:	b29b      	uxth	r3, r3
 800847a:	3b01      	subs	r3, #1
 800847c:	b29a      	uxth	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	2200      	movs	r2, #0
 800848a:	494f      	ldr	r1, [pc, #316]	; (80085c8 <HAL_I2C_Mem_Read+0x448>)
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fa1b 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e091      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008510:	e042      	b.n	8008598 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 fb2e 	bl	8008b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e04c      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	b2d2      	uxtb	r2, r2
 8008532:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008542:	3b01      	subs	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b04      	cmp	r3, #4
 8008564:	d118      	bne.n	8008598 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859c:	2b00      	cmp	r3, #0
 800859e:	f47f aec2 	bne.w	8008326 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	e000      	b.n	80085c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80085be:	2302      	movs	r3, #2
  }
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	00010004 	.word	0x00010004

080085cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	461a      	mov	r2, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	817b      	strh	r3, [r7, #10]
 80085de:	460b      	mov	r3, r1
 80085e0:	813b      	strh	r3, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f960 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00d      	beq.n	800862a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800861c:	d103      	bne.n	8008626 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008624:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e05f      	b.n	80086ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800862a:	897b      	ldrh	r3, [r7, #10]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008638:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	6a3a      	ldr	r2, [r7, #32]
 800863e:	492d      	ldr	r1, [pc, #180]	; (80086f4 <I2C_RequestMemoryWrite+0x128>)
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f998 	bl	8008976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e04c      	b.n	80086ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008668:	6a39      	ldr	r1, [r7, #32]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fa02 	bl	8008a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00d      	beq.n	8008692 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	2b04      	cmp	r3, #4
 800867c:	d107      	bne.n	800868e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e02b      	b.n	80086ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d105      	bne.n	80086a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008698:	893b      	ldrh	r3, [r7, #8]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	611a      	str	r2, [r3, #16]
 80086a2:	e021      	b.n	80086e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086a4:	893b      	ldrh	r3, [r7, #8]
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b4:	6a39      	ldr	r1, [r7, #32]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f9dc 	bl	8008a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d107      	bne.n	80086da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e005      	b.n	80086ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	00010002 	.word	0x00010002

080086f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	461a      	mov	r2, r3
 8008706:	4603      	mov	r3, r0
 8008708:	817b      	strh	r3, [r7, #10]
 800870a:	460b      	mov	r3, r1
 800870c:	813b      	strh	r3, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008720:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008730:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	2200      	movs	r2, #0
 800873a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 f8c2 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00d      	beq.n	8008766 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008758:	d103      	bne.n	8008762 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e0aa      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008766:	897b      	ldrh	r3, [r7, #10]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008774:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	6a3a      	ldr	r2, [r7, #32]
 800877a:	4952      	ldr	r1, [pc, #328]	; (80088c4 <I2C_RequestMemoryRead+0x1cc>)
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 f8fa 	bl	8008976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e097      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a4:	6a39      	ldr	r1, [r7, #32]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 f964 	bl	8008a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00d      	beq.n	80087ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d107      	bne.n	80087ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e076      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d105      	bne.n	80087e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087d4:	893b      	ldrh	r3, [r7, #8]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	611a      	str	r2, [r3, #16]
 80087de:	e021      	b.n	8008824 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087e0:	893b      	ldrh	r3, [r7, #8]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	6a39      	ldr	r1, [r7, #32]
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 f93e 	bl	8008a74 <I2C_WaitOnTXEFlagUntilTimeout>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00d      	beq.n	800881a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	2b04      	cmp	r3, #4
 8008804:	d107      	bne.n	8008816 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008814:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e050      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800881a:	893b      	ldrh	r3, [r7, #8]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008826:	6a39      	ldr	r1, [r7, #32]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f923 	bl	8008a74 <I2C_WaitOnTXEFlagUntilTimeout>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	2b04      	cmp	r3, #4
 800883a:	d107      	bne.n	800884c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800884a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e035      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800885e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	2200      	movs	r2, #0
 8008868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f82b 	bl	80088c8 <I2C_WaitOnFlagUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00d      	beq.n	8008894 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008886:	d103      	bne.n	8008890 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800888e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e013      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008894:	897b      	ldrh	r3, [r7, #10]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f043 0301 	orr.w	r3, r3, #1
 800889c:	b2da      	uxtb	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	6a3a      	ldr	r2, [r7, #32]
 80088a8:	4906      	ldr	r1, [pc, #24]	; (80088c4 <I2C_RequestMemoryRead+0x1cc>)
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 f863 	bl	8008976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	00010002 	.word	0x00010002

080088c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	4613      	mov	r3, r2
 80088d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088d8:	e025      	b.n	8008926 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d021      	beq.n	8008926 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e2:	f7fd fd01 	bl	80062e8 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d302      	bcc.n	80088f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d116      	bne.n	8008926 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f043 0220 	orr.w	r2, r3, #32
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e023      	b.n	800896e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	0c1b      	lsrs	r3, r3, #16
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10d      	bne.n	800894c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	43da      	mvns	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4013      	ands	r3, r2
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	bf0c      	ite	eq
 8008942:	2301      	moveq	r3, #1
 8008944:	2300      	movne	r3, #0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	e00c      	b.n	8008966 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	43da      	mvns	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	d0b6      	beq.n	80088da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
 8008982:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008984:	e051      	b.n	8008a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008994:	d123      	bne.n	80089de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f043 0204 	orr.w	r2, r3, #4
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e046      	b.n	8008a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e4:	d021      	beq.n	8008a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e6:	f7fd fc7f 	bl	80062e8 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d302      	bcc.n	80089fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d116      	bne.n	8008a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e020      	b.n	8008a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	0c1b      	lsrs	r3, r3, #16
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10c      	bne.n	8008a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	43da      	mvns	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bf14      	ite	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	2300      	moveq	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	e00b      	b.n	8008a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	43da      	mvns	r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bf14      	ite	ne
 8008a60:	2301      	movne	r3, #1
 8008a62:	2300      	moveq	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d18d      	bne.n	8008986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a80:	e02d      	b.n	8008ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f8ce 	bl	8008c24 <I2C_IsAcknowledgeFailed>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e02d      	b.n	8008aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d021      	beq.n	8008ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9a:	f7fd fc25 	bl	80062e8 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d302      	bcc.n	8008ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d116      	bne.n	8008ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e007      	b.n	8008aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae8:	2b80      	cmp	r3, #128	; 0x80
 8008aea:	d1ca      	bne.n	8008a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b02:	e02d      	b.n	8008b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f88d 	bl	8008c24 <I2C_IsAcknowledgeFailed>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e02d      	b.n	8008b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d021      	beq.n	8008b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b1c:	f7fd fbe4 	bl	80062e8 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d302      	bcc.n	8008b32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d116      	bne.n	8008b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	f043 0220 	orr.w	r2, r3, #32
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e007      	b.n	8008b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d1ca      	bne.n	8008b04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b84:	e042      	b.n	8008c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d119      	bne.n	8008bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f06f 0210 	mvn.w	r2, #16
 8008b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e029      	b.n	8008c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc8:	f7fd fb8e 	bl	80062e8 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d302      	bcc.n	8008bde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d116      	bne.n	8008c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	f043 0220 	orr.w	r2, r3, #32
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e007      	b.n	8008c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	d1b5      	bne.n	8008b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3a:	d11b      	bne.n	8008c74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	f043 0204 	orr.w	r2, r3, #4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008c96:	687b      	ldr	r3, [r7, #4]
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	420e0020 	.word	0x420e0020
 8008ca8:	40007000 	.word	0x40007000

08008cac <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8008cb6:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <HAL_PWREx_EnableBkUpReg+0x44>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cbc:	f7fd fb14 	bl	80062e8 <HAL_GetTick>
 8008cc0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8008cc2:	e009      	b.n	8008cd8 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8008cc4:	f7fd fb10 	bl	80062e8 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cd2:	d901      	bls.n	8008cd8 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e006      	b.n	8008ce6 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <HAL_PWREx_EnableBkUpReg+0x48>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d1ef      	bne.n	8008cc4 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	420e00a4 	.word	0x420e00a4
 8008cf4:	40007000 	.word	0x40007000

08008cf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d02:	2300      	movs	r3, #0
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4b20      	ldr	r3, [pc, #128]	; (8008d88 <HAL_PWREx_EnableOverDrive+0x90>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <HAL_PWREx_EnableOverDrive+0x90>)
 8008d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d10:	6413      	str	r3, [r2, #64]	; 0x40
 8008d12:	4b1d      	ldr	r3, [pc, #116]	; (8008d88 <HAL_PWREx_EnableOverDrive+0x90>)
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008d1e:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <HAL_PWREx_EnableOverDrive+0x94>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d24:	f7fd fae0 	bl	80062e8 <HAL_GetTick>
 8008d28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d2a:	e009      	b.n	8008d40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d2c:	f7fd fadc 	bl	80062e8 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d3a:	d901      	bls.n	8008d40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e01f      	b.n	8008d80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d40:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d4c:	d1ee      	bne.n	8008d2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d54:	f7fd fac8 	bl	80062e8 <HAL_GetTick>
 8008d58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d5a:	e009      	b.n	8008d70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d5c:	f7fd fac4 	bl	80062e8 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d6a:	d901      	bls.n	8008d70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e007      	b.n	8008d80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d7c:	d1ee      	bne.n	8008d5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	420e0040 	.word	0x420e0040
 8008d90:	40007000 	.word	0x40007000
 8008d94:	420e0044 	.word	0x420e0044

08008d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0cc      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dac:	4b68      	ldr	r3, [pc, #416]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d90c      	bls.n	8008dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b65      	ldr	r3, [pc, #404]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dc2:	4b63      	ldr	r3, [pc, #396]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0b8      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d020      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008dec:	4b59      	ldr	r3, [pc, #356]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	4a58      	ldr	r2, [pc, #352]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	4a52      	ldr	r2, [pc, #328]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e10:	4b50      	ldr	r3, [pc, #320]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	494d      	ldr	r1, [pc, #308]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d044      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d107      	bne.n	8008e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e36:	4b47      	ldr	r3, [pc, #284]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d119      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e07f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d003      	beq.n	8008e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d107      	bne.n	8008e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e56:	4b3f      	ldr	r3, [pc, #252]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e06f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e66:	4b3b      	ldr	r3, [pc, #236]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e067      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f023 0203 	bic.w	r2, r3, #3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	4934      	ldr	r1, [pc, #208]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e88:	f7fd fa2e 	bl	80062e8 <HAL_GetTick>
 8008e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e90:	f7fd fa2a 	bl	80062e8 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e04f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ea6:	4b2b      	ldr	r3, [pc, #172]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 020c 	and.w	r2, r3, #12
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d1eb      	bne.n	8008e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008eb8:	4b25      	ldr	r3, [pc, #148]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d20c      	bcs.n	8008ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec6:	4b22      	ldr	r3, [pc, #136]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d001      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e032      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eec:	4b19      	ldr	r3, [pc, #100]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4916      	ldr	r1, [pc, #88]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f0a:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	490e      	ldr	r1, [pc, #56]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f1e:	f000 fb7f 	bl	8009620 <HAL_RCC_GetSysClockFreq>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	490a      	ldr	r1, [pc, #40]	; (8008f58 <HAL_RCC_ClockConfig+0x1c0>)
 8008f30:	5ccb      	ldrb	r3, [r1, r3]
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	4a09      	ldr	r2, [pc, #36]	; (8008f5c <HAL_RCC_ClockConfig+0x1c4>)
 8008f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <HAL_RCC_ClockConfig+0x1c8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fd f98e 	bl	8006260 <HAL_InitTick>

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40023c00 	.word	0x40023c00
 8008f54:	40023800 	.word	0x40023800
 8008f58:	080129d8 	.word	0x080129d8
 8008f5c:	20000008 	.word	0x20000008
 8008f60:	2000000c 	.word	0x2000000c

08008f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000008 	.word	0x20000008

08008f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f80:	f7ff fff0 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	0a9b      	lsrs	r3, r3, #10
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	4903      	ldr	r1, [pc, #12]	; (8008fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	40023800 	.word	0x40023800
 8008fa0:	080129e8 	.word	0x080129e8

08008fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fa8:	f7ff ffdc 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008fac:	4602      	mov	r2, r0
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	0b5b      	lsrs	r3, r3, #13
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	4903      	ldr	r1, [pc, #12]	; (8008fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fba:	5ccb      	ldrb	r3, [r1, r3]
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	080129e8 	.word	0x080129e8

08008fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08c      	sub	sp, #48	; 0x30
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8009004:	4b6f      	ldr	r3, [pc, #444]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800900a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	496c      	ldr	r1, [pc, #432]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009014:	4313      	orrs	r3, r2
 8009016:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8009022:	2301      	movs	r3, #1
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8009032:	4b64      	ldr	r3, [pc, #400]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009038:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009040:	4960      	ldr	r1, [pc, #384]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009042:	4313      	orrs	r3, r2
 8009044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8009050:	2301      	movs	r3, #1
 8009052:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d017      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009060:	4b58      	ldr	r3, [pc, #352]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009066:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	4955      	ldr	r1, [pc, #340]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009070:	4313      	orrs	r3, r2
 8009072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907e:	d101      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8009080:	2301      	movs	r3, #1
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800908c:	2301      	movs	r3, #1
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0308 	and.w	r3, r3, #8
 8009098:	2b00      	cmp	r3, #0
 800909a:	d017      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800909c:	4b49      	ldr	r3, [pc, #292]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800909e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	4946      	ldr	r1, [pc, #280]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ba:	d101      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80090bc:	2301      	movs	r3, #1
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80090c8:	2301      	movs	r3, #1
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 808a 	beq.w	80091ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090da:	2300      	movs	r3, #0
 80090dc:	60bb      	str	r3, [r7, #8]
 80090de:	4b39      	ldr	r3, [pc, #228]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	4a38      	ldr	r2, [pc, #224]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e8:	6413      	str	r3, [r2, #64]	; 0x40
 80090ea:	4b36      	ldr	r3, [pc, #216]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f2:	60bb      	str	r3, [r7, #8]
 80090f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80090f6:	4b34      	ldr	r3, [pc, #208]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a33      	ldr	r2, [pc, #204]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80090fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009100:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009102:	f7fd f8f1 	bl	80062e8 <HAL_GetTick>
 8009106:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009108:	e008      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800910a:	f7fd f8ed 	bl	80062e8 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e278      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800911c:	4b2a      	ldr	r3, [pc, #168]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009128:	4b26      	ldr	r3, [pc, #152]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800912a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009130:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02f      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009140:	6a3a      	ldr	r2, [r7, #32]
 8009142:	429a      	cmp	r2, r3
 8009144:	d028      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009146:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800914e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009152:	2201      	movs	r2, #1
 8009154:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800915c:	4a19      	ldr	r2, [pc, #100]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009162:	4b18      	ldr	r3, [pc, #96]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b01      	cmp	r3, #1
 800916c:	d114      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800916e:	f7fd f8bb 	bl	80062e8 <HAL_GetTick>
 8009172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009174:	e00a      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009176:	f7fd f8b7 	bl	80062e8 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	f241 3288 	movw	r2, #5000	; 0x1388
 8009184:	4293      	cmp	r3, r2
 8009186:	d901      	bls.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e240      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800918c:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800918e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0ee      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a4:	d114      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80091a6:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ba:	4902      	ldr	r1, [pc, #8]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	608b      	str	r3, [r1, #8]
 80091c0:	e00c      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80091c2:	bf00      	nop
 80091c4:	40023800 	.word	0x40023800
 80091c8:	40007000 	.word	0x40007000
 80091cc:	42470e40 	.word	0x42470e40
 80091d0:	4b4a      	ldr	r3, [pc, #296]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	4a49      	ldr	r2, [pc, #292]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091da:	6093      	str	r3, [r2, #8]
 80091dc:	4b47      	ldr	r3, [pc, #284]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091e8:	4944      	ldr	r1, [pc, #272]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009200:	4b3f      	ldr	r3, [pc, #252]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8009202:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00a      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8009210:	4b3a      	ldr	r3, [pc, #232]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009216:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921e:	4937      	ldr	r1, [pc, #220]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009220:	4313      	orrs	r3, r2
 8009222:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009232:	4b32      	ldr	r3, [pc, #200]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009238:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009240:	492e      	ldr	r1, [pc, #184]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009242:	4313      	orrs	r3, r2
 8009244:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009250:	2b00      	cmp	r3, #0
 8009252:	d011      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009254:	4b29      	ldr	r3, [pc, #164]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800925a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	4926      	ldr	r1, [pc, #152]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009264:	4313      	orrs	r3, r2
 8009266:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009272:	d101      	bne.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009274:	2301      	movs	r3, #1
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009284:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800928a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009292:	491a      	ldr	r1, [pc, #104]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009294:	4313      	orrs	r3, r2
 8009296:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d011      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80092a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b4:	4911      	ldr	r1, [pc, #68]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c4:	d101      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80092c6:	2301      	movs	r3, #1
 80092c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80092ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d005      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d8:	f040 80ff 	bne.w	80094da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80092dc:	4b09      	ldr	r3, [pc, #36]	; (8009304 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092e2:	f7fd f801 	bl	80062e8 <HAL_GetTick>
 80092e6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092e8:	e00e      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80092ea:	f7fc fffd 	bl	80062e8 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d907      	bls.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e188      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80092fc:	40023800 	.word	0x40023800
 8009300:	424711e0 	.word	0x424711e0
 8009304:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009308:	4b7e      	ldr	r3, [pc, #504]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1ea      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009330:	2b00      	cmp	r3, #0
 8009332:	d028      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d124      	bne.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800933c:	4b71      	ldr	r3, [pc, #452]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800933e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009342:	0c1b      	lsrs	r3, r3, #16
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	3301      	adds	r3, #1
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800934e:	4b6d      	ldr	r3, [pc, #436]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009354:	0e1b      	lsrs	r3, r3, #24
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	019b      	lsls	r3, r3, #6
 8009366:	431a      	orrs	r2, r3
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	085b      	lsrs	r3, r3, #1
 800936c:	3b01      	subs	r3, #1
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	431a      	orrs	r2, r3
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	061b      	lsls	r3, r3, #24
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	071b      	lsls	r3, r3, #28
 800937e:	4961      	ldr	r1, [pc, #388]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009380:	4313      	orrs	r3, r2
 8009382:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939a:	d00a      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d035      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093b0:	d130      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80093b2:	4b54      	ldr	r3, [pc, #336]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	3301      	adds	r3, #1
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093c4:	4b4f      	ldr	r3, [pc, #316]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ca:	0f1b      	lsrs	r3, r3, #28
 80093cc:	f003 0307 	and.w	r3, r3, #7
 80093d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	019b      	lsls	r3, r3, #6
 80093dc:	431a      	orrs	r2, r3
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	3b01      	subs	r3, #1
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	431a      	orrs	r2, r3
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	071b      	lsls	r3, r3, #28
 80093f4:	4943      	ldr	r1, [pc, #268]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80093fc:	4b41      	ldr	r3, [pc, #260]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009402:	f023 021f 	bic.w	r2, r3, #31
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940a:	3b01      	subs	r3, #1
 800940c:	493d      	ldr	r1, [pc, #244]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800940e:	4313      	orrs	r3, r2
 8009410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800941c:	2b00      	cmp	r3, #0
 800941e:	d029      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009428:	d124      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800942a:	4b36      	ldr	r3, [pc, #216]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800942c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009430:	0c1b      	lsrs	r3, r3, #16
 8009432:	f003 0303 	and.w	r3, r3, #3
 8009436:	3301      	adds	r3, #1
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800943c:	4b31      	ldr	r3, [pc, #196]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800943e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009442:	0f1b      	lsrs	r3, r3, #28
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	019b      	lsls	r3, r3, #6
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	085b      	lsrs	r3, r3, #1
 800945c:	3b01      	subs	r3, #1
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	431a      	orrs	r2, r3
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	061b      	lsls	r3, r3, #24
 8009466:	431a      	orrs	r2, r3
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	071b      	lsls	r3, r3, #28
 800946c:	4925      	ldr	r1, [pc, #148]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947c:	2b00      	cmp	r3, #0
 800947e:	d016      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	019b      	lsls	r3, r3, #6
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	3b01      	subs	r3, #1
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	061b      	lsls	r3, r3, #24
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	071b      	lsls	r3, r3, #28
 80094a6:	4917      	ldr	r1, [pc, #92]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80094ae:	4b16      	ldr	r3, [pc, #88]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80094b0:	2201      	movs	r2, #1
 80094b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094b4:	f7fc ff18 	bl	80062e8 <HAL_GetTick>
 80094b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094ba:	e008      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80094bc:	f7fc ff14 	bl	80062e8 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d901      	bls.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e09f      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0f0      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	2b01      	cmp	r3, #1
 80094de:	f040 8095 	bne.w	800960c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80094e2:	4b0a      	ldr	r3, [pc, #40]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094e8:	f7fc fefe 	bl	80062e8 <HAL_GetTick>
 80094ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80094ee:	e00f      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80094f0:	f7fc fefa 	bl	80062e8 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d908      	bls.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e085      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009502:	bf00      	nop
 8009504:	40023800 	.word	0x40023800
 8009508:	42470068 	.word	0x42470068
 800950c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009510:	4b41      	ldr	r3, [pc, #260]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800951c:	d0e8      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800953a:	2b00      	cmp	r3, #0
 800953c:	d02b      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	2b00      	cmp	r3, #0
 8009544:	d127      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009546:	4b34      	ldr	r3, [pc, #208]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954c:	0c1b      	lsrs	r3, r3, #16
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	3301      	adds	r3, #1
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699a      	ldr	r2, [r3, #24]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	019b      	lsls	r3, r3, #6
 8009562:	431a      	orrs	r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	085b      	lsrs	r3, r3, #1
 8009568:	3b01      	subs	r3, #1
 800956a:	041b      	lsls	r3, r3, #16
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	061b      	lsls	r3, r3, #24
 8009574:	4928      	ldr	r1, [pc, #160]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009576:	4313      	orrs	r3, r2
 8009578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800957c:	4b26      	ldr	r3, [pc, #152]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800957e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009582:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	3b01      	subs	r3, #1
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	4922      	ldr	r1, [pc, #136]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009590:	4313      	orrs	r3, r2
 8009592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d01d      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x612>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095aa:	d118      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80095ac:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80095ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b2:	0e1b      	lsrs	r3, r3, #24
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	019b      	lsls	r3, r3, #6
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	3b01      	subs	r3, #1
 80095ce:	041b      	lsls	r3, r3, #16
 80095d0:	431a      	orrs	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	061b      	lsls	r3, r3, #24
 80095d6:	4910      	ldr	r1, [pc, #64]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80095de:	4b0f      	ldr	r3, [pc, #60]	; (800961c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095e4:	f7fc fe80 	bl	80062e8 <HAL_GetTick>
 80095e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095ea:	e008      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80095ec:	f7fc fe7c 	bl	80062e8 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d901      	bls.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e007      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095fe:	4b06      	ldr	r3, [pc, #24]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960a:	d1ef      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3730      	adds	r7, #48	; 0x30
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	40023800 	.word	0x40023800
 800961c:	42470070 	.word	0x42470070

08009620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009624:	b0ae      	sub	sp, #184	; 0xb8
 8009626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009646:	4bcb      	ldr	r3, [pc, #812]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 030c 	and.w	r3, r3, #12
 800964e:	2b0c      	cmp	r3, #12
 8009650:	f200 8206 	bhi.w	8009a60 <HAL_RCC_GetSysClockFreq+0x440>
 8009654:	a201      	add	r2, pc, #4	; (adr r2, 800965c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965a:	bf00      	nop
 800965c:	08009691 	.word	0x08009691
 8009660:	08009a61 	.word	0x08009a61
 8009664:	08009a61 	.word	0x08009a61
 8009668:	08009a61 	.word	0x08009a61
 800966c:	08009699 	.word	0x08009699
 8009670:	08009a61 	.word	0x08009a61
 8009674:	08009a61 	.word	0x08009a61
 8009678:	08009a61 	.word	0x08009a61
 800967c:	080096a1 	.word	0x080096a1
 8009680:	08009a61 	.word	0x08009a61
 8009684:	08009a61 	.word	0x08009a61
 8009688:	08009a61 	.word	0x08009a61
 800968c:	08009891 	.word	0x08009891
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009690:	4bb9      	ldr	r3, [pc, #740]	; (8009978 <HAL_RCC_GetSysClockFreq+0x358>)
 8009692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009696:	e1e7      	b.n	8009a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009698:	4bb8      	ldr	r3, [pc, #736]	; (800997c <HAL_RCC_GetSysClockFreq+0x35c>)
 800969a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800969e:	e1e3      	b.n	8009a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096a0:	4bb4      	ldr	r3, [pc, #720]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096ac:	4bb1      	ldr	r3, [pc, #708]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d071      	beq.n	800979c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096b8:	4bae      	ldr	r3, [pc, #696]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	099b      	lsrs	r3, r3, #6
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80096c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096de:	4622      	mov	r2, r4
 80096e0:	462b      	mov	r3, r5
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f04f 0100 	mov.w	r1, #0
 80096ea:	0159      	lsls	r1, r3, #5
 80096ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096f0:	0150      	lsls	r0, r2, #5
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4621      	mov	r1, r4
 80096f8:	1a51      	subs	r1, r2, r1
 80096fa:	6439      	str	r1, [r7, #64]	; 0x40
 80096fc:	4629      	mov	r1, r5
 80096fe:	eb63 0301 	sbc.w	r3, r3, r1
 8009702:	647b      	str	r3, [r7, #68]	; 0x44
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	f04f 0300 	mov.w	r3, #0
 800970c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009710:	4649      	mov	r1, r9
 8009712:	018b      	lsls	r3, r1, #6
 8009714:	4641      	mov	r1, r8
 8009716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800971a:	4641      	mov	r1, r8
 800971c:	018a      	lsls	r2, r1, #6
 800971e:	4641      	mov	r1, r8
 8009720:	1a51      	subs	r1, r2, r1
 8009722:	63b9      	str	r1, [r7, #56]	; 0x38
 8009724:	4649      	mov	r1, r9
 8009726:	eb63 0301 	sbc.w	r3, r3, r1
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009738:	4649      	mov	r1, r9
 800973a:	00cb      	lsls	r3, r1, #3
 800973c:	4641      	mov	r1, r8
 800973e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009742:	4641      	mov	r1, r8
 8009744:	00ca      	lsls	r2, r1, #3
 8009746:	4610      	mov	r0, r2
 8009748:	4619      	mov	r1, r3
 800974a:	4603      	mov	r3, r0
 800974c:	4622      	mov	r2, r4
 800974e:	189b      	adds	r3, r3, r2
 8009750:	633b      	str	r3, [r7, #48]	; 0x30
 8009752:	462b      	mov	r3, r5
 8009754:	460a      	mov	r2, r1
 8009756:	eb42 0303 	adc.w	r3, r2, r3
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009768:	4629      	mov	r1, r5
 800976a:	024b      	lsls	r3, r1, #9
 800976c:	4621      	mov	r1, r4
 800976e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009772:	4621      	mov	r1, r4
 8009774:	024a      	lsls	r2, r1, #9
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800977e:	2200      	movs	r2, #0
 8009780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009788:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800978c:	f7f7 fc0a 	bl	8000fa4 <__aeabi_uldivmod>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4613      	mov	r3, r2
 8009796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800979a:	e067      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800979c:	4b75      	ldr	r3, [pc, #468]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	099b      	lsrs	r3, r3, #6
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80097ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80097b6:	2300      	movs	r3, #0
 80097b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f04f 0100 	mov.w	r1, #0
 80097ca:	0159      	lsls	r1, r3, #5
 80097cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097d0:	0150      	lsls	r0, r2, #5
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4621      	mov	r1, r4
 80097d8:	1a51      	subs	r1, r2, r1
 80097da:	62b9      	str	r1, [r7, #40]	; 0x28
 80097dc:	4629      	mov	r1, r5
 80097de:	eb63 0301 	sbc.w	r3, r3, r1
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097e4:	f04f 0200 	mov.w	r2, #0
 80097e8:	f04f 0300 	mov.w	r3, #0
 80097ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80097f0:	4649      	mov	r1, r9
 80097f2:	018b      	lsls	r3, r1, #6
 80097f4:	4641      	mov	r1, r8
 80097f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80097fa:	4641      	mov	r1, r8
 80097fc:	018a      	lsls	r2, r1, #6
 80097fe:	4641      	mov	r1, r8
 8009800:	ebb2 0a01 	subs.w	sl, r2, r1
 8009804:	4649      	mov	r1, r9
 8009806:	eb63 0b01 	sbc.w	fp, r3, r1
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	f04f 0300 	mov.w	r3, #0
 8009812:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009816:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800981a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800981e:	4692      	mov	sl, r2
 8009820:	469b      	mov	fp, r3
 8009822:	4623      	mov	r3, r4
 8009824:	eb1a 0303 	adds.w	r3, sl, r3
 8009828:	623b      	str	r3, [r7, #32]
 800982a:	462b      	mov	r3, r5
 800982c:	eb4b 0303 	adc.w	r3, fp, r3
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800983e:	4629      	mov	r1, r5
 8009840:	028b      	lsls	r3, r1, #10
 8009842:	4621      	mov	r1, r4
 8009844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009848:	4621      	mov	r1, r4
 800984a:	028a      	lsls	r2, r1, #10
 800984c:	4610      	mov	r0, r2
 800984e:	4619      	mov	r1, r3
 8009850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009854:	2200      	movs	r2, #0
 8009856:	673b      	str	r3, [r7, #112]	; 0x70
 8009858:	677a      	str	r2, [r7, #116]	; 0x74
 800985a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800985e:	f7f7 fba1 	bl	8000fa4 <__aeabi_uldivmod>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4613      	mov	r3, r2
 8009868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800986c:	4b41      	ldr	r3, [pc, #260]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	3301      	adds	r3, #1
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800987e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009886:	fbb2 f3f3 	udiv	r3, r2, r3
 800988a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800988e:	e0eb      	b.n	8009a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009890:	4b38      	ldr	r3, [pc, #224]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800989c:	4b35      	ldr	r3, [pc, #212]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d06b      	beq.n	8009980 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098a8:	4b32      	ldr	r3, [pc, #200]	; (8009974 <HAL_RCC_GetSysClockFreq+0x354>)
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	099b      	lsrs	r3, r3, #6
 80098ae:	2200      	movs	r2, #0
 80098b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80098b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ba:	663b      	str	r3, [r7, #96]	; 0x60
 80098bc:	2300      	movs	r3, #0
 80098be:	667b      	str	r3, [r7, #100]	; 0x64
 80098c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80098c4:	4622      	mov	r2, r4
 80098c6:	462b      	mov	r3, r5
 80098c8:	f04f 0000 	mov.w	r0, #0
 80098cc:	f04f 0100 	mov.w	r1, #0
 80098d0:	0159      	lsls	r1, r3, #5
 80098d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098d6:	0150      	lsls	r0, r2, #5
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4621      	mov	r1, r4
 80098de:	1a51      	subs	r1, r2, r1
 80098e0:	61b9      	str	r1, [r7, #24]
 80098e2:	4629      	mov	r1, r5
 80098e4:	eb63 0301 	sbc.w	r3, r3, r1
 80098e8:	61fb      	str	r3, [r7, #28]
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80098f6:	4659      	mov	r1, fp
 80098f8:	018b      	lsls	r3, r1, #6
 80098fa:	4651      	mov	r1, sl
 80098fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009900:	4651      	mov	r1, sl
 8009902:	018a      	lsls	r2, r1, #6
 8009904:	4651      	mov	r1, sl
 8009906:	ebb2 0801 	subs.w	r8, r2, r1
 800990a:	4659      	mov	r1, fp
 800990c:	eb63 0901 	sbc.w	r9, r3, r1
 8009910:	f04f 0200 	mov.w	r2, #0
 8009914:	f04f 0300 	mov.w	r3, #0
 8009918:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800991c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009920:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009924:	4690      	mov	r8, r2
 8009926:	4699      	mov	r9, r3
 8009928:	4623      	mov	r3, r4
 800992a:	eb18 0303 	adds.w	r3, r8, r3
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	462b      	mov	r3, r5
 8009932:	eb49 0303 	adc.w	r3, r9, r3
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009944:	4629      	mov	r1, r5
 8009946:	024b      	lsls	r3, r1, #9
 8009948:	4621      	mov	r1, r4
 800994a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800994e:	4621      	mov	r1, r4
 8009950:	024a      	lsls	r2, r1, #9
 8009952:	4610      	mov	r0, r2
 8009954:	4619      	mov	r1, r3
 8009956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800995a:	2200      	movs	r2, #0
 800995c:	65bb      	str	r3, [r7, #88]	; 0x58
 800995e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009960:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009964:	f7f7 fb1e 	bl	8000fa4 <__aeabi_uldivmod>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4613      	mov	r3, r2
 800996e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009972:	e065      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x420>
 8009974:	40023800 	.word	0x40023800
 8009978:	00f42400 	.word	0x00f42400
 800997c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009980:	4b3d      	ldr	r3, [pc, #244]	; (8009a78 <HAL_RCC_GetSysClockFreq+0x458>)
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	099b      	lsrs	r3, r3, #6
 8009986:	2200      	movs	r2, #0
 8009988:	4618      	mov	r0, r3
 800998a:	4611      	mov	r1, r2
 800998c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009990:	653b      	str	r3, [r7, #80]	; 0x50
 8009992:	2300      	movs	r3, #0
 8009994:	657b      	str	r3, [r7, #84]	; 0x54
 8009996:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800999a:	4642      	mov	r2, r8
 800999c:	464b      	mov	r3, r9
 800999e:	f04f 0000 	mov.w	r0, #0
 80099a2:	f04f 0100 	mov.w	r1, #0
 80099a6:	0159      	lsls	r1, r3, #5
 80099a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80099ac:	0150      	lsls	r0, r2, #5
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4641      	mov	r1, r8
 80099b4:	1a51      	subs	r1, r2, r1
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4649      	mov	r1, r9
 80099ba:	eb63 0301 	sbc.w	r3, r3, r1
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80099cc:	4659      	mov	r1, fp
 80099ce:	018b      	lsls	r3, r1, #6
 80099d0:	4651      	mov	r1, sl
 80099d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80099d6:	4651      	mov	r1, sl
 80099d8:	018a      	lsls	r2, r1, #6
 80099da:	4651      	mov	r1, sl
 80099dc:	1a54      	subs	r4, r2, r1
 80099de:	4659      	mov	r1, fp
 80099e0:	eb63 0501 	sbc.w	r5, r3, r1
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	00eb      	lsls	r3, r5, #3
 80099ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099f2:	00e2      	lsls	r2, r4, #3
 80099f4:	4614      	mov	r4, r2
 80099f6:	461d      	mov	r5, r3
 80099f8:	4643      	mov	r3, r8
 80099fa:	18e3      	adds	r3, r4, r3
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	464b      	mov	r3, r9
 8009a00:	eb45 0303 	adc.w	r3, r5, r3
 8009a04:	607b      	str	r3, [r7, #4]
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	f04f 0300 	mov.w	r3, #0
 8009a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a12:	4629      	mov	r1, r5
 8009a14:	028b      	lsls	r3, r1, #10
 8009a16:	4621      	mov	r1, r4
 8009a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	028a      	lsls	r2, r1, #10
 8009a20:	4610      	mov	r0, r2
 8009a22:	4619      	mov	r1, r3
 8009a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a28:	2200      	movs	r2, #0
 8009a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009a2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a32:	f7f7 fab7 	bl	8000fa4 <__aeabi_uldivmod>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009a40:	4b0d      	ldr	r3, [pc, #52]	; (8009a78 <HAL_RCC_GetSysClockFreq+0x458>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	0f1b      	lsrs	r3, r3, #28
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8009a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009a5e:	e003      	b.n	8009a68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a60:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8009a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	37b8      	adds	r7, #184	; 0xb8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a76:	bf00      	nop
 8009a78:	40023800 	.word	0x40023800
 8009a7c:	00f42400 	.word	0x00f42400

08009a80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e28d      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8083 	beq.w	8009ba6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009aa0:	4b94      	ldr	r3, [pc, #592]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f003 030c 	and.w	r3, r3, #12
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d019      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009aac:	4b91      	ldr	r3, [pc, #580]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d106      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009ab8:	4b8e      	ldr	r3, [pc, #568]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ac4:	d00c      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ac6:	4b8b      	ldr	r3, [pc, #556]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009ace:	2b0c      	cmp	r3, #12
 8009ad0:	d112      	bne.n	8009af8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ad2:	4b88      	ldr	r3, [pc, #544]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ae0:	4b84      	ldr	r3, [pc, #528]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d05b      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x124>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d157      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e25a      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b00:	d106      	bne.n	8009b10 <HAL_RCC_OscConfig+0x90>
 8009b02:	4b7c      	ldr	r3, [pc, #496]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a7b      	ldr	r2, [pc, #492]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e01d      	b.n	8009b4c <HAL_RCC_OscConfig+0xcc>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b18:	d10c      	bne.n	8009b34 <HAL_RCC_OscConfig+0xb4>
 8009b1a:	4b76      	ldr	r3, [pc, #472]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a75      	ldr	r2, [pc, #468]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	4b73      	ldr	r3, [pc, #460]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a72      	ldr	r2, [pc, #456]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e00b      	b.n	8009b4c <HAL_RCC_OscConfig+0xcc>
 8009b34:	4b6f      	ldr	r3, [pc, #444]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a6e      	ldr	r2, [pc, #440]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	4b6c      	ldr	r3, [pc, #432]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a6b      	ldr	r2, [pc, #428]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d013      	beq.n	8009b7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b54:	f7fc fbc8 	bl	80062e8 <HAL_GetTick>
 8009b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b5a:	e008      	b.n	8009b6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b5c:	f7fc fbc4 	bl	80062e8 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b64      	cmp	r3, #100	; 0x64
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e21f      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b6e:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0f0      	beq.n	8009b5c <HAL_RCC_OscConfig+0xdc>
 8009b7a:	e014      	b.n	8009ba6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b7c:	f7fc fbb4 	bl	80062e8 <HAL_GetTick>
 8009b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b82:	e008      	b.n	8009b96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b84:	f7fc fbb0 	bl	80062e8 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d901      	bls.n	8009b96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e20b      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b96:	4b57      	ldr	r3, [pc, #348]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f0      	bne.n	8009b84 <HAL_RCC_OscConfig+0x104>
 8009ba2:	e000      	b.n	8009ba6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d06f      	beq.n	8009c92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009bb2:	4b50      	ldr	r3, [pc, #320]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 030c 	and.w	r3, r3, #12
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d017      	beq.n	8009bee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009bbe:	4b4d      	ldr	r3, [pc, #308]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	d105      	bne.n	8009bd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009bca:	4b4a      	ldr	r3, [pc, #296]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bd6:	4b47      	ldr	r3, [pc, #284]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009bde:	2b0c      	cmp	r3, #12
 8009be0:	d11c      	bne.n	8009c1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009be2:	4b44      	ldr	r3, [pc, #272]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d116      	bne.n	8009c1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bee:	4b41      	ldr	r3, [pc, #260]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d005      	beq.n	8009c06 <HAL_RCC_OscConfig+0x186>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d001      	beq.n	8009c06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e1d3      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c06:	4b3b      	ldr	r3, [pc, #236]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	4937      	ldr	r1, [pc, #220]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c1a:	e03a      	b.n	8009c92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d020      	beq.n	8009c66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c24:	4b34      	ldr	r3, [pc, #208]	; (8009cf8 <HAL_RCC_OscConfig+0x278>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2a:	f7fc fb5d 	bl	80062e8 <HAL_GetTick>
 8009c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c30:	e008      	b.n	8009c44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c32:	f7fc fb59 	bl	80062e8 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d901      	bls.n	8009c44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e1b4      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c44:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0f0      	beq.n	8009c32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4925      	ldr	r1, [pc, #148]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	600b      	str	r3, [r1, #0]
 8009c64:	e015      	b.n	8009c92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c66:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <HAL_RCC_OscConfig+0x278>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6c:	f7fc fb3c 	bl	80062e8 <HAL_GetTick>
 8009c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c74:	f7fc fb38 	bl	80062e8 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e193      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c86:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f0      	bne.n	8009c74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d036      	beq.n	8009d0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d016      	beq.n	8009cd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ca6:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <HAL_RCC_OscConfig+0x27c>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cac:	f7fc fb1c 	bl	80062e8 <HAL_GetTick>
 8009cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cb4:	f7fc fb18 	bl	80062e8 <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d901      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e173      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <HAL_RCC_OscConfig+0x274>)
 8009cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0f0      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x234>
 8009cd2:	e01b      	b.n	8009d0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cd4:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <HAL_RCC_OscConfig+0x27c>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cda:	f7fc fb05 	bl	80062e8 <HAL_GetTick>
 8009cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ce0:	e00e      	b.n	8009d00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ce2:	f7fc fb01 	bl	80062e8 <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d907      	bls.n	8009d00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e15c      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	42470000 	.word	0x42470000
 8009cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d00:	4b8a      	ldr	r3, [pc, #552]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d04:	f003 0302 	and.w	r3, r3, #2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1ea      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 8097 	beq.w	8009e48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d1e:	4b83      	ldr	r3, [pc, #524]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10f      	bne.n	8009d4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60bb      	str	r3, [r7, #8]
 8009d2e:	4b7f      	ldr	r3, [pc, #508]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	4a7e      	ldr	r2, [pc, #504]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d38:	6413      	str	r3, [r2, #64]	; 0x40
 8009d3a:	4b7c      	ldr	r3, [pc, #496]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d42:	60bb      	str	r3, [r7, #8]
 8009d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d46:	2301      	movs	r3, #1
 8009d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d4a:	4b79      	ldr	r3, [pc, #484]	; (8009f30 <HAL_RCC_OscConfig+0x4b0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d118      	bne.n	8009d88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d56:	4b76      	ldr	r3, [pc, #472]	; (8009f30 <HAL_RCC_OscConfig+0x4b0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a75      	ldr	r2, [pc, #468]	; (8009f30 <HAL_RCC_OscConfig+0x4b0>)
 8009d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d62:	f7fc fac1 	bl	80062e8 <HAL_GetTick>
 8009d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d68:	e008      	b.n	8009d7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d6a:	f7fc fabd 	bl	80062e8 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d901      	bls.n	8009d7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e118      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d7c:	4b6c      	ldr	r3, [pc, #432]	; (8009f30 <HAL_RCC_OscConfig+0x4b0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0f0      	beq.n	8009d6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d106      	bne.n	8009d9e <HAL_RCC_OscConfig+0x31e>
 8009d90:	4b66      	ldr	r3, [pc, #408]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d94:	4a65      	ldr	r2, [pc, #404]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009d96:	f043 0301 	orr.w	r3, r3, #1
 8009d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d9c:	e01c      	b.n	8009dd8 <HAL_RCC_OscConfig+0x358>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	d10c      	bne.n	8009dc0 <HAL_RCC_OscConfig+0x340>
 8009da6:	4b61      	ldr	r3, [pc, #388]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009daa:	4a60      	ldr	r2, [pc, #384]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009dac:	f043 0304 	orr.w	r3, r3, #4
 8009db0:	6713      	str	r3, [r2, #112]	; 0x70
 8009db2:	4b5e      	ldr	r3, [pc, #376]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db6:	4a5d      	ldr	r2, [pc, #372]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009db8:	f043 0301 	orr.w	r3, r3, #1
 8009dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8009dbe:	e00b      	b.n	8009dd8 <HAL_RCC_OscConfig+0x358>
 8009dc0:	4b5a      	ldr	r3, [pc, #360]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	4a59      	ldr	r2, [pc, #356]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	6713      	str	r3, [r2, #112]	; 0x70
 8009dcc:	4b57      	ldr	r3, [pc, #348]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd0:	4a56      	ldr	r2, [pc, #344]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009dd2:	f023 0304 	bic.w	r3, r3, #4
 8009dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d015      	beq.n	8009e0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de0:	f7fc fa82 	bl	80062e8 <HAL_GetTick>
 8009de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009de6:	e00a      	b.n	8009dfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009de8:	f7fc fa7e 	bl	80062e8 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d901      	bls.n	8009dfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e0d7      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dfe:	4b4b      	ldr	r3, [pc, #300]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0ee      	beq.n	8009de8 <HAL_RCC_OscConfig+0x368>
 8009e0a:	e014      	b.n	8009e36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e0c:	f7fc fa6c 	bl	80062e8 <HAL_GetTick>
 8009e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e12:	e00a      	b.n	8009e2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e14:	f7fc fa68 	bl	80062e8 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e0c1      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e2a:	4b40      	ldr	r3, [pc, #256]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1ee      	bne.n	8009e14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d105      	bne.n	8009e48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e3c:	4b3b      	ldr	r3, [pc, #236]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	4a3a      	ldr	r2, [pc, #232]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80ad 	beq.w	8009fac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e52:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f003 030c 	and.w	r3, r3, #12
 8009e5a:	2b08      	cmp	r3, #8
 8009e5c:	d060      	beq.n	8009f20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d145      	bne.n	8009ef2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e66:	4b33      	ldr	r3, [pc, #204]	; (8009f34 <HAL_RCC_OscConfig+0x4b4>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e6c:	f7fc fa3c 	bl	80062e8 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e74:	f7fc fa38 	bl	80062e8 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e093      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e86:	4b29      	ldr	r3, [pc, #164]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f0      	bne.n	8009e74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	69da      	ldr	r2, [r3, #28]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	019b      	lsls	r3, r3, #6
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea8:	085b      	lsrs	r3, r3, #1
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	061b      	lsls	r3, r3, #24
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebc:	071b      	lsls	r3, r3, #28
 8009ebe:	491b      	ldr	r1, [pc, #108]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ec4:	4b1b      	ldr	r3, [pc, #108]	; (8009f34 <HAL_RCC_OscConfig+0x4b4>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eca:	f7fc fa0d 	bl	80062e8 <HAL_GetTick>
 8009ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ed0:	e008      	b.n	8009ee4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed2:	f7fc fa09 	bl	80062e8 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e064      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ee4:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x452>
 8009ef0:	e05c      	b.n	8009fac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef2:	4b10      	ldr	r3, [pc, #64]	; (8009f34 <HAL_RCC_OscConfig+0x4b4>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef8:	f7fc f9f6 	bl	80062e8 <HAL_GetTick>
 8009efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009efe:	e008      	b.n	8009f12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f00:	f7fc f9f2 	bl	80062e8 <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e04d      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <HAL_RCC_OscConfig+0x4ac>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f0      	bne.n	8009f00 <HAL_RCC_OscConfig+0x480>
 8009f1e:	e045      	b.n	8009fac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d107      	bne.n	8009f38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e040      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
 8009f2c:	40023800 	.word	0x40023800
 8009f30:	40007000 	.word	0x40007000
 8009f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f38:	4b1f      	ldr	r3, [pc, #124]	; (8009fb8 <HAL_RCC_OscConfig+0x538>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d030      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d129      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d122      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f68:	4013      	ands	r3, r2
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d119      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	3b01      	subs	r3, #1
 8009f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d10f      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d107      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d001      	beq.n	8009fac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e000      	b.n	8009fae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40023800 	.word	0x40023800

08009fbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e066      	b.n	800a0a0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7f5b      	ldrb	r3, [r3, #29]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d105      	bne.n	8009fe8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7fb fa54 	bl	8005490 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	22ca      	movs	r2, #202	; 0xca
 8009ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2253      	movs	r2, #83	; 0x53
 8009ffc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f927 	bl	800a252 <RTC_EnterInitMode>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d12c      	bne.n	800a068 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a020:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6899      	ldr	r1, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	431a      	orrs	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	431a      	orrs	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68d2      	ldr	r2, [r2, #12]
 800a048:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6919      	ldr	r1, [r3, #16]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	041a      	lsls	r2, r3, #16
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f92e 	bl	800a2c0 <RTC_ExitInitMode>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d113      	bne.n	800a096 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a07c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	699a      	ldr	r2, [r3, #24]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	430a      	orrs	r2, r1
 800a08e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	22ff      	movs	r2, #255	; 0xff
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a0da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a0de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	0c1b      	lsrs	r3, r3, #16
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	0a1b      	lsrs	r3, r3, #8
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	0d9b      	lsrs	r3, r3, #22
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d11a      	bne.n	800a15a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 f8ee 	bl	800a30a <RTC_Bcd2ToByte>
 800a12e:	4603      	mov	r3, r0
 800a130:	461a      	mov	r2, r3
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 f8e5 	bl	800a30a <RTC_Bcd2ToByte>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	789b      	ldrb	r3, [r3, #2]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 f8dc 	bl	800a30a <RTC_Bcd2ToByte>
 800a152:	4603      	mov	r3, r0
 800a154:	461a      	mov	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a17e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a182:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	0c1b      	lsrs	r3, r3, #16
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	0a1b      	lsrs	r3, r3, #8
 800a192:	b2db      	uxtb	r3, r3
 800a194:	f003 031f 	and.w	r3, r3, #31
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	0b5b      	lsrs	r3, r3, #13
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d11a      	bne.n	800a1f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	78db      	ldrb	r3, [r3, #3]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f89f 	bl	800a30a <RTC_Bcd2ToByte>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	785b      	ldrb	r3, [r3, #1]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 f896 	bl	800a30a <RTC_Bcd2ToByte>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	789b      	ldrb	r3, [r3, #2]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f88d 	bl	800a30a <RTC_Bcd2ToByte>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a21c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a21e:	f7fc f863 	bl	80062e8 <HAL_GetTick>
 800a222:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a224:	e009      	b.n	800a23a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a226:	f7fc f85f 	bl	80062e8 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a234:	d901      	bls.n	800a23a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e007      	b.n	800a24a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ee      	beq.n	800a226 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d122      	bne.n	800a2b6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a27e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a280:	f7fc f832 	bl	80062e8 <HAL_GetTick>
 800a284:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a286:	e00c      	b.n	800a2a2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a288:	f7fc f82e 	bl	80062e8 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a296:	d904      	bls.n	800a2a2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2204      	movs	r2, #4
 800a29c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d102      	bne.n	800a2b6 <RTC_EnterInitMode+0x64>
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d1e8      	bne.n	800a288 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68da      	ldr	r2, [r3, #12]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 0320 	and.w	r3, r3, #32
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10a      	bne.n	800a300 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff ff89 	bl	800a202 <HAL_RTC_WaitForSynchro>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d004      	beq.n	800a300 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2204      	movs	r2, #4
 800a2fa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a300:	7bfb      	ldrb	r3, [r7, #15]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b085      	sub	sp, #20
 800a30e:	af00      	add	r7, sp, #0
 800a310:	4603      	mov	r3, r0
 800a312:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	461a      	mov	r2, r3
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	4413      	add	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4413      	add	r3, r2
 800a334:	b2db      	uxtb	r3, r3
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a342:	b480      	push	{r7}
 800a344:	b087      	sub	sp, #28
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	60b9      	str	r1, [r7, #8]
 800a34c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3350      	adds	r3, #80	; 0x50
 800a358:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	4413      	add	r3, r2
 800a362:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
}
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3350      	adds	r3, #80	; 0x50
 800a38a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	4413      	add	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e03f      	b.n	800a438 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d106      	bne.n	800a3d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7fb f889 	bl	80054e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2224      	movs	r2, #36	; 0x24
 800a3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 f87c 	bl	800b4e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	695a      	ldr	r2, [r3, #20]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a40e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a41e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2220      	movs	r2, #32
 800a42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2220      	movs	r2, #32
 800a432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e021      	b.n	800a496 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2224      	movs	r2, #36	; 0x24
 800a456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a468:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7fb f9d2 	bl	8005814 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b08a      	sub	sp, #40	; 0x28
 800a4a2:	af02      	add	r7, sp, #8
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	603b      	str	r3, [r7, #0]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d17c      	bne.n	800a5b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <HAL_UART_Transmit+0x2c>
 800a4c4:	88fb      	ldrh	r3, [r7, #6]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e075      	b.n	800a5ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d101      	bne.n	800a4dc <HAL_UART_Transmit+0x3e>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e06e      	b.n	800a5ba <HAL_UART_Transmit+0x11c>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2221      	movs	r2, #33	; 0x21
 800a4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4f2:	f7fb fef9 	bl	80062e8 <HAL_GetTick>
 800a4f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	88fa      	ldrh	r2, [r7, #6]
 800a4fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	88fa      	ldrh	r2, [r7, #6]
 800a502:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50c:	d108      	bne.n	800a520 <HAL_UART_Transmit+0x82>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d104      	bne.n	800a520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	e003      	b.n	800a528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a530:	e02a      	b.n	800a588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2200      	movs	r2, #0
 800a53a:	2180      	movs	r1, #128	; 0x80
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fd04 	bl	800af4a <UART_WaitOnFlagUntilTimeout>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e036      	b.n	800a5ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10b      	bne.n	800a56a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	3302      	adds	r3, #2
 800a566:	61bb      	str	r3, [r7, #24]
 800a568:	e007      	b.n	800a57a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	781a      	ldrb	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1cf      	bne.n	800a532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2200      	movs	r2, #0
 800a59a:	2140      	movs	r1, #64	; 0x40
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f000 fcd4 	bl	800af4a <UART_WaitOnFlagUntilTimeout>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e006      	b.n	800a5ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	e000      	b.n	800a5ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a5b8:	2302      	movs	r3, #2
  }
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08c      	sub	sp, #48	; 0x30
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d165      	bne.n	800a6aa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <HAL_UART_Transmit_DMA+0x26>
 800a5e4:	88fb      	ldrh	r3, [r7, #6]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e05e      	b.n	800a6ac <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d101      	bne.n	800a5fc <HAL_UART_Transmit_DMA+0x38>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e057      	b.n	800a6ac <HAL_UART_Transmit_DMA+0xe8>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	88fa      	ldrh	r2, [r7, #6]
 800a60e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	88fa      	ldrh	r2, [r7, #6]
 800a614:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2221      	movs	r2, #33	; 0x21
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <HAL_UART_Transmit_DMA+0xf0>)
 800a62a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a630:	4a21      	ldr	r2, [pc, #132]	; (800a6b8 <HAL_UART_Transmit_DMA+0xf4>)
 800a632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a638:	4a20      	ldr	r2, [pc, #128]	; (800a6bc <HAL_UART_Transmit_DMA+0xf8>)
 800a63a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a640:	2200      	movs	r2, #0
 800a642:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a644:	f107 0308 	add.w	r3, r7, #8
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3304      	adds	r3, #4
 800a658:	461a      	mov	r2, r3
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	f7fc fcd4 	bl	8007008 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a668:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3314      	adds	r3, #20
 800a678:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	617b      	str	r3, [r7, #20]
   return(result);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a688:	62bb      	str	r3, [r7, #40]	; 0x28
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3314      	adds	r3, #20
 800a690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a692:	627a      	str	r2, [r7, #36]	; 0x24
 800a694:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6a39      	ldr	r1, [r7, #32]
 800a698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e000      	b.n	800a6ac <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a6aa:	2302      	movs	r3, #2
  }
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3730      	adds	r7, #48	; 0x30
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	0800aca5 	.word	0x0800aca5
 800a6b8:	0800ad3f 	.word	0x0800ad3f
 800a6bc:	0800aeb7 	.word	0x0800aeb7

0800a6c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	d11d      	bne.n	800a716 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <HAL_UART_Receive_DMA+0x26>
 800a6e0:	88fb      	ldrh	r3, [r7, #6]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e016      	b.n	800a718 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d101      	bne.n	800a6f8 <HAL_UART_Receive_DMA+0x38>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e00f      	b.n	800a718 <HAL_UART_Receive_DMA+0x58>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	461a      	mov	r2, r3
 800a70a:	68b9      	ldr	r1, [r7, #8]
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 fc8b 	bl	800b028 <UART_Start_Receive_DMA>
 800a712:	4603      	mov	r3, r0
 800a714:	e000      	b.n	800a718 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a716:	2302      	movs	r3, #2
  }
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b0ba      	sub	sp, #232	; 0xe8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a746:	2300      	movs	r3, #0
 800a748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a75e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10f      	bne.n	800a786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <HAL_UART_IRQHandler+0x66>
 800a772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fdf7 	bl	800b372 <UART_Receive_IT>
      return;
 800a784:	e256      	b.n	800ac34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80de 	beq.w	800a94c <HAL_UART_IRQHandler+0x22c>
 800a790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 80d1 	beq.w	800a94c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00b      	beq.n	800a7ce <HAL_UART_IRQHandler+0xae>
 800a7b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d005      	beq.n	800a7ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	f043 0201 	orr.w	r2, r3, #1
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00b      	beq.n	800a7f2 <HAL_UART_IRQHandler+0xd2>
 800a7da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	f043 0202 	orr.w	r2, r3, #2
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <HAL_UART_IRQHandler+0xf6>
 800a7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d005      	beq.n	800a816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	f043 0204 	orr.w	r2, r3, #4
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81a:	f003 0308 	and.w	r3, r3, #8
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d011      	beq.n	800a846 <HAL_UART_IRQHandler+0x126>
 800a822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a826:	f003 0320 	and.w	r3, r3, #32
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d105      	bne.n	800a83a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a82e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f043 0208 	orr.w	r2, r3, #8
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 81ed 	beq.w	800ac2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a854:	f003 0320 	and.w	r3, r3, #32
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d008      	beq.n	800a86e <HAL_UART_IRQHandler+0x14e>
 800a85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a860:	f003 0320 	and.w	r3, r3, #32
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fd82 	bl	800b372 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	bf0c      	ite	eq
 800a87c:	2301      	moveq	r3, #1
 800a87e:	2300      	movne	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f003 0308 	and.w	r3, r3, #8
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <HAL_UART_IRQHandler+0x17a>
 800a892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a896:	2b00      	cmp	r3, #0
 800a898:	d04f      	beq.n	800a93a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fc8a 	bl	800b1b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8aa:	2b40      	cmp	r3, #64	; 0x40
 800a8ac:	d141      	bne.n	800a932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3314      	adds	r3, #20
 800a8b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3314      	adds	r3, #20
 800a8d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a8de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a8e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a8f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1d9      	bne.n	800a8ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d013      	beq.n	800a92a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a906:	4a7d      	ldr	r2, [pc, #500]	; (800aafc <HAL_UART_IRQHandler+0x3dc>)
 800a908:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fc fc42 	bl	8007198 <HAL_DMA_Abort_IT>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d016      	beq.n	800a948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a924:	4610      	mov	r0, r2
 800a926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a928:	e00e      	b.n	800a948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f9a4 	bl	800ac78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a930:	e00a      	b.n	800a948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9a0 	bl	800ac78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a938:	e006      	b.n	800a948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f99c 	bl	800ac78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a946:	e170      	b.n	800ac2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a948:	bf00      	nop
    return;
 800a94a:	e16e      	b.n	800ac2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	2b01      	cmp	r3, #1
 800a952:	f040 814a 	bne.w	800abea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 8143 	beq.w	800abea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 813c 	beq.w	800abea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a972:	2300      	movs	r3, #0
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60bb      	str	r3, [r7, #8]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	60bb      	str	r3, [r7, #8]
 800a986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	f040 80b4 	bne.w	800ab00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8140 	beq.w	800ac2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	f080 8139 	bcs.w	800ac2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ce:	f000 8088 	beq.w	800aae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	330c      	adds	r3, #12
 800a9d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a9e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	330c      	adds	r3, #12
 800a9fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a9fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1d9      	bne.n	800a9d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3314      	adds	r3, #20
 800aa24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3314      	adds	r3, #20
 800aa3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa4e:	e841 2300 	strex	r3, r2, [r1]
 800aa52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1e1      	bne.n	800aa1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3314      	adds	r3, #20
 800aa60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e3      	bne.n	800aa5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	330c      	adds	r3, #12
 800aaa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab2:	f023 0310 	bic.w	r3, r3, #16
 800aab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	330c      	adds	r3, #12
 800aac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aac4:	65ba      	str	r2, [r7, #88]	; 0x58
 800aac6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aacc:	e841 2300 	strex	r3, r2, [r1]
 800aad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e3      	bne.n	800aaa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fc faeb 	bl	80070b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f8ca 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aaf8:	e099      	b.n	800ac2e <HAL_UART_IRQHandler+0x50e>
 800aafa:	bf00      	nop
 800aafc:	0800b27b 	.word	0x0800b27b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 808b 	beq.w	800ac32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ab1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 8086 	beq.w	800ac32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	330c      	adds	r3, #12
 800ab2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	330c      	adds	r3, #12
 800ab46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab4a:	647a      	str	r2, [r7, #68]	; 0x44
 800ab4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e3      	bne.n	800ab26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3314      	adds	r3, #20
 800ab64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	f023 0301 	bic.w	r3, r3, #1
 800ab74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3314      	adds	r3, #20
 800ab7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab82:	633a      	str	r2, [r7, #48]	; 0x30
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e3      	bne.n	800ab5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	330c      	adds	r3, #12
 800abaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0310 	bic.w	r3, r3, #16
 800abba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	330c      	adds	r3, #12
 800abc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800abc8:	61fa      	str	r2, [r7, #28]
 800abca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	69b9      	ldr	r1, [r7, #24]
 800abce:	69fa      	ldr	r2, [r7, #28]
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	617b      	str	r3, [r7, #20]
   return(result);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e3      	bne.n	800aba4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f852 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abe8:	e023      	b.n	800ac32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800abea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d009      	beq.n	800ac0a <HAL_UART_IRQHandler+0x4ea>
 800abf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fb4d 	bl	800b2a2 <UART_Transmit_IT>
    return;
 800ac08:	e014      	b.n	800ac34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00e      	beq.n	800ac34 <HAL_UART_IRQHandler+0x514>
 800ac16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d008      	beq.n	800ac34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fb8d 	bl	800b342 <UART_EndTransmit_IT>
    return;
 800ac28:	e004      	b.n	800ac34 <HAL_UART_IRQHandler+0x514>
    return;
 800ac2a:	bf00      	nop
 800ac2c:	e002      	b.n	800ac34 <HAL_UART_IRQHandler+0x514>
      return;
 800ac2e:	bf00      	nop
 800ac30:	e000      	b.n	800ac34 <HAL_UART_IRQHandler+0x514>
      return;
 800ac32:	bf00      	nop
  }
}
 800ac34:	37e8      	adds	r7, #232	; 0xe8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop

0800ac3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b090      	sub	sp, #64	; 0x40
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d137      	bne.n	800ad30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800acc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc2:	2200      	movs	r2, #0
 800acc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3314      	adds	r3, #20
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	e853 3f00 	ldrex	r3, [r3]
 800acd4:	623b      	str	r3, [r7, #32]
   return(result);
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800acde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3314      	adds	r3, #20
 800ace4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ace6:	633a      	str	r2, [r7, #48]	; 0x30
 800ace8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acee:	e841 2300 	strex	r3, r2, [r1]
 800acf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e5      	bne.n	800acc6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	330c      	adds	r3, #12
 800ad00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad10:	637b      	str	r3, [r7, #52]	; 0x34
 800ad12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	330c      	adds	r3, #12
 800ad18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad1a:	61fa      	str	r2, [r7, #28]
 800ad1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1e:	69b9      	ldr	r1, [r7, #24]
 800ad20:	69fa      	ldr	r2, [r7, #28]
 800ad22:	e841 2300 	strex	r3, r2, [r1]
 800ad26:	617b      	str	r3, [r7, #20]
   return(result);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e5      	bne.n	800acfa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad2e:	e002      	b.n	800ad36 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ad30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ad32:	f7ff ff83 	bl	800ac3c <HAL_UART_TxCpltCallback>
}
 800ad36:	bf00      	nop
 800ad38:	3740      	adds	r7, #64	; 0x40
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff ff7f 	bl	800ac50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b09c      	sub	sp, #112	; 0x70
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d172      	bne.n	800ae5c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ad76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad78:	2200      	movs	r2, #0
 800ad7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	330c      	adds	r3, #12
 800ad82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad86:	e853 3f00 	ldrex	r3, [r3]
 800ad8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	330c      	adds	r3, #12
 800ad9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad9c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ada2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e5      	bne.n	800ad7c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3314      	adds	r3, #20
 800adb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	667b      	str	r3, [r7, #100]	; 0x64
 800adc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3314      	adds	r3, #20
 800adce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800add0:	647a      	str	r2, [r7, #68]	; 0x44
 800add2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800add6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e5      	bne.n	800adb0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ade4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3314      	adds	r3, #20
 800adea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	623b      	str	r3, [r7, #32]
   return(result);
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adfa:	663b      	str	r3, [r7, #96]	; 0x60
 800adfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3314      	adds	r3, #20
 800ae02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae04:	633a      	str	r2, [r7, #48]	; 0x30
 800ae06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e5      	bne.n	800ade4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d119      	bne.n	800ae5c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0310 	bic.w	r3, r3, #16
 800ae3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	330c      	adds	r3, #12
 800ae46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae48:	61fa      	str	r2, [r7, #28]
 800ae4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	69b9      	ldr	r1, [r7, #24]
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	617b      	str	r3, [r7, #20]
   return(result);
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d106      	bne.n	800ae72 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae6c:	f7ff ff0e 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae70:	e002      	b.n	800ae78 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ae72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae74:	f7fa ff7e 	bl	8005d74 <HAL_UART_RxCpltCallback>
}
 800ae78:	bf00      	nop
 800ae7a:	3770      	adds	r7, #112	; 0x70
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d108      	bne.n	800aea8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae9a:	085b      	lsrs	r3, r3, #1
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f7ff fef3 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aea6:	e002      	b.n	800aeae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7ff fedb 	bl	800ac64 <HAL_UART_RxHalfCpltCallback>
}
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed2:	2b80      	cmp	r3, #128	; 0x80
 800aed4:	bf0c      	ite	eq
 800aed6:	2301      	moveq	r3, #1
 800aed8:	2300      	movne	r3, #0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b21      	cmp	r3, #33	; 0x21
 800aee8:	d108      	bne.n	800aefc <UART_DMAError+0x46>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2200      	movs	r2, #0
 800aef4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aef6:	68b8      	ldr	r0, [r7, #8]
 800aef8:	f000 f934 	bl	800b164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af06:	2b40      	cmp	r3, #64	; 0x40
 800af08:	bf0c      	ite	eq
 800af0a:	2301      	moveq	r3, #1
 800af0c:	2300      	movne	r3, #0
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b22      	cmp	r3, #34	; 0x22
 800af1c:	d108      	bne.n	800af30 <UART_DMAError+0x7a>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2200      	movs	r2, #0
 800af28:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800af2a:	68b8      	ldr	r0, [r7, #8]
 800af2c:	f000 f942 	bl	800b1b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af34:	f043 0210 	orr.w	r2, r3, #16
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af3c:	68b8      	ldr	r0, [r7, #8]
 800af3e:	f7ff fe9b 	bl	800ac78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b090      	sub	sp, #64	; 0x40
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	603b      	str	r3, [r7, #0]
 800af56:	4613      	mov	r3, r2
 800af58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af5a:	e050      	b.n	800affe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af62:	d04c      	beq.n	800affe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800af64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <UART_WaitOnFlagUntilTimeout+0x30>
 800af6a:	f7fb f9bd 	bl	80062e8 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af76:	429a      	cmp	r2, r3
 800af78:	d241      	bcs.n	800affe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	330c      	adds	r3, #12
 800af80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	e853 3f00 	ldrex	r3, [r3]
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	330c      	adds	r3, #12
 800af98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af9a:	637a      	str	r2, [r7, #52]	; 0x34
 800af9c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afa2:	e841 2300 	strex	r3, r2, [r1]
 800afa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e5      	bne.n	800af7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3314      	adds	r3, #20
 800afb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	613b      	str	r3, [r7, #16]
   return(result);
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f023 0301 	bic.w	r3, r3, #1
 800afc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3314      	adds	r3, #20
 800afcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afce:	623a      	str	r2, [r7, #32]
 800afd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	69f9      	ldr	r1, [r7, #28]
 800afd4:	6a3a      	ldr	r2, [r7, #32]
 800afd6:	e841 2300 	strex	r3, r2, [r1]
 800afda:	61bb      	str	r3, [r7, #24]
   return(result);
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e5      	bne.n	800afae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2220      	movs	r2, #32
 800afee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e00f      	b.n	800b01e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	4013      	ands	r3, r2
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	bf0c      	ite	eq
 800b00e:	2301      	moveq	r3, #1
 800b010:	2300      	movne	r3, #0
 800b012:	b2db      	uxtb	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d09f      	beq.n	800af5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3740      	adds	r7, #64	; 0x40
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b098      	sub	sp, #96	; 0x60
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4613      	mov	r3, r2
 800b034:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	88fa      	ldrh	r2, [r7, #6]
 800b040:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2222      	movs	r2, #34	; 0x22
 800b04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b054:	4a40      	ldr	r2, [pc, #256]	; (800b158 <UART_Start_Receive_DMA+0x130>)
 800b056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05c:	4a3f      	ldr	r2, [pc, #252]	; (800b15c <UART_Start_Receive_DMA+0x134>)
 800b05e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	4a3e      	ldr	r2, [pc, #248]	; (800b160 <UART_Start_Receive_DMA+0x138>)
 800b066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06c:	2200      	movs	r2, #0
 800b06e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b070:	f107 0308 	add.w	r3, r7, #8
 800b074:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3304      	adds	r3, #4
 800b080:	4619      	mov	r1, r3
 800b082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	f7fb ffbe 	bl	8007008 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b08c:	2300      	movs	r3, #0
 800b08e:	613b      	str	r3, [r7, #16]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d019      	beq.n	800b0e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	330c      	adds	r3, #12
 800b0b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b0d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b0d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e5      	bne.n	800b0b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3314      	adds	r3, #20
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	f043 0301 	orr.w	r3, r3, #1
 800b0fc:	657b      	str	r3, [r7, #84]	; 0x54
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3314      	adds	r3, #20
 800b104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b106:	63ba      	str	r2, [r7, #56]	; 0x38
 800b108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b10c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e5      	bne.n	800b0e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3314      	adds	r3, #20
 800b120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	617b      	str	r3, [r7, #20]
   return(result);
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b130:	653b      	str	r3, [r7, #80]	; 0x50
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3314      	adds	r3, #20
 800b138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b13a:	627a      	str	r2, [r7, #36]	; 0x24
 800b13c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	6a39      	ldr	r1, [r7, #32]
 800b140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b142:	e841 2300 	strex	r3, r2, [r1]
 800b146:	61fb      	str	r3, [r7, #28]
   return(result);
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1e5      	bne.n	800b11a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3760      	adds	r7, #96	; 0x60
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	0800ad5b 	.word	0x0800ad5b
 800b15c:	0800ae81 	.word	0x0800ae81
 800b160:	0800aeb7 	.word	0x0800aeb7

0800b164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b089      	sub	sp, #36	; 0x24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	330c      	adds	r3, #12
 800b18a:	69fa      	ldr	r2, [r7, #28]
 800b18c:	61ba      	str	r2, [r7, #24]
 800b18e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6979      	ldr	r1, [r7, #20]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	613b      	str	r3, [r7, #16]
   return(result);
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e5      	bne.n	800b16c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b1a8:	bf00      	nop
 800b1aa:	3724      	adds	r7, #36	; 0x24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b095      	sub	sp, #84	; 0x54
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	330c      	adds	r3, #12
 800b1da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1dc:	643a      	str	r2, [r7, #64]	; 0x40
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1e4:	e841 2300 	strex	r3, r2, [r1]
 800b1e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1e5      	bne.n	800b1bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3314      	adds	r3, #20
 800b1f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	f023 0301 	bic.w	r3, r3, #1
 800b206:	64bb      	str	r3, [r7, #72]	; 0x48
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3314      	adds	r3, #20
 800b20e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b210:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b218:	e841 2300 	strex	r3, r2, [r1]
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e5      	bne.n	800b1f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d119      	bne.n	800b260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	330c      	adds	r3, #12
 800b232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	e853 3f00 	ldrex	r3, [r3]
 800b23a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f023 0310 	bic.w	r3, r3, #16
 800b242:	647b      	str	r3, [r7, #68]	; 0x44
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	330c      	adds	r3, #12
 800b24a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b24c:	61ba      	str	r2, [r7, #24]
 800b24e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b250:	6979      	ldr	r1, [r7, #20]
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	e841 2300 	strex	r3, r2, [r1]
 800b258:	613b      	str	r3, [r7, #16]
   return(result);
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1e5      	bne.n	800b22c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b26e:	bf00      	nop
 800b270:	3754      	adds	r7, #84	; 0x54
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7ff fcef 	bl	800ac78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b29a:	bf00      	nop
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b21      	cmp	r3, #33	; 0x21
 800b2b4:	d13e      	bne.n	800b334 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2be:	d114      	bne.n	800b2ea <UART_Transmit_IT+0x48>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d110      	bne.n	800b2ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	1c9a      	adds	r2, r3, #2
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	621a      	str	r2, [r3, #32]
 800b2e8:	e008      	b.n	800b2fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	1c59      	adds	r1, r3, #1
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	6211      	str	r1, [r2, #32]
 800b2f4:	781a      	ldrb	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29b      	uxth	r3, r3
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	4619      	mov	r1, r3
 800b30a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10f      	bne.n	800b330 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68da      	ldr	r2, [r3, #12]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b31e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b32e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	e000      	b.n	800b336 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b334:	2302      	movs	r3, #2
  }
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b358:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff fc6a 	bl	800ac3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b08c      	sub	sp, #48	; 0x30
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b22      	cmp	r3, #34	; 0x22
 800b384:	f040 80ab 	bne.w	800b4de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b390:	d117      	bne.n	800b3c2 <UART_Receive_IT+0x50>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d113      	bne.n	800b3c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ba:	1c9a      	adds	r2, r3, #2
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28
 800b3c0:	e026      	b.n	800b410 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d4:	d007      	beq.n	800b3e6 <UART_Receive_IT+0x74>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <UART_Receive_IT+0x82>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	b2da      	uxtb	r2, r3
 800b3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f0:	701a      	strb	r2, [r3, #0]
 800b3f2:	e008      	b.n	800b406 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b400:	b2da      	uxtb	r2, r3
 800b402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b404:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b414:	b29b      	uxth	r3, r3
 800b416:	3b01      	subs	r3, #1
 800b418:	b29b      	uxth	r3, r3
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	4619      	mov	r1, r3
 800b41e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b420:	2b00      	cmp	r3, #0
 800b422:	d15a      	bne.n	800b4da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f022 0220 	bic.w	r2, r2, #32
 800b432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	695a      	ldr	r2, [r3, #20]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 0201 	bic.w	r2, r2, #1
 800b452:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	2b01      	cmp	r3, #1
 800b462:	d135      	bne.n	800b4d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	330c      	adds	r3, #12
 800b470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	613b      	str	r3, [r7, #16]
   return(result);
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f023 0310 	bic.w	r3, r3, #16
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	330c      	adds	r3, #12
 800b488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b48a:	623a      	str	r2, [r7, #32]
 800b48c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	69f9      	ldr	r1, [r7, #28]
 800b490:	6a3a      	ldr	r2, [r7, #32]
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	61bb      	str	r3, [r7, #24]
   return(result);
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e5      	bne.n	800b46a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0310 	and.w	r3, r3, #16
 800b4a8:	2b10      	cmp	r3, #16
 800b4aa:	d10a      	bne.n	800b4c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff fbdf 	bl	800ac8c <HAL_UARTEx_RxEventCallback>
 800b4ce:	e002      	b.n	800b4d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7fa fc4f 	bl	8005d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e002      	b.n	800b4e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e000      	b.n	800b4e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b4de:	2302      	movs	r3, #2
  }
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3730      	adds	r7, #48	; 0x30
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4ec:	b0c0      	sub	sp, #256	; 0x100
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b504:	68d9      	ldr	r1, [r3, #12]
 800b506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	ea40 0301 	orr.w	r3, r0, r1
 800b510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b516:	689a      	ldr	r2, [r3, #8]
 800b518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	431a      	orrs	r2, r3
 800b520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	431a      	orrs	r2, r3
 800b528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	4313      	orrs	r3, r2
 800b530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b540:	f021 010c 	bic.w	r1, r1, #12
 800b544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b54e:	430b      	orrs	r3, r1
 800b550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b55e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b562:	6999      	ldr	r1, [r3, #24]
 800b564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	ea40 0301 	orr.w	r3, r0, r1
 800b56e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	4b8f      	ldr	r3, [pc, #572]	; (800b7b4 <UART_SetConfig+0x2cc>)
 800b578:	429a      	cmp	r2, r3
 800b57a:	d005      	beq.n	800b588 <UART_SetConfig+0xa0>
 800b57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b8d      	ldr	r3, [pc, #564]	; (800b7b8 <UART_SetConfig+0x2d0>)
 800b584:	429a      	cmp	r2, r3
 800b586:	d104      	bne.n	800b592 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b588:	f7fd fd0c 	bl	8008fa4 <HAL_RCC_GetPCLK2Freq>
 800b58c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b590:	e003      	b.n	800b59a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b592:	f7fd fcf3 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
 800b596:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a4:	f040 810c 	bne.w	800b7c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b5a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b5b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b5ba:	4622      	mov	r2, r4
 800b5bc:	462b      	mov	r3, r5
 800b5be:	1891      	adds	r1, r2, r2
 800b5c0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b5c2:	415b      	adcs	r3, r3
 800b5c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	eb12 0801 	adds.w	r8, r2, r1
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	eb43 0901 	adc.w	r9, r3, r1
 800b5d6:	f04f 0200 	mov.w	r2, #0
 800b5da:	f04f 0300 	mov.w	r3, #0
 800b5de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b5e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b5e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b5ea:	4690      	mov	r8, r2
 800b5ec:	4699      	mov	r9, r3
 800b5ee:	4623      	mov	r3, r4
 800b5f0:	eb18 0303 	adds.w	r3, r8, r3
 800b5f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5f8:	462b      	mov	r3, r5
 800b5fa:	eb49 0303 	adc.w	r3, r9, r3
 800b5fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b60e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b612:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b616:	460b      	mov	r3, r1
 800b618:	18db      	adds	r3, r3, r3
 800b61a:	653b      	str	r3, [r7, #80]	; 0x50
 800b61c:	4613      	mov	r3, r2
 800b61e:	eb42 0303 	adc.w	r3, r2, r3
 800b622:	657b      	str	r3, [r7, #84]	; 0x54
 800b624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b628:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b62c:	f7f5 fcba 	bl	8000fa4 <__aeabi_uldivmod>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4b61      	ldr	r3, [pc, #388]	; (800b7bc <UART_SetConfig+0x2d4>)
 800b636:	fba3 2302 	umull	r2, r3, r3, r2
 800b63a:	095b      	lsrs	r3, r3, #5
 800b63c:	011c      	lsls	r4, r3, #4
 800b63e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b642:	2200      	movs	r2, #0
 800b644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b648:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b64c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	1891      	adds	r1, r2, r2
 800b656:	64b9      	str	r1, [r7, #72]	; 0x48
 800b658:	415b      	adcs	r3, r3
 800b65a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b65c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b660:	4641      	mov	r1, r8
 800b662:	eb12 0a01 	adds.w	sl, r2, r1
 800b666:	4649      	mov	r1, r9
 800b668:	eb43 0b01 	adc.w	fp, r3, r1
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b678:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b67c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b680:	4692      	mov	sl, r2
 800b682:	469b      	mov	fp, r3
 800b684:	4643      	mov	r3, r8
 800b686:	eb1a 0303 	adds.w	r3, sl, r3
 800b68a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b68e:	464b      	mov	r3, r9
 800b690:	eb4b 0303 	adc.w	r3, fp, r3
 800b694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b6a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	18db      	adds	r3, r3, r3
 800b6b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	eb42 0303 	adc.w	r3, r2, r3
 800b6b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b6ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b6be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b6c2:	f7f5 fc6f 	bl	8000fa4 <__aeabi_uldivmod>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4b3b      	ldr	r3, [pc, #236]	; (800b7bc <UART_SetConfig+0x2d4>)
 800b6ce:	fba3 2301 	umull	r2, r3, r3, r1
 800b6d2:	095b      	lsrs	r3, r3, #5
 800b6d4:	2264      	movs	r2, #100	; 0x64
 800b6d6:	fb02 f303 	mul.w	r3, r2, r3
 800b6da:	1acb      	subs	r3, r1, r3
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b6e2:	4b36      	ldr	r3, [pc, #216]	; (800b7bc <UART_SetConfig+0x2d4>)
 800b6e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b6e8:	095b      	lsrs	r3, r3, #5
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b6f0:	441c      	add	r4, r3
 800b6f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b700:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b704:	4642      	mov	r2, r8
 800b706:	464b      	mov	r3, r9
 800b708:	1891      	adds	r1, r2, r2
 800b70a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b70c:	415b      	adcs	r3, r3
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b714:	4641      	mov	r1, r8
 800b716:	1851      	adds	r1, r2, r1
 800b718:	6339      	str	r1, [r7, #48]	; 0x30
 800b71a:	4649      	mov	r1, r9
 800b71c:	414b      	adcs	r3, r1
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34
 800b720:	f04f 0200 	mov.w	r2, #0
 800b724:	f04f 0300 	mov.w	r3, #0
 800b728:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b72c:	4659      	mov	r1, fp
 800b72e:	00cb      	lsls	r3, r1, #3
 800b730:	4651      	mov	r1, sl
 800b732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b736:	4651      	mov	r1, sl
 800b738:	00ca      	lsls	r2, r1, #3
 800b73a:	4610      	mov	r0, r2
 800b73c:	4619      	mov	r1, r3
 800b73e:	4603      	mov	r3, r0
 800b740:	4642      	mov	r2, r8
 800b742:	189b      	adds	r3, r3, r2
 800b744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b748:	464b      	mov	r3, r9
 800b74a:	460a      	mov	r2, r1
 800b74c:	eb42 0303 	adc.w	r3, r2, r3
 800b750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b760:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b768:	460b      	mov	r3, r1
 800b76a:	18db      	adds	r3, r3, r3
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b76e:	4613      	mov	r3, r2
 800b770:	eb42 0303 	adc.w	r3, r2, r3
 800b774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b77a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b77e:	f7f5 fc11 	bl	8000fa4 <__aeabi_uldivmod>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <UART_SetConfig+0x2d4>)
 800b788:	fba3 1302 	umull	r1, r3, r3, r2
 800b78c:	095b      	lsrs	r3, r3, #5
 800b78e:	2164      	movs	r1, #100	; 0x64
 800b790:	fb01 f303 	mul.w	r3, r1, r3
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	3332      	adds	r3, #50	; 0x32
 800b79a:	4a08      	ldr	r2, [pc, #32]	; (800b7bc <UART_SetConfig+0x2d4>)
 800b79c:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a0:	095b      	lsrs	r3, r3, #5
 800b7a2:	f003 0207 	and.w	r2, r3, #7
 800b7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4422      	add	r2, r4
 800b7ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b7b0:	e105      	b.n	800b9be <UART_SetConfig+0x4d6>
 800b7b2:	bf00      	nop
 800b7b4:	40011000 	.word	0x40011000
 800b7b8:	40011400 	.word	0x40011400
 800b7bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b7ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b7d2:	4642      	mov	r2, r8
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	1891      	adds	r1, r2, r2
 800b7d8:	6239      	str	r1, [r7, #32]
 800b7da:	415b      	adcs	r3, r3
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b7e2:	4641      	mov	r1, r8
 800b7e4:	1854      	adds	r4, r2, r1
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	eb43 0501 	adc.w	r5, r3, r1
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	00eb      	lsls	r3, r5, #3
 800b7f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b7fa:	00e2      	lsls	r2, r4, #3
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	461d      	mov	r5, r3
 800b800:	4643      	mov	r3, r8
 800b802:	18e3      	adds	r3, r4, r3
 800b804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b808:	464b      	mov	r3, r9
 800b80a:	eb45 0303 	adc.w	r3, r5, r3
 800b80e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b81e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b822:	f04f 0200 	mov.w	r2, #0
 800b826:	f04f 0300 	mov.w	r3, #0
 800b82a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b82e:	4629      	mov	r1, r5
 800b830:	008b      	lsls	r3, r1, #2
 800b832:	4621      	mov	r1, r4
 800b834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b838:	4621      	mov	r1, r4
 800b83a:	008a      	lsls	r2, r1, #2
 800b83c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b840:	f7f5 fbb0 	bl	8000fa4 <__aeabi_uldivmod>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4b60      	ldr	r3, [pc, #384]	; (800b9cc <UART_SetConfig+0x4e4>)
 800b84a:	fba3 2302 	umull	r2, r3, r3, r2
 800b84e:	095b      	lsrs	r3, r3, #5
 800b850:	011c      	lsls	r4, r3, #4
 800b852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b856:	2200      	movs	r2, #0
 800b858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b85c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b860:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b864:	4642      	mov	r2, r8
 800b866:	464b      	mov	r3, r9
 800b868:	1891      	adds	r1, r2, r2
 800b86a:	61b9      	str	r1, [r7, #24]
 800b86c:	415b      	adcs	r3, r3
 800b86e:	61fb      	str	r3, [r7, #28]
 800b870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b874:	4641      	mov	r1, r8
 800b876:	1851      	adds	r1, r2, r1
 800b878:	6139      	str	r1, [r7, #16]
 800b87a:	4649      	mov	r1, r9
 800b87c:	414b      	adcs	r3, r1
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	f04f 0200 	mov.w	r2, #0
 800b884:	f04f 0300 	mov.w	r3, #0
 800b888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b88c:	4659      	mov	r1, fp
 800b88e:	00cb      	lsls	r3, r1, #3
 800b890:	4651      	mov	r1, sl
 800b892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b896:	4651      	mov	r1, sl
 800b898:	00ca      	lsls	r2, r1, #3
 800b89a:	4610      	mov	r0, r2
 800b89c:	4619      	mov	r1, r3
 800b89e:	4603      	mov	r3, r0
 800b8a0:	4642      	mov	r2, r8
 800b8a2:	189b      	adds	r3, r3, r2
 800b8a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8a8:	464b      	mov	r3, r9
 800b8aa:	460a      	mov	r2, r1
 800b8ac:	eb42 0303 	adc.w	r3, r2, r3
 800b8b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8be:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b8c0:	f04f 0200 	mov.w	r2, #0
 800b8c4:	f04f 0300 	mov.w	r3, #0
 800b8c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	008b      	lsls	r3, r1, #2
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8d6:	4641      	mov	r1, r8
 800b8d8:	008a      	lsls	r2, r1, #2
 800b8da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b8de:	f7f5 fb61 	bl	8000fa4 <__aeabi_uldivmod>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4b39      	ldr	r3, [pc, #228]	; (800b9cc <UART_SetConfig+0x4e4>)
 800b8e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b8ec:	095b      	lsrs	r3, r3, #5
 800b8ee:	2164      	movs	r1, #100	; 0x64
 800b8f0:	fb01 f303 	mul.w	r3, r1, r3
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	011b      	lsls	r3, r3, #4
 800b8f8:	3332      	adds	r3, #50	; 0x32
 800b8fa:	4a34      	ldr	r2, [pc, #208]	; (800b9cc <UART_SetConfig+0x4e4>)
 800b8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b900:	095b      	lsrs	r3, r3, #5
 800b902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b906:	441c      	add	r4, r3
 800b908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b90c:	2200      	movs	r2, #0
 800b90e:	673b      	str	r3, [r7, #112]	; 0x70
 800b910:	677a      	str	r2, [r7, #116]	; 0x74
 800b912:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b916:	4642      	mov	r2, r8
 800b918:	464b      	mov	r3, r9
 800b91a:	1891      	adds	r1, r2, r2
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	415b      	adcs	r3, r3
 800b920:	60fb      	str	r3, [r7, #12]
 800b922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b926:	4641      	mov	r1, r8
 800b928:	1851      	adds	r1, r2, r1
 800b92a:	6039      	str	r1, [r7, #0]
 800b92c:	4649      	mov	r1, r9
 800b92e:	414b      	adcs	r3, r1
 800b930:	607b      	str	r3, [r7, #4]
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b93e:	4659      	mov	r1, fp
 800b940:	00cb      	lsls	r3, r1, #3
 800b942:	4651      	mov	r1, sl
 800b944:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b948:	4651      	mov	r1, sl
 800b94a:	00ca      	lsls	r2, r1, #3
 800b94c:	4610      	mov	r0, r2
 800b94e:	4619      	mov	r1, r3
 800b950:	4603      	mov	r3, r0
 800b952:	4642      	mov	r2, r8
 800b954:	189b      	adds	r3, r3, r2
 800b956:	66bb      	str	r3, [r7, #104]	; 0x68
 800b958:	464b      	mov	r3, r9
 800b95a:	460a      	mov	r2, r1
 800b95c:	eb42 0303 	adc.w	r3, r2, r3
 800b960:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	663b      	str	r3, [r7, #96]	; 0x60
 800b96c:	667a      	str	r2, [r7, #100]	; 0x64
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	f04f 0300 	mov.w	r3, #0
 800b976:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b97a:	4649      	mov	r1, r9
 800b97c:	008b      	lsls	r3, r1, #2
 800b97e:	4641      	mov	r1, r8
 800b980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b984:	4641      	mov	r1, r8
 800b986:	008a      	lsls	r2, r1, #2
 800b988:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b98c:	f7f5 fb0a 	bl	8000fa4 <__aeabi_uldivmod>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4b0d      	ldr	r3, [pc, #52]	; (800b9cc <UART_SetConfig+0x4e4>)
 800b996:	fba3 1302 	umull	r1, r3, r3, r2
 800b99a:	095b      	lsrs	r3, r3, #5
 800b99c:	2164      	movs	r1, #100	; 0x64
 800b99e:	fb01 f303 	mul.w	r3, r1, r3
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	011b      	lsls	r3, r3, #4
 800b9a6:	3332      	adds	r3, #50	; 0x32
 800b9a8:	4a08      	ldr	r2, [pc, #32]	; (800b9cc <UART_SetConfig+0x4e4>)
 800b9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	f003 020f 	and.w	r2, r3, #15
 800b9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4422      	add	r2, r4
 800b9bc:	609a      	str	r2, [r3, #8]
}
 800b9be:	bf00      	nop
 800b9c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9ca:	bf00      	nop
 800b9cc:	51eb851f 	.word	0x51eb851f

0800b9d0 <__errno>:
 800b9d0:	4b01      	ldr	r3, [pc, #4]	; (800b9d8 <__errno+0x8>)
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	20000014 	.word	0x20000014

0800b9dc <__libc_init_array>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4d0d      	ldr	r5, [pc, #52]	; (800ba14 <__libc_init_array+0x38>)
 800b9e0:	4c0d      	ldr	r4, [pc, #52]	; (800ba18 <__libc_init_array+0x3c>)
 800b9e2:	1b64      	subs	r4, r4, r5
 800b9e4:	10a4      	asrs	r4, r4, #2
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	42a6      	cmp	r6, r4
 800b9ea:	d109      	bne.n	800ba00 <__libc_init_array+0x24>
 800b9ec:	4d0b      	ldr	r5, [pc, #44]	; (800ba1c <__libc_init_array+0x40>)
 800b9ee:	4c0c      	ldr	r4, [pc, #48]	; (800ba20 <__libc_init_array+0x44>)
 800b9f0:	f006 ff9c 	bl	801292c <_init>
 800b9f4:	1b64      	subs	r4, r4, r5
 800b9f6:	10a4      	asrs	r4, r4, #2
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	42a6      	cmp	r6, r4
 800b9fc:	d105      	bne.n	800ba0a <__libc_init_array+0x2e>
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba04:	4798      	blx	r3
 800ba06:	3601      	adds	r6, #1
 800ba08:	e7ee      	b.n	800b9e8 <__libc_init_array+0xc>
 800ba0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0e:	4798      	blx	r3
 800ba10:	3601      	adds	r6, #1
 800ba12:	e7f2      	b.n	800b9fa <__libc_init_array+0x1e>
 800ba14:	08012f60 	.word	0x08012f60
 800ba18:	08012f60 	.word	0x08012f60
 800ba1c:	08012f60 	.word	0x08012f60
 800ba20:	08012f64 	.word	0x08012f64

0800ba24 <memset>:
 800ba24:	4402      	add	r2, r0
 800ba26:	4603      	mov	r3, r0
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d100      	bne.n	800ba2e <memset+0xa>
 800ba2c:	4770      	bx	lr
 800ba2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba32:	e7f9      	b.n	800ba28 <memset+0x4>

0800ba34 <__cvt>:
 800ba34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	ec55 4b10 	vmov	r4, r5, d0
 800ba3c:	2d00      	cmp	r5, #0
 800ba3e:	460e      	mov	r6, r1
 800ba40:	4619      	mov	r1, r3
 800ba42:	462b      	mov	r3, r5
 800ba44:	bfbb      	ittet	lt
 800ba46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba4a:	461d      	movlt	r5, r3
 800ba4c:	2300      	movge	r3, #0
 800ba4e:	232d      	movlt	r3, #45	; 0x2d
 800ba50:	700b      	strb	r3, [r1, #0]
 800ba52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba58:	4691      	mov	r9, r2
 800ba5a:	f023 0820 	bic.w	r8, r3, #32
 800ba5e:	bfbc      	itt	lt
 800ba60:	4622      	movlt	r2, r4
 800ba62:	4614      	movlt	r4, r2
 800ba64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba68:	d005      	beq.n	800ba76 <__cvt+0x42>
 800ba6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba6e:	d100      	bne.n	800ba72 <__cvt+0x3e>
 800ba70:	3601      	adds	r6, #1
 800ba72:	2102      	movs	r1, #2
 800ba74:	e000      	b.n	800ba78 <__cvt+0x44>
 800ba76:	2103      	movs	r1, #3
 800ba78:	ab03      	add	r3, sp, #12
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	ab02      	add	r3, sp, #8
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	ec45 4b10 	vmov	d0, r4, r5
 800ba84:	4653      	mov	r3, sl
 800ba86:	4632      	mov	r2, r6
 800ba88:	f001 fe62 	bl	800d750 <_dtoa_r>
 800ba8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba90:	4607      	mov	r7, r0
 800ba92:	d102      	bne.n	800ba9a <__cvt+0x66>
 800ba94:	f019 0f01 	tst.w	r9, #1
 800ba98:	d022      	beq.n	800bae0 <__cvt+0xac>
 800ba9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba9e:	eb07 0906 	add.w	r9, r7, r6
 800baa2:	d110      	bne.n	800bac6 <__cvt+0x92>
 800baa4:	783b      	ldrb	r3, [r7, #0]
 800baa6:	2b30      	cmp	r3, #48	; 0x30
 800baa8:	d10a      	bne.n	800bac0 <__cvt+0x8c>
 800baaa:	2200      	movs	r2, #0
 800baac:	2300      	movs	r3, #0
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7f5 f839 	bl	8000b28 <__aeabi_dcmpeq>
 800bab6:	b918      	cbnz	r0, 800bac0 <__cvt+0x8c>
 800bab8:	f1c6 0601 	rsb	r6, r6, #1
 800babc:	f8ca 6000 	str.w	r6, [sl]
 800bac0:	f8da 3000 	ldr.w	r3, [sl]
 800bac4:	4499      	add	r9, r3
 800bac6:	2200      	movs	r2, #0
 800bac8:	2300      	movs	r3, #0
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	f7f5 f82b 	bl	8000b28 <__aeabi_dcmpeq>
 800bad2:	b108      	cbz	r0, 800bad8 <__cvt+0xa4>
 800bad4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bad8:	2230      	movs	r2, #48	; 0x30
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	454b      	cmp	r3, r9
 800bade:	d307      	bcc.n	800baf0 <__cvt+0xbc>
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bae4:	1bdb      	subs	r3, r3, r7
 800bae6:	4638      	mov	r0, r7
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	b004      	add	sp, #16
 800baec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf0:	1c59      	adds	r1, r3, #1
 800baf2:	9103      	str	r1, [sp, #12]
 800baf4:	701a      	strb	r2, [r3, #0]
 800baf6:	e7f0      	b.n	800bada <__cvt+0xa6>

0800baf8 <__exponent>:
 800baf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bafa:	4603      	mov	r3, r0
 800bafc:	2900      	cmp	r1, #0
 800bafe:	bfb8      	it	lt
 800bb00:	4249      	neglt	r1, r1
 800bb02:	f803 2b02 	strb.w	r2, [r3], #2
 800bb06:	bfb4      	ite	lt
 800bb08:	222d      	movlt	r2, #45	; 0x2d
 800bb0a:	222b      	movge	r2, #43	; 0x2b
 800bb0c:	2909      	cmp	r1, #9
 800bb0e:	7042      	strb	r2, [r0, #1]
 800bb10:	dd2a      	ble.n	800bb68 <__exponent+0x70>
 800bb12:	f10d 0407 	add.w	r4, sp, #7
 800bb16:	46a4      	mov	ip, r4
 800bb18:	270a      	movs	r7, #10
 800bb1a:	46a6      	mov	lr, r4
 800bb1c:	460a      	mov	r2, r1
 800bb1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb22:	fb07 1516 	mls	r5, r7, r6, r1
 800bb26:	3530      	adds	r5, #48	; 0x30
 800bb28:	2a63      	cmp	r2, #99	; 0x63
 800bb2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb32:	4631      	mov	r1, r6
 800bb34:	dcf1      	bgt.n	800bb1a <__exponent+0x22>
 800bb36:	3130      	adds	r1, #48	; 0x30
 800bb38:	f1ae 0502 	sub.w	r5, lr, #2
 800bb3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb40:	1c44      	adds	r4, r0, #1
 800bb42:	4629      	mov	r1, r5
 800bb44:	4561      	cmp	r1, ip
 800bb46:	d30a      	bcc.n	800bb5e <__exponent+0x66>
 800bb48:	f10d 0209 	add.w	r2, sp, #9
 800bb4c:	eba2 020e 	sub.w	r2, r2, lr
 800bb50:	4565      	cmp	r5, ip
 800bb52:	bf88      	it	hi
 800bb54:	2200      	movhi	r2, #0
 800bb56:	4413      	add	r3, r2
 800bb58:	1a18      	subs	r0, r3, r0
 800bb5a:	b003      	add	sp, #12
 800bb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb66:	e7ed      	b.n	800bb44 <__exponent+0x4c>
 800bb68:	2330      	movs	r3, #48	; 0x30
 800bb6a:	3130      	adds	r1, #48	; 0x30
 800bb6c:	7083      	strb	r3, [r0, #2]
 800bb6e:	70c1      	strb	r1, [r0, #3]
 800bb70:	1d03      	adds	r3, r0, #4
 800bb72:	e7f1      	b.n	800bb58 <__exponent+0x60>

0800bb74 <_printf_float>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	ed2d 8b02 	vpush	{d8}
 800bb7c:	b08d      	sub	sp, #52	; 0x34
 800bb7e:	460c      	mov	r4, r1
 800bb80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb84:	4616      	mov	r6, r2
 800bb86:	461f      	mov	r7, r3
 800bb88:	4605      	mov	r5, r0
 800bb8a:	f002 ff3f 	bl	800ea0c <_localeconv_r>
 800bb8e:	f8d0 a000 	ldr.w	sl, [r0]
 800bb92:	4650      	mov	r0, sl
 800bb94:	f7f4 fb46 	bl	8000224 <strlen>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	f8d8 3000 	ldr.w	r3, [r8]
 800bba4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bba8:	3307      	adds	r3, #7
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	f103 0208 	add.w	r2, r3, #8
 800bbb2:	f8c8 2000 	str.w	r2, [r8]
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bbbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bbc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bbc6:	9307      	str	r3, [sp, #28]
 800bbc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bbcc:	ee08 0a10 	vmov	s16, r0
 800bbd0:	4b9f      	ldr	r3, [pc, #636]	; (800be50 <_printf_float+0x2dc>)
 800bbd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbda:	f7f4 ffd7 	bl	8000b8c <__aeabi_dcmpun>
 800bbde:	bb88      	cbnz	r0, 800bc44 <_printf_float+0xd0>
 800bbe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbe4:	4b9a      	ldr	r3, [pc, #616]	; (800be50 <_printf_float+0x2dc>)
 800bbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbea:	f7f4 ffb1 	bl	8000b50 <__aeabi_dcmple>
 800bbee:	bb48      	cbnz	r0, 800bc44 <_printf_float+0xd0>
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	f7f4 ffa0 	bl	8000b3c <__aeabi_dcmplt>
 800bbfc:	b110      	cbz	r0, 800bc04 <_printf_float+0x90>
 800bbfe:	232d      	movs	r3, #45	; 0x2d
 800bc00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc04:	4b93      	ldr	r3, [pc, #588]	; (800be54 <_printf_float+0x2e0>)
 800bc06:	4894      	ldr	r0, [pc, #592]	; (800be58 <_printf_float+0x2e4>)
 800bc08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc0c:	bf94      	ite	ls
 800bc0e:	4698      	movls	r8, r3
 800bc10:	4680      	movhi	r8, r0
 800bc12:	2303      	movs	r3, #3
 800bc14:	6123      	str	r3, [r4, #16]
 800bc16:	9b05      	ldr	r3, [sp, #20]
 800bc18:	f023 0204 	bic.w	r2, r3, #4
 800bc1c:	6022      	str	r2, [r4, #0]
 800bc1e:	f04f 0900 	mov.w	r9, #0
 800bc22:	9700      	str	r7, [sp, #0]
 800bc24:	4633      	mov	r3, r6
 800bc26:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f000 f9d8 	bl	800bfe0 <_printf_common>
 800bc30:	3001      	adds	r0, #1
 800bc32:	f040 8090 	bne.w	800bd56 <_printf_float+0x1e2>
 800bc36:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3a:	b00d      	add	sp, #52	; 0x34
 800bc3c:	ecbd 8b02 	vpop	{d8}
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	4642      	mov	r2, r8
 800bc46:	464b      	mov	r3, r9
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	f7f4 ff9e 	bl	8000b8c <__aeabi_dcmpun>
 800bc50:	b140      	cbz	r0, 800bc64 <_printf_float+0xf0>
 800bc52:	464b      	mov	r3, r9
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	bfbc      	itt	lt
 800bc58:	232d      	movlt	r3, #45	; 0x2d
 800bc5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc5e:	487f      	ldr	r0, [pc, #508]	; (800be5c <_printf_float+0x2e8>)
 800bc60:	4b7f      	ldr	r3, [pc, #508]	; (800be60 <_printf_float+0x2ec>)
 800bc62:	e7d1      	b.n	800bc08 <_printf_float+0x94>
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc6a:	9206      	str	r2, [sp, #24]
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	d13f      	bne.n	800bcf0 <_printf_float+0x17c>
 800bc70:	2306      	movs	r3, #6
 800bc72:	6063      	str	r3, [r4, #4]
 800bc74:	9b05      	ldr	r3, [sp, #20]
 800bc76:	6861      	ldr	r1, [r4, #4]
 800bc78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9303      	str	r3, [sp, #12]
 800bc80:	ab0a      	add	r3, sp, #40	; 0x28
 800bc82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc86:	ab09      	add	r3, sp, #36	; 0x24
 800bc88:	ec49 8b10 	vmov	d0, r8, r9
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	6022      	str	r2, [r4, #0]
 800bc90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc94:	4628      	mov	r0, r5
 800bc96:	f7ff fecd 	bl	800ba34 <__cvt>
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc9e:	2b47      	cmp	r3, #71	; 0x47
 800bca0:	4680      	mov	r8, r0
 800bca2:	d108      	bne.n	800bcb6 <_printf_float+0x142>
 800bca4:	1cc8      	adds	r0, r1, #3
 800bca6:	db02      	blt.n	800bcae <_printf_float+0x13a>
 800bca8:	6863      	ldr	r3, [r4, #4]
 800bcaa:	4299      	cmp	r1, r3
 800bcac:	dd41      	ble.n	800bd32 <_printf_float+0x1be>
 800bcae:	f1ab 0b02 	sub.w	fp, fp, #2
 800bcb2:	fa5f fb8b 	uxtb.w	fp, fp
 800bcb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bcba:	d820      	bhi.n	800bcfe <_printf_float+0x18a>
 800bcbc:	3901      	subs	r1, #1
 800bcbe:	465a      	mov	r2, fp
 800bcc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bcc4:	9109      	str	r1, [sp, #36]	; 0x24
 800bcc6:	f7ff ff17 	bl	800baf8 <__exponent>
 800bcca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bccc:	1813      	adds	r3, r2, r0
 800bcce:	2a01      	cmp	r2, #1
 800bcd0:	4681      	mov	r9, r0
 800bcd2:	6123      	str	r3, [r4, #16]
 800bcd4:	dc02      	bgt.n	800bcdc <_printf_float+0x168>
 800bcd6:	6822      	ldr	r2, [r4, #0]
 800bcd8:	07d2      	lsls	r2, r2, #31
 800bcda:	d501      	bpl.n	800bce0 <_printf_float+0x16c>
 800bcdc:	3301      	adds	r3, #1
 800bcde:	6123      	str	r3, [r4, #16]
 800bce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d09c      	beq.n	800bc22 <_printf_float+0xae>
 800bce8:	232d      	movs	r3, #45	; 0x2d
 800bcea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcee:	e798      	b.n	800bc22 <_printf_float+0xae>
 800bcf0:	9a06      	ldr	r2, [sp, #24]
 800bcf2:	2a47      	cmp	r2, #71	; 0x47
 800bcf4:	d1be      	bne.n	800bc74 <_printf_float+0x100>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1bc      	bne.n	800bc74 <_printf_float+0x100>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e7b9      	b.n	800bc72 <_printf_float+0xfe>
 800bcfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd02:	d118      	bne.n	800bd36 <_printf_float+0x1c2>
 800bd04:	2900      	cmp	r1, #0
 800bd06:	6863      	ldr	r3, [r4, #4]
 800bd08:	dd0b      	ble.n	800bd22 <_printf_float+0x1ae>
 800bd0a:	6121      	str	r1, [r4, #16]
 800bd0c:	b913      	cbnz	r3, 800bd14 <_printf_float+0x1a0>
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	07d0      	lsls	r0, r2, #31
 800bd12:	d502      	bpl.n	800bd1a <_printf_float+0x1a6>
 800bd14:	3301      	adds	r3, #1
 800bd16:	440b      	add	r3, r1
 800bd18:	6123      	str	r3, [r4, #16]
 800bd1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd1c:	f04f 0900 	mov.w	r9, #0
 800bd20:	e7de      	b.n	800bce0 <_printf_float+0x16c>
 800bd22:	b913      	cbnz	r3, 800bd2a <_printf_float+0x1b6>
 800bd24:	6822      	ldr	r2, [r4, #0]
 800bd26:	07d2      	lsls	r2, r2, #31
 800bd28:	d501      	bpl.n	800bd2e <_printf_float+0x1ba>
 800bd2a:	3302      	adds	r3, #2
 800bd2c:	e7f4      	b.n	800bd18 <_printf_float+0x1a4>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e7f2      	b.n	800bd18 <_printf_float+0x1a4>
 800bd32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd38:	4299      	cmp	r1, r3
 800bd3a:	db05      	blt.n	800bd48 <_printf_float+0x1d4>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	6121      	str	r1, [r4, #16]
 800bd40:	07d8      	lsls	r0, r3, #31
 800bd42:	d5ea      	bpl.n	800bd1a <_printf_float+0x1a6>
 800bd44:	1c4b      	adds	r3, r1, #1
 800bd46:	e7e7      	b.n	800bd18 <_printf_float+0x1a4>
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	bfd4      	ite	le
 800bd4c:	f1c1 0202 	rsble	r2, r1, #2
 800bd50:	2201      	movgt	r2, #1
 800bd52:	4413      	add	r3, r2
 800bd54:	e7e0      	b.n	800bd18 <_printf_float+0x1a4>
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	055a      	lsls	r2, r3, #21
 800bd5a:	d407      	bmi.n	800bd6c <_printf_float+0x1f8>
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	4642      	mov	r2, r8
 800bd60:	4631      	mov	r1, r6
 800bd62:	4628      	mov	r0, r5
 800bd64:	47b8      	blx	r7
 800bd66:	3001      	adds	r0, #1
 800bd68:	d12c      	bne.n	800bdc4 <_printf_float+0x250>
 800bd6a:	e764      	b.n	800bc36 <_printf_float+0xc2>
 800bd6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd70:	f240 80e0 	bls.w	800bf34 <_printf_float+0x3c0>
 800bd74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f7f4 fed4 	bl	8000b28 <__aeabi_dcmpeq>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d034      	beq.n	800bdee <_printf_float+0x27a>
 800bd84:	4a37      	ldr	r2, [pc, #220]	; (800be64 <_printf_float+0x2f0>)
 800bd86:	2301      	movs	r3, #1
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b8      	blx	r7
 800bd8e:	3001      	adds	r0, #1
 800bd90:	f43f af51 	beq.w	800bc36 <_printf_float+0xc2>
 800bd94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	db02      	blt.n	800bda2 <_printf_float+0x22e>
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	07d8      	lsls	r0, r3, #31
 800bda0:	d510      	bpl.n	800bdc4 <_printf_float+0x250>
 800bda2:	ee18 3a10 	vmov	r3, s16
 800bda6:	4652      	mov	r2, sl
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f af41 	beq.w	800bc36 <_printf_float+0xc2>
 800bdb4:	f04f 0800 	mov.w	r8, #0
 800bdb8:	f104 091a 	add.w	r9, r4, #26
 800bdbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	4543      	cmp	r3, r8
 800bdc2:	dc09      	bgt.n	800bdd8 <_printf_float+0x264>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	079b      	lsls	r3, r3, #30
 800bdc8:	f100 8105 	bmi.w	800bfd6 <_printf_float+0x462>
 800bdcc:	68e0      	ldr	r0, [r4, #12]
 800bdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd0:	4298      	cmp	r0, r3
 800bdd2:	bfb8      	it	lt
 800bdd4:	4618      	movlt	r0, r3
 800bdd6:	e730      	b.n	800bc3a <_printf_float+0xc6>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	464a      	mov	r2, r9
 800bddc:	4631      	mov	r1, r6
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f af27 	beq.w	800bc36 <_printf_float+0xc2>
 800bde8:	f108 0801 	add.w	r8, r8, #1
 800bdec:	e7e6      	b.n	800bdbc <_printf_float+0x248>
 800bdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dc39      	bgt.n	800be68 <_printf_float+0x2f4>
 800bdf4:	4a1b      	ldr	r2, [pc, #108]	; (800be64 <_printf_float+0x2f0>)
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	47b8      	blx	r7
 800bdfe:	3001      	adds	r0, #1
 800be00:	f43f af19 	beq.w	800bc36 <_printf_float+0xc2>
 800be04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be08:	4313      	orrs	r3, r2
 800be0a:	d102      	bne.n	800be12 <_printf_float+0x29e>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	07d9      	lsls	r1, r3, #31
 800be10:	d5d8      	bpl.n	800bdc4 <_printf_float+0x250>
 800be12:	ee18 3a10 	vmov	r3, s16
 800be16:	4652      	mov	r2, sl
 800be18:	4631      	mov	r1, r6
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b8      	blx	r7
 800be1e:	3001      	adds	r0, #1
 800be20:	f43f af09 	beq.w	800bc36 <_printf_float+0xc2>
 800be24:	f04f 0900 	mov.w	r9, #0
 800be28:	f104 0a1a 	add.w	sl, r4, #26
 800be2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2e:	425b      	negs	r3, r3
 800be30:	454b      	cmp	r3, r9
 800be32:	dc01      	bgt.n	800be38 <_printf_float+0x2c4>
 800be34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be36:	e792      	b.n	800bd5e <_printf_float+0x1ea>
 800be38:	2301      	movs	r3, #1
 800be3a:	4652      	mov	r2, sl
 800be3c:	4631      	mov	r1, r6
 800be3e:	4628      	mov	r0, r5
 800be40:	47b8      	blx	r7
 800be42:	3001      	adds	r0, #1
 800be44:	f43f aef7 	beq.w	800bc36 <_printf_float+0xc2>
 800be48:	f109 0901 	add.w	r9, r9, #1
 800be4c:	e7ee      	b.n	800be2c <_printf_float+0x2b8>
 800be4e:	bf00      	nop
 800be50:	7fefffff 	.word	0x7fefffff
 800be54:	080129fc 	.word	0x080129fc
 800be58:	08012a00 	.word	0x08012a00
 800be5c:	08012a08 	.word	0x08012a08
 800be60:	08012a04 	.word	0x08012a04
 800be64:	08012e01 	.word	0x08012e01
 800be68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be6c:	429a      	cmp	r2, r3
 800be6e:	bfa8      	it	ge
 800be70:	461a      	movge	r2, r3
 800be72:	2a00      	cmp	r2, #0
 800be74:	4691      	mov	r9, r2
 800be76:	dc37      	bgt.n	800bee8 <_printf_float+0x374>
 800be78:	f04f 0b00 	mov.w	fp, #0
 800be7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be80:	f104 021a 	add.w	r2, r4, #26
 800be84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be86:	9305      	str	r3, [sp, #20]
 800be88:	eba3 0309 	sub.w	r3, r3, r9
 800be8c:	455b      	cmp	r3, fp
 800be8e:	dc33      	bgt.n	800bef8 <_printf_float+0x384>
 800be90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be94:	429a      	cmp	r2, r3
 800be96:	db3b      	blt.n	800bf10 <_printf_float+0x39c>
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	07da      	lsls	r2, r3, #31
 800be9c:	d438      	bmi.n	800bf10 <_printf_float+0x39c>
 800be9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea0:	9a05      	ldr	r2, [sp, #20]
 800bea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bea4:	1a9a      	subs	r2, r3, r2
 800bea6:	eba3 0901 	sub.w	r9, r3, r1
 800beaa:	4591      	cmp	r9, r2
 800beac:	bfa8      	it	ge
 800beae:	4691      	movge	r9, r2
 800beb0:	f1b9 0f00 	cmp.w	r9, #0
 800beb4:	dc35      	bgt.n	800bf22 <_printf_float+0x3ae>
 800beb6:	f04f 0800 	mov.w	r8, #0
 800beba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bebe:	f104 0a1a 	add.w	sl, r4, #26
 800bec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bec6:	1a9b      	subs	r3, r3, r2
 800bec8:	eba3 0309 	sub.w	r3, r3, r9
 800becc:	4543      	cmp	r3, r8
 800bece:	f77f af79 	ble.w	800bdc4 <_printf_float+0x250>
 800bed2:	2301      	movs	r3, #1
 800bed4:	4652      	mov	r2, sl
 800bed6:	4631      	mov	r1, r6
 800bed8:	4628      	mov	r0, r5
 800beda:	47b8      	blx	r7
 800bedc:	3001      	adds	r0, #1
 800bede:	f43f aeaa 	beq.w	800bc36 <_printf_float+0xc2>
 800bee2:	f108 0801 	add.w	r8, r8, #1
 800bee6:	e7ec      	b.n	800bec2 <_printf_float+0x34e>
 800bee8:	4613      	mov	r3, r2
 800beea:	4631      	mov	r1, r6
 800beec:	4642      	mov	r2, r8
 800beee:	4628      	mov	r0, r5
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	d1c0      	bne.n	800be78 <_printf_float+0x304>
 800bef6:	e69e      	b.n	800bc36 <_printf_float+0xc2>
 800bef8:	2301      	movs	r3, #1
 800befa:	4631      	mov	r1, r6
 800befc:	4628      	mov	r0, r5
 800befe:	9205      	str	r2, [sp, #20]
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f ae97 	beq.w	800bc36 <_printf_float+0xc2>
 800bf08:	9a05      	ldr	r2, [sp, #20]
 800bf0a:	f10b 0b01 	add.w	fp, fp, #1
 800bf0e:	e7b9      	b.n	800be84 <_printf_float+0x310>
 800bf10:	ee18 3a10 	vmov	r3, s16
 800bf14:	4652      	mov	r2, sl
 800bf16:	4631      	mov	r1, r6
 800bf18:	4628      	mov	r0, r5
 800bf1a:	47b8      	blx	r7
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d1be      	bne.n	800be9e <_printf_float+0x32a>
 800bf20:	e689      	b.n	800bc36 <_printf_float+0xc2>
 800bf22:	9a05      	ldr	r2, [sp, #20]
 800bf24:	464b      	mov	r3, r9
 800bf26:	4442      	add	r2, r8
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b8      	blx	r7
 800bf2e:	3001      	adds	r0, #1
 800bf30:	d1c1      	bne.n	800beb6 <_printf_float+0x342>
 800bf32:	e680      	b.n	800bc36 <_printf_float+0xc2>
 800bf34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf36:	2a01      	cmp	r2, #1
 800bf38:	dc01      	bgt.n	800bf3e <_printf_float+0x3ca>
 800bf3a:	07db      	lsls	r3, r3, #31
 800bf3c:	d538      	bpl.n	800bfb0 <_printf_float+0x43c>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4642      	mov	r2, r8
 800bf42:	4631      	mov	r1, r6
 800bf44:	4628      	mov	r0, r5
 800bf46:	47b8      	blx	r7
 800bf48:	3001      	adds	r0, #1
 800bf4a:	f43f ae74 	beq.w	800bc36 <_printf_float+0xc2>
 800bf4e:	ee18 3a10 	vmov	r3, s16
 800bf52:	4652      	mov	r2, sl
 800bf54:	4631      	mov	r1, r6
 800bf56:	4628      	mov	r0, r5
 800bf58:	47b8      	blx	r7
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	f43f ae6b 	beq.w	800bc36 <_printf_float+0xc2>
 800bf60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf64:	2200      	movs	r2, #0
 800bf66:	2300      	movs	r3, #0
 800bf68:	f7f4 fdde 	bl	8000b28 <__aeabi_dcmpeq>
 800bf6c:	b9d8      	cbnz	r0, 800bfa6 <_printf_float+0x432>
 800bf6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf70:	f108 0201 	add.w	r2, r8, #1
 800bf74:	3b01      	subs	r3, #1
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d10e      	bne.n	800bf9e <_printf_float+0x42a>
 800bf80:	e659      	b.n	800bc36 <_printf_float+0xc2>
 800bf82:	2301      	movs	r3, #1
 800bf84:	4652      	mov	r2, sl
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f43f ae52 	beq.w	800bc36 <_printf_float+0xc2>
 800bf92:	f108 0801 	add.w	r8, r8, #1
 800bf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	4543      	cmp	r3, r8
 800bf9c:	dcf1      	bgt.n	800bf82 <_printf_float+0x40e>
 800bf9e:	464b      	mov	r3, r9
 800bfa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bfa4:	e6dc      	b.n	800bd60 <_printf_float+0x1ec>
 800bfa6:	f04f 0800 	mov.w	r8, #0
 800bfaa:	f104 0a1a 	add.w	sl, r4, #26
 800bfae:	e7f2      	b.n	800bf96 <_printf_float+0x422>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4642      	mov	r2, r8
 800bfb4:	e7df      	b.n	800bf76 <_printf_float+0x402>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	464a      	mov	r2, r9
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	47b8      	blx	r7
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	f43f ae38 	beq.w	800bc36 <_printf_float+0xc2>
 800bfc6:	f108 0801 	add.w	r8, r8, #1
 800bfca:	68e3      	ldr	r3, [r4, #12]
 800bfcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfce:	1a5b      	subs	r3, r3, r1
 800bfd0:	4543      	cmp	r3, r8
 800bfd2:	dcf0      	bgt.n	800bfb6 <_printf_float+0x442>
 800bfd4:	e6fa      	b.n	800bdcc <_printf_float+0x258>
 800bfd6:	f04f 0800 	mov.w	r8, #0
 800bfda:	f104 0919 	add.w	r9, r4, #25
 800bfde:	e7f4      	b.n	800bfca <_printf_float+0x456>

0800bfe0 <_printf_common>:
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	4616      	mov	r6, r2
 800bfe6:	4699      	mov	r9, r3
 800bfe8:	688a      	ldr	r2, [r1, #8]
 800bfea:	690b      	ldr	r3, [r1, #16]
 800bfec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bff0:	4293      	cmp	r3, r2
 800bff2:	bfb8      	it	lt
 800bff4:	4613      	movlt	r3, r2
 800bff6:	6033      	str	r3, [r6, #0]
 800bff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bffc:	4607      	mov	r7, r0
 800bffe:	460c      	mov	r4, r1
 800c000:	b10a      	cbz	r2, 800c006 <_printf_common+0x26>
 800c002:	3301      	adds	r3, #1
 800c004:	6033      	str	r3, [r6, #0]
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	0699      	lsls	r1, r3, #26
 800c00a:	bf42      	ittt	mi
 800c00c:	6833      	ldrmi	r3, [r6, #0]
 800c00e:	3302      	addmi	r3, #2
 800c010:	6033      	strmi	r3, [r6, #0]
 800c012:	6825      	ldr	r5, [r4, #0]
 800c014:	f015 0506 	ands.w	r5, r5, #6
 800c018:	d106      	bne.n	800c028 <_printf_common+0x48>
 800c01a:	f104 0a19 	add.w	sl, r4, #25
 800c01e:	68e3      	ldr	r3, [r4, #12]
 800c020:	6832      	ldr	r2, [r6, #0]
 800c022:	1a9b      	subs	r3, r3, r2
 800c024:	42ab      	cmp	r3, r5
 800c026:	dc26      	bgt.n	800c076 <_printf_common+0x96>
 800c028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c02c:	1e13      	subs	r3, r2, #0
 800c02e:	6822      	ldr	r2, [r4, #0]
 800c030:	bf18      	it	ne
 800c032:	2301      	movne	r3, #1
 800c034:	0692      	lsls	r2, r2, #26
 800c036:	d42b      	bmi.n	800c090 <_printf_common+0xb0>
 800c038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c03c:	4649      	mov	r1, r9
 800c03e:	4638      	mov	r0, r7
 800c040:	47c0      	blx	r8
 800c042:	3001      	adds	r0, #1
 800c044:	d01e      	beq.n	800c084 <_printf_common+0xa4>
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	68e5      	ldr	r5, [r4, #12]
 800c04a:	6832      	ldr	r2, [r6, #0]
 800c04c:	f003 0306 	and.w	r3, r3, #6
 800c050:	2b04      	cmp	r3, #4
 800c052:	bf08      	it	eq
 800c054:	1aad      	subeq	r5, r5, r2
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	6922      	ldr	r2, [r4, #16]
 800c05a:	bf0c      	ite	eq
 800c05c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c060:	2500      	movne	r5, #0
 800c062:	4293      	cmp	r3, r2
 800c064:	bfc4      	itt	gt
 800c066:	1a9b      	subgt	r3, r3, r2
 800c068:	18ed      	addgt	r5, r5, r3
 800c06a:	2600      	movs	r6, #0
 800c06c:	341a      	adds	r4, #26
 800c06e:	42b5      	cmp	r5, r6
 800c070:	d11a      	bne.n	800c0a8 <_printf_common+0xc8>
 800c072:	2000      	movs	r0, #0
 800c074:	e008      	b.n	800c088 <_printf_common+0xa8>
 800c076:	2301      	movs	r3, #1
 800c078:	4652      	mov	r2, sl
 800c07a:	4649      	mov	r1, r9
 800c07c:	4638      	mov	r0, r7
 800c07e:	47c0      	blx	r8
 800c080:	3001      	adds	r0, #1
 800c082:	d103      	bne.n	800c08c <_printf_common+0xac>
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08c:	3501      	adds	r5, #1
 800c08e:	e7c6      	b.n	800c01e <_printf_common+0x3e>
 800c090:	18e1      	adds	r1, r4, r3
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	2030      	movs	r0, #48	; 0x30
 800c096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c09a:	4422      	add	r2, r4
 800c09c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0a4:	3302      	adds	r3, #2
 800c0a6:	e7c7      	b.n	800c038 <_printf_common+0x58>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	4622      	mov	r2, r4
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	47c0      	blx	r8
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	d0e6      	beq.n	800c084 <_printf_common+0xa4>
 800c0b6:	3601      	adds	r6, #1
 800c0b8:	e7d9      	b.n	800c06e <_printf_common+0x8e>
	...

0800c0bc <_printf_i>:
 800c0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c0:	7e0f      	ldrb	r7, [r1, #24]
 800c0c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0c4:	2f78      	cmp	r7, #120	; 0x78
 800c0c6:	4691      	mov	r9, r2
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	469a      	mov	sl, r3
 800c0ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0d2:	d807      	bhi.n	800c0e4 <_printf_i+0x28>
 800c0d4:	2f62      	cmp	r7, #98	; 0x62
 800c0d6:	d80a      	bhi.n	800c0ee <_printf_i+0x32>
 800c0d8:	2f00      	cmp	r7, #0
 800c0da:	f000 80d8 	beq.w	800c28e <_printf_i+0x1d2>
 800c0de:	2f58      	cmp	r7, #88	; 0x58
 800c0e0:	f000 80a3 	beq.w	800c22a <_printf_i+0x16e>
 800c0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0ec:	e03a      	b.n	800c164 <_printf_i+0xa8>
 800c0ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0f2:	2b15      	cmp	r3, #21
 800c0f4:	d8f6      	bhi.n	800c0e4 <_printf_i+0x28>
 800c0f6:	a101      	add	r1, pc, #4	; (adr r1, 800c0fc <_printf_i+0x40>)
 800c0f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0fc:	0800c155 	.word	0x0800c155
 800c100:	0800c169 	.word	0x0800c169
 800c104:	0800c0e5 	.word	0x0800c0e5
 800c108:	0800c0e5 	.word	0x0800c0e5
 800c10c:	0800c0e5 	.word	0x0800c0e5
 800c110:	0800c0e5 	.word	0x0800c0e5
 800c114:	0800c169 	.word	0x0800c169
 800c118:	0800c0e5 	.word	0x0800c0e5
 800c11c:	0800c0e5 	.word	0x0800c0e5
 800c120:	0800c0e5 	.word	0x0800c0e5
 800c124:	0800c0e5 	.word	0x0800c0e5
 800c128:	0800c275 	.word	0x0800c275
 800c12c:	0800c199 	.word	0x0800c199
 800c130:	0800c257 	.word	0x0800c257
 800c134:	0800c0e5 	.word	0x0800c0e5
 800c138:	0800c0e5 	.word	0x0800c0e5
 800c13c:	0800c297 	.word	0x0800c297
 800c140:	0800c0e5 	.word	0x0800c0e5
 800c144:	0800c199 	.word	0x0800c199
 800c148:	0800c0e5 	.word	0x0800c0e5
 800c14c:	0800c0e5 	.word	0x0800c0e5
 800c150:	0800c25f 	.word	0x0800c25f
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	1d1a      	adds	r2, r3, #4
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	602a      	str	r2, [r5, #0]
 800c15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c164:	2301      	movs	r3, #1
 800c166:	e0a3      	b.n	800c2b0 <_printf_i+0x1f4>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	6829      	ldr	r1, [r5, #0]
 800c16c:	0606      	lsls	r6, r0, #24
 800c16e:	f101 0304 	add.w	r3, r1, #4
 800c172:	d50a      	bpl.n	800c18a <_printf_i+0xce>
 800c174:	680e      	ldr	r6, [r1, #0]
 800c176:	602b      	str	r3, [r5, #0]
 800c178:	2e00      	cmp	r6, #0
 800c17a:	da03      	bge.n	800c184 <_printf_i+0xc8>
 800c17c:	232d      	movs	r3, #45	; 0x2d
 800c17e:	4276      	negs	r6, r6
 800c180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c184:	485e      	ldr	r0, [pc, #376]	; (800c300 <_printf_i+0x244>)
 800c186:	230a      	movs	r3, #10
 800c188:	e019      	b.n	800c1be <_printf_i+0x102>
 800c18a:	680e      	ldr	r6, [r1, #0]
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c192:	bf18      	it	ne
 800c194:	b236      	sxthne	r6, r6
 800c196:	e7ef      	b.n	800c178 <_printf_i+0xbc>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	6820      	ldr	r0, [r4, #0]
 800c19c:	1d19      	adds	r1, r3, #4
 800c19e:	6029      	str	r1, [r5, #0]
 800c1a0:	0601      	lsls	r1, r0, #24
 800c1a2:	d501      	bpl.n	800c1a8 <_printf_i+0xec>
 800c1a4:	681e      	ldr	r6, [r3, #0]
 800c1a6:	e002      	b.n	800c1ae <_printf_i+0xf2>
 800c1a8:	0646      	lsls	r6, r0, #25
 800c1aa:	d5fb      	bpl.n	800c1a4 <_printf_i+0xe8>
 800c1ac:	881e      	ldrh	r6, [r3, #0]
 800c1ae:	4854      	ldr	r0, [pc, #336]	; (800c300 <_printf_i+0x244>)
 800c1b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c1b2:	bf0c      	ite	eq
 800c1b4:	2308      	moveq	r3, #8
 800c1b6:	230a      	movne	r3, #10
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1be:	6865      	ldr	r5, [r4, #4]
 800c1c0:	60a5      	str	r5, [r4, #8]
 800c1c2:	2d00      	cmp	r5, #0
 800c1c4:	bfa2      	ittt	ge
 800c1c6:	6821      	ldrge	r1, [r4, #0]
 800c1c8:	f021 0104 	bicge.w	r1, r1, #4
 800c1cc:	6021      	strge	r1, [r4, #0]
 800c1ce:	b90e      	cbnz	r6, 800c1d4 <_printf_i+0x118>
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	d04d      	beq.n	800c270 <_printf_i+0x1b4>
 800c1d4:	4615      	mov	r5, r2
 800c1d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1da:	fb03 6711 	mls	r7, r3, r1, r6
 800c1de:	5dc7      	ldrb	r7, [r0, r7]
 800c1e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1e4:	4637      	mov	r7, r6
 800c1e6:	42bb      	cmp	r3, r7
 800c1e8:	460e      	mov	r6, r1
 800c1ea:	d9f4      	bls.n	800c1d6 <_printf_i+0x11a>
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	d10b      	bne.n	800c208 <_printf_i+0x14c>
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	07de      	lsls	r6, r3, #31
 800c1f4:	d508      	bpl.n	800c208 <_printf_i+0x14c>
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	6861      	ldr	r1, [r4, #4]
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	bfde      	ittt	le
 800c1fe:	2330      	movle	r3, #48	; 0x30
 800c200:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c204:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c208:	1b52      	subs	r2, r2, r5
 800c20a:	6122      	str	r2, [r4, #16]
 800c20c:	f8cd a000 	str.w	sl, [sp]
 800c210:	464b      	mov	r3, r9
 800c212:	aa03      	add	r2, sp, #12
 800c214:	4621      	mov	r1, r4
 800c216:	4640      	mov	r0, r8
 800c218:	f7ff fee2 	bl	800bfe0 <_printf_common>
 800c21c:	3001      	adds	r0, #1
 800c21e:	d14c      	bne.n	800c2ba <_printf_i+0x1fe>
 800c220:	f04f 30ff 	mov.w	r0, #4294967295
 800c224:	b004      	add	sp, #16
 800c226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22a:	4835      	ldr	r0, [pc, #212]	; (800c300 <_printf_i+0x244>)
 800c22c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c230:	6829      	ldr	r1, [r5, #0]
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	f851 6b04 	ldr.w	r6, [r1], #4
 800c238:	6029      	str	r1, [r5, #0]
 800c23a:	061d      	lsls	r5, r3, #24
 800c23c:	d514      	bpl.n	800c268 <_printf_i+0x1ac>
 800c23e:	07df      	lsls	r7, r3, #31
 800c240:	bf44      	itt	mi
 800c242:	f043 0320 	orrmi.w	r3, r3, #32
 800c246:	6023      	strmi	r3, [r4, #0]
 800c248:	b91e      	cbnz	r6, 800c252 <_printf_i+0x196>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	f023 0320 	bic.w	r3, r3, #32
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	2310      	movs	r3, #16
 800c254:	e7b0      	b.n	800c1b8 <_printf_i+0xfc>
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	f043 0320 	orr.w	r3, r3, #32
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	2378      	movs	r3, #120	; 0x78
 800c260:	4828      	ldr	r0, [pc, #160]	; (800c304 <_printf_i+0x248>)
 800c262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c266:	e7e3      	b.n	800c230 <_printf_i+0x174>
 800c268:	0659      	lsls	r1, r3, #25
 800c26a:	bf48      	it	mi
 800c26c:	b2b6      	uxthmi	r6, r6
 800c26e:	e7e6      	b.n	800c23e <_printf_i+0x182>
 800c270:	4615      	mov	r5, r2
 800c272:	e7bb      	b.n	800c1ec <_printf_i+0x130>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	6826      	ldr	r6, [r4, #0]
 800c278:	6961      	ldr	r1, [r4, #20]
 800c27a:	1d18      	adds	r0, r3, #4
 800c27c:	6028      	str	r0, [r5, #0]
 800c27e:	0635      	lsls	r5, r6, #24
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	d501      	bpl.n	800c288 <_printf_i+0x1cc>
 800c284:	6019      	str	r1, [r3, #0]
 800c286:	e002      	b.n	800c28e <_printf_i+0x1d2>
 800c288:	0670      	lsls	r0, r6, #25
 800c28a:	d5fb      	bpl.n	800c284 <_printf_i+0x1c8>
 800c28c:	8019      	strh	r1, [r3, #0]
 800c28e:	2300      	movs	r3, #0
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	4615      	mov	r5, r2
 800c294:	e7ba      	b.n	800c20c <_printf_i+0x150>
 800c296:	682b      	ldr	r3, [r5, #0]
 800c298:	1d1a      	adds	r2, r3, #4
 800c29a:	602a      	str	r2, [r5, #0]
 800c29c:	681d      	ldr	r5, [r3, #0]
 800c29e:	6862      	ldr	r2, [r4, #4]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f7f3 ffcc 	bl	8000240 <memchr>
 800c2a8:	b108      	cbz	r0, 800c2ae <_printf_i+0x1f2>
 800c2aa:	1b40      	subs	r0, r0, r5
 800c2ac:	6060      	str	r0, [r4, #4]
 800c2ae:	6863      	ldr	r3, [r4, #4]
 800c2b0:	6123      	str	r3, [r4, #16]
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b8:	e7a8      	b.n	800c20c <_printf_i+0x150>
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	462a      	mov	r2, r5
 800c2be:	4649      	mov	r1, r9
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	47d0      	blx	sl
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d0ab      	beq.n	800c220 <_printf_i+0x164>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	079b      	lsls	r3, r3, #30
 800c2cc:	d413      	bmi.n	800c2f6 <_printf_i+0x23a>
 800c2ce:	68e0      	ldr	r0, [r4, #12]
 800c2d0:	9b03      	ldr	r3, [sp, #12]
 800c2d2:	4298      	cmp	r0, r3
 800c2d4:	bfb8      	it	lt
 800c2d6:	4618      	movlt	r0, r3
 800c2d8:	e7a4      	b.n	800c224 <_printf_i+0x168>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4632      	mov	r2, r6
 800c2de:	4649      	mov	r1, r9
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	47d0      	blx	sl
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d09b      	beq.n	800c220 <_printf_i+0x164>
 800c2e8:	3501      	adds	r5, #1
 800c2ea:	68e3      	ldr	r3, [r4, #12]
 800c2ec:	9903      	ldr	r1, [sp, #12]
 800c2ee:	1a5b      	subs	r3, r3, r1
 800c2f0:	42ab      	cmp	r3, r5
 800c2f2:	dcf2      	bgt.n	800c2da <_printf_i+0x21e>
 800c2f4:	e7eb      	b.n	800c2ce <_printf_i+0x212>
 800c2f6:	2500      	movs	r5, #0
 800c2f8:	f104 0619 	add.w	r6, r4, #25
 800c2fc:	e7f5      	b.n	800c2ea <_printf_i+0x22e>
 800c2fe:	bf00      	nop
 800c300:	08012a0c 	.word	0x08012a0c
 800c304:	08012a1d 	.word	0x08012a1d

0800c308 <_scanf_float>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	b087      	sub	sp, #28
 800c30e:	4617      	mov	r7, r2
 800c310:	9303      	str	r3, [sp, #12]
 800c312:	688b      	ldr	r3, [r1, #8]
 800c314:	1e5a      	subs	r2, r3, #1
 800c316:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c31a:	bf83      	ittte	hi
 800c31c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c320:	195b      	addhi	r3, r3, r5
 800c322:	9302      	strhi	r3, [sp, #8]
 800c324:	2300      	movls	r3, #0
 800c326:	bf86      	itte	hi
 800c328:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c32c:	608b      	strhi	r3, [r1, #8]
 800c32e:	9302      	strls	r3, [sp, #8]
 800c330:	680b      	ldr	r3, [r1, #0]
 800c332:	468b      	mov	fp, r1
 800c334:	2500      	movs	r5, #0
 800c336:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c33a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c33e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c342:	4680      	mov	r8, r0
 800c344:	460c      	mov	r4, r1
 800c346:	465e      	mov	r6, fp
 800c348:	46aa      	mov	sl, r5
 800c34a:	46a9      	mov	r9, r5
 800c34c:	9501      	str	r5, [sp, #4]
 800c34e:	68a2      	ldr	r2, [r4, #8]
 800c350:	b152      	cbz	r2, 800c368 <_scanf_float+0x60>
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b4e      	cmp	r3, #78	; 0x4e
 800c358:	d864      	bhi.n	800c424 <_scanf_float+0x11c>
 800c35a:	2b40      	cmp	r3, #64	; 0x40
 800c35c:	d83c      	bhi.n	800c3d8 <_scanf_float+0xd0>
 800c35e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c362:	b2c8      	uxtb	r0, r1
 800c364:	280e      	cmp	r0, #14
 800c366:	d93a      	bls.n	800c3de <_scanf_float+0xd6>
 800c368:	f1b9 0f00 	cmp.w	r9, #0
 800c36c:	d003      	beq.n	800c376 <_scanf_float+0x6e>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c37a:	f1ba 0f01 	cmp.w	sl, #1
 800c37e:	f200 8113 	bhi.w	800c5a8 <_scanf_float+0x2a0>
 800c382:	455e      	cmp	r6, fp
 800c384:	f200 8105 	bhi.w	800c592 <_scanf_float+0x28a>
 800c388:	2501      	movs	r5, #1
 800c38a:	4628      	mov	r0, r5
 800c38c:	b007      	add	sp, #28
 800c38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c392:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c396:	2a0d      	cmp	r2, #13
 800c398:	d8e6      	bhi.n	800c368 <_scanf_float+0x60>
 800c39a:	a101      	add	r1, pc, #4	; (adr r1, 800c3a0 <_scanf_float+0x98>)
 800c39c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3a0:	0800c4df 	.word	0x0800c4df
 800c3a4:	0800c369 	.word	0x0800c369
 800c3a8:	0800c369 	.word	0x0800c369
 800c3ac:	0800c369 	.word	0x0800c369
 800c3b0:	0800c53f 	.word	0x0800c53f
 800c3b4:	0800c517 	.word	0x0800c517
 800c3b8:	0800c369 	.word	0x0800c369
 800c3bc:	0800c369 	.word	0x0800c369
 800c3c0:	0800c4ed 	.word	0x0800c4ed
 800c3c4:	0800c369 	.word	0x0800c369
 800c3c8:	0800c369 	.word	0x0800c369
 800c3cc:	0800c369 	.word	0x0800c369
 800c3d0:	0800c369 	.word	0x0800c369
 800c3d4:	0800c4a5 	.word	0x0800c4a5
 800c3d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c3dc:	e7db      	b.n	800c396 <_scanf_float+0x8e>
 800c3de:	290e      	cmp	r1, #14
 800c3e0:	d8c2      	bhi.n	800c368 <_scanf_float+0x60>
 800c3e2:	a001      	add	r0, pc, #4	; (adr r0, 800c3e8 <_scanf_float+0xe0>)
 800c3e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c3e8:	0800c497 	.word	0x0800c497
 800c3ec:	0800c369 	.word	0x0800c369
 800c3f0:	0800c497 	.word	0x0800c497
 800c3f4:	0800c52b 	.word	0x0800c52b
 800c3f8:	0800c369 	.word	0x0800c369
 800c3fc:	0800c445 	.word	0x0800c445
 800c400:	0800c481 	.word	0x0800c481
 800c404:	0800c481 	.word	0x0800c481
 800c408:	0800c481 	.word	0x0800c481
 800c40c:	0800c481 	.word	0x0800c481
 800c410:	0800c481 	.word	0x0800c481
 800c414:	0800c481 	.word	0x0800c481
 800c418:	0800c481 	.word	0x0800c481
 800c41c:	0800c481 	.word	0x0800c481
 800c420:	0800c481 	.word	0x0800c481
 800c424:	2b6e      	cmp	r3, #110	; 0x6e
 800c426:	d809      	bhi.n	800c43c <_scanf_float+0x134>
 800c428:	2b60      	cmp	r3, #96	; 0x60
 800c42a:	d8b2      	bhi.n	800c392 <_scanf_float+0x8a>
 800c42c:	2b54      	cmp	r3, #84	; 0x54
 800c42e:	d077      	beq.n	800c520 <_scanf_float+0x218>
 800c430:	2b59      	cmp	r3, #89	; 0x59
 800c432:	d199      	bne.n	800c368 <_scanf_float+0x60>
 800c434:	2d07      	cmp	r5, #7
 800c436:	d197      	bne.n	800c368 <_scanf_float+0x60>
 800c438:	2508      	movs	r5, #8
 800c43a:	e029      	b.n	800c490 <_scanf_float+0x188>
 800c43c:	2b74      	cmp	r3, #116	; 0x74
 800c43e:	d06f      	beq.n	800c520 <_scanf_float+0x218>
 800c440:	2b79      	cmp	r3, #121	; 0x79
 800c442:	e7f6      	b.n	800c432 <_scanf_float+0x12a>
 800c444:	6821      	ldr	r1, [r4, #0]
 800c446:	05c8      	lsls	r0, r1, #23
 800c448:	d51a      	bpl.n	800c480 <_scanf_float+0x178>
 800c44a:	9b02      	ldr	r3, [sp, #8]
 800c44c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c450:	6021      	str	r1, [r4, #0]
 800c452:	f109 0901 	add.w	r9, r9, #1
 800c456:	b11b      	cbz	r3, 800c460 <_scanf_float+0x158>
 800c458:	3b01      	subs	r3, #1
 800c45a:	3201      	adds	r2, #1
 800c45c:	9302      	str	r3, [sp, #8]
 800c45e:	60a2      	str	r2, [r4, #8]
 800c460:	68a3      	ldr	r3, [r4, #8]
 800c462:	3b01      	subs	r3, #1
 800c464:	60a3      	str	r3, [r4, #8]
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	3301      	adds	r3, #1
 800c46a:	6123      	str	r3, [r4, #16]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	607b      	str	r3, [r7, #4]
 800c474:	f340 8084 	ble.w	800c580 <_scanf_float+0x278>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	3301      	adds	r3, #1
 800c47c:	603b      	str	r3, [r7, #0]
 800c47e:	e766      	b.n	800c34e <_scanf_float+0x46>
 800c480:	eb1a 0f05 	cmn.w	sl, r5
 800c484:	f47f af70 	bne.w	800c368 <_scanf_float+0x60>
 800c488:	6822      	ldr	r2, [r4, #0]
 800c48a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c48e:	6022      	str	r2, [r4, #0]
 800c490:	f806 3b01 	strb.w	r3, [r6], #1
 800c494:	e7e4      	b.n	800c460 <_scanf_float+0x158>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	0610      	lsls	r0, r2, #24
 800c49a:	f57f af65 	bpl.w	800c368 <_scanf_float+0x60>
 800c49e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4a2:	e7f4      	b.n	800c48e <_scanf_float+0x186>
 800c4a4:	f1ba 0f00 	cmp.w	sl, #0
 800c4a8:	d10e      	bne.n	800c4c8 <_scanf_float+0x1c0>
 800c4aa:	f1b9 0f00 	cmp.w	r9, #0
 800c4ae:	d10e      	bne.n	800c4ce <_scanf_float+0x1c6>
 800c4b0:	6822      	ldr	r2, [r4, #0]
 800c4b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c4b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c4ba:	d108      	bne.n	800c4ce <_scanf_float+0x1c6>
 800c4bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c4c0:	6022      	str	r2, [r4, #0]
 800c4c2:	f04f 0a01 	mov.w	sl, #1
 800c4c6:	e7e3      	b.n	800c490 <_scanf_float+0x188>
 800c4c8:	f1ba 0f02 	cmp.w	sl, #2
 800c4cc:	d055      	beq.n	800c57a <_scanf_float+0x272>
 800c4ce:	2d01      	cmp	r5, #1
 800c4d0:	d002      	beq.n	800c4d8 <_scanf_float+0x1d0>
 800c4d2:	2d04      	cmp	r5, #4
 800c4d4:	f47f af48 	bne.w	800c368 <_scanf_float+0x60>
 800c4d8:	3501      	adds	r5, #1
 800c4da:	b2ed      	uxtb	r5, r5
 800c4dc:	e7d8      	b.n	800c490 <_scanf_float+0x188>
 800c4de:	f1ba 0f01 	cmp.w	sl, #1
 800c4e2:	f47f af41 	bne.w	800c368 <_scanf_float+0x60>
 800c4e6:	f04f 0a02 	mov.w	sl, #2
 800c4ea:	e7d1      	b.n	800c490 <_scanf_float+0x188>
 800c4ec:	b97d      	cbnz	r5, 800c50e <_scanf_float+0x206>
 800c4ee:	f1b9 0f00 	cmp.w	r9, #0
 800c4f2:	f47f af3c 	bne.w	800c36e <_scanf_float+0x66>
 800c4f6:	6822      	ldr	r2, [r4, #0]
 800c4f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c4fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c500:	f47f af39 	bne.w	800c376 <_scanf_float+0x6e>
 800c504:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c508:	6022      	str	r2, [r4, #0]
 800c50a:	2501      	movs	r5, #1
 800c50c:	e7c0      	b.n	800c490 <_scanf_float+0x188>
 800c50e:	2d03      	cmp	r5, #3
 800c510:	d0e2      	beq.n	800c4d8 <_scanf_float+0x1d0>
 800c512:	2d05      	cmp	r5, #5
 800c514:	e7de      	b.n	800c4d4 <_scanf_float+0x1cc>
 800c516:	2d02      	cmp	r5, #2
 800c518:	f47f af26 	bne.w	800c368 <_scanf_float+0x60>
 800c51c:	2503      	movs	r5, #3
 800c51e:	e7b7      	b.n	800c490 <_scanf_float+0x188>
 800c520:	2d06      	cmp	r5, #6
 800c522:	f47f af21 	bne.w	800c368 <_scanf_float+0x60>
 800c526:	2507      	movs	r5, #7
 800c528:	e7b2      	b.n	800c490 <_scanf_float+0x188>
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	0591      	lsls	r1, r2, #22
 800c52e:	f57f af1b 	bpl.w	800c368 <_scanf_float+0x60>
 800c532:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c536:	6022      	str	r2, [r4, #0]
 800c538:	f8cd 9004 	str.w	r9, [sp, #4]
 800c53c:	e7a8      	b.n	800c490 <_scanf_float+0x188>
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c544:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c548:	d006      	beq.n	800c558 <_scanf_float+0x250>
 800c54a:	0550      	lsls	r0, r2, #21
 800c54c:	f57f af0c 	bpl.w	800c368 <_scanf_float+0x60>
 800c550:	f1b9 0f00 	cmp.w	r9, #0
 800c554:	f43f af0f 	beq.w	800c376 <_scanf_float+0x6e>
 800c558:	0591      	lsls	r1, r2, #22
 800c55a:	bf58      	it	pl
 800c55c:	9901      	ldrpl	r1, [sp, #4]
 800c55e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c562:	bf58      	it	pl
 800c564:	eba9 0101 	subpl.w	r1, r9, r1
 800c568:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c56c:	bf58      	it	pl
 800c56e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c572:	6022      	str	r2, [r4, #0]
 800c574:	f04f 0900 	mov.w	r9, #0
 800c578:	e78a      	b.n	800c490 <_scanf_float+0x188>
 800c57a:	f04f 0a03 	mov.w	sl, #3
 800c57e:	e787      	b.n	800c490 <_scanf_float+0x188>
 800c580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c584:	4639      	mov	r1, r7
 800c586:	4640      	mov	r0, r8
 800c588:	4798      	blx	r3
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f43f aedf 	beq.w	800c34e <_scanf_float+0x46>
 800c590:	e6ea      	b.n	800c368 <_scanf_float+0x60>
 800c592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c59a:	463a      	mov	r2, r7
 800c59c:	4640      	mov	r0, r8
 800c59e:	4798      	blx	r3
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	6123      	str	r3, [r4, #16]
 800c5a6:	e6ec      	b.n	800c382 <_scanf_float+0x7a>
 800c5a8:	1e6b      	subs	r3, r5, #1
 800c5aa:	2b06      	cmp	r3, #6
 800c5ac:	d825      	bhi.n	800c5fa <_scanf_float+0x2f2>
 800c5ae:	2d02      	cmp	r5, #2
 800c5b0:	d836      	bhi.n	800c620 <_scanf_float+0x318>
 800c5b2:	455e      	cmp	r6, fp
 800c5b4:	f67f aee8 	bls.w	800c388 <_scanf_float+0x80>
 800c5b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5c0:	463a      	mov	r2, r7
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	4798      	blx	r3
 800c5c6:	6923      	ldr	r3, [r4, #16]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	6123      	str	r3, [r4, #16]
 800c5cc:	e7f1      	b.n	800c5b2 <_scanf_float+0x2aa>
 800c5ce:	9802      	ldr	r0, [sp, #8]
 800c5d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c5d8:	9002      	str	r0, [sp, #8]
 800c5da:	463a      	mov	r2, r7
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4798      	blx	r3
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	6123      	str	r3, [r4, #16]
 800c5e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5ea:	fa5f fa8a 	uxtb.w	sl, sl
 800c5ee:	f1ba 0f02 	cmp.w	sl, #2
 800c5f2:	d1ec      	bne.n	800c5ce <_scanf_float+0x2c6>
 800c5f4:	3d03      	subs	r5, #3
 800c5f6:	b2ed      	uxtb	r5, r5
 800c5f8:	1b76      	subs	r6, r6, r5
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	05da      	lsls	r2, r3, #23
 800c5fe:	d52f      	bpl.n	800c660 <_scanf_float+0x358>
 800c600:	055b      	lsls	r3, r3, #21
 800c602:	d510      	bpl.n	800c626 <_scanf_float+0x31e>
 800c604:	455e      	cmp	r6, fp
 800c606:	f67f aebf 	bls.w	800c388 <_scanf_float+0x80>
 800c60a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c60e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c612:	463a      	mov	r2, r7
 800c614:	4640      	mov	r0, r8
 800c616:	4798      	blx	r3
 800c618:	6923      	ldr	r3, [r4, #16]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	6123      	str	r3, [r4, #16]
 800c61e:	e7f1      	b.n	800c604 <_scanf_float+0x2fc>
 800c620:	46aa      	mov	sl, r5
 800c622:	9602      	str	r6, [sp, #8]
 800c624:	e7df      	b.n	800c5e6 <_scanf_float+0x2de>
 800c626:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c62a:	6923      	ldr	r3, [r4, #16]
 800c62c:	2965      	cmp	r1, #101	; 0x65
 800c62e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c632:	f106 35ff 	add.w	r5, r6, #4294967295
 800c636:	6123      	str	r3, [r4, #16]
 800c638:	d00c      	beq.n	800c654 <_scanf_float+0x34c>
 800c63a:	2945      	cmp	r1, #69	; 0x45
 800c63c:	d00a      	beq.n	800c654 <_scanf_float+0x34c>
 800c63e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c642:	463a      	mov	r2, r7
 800c644:	4640      	mov	r0, r8
 800c646:	4798      	blx	r3
 800c648:	6923      	ldr	r3, [r4, #16]
 800c64a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c64e:	3b01      	subs	r3, #1
 800c650:	1eb5      	subs	r5, r6, #2
 800c652:	6123      	str	r3, [r4, #16]
 800c654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c658:	463a      	mov	r2, r7
 800c65a:	4640      	mov	r0, r8
 800c65c:	4798      	blx	r3
 800c65e:	462e      	mov	r6, r5
 800c660:	6825      	ldr	r5, [r4, #0]
 800c662:	f015 0510 	ands.w	r5, r5, #16
 800c666:	d159      	bne.n	800c71c <_scanf_float+0x414>
 800c668:	7035      	strb	r5, [r6, #0]
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c674:	d11b      	bne.n	800c6ae <_scanf_float+0x3a6>
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	454b      	cmp	r3, r9
 800c67a:	eba3 0209 	sub.w	r2, r3, r9
 800c67e:	d123      	bne.n	800c6c8 <_scanf_float+0x3c0>
 800c680:	2200      	movs	r2, #0
 800c682:	4659      	mov	r1, fp
 800c684:	4640      	mov	r0, r8
 800c686:	f000 ff29 	bl	800d4dc <_strtod_r>
 800c68a:	6822      	ldr	r2, [r4, #0]
 800c68c:	9b03      	ldr	r3, [sp, #12]
 800c68e:	f012 0f02 	tst.w	r2, #2
 800c692:	ec57 6b10 	vmov	r6, r7, d0
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	d021      	beq.n	800c6de <_scanf_float+0x3d6>
 800c69a:	9903      	ldr	r1, [sp, #12]
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	600a      	str	r2, [r1, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	e9c3 6700 	strd	r6, r7, [r3]
 800c6a6:	68e3      	ldr	r3, [r4, #12]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	60e3      	str	r3, [r4, #12]
 800c6ac:	e66d      	b.n	800c38a <_scanf_float+0x82>
 800c6ae:	9b04      	ldr	r3, [sp, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0e5      	beq.n	800c680 <_scanf_float+0x378>
 800c6b4:	9905      	ldr	r1, [sp, #20]
 800c6b6:	230a      	movs	r3, #10
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	3101      	adds	r1, #1
 800c6bc:	4640      	mov	r0, r8
 800c6be:	f000 ff95 	bl	800d5ec <_strtol_r>
 800c6c2:	9b04      	ldr	r3, [sp, #16]
 800c6c4:	9e05      	ldr	r6, [sp, #20]
 800c6c6:	1ac2      	subs	r2, r0, r3
 800c6c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c6cc:	429e      	cmp	r6, r3
 800c6ce:	bf28      	it	cs
 800c6d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c6d4:	4912      	ldr	r1, [pc, #72]	; (800c720 <_scanf_float+0x418>)
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f000 f82c 	bl	800c734 <siprintf>
 800c6dc:	e7d0      	b.n	800c680 <_scanf_float+0x378>
 800c6de:	9903      	ldr	r1, [sp, #12]
 800c6e0:	f012 0f04 	tst.w	r2, #4
 800c6e4:	f103 0204 	add.w	r2, r3, #4
 800c6e8:	600a      	str	r2, [r1, #0]
 800c6ea:	d1d9      	bne.n	800c6a0 <_scanf_float+0x398>
 800c6ec:	f8d3 8000 	ldr.w	r8, [r3]
 800c6f0:	ee10 2a10 	vmov	r2, s0
 800c6f4:	ee10 0a10 	vmov	r0, s0
 800c6f8:	463b      	mov	r3, r7
 800c6fa:	4639      	mov	r1, r7
 800c6fc:	f7f4 fa46 	bl	8000b8c <__aeabi_dcmpun>
 800c700:	b128      	cbz	r0, 800c70e <_scanf_float+0x406>
 800c702:	4808      	ldr	r0, [pc, #32]	; (800c724 <_scanf_float+0x41c>)
 800c704:	f000 f810 	bl	800c728 <nanf>
 800c708:	ed88 0a00 	vstr	s0, [r8]
 800c70c:	e7cb      	b.n	800c6a6 <_scanf_float+0x39e>
 800c70e:	4630      	mov	r0, r6
 800c710:	4639      	mov	r1, r7
 800c712:	f7f4 fa99 	bl	8000c48 <__aeabi_d2f>
 800c716:	f8c8 0000 	str.w	r0, [r8]
 800c71a:	e7c4      	b.n	800c6a6 <_scanf_float+0x39e>
 800c71c:	2500      	movs	r5, #0
 800c71e:	e634      	b.n	800c38a <_scanf_float+0x82>
 800c720:	08012a2e 	.word	0x08012a2e
 800c724:	08012e53 	.word	0x08012e53

0800c728 <nanf>:
 800c728:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c730 <nanf+0x8>
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	7fc00000 	.word	0x7fc00000

0800c734 <siprintf>:
 800c734:	b40e      	push	{r1, r2, r3}
 800c736:	b500      	push	{lr}
 800c738:	b09c      	sub	sp, #112	; 0x70
 800c73a:	ab1d      	add	r3, sp, #116	; 0x74
 800c73c:	9002      	str	r0, [sp, #8]
 800c73e:	9006      	str	r0, [sp, #24]
 800c740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c744:	4809      	ldr	r0, [pc, #36]	; (800c76c <siprintf+0x38>)
 800c746:	9107      	str	r1, [sp, #28]
 800c748:	9104      	str	r1, [sp, #16]
 800c74a:	4909      	ldr	r1, [pc, #36]	; (800c770 <siprintf+0x3c>)
 800c74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c750:	9105      	str	r1, [sp, #20]
 800c752:	6800      	ldr	r0, [r0, #0]
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	a902      	add	r1, sp, #8
 800c758:	f002 ffaa 	bl	800f6b0 <_svfiprintf_r>
 800c75c:	9b02      	ldr	r3, [sp, #8]
 800c75e:	2200      	movs	r2, #0
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	b01c      	add	sp, #112	; 0x70
 800c764:	f85d eb04 	ldr.w	lr, [sp], #4
 800c768:	b003      	add	sp, #12
 800c76a:	4770      	bx	lr
 800c76c:	20000014 	.word	0x20000014
 800c770:	ffff0208 	.word	0xffff0208

0800c774 <siscanf>:
 800c774:	b40e      	push	{r1, r2, r3}
 800c776:	b510      	push	{r4, lr}
 800c778:	b09f      	sub	sp, #124	; 0x7c
 800c77a:	ac21      	add	r4, sp, #132	; 0x84
 800c77c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c780:	f854 2b04 	ldr.w	r2, [r4], #4
 800c784:	9201      	str	r2, [sp, #4]
 800c786:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c78a:	9004      	str	r0, [sp, #16]
 800c78c:	9008      	str	r0, [sp, #32]
 800c78e:	f7f3 fd49 	bl	8000224 <strlen>
 800c792:	4b0c      	ldr	r3, [pc, #48]	; (800c7c4 <siscanf+0x50>)
 800c794:	9005      	str	r0, [sp, #20]
 800c796:	9009      	str	r0, [sp, #36]	; 0x24
 800c798:	930d      	str	r3, [sp, #52]	; 0x34
 800c79a:	480b      	ldr	r0, [pc, #44]	; (800c7c8 <siscanf+0x54>)
 800c79c:	9a01      	ldr	r2, [sp, #4]
 800c79e:	6800      	ldr	r0, [r0, #0]
 800c7a0:	9403      	str	r4, [sp, #12]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9311      	str	r3, [sp, #68]	; 0x44
 800c7a6:	9316      	str	r3, [sp, #88]	; 0x58
 800c7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c7b0:	a904      	add	r1, sp, #16
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	f003 f8d6 	bl	800f964 <__ssvfiscanf_r>
 800c7b8:	b01f      	add	sp, #124	; 0x7c
 800c7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7be:	b003      	add	sp, #12
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	0800c7ef 	.word	0x0800c7ef
 800c7c8:	20000014 	.word	0x20000014

0800c7cc <__sread>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d4:	f003 fb90 	bl	800fef8 <_read_r>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	bfab      	itete	ge
 800c7dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7de:	89a3      	ldrhlt	r3, [r4, #12]
 800c7e0:	181b      	addge	r3, r3, r0
 800c7e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7e6:	bfac      	ite	ge
 800c7e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7ea:	81a3      	strhlt	r3, [r4, #12]
 800c7ec:	bd10      	pop	{r4, pc}

0800c7ee <__seofread>:
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	4770      	bx	lr

0800c7f2 <__swrite>:
 800c7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f6:	461f      	mov	r7, r3
 800c7f8:	898b      	ldrh	r3, [r1, #12]
 800c7fa:	05db      	lsls	r3, r3, #23
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	4616      	mov	r6, r2
 800c802:	d505      	bpl.n	800c810 <__swrite+0x1e>
 800c804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c808:	2302      	movs	r3, #2
 800c80a:	2200      	movs	r2, #0
 800c80c:	f002 f902 	bl	800ea14 <_lseek_r>
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c81a:	81a3      	strh	r3, [r4, #12]
 800c81c:	4632      	mov	r2, r6
 800c81e:	463b      	mov	r3, r7
 800c820:	4628      	mov	r0, r5
 800c822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c826:	f000 bee3 	b.w	800d5f0 <_write_r>

0800c82a <__sseek>:
 800c82a:	b510      	push	{r4, lr}
 800c82c:	460c      	mov	r4, r1
 800c82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c832:	f002 f8ef 	bl	800ea14 <_lseek_r>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	89a3      	ldrh	r3, [r4, #12]
 800c83a:	bf15      	itete	ne
 800c83c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c83e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c846:	81a3      	strheq	r3, [r4, #12]
 800c848:	bf18      	it	ne
 800c84a:	81a3      	strhne	r3, [r4, #12]
 800c84c:	bd10      	pop	{r4, pc}

0800c84e <__sclose>:
 800c84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c852:	f000 bedf 	b.w	800d614 <_close_r>

0800c856 <strcpy>:
 800c856:	4603      	mov	r3, r0
 800c858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c85c:	f803 2b01 	strb.w	r2, [r3], #1
 800c860:	2a00      	cmp	r2, #0
 800c862:	d1f9      	bne.n	800c858 <strcpy+0x2>
 800c864:	4770      	bx	lr

0800c866 <strstr>:
 800c866:	780a      	ldrb	r2, [r1, #0]
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	b96a      	cbnz	r2, 800c888 <strstr+0x22>
 800c86c:	bd70      	pop	{r4, r5, r6, pc}
 800c86e:	429a      	cmp	r2, r3
 800c870:	d109      	bne.n	800c886 <strstr+0x20>
 800c872:	460c      	mov	r4, r1
 800c874:	4605      	mov	r5, r0
 800c876:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0f6      	beq.n	800c86c <strstr+0x6>
 800c87e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c882:	429e      	cmp	r6, r3
 800c884:	d0f7      	beq.n	800c876 <strstr+0x10>
 800c886:	3001      	adds	r0, #1
 800c888:	7803      	ldrb	r3, [r0, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1ef      	bne.n	800c86e <strstr+0x8>
 800c88e:	4618      	mov	r0, r3
 800c890:	e7ec      	b.n	800c86c <strstr+0x6>

0800c892 <sulp>:
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	4604      	mov	r4, r0
 800c896:	460d      	mov	r5, r1
 800c898:	ec45 4b10 	vmov	d0, r4, r5
 800c89c:	4616      	mov	r6, r2
 800c89e:	f002 fc65 	bl	800f16c <__ulp>
 800c8a2:	ec51 0b10 	vmov	r0, r1, d0
 800c8a6:	b17e      	cbz	r6, 800c8c8 <sulp+0x36>
 800c8a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c8ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dd09      	ble.n	800c8c8 <sulp+0x36>
 800c8b4:	051b      	lsls	r3, r3, #20
 800c8b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c8ba:	2400      	movs	r4, #0
 800c8bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	462b      	mov	r3, r5
 800c8c4:	f7f3 fec8 	bl	8000658 <__aeabi_dmul>
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ca:	0000      	movs	r0, r0
 800c8cc:	0000      	movs	r0, r0
	...

0800c8d0 <_strtod_l>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	ed2d 8b02 	vpush	{d8}
 800c8d8:	b09d      	sub	sp, #116	; 0x74
 800c8da:	461f      	mov	r7, r3
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9318      	str	r3, [sp, #96]	; 0x60
 800c8e0:	4ba2      	ldr	r3, [pc, #648]	; (800cb6c <_strtod_l+0x29c>)
 800c8e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	9305      	str	r3, [sp, #20]
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	4688      	mov	r8, r1
 800c8ee:	f7f3 fc99 	bl	8000224 <strlen>
 800c8f2:	f04f 0a00 	mov.w	sl, #0
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	f04f 0b00 	mov.w	fp, #0
 800c8fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c902:	781a      	ldrb	r2, [r3, #0]
 800c904:	2a2b      	cmp	r2, #43	; 0x2b
 800c906:	d04e      	beq.n	800c9a6 <_strtod_l+0xd6>
 800c908:	d83b      	bhi.n	800c982 <_strtod_l+0xb2>
 800c90a:	2a0d      	cmp	r2, #13
 800c90c:	d834      	bhi.n	800c978 <_strtod_l+0xa8>
 800c90e:	2a08      	cmp	r2, #8
 800c910:	d834      	bhi.n	800c97c <_strtod_l+0xac>
 800c912:	2a00      	cmp	r2, #0
 800c914:	d03e      	beq.n	800c994 <_strtod_l+0xc4>
 800c916:	2300      	movs	r3, #0
 800c918:	930a      	str	r3, [sp, #40]	; 0x28
 800c91a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c91c:	7833      	ldrb	r3, [r6, #0]
 800c91e:	2b30      	cmp	r3, #48	; 0x30
 800c920:	f040 80b0 	bne.w	800ca84 <_strtod_l+0x1b4>
 800c924:	7873      	ldrb	r3, [r6, #1]
 800c926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c92a:	2b58      	cmp	r3, #88	; 0x58
 800c92c:	d168      	bne.n	800ca00 <_strtod_l+0x130>
 800c92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	ab18      	add	r3, sp, #96	; 0x60
 800c934:	9702      	str	r7, [sp, #8]
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	4a8d      	ldr	r2, [pc, #564]	; (800cb70 <_strtod_l+0x2a0>)
 800c93a:	ab19      	add	r3, sp, #100	; 0x64
 800c93c:	a917      	add	r1, sp, #92	; 0x5c
 800c93e:	4620      	mov	r0, r4
 800c940:	f001 fd5c 	bl	800e3fc <__gethex>
 800c944:	f010 0707 	ands.w	r7, r0, #7
 800c948:	4605      	mov	r5, r0
 800c94a:	d005      	beq.n	800c958 <_strtod_l+0x88>
 800c94c:	2f06      	cmp	r7, #6
 800c94e:	d12c      	bne.n	800c9aa <_strtod_l+0xda>
 800c950:	3601      	adds	r6, #1
 800c952:	2300      	movs	r3, #0
 800c954:	9617      	str	r6, [sp, #92]	; 0x5c
 800c956:	930a      	str	r3, [sp, #40]	; 0x28
 800c958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f040 8590 	bne.w	800d480 <_strtod_l+0xbb0>
 800c960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c962:	b1eb      	cbz	r3, 800c9a0 <_strtod_l+0xd0>
 800c964:	4652      	mov	r2, sl
 800c966:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c96a:	ec43 2b10 	vmov	d0, r2, r3
 800c96e:	b01d      	add	sp, #116	; 0x74
 800c970:	ecbd 8b02 	vpop	{d8}
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	2a20      	cmp	r2, #32
 800c97a:	d1cc      	bne.n	800c916 <_strtod_l+0x46>
 800c97c:	3301      	adds	r3, #1
 800c97e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c980:	e7be      	b.n	800c900 <_strtod_l+0x30>
 800c982:	2a2d      	cmp	r2, #45	; 0x2d
 800c984:	d1c7      	bne.n	800c916 <_strtod_l+0x46>
 800c986:	2201      	movs	r2, #1
 800c988:	920a      	str	r2, [sp, #40]	; 0x28
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c98e:	785b      	ldrb	r3, [r3, #1]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1c2      	bne.n	800c91a <_strtod_l+0x4a>
 800c994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c996:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f040 856e 	bne.w	800d47c <_strtod_l+0xbac>
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	e7e1      	b.n	800c96a <_strtod_l+0x9a>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	e7ee      	b.n	800c988 <_strtod_l+0xb8>
 800c9aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c9ac:	b13a      	cbz	r2, 800c9be <_strtod_l+0xee>
 800c9ae:	2135      	movs	r1, #53	; 0x35
 800c9b0:	a81a      	add	r0, sp, #104	; 0x68
 800c9b2:	f002 fce6 	bl	800f382 <__copybits>
 800c9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f002 f8a5 	bl	800eb08 <_Bfree>
 800c9be:	3f01      	subs	r7, #1
 800c9c0:	2f04      	cmp	r7, #4
 800c9c2:	d806      	bhi.n	800c9d2 <_strtod_l+0x102>
 800c9c4:	e8df f007 	tbb	[pc, r7]
 800c9c8:	1714030a 	.word	0x1714030a
 800c9cc:	0a          	.byte	0x0a
 800c9cd:	00          	.byte	0x00
 800c9ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c9d2:	0728      	lsls	r0, r5, #28
 800c9d4:	d5c0      	bpl.n	800c958 <_strtod_l+0x88>
 800c9d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c9da:	e7bd      	b.n	800c958 <_strtod_l+0x88>
 800c9dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c9e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c9e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c9e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c9ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c9ee:	e7f0      	b.n	800c9d2 <_strtod_l+0x102>
 800c9f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cb74 <_strtod_l+0x2a4>
 800c9f4:	e7ed      	b.n	800c9d2 <_strtod_l+0x102>
 800c9f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c9fa:	f04f 3aff 	mov.w	sl, #4294967295
 800c9fe:	e7e8      	b.n	800c9d2 <_strtod_l+0x102>
 800ca00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca06:	785b      	ldrb	r3, [r3, #1]
 800ca08:	2b30      	cmp	r3, #48	; 0x30
 800ca0a:	d0f9      	beq.n	800ca00 <_strtod_l+0x130>
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0a3      	beq.n	800c958 <_strtod_l+0x88>
 800ca10:	2301      	movs	r3, #1
 800ca12:	f04f 0900 	mov.w	r9, #0
 800ca16:	9304      	str	r3, [sp, #16]
 800ca18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca1a:	9308      	str	r3, [sp, #32]
 800ca1c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ca20:	464f      	mov	r7, r9
 800ca22:	220a      	movs	r2, #10
 800ca24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ca26:	7806      	ldrb	r6, [r0, #0]
 800ca28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ca2c:	b2d9      	uxtb	r1, r3
 800ca2e:	2909      	cmp	r1, #9
 800ca30:	d92a      	bls.n	800ca88 <_strtod_l+0x1b8>
 800ca32:	9905      	ldr	r1, [sp, #20]
 800ca34:	462a      	mov	r2, r5
 800ca36:	f003 fac3 	bl	800ffc0 <strncmp>
 800ca3a:	b398      	cbz	r0, 800caa4 <_strtod_l+0x1d4>
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	4632      	mov	r2, r6
 800ca40:	463d      	mov	r5, r7
 800ca42:	9005      	str	r0, [sp, #20]
 800ca44:	4603      	mov	r3, r0
 800ca46:	2a65      	cmp	r2, #101	; 0x65
 800ca48:	d001      	beq.n	800ca4e <_strtod_l+0x17e>
 800ca4a:	2a45      	cmp	r2, #69	; 0x45
 800ca4c:	d118      	bne.n	800ca80 <_strtod_l+0x1b0>
 800ca4e:	b91d      	cbnz	r5, 800ca58 <_strtod_l+0x188>
 800ca50:	9a04      	ldr	r2, [sp, #16]
 800ca52:	4302      	orrs	r2, r0
 800ca54:	d09e      	beq.n	800c994 <_strtod_l+0xc4>
 800ca56:	2500      	movs	r5, #0
 800ca58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ca5c:	f108 0201 	add.w	r2, r8, #1
 800ca60:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca62:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ca66:	2a2b      	cmp	r2, #43	; 0x2b
 800ca68:	d075      	beq.n	800cb56 <_strtod_l+0x286>
 800ca6a:	2a2d      	cmp	r2, #45	; 0x2d
 800ca6c:	d07b      	beq.n	800cb66 <_strtod_l+0x296>
 800ca6e:	f04f 0c00 	mov.w	ip, #0
 800ca72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ca76:	2909      	cmp	r1, #9
 800ca78:	f240 8082 	bls.w	800cb80 <_strtod_l+0x2b0>
 800ca7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ca80:	2600      	movs	r6, #0
 800ca82:	e09d      	b.n	800cbc0 <_strtod_l+0x2f0>
 800ca84:	2300      	movs	r3, #0
 800ca86:	e7c4      	b.n	800ca12 <_strtod_l+0x142>
 800ca88:	2f08      	cmp	r7, #8
 800ca8a:	bfd8      	it	le
 800ca8c:	9907      	ldrle	r1, [sp, #28]
 800ca8e:	f100 0001 	add.w	r0, r0, #1
 800ca92:	bfda      	itte	le
 800ca94:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca98:	9307      	strle	r3, [sp, #28]
 800ca9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ca9e:	3701      	adds	r7, #1
 800caa0:	9017      	str	r0, [sp, #92]	; 0x5c
 800caa2:	e7bf      	b.n	800ca24 <_strtod_l+0x154>
 800caa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caa6:	195a      	adds	r2, r3, r5
 800caa8:	9217      	str	r2, [sp, #92]	; 0x5c
 800caaa:	5d5a      	ldrb	r2, [r3, r5]
 800caac:	2f00      	cmp	r7, #0
 800caae:	d037      	beq.n	800cb20 <_strtod_l+0x250>
 800cab0:	9005      	str	r0, [sp, #20]
 800cab2:	463d      	mov	r5, r7
 800cab4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cab8:	2b09      	cmp	r3, #9
 800caba:	d912      	bls.n	800cae2 <_strtod_l+0x212>
 800cabc:	2301      	movs	r3, #1
 800cabe:	e7c2      	b.n	800ca46 <_strtod_l+0x176>
 800cac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cac2:	1c5a      	adds	r2, r3, #1
 800cac4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cac6:	785a      	ldrb	r2, [r3, #1]
 800cac8:	3001      	adds	r0, #1
 800caca:	2a30      	cmp	r2, #48	; 0x30
 800cacc:	d0f8      	beq.n	800cac0 <_strtod_l+0x1f0>
 800cace:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cad2:	2b08      	cmp	r3, #8
 800cad4:	f200 84d9 	bhi.w	800d48a <_strtod_l+0xbba>
 800cad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cada:	9005      	str	r0, [sp, #20]
 800cadc:	2000      	movs	r0, #0
 800cade:	9308      	str	r3, [sp, #32]
 800cae0:	4605      	mov	r5, r0
 800cae2:	3a30      	subs	r2, #48	; 0x30
 800cae4:	f100 0301 	add.w	r3, r0, #1
 800cae8:	d014      	beq.n	800cb14 <_strtod_l+0x244>
 800caea:	9905      	ldr	r1, [sp, #20]
 800caec:	4419      	add	r1, r3
 800caee:	9105      	str	r1, [sp, #20]
 800caf0:	462b      	mov	r3, r5
 800caf2:	eb00 0e05 	add.w	lr, r0, r5
 800caf6:	210a      	movs	r1, #10
 800caf8:	4573      	cmp	r3, lr
 800cafa:	d113      	bne.n	800cb24 <_strtod_l+0x254>
 800cafc:	182b      	adds	r3, r5, r0
 800cafe:	2b08      	cmp	r3, #8
 800cb00:	f105 0501 	add.w	r5, r5, #1
 800cb04:	4405      	add	r5, r0
 800cb06:	dc1c      	bgt.n	800cb42 <_strtod_l+0x272>
 800cb08:	9907      	ldr	r1, [sp, #28]
 800cb0a:	230a      	movs	r3, #10
 800cb0c:	fb03 2301 	mla	r3, r3, r1, r2
 800cb10:	9307      	str	r3, [sp, #28]
 800cb12:	2300      	movs	r3, #0
 800cb14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb16:	1c51      	adds	r1, r2, #1
 800cb18:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb1a:	7852      	ldrb	r2, [r2, #1]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	e7c9      	b.n	800cab4 <_strtod_l+0x1e4>
 800cb20:	4638      	mov	r0, r7
 800cb22:	e7d2      	b.n	800caca <_strtod_l+0x1fa>
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	dc04      	bgt.n	800cb32 <_strtod_l+0x262>
 800cb28:	9e07      	ldr	r6, [sp, #28]
 800cb2a:	434e      	muls	r6, r1
 800cb2c:	9607      	str	r6, [sp, #28]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	e7e2      	b.n	800caf8 <_strtod_l+0x228>
 800cb32:	f103 0c01 	add.w	ip, r3, #1
 800cb36:	f1bc 0f10 	cmp.w	ip, #16
 800cb3a:	bfd8      	it	le
 800cb3c:	fb01 f909 	mulle.w	r9, r1, r9
 800cb40:	e7f5      	b.n	800cb2e <_strtod_l+0x25e>
 800cb42:	2d10      	cmp	r5, #16
 800cb44:	bfdc      	itt	le
 800cb46:	230a      	movle	r3, #10
 800cb48:	fb03 2909 	mlale	r9, r3, r9, r2
 800cb4c:	e7e1      	b.n	800cb12 <_strtod_l+0x242>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9305      	str	r3, [sp, #20]
 800cb52:	2301      	movs	r3, #1
 800cb54:	e77c      	b.n	800ca50 <_strtod_l+0x180>
 800cb56:	f04f 0c00 	mov.w	ip, #0
 800cb5a:	f108 0202 	add.w	r2, r8, #2
 800cb5e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb60:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cb64:	e785      	b.n	800ca72 <_strtod_l+0x1a2>
 800cb66:	f04f 0c01 	mov.w	ip, #1
 800cb6a:	e7f6      	b.n	800cb5a <_strtod_l+0x28a>
 800cb6c:	08012c80 	.word	0x08012c80
 800cb70:	08012a34 	.word	0x08012a34
 800cb74:	7ff00000 	.word	0x7ff00000
 800cb78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb7a:	1c51      	adds	r1, r2, #1
 800cb7c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb7e:	7852      	ldrb	r2, [r2, #1]
 800cb80:	2a30      	cmp	r2, #48	; 0x30
 800cb82:	d0f9      	beq.n	800cb78 <_strtod_l+0x2a8>
 800cb84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cb88:	2908      	cmp	r1, #8
 800cb8a:	f63f af79 	bhi.w	800ca80 <_strtod_l+0x1b0>
 800cb8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cb92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb94:	9206      	str	r2, [sp, #24]
 800cb96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb98:	1c51      	adds	r1, r2, #1
 800cb9a:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb9c:	7852      	ldrb	r2, [r2, #1]
 800cb9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cba2:	2e09      	cmp	r6, #9
 800cba4:	d937      	bls.n	800cc16 <_strtod_l+0x346>
 800cba6:	9e06      	ldr	r6, [sp, #24]
 800cba8:	1b89      	subs	r1, r1, r6
 800cbaa:	2908      	cmp	r1, #8
 800cbac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cbb0:	dc02      	bgt.n	800cbb8 <_strtod_l+0x2e8>
 800cbb2:	4576      	cmp	r6, lr
 800cbb4:	bfa8      	it	ge
 800cbb6:	4676      	movge	r6, lr
 800cbb8:	f1bc 0f00 	cmp.w	ip, #0
 800cbbc:	d000      	beq.n	800cbc0 <_strtod_l+0x2f0>
 800cbbe:	4276      	negs	r6, r6
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	d14d      	bne.n	800cc60 <_strtod_l+0x390>
 800cbc4:	9904      	ldr	r1, [sp, #16]
 800cbc6:	4301      	orrs	r1, r0
 800cbc8:	f47f aec6 	bne.w	800c958 <_strtod_l+0x88>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f47f aee1 	bne.w	800c994 <_strtod_l+0xc4>
 800cbd2:	2a69      	cmp	r2, #105	; 0x69
 800cbd4:	d027      	beq.n	800cc26 <_strtod_l+0x356>
 800cbd6:	dc24      	bgt.n	800cc22 <_strtod_l+0x352>
 800cbd8:	2a49      	cmp	r2, #73	; 0x49
 800cbda:	d024      	beq.n	800cc26 <_strtod_l+0x356>
 800cbdc:	2a4e      	cmp	r2, #78	; 0x4e
 800cbde:	f47f aed9 	bne.w	800c994 <_strtod_l+0xc4>
 800cbe2:	499f      	ldr	r1, [pc, #636]	; (800ce60 <_strtod_l+0x590>)
 800cbe4:	a817      	add	r0, sp, #92	; 0x5c
 800cbe6:	f001 fe61 	bl	800e8ac <__match>
 800cbea:	2800      	cmp	r0, #0
 800cbec:	f43f aed2 	beq.w	800c994 <_strtod_l+0xc4>
 800cbf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b28      	cmp	r3, #40	; 0x28
 800cbf6:	d12d      	bne.n	800cc54 <_strtod_l+0x384>
 800cbf8:	499a      	ldr	r1, [pc, #616]	; (800ce64 <_strtod_l+0x594>)
 800cbfa:	aa1a      	add	r2, sp, #104	; 0x68
 800cbfc:	a817      	add	r0, sp, #92	; 0x5c
 800cbfe:	f001 fe69 	bl	800e8d4 <__hexnan>
 800cc02:	2805      	cmp	r0, #5
 800cc04:	d126      	bne.n	800cc54 <_strtod_l+0x384>
 800cc06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cc0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cc10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cc14:	e6a0      	b.n	800c958 <_strtod_l+0x88>
 800cc16:	210a      	movs	r1, #10
 800cc18:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cc1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cc20:	e7b9      	b.n	800cb96 <_strtod_l+0x2c6>
 800cc22:	2a6e      	cmp	r2, #110	; 0x6e
 800cc24:	e7db      	b.n	800cbde <_strtod_l+0x30e>
 800cc26:	4990      	ldr	r1, [pc, #576]	; (800ce68 <_strtod_l+0x598>)
 800cc28:	a817      	add	r0, sp, #92	; 0x5c
 800cc2a:	f001 fe3f 	bl	800e8ac <__match>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	f43f aeb0 	beq.w	800c994 <_strtod_l+0xc4>
 800cc34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc36:	498d      	ldr	r1, [pc, #564]	; (800ce6c <_strtod_l+0x59c>)
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	a817      	add	r0, sp, #92	; 0x5c
 800cc3c:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc3e:	f001 fe35 	bl	800e8ac <__match>
 800cc42:	b910      	cbnz	r0, 800cc4a <_strtod_l+0x37a>
 800cc44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc46:	3301      	adds	r3, #1
 800cc48:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ce7c <_strtod_l+0x5ac>
 800cc4e:	f04f 0a00 	mov.w	sl, #0
 800cc52:	e681      	b.n	800c958 <_strtod_l+0x88>
 800cc54:	4886      	ldr	r0, [pc, #536]	; (800ce70 <_strtod_l+0x5a0>)
 800cc56:	f003 f963 	bl	800ff20 <nan>
 800cc5a:	ec5b ab10 	vmov	sl, fp, d0
 800cc5e:	e67b      	b.n	800c958 <_strtod_l+0x88>
 800cc60:	9b05      	ldr	r3, [sp, #20]
 800cc62:	9807      	ldr	r0, [sp, #28]
 800cc64:	1af3      	subs	r3, r6, r3
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	bf08      	it	eq
 800cc6a:	462f      	moveq	r7, r5
 800cc6c:	2d10      	cmp	r5, #16
 800cc6e:	9306      	str	r3, [sp, #24]
 800cc70:	46a8      	mov	r8, r5
 800cc72:	bfa8      	it	ge
 800cc74:	f04f 0810 	movge.w	r8, #16
 800cc78:	f7f3 fc74 	bl	8000564 <__aeabi_ui2d>
 800cc7c:	2d09      	cmp	r5, #9
 800cc7e:	4682      	mov	sl, r0
 800cc80:	468b      	mov	fp, r1
 800cc82:	dd13      	ble.n	800ccac <_strtod_l+0x3dc>
 800cc84:	4b7b      	ldr	r3, [pc, #492]	; (800ce74 <_strtod_l+0x5a4>)
 800cc86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cc8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cc8e:	f7f3 fce3 	bl	8000658 <__aeabi_dmul>
 800cc92:	4682      	mov	sl, r0
 800cc94:	4648      	mov	r0, r9
 800cc96:	468b      	mov	fp, r1
 800cc98:	f7f3 fc64 	bl	8000564 <__aeabi_ui2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4650      	mov	r0, sl
 800cca2:	4659      	mov	r1, fp
 800cca4:	f7f3 fb22 	bl	80002ec <__adddf3>
 800cca8:	4682      	mov	sl, r0
 800ccaa:	468b      	mov	fp, r1
 800ccac:	2d0f      	cmp	r5, #15
 800ccae:	dc38      	bgt.n	800cd22 <_strtod_l+0x452>
 800ccb0:	9b06      	ldr	r3, [sp, #24]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f43f ae50 	beq.w	800c958 <_strtod_l+0x88>
 800ccb8:	dd24      	ble.n	800cd04 <_strtod_l+0x434>
 800ccba:	2b16      	cmp	r3, #22
 800ccbc:	dc0b      	bgt.n	800ccd6 <_strtod_l+0x406>
 800ccbe:	496d      	ldr	r1, [pc, #436]	; (800ce74 <_strtod_l+0x5a4>)
 800ccc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccc8:	4652      	mov	r2, sl
 800ccca:	465b      	mov	r3, fp
 800cccc:	f7f3 fcc4 	bl	8000658 <__aeabi_dmul>
 800ccd0:	4682      	mov	sl, r0
 800ccd2:	468b      	mov	fp, r1
 800ccd4:	e640      	b.n	800c958 <_strtod_l+0x88>
 800ccd6:	9a06      	ldr	r2, [sp, #24]
 800ccd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	db20      	blt.n	800cd22 <_strtod_l+0x452>
 800cce0:	4c64      	ldr	r4, [pc, #400]	; (800ce74 <_strtod_l+0x5a4>)
 800cce2:	f1c5 050f 	rsb	r5, r5, #15
 800cce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ccea:	4652      	mov	r2, sl
 800ccec:	465b      	mov	r3, fp
 800ccee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccf2:	f7f3 fcb1 	bl	8000658 <__aeabi_dmul>
 800ccf6:	9b06      	ldr	r3, [sp, #24]
 800ccf8:	1b5d      	subs	r5, r3, r5
 800ccfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd02:	e7e3      	b.n	800cccc <_strtod_l+0x3fc>
 800cd04:	9b06      	ldr	r3, [sp, #24]
 800cd06:	3316      	adds	r3, #22
 800cd08:	db0b      	blt.n	800cd22 <_strtod_l+0x452>
 800cd0a:	9b05      	ldr	r3, [sp, #20]
 800cd0c:	1b9e      	subs	r6, r3, r6
 800cd0e:	4b59      	ldr	r3, [pc, #356]	; (800ce74 <_strtod_l+0x5a4>)
 800cd10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cd14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd18:	4650      	mov	r0, sl
 800cd1a:	4659      	mov	r1, fp
 800cd1c:	f7f3 fdc6 	bl	80008ac <__aeabi_ddiv>
 800cd20:	e7d6      	b.n	800ccd0 <_strtod_l+0x400>
 800cd22:	9b06      	ldr	r3, [sp, #24]
 800cd24:	eba5 0808 	sub.w	r8, r5, r8
 800cd28:	4498      	add	r8, r3
 800cd2a:	f1b8 0f00 	cmp.w	r8, #0
 800cd2e:	dd74      	ble.n	800ce1a <_strtod_l+0x54a>
 800cd30:	f018 030f 	ands.w	r3, r8, #15
 800cd34:	d00a      	beq.n	800cd4c <_strtod_l+0x47c>
 800cd36:	494f      	ldr	r1, [pc, #316]	; (800ce74 <_strtod_l+0x5a4>)
 800cd38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd3c:	4652      	mov	r2, sl
 800cd3e:	465b      	mov	r3, fp
 800cd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd44:	f7f3 fc88 	bl	8000658 <__aeabi_dmul>
 800cd48:	4682      	mov	sl, r0
 800cd4a:	468b      	mov	fp, r1
 800cd4c:	f038 080f 	bics.w	r8, r8, #15
 800cd50:	d04f      	beq.n	800cdf2 <_strtod_l+0x522>
 800cd52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cd56:	dd22      	ble.n	800cd9e <_strtod_l+0x4ce>
 800cd58:	2500      	movs	r5, #0
 800cd5a:	462e      	mov	r6, r5
 800cd5c:	9507      	str	r5, [sp, #28]
 800cd5e:	9505      	str	r5, [sp, #20]
 800cd60:	2322      	movs	r3, #34	; 0x22
 800cd62:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ce7c <_strtod_l+0x5ac>
 800cd66:	6023      	str	r3, [r4, #0]
 800cd68:	f04f 0a00 	mov.w	sl, #0
 800cd6c:	9b07      	ldr	r3, [sp, #28]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f43f adf2 	beq.w	800c958 <_strtod_l+0x88>
 800cd74:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd76:	4620      	mov	r0, r4
 800cd78:	f001 fec6 	bl	800eb08 <_Bfree>
 800cd7c:	9905      	ldr	r1, [sp, #20]
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f001 fec2 	bl	800eb08 <_Bfree>
 800cd84:	4631      	mov	r1, r6
 800cd86:	4620      	mov	r0, r4
 800cd88:	f001 febe 	bl	800eb08 <_Bfree>
 800cd8c:	9907      	ldr	r1, [sp, #28]
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f001 feba 	bl	800eb08 <_Bfree>
 800cd94:	4629      	mov	r1, r5
 800cd96:	4620      	mov	r0, r4
 800cd98:	f001 feb6 	bl	800eb08 <_Bfree>
 800cd9c:	e5dc      	b.n	800c958 <_strtod_l+0x88>
 800cd9e:	4b36      	ldr	r3, [pc, #216]	; (800ce78 <_strtod_l+0x5a8>)
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	2300      	movs	r3, #0
 800cda4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cda8:	4650      	mov	r0, sl
 800cdaa:	4659      	mov	r1, fp
 800cdac:	4699      	mov	r9, r3
 800cdae:	f1b8 0f01 	cmp.w	r8, #1
 800cdb2:	dc21      	bgt.n	800cdf8 <_strtod_l+0x528>
 800cdb4:	b10b      	cbz	r3, 800cdba <_strtod_l+0x4ea>
 800cdb6:	4682      	mov	sl, r0
 800cdb8:	468b      	mov	fp, r1
 800cdba:	4b2f      	ldr	r3, [pc, #188]	; (800ce78 <_strtod_l+0x5a8>)
 800cdbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cdc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	465b      	mov	r3, fp
 800cdc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cdcc:	f7f3 fc44 	bl	8000658 <__aeabi_dmul>
 800cdd0:	4b2a      	ldr	r3, [pc, #168]	; (800ce7c <_strtod_l+0x5ac>)
 800cdd2:	460a      	mov	r2, r1
 800cdd4:	400b      	ands	r3, r1
 800cdd6:	492a      	ldr	r1, [pc, #168]	; (800ce80 <_strtod_l+0x5b0>)
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	4682      	mov	sl, r0
 800cddc:	d8bc      	bhi.n	800cd58 <_strtod_l+0x488>
 800cdde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cde2:	428b      	cmp	r3, r1
 800cde4:	bf86      	itte	hi
 800cde6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ce84 <_strtod_l+0x5b4>
 800cdea:	f04f 3aff 	movhi.w	sl, #4294967295
 800cdee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	e084      	b.n	800cf02 <_strtod_l+0x632>
 800cdf8:	f018 0f01 	tst.w	r8, #1
 800cdfc:	d005      	beq.n	800ce0a <_strtod_l+0x53a>
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	f7f3 fc28 	bl	8000658 <__aeabi_dmul>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	9a04      	ldr	r2, [sp, #16]
 800ce0c:	3208      	adds	r2, #8
 800ce0e:	f109 0901 	add.w	r9, r9, #1
 800ce12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ce16:	9204      	str	r2, [sp, #16]
 800ce18:	e7c9      	b.n	800cdae <_strtod_l+0x4de>
 800ce1a:	d0ea      	beq.n	800cdf2 <_strtod_l+0x522>
 800ce1c:	f1c8 0800 	rsb	r8, r8, #0
 800ce20:	f018 020f 	ands.w	r2, r8, #15
 800ce24:	d00a      	beq.n	800ce3c <_strtod_l+0x56c>
 800ce26:	4b13      	ldr	r3, [pc, #76]	; (800ce74 <_strtod_l+0x5a4>)
 800ce28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce2c:	4650      	mov	r0, sl
 800ce2e:	4659      	mov	r1, fp
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	f7f3 fd3a 	bl	80008ac <__aeabi_ddiv>
 800ce38:	4682      	mov	sl, r0
 800ce3a:	468b      	mov	fp, r1
 800ce3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ce40:	d0d7      	beq.n	800cdf2 <_strtod_l+0x522>
 800ce42:	f1b8 0f1f 	cmp.w	r8, #31
 800ce46:	dd1f      	ble.n	800ce88 <_strtod_l+0x5b8>
 800ce48:	2500      	movs	r5, #0
 800ce4a:	462e      	mov	r6, r5
 800ce4c:	9507      	str	r5, [sp, #28]
 800ce4e:	9505      	str	r5, [sp, #20]
 800ce50:	2322      	movs	r3, #34	; 0x22
 800ce52:	f04f 0a00 	mov.w	sl, #0
 800ce56:	f04f 0b00 	mov.w	fp, #0
 800ce5a:	6023      	str	r3, [r4, #0]
 800ce5c:	e786      	b.n	800cd6c <_strtod_l+0x49c>
 800ce5e:	bf00      	nop
 800ce60:	08012a09 	.word	0x08012a09
 800ce64:	08012a48 	.word	0x08012a48
 800ce68:	08012a01 	.word	0x08012a01
 800ce6c:	08012b8c 	.word	0x08012b8c
 800ce70:	08012e53 	.word	0x08012e53
 800ce74:	08012d18 	.word	0x08012d18
 800ce78:	08012cf0 	.word	0x08012cf0
 800ce7c:	7ff00000 	.word	0x7ff00000
 800ce80:	7ca00000 	.word	0x7ca00000
 800ce84:	7fefffff 	.word	0x7fefffff
 800ce88:	f018 0310 	ands.w	r3, r8, #16
 800ce8c:	bf18      	it	ne
 800ce8e:	236a      	movne	r3, #106	; 0x6a
 800ce90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d240 <_strtod_l+0x970>
 800ce94:	9304      	str	r3, [sp, #16]
 800ce96:	4650      	mov	r0, sl
 800ce98:	4659      	mov	r1, fp
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f018 0f01 	tst.w	r8, #1
 800cea0:	d004      	beq.n	800ceac <_strtod_l+0x5dc>
 800cea2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cea6:	f7f3 fbd7 	bl	8000658 <__aeabi_dmul>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ceb0:	f109 0908 	add.w	r9, r9, #8
 800ceb4:	d1f2      	bne.n	800ce9c <_strtod_l+0x5cc>
 800ceb6:	b10b      	cbz	r3, 800cebc <_strtod_l+0x5ec>
 800ceb8:	4682      	mov	sl, r0
 800ceba:	468b      	mov	fp, r1
 800cebc:	9b04      	ldr	r3, [sp, #16]
 800cebe:	b1c3      	cbz	r3, 800cef2 <_strtod_l+0x622>
 800cec0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cec4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	4659      	mov	r1, fp
 800cecc:	dd11      	ble.n	800cef2 <_strtod_l+0x622>
 800cece:	2b1f      	cmp	r3, #31
 800ced0:	f340 8124 	ble.w	800d11c <_strtod_l+0x84c>
 800ced4:	2b34      	cmp	r3, #52	; 0x34
 800ced6:	bfde      	ittt	le
 800ced8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cedc:	f04f 33ff 	movle.w	r3, #4294967295
 800cee0:	fa03 f202 	lslle.w	r2, r3, r2
 800cee4:	f04f 0a00 	mov.w	sl, #0
 800cee8:	bfcc      	ite	gt
 800ceea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ceee:	ea02 0b01 	andle.w	fp, r2, r1
 800cef2:	2200      	movs	r2, #0
 800cef4:	2300      	movs	r3, #0
 800cef6:	4650      	mov	r0, sl
 800cef8:	4659      	mov	r1, fp
 800cefa:	f7f3 fe15 	bl	8000b28 <__aeabi_dcmpeq>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d1a2      	bne.n	800ce48 <_strtod_l+0x578>
 800cf02:	9b07      	ldr	r3, [sp, #28]
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	9908      	ldr	r1, [sp, #32]
 800cf08:	462b      	mov	r3, r5
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f001 fe63 	bl	800ebd8 <__s2b>
 800cf12:	9007      	str	r0, [sp, #28]
 800cf14:	2800      	cmp	r0, #0
 800cf16:	f43f af1f 	beq.w	800cd58 <_strtod_l+0x488>
 800cf1a:	9b05      	ldr	r3, [sp, #20]
 800cf1c:	1b9e      	subs	r6, r3, r6
 800cf1e:	9b06      	ldr	r3, [sp, #24]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfb4      	ite	lt
 800cf24:	4633      	movlt	r3, r6
 800cf26:	2300      	movge	r3, #0
 800cf28:	930c      	str	r3, [sp, #48]	; 0x30
 800cf2a:	9b06      	ldr	r3, [sp, #24]
 800cf2c:	2500      	movs	r5, #0
 800cf2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cf32:	9312      	str	r3, [sp, #72]	; 0x48
 800cf34:	462e      	mov	r6, r5
 800cf36:	9b07      	ldr	r3, [sp, #28]
 800cf38:	4620      	mov	r0, r4
 800cf3a:	6859      	ldr	r1, [r3, #4]
 800cf3c:	f001 fda4 	bl	800ea88 <_Balloc>
 800cf40:	9005      	str	r0, [sp, #20]
 800cf42:	2800      	cmp	r0, #0
 800cf44:	f43f af0c 	beq.w	800cd60 <_strtod_l+0x490>
 800cf48:	9b07      	ldr	r3, [sp, #28]
 800cf4a:	691a      	ldr	r2, [r3, #16]
 800cf4c:	3202      	adds	r2, #2
 800cf4e:	f103 010c 	add.w	r1, r3, #12
 800cf52:	0092      	lsls	r2, r2, #2
 800cf54:	300c      	adds	r0, #12
 800cf56:	f001 fd89 	bl	800ea6c <memcpy>
 800cf5a:	ec4b ab10 	vmov	d0, sl, fp
 800cf5e:	aa1a      	add	r2, sp, #104	; 0x68
 800cf60:	a919      	add	r1, sp, #100	; 0x64
 800cf62:	4620      	mov	r0, r4
 800cf64:	f002 f97e 	bl	800f264 <__d2b>
 800cf68:	ec4b ab18 	vmov	d8, sl, fp
 800cf6c:	9018      	str	r0, [sp, #96]	; 0x60
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f43f aef6 	beq.w	800cd60 <_strtod_l+0x490>
 800cf74:	2101      	movs	r1, #1
 800cf76:	4620      	mov	r0, r4
 800cf78:	f001 fec8 	bl	800ed0c <__i2b>
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f43f aeee 	beq.w	800cd60 <_strtod_l+0x490>
 800cf84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf86:	9904      	ldr	r1, [sp, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	bfab      	itete	ge
 800cf8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cf8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cf90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cf92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cf96:	bfac      	ite	ge
 800cf98:	eb03 0902 	addge.w	r9, r3, r2
 800cf9c:	1ad7      	sublt	r7, r2, r3
 800cf9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cfa0:	eba3 0801 	sub.w	r8, r3, r1
 800cfa4:	4490      	add	r8, r2
 800cfa6:	4ba1      	ldr	r3, [pc, #644]	; (800d22c <_strtod_l+0x95c>)
 800cfa8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfac:	4598      	cmp	r8, r3
 800cfae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cfb2:	f280 80c7 	bge.w	800d144 <_strtod_l+0x874>
 800cfb6:	eba3 0308 	sub.w	r3, r3, r8
 800cfba:	2b1f      	cmp	r3, #31
 800cfbc:	eba2 0203 	sub.w	r2, r2, r3
 800cfc0:	f04f 0101 	mov.w	r1, #1
 800cfc4:	f300 80b1 	bgt.w	800d12a <_strtod_l+0x85a>
 800cfc8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfcc:	930d      	str	r3, [sp, #52]	; 0x34
 800cfce:	2300      	movs	r3, #0
 800cfd0:	9308      	str	r3, [sp, #32]
 800cfd2:	eb09 0802 	add.w	r8, r9, r2
 800cfd6:	9b04      	ldr	r3, [sp, #16]
 800cfd8:	45c1      	cmp	r9, r8
 800cfda:	4417      	add	r7, r2
 800cfdc:	441f      	add	r7, r3
 800cfde:	464b      	mov	r3, r9
 800cfe0:	bfa8      	it	ge
 800cfe2:	4643      	movge	r3, r8
 800cfe4:	42bb      	cmp	r3, r7
 800cfe6:	bfa8      	it	ge
 800cfe8:	463b      	movge	r3, r7
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bfc2      	ittt	gt
 800cfee:	eba8 0803 	subgt.w	r8, r8, r3
 800cff2:	1aff      	subgt	r7, r7, r3
 800cff4:	eba9 0903 	subgt.w	r9, r9, r3
 800cff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	dd17      	ble.n	800d02e <_strtod_l+0x75e>
 800cffe:	4631      	mov	r1, r6
 800d000:	461a      	mov	r2, r3
 800d002:	4620      	mov	r0, r4
 800d004:	f001 ff42 	bl	800ee8c <__pow5mult>
 800d008:	4606      	mov	r6, r0
 800d00a:	2800      	cmp	r0, #0
 800d00c:	f43f aea8 	beq.w	800cd60 <_strtod_l+0x490>
 800d010:	4601      	mov	r1, r0
 800d012:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d014:	4620      	mov	r0, r4
 800d016:	f001 fe8f 	bl	800ed38 <__multiply>
 800d01a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f43f ae9f 	beq.w	800cd60 <_strtod_l+0x490>
 800d022:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d024:	4620      	mov	r0, r4
 800d026:	f001 fd6f 	bl	800eb08 <_Bfree>
 800d02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d02c:	9318      	str	r3, [sp, #96]	; 0x60
 800d02e:	f1b8 0f00 	cmp.w	r8, #0
 800d032:	f300 808c 	bgt.w	800d14e <_strtod_l+0x87e>
 800d036:	9b06      	ldr	r3, [sp, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	dd08      	ble.n	800d04e <_strtod_l+0x77e>
 800d03c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d03e:	9905      	ldr	r1, [sp, #20]
 800d040:	4620      	mov	r0, r4
 800d042:	f001 ff23 	bl	800ee8c <__pow5mult>
 800d046:	9005      	str	r0, [sp, #20]
 800d048:	2800      	cmp	r0, #0
 800d04a:	f43f ae89 	beq.w	800cd60 <_strtod_l+0x490>
 800d04e:	2f00      	cmp	r7, #0
 800d050:	dd08      	ble.n	800d064 <_strtod_l+0x794>
 800d052:	9905      	ldr	r1, [sp, #20]
 800d054:	463a      	mov	r2, r7
 800d056:	4620      	mov	r0, r4
 800d058:	f001 ff72 	bl	800ef40 <__lshift>
 800d05c:	9005      	str	r0, [sp, #20]
 800d05e:	2800      	cmp	r0, #0
 800d060:	f43f ae7e 	beq.w	800cd60 <_strtod_l+0x490>
 800d064:	f1b9 0f00 	cmp.w	r9, #0
 800d068:	dd08      	ble.n	800d07c <_strtod_l+0x7ac>
 800d06a:	4631      	mov	r1, r6
 800d06c:	464a      	mov	r2, r9
 800d06e:	4620      	mov	r0, r4
 800d070:	f001 ff66 	bl	800ef40 <__lshift>
 800d074:	4606      	mov	r6, r0
 800d076:	2800      	cmp	r0, #0
 800d078:	f43f ae72 	beq.w	800cd60 <_strtod_l+0x490>
 800d07c:	9a05      	ldr	r2, [sp, #20]
 800d07e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d080:	4620      	mov	r0, r4
 800d082:	f001 ffe9 	bl	800f058 <__mdiff>
 800d086:	4605      	mov	r5, r0
 800d088:	2800      	cmp	r0, #0
 800d08a:	f43f ae69 	beq.w	800cd60 <_strtod_l+0x490>
 800d08e:	68c3      	ldr	r3, [r0, #12]
 800d090:	930b      	str	r3, [sp, #44]	; 0x2c
 800d092:	2300      	movs	r3, #0
 800d094:	60c3      	str	r3, [r0, #12]
 800d096:	4631      	mov	r1, r6
 800d098:	f001 ffc2 	bl	800f020 <__mcmp>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	da60      	bge.n	800d162 <_strtod_l+0x892>
 800d0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0a2:	ea53 030a 	orrs.w	r3, r3, sl
 800d0a6:	f040 8082 	bne.w	800d1ae <_strtod_l+0x8de>
 800d0aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d17d      	bne.n	800d1ae <_strtod_l+0x8de>
 800d0b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d0b6:	0d1b      	lsrs	r3, r3, #20
 800d0b8:	051b      	lsls	r3, r3, #20
 800d0ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d0be:	d976      	bls.n	800d1ae <_strtod_l+0x8de>
 800d0c0:	696b      	ldr	r3, [r5, #20]
 800d0c2:	b913      	cbnz	r3, 800d0ca <_strtod_l+0x7fa>
 800d0c4:	692b      	ldr	r3, [r5, #16]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	dd71      	ble.n	800d1ae <_strtod_l+0x8de>
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f001 ff36 	bl	800ef40 <__lshift>
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	f001 ffa2 	bl	800f020 <__mcmp>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	dd66      	ble.n	800d1ae <_strtod_l+0x8de>
 800d0e0:	9904      	ldr	r1, [sp, #16]
 800d0e2:	4a53      	ldr	r2, [pc, #332]	; (800d230 <_strtod_l+0x960>)
 800d0e4:	465b      	mov	r3, fp
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	f000 8081 	beq.w	800d1ee <_strtod_l+0x91e>
 800d0ec:	ea02 010b 	and.w	r1, r2, fp
 800d0f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d0f4:	dc7b      	bgt.n	800d1ee <_strtod_l+0x91e>
 800d0f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d0fa:	f77f aea9 	ble.w	800ce50 <_strtod_l+0x580>
 800d0fe:	4b4d      	ldr	r3, [pc, #308]	; (800d234 <_strtod_l+0x964>)
 800d100:	4650      	mov	r0, sl
 800d102:	4659      	mov	r1, fp
 800d104:	2200      	movs	r2, #0
 800d106:	f7f3 faa7 	bl	8000658 <__aeabi_dmul>
 800d10a:	460b      	mov	r3, r1
 800d10c:	4303      	orrs	r3, r0
 800d10e:	bf08      	it	eq
 800d110:	2322      	moveq	r3, #34	; 0x22
 800d112:	4682      	mov	sl, r0
 800d114:	468b      	mov	fp, r1
 800d116:	bf08      	it	eq
 800d118:	6023      	streq	r3, [r4, #0]
 800d11a:	e62b      	b.n	800cd74 <_strtod_l+0x4a4>
 800d11c:	f04f 32ff 	mov.w	r2, #4294967295
 800d120:	fa02 f303 	lsl.w	r3, r2, r3
 800d124:	ea03 0a0a 	and.w	sl, r3, sl
 800d128:	e6e3      	b.n	800cef2 <_strtod_l+0x622>
 800d12a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d12e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d13a:	fa01 f308 	lsl.w	r3, r1, r8
 800d13e:	9308      	str	r3, [sp, #32]
 800d140:	910d      	str	r1, [sp, #52]	; 0x34
 800d142:	e746      	b.n	800cfd2 <_strtod_l+0x702>
 800d144:	2300      	movs	r3, #0
 800d146:	9308      	str	r3, [sp, #32]
 800d148:	2301      	movs	r3, #1
 800d14a:	930d      	str	r3, [sp, #52]	; 0x34
 800d14c:	e741      	b.n	800cfd2 <_strtod_l+0x702>
 800d14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d150:	4642      	mov	r2, r8
 800d152:	4620      	mov	r0, r4
 800d154:	f001 fef4 	bl	800ef40 <__lshift>
 800d158:	9018      	str	r0, [sp, #96]	; 0x60
 800d15a:	2800      	cmp	r0, #0
 800d15c:	f47f af6b 	bne.w	800d036 <_strtod_l+0x766>
 800d160:	e5fe      	b.n	800cd60 <_strtod_l+0x490>
 800d162:	465f      	mov	r7, fp
 800d164:	d16e      	bne.n	800d244 <_strtod_l+0x974>
 800d166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d16c:	b342      	cbz	r2, 800d1c0 <_strtod_l+0x8f0>
 800d16e:	4a32      	ldr	r2, [pc, #200]	; (800d238 <_strtod_l+0x968>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d128      	bne.n	800d1c6 <_strtod_l+0x8f6>
 800d174:	9b04      	ldr	r3, [sp, #16]
 800d176:	4651      	mov	r1, sl
 800d178:	b1eb      	cbz	r3, 800d1b6 <_strtod_l+0x8e6>
 800d17a:	4b2d      	ldr	r3, [pc, #180]	; (800d230 <_strtod_l+0x960>)
 800d17c:	403b      	ands	r3, r7
 800d17e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d182:	f04f 32ff 	mov.w	r2, #4294967295
 800d186:	d819      	bhi.n	800d1bc <_strtod_l+0x8ec>
 800d188:	0d1b      	lsrs	r3, r3, #20
 800d18a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d18e:	fa02 f303 	lsl.w	r3, r2, r3
 800d192:	4299      	cmp	r1, r3
 800d194:	d117      	bne.n	800d1c6 <_strtod_l+0x8f6>
 800d196:	4b29      	ldr	r3, [pc, #164]	; (800d23c <_strtod_l+0x96c>)
 800d198:	429f      	cmp	r7, r3
 800d19a:	d102      	bne.n	800d1a2 <_strtod_l+0x8d2>
 800d19c:	3101      	adds	r1, #1
 800d19e:	f43f addf 	beq.w	800cd60 <_strtod_l+0x490>
 800d1a2:	4b23      	ldr	r3, [pc, #140]	; (800d230 <_strtod_l+0x960>)
 800d1a4:	403b      	ands	r3, r7
 800d1a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d1aa:	f04f 0a00 	mov.w	sl, #0
 800d1ae:	9b04      	ldr	r3, [sp, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1a4      	bne.n	800d0fe <_strtod_l+0x82e>
 800d1b4:	e5de      	b.n	800cd74 <_strtod_l+0x4a4>
 800d1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ba:	e7ea      	b.n	800d192 <_strtod_l+0x8c2>
 800d1bc:	4613      	mov	r3, r2
 800d1be:	e7e8      	b.n	800d192 <_strtod_l+0x8c2>
 800d1c0:	ea53 030a 	orrs.w	r3, r3, sl
 800d1c4:	d08c      	beq.n	800d0e0 <_strtod_l+0x810>
 800d1c6:	9b08      	ldr	r3, [sp, #32]
 800d1c8:	b1db      	cbz	r3, 800d202 <_strtod_l+0x932>
 800d1ca:	423b      	tst	r3, r7
 800d1cc:	d0ef      	beq.n	800d1ae <_strtod_l+0x8de>
 800d1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1d0:	9a04      	ldr	r2, [sp, #16]
 800d1d2:	4650      	mov	r0, sl
 800d1d4:	4659      	mov	r1, fp
 800d1d6:	b1c3      	cbz	r3, 800d20a <_strtod_l+0x93a>
 800d1d8:	f7ff fb5b 	bl	800c892 <sulp>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	ec51 0b18 	vmov	r0, r1, d8
 800d1e4:	f7f3 f882 	bl	80002ec <__adddf3>
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	468b      	mov	fp, r1
 800d1ec:	e7df      	b.n	800d1ae <_strtod_l+0x8de>
 800d1ee:	4013      	ands	r3, r2
 800d1f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d1f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d1f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d200:	e7d5      	b.n	800d1ae <_strtod_l+0x8de>
 800d202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d204:	ea13 0f0a 	tst.w	r3, sl
 800d208:	e7e0      	b.n	800d1cc <_strtod_l+0x8fc>
 800d20a:	f7ff fb42 	bl	800c892 <sulp>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	ec51 0b18 	vmov	r0, r1, d8
 800d216:	f7f3 f867 	bl	80002e8 <__aeabi_dsub>
 800d21a:	2200      	movs	r2, #0
 800d21c:	2300      	movs	r3, #0
 800d21e:	4682      	mov	sl, r0
 800d220:	468b      	mov	fp, r1
 800d222:	f7f3 fc81 	bl	8000b28 <__aeabi_dcmpeq>
 800d226:	2800      	cmp	r0, #0
 800d228:	d0c1      	beq.n	800d1ae <_strtod_l+0x8de>
 800d22a:	e611      	b.n	800ce50 <_strtod_l+0x580>
 800d22c:	fffffc02 	.word	0xfffffc02
 800d230:	7ff00000 	.word	0x7ff00000
 800d234:	39500000 	.word	0x39500000
 800d238:	000fffff 	.word	0x000fffff
 800d23c:	7fefffff 	.word	0x7fefffff
 800d240:	08012a60 	.word	0x08012a60
 800d244:	4631      	mov	r1, r6
 800d246:	4628      	mov	r0, r5
 800d248:	f002 f868 	bl	800f31c <__ratio>
 800d24c:	ec59 8b10 	vmov	r8, r9, d0
 800d250:	ee10 0a10 	vmov	r0, s0
 800d254:	2200      	movs	r2, #0
 800d256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d25a:	4649      	mov	r1, r9
 800d25c:	f7f3 fc78 	bl	8000b50 <__aeabi_dcmple>
 800d260:	2800      	cmp	r0, #0
 800d262:	d07a      	beq.n	800d35a <_strtod_l+0xa8a>
 800d264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d266:	2b00      	cmp	r3, #0
 800d268:	d04a      	beq.n	800d300 <_strtod_l+0xa30>
 800d26a:	4b95      	ldr	r3, [pc, #596]	; (800d4c0 <_strtod_l+0xbf0>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d272:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d4c0 <_strtod_l+0xbf0>
 800d276:	f04f 0800 	mov.w	r8, #0
 800d27a:	4b92      	ldr	r3, [pc, #584]	; (800d4c4 <_strtod_l+0xbf4>)
 800d27c:	403b      	ands	r3, r7
 800d27e:	930d      	str	r3, [sp, #52]	; 0x34
 800d280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d282:	4b91      	ldr	r3, [pc, #580]	; (800d4c8 <_strtod_l+0xbf8>)
 800d284:	429a      	cmp	r2, r3
 800d286:	f040 80b0 	bne.w	800d3ea <_strtod_l+0xb1a>
 800d28a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d28e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d292:	ec4b ab10 	vmov	d0, sl, fp
 800d296:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d29a:	f001 ff67 	bl	800f16c <__ulp>
 800d29e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2a2:	ec53 2b10 	vmov	r2, r3, d0
 800d2a6:	f7f3 f9d7 	bl	8000658 <__aeabi_dmul>
 800d2aa:	4652      	mov	r2, sl
 800d2ac:	465b      	mov	r3, fp
 800d2ae:	f7f3 f81d 	bl	80002ec <__adddf3>
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	4983      	ldr	r1, [pc, #524]	; (800d4c4 <_strtod_l+0xbf4>)
 800d2b6:	4a85      	ldr	r2, [pc, #532]	; (800d4cc <_strtod_l+0xbfc>)
 800d2b8:	4019      	ands	r1, r3
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	4682      	mov	sl, r0
 800d2be:	d960      	bls.n	800d382 <_strtod_l+0xab2>
 800d2c0:	ee18 3a90 	vmov	r3, s17
 800d2c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d104      	bne.n	800d2d6 <_strtod_l+0xa06>
 800d2cc:	ee18 3a10 	vmov	r3, s16
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	f43f ad45 	beq.w	800cd60 <_strtod_l+0x490>
 800d2d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d4d8 <_strtod_l+0xc08>
 800d2da:	f04f 3aff 	mov.w	sl, #4294967295
 800d2de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f001 fc11 	bl	800eb08 <_Bfree>
 800d2e6:	9905      	ldr	r1, [sp, #20]
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f001 fc0d 	bl	800eb08 <_Bfree>
 800d2ee:	4631      	mov	r1, r6
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f001 fc09 	bl	800eb08 <_Bfree>
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f001 fc05 	bl	800eb08 <_Bfree>
 800d2fe:	e61a      	b.n	800cf36 <_strtod_l+0x666>
 800d300:	f1ba 0f00 	cmp.w	sl, #0
 800d304:	d11b      	bne.n	800d33e <_strtod_l+0xa6e>
 800d306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d30a:	b9f3      	cbnz	r3, 800d34a <_strtod_l+0xa7a>
 800d30c:	4b6c      	ldr	r3, [pc, #432]	; (800d4c0 <_strtod_l+0xbf0>)
 800d30e:	2200      	movs	r2, #0
 800d310:	4640      	mov	r0, r8
 800d312:	4649      	mov	r1, r9
 800d314:	f7f3 fc12 	bl	8000b3c <__aeabi_dcmplt>
 800d318:	b9d0      	cbnz	r0, 800d350 <_strtod_l+0xa80>
 800d31a:	4640      	mov	r0, r8
 800d31c:	4649      	mov	r1, r9
 800d31e:	4b6c      	ldr	r3, [pc, #432]	; (800d4d0 <_strtod_l+0xc00>)
 800d320:	2200      	movs	r2, #0
 800d322:	f7f3 f999 	bl	8000658 <__aeabi_dmul>
 800d326:	4680      	mov	r8, r0
 800d328:	4689      	mov	r9, r1
 800d32a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d32e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d332:	9315      	str	r3, [sp, #84]	; 0x54
 800d334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d33c:	e79d      	b.n	800d27a <_strtod_l+0x9aa>
 800d33e:	f1ba 0f01 	cmp.w	sl, #1
 800d342:	d102      	bne.n	800d34a <_strtod_l+0xa7a>
 800d344:	2f00      	cmp	r7, #0
 800d346:	f43f ad83 	beq.w	800ce50 <_strtod_l+0x580>
 800d34a:	4b62      	ldr	r3, [pc, #392]	; (800d4d4 <_strtod_l+0xc04>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	e78e      	b.n	800d26e <_strtod_l+0x99e>
 800d350:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d4d0 <_strtod_l+0xc00>
 800d354:	f04f 0800 	mov.w	r8, #0
 800d358:	e7e7      	b.n	800d32a <_strtod_l+0xa5a>
 800d35a:	4b5d      	ldr	r3, [pc, #372]	; (800d4d0 <_strtod_l+0xc00>)
 800d35c:	4640      	mov	r0, r8
 800d35e:	4649      	mov	r1, r9
 800d360:	2200      	movs	r2, #0
 800d362:	f7f3 f979 	bl	8000658 <__aeabi_dmul>
 800d366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d368:	4680      	mov	r8, r0
 800d36a:	4689      	mov	r9, r1
 800d36c:	b933      	cbnz	r3, 800d37c <_strtod_l+0xaac>
 800d36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d372:	900e      	str	r0, [sp, #56]	; 0x38
 800d374:	930f      	str	r3, [sp, #60]	; 0x3c
 800d376:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d37a:	e7dd      	b.n	800d338 <_strtod_l+0xa68>
 800d37c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d380:	e7f9      	b.n	800d376 <_strtod_l+0xaa6>
 800d382:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1a8      	bne.n	800d2de <_strtod_l+0xa0e>
 800d38c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d392:	0d1b      	lsrs	r3, r3, #20
 800d394:	051b      	lsls	r3, r3, #20
 800d396:	429a      	cmp	r2, r3
 800d398:	d1a1      	bne.n	800d2de <_strtod_l+0xa0e>
 800d39a:	4640      	mov	r0, r8
 800d39c:	4649      	mov	r1, r9
 800d39e:	f7f3 fe19 	bl	8000fd4 <__aeabi_d2lz>
 800d3a2:	f7f3 f92b 	bl	80005fc <__aeabi_l2d>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	4640      	mov	r0, r8
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	f7f2 ff9b 	bl	80002e8 <__aeabi_dsub>
 800d3b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3b8:	ea43 030a 	orr.w	r3, r3, sl
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	4680      	mov	r8, r0
 800d3c0:	4689      	mov	r9, r1
 800d3c2:	d055      	beq.n	800d470 <_strtod_l+0xba0>
 800d3c4:	a336      	add	r3, pc, #216	; (adr r3, 800d4a0 <_strtod_l+0xbd0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f3 fbb7 	bl	8000b3c <__aeabi_dcmplt>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	f47f acd0 	bne.w	800cd74 <_strtod_l+0x4a4>
 800d3d4:	a334      	add	r3, pc, #208	; (adr r3, 800d4a8 <_strtod_l+0xbd8>)
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	4640      	mov	r0, r8
 800d3dc:	4649      	mov	r1, r9
 800d3de:	f7f3 fbcb 	bl	8000b78 <__aeabi_dcmpgt>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f43f af7b 	beq.w	800d2de <_strtod_l+0xa0e>
 800d3e8:	e4c4      	b.n	800cd74 <_strtod_l+0x4a4>
 800d3ea:	9b04      	ldr	r3, [sp, #16]
 800d3ec:	b333      	cbz	r3, 800d43c <_strtod_l+0xb6c>
 800d3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d3f4:	d822      	bhi.n	800d43c <_strtod_l+0xb6c>
 800d3f6:	a32e      	add	r3, pc, #184	; (adr r3, 800d4b0 <_strtod_l+0xbe0>)
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	4649      	mov	r1, r9
 800d400:	f7f3 fba6 	bl	8000b50 <__aeabi_dcmple>
 800d404:	b1a0      	cbz	r0, 800d430 <_strtod_l+0xb60>
 800d406:	4649      	mov	r1, r9
 800d408:	4640      	mov	r0, r8
 800d40a:	f7f3 fbfd 	bl	8000c08 <__aeabi_d2uiz>
 800d40e:	2801      	cmp	r0, #1
 800d410:	bf38      	it	cc
 800d412:	2001      	movcc	r0, #1
 800d414:	f7f3 f8a6 	bl	8000564 <__aeabi_ui2d>
 800d418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d41a:	4680      	mov	r8, r0
 800d41c:	4689      	mov	r9, r1
 800d41e:	bb23      	cbnz	r3, 800d46a <_strtod_l+0xb9a>
 800d420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d424:	9010      	str	r0, [sp, #64]	; 0x40
 800d426:	9311      	str	r3, [sp, #68]	; 0x44
 800d428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d42c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d434:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d438:	1a9b      	subs	r3, r3, r2
 800d43a:	9309      	str	r3, [sp, #36]	; 0x24
 800d43c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d440:	eeb0 0a48 	vmov.f32	s0, s16
 800d444:	eef0 0a68 	vmov.f32	s1, s17
 800d448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d44c:	f001 fe8e 	bl	800f16c <__ulp>
 800d450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d454:	ec53 2b10 	vmov	r2, r3, d0
 800d458:	f7f3 f8fe 	bl	8000658 <__aeabi_dmul>
 800d45c:	ec53 2b18 	vmov	r2, r3, d8
 800d460:	f7f2 ff44 	bl	80002ec <__adddf3>
 800d464:	4682      	mov	sl, r0
 800d466:	468b      	mov	fp, r1
 800d468:	e78d      	b.n	800d386 <_strtod_l+0xab6>
 800d46a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d46e:	e7db      	b.n	800d428 <_strtod_l+0xb58>
 800d470:	a311      	add	r3, pc, #68	; (adr r3, 800d4b8 <_strtod_l+0xbe8>)
 800d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d476:	f7f3 fb61 	bl	8000b3c <__aeabi_dcmplt>
 800d47a:	e7b2      	b.n	800d3e2 <_strtod_l+0xb12>
 800d47c:	2300      	movs	r3, #0
 800d47e:	930a      	str	r3, [sp, #40]	; 0x28
 800d480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	f7ff ba6b 	b.w	800c960 <_strtod_l+0x90>
 800d48a:	2a65      	cmp	r2, #101	; 0x65
 800d48c:	f43f ab5f 	beq.w	800cb4e <_strtod_l+0x27e>
 800d490:	2a45      	cmp	r2, #69	; 0x45
 800d492:	f43f ab5c 	beq.w	800cb4e <_strtod_l+0x27e>
 800d496:	2301      	movs	r3, #1
 800d498:	f7ff bb94 	b.w	800cbc4 <_strtod_l+0x2f4>
 800d49c:	f3af 8000 	nop.w
 800d4a0:	94a03595 	.word	0x94a03595
 800d4a4:	3fdfffff 	.word	0x3fdfffff
 800d4a8:	35afe535 	.word	0x35afe535
 800d4ac:	3fe00000 	.word	0x3fe00000
 800d4b0:	ffc00000 	.word	0xffc00000
 800d4b4:	41dfffff 	.word	0x41dfffff
 800d4b8:	94a03595 	.word	0x94a03595
 800d4bc:	3fcfffff 	.word	0x3fcfffff
 800d4c0:	3ff00000 	.word	0x3ff00000
 800d4c4:	7ff00000 	.word	0x7ff00000
 800d4c8:	7fe00000 	.word	0x7fe00000
 800d4cc:	7c9fffff 	.word	0x7c9fffff
 800d4d0:	3fe00000 	.word	0x3fe00000
 800d4d4:	bff00000 	.word	0xbff00000
 800d4d8:	7fefffff 	.word	0x7fefffff

0800d4dc <_strtod_r>:
 800d4dc:	4b01      	ldr	r3, [pc, #4]	; (800d4e4 <_strtod_r+0x8>)
 800d4de:	f7ff b9f7 	b.w	800c8d0 <_strtod_l>
 800d4e2:	bf00      	nop
 800d4e4:	2000007c 	.word	0x2000007c

0800d4e8 <_strtol_l.constprop.0>:
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ee:	d001      	beq.n	800d4f4 <_strtol_l.constprop.0+0xc>
 800d4f0:	2b24      	cmp	r3, #36	; 0x24
 800d4f2:	d906      	bls.n	800d502 <_strtol_l.constprop.0+0x1a>
 800d4f4:	f7fe fa6c 	bl	800b9d0 <__errno>
 800d4f8:	2316      	movs	r3, #22
 800d4fa:	6003      	str	r3, [r0, #0]
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d502:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d5e8 <_strtol_l.constprop.0+0x100>
 800d506:	460d      	mov	r5, r1
 800d508:	462e      	mov	r6, r5
 800d50a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d50e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d512:	f017 0708 	ands.w	r7, r7, #8
 800d516:	d1f7      	bne.n	800d508 <_strtol_l.constprop.0+0x20>
 800d518:	2c2d      	cmp	r4, #45	; 0x2d
 800d51a:	d132      	bne.n	800d582 <_strtol_l.constprop.0+0x9a>
 800d51c:	782c      	ldrb	r4, [r5, #0]
 800d51e:	2701      	movs	r7, #1
 800d520:	1cb5      	adds	r5, r6, #2
 800d522:	2b00      	cmp	r3, #0
 800d524:	d05b      	beq.n	800d5de <_strtol_l.constprop.0+0xf6>
 800d526:	2b10      	cmp	r3, #16
 800d528:	d109      	bne.n	800d53e <_strtol_l.constprop.0+0x56>
 800d52a:	2c30      	cmp	r4, #48	; 0x30
 800d52c:	d107      	bne.n	800d53e <_strtol_l.constprop.0+0x56>
 800d52e:	782c      	ldrb	r4, [r5, #0]
 800d530:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d534:	2c58      	cmp	r4, #88	; 0x58
 800d536:	d14d      	bne.n	800d5d4 <_strtol_l.constprop.0+0xec>
 800d538:	786c      	ldrb	r4, [r5, #1]
 800d53a:	2310      	movs	r3, #16
 800d53c:	3502      	adds	r5, #2
 800d53e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d542:	f108 38ff 	add.w	r8, r8, #4294967295
 800d546:	f04f 0c00 	mov.w	ip, #0
 800d54a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d54e:	4666      	mov	r6, ip
 800d550:	fb03 8a19 	mls	sl, r3, r9, r8
 800d554:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d558:	f1be 0f09 	cmp.w	lr, #9
 800d55c:	d816      	bhi.n	800d58c <_strtol_l.constprop.0+0xa4>
 800d55e:	4674      	mov	r4, lr
 800d560:	42a3      	cmp	r3, r4
 800d562:	dd24      	ble.n	800d5ae <_strtol_l.constprop.0+0xc6>
 800d564:	f1bc 0f00 	cmp.w	ip, #0
 800d568:	db1e      	blt.n	800d5a8 <_strtol_l.constprop.0+0xc0>
 800d56a:	45b1      	cmp	r9, r6
 800d56c:	d31c      	bcc.n	800d5a8 <_strtol_l.constprop.0+0xc0>
 800d56e:	d101      	bne.n	800d574 <_strtol_l.constprop.0+0x8c>
 800d570:	45a2      	cmp	sl, r4
 800d572:	db19      	blt.n	800d5a8 <_strtol_l.constprop.0+0xc0>
 800d574:	fb06 4603 	mla	r6, r6, r3, r4
 800d578:	f04f 0c01 	mov.w	ip, #1
 800d57c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d580:	e7e8      	b.n	800d554 <_strtol_l.constprop.0+0x6c>
 800d582:	2c2b      	cmp	r4, #43	; 0x2b
 800d584:	bf04      	itt	eq
 800d586:	782c      	ldrbeq	r4, [r5, #0]
 800d588:	1cb5      	addeq	r5, r6, #2
 800d58a:	e7ca      	b.n	800d522 <_strtol_l.constprop.0+0x3a>
 800d58c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d590:	f1be 0f19 	cmp.w	lr, #25
 800d594:	d801      	bhi.n	800d59a <_strtol_l.constprop.0+0xb2>
 800d596:	3c37      	subs	r4, #55	; 0x37
 800d598:	e7e2      	b.n	800d560 <_strtol_l.constprop.0+0x78>
 800d59a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d59e:	f1be 0f19 	cmp.w	lr, #25
 800d5a2:	d804      	bhi.n	800d5ae <_strtol_l.constprop.0+0xc6>
 800d5a4:	3c57      	subs	r4, #87	; 0x57
 800d5a6:	e7db      	b.n	800d560 <_strtol_l.constprop.0+0x78>
 800d5a8:	f04f 3cff 	mov.w	ip, #4294967295
 800d5ac:	e7e6      	b.n	800d57c <_strtol_l.constprop.0+0x94>
 800d5ae:	f1bc 0f00 	cmp.w	ip, #0
 800d5b2:	da05      	bge.n	800d5c0 <_strtol_l.constprop.0+0xd8>
 800d5b4:	2322      	movs	r3, #34	; 0x22
 800d5b6:	6003      	str	r3, [r0, #0]
 800d5b8:	4646      	mov	r6, r8
 800d5ba:	b942      	cbnz	r2, 800d5ce <_strtol_l.constprop.0+0xe6>
 800d5bc:	4630      	mov	r0, r6
 800d5be:	e79e      	b.n	800d4fe <_strtol_l.constprop.0+0x16>
 800d5c0:	b107      	cbz	r7, 800d5c4 <_strtol_l.constprop.0+0xdc>
 800d5c2:	4276      	negs	r6, r6
 800d5c4:	2a00      	cmp	r2, #0
 800d5c6:	d0f9      	beq.n	800d5bc <_strtol_l.constprop.0+0xd4>
 800d5c8:	f1bc 0f00 	cmp.w	ip, #0
 800d5cc:	d000      	beq.n	800d5d0 <_strtol_l.constprop.0+0xe8>
 800d5ce:	1e69      	subs	r1, r5, #1
 800d5d0:	6011      	str	r1, [r2, #0]
 800d5d2:	e7f3      	b.n	800d5bc <_strtol_l.constprop.0+0xd4>
 800d5d4:	2430      	movs	r4, #48	; 0x30
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1b1      	bne.n	800d53e <_strtol_l.constprop.0+0x56>
 800d5da:	2308      	movs	r3, #8
 800d5dc:	e7af      	b.n	800d53e <_strtol_l.constprop.0+0x56>
 800d5de:	2c30      	cmp	r4, #48	; 0x30
 800d5e0:	d0a5      	beq.n	800d52e <_strtol_l.constprop.0+0x46>
 800d5e2:	230a      	movs	r3, #10
 800d5e4:	e7ab      	b.n	800d53e <_strtol_l.constprop.0+0x56>
 800d5e6:	bf00      	nop
 800d5e8:	08012a89 	.word	0x08012a89

0800d5ec <_strtol_r>:
 800d5ec:	f7ff bf7c 	b.w	800d4e8 <_strtol_l.constprop.0>

0800d5f0 <_write_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4d07      	ldr	r5, [pc, #28]	; (800d610 <_write_r+0x20>)
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	4608      	mov	r0, r1
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	602a      	str	r2, [r5, #0]
 800d5fe:	461a      	mov	r2, r3
 800d600:	f7f8 fb1f 	bl	8005c42 <_write>
 800d604:	1c43      	adds	r3, r0, #1
 800d606:	d102      	bne.n	800d60e <_write_r+0x1e>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b103      	cbz	r3, 800d60e <_write_r+0x1e>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	20001248 	.word	0x20001248

0800d614 <_close_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d06      	ldr	r5, [pc, #24]	; (800d630 <_close_r+0x1c>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	602b      	str	r3, [r5, #0]
 800d620:	f7f8 fb2b 	bl	8005c7a <_close>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	d102      	bne.n	800d62e <_close_r+0x1a>
 800d628:	682b      	ldr	r3, [r5, #0]
 800d62a:	b103      	cbz	r3, 800d62e <_close_r+0x1a>
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	bd38      	pop	{r3, r4, r5, pc}
 800d630:	20001248 	.word	0x20001248

0800d634 <quorem>:
 800d634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d638:	6903      	ldr	r3, [r0, #16]
 800d63a:	690c      	ldr	r4, [r1, #16]
 800d63c:	42a3      	cmp	r3, r4
 800d63e:	4607      	mov	r7, r0
 800d640:	f2c0 8081 	blt.w	800d746 <quorem+0x112>
 800d644:	3c01      	subs	r4, #1
 800d646:	f101 0814 	add.w	r8, r1, #20
 800d64a:	f100 0514 	add.w	r5, r0, #20
 800d64e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d652:	9301      	str	r3, [sp, #4]
 800d654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d65c:	3301      	adds	r3, #1
 800d65e:	429a      	cmp	r2, r3
 800d660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d668:	fbb2 f6f3 	udiv	r6, r2, r3
 800d66c:	d331      	bcc.n	800d6d2 <quorem+0x9e>
 800d66e:	f04f 0e00 	mov.w	lr, #0
 800d672:	4640      	mov	r0, r8
 800d674:	46ac      	mov	ip, r5
 800d676:	46f2      	mov	sl, lr
 800d678:	f850 2b04 	ldr.w	r2, [r0], #4
 800d67c:	b293      	uxth	r3, r2
 800d67e:	fb06 e303 	mla	r3, r6, r3, lr
 800d682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d686:	b29b      	uxth	r3, r3
 800d688:	ebaa 0303 	sub.w	r3, sl, r3
 800d68c:	f8dc a000 	ldr.w	sl, [ip]
 800d690:	0c12      	lsrs	r2, r2, #16
 800d692:	fa13 f38a 	uxtah	r3, r3, sl
 800d696:	fb06 e202 	mla	r2, r6, r2, lr
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	9b00      	ldr	r3, [sp, #0]
 800d69e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6a2:	b292      	uxth	r2, r2
 800d6a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d6a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6b0:	4581      	cmp	r9, r0
 800d6b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6b6:	f84c 3b04 	str.w	r3, [ip], #4
 800d6ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6be:	d2db      	bcs.n	800d678 <quorem+0x44>
 800d6c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6c4:	b92b      	cbnz	r3, 800d6d2 <quorem+0x9e>
 800d6c6:	9b01      	ldr	r3, [sp, #4]
 800d6c8:	3b04      	subs	r3, #4
 800d6ca:	429d      	cmp	r5, r3
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	d32e      	bcc.n	800d72e <quorem+0xfa>
 800d6d0:	613c      	str	r4, [r7, #16]
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	f001 fca4 	bl	800f020 <__mcmp>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	db24      	blt.n	800d726 <quorem+0xf2>
 800d6dc:	3601      	adds	r6, #1
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f04f 0c00 	mov.w	ip, #0
 800d6e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6e8:	f8d0 e000 	ldr.w	lr, [r0]
 800d6ec:	b293      	uxth	r3, r2
 800d6ee:	ebac 0303 	sub.w	r3, ip, r3
 800d6f2:	0c12      	lsrs	r2, r2, #16
 800d6f4:	fa13 f38e 	uxtah	r3, r3, lr
 800d6f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d700:	b29b      	uxth	r3, r3
 800d702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d706:	45c1      	cmp	r9, r8
 800d708:	f840 3b04 	str.w	r3, [r0], #4
 800d70c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d710:	d2e8      	bcs.n	800d6e4 <quorem+0xb0>
 800d712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d71a:	b922      	cbnz	r2, 800d726 <quorem+0xf2>
 800d71c:	3b04      	subs	r3, #4
 800d71e:	429d      	cmp	r5, r3
 800d720:	461a      	mov	r2, r3
 800d722:	d30a      	bcc.n	800d73a <quorem+0x106>
 800d724:	613c      	str	r4, [r7, #16]
 800d726:	4630      	mov	r0, r6
 800d728:	b003      	add	sp, #12
 800d72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72e:	6812      	ldr	r2, [r2, #0]
 800d730:	3b04      	subs	r3, #4
 800d732:	2a00      	cmp	r2, #0
 800d734:	d1cc      	bne.n	800d6d0 <quorem+0x9c>
 800d736:	3c01      	subs	r4, #1
 800d738:	e7c7      	b.n	800d6ca <quorem+0x96>
 800d73a:	6812      	ldr	r2, [r2, #0]
 800d73c:	3b04      	subs	r3, #4
 800d73e:	2a00      	cmp	r2, #0
 800d740:	d1f0      	bne.n	800d724 <quorem+0xf0>
 800d742:	3c01      	subs	r4, #1
 800d744:	e7eb      	b.n	800d71e <quorem+0xea>
 800d746:	2000      	movs	r0, #0
 800d748:	e7ee      	b.n	800d728 <quorem+0xf4>
 800d74a:	0000      	movs	r0, r0
 800d74c:	0000      	movs	r0, r0
	...

0800d750 <_dtoa_r>:
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	ed2d 8b04 	vpush	{d8-d9}
 800d758:	ec57 6b10 	vmov	r6, r7, d0
 800d75c:	b093      	sub	sp, #76	; 0x4c
 800d75e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d764:	9106      	str	r1, [sp, #24]
 800d766:	ee10 aa10 	vmov	sl, s0
 800d76a:	4604      	mov	r4, r0
 800d76c:	9209      	str	r2, [sp, #36]	; 0x24
 800d76e:	930c      	str	r3, [sp, #48]	; 0x30
 800d770:	46bb      	mov	fp, r7
 800d772:	b975      	cbnz	r5, 800d792 <_dtoa_r+0x42>
 800d774:	2010      	movs	r0, #16
 800d776:	f001 f95f 	bl	800ea38 <malloc>
 800d77a:	4602      	mov	r2, r0
 800d77c:	6260      	str	r0, [r4, #36]	; 0x24
 800d77e:	b920      	cbnz	r0, 800d78a <_dtoa_r+0x3a>
 800d780:	4ba7      	ldr	r3, [pc, #668]	; (800da20 <_dtoa_r+0x2d0>)
 800d782:	21ea      	movs	r1, #234	; 0xea
 800d784:	48a7      	ldr	r0, [pc, #668]	; (800da24 <_dtoa_r+0x2d4>)
 800d786:	f002 fceb 	bl	8010160 <__assert_func>
 800d78a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d78e:	6005      	str	r5, [r0, #0]
 800d790:	60c5      	str	r5, [r0, #12]
 800d792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d794:	6819      	ldr	r1, [r3, #0]
 800d796:	b151      	cbz	r1, 800d7ae <_dtoa_r+0x5e>
 800d798:	685a      	ldr	r2, [r3, #4]
 800d79a:	604a      	str	r2, [r1, #4]
 800d79c:	2301      	movs	r3, #1
 800d79e:	4093      	lsls	r3, r2
 800d7a0:	608b      	str	r3, [r1, #8]
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f001 f9b0 	bl	800eb08 <_Bfree>
 800d7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	1e3b      	subs	r3, r7, #0
 800d7b0:	bfaa      	itet	ge
 800d7b2:	2300      	movge	r3, #0
 800d7b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d7b8:	f8c8 3000 	strge.w	r3, [r8]
 800d7bc:	4b9a      	ldr	r3, [pc, #616]	; (800da28 <_dtoa_r+0x2d8>)
 800d7be:	bfbc      	itt	lt
 800d7c0:	2201      	movlt	r2, #1
 800d7c2:	f8c8 2000 	strlt.w	r2, [r8]
 800d7c6:	ea33 030b 	bics.w	r3, r3, fp
 800d7ca:	d11b      	bne.n	800d804 <_dtoa_r+0xb4>
 800d7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7d2:	6013      	str	r3, [r2, #0]
 800d7d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7d8:	4333      	orrs	r3, r6
 800d7da:	f000 8592 	beq.w	800e302 <_dtoa_r+0xbb2>
 800d7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7e0:	b963      	cbnz	r3, 800d7fc <_dtoa_r+0xac>
 800d7e2:	4b92      	ldr	r3, [pc, #584]	; (800da2c <_dtoa_r+0x2dc>)
 800d7e4:	e022      	b.n	800d82c <_dtoa_r+0xdc>
 800d7e6:	4b92      	ldr	r3, [pc, #584]	; (800da30 <_dtoa_r+0x2e0>)
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7ee:	6013      	str	r3, [r2, #0]
 800d7f0:	9801      	ldr	r0, [sp, #4]
 800d7f2:	b013      	add	sp, #76	; 0x4c
 800d7f4:	ecbd 8b04 	vpop	{d8-d9}
 800d7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fc:	4b8b      	ldr	r3, [pc, #556]	; (800da2c <_dtoa_r+0x2dc>)
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	3303      	adds	r3, #3
 800d802:	e7f3      	b.n	800d7ec <_dtoa_r+0x9c>
 800d804:	2200      	movs	r2, #0
 800d806:	2300      	movs	r3, #0
 800d808:	4650      	mov	r0, sl
 800d80a:	4659      	mov	r1, fp
 800d80c:	f7f3 f98c 	bl	8000b28 <__aeabi_dcmpeq>
 800d810:	ec4b ab19 	vmov	d9, sl, fp
 800d814:	4680      	mov	r8, r0
 800d816:	b158      	cbz	r0, 800d830 <_dtoa_r+0xe0>
 800d818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d81a:	2301      	movs	r3, #1
 800d81c:	6013      	str	r3, [r2, #0]
 800d81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 856b 	beq.w	800e2fc <_dtoa_r+0xbac>
 800d826:	4883      	ldr	r0, [pc, #524]	; (800da34 <_dtoa_r+0x2e4>)
 800d828:	6018      	str	r0, [r3, #0]
 800d82a:	1e43      	subs	r3, r0, #1
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	e7df      	b.n	800d7f0 <_dtoa_r+0xa0>
 800d830:	ec4b ab10 	vmov	d0, sl, fp
 800d834:	aa10      	add	r2, sp, #64	; 0x40
 800d836:	a911      	add	r1, sp, #68	; 0x44
 800d838:	4620      	mov	r0, r4
 800d83a:	f001 fd13 	bl	800f264 <__d2b>
 800d83e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d842:	ee08 0a10 	vmov	s16, r0
 800d846:	2d00      	cmp	r5, #0
 800d848:	f000 8084 	beq.w	800d954 <_dtoa_r+0x204>
 800d84c:	ee19 3a90 	vmov	r3, s19
 800d850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d854:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d858:	4656      	mov	r6, sl
 800d85a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d85e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d862:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d866:	4b74      	ldr	r3, [pc, #464]	; (800da38 <_dtoa_r+0x2e8>)
 800d868:	2200      	movs	r2, #0
 800d86a:	4630      	mov	r0, r6
 800d86c:	4639      	mov	r1, r7
 800d86e:	f7f2 fd3b 	bl	80002e8 <__aeabi_dsub>
 800d872:	a365      	add	r3, pc, #404	; (adr r3, 800da08 <_dtoa_r+0x2b8>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	f7f2 feee 	bl	8000658 <__aeabi_dmul>
 800d87c:	a364      	add	r3, pc, #400	; (adr r3, 800da10 <_dtoa_r+0x2c0>)
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f7f2 fd33 	bl	80002ec <__adddf3>
 800d886:	4606      	mov	r6, r0
 800d888:	4628      	mov	r0, r5
 800d88a:	460f      	mov	r7, r1
 800d88c:	f7f2 fe7a 	bl	8000584 <__aeabi_i2d>
 800d890:	a361      	add	r3, pc, #388	; (adr r3, 800da18 <_dtoa_r+0x2c8>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f2 fedf 	bl	8000658 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4630      	mov	r0, r6
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	f7f2 fd23 	bl	80002ec <__adddf3>
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	460f      	mov	r7, r1
 800d8aa:	f7f3 f985 	bl	8000bb8 <__aeabi_d2iz>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	9000      	str	r0, [sp, #0]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	f7f3 f940 	bl	8000b3c <__aeabi_dcmplt>
 800d8bc:	b150      	cbz	r0, 800d8d4 <_dtoa_r+0x184>
 800d8be:	9800      	ldr	r0, [sp, #0]
 800d8c0:	f7f2 fe60 	bl	8000584 <__aeabi_i2d>
 800d8c4:	4632      	mov	r2, r6
 800d8c6:	463b      	mov	r3, r7
 800d8c8:	f7f3 f92e 	bl	8000b28 <__aeabi_dcmpeq>
 800d8cc:	b910      	cbnz	r0, 800d8d4 <_dtoa_r+0x184>
 800d8ce:	9b00      	ldr	r3, [sp, #0]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	9b00      	ldr	r3, [sp, #0]
 800d8d6:	2b16      	cmp	r3, #22
 800d8d8:	d85a      	bhi.n	800d990 <_dtoa_r+0x240>
 800d8da:	9a00      	ldr	r2, [sp, #0]
 800d8dc:	4b57      	ldr	r3, [pc, #348]	; (800da3c <_dtoa_r+0x2ec>)
 800d8de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	ec51 0b19 	vmov	r0, r1, d9
 800d8ea:	f7f3 f927 	bl	8000b3c <__aeabi_dcmplt>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d050      	beq.n	800d994 <_dtoa_r+0x244>
 800d8f2:	9b00      	ldr	r3, [sp, #0]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8fe:	1b5d      	subs	r5, r3, r5
 800d900:	1e6b      	subs	r3, r5, #1
 800d902:	9305      	str	r3, [sp, #20]
 800d904:	bf45      	ittet	mi
 800d906:	f1c5 0301 	rsbmi	r3, r5, #1
 800d90a:	9304      	strmi	r3, [sp, #16]
 800d90c:	2300      	movpl	r3, #0
 800d90e:	2300      	movmi	r3, #0
 800d910:	bf4c      	ite	mi
 800d912:	9305      	strmi	r3, [sp, #20]
 800d914:	9304      	strpl	r3, [sp, #16]
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	db3d      	blt.n	800d998 <_dtoa_r+0x248>
 800d91c:	9b05      	ldr	r3, [sp, #20]
 800d91e:	9a00      	ldr	r2, [sp, #0]
 800d920:	920a      	str	r2, [sp, #40]	; 0x28
 800d922:	4413      	add	r3, r2
 800d924:	9305      	str	r3, [sp, #20]
 800d926:	2300      	movs	r3, #0
 800d928:	9307      	str	r3, [sp, #28]
 800d92a:	9b06      	ldr	r3, [sp, #24]
 800d92c:	2b09      	cmp	r3, #9
 800d92e:	f200 8089 	bhi.w	800da44 <_dtoa_r+0x2f4>
 800d932:	2b05      	cmp	r3, #5
 800d934:	bfc4      	itt	gt
 800d936:	3b04      	subgt	r3, #4
 800d938:	9306      	strgt	r3, [sp, #24]
 800d93a:	9b06      	ldr	r3, [sp, #24]
 800d93c:	f1a3 0302 	sub.w	r3, r3, #2
 800d940:	bfcc      	ite	gt
 800d942:	2500      	movgt	r5, #0
 800d944:	2501      	movle	r5, #1
 800d946:	2b03      	cmp	r3, #3
 800d948:	f200 8087 	bhi.w	800da5a <_dtoa_r+0x30a>
 800d94c:	e8df f003 	tbb	[pc, r3]
 800d950:	59383a2d 	.word	0x59383a2d
 800d954:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d958:	441d      	add	r5, r3
 800d95a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d95e:	2b20      	cmp	r3, #32
 800d960:	bfc1      	itttt	gt
 800d962:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d966:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d96a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d96e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d972:	bfda      	itte	le
 800d974:	f1c3 0320 	rsble	r3, r3, #32
 800d978:	fa06 f003 	lslle.w	r0, r6, r3
 800d97c:	4318      	orrgt	r0, r3
 800d97e:	f7f2 fdf1 	bl	8000564 <__aeabi_ui2d>
 800d982:	2301      	movs	r3, #1
 800d984:	4606      	mov	r6, r0
 800d986:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d98a:	3d01      	subs	r5, #1
 800d98c:	930e      	str	r3, [sp, #56]	; 0x38
 800d98e:	e76a      	b.n	800d866 <_dtoa_r+0x116>
 800d990:	2301      	movs	r3, #1
 800d992:	e7b2      	b.n	800d8fa <_dtoa_r+0x1aa>
 800d994:	900b      	str	r0, [sp, #44]	; 0x2c
 800d996:	e7b1      	b.n	800d8fc <_dtoa_r+0x1ac>
 800d998:	9b04      	ldr	r3, [sp, #16]
 800d99a:	9a00      	ldr	r2, [sp, #0]
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	9304      	str	r3, [sp, #16]
 800d9a0:	4253      	negs	r3, r2
 800d9a2:	9307      	str	r3, [sp, #28]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9a8:	e7bf      	b.n	800d92a <_dtoa_r+0x1da>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	9308      	str	r3, [sp, #32]
 800d9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	dc55      	bgt.n	800da60 <_dtoa_r+0x310>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d9be:	e00c      	b.n	800d9da <_dtoa_r+0x28a>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e7f3      	b.n	800d9ac <_dtoa_r+0x25c>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c8:	9308      	str	r3, [sp, #32]
 800d9ca:	9b00      	ldr	r3, [sp, #0]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	9302      	str	r3, [sp, #8]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	9303      	str	r3, [sp, #12]
 800d9d6:	bfb8      	it	lt
 800d9d8:	2301      	movlt	r3, #1
 800d9da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9dc:	2200      	movs	r2, #0
 800d9de:	6042      	str	r2, [r0, #4]
 800d9e0:	2204      	movs	r2, #4
 800d9e2:	f102 0614 	add.w	r6, r2, #20
 800d9e6:	429e      	cmp	r6, r3
 800d9e8:	6841      	ldr	r1, [r0, #4]
 800d9ea:	d93d      	bls.n	800da68 <_dtoa_r+0x318>
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f001 f84b 	bl	800ea88 <_Balloc>
 800d9f2:	9001      	str	r0, [sp, #4]
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d13b      	bne.n	800da70 <_dtoa_r+0x320>
 800d9f8:	4b11      	ldr	r3, [pc, #68]	; (800da40 <_dtoa_r+0x2f0>)
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da00:	e6c0      	b.n	800d784 <_dtoa_r+0x34>
 800da02:	2301      	movs	r3, #1
 800da04:	e7df      	b.n	800d9c6 <_dtoa_r+0x276>
 800da06:	bf00      	nop
 800da08:	636f4361 	.word	0x636f4361
 800da0c:	3fd287a7 	.word	0x3fd287a7
 800da10:	8b60c8b3 	.word	0x8b60c8b3
 800da14:	3fc68a28 	.word	0x3fc68a28
 800da18:	509f79fb 	.word	0x509f79fb
 800da1c:	3fd34413 	.word	0x3fd34413
 800da20:	08012b96 	.word	0x08012b96
 800da24:	08012bad 	.word	0x08012bad
 800da28:	7ff00000 	.word	0x7ff00000
 800da2c:	08012b92 	.word	0x08012b92
 800da30:	08012b89 	.word	0x08012b89
 800da34:	08012e02 	.word	0x08012e02
 800da38:	3ff80000 	.word	0x3ff80000
 800da3c:	08012d18 	.word	0x08012d18
 800da40:	08012c08 	.word	0x08012c08
 800da44:	2501      	movs	r5, #1
 800da46:	2300      	movs	r3, #0
 800da48:	9306      	str	r3, [sp, #24]
 800da4a:	9508      	str	r5, [sp, #32]
 800da4c:	f04f 33ff 	mov.w	r3, #4294967295
 800da50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da54:	2200      	movs	r2, #0
 800da56:	2312      	movs	r3, #18
 800da58:	e7b0      	b.n	800d9bc <_dtoa_r+0x26c>
 800da5a:	2301      	movs	r3, #1
 800da5c:	9308      	str	r3, [sp, #32]
 800da5e:	e7f5      	b.n	800da4c <_dtoa_r+0x2fc>
 800da60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da66:	e7b8      	b.n	800d9da <_dtoa_r+0x28a>
 800da68:	3101      	adds	r1, #1
 800da6a:	6041      	str	r1, [r0, #4]
 800da6c:	0052      	lsls	r2, r2, #1
 800da6e:	e7b8      	b.n	800d9e2 <_dtoa_r+0x292>
 800da70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da72:	9a01      	ldr	r2, [sp, #4]
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	9b03      	ldr	r3, [sp, #12]
 800da78:	2b0e      	cmp	r3, #14
 800da7a:	f200 809d 	bhi.w	800dbb8 <_dtoa_r+0x468>
 800da7e:	2d00      	cmp	r5, #0
 800da80:	f000 809a 	beq.w	800dbb8 <_dtoa_r+0x468>
 800da84:	9b00      	ldr	r3, [sp, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	dd32      	ble.n	800daf0 <_dtoa_r+0x3a0>
 800da8a:	4ab7      	ldr	r2, [pc, #732]	; (800dd68 <_dtoa_r+0x618>)
 800da8c:	f003 030f 	and.w	r3, r3, #15
 800da90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da98:	9b00      	ldr	r3, [sp, #0]
 800da9a:	05d8      	lsls	r0, r3, #23
 800da9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800daa0:	d516      	bpl.n	800dad0 <_dtoa_r+0x380>
 800daa2:	4bb2      	ldr	r3, [pc, #712]	; (800dd6c <_dtoa_r+0x61c>)
 800daa4:	ec51 0b19 	vmov	r0, r1, d9
 800daa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800daac:	f7f2 fefe 	bl	80008ac <__aeabi_ddiv>
 800dab0:	f007 070f 	and.w	r7, r7, #15
 800dab4:	4682      	mov	sl, r0
 800dab6:	468b      	mov	fp, r1
 800dab8:	2503      	movs	r5, #3
 800daba:	4eac      	ldr	r6, [pc, #688]	; (800dd6c <_dtoa_r+0x61c>)
 800dabc:	b957      	cbnz	r7, 800dad4 <_dtoa_r+0x384>
 800dabe:	4642      	mov	r2, r8
 800dac0:	464b      	mov	r3, r9
 800dac2:	4650      	mov	r0, sl
 800dac4:	4659      	mov	r1, fp
 800dac6:	f7f2 fef1 	bl	80008ac <__aeabi_ddiv>
 800daca:	4682      	mov	sl, r0
 800dacc:	468b      	mov	fp, r1
 800dace:	e028      	b.n	800db22 <_dtoa_r+0x3d2>
 800dad0:	2502      	movs	r5, #2
 800dad2:	e7f2      	b.n	800daba <_dtoa_r+0x36a>
 800dad4:	07f9      	lsls	r1, r7, #31
 800dad6:	d508      	bpl.n	800daea <_dtoa_r+0x39a>
 800dad8:	4640      	mov	r0, r8
 800dada:	4649      	mov	r1, r9
 800dadc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dae0:	f7f2 fdba 	bl	8000658 <__aeabi_dmul>
 800dae4:	3501      	adds	r5, #1
 800dae6:	4680      	mov	r8, r0
 800dae8:	4689      	mov	r9, r1
 800daea:	107f      	asrs	r7, r7, #1
 800daec:	3608      	adds	r6, #8
 800daee:	e7e5      	b.n	800dabc <_dtoa_r+0x36c>
 800daf0:	f000 809b 	beq.w	800dc2a <_dtoa_r+0x4da>
 800daf4:	9b00      	ldr	r3, [sp, #0]
 800daf6:	4f9d      	ldr	r7, [pc, #628]	; (800dd6c <_dtoa_r+0x61c>)
 800daf8:	425e      	negs	r6, r3
 800dafa:	4b9b      	ldr	r3, [pc, #620]	; (800dd68 <_dtoa_r+0x618>)
 800dafc:	f006 020f 	and.w	r2, r6, #15
 800db00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	ec51 0b19 	vmov	r0, r1, d9
 800db0c:	f7f2 fda4 	bl	8000658 <__aeabi_dmul>
 800db10:	1136      	asrs	r6, r6, #4
 800db12:	4682      	mov	sl, r0
 800db14:	468b      	mov	fp, r1
 800db16:	2300      	movs	r3, #0
 800db18:	2502      	movs	r5, #2
 800db1a:	2e00      	cmp	r6, #0
 800db1c:	d17a      	bne.n	800dc14 <_dtoa_r+0x4c4>
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1d3      	bne.n	800daca <_dtoa_r+0x37a>
 800db22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 8082 	beq.w	800dc2e <_dtoa_r+0x4de>
 800db2a:	4b91      	ldr	r3, [pc, #580]	; (800dd70 <_dtoa_r+0x620>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	4650      	mov	r0, sl
 800db30:	4659      	mov	r1, fp
 800db32:	f7f3 f803 	bl	8000b3c <__aeabi_dcmplt>
 800db36:	2800      	cmp	r0, #0
 800db38:	d079      	beq.n	800dc2e <_dtoa_r+0x4de>
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d076      	beq.n	800dc2e <_dtoa_r+0x4de>
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	dd36      	ble.n	800dbb4 <_dtoa_r+0x464>
 800db46:	9b00      	ldr	r3, [sp, #0]
 800db48:	4650      	mov	r0, sl
 800db4a:	4659      	mov	r1, fp
 800db4c:	1e5f      	subs	r7, r3, #1
 800db4e:	2200      	movs	r2, #0
 800db50:	4b88      	ldr	r3, [pc, #544]	; (800dd74 <_dtoa_r+0x624>)
 800db52:	f7f2 fd81 	bl	8000658 <__aeabi_dmul>
 800db56:	9e02      	ldr	r6, [sp, #8]
 800db58:	4682      	mov	sl, r0
 800db5a:	468b      	mov	fp, r1
 800db5c:	3501      	adds	r5, #1
 800db5e:	4628      	mov	r0, r5
 800db60:	f7f2 fd10 	bl	8000584 <__aeabi_i2d>
 800db64:	4652      	mov	r2, sl
 800db66:	465b      	mov	r3, fp
 800db68:	f7f2 fd76 	bl	8000658 <__aeabi_dmul>
 800db6c:	4b82      	ldr	r3, [pc, #520]	; (800dd78 <_dtoa_r+0x628>)
 800db6e:	2200      	movs	r2, #0
 800db70:	f7f2 fbbc 	bl	80002ec <__adddf3>
 800db74:	46d0      	mov	r8, sl
 800db76:	46d9      	mov	r9, fp
 800db78:	4682      	mov	sl, r0
 800db7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db7e:	2e00      	cmp	r6, #0
 800db80:	d158      	bne.n	800dc34 <_dtoa_r+0x4e4>
 800db82:	4b7e      	ldr	r3, [pc, #504]	; (800dd7c <_dtoa_r+0x62c>)
 800db84:	2200      	movs	r2, #0
 800db86:	4640      	mov	r0, r8
 800db88:	4649      	mov	r1, r9
 800db8a:	f7f2 fbad 	bl	80002e8 <__aeabi_dsub>
 800db8e:	4652      	mov	r2, sl
 800db90:	465b      	mov	r3, fp
 800db92:	4680      	mov	r8, r0
 800db94:	4689      	mov	r9, r1
 800db96:	f7f2 ffef 	bl	8000b78 <__aeabi_dcmpgt>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	f040 8295 	bne.w	800e0ca <_dtoa_r+0x97a>
 800dba0:	4652      	mov	r2, sl
 800dba2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dba6:	4640      	mov	r0, r8
 800dba8:	4649      	mov	r1, r9
 800dbaa:	f7f2 ffc7 	bl	8000b3c <__aeabi_dcmplt>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	f040 8289 	bne.w	800e0c6 <_dtoa_r+0x976>
 800dbb4:	ec5b ab19 	vmov	sl, fp, d9
 800dbb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f2c0 8148 	blt.w	800de50 <_dtoa_r+0x700>
 800dbc0:	9a00      	ldr	r2, [sp, #0]
 800dbc2:	2a0e      	cmp	r2, #14
 800dbc4:	f300 8144 	bgt.w	800de50 <_dtoa_r+0x700>
 800dbc8:	4b67      	ldr	r3, [pc, #412]	; (800dd68 <_dtoa_r+0x618>)
 800dbca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f280 80d5 	bge.w	800dd84 <_dtoa_r+0x634>
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f300 80d1 	bgt.w	800dd84 <_dtoa_r+0x634>
 800dbe2:	f040 826f 	bne.w	800e0c4 <_dtoa_r+0x974>
 800dbe6:	4b65      	ldr	r3, [pc, #404]	; (800dd7c <_dtoa_r+0x62c>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	f7f2 fd33 	bl	8000658 <__aeabi_dmul>
 800dbf2:	4652      	mov	r2, sl
 800dbf4:	465b      	mov	r3, fp
 800dbf6:	f7f2 ffb5 	bl	8000b64 <__aeabi_dcmpge>
 800dbfa:	9e03      	ldr	r6, [sp, #12]
 800dbfc:	4637      	mov	r7, r6
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	f040 8245 	bne.w	800e08e <_dtoa_r+0x93e>
 800dc04:	9d01      	ldr	r5, [sp, #4]
 800dc06:	2331      	movs	r3, #49	; 0x31
 800dc08:	f805 3b01 	strb.w	r3, [r5], #1
 800dc0c:	9b00      	ldr	r3, [sp, #0]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	e240      	b.n	800e096 <_dtoa_r+0x946>
 800dc14:	07f2      	lsls	r2, r6, #31
 800dc16:	d505      	bpl.n	800dc24 <_dtoa_r+0x4d4>
 800dc18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc1c:	f7f2 fd1c 	bl	8000658 <__aeabi_dmul>
 800dc20:	3501      	adds	r5, #1
 800dc22:	2301      	movs	r3, #1
 800dc24:	1076      	asrs	r6, r6, #1
 800dc26:	3708      	adds	r7, #8
 800dc28:	e777      	b.n	800db1a <_dtoa_r+0x3ca>
 800dc2a:	2502      	movs	r5, #2
 800dc2c:	e779      	b.n	800db22 <_dtoa_r+0x3d2>
 800dc2e:	9f00      	ldr	r7, [sp, #0]
 800dc30:	9e03      	ldr	r6, [sp, #12]
 800dc32:	e794      	b.n	800db5e <_dtoa_r+0x40e>
 800dc34:	9901      	ldr	r1, [sp, #4]
 800dc36:	4b4c      	ldr	r3, [pc, #304]	; (800dd68 <_dtoa_r+0x618>)
 800dc38:	4431      	add	r1, r6
 800dc3a:	910d      	str	r1, [sp, #52]	; 0x34
 800dc3c:	9908      	ldr	r1, [sp, #32]
 800dc3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc46:	2900      	cmp	r1, #0
 800dc48:	d043      	beq.n	800dcd2 <_dtoa_r+0x582>
 800dc4a:	494d      	ldr	r1, [pc, #308]	; (800dd80 <_dtoa_r+0x630>)
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f7f2 fe2d 	bl	80008ac <__aeabi_ddiv>
 800dc52:	4652      	mov	r2, sl
 800dc54:	465b      	mov	r3, fp
 800dc56:	f7f2 fb47 	bl	80002e8 <__aeabi_dsub>
 800dc5a:	9d01      	ldr	r5, [sp, #4]
 800dc5c:	4682      	mov	sl, r0
 800dc5e:	468b      	mov	fp, r1
 800dc60:	4649      	mov	r1, r9
 800dc62:	4640      	mov	r0, r8
 800dc64:	f7f2 ffa8 	bl	8000bb8 <__aeabi_d2iz>
 800dc68:	4606      	mov	r6, r0
 800dc6a:	f7f2 fc8b 	bl	8000584 <__aeabi_i2d>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4640      	mov	r0, r8
 800dc74:	4649      	mov	r1, r9
 800dc76:	f7f2 fb37 	bl	80002e8 <__aeabi_dsub>
 800dc7a:	3630      	adds	r6, #48	; 0x30
 800dc7c:	f805 6b01 	strb.w	r6, [r5], #1
 800dc80:	4652      	mov	r2, sl
 800dc82:	465b      	mov	r3, fp
 800dc84:	4680      	mov	r8, r0
 800dc86:	4689      	mov	r9, r1
 800dc88:	f7f2 ff58 	bl	8000b3c <__aeabi_dcmplt>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d163      	bne.n	800dd58 <_dtoa_r+0x608>
 800dc90:	4642      	mov	r2, r8
 800dc92:	464b      	mov	r3, r9
 800dc94:	4936      	ldr	r1, [pc, #216]	; (800dd70 <_dtoa_r+0x620>)
 800dc96:	2000      	movs	r0, #0
 800dc98:	f7f2 fb26 	bl	80002e8 <__aeabi_dsub>
 800dc9c:	4652      	mov	r2, sl
 800dc9e:	465b      	mov	r3, fp
 800dca0:	f7f2 ff4c 	bl	8000b3c <__aeabi_dcmplt>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	f040 80b5 	bne.w	800de14 <_dtoa_r+0x6c4>
 800dcaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcac:	429d      	cmp	r5, r3
 800dcae:	d081      	beq.n	800dbb4 <_dtoa_r+0x464>
 800dcb0:	4b30      	ldr	r3, [pc, #192]	; (800dd74 <_dtoa_r+0x624>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	4659      	mov	r1, fp
 800dcb8:	f7f2 fcce 	bl	8000658 <__aeabi_dmul>
 800dcbc:	4b2d      	ldr	r3, [pc, #180]	; (800dd74 <_dtoa_r+0x624>)
 800dcbe:	4682      	mov	sl, r0
 800dcc0:	468b      	mov	fp, r1
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f7f2 fcc6 	bl	8000658 <__aeabi_dmul>
 800dccc:	4680      	mov	r8, r0
 800dcce:	4689      	mov	r9, r1
 800dcd0:	e7c6      	b.n	800dc60 <_dtoa_r+0x510>
 800dcd2:	4650      	mov	r0, sl
 800dcd4:	4659      	mov	r1, fp
 800dcd6:	f7f2 fcbf 	bl	8000658 <__aeabi_dmul>
 800dcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcdc:	9d01      	ldr	r5, [sp, #4]
 800dcde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dce0:	4682      	mov	sl, r0
 800dce2:	468b      	mov	fp, r1
 800dce4:	4649      	mov	r1, r9
 800dce6:	4640      	mov	r0, r8
 800dce8:	f7f2 ff66 	bl	8000bb8 <__aeabi_d2iz>
 800dcec:	4606      	mov	r6, r0
 800dcee:	f7f2 fc49 	bl	8000584 <__aeabi_i2d>
 800dcf2:	3630      	adds	r6, #48	; 0x30
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	f7f2 faf4 	bl	80002e8 <__aeabi_dsub>
 800dd00:	f805 6b01 	strb.w	r6, [r5], #1
 800dd04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd06:	429d      	cmp	r5, r3
 800dd08:	4680      	mov	r8, r0
 800dd0a:	4689      	mov	r9, r1
 800dd0c:	f04f 0200 	mov.w	r2, #0
 800dd10:	d124      	bne.n	800dd5c <_dtoa_r+0x60c>
 800dd12:	4b1b      	ldr	r3, [pc, #108]	; (800dd80 <_dtoa_r+0x630>)
 800dd14:	4650      	mov	r0, sl
 800dd16:	4659      	mov	r1, fp
 800dd18:	f7f2 fae8 	bl	80002ec <__adddf3>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	4640      	mov	r0, r8
 800dd22:	4649      	mov	r1, r9
 800dd24:	f7f2 ff28 	bl	8000b78 <__aeabi_dcmpgt>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d173      	bne.n	800de14 <_dtoa_r+0x6c4>
 800dd2c:	4652      	mov	r2, sl
 800dd2e:	465b      	mov	r3, fp
 800dd30:	4913      	ldr	r1, [pc, #76]	; (800dd80 <_dtoa_r+0x630>)
 800dd32:	2000      	movs	r0, #0
 800dd34:	f7f2 fad8 	bl	80002e8 <__aeabi_dsub>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4640      	mov	r0, r8
 800dd3e:	4649      	mov	r1, r9
 800dd40:	f7f2 fefc 	bl	8000b3c <__aeabi_dcmplt>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	f43f af35 	beq.w	800dbb4 <_dtoa_r+0x464>
 800dd4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd4c:	1e6b      	subs	r3, r5, #1
 800dd4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd54:	2b30      	cmp	r3, #48	; 0x30
 800dd56:	d0f8      	beq.n	800dd4a <_dtoa_r+0x5fa>
 800dd58:	9700      	str	r7, [sp, #0]
 800dd5a:	e049      	b.n	800ddf0 <_dtoa_r+0x6a0>
 800dd5c:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <_dtoa_r+0x624>)
 800dd5e:	f7f2 fc7b 	bl	8000658 <__aeabi_dmul>
 800dd62:	4680      	mov	r8, r0
 800dd64:	4689      	mov	r9, r1
 800dd66:	e7bd      	b.n	800dce4 <_dtoa_r+0x594>
 800dd68:	08012d18 	.word	0x08012d18
 800dd6c:	08012cf0 	.word	0x08012cf0
 800dd70:	3ff00000 	.word	0x3ff00000
 800dd74:	40240000 	.word	0x40240000
 800dd78:	401c0000 	.word	0x401c0000
 800dd7c:	40140000 	.word	0x40140000
 800dd80:	3fe00000 	.word	0x3fe00000
 800dd84:	9d01      	ldr	r5, [sp, #4]
 800dd86:	4656      	mov	r6, sl
 800dd88:	465f      	mov	r7, fp
 800dd8a:	4642      	mov	r2, r8
 800dd8c:	464b      	mov	r3, r9
 800dd8e:	4630      	mov	r0, r6
 800dd90:	4639      	mov	r1, r7
 800dd92:	f7f2 fd8b 	bl	80008ac <__aeabi_ddiv>
 800dd96:	f7f2 ff0f 	bl	8000bb8 <__aeabi_d2iz>
 800dd9a:	4682      	mov	sl, r0
 800dd9c:	f7f2 fbf2 	bl	8000584 <__aeabi_i2d>
 800dda0:	4642      	mov	r2, r8
 800dda2:	464b      	mov	r3, r9
 800dda4:	f7f2 fc58 	bl	8000658 <__aeabi_dmul>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4630      	mov	r0, r6
 800ddae:	4639      	mov	r1, r7
 800ddb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ddb4:	f7f2 fa98 	bl	80002e8 <__aeabi_dsub>
 800ddb8:	f805 6b01 	strb.w	r6, [r5], #1
 800ddbc:	9e01      	ldr	r6, [sp, #4]
 800ddbe:	9f03      	ldr	r7, [sp, #12]
 800ddc0:	1bae      	subs	r6, r5, r6
 800ddc2:	42b7      	cmp	r7, r6
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	d135      	bne.n	800de36 <_dtoa_r+0x6e6>
 800ddca:	f7f2 fa8f 	bl	80002ec <__adddf3>
 800ddce:	4642      	mov	r2, r8
 800ddd0:	464b      	mov	r3, r9
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	f7f2 fecf 	bl	8000b78 <__aeabi_dcmpgt>
 800ddda:	b9d0      	cbnz	r0, 800de12 <_dtoa_r+0x6c2>
 800dddc:	4642      	mov	r2, r8
 800ddde:	464b      	mov	r3, r9
 800dde0:	4630      	mov	r0, r6
 800dde2:	4639      	mov	r1, r7
 800dde4:	f7f2 fea0 	bl	8000b28 <__aeabi_dcmpeq>
 800dde8:	b110      	cbz	r0, 800ddf0 <_dtoa_r+0x6a0>
 800ddea:	f01a 0f01 	tst.w	sl, #1
 800ddee:	d110      	bne.n	800de12 <_dtoa_r+0x6c2>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	ee18 1a10 	vmov	r1, s16
 800ddf6:	f000 fe87 	bl	800eb08 <_Bfree>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9800      	ldr	r0, [sp, #0]
 800ddfe:	702b      	strb	r3, [r5, #0]
 800de00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de02:	3001      	adds	r0, #1
 800de04:	6018      	str	r0, [r3, #0]
 800de06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f43f acf1 	beq.w	800d7f0 <_dtoa_r+0xa0>
 800de0e:	601d      	str	r5, [r3, #0]
 800de10:	e4ee      	b.n	800d7f0 <_dtoa_r+0xa0>
 800de12:	9f00      	ldr	r7, [sp, #0]
 800de14:	462b      	mov	r3, r5
 800de16:	461d      	mov	r5, r3
 800de18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de1c:	2a39      	cmp	r2, #57	; 0x39
 800de1e:	d106      	bne.n	800de2e <_dtoa_r+0x6de>
 800de20:	9a01      	ldr	r2, [sp, #4]
 800de22:	429a      	cmp	r2, r3
 800de24:	d1f7      	bne.n	800de16 <_dtoa_r+0x6c6>
 800de26:	9901      	ldr	r1, [sp, #4]
 800de28:	2230      	movs	r2, #48	; 0x30
 800de2a:	3701      	adds	r7, #1
 800de2c:	700a      	strb	r2, [r1, #0]
 800de2e:	781a      	ldrb	r2, [r3, #0]
 800de30:	3201      	adds	r2, #1
 800de32:	701a      	strb	r2, [r3, #0]
 800de34:	e790      	b.n	800dd58 <_dtoa_r+0x608>
 800de36:	4ba6      	ldr	r3, [pc, #664]	; (800e0d0 <_dtoa_r+0x980>)
 800de38:	2200      	movs	r2, #0
 800de3a:	f7f2 fc0d 	bl	8000658 <__aeabi_dmul>
 800de3e:	2200      	movs	r2, #0
 800de40:	2300      	movs	r3, #0
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	f7f2 fe6f 	bl	8000b28 <__aeabi_dcmpeq>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d09d      	beq.n	800dd8a <_dtoa_r+0x63a>
 800de4e:	e7cf      	b.n	800ddf0 <_dtoa_r+0x6a0>
 800de50:	9a08      	ldr	r2, [sp, #32]
 800de52:	2a00      	cmp	r2, #0
 800de54:	f000 80d7 	beq.w	800e006 <_dtoa_r+0x8b6>
 800de58:	9a06      	ldr	r2, [sp, #24]
 800de5a:	2a01      	cmp	r2, #1
 800de5c:	f300 80ba 	bgt.w	800dfd4 <_dtoa_r+0x884>
 800de60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de62:	2a00      	cmp	r2, #0
 800de64:	f000 80b2 	beq.w	800dfcc <_dtoa_r+0x87c>
 800de68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de6c:	9e07      	ldr	r6, [sp, #28]
 800de6e:	9d04      	ldr	r5, [sp, #16]
 800de70:	9a04      	ldr	r2, [sp, #16]
 800de72:	441a      	add	r2, r3
 800de74:	9204      	str	r2, [sp, #16]
 800de76:	9a05      	ldr	r2, [sp, #20]
 800de78:	2101      	movs	r1, #1
 800de7a:	441a      	add	r2, r3
 800de7c:	4620      	mov	r0, r4
 800de7e:	9205      	str	r2, [sp, #20]
 800de80:	f000 ff44 	bl	800ed0c <__i2b>
 800de84:	4607      	mov	r7, r0
 800de86:	2d00      	cmp	r5, #0
 800de88:	dd0c      	ble.n	800dea4 <_dtoa_r+0x754>
 800de8a:	9b05      	ldr	r3, [sp, #20]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	dd09      	ble.n	800dea4 <_dtoa_r+0x754>
 800de90:	42ab      	cmp	r3, r5
 800de92:	9a04      	ldr	r2, [sp, #16]
 800de94:	bfa8      	it	ge
 800de96:	462b      	movge	r3, r5
 800de98:	1ad2      	subs	r2, r2, r3
 800de9a:	9204      	str	r2, [sp, #16]
 800de9c:	9a05      	ldr	r2, [sp, #20]
 800de9e:	1aed      	subs	r5, r5, r3
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	9305      	str	r3, [sp, #20]
 800dea4:	9b07      	ldr	r3, [sp, #28]
 800dea6:	b31b      	cbz	r3, 800def0 <_dtoa_r+0x7a0>
 800dea8:	9b08      	ldr	r3, [sp, #32]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 80af 	beq.w	800e00e <_dtoa_r+0x8be>
 800deb0:	2e00      	cmp	r6, #0
 800deb2:	dd13      	ble.n	800dedc <_dtoa_r+0x78c>
 800deb4:	4639      	mov	r1, r7
 800deb6:	4632      	mov	r2, r6
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 ffe7 	bl	800ee8c <__pow5mult>
 800debe:	ee18 2a10 	vmov	r2, s16
 800dec2:	4601      	mov	r1, r0
 800dec4:	4607      	mov	r7, r0
 800dec6:	4620      	mov	r0, r4
 800dec8:	f000 ff36 	bl	800ed38 <__multiply>
 800decc:	ee18 1a10 	vmov	r1, s16
 800ded0:	4680      	mov	r8, r0
 800ded2:	4620      	mov	r0, r4
 800ded4:	f000 fe18 	bl	800eb08 <_Bfree>
 800ded8:	ee08 8a10 	vmov	s16, r8
 800dedc:	9b07      	ldr	r3, [sp, #28]
 800dede:	1b9a      	subs	r2, r3, r6
 800dee0:	d006      	beq.n	800def0 <_dtoa_r+0x7a0>
 800dee2:	ee18 1a10 	vmov	r1, s16
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 ffd0 	bl	800ee8c <__pow5mult>
 800deec:	ee08 0a10 	vmov	s16, r0
 800def0:	2101      	movs	r1, #1
 800def2:	4620      	mov	r0, r4
 800def4:	f000 ff0a 	bl	800ed0c <__i2b>
 800def8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defa:	2b00      	cmp	r3, #0
 800defc:	4606      	mov	r6, r0
 800defe:	f340 8088 	ble.w	800e012 <_dtoa_r+0x8c2>
 800df02:	461a      	mov	r2, r3
 800df04:	4601      	mov	r1, r0
 800df06:	4620      	mov	r0, r4
 800df08:	f000 ffc0 	bl	800ee8c <__pow5mult>
 800df0c:	9b06      	ldr	r3, [sp, #24]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	4606      	mov	r6, r0
 800df12:	f340 8081 	ble.w	800e018 <_dtoa_r+0x8c8>
 800df16:	f04f 0800 	mov.w	r8, #0
 800df1a:	6933      	ldr	r3, [r6, #16]
 800df1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df20:	6918      	ldr	r0, [r3, #16]
 800df22:	f000 fea3 	bl	800ec6c <__hi0bits>
 800df26:	f1c0 0020 	rsb	r0, r0, #32
 800df2a:	9b05      	ldr	r3, [sp, #20]
 800df2c:	4418      	add	r0, r3
 800df2e:	f010 001f 	ands.w	r0, r0, #31
 800df32:	f000 8092 	beq.w	800e05a <_dtoa_r+0x90a>
 800df36:	f1c0 0320 	rsb	r3, r0, #32
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	f340 808a 	ble.w	800e054 <_dtoa_r+0x904>
 800df40:	f1c0 001c 	rsb	r0, r0, #28
 800df44:	9b04      	ldr	r3, [sp, #16]
 800df46:	4403      	add	r3, r0
 800df48:	9304      	str	r3, [sp, #16]
 800df4a:	9b05      	ldr	r3, [sp, #20]
 800df4c:	4403      	add	r3, r0
 800df4e:	4405      	add	r5, r0
 800df50:	9305      	str	r3, [sp, #20]
 800df52:	9b04      	ldr	r3, [sp, #16]
 800df54:	2b00      	cmp	r3, #0
 800df56:	dd07      	ble.n	800df68 <_dtoa_r+0x818>
 800df58:	ee18 1a10 	vmov	r1, s16
 800df5c:	461a      	mov	r2, r3
 800df5e:	4620      	mov	r0, r4
 800df60:	f000 ffee 	bl	800ef40 <__lshift>
 800df64:	ee08 0a10 	vmov	s16, r0
 800df68:	9b05      	ldr	r3, [sp, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dd05      	ble.n	800df7a <_dtoa_r+0x82a>
 800df6e:	4631      	mov	r1, r6
 800df70:	461a      	mov	r2, r3
 800df72:	4620      	mov	r0, r4
 800df74:	f000 ffe4 	bl	800ef40 <__lshift>
 800df78:	4606      	mov	r6, r0
 800df7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d06e      	beq.n	800e05e <_dtoa_r+0x90e>
 800df80:	ee18 0a10 	vmov	r0, s16
 800df84:	4631      	mov	r1, r6
 800df86:	f001 f84b 	bl	800f020 <__mcmp>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	da67      	bge.n	800e05e <_dtoa_r+0x90e>
 800df8e:	9b00      	ldr	r3, [sp, #0]
 800df90:	3b01      	subs	r3, #1
 800df92:	ee18 1a10 	vmov	r1, s16
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	220a      	movs	r2, #10
 800df9a:	2300      	movs	r3, #0
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fdd5 	bl	800eb4c <__multadd>
 800dfa2:	9b08      	ldr	r3, [sp, #32]
 800dfa4:	ee08 0a10 	vmov	s16, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 81b1 	beq.w	800e310 <_dtoa_r+0xbc0>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	220a      	movs	r2, #10
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f000 fdc9 	bl	800eb4c <__multadd>
 800dfba:	9b02      	ldr	r3, [sp, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	f300 808e 	bgt.w	800e0e0 <_dtoa_r+0x990>
 800dfc4:	9b06      	ldr	r3, [sp, #24]
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	dc51      	bgt.n	800e06e <_dtoa_r+0x91e>
 800dfca:	e089      	b.n	800e0e0 <_dtoa_r+0x990>
 800dfcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dfd2:	e74b      	b.n	800de6c <_dtoa_r+0x71c>
 800dfd4:	9b03      	ldr	r3, [sp, #12]
 800dfd6:	1e5e      	subs	r6, r3, #1
 800dfd8:	9b07      	ldr	r3, [sp, #28]
 800dfda:	42b3      	cmp	r3, r6
 800dfdc:	bfbf      	itttt	lt
 800dfde:	9b07      	ldrlt	r3, [sp, #28]
 800dfe0:	9607      	strlt	r6, [sp, #28]
 800dfe2:	1af2      	sublt	r2, r6, r3
 800dfe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dfe6:	bfb6      	itet	lt
 800dfe8:	189b      	addlt	r3, r3, r2
 800dfea:	1b9e      	subge	r6, r3, r6
 800dfec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dfee:	9b03      	ldr	r3, [sp, #12]
 800dff0:	bfb8      	it	lt
 800dff2:	2600      	movlt	r6, #0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	bfb7      	itett	lt
 800dff8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dffc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e000:	1a9d      	sublt	r5, r3, r2
 800e002:	2300      	movlt	r3, #0
 800e004:	e734      	b.n	800de70 <_dtoa_r+0x720>
 800e006:	9e07      	ldr	r6, [sp, #28]
 800e008:	9d04      	ldr	r5, [sp, #16]
 800e00a:	9f08      	ldr	r7, [sp, #32]
 800e00c:	e73b      	b.n	800de86 <_dtoa_r+0x736>
 800e00e:	9a07      	ldr	r2, [sp, #28]
 800e010:	e767      	b.n	800dee2 <_dtoa_r+0x792>
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	2b01      	cmp	r3, #1
 800e016:	dc18      	bgt.n	800e04a <_dtoa_r+0x8fa>
 800e018:	f1ba 0f00 	cmp.w	sl, #0
 800e01c:	d115      	bne.n	800e04a <_dtoa_r+0x8fa>
 800e01e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e022:	b993      	cbnz	r3, 800e04a <_dtoa_r+0x8fa>
 800e024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e028:	0d1b      	lsrs	r3, r3, #20
 800e02a:	051b      	lsls	r3, r3, #20
 800e02c:	b183      	cbz	r3, 800e050 <_dtoa_r+0x900>
 800e02e:	9b04      	ldr	r3, [sp, #16]
 800e030:	3301      	adds	r3, #1
 800e032:	9304      	str	r3, [sp, #16]
 800e034:	9b05      	ldr	r3, [sp, #20]
 800e036:	3301      	adds	r3, #1
 800e038:	9305      	str	r3, [sp, #20]
 800e03a:	f04f 0801 	mov.w	r8, #1
 800e03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e040:	2b00      	cmp	r3, #0
 800e042:	f47f af6a 	bne.w	800df1a <_dtoa_r+0x7ca>
 800e046:	2001      	movs	r0, #1
 800e048:	e76f      	b.n	800df2a <_dtoa_r+0x7da>
 800e04a:	f04f 0800 	mov.w	r8, #0
 800e04e:	e7f6      	b.n	800e03e <_dtoa_r+0x8ee>
 800e050:	4698      	mov	r8, r3
 800e052:	e7f4      	b.n	800e03e <_dtoa_r+0x8ee>
 800e054:	f43f af7d 	beq.w	800df52 <_dtoa_r+0x802>
 800e058:	4618      	mov	r0, r3
 800e05a:	301c      	adds	r0, #28
 800e05c:	e772      	b.n	800df44 <_dtoa_r+0x7f4>
 800e05e:	9b03      	ldr	r3, [sp, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	dc37      	bgt.n	800e0d4 <_dtoa_r+0x984>
 800e064:	9b06      	ldr	r3, [sp, #24]
 800e066:	2b02      	cmp	r3, #2
 800e068:	dd34      	ble.n	800e0d4 <_dtoa_r+0x984>
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	9302      	str	r3, [sp, #8]
 800e06e:	9b02      	ldr	r3, [sp, #8]
 800e070:	b96b      	cbnz	r3, 800e08e <_dtoa_r+0x93e>
 800e072:	4631      	mov	r1, r6
 800e074:	2205      	movs	r2, #5
 800e076:	4620      	mov	r0, r4
 800e078:	f000 fd68 	bl	800eb4c <__multadd>
 800e07c:	4601      	mov	r1, r0
 800e07e:	4606      	mov	r6, r0
 800e080:	ee18 0a10 	vmov	r0, s16
 800e084:	f000 ffcc 	bl	800f020 <__mcmp>
 800e088:	2800      	cmp	r0, #0
 800e08a:	f73f adbb 	bgt.w	800dc04 <_dtoa_r+0x4b4>
 800e08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e090:	9d01      	ldr	r5, [sp, #4]
 800e092:	43db      	mvns	r3, r3
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	f04f 0800 	mov.w	r8, #0
 800e09a:	4631      	mov	r1, r6
 800e09c:	4620      	mov	r0, r4
 800e09e:	f000 fd33 	bl	800eb08 <_Bfree>
 800e0a2:	2f00      	cmp	r7, #0
 800e0a4:	f43f aea4 	beq.w	800ddf0 <_dtoa_r+0x6a0>
 800e0a8:	f1b8 0f00 	cmp.w	r8, #0
 800e0ac:	d005      	beq.n	800e0ba <_dtoa_r+0x96a>
 800e0ae:	45b8      	cmp	r8, r7
 800e0b0:	d003      	beq.n	800e0ba <_dtoa_r+0x96a>
 800e0b2:	4641      	mov	r1, r8
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fd27 	bl	800eb08 <_Bfree>
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f000 fd23 	bl	800eb08 <_Bfree>
 800e0c2:	e695      	b.n	800ddf0 <_dtoa_r+0x6a0>
 800e0c4:	2600      	movs	r6, #0
 800e0c6:	4637      	mov	r7, r6
 800e0c8:	e7e1      	b.n	800e08e <_dtoa_r+0x93e>
 800e0ca:	9700      	str	r7, [sp, #0]
 800e0cc:	4637      	mov	r7, r6
 800e0ce:	e599      	b.n	800dc04 <_dtoa_r+0x4b4>
 800e0d0:	40240000 	.word	0x40240000
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f000 80ca 	beq.w	800e270 <_dtoa_r+0xb20>
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	9302      	str	r3, [sp, #8]
 800e0e0:	2d00      	cmp	r5, #0
 800e0e2:	dd05      	ble.n	800e0f0 <_dtoa_r+0x9a0>
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	462a      	mov	r2, r5
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f000 ff29 	bl	800ef40 <__lshift>
 800e0ee:	4607      	mov	r7, r0
 800e0f0:	f1b8 0f00 	cmp.w	r8, #0
 800e0f4:	d05b      	beq.n	800e1ae <_dtoa_r+0xa5e>
 800e0f6:	6879      	ldr	r1, [r7, #4]
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 fcc5 	bl	800ea88 <_Balloc>
 800e0fe:	4605      	mov	r5, r0
 800e100:	b928      	cbnz	r0, 800e10e <_dtoa_r+0x9be>
 800e102:	4b87      	ldr	r3, [pc, #540]	; (800e320 <_dtoa_r+0xbd0>)
 800e104:	4602      	mov	r2, r0
 800e106:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e10a:	f7ff bb3b 	b.w	800d784 <_dtoa_r+0x34>
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	3202      	adds	r2, #2
 800e112:	0092      	lsls	r2, r2, #2
 800e114:	f107 010c 	add.w	r1, r7, #12
 800e118:	300c      	adds	r0, #12
 800e11a:	f000 fca7 	bl	800ea6c <memcpy>
 800e11e:	2201      	movs	r2, #1
 800e120:	4629      	mov	r1, r5
 800e122:	4620      	mov	r0, r4
 800e124:	f000 ff0c 	bl	800ef40 <__lshift>
 800e128:	9b01      	ldr	r3, [sp, #4]
 800e12a:	f103 0901 	add.w	r9, r3, #1
 800e12e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e132:	4413      	add	r3, r2
 800e134:	9305      	str	r3, [sp, #20]
 800e136:	f00a 0301 	and.w	r3, sl, #1
 800e13a:	46b8      	mov	r8, r7
 800e13c:	9304      	str	r3, [sp, #16]
 800e13e:	4607      	mov	r7, r0
 800e140:	4631      	mov	r1, r6
 800e142:	ee18 0a10 	vmov	r0, s16
 800e146:	f7ff fa75 	bl	800d634 <quorem>
 800e14a:	4641      	mov	r1, r8
 800e14c:	9002      	str	r0, [sp, #8]
 800e14e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e152:	ee18 0a10 	vmov	r0, s16
 800e156:	f000 ff63 	bl	800f020 <__mcmp>
 800e15a:	463a      	mov	r2, r7
 800e15c:	9003      	str	r0, [sp, #12]
 800e15e:	4631      	mov	r1, r6
 800e160:	4620      	mov	r0, r4
 800e162:	f000 ff79 	bl	800f058 <__mdiff>
 800e166:	68c2      	ldr	r2, [r0, #12]
 800e168:	f109 3bff 	add.w	fp, r9, #4294967295
 800e16c:	4605      	mov	r5, r0
 800e16e:	bb02      	cbnz	r2, 800e1b2 <_dtoa_r+0xa62>
 800e170:	4601      	mov	r1, r0
 800e172:	ee18 0a10 	vmov	r0, s16
 800e176:	f000 ff53 	bl	800f020 <__mcmp>
 800e17a:	4602      	mov	r2, r0
 800e17c:	4629      	mov	r1, r5
 800e17e:	4620      	mov	r0, r4
 800e180:	9207      	str	r2, [sp, #28]
 800e182:	f000 fcc1 	bl	800eb08 <_Bfree>
 800e186:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e18a:	ea43 0102 	orr.w	r1, r3, r2
 800e18e:	9b04      	ldr	r3, [sp, #16]
 800e190:	430b      	orrs	r3, r1
 800e192:	464d      	mov	r5, r9
 800e194:	d10f      	bne.n	800e1b6 <_dtoa_r+0xa66>
 800e196:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e19a:	d02a      	beq.n	800e1f2 <_dtoa_r+0xaa2>
 800e19c:	9b03      	ldr	r3, [sp, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	dd02      	ble.n	800e1a8 <_dtoa_r+0xa58>
 800e1a2:	9b02      	ldr	r3, [sp, #8]
 800e1a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e1a8:	f88b a000 	strb.w	sl, [fp]
 800e1ac:	e775      	b.n	800e09a <_dtoa_r+0x94a>
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	e7ba      	b.n	800e128 <_dtoa_r+0x9d8>
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	e7e2      	b.n	800e17c <_dtoa_r+0xa2c>
 800e1b6:	9b03      	ldr	r3, [sp, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	db04      	blt.n	800e1c6 <_dtoa_r+0xa76>
 800e1bc:	9906      	ldr	r1, [sp, #24]
 800e1be:	430b      	orrs	r3, r1
 800e1c0:	9904      	ldr	r1, [sp, #16]
 800e1c2:	430b      	orrs	r3, r1
 800e1c4:	d122      	bne.n	800e20c <_dtoa_r+0xabc>
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	ddee      	ble.n	800e1a8 <_dtoa_r+0xa58>
 800e1ca:	ee18 1a10 	vmov	r1, s16
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f000 feb5 	bl	800ef40 <__lshift>
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	ee08 0a10 	vmov	s16, r0
 800e1dc:	f000 ff20 	bl	800f020 <__mcmp>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	dc03      	bgt.n	800e1ec <_dtoa_r+0xa9c>
 800e1e4:	d1e0      	bne.n	800e1a8 <_dtoa_r+0xa58>
 800e1e6:	f01a 0f01 	tst.w	sl, #1
 800e1ea:	d0dd      	beq.n	800e1a8 <_dtoa_r+0xa58>
 800e1ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1f0:	d1d7      	bne.n	800e1a2 <_dtoa_r+0xa52>
 800e1f2:	2339      	movs	r3, #57	; 0x39
 800e1f4:	f88b 3000 	strb.w	r3, [fp]
 800e1f8:	462b      	mov	r3, r5
 800e1fa:	461d      	mov	r5, r3
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e202:	2a39      	cmp	r2, #57	; 0x39
 800e204:	d071      	beq.n	800e2ea <_dtoa_r+0xb9a>
 800e206:	3201      	adds	r2, #1
 800e208:	701a      	strb	r2, [r3, #0]
 800e20a:	e746      	b.n	800e09a <_dtoa_r+0x94a>
 800e20c:	2a00      	cmp	r2, #0
 800e20e:	dd07      	ble.n	800e220 <_dtoa_r+0xad0>
 800e210:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e214:	d0ed      	beq.n	800e1f2 <_dtoa_r+0xaa2>
 800e216:	f10a 0301 	add.w	r3, sl, #1
 800e21a:	f88b 3000 	strb.w	r3, [fp]
 800e21e:	e73c      	b.n	800e09a <_dtoa_r+0x94a>
 800e220:	9b05      	ldr	r3, [sp, #20]
 800e222:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e226:	4599      	cmp	r9, r3
 800e228:	d047      	beq.n	800e2ba <_dtoa_r+0xb6a>
 800e22a:	ee18 1a10 	vmov	r1, s16
 800e22e:	2300      	movs	r3, #0
 800e230:	220a      	movs	r2, #10
 800e232:	4620      	mov	r0, r4
 800e234:	f000 fc8a 	bl	800eb4c <__multadd>
 800e238:	45b8      	cmp	r8, r7
 800e23a:	ee08 0a10 	vmov	s16, r0
 800e23e:	f04f 0300 	mov.w	r3, #0
 800e242:	f04f 020a 	mov.w	r2, #10
 800e246:	4641      	mov	r1, r8
 800e248:	4620      	mov	r0, r4
 800e24a:	d106      	bne.n	800e25a <_dtoa_r+0xb0a>
 800e24c:	f000 fc7e 	bl	800eb4c <__multadd>
 800e250:	4680      	mov	r8, r0
 800e252:	4607      	mov	r7, r0
 800e254:	f109 0901 	add.w	r9, r9, #1
 800e258:	e772      	b.n	800e140 <_dtoa_r+0x9f0>
 800e25a:	f000 fc77 	bl	800eb4c <__multadd>
 800e25e:	4639      	mov	r1, r7
 800e260:	4680      	mov	r8, r0
 800e262:	2300      	movs	r3, #0
 800e264:	220a      	movs	r2, #10
 800e266:	4620      	mov	r0, r4
 800e268:	f000 fc70 	bl	800eb4c <__multadd>
 800e26c:	4607      	mov	r7, r0
 800e26e:	e7f1      	b.n	800e254 <_dtoa_r+0xb04>
 800e270:	9b03      	ldr	r3, [sp, #12]
 800e272:	9302      	str	r3, [sp, #8]
 800e274:	9d01      	ldr	r5, [sp, #4]
 800e276:	ee18 0a10 	vmov	r0, s16
 800e27a:	4631      	mov	r1, r6
 800e27c:	f7ff f9da 	bl	800d634 <quorem>
 800e280:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e284:	9b01      	ldr	r3, [sp, #4]
 800e286:	f805 ab01 	strb.w	sl, [r5], #1
 800e28a:	1aea      	subs	r2, r5, r3
 800e28c:	9b02      	ldr	r3, [sp, #8]
 800e28e:	4293      	cmp	r3, r2
 800e290:	dd09      	ble.n	800e2a6 <_dtoa_r+0xb56>
 800e292:	ee18 1a10 	vmov	r1, s16
 800e296:	2300      	movs	r3, #0
 800e298:	220a      	movs	r2, #10
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 fc56 	bl	800eb4c <__multadd>
 800e2a0:	ee08 0a10 	vmov	s16, r0
 800e2a4:	e7e7      	b.n	800e276 <_dtoa_r+0xb26>
 800e2a6:	9b02      	ldr	r3, [sp, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	bfc8      	it	gt
 800e2ac:	461d      	movgt	r5, r3
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	bfd8      	it	le
 800e2b2:	2501      	movle	r5, #1
 800e2b4:	441d      	add	r5, r3
 800e2b6:	f04f 0800 	mov.w	r8, #0
 800e2ba:	ee18 1a10 	vmov	r1, s16
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f000 fe3d 	bl	800ef40 <__lshift>
 800e2c6:	4631      	mov	r1, r6
 800e2c8:	ee08 0a10 	vmov	s16, r0
 800e2cc:	f000 fea8 	bl	800f020 <__mcmp>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	dc91      	bgt.n	800e1f8 <_dtoa_r+0xaa8>
 800e2d4:	d102      	bne.n	800e2dc <_dtoa_r+0xb8c>
 800e2d6:	f01a 0f01 	tst.w	sl, #1
 800e2da:	d18d      	bne.n	800e1f8 <_dtoa_r+0xaa8>
 800e2dc:	462b      	mov	r3, r5
 800e2de:	461d      	mov	r5, r3
 800e2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2e4:	2a30      	cmp	r2, #48	; 0x30
 800e2e6:	d0fa      	beq.n	800e2de <_dtoa_r+0xb8e>
 800e2e8:	e6d7      	b.n	800e09a <_dtoa_r+0x94a>
 800e2ea:	9a01      	ldr	r2, [sp, #4]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d184      	bne.n	800e1fa <_dtoa_r+0xaaa>
 800e2f0:	9b00      	ldr	r3, [sp, #0]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	2331      	movs	r3, #49	; 0x31
 800e2f8:	7013      	strb	r3, [r2, #0]
 800e2fa:	e6ce      	b.n	800e09a <_dtoa_r+0x94a>
 800e2fc:	4b09      	ldr	r3, [pc, #36]	; (800e324 <_dtoa_r+0xbd4>)
 800e2fe:	f7ff ba95 	b.w	800d82c <_dtoa_r+0xdc>
 800e302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e304:	2b00      	cmp	r3, #0
 800e306:	f47f aa6e 	bne.w	800d7e6 <_dtoa_r+0x96>
 800e30a:	4b07      	ldr	r3, [pc, #28]	; (800e328 <_dtoa_r+0xbd8>)
 800e30c:	f7ff ba8e 	b.w	800d82c <_dtoa_r+0xdc>
 800e310:	9b02      	ldr	r3, [sp, #8]
 800e312:	2b00      	cmp	r3, #0
 800e314:	dcae      	bgt.n	800e274 <_dtoa_r+0xb24>
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	2b02      	cmp	r3, #2
 800e31a:	f73f aea8 	bgt.w	800e06e <_dtoa_r+0x91e>
 800e31e:	e7a9      	b.n	800e274 <_dtoa_r+0xb24>
 800e320:	08012c08 	.word	0x08012c08
 800e324:	08012e01 	.word	0x08012e01
 800e328:	08012b89 	.word	0x08012b89

0800e32c <rshift>:
 800e32c:	6903      	ldr	r3, [r0, #16]
 800e32e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e336:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e33a:	f100 0414 	add.w	r4, r0, #20
 800e33e:	dd45      	ble.n	800e3cc <rshift+0xa0>
 800e340:	f011 011f 	ands.w	r1, r1, #31
 800e344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e34c:	d10c      	bne.n	800e368 <rshift+0x3c>
 800e34e:	f100 0710 	add.w	r7, r0, #16
 800e352:	4629      	mov	r1, r5
 800e354:	42b1      	cmp	r1, r6
 800e356:	d334      	bcc.n	800e3c2 <rshift+0x96>
 800e358:	1a9b      	subs	r3, r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	1eea      	subs	r2, r5, #3
 800e35e:	4296      	cmp	r6, r2
 800e360:	bf38      	it	cc
 800e362:	2300      	movcc	r3, #0
 800e364:	4423      	add	r3, r4
 800e366:	e015      	b.n	800e394 <rshift+0x68>
 800e368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e36c:	f1c1 0820 	rsb	r8, r1, #32
 800e370:	40cf      	lsrs	r7, r1
 800e372:	f105 0e04 	add.w	lr, r5, #4
 800e376:	46a1      	mov	r9, r4
 800e378:	4576      	cmp	r6, lr
 800e37a:	46f4      	mov	ip, lr
 800e37c:	d815      	bhi.n	800e3aa <rshift+0x7e>
 800e37e:	1a9a      	subs	r2, r3, r2
 800e380:	0092      	lsls	r2, r2, #2
 800e382:	3a04      	subs	r2, #4
 800e384:	3501      	adds	r5, #1
 800e386:	42ae      	cmp	r6, r5
 800e388:	bf38      	it	cc
 800e38a:	2200      	movcc	r2, #0
 800e38c:	18a3      	adds	r3, r4, r2
 800e38e:	50a7      	str	r7, [r4, r2]
 800e390:	b107      	cbz	r7, 800e394 <rshift+0x68>
 800e392:	3304      	adds	r3, #4
 800e394:	1b1a      	subs	r2, r3, r4
 800e396:	42a3      	cmp	r3, r4
 800e398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e39c:	bf08      	it	eq
 800e39e:	2300      	moveq	r3, #0
 800e3a0:	6102      	str	r2, [r0, #16]
 800e3a2:	bf08      	it	eq
 800e3a4:	6143      	streq	r3, [r0, #20]
 800e3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3aa:	f8dc c000 	ldr.w	ip, [ip]
 800e3ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800e3b2:	ea4c 0707 	orr.w	r7, ip, r7
 800e3b6:	f849 7b04 	str.w	r7, [r9], #4
 800e3ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3be:	40cf      	lsrs	r7, r1
 800e3c0:	e7da      	b.n	800e378 <rshift+0x4c>
 800e3c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e3c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e3ca:	e7c3      	b.n	800e354 <rshift+0x28>
 800e3cc:	4623      	mov	r3, r4
 800e3ce:	e7e1      	b.n	800e394 <rshift+0x68>

0800e3d0 <__hexdig_fun>:
 800e3d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e3d4:	2b09      	cmp	r3, #9
 800e3d6:	d802      	bhi.n	800e3de <__hexdig_fun+0xe>
 800e3d8:	3820      	subs	r0, #32
 800e3da:	b2c0      	uxtb	r0, r0
 800e3dc:	4770      	bx	lr
 800e3de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e3e2:	2b05      	cmp	r3, #5
 800e3e4:	d801      	bhi.n	800e3ea <__hexdig_fun+0x1a>
 800e3e6:	3847      	subs	r0, #71	; 0x47
 800e3e8:	e7f7      	b.n	800e3da <__hexdig_fun+0xa>
 800e3ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e3ee:	2b05      	cmp	r3, #5
 800e3f0:	d801      	bhi.n	800e3f6 <__hexdig_fun+0x26>
 800e3f2:	3827      	subs	r0, #39	; 0x27
 800e3f4:	e7f1      	b.n	800e3da <__hexdig_fun+0xa>
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	4770      	bx	lr
	...

0800e3fc <__gethex>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	ed2d 8b02 	vpush	{d8}
 800e404:	b089      	sub	sp, #36	; 0x24
 800e406:	ee08 0a10 	vmov	s16, r0
 800e40a:	9304      	str	r3, [sp, #16]
 800e40c:	4bb4      	ldr	r3, [pc, #720]	; (800e6e0 <__gethex+0x2e4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	4618      	mov	r0, r3
 800e414:	468b      	mov	fp, r1
 800e416:	4690      	mov	r8, r2
 800e418:	f7f1 ff04 	bl	8000224 <strlen>
 800e41c:	9b01      	ldr	r3, [sp, #4]
 800e41e:	f8db 2000 	ldr.w	r2, [fp]
 800e422:	4403      	add	r3, r0
 800e424:	4682      	mov	sl, r0
 800e426:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e42a:	9305      	str	r3, [sp, #20]
 800e42c:	1c93      	adds	r3, r2, #2
 800e42e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e432:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e436:	32fe      	adds	r2, #254	; 0xfe
 800e438:	18d1      	adds	r1, r2, r3
 800e43a:	461f      	mov	r7, r3
 800e43c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e440:	9100      	str	r1, [sp, #0]
 800e442:	2830      	cmp	r0, #48	; 0x30
 800e444:	d0f8      	beq.n	800e438 <__gethex+0x3c>
 800e446:	f7ff ffc3 	bl	800e3d0 <__hexdig_fun>
 800e44a:	4604      	mov	r4, r0
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d13a      	bne.n	800e4c6 <__gethex+0xca>
 800e450:	9901      	ldr	r1, [sp, #4]
 800e452:	4652      	mov	r2, sl
 800e454:	4638      	mov	r0, r7
 800e456:	f001 fdb3 	bl	800ffc0 <strncmp>
 800e45a:	4605      	mov	r5, r0
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d168      	bne.n	800e532 <__gethex+0x136>
 800e460:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e464:	eb07 060a 	add.w	r6, r7, sl
 800e468:	f7ff ffb2 	bl	800e3d0 <__hexdig_fun>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d062      	beq.n	800e536 <__gethex+0x13a>
 800e470:	4633      	mov	r3, r6
 800e472:	7818      	ldrb	r0, [r3, #0]
 800e474:	2830      	cmp	r0, #48	; 0x30
 800e476:	461f      	mov	r7, r3
 800e478:	f103 0301 	add.w	r3, r3, #1
 800e47c:	d0f9      	beq.n	800e472 <__gethex+0x76>
 800e47e:	f7ff ffa7 	bl	800e3d0 <__hexdig_fun>
 800e482:	2301      	movs	r3, #1
 800e484:	fab0 f480 	clz	r4, r0
 800e488:	0964      	lsrs	r4, r4, #5
 800e48a:	4635      	mov	r5, r6
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	463a      	mov	r2, r7
 800e490:	4616      	mov	r6, r2
 800e492:	3201      	adds	r2, #1
 800e494:	7830      	ldrb	r0, [r6, #0]
 800e496:	f7ff ff9b 	bl	800e3d0 <__hexdig_fun>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d1f8      	bne.n	800e490 <__gethex+0x94>
 800e49e:	9901      	ldr	r1, [sp, #4]
 800e4a0:	4652      	mov	r2, sl
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f001 fd8c 	bl	800ffc0 <strncmp>
 800e4a8:	b980      	cbnz	r0, 800e4cc <__gethex+0xd0>
 800e4aa:	b94d      	cbnz	r5, 800e4c0 <__gethex+0xc4>
 800e4ac:	eb06 050a 	add.w	r5, r6, sl
 800e4b0:	462a      	mov	r2, r5
 800e4b2:	4616      	mov	r6, r2
 800e4b4:	3201      	adds	r2, #1
 800e4b6:	7830      	ldrb	r0, [r6, #0]
 800e4b8:	f7ff ff8a 	bl	800e3d0 <__hexdig_fun>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d1f8      	bne.n	800e4b2 <__gethex+0xb6>
 800e4c0:	1bad      	subs	r5, r5, r6
 800e4c2:	00ad      	lsls	r5, r5, #2
 800e4c4:	e004      	b.n	800e4d0 <__gethex+0xd4>
 800e4c6:	2400      	movs	r4, #0
 800e4c8:	4625      	mov	r5, r4
 800e4ca:	e7e0      	b.n	800e48e <__gethex+0x92>
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	d1f7      	bne.n	800e4c0 <__gethex+0xc4>
 800e4d0:	7833      	ldrb	r3, [r6, #0]
 800e4d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4d6:	2b50      	cmp	r3, #80	; 0x50
 800e4d8:	d13b      	bne.n	800e552 <__gethex+0x156>
 800e4da:	7873      	ldrb	r3, [r6, #1]
 800e4dc:	2b2b      	cmp	r3, #43	; 0x2b
 800e4de:	d02c      	beq.n	800e53a <__gethex+0x13e>
 800e4e0:	2b2d      	cmp	r3, #45	; 0x2d
 800e4e2:	d02e      	beq.n	800e542 <__gethex+0x146>
 800e4e4:	1c71      	adds	r1, r6, #1
 800e4e6:	f04f 0900 	mov.w	r9, #0
 800e4ea:	7808      	ldrb	r0, [r1, #0]
 800e4ec:	f7ff ff70 	bl	800e3d0 <__hexdig_fun>
 800e4f0:	1e43      	subs	r3, r0, #1
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b18      	cmp	r3, #24
 800e4f6:	d82c      	bhi.n	800e552 <__gethex+0x156>
 800e4f8:	f1a0 0210 	sub.w	r2, r0, #16
 800e4fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e500:	f7ff ff66 	bl	800e3d0 <__hexdig_fun>
 800e504:	1e43      	subs	r3, r0, #1
 800e506:	b2db      	uxtb	r3, r3
 800e508:	2b18      	cmp	r3, #24
 800e50a:	d91d      	bls.n	800e548 <__gethex+0x14c>
 800e50c:	f1b9 0f00 	cmp.w	r9, #0
 800e510:	d000      	beq.n	800e514 <__gethex+0x118>
 800e512:	4252      	negs	r2, r2
 800e514:	4415      	add	r5, r2
 800e516:	f8cb 1000 	str.w	r1, [fp]
 800e51a:	b1e4      	cbz	r4, 800e556 <__gethex+0x15a>
 800e51c:	9b00      	ldr	r3, [sp, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bf14      	ite	ne
 800e522:	2700      	movne	r7, #0
 800e524:	2706      	moveq	r7, #6
 800e526:	4638      	mov	r0, r7
 800e528:	b009      	add	sp, #36	; 0x24
 800e52a:	ecbd 8b02 	vpop	{d8}
 800e52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e532:	463e      	mov	r6, r7
 800e534:	4625      	mov	r5, r4
 800e536:	2401      	movs	r4, #1
 800e538:	e7ca      	b.n	800e4d0 <__gethex+0xd4>
 800e53a:	f04f 0900 	mov.w	r9, #0
 800e53e:	1cb1      	adds	r1, r6, #2
 800e540:	e7d3      	b.n	800e4ea <__gethex+0xee>
 800e542:	f04f 0901 	mov.w	r9, #1
 800e546:	e7fa      	b.n	800e53e <__gethex+0x142>
 800e548:	230a      	movs	r3, #10
 800e54a:	fb03 0202 	mla	r2, r3, r2, r0
 800e54e:	3a10      	subs	r2, #16
 800e550:	e7d4      	b.n	800e4fc <__gethex+0x100>
 800e552:	4631      	mov	r1, r6
 800e554:	e7df      	b.n	800e516 <__gethex+0x11a>
 800e556:	1bf3      	subs	r3, r6, r7
 800e558:	3b01      	subs	r3, #1
 800e55a:	4621      	mov	r1, r4
 800e55c:	2b07      	cmp	r3, #7
 800e55e:	dc0b      	bgt.n	800e578 <__gethex+0x17c>
 800e560:	ee18 0a10 	vmov	r0, s16
 800e564:	f000 fa90 	bl	800ea88 <_Balloc>
 800e568:	4604      	mov	r4, r0
 800e56a:	b940      	cbnz	r0, 800e57e <__gethex+0x182>
 800e56c:	4b5d      	ldr	r3, [pc, #372]	; (800e6e4 <__gethex+0x2e8>)
 800e56e:	4602      	mov	r2, r0
 800e570:	21de      	movs	r1, #222	; 0xde
 800e572:	485d      	ldr	r0, [pc, #372]	; (800e6e8 <__gethex+0x2ec>)
 800e574:	f001 fdf4 	bl	8010160 <__assert_func>
 800e578:	3101      	adds	r1, #1
 800e57a:	105b      	asrs	r3, r3, #1
 800e57c:	e7ee      	b.n	800e55c <__gethex+0x160>
 800e57e:	f100 0914 	add.w	r9, r0, #20
 800e582:	f04f 0b00 	mov.w	fp, #0
 800e586:	f1ca 0301 	rsb	r3, sl, #1
 800e58a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e58e:	f8cd b000 	str.w	fp, [sp]
 800e592:	9306      	str	r3, [sp, #24]
 800e594:	42b7      	cmp	r7, r6
 800e596:	d340      	bcc.n	800e61a <__gethex+0x21e>
 800e598:	9802      	ldr	r0, [sp, #8]
 800e59a:	9b00      	ldr	r3, [sp, #0]
 800e59c:	f840 3b04 	str.w	r3, [r0], #4
 800e5a0:	eba0 0009 	sub.w	r0, r0, r9
 800e5a4:	1080      	asrs	r0, r0, #2
 800e5a6:	0146      	lsls	r6, r0, #5
 800e5a8:	6120      	str	r0, [r4, #16]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 fb5e 	bl	800ec6c <__hi0bits>
 800e5b0:	1a30      	subs	r0, r6, r0
 800e5b2:	f8d8 6000 	ldr.w	r6, [r8]
 800e5b6:	42b0      	cmp	r0, r6
 800e5b8:	dd63      	ble.n	800e682 <__gethex+0x286>
 800e5ba:	1b87      	subs	r7, r0, r6
 800e5bc:	4639      	mov	r1, r7
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f000 ff02 	bl	800f3c8 <__any_on>
 800e5c4:	4682      	mov	sl, r0
 800e5c6:	b1a8      	cbz	r0, 800e5f4 <__gethex+0x1f8>
 800e5c8:	1e7b      	subs	r3, r7, #1
 800e5ca:	1159      	asrs	r1, r3, #5
 800e5cc:	f003 021f 	and.w	r2, r3, #31
 800e5d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e5d4:	f04f 0a01 	mov.w	sl, #1
 800e5d8:	fa0a f202 	lsl.w	r2, sl, r2
 800e5dc:	420a      	tst	r2, r1
 800e5de:	d009      	beq.n	800e5f4 <__gethex+0x1f8>
 800e5e0:	4553      	cmp	r3, sl
 800e5e2:	dd05      	ble.n	800e5f0 <__gethex+0x1f4>
 800e5e4:	1eb9      	subs	r1, r7, #2
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 feee 	bl	800f3c8 <__any_on>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d145      	bne.n	800e67c <__gethex+0x280>
 800e5f0:	f04f 0a02 	mov.w	sl, #2
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f7ff fe98 	bl	800e32c <rshift>
 800e5fc:	443d      	add	r5, r7
 800e5fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e602:	42ab      	cmp	r3, r5
 800e604:	da4c      	bge.n	800e6a0 <__gethex+0x2a4>
 800e606:	ee18 0a10 	vmov	r0, s16
 800e60a:	4621      	mov	r1, r4
 800e60c:	f000 fa7c 	bl	800eb08 <_Bfree>
 800e610:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e612:	2300      	movs	r3, #0
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	27a3      	movs	r7, #163	; 0xa3
 800e618:	e785      	b.n	800e526 <__gethex+0x12a>
 800e61a:	1e73      	subs	r3, r6, #1
 800e61c:	9a05      	ldr	r2, [sp, #20]
 800e61e:	9303      	str	r3, [sp, #12]
 800e620:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e624:	4293      	cmp	r3, r2
 800e626:	d019      	beq.n	800e65c <__gethex+0x260>
 800e628:	f1bb 0f20 	cmp.w	fp, #32
 800e62c:	d107      	bne.n	800e63e <__gethex+0x242>
 800e62e:	9b02      	ldr	r3, [sp, #8]
 800e630:	9a00      	ldr	r2, [sp, #0]
 800e632:	f843 2b04 	str.w	r2, [r3], #4
 800e636:	9302      	str	r3, [sp, #8]
 800e638:	2300      	movs	r3, #0
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	469b      	mov	fp, r3
 800e63e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e642:	f7ff fec5 	bl	800e3d0 <__hexdig_fun>
 800e646:	9b00      	ldr	r3, [sp, #0]
 800e648:	f000 000f 	and.w	r0, r0, #15
 800e64c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e650:	4303      	orrs	r3, r0
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	f10b 0b04 	add.w	fp, fp, #4
 800e658:	9b03      	ldr	r3, [sp, #12]
 800e65a:	e00d      	b.n	800e678 <__gethex+0x27c>
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	9a06      	ldr	r2, [sp, #24]
 800e660:	4413      	add	r3, r2
 800e662:	42bb      	cmp	r3, r7
 800e664:	d3e0      	bcc.n	800e628 <__gethex+0x22c>
 800e666:	4618      	mov	r0, r3
 800e668:	9901      	ldr	r1, [sp, #4]
 800e66a:	9307      	str	r3, [sp, #28]
 800e66c:	4652      	mov	r2, sl
 800e66e:	f001 fca7 	bl	800ffc0 <strncmp>
 800e672:	9b07      	ldr	r3, [sp, #28]
 800e674:	2800      	cmp	r0, #0
 800e676:	d1d7      	bne.n	800e628 <__gethex+0x22c>
 800e678:	461e      	mov	r6, r3
 800e67a:	e78b      	b.n	800e594 <__gethex+0x198>
 800e67c:	f04f 0a03 	mov.w	sl, #3
 800e680:	e7b8      	b.n	800e5f4 <__gethex+0x1f8>
 800e682:	da0a      	bge.n	800e69a <__gethex+0x29e>
 800e684:	1a37      	subs	r7, r6, r0
 800e686:	4621      	mov	r1, r4
 800e688:	ee18 0a10 	vmov	r0, s16
 800e68c:	463a      	mov	r2, r7
 800e68e:	f000 fc57 	bl	800ef40 <__lshift>
 800e692:	1bed      	subs	r5, r5, r7
 800e694:	4604      	mov	r4, r0
 800e696:	f100 0914 	add.w	r9, r0, #20
 800e69a:	f04f 0a00 	mov.w	sl, #0
 800e69e:	e7ae      	b.n	800e5fe <__gethex+0x202>
 800e6a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e6a4:	42a8      	cmp	r0, r5
 800e6a6:	dd72      	ble.n	800e78e <__gethex+0x392>
 800e6a8:	1b45      	subs	r5, r0, r5
 800e6aa:	42ae      	cmp	r6, r5
 800e6ac:	dc36      	bgt.n	800e71c <__gethex+0x320>
 800e6ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d02a      	beq.n	800e70c <__gethex+0x310>
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	d02c      	beq.n	800e714 <__gethex+0x318>
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d11c      	bne.n	800e6f8 <__gethex+0x2fc>
 800e6be:	42ae      	cmp	r6, r5
 800e6c0:	d11a      	bne.n	800e6f8 <__gethex+0x2fc>
 800e6c2:	2e01      	cmp	r6, #1
 800e6c4:	d112      	bne.n	800e6ec <__gethex+0x2f0>
 800e6c6:	9a04      	ldr	r2, [sp, #16]
 800e6c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	f8c9 3000 	str.w	r3, [r9]
 800e6d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6d8:	2762      	movs	r7, #98	; 0x62
 800e6da:	601c      	str	r4, [r3, #0]
 800e6dc:	e723      	b.n	800e526 <__gethex+0x12a>
 800e6de:	bf00      	nop
 800e6e0:	08012c80 	.word	0x08012c80
 800e6e4:	08012c08 	.word	0x08012c08
 800e6e8:	08012c19 	.word	0x08012c19
 800e6ec:	1e71      	subs	r1, r6, #1
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f000 fe6a 	bl	800f3c8 <__any_on>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d1e6      	bne.n	800e6c6 <__gethex+0x2ca>
 800e6f8:	ee18 0a10 	vmov	r0, s16
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	f000 fa03 	bl	800eb08 <_Bfree>
 800e702:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e704:	2300      	movs	r3, #0
 800e706:	6013      	str	r3, [r2, #0]
 800e708:	2750      	movs	r7, #80	; 0x50
 800e70a:	e70c      	b.n	800e526 <__gethex+0x12a>
 800e70c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1f2      	bne.n	800e6f8 <__gethex+0x2fc>
 800e712:	e7d8      	b.n	800e6c6 <__gethex+0x2ca>
 800e714:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1d5      	bne.n	800e6c6 <__gethex+0x2ca>
 800e71a:	e7ed      	b.n	800e6f8 <__gethex+0x2fc>
 800e71c:	1e6f      	subs	r7, r5, #1
 800e71e:	f1ba 0f00 	cmp.w	sl, #0
 800e722:	d131      	bne.n	800e788 <__gethex+0x38c>
 800e724:	b127      	cbz	r7, 800e730 <__gethex+0x334>
 800e726:	4639      	mov	r1, r7
 800e728:	4620      	mov	r0, r4
 800e72a:	f000 fe4d 	bl	800f3c8 <__any_on>
 800e72e:	4682      	mov	sl, r0
 800e730:	117b      	asrs	r3, r7, #5
 800e732:	2101      	movs	r1, #1
 800e734:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e738:	f007 071f 	and.w	r7, r7, #31
 800e73c:	fa01 f707 	lsl.w	r7, r1, r7
 800e740:	421f      	tst	r7, r3
 800e742:	4629      	mov	r1, r5
 800e744:	4620      	mov	r0, r4
 800e746:	bf18      	it	ne
 800e748:	f04a 0a02 	orrne.w	sl, sl, #2
 800e74c:	1b76      	subs	r6, r6, r5
 800e74e:	f7ff fded 	bl	800e32c <rshift>
 800e752:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e756:	2702      	movs	r7, #2
 800e758:	f1ba 0f00 	cmp.w	sl, #0
 800e75c:	d048      	beq.n	800e7f0 <__gethex+0x3f4>
 800e75e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e762:	2b02      	cmp	r3, #2
 800e764:	d015      	beq.n	800e792 <__gethex+0x396>
 800e766:	2b03      	cmp	r3, #3
 800e768:	d017      	beq.n	800e79a <__gethex+0x39e>
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d109      	bne.n	800e782 <__gethex+0x386>
 800e76e:	f01a 0f02 	tst.w	sl, #2
 800e772:	d006      	beq.n	800e782 <__gethex+0x386>
 800e774:	f8d9 0000 	ldr.w	r0, [r9]
 800e778:	ea4a 0a00 	orr.w	sl, sl, r0
 800e77c:	f01a 0f01 	tst.w	sl, #1
 800e780:	d10e      	bne.n	800e7a0 <__gethex+0x3a4>
 800e782:	f047 0710 	orr.w	r7, r7, #16
 800e786:	e033      	b.n	800e7f0 <__gethex+0x3f4>
 800e788:	f04f 0a01 	mov.w	sl, #1
 800e78c:	e7d0      	b.n	800e730 <__gethex+0x334>
 800e78e:	2701      	movs	r7, #1
 800e790:	e7e2      	b.n	800e758 <__gethex+0x35c>
 800e792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e794:	f1c3 0301 	rsb	r3, r3, #1
 800e798:	9315      	str	r3, [sp, #84]	; 0x54
 800e79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d0f0      	beq.n	800e782 <__gethex+0x386>
 800e7a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e7a4:	f104 0314 	add.w	r3, r4, #20
 800e7a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e7ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e7b0:	f04f 0c00 	mov.w	ip, #0
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e7be:	d01c      	beq.n	800e7fa <__gethex+0x3fe>
 800e7c0:	3201      	adds	r2, #1
 800e7c2:	6002      	str	r2, [r0, #0]
 800e7c4:	2f02      	cmp	r7, #2
 800e7c6:	f104 0314 	add.w	r3, r4, #20
 800e7ca:	d13f      	bne.n	800e84c <__gethex+0x450>
 800e7cc:	f8d8 2000 	ldr.w	r2, [r8]
 800e7d0:	3a01      	subs	r2, #1
 800e7d2:	42b2      	cmp	r2, r6
 800e7d4:	d10a      	bne.n	800e7ec <__gethex+0x3f0>
 800e7d6:	1171      	asrs	r1, r6, #5
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7de:	f006 061f 	and.w	r6, r6, #31
 800e7e2:	fa02 f606 	lsl.w	r6, r2, r6
 800e7e6:	421e      	tst	r6, r3
 800e7e8:	bf18      	it	ne
 800e7ea:	4617      	movne	r7, r2
 800e7ec:	f047 0720 	orr.w	r7, r7, #32
 800e7f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7f2:	601c      	str	r4, [r3, #0]
 800e7f4:	9b04      	ldr	r3, [sp, #16]
 800e7f6:	601d      	str	r5, [r3, #0]
 800e7f8:	e695      	b.n	800e526 <__gethex+0x12a>
 800e7fa:	4299      	cmp	r1, r3
 800e7fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e800:	d8d8      	bhi.n	800e7b4 <__gethex+0x3b8>
 800e802:	68a3      	ldr	r3, [r4, #8]
 800e804:	459b      	cmp	fp, r3
 800e806:	db19      	blt.n	800e83c <__gethex+0x440>
 800e808:	6861      	ldr	r1, [r4, #4]
 800e80a:	ee18 0a10 	vmov	r0, s16
 800e80e:	3101      	adds	r1, #1
 800e810:	f000 f93a 	bl	800ea88 <_Balloc>
 800e814:	4681      	mov	r9, r0
 800e816:	b918      	cbnz	r0, 800e820 <__gethex+0x424>
 800e818:	4b1a      	ldr	r3, [pc, #104]	; (800e884 <__gethex+0x488>)
 800e81a:	4602      	mov	r2, r0
 800e81c:	2184      	movs	r1, #132	; 0x84
 800e81e:	e6a8      	b.n	800e572 <__gethex+0x176>
 800e820:	6922      	ldr	r2, [r4, #16]
 800e822:	3202      	adds	r2, #2
 800e824:	f104 010c 	add.w	r1, r4, #12
 800e828:	0092      	lsls	r2, r2, #2
 800e82a:	300c      	adds	r0, #12
 800e82c:	f000 f91e 	bl	800ea6c <memcpy>
 800e830:	4621      	mov	r1, r4
 800e832:	ee18 0a10 	vmov	r0, s16
 800e836:	f000 f967 	bl	800eb08 <_Bfree>
 800e83a:	464c      	mov	r4, r9
 800e83c:	6923      	ldr	r3, [r4, #16]
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e844:	6122      	str	r2, [r4, #16]
 800e846:	2201      	movs	r2, #1
 800e848:	615a      	str	r2, [r3, #20]
 800e84a:	e7bb      	b.n	800e7c4 <__gethex+0x3c8>
 800e84c:	6922      	ldr	r2, [r4, #16]
 800e84e:	455a      	cmp	r2, fp
 800e850:	dd0b      	ble.n	800e86a <__gethex+0x46e>
 800e852:	2101      	movs	r1, #1
 800e854:	4620      	mov	r0, r4
 800e856:	f7ff fd69 	bl	800e32c <rshift>
 800e85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e85e:	3501      	adds	r5, #1
 800e860:	42ab      	cmp	r3, r5
 800e862:	f6ff aed0 	blt.w	800e606 <__gethex+0x20a>
 800e866:	2701      	movs	r7, #1
 800e868:	e7c0      	b.n	800e7ec <__gethex+0x3f0>
 800e86a:	f016 061f 	ands.w	r6, r6, #31
 800e86e:	d0fa      	beq.n	800e866 <__gethex+0x46a>
 800e870:	4453      	add	r3, sl
 800e872:	f1c6 0620 	rsb	r6, r6, #32
 800e876:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e87a:	f000 f9f7 	bl	800ec6c <__hi0bits>
 800e87e:	42b0      	cmp	r0, r6
 800e880:	dbe7      	blt.n	800e852 <__gethex+0x456>
 800e882:	e7f0      	b.n	800e866 <__gethex+0x46a>
 800e884:	08012c08 	.word	0x08012c08

0800e888 <L_shift>:
 800e888:	f1c2 0208 	rsb	r2, r2, #8
 800e88c:	0092      	lsls	r2, r2, #2
 800e88e:	b570      	push	{r4, r5, r6, lr}
 800e890:	f1c2 0620 	rsb	r6, r2, #32
 800e894:	6843      	ldr	r3, [r0, #4]
 800e896:	6804      	ldr	r4, [r0, #0]
 800e898:	fa03 f506 	lsl.w	r5, r3, r6
 800e89c:	432c      	orrs	r4, r5
 800e89e:	40d3      	lsrs	r3, r2
 800e8a0:	6004      	str	r4, [r0, #0]
 800e8a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e8a6:	4288      	cmp	r0, r1
 800e8a8:	d3f4      	bcc.n	800e894 <L_shift+0xc>
 800e8aa:	bd70      	pop	{r4, r5, r6, pc}

0800e8ac <__match>:
 800e8ac:	b530      	push	{r4, r5, lr}
 800e8ae:	6803      	ldr	r3, [r0, #0]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8b6:	b914      	cbnz	r4, 800e8be <__match+0x12>
 800e8b8:	6003      	str	r3, [r0, #0]
 800e8ba:	2001      	movs	r0, #1
 800e8bc:	bd30      	pop	{r4, r5, pc}
 800e8be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e8c6:	2d19      	cmp	r5, #25
 800e8c8:	bf98      	it	ls
 800e8ca:	3220      	addls	r2, #32
 800e8cc:	42a2      	cmp	r2, r4
 800e8ce:	d0f0      	beq.n	800e8b2 <__match+0x6>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e7f3      	b.n	800e8bc <__match+0x10>

0800e8d4 <__hexnan>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	680b      	ldr	r3, [r1, #0]
 800e8da:	115e      	asrs	r6, r3, #5
 800e8dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e8e0:	f013 031f 	ands.w	r3, r3, #31
 800e8e4:	b087      	sub	sp, #28
 800e8e6:	bf18      	it	ne
 800e8e8:	3604      	addne	r6, #4
 800e8ea:	2500      	movs	r5, #0
 800e8ec:	1f37      	subs	r7, r6, #4
 800e8ee:	4690      	mov	r8, r2
 800e8f0:	6802      	ldr	r2, [r0, #0]
 800e8f2:	9301      	str	r3, [sp, #4]
 800e8f4:	4682      	mov	sl, r0
 800e8f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e8fa:	46b9      	mov	r9, r7
 800e8fc:	463c      	mov	r4, r7
 800e8fe:	9502      	str	r5, [sp, #8]
 800e900:	46ab      	mov	fp, r5
 800e902:	7851      	ldrb	r1, [r2, #1]
 800e904:	1c53      	adds	r3, r2, #1
 800e906:	9303      	str	r3, [sp, #12]
 800e908:	b341      	cbz	r1, 800e95c <__hexnan+0x88>
 800e90a:	4608      	mov	r0, r1
 800e90c:	9205      	str	r2, [sp, #20]
 800e90e:	9104      	str	r1, [sp, #16]
 800e910:	f7ff fd5e 	bl	800e3d0 <__hexdig_fun>
 800e914:	2800      	cmp	r0, #0
 800e916:	d14f      	bne.n	800e9b8 <__hexnan+0xe4>
 800e918:	9904      	ldr	r1, [sp, #16]
 800e91a:	9a05      	ldr	r2, [sp, #20]
 800e91c:	2920      	cmp	r1, #32
 800e91e:	d818      	bhi.n	800e952 <__hexnan+0x7e>
 800e920:	9b02      	ldr	r3, [sp, #8]
 800e922:	459b      	cmp	fp, r3
 800e924:	dd13      	ble.n	800e94e <__hexnan+0x7a>
 800e926:	454c      	cmp	r4, r9
 800e928:	d206      	bcs.n	800e938 <__hexnan+0x64>
 800e92a:	2d07      	cmp	r5, #7
 800e92c:	dc04      	bgt.n	800e938 <__hexnan+0x64>
 800e92e:	462a      	mov	r2, r5
 800e930:	4649      	mov	r1, r9
 800e932:	4620      	mov	r0, r4
 800e934:	f7ff ffa8 	bl	800e888 <L_shift>
 800e938:	4544      	cmp	r4, r8
 800e93a:	d950      	bls.n	800e9de <__hexnan+0x10a>
 800e93c:	2300      	movs	r3, #0
 800e93e:	f1a4 0904 	sub.w	r9, r4, #4
 800e942:	f844 3c04 	str.w	r3, [r4, #-4]
 800e946:	f8cd b008 	str.w	fp, [sp, #8]
 800e94a:	464c      	mov	r4, r9
 800e94c:	461d      	mov	r5, r3
 800e94e:	9a03      	ldr	r2, [sp, #12]
 800e950:	e7d7      	b.n	800e902 <__hexnan+0x2e>
 800e952:	2929      	cmp	r1, #41	; 0x29
 800e954:	d156      	bne.n	800ea04 <__hexnan+0x130>
 800e956:	3202      	adds	r2, #2
 800e958:	f8ca 2000 	str.w	r2, [sl]
 800e95c:	f1bb 0f00 	cmp.w	fp, #0
 800e960:	d050      	beq.n	800ea04 <__hexnan+0x130>
 800e962:	454c      	cmp	r4, r9
 800e964:	d206      	bcs.n	800e974 <__hexnan+0xa0>
 800e966:	2d07      	cmp	r5, #7
 800e968:	dc04      	bgt.n	800e974 <__hexnan+0xa0>
 800e96a:	462a      	mov	r2, r5
 800e96c:	4649      	mov	r1, r9
 800e96e:	4620      	mov	r0, r4
 800e970:	f7ff ff8a 	bl	800e888 <L_shift>
 800e974:	4544      	cmp	r4, r8
 800e976:	d934      	bls.n	800e9e2 <__hexnan+0x10e>
 800e978:	f1a8 0204 	sub.w	r2, r8, #4
 800e97c:	4623      	mov	r3, r4
 800e97e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e982:	f842 1f04 	str.w	r1, [r2, #4]!
 800e986:	429f      	cmp	r7, r3
 800e988:	d2f9      	bcs.n	800e97e <__hexnan+0xaa>
 800e98a:	1b3b      	subs	r3, r7, r4
 800e98c:	f023 0303 	bic.w	r3, r3, #3
 800e990:	3304      	adds	r3, #4
 800e992:	3401      	adds	r4, #1
 800e994:	3e03      	subs	r6, #3
 800e996:	42b4      	cmp	r4, r6
 800e998:	bf88      	it	hi
 800e99a:	2304      	movhi	r3, #4
 800e99c:	4443      	add	r3, r8
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f843 2b04 	str.w	r2, [r3], #4
 800e9a4:	429f      	cmp	r7, r3
 800e9a6:	d2fb      	bcs.n	800e9a0 <__hexnan+0xcc>
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	b91b      	cbnz	r3, 800e9b4 <__hexnan+0xe0>
 800e9ac:	4547      	cmp	r7, r8
 800e9ae:	d127      	bne.n	800ea00 <__hexnan+0x12c>
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	603b      	str	r3, [r7, #0]
 800e9b4:	2005      	movs	r0, #5
 800e9b6:	e026      	b.n	800ea06 <__hexnan+0x132>
 800e9b8:	3501      	adds	r5, #1
 800e9ba:	2d08      	cmp	r5, #8
 800e9bc:	f10b 0b01 	add.w	fp, fp, #1
 800e9c0:	dd06      	ble.n	800e9d0 <__hexnan+0xfc>
 800e9c2:	4544      	cmp	r4, r8
 800e9c4:	d9c3      	bls.n	800e94e <__hexnan+0x7a>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9cc:	2501      	movs	r5, #1
 800e9ce:	3c04      	subs	r4, #4
 800e9d0:	6822      	ldr	r2, [r4, #0]
 800e9d2:	f000 000f 	and.w	r0, r0, #15
 800e9d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e9da:	6022      	str	r2, [r4, #0]
 800e9dc:	e7b7      	b.n	800e94e <__hexnan+0x7a>
 800e9de:	2508      	movs	r5, #8
 800e9e0:	e7b5      	b.n	800e94e <__hexnan+0x7a>
 800e9e2:	9b01      	ldr	r3, [sp, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d0df      	beq.n	800e9a8 <__hexnan+0xd4>
 800e9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ec:	f1c3 0320 	rsb	r3, r3, #32
 800e9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e9f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e9f8:	401a      	ands	r2, r3
 800e9fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800e9fe:	e7d3      	b.n	800e9a8 <__hexnan+0xd4>
 800ea00:	3f04      	subs	r7, #4
 800ea02:	e7d1      	b.n	800e9a8 <__hexnan+0xd4>
 800ea04:	2004      	movs	r0, #4
 800ea06:	b007      	add	sp, #28
 800ea08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea0c <_localeconv_r>:
 800ea0c:	4800      	ldr	r0, [pc, #0]	; (800ea10 <_localeconv_r+0x4>)
 800ea0e:	4770      	bx	lr
 800ea10:	2000016c 	.word	0x2000016c

0800ea14 <_lseek_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d07      	ldr	r5, [pc, #28]	; (800ea34 <_lseek_r+0x20>)
 800ea18:	4604      	mov	r4, r0
 800ea1a:	4608      	mov	r0, r1
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	2200      	movs	r2, #0
 800ea20:	602a      	str	r2, [r5, #0]
 800ea22:	461a      	mov	r2, r3
 800ea24:	f7f7 f950 	bl	8005cc8 <_lseek>
 800ea28:	1c43      	adds	r3, r0, #1
 800ea2a:	d102      	bne.n	800ea32 <_lseek_r+0x1e>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	b103      	cbz	r3, 800ea32 <_lseek_r+0x1e>
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	20001248 	.word	0x20001248

0800ea38 <malloc>:
 800ea38:	4b02      	ldr	r3, [pc, #8]	; (800ea44 <malloc+0xc>)
 800ea3a:	4601      	mov	r1, r0
 800ea3c:	6818      	ldr	r0, [r3, #0]
 800ea3e:	f000 bd67 	b.w	800f510 <_malloc_r>
 800ea42:	bf00      	nop
 800ea44:	20000014 	.word	0x20000014

0800ea48 <__ascii_mbtowc>:
 800ea48:	b082      	sub	sp, #8
 800ea4a:	b901      	cbnz	r1, 800ea4e <__ascii_mbtowc+0x6>
 800ea4c:	a901      	add	r1, sp, #4
 800ea4e:	b142      	cbz	r2, 800ea62 <__ascii_mbtowc+0x1a>
 800ea50:	b14b      	cbz	r3, 800ea66 <__ascii_mbtowc+0x1e>
 800ea52:	7813      	ldrb	r3, [r2, #0]
 800ea54:	600b      	str	r3, [r1, #0]
 800ea56:	7812      	ldrb	r2, [r2, #0]
 800ea58:	1e10      	subs	r0, r2, #0
 800ea5a:	bf18      	it	ne
 800ea5c:	2001      	movne	r0, #1
 800ea5e:	b002      	add	sp, #8
 800ea60:	4770      	bx	lr
 800ea62:	4610      	mov	r0, r2
 800ea64:	e7fb      	b.n	800ea5e <__ascii_mbtowc+0x16>
 800ea66:	f06f 0001 	mvn.w	r0, #1
 800ea6a:	e7f8      	b.n	800ea5e <__ascii_mbtowc+0x16>

0800ea6c <memcpy>:
 800ea6c:	440a      	add	r2, r1
 800ea6e:	4291      	cmp	r1, r2
 800ea70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea74:	d100      	bne.n	800ea78 <memcpy+0xc>
 800ea76:	4770      	bx	lr
 800ea78:	b510      	push	{r4, lr}
 800ea7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea82:	4291      	cmp	r1, r2
 800ea84:	d1f9      	bne.n	800ea7a <memcpy+0xe>
 800ea86:	bd10      	pop	{r4, pc}

0800ea88 <_Balloc>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	460d      	mov	r5, r1
 800ea90:	b976      	cbnz	r6, 800eab0 <_Balloc+0x28>
 800ea92:	2010      	movs	r0, #16
 800ea94:	f7ff ffd0 	bl	800ea38 <malloc>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ea9c:	b920      	cbnz	r0, 800eaa8 <_Balloc+0x20>
 800ea9e:	4b18      	ldr	r3, [pc, #96]	; (800eb00 <_Balloc+0x78>)
 800eaa0:	4818      	ldr	r0, [pc, #96]	; (800eb04 <_Balloc+0x7c>)
 800eaa2:	2166      	movs	r1, #102	; 0x66
 800eaa4:	f001 fb5c 	bl	8010160 <__assert_func>
 800eaa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaac:	6006      	str	r6, [r0, #0]
 800eaae:	60c6      	str	r6, [r0, #12]
 800eab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eab2:	68f3      	ldr	r3, [r6, #12]
 800eab4:	b183      	cbz	r3, 800ead8 <_Balloc+0x50>
 800eab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eabe:	b9b8      	cbnz	r0, 800eaf0 <_Balloc+0x68>
 800eac0:	2101      	movs	r1, #1
 800eac2:	fa01 f605 	lsl.w	r6, r1, r5
 800eac6:	1d72      	adds	r2, r6, #5
 800eac8:	0092      	lsls	r2, r2, #2
 800eaca:	4620      	mov	r0, r4
 800eacc:	f000 fc9d 	bl	800f40a <_calloc_r>
 800ead0:	b160      	cbz	r0, 800eaec <_Balloc+0x64>
 800ead2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ead6:	e00e      	b.n	800eaf6 <_Balloc+0x6e>
 800ead8:	2221      	movs	r2, #33	; 0x21
 800eada:	2104      	movs	r1, #4
 800eadc:	4620      	mov	r0, r4
 800eade:	f000 fc94 	bl	800f40a <_calloc_r>
 800eae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eae4:	60f0      	str	r0, [r6, #12]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1e4      	bne.n	800eab6 <_Balloc+0x2e>
 800eaec:	2000      	movs	r0, #0
 800eaee:	bd70      	pop	{r4, r5, r6, pc}
 800eaf0:	6802      	ldr	r2, [r0, #0]
 800eaf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eafc:	e7f7      	b.n	800eaee <_Balloc+0x66>
 800eafe:	bf00      	nop
 800eb00:	08012b96 	.word	0x08012b96
 800eb04:	08012c94 	.word	0x08012c94

0800eb08 <_Bfree>:
 800eb08:	b570      	push	{r4, r5, r6, lr}
 800eb0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	460c      	mov	r4, r1
 800eb10:	b976      	cbnz	r6, 800eb30 <_Bfree+0x28>
 800eb12:	2010      	movs	r0, #16
 800eb14:	f7ff ff90 	bl	800ea38 <malloc>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	6268      	str	r0, [r5, #36]	; 0x24
 800eb1c:	b920      	cbnz	r0, 800eb28 <_Bfree+0x20>
 800eb1e:	4b09      	ldr	r3, [pc, #36]	; (800eb44 <_Bfree+0x3c>)
 800eb20:	4809      	ldr	r0, [pc, #36]	; (800eb48 <_Bfree+0x40>)
 800eb22:	218a      	movs	r1, #138	; 0x8a
 800eb24:	f001 fb1c 	bl	8010160 <__assert_func>
 800eb28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb2c:	6006      	str	r6, [r0, #0]
 800eb2e:	60c6      	str	r6, [r0, #12]
 800eb30:	b13c      	cbz	r4, 800eb42 <_Bfree+0x3a>
 800eb32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb34:	6862      	ldr	r2, [r4, #4]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb3c:	6021      	str	r1, [r4, #0]
 800eb3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	08012b96 	.word	0x08012b96
 800eb48:	08012c94 	.word	0x08012c94

0800eb4c <__multadd>:
 800eb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb50:	690d      	ldr	r5, [r1, #16]
 800eb52:	4607      	mov	r7, r0
 800eb54:	460c      	mov	r4, r1
 800eb56:	461e      	mov	r6, r3
 800eb58:	f101 0c14 	add.w	ip, r1, #20
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	f8dc 3000 	ldr.w	r3, [ip]
 800eb62:	b299      	uxth	r1, r3
 800eb64:	fb02 6101 	mla	r1, r2, r1, r6
 800eb68:	0c1e      	lsrs	r6, r3, #16
 800eb6a:	0c0b      	lsrs	r3, r1, #16
 800eb6c:	fb02 3306 	mla	r3, r2, r6, r3
 800eb70:	b289      	uxth	r1, r1
 800eb72:	3001      	adds	r0, #1
 800eb74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb78:	4285      	cmp	r5, r0
 800eb7a:	f84c 1b04 	str.w	r1, [ip], #4
 800eb7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb82:	dcec      	bgt.n	800eb5e <__multadd+0x12>
 800eb84:	b30e      	cbz	r6, 800ebca <__multadd+0x7e>
 800eb86:	68a3      	ldr	r3, [r4, #8]
 800eb88:	42ab      	cmp	r3, r5
 800eb8a:	dc19      	bgt.n	800ebc0 <__multadd+0x74>
 800eb8c:	6861      	ldr	r1, [r4, #4]
 800eb8e:	4638      	mov	r0, r7
 800eb90:	3101      	adds	r1, #1
 800eb92:	f7ff ff79 	bl	800ea88 <_Balloc>
 800eb96:	4680      	mov	r8, r0
 800eb98:	b928      	cbnz	r0, 800eba6 <__multadd+0x5a>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	; (800ebd0 <__multadd+0x84>)
 800eb9e:	480d      	ldr	r0, [pc, #52]	; (800ebd4 <__multadd+0x88>)
 800eba0:	21b5      	movs	r1, #181	; 0xb5
 800eba2:	f001 fadd 	bl	8010160 <__assert_func>
 800eba6:	6922      	ldr	r2, [r4, #16]
 800eba8:	3202      	adds	r2, #2
 800ebaa:	f104 010c 	add.w	r1, r4, #12
 800ebae:	0092      	lsls	r2, r2, #2
 800ebb0:	300c      	adds	r0, #12
 800ebb2:	f7ff ff5b 	bl	800ea6c <memcpy>
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4638      	mov	r0, r7
 800ebba:	f7ff ffa5 	bl	800eb08 <_Bfree>
 800ebbe:	4644      	mov	r4, r8
 800ebc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebc4:	3501      	adds	r5, #1
 800ebc6:	615e      	str	r6, [r3, #20]
 800ebc8:	6125      	str	r5, [r4, #16]
 800ebca:	4620      	mov	r0, r4
 800ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd0:	08012c08 	.word	0x08012c08
 800ebd4:	08012c94 	.word	0x08012c94

0800ebd8 <__s2b>:
 800ebd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebdc:	460c      	mov	r4, r1
 800ebde:	4615      	mov	r5, r2
 800ebe0:	461f      	mov	r7, r3
 800ebe2:	2209      	movs	r2, #9
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebec:	2100      	movs	r1, #0
 800ebee:	2201      	movs	r2, #1
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	db09      	blt.n	800ec08 <__s2b+0x30>
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f7ff ff47 	bl	800ea88 <_Balloc>
 800ebfa:	b940      	cbnz	r0, 800ec0e <__s2b+0x36>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	4b19      	ldr	r3, [pc, #100]	; (800ec64 <__s2b+0x8c>)
 800ec00:	4819      	ldr	r0, [pc, #100]	; (800ec68 <__s2b+0x90>)
 800ec02:	21ce      	movs	r1, #206	; 0xce
 800ec04:	f001 faac 	bl	8010160 <__assert_func>
 800ec08:	0052      	lsls	r2, r2, #1
 800ec0a:	3101      	adds	r1, #1
 800ec0c:	e7f0      	b.n	800ebf0 <__s2b+0x18>
 800ec0e:	9b08      	ldr	r3, [sp, #32]
 800ec10:	6143      	str	r3, [r0, #20]
 800ec12:	2d09      	cmp	r5, #9
 800ec14:	f04f 0301 	mov.w	r3, #1
 800ec18:	6103      	str	r3, [r0, #16]
 800ec1a:	dd16      	ble.n	800ec4a <__s2b+0x72>
 800ec1c:	f104 0909 	add.w	r9, r4, #9
 800ec20:	46c8      	mov	r8, r9
 800ec22:	442c      	add	r4, r5
 800ec24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ec28:	4601      	mov	r1, r0
 800ec2a:	3b30      	subs	r3, #48	; 0x30
 800ec2c:	220a      	movs	r2, #10
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f7ff ff8c 	bl	800eb4c <__multadd>
 800ec34:	45a0      	cmp	r8, r4
 800ec36:	d1f5      	bne.n	800ec24 <__s2b+0x4c>
 800ec38:	f1a5 0408 	sub.w	r4, r5, #8
 800ec3c:	444c      	add	r4, r9
 800ec3e:	1b2d      	subs	r5, r5, r4
 800ec40:	1963      	adds	r3, r4, r5
 800ec42:	42bb      	cmp	r3, r7
 800ec44:	db04      	blt.n	800ec50 <__s2b+0x78>
 800ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec4a:	340a      	adds	r4, #10
 800ec4c:	2509      	movs	r5, #9
 800ec4e:	e7f6      	b.n	800ec3e <__s2b+0x66>
 800ec50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec54:	4601      	mov	r1, r0
 800ec56:	3b30      	subs	r3, #48	; 0x30
 800ec58:	220a      	movs	r2, #10
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f7ff ff76 	bl	800eb4c <__multadd>
 800ec60:	e7ee      	b.n	800ec40 <__s2b+0x68>
 800ec62:	bf00      	nop
 800ec64:	08012c08 	.word	0x08012c08
 800ec68:	08012c94 	.word	0x08012c94

0800ec6c <__hi0bits>:
 800ec6c:	0c03      	lsrs	r3, r0, #16
 800ec6e:	041b      	lsls	r3, r3, #16
 800ec70:	b9d3      	cbnz	r3, 800eca8 <__hi0bits+0x3c>
 800ec72:	0400      	lsls	r0, r0, #16
 800ec74:	2310      	movs	r3, #16
 800ec76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ec7a:	bf04      	itt	eq
 800ec7c:	0200      	lsleq	r0, r0, #8
 800ec7e:	3308      	addeq	r3, #8
 800ec80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec84:	bf04      	itt	eq
 800ec86:	0100      	lsleq	r0, r0, #4
 800ec88:	3304      	addeq	r3, #4
 800ec8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec8e:	bf04      	itt	eq
 800ec90:	0080      	lsleq	r0, r0, #2
 800ec92:	3302      	addeq	r3, #2
 800ec94:	2800      	cmp	r0, #0
 800ec96:	db05      	blt.n	800eca4 <__hi0bits+0x38>
 800ec98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec9c:	f103 0301 	add.w	r3, r3, #1
 800eca0:	bf08      	it	eq
 800eca2:	2320      	moveq	r3, #32
 800eca4:	4618      	mov	r0, r3
 800eca6:	4770      	bx	lr
 800eca8:	2300      	movs	r3, #0
 800ecaa:	e7e4      	b.n	800ec76 <__hi0bits+0xa>

0800ecac <__lo0bits>:
 800ecac:	6803      	ldr	r3, [r0, #0]
 800ecae:	f013 0207 	ands.w	r2, r3, #7
 800ecb2:	4601      	mov	r1, r0
 800ecb4:	d00b      	beq.n	800ecce <__lo0bits+0x22>
 800ecb6:	07da      	lsls	r2, r3, #31
 800ecb8:	d423      	bmi.n	800ed02 <__lo0bits+0x56>
 800ecba:	0798      	lsls	r0, r3, #30
 800ecbc:	bf49      	itett	mi
 800ecbe:	085b      	lsrmi	r3, r3, #1
 800ecc0:	089b      	lsrpl	r3, r3, #2
 800ecc2:	2001      	movmi	r0, #1
 800ecc4:	600b      	strmi	r3, [r1, #0]
 800ecc6:	bf5c      	itt	pl
 800ecc8:	600b      	strpl	r3, [r1, #0]
 800ecca:	2002      	movpl	r0, #2
 800eccc:	4770      	bx	lr
 800ecce:	b298      	uxth	r0, r3
 800ecd0:	b9a8      	cbnz	r0, 800ecfe <__lo0bits+0x52>
 800ecd2:	0c1b      	lsrs	r3, r3, #16
 800ecd4:	2010      	movs	r0, #16
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	b90a      	cbnz	r2, 800ecde <__lo0bits+0x32>
 800ecda:	3008      	adds	r0, #8
 800ecdc:	0a1b      	lsrs	r3, r3, #8
 800ecde:	071a      	lsls	r2, r3, #28
 800ece0:	bf04      	itt	eq
 800ece2:	091b      	lsreq	r3, r3, #4
 800ece4:	3004      	addeq	r0, #4
 800ece6:	079a      	lsls	r2, r3, #30
 800ece8:	bf04      	itt	eq
 800ecea:	089b      	lsreq	r3, r3, #2
 800ecec:	3002      	addeq	r0, #2
 800ecee:	07da      	lsls	r2, r3, #31
 800ecf0:	d403      	bmi.n	800ecfa <__lo0bits+0x4e>
 800ecf2:	085b      	lsrs	r3, r3, #1
 800ecf4:	f100 0001 	add.w	r0, r0, #1
 800ecf8:	d005      	beq.n	800ed06 <__lo0bits+0x5a>
 800ecfa:	600b      	str	r3, [r1, #0]
 800ecfc:	4770      	bx	lr
 800ecfe:	4610      	mov	r0, r2
 800ed00:	e7e9      	b.n	800ecd6 <__lo0bits+0x2a>
 800ed02:	2000      	movs	r0, #0
 800ed04:	4770      	bx	lr
 800ed06:	2020      	movs	r0, #32
 800ed08:	4770      	bx	lr
	...

0800ed0c <__i2b>:
 800ed0c:	b510      	push	{r4, lr}
 800ed0e:	460c      	mov	r4, r1
 800ed10:	2101      	movs	r1, #1
 800ed12:	f7ff feb9 	bl	800ea88 <_Balloc>
 800ed16:	4602      	mov	r2, r0
 800ed18:	b928      	cbnz	r0, 800ed26 <__i2b+0x1a>
 800ed1a:	4b05      	ldr	r3, [pc, #20]	; (800ed30 <__i2b+0x24>)
 800ed1c:	4805      	ldr	r0, [pc, #20]	; (800ed34 <__i2b+0x28>)
 800ed1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed22:	f001 fa1d 	bl	8010160 <__assert_func>
 800ed26:	2301      	movs	r3, #1
 800ed28:	6144      	str	r4, [r0, #20]
 800ed2a:	6103      	str	r3, [r0, #16]
 800ed2c:	bd10      	pop	{r4, pc}
 800ed2e:	bf00      	nop
 800ed30:	08012c08 	.word	0x08012c08
 800ed34:	08012c94 	.word	0x08012c94

0800ed38 <__multiply>:
 800ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3c:	4691      	mov	r9, r2
 800ed3e:	690a      	ldr	r2, [r1, #16]
 800ed40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	bfb8      	it	lt
 800ed48:	460b      	movlt	r3, r1
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	bfbc      	itt	lt
 800ed4e:	464c      	movlt	r4, r9
 800ed50:	4699      	movlt	r9, r3
 800ed52:	6927      	ldr	r7, [r4, #16]
 800ed54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed58:	68a3      	ldr	r3, [r4, #8]
 800ed5a:	6861      	ldr	r1, [r4, #4]
 800ed5c:	eb07 060a 	add.w	r6, r7, sl
 800ed60:	42b3      	cmp	r3, r6
 800ed62:	b085      	sub	sp, #20
 800ed64:	bfb8      	it	lt
 800ed66:	3101      	addlt	r1, #1
 800ed68:	f7ff fe8e 	bl	800ea88 <_Balloc>
 800ed6c:	b930      	cbnz	r0, 800ed7c <__multiply+0x44>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	4b44      	ldr	r3, [pc, #272]	; (800ee84 <__multiply+0x14c>)
 800ed72:	4845      	ldr	r0, [pc, #276]	; (800ee88 <__multiply+0x150>)
 800ed74:	f240 115d 	movw	r1, #349	; 0x15d
 800ed78:	f001 f9f2 	bl	8010160 <__assert_func>
 800ed7c:	f100 0514 	add.w	r5, r0, #20
 800ed80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed84:	462b      	mov	r3, r5
 800ed86:	2200      	movs	r2, #0
 800ed88:	4543      	cmp	r3, r8
 800ed8a:	d321      	bcc.n	800edd0 <__multiply+0x98>
 800ed8c:	f104 0314 	add.w	r3, r4, #20
 800ed90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed94:	f109 0314 	add.w	r3, r9, #20
 800ed98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed9c:	9202      	str	r2, [sp, #8]
 800ed9e:	1b3a      	subs	r2, r7, r4
 800eda0:	3a15      	subs	r2, #21
 800eda2:	f022 0203 	bic.w	r2, r2, #3
 800eda6:	3204      	adds	r2, #4
 800eda8:	f104 0115 	add.w	r1, r4, #21
 800edac:	428f      	cmp	r7, r1
 800edae:	bf38      	it	cc
 800edb0:	2204      	movcc	r2, #4
 800edb2:	9201      	str	r2, [sp, #4]
 800edb4:	9a02      	ldr	r2, [sp, #8]
 800edb6:	9303      	str	r3, [sp, #12]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d80c      	bhi.n	800edd6 <__multiply+0x9e>
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	dd03      	ble.n	800edc8 <__multiply+0x90>
 800edc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d05a      	beq.n	800ee7e <__multiply+0x146>
 800edc8:	6106      	str	r6, [r0, #16]
 800edca:	b005      	add	sp, #20
 800edcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd0:	f843 2b04 	str.w	r2, [r3], #4
 800edd4:	e7d8      	b.n	800ed88 <__multiply+0x50>
 800edd6:	f8b3 a000 	ldrh.w	sl, [r3]
 800edda:	f1ba 0f00 	cmp.w	sl, #0
 800edde:	d024      	beq.n	800ee2a <__multiply+0xf2>
 800ede0:	f104 0e14 	add.w	lr, r4, #20
 800ede4:	46a9      	mov	r9, r5
 800ede6:	f04f 0c00 	mov.w	ip, #0
 800edea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800edee:	f8d9 1000 	ldr.w	r1, [r9]
 800edf2:	fa1f fb82 	uxth.w	fp, r2
 800edf6:	b289      	uxth	r1, r1
 800edf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800edfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ee00:	f8d9 2000 	ldr.w	r2, [r9]
 800ee04:	4461      	add	r1, ip
 800ee06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ee0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ee12:	b289      	uxth	r1, r1
 800ee14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ee18:	4577      	cmp	r7, lr
 800ee1a:	f849 1b04 	str.w	r1, [r9], #4
 800ee1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee22:	d8e2      	bhi.n	800edea <__multiply+0xb2>
 800ee24:	9a01      	ldr	r2, [sp, #4]
 800ee26:	f845 c002 	str.w	ip, [r5, r2]
 800ee2a:	9a03      	ldr	r2, [sp, #12]
 800ee2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee30:	3304      	adds	r3, #4
 800ee32:	f1b9 0f00 	cmp.w	r9, #0
 800ee36:	d020      	beq.n	800ee7a <__multiply+0x142>
 800ee38:	6829      	ldr	r1, [r5, #0]
 800ee3a:	f104 0c14 	add.w	ip, r4, #20
 800ee3e:	46ae      	mov	lr, r5
 800ee40:	f04f 0a00 	mov.w	sl, #0
 800ee44:	f8bc b000 	ldrh.w	fp, [ip]
 800ee48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ee4c:	fb09 220b 	mla	r2, r9, fp, r2
 800ee50:	4492      	add	sl, r2
 800ee52:	b289      	uxth	r1, r1
 800ee54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ee58:	f84e 1b04 	str.w	r1, [lr], #4
 800ee5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ee60:	f8be 1000 	ldrh.w	r1, [lr]
 800ee64:	0c12      	lsrs	r2, r2, #16
 800ee66:	fb09 1102 	mla	r1, r9, r2, r1
 800ee6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ee6e:	4567      	cmp	r7, ip
 800ee70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ee74:	d8e6      	bhi.n	800ee44 <__multiply+0x10c>
 800ee76:	9a01      	ldr	r2, [sp, #4]
 800ee78:	50a9      	str	r1, [r5, r2]
 800ee7a:	3504      	adds	r5, #4
 800ee7c:	e79a      	b.n	800edb4 <__multiply+0x7c>
 800ee7e:	3e01      	subs	r6, #1
 800ee80:	e79c      	b.n	800edbc <__multiply+0x84>
 800ee82:	bf00      	nop
 800ee84:	08012c08 	.word	0x08012c08
 800ee88:	08012c94 	.word	0x08012c94

0800ee8c <__pow5mult>:
 800ee8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee90:	4615      	mov	r5, r2
 800ee92:	f012 0203 	ands.w	r2, r2, #3
 800ee96:	4606      	mov	r6, r0
 800ee98:	460f      	mov	r7, r1
 800ee9a:	d007      	beq.n	800eeac <__pow5mult+0x20>
 800ee9c:	4c25      	ldr	r4, [pc, #148]	; (800ef34 <__pow5mult+0xa8>)
 800ee9e:	3a01      	subs	r2, #1
 800eea0:	2300      	movs	r3, #0
 800eea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eea6:	f7ff fe51 	bl	800eb4c <__multadd>
 800eeaa:	4607      	mov	r7, r0
 800eeac:	10ad      	asrs	r5, r5, #2
 800eeae:	d03d      	beq.n	800ef2c <__pow5mult+0xa0>
 800eeb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eeb2:	b97c      	cbnz	r4, 800eed4 <__pow5mult+0x48>
 800eeb4:	2010      	movs	r0, #16
 800eeb6:	f7ff fdbf 	bl	800ea38 <malloc>
 800eeba:	4602      	mov	r2, r0
 800eebc:	6270      	str	r0, [r6, #36]	; 0x24
 800eebe:	b928      	cbnz	r0, 800eecc <__pow5mult+0x40>
 800eec0:	4b1d      	ldr	r3, [pc, #116]	; (800ef38 <__pow5mult+0xac>)
 800eec2:	481e      	ldr	r0, [pc, #120]	; (800ef3c <__pow5mult+0xb0>)
 800eec4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eec8:	f001 f94a 	bl	8010160 <__assert_func>
 800eecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eed0:	6004      	str	r4, [r0, #0]
 800eed2:	60c4      	str	r4, [r0, #12]
 800eed4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eedc:	b94c      	cbnz	r4, 800eef2 <__pow5mult+0x66>
 800eede:	f240 2171 	movw	r1, #625	; 0x271
 800eee2:	4630      	mov	r0, r6
 800eee4:	f7ff ff12 	bl	800ed0c <__i2b>
 800eee8:	2300      	movs	r3, #0
 800eeea:	f8c8 0008 	str.w	r0, [r8, #8]
 800eeee:	4604      	mov	r4, r0
 800eef0:	6003      	str	r3, [r0, #0]
 800eef2:	f04f 0900 	mov.w	r9, #0
 800eef6:	07eb      	lsls	r3, r5, #31
 800eef8:	d50a      	bpl.n	800ef10 <__pow5mult+0x84>
 800eefa:	4639      	mov	r1, r7
 800eefc:	4622      	mov	r2, r4
 800eefe:	4630      	mov	r0, r6
 800ef00:	f7ff ff1a 	bl	800ed38 <__multiply>
 800ef04:	4639      	mov	r1, r7
 800ef06:	4680      	mov	r8, r0
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f7ff fdfd 	bl	800eb08 <_Bfree>
 800ef0e:	4647      	mov	r7, r8
 800ef10:	106d      	asrs	r5, r5, #1
 800ef12:	d00b      	beq.n	800ef2c <__pow5mult+0xa0>
 800ef14:	6820      	ldr	r0, [r4, #0]
 800ef16:	b938      	cbnz	r0, 800ef28 <__pow5mult+0x9c>
 800ef18:	4622      	mov	r2, r4
 800ef1a:	4621      	mov	r1, r4
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f7ff ff0b 	bl	800ed38 <__multiply>
 800ef22:	6020      	str	r0, [r4, #0]
 800ef24:	f8c0 9000 	str.w	r9, [r0]
 800ef28:	4604      	mov	r4, r0
 800ef2a:	e7e4      	b.n	800eef6 <__pow5mult+0x6a>
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef32:	bf00      	nop
 800ef34:	08012de0 	.word	0x08012de0
 800ef38:	08012b96 	.word	0x08012b96
 800ef3c:	08012c94 	.word	0x08012c94

0800ef40 <__lshift>:
 800ef40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef44:	460c      	mov	r4, r1
 800ef46:	6849      	ldr	r1, [r1, #4]
 800ef48:	6923      	ldr	r3, [r4, #16]
 800ef4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef4e:	68a3      	ldr	r3, [r4, #8]
 800ef50:	4607      	mov	r7, r0
 800ef52:	4691      	mov	r9, r2
 800ef54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef58:	f108 0601 	add.w	r6, r8, #1
 800ef5c:	42b3      	cmp	r3, r6
 800ef5e:	db0b      	blt.n	800ef78 <__lshift+0x38>
 800ef60:	4638      	mov	r0, r7
 800ef62:	f7ff fd91 	bl	800ea88 <_Balloc>
 800ef66:	4605      	mov	r5, r0
 800ef68:	b948      	cbnz	r0, 800ef7e <__lshift+0x3e>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	4b2a      	ldr	r3, [pc, #168]	; (800f018 <__lshift+0xd8>)
 800ef6e:	482b      	ldr	r0, [pc, #172]	; (800f01c <__lshift+0xdc>)
 800ef70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ef74:	f001 f8f4 	bl	8010160 <__assert_func>
 800ef78:	3101      	adds	r1, #1
 800ef7a:	005b      	lsls	r3, r3, #1
 800ef7c:	e7ee      	b.n	800ef5c <__lshift+0x1c>
 800ef7e:	2300      	movs	r3, #0
 800ef80:	f100 0114 	add.w	r1, r0, #20
 800ef84:	f100 0210 	add.w	r2, r0, #16
 800ef88:	4618      	mov	r0, r3
 800ef8a:	4553      	cmp	r3, sl
 800ef8c:	db37      	blt.n	800effe <__lshift+0xbe>
 800ef8e:	6920      	ldr	r0, [r4, #16]
 800ef90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef94:	f104 0314 	add.w	r3, r4, #20
 800ef98:	f019 091f 	ands.w	r9, r9, #31
 800ef9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800efa4:	d02f      	beq.n	800f006 <__lshift+0xc6>
 800efa6:	f1c9 0e20 	rsb	lr, r9, #32
 800efaa:	468a      	mov	sl, r1
 800efac:	f04f 0c00 	mov.w	ip, #0
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	fa02 f209 	lsl.w	r2, r2, r9
 800efb6:	ea42 020c 	orr.w	r2, r2, ip
 800efba:	f84a 2b04 	str.w	r2, [sl], #4
 800efbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc2:	4298      	cmp	r0, r3
 800efc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800efc8:	d8f2      	bhi.n	800efb0 <__lshift+0x70>
 800efca:	1b03      	subs	r3, r0, r4
 800efcc:	3b15      	subs	r3, #21
 800efce:	f023 0303 	bic.w	r3, r3, #3
 800efd2:	3304      	adds	r3, #4
 800efd4:	f104 0215 	add.w	r2, r4, #21
 800efd8:	4290      	cmp	r0, r2
 800efda:	bf38      	it	cc
 800efdc:	2304      	movcc	r3, #4
 800efde:	f841 c003 	str.w	ip, [r1, r3]
 800efe2:	f1bc 0f00 	cmp.w	ip, #0
 800efe6:	d001      	beq.n	800efec <__lshift+0xac>
 800efe8:	f108 0602 	add.w	r6, r8, #2
 800efec:	3e01      	subs	r6, #1
 800efee:	4638      	mov	r0, r7
 800eff0:	612e      	str	r6, [r5, #16]
 800eff2:	4621      	mov	r1, r4
 800eff4:	f7ff fd88 	bl	800eb08 <_Bfree>
 800eff8:	4628      	mov	r0, r5
 800effa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800effe:	f842 0f04 	str.w	r0, [r2, #4]!
 800f002:	3301      	adds	r3, #1
 800f004:	e7c1      	b.n	800ef8a <__lshift+0x4a>
 800f006:	3904      	subs	r1, #4
 800f008:	f853 2b04 	ldr.w	r2, [r3], #4
 800f00c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f010:	4298      	cmp	r0, r3
 800f012:	d8f9      	bhi.n	800f008 <__lshift+0xc8>
 800f014:	e7ea      	b.n	800efec <__lshift+0xac>
 800f016:	bf00      	nop
 800f018:	08012c08 	.word	0x08012c08
 800f01c:	08012c94 	.word	0x08012c94

0800f020 <__mcmp>:
 800f020:	b530      	push	{r4, r5, lr}
 800f022:	6902      	ldr	r2, [r0, #16]
 800f024:	690c      	ldr	r4, [r1, #16]
 800f026:	1b12      	subs	r2, r2, r4
 800f028:	d10e      	bne.n	800f048 <__mcmp+0x28>
 800f02a:	f100 0314 	add.w	r3, r0, #20
 800f02e:	3114      	adds	r1, #20
 800f030:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f034:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f038:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f03c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f040:	42a5      	cmp	r5, r4
 800f042:	d003      	beq.n	800f04c <__mcmp+0x2c>
 800f044:	d305      	bcc.n	800f052 <__mcmp+0x32>
 800f046:	2201      	movs	r2, #1
 800f048:	4610      	mov	r0, r2
 800f04a:	bd30      	pop	{r4, r5, pc}
 800f04c:	4283      	cmp	r3, r0
 800f04e:	d3f3      	bcc.n	800f038 <__mcmp+0x18>
 800f050:	e7fa      	b.n	800f048 <__mcmp+0x28>
 800f052:	f04f 32ff 	mov.w	r2, #4294967295
 800f056:	e7f7      	b.n	800f048 <__mcmp+0x28>

0800f058 <__mdiff>:
 800f058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05c:	460c      	mov	r4, r1
 800f05e:	4606      	mov	r6, r0
 800f060:	4611      	mov	r1, r2
 800f062:	4620      	mov	r0, r4
 800f064:	4690      	mov	r8, r2
 800f066:	f7ff ffdb 	bl	800f020 <__mcmp>
 800f06a:	1e05      	subs	r5, r0, #0
 800f06c:	d110      	bne.n	800f090 <__mdiff+0x38>
 800f06e:	4629      	mov	r1, r5
 800f070:	4630      	mov	r0, r6
 800f072:	f7ff fd09 	bl	800ea88 <_Balloc>
 800f076:	b930      	cbnz	r0, 800f086 <__mdiff+0x2e>
 800f078:	4b3a      	ldr	r3, [pc, #232]	; (800f164 <__mdiff+0x10c>)
 800f07a:	4602      	mov	r2, r0
 800f07c:	f240 2132 	movw	r1, #562	; 0x232
 800f080:	4839      	ldr	r0, [pc, #228]	; (800f168 <__mdiff+0x110>)
 800f082:	f001 f86d 	bl	8010160 <__assert_func>
 800f086:	2301      	movs	r3, #1
 800f088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f08c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f090:	bfa4      	itt	ge
 800f092:	4643      	movge	r3, r8
 800f094:	46a0      	movge	r8, r4
 800f096:	4630      	mov	r0, r6
 800f098:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f09c:	bfa6      	itte	ge
 800f09e:	461c      	movge	r4, r3
 800f0a0:	2500      	movge	r5, #0
 800f0a2:	2501      	movlt	r5, #1
 800f0a4:	f7ff fcf0 	bl	800ea88 <_Balloc>
 800f0a8:	b920      	cbnz	r0, 800f0b4 <__mdiff+0x5c>
 800f0aa:	4b2e      	ldr	r3, [pc, #184]	; (800f164 <__mdiff+0x10c>)
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0b2:	e7e5      	b.n	800f080 <__mdiff+0x28>
 800f0b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f0b8:	6926      	ldr	r6, [r4, #16]
 800f0ba:	60c5      	str	r5, [r0, #12]
 800f0bc:	f104 0914 	add.w	r9, r4, #20
 800f0c0:	f108 0514 	add.w	r5, r8, #20
 800f0c4:	f100 0e14 	add.w	lr, r0, #20
 800f0c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f0cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f0d0:	f108 0210 	add.w	r2, r8, #16
 800f0d4:	46f2      	mov	sl, lr
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f0dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f0e0:	fa1f f883 	uxth.w	r8, r3
 800f0e4:	fa11 f18b 	uxtah	r1, r1, fp
 800f0e8:	0c1b      	lsrs	r3, r3, #16
 800f0ea:	eba1 0808 	sub.w	r8, r1, r8
 800f0ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f0f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f0f6:	fa1f f888 	uxth.w	r8, r8
 800f0fa:	1419      	asrs	r1, r3, #16
 800f0fc:	454e      	cmp	r6, r9
 800f0fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f102:	f84a 3b04 	str.w	r3, [sl], #4
 800f106:	d8e7      	bhi.n	800f0d8 <__mdiff+0x80>
 800f108:	1b33      	subs	r3, r6, r4
 800f10a:	3b15      	subs	r3, #21
 800f10c:	f023 0303 	bic.w	r3, r3, #3
 800f110:	3304      	adds	r3, #4
 800f112:	3415      	adds	r4, #21
 800f114:	42a6      	cmp	r6, r4
 800f116:	bf38      	it	cc
 800f118:	2304      	movcc	r3, #4
 800f11a:	441d      	add	r5, r3
 800f11c:	4473      	add	r3, lr
 800f11e:	469e      	mov	lr, r3
 800f120:	462e      	mov	r6, r5
 800f122:	4566      	cmp	r6, ip
 800f124:	d30e      	bcc.n	800f144 <__mdiff+0xec>
 800f126:	f10c 0203 	add.w	r2, ip, #3
 800f12a:	1b52      	subs	r2, r2, r5
 800f12c:	f022 0203 	bic.w	r2, r2, #3
 800f130:	3d03      	subs	r5, #3
 800f132:	45ac      	cmp	ip, r5
 800f134:	bf38      	it	cc
 800f136:	2200      	movcc	r2, #0
 800f138:	441a      	add	r2, r3
 800f13a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f13e:	b17b      	cbz	r3, 800f160 <__mdiff+0x108>
 800f140:	6107      	str	r7, [r0, #16]
 800f142:	e7a3      	b.n	800f08c <__mdiff+0x34>
 800f144:	f856 8b04 	ldr.w	r8, [r6], #4
 800f148:	fa11 f288 	uxtah	r2, r1, r8
 800f14c:	1414      	asrs	r4, r2, #16
 800f14e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f152:	b292      	uxth	r2, r2
 800f154:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f158:	f84e 2b04 	str.w	r2, [lr], #4
 800f15c:	1421      	asrs	r1, r4, #16
 800f15e:	e7e0      	b.n	800f122 <__mdiff+0xca>
 800f160:	3f01      	subs	r7, #1
 800f162:	e7ea      	b.n	800f13a <__mdiff+0xe2>
 800f164:	08012c08 	.word	0x08012c08
 800f168:	08012c94 	.word	0x08012c94

0800f16c <__ulp>:
 800f16c:	b082      	sub	sp, #8
 800f16e:	ed8d 0b00 	vstr	d0, [sp]
 800f172:	9b01      	ldr	r3, [sp, #4]
 800f174:	4912      	ldr	r1, [pc, #72]	; (800f1c0 <__ulp+0x54>)
 800f176:	4019      	ands	r1, r3
 800f178:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f17c:	2900      	cmp	r1, #0
 800f17e:	dd05      	ble.n	800f18c <__ulp+0x20>
 800f180:	2200      	movs	r2, #0
 800f182:	460b      	mov	r3, r1
 800f184:	ec43 2b10 	vmov	d0, r2, r3
 800f188:	b002      	add	sp, #8
 800f18a:	4770      	bx	lr
 800f18c:	4249      	negs	r1, r1
 800f18e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f192:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f196:	f04f 0200 	mov.w	r2, #0
 800f19a:	f04f 0300 	mov.w	r3, #0
 800f19e:	da04      	bge.n	800f1aa <__ulp+0x3e>
 800f1a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f1a4:	fa41 f300 	asr.w	r3, r1, r0
 800f1a8:	e7ec      	b.n	800f184 <__ulp+0x18>
 800f1aa:	f1a0 0114 	sub.w	r1, r0, #20
 800f1ae:	291e      	cmp	r1, #30
 800f1b0:	bfda      	itte	le
 800f1b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f1b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800f1ba:	2101      	movgt	r1, #1
 800f1bc:	460a      	mov	r2, r1
 800f1be:	e7e1      	b.n	800f184 <__ulp+0x18>
 800f1c0:	7ff00000 	.word	0x7ff00000

0800f1c4 <__b2d>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	6905      	ldr	r5, [r0, #16]
 800f1c8:	f100 0714 	add.w	r7, r0, #20
 800f1cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f1d0:	1f2e      	subs	r6, r5, #4
 800f1d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f7ff fd48 	bl	800ec6c <__hi0bits>
 800f1dc:	f1c0 0320 	rsb	r3, r0, #32
 800f1e0:	280a      	cmp	r0, #10
 800f1e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f260 <__b2d+0x9c>
 800f1e6:	600b      	str	r3, [r1, #0]
 800f1e8:	dc14      	bgt.n	800f214 <__b2d+0x50>
 800f1ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800f1ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800f1f2:	42b7      	cmp	r7, r6
 800f1f4:	ea41 030c 	orr.w	r3, r1, ip
 800f1f8:	bf34      	ite	cc
 800f1fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f1fe:	2100      	movcs	r1, #0
 800f200:	3015      	adds	r0, #21
 800f202:	fa04 f000 	lsl.w	r0, r4, r0
 800f206:	fa21 f10e 	lsr.w	r1, r1, lr
 800f20a:	ea40 0201 	orr.w	r2, r0, r1
 800f20e:	ec43 2b10 	vmov	d0, r2, r3
 800f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f214:	42b7      	cmp	r7, r6
 800f216:	bf3a      	itte	cc
 800f218:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f21c:	f1a5 0608 	subcc.w	r6, r5, #8
 800f220:	2100      	movcs	r1, #0
 800f222:	380b      	subs	r0, #11
 800f224:	d017      	beq.n	800f256 <__b2d+0x92>
 800f226:	f1c0 0c20 	rsb	ip, r0, #32
 800f22a:	fa04 f500 	lsl.w	r5, r4, r0
 800f22e:	42be      	cmp	r6, r7
 800f230:	fa21 f40c 	lsr.w	r4, r1, ip
 800f234:	ea45 0504 	orr.w	r5, r5, r4
 800f238:	bf8c      	ite	hi
 800f23a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f23e:	2400      	movls	r4, #0
 800f240:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f244:	fa01 f000 	lsl.w	r0, r1, r0
 800f248:	fa24 f40c 	lsr.w	r4, r4, ip
 800f24c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f250:	ea40 0204 	orr.w	r2, r0, r4
 800f254:	e7db      	b.n	800f20e <__b2d+0x4a>
 800f256:	ea44 030c 	orr.w	r3, r4, ip
 800f25a:	460a      	mov	r2, r1
 800f25c:	e7d7      	b.n	800f20e <__b2d+0x4a>
 800f25e:	bf00      	nop
 800f260:	3ff00000 	.word	0x3ff00000

0800f264 <__d2b>:
 800f264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f268:	4689      	mov	r9, r1
 800f26a:	2101      	movs	r1, #1
 800f26c:	ec57 6b10 	vmov	r6, r7, d0
 800f270:	4690      	mov	r8, r2
 800f272:	f7ff fc09 	bl	800ea88 <_Balloc>
 800f276:	4604      	mov	r4, r0
 800f278:	b930      	cbnz	r0, 800f288 <__d2b+0x24>
 800f27a:	4602      	mov	r2, r0
 800f27c:	4b25      	ldr	r3, [pc, #148]	; (800f314 <__d2b+0xb0>)
 800f27e:	4826      	ldr	r0, [pc, #152]	; (800f318 <__d2b+0xb4>)
 800f280:	f240 310a 	movw	r1, #778	; 0x30a
 800f284:	f000 ff6c 	bl	8010160 <__assert_func>
 800f288:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f28c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f290:	bb35      	cbnz	r5, 800f2e0 <__d2b+0x7c>
 800f292:	2e00      	cmp	r6, #0
 800f294:	9301      	str	r3, [sp, #4]
 800f296:	d028      	beq.n	800f2ea <__d2b+0x86>
 800f298:	4668      	mov	r0, sp
 800f29a:	9600      	str	r6, [sp, #0]
 800f29c:	f7ff fd06 	bl	800ecac <__lo0bits>
 800f2a0:	9900      	ldr	r1, [sp, #0]
 800f2a2:	b300      	cbz	r0, 800f2e6 <__d2b+0x82>
 800f2a4:	9a01      	ldr	r2, [sp, #4]
 800f2a6:	f1c0 0320 	rsb	r3, r0, #32
 800f2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ae:	430b      	orrs	r3, r1
 800f2b0:	40c2      	lsrs	r2, r0
 800f2b2:	6163      	str	r3, [r4, #20]
 800f2b4:	9201      	str	r2, [sp, #4]
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	61a3      	str	r3, [r4, #24]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bf14      	ite	ne
 800f2be:	2202      	movne	r2, #2
 800f2c0:	2201      	moveq	r2, #1
 800f2c2:	6122      	str	r2, [r4, #16]
 800f2c4:	b1d5      	cbz	r5, 800f2fc <__d2b+0x98>
 800f2c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f2ca:	4405      	add	r5, r0
 800f2cc:	f8c9 5000 	str.w	r5, [r9]
 800f2d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f2d4:	f8c8 0000 	str.w	r0, [r8]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	b003      	add	sp, #12
 800f2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2e4:	e7d5      	b.n	800f292 <__d2b+0x2e>
 800f2e6:	6161      	str	r1, [r4, #20]
 800f2e8:	e7e5      	b.n	800f2b6 <__d2b+0x52>
 800f2ea:	a801      	add	r0, sp, #4
 800f2ec:	f7ff fcde 	bl	800ecac <__lo0bits>
 800f2f0:	9b01      	ldr	r3, [sp, #4]
 800f2f2:	6163      	str	r3, [r4, #20]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	6122      	str	r2, [r4, #16]
 800f2f8:	3020      	adds	r0, #32
 800f2fa:	e7e3      	b.n	800f2c4 <__d2b+0x60>
 800f2fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f300:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f304:	f8c9 0000 	str.w	r0, [r9]
 800f308:	6918      	ldr	r0, [r3, #16]
 800f30a:	f7ff fcaf 	bl	800ec6c <__hi0bits>
 800f30e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f312:	e7df      	b.n	800f2d4 <__d2b+0x70>
 800f314:	08012c08 	.word	0x08012c08
 800f318:	08012c94 	.word	0x08012c94

0800f31c <__ratio>:
 800f31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f320:	4688      	mov	r8, r1
 800f322:	4669      	mov	r1, sp
 800f324:	4681      	mov	r9, r0
 800f326:	f7ff ff4d 	bl	800f1c4 <__b2d>
 800f32a:	a901      	add	r1, sp, #4
 800f32c:	4640      	mov	r0, r8
 800f32e:	ec55 4b10 	vmov	r4, r5, d0
 800f332:	f7ff ff47 	bl	800f1c4 <__b2d>
 800f336:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f33a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f33e:	eba3 0c02 	sub.w	ip, r3, r2
 800f342:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f346:	1a9b      	subs	r3, r3, r2
 800f348:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f34c:	ec51 0b10 	vmov	r0, r1, d0
 800f350:	2b00      	cmp	r3, #0
 800f352:	bfd6      	itet	le
 800f354:	460a      	movle	r2, r1
 800f356:	462a      	movgt	r2, r5
 800f358:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f35c:	468b      	mov	fp, r1
 800f35e:	462f      	mov	r7, r5
 800f360:	bfd4      	ite	le
 800f362:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f366:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f36a:	4620      	mov	r0, r4
 800f36c:	ee10 2a10 	vmov	r2, s0
 800f370:	465b      	mov	r3, fp
 800f372:	4639      	mov	r1, r7
 800f374:	f7f1 fa9a 	bl	80008ac <__aeabi_ddiv>
 800f378:	ec41 0b10 	vmov	d0, r0, r1
 800f37c:	b003      	add	sp, #12
 800f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f382 <__copybits>:
 800f382:	3901      	subs	r1, #1
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	1149      	asrs	r1, r1, #5
 800f388:	6914      	ldr	r4, [r2, #16]
 800f38a:	3101      	adds	r1, #1
 800f38c:	f102 0314 	add.w	r3, r2, #20
 800f390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f394:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f398:	1f05      	subs	r5, r0, #4
 800f39a:	42a3      	cmp	r3, r4
 800f39c:	d30c      	bcc.n	800f3b8 <__copybits+0x36>
 800f39e:	1aa3      	subs	r3, r4, r2
 800f3a0:	3b11      	subs	r3, #17
 800f3a2:	f023 0303 	bic.w	r3, r3, #3
 800f3a6:	3211      	adds	r2, #17
 800f3a8:	42a2      	cmp	r2, r4
 800f3aa:	bf88      	it	hi
 800f3ac:	2300      	movhi	r3, #0
 800f3ae:	4418      	add	r0, r3
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	4288      	cmp	r0, r1
 800f3b4:	d305      	bcc.n	800f3c2 <__copybits+0x40>
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800f3bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800f3c0:	e7eb      	b.n	800f39a <__copybits+0x18>
 800f3c2:	f840 3b04 	str.w	r3, [r0], #4
 800f3c6:	e7f4      	b.n	800f3b2 <__copybits+0x30>

0800f3c8 <__any_on>:
 800f3c8:	f100 0214 	add.w	r2, r0, #20
 800f3cc:	6900      	ldr	r0, [r0, #16]
 800f3ce:	114b      	asrs	r3, r1, #5
 800f3d0:	4298      	cmp	r0, r3
 800f3d2:	b510      	push	{r4, lr}
 800f3d4:	db11      	blt.n	800f3fa <__any_on+0x32>
 800f3d6:	dd0a      	ble.n	800f3ee <__any_on+0x26>
 800f3d8:	f011 011f 	ands.w	r1, r1, #31
 800f3dc:	d007      	beq.n	800f3ee <__any_on+0x26>
 800f3de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f3e2:	fa24 f001 	lsr.w	r0, r4, r1
 800f3e6:	fa00 f101 	lsl.w	r1, r0, r1
 800f3ea:	428c      	cmp	r4, r1
 800f3ec:	d10b      	bne.n	800f406 <__any_on+0x3e>
 800f3ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d803      	bhi.n	800f3fe <__any_on+0x36>
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	bd10      	pop	{r4, pc}
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	e7f7      	b.n	800f3ee <__any_on+0x26>
 800f3fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f402:	2900      	cmp	r1, #0
 800f404:	d0f5      	beq.n	800f3f2 <__any_on+0x2a>
 800f406:	2001      	movs	r0, #1
 800f408:	e7f6      	b.n	800f3f8 <__any_on+0x30>

0800f40a <_calloc_r>:
 800f40a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f40c:	fba1 2402 	umull	r2, r4, r1, r2
 800f410:	b94c      	cbnz	r4, 800f426 <_calloc_r+0x1c>
 800f412:	4611      	mov	r1, r2
 800f414:	9201      	str	r2, [sp, #4]
 800f416:	f000 f87b 	bl	800f510 <_malloc_r>
 800f41a:	9a01      	ldr	r2, [sp, #4]
 800f41c:	4605      	mov	r5, r0
 800f41e:	b930      	cbnz	r0, 800f42e <_calloc_r+0x24>
 800f420:	4628      	mov	r0, r5
 800f422:	b003      	add	sp, #12
 800f424:	bd30      	pop	{r4, r5, pc}
 800f426:	220c      	movs	r2, #12
 800f428:	6002      	str	r2, [r0, #0]
 800f42a:	2500      	movs	r5, #0
 800f42c:	e7f8      	b.n	800f420 <_calloc_r+0x16>
 800f42e:	4621      	mov	r1, r4
 800f430:	f7fc faf8 	bl	800ba24 <memset>
 800f434:	e7f4      	b.n	800f420 <_calloc_r+0x16>
	...

0800f438 <_free_r>:
 800f438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f43a:	2900      	cmp	r1, #0
 800f43c:	d044      	beq.n	800f4c8 <_free_r+0x90>
 800f43e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f442:	9001      	str	r0, [sp, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	f1a1 0404 	sub.w	r4, r1, #4
 800f44a:	bfb8      	it	lt
 800f44c:	18e4      	addlt	r4, r4, r3
 800f44e:	f001 f88b 	bl	8010568 <__malloc_lock>
 800f452:	4a1e      	ldr	r2, [pc, #120]	; (800f4cc <_free_r+0x94>)
 800f454:	9801      	ldr	r0, [sp, #4]
 800f456:	6813      	ldr	r3, [r2, #0]
 800f458:	b933      	cbnz	r3, 800f468 <_free_r+0x30>
 800f45a:	6063      	str	r3, [r4, #4]
 800f45c:	6014      	str	r4, [r2, #0]
 800f45e:	b003      	add	sp, #12
 800f460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f464:	f001 b886 	b.w	8010574 <__malloc_unlock>
 800f468:	42a3      	cmp	r3, r4
 800f46a:	d908      	bls.n	800f47e <_free_r+0x46>
 800f46c:	6825      	ldr	r5, [r4, #0]
 800f46e:	1961      	adds	r1, r4, r5
 800f470:	428b      	cmp	r3, r1
 800f472:	bf01      	itttt	eq
 800f474:	6819      	ldreq	r1, [r3, #0]
 800f476:	685b      	ldreq	r3, [r3, #4]
 800f478:	1949      	addeq	r1, r1, r5
 800f47a:	6021      	streq	r1, [r4, #0]
 800f47c:	e7ed      	b.n	800f45a <_free_r+0x22>
 800f47e:	461a      	mov	r2, r3
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	b10b      	cbz	r3, 800f488 <_free_r+0x50>
 800f484:	42a3      	cmp	r3, r4
 800f486:	d9fa      	bls.n	800f47e <_free_r+0x46>
 800f488:	6811      	ldr	r1, [r2, #0]
 800f48a:	1855      	adds	r5, r2, r1
 800f48c:	42a5      	cmp	r5, r4
 800f48e:	d10b      	bne.n	800f4a8 <_free_r+0x70>
 800f490:	6824      	ldr	r4, [r4, #0]
 800f492:	4421      	add	r1, r4
 800f494:	1854      	adds	r4, r2, r1
 800f496:	42a3      	cmp	r3, r4
 800f498:	6011      	str	r1, [r2, #0]
 800f49a:	d1e0      	bne.n	800f45e <_free_r+0x26>
 800f49c:	681c      	ldr	r4, [r3, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	6053      	str	r3, [r2, #4]
 800f4a2:	4421      	add	r1, r4
 800f4a4:	6011      	str	r1, [r2, #0]
 800f4a6:	e7da      	b.n	800f45e <_free_r+0x26>
 800f4a8:	d902      	bls.n	800f4b0 <_free_r+0x78>
 800f4aa:	230c      	movs	r3, #12
 800f4ac:	6003      	str	r3, [r0, #0]
 800f4ae:	e7d6      	b.n	800f45e <_free_r+0x26>
 800f4b0:	6825      	ldr	r5, [r4, #0]
 800f4b2:	1961      	adds	r1, r4, r5
 800f4b4:	428b      	cmp	r3, r1
 800f4b6:	bf04      	itt	eq
 800f4b8:	6819      	ldreq	r1, [r3, #0]
 800f4ba:	685b      	ldreq	r3, [r3, #4]
 800f4bc:	6063      	str	r3, [r4, #4]
 800f4be:	bf04      	itt	eq
 800f4c0:	1949      	addeq	r1, r1, r5
 800f4c2:	6021      	streq	r1, [r4, #0]
 800f4c4:	6054      	str	r4, [r2, #4]
 800f4c6:	e7ca      	b.n	800f45e <_free_r+0x26>
 800f4c8:	b003      	add	sp, #12
 800f4ca:	bd30      	pop	{r4, r5, pc}
 800f4cc:	20001240 	.word	0x20001240

0800f4d0 <sbrk_aligned>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	4e0e      	ldr	r6, [pc, #56]	; (800f50c <sbrk_aligned+0x3c>)
 800f4d4:	460c      	mov	r4, r1
 800f4d6:	6831      	ldr	r1, [r6, #0]
 800f4d8:	4605      	mov	r5, r0
 800f4da:	b911      	cbnz	r1, 800f4e2 <sbrk_aligned+0x12>
 800f4dc:	f000 fd28 	bl	800ff30 <_sbrk_r>
 800f4e0:	6030      	str	r0, [r6, #0]
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f000 fd23 	bl	800ff30 <_sbrk_r>
 800f4ea:	1c43      	adds	r3, r0, #1
 800f4ec:	d00a      	beq.n	800f504 <sbrk_aligned+0x34>
 800f4ee:	1cc4      	adds	r4, r0, #3
 800f4f0:	f024 0403 	bic.w	r4, r4, #3
 800f4f4:	42a0      	cmp	r0, r4
 800f4f6:	d007      	beq.n	800f508 <sbrk_aligned+0x38>
 800f4f8:	1a21      	subs	r1, r4, r0
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f000 fd18 	bl	800ff30 <_sbrk_r>
 800f500:	3001      	adds	r0, #1
 800f502:	d101      	bne.n	800f508 <sbrk_aligned+0x38>
 800f504:	f04f 34ff 	mov.w	r4, #4294967295
 800f508:	4620      	mov	r0, r4
 800f50a:	bd70      	pop	{r4, r5, r6, pc}
 800f50c:	20001244 	.word	0x20001244

0800f510 <_malloc_r>:
 800f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f514:	1ccd      	adds	r5, r1, #3
 800f516:	f025 0503 	bic.w	r5, r5, #3
 800f51a:	3508      	adds	r5, #8
 800f51c:	2d0c      	cmp	r5, #12
 800f51e:	bf38      	it	cc
 800f520:	250c      	movcc	r5, #12
 800f522:	2d00      	cmp	r5, #0
 800f524:	4607      	mov	r7, r0
 800f526:	db01      	blt.n	800f52c <_malloc_r+0x1c>
 800f528:	42a9      	cmp	r1, r5
 800f52a:	d905      	bls.n	800f538 <_malloc_r+0x28>
 800f52c:	230c      	movs	r3, #12
 800f52e:	603b      	str	r3, [r7, #0]
 800f530:	2600      	movs	r6, #0
 800f532:	4630      	mov	r0, r6
 800f534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f538:	4e2e      	ldr	r6, [pc, #184]	; (800f5f4 <_malloc_r+0xe4>)
 800f53a:	f001 f815 	bl	8010568 <__malloc_lock>
 800f53e:	6833      	ldr	r3, [r6, #0]
 800f540:	461c      	mov	r4, r3
 800f542:	bb34      	cbnz	r4, 800f592 <_malloc_r+0x82>
 800f544:	4629      	mov	r1, r5
 800f546:	4638      	mov	r0, r7
 800f548:	f7ff ffc2 	bl	800f4d0 <sbrk_aligned>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	4604      	mov	r4, r0
 800f550:	d14d      	bne.n	800f5ee <_malloc_r+0xde>
 800f552:	6834      	ldr	r4, [r6, #0]
 800f554:	4626      	mov	r6, r4
 800f556:	2e00      	cmp	r6, #0
 800f558:	d140      	bne.n	800f5dc <_malloc_r+0xcc>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	4631      	mov	r1, r6
 800f55e:	4638      	mov	r0, r7
 800f560:	eb04 0803 	add.w	r8, r4, r3
 800f564:	f000 fce4 	bl	800ff30 <_sbrk_r>
 800f568:	4580      	cmp	r8, r0
 800f56a:	d13a      	bne.n	800f5e2 <_malloc_r+0xd2>
 800f56c:	6821      	ldr	r1, [r4, #0]
 800f56e:	3503      	adds	r5, #3
 800f570:	1a6d      	subs	r5, r5, r1
 800f572:	f025 0503 	bic.w	r5, r5, #3
 800f576:	3508      	adds	r5, #8
 800f578:	2d0c      	cmp	r5, #12
 800f57a:	bf38      	it	cc
 800f57c:	250c      	movcc	r5, #12
 800f57e:	4629      	mov	r1, r5
 800f580:	4638      	mov	r0, r7
 800f582:	f7ff ffa5 	bl	800f4d0 <sbrk_aligned>
 800f586:	3001      	adds	r0, #1
 800f588:	d02b      	beq.n	800f5e2 <_malloc_r+0xd2>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	442b      	add	r3, r5
 800f58e:	6023      	str	r3, [r4, #0]
 800f590:	e00e      	b.n	800f5b0 <_malloc_r+0xa0>
 800f592:	6822      	ldr	r2, [r4, #0]
 800f594:	1b52      	subs	r2, r2, r5
 800f596:	d41e      	bmi.n	800f5d6 <_malloc_r+0xc6>
 800f598:	2a0b      	cmp	r2, #11
 800f59a:	d916      	bls.n	800f5ca <_malloc_r+0xba>
 800f59c:	1961      	adds	r1, r4, r5
 800f59e:	42a3      	cmp	r3, r4
 800f5a0:	6025      	str	r5, [r4, #0]
 800f5a2:	bf18      	it	ne
 800f5a4:	6059      	strne	r1, [r3, #4]
 800f5a6:	6863      	ldr	r3, [r4, #4]
 800f5a8:	bf08      	it	eq
 800f5aa:	6031      	streq	r1, [r6, #0]
 800f5ac:	5162      	str	r2, [r4, r5]
 800f5ae:	604b      	str	r3, [r1, #4]
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f104 060b 	add.w	r6, r4, #11
 800f5b6:	f000 ffdd 	bl	8010574 <__malloc_unlock>
 800f5ba:	f026 0607 	bic.w	r6, r6, #7
 800f5be:	1d23      	adds	r3, r4, #4
 800f5c0:	1af2      	subs	r2, r6, r3
 800f5c2:	d0b6      	beq.n	800f532 <_malloc_r+0x22>
 800f5c4:	1b9b      	subs	r3, r3, r6
 800f5c6:	50a3      	str	r3, [r4, r2]
 800f5c8:	e7b3      	b.n	800f532 <_malloc_r+0x22>
 800f5ca:	6862      	ldr	r2, [r4, #4]
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	bf0c      	ite	eq
 800f5d0:	6032      	streq	r2, [r6, #0]
 800f5d2:	605a      	strne	r2, [r3, #4]
 800f5d4:	e7ec      	b.n	800f5b0 <_malloc_r+0xa0>
 800f5d6:	4623      	mov	r3, r4
 800f5d8:	6864      	ldr	r4, [r4, #4]
 800f5da:	e7b2      	b.n	800f542 <_malloc_r+0x32>
 800f5dc:	4634      	mov	r4, r6
 800f5de:	6876      	ldr	r6, [r6, #4]
 800f5e0:	e7b9      	b.n	800f556 <_malloc_r+0x46>
 800f5e2:	230c      	movs	r3, #12
 800f5e4:	603b      	str	r3, [r7, #0]
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	f000 ffc4 	bl	8010574 <__malloc_unlock>
 800f5ec:	e7a1      	b.n	800f532 <_malloc_r+0x22>
 800f5ee:	6025      	str	r5, [r4, #0]
 800f5f0:	e7de      	b.n	800f5b0 <_malloc_r+0xa0>
 800f5f2:	bf00      	nop
 800f5f4:	20001240 	.word	0x20001240

0800f5f8 <__ssputs_r>:
 800f5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5fc:	688e      	ldr	r6, [r1, #8]
 800f5fe:	429e      	cmp	r6, r3
 800f600:	4682      	mov	sl, r0
 800f602:	460c      	mov	r4, r1
 800f604:	4690      	mov	r8, r2
 800f606:	461f      	mov	r7, r3
 800f608:	d838      	bhi.n	800f67c <__ssputs_r+0x84>
 800f60a:	898a      	ldrh	r2, [r1, #12]
 800f60c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f610:	d032      	beq.n	800f678 <__ssputs_r+0x80>
 800f612:	6825      	ldr	r5, [r4, #0]
 800f614:	6909      	ldr	r1, [r1, #16]
 800f616:	eba5 0901 	sub.w	r9, r5, r1
 800f61a:	6965      	ldr	r5, [r4, #20]
 800f61c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f624:	3301      	adds	r3, #1
 800f626:	444b      	add	r3, r9
 800f628:	106d      	asrs	r5, r5, #1
 800f62a:	429d      	cmp	r5, r3
 800f62c:	bf38      	it	cc
 800f62e:	461d      	movcc	r5, r3
 800f630:	0553      	lsls	r3, r2, #21
 800f632:	d531      	bpl.n	800f698 <__ssputs_r+0xa0>
 800f634:	4629      	mov	r1, r5
 800f636:	f7ff ff6b 	bl	800f510 <_malloc_r>
 800f63a:	4606      	mov	r6, r0
 800f63c:	b950      	cbnz	r0, 800f654 <__ssputs_r+0x5c>
 800f63e:	230c      	movs	r3, #12
 800f640:	f8ca 3000 	str.w	r3, [sl]
 800f644:	89a3      	ldrh	r3, [r4, #12]
 800f646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f64a:	81a3      	strh	r3, [r4, #12]
 800f64c:	f04f 30ff 	mov.w	r0, #4294967295
 800f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f654:	6921      	ldr	r1, [r4, #16]
 800f656:	464a      	mov	r2, r9
 800f658:	f7ff fa08 	bl	800ea6c <memcpy>
 800f65c:	89a3      	ldrh	r3, [r4, #12]
 800f65e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f666:	81a3      	strh	r3, [r4, #12]
 800f668:	6126      	str	r6, [r4, #16]
 800f66a:	6165      	str	r5, [r4, #20]
 800f66c:	444e      	add	r6, r9
 800f66e:	eba5 0509 	sub.w	r5, r5, r9
 800f672:	6026      	str	r6, [r4, #0]
 800f674:	60a5      	str	r5, [r4, #8]
 800f676:	463e      	mov	r6, r7
 800f678:	42be      	cmp	r6, r7
 800f67a:	d900      	bls.n	800f67e <__ssputs_r+0x86>
 800f67c:	463e      	mov	r6, r7
 800f67e:	6820      	ldr	r0, [r4, #0]
 800f680:	4632      	mov	r2, r6
 800f682:	4641      	mov	r1, r8
 800f684:	f000 ff56 	bl	8010534 <memmove>
 800f688:	68a3      	ldr	r3, [r4, #8]
 800f68a:	1b9b      	subs	r3, r3, r6
 800f68c:	60a3      	str	r3, [r4, #8]
 800f68e:	6823      	ldr	r3, [r4, #0]
 800f690:	4433      	add	r3, r6
 800f692:	6023      	str	r3, [r4, #0]
 800f694:	2000      	movs	r0, #0
 800f696:	e7db      	b.n	800f650 <__ssputs_r+0x58>
 800f698:	462a      	mov	r2, r5
 800f69a:	f000 ff71 	bl	8010580 <_realloc_r>
 800f69e:	4606      	mov	r6, r0
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d1e1      	bne.n	800f668 <__ssputs_r+0x70>
 800f6a4:	6921      	ldr	r1, [r4, #16]
 800f6a6:	4650      	mov	r0, sl
 800f6a8:	f7ff fec6 	bl	800f438 <_free_r>
 800f6ac:	e7c7      	b.n	800f63e <__ssputs_r+0x46>
	...

0800f6b0 <_svfiprintf_r>:
 800f6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b4:	4698      	mov	r8, r3
 800f6b6:	898b      	ldrh	r3, [r1, #12]
 800f6b8:	061b      	lsls	r3, r3, #24
 800f6ba:	b09d      	sub	sp, #116	; 0x74
 800f6bc:	4607      	mov	r7, r0
 800f6be:	460d      	mov	r5, r1
 800f6c0:	4614      	mov	r4, r2
 800f6c2:	d50e      	bpl.n	800f6e2 <_svfiprintf_r+0x32>
 800f6c4:	690b      	ldr	r3, [r1, #16]
 800f6c6:	b963      	cbnz	r3, 800f6e2 <_svfiprintf_r+0x32>
 800f6c8:	2140      	movs	r1, #64	; 0x40
 800f6ca:	f7ff ff21 	bl	800f510 <_malloc_r>
 800f6ce:	6028      	str	r0, [r5, #0]
 800f6d0:	6128      	str	r0, [r5, #16]
 800f6d2:	b920      	cbnz	r0, 800f6de <_svfiprintf_r+0x2e>
 800f6d4:	230c      	movs	r3, #12
 800f6d6:	603b      	str	r3, [r7, #0]
 800f6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6dc:	e0d1      	b.n	800f882 <_svfiprintf_r+0x1d2>
 800f6de:	2340      	movs	r3, #64	; 0x40
 800f6e0:	616b      	str	r3, [r5, #20]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6e6:	2320      	movs	r3, #32
 800f6e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6f0:	2330      	movs	r3, #48	; 0x30
 800f6f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f89c <_svfiprintf_r+0x1ec>
 800f6f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6fa:	f04f 0901 	mov.w	r9, #1
 800f6fe:	4623      	mov	r3, r4
 800f700:	469a      	mov	sl, r3
 800f702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f706:	b10a      	cbz	r2, 800f70c <_svfiprintf_r+0x5c>
 800f708:	2a25      	cmp	r2, #37	; 0x25
 800f70a:	d1f9      	bne.n	800f700 <_svfiprintf_r+0x50>
 800f70c:	ebba 0b04 	subs.w	fp, sl, r4
 800f710:	d00b      	beq.n	800f72a <_svfiprintf_r+0x7a>
 800f712:	465b      	mov	r3, fp
 800f714:	4622      	mov	r2, r4
 800f716:	4629      	mov	r1, r5
 800f718:	4638      	mov	r0, r7
 800f71a:	f7ff ff6d 	bl	800f5f8 <__ssputs_r>
 800f71e:	3001      	adds	r0, #1
 800f720:	f000 80aa 	beq.w	800f878 <_svfiprintf_r+0x1c8>
 800f724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f726:	445a      	add	r2, fp
 800f728:	9209      	str	r2, [sp, #36]	; 0x24
 800f72a:	f89a 3000 	ldrb.w	r3, [sl]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f000 80a2 	beq.w	800f878 <_svfiprintf_r+0x1c8>
 800f734:	2300      	movs	r3, #0
 800f736:	f04f 32ff 	mov.w	r2, #4294967295
 800f73a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f73e:	f10a 0a01 	add.w	sl, sl, #1
 800f742:	9304      	str	r3, [sp, #16]
 800f744:	9307      	str	r3, [sp, #28]
 800f746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f74a:	931a      	str	r3, [sp, #104]	; 0x68
 800f74c:	4654      	mov	r4, sl
 800f74e:	2205      	movs	r2, #5
 800f750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f754:	4851      	ldr	r0, [pc, #324]	; (800f89c <_svfiprintf_r+0x1ec>)
 800f756:	f7f0 fd73 	bl	8000240 <memchr>
 800f75a:	9a04      	ldr	r2, [sp, #16]
 800f75c:	b9d8      	cbnz	r0, 800f796 <_svfiprintf_r+0xe6>
 800f75e:	06d0      	lsls	r0, r2, #27
 800f760:	bf44      	itt	mi
 800f762:	2320      	movmi	r3, #32
 800f764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f768:	0711      	lsls	r1, r2, #28
 800f76a:	bf44      	itt	mi
 800f76c:	232b      	movmi	r3, #43	; 0x2b
 800f76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f772:	f89a 3000 	ldrb.w	r3, [sl]
 800f776:	2b2a      	cmp	r3, #42	; 0x2a
 800f778:	d015      	beq.n	800f7a6 <_svfiprintf_r+0xf6>
 800f77a:	9a07      	ldr	r2, [sp, #28]
 800f77c:	4654      	mov	r4, sl
 800f77e:	2000      	movs	r0, #0
 800f780:	f04f 0c0a 	mov.w	ip, #10
 800f784:	4621      	mov	r1, r4
 800f786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f78a:	3b30      	subs	r3, #48	; 0x30
 800f78c:	2b09      	cmp	r3, #9
 800f78e:	d94e      	bls.n	800f82e <_svfiprintf_r+0x17e>
 800f790:	b1b0      	cbz	r0, 800f7c0 <_svfiprintf_r+0x110>
 800f792:	9207      	str	r2, [sp, #28]
 800f794:	e014      	b.n	800f7c0 <_svfiprintf_r+0x110>
 800f796:	eba0 0308 	sub.w	r3, r0, r8
 800f79a:	fa09 f303 	lsl.w	r3, r9, r3
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	9304      	str	r3, [sp, #16]
 800f7a2:	46a2      	mov	sl, r4
 800f7a4:	e7d2      	b.n	800f74c <_svfiprintf_r+0x9c>
 800f7a6:	9b03      	ldr	r3, [sp, #12]
 800f7a8:	1d19      	adds	r1, r3, #4
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	9103      	str	r1, [sp, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	bfbb      	ittet	lt
 800f7b2:	425b      	neglt	r3, r3
 800f7b4:	f042 0202 	orrlt.w	r2, r2, #2
 800f7b8:	9307      	strge	r3, [sp, #28]
 800f7ba:	9307      	strlt	r3, [sp, #28]
 800f7bc:	bfb8      	it	lt
 800f7be:	9204      	strlt	r2, [sp, #16]
 800f7c0:	7823      	ldrb	r3, [r4, #0]
 800f7c2:	2b2e      	cmp	r3, #46	; 0x2e
 800f7c4:	d10c      	bne.n	800f7e0 <_svfiprintf_r+0x130>
 800f7c6:	7863      	ldrb	r3, [r4, #1]
 800f7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ca:	d135      	bne.n	800f838 <_svfiprintf_r+0x188>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	1d1a      	adds	r2, r3, #4
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	9203      	str	r2, [sp, #12]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	bfb8      	it	lt
 800f7d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7dc:	3402      	adds	r4, #2
 800f7de:	9305      	str	r3, [sp, #20]
 800f7e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8ac <_svfiprintf_r+0x1fc>
 800f7e4:	7821      	ldrb	r1, [r4, #0]
 800f7e6:	2203      	movs	r2, #3
 800f7e8:	4650      	mov	r0, sl
 800f7ea:	f7f0 fd29 	bl	8000240 <memchr>
 800f7ee:	b140      	cbz	r0, 800f802 <_svfiprintf_r+0x152>
 800f7f0:	2340      	movs	r3, #64	; 0x40
 800f7f2:	eba0 000a 	sub.w	r0, r0, sl
 800f7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800f7fa:	9b04      	ldr	r3, [sp, #16]
 800f7fc:	4303      	orrs	r3, r0
 800f7fe:	3401      	adds	r4, #1
 800f800:	9304      	str	r3, [sp, #16]
 800f802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f806:	4826      	ldr	r0, [pc, #152]	; (800f8a0 <_svfiprintf_r+0x1f0>)
 800f808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f80c:	2206      	movs	r2, #6
 800f80e:	f7f0 fd17 	bl	8000240 <memchr>
 800f812:	2800      	cmp	r0, #0
 800f814:	d038      	beq.n	800f888 <_svfiprintf_r+0x1d8>
 800f816:	4b23      	ldr	r3, [pc, #140]	; (800f8a4 <_svfiprintf_r+0x1f4>)
 800f818:	bb1b      	cbnz	r3, 800f862 <_svfiprintf_r+0x1b2>
 800f81a:	9b03      	ldr	r3, [sp, #12]
 800f81c:	3307      	adds	r3, #7
 800f81e:	f023 0307 	bic.w	r3, r3, #7
 800f822:	3308      	adds	r3, #8
 800f824:	9303      	str	r3, [sp, #12]
 800f826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f828:	4433      	add	r3, r6
 800f82a:	9309      	str	r3, [sp, #36]	; 0x24
 800f82c:	e767      	b.n	800f6fe <_svfiprintf_r+0x4e>
 800f82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f832:	460c      	mov	r4, r1
 800f834:	2001      	movs	r0, #1
 800f836:	e7a5      	b.n	800f784 <_svfiprintf_r+0xd4>
 800f838:	2300      	movs	r3, #0
 800f83a:	3401      	adds	r4, #1
 800f83c:	9305      	str	r3, [sp, #20]
 800f83e:	4619      	mov	r1, r3
 800f840:	f04f 0c0a 	mov.w	ip, #10
 800f844:	4620      	mov	r0, r4
 800f846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f84a:	3a30      	subs	r2, #48	; 0x30
 800f84c:	2a09      	cmp	r2, #9
 800f84e:	d903      	bls.n	800f858 <_svfiprintf_r+0x1a8>
 800f850:	2b00      	cmp	r3, #0
 800f852:	d0c5      	beq.n	800f7e0 <_svfiprintf_r+0x130>
 800f854:	9105      	str	r1, [sp, #20]
 800f856:	e7c3      	b.n	800f7e0 <_svfiprintf_r+0x130>
 800f858:	fb0c 2101 	mla	r1, ip, r1, r2
 800f85c:	4604      	mov	r4, r0
 800f85e:	2301      	movs	r3, #1
 800f860:	e7f0      	b.n	800f844 <_svfiprintf_r+0x194>
 800f862:	ab03      	add	r3, sp, #12
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	462a      	mov	r2, r5
 800f868:	4b0f      	ldr	r3, [pc, #60]	; (800f8a8 <_svfiprintf_r+0x1f8>)
 800f86a:	a904      	add	r1, sp, #16
 800f86c:	4638      	mov	r0, r7
 800f86e:	f7fc f981 	bl	800bb74 <_printf_float>
 800f872:	1c42      	adds	r2, r0, #1
 800f874:	4606      	mov	r6, r0
 800f876:	d1d6      	bne.n	800f826 <_svfiprintf_r+0x176>
 800f878:	89ab      	ldrh	r3, [r5, #12]
 800f87a:	065b      	lsls	r3, r3, #25
 800f87c:	f53f af2c 	bmi.w	800f6d8 <_svfiprintf_r+0x28>
 800f880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f882:	b01d      	add	sp, #116	; 0x74
 800f884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f888:	ab03      	add	r3, sp, #12
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	462a      	mov	r2, r5
 800f88e:	4b06      	ldr	r3, [pc, #24]	; (800f8a8 <_svfiprintf_r+0x1f8>)
 800f890:	a904      	add	r1, sp, #16
 800f892:	4638      	mov	r0, r7
 800f894:	f7fc fc12 	bl	800c0bc <_printf_i>
 800f898:	e7eb      	b.n	800f872 <_svfiprintf_r+0x1c2>
 800f89a:	bf00      	nop
 800f89c:	08012dec 	.word	0x08012dec
 800f8a0:	08012df6 	.word	0x08012df6
 800f8a4:	0800bb75 	.word	0x0800bb75
 800f8a8:	0800f5f9 	.word	0x0800f5f9
 800f8ac:	08012df2 	.word	0x08012df2

0800f8b0 <_sungetc_r>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	1c4b      	adds	r3, r1, #1
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	d103      	bne.n	800f8c0 <_sungetc_r+0x10>
 800f8b8:	f04f 35ff 	mov.w	r5, #4294967295
 800f8bc:	4628      	mov	r0, r5
 800f8be:	bd38      	pop	{r3, r4, r5, pc}
 800f8c0:	8993      	ldrh	r3, [r2, #12]
 800f8c2:	f023 0320 	bic.w	r3, r3, #32
 800f8c6:	8193      	strh	r3, [r2, #12]
 800f8c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8ca:	6852      	ldr	r2, [r2, #4]
 800f8cc:	b2cd      	uxtb	r5, r1
 800f8ce:	b18b      	cbz	r3, 800f8f4 <_sungetc_r+0x44>
 800f8d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	dd08      	ble.n	800f8e8 <_sungetc_r+0x38>
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	1e5a      	subs	r2, r3, #1
 800f8da:	6022      	str	r2, [r4, #0]
 800f8dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f8e0:	6863      	ldr	r3, [r4, #4]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	6063      	str	r3, [r4, #4]
 800f8e6:	e7e9      	b.n	800f8bc <_sungetc_r+0xc>
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	f000 fbf1 	bl	80100d0 <__submore>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d0f1      	beq.n	800f8d6 <_sungetc_r+0x26>
 800f8f2:	e7e1      	b.n	800f8b8 <_sungetc_r+0x8>
 800f8f4:	6921      	ldr	r1, [r4, #16]
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	b151      	cbz	r1, 800f910 <_sungetc_r+0x60>
 800f8fa:	4299      	cmp	r1, r3
 800f8fc:	d208      	bcs.n	800f910 <_sungetc_r+0x60>
 800f8fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f902:	42a9      	cmp	r1, r5
 800f904:	d104      	bne.n	800f910 <_sungetc_r+0x60>
 800f906:	3b01      	subs	r3, #1
 800f908:	3201      	adds	r2, #1
 800f90a:	6023      	str	r3, [r4, #0]
 800f90c:	6062      	str	r2, [r4, #4]
 800f90e:	e7d5      	b.n	800f8bc <_sungetc_r+0xc>
 800f910:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f918:	6363      	str	r3, [r4, #52]	; 0x34
 800f91a:	2303      	movs	r3, #3
 800f91c:	63a3      	str	r3, [r4, #56]	; 0x38
 800f91e:	4623      	mov	r3, r4
 800f920:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	2301      	movs	r3, #1
 800f928:	e7dc      	b.n	800f8e4 <_sungetc_r+0x34>

0800f92a <__ssrefill_r>:
 800f92a:	b510      	push	{r4, lr}
 800f92c:	460c      	mov	r4, r1
 800f92e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f930:	b169      	cbz	r1, 800f94e <__ssrefill_r+0x24>
 800f932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f936:	4299      	cmp	r1, r3
 800f938:	d001      	beq.n	800f93e <__ssrefill_r+0x14>
 800f93a:	f7ff fd7d 	bl	800f438 <_free_r>
 800f93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f940:	6063      	str	r3, [r4, #4]
 800f942:	2000      	movs	r0, #0
 800f944:	6360      	str	r0, [r4, #52]	; 0x34
 800f946:	b113      	cbz	r3, 800f94e <__ssrefill_r+0x24>
 800f948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f94a:	6023      	str	r3, [r4, #0]
 800f94c:	bd10      	pop	{r4, pc}
 800f94e:	6923      	ldr	r3, [r4, #16]
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	2300      	movs	r3, #0
 800f954:	6063      	str	r3, [r4, #4]
 800f956:	89a3      	ldrh	r3, [r4, #12]
 800f958:	f043 0320 	orr.w	r3, r3, #32
 800f95c:	81a3      	strh	r3, [r4, #12]
 800f95e:	f04f 30ff 	mov.w	r0, #4294967295
 800f962:	e7f3      	b.n	800f94c <__ssrefill_r+0x22>

0800f964 <__ssvfiscanf_r>:
 800f964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f968:	460c      	mov	r4, r1
 800f96a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f96e:	2100      	movs	r1, #0
 800f970:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f974:	49a6      	ldr	r1, [pc, #664]	; (800fc10 <__ssvfiscanf_r+0x2ac>)
 800f976:	91a0      	str	r1, [sp, #640]	; 0x280
 800f978:	f10d 0804 	add.w	r8, sp, #4
 800f97c:	49a5      	ldr	r1, [pc, #660]	; (800fc14 <__ssvfiscanf_r+0x2b0>)
 800f97e:	4fa6      	ldr	r7, [pc, #664]	; (800fc18 <__ssvfiscanf_r+0x2b4>)
 800f980:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fc1c <__ssvfiscanf_r+0x2b8>
 800f984:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f988:	4606      	mov	r6, r0
 800f98a:	91a1      	str	r1, [sp, #644]	; 0x284
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	7813      	ldrb	r3, [r2, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	f000 815a 	beq.w	800fc4a <__ssvfiscanf_r+0x2e6>
 800f996:	5dd9      	ldrb	r1, [r3, r7]
 800f998:	f011 0108 	ands.w	r1, r1, #8
 800f99c:	f102 0501 	add.w	r5, r2, #1
 800f9a0:	d019      	beq.n	800f9d6 <__ssvfiscanf_r+0x72>
 800f9a2:	6863      	ldr	r3, [r4, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	dd0f      	ble.n	800f9c8 <__ssvfiscanf_r+0x64>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	781a      	ldrb	r2, [r3, #0]
 800f9ac:	5cba      	ldrb	r2, [r7, r2]
 800f9ae:	0712      	lsls	r2, r2, #28
 800f9b0:	d401      	bmi.n	800f9b6 <__ssvfiscanf_r+0x52>
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	e7eb      	b.n	800f98e <__ssvfiscanf_r+0x2a>
 800f9b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f9b8:	3201      	adds	r2, #1
 800f9ba:	9245      	str	r2, [sp, #276]	; 0x114
 800f9bc:	6862      	ldr	r2, [r4, #4]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	3a01      	subs	r2, #1
 800f9c2:	6062      	str	r2, [r4, #4]
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	e7ec      	b.n	800f9a2 <__ssvfiscanf_r+0x3e>
 800f9c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4798      	blx	r3
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d0e9      	beq.n	800f9a8 <__ssvfiscanf_r+0x44>
 800f9d4:	e7ed      	b.n	800f9b2 <__ssvfiscanf_r+0x4e>
 800f9d6:	2b25      	cmp	r3, #37	; 0x25
 800f9d8:	d012      	beq.n	800fa00 <__ssvfiscanf_r+0x9c>
 800f9da:	469a      	mov	sl, r3
 800f9dc:	6863      	ldr	r3, [r4, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f340 8091 	ble.w	800fb06 <__ssvfiscanf_r+0x1a2>
 800f9e4:	6822      	ldr	r2, [r4, #0]
 800f9e6:	7813      	ldrb	r3, [r2, #0]
 800f9e8:	4553      	cmp	r3, sl
 800f9ea:	f040 812e 	bne.w	800fc4a <__ssvfiscanf_r+0x2e6>
 800f9ee:	6863      	ldr	r3, [r4, #4]
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	6063      	str	r3, [r4, #4]
 800f9f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f9f6:	3201      	adds	r2, #1
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	6022      	str	r2, [r4, #0]
 800f9fc:	9345      	str	r3, [sp, #276]	; 0x114
 800f9fe:	e7d8      	b.n	800f9b2 <__ssvfiscanf_r+0x4e>
 800fa00:	9141      	str	r1, [sp, #260]	; 0x104
 800fa02:	9143      	str	r1, [sp, #268]	; 0x10c
 800fa04:	7853      	ldrb	r3, [r2, #1]
 800fa06:	2b2a      	cmp	r3, #42	; 0x2a
 800fa08:	bf02      	ittt	eq
 800fa0a:	2310      	moveq	r3, #16
 800fa0c:	1c95      	addeq	r5, r2, #2
 800fa0e:	9341      	streq	r3, [sp, #260]	; 0x104
 800fa10:	220a      	movs	r2, #10
 800fa12:	46aa      	mov	sl, r5
 800fa14:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fa18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fa1c:	2b09      	cmp	r3, #9
 800fa1e:	d91d      	bls.n	800fa5c <__ssvfiscanf_r+0xf8>
 800fa20:	487e      	ldr	r0, [pc, #504]	; (800fc1c <__ssvfiscanf_r+0x2b8>)
 800fa22:	2203      	movs	r2, #3
 800fa24:	f7f0 fc0c 	bl	8000240 <memchr>
 800fa28:	b140      	cbz	r0, 800fa3c <__ssvfiscanf_r+0xd8>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	eba0 0009 	sub.w	r0, r0, r9
 800fa30:	fa03 f000 	lsl.w	r0, r3, r0
 800fa34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa36:	4318      	orrs	r0, r3
 800fa38:	9041      	str	r0, [sp, #260]	; 0x104
 800fa3a:	4655      	mov	r5, sl
 800fa3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fa40:	2b78      	cmp	r3, #120	; 0x78
 800fa42:	d806      	bhi.n	800fa52 <__ssvfiscanf_r+0xee>
 800fa44:	2b57      	cmp	r3, #87	; 0x57
 800fa46:	d810      	bhi.n	800fa6a <__ssvfiscanf_r+0x106>
 800fa48:	2b25      	cmp	r3, #37	; 0x25
 800fa4a:	d0c6      	beq.n	800f9da <__ssvfiscanf_r+0x76>
 800fa4c:	d856      	bhi.n	800fafc <__ssvfiscanf_r+0x198>
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d064      	beq.n	800fb1c <__ssvfiscanf_r+0x1b8>
 800fa52:	2303      	movs	r3, #3
 800fa54:	9347      	str	r3, [sp, #284]	; 0x11c
 800fa56:	230a      	movs	r3, #10
 800fa58:	9342      	str	r3, [sp, #264]	; 0x108
 800fa5a:	e071      	b.n	800fb40 <__ssvfiscanf_r+0x1dc>
 800fa5c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fa5e:	fb02 1103 	mla	r1, r2, r3, r1
 800fa62:	3930      	subs	r1, #48	; 0x30
 800fa64:	9143      	str	r1, [sp, #268]	; 0x10c
 800fa66:	4655      	mov	r5, sl
 800fa68:	e7d3      	b.n	800fa12 <__ssvfiscanf_r+0xae>
 800fa6a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fa6e:	2a20      	cmp	r2, #32
 800fa70:	d8ef      	bhi.n	800fa52 <__ssvfiscanf_r+0xee>
 800fa72:	a101      	add	r1, pc, #4	; (adr r1, 800fa78 <__ssvfiscanf_r+0x114>)
 800fa74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fa78:	0800fb2b 	.word	0x0800fb2b
 800fa7c:	0800fa53 	.word	0x0800fa53
 800fa80:	0800fa53 	.word	0x0800fa53
 800fa84:	0800fb89 	.word	0x0800fb89
 800fa88:	0800fa53 	.word	0x0800fa53
 800fa8c:	0800fa53 	.word	0x0800fa53
 800fa90:	0800fa53 	.word	0x0800fa53
 800fa94:	0800fa53 	.word	0x0800fa53
 800fa98:	0800fa53 	.word	0x0800fa53
 800fa9c:	0800fa53 	.word	0x0800fa53
 800faa0:	0800fa53 	.word	0x0800fa53
 800faa4:	0800fb9f 	.word	0x0800fb9f
 800faa8:	0800fb75 	.word	0x0800fb75
 800faac:	0800fb03 	.word	0x0800fb03
 800fab0:	0800fb03 	.word	0x0800fb03
 800fab4:	0800fb03 	.word	0x0800fb03
 800fab8:	0800fa53 	.word	0x0800fa53
 800fabc:	0800fb79 	.word	0x0800fb79
 800fac0:	0800fa53 	.word	0x0800fa53
 800fac4:	0800fa53 	.word	0x0800fa53
 800fac8:	0800fa53 	.word	0x0800fa53
 800facc:	0800fa53 	.word	0x0800fa53
 800fad0:	0800fbaf 	.word	0x0800fbaf
 800fad4:	0800fb81 	.word	0x0800fb81
 800fad8:	0800fb23 	.word	0x0800fb23
 800fadc:	0800fa53 	.word	0x0800fa53
 800fae0:	0800fa53 	.word	0x0800fa53
 800fae4:	0800fbab 	.word	0x0800fbab
 800fae8:	0800fa53 	.word	0x0800fa53
 800faec:	0800fb75 	.word	0x0800fb75
 800faf0:	0800fa53 	.word	0x0800fa53
 800faf4:	0800fa53 	.word	0x0800fa53
 800faf8:	0800fb2b 	.word	0x0800fb2b
 800fafc:	3b45      	subs	r3, #69	; 0x45
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d8a7      	bhi.n	800fa52 <__ssvfiscanf_r+0xee>
 800fb02:	2305      	movs	r3, #5
 800fb04:	e01b      	b.n	800fb3e <__ssvfiscanf_r+0x1da>
 800fb06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb08:	4621      	mov	r1, r4
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	4798      	blx	r3
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	f43f af68 	beq.w	800f9e4 <__ssvfiscanf_r+0x80>
 800fb14:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fb16:	2800      	cmp	r0, #0
 800fb18:	f040 808d 	bne.w	800fc36 <__ssvfiscanf_r+0x2d2>
 800fb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb20:	e08f      	b.n	800fc42 <__ssvfiscanf_r+0x2de>
 800fb22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fb24:	f042 0220 	orr.w	r2, r2, #32
 800fb28:	9241      	str	r2, [sp, #260]	; 0x104
 800fb2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fb2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb30:	9241      	str	r2, [sp, #260]	; 0x104
 800fb32:	2210      	movs	r2, #16
 800fb34:	2b6f      	cmp	r3, #111	; 0x6f
 800fb36:	9242      	str	r2, [sp, #264]	; 0x108
 800fb38:	bf34      	ite	cc
 800fb3a:	2303      	movcc	r3, #3
 800fb3c:	2304      	movcs	r3, #4
 800fb3e:	9347      	str	r3, [sp, #284]	; 0x11c
 800fb40:	6863      	ldr	r3, [r4, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	dd42      	ble.n	800fbcc <__ssvfiscanf_r+0x268>
 800fb46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb48:	0659      	lsls	r1, r3, #25
 800fb4a:	d404      	bmi.n	800fb56 <__ssvfiscanf_r+0x1f2>
 800fb4c:	6823      	ldr	r3, [r4, #0]
 800fb4e:	781a      	ldrb	r2, [r3, #0]
 800fb50:	5cba      	ldrb	r2, [r7, r2]
 800fb52:	0712      	lsls	r2, r2, #28
 800fb54:	d441      	bmi.n	800fbda <__ssvfiscanf_r+0x276>
 800fb56:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	dc50      	bgt.n	800fbfe <__ssvfiscanf_r+0x29a>
 800fb5c:	466b      	mov	r3, sp
 800fb5e:	4622      	mov	r2, r4
 800fb60:	a941      	add	r1, sp, #260	; 0x104
 800fb62:	4630      	mov	r0, r6
 800fb64:	f000 f876 	bl	800fc54 <_scanf_chars>
 800fb68:	2801      	cmp	r0, #1
 800fb6a:	d06e      	beq.n	800fc4a <__ssvfiscanf_r+0x2e6>
 800fb6c:	2802      	cmp	r0, #2
 800fb6e:	f47f af20 	bne.w	800f9b2 <__ssvfiscanf_r+0x4e>
 800fb72:	e7cf      	b.n	800fb14 <__ssvfiscanf_r+0x1b0>
 800fb74:	220a      	movs	r2, #10
 800fb76:	e7dd      	b.n	800fb34 <__ssvfiscanf_r+0x1d0>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	9342      	str	r3, [sp, #264]	; 0x108
 800fb7c:	2303      	movs	r3, #3
 800fb7e:	e7de      	b.n	800fb3e <__ssvfiscanf_r+0x1da>
 800fb80:	2308      	movs	r3, #8
 800fb82:	9342      	str	r3, [sp, #264]	; 0x108
 800fb84:	2304      	movs	r3, #4
 800fb86:	e7da      	b.n	800fb3e <__ssvfiscanf_r+0x1da>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4640      	mov	r0, r8
 800fb8c:	f000 f9e0 	bl	800ff50 <__sccl>
 800fb90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb96:	9341      	str	r3, [sp, #260]	; 0x104
 800fb98:	4605      	mov	r5, r0
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e7cf      	b.n	800fb3e <__ssvfiscanf_r+0x1da>
 800fb9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba4:	9341      	str	r3, [sp, #260]	; 0x104
 800fba6:	2300      	movs	r3, #0
 800fba8:	e7c9      	b.n	800fb3e <__ssvfiscanf_r+0x1da>
 800fbaa:	2302      	movs	r3, #2
 800fbac:	e7c7      	b.n	800fb3e <__ssvfiscanf_r+0x1da>
 800fbae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fbb0:	06c3      	lsls	r3, r0, #27
 800fbb2:	f53f aefe 	bmi.w	800f9b2 <__ssvfiscanf_r+0x4e>
 800fbb6:	9b00      	ldr	r3, [sp, #0]
 800fbb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fbba:	1d19      	adds	r1, r3, #4
 800fbbc:	9100      	str	r1, [sp, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f010 0f01 	tst.w	r0, #1
 800fbc4:	bf14      	ite	ne
 800fbc6:	801a      	strhne	r2, [r3, #0]
 800fbc8:	601a      	streq	r2, [r3, #0]
 800fbca:	e6f2      	b.n	800f9b2 <__ssvfiscanf_r+0x4e>
 800fbcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fbce:	4621      	mov	r1, r4
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	4798      	blx	r3
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d0b6      	beq.n	800fb46 <__ssvfiscanf_r+0x1e2>
 800fbd8:	e79c      	b.n	800fb14 <__ssvfiscanf_r+0x1b0>
 800fbda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fbdc:	3201      	adds	r2, #1
 800fbde:	9245      	str	r2, [sp, #276]	; 0x114
 800fbe0:	6862      	ldr	r2, [r4, #4]
 800fbe2:	3a01      	subs	r2, #1
 800fbe4:	2a00      	cmp	r2, #0
 800fbe6:	6062      	str	r2, [r4, #4]
 800fbe8:	dd02      	ble.n	800fbf0 <__ssvfiscanf_r+0x28c>
 800fbea:	3301      	adds	r3, #1
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	e7ad      	b.n	800fb4c <__ssvfiscanf_r+0x1e8>
 800fbf0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	4798      	blx	r3
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d0a7      	beq.n	800fb4c <__ssvfiscanf_r+0x1e8>
 800fbfc:	e78a      	b.n	800fb14 <__ssvfiscanf_r+0x1b0>
 800fbfe:	2b04      	cmp	r3, #4
 800fc00:	dc0e      	bgt.n	800fc20 <__ssvfiscanf_r+0x2bc>
 800fc02:	466b      	mov	r3, sp
 800fc04:	4622      	mov	r2, r4
 800fc06:	a941      	add	r1, sp, #260	; 0x104
 800fc08:	4630      	mov	r0, r6
 800fc0a:	f000 f87d 	bl	800fd08 <_scanf_i>
 800fc0e:	e7ab      	b.n	800fb68 <__ssvfiscanf_r+0x204>
 800fc10:	0800f8b1 	.word	0x0800f8b1
 800fc14:	0800f92b 	.word	0x0800f92b
 800fc18:	08012a89 	.word	0x08012a89
 800fc1c:	08012df2 	.word	0x08012df2
 800fc20:	4b0b      	ldr	r3, [pc, #44]	; (800fc50 <__ssvfiscanf_r+0x2ec>)
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f43f aec5 	beq.w	800f9b2 <__ssvfiscanf_r+0x4e>
 800fc28:	466b      	mov	r3, sp
 800fc2a:	4622      	mov	r2, r4
 800fc2c:	a941      	add	r1, sp, #260	; 0x104
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7fc fb6a 	bl	800c308 <_scanf_float>
 800fc34:	e798      	b.n	800fb68 <__ssvfiscanf_r+0x204>
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fc3c:	bf18      	it	ne
 800fc3e:	f04f 30ff 	movne.w	r0, #4294967295
 800fc42:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fc4c:	e7f9      	b.n	800fc42 <__ssvfiscanf_r+0x2de>
 800fc4e:	bf00      	nop
 800fc50:	0800c309 	.word	0x0800c309

0800fc54 <_scanf_chars>:
 800fc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc58:	4615      	mov	r5, r2
 800fc5a:	688a      	ldr	r2, [r1, #8]
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	460c      	mov	r4, r1
 800fc60:	b932      	cbnz	r2, 800fc70 <_scanf_chars+0x1c>
 800fc62:	698a      	ldr	r2, [r1, #24]
 800fc64:	2a00      	cmp	r2, #0
 800fc66:	bf0c      	ite	eq
 800fc68:	2201      	moveq	r2, #1
 800fc6a:	f04f 32ff 	movne.w	r2, #4294967295
 800fc6e:	608a      	str	r2, [r1, #8]
 800fc70:	6822      	ldr	r2, [r4, #0]
 800fc72:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fd04 <_scanf_chars+0xb0>
 800fc76:	06d1      	lsls	r1, r2, #27
 800fc78:	bf5f      	itttt	pl
 800fc7a:	681a      	ldrpl	r2, [r3, #0]
 800fc7c:	1d11      	addpl	r1, r2, #4
 800fc7e:	6019      	strpl	r1, [r3, #0]
 800fc80:	6816      	ldrpl	r6, [r2, #0]
 800fc82:	2700      	movs	r7, #0
 800fc84:	69a0      	ldr	r0, [r4, #24]
 800fc86:	b188      	cbz	r0, 800fcac <_scanf_chars+0x58>
 800fc88:	2801      	cmp	r0, #1
 800fc8a:	d107      	bne.n	800fc9c <_scanf_chars+0x48>
 800fc8c:	682a      	ldr	r2, [r5, #0]
 800fc8e:	7811      	ldrb	r1, [r2, #0]
 800fc90:	6962      	ldr	r2, [r4, #20]
 800fc92:	5c52      	ldrb	r2, [r2, r1]
 800fc94:	b952      	cbnz	r2, 800fcac <_scanf_chars+0x58>
 800fc96:	2f00      	cmp	r7, #0
 800fc98:	d031      	beq.n	800fcfe <_scanf_chars+0xaa>
 800fc9a:	e022      	b.n	800fce2 <_scanf_chars+0x8e>
 800fc9c:	2802      	cmp	r0, #2
 800fc9e:	d120      	bne.n	800fce2 <_scanf_chars+0x8e>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fca8:	071b      	lsls	r3, r3, #28
 800fcaa:	d41a      	bmi.n	800fce2 <_scanf_chars+0x8e>
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	06da      	lsls	r2, r3, #27
 800fcb0:	bf5e      	ittt	pl
 800fcb2:	682b      	ldrpl	r3, [r5, #0]
 800fcb4:	781b      	ldrbpl	r3, [r3, #0]
 800fcb6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fcba:	682a      	ldr	r2, [r5, #0]
 800fcbc:	686b      	ldr	r3, [r5, #4]
 800fcbe:	3201      	adds	r2, #1
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	68a2      	ldr	r2, [r4, #8]
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	3a01      	subs	r2, #1
 800fcc8:	606b      	str	r3, [r5, #4]
 800fcca:	3701      	adds	r7, #1
 800fccc:	60a2      	str	r2, [r4, #8]
 800fcce:	b142      	cbz	r2, 800fce2 <_scanf_chars+0x8e>
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	dcd7      	bgt.n	800fc84 <_scanf_chars+0x30>
 800fcd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fcd8:	4629      	mov	r1, r5
 800fcda:	4640      	mov	r0, r8
 800fcdc:	4798      	blx	r3
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d0d0      	beq.n	800fc84 <_scanf_chars+0x30>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	f013 0310 	ands.w	r3, r3, #16
 800fce8:	d105      	bne.n	800fcf6 <_scanf_chars+0xa2>
 800fcea:	68e2      	ldr	r2, [r4, #12]
 800fcec:	3201      	adds	r2, #1
 800fcee:	60e2      	str	r2, [r4, #12]
 800fcf0:	69a2      	ldr	r2, [r4, #24]
 800fcf2:	b102      	cbz	r2, 800fcf6 <_scanf_chars+0xa2>
 800fcf4:	7033      	strb	r3, [r6, #0]
 800fcf6:	6923      	ldr	r3, [r4, #16]
 800fcf8:	443b      	add	r3, r7
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd02:	bf00      	nop
 800fd04:	08012a89 	.word	0x08012a89

0800fd08 <_scanf_i>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	4698      	mov	r8, r3
 800fd0e:	4b76      	ldr	r3, [pc, #472]	; (800fee8 <_scanf_i+0x1e0>)
 800fd10:	460c      	mov	r4, r1
 800fd12:	4682      	mov	sl, r0
 800fd14:	4616      	mov	r6, r2
 800fd16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd1a:	b087      	sub	sp, #28
 800fd1c:	ab03      	add	r3, sp, #12
 800fd1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd22:	4b72      	ldr	r3, [pc, #456]	; (800feec <_scanf_i+0x1e4>)
 800fd24:	69a1      	ldr	r1, [r4, #24]
 800fd26:	4a72      	ldr	r2, [pc, #456]	; (800fef0 <_scanf_i+0x1e8>)
 800fd28:	2903      	cmp	r1, #3
 800fd2a:	bf18      	it	ne
 800fd2c:	461a      	movne	r2, r3
 800fd2e:	68a3      	ldr	r3, [r4, #8]
 800fd30:	9201      	str	r2, [sp, #4]
 800fd32:	1e5a      	subs	r2, r3, #1
 800fd34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd38:	bf88      	it	hi
 800fd3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd3e:	4627      	mov	r7, r4
 800fd40:	bf82      	ittt	hi
 800fd42:	eb03 0905 	addhi.w	r9, r3, r5
 800fd46:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd4a:	60a3      	strhi	r3, [r4, #8]
 800fd4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fd50:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fd54:	bf98      	it	ls
 800fd56:	f04f 0900 	movls.w	r9, #0
 800fd5a:	6023      	str	r3, [r4, #0]
 800fd5c:	463d      	mov	r5, r7
 800fd5e:	f04f 0b00 	mov.w	fp, #0
 800fd62:	6831      	ldr	r1, [r6, #0]
 800fd64:	ab03      	add	r3, sp, #12
 800fd66:	7809      	ldrb	r1, [r1, #0]
 800fd68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	f7f0 fa67 	bl	8000240 <memchr>
 800fd72:	b328      	cbz	r0, 800fdc0 <_scanf_i+0xb8>
 800fd74:	f1bb 0f01 	cmp.w	fp, #1
 800fd78:	d159      	bne.n	800fe2e <_scanf_i+0x126>
 800fd7a:	6862      	ldr	r2, [r4, #4]
 800fd7c:	b92a      	cbnz	r2, 800fd8a <_scanf_i+0x82>
 800fd7e:	6822      	ldr	r2, [r4, #0]
 800fd80:	2308      	movs	r3, #8
 800fd82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd86:	6063      	str	r3, [r4, #4]
 800fd88:	6022      	str	r2, [r4, #0]
 800fd8a:	6822      	ldr	r2, [r4, #0]
 800fd8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fd90:	6022      	str	r2, [r4, #0]
 800fd92:	68a2      	ldr	r2, [r4, #8]
 800fd94:	1e51      	subs	r1, r2, #1
 800fd96:	60a1      	str	r1, [r4, #8]
 800fd98:	b192      	cbz	r2, 800fdc0 <_scanf_i+0xb8>
 800fd9a:	6832      	ldr	r2, [r6, #0]
 800fd9c:	1c51      	adds	r1, r2, #1
 800fd9e:	6031      	str	r1, [r6, #0]
 800fda0:	7812      	ldrb	r2, [r2, #0]
 800fda2:	f805 2b01 	strb.w	r2, [r5], #1
 800fda6:	6872      	ldr	r2, [r6, #4]
 800fda8:	3a01      	subs	r2, #1
 800fdaa:	2a00      	cmp	r2, #0
 800fdac:	6072      	str	r2, [r6, #4]
 800fdae:	dc07      	bgt.n	800fdc0 <_scanf_i+0xb8>
 800fdb0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	4650      	mov	r0, sl
 800fdb8:	4790      	blx	r2
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	f040 8085 	bne.w	800feca <_scanf_i+0x1c2>
 800fdc0:	f10b 0b01 	add.w	fp, fp, #1
 800fdc4:	f1bb 0f03 	cmp.w	fp, #3
 800fdc8:	d1cb      	bne.n	800fd62 <_scanf_i+0x5a>
 800fdca:	6863      	ldr	r3, [r4, #4]
 800fdcc:	b90b      	cbnz	r3, 800fdd2 <_scanf_i+0xca>
 800fdce:	230a      	movs	r3, #10
 800fdd0:	6063      	str	r3, [r4, #4]
 800fdd2:	6863      	ldr	r3, [r4, #4]
 800fdd4:	4947      	ldr	r1, [pc, #284]	; (800fef4 <_scanf_i+0x1ec>)
 800fdd6:	6960      	ldr	r0, [r4, #20]
 800fdd8:	1ac9      	subs	r1, r1, r3
 800fdda:	f000 f8b9 	bl	800ff50 <__sccl>
 800fdde:	f04f 0b00 	mov.w	fp, #0
 800fde2:	68a3      	ldr	r3, [r4, #8]
 800fde4:	6822      	ldr	r2, [r4, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d03d      	beq.n	800fe66 <_scanf_i+0x15e>
 800fdea:	6831      	ldr	r1, [r6, #0]
 800fdec:	6960      	ldr	r0, [r4, #20]
 800fdee:	f891 c000 	ldrb.w	ip, [r1]
 800fdf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d035      	beq.n	800fe66 <_scanf_i+0x15e>
 800fdfa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fdfe:	d124      	bne.n	800fe4a <_scanf_i+0x142>
 800fe00:	0510      	lsls	r0, r2, #20
 800fe02:	d522      	bpl.n	800fe4a <_scanf_i+0x142>
 800fe04:	f10b 0b01 	add.w	fp, fp, #1
 800fe08:	f1b9 0f00 	cmp.w	r9, #0
 800fe0c:	d003      	beq.n	800fe16 <_scanf_i+0x10e>
 800fe0e:	3301      	adds	r3, #1
 800fe10:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe14:	60a3      	str	r3, [r4, #8]
 800fe16:	6873      	ldr	r3, [r6, #4]
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	6073      	str	r3, [r6, #4]
 800fe1e:	dd1b      	ble.n	800fe58 <_scanf_i+0x150>
 800fe20:	6833      	ldr	r3, [r6, #0]
 800fe22:	3301      	adds	r3, #1
 800fe24:	6033      	str	r3, [r6, #0]
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	60a3      	str	r3, [r4, #8]
 800fe2c:	e7d9      	b.n	800fde2 <_scanf_i+0xda>
 800fe2e:	f1bb 0f02 	cmp.w	fp, #2
 800fe32:	d1ae      	bne.n	800fd92 <_scanf_i+0x8a>
 800fe34:	6822      	ldr	r2, [r4, #0]
 800fe36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fe3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fe3e:	d1bf      	bne.n	800fdc0 <_scanf_i+0xb8>
 800fe40:	2310      	movs	r3, #16
 800fe42:	6063      	str	r3, [r4, #4]
 800fe44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe48:	e7a2      	b.n	800fd90 <_scanf_i+0x88>
 800fe4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fe4e:	6022      	str	r2, [r4, #0]
 800fe50:	780b      	ldrb	r3, [r1, #0]
 800fe52:	f805 3b01 	strb.w	r3, [r5], #1
 800fe56:	e7de      	b.n	800fe16 <_scanf_i+0x10e>
 800fe58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4650      	mov	r0, sl
 800fe60:	4798      	blx	r3
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d0df      	beq.n	800fe26 <_scanf_i+0x11e>
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	05db      	lsls	r3, r3, #23
 800fe6a:	d50d      	bpl.n	800fe88 <_scanf_i+0x180>
 800fe6c:	42bd      	cmp	r5, r7
 800fe6e:	d909      	bls.n	800fe84 <_scanf_i+0x17c>
 800fe70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fe74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe78:	4632      	mov	r2, r6
 800fe7a:	4650      	mov	r0, sl
 800fe7c:	4798      	blx	r3
 800fe7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800fe82:	464d      	mov	r5, r9
 800fe84:	42bd      	cmp	r5, r7
 800fe86:	d02d      	beq.n	800fee4 <_scanf_i+0x1dc>
 800fe88:	6822      	ldr	r2, [r4, #0]
 800fe8a:	f012 0210 	ands.w	r2, r2, #16
 800fe8e:	d113      	bne.n	800feb8 <_scanf_i+0x1b0>
 800fe90:	702a      	strb	r2, [r5, #0]
 800fe92:	6863      	ldr	r3, [r4, #4]
 800fe94:	9e01      	ldr	r6, [sp, #4]
 800fe96:	4639      	mov	r1, r7
 800fe98:	4650      	mov	r0, sl
 800fe9a:	47b0      	blx	r6
 800fe9c:	6821      	ldr	r1, [r4, #0]
 800fe9e:	f8d8 3000 	ldr.w	r3, [r8]
 800fea2:	f011 0f20 	tst.w	r1, #32
 800fea6:	d013      	beq.n	800fed0 <_scanf_i+0x1c8>
 800fea8:	1d1a      	adds	r2, r3, #4
 800feaa:	f8c8 2000 	str.w	r2, [r8]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6018      	str	r0, [r3, #0]
 800feb2:	68e3      	ldr	r3, [r4, #12]
 800feb4:	3301      	adds	r3, #1
 800feb6:	60e3      	str	r3, [r4, #12]
 800feb8:	1bed      	subs	r5, r5, r7
 800feba:	44ab      	add	fp, r5
 800febc:	6925      	ldr	r5, [r4, #16]
 800febe:	445d      	add	r5, fp
 800fec0:	6125      	str	r5, [r4, #16]
 800fec2:	2000      	movs	r0, #0
 800fec4:	b007      	add	sp, #28
 800fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feca:	f04f 0b00 	mov.w	fp, #0
 800fece:	e7ca      	b.n	800fe66 <_scanf_i+0x15e>
 800fed0:	1d1a      	adds	r2, r3, #4
 800fed2:	f8c8 2000 	str.w	r2, [r8]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f011 0f01 	tst.w	r1, #1
 800fedc:	bf14      	ite	ne
 800fede:	8018      	strhne	r0, [r3, #0]
 800fee0:	6018      	streq	r0, [r3, #0]
 800fee2:	e7e6      	b.n	800feb2 <_scanf_i+0x1aa>
 800fee4:	2001      	movs	r0, #1
 800fee6:	e7ed      	b.n	800fec4 <_scanf_i+0x1bc>
 800fee8:	080129cc 	.word	0x080129cc
 800feec:	080100cd 	.word	0x080100cd
 800fef0:	0800d5ed 	.word	0x0800d5ed
 800fef4:	08012e16 	.word	0x08012e16

0800fef8 <_read_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4d07      	ldr	r5, [pc, #28]	; (800ff18 <_read_r+0x20>)
 800fefc:	4604      	mov	r4, r0
 800fefe:	4608      	mov	r0, r1
 800ff00:	4611      	mov	r1, r2
 800ff02:	2200      	movs	r2, #0
 800ff04:	602a      	str	r2, [r5, #0]
 800ff06:	461a      	mov	r2, r3
 800ff08:	f7f5 fe7e 	bl	8005c08 <_read>
 800ff0c:	1c43      	adds	r3, r0, #1
 800ff0e:	d102      	bne.n	800ff16 <_read_r+0x1e>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	b103      	cbz	r3, 800ff16 <_read_r+0x1e>
 800ff14:	6023      	str	r3, [r4, #0]
 800ff16:	bd38      	pop	{r3, r4, r5, pc}
 800ff18:	20001248 	.word	0x20001248
 800ff1c:	00000000 	.word	0x00000000

0800ff20 <nan>:
 800ff20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff28 <nan+0x8>
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	00000000 	.word	0x00000000
 800ff2c:	7ff80000 	.word	0x7ff80000

0800ff30 <_sbrk_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4d06      	ldr	r5, [pc, #24]	; (800ff4c <_sbrk_r+0x1c>)
 800ff34:	2300      	movs	r3, #0
 800ff36:	4604      	mov	r4, r0
 800ff38:	4608      	mov	r0, r1
 800ff3a:	602b      	str	r3, [r5, #0]
 800ff3c:	f7f5 fed2 	bl	8005ce4 <_sbrk>
 800ff40:	1c43      	adds	r3, r0, #1
 800ff42:	d102      	bne.n	800ff4a <_sbrk_r+0x1a>
 800ff44:	682b      	ldr	r3, [r5, #0]
 800ff46:	b103      	cbz	r3, 800ff4a <_sbrk_r+0x1a>
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	bd38      	pop	{r3, r4, r5, pc}
 800ff4c:	20001248 	.word	0x20001248

0800ff50 <__sccl>:
 800ff50:	b570      	push	{r4, r5, r6, lr}
 800ff52:	780b      	ldrb	r3, [r1, #0]
 800ff54:	4604      	mov	r4, r0
 800ff56:	2b5e      	cmp	r3, #94	; 0x5e
 800ff58:	bf0b      	itete	eq
 800ff5a:	784b      	ldrbeq	r3, [r1, #1]
 800ff5c:	1c48      	addne	r0, r1, #1
 800ff5e:	1c88      	addeq	r0, r1, #2
 800ff60:	2200      	movne	r2, #0
 800ff62:	bf08      	it	eq
 800ff64:	2201      	moveq	r2, #1
 800ff66:	1e61      	subs	r1, r4, #1
 800ff68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ff6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ff70:	42a9      	cmp	r1, r5
 800ff72:	d1fb      	bne.n	800ff6c <__sccl+0x1c>
 800ff74:	b90b      	cbnz	r3, 800ff7a <__sccl+0x2a>
 800ff76:	3801      	subs	r0, #1
 800ff78:	bd70      	pop	{r4, r5, r6, pc}
 800ff7a:	f082 0201 	eor.w	r2, r2, #1
 800ff7e:	54e2      	strb	r2, [r4, r3]
 800ff80:	4605      	mov	r5, r0
 800ff82:	4628      	mov	r0, r5
 800ff84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ff88:	292d      	cmp	r1, #45	; 0x2d
 800ff8a:	d006      	beq.n	800ff9a <__sccl+0x4a>
 800ff8c:	295d      	cmp	r1, #93	; 0x5d
 800ff8e:	d0f3      	beq.n	800ff78 <__sccl+0x28>
 800ff90:	b909      	cbnz	r1, 800ff96 <__sccl+0x46>
 800ff92:	4628      	mov	r0, r5
 800ff94:	e7f0      	b.n	800ff78 <__sccl+0x28>
 800ff96:	460b      	mov	r3, r1
 800ff98:	e7f1      	b.n	800ff7e <__sccl+0x2e>
 800ff9a:	786e      	ldrb	r6, [r5, #1]
 800ff9c:	2e5d      	cmp	r6, #93	; 0x5d
 800ff9e:	d0fa      	beq.n	800ff96 <__sccl+0x46>
 800ffa0:	42b3      	cmp	r3, r6
 800ffa2:	dcf8      	bgt.n	800ff96 <__sccl+0x46>
 800ffa4:	3502      	adds	r5, #2
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	3101      	adds	r1, #1
 800ffaa:	428e      	cmp	r6, r1
 800ffac:	5462      	strb	r2, [r4, r1]
 800ffae:	dcfb      	bgt.n	800ffa8 <__sccl+0x58>
 800ffb0:	1af1      	subs	r1, r6, r3
 800ffb2:	3901      	subs	r1, #1
 800ffb4:	1c58      	adds	r0, r3, #1
 800ffb6:	42b3      	cmp	r3, r6
 800ffb8:	bfa8      	it	ge
 800ffba:	2100      	movge	r1, #0
 800ffbc:	1843      	adds	r3, r0, r1
 800ffbe:	e7e0      	b.n	800ff82 <__sccl+0x32>

0800ffc0 <strncmp>:
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	b17a      	cbz	r2, 800ffe4 <strncmp+0x24>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	3901      	subs	r1, #1
 800ffc8:	1884      	adds	r4, r0, r2
 800ffca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ffce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ffd2:	4290      	cmp	r0, r2
 800ffd4:	d101      	bne.n	800ffda <strncmp+0x1a>
 800ffd6:	42a3      	cmp	r3, r4
 800ffd8:	d101      	bne.n	800ffde <strncmp+0x1e>
 800ffda:	1a80      	subs	r0, r0, r2
 800ffdc:	bd10      	pop	{r4, pc}
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d1f3      	bne.n	800ffca <strncmp+0xa>
 800ffe2:	e7fa      	b.n	800ffda <strncmp+0x1a>
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	e7f9      	b.n	800ffdc <strncmp+0x1c>

0800ffe8 <_strtoul_l.constprop.0>:
 800ffe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffec:	4f36      	ldr	r7, [pc, #216]	; (80100c8 <_strtoul_l.constprop.0+0xe0>)
 800ffee:	4686      	mov	lr, r0
 800fff0:	460d      	mov	r5, r1
 800fff2:	4628      	mov	r0, r5
 800fff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fff8:	5de6      	ldrb	r6, [r4, r7]
 800fffa:	f016 0608 	ands.w	r6, r6, #8
 800fffe:	d1f8      	bne.n	800fff2 <_strtoul_l.constprop.0+0xa>
 8010000:	2c2d      	cmp	r4, #45	; 0x2d
 8010002:	d12f      	bne.n	8010064 <_strtoul_l.constprop.0+0x7c>
 8010004:	782c      	ldrb	r4, [r5, #0]
 8010006:	2601      	movs	r6, #1
 8010008:	1c85      	adds	r5, r0, #2
 801000a:	2b00      	cmp	r3, #0
 801000c:	d057      	beq.n	80100be <_strtoul_l.constprop.0+0xd6>
 801000e:	2b10      	cmp	r3, #16
 8010010:	d109      	bne.n	8010026 <_strtoul_l.constprop.0+0x3e>
 8010012:	2c30      	cmp	r4, #48	; 0x30
 8010014:	d107      	bne.n	8010026 <_strtoul_l.constprop.0+0x3e>
 8010016:	7828      	ldrb	r0, [r5, #0]
 8010018:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801001c:	2858      	cmp	r0, #88	; 0x58
 801001e:	d149      	bne.n	80100b4 <_strtoul_l.constprop.0+0xcc>
 8010020:	786c      	ldrb	r4, [r5, #1]
 8010022:	2310      	movs	r3, #16
 8010024:	3502      	adds	r5, #2
 8010026:	f04f 38ff 	mov.w	r8, #4294967295
 801002a:	2700      	movs	r7, #0
 801002c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010030:	fb03 f908 	mul.w	r9, r3, r8
 8010034:	ea6f 0909 	mvn.w	r9, r9
 8010038:	4638      	mov	r0, r7
 801003a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801003e:	f1bc 0f09 	cmp.w	ip, #9
 8010042:	d814      	bhi.n	801006e <_strtoul_l.constprop.0+0x86>
 8010044:	4664      	mov	r4, ip
 8010046:	42a3      	cmp	r3, r4
 8010048:	dd22      	ble.n	8010090 <_strtoul_l.constprop.0+0xa8>
 801004a:	2f00      	cmp	r7, #0
 801004c:	db1d      	blt.n	801008a <_strtoul_l.constprop.0+0xa2>
 801004e:	4580      	cmp	r8, r0
 8010050:	d31b      	bcc.n	801008a <_strtoul_l.constprop.0+0xa2>
 8010052:	d101      	bne.n	8010058 <_strtoul_l.constprop.0+0x70>
 8010054:	45a1      	cmp	r9, r4
 8010056:	db18      	blt.n	801008a <_strtoul_l.constprop.0+0xa2>
 8010058:	fb00 4003 	mla	r0, r0, r3, r4
 801005c:	2701      	movs	r7, #1
 801005e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010062:	e7ea      	b.n	801003a <_strtoul_l.constprop.0+0x52>
 8010064:	2c2b      	cmp	r4, #43	; 0x2b
 8010066:	bf04      	itt	eq
 8010068:	782c      	ldrbeq	r4, [r5, #0]
 801006a:	1c85      	addeq	r5, r0, #2
 801006c:	e7cd      	b.n	801000a <_strtoul_l.constprop.0+0x22>
 801006e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010072:	f1bc 0f19 	cmp.w	ip, #25
 8010076:	d801      	bhi.n	801007c <_strtoul_l.constprop.0+0x94>
 8010078:	3c37      	subs	r4, #55	; 0x37
 801007a:	e7e4      	b.n	8010046 <_strtoul_l.constprop.0+0x5e>
 801007c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010080:	f1bc 0f19 	cmp.w	ip, #25
 8010084:	d804      	bhi.n	8010090 <_strtoul_l.constprop.0+0xa8>
 8010086:	3c57      	subs	r4, #87	; 0x57
 8010088:	e7dd      	b.n	8010046 <_strtoul_l.constprop.0+0x5e>
 801008a:	f04f 37ff 	mov.w	r7, #4294967295
 801008e:	e7e6      	b.n	801005e <_strtoul_l.constprop.0+0x76>
 8010090:	2f00      	cmp	r7, #0
 8010092:	da07      	bge.n	80100a4 <_strtoul_l.constprop.0+0xbc>
 8010094:	2322      	movs	r3, #34	; 0x22
 8010096:	f8ce 3000 	str.w	r3, [lr]
 801009a:	f04f 30ff 	mov.w	r0, #4294967295
 801009e:	b932      	cbnz	r2, 80100ae <_strtoul_l.constprop.0+0xc6>
 80100a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100a4:	b106      	cbz	r6, 80100a8 <_strtoul_l.constprop.0+0xc0>
 80100a6:	4240      	negs	r0, r0
 80100a8:	2a00      	cmp	r2, #0
 80100aa:	d0f9      	beq.n	80100a0 <_strtoul_l.constprop.0+0xb8>
 80100ac:	b107      	cbz	r7, 80100b0 <_strtoul_l.constprop.0+0xc8>
 80100ae:	1e69      	subs	r1, r5, #1
 80100b0:	6011      	str	r1, [r2, #0]
 80100b2:	e7f5      	b.n	80100a0 <_strtoul_l.constprop.0+0xb8>
 80100b4:	2430      	movs	r4, #48	; 0x30
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1b5      	bne.n	8010026 <_strtoul_l.constprop.0+0x3e>
 80100ba:	2308      	movs	r3, #8
 80100bc:	e7b3      	b.n	8010026 <_strtoul_l.constprop.0+0x3e>
 80100be:	2c30      	cmp	r4, #48	; 0x30
 80100c0:	d0a9      	beq.n	8010016 <_strtoul_l.constprop.0+0x2e>
 80100c2:	230a      	movs	r3, #10
 80100c4:	e7af      	b.n	8010026 <_strtoul_l.constprop.0+0x3e>
 80100c6:	bf00      	nop
 80100c8:	08012a89 	.word	0x08012a89

080100cc <_strtoul_r>:
 80100cc:	f7ff bf8c 	b.w	800ffe8 <_strtoul_l.constprop.0>

080100d0 <__submore>:
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80100d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100dc:	4299      	cmp	r1, r3
 80100de:	d11d      	bne.n	801011c <__submore+0x4c>
 80100e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80100e4:	f7ff fa14 	bl	800f510 <_malloc_r>
 80100e8:	b918      	cbnz	r0, 80100f2 <__submore+0x22>
 80100ea:	f04f 30ff 	mov.w	r0, #4294967295
 80100ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80100f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80100fc:	6360      	str	r0, [r4, #52]	; 0x34
 80100fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010102:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010106:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801010a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801010e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010112:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010116:	6020      	str	r0, [r4, #0]
 8010118:	2000      	movs	r0, #0
 801011a:	e7e8      	b.n	80100ee <__submore+0x1e>
 801011c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801011e:	0077      	lsls	r7, r6, #1
 8010120:	463a      	mov	r2, r7
 8010122:	f000 fa2d 	bl	8010580 <_realloc_r>
 8010126:	4605      	mov	r5, r0
 8010128:	2800      	cmp	r0, #0
 801012a:	d0de      	beq.n	80100ea <__submore+0x1a>
 801012c:	eb00 0806 	add.w	r8, r0, r6
 8010130:	4601      	mov	r1, r0
 8010132:	4632      	mov	r2, r6
 8010134:	4640      	mov	r0, r8
 8010136:	f7fe fc99 	bl	800ea6c <memcpy>
 801013a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801013e:	f8c4 8000 	str.w	r8, [r4]
 8010142:	e7e9      	b.n	8010118 <__submore+0x48>

08010144 <__ascii_wctomb>:
 8010144:	b149      	cbz	r1, 801015a <__ascii_wctomb+0x16>
 8010146:	2aff      	cmp	r2, #255	; 0xff
 8010148:	bf85      	ittet	hi
 801014a:	238a      	movhi	r3, #138	; 0x8a
 801014c:	6003      	strhi	r3, [r0, #0]
 801014e:	700a      	strbls	r2, [r1, #0]
 8010150:	f04f 30ff 	movhi.w	r0, #4294967295
 8010154:	bf98      	it	ls
 8010156:	2001      	movls	r0, #1
 8010158:	4770      	bx	lr
 801015a:	4608      	mov	r0, r1
 801015c:	4770      	bx	lr
	...

08010160 <__assert_func>:
 8010160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010162:	4614      	mov	r4, r2
 8010164:	461a      	mov	r2, r3
 8010166:	4b09      	ldr	r3, [pc, #36]	; (801018c <__assert_func+0x2c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4605      	mov	r5, r0
 801016c:	68d8      	ldr	r0, [r3, #12]
 801016e:	b14c      	cbz	r4, 8010184 <__assert_func+0x24>
 8010170:	4b07      	ldr	r3, [pc, #28]	; (8010190 <__assert_func+0x30>)
 8010172:	9100      	str	r1, [sp, #0]
 8010174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010178:	4906      	ldr	r1, [pc, #24]	; (8010194 <__assert_func+0x34>)
 801017a:	462b      	mov	r3, r5
 801017c:	f000 f9a6 	bl	80104cc <fiprintf>
 8010180:	f000 fc46 	bl	8010a10 <abort>
 8010184:	4b04      	ldr	r3, [pc, #16]	; (8010198 <__assert_func+0x38>)
 8010186:	461c      	mov	r4, r3
 8010188:	e7f3      	b.n	8010172 <__assert_func+0x12>
 801018a:	bf00      	nop
 801018c:	20000014 	.word	0x20000014
 8010190:	08012e18 	.word	0x08012e18
 8010194:	08012e25 	.word	0x08012e25
 8010198:	08012e53 	.word	0x08012e53

0801019c <__sflush_r>:
 801019c:	898a      	ldrh	r2, [r1, #12]
 801019e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a2:	4605      	mov	r5, r0
 80101a4:	0710      	lsls	r0, r2, #28
 80101a6:	460c      	mov	r4, r1
 80101a8:	d458      	bmi.n	801025c <__sflush_r+0xc0>
 80101aa:	684b      	ldr	r3, [r1, #4]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	dc05      	bgt.n	80101bc <__sflush_r+0x20>
 80101b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	dc02      	bgt.n	80101bc <__sflush_r+0x20>
 80101b6:	2000      	movs	r0, #0
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101be:	2e00      	cmp	r6, #0
 80101c0:	d0f9      	beq.n	80101b6 <__sflush_r+0x1a>
 80101c2:	2300      	movs	r3, #0
 80101c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101c8:	682f      	ldr	r7, [r5, #0]
 80101ca:	602b      	str	r3, [r5, #0]
 80101cc:	d032      	beq.n	8010234 <__sflush_r+0x98>
 80101ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101d0:	89a3      	ldrh	r3, [r4, #12]
 80101d2:	075a      	lsls	r2, r3, #29
 80101d4:	d505      	bpl.n	80101e2 <__sflush_r+0x46>
 80101d6:	6863      	ldr	r3, [r4, #4]
 80101d8:	1ac0      	subs	r0, r0, r3
 80101da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101dc:	b10b      	cbz	r3, 80101e2 <__sflush_r+0x46>
 80101de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101e0:	1ac0      	subs	r0, r0, r3
 80101e2:	2300      	movs	r3, #0
 80101e4:	4602      	mov	r2, r0
 80101e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101e8:	6a21      	ldr	r1, [r4, #32]
 80101ea:	4628      	mov	r0, r5
 80101ec:	47b0      	blx	r6
 80101ee:	1c43      	adds	r3, r0, #1
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	d106      	bne.n	8010202 <__sflush_r+0x66>
 80101f4:	6829      	ldr	r1, [r5, #0]
 80101f6:	291d      	cmp	r1, #29
 80101f8:	d82c      	bhi.n	8010254 <__sflush_r+0xb8>
 80101fa:	4a2a      	ldr	r2, [pc, #168]	; (80102a4 <__sflush_r+0x108>)
 80101fc:	40ca      	lsrs	r2, r1
 80101fe:	07d6      	lsls	r6, r2, #31
 8010200:	d528      	bpl.n	8010254 <__sflush_r+0xb8>
 8010202:	2200      	movs	r2, #0
 8010204:	6062      	str	r2, [r4, #4]
 8010206:	04d9      	lsls	r1, r3, #19
 8010208:	6922      	ldr	r2, [r4, #16]
 801020a:	6022      	str	r2, [r4, #0]
 801020c:	d504      	bpl.n	8010218 <__sflush_r+0x7c>
 801020e:	1c42      	adds	r2, r0, #1
 8010210:	d101      	bne.n	8010216 <__sflush_r+0x7a>
 8010212:	682b      	ldr	r3, [r5, #0]
 8010214:	b903      	cbnz	r3, 8010218 <__sflush_r+0x7c>
 8010216:	6560      	str	r0, [r4, #84]	; 0x54
 8010218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801021a:	602f      	str	r7, [r5, #0]
 801021c:	2900      	cmp	r1, #0
 801021e:	d0ca      	beq.n	80101b6 <__sflush_r+0x1a>
 8010220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010224:	4299      	cmp	r1, r3
 8010226:	d002      	beq.n	801022e <__sflush_r+0x92>
 8010228:	4628      	mov	r0, r5
 801022a:	f7ff f905 	bl	800f438 <_free_r>
 801022e:	2000      	movs	r0, #0
 8010230:	6360      	str	r0, [r4, #52]	; 0x34
 8010232:	e7c1      	b.n	80101b8 <__sflush_r+0x1c>
 8010234:	6a21      	ldr	r1, [r4, #32]
 8010236:	2301      	movs	r3, #1
 8010238:	4628      	mov	r0, r5
 801023a:	47b0      	blx	r6
 801023c:	1c41      	adds	r1, r0, #1
 801023e:	d1c7      	bne.n	80101d0 <__sflush_r+0x34>
 8010240:	682b      	ldr	r3, [r5, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d0c4      	beq.n	80101d0 <__sflush_r+0x34>
 8010246:	2b1d      	cmp	r3, #29
 8010248:	d001      	beq.n	801024e <__sflush_r+0xb2>
 801024a:	2b16      	cmp	r3, #22
 801024c:	d101      	bne.n	8010252 <__sflush_r+0xb6>
 801024e:	602f      	str	r7, [r5, #0]
 8010250:	e7b1      	b.n	80101b6 <__sflush_r+0x1a>
 8010252:	89a3      	ldrh	r3, [r4, #12]
 8010254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010258:	81a3      	strh	r3, [r4, #12]
 801025a:	e7ad      	b.n	80101b8 <__sflush_r+0x1c>
 801025c:	690f      	ldr	r7, [r1, #16]
 801025e:	2f00      	cmp	r7, #0
 8010260:	d0a9      	beq.n	80101b6 <__sflush_r+0x1a>
 8010262:	0793      	lsls	r3, r2, #30
 8010264:	680e      	ldr	r6, [r1, #0]
 8010266:	bf08      	it	eq
 8010268:	694b      	ldreq	r3, [r1, #20]
 801026a:	600f      	str	r7, [r1, #0]
 801026c:	bf18      	it	ne
 801026e:	2300      	movne	r3, #0
 8010270:	eba6 0807 	sub.w	r8, r6, r7
 8010274:	608b      	str	r3, [r1, #8]
 8010276:	f1b8 0f00 	cmp.w	r8, #0
 801027a:	dd9c      	ble.n	80101b6 <__sflush_r+0x1a>
 801027c:	6a21      	ldr	r1, [r4, #32]
 801027e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010280:	4643      	mov	r3, r8
 8010282:	463a      	mov	r2, r7
 8010284:	4628      	mov	r0, r5
 8010286:	47b0      	blx	r6
 8010288:	2800      	cmp	r0, #0
 801028a:	dc06      	bgt.n	801029a <__sflush_r+0xfe>
 801028c:	89a3      	ldrh	r3, [r4, #12]
 801028e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010292:	81a3      	strh	r3, [r4, #12]
 8010294:	f04f 30ff 	mov.w	r0, #4294967295
 8010298:	e78e      	b.n	80101b8 <__sflush_r+0x1c>
 801029a:	4407      	add	r7, r0
 801029c:	eba8 0800 	sub.w	r8, r8, r0
 80102a0:	e7e9      	b.n	8010276 <__sflush_r+0xda>
 80102a2:	bf00      	nop
 80102a4:	20400001 	.word	0x20400001

080102a8 <_fflush_r>:
 80102a8:	b538      	push	{r3, r4, r5, lr}
 80102aa:	690b      	ldr	r3, [r1, #16]
 80102ac:	4605      	mov	r5, r0
 80102ae:	460c      	mov	r4, r1
 80102b0:	b913      	cbnz	r3, 80102b8 <_fflush_r+0x10>
 80102b2:	2500      	movs	r5, #0
 80102b4:	4628      	mov	r0, r5
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
 80102b8:	b118      	cbz	r0, 80102c2 <_fflush_r+0x1a>
 80102ba:	6983      	ldr	r3, [r0, #24]
 80102bc:	b90b      	cbnz	r3, 80102c2 <_fflush_r+0x1a>
 80102be:	f000 f887 	bl	80103d0 <__sinit>
 80102c2:	4b14      	ldr	r3, [pc, #80]	; (8010314 <_fflush_r+0x6c>)
 80102c4:	429c      	cmp	r4, r3
 80102c6:	d11b      	bne.n	8010300 <_fflush_r+0x58>
 80102c8:	686c      	ldr	r4, [r5, #4]
 80102ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d0ef      	beq.n	80102b2 <_fflush_r+0xa>
 80102d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102d4:	07d0      	lsls	r0, r2, #31
 80102d6:	d404      	bmi.n	80102e2 <_fflush_r+0x3a>
 80102d8:	0599      	lsls	r1, r3, #22
 80102da:	d402      	bmi.n	80102e2 <_fflush_r+0x3a>
 80102dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102de:	f000 f927 	bl	8010530 <__retarget_lock_acquire_recursive>
 80102e2:	4628      	mov	r0, r5
 80102e4:	4621      	mov	r1, r4
 80102e6:	f7ff ff59 	bl	801019c <__sflush_r>
 80102ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102ec:	07da      	lsls	r2, r3, #31
 80102ee:	4605      	mov	r5, r0
 80102f0:	d4e0      	bmi.n	80102b4 <_fflush_r+0xc>
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	059b      	lsls	r3, r3, #22
 80102f6:	d4dd      	bmi.n	80102b4 <_fflush_r+0xc>
 80102f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102fa:	f000 f91a 	bl	8010532 <__retarget_lock_release_recursive>
 80102fe:	e7d9      	b.n	80102b4 <_fflush_r+0xc>
 8010300:	4b05      	ldr	r3, [pc, #20]	; (8010318 <_fflush_r+0x70>)
 8010302:	429c      	cmp	r4, r3
 8010304:	d101      	bne.n	801030a <_fflush_r+0x62>
 8010306:	68ac      	ldr	r4, [r5, #8]
 8010308:	e7df      	b.n	80102ca <_fflush_r+0x22>
 801030a:	4b04      	ldr	r3, [pc, #16]	; (801031c <_fflush_r+0x74>)
 801030c:	429c      	cmp	r4, r3
 801030e:	bf08      	it	eq
 8010310:	68ec      	ldreq	r4, [r5, #12]
 8010312:	e7da      	b.n	80102ca <_fflush_r+0x22>
 8010314:	08012e74 	.word	0x08012e74
 8010318:	08012e94 	.word	0x08012e94
 801031c:	08012e54 	.word	0x08012e54

08010320 <std>:
 8010320:	2300      	movs	r3, #0
 8010322:	b510      	push	{r4, lr}
 8010324:	4604      	mov	r4, r0
 8010326:	e9c0 3300 	strd	r3, r3, [r0]
 801032a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801032e:	6083      	str	r3, [r0, #8]
 8010330:	8181      	strh	r1, [r0, #12]
 8010332:	6643      	str	r3, [r0, #100]	; 0x64
 8010334:	81c2      	strh	r2, [r0, #14]
 8010336:	6183      	str	r3, [r0, #24]
 8010338:	4619      	mov	r1, r3
 801033a:	2208      	movs	r2, #8
 801033c:	305c      	adds	r0, #92	; 0x5c
 801033e:	f7fb fb71 	bl	800ba24 <memset>
 8010342:	4b05      	ldr	r3, [pc, #20]	; (8010358 <std+0x38>)
 8010344:	6263      	str	r3, [r4, #36]	; 0x24
 8010346:	4b05      	ldr	r3, [pc, #20]	; (801035c <std+0x3c>)
 8010348:	62a3      	str	r3, [r4, #40]	; 0x28
 801034a:	4b05      	ldr	r3, [pc, #20]	; (8010360 <std+0x40>)
 801034c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801034e:	4b05      	ldr	r3, [pc, #20]	; (8010364 <std+0x44>)
 8010350:	6224      	str	r4, [r4, #32]
 8010352:	6323      	str	r3, [r4, #48]	; 0x30
 8010354:	bd10      	pop	{r4, pc}
 8010356:	bf00      	nop
 8010358:	0800c7cd 	.word	0x0800c7cd
 801035c:	0800c7f3 	.word	0x0800c7f3
 8010360:	0800c82b 	.word	0x0800c82b
 8010364:	0800c84f 	.word	0x0800c84f

08010368 <_cleanup_r>:
 8010368:	4901      	ldr	r1, [pc, #4]	; (8010370 <_cleanup_r+0x8>)
 801036a:	f000 b8c1 	b.w	80104f0 <_fwalk_reent>
 801036e:	bf00      	nop
 8010370:	080102a9 	.word	0x080102a9

08010374 <__sfmoreglue>:
 8010374:	b570      	push	{r4, r5, r6, lr}
 8010376:	2268      	movs	r2, #104	; 0x68
 8010378:	1e4d      	subs	r5, r1, #1
 801037a:	4355      	muls	r5, r2
 801037c:	460e      	mov	r6, r1
 801037e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010382:	f7ff f8c5 	bl	800f510 <_malloc_r>
 8010386:	4604      	mov	r4, r0
 8010388:	b140      	cbz	r0, 801039c <__sfmoreglue+0x28>
 801038a:	2100      	movs	r1, #0
 801038c:	e9c0 1600 	strd	r1, r6, [r0]
 8010390:	300c      	adds	r0, #12
 8010392:	60a0      	str	r0, [r4, #8]
 8010394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010398:	f7fb fb44 	bl	800ba24 <memset>
 801039c:	4620      	mov	r0, r4
 801039e:	bd70      	pop	{r4, r5, r6, pc}

080103a0 <__sfp_lock_acquire>:
 80103a0:	4801      	ldr	r0, [pc, #4]	; (80103a8 <__sfp_lock_acquire+0x8>)
 80103a2:	f000 b8c5 	b.w	8010530 <__retarget_lock_acquire_recursive>
 80103a6:	bf00      	nop
 80103a8:	2000124d 	.word	0x2000124d

080103ac <__sfp_lock_release>:
 80103ac:	4801      	ldr	r0, [pc, #4]	; (80103b4 <__sfp_lock_release+0x8>)
 80103ae:	f000 b8c0 	b.w	8010532 <__retarget_lock_release_recursive>
 80103b2:	bf00      	nop
 80103b4:	2000124d 	.word	0x2000124d

080103b8 <__sinit_lock_acquire>:
 80103b8:	4801      	ldr	r0, [pc, #4]	; (80103c0 <__sinit_lock_acquire+0x8>)
 80103ba:	f000 b8b9 	b.w	8010530 <__retarget_lock_acquire_recursive>
 80103be:	bf00      	nop
 80103c0:	2000124e 	.word	0x2000124e

080103c4 <__sinit_lock_release>:
 80103c4:	4801      	ldr	r0, [pc, #4]	; (80103cc <__sinit_lock_release+0x8>)
 80103c6:	f000 b8b4 	b.w	8010532 <__retarget_lock_release_recursive>
 80103ca:	bf00      	nop
 80103cc:	2000124e 	.word	0x2000124e

080103d0 <__sinit>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	4604      	mov	r4, r0
 80103d4:	f7ff fff0 	bl	80103b8 <__sinit_lock_acquire>
 80103d8:	69a3      	ldr	r3, [r4, #24]
 80103da:	b11b      	cbz	r3, 80103e4 <__sinit+0x14>
 80103dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e0:	f7ff bff0 	b.w	80103c4 <__sinit_lock_release>
 80103e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103e8:	6523      	str	r3, [r4, #80]	; 0x50
 80103ea:	4b13      	ldr	r3, [pc, #76]	; (8010438 <__sinit+0x68>)
 80103ec:	4a13      	ldr	r2, [pc, #76]	; (801043c <__sinit+0x6c>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80103f2:	42a3      	cmp	r3, r4
 80103f4:	bf04      	itt	eq
 80103f6:	2301      	moveq	r3, #1
 80103f8:	61a3      	streq	r3, [r4, #24]
 80103fa:	4620      	mov	r0, r4
 80103fc:	f000 f820 	bl	8010440 <__sfp>
 8010400:	6060      	str	r0, [r4, #4]
 8010402:	4620      	mov	r0, r4
 8010404:	f000 f81c 	bl	8010440 <__sfp>
 8010408:	60a0      	str	r0, [r4, #8]
 801040a:	4620      	mov	r0, r4
 801040c:	f000 f818 	bl	8010440 <__sfp>
 8010410:	2200      	movs	r2, #0
 8010412:	60e0      	str	r0, [r4, #12]
 8010414:	2104      	movs	r1, #4
 8010416:	6860      	ldr	r0, [r4, #4]
 8010418:	f7ff ff82 	bl	8010320 <std>
 801041c:	68a0      	ldr	r0, [r4, #8]
 801041e:	2201      	movs	r2, #1
 8010420:	2109      	movs	r1, #9
 8010422:	f7ff ff7d 	bl	8010320 <std>
 8010426:	68e0      	ldr	r0, [r4, #12]
 8010428:	2202      	movs	r2, #2
 801042a:	2112      	movs	r1, #18
 801042c:	f7ff ff78 	bl	8010320 <std>
 8010430:	2301      	movs	r3, #1
 8010432:	61a3      	str	r3, [r4, #24]
 8010434:	e7d2      	b.n	80103dc <__sinit+0xc>
 8010436:	bf00      	nop
 8010438:	080129f8 	.word	0x080129f8
 801043c:	08010369 	.word	0x08010369

08010440 <__sfp>:
 8010440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010442:	4607      	mov	r7, r0
 8010444:	f7ff ffac 	bl	80103a0 <__sfp_lock_acquire>
 8010448:	4b1e      	ldr	r3, [pc, #120]	; (80104c4 <__sfp+0x84>)
 801044a:	681e      	ldr	r6, [r3, #0]
 801044c:	69b3      	ldr	r3, [r6, #24]
 801044e:	b913      	cbnz	r3, 8010456 <__sfp+0x16>
 8010450:	4630      	mov	r0, r6
 8010452:	f7ff ffbd 	bl	80103d0 <__sinit>
 8010456:	3648      	adds	r6, #72	; 0x48
 8010458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801045c:	3b01      	subs	r3, #1
 801045e:	d503      	bpl.n	8010468 <__sfp+0x28>
 8010460:	6833      	ldr	r3, [r6, #0]
 8010462:	b30b      	cbz	r3, 80104a8 <__sfp+0x68>
 8010464:	6836      	ldr	r6, [r6, #0]
 8010466:	e7f7      	b.n	8010458 <__sfp+0x18>
 8010468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801046c:	b9d5      	cbnz	r5, 80104a4 <__sfp+0x64>
 801046e:	4b16      	ldr	r3, [pc, #88]	; (80104c8 <__sfp+0x88>)
 8010470:	60e3      	str	r3, [r4, #12]
 8010472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010476:	6665      	str	r5, [r4, #100]	; 0x64
 8010478:	f000 f859 	bl	801052e <__retarget_lock_init_recursive>
 801047c:	f7ff ff96 	bl	80103ac <__sfp_lock_release>
 8010480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010488:	6025      	str	r5, [r4, #0]
 801048a:	61a5      	str	r5, [r4, #24]
 801048c:	2208      	movs	r2, #8
 801048e:	4629      	mov	r1, r5
 8010490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010494:	f7fb fac6 	bl	800ba24 <memset>
 8010498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801049c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80104a0:	4620      	mov	r0, r4
 80104a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a4:	3468      	adds	r4, #104	; 0x68
 80104a6:	e7d9      	b.n	801045c <__sfp+0x1c>
 80104a8:	2104      	movs	r1, #4
 80104aa:	4638      	mov	r0, r7
 80104ac:	f7ff ff62 	bl	8010374 <__sfmoreglue>
 80104b0:	4604      	mov	r4, r0
 80104b2:	6030      	str	r0, [r6, #0]
 80104b4:	2800      	cmp	r0, #0
 80104b6:	d1d5      	bne.n	8010464 <__sfp+0x24>
 80104b8:	f7ff ff78 	bl	80103ac <__sfp_lock_release>
 80104bc:	230c      	movs	r3, #12
 80104be:	603b      	str	r3, [r7, #0]
 80104c0:	e7ee      	b.n	80104a0 <__sfp+0x60>
 80104c2:	bf00      	nop
 80104c4:	080129f8 	.word	0x080129f8
 80104c8:	ffff0001 	.word	0xffff0001

080104cc <fiprintf>:
 80104cc:	b40e      	push	{r1, r2, r3}
 80104ce:	b503      	push	{r0, r1, lr}
 80104d0:	4601      	mov	r1, r0
 80104d2:	ab03      	add	r3, sp, #12
 80104d4:	4805      	ldr	r0, [pc, #20]	; (80104ec <fiprintf+0x20>)
 80104d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	9301      	str	r3, [sp, #4]
 80104de:	f000 f8a7 	bl	8010630 <_vfiprintf_r>
 80104e2:	b002      	add	sp, #8
 80104e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80104e8:	b003      	add	sp, #12
 80104ea:	4770      	bx	lr
 80104ec:	20000014 	.word	0x20000014

080104f0 <_fwalk_reent>:
 80104f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f4:	4606      	mov	r6, r0
 80104f6:	4688      	mov	r8, r1
 80104f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104fc:	2700      	movs	r7, #0
 80104fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010502:	f1b9 0901 	subs.w	r9, r9, #1
 8010506:	d505      	bpl.n	8010514 <_fwalk_reent+0x24>
 8010508:	6824      	ldr	r4, [r4, #0]
 801050a:	2c00      	cmp	r4, #0
 801050c:	d1f7      	bne.n	80104fe <_fwalk_reent+0xe>
 801050e:	4638      	mov	r0, r7
 8010510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010514:	89ab      	ldrh	r3, [r5, #12]
 8010516:	2b01      	cmp	r3, #1
 8010518:	d907      	bls.n	801052a <_fwalk_reent+0x3a>
 801051a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801051e:	3301      	adds	r3, #1
 8010520:	d003      	beq.n	801052a <_fwalk_reent+0x3a>
 8010522:	4629      	mov	r1, r5
 8010524:	4630      	mov	r0, r6
 8010526:	47c0      	blx	r8
 8010528:	4307      	orrs	r7, r0
 801052a:	3568      	adds	r5, #104	; 0x68
 801052c:	e7e9      	b.n	8010502 <_fwalk_reent+0x12>

0801052e <__retarget_lock_init_recursive>:
 801052e:	4770      	bx	lr

08010530 <__retarget_lock_acquire_recursive>:
 8010530:	4770      	bx	lr

08010532 <__retarget_lock_release_recursive>:
 8010532:	4770      	bx	lr

08010534 <memmove>:
 8010534:	4288      	cmp	r0, r1
 8010536:	b510      	push	{r4, lr}
 8010538:	eb01 0402 	add.w	r4, r1, r2
 801053c:	d902      	bls.n	8010544 <memmove+0x10>
 801053e:	4284      	cmp	r4, r0
 8010540:	4623      	mov	r3, r4
 8010542:	d807      	bhi.n	8010554 <memmove+0x20>
 8010544:	1e43      	subs	r3, r0, #1
 8010546:	42a1      	cmp	r1, r4
 8010548:	d008      	beq.n	801055c <memmove+0x28>
 801054a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801054e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010552:	e7f8      	b.n	8010546 <memmove+0x12>
 8010554:	4402      	add	r2, r0
 8010556:	4601      	mov	r1, r0
 8010558:	428a      	cmp	r2, r1
 801055a:	d100      	bne.n	801055e <memmove+0x2a>
 801055c:	bd10      	pop	{r4, pc}
 801055e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010566:	e7f7      	b.n	8010558 <memmove+0x24>

08010568 <__malloc_lock>:
 8010568:	4801      	ldr	r0, [pc, #4]	; (8010570 <__malloc_lock+0x8>)
 801056a:	f7ff bfe1 	b.w	8010530 <__retarget_lock_acquire_recursive>
 801056e:	bf00      	nop
 8010570:	2000124c 	.word	0x2000124c

08010574 <__malloc_unlock>:
 8010574:	4801      	ldr	r0, [pc, #4]	; (801057c <__malloc_unlock+0x8>)
 8010576:	f7ff bfdc 	b.w	8010532 <__retarget_lock_release_recursive>
 801057a:	bf00      	nop
 801057c:	2000124c 	.word	0x2000124c

08010580 <_realloc_r>:
 8010580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010584:	4680      	mov	r8, r0
 8010586:	4614      	mov	r4, r2
 8010588:	460e      	mov	r6, r1
 801058a:	b921      	cbnz	r1, 8010596 <_realloc_r+0x16>
 801058c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010590:	4611      	mov	r1, r2
 8010592:	f7fe bfbd 	b.w	800f510 <_malloc_r>
 8010596:	b92a      	cbnz	r2, 80105a4 <_realloc_r+0x24>
 8010598:	f7fe ff4e 	bl	800f438 <_free_r>
 801059c:	4625      	mov	r5, r4
 801059e:	4628      	mov	r0, r5
 80105a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a4:	f000 faa0 	bl	8010ae8 <_malloc_usable_size_r>
 80105a8:	4284      	cmp	r4, r0
 80105aa:	4607      	mov	r7, r0
 80105ac:	d802      	bhi.n	80105b4 <_realloc_r+0x34>
 80105ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80105b2:	d812      	bhi.n	80105da <_realloc_r+0x5a>
 80105b4:	4621      	mov	r1, r4
 80105b6:	4640      	mov	r0, r8
 80105b8:	f7fe ffaa 	bl	800f510 <_malloc_r>
 80105bc:	4605      	mov	r5, r0
 80105be:	2800      	cmp	r0, #0
 80105c0:	d0ed      	beq.n	801059e <_realloc_r+0x1e>
 80105c2:	42bc      	cmp	r4, r7
 80105c4:	4622      	mov	r2, r4
 80105c6:	4631      	mov	r1, r6
 80105c8:	bf28      	it	cs
 80105ca:	463a      	movcs	r2, r7
 80105cc:	f7fe fa4e 	bl	800ea6c <memcpy>
 80105d0:	4631      	mov	r1, r6
 80105d2:	4640      	mov	r0, r8
 80105d4:	f7fe ff30 	bl	800f438 <_free_r>
 80105d8:	e7e1      	b.n	801059e <_realloc_r+0x1e>
 80105da:	4635      	mov	r5, r6
 80105dc:	e7df      	b.n	801059e <_realloc_r+0x1e>

080105de <__sfputc_r>:
 80105de:	6893      	ldr	r3, [r2, #8]
 80105e0:	3b01      	subs	r3, #1
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	b410      	push	{r4}
 80105e6:	6093      	str	r3, [r2, #8]
 80105e8:	da08      	bge.n	80105fc <__sfputc_r+0x1e>
 80105ea:	6994      	ldr	r4, [r2, #24]
 80105ec:	42a3      	cmp	r3, r4
 80105ee:	db01      	blt.n	80105f4 <__sfputc_r+0x16>
 80105f0:	290a      	cmp	r1, #10
 80105f2:	d103      	bne.n	80105fc <__sfputc_r+0x1e>
 80105f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105f8:	f000 b94a 	b.w	8010890 <__swbuf_r>
 80105fc:	6813      	ldr	r3, [r2, #0]
 80105fe:	1c58      	adds	r0, r3, #1
 8010600:	6010      	str	r0, [r2, #0]
 8010602:	7019      	strb	r1, [r3, #0]
 8010604:	4608      	mov	r0, r1
 8010606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801060a:	4770      	bx	lr

0801060c <__sfputs_r>:
 801060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060e:	4606      	mov	r6, r0
 8010610:	460f      	mov	r7, r1
 8010612:	4614      	mov	r4, r2
 8010614:	18d5      	adds	r5, r2, r3
 8010616:	42ac      	cmp	r4, r5
 8010618:	d101      	bne.n	801061e <__sfputs_r+0x12>
 801061a:	2000      	movs	r0, #0
 801061c:	e007      	b.n	801062e <__sfputs_r+0x22>
 801061e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010622:	463a      	mov	r2, r7
 8010624:	4630      	mov	r0, r6
 8010626:	f7ff ffda 	bl	80105de <__sfputc_r>
 801062a:	1c43      	adds	r3, r0, #1
 801062c:	d1f3      	bne.n	8010616 <__sfputs_r+0xa>
 801062e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010630 <_vfiprintf_r>:
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	460d      	mov	r5, r1
 8010636:	b09d      	sub	sp, #116	; 0x74
 8010638:	4614      	mov	r4, r2
 801063a:	4698      	mov	r8, r3
 801063c:	4606      	mov	r6, r0
 801063e:	b118      	cbz	r0, 8010648 <_vfiprintf_r+0x18>
 8010640:	6983      	ldr	r3, [r0, #24]
 8010642:	b90b      	cbnz	r3, 8010648 <_vfiprintf_r+0x18>
 8010644:	f7ff fec4 	bl	80103d0 <__sinit>
 8010648:	4b89      	ldr	r3, [pc, #548]	; (8010870 <_vfiprintf_r+0x240>)
 801064a:	429d      	cmp	r5, r3
 801064c:	d11b      	bne.n	8010686 <_vfiprintf_r+0x56>
 801064e:	6875      	ldr	r5, [r6, #4]
 8010650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010652:	07d9      	lsls	r1, r3, #31
 8010654:	d405      	bmi.n	8010662 <_vfiprintf_r+0x32>
 8010656:	89ab      	ldrh	r3, [r5, #12]
 8010658:	059a      	lsls	r2, r3, #22
 801065a:	d402      	bmi.n	8010662 <_vfiprintf_r+0x32>
 801065c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801065e:	f7ff ff67 	bl	8010530 <__retarget_lock_acquire_recursive>
 8010662:	89ab      	ldrh	r3, [r5, #12]
 8010664:	071b      	lsls	r3, r3, #28
 8010666:	d501      	bpl.n	801066c <_vfiprintf_r+0x3c>
 8010668:	692b      	ldr	r3, [r5, #16]
 801066a:	b9eb      	cbnz	r3, 80106a8 <_vfiprintf_r+0x78>
 801066c:	4629      	mov	r1, r5
 801066e:	4630      	mov	r0, r6
 8010670:	f000 f960 	bl	8010934 <__swsetup_r>
 8010674:	b1c0      	cbz	r0, 80106a8 <_vfiprintf_r+0x78>
 8010676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010678:	07dc      	lsls	r4, r3, #31
 801067a:	d50e      	bpl.n	801069a <_vfiprintf_r+0x6a>
 801067c:	f04f 30ff 	mov.w	r0, #4294967295
 8010680:	b01d      	add	sp, #116	; 0x74
 8010682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010686:	4b7b      	ldr	r3, [pc, #492]	; (8010874 <_vfiprintf_r+0x244>)
 8010688:	429d      	cmp	r5, r3
 801068a:	d101      	bne.n	8010690 <_vfiprintf_r+0x60>
 801068c:	68b5      	ldr	r5, [r6, #8]
 801068e:	e7df      	b.n	8010650 <_vfiprintf_r+0x20>
 8010690:	4b79      	ldr	r3, [pc, #484]	; (8010878 <_vfiprintf_r+0x248>)
 8010692:	429d      	cmp	r5, r3
 8010694:	bf08      	it	eq
 8010696:	68f5      	ldreq	r5, [r6, #12]
 8010698:	e7da      	b.n	8010650 <_vfiprintf_r+0x20>
 801069a:	89ab      	ldrh	r3, [r5, #12]
 801069c:	0598      	lsls	r0, r3, #22
 801069e:	d4ed      	bmi.n	801067c <_vfiprintf_r+0x4c>
 80106a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106a2:	f7ff ff46 	bl	8010532 <__retarget_lock_release_recursive>
 80106a6:	e7e9      	b.n	801067c <_vfiprintf_r+0x4c>
 80106a8:	2300      	movs	r3, #0
 80106aa:	9309      	str	r3, [sp, #36]	; 0x24
 80106ac:	2320      	movs	r3, #32
 80106ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80106b6:	2330      	movs	r3, #48	; 0x30
 80106b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801087c <_vfiprintf_r+0x24c>
 80106bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106c0:	f04f 0901 	mov.w	r9, #1
 80106c4:	4623      	mov	r3, r4
 80106c6:	469a      	mov	sl, r3
 80106c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106cc:	b10a      	cbz	r2, 80106d2 <_vfiprintf_r+0xa2>
 80106ce:	2a25      	cmp	r2, #37	; 0x25
 80106d0:	d1f9      	bne.n	80106c6 <_vfiprintf_r+0x96>
 80106d2:	ebba 0b04 	subs.w	fp, sl, r4
 80106d6:	d00b      	beq.n	80106f0 <_vfiprintf_r+0xc0>
 80106d8:	465b      	mov	r3, fp
 80106da:	4622      	mov	r2, r4
 80106dc:	4629      	mov	r1, r5
 80106de:	4630      	mov	r0, r6
 80106e0:	f7ff ff94 	bl	801060c <__sfputs_r>
 80106e4:	3001      	adds	r0, #1
 80106e6:	f000 80aa 	beq.w	801083e <_vfiprintf_r+0x20e>
 80106ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106ec:	445a      	add	r2, fp
 80106ee:	9209      	str	r2, [sp, #36]	; 0x24
 80106f0:	f89a 3000 	ldrb.w	r3, [sl]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f000 80a2 	beq.w	801083e <_vfiprintf_r+0x20e>
 80106fa:	2300      	movs	r3, #0
 80106fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010704:	f10a 0a01 	add.w	sl, sl, #1
 8010708:	9304      	str	r3, [sp, #16]
 801070a:	9307      	str	r3, [sp, #28]
 801070c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010710:	931a      	str	r3, [sp, #104]	; 0x68
 8010712:	4654      	mov	r4, sl
 8010714:	2205      	movs	r2, #5
 8010716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801071a:	4858      	ldr	r0, [pc, #352]	; (801087c <_vfiprintf_r+0x24c>)
 801071c:	f7ef fd90 	bl	8000240 <memchr>
 8010720:	9a04      	ldr	r2, [sp, #16]
 8010722:	b9d8      	cbnz	r0, 801075c <_vfiprintf_r+0x12c>
 8010724:	06d1      	lsls	r1, r2, #27
 8010726:	bf44      	itt	mi
 8010728:	2320      	movmi	r3, #32
 801072a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801072e:	0713      	lsls	r3, r2, #28
 8010730:	bf44      	itt	mi
 8010732:	232b      	movmi	r3, #43	; 0x2b
 8010734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010738:	f89a 3000 	ldrb.w	r3, [sl]
 801073c:	2b2a      	cmp	r3, #42	; 0x2a
 801073e:	d015      	beq.n	801076c <_vfiprintf_r+0x13c>
 8010740:	9a07      	ldr	r2, [sp, #28]
 8010742:	4654      	mov	r4, sl
 8010744:	2000      	movs	r0, #0
 8010746:	f04f 0c0a 	mov.w	ip, #10
 801074a:	4621      	mov	r1, r4
 801074c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010750:	3b30      	subs	r3, #48	; 0x30
 8010752:	2b09      	cmp	r3, #9
 8010754:	d94e      	bls.n	80107f4 <_vfiprintf_r+0x1c4>
 8010756:	b1b0      	cbz	r0, 8010786 <_vfiprintf_r+0x156>
 8010758:	9207      	str	r2, [sp, #28]
 801075a:	e014      	b.n	8010786 <_vfiprintf_r+0x156>
 801075c:	eba0 0308 	sub.w	r3, r0, r8
 8010760:	fa09 f303 	lsl.w	r3, r9, r3
 8010764:	4313      	orrs	r3, r2
 8010766:	9304      	str	r3, [sp, #16]
 8010768:	46a2      	mov	sl, r4
 801076a:	e7d2      	b.n	8010712 <_vfiprintf_r+0xe2>
 801076c:	9b03      	ldr	r3, [sp, #12]
 801076e:	1d19      	adds	r1, r3, #4
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	9103      	str	r1, [sp, #12]
 8010774:	2b00      	cmp	r3, #0
 8010776:	bfbb      	ittet	lt
 8010778:	425b      	neglt	r3, r3
 801077a:	f042 0202 	orrlt.w	r2, r2, #2
 801077e:	9307      	strge	r3, [sp, #28]
 8010780:	9307      	strlt	r3, [sp, #28]
 8010782:	bfb8      	it	lt
 8010784:	9204      	strlt	r2, [sp, #16]
 8010786:	7823      	ldrb	r3, [r4, #0]
 8010788:	2b2e      	cmp	r3, #46	; 0x2e
 801078a:	d10c      	bne.n	80107a6 <_vfiprintf_r+0x176>
 801078c:	7863      	ldrb	r3, [r4, #1]
 801078e:	2b2a      	cmp	r3, #42	; 0x2a
 8010790:	d135      	bne.n	80107fe <_vfiprintf_r+0x1ce>
 8010792:	9b03      	ldr	r3, [sp, #12]
 8010794:	1d1a      	adds	r2, r3, #4
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	9203      	str	r2, [sp, #12]
 801079a:	2b00      	cmp	r3, #0
 801079c:	bfb8      	it	lt
 801079e:	f04f 33ff 	movlt.w	r3, #4294967295
 80107a2:	3402      	adds	r4, #2
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801088c <_vfiprintf_r+0x25c>
 80107aa:	7821      	ldrb	r1, [r4, #0]
 80107ac:	2203      	movs	r2, #3
 80107ae:	4650      	mov	r0, sl
 80107b0:	f7ef fd46 	bl	8000240 <memchr>
 80107b4:	b140      	cbz	r0, 80107c8 <_vfiprintf_r+0x198>
 80107b6:	2340      	movs	r3, #64	; 0x40
 80107b8:	eba0 000a 	sub.w	r0, r0, sl
 80107bc:	fa03 f000 	lsl.w	r0, r3, r0
 80107c0:	9b04      	ldr	r3, [sp, #16]
 80107c2:	4303      	orrs	r3, r0
 80107c4:	3401      	adds	r4, #1
 80107c6:	9304      	str	r3, [sp, #16]
 80107c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107cc:	482c      	ldr	r0, [pc, #176]	; (8010880 <_vfiprintf_r+0x250>)
 80107ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107d2:	2206      	movs	r2, #6
 80107d4:	f7ef fd34 	bl	8000240 <memchr>
 80107d8:	2800      	cmp	r0, #0
 80107da:	d03f      	beq.n	801085c <_vfiprintf_r+0x22c>
 80107dc:	4b29      	ldr	r3, [pc, #164]	; (8010884 <_vfiprintf_r+0x254>)
 80107de:	bb1b      	cbnz	r3, 8010828 <_vfiprintf_r+0x1f8>
 80107e0:	9b03      	ldr	r3, [sp, #12]
 80107e2:	3307      	adds	r3, #7
 80107e4:	f023 0307 	bic.w	r3, r3, #7
 80107e8:	3308      	adds	r3, #8
 80107ea:	9303      	str	r3, [sp, #12]
 80107ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ee:	443b      	add	r3, r7
 80107f0:	9309      	str	r3, [sp, #36]	; 0x24
 80107f2:	e767      	b.n	80106c4 <_vfiprintf_r+0x94>
 80107f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80107f8:	460c      	mov	r4, r1
 80107fa:	2001      	movs	r0, #1
 80107fc:	e7a5      	b.n	801074a <_vfiprintf_r+0x11a>
 80107fe:	2300      	movs	r3, #0
 8010800:	3401      	adds	r4, #1
 8010802:	9305      	str	r3, [sp, #20]
 8010804:	4619      	mov	r1, r3
 8010806:	f04f 0c0a 	mov.w	ip, #10
 801080a:	4620      	mov	r0, r4
 801080c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010810:	3a30      	subs	r2, #48	; 0x30
 8010812:	2a09      	cmp	r2, #9
 8010814:	d903      	bls.n	801081e <_vfiprintf_r+0x1ee>
 8010816:	2b00      	cmp	r3, #0
 8010818:	d0c5      	beq.n	80107a6 <_vfiprintf_r+0x176>
 801081a:	9105      	str	r1, [sp, #20]
 801081c:	e7c3      	b.n	80107a6 <_vfiprintf_r+0x176>
 801081e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010822:	4604      	mov	r4, r0
 8010824:	2301      	movs	r3, #1
 8010826:	e7f0      	b.n	801080a <_vfiprintf_r+0x1da>
 8010828:	ab03      	add	r3, sp, #12
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	462a      	mov	r2, r5
 801082e:	4b16      	ldr	r3, [pc, #88]	; (8010888 <_vfiprintf_r+0x258>)
 8010830:	a904      	add	r1, sp, #16
 8010832:	4630      	mov	r0, r6
 8010834:	f7fb f99e 	bl	800bb74 <_printf_float>
 8010838:	4607      	mov	r7, r0
 801083a:	1c78      	adds	r0, r7, #1
 801083c:	d1d6      	bne.n	80107ec <_vfiprintf_r+0x1bc>
 801083e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010840:	07d9      	lsls	r1, r3, #31
 8010842:	d405      	bmi.n	8010850 <_vfiprintf_r+0x220>
 8010844:	89ab      	ldrh	r3, [r5, #12]
 8010846:	059a      	lsls	r2, r3, #22
 8010848:	d402      	bmi.n	8010850 <_vfiprintf_r+0x220>
 801084a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801084c:	f7ff fe71 	bl	8010532 <__retarget_lock_release_recursive>
 8010850:	89ab      	ldrh	r3, [r5, #12]
 8010852:	065b      	lsls	r3, r3, #25
 8010854:	f53f af12 	bmi.w	801067c <_vfiprintf_r+0x4c>
 8010858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801085a:	e711      	b.n	8010680 <_vfiprintf_r+0x50>
 801085c:	ab03      	add	r3, sp, #12
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	462a      	mov	r2, r5
 8010862:	4b09      	ldr	r3, [pc, #36]	; (8010888 <_vfiprintf_r+0x258>)
 8010864:	a904      	add	r1, sp, #16
 8010866:	4630      	mov	r0, r6
 8010868:	f7fb fc28 	bl	800c0bc <_printf_i>
 801086c:	e7e4      	b.n	8010838 <_vfiprintf_r+0x208>
 801086e:	bf00      	nop
 8010870:	08012e74 	.word	0x08012e74
 8010874:	08012e94 	.word	0x08012e94
 8010878:	08012e54 	.word	0x08012e54
 801087c:	08012dec 	.word	0x08012dec
 8010880:	08012df6 	.word	0x08012df6
 8010884:	0800bb75 	.word	0x0800bb75
 8010888:	0801060d 	.word	0x0801060d
 801088c:	08012df2 	.word	0x08012df2

08010890 <__swbuf_r>:
 8010890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010892:	460e      	mov	r6, r1
 8010894:	4614      	mov	r4, r2
 8010896:	4605      	mov	r5, r0
 8010898:	b118      	cbz	r0, 80108a2 <__swbuf_r+0x12>
 801089a:	6983      	ldr	r3, [r0, #24]
 801089c:	b90b      	cbnz	r3, 80108a2 <__swbuf_r+0x12>
 801089e:	f7ff fd97 	bl	80103d0 <__sinit>
 80108a2:	4b21      	ldr	r3, [pc, #132]	; (8010928 <__swbuf_r+0x98>)
 80108a4:	429c      	cmp	r4, r3
 80108a6:	d12b      	bne.n	8010900 <__swbuf_r+0x70>
 80108a8:	686c      	ldr	r4, [r5, #4]
 80108aa:	69a3      	ldr	r3, [r4, #24]
 80108ac:	60a3      	str	r3, [r4, #8]
 80108ae:	89a3      	ldrh	r3, [r4, #12]
 80108b0:	071a      	lsls	r2, r3, #28
 80108b2:	d52f      	bpl.n	8010914 <__swbuf_r+0x84>
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	b36b      	cbz	r3, 8010914 <__swbuf_r+0x84>
 80108b8:	6923      	ldr	r3, [r4, #16]
 80108ba:	6820      	ldr	r0, [r4, #0]
 80108bc:	1ac0      	subs	r0, r0, r3
 80108be:	6963      	ldr	r3, [r4, #20]
 80108c0:	b2f6      	uxtb	r6, r6
 80108c2:	4283      	cmp	r3, r0
 80108c4:	4637      	mov	r7, r6
 80108c6:	dc04      	bgt.n	80108d2 <__swbuf_r+0x42>
 80108c8:	4621      	mov	r1, r4
 80108ca:	4628      	mov	r0, r5
 80108cc:	f7ff fcec 	bl	80102a8 <_fflush_r>
 80108d0:	bb30      	cbnz	r0, 8010920 <__swbuf_r+0x90>
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	3b01      	subs	r3, #1
 80108d6:	60a3      	str	r3, [r4, #8]
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	1c5a      	adds	r2, r3, #1
 80108dc:	6022      	str	r2, [r4, #0]
 80108de:	701e      	strb	r6, [r3, #0]
 80108e0:	6963      	ldr	r3, [r4, #20]
 80108e2:	3001      	adds	r0, #1
 80108e4:	4283      	cmp	r3, r0
 80108e6:	d004      	beq.n	80108f2 <__swbuf_r+0x62>
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	07db      	lsls	r3, r3, #31
 80108ec:	d506      	bpl.n	80108fc <__swbuf_r+0x6c>
 80108ee:	2e0a      	cmp	r6, #10
 80108f0:	d104      	bne.n	80108fc <__swbuf_r+0x6c>
 80108f2:	4621      	mov	r1, r4
 80108f4:	4628      	mov	r0, r5
 80108f6:	f7ff fcd7 	bl	80102a8 <_fflush_r>
 80108fa:	b988      	cbnz	r0, 8010920 <__swbuf_r+0x90>
 80108fc:	4638      	mov	r0, r7
 80108fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010900:	4b0a      	ldr	r3, [pc, #40]	; (801092c <__swbuf_r+0x9c>)
 8010902:	429c      	cmp	r4, r3
 8010904:	d101      	bne.n	801090a <__swbuf_r+0x7a>
 8010906:	68ac      	ldr	r4, [r5, #8]
 8010908:	e7cf      	b.n	80108aa <__swbuf_r+0x1a>
 801090a:	4b09      	ldr	r3, [pc, #36]	; (8010930 <__swbuf_r+0xa0>)
 801090c:	429c      	cmp	r4, r3
 801090e:	bf08      	it	eq
 8010910:	68ec      	ldreq	r4, [r5, #12]
 8010912:	e7ca      	b.n	80108aa <__swbuf_r+0x1a>
 8010914:	4621      	mov	r1, r4
 8010916:	4628      	mov	r0, r5
 8010918:	f000 f80c 	bl	8010934 <__swsetup_r>
 801091c:	2800      	cmp	r0, #0
 801091e:	d0cb      	beq.n	80108b8 <__swbuf_r+0x28>
 8010920:	f04f 37ff 	mov.w	r7, #4294967295
 8010924:	e7ea      	b.n	80108fc <__swbuf_r+0x6c>
 8010926:	bf00      	nop
 8010928:	08012e74 	.word	0x08012e74
 801092c:	08012e94 	.word	0x08012e94
 8010930:	08012e54 	.word	0x08012e54

08010934 <__swsetup_r>:
 8010934:	4b32      	ldr	r3, [pc, #200]	; (8010a00 <__swsetup_r+0xcc>)
 8010936:	b570      	push	{r4, r5, r6, lr}
 8010938:	681d      	ldr	r5, [r3, #0]
 801093a:	4606      	mov	r6, r0
 801093c:	460c      	mov	r4, r1
 801093e:	b125      	cbz	r5, 801094a <__swsetup_r+0x16>
 8010940:	69ab      	ldr	r3, [r5, #24]
 8010942:	b913      	cbnz	r3, 801094a <__swsetup_r+0x16>
 8010944:	4628      	mov	r0, r5
 8010946:	f7ff fd43 	bl	80103d0 <__sinit>
 801094a:	4b2e      	ldr	r3, [pc, #184]	; (8010a04 <__swsetup_r+0xd0>)
 801094c:	429c      	cmp	r4, r3
 801094e:	d10f      	bne.n	8010970 <__swsetup_r+0x3c>
 8010950:	686c      	ldr	r4, [r5, #4]
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010958:	0719      	lsls	r1, r3, #28
 801095a:	d42c      	bmi.n	80109b6 <__swsetup_r+0x82>
 801095c:	06dd      	lsls	r5, r3, #27
 801095e:	d411      	bmi.n	8010984 <__swsetup_r+0x50>
 8010960:	2309      	movs	r3, #9
 8010962:	6033      	str	r3, [r6, #0]
 8010964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	f04f 30ff 	mov.w	r0, #4294967295
 801096e:	e03e      	b.n	80109ee <__swsetup_r+0xba>
 8010970:	4b25      	ldr	r3, [pc, #148]	; (8010a08 <__swsetup_r+0xd4>)
 8010972:	429c      	cmp	r4, r3
 8010974:	d101      	bne.n	801097a <__swsetup_r+0x46>
 8010976:	68ac      	ldr	r4, [r5, #8]
 8010978:	e7eb      	b.n	8010952 <__swsetup_r+0x1e>
 801097a:	4b24      	ldr	r3, [pc, #144]	; (8010a0c <__swsetup_r+0xd8>)
 801097c:	429c      	cmp	r4, r3
 801097e:	bf08      	it	eq
 8010980:	68ec      	ldreq	r4, [r5, #12]
 8010982:	e7e6      	b.n	8010952 <__swsetup_r+0x1e>
 8010984:	0758      	lsls	r0, r3, #29
 8010986:	d512      	bpl.n	80109ae <__swsetup_r+0x7a>
 8010988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801098a:	b141      	cbz	r1, 801099e <__swsetup_r+0x6a>
 801098c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010990:	4299      	cmp	r1, r3
 8010992:	d002      	beq.n	801099a <__swsetup_r+0x66>
 8010994:	4630      	mov	r0, r6
 8010996:	f7fe fd4f 	bl	800f438 <_free_r>
 801099a:	2300      	movs	r3, #0
 801099c:	6363      	str	r3, [r4, #52]	; 0x34
 801099e:	89a3      	ldrh	r3, [r4, #12]
 80109a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109a4:	81a3      	strh	r3, [r4, #12]
 80109a6:	2300      	movs	r3, #0
 80109a8:	6063      	str	r3, [r4, #4]
 80109aa:	6923      	ldr	r3, [r4, #16]
 80109ac:	6023      	str	r3, [r4, #0]
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	f043 0308 	orr.w	r3, r3, #8
 80109b4:	81a3      	strh	r3, [r4, #12]
 80109b6:	6923      	ldr	r3, [r4, #16]
 80109b8:	b94b      	cbnz	r3, 80109ce <__swsetup_r+0x9a>
 80109ba:	89a3      	ldrh	r3, [r4, #12]
 80109bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109c4:	d003      	beq.n	80109ce <__swsetup_r+0x9a>
 80109c6:	4621      	mov	r1, r4
 80109c8:	4630      	mov	r0, r6
 80109ca:	f000 f84d 	bl	8010a68 <__smakebuf_r>
 80109ce:	89a0      	ldrh	r0, [r4, #12]
 80109d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109d4:	f010 0301 	ands.w	r3, r0, #1
 80109d8:	d00a      	beq.n	80109f0 <__swsetup_r+0xbc>
 80109da:	2300      	movs	r3, #0
 80109dc:	60a3      	str	r3, [r4, #8]
 80109de:	6963      	ldr	r3, [r4, #20]
 80109e0:	425b      	negs	r3, r3
 80109e2:	61a3      	str	r3, [r4, #24]
 80109e4:	6923      	ldr	r3, [r4, #16]
 80109e6:	b943      	cbnz	r3, 80109fa <__swsetup_r+0xc6>
 80109e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109ec:	d1ba      	bne.n	8010964 <__swsetup_r+0x30>
 80109ee:	bd70      	pop	{r4, r5, r6, pc}
 80109f0:	0781      	lsls	r1, r0, #30
 80109f2:	bf58      	it	pl
 80109f4:	6963      	ldrpl	r3, [r4, #20]
 80109f6:	60a3      	str	r3, [r4, #8]
 80109f8:	e7f4      	b.n	80109e4 <__swsetup_r+0xb0>
 80109fa:	2000      	movs	r0, #0
 80109fc:	e7f7      	b.n	80109ee <__swsetup_r+0xba>
 80109fe:	bf00      	nop
 8010a00:	20000014 	.word	0x20000014
 8010a04:	08012e74 	.word	0x08012e74
 8010a08:	08012e94 	.word	0x08012e94
 8010a0c:	08012e54 	.word	0x08012e54

08010a10 <abort>:
 8010a10:	b508      	push	{r3, lr}
 8010a12:	2006      	movs	r0, #6
 8010a14:	f000 f898 	bl	8010b48 <raise>
 8010a18:	2001      	movs	r0, #1
 8010a1a:	f7f5 f8eb 	bl	8005bf4 <_exit>

08010a1e <__swhatbuf_r>:
 8010a1e:	b570      	push	{r4, r5, r6, lr}
 8010a20:	460e      	mov	r6, r1
 8010a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a26:	2900      	cmp	r1, #0
 8010a28:	b096      	sub	sp, #88	; 0x58
 8010a2a:	4614      	mov	r4, r2
 8010a2c:	461d      	mov	r5, r3
 8010a2e:	da08      	bge.n	8010a42 <__swhatbuf_r+0x24>
 8010a30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a34:	2200      	movs	r2, #0
 8010a36:	602a      	str	r2, [r5, #0]
 8010a38:	061a      	lsls	r2, r3, #24
 8010a3a:	d410      	bmi.n	8010a5e <__swhatbuf_r+0x40>
 8010a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a40:	e00e      	b.n	8010a60 <__swhatbuf_r+0x42>
 8010a42:	466a      	mov	r2, sp
 8010a44:	f000 f89c 	bl	8010b80 <_fstat_r>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	dbf1      	blt.n	8010a30 <__swhatbuf_r+0x12>
 8010a4c:	9a01      	ldr	r2, [sp, #4]
 8010a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a56:	425a      	negs	r2, r3
 8010a58:	415a      	adcs	r2, r3
 8010a5a:	602a      	str	r2, [r5, #0]
 8010a5c:	e7ee      	b.n	8010a3c <__swhatbuf_r+0x1e>
 8010a5e:	2340      	movs	r3, #64	; 0x40
 8010a60:	2000      	movs	r0, #0
 8010a62:	6023      	str	r3, [r4, #0]
 8010a64:	b016      	add	sp, #88	; 0x58
 8010a66:	bd70      	pop	{r4, r5, r6, pc}

08010a68 <__smakebuf_r>:
 8010a68:	898b      	ldrh	r3, [r1, #12]
 8010a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a6c:	079d      	lsls	r5, r3, #30
 8010a6e:	4606      	mov	r6, r0
 8010a70:	460c      	mov	r4, r1
 8010a72:	d507      	bpl.n	8010a84 <__smakebuf_r+0x1c>
 8010a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	6163      	str	r3, [r4, #20]
 8010a80:	b002      	add	sp, #8
 8010a82:	bd70      	pop	{r4, r5, r6, pc}
 8010a84:	ab01      	add	r3, sp, #4
 8010a86:	466a      	mov	r2, sp
 8010a88:	f7ff ffc9 	bl	8010a1e <__swhatbuf_r>
 8010a8c:	9900      	ldr	r1, [sp, #0]
 8010a8e:	4605      	mov	r5, r0
 8010a90:	4630      	mov	r0, r6
 8010a92:	f7fe fd3d 	bl	800f510 <_malloc_r>
 8010a96:	b948      	cbnz	r0, 8010aac <__smakebuf_r+0x44>
 8010a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9c:	059a      	lsls	r2, r3, #22
 8010a9e:	d4ef      	bmi.n	8010a80 <__smakebuf_r+0x18>
 8010aa0:	f023 0303 	bic.w	r3, r3, #3
 8010aa4:	f043 0302 	orr.w	r3, r3, #2
 8010aa8:	81a3      	strh	r3, [r4, #12]
 8010aaa:	e7e3      	b.n	8010a74 <__smakebuf_r+0xc>
 8010aac:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <__smakebuf_r+0x7c>)
 8010aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	6020      	str	r0, [r4, #0]
 8010ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ab8:	81a3      	strh	r3, [r4, #12]
 8010aba:	9b00      	ldr	r3, [sp, #0]
 8010abc:	6163      	str	r3, [r4, #20]
 8010abe:	9b01      	ldr	r3, [sp, #4]
 8010ac0:	6120      	str	r0, [r4, #16]
 8010ac2:	b15b      	cbz	r3, 8010adc <__smakebuf_r+0x74>
 8010ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f000 f86b 	bl	8010ba4 <_isatty_r>
 8010ace:	b128      	cbz	r0, 8010adc <__smakebuf_r+0x74>
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	f023 0303 	bic.w	r3, r3, #3
 8010ad6:	f043 0301 	orr.w	r3, r3, #1
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	89a0      	ldrh	r0, [r4, #12]
 8010ade:	4305      	orrs	r5, r0
 8010ae0:	81a5      	strh	r5, [r4, #12]
 8010ae2:	e7cd      	b.n	8010a80 <__smakebuf_r+0x18>
 8010ae4:	08010369 	.word	0x08010369

08010ae8 <_malloc_usable_size_r>:
 8010ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aec:	1f18      	subs	r0, r3, #4
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	bfbc      	itt	lt
 8010af2:	580b      	ldrlt	r3, [r1, r0]
 8010af4:	18c0      	addlt	r0, r0, r3
 8010af6:	4770      	bx	lr

08010af8 <_raise_r>:
 8010af8:	291f      	cmp	r1, #31
 8010afa:	b538      	push	{r3, r4, r5, lr}
 8010afc:	4604      	mov	r4, r0
 8010afe:	460d      	mov	r5, r1
 8010b00:	d904      	bls.n	8010b0c <_raise_r+0x14>
 8010b02:	2316      	movs	r3, #22
 8010b04:	6003      	str	r3, [r0, #0]
 8010b06:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0a:	bd38      	pop	{r3, r4, r5, pc}
 8010b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010b0e:	b112      	cbz	r2, 8010b16 <_raise_r+0x1e>
 8010b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b14:	b94b      	cbnz	r3, 8010b2a <_raise_r+0x32>
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 f830 	bl	8010b7c <_getpid_r>
 8010b1c:	462a      	mov	r2, r5
 8010b1e:	4601      	mov	r1, r0
 8010b20:	4620      	mov	r0, r4
 8010b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b26:	f000 b817 	b.w	8010b58 <_kill_r>
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d00a      	beq.n	8010b44 <_raise_r+0x4c>
 8010b2e:	1c59      	adds	r1, r3, #1
 8010b30:	d103      	bne.n	8010b3a <_raise_r+0x42>
 8010b32:	2316      	movs	r3, #22
 8010b34:	6003      	str	r3, [r0, #0]
 8010b36:	2001      	movs	r0, #1
 8010b38:	e7e7      	b.n	8010b0a <_raise_r+0x12>
 8010b3a:	2400      	movs	r4, #0
 8010b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b40:	4628      	mov	r0, r5
 8010b42:	4798      	blx	r3
 8010b44:	2000      	movs	r0, #0
 8010b46:	e7e0      	b.n	8010b0a <_raise_r+0x12>

08010b48 <raise>:
 8010b48:	4b02      	ldr	r3, [pc, #8]	; (8010b54 <raise+0xc>)
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	6818      	ldr	r0, [r3, #0]
 8010b4e:	f7ff bfd3 	b.w	8010af8 <_raise_r>
 8010b52:	bf00      	nop
 8010b54:	20000014 	.word	0x20000014

08010b58 <_kill_r>:
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	4d07      	ldr	r5, [pc, #28]	; (8010b78 <_kill_r+0x20>)
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	4604      	mov	r4, r0
 8010b60:	4608      	mov	r0, r1
 8010b62:	4611      	mov	r1, r2
 8010b64:	602b      	str	r3, [r5, #0]
 8010b66:	f7f5 f835 	bl	8005bd4 <_kill>
 8010b6a:	1c43      	adds	r3, r0, #1
 8010b6c:	d102      	bne.n	8010b74 <_kill_r+0x1c>
 8010b6e:	682b      	ldr	r3, [r5, #0]
 8010b70:	b103      	cbz	r3, 8010b74 <_kill_r+0x1c>
 8010b72:	6023      	str	r3, [r4, #0]
 8010b74:	bd38      	pop	{r3, r4, r5, pc}
 8010b76:	bf00      	nop
 8010b78:	20001248 	.word	0x20001248

08010b7c <_getpid_r>:
 8010b7c:	f7f5 b822 	b.w	8005bc4 <_getpid>

08010b80 <_fstat_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	4d07      	ldr	r5, [pc, #28]	; (8010ba0 <_fstat_r+0x20>)
 8010b84:	2300      	movs	r3, #0
 8010b86:	4604      	mov	r4, r0
 8010b88:	4608      	mov	r0, r1
 8010b8a:	4611      	mov	r1, r2
 8010b8c:	602b      	str	r3, [r5, #0]
 8010b8e:	f7f5 f880 	bl	8005c92 <_fstat>
 8010b92:	1c43      	adds	r3, r0, #1
 8010b94:	d102      	bne.n	8010b9c <_fstat_r+0x1c>
 8010b96:	682b      	ldr	r3, [r5, #0]
 8010b98:	b103      	cbz	r3, 8010b9c <_fstat_r+0x1c>
 8010b9a:	6023      	str	r3, [r4, #0]
 8010b9c:	bd38      	pop	{r3, r4, r5, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20001248 	.word	0x20001248

08010ba4 <_isatty_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4d06      	ldr	r5, [pc, #24]	; (8010bc0 <_isatty_r+0x1c>)
 8010ba8:	2300      	movs	r3, #0
 8010baa:	4604      	mov	r4, r0
 8010bac:	4608      	mov	r0, r1
 8010bae:	602b      	str	r3, [r5, #0]
 8010bb0:	f7f5 f87f 	bl	8005cb2 <_isatty>
 8010bb4:	1c43      	adds	r3, r0, #1
 8010bb6:	d102      	bne.n	8010bbe <_isatty_r+0x1a>
 8010bb8:	682b      	ldr	r3, [r5, #0]
 8010bba:	b103      	cbz	r3, 8010bbe <_isatty_r+0x1a>
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	bd38      	pop	{r3, r4, r5, pc}
 8010bc0:	20001248 	.word	0x20001248

08010bc4 <acos>:
 8010bc4:	b538      	push	{r3, r4, r5, lr}
 8010bc6:	ed2d 8b02 	vpush	{d8}
 8010bca:	ec55 4b10 	vmov	r4, r5, d0
 8010bce:	f000 f91f 	bl	8010e10 <__ieee754_acos>
 8010bd2:	4622      	mov	r2, r4
 8010bd4:	462b      	mov	r3, r5
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	4629      	mov	r1, r5
 8010bda:	eeb0 8a40 	vmov.f32	s16, s0
 8010bde:	eef0 8a60 	vmov.f32	s17, s1
 8010be2:	f7ef ffd3 	bl	8000b8c <__aeabi_dcmpun>
 8010be6:	b9a8      	cbnz	r0, 8010c14 <acos+0x50>
 8010be8:	ec45 4b10 	vmov	d0, r4, r5
 8010bec:	f001 fe04 	bl	80127f8 <fabs>
 8010bf0:	4b0c      	ldr	r3, [pc, #48]	; (8010c24 <acos+0x60>)
 8010bf2:	ec51 0b10 	vmov	r0, r1, d0
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f7ef ffbe 	bl	8000b78 <__aeabi_dcmpgt>
 8010bfc:	b150      	cbz	r0, 8010c14 <acos+0x50>
 8010bfe:	f7fa fee7 	bl	800b9d0 <__errno>
 8010c02:	ecbd 8b02 	vpop	{d8}
 8010c06:	2321      	movs	r3, #33	; 0x21
 8010c08:	6003      	str	r3, [r0, #0]
 8010c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c0e:	4806      	ldr	r0, [pc, #24]	; (8010c28 <acos+0x64>)
 8010c10:	f7ff b986 	b.w	800ff20 <nan>
 8010c14:	eeb0 0a48 	vmov.f32	s0, s16
 8010c18:	eef0 0a68 	vmov.f32	s1, s17
 8010c1c:	ecbd 8b02 	vpop	{d8}
 8010c20:	bd38      	pop	{r3, r4, r5, pc}
 8010c22:	bf00      	nop
 8010c24:	3ff00000 	.word	0x3ff00000
 8010c28:	08012e53 	.word	0x08012e53

08010c2c <asin>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	ed2d 8b02 	vpush	{d8}
 8010c32:	ec55 4b10 	vmov	r4, r5, d0
 8010c36:	f000 fb4b 	bl	80112d0 <__ieee754_asin>
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	462b      	mov	r3, r5
 8010c3e:	4620      	mov	r0, r4
 8010c40:	4629      	mov	r1, r5
 8010c42:	eeb0 8a40 	vmov.f32	s16, s0
 8010c46:	eef0 8a60 	vmov.f32	s17, s1
 8010c4a:	f7ef ff9f 	bl	8000b8c <__aeabi_dcmpun>
 8010c4e:	b9a8      	cbnz	r0, 8010c7c <asin+0x50>
 8010c50:	ec45 4b10 	vmov	d0, r4, r5
 8010c54:	f001 fdd0 	bl	80127f8 <fabs>
 8010c58:	4b0c      	ldr	r3, [pc, #48]	; (8010c8c <asin+0x60>)
 8010c5a:	ec51 0b10 	vmov	r0, r1, d0
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f7ef ff8a 	bl	8000b78 <__aeabi_dcmpgt>
 8010c64:	b150      	cbz	r0, 8010c7c <asin+0x50>
 8010c66:	f7fa feb3 	bl	800b9d0 <__errno>
 8010c6a:	ecbd 8b02 	vpop	{d8}
 8010c6e:	2321      	movs	r3, #33	; 0x21
 8010c70:	6003      	str	r3, [r0, #0]
 8010c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c76:	4806      	ldr	r0, [pc, #24]	; (8010c90 <asin+0x64>)
 8010c78:	f7ff b952 	b.w	800ff20 <nan>
 8010c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8010c80:	eef0 0a68 	vmov.f32	s1, s17
 8010c84:	ecbd 8b02 	vpop	{d8}
 8010c88:	bd38      	pop	{r3, r4, r5, pc}
 8010c8a:	bf00      	nop
 8010c8c:	3ff00000 	.word	0x3ff00000
 8010c90:	08012e53 	.word	0x08012e53

08010c94 <atan2>:
 8010c94:	f000 bd30 	b.w	80116f8 <__ieee754_atan2>

08010c98 <pow>:
 8010c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9a:	ed2d 8b02 	vpush	{d8}
 8010c9e:	eeb0 8a40 	vmov.f32	s16, s0
 8010ca2:	eef0 8a60 	vmov.f32	s17, s1
 8010ca6:	ec55 4b11 	vmov	r4, r5, d1
 8010caa:	f000 fdf1 	bl	8011890 <__ieee754_pow>
 8010cae:	4622      	mov	r2, r4
 8010cb0:	462b      	mov	r3, r5
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	ec57 6b10 	vmov	r6, r7, d0
 8010cba:	f7ef ff67 	bl	8000b8c <__aeabi_dcmpun>
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	d13b      	bne.n	8010d3a <pow+0xa2>
 8010cc2:	ec51 0b18 	vmov	r0, r1, d8
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f7ef ff2d 	bl	8000b28 <__aeabi_dcmpeq>
 8010cce:	b1b8      	cbz	r0, 8010d00 <pow+0x68>
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	f7ef ff26 	bl	8000b28 <__aeabi_dcmpeq>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	d146      	bne.n	8010d6e <pow+0xd6>
 8010ce0:	ec45 4b10 	vmov	d0, r4, r5
 8010ce4:	f001 fd91 	bl	801280a <finite>
 8010ce8:	b338      	cbz	r0, 8010d3a <pow+0xa2>
 8010cea:	2200      	movs	r2, #0
 8010cec:	2300      	movs	r3, #0
 8010cee:	4620      	mov	r0, r4
 8010cf0:	4629      	mov	r1, r5
 8010cf2:	f7ef ff23 	bl	8000b3c <__aeabi_dcmplt>
 8010cf6:	b300      	cbz	r0, 8010d3a <pow+0xa2>
 8010cf8:	f7fa fe6a 	bl	800b9d0 <__errno>
 8010cfc:	2322      	movs	r3, #34	; 0x22
 8010cfe:	e01b      	b.n	8010d38 <pow+0xa0>
 8010d00:	ec47 6b10 	vmov	d0, r6, r7
 8010d04:	f001 fd81 	bl	801280a <finite>
 8010d08:	b9e0      	cbnz	r0, 8010d44 <pow+0xac>
 8010d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8010d0e:	eef0 0a68 	vmov.f32	s1, s17
 8010d12:	f001 fd7a 	bl	801280a <finite>
 8010d16:	b1a8      	cbz	r0, 8010d44 <pow+0xac>
 8010d18:	ec45 4b10 	vmov	d0, r4, r5
 8010d1c:	f001 fd75 	bl	801280a <finite>
 8010d20:	b180      	cbz	r0, 8010d44 <pow+0xac>
 8010d22:	4632      	mov	r2, r6
 8010d24:	463b      	mov	r3, r7
 8010d26:	4630      	mov	r0, r6
 8010d28:	4639      	mov	r1, r7
 8010d2a:	f7ef ff2f 	bl	8000b8c <__aeabi_dcmpun>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d0e2      	beq.n	8010cf8 <pow+0x60>
 8010d32:	f7fa fe4d 	bl	800b9d0 <__errno>
 8010d36:	2321      	movs	r3, #33	; 0x21
 8010d38:	6003      	str	r3, [r0, #0]
 8010d3a:	ecbd 8b02 	vpop	{d8}
 8010d3e:	ec47 6b10 	vmov	d0, r6, r7
 8010d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d44:	2200      	movs	r2, #0
 8010d46:	2300      	movs	r3, #0
 8010d48:	4630      	mov	r0, r6
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	f7ef feec 	bl	8000b28 <__aeabi_dcmpeq>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d0f2      	beq.n	8010d3a <pow+0xa2>
 8010d54:	eeb0 0a48 	vmov.f32	s0, s16
 8010d58:	eef0 0a68 	vmov.f32	s1, s17
 8010d5c:	f001 fd55 	bl	801280a <finite>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	d0ea      	beq.n	8010d3a <pow+0xa2>
 8010d64:	ec45 4b10 	vmov	d0, r4, r5
 8010d68:	f001 fd4f 	bl	801280a <finite>
 8010d6c:	e7c3      	b.n	8010cf6 <pow+0x5e>
 8010d6e:	4f01      	ldr	r7, [pc, #4]	; (8010d74 <pow+0xdc>)
 8010d70:	2600      	movs	r6, #0
 8010d72:	e7e2      	b.n	8010d3a <pow+0xa2>
 8010d74:	3ff00000 	.word	0x3ff00000

08010d78 <sqrt>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	ed2d 8b02 	vpush	{d8}
 8010d7e:	ec55 4b10 	vmov	r4, r5, d0
 8010d82:	f001 fab3 	bl	80122ec <__ieee754_sqrt>
 8010d86:	4622      	mov	r2, r4
 8010d88:	462b      	mov	r3, r5
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	eeb0 8a40 	vmov.f32	s16, s0
 8010d92:	eef0 8a60 	vmov.f32	s17, s1
 8010d96:	f7ef fef9 	bl	8000b8c <__aeabi_dcmpun>
 8010d9a:	b990      	cbnz	r0, 8010dc2 <sqrt+0x4a>
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4620      	mov	r0, r4
 8010da2:	4629      	mov	r1, r5
 8010da4:	f7ef feca 	bl	8000b3c <__aeabi_dcmplt>
 8010da8:	b158      	cbz	r0, 8010dc2 <sqrt+0x4a>
 8010daa:	f7fa fe11 	bl	800b9d0 <__errno>
 8010dae:	2321      	movs	r3, #33	; 0x21
 8010db0:	6003      	str	r3, [r0, #0]
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4610      	mov	r0, r2
 8010db8:	4619      	mov	r1, r3
 8010dba:	f7ef fd77 	bl	80008ac <__aeabi_ddiv>
 8010dbe:	ec41 0b18 	vmov	d8, r0, r1
 8010dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8010dc6:	eef0 0a68 	vmov.f32	s1, s17
 8010dca:	ecbd 8b02 	vpop	{d8}
 8010dce:	bd38      	pop	{r3, r4, r5, pc}

08010dd0 <sqrtf>:
 8010dd0:	b508      	push	{r3, lr}
 8010dd2:	ed2d 8b02 	vpush	{d8}
 8010dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8010dda:	f001 fb39 	bl	8012450 <__ieee754_sqrtf>
 8010dde:	eeb4 8a48 	vcmp.f32	s16, s16
 8010de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de6:	d60c      	bvs.n	8010e02 <sqrtf+0x32>
 8010de8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010e08 <sqrtf+0x38>
 8010dec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df4:	d505      	bpl.n	8010e02 <sqrtf+0x32>
 8010df6:	f7fa fdeb 	bl	800b9d0 <__errno>
 8010dfa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010dfe:	2321      	movs	r3, #33	; 0x21
 8010e00:	6003      	str	r3, [r0, #0]
 8010e02:	ecbd 8b02 	vpop	{d8}
 8010e06:	bd08      	pop	{r3, pc}
	...

08010e10 <__ieee754_acos>:
 8010e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e14:	ec55 4b10 	vmov	r4, r5, d0
 8010e18:	49b7      	ldr	r1, [pc, #732]	; (80110f8 <__ieee754_acos+0x2e8>)
 8010e1a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010e1e:	428b      	cmp	r3, r1
 8010e20:	dd1b      	ble.n	8010e5a <__ieee754_acos+0x4a>
 8010e22:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010e26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010e2a:	4323      	orrs	r3, r4
 8010e2c:	d106      	bne.n	8010e3c <__ieee754_acos+0x2c>
 8010e2e:	2d00      	cmp	r5, #0
 8010e30:	f300 8211 	bgt.w	8011256 <__ieee754_acos+0x446>
 8010e34:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011090 <__ieee754_acos+0x280>
 8010e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e3c:	ee10 2a10 	vmov	r2, s0
 8010e40:	462b      	mov	r3, r5
 8010e42:	ee10 0a10 	vmov	r0, s0
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fa4e 	bl	80002e8 <__aeabi_dsub>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	f7ef fd2c 	bl	80008ac <__aeabi_ddiv>
 8010e54:	ec41 0b10 	vmov	d0, r0, r1
 8010e58:	e7ee      	b.n	8010e38 <__ieee754_acos+0x28>
 8010e5a:	49a8      	ldr	r1, [pc, #672]	; (80110fc <__ieee754_acos+0x2ec>)
 8010e5c:	428b      	cmp	r3, r1
 8010e5e:	f300 8087 	bgt.w	8010f70 <__ieee754_acos+0x160>
 8010e62:	4aa7      	ldr	r2, [pc, #668]	; (8011100 <__ieee754_acos+0x2f0>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	f340 81f9 	ble.w	801125c <__ieee754_acos+0x44c>
 8010e6a:	ee10 2a10 	vmov	r2, s0
 8010e6e:	ee10 0a10 	vmov	r0, s0
 8010e72:	462b      	mov	r3, r5
 8010e74:	4629      	mov	r1, r5
 8010e76:	f7ef fbef 	bl	8000658 <__aeabi_dmul>
 8010e7a:	a387      	add	r3, pc, #540	; (adr r3, 8011098 <__ieee754_acos+0x288>)
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	4606      	mov	r6, r0
 8010e82:	460f      	mov	r7, r1
 8010e84:	f7ef fbe8 	bl	8000658 <__aeabi_dmul>
 8010e88:	a385      	add	r3, pc, #532	; (adr r3, 80110a0 <__ieee754_acos+0x290>)
 8010e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8e:	f7ef fa2d 	bl	80002ec <__adddf3>
 8010e92:	4632      	mov	r2, r6
 8010e94:	463b      	mov	r3, r7
 8010e96:	f7ef fbdf 	bl	8000658 <__aeabi_dmul>
 8010e9a:	a383      	add	r3, pc, #524	; (adr r3, 80110a8 <__ieee754_acos+0x298>)
 8010e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea0:	f7ef fa22 	bl	80002e8 <__aeabi_dsub>
 8010ea4:	4632      	mov	r2, r6
 8010ea6:	463b      	mov	r3, r7
 8010ea8:	f7ef fbd6 	bl	8000658 <__aeabi_dmul>
 8010eac:	a380      	add	r3, pc, #512	; (adr r3, 80110b0 <__ieee754_acos+0x2a0>)
 8010eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb2:	f7ef fa1b 	bl	80002ec <__adddf3>
 8010eb6:	4632      	mov	r2, r6
 8010eb8:	463b      	mov	r3, r7
 8010eba:	f7ef fbcd 	bl	8000658 <__aeabi_dmul>
 8010ebe:	a37e      	add	r3, pc, #504	; (adr r3, 80110b8 <__ieee754_acos+0x2a8>)
 8010ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec4:	f7ef fa10 	bl	80002e8 <__aeabi_dsub>
 8010ec8:	4632      	mov	r2, r6
 8010eca:	463b      	mov	r3, r7
 8010ecc:	f7ef fbc4 	bl	8000658 <__aeabi_dmul>
 8010ed0:	a37b      	add	r3, pc, #492	; (adr r3, 80110c0 <__ieee754_acos+0x2b0>)
 8010ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed6:	f7ef fa09 	bl	80002ec <__adddf3>
 8010eda:	4632      	mov	r2, r6
 8010edc:	463b      	mov	r3, r7
 8010ede:	f7ef fbbb 	bl	8000658 <__aeabi_dmul>
 8010ee2:	a379      	add	r3, pc, #484	; (adr r3, 80110c8 <__ieee754_acos+0x2b8>)
 8010ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee8:	4680      	mov	r8, r0
 8010eea:	4689      	mov	r9, r1
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef fbb2 	bl	8000658 <__aeabi_dmul>
 8010ef4:	a376      	add	r3, pc, #472	; (adr r3, 80110d0 <__ieee754_acos+0x2c0>)
 8010ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efa:	f7ef f9f5 	bl	80002e8 <__aeabi_dsub>
 8010efe:	4632      	mov	r2, r6
 8010f00:	463b      	mov	r3, r7
 8010f02:	f7ef fba9 	bl	8000658 <__aeabi_dmul>
 8010f06:	a374      	add	r3, pc, #464	; (adr r3, 80110d8 <__ieee754_acos+0x2c8>)
 8010f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0c:	f7ef f9ee 	bl	80002ec <__adddf3>
 8010f10:	4632      	mov	r2, r6
 8010f12:	463b      	mov	r3, r7
 8010f14:	f7ef fba0 	bl	8000658 <__aeabi_dmul>
 8010f18:	a371      	add	r3, pc, #452	; (adr r3, 80110e0 <__ieee754_acos+0x2d0>)
 8010f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1e:	f7ef f9e3 	bl	80002e8 <__aeabi_dsub>
 8010f22:	4632      	mov	r2, r6
 8010f24:	463b      	mov	r3, r7
 8010f26:	f7ef fb97 	bl	8000658 <__aeabi_dmul>
 8010f2a:	4b76      	ldr	r3, [pc, #472]	; (8011104 <__ieee754_acos+0x2f4>)
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f7ef f9dd 	bl	80002ec <__adddf3>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	4640      	mov	r0, r8
 8010f38:	4649      	mov	r1, r9
 8010f3a:	f7ef fcb7 	bl	80008ac <__aeabi_ddiv>
 8010f3e:	4622      	mov	r2, r4
 8010f40:	462b      	mov	r3, r5
 8010f42:	f7ef fb89 	bl	8000658 <__aeabi_dmul>
 8010f46:	4602      	mov	r2, r0
 8010f48:	460b      	mov	r3, r1
 8010f4a:	a167      	add	r1, pc, #412	; (adr r1, 80110e8 <__ieee754_acos+0x2d8>)
 8010f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f50:	f7ef f9ca 	bl	80002e8 <__aeabi_dsub>
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	4620      	mov	r0, r4
 8010f5a:	4629      	mov	r1, r5
 8010f5c:	f7ef f9c4 	bl	80002e8 <__aeabi_dsub>
 8010f60:	4602      	mov	r2, r0
 8010f62:	460b      	mov	r3, r1
 8010f64:	a162      	add	r1, pc, #392	; (adr r1, 80110f0 <__ieee754_acos+0x2e0>)
 8010f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f6a:	f7ef f9bd 	bl	80002e8 <__aeabi_dsub>
 8010f6e:	e771      	b.n	8010e54 <__ieee754_acos+0x44>
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	f280 80cb 	bge.w	801110c <__ieee754_acos+0x2fc>
 8010f76:	ee10 0a10 	vmov	r0, s0
 8010f7a:	4b62      	ldr	r3, [pc, #392]	; (8011104 <__ieee754_acos+0x2f4>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	4629      	mov	r1, r5
 8010f80:	f7ef f9b4 	bl	80002ec <__adddf3>
 8010f84:	4b60      	ldr	r3, [pc, #384]	; (8011108 <__ieee754_acos+0x2f8>)
 8010f86:	2200      	movs	r2, #0
 8010f88:	f7ef fb66 	bl	8000658 <__aeabi_dmul>
 8010f8c:	a342      	add	r3, pc, #264	; (adr r3, 8011098 <__ieee754_acos+0x288>)
 8010f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f92:	4604      	mov	r4, r0
 8010f94:	460d      	mov	r5, r1
 8010f96:	f7ef fb5f 	bl	8000658 <__aeabi_dmul>
 8010f9a:	a341      	add	r3, pc, #260	; (adr r3, 80110a0 <__ieee754_acos+0x290>)
 8010f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa0:	f7ef f9a4 	bl	80002ec <__adddf3>
 8010fa4:	4622      	mov	r2, r4
 8010fa6:	462b      	mov	r3, r5
 8010fa8:	f7ef fb56 	bl	8000658 <__aeabi_dmul>
 8010fac:	a33e      	add	r3, pc, #248	; (adr r3, 80110a8 <__ieee754_acos+0x298>)
 8010fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb2:	f7ef f999 	bl	80002e8 <__aeabi_dsub>
 8010fb6:	4622      	mov	r2, r4
 8010fb8:	462b      	mov	r3, r5
 8010fba:	f7ef fb4d 	bl	8000658 <__aeabi_dmul>
 8010fbe:	a33c      	add	r3, pc, #240	; (adr r3, 80110b0 <__ieee754_acos+0x2a0>)
 8010fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc4:	f7ef f992 	bl	80002ec <__adddf3>
 8010fc8:	4622      	mov	r2, r4
 8010fca:	462b      	mov	r3, r5
 8010fcc:	f7ef fb44 	bl	8000658 <__aeabi_dmul>
 8010fd0:	a339      	add	r3, pc, #228	; (adr r3, 80110b8 <__ieee754_acos+0x2a8>)
 8010fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd6:	f7ef f987 	bl	80002e8 <__aeabi_dsub>
 8010fda:	4622      	mov	r2, r4
 8010fdc:	462b      	mov	r3, r5
 8010fde:	f7ef fb3b 	bl	8000658 <__aeabi_dmul>
 8010fe2:	a337      	add	r3, pc, #220	; (adr r3, 80110c0 <__ieee754_acos+0x2b0>)
 8010fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe8:	f7ef f980 	bl	80002ec <__adddf3>
 8010fec:	4622      	mov	r2, r4
 8010fee:	462b      	mov	r3, r5
 8010ff0:	f7ef fb32 	bl	8000658 <__aeabi_dmul>
 8010ff4:	ec45 4b10 	vmov	d0, r4, r5
 8010ff8:	4680      	mov	r8, r0
 8010ffa:	4689      	mov	r9, r1
 8010ffc:	f001 f976 	bl	80122ec <__ieee754_sqrt>
 8011000:	a331      	add	r3, pc, #196	; (adr r3, 80110c8 <__ieee754_acos+0x2b8>)
 8011002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011006:	4620      	mov	r0, r4
 8011008:	4629      	mov	r1, r5
 801100a:	ec57 6b10 	vmov	r6, r7, d0
 801100e:	f7ef fb23 	bl	8000658 <__aeabi_dmul>
 8011012:	a32f      	add	r3, pc, #188	; (adr r3, 80110d0 <__ieee754_acos+0x2c0>)
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	f7ef f966 	bl	80002e8 <__aeabi_dsub>
 801101c:	4622      	mov	r2, r4
 801101e:	462b      	mov	r3, r5
 8011020:	f7ef fb1a 	bl	8000658 <__aeabi_dmul>
 8011024:	a32c      	add	r3, pc, #176	; (adr r3, 80110d8 <__ieee754_acos+0x2c8>)
 8011026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102a:	f7ef f95f 	bl	80002ec <__adddf3>
 801102e:	4622      	mov	r2, r4
 8011030:	462b      	mov	r3, r5
 8011032:	f7ef fb11 	bl	8000658 <__aeabi_dmul>
 8011036:	a32a      	add	r3, pc, #168	; (adr r3, 80110e0 <__ieee754_acos+0x2d0>)
 8011038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103c:	f7ef f954 	bl	80002e8 <__aeabi_dsub>
 8011040:	4622      	mov	r2, r4
 8011042:	462b      	mov	r3, r5
 8011044:	f7ef fb08 	bl	8000658 <__aeabi_dmul>
 8011048:	4b2e      	ldr	r3, [pc, #184]	; (8011104 <__ieee754_acos+0x2f4>)
 801104a:	2200      	movs	r2, #0
 801104c:	f7ef f94e 	bl	80002ec <__adddf3>
 8011050:	4602      	mov	r2, r0
 8011052:	460b      	mov	r3, r1
 8011054:	4640      	mov	r0, r8
 8011056:	4649      	mov	r1, r9
 8011058:	f7ef fc28 	bl	80008ac <__aeabi_ddiv>
 801105c:	4632      	mov	r2, r6
 801105e:	463b      	mov	r3, r7
 8011060:	f7ef fafa 	bl	8000658 <__aeabi_dmul>
 8011064:	a320      	add	r3, pc, #128	; (adr r3, 80110e8 <__ieee754_acos+0x2d8>)
 8011066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106a:	f7ef f93d 	bl	80002e8 <__aeabi_dsub>
 801106e:	4632      	mov	r2, r6
 8011070:	463b      	mov	r3, r7
 8011072:	f7ef f93b 	bl	80002ec <__adddf3>
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	f7ef f937 	bl	80002ec <__adddf3>
 801107e:	4602      	mov	r2, r0
 8011080:	460b      	mov	r3, r1
 8011082:	a103      	add	r1, pc, #12	; (adr r1, 8011090 <__ieee754_acos+0x280>)
 8011084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011088:	e76f      	b.n	8010f6a <__ieee754_acos+0x15a>
 801108a:	bf00      	nop
 801108c:	f3af 8000 	nop.w
 8011090:	54442d18 	.word	0x54442d18
 8011094:	400921fb 	.word	0x400921fb
 8011098:	0dfdf709 	.word	0x0dfdf709
 801109c:	3f023de1 	.word	0x3f023de1
 80110a0:	7501b288 	.word	0x7501b288
 80110a4:	3f49efe0 	.word	0x3f49efe0
 80110a8:	b5688f3b 	.word	0xb5688f3b
 80110ac:	3fa48228 	.word	0x3fa48228
 80110b0:	0e884455 	.word	0x0e884455
 80110b4:	3fc9c155 	.word	0x3fc9c155
 80110b8:	03eb6f7d 	.word	0x03eb6f7d
 80110bc:	3fd4d612 	.word	0x3fd4d612
 80110c0:	55555555 	.word	0x55555555
 80110c4:	3fc55555 	.word	0x3fc55555
 80110c8:	b12e9282 	.word	0xb12e9282
 80110cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80110d0:	1b8d0159 	.word	0x1b8d0159
 80110d4:	3fe6066c 	.word	0x3fe6066c
 80110d8:	9c598ac8 	.word	0x9c598ac8
 80110dc:	40002ae5 	.word	0x40002ae5
 80110e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80110e4:	40033a27 	.word	0x40033a27
 80110e8:	33145c07 	.word	0x33145c07
 80110ec:	3c91a626 	.word	0x3c91a626
 80110f0:	54442d18 	.word	0x54442d18
 80110f4:	3ff921fb 	.word	0x3ff921fb
 80110f8:	3fefffff 	.word	0x3fefffff
 80110fc:	3fdfffff 	.word	0x3fdfffff
 8011100:	3c600000 	.word	0x3c600000
 8011104:	3ff00000 	.word	0x3ff00000
 8011108:	3fe00000 	.word	0x3fe00000
 801110c:	ee10 2a10 	vmov	r2, s0
 8011110:	462b      	mov	r3, r5
 8011112:	496d      	ldr	r1, [pc, #436]	; (80112c8 <__ieee754_acos+0x4b8>)
 8011114:	2000      	movs	r0, #0
 8011116:	f7ef f8e7 	bl	80002e8 <__aeabi_dsub>
 801111a:	4b6c      	ldr	r3, [pc, #432]	; (80112cc <__ieee754_acos+0x4bc>)
 801111c:	2200      	movs	r2, #0
 801111e:	f7ef fa9b 	bl	8000658 <__aeabi_dmul>
 8011122:	4604      	mov	r4, r0
 8011124:	460d      	mov	r5, r1
 8011126:	ec45 4b10 	vmov	d0, r4, r5
 801112a:	f001 f8df 	bl	80122ec <__ieee754_sqrt>
 801112e:	a34e      	add	r3, pc, #312	; (adr r3, 8011268 <__ieee754_acos+0x458>)
 8011130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011134:	4620      	mov	r0, r4
 8011136:	4629      	mov	r1, r5
 8011138:	ec59 8b10 	vmov	r8, r9, d0
 801113c:	f7ef fa8c 	bl	8000658 <__aeabi_dmul>
 8011140:	a34b      	add	r3, pc, #300	; (adr r3, 8011270 <__ieee754_acos+0x460>)
 8011142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011146:	f7ef f8d1 	bl	80002ec <__adddf3>
 801114a:	4622      	mov	r2, r4
 801114c:	462b      	mov	r3, r5
 801114e:	f7ef fa83 	bl	8000658 <__aeabi_dmul>
 8011152:	a349      	add	r3, pc, #292	; (adr r3, 8011278 <__ieee754_acos+0x468>)
 8011154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011158:	f7ef f8c6 	bl	80002e8 <__aeabi_dsub>
 801115c:	4622      	mov	r2, r4
 801115e:	462b      	mov	r3, r5
 8011160:	f7ef fa7a 	bl	8000658 <__aeabi_dmul>
 8011164:	a346      	add	r3, pc, #280	; (adr r3, 8011280 <__ieee754_acos+0x470>)
 8011166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116a:	f7ef f8bf 	bl	80002ec <__adddf3>
 801116e:	4622      	mov	r2, r4
 8011170:	462b      	mov	r3, r5
 8011172:	f7ef fa71 	bl	8000658 <__aeabi_dmul>
 8011176:	a344      	add	r3, pc, #272	; (adr r3, 8011288 <__ieee754_acos+0x478>)
 8011178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117c:	f7ef f8b4 	bl	80002e8 <__aeabi_dsub>
 8011180:	4622      	mov	r2, r4
 8011182:	462b      	mov	r3, r5
 8011184:	f7ef fa68 	bl	8000658 <__aeabi_dmul>
 8011188:	a341      	add	r3, pc, #260	; (adr r3, 8011290 <__ieee754_acos+0x480>)
 801118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118e:	f7ef f8ad 	bl	80002ec <__adddf3>
 8011192:	4622      	mov	r2, r4
 8011194:	462b      	mov	r3, r5
 8011196:	f7ef fa5f 	bl	8000658 <__aeabi_dmul>
 801119a:	a33f      	add	r3, pc, #252	; (adr r3, 8011298 <__ieee754_acos+0x488>)
 801119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a0:	4682      	mov	sl, r0
 80111a2:	468b      	mov	fp, r1
 80111a4:	4620      	mov	r0, r4
 80111a6:	4629      	mov	r1, r5
 80111a8:	f7ef fa56 	bl	8000658 <__aeabi_dmul>
 80111ac:	a33c      	add	r3, pc, #240	; (adr r3, 80112a0 <__ieee754_acos+0x490>)
 80111ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b2:	f7ef f899 	bl	80002e8 <__aeabi_dsub>
 80111b6:	4622      	mov	r2, r4
 80111b8:	462b      	mov	r3, r5
 80111ba:	f7ef fa4d 	bl	8000658 <__aeabi_dmul>
 80111be:	a33a      	add	r3, pc, #232	; (adr r3, 80112a8 <__ieee754_acos+0x498>)
 80111c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c4:	f7ef f892 	bl	80002ec <__adddf3>
 80111c8:	4622      	mov	r2, r4
 80111ca:	462b      	mov	r3, r5
 80111cc:	f7ef fa44 	bl	8000658 <__aeabi_dmul>
 80111d0:	a337      	add	r3, pc, #220	; (adr r3, 80112b0 <__ieee754_acos+0x4a0>)
 80111d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d6:	f7ef f887 	bl	80002e8 <__aeabi_dsub>
 80111da:	4622      	mov	r2, r4
 80111dc:	462b      	mov	r3, r5
 80111de:	f7ef fa3b 	bl	8000658 <__aeabi_dmul>
 80111e2:	4b39      	ldr	r3, [pc, #228]	; (80112c8 <__ieee754_acos+0x4b8>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	f7ef f881 	bl	80002ec <__adddf3>
 80111ea:	4602      	mov	r2, r0
 80111ec:	460b      	mov	r3, r1
 80111ee:	4650      	mov	r0, sl
 80111f0:	4659      	mov	r1, fp
 80111f2:	f7ef fb5b 	bl	80008ac <__aeabi_ddiv>
 80111f6:	4642      	mov	r2, r8
 80111f8:	464b      	mov	r3, r9
 80111fa:	f7ef fa2d 	bl	8000658 <__aeabi_dmul>
 80111fe:	2600      	movs	r6, #0
 8011200:	4682      	mov	sl, r0
 8011202:	468b      	mov	fp, r1
 8011204:	4632      	mov	r2, r6
 8011206:	464b      	mov	r3, r9
 8011208:	4630      	mov	r0, r6
 801120a:	4649      	mov	r1, r9
 801120c:	f7ef fa24 	bl	8000658 <__aeabi_dmul>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	4620      	mov	r0, r4
 8011216:	4629      	mov	r1, r5
 8011218:	f7ef f866 	bl	80002e8 <__aeabi_dsub>
 801121c:	4632      	mov	r2, r6
 801121e:	4604      	mov	r4, r0
 8011220:	460d      	mov	r5, r1
 8011222:	464b      	mov	r3, r9
 8011224:	4640      	mov	r0, r8
 8011226:	4649      	mov	r1, r9
 8011228:	f7ef f860 	bl	80002ec <__adddf3>
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	4620      	mov	r0, r4
 8011232:	4629      	mov	r1, r5
 8011234:	f7ef fb3a 	bl	80008ac <__aeabi_ddiv>
 8011238:	4602      	mov	r2, r0
 801123a:	460b      	mov	r3, r1
 801123c:	4650      	mov	r0, sl
 801123e:	4659      	mov	r1, fp
 8011240:	f7ef f854 	bl	80002ec <__adddf3>
 8011244:	4632      	mov	r2, r6
 8011246:	464b      	mov	r3, r9
 8011248:	f7ef f850 	bl	80002ec <__adddf3>
 801124c:	4602      	mov	r2, r0
 801124e:	460b      	mov	r3, r1
 8011250:	f7ef f84c 	bl	80002ec <__adddf3>
 8011254:	e5fe      	b.n	8010e54 <__ieee754_acos+0x44>
 8011256:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80112b8 <__ieee754_acos+0x4a8>
 801125a:	e5ed      	b.n	8010e38 <__ieee754_acos+0x28>
 801125c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80112c0 <__ieee754_acos+0x4b0>
 8011260:	e5ea      	b.n	8010e38 <__ieee754_acos+0x28>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	0dfdf709 	.word	0x0dfdf709
 801126c:	3f023de1 	.word	0x3f023de1
 8011270:	7501b288 	.word	0x7501b288
 8011274:	3f49efe0 	.word	0x3f49efe0
 8011278:	b5688f3b 	.word	0xb5688f3b
 801127c:	3fa48228 	.word	0x3fa48228
 8011280:	0e884455 	.word	0x0e884455
 8011284:	3fc9c155 	.word	0x3fc9c155
 8011288:	03eb6f7d 	.word	0x03eb6f7d
 801128c:	3fd4d612 	.word	0x3fd4d612
 8011290:	55555555 	.word	0x55555555
 8011294:	3fc55555 	.word	0x3fc55555
 8011298:	b12e9282 	.word	0xb12e9282
 801129c:	3fb3b8c5 	.word	0x3fb3b8c5
 80112a0:	1b8d0159 	.word	0x1b8d0159
 80112a4:	3fe6066c 	.word	0x3fe6066c
 80112a8:	9c598ac8 	.word	0x9c598ac8
 80112ac:	40002ae5 	.word	0x40002ae5
 80112b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80112b4:	40033a27 	.word	0x40033a27
	...
 80112c0:	54442d18 	.word	0x54442d18
 80112c4:	3ff921fb 	.word	0x3ff921fb
 80112c8:	3ff00000 	.word	0x3ff00000
 80112cc:	3fe00000 	.word	0x3fe00000

080112d0 <__ieee754_asin>:
 80112d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d4:	ed2d 8b04 	vpush	{d8-d9}
 80112d8:	ec55 4b10 	vmov	r4, r5, d0
 80112dc:	4bcc      	ldr	r3, [pc, #816]	; (8011610 <__ieee754_asin+0x340>)
 80112de:	b083      	sub	sp, #12
 80112e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80112e4:	4598      	cmp	r8, r3
 80112e6:	9501      	str	r5, [sp, #4]
 80112e8:	dd35      	ble.n	8011356 <__ieee754_asin+0x86>
 80112ea:	ee10 3a10 	vmov	r3, s0
 80112ee:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80112f2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80112f6:	ea58 0303 	orrs.w	r3, r8, r3
 80112fa:	d117      	bne.n	801132c <__ieee754_asin+0x5c>
 80112fc:	a3aa      	add	r3, pc, #680	; (adr r3, 80115a8 <__ieee754_asin+0x2d8>)
 80112fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011302:	ee10 0a10 	vmov	r0, s0
 8011306:	4629      	mov	r1, r5
 8011308:	f7ef f9a6 	bl	8000658 <__aeabi_dmul>
 801130c:	a3a8      	add	r3, pc, #672	; (adr r3, 80115b0 <__ieee754_asin+0x2e0>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	4606      	mov	r6, r0
 8011314:	460f      	mov	r7, r1
 8011316:	4620      	mov	r0, r4
 8011318:	4629      	mov	r1, r5
 801131a:	f7ef f99d 	bl	8000658 <__aeabi_dmul>
 801131e:	4602      	mov	r2, r0
 8011320:	460b      	mov	r3, r1
 8011322:	4630      	mov	r0, r6
 8011324:	4639      	mov	r1, r7
 8011326:	f7ee ffe1 	bl	80002ec <__adddf3>
 801132a:	e00b      	b.n	8011344 <__ieee754_asin+0x74>
 801132c:	ee10 2a10 	vmov	r2, s0
 8011330:	462b      	mov	r3, r5
 8011332:	ee10 0a10 	vmov	r0, s0
 8011336:	4629      	mov	r1, r5
 8011338:	f7ee ffd6 	bl	80002e8 <__aeabi_dsub>
 801133c:	4602      	mov	r2, r0
 801133e:	460b      	mov	r3, r1
 8011340:	f7ef fab4 	bl	80008ac <__aeabi_ddiv>
 8011344:	4604      	mov	r4, r0
 8011346:	460d      	mov	r5, r1
 8011348:	ec45 4b10 	vmov	d0, r4, r5
 801134c:	b003      	add	sp, #12
 801134e:	ecbd 8b04 	vpop	{d8-d9}
 8011352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011356:	4baf      	ldr	r3, [pc, #700]	; (8011614 <__ieee754_asin+0x344>)
 8011358:	4598      	cmp	r8, r3
 801135a:	dc11      	bgt.n	8011380 <__ieee754_asin+0xb0>
 801135c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011360:	f280 80ae 	bge.w	80114c0 <__ieee754_asin+0x1f0>
 8011364:	a394      	add	r3, pc, #592	; (adr r3, 80115b8 <__ieee754_asin+0x2e8>)
 8011366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136a:	ee10 0a10 	vmov	r0, s0
 801136e:	4629      	mov	r1, r5
 8011370:	f7ee ffbc 	bl	80002ec <__adddf3>
 8011374:	4ba8      	ldr	r3, [pc, #672]	; (8011618 <__ieee754_asin+0x348>)
 8011376:	2200      	movs	r2, #0
 8011378:	f7ef fbfe 	bl	8000b78 <__aeabi_dcmpgt>
 801137c:	2800      	cmp	r0, #0
 801137e:	d1e3      	bne.n	8011348 <__ieee754_asin+0x78>
 8011380:	ec45 4b10 	vmov	d0, r4, r5
 8011384:	f001 fa38 	bl	80127f8 <fabs>
 8011388:	49a3      	ldr	r1, [pc, #652]	; (8011618 <__ieee754_asin+0x348>)
 801138a:	ec53 2b10 	vmov	r2, r3, d0
 801138e:	2000      	movs	r0, #0
 8011390:	f7ee ffaa 	bl	80002e8 <__aeabi_dsub>
 8011394:	4ba1      	ldr	r3, [pc, #644]	; (801161c <__ieee754_asin+0x34c>)
 8011396:	2200      	movs	r2, #0
 8011398:	f7ef f95e 	bl	8000658 <__aeabi_dmul>
 801139c:	a388      	add	r3, pc, #544	; (adr r3, 80115c0 <__ieee754_asin+0x2f0>)
 801139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a2:	4604      	mov	r4, r0
 80113a4:	460d      	mov	r5, r1
 80113a6:	f7ef f957 	bl	8000658 <__aeabi_dmul>
 80113aa:	a387      	add	r3, pc, #540	; (adr r3, 80115c8 <__ieee754_asin+0x2f8>)
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	f7ee ff9c 	bl	80002ec <__adddf3>
 80113b4:	4622      	mov	r2, r4
 80113b6:	462b      	mov	r3, r5
 80113b8:	f7ef f94e 	bl	8000658 <__aeabi_dmul>
 80113bc:	a384      	add	r3, pc, #528	; (adr r3, 80115d0 <__ieee754_asin+0x300>)
 80113be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c2:	f7ee ff91 	bl	80002e8 <__aeabi_dsub>
 80113c6:	4622      	mov	r2, r4
 80113c8:	462b      	mov	r3, r5
 80113ca:	f7ef f945 	bl	8000658 <__aeabi_dmul>
 80113ce:	a382      	add	r3, pc, #520	; (adr r3, 80115d8 <__ieee754_asin+0x308>)
 80113d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d4:	f7ee ff8a 	bl	80002ec <__adddf3>
 80113d8:	4622      	mov	r2, r4
 80113da:	462b      	mov	r3, r5
 80113dc:	f7ef f93c 	bl	8000658 <__aeabi_dmul>
 80113e0:	a37f      	add	r3, pc, #508	; (adr r3, 80115e0 <__ieee754_asin+0x310>)
 80113e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e6:	f7ee ff7f 	bl	80002e8 <__aeabi_dsub>
 80113ea:	4622      	mov	r2, r4
 80113ec:	462b      	mov	r3, r5
 80113ee:	f7ef f933 	bl	8000658 <__aeabi_dmul>
 80113f2:	a37d      	add	r3, pc, #500	; (adr r3, 80115e8 <__ieee754_asin+0x318>)
 80113f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f8:	f7ee ff78 	bl	80002ec <__adddf3>
 80113fc:	4622      	mov	r2, r4
 80113fe:	462b      	mov	r3, r5
 8011400:	f7ef f92a 	bl	8000658 <__aeabi_dmul>
 8011404:	a37a      	add	r3, pc, #488	; (adr r3, 80115f0 <__ieee754_asin+0x320>)
 8011406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140a:	ec41 0b18 	vmov	d8, r0, r1
 801140e:	4620      	mov	r0, r4
 8011410:	4629      	mov	r1, r5
 8011412:	f7ef f921 	bl	8000658 <__aeabi_dmul>
 8011416:	a378      	add	r3, pc, #480	; (adr r3, 80115f8 <__ieee754_asin+0x328>)
 8011418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141c:	f7ee ff64 	bl	80002e8 <__aeabi_dsub>
 8011420:	4622      	mov	r2, r4
 8011422:	462b      	mov	r3, r5
 8011424:	f7ef f918 	bl	8000658 <__aeabi_dmul>
 8011428:	a375      	add	r3, pc, #468	; (adr r3, 8011600 <__ieee754_asin+0x330>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	f7ee ff5d 	bl	80002ec <__adddf3>
 8011432:	4622      	mov	r2, r4
 8011434:	462b      	mov	r3, r5
 8011436:	f7ef f90f 	bl	8000658 <__aeabi_dmul>
 801143a:	a373      	add	r3, pc, #460	; (adr r3, 8011608 <__ieee754_asin+0x338>)
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	f7ee ff52 	bl	80002e8 <__aeabi_dsub>
 8011444:	4622      	mov	r2, r4
 8011446:	462b      	mov	r3, r5
 8011448:	f7ef f906 	bl	8000658 <__aeabi_dmul>
 801144c:	4b72      	ldr	r3, [pc, #456]	; (8011618 <__ieee754_asin+0x348>)
 801144e:	2200      	movs	r2, #0
 8011450:	f7ee ff4c 	bl	80002ec <__adddf3>
 8011454:	ec45 4b10 	vmov	d0, r4, r5
 8011458:	4606      	mov	r6, r0
 801145a:	460f      	mov	r7, r1
 801145c:	f000 ff46 	bl	80122ec <__ieee754_sqrt>
 8011460:	4b6f      	ldr	r3, [pc, #444]	; (8011620 <__ieee754_asin+0x350>)
 8011462:	4598      	cmp	r8, r3
 8011464:	ec5b ab10 	vmov	sl, fp, d0
 8011468:	f340 80dc 	ble.w	8011624 <__ieee754_asin+0x354>
 801146c:	4632      	mov	r2, r6
 801146e:	463b      	mov	r3, r7
 8011470:	ec51 0b18 	vmov	r0, r1, d8
 8011474:	f7ef fa1a 	bl	80008ac <__aeabi_ddiv>
 8011478:	4652      	mov	r2, sl
 801147a:	465b      	mov	r3, fp
 801147c:	f7ef f8ec 	bl	8000658 <__aeabi_dmul>
 8011480:	4652      	mov	r2, sl
 8011482:	465b      	mov	r3, fp
 8011484:	f7ee ff32 	bl	80002ec <__adddf3>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	f7ee ff2e 	bl	80002ec <__adddf3>
 8011490:	a347      	add	r3, pc, #284	; (adr r3, 80115b0 <__ieee754_asin+0x2e0>)
 8011492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011496:	f7ee ff27 	bl	80002e8 <__aeabi_dsub>
 801149a:	4602      	mov	r2, r0
 801149c:	460b      	mov	r3, r1
 801149e:	a142      	add	r1, pc, #264	; (adr r1, 80115a8 <__ieee754_asin+0x2d8>)
 80114a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114a4:	f7ee ff20 	bl	80002e8 <__aeabi_dsub>
 80114a8:	9b01      	ldr	r3, [sp, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	bfdc      	itt	le
 80114ae:	4602      	movle	r2, r0
 80114b0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80114b4:	4604      	mov	r4, r0
 80114b6:	460d      	mov	r5, r1
 80114b8:	bfdc      	itt	le
 80114ba:	4614      	movle	r4, r2
 80114bc:	461d      	movle	r5, r3
 80114be:	e743      	b.n	8011348 <__ieee754_asin+0x78>
 80114c0:	ee10 2a10 	vmov	r2, s0
 80114c4:	ee10 0a10 	vmov	r0, s0
 80114c8:	462b      	mov	r3, r5
 80114ca:	4629      	mov	r1, r5
 80114cc:	f7ef f8c4 	bl	8000658 <__aeabi_dmul>
 80114d0:	a33b      	add	r3, pc, #236	; (adr r3, 80115c0 <__ieee754_asin+0x2f0>)
 80114d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d6:	4606      	mov	r6, r0
 80114d8:	460f      	mov	r7, r1
 80114da:	f7ef f8bd 	bl	8000658 <__aeabi_dmul>
 80114de:	a33a      	add	r3, pc, #232	; (adr r3, 80115c8 <__ieee754_asin+0x2f8>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	f7ee ff02 	bl	80002ec <__adddf3>
 80114e8:	4632      	mov	r2, r6
 80114ea:	463b      	mov	r3, r7
 80114ec:	f7ef f8b4 	bl	8000658 <__aeabi_dmul>
 80114f0:	a337      	add	r3, pc, #220	; (adr r3, 80115d0 <__ieee754_asin+0x300>)
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	f7ee fef7 	bl	80002e8 <__aeabi_dsub>
 80114fa:	4632      	mov	r2, r6
 80114fc:	463b      	mov	r3, r7
 80114fe:	f7ef f8ab 	bl	8000658 <__aeabi_dmul>
 8011502:	a335      	add	r3, pc, #212	; (adr r3, 80115d8 <__ieee754_asin+0x308>)
 8011504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011508:	f7ee fef0 	bl	80002ec <__adddf3>
 801150c:	4632      	mov	r2, r6
 801150e:	463b      	mov	r3, r7
 8011510:	f7ef f8a2 	bl	8000658 <__aeabi_dmul>
 8011514:	a332      	add	r3, pc, #200	; (adr r3, 80115e0 <__ieee754_asin+0x310>)
 8011516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151a:	f7ee fee5 	bl	80002e8 <__aeabi_dsub>
 801151e:	4632      	mov	r2, r6
 8011520:	463b      	mov	r3, r7
 8011522:	f7ef f899 	bl	8000658 <__aeabi_dmul>
 8011526:	a330      	add	r3, pc, #192	; (adr r3, 80115e8 <__ieee754_asin+0x318>)
 8011528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152c:	f7ee fede 	bl	80002ec <__adddf3>
 8011530:	4632      	mov	r2, r6
 8011532:	463b      	mov	r3, r7
 8011534:	f7ef f890 	bl	8000658 <__aeabi_dmul>
 8011538:	a32d      	add	r3, pc, #180	; (adr r3, 80115f0 <__ieee754_asin+0x320>)
 801153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153e:	4680      	mov	r8, r0
 8011540:	4689      	mov	r9, r1
 8011542:	4630      	mov	r0, r6
 8011544:	4639      	mov	r1, r7
 8011546:	f7ef f887 	bl	8000658 <__aeabi_dmul>
 801154a:	a32b      	add	r3, pc, #172	; (adr r3, 80115f8 <__ieee754_asin+0x328>)
 801154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011550:	f7ee feca 	bl	80002e8 <__aeabi_dsub>
 8011554:	4632      	mov	r2, r6
 8011556:	463b      	mov	r3, r7
 8011558:	f7ef f87e 	bl	8000658 <__aeabi_dmul>
 801155c:	a328      	add	r3, pc, #160	; (adr r3, 8011600 <__ieee754_asin+0x330>)
 801155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011562:	f7ee fec3 	bl	80002ec <__adddf3>
 8011566:	4632      	mov	r2, r6
 8011568:	463b      	mov	r3, r7
 801156a:	f7ef f875 	bl	8000658 <__aeabi_dmul>
 801156e:	a326      	add	r3, pc, #152	; (adr r3, 8011608 <__ieee754_asin+0x338>)
 8011570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011574:	f7ee feb8 	bl	80002e8 <__aeabi_dsub>
 8011578:	4632      	mov	r2, r6
 801157a:	463b      	mov	r3, r7
 801157c:	f7ef f86c 	bl	8000658 <__aeabi_dmul>
 8011580:	4b25      	ldr	r3, [pc, #148]	; (8011618 <__ieee754_asin+0x348>)
 8011582:	2200      	movs	r2, #0
 8011584:	f7ee feb2 	bl	80002ec <__adddf3>
 8011588:	4602      	mov	r2, r0
 801158a:	460b      	mov	r3, r1
 801158c:	4640      	mov	r0, r8
 801158e:	4649      	mov	r1, r9
 8011590:	f7ef f98c 	bl	80008ac <__aeabi_ddiv>
 8011594:	4622      	mov	r2, r4
 8011596:	462b      	mov	r3, r5
 8011598:	f7ef f85e 	bl	8000658 <__aeabi_dmul>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	4620      	mov	r0, r4
 80115a2:	4629      	mov	r1, r5
 80115a4:	e6bf      	b.n	8011326 <__ieee754_asin+0x56>
 80115a6:	bf00      	nop
 80115a8:	54442d18 	.word	0x54442d18
 80115ac:	3ff921fb 	.word	0x3ff921fb
 80115b0:	33145c07 	.word	0x33145c07
 80115b4:	3c91a626 	.word	0x3c91a626
 80115b8:	8800759c 	.word	0x8800759c
 80115bc:	7e37e43c 	.word	0x7e37e43c
 80115c0:	0dfdf709 	.word	0x0dfdf709
 80115c4:	3f023de1 	.word	0x3f023de1
 80115c8:	7501b288 	.word	0x7501b288
 80115cc:	3f49efe0 	.word	0x3f49efe0
 80115d0:	b5688f3b 	.word	0xb5688f3b
 80115d4:	3fa48228 	.word	0x3fa48228
 80115d8:	0e884455 	.word	0x0e884455
 80115dc:	3fc9c155 	.word	0x3fc9c155
 80115e0:	03eb6f7d 	.word	0x03eb6f7d
 80115e4:	3fd4d612 	.word	0x3fd4d612
 80115e8:	55555555 	.word	0x55555555
 80115ec:	3fc55555 	.word	0x3fc55555
 80115f0:	b12e9282 	.word	0xb12e9282
 80115f4:	3fb3b8c5 	.word	0x3fb3b8c5
 80115f8:	1b8d0159 	.word	0x1b8d0159
 80115fc:	3fe6066c 	.word	0x3fe6066c
 8011600:	9c598ac8 	.word	0x9c598ac8
 8011604:	40002ae5 	.word	0x40002ae5
 8011608:	1c8a2d4b 	.word	0x1c8a2d4b
 801160c:	40033a27 	.word	0x40033a27
 8011610:	3fefffff 	.word	0x3fefffff
 8011614:	3fdfffff 	.word	0x3fdfffff
 8011618:	3ff00000 	.word	0x3ff00000
 801161c:	3fe00000 	.word	0x3fe00000
 8011620:	3fef3332 	.word	0x3fef3332
 8011624:	ee10 2a10 	vmov	r2, s0
 8011628:	ee10 0a10 	vmov	r0, s0
 801162c:	465b      	mov	r3, fp
 801162e:	4659      	mov	r1, fp
 8011630:	f7ee fe5c 	bl	80002ec <__adddf3>
 8011634:	4632      	mov	r2, r6
 8011636:	463b      	mov	r3, r7
 8011638:	ec41 0b19 	vmov	d9, r0, r1
 801163c:	ec51 0b18 	vmov	r0, r1, d8
 8011640:	f7ef f934 	bl	80008ac <__aeabi_ddiv>
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	ec51 0b19 	vmov	r0, r1, d9
 801164c:	f7ef f804 	bl	8000658 <__aeabi_dmul>
 8011650:	f04f 0800 	mov.w	r8, #0
 8011654:	4606      	mov	r6, r0
 8011656:	460f      	mov	r7, r1
 8011658:	4642      	mov	r2, r8
 801165a:	465b      	mov	r3, fp
 801165c:	4640      	mov	r0, r8
 801165e:	4659      	mov	r1, fp
 8011660:	f7ee fffa 	bl	8000658 <__aeabi_dmul>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4620      	mov	r0, r4
 801166a:	4629      	mov	r1, r5
 801166c:	f7ee fe3c 	bl	80002e8 <__aeabi_dsub>
 8011670:	4642      	mov	r2, r8
 8011672:	4604      	mov	r4, r0
 8011674:	460d      	mov	r5, r1
 8011676:	465b      	mov	r3, fp
 8011678:	4650      	mov	r0, sl
 801167a:	4659      	mov	r1, fp
 801167c:	f7ee fe36 	bl	80002ec <__adddf3>
 8011680:	4602      	mov	r2, r0
 8011682:	460b      	mov	r3, r1
 8011684:	4620      	mov	r0, r4
 8011686:	4629      	mov	r1, r5
 8011688:	f7ef f910 	bl	80008ac <__aeabi_ddiv>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	f7ee fe2c 	bl	80002ec <__adddf3>
 8011694:	4602      	mov	r2, r0
 8011696:	460b      	mov	r3, r1
 8011698:	a113      	add	r1, pc, #76	; (adr r1, 80116e8 <__ieee754_asin+0x418>)
 801169a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801169e:	f7ee fe23 	bl	80002e8 <__aeabi_dsub>
 80116a2:	4602      	mov	r2, r0
 80116a4:	460b      	mov	r3, r1
 80116a6:	4630      	mov	r0, r6
 80116a8:	4639      	mov	r1, r7
 80116aa:	f7ee fe1d 	bl	80002e8 <__aeabi_dsub>
 80116ae:	4642      	mov	r2, r8
 80116b0:	4604      	mov	r4, r0
 80116b2:	460d      	mov	r5, r1
 80116b4:	465b      	mov	r3, fp
 80116b6:	4640      	mov	r0, r8
 80116b8:	4659      	mov	r1, fp
 80116ba:	f7ee fe17 	bl	80002ec <__adddf3>
 80116be:	4602      	mov	r2, r0
 80116c0:	460b      	mov	r3, r1
 80116c2:	a10b      	add	r1, pc, #44	; (adr r1, 80116f0 <__ieee754_asin+0x420>)
 80116c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116c8:	f7ee fe0e 	bl	80002e8 <__aeabi_dsub>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4620      	mov	r0, r4
 80116d2:	4629      	mov	r1, r5
 80116d4:	f7ee fe08 	bl	80002e8 <__aeabi_dsub>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	a104      	add	r1, pc, #16	; (adr r1, 80116f0 <__ieee754_asin+0x420>)
 80116de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116e2:	e6df      	b.n	80114a4 <__ieee754_asin+0x1d4>
 80116e4:	f3af 8000 	nop.w
 80116e8:	33145c07 	.word	0x33145c07
 80116ec:	3c91a626 	.word	0x3c91a626
 80116f0:	54442d18 	.word	0x54442d18
 80116f4:	3fe921fb 	.word	0x3fe921fb

080116f8 <__ieee754_atan2>:
 80116f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116fc:	ec57 6b11 	vmov	r6, r7, d1
 8011700:	4273      	negs	r3, r6
 8011702:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011888 <__ieee754_atan2+0x190>
 8011706:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801170a:	4333      	orrs	r3, r6
 801170c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011710:	4573      	cmp	r3, lr
 8011712:	ec51 0b10 	vmov	r0, r1, d0
 8011716:	ee11 8a10 	vmov	r8, s2
 801171a:	d80a      	bhi.n	8011732 <__ieee754_atan2+0x3a>
 801171c:	4244      	negs	r4, r0
 801171e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011722:	4304      	orrs	r4, r0
 8011724:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011728:	4574      	cmp	r4, lr
 801172a:	ee10 9a10 	vmov	r9, s0
 801172e:	468c      	mov	ip, r1
 8011730:	d907      	bls.n	8011742 <__ieee754_atan2+0x4a>
 8011732:	4632      	mov	r2, r6
 8011734:	463b      	mov	r3, r7
 8011736:	f7ee fdd9 	bl	80002ec <__adddf3>
 801173a:	ec41 0b10 	vmov	d0, r0, r1
 801173e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011742:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011746:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801174a:	4334      	orrs	r4, r6
 801174c:	d103      	bne.n	8011756 <__ieee754_atan2+0x5e>
 801174e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011752:	f000 beb1 	b.w	80124b8 <atan>
 8011756:	17bc      	asrs	r4, r7, #30
 8011758:	f004 0402 	and.w	r4, r4, #2
 801175c:	ea53 0909 	orrs.w	r9, r3, r9
 8011760:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011764:	d107      	bne.n	8011776 <__ieee754_atan2+0x7e>
 8011766:	2c02      	cmp	r4, #2
 8011768:	d060      	beq.n	801182c <__ieee754_atan2+0x134>
 801176a:	2c03      	cmp	r4, #3
 801176c:	d1e5      	bne.n	801173a <__ieee754_atan2+0x42>
 801176e:	a142      	add	r1, pc, #264	; (adr r1, 8011878 <__ieee754_atan2+0x180>)
 8011770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011774:	e7e1      	b.n	801173a <__ieee754_atan2+0x42>
 8011776:	ea52 0808 	orrs.w	r8, r2, r8
 801177a:	d106      	bne.n	801178a <__ieee754_atan2+0x92>
 801177c:	f1bc 0f00 	cmp.w	ip, #0
 8011780:	da5f      	bge.n	8011842 <__ieee754_atan2+0x14a>
 8011782:	a13f      	add	r1, pc, #252	; (adr r1, 8011880 <__ieee754_atan2+0x188>)
 8011784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011788:	e7d7      	b.n	801173a <__ieee754_atan2+0x42>
 801178a:	4572      	cmp	r2, lr
 801178c:	d10f      	bne.n	80117ae <__ieee754_atan2+0xb6>
 801178e:	4293      	cmp	r3, r2
 8011790:	f104 34ff 	add.w	r4, r4, #4294967295
 8011794:	d107      	bne.n	80117a6 <__ieee754_atan2+0xae>
 8011796:	2c02      	cmp	r4, #2
 8011798:	d84c      	bhi.n	8011834 <__ieee754_atan2+0x13c>
 801179a:	4b35      	ldr	r3, [pc, #212]	; (8011870 <__ieee754_atan2+0x178>)
 801179c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80117a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80117a4:	e7c9      	b.n	801173a <__ieee754_atan2+0x42>
 80117a6:	2c02      	cmp	r4, #2
 80117a8:	d848      	bhi.n	801183c <__ieee754_atan2+0x144>
 80117aa:	4b32      	ldr	r3, [pc, #200]	; (8011874 <__ieee754_atan2+0x17c>)
 80117ac:	e7f6      	b.n	801179c <__ieee754_atan2+0xa4>
 80117ae:	4573      	cmp	r3, lr
 80117b0:	d0e4      	beq.n	801177c <__ieee754_atan2+0x84>
 80117b2:	1a9b      	subs	r3, r3, r2
 80117b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80117b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80117bc:	da1e      	bge.n	80117fc <__ieee754_atan2+0x104>
 80117be:	2f00      	cmp	r7, #0
 80117c0:	da01      	bge.n	80117c6 <__ieee754_atan2+0xce>
 80117c2:	323c      	adds	r2, #60	; 0x3c
 80117c4:	db1e      	blt.n	8011804 <__ieee754_atan2+0x10c>
 80117c6:	4632      	mov	r2, r6
 80117c8:	463b      	mov	r3, r7
 80117ca:	f7ef f86f 	bl	80008ac <__aeabi_ddiv>
 80117ce:	ec41 0b10 	vmov	d0, r0, r1
 80117d2:	f001 f811 	bl	80127f8 <fabs>
 80117d6:	f000 fe6f 	bl	80124b8 <atan>
 80117da:	ec51 0b10 	vmov	r0, r1, d0
 80117de:	2c01      	cmp	r4, #1
 80117e0:	d013      	beq.n	801180a <__ieee754_atan2+0x112>
 80117e2:	2c02      	cmp	r4, #2
 80117e4:	d015      	beq.n	8011812 <__ieee754_atan2+0x11a>
 80117e6:	2c00      	cmp	r4, #0
 80117e8:	d0a7      	beq.n	801173a <__ieee754_atan2+0x42>
 80117ea:	a319      	add	r3, pc, #100	; (adr r3, 8011850 <__ieee754_atan2+0x158>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	f7ee fd7a 	bl	80002e8 <__aeabi_dsub>
 80117f4:	a318      	add	r3, pc, #96	; (adr r3, 8011858 <__ieee754_atan2+0x160>)
 80117f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fa:	e014      	b.n	8011826 <__ieee754_atan2+0x12e>
 80117fc:	a118      	add	r1, pc, #96	; (adr r1, 8011860 <__ieee754_atan2+0x168>)
 80117fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011802:	e7ec      	b.n	80117de <__ieee754_atan2+0xe6>
 8011804:	2000      	movs	r0, #0
 8011806:	2100      	movs	r1, #0
 8011808:	e7e9      	b.n	80117de <__ieee754_atan2+0xe6>
 801180a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801180e:	4619      	mov	r1, r3
 8011810:	e793      	b.n	801173a <__ieee754_atan2+0x42>
 8011812:	a30f      	add	r3, pc, #60	; (adr r3, 8011850 <__ieee754_atan2+0x158>)
 8011814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011818:	f7ee fd66 	bl	80002e8 <__aeabi_dsub>
 801181c:	4602      	mov	r2, r0
 801181e:	460b      	mov	r3, r1
 8011820:	a10d      	add	r1, pc, #52	; (adr r1, 8011858 <__ieee754_atan2+0x160>)
 8011822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011826:	f7ee fd5f 	bl	80002e8 <__aeabi_dsub>
 801182a:	e786      	b.n	801173a <__ieee754_atan2+0x42>
 801182c:	a10a      	add	r1, pc, #40	; (adr r1, 8011858 <__ieee754_atan2+0x160>)
 801182e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011832:	e782      	b.n	801173a <__ieee754_atan2+0x42>
 8011834:	a10c      	add	r1, pc, #48	; (adr r1, 8011868 <__ieee754_atan2+0x170>)
 8011836:	e9d1 0100 	ldrd	r0, r1, [r1]
 801183a:	e77e      	b.n	801173a <__ieee754_atan2+0x42>
 801183c:	2000      	movs	r0, #0
 801183e:	2100      	movs	r1, #0
 8011840:	e77b      	b.n	801173a <__ieee754_atan2+0x42>
 8011842:	a107      	add	r1, pc, #28	; (adr r1, 8011860 <__ieee754_atan2+0x168>)
 8011844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011848:	e777      	b.n	801173a <__ieee754_atan2+0x42>
 801184a:	bf00      	nop
 801184c:	f3af 8000 	nop.w
 8011850:	33145c07 	.word	0x33145c07
 8011854:	3ca1a626 	.word	0x3ca1a626
 8011858:	54442d18 	.word	0x54442d18
 801185c:	400921fb 	.word	0x400921fb
 8011860:	54442d18 	.word	0x54442d18
 8011864:	3ff921fb 	.word	0x3ff921fb
 8011868:	54442d18 	.word	0x54442d18
 801186c:	3fe921fb 	.word	0x3fe921fb
 8011870:	08012eb8 	.word	0x08012eb8
 8011874:	08012ed0 	.word	0x08012ed0
 8011878:	54442d18 	.word	0x54442d18
 801187c:	c00921fb 	.word	0xc00921fb
 8011880:	54442d18 	.word	0x54442d18
 8011884:	bff921fb 	.word	0xbff921fb
 8011888:	7ff00000 	.word	0x7ff00000
 801188c:	00000000 	.word	0x00000000

08011890 <__ieee754_pow>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	ed2d 8b06 	vpush	{d8-d10}
 8011898:	b089      	sub	sp, #36	; 0x24
 801189a:	ed8d 1b00 	vstr	d1, [sp]
 801189e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80118a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80118a6:	ea58 0102 	orrs.w	r1, r8, r2
 80118aa:	ec57 6b10 	vmov	r6, r7, d0
 80118ae:	d115      	bne.n	80118dc <__ieee754_pow+0x4c>
 80118b0:	19b3      	adds	r3, r6, r6
 80118b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80118b6:	4152      	adcs	r2, r2
 80118b8:	4299      	cmp	r1, r3
 80118ba:	4b89      	ldr	r3, [pc, #548]	; (8011ae0 <__ieee754_pow+0x250>)
 80118bc:	4193      	sbcs	r3, r2
 80118be:	f080 84d2 	bcs.w	8012266 <__ieee754_pow+0x9d6>
 80118c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118c6:	4630      	mov	r0, r6
 80118c8:	4639      	mov	r1, r7
 80118ca:	f7ee fd0f 	bl	80002ec <__adddf3>
 80118ce:	ec41 0b10 	vmov	d0, r0, r1
 80118d2:	b009      	add	sp, #36	; 0x24
 80118d4:	ecbd 8b06 	vpop	{d8-d10}
 80118d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118dc:	4b81      	ldr	r3, [pc, #516]	; (8011ae4 <__ieee754_pow+0x254>)
 80118de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80118e2:	429c      	cmp	r4, r3
 80118e4:	ee10 aa10 	vmov	sl, s0
 80118e8:	463d      	mov	r5, r7
 80118ea:	dc06      	bgt.n	80118fa <__ieee754_pow+0x6a>
 80118ec:	d101      	bne.n	80118f2 <__ieee754_pow+0x62>
 80118ee:	2e00      	cmp	r6, #0
 80118f0:	d1e7      	bne.n	80118c2 <__ieee754_pow+0x32>
 80118f2:	4598      	cmp	r8, r3
 80118f4:	dc01      	bgt.n	80118fa <__ieee754_pow+0x6a>
 80118f6:	d10f      	bne.n	8011918 <__ieee754_pow+0x88>
 80118f8:	b172      	cbz	r2, 8011918 <__ieee754_pow+0x88>
 80118fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80118fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011902:	ea55 050a 	orrs.w	r5, r5, sl
 8011906:	d1dc      	bne.n	80118c2 <__ieee754_pow+0x32>
 8011908:	e9dd 3200 	ldrd	r3, r2, [sp]
 801190c:	18db      	adds	r3, r3, r3
 801190e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011912:	4152      	adcs	r2, r2
 8011914:	429d      	cmp	r5, r3
 8011916:	e7d0      	b.n	80118ba <__ieee754_pow+0x2a>
 8011918:	2d00      	cmp	r5, #0
 801191a:	da3b      	bge.n	8011994 <__ieee754_pow+0x104>
 801191c:	4b72      	ldr	r3, [pc, #456]	; (8011ae8 <__ieee754_pow+0x258>)
 801191e:	4598      	cmp	r8, r3
 8011920:	dc51      	bgt.n	80119c6 <__ieee754_pow+0x136>
 8011922:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011926:	4598      	cmp	r8, r3
 8011928:	f340 84ac 	ble.w	8012284 <__ieee754_pow+0x9f4>
 801192c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011934:	2b14      	cmp	r3, #20
 8011936:	dd0f      	ble.n	8011958 <__ieee754_pow+0xc8>
 8011938:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801193c:	fa22 f103 	lsr.w	r1, r2, r3
 8011940:	fa01 f303 	lsl.w	r3, r1, r3
 8011944:	4293      	cmp	r3, r2
 8011946:	f040 849d 	bne.w	8012284 <__ieee754_pow+0x9f4>
 801194a:	f001 0101 	and.w	r1, r1, #1
 801194e:	f1c1 0302 	rsb	r3, r1, #2
 8011952:	9304      	str	r3, [sp, #16]
 8011954:	b182      	cbz	r2, 8011978 <__ieee754_pow+0xe8>
 8011956:	e05f      	b.n	8011a18 <__ieee754_pow+0x188>
 8011958:	2a00      	cmp	r2, #0
 801195a:	d15b      	bne.n	8011a14 <__ieee754_pow+0x184>
 801195c:	f1c3 0314 	rsb	r3, r3, #20
 8011960:	fa48 f103 	asr.w	r1, r8, r3
 8011964:	fa01 f303 	lsl.w	r3, r1, r3
 8011968:	4543      	cmp	r3, r8
 801196a:	f040 8488 	bne.w	801227e <__ieee754_pow+0x9ee>
 801196e:	f001 0101 	and.w	r1, r1, #1
 8011972:	f1c1 0302 	rsb	r3, r1, #2
 8011976:	9304      	str	r3, [sp, #16]
 8011978:	4b5c      	ldr	r3, [pc, #368]	; (8011aec <__ieee754_pow+0x25c>)
 801197a:	4598      	cmp	r8, r3
 801197c:	d132      	bne.n	80119e4 <__ieee754_pow+0x154>
 801197e:	f1b9 0f00 	cmp.w	r9, #0
 8011982:	f280 8478 	bge.w	8012276 <__ieee754_pow+0x9e6>
 8011986:	4959      	ldr	r1, [pc, #356]	; (8011aec <__ieee754_pow+0x25c>)
 8011988:	4632      	mov	r2, r6
 801198a:	463b      	mov	r3, r7
 801198c:	2000      	movs	r0, #0
 801198e:	f7ee ff8d 	bl	80008ac <__aeabi_ddiv>
 8011992:	e79c      	b.n	80118ce <__ieee754_pow+0x3e>
 8011994:	2300      	movs	r3, #0
 8011996:	9304      	str	r3, [sp, #16]
 8011998:	2a00      	cmp	r2, #0
 801199a:	d13d      	bne.n	8011a18 <__ieee754_pow+0x188>
 801199c:	4b51      	ldr	r3, [pc, #324]	; (8011ae4 <__ieee754_pow+0x254>)
 801199e:	4598      	cmp	r8, r3
 80119a0:	d1ea      	bne.n	8011978 <__ieee754_pow+0xe8>
 80119a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80119a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80119aa:	ea53 030a 	orrs.w	r3, r3, sl
 80119ae:	f000 845a 	beq.w	8012266 <__ieee754_pow+0x9d6>
 80119b2:	4b4f      	ldr	r3, [pc, #316]	; (8011af0 <__ieee754_pow+0x260>)
 80119b4:	429c      	cmp	r4, r3
 80119b6:	dd08      	ble.n	80119ca <__ieee754_pow+0x13a>
 80119b8:	f1b9 0f00 	cmp.w	r9, #0
 80119bc:	f2c0 8457 	blt.w	801226e <__ieee754_pow+0x9de>
 80119c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119c4:	e783      	b.n	80118ce <__ieee754_pow+0x3e>
 80119c6:	2302      	movs	r3, #2
 80119c8:	e7e5      	b.n	8011996 <__ieee754_pow+0x106>
 80119ca:	f1b9 0f00 	cmp.w	r9, #0
 80119ce:	f04f 0000 	mov.w	r0, #0
 80119d2:	f04f 0100 	mov.w	r1, #0
 80119d6:	f6bf af7a 	bge.w	80118ce <__ieee754_pow+0x3e>
 80119da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80119de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80119e2:	e774      	b.n	80118ce <__ieee754_pow+0x3e>
 80119e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80119e8:	d106      	bne.n	80119f8 <__ieee754_pow+0x168>
 80119ea:	4632      	mov	r2, r6
 80119ec:	463b      	mov	r3, r7
 80119ee:	4630      	mov	r0, r6
 80119f0:	4639      	mov	r1, r7
 80119f2:	f7ee fe31 	bl	8000658 <__aeabi_dmul>
 80119f6:	e76a      	b.n	80118ce <__ieee754_pow+0x3e>
 80119f8:	4b3e      	ldr	r3, [pc, #248]	; (8011af4 <__ieee754_pow+0x264>)
 80119fa:	4599      	cmp	r9, r3
 80119fc:	d10c      	bne.n	8011a18 <__ieee754_pow+0x188>
 80119fe:	2d00      	cmp	r5, #0
 8011a00:	db0a      	blt.n	8011a18 <__ieee754_pow+0x188>
 8011a02:	ec47 6b10 	vmov	d0, r6, r7
 8011a06:	b009      	add	sp, #36	; 0x24
 8011a08:	ecbd 8b06 	vpop	{d8-d10}
 8011a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a10:	f000 bc6c 	b.w	80122ec <__ieee754_sqrt>
 8011a14:	2300      	movs	r3, #0
 8011a16:	9304      	str	r3, [sp, #16]
 8011a18:	ec47 6b10 	vmov	d0, r6, r7
 8011a1c:	f000 feec 	bl	80127f8 <fabs>
 8011a20:	ec51 0b10 	vmov	r0, r1, d0
 8011a24:	f1ba 0f00 	cmp.w	sl, #0
 8011a28:	d129      	bne.n	8011a7e <__ieee754_pow+0x1ee>
 8011a2a:	b124      	cbz	r4, 8011a36 <__ieee754_pow+0x1a6>
 8011a2c:	4b2f      	ldr	r3, [pc, #188]	; (8011aec <__ieee754_pow+0x25c>)
 8011a2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d123      	bne.n	8011a7e <__ieee754_pow+0x1ee>
 8011a36:	f1b9 0f00 	cmp.w	r9, #0
 8011a3a:	da05      	bge.n	8011a48 <__ieee754_pow+0x1b8>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	460b      	mov	r3, r1
 8011a40:	2000      	movs	r0, #0
 8011a42:	492a      	ldr	r1, [pc, #168]	; (8011aec <__ieee754_pow+0x25c>)
 8011a44:	f7ee ff32 	bl	80008ac <__aeabi_ddiv>
 8011a48:	2d00      	cmp	r5, #0
 8011a4a:	f6bf af40 	bge.w	80118ce <__ieee754_pow+0x3e>
 8011a4e:	9b04      	ldr	r3, [sp, #16]
 8011a50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011a54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011a58:	4323      	orrs	r3, r4
 8011a5a:	d108      	bne.n	8011a6e <__ieee754_pow+0x1de>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4610      	mov	r0, r2
 8011a62:	4619      	mov	r1, r3
 8011a64:	f7ee fc40 	bl	80002e8 <__aeabi_dsub>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	e78f      	b.n	801198e <__ieee754_pow+0xfe>
 8011a6e:	9b04      	ldr	r3, [sp, #16]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	f47f af2c 	bne.w	80118ce <__ieee754_pow+0x3e>
 8011a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	e727      	b.n	80118ce <__ieee754_pow+0x3e>
 8011a7e:	0feb      	lsrs	r3, r5, #31
 8011a80:	3b01      	subs	r3, #1
 8011a82:	9306      	str	r3, [sp, #24]
 8011a84:	9a06      	ldr	r2, [sp, #24]
 8011a86:	9b04      	ldr	r3, [sp, #16]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	d102      	bne.n	8011a92 <__ieee754_pow+0x202>
 8011a8c:	4632      	mov	r2, r6
 8011a8e:	463b      	mov	r3, r7
 8011a90:	e7e6      	b.n	8011a60 <__ieee754_pow+0x1d0>
 8011a92:	4b19      	ldr	r3, [pc, #100]	; (8011af8 <__ieee754_pow+0x268>)
 8011a94:	4598      	cmp	r8, r3
 8011a96:	f340 80fb 	ble.w	8011c90 <__ieee754_pow+0x400>
 8011a9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011a9e:	4598      	cmp	r8, r3
 8011aa0:	4b13      	ldr	r3, [pc, #76]	; (8011af0 <__ieee754_pow+0x260>)
 8011aa2:	dd0c      	ble.n	8011abe <__ieee754_pow+0x22e>
 8011aa4:	429c      	cmp	r4, r3
 8011aa6:	dc0f      	bgt.n	8011ac8 <__ieee754_pow+0x238>
 8011aa8:	f1b9 0f00 	cmp.w	r9, #0
 8011aac:	da0f      	bge.n	8011ace <__ieee754_pow+0x23e>
 8011aae:	2000      	movs	r0, #0
 8011ab0:	b009      	add	sp, #36	; 0x24
 8011ab2:	ecbd 8b06 	vpop	{d8-d10}
 8011ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aba:	f000 bcf3 	b.w	80124a4 <__math_oflow>
 8011abe:	429c      	cmp	r4, r3
 8011ac0:	dbf2      	blt.n	8011aa8 <__ieee754_pow+0x218>
 8011ac2:	4b0a      	ldr	r3, [pc, #40]	; (8011aec <__ieee754_pow+0x25c>)
 8011ac4:	429c      	cmp	r4, r3
 8011ac6:	dd19      	ble.n	8011afc <__ieee754_pow+0x26c>
 8011ac8:	f1b9 0f00 	cmp.w	r9, #0
 8011acc:	dcef      	bgt.n	8011aae <__ieee754_pow+0x21e>
 8011ace:	2000      	movs	r0, #0
 8011ad0:	b009      	add	sp, #36	; 0x24
 8011ad2:	ecbd 8b06 	vpop	{d8-d10}
 8011ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ada:	f000 bcda 	b.w	8012492 <__math_uflow>
 8011ade:	bf00      	nop
 8011ae0:	fff00000 	.word	0xfff00000
 8011ae4:	7ff00000 	.word	0x7ff00000
 8011ae8:	433fffff 	.word	0x433fffff
 8011aec:	3ff00000 	.word	0x3ff00000
 8011af0:	3fefffff 	.word	0x3fefffff
 8011af4:	3fe00000 	.word	0x3fe00000
 8011af8:	41e00000 	.word	0x41e00000
 8011afc:	4b60      	ldr	r3, [pc, #384]	; (8011c80 <__ieee754_pow+0x3f0>)
 8011afe:	2200      	movs	r2, #0
 8011b00:	f7ee fbf2 	bl	80002e8 <__aeabi_dsub>
 8011b04:	a354      	add	r3, pc, #336	; (adr r3, 8011c58 <__ieee754_pow+0x3c8>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	460d      	mov	r5, r1
 8011b0e:	f7ee fda3 	bl	8000658 <__aeabi_dmul>
 8011b12:	a353      	add	r3, pc, #332	; (adr r3, 8011c60 <__ieee754_pow+0x3d0>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	4606      	mov	r6, r0
 8011b1a:	460f      	mov	r7, r1
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	4629      	mov	r1, r5
 8011b20:	f7ee fd9a 	bl	8000658 <__aeabi_dmul>
 8011b24:	4b57      	ldr	r3, [pc, #348]	; (8011c84 <__ieee754_pow+0x3f4>)
 8011b26:	4682      	mov	sl, r0
 8011b28:	468b      	mov	fp, r1
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	4629      	mov	r1, r5
 8011b30:	f7ee fd92 	bl	8000658 <__aeabi_dmul>
 8011b34:	4602      	mov	r2, r0
 8011b36:	460b      	mov	r3, r1
 8011b38:	a14b      	add	r1, pc, #300	; (adr r1, 8011c68 <__ieee754_pow+0x3d8>)
 8011b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b3e:	f7ee fbd3 	bl	80002e8 <__aeabi_dsub>
 8011b42:	4622      	mov	r2, r4
 8011b44:	462b      	mov	r3, r5
 8011b46:	f7ee fd87 	bl	8000658 <__aeabi_dmul>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	2000      	movs	r0, #0
 8011b50:	494d      	ldr	r1, [pc, #308]	; (8011c88 <__ieee754_pow+0x3f8>)
 8011b52:	f7ee fbc9 	bl	80002e8 <__aeabi_dsub>
 8011b56:	4622      	mov	r2, r4
 8011b58:	4680      	mov	r8, r0
 8011b5a:	4689      	mov	r9, r1
 8011b5c:	462b      	mov	r3, r5
 8011b5e:	4620      	mov	r0, r4
 8011b60:	4629      	mov	r1, r5
 8011b62:	f7ee fd79 	bl	8000658 <__aeabi_dmul>
 8011b66:	4602      	mov	r2, r0
 8011b68:	460b      	mov	r3, r1
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	f7ee fd73 	bl	8000658 <__aeabi_dmul>
 8011b72:	a33f      	add	r3, pc, #252	; (adr r3, 8011c70 <__ieee754_pow+0x3e0>)
 8011b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b78:	f7ee fd6e 	bl	8000658 <__aeabi_dmul>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	4650      	mov	r0, sl
 8011b82:	4659      	mov	r1, fp
 8011b84:	f7ee fbb0 	bl	80002e8 <__aeabi_dsub>
 8011b88:	4602      	mov	r2, r0
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	4680      	mov	r8, r0
 8011b8e:	4689      	mov	r9, r1
 8011b90:	4630      	mov	r0, r6
 8011b92:	4639      	mov	r1, r7
 8011b94:	f7ee fbaa 	bl	80002ec <__adddf3>
 8011b98:	2000      	movs	r0, #0
 8011b9a:	4632      	mov	r2, r6
 8011b9c:	463b      	mov	r3, r7
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	460d      	mov	r5, r1
 8011ba2:	f7ee fba1 	bl	80002e8 <__aeabi_dsub>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4640      	mov	r0, r8
 8011bac:	4649      	mov	r1, r9
 8011bae:	f7ee fb9b 	bl	80002e8 <__aeabi_dsub>
 8011bb2:	9b04      	ldr	r3, [sp, #16]
 8011bb4:	9a06      	ldr	r2, [sp, #24]
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	4682      	mov	sl, r0
 8011bbc:	468b      	mov	fp, r1
 8011bbe:	f040 81e7 	bne.w	8011f90 <__ieee754_pow+0x700>
 8011bc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011c78 <__ieee754_pow+0x3e8>
 8011bc6:	eeb0 8a47 	vmov.f32	s16, s14
 8011bca:	eef0 8a67 	vmov.f32	s17, s15
 8011bce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011bd2:	2600      	movs	r6, #0
 8011bd4:	4632      	mov	r2, r6
 8011bd6:	463b      	mov	r3, r7
 8011bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bdc:	f7ee fb84 	bl	80002e8 <__aeabi_dsub>
 8011be0:	4622      	mov	r2, r4
 8011be2:	462b      	mov	r3, r5
 8011be4:	f7ee fd38 	bl	8000658 <__aeabi_dmul>
 8011be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bec:	4680      	mov	r8, r0
 8011bee:	4689      	mov	r9, r1
 8011bf0:	4650      	mov	r0, sl
 8011bf2:	4659      	mov	r1, fp
 8011bf4:	f7ee fd30 	bl	8000658 <__aeabi_dmul>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	4640      	mov	r0, r8
 8011bfe:	4649      	mov	r1, r9
 8011c00:	f7ee fb74 	bl	80002ec <__adddf3>
 8011c04:	4632      	mov	r2, r6
 8011c06:	463b      	mov	r3, r7
 8011c08:	4680      	mov	r8, r0
 8011c0a:	4689      	mov	r9, r1
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	4629      	mov	r1, r5
 8011c10:	f7ee fd22 	bl	8000658 <__aeabi_dmul>
 8011c14:	460b      	mov	r3, r1
 8011c16:	4604      	mov	r4, r0
 8011c18:	460d      	mov	r5, r1
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	4649      	mov	r1, r9
 8011c1e:	4640      	mov	r0, r8
 8011c20:	f7ee fb64 	bl	80002ec <__adddf3>
 8011c24:	4b19      	ldr	r3, [pc, #100]	; (8011c8c <__ieee754_pow+0x3fc>)
 8011c26:	4299      	cmp	r1, r3
 8011c28:	ec45 4b19 	vmov	d9, r4, r5
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	460f      	mov	r7, r1
 8011c30:	468b      	mov	fp, r1
 8011c32:	f340 82f1 	ble.w	8012218 <__ieee754_pow+0x988>
 8011c36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011c3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011c3e:	4303      	orrs	r3, r0
 8011c40:	f000 81e4 	beq.w	801200c <__ieee754_pow+0x77c>
 8011c44:	ec51 0b18 	vmov	r0, r1, d8
 8011c48:	2200      	movs	r2, #0
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f7ee ff76 	bl	8000b3c <__aeabi_dcmplt>
 8011c50:	3800      	subs	r0, #0
 8011c52:	bf18      	it	ne
 8011c54:	2001      	movne	r0, #1
 8011c56:	e72b      	b.n	8011ab0 <__ieee754_pow+0x220>
 8011c58:	60000000 	.word	0x60000000
 8011c5c:	3ff71547 	.word	0x3ff71547
 8011c60:	f85ddf44 	.word	0xf85ddf44
 8011c64:	3e54ae0b 	.word	0x3e54ae0b
 8011c68:	55555555 	.word	0x55555555
 8011c6c:	3fd55555 	.word	0x3fd55555
 8011c70:	652b82fe 	.word	0x652b82fe
 8011c74:	3ff71547 	.word	0x3ff71547
 8011c78:	00000000 	.word	0x00000000
 8011c7c:	bff00000 	.word	0xbff00000
 8011c80:	3ff00000 	.word	0x3ff00000
 8011c84:	3fd00000 	.word	0x3fd00000
 8011c88:	3fe00000 	.word	0x3fe00000
 8011c8c:	408fffff 	.word	0x408fffff
 8011c90:	4bd5      	ldr	r3, [pc, #852]	; (8011fe8 <__ieee754_pow+0x758>)
 8011c92:	402b      	ands	r3, r5
 8011c94:	2200      	movs	r2, #0
 8011c96:	b92b      	cbnz	r3, 8011ca4 <__ieee754_pow+0x414>
 8011c98:	4bd4      	ldr	r3, [pc, #848]	; (8011fec <__ieee754_pow+0x75c>)
 8011c9a:	f7ee fcdd 	bl	8000658 <__aeabi_dmul>
 8011c9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	1523      	asrs	r3, r4, #20
 8011ca6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011caa:	4413      	add	r3, r2
 8011cac:	9305      	str	r3, [sp, #20]
 8011cae:	4bd0      	ldr	r3, [pc, #832]	; (8011ff0 <__ieee754_pow+0x760>)
 8011cb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011cb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011cb8:	429c      	cmp	r4, r3
 8011cba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011cbe:	dd08      	ble.n	8011cd2 <__ieee754_pow+0x442>
 8011cc0:	4bcc      	ldr	r3, [pc, #816]	; (8011ff4 <__ieee754_pow+0x764>)
 8011cc2:	429c      	cmp	r4, r3
 8011cc4:	f340 8162 	ble.w	8011f8c <__ieee754_pow+0x6fc>
 8011cc8:	9b05      	ldr	r3, [sp, #20]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	9305      	str	r3, [sp, #20]
 8011cce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011cd2:	2400      	movs	r4, #0
 8011cd4:	00e3      	lsls	r3, r4, #3
 8011cd6:	9307      	str	r3, [sp, #28]
 8011cd8:	4bc7      	ldr	r3, [pc, #796]	; (8011ff8 <__ieee754_pow+0x768>)
 8011cda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011cde:	ed93 7b00 	vldr	d7, [r3]
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	ec53 2b17 	vmov	r2, r3, d7
 8011ce8:	eeb0 9a47 	vmov.f32	s18, s14
 8011cec:	eef0 9a67 	vmov.f32	s19, s15
 8011cf0:	4682      	mov	sl, r0
 8011cf2:	f7ee faf9 	bl	80002e8 <__aeabi_dsub>
 8011cf6:	4652      	mov	r2, sl
 8011cf8:	4606      	mov	r6, r0
 8011cfa:	460f      	mov	r7, r1
 8011cfc:	462b      	mov	r3, r5
 8011cfe:	ec51 0b19 	vmov	r0, r1, d9
 8011d02:	f7ee faf3 	bl	80002ec <__adddf3>
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	49bb      	ldr	r1, [pc, #748]	; (8011ffc <__ieee754_pow+0x76c>)
 8011d0e:	f7ee fdcd 	bl	80008ac <__aeabi_ddiv>
 8011d12:	ec41 0b1a 	vmov	d10, r0, r1
 8011d16:	4602      	mov	r2, r0
 8011d18:	460b      	mov	r3, r1
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	4639      	mov	r1, r7
 8011d1e:	f7ee fc9b 	bl	8000658 <__aeabi_dmul>
 8011d22:	2300      	movs	r3, #0
 8011d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d28:	9302      	str	r3, [sp, #8]
 8011d2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011d2e:	46ab      	mov	fp, r5
 8011d30:	106d      	asrs	r5, r5, #1
 8011d32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011d36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011d3a:	ec41 0b18 	vmov	d8, r0, r1
 8011d3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011d42:	2200      	movs	r2, #0
 8011d44:	4640      	mov	r0, r8
 8011d46:	4649      	mov	r1, r9
 8011d48:	4614      	mov	r4, r2
 8011d4a:	461d      	mov	r5, r3
 8011d4c:	f7ee fc84 	bl	8000658 <__aeabi_dmul>
 8011d50:	4602      	mov	r2, r0
 8011d52:	460b      	mov	r3, r1
 8011d54:	4630      	mov	r0, r6
 8011d56:	4639      	mov	r1, r7
 8011d58:	f7ee fac6 	bl	80002e8 <__aeabi_dsub>
 8011d5c:	ec53 2b19 	vmov	r2, r3, d9
 8011d60:	4606      	mov	r6, r0
 8011d62:	460f      	mov	r7, r1
 8011d64:	4620      	mov	r0, r4
 8011d66:	4629      	mov	r1, r5
 8011d68:	f7ee fabe 	bl	80002e8 <__aeabi_dsub>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	460b      	mov	r3, r1
 8011d70:	4650      	mov	r0, sl
 8011d72:	4659      	mov	r1, fp
 8011d74:	f7ee fab8 	bl	80002e8 <__aeabi_dsub>
 8011d78:	4642      	mov	r2, r8
 8011d7a:	464b      	mov	r3, r9
 8011d7c:	f7ee fc6c 	bl	8000658 <__aeabi_dmul>
 8011d80:	4602      	mov	r2, r0
 8011d82:	460b      	mov	r3, r1
 8011d84:	4630      	mov	r0, r6
 8011d86:	4639      	mov	r1, r7
 8011d88:	f7ee faae 	bl	80002e8 <__aeabi_dsub>
 8011d8c:	ec53 2b1a 	vmov	r2, r3, d10
 8011d90:	f7ee fc62 	bl	8000658 <__aeabi_dmul>
 8011d94:	ec53 2b18 	vmov	r2, r3, d8
 8011d98:	ec41 0b19 	vmov	d9, r0, r1
 8011d9c:	ec51 0b18 	vmov	r0, r1, d8
 8011da0:	f7ee fc5a 	bl	8000658 <__aeabi_dmul>
 8011da4:	a37c      	add	r3, pc, #496	; (adr r3, 8011f98 <__ieee754_pow+0x708>)
 8011da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011daa:	4604      	mov	r4, r0
 8011dac:	460d      	mov	r5, r1
 8011dae:	f7ee fc53 	bl	8000658 <__aeabi_dmul>
 8011db2:	a37b      	add	r3, pc, #492	; (adr r3, 8011fa0 <__ieee754_pow+0x710>)
 8011db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db8:	f7ee fa98 	bl	80002ec <__adddf3>
 8011dbc:	4622      	mov	r2, r4
 8011dbe:	462b      	mov	r3, r5
 8011dc0:	f7ee fc4a 	bl	8000658 <__aeabi_dmul>
 8011dc4:	a378      	add	r3, pc, #480	; (adr r3, 8011fa8 <__ieee754_pow+0x718>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	f7ee fa8f 	bl	80002ec <__adddf3>
 8011dce:	4622      	mov	r2, r4
 8011dd0:	462b      	mov	r3, r5
 8011dd2:	f7ee fc41 	bl	8000658 <__aeabi_dmul>
 8011dd6:	a376      	add	r3, pc, #472	; (adr r3, 8011fb0 <__ieee754_pow+0x720>)
 8011dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ddc:	f7ee fa86 	bl	80002ec <__adddf3>
 8011de0:	4622      	mov	r2, r4
 8011de2:	462b      	mov	r3, r5
 8011de4:	f7ee fc38 	bl	8000658 <__aeabi_dmul>
 8011de8:	a373      	add	r3, pc, #460	; (adr r3, 8011fb8 <__ieee754_pow+0x728>)
 8011dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dee:	f7ee fa7d 	bl	80002ec <__adddf3>
 8011df2:	4622      	mov	r2, r4
 8011df4:	462b      	mov	r3, r5
 8011df6:	f7ee fc2f 	bl	8000658 <__aeabi_dmul>
 8011dfa:	a371      	add	r3, pc, #452	; (adr r3, 8011fc0 <__ieee754_pow+0x730>)
 8011dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e00:	f7ee fa74 	bl	80002ec <__adddf3>
 8011e04:	4622      	mov	r2, r4
 8011e06:	4606      	mov	r6, r0
 8011e08:	460f      	mov	r7, r1
 8011e0a:	462b      	mov	r3, r5
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	4629      	mov	r1, r5
 8011e10:	f7ee fc22 	bl	8000658 <__aeabi_dmul>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	4630      	mov	r0, r6
 8011e1a:	4639      	mov	r1, r7
 8011e1c:	f7ee fc1c 	bl	8000658 <__aeabi_dmul>
 8011e20:	4642      	mov	r2, r8
 8011e22:	4604      	mov	r4, r0
 8011e24:	460d      	mov	r5, r1
 8011e26:	464b      	mov	r3, r9
 8011e28:	ec51 0b18 	vmov	r0, r1, d8
 8011e2c:	f7ee fa5e 	bl	80002ec <__adddf3>
 8011e30:	ec53 2b19 	vmov	r2, r3, d9
 8011e34:	f7ee fc10 	bl	8000658 <__aeabi_dmul>
 8011e38:	4622      	mov	r2, r4
 8011e3a:	462b      	mov	r3, r5
 8011e3c:	f7ee fa56 	bl	80002ec <__adddf3>
 8011e40:	4642      	mov	r2, r8
 8011e42:	4682      	mov	sl, r0
 8011e44:	468b      	mov	fp, r1
 8011e46:	464b      	mov	r3, r9
 8011e48:	4640      	mov	r0, r8
 8011e4a:	4649      	mov	r1, r9
 8011e4c:	f7ee fc04 	bl	8000658 <__aeabi_dmul>
 8011e50:	4b6b      	ldr	r3, [pc, #428]	; (8012000 <__ieee754_pow+0x770>)
 8011e52:	2200      	movs	r2, #0
 8011e54:	4606      	mov	r6, r0
 8011e56:	460f      	mov	r7, r1
 8011e58:	f7ee fa48 	bl	80002ec <__adddf3>
 8011e5c:	4652      	mov	r2, sl
 8011e5e:	465b      	mov	r3, fp
 8011e60:	f7ee fa44 	bl	80002ec <__adddf3>
 8011e64:	2000      	movs	r0, #0
 8011e66:	4604      	mov	r4, r0
 8011e68:	460d      	mov	r5, r1
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	4640      	mov	r0, r8
 8011e70:	4649      	mov	r1, r9
 8011e72:	f7ee fbf1 	bl	8000658 <__aeabi_dmul>
 8011e76:	4b62      	ldr	r3, [pc, #392]	; (8012000 <__ieee754_pow+0x770>)
 8011e78:	4680      	mov	r8, r0
 8011e7a:	4689      	mov	r9, r1
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	4620      	mov	r0, r4
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7ee fa31 	bl	80002e8 <__aeabi_dsub>
 8011e86:	4632      	mov	r2, r6
 8011e88:	463b      	mov	r3, r7
 8011e8a:	f7ee fa2d 	bl	80002e8 <__aeabi_dsub>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	460b      	mov	r3, r1
 8011e92:	4650      	mov	r0, sl
 8011e94:	4659      	mov	r1, fp
 8011e96:	f7ee fa27 	bl	80002e8 <__aeabi_dsub>
 8011e9a:	ec53 2b18 	vmov	r2, r3, d8
 8011e9e:	f7ee fbdb 	bl	8000658 <__aeabi_dmul>
 8011ea2:	4622      	mov	r2, r4
 8011ea4:	4606      	mov	r6, r0
 8011ea6:	460f      	mov	r7, r1
 8011ea8:	462b      	mov	r3, r5
 8011eaa:	ec51 0b19 	vmov	r0, r1, d9
 8011eae:	f7ee fbd3 	bl	8000658 <__aeabi_dmul>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	4639      	mov	r1, r7
 8011eba:	f7ee fa17 	bl	80002ec <__adddf3>
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4649      	mov	r1, r9
 8011eca:	f7ee fa0f 	bl	80002ec <__adddf3>
 8011ece:	a33e      	add	r3, pc, #248	; (adr r3, 8011fc8 <__ieee754_pow+0x738>)
 8011ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	460d      	mov	r5, r1
 8011eda:	f7ee fbbd 	bl	8000658 <__aeabi_dmul>
 8011ede:	4642      	mov	r2, r8
 8011ee0:	ec41 0b18 	vmov	d8, r0, r1
 8011ee4:	464b      	mov	r3, r9
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	4629      	mov	r1, r5
 8011eea:	f7ee f9fd 	bl	80002e8 <__aeabi_dsub>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	f7ee f9f7 	bl	80002e8 <__aeabi_dsub>
 8011efa:	a335      	add	r3, pc, #212	; (adr r3, 8011fd0 <__ieee754_pow+0x740>)
 8011efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f00:	f7ee fbaa 	bl	8000658 <__aeabi_dmul>
 8011f04:	a334      	add	r3, pc, #208	; (adr r3, 8011fd8 <__ieee754_pow+0x748>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	460f      	mov	r7, r1
 8011f0e:	4620      	mov	r0, r4
 8011f10:	4629      	mov	r1, r5
 8011f12:	f7ee fba1 	bl	8000658 <__aeabi_dmul>
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	f7ee f9e5 	bl	80002ec <__adddf3>
 8011f22:	9a07      	ldr	r2, [sp, #28]
 8011f24:	4b37      	ldr	r3, [pc, #220]	; (8012004 <__ieee754_pow+0x774>)
 8011f26:	4413      	add	r3, r2
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	f7ee f9de 	bl	80002ec <__adddf3>
 8011f30:	4682      	mov	sl, r0
 8011f32:	9805      	ldr	r0, [sp, #20]
 8011f34:	468b      	mov	fp, r1
 8011f36:	f7ee fb25 	bl	8000584 <__aeabi_i2d>
 8011f3a:	9a07      	ldr	r2, [sp, #28]
 8011f3c:	4b32      	ldr	r3, [pc, #200]	; (8012008 <__ieee754_pow+0x778>)
 8011f3e:	4413      	add	r3, r2
 8011f40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f44:	4606      	mov	r6, r0
 8011f46:	460f      	mov	r7, r1
 8011f48:	4652      	mov	r2, sl
 8011f4a:	465b      	mov	r3, fp
 8011f4c:	ec51 0b18 	vmov	r0, r1, d8
 8011f50:	f7ee f9cc 	bl	80002ec <__adddf3>
 8011f54:	4642      	mov	r2, r8
 8011f56:	464b      	mov	r3, r9
 8011f58:	f7ee f9c8 	bl	80002ec <__adddf3>
 8011f5c:	4632      	mov	r2, r6
 8011f5e:	463b      	mov	r3, r7
 8011f60:	f7ee f9c4 	bl	80002ec <__adddf3>
 8011f64:	2000      	movs	r0, #0
 8011f66:	4632      	mov	r2, r6
 8011f68:	463b      	mov	r3, r7
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	460d      	mov	r5, r1
 8011f6e:	f7ee f9bb 	bl	80002e8 <__aeabi_dsub>
 8011f72:	4642      	mov	r2, r8
 8011f74:	464b      	mov	r3, r9
 8011f76:	f7ee f9b7 	bl	80002e8 <__aeabi_dsub>
 8011f7a:	ec53 2b18 	vmov	r2, r3, d8
 8011f7e:	f7ee f9b3 	bl	80002e8 <__aeabi_dsub>
 8011f82:	4602      	mov	r2, r0
 8011f84:	460b      	mov	r3, r1
 8011f86:	4650      	mov	r0, sl
 8011f88:	4659      	mov	r1, fp
 8011f8a:	e610      	b.n	8011bae <__ieee754_pow+0x31e>
 8011f8c:	2401      	movs	r4, #1
 8011f8e:	e6a1      	b.n	8011cd4 <__ieee754_pow+0x444>
 8011f90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011fe0 <__ieee754_pow+0x750>
 8011f94:	e617      	b.n	8011bc6 <__ieee754_pow+0x336>
 8011f96:	bf00      	nop
 8011f98:	4a454eef 	.word	0x4a454eef
 8011f9c:	3fca7e28 	.word	0x3fca7e28
 8011fa0:	93c9db65 	.word	0x93c9db65
 8011fa4:	3fcd864a 	.word	0x3fcd864a
 8011fa8:	a91d4101 	.word	0xa91d4101
 8011fac:	3fd17460 	.word	0x3fd17460
 8011fb0:	518f264d 	.word	0x518f264d
 8011fb4:	3fd55555 	.word	0x3fd55555
 8011fb8:	db6fabff 	.word	0xdb6fabff
 8011fbc:	3fdb6db6 	.word	0x3fdb6db6
 8011fc0:	33333303 	.word	0x33333303
 8011fc4:	3fe33333 	.word	0x3fe33333
 8011fc8:	e0000000 	.word	0xe0000000
 8011fcc:	3feec709 	.word	0x3feec709
 8011fd0:	dc3a03fd 	.word	0xdc3a03fd
 8011fd4:	3feec709 	.word	0x3feec709
 8011fd8:	145b01f5 	.word	0x145b01f5
 8011fdc:	be3e2fe0 	.word	0xbe3e2fe0
 8011fe0:	00000000 	.word	0x00000000
 8011fe4:	3ff00000 	.word	0x3ff00000
 8011fe8:	7ff00000 	.word	0x7ff00000
 8011fec:	43400000 	.word	0x43400000
 8011ff0:	0003988e 	.word	0x0003988e
 8011ff4:	000bb679 	.word	0x000bb679
 8011ff8:	08012ee8 	.word	0x08012ee8
 8011ffc:	3ff00000 	.word	0x3ff00000
 8012000:	40080000 	.word	0x40080000
 8012004:	08012f08 	.word	0x08012f08
 8012008:	08012ef8 	.word	0x08012ef8
 801200c:	a3b5      	add	r3, pc, #724	; (adr r3, 80122e4 <__ieee754_pow+0xa54>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	4640      	mov	r0, r8
 8012014:	4649      	mov	r1, r9
 8012016:	f7ee f969 	bl	80002ec <__adddf3>
 801201a:	4622      	mov	r2, r4
 801201c:	ec41 0b1a 	vmov	d10, r0, r1
 8012020:	462b      	mov	r3, r5
 8012022:	4630      	mov	r0, r6
 8012024:	4639      	mov	r1, r7
 8012026:	f7ee f95f 	bl	80002e8 <__aeabi_dsub>
 801202a:	4602      	mov	r2, r0
 801202c:	460b      	mov	r3, r1
 801202e:	ec51 0b1a 	vmov	r0, r1, d10
 8012032:	f7ee fda1 	bl	8000b78 <__aeabi_dcmpgt>
 8012036:	2800      	cmp	r0, #0
 8012038:	f47f ae04 	bne.w	8011c44 <__ieee754_pow+0x3b4>
 801203c:	4aa4      	ldr	r2, [pc, #656]	; (80122d0 <__ieee754_pow+0xa40>)
 801203e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012042:	4293      	cmp	r3, r2
 8012044:	f340 8108 	ble.w	8012258 <__ieee754_pow+0x9c8>
 8012048:	151b      	asrs	r3, r3, #20
 801204a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801204e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012052:	fa4a f303 	asr.w	r3, sl, r3
 8012056:	445b      	add	r3, fp
 8012058:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801205c:	4e9d      	ldr	r6, [pc, #628]	; (80122d4 <__ieee754_pow+0xa44>)
 801205e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012062:	4116      	asrs	r6, r2
 8012064:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012068:	2000      	movs	r0, #0
 801206a:	ea23 0106 	bic.w	r1, r3, r6
 801206e:	f1c2 0214 	rsb	r2, r2, #20
 8012072:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012076:	fa4a fa02 	asr.w	sl, sl, r2
 801207a:	f1bb 0f00 	cmp.w	fp, #0
 801207e:	4602      	mov	r2, r0
 8012080:	460b      	mov	r3, r1
 8012082:	4620      	mov	r0, r4
 8012084:	4629      	mov	r1, r5
 8012086:	bfb8      	it	lt
 8012088:	f1ca 0a00 	rsblt	sl, sl, #0
 801208c:	f7ee f92c 	bl	80002e8 <__aeabi_dsub>
 8012090:	ec41 0b19 	vmov	d9, r0, r1
 8012094:	4642      	mov	r2, r8
 8012096:	464b      	mov	r3, r9
 8012098:	ec51 0b19 	vmov	r0, r1, d9
 801209c:	f7ee f926 	bl	80002ec <__adddf3>
 80120a0:	a37b      	add	r3, pc, #492	; (adr r3, 8012290 <__ieee754_pow+0xa00>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	2000      	movs	r0, #0
 80120a8:	4604      	mov	r4, r0
 80120aa:	460d      	mov	r5, r1
 80120ac:	f7ee fad4 	bl	8000658 <__aeabi_dmul>
 80120b0:	ec53 2b19 	vmov	r2, r3, d9
 80120b4:	4606      	mov	r6, r0
 80120b6:	460f      	mov	r7, r1
 80120b8:	4620      	mov	r0, r4
 80120ba:	4629      	mov	r1, r5
 80120bc:	f7ee f914 	bl	80002e8 <__aeabi_dsub>
 80120c0:	4602      	mov	r2, r0
 80120c2:	460b      	mov	r3, r1
 80120c4:	4640      	mov	r0, r8
 80120c6:	4649      	mov	r1, r9
 80120c8:	f7ee f90e 	bl	80002e8 <__aeabi_dsub>
 80120cc:	a372      	add	r3, pc, #456	; (adr r3, 8012298 <__ieee754_pow+0xa08>)
 80120ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d2:	f7ee fac1 	bl	8000658 <__aeabi_dmul>
 80120d6:	a372      	add	r3, pc, #456	; (adr r3, 80122a0 <__ieee754_pow+0xa10>)
 80120d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120dc:	4680      	mov	r8, r0
 80120de:	4689      	mov	r9, r1
 80120e0:	4620      	mov	r0, r4
 80120e2:	4629      	mov	r1, r5
 80120e4:	f7ee fab8 	bl	8000658 <__aeabi_dmul>
 80120e8:	4602      	mov	r2, r0
 80120ea:	460b      	mov	r3, r1
 80120ec:	4640      	mov	r0, r8
 80120ee:	4649      	mov	r1, r9
 80120f0:	f7ee f8fc 	bl	80002ec <__adddf3>
 80120f4:	4604      	mov	r4, r0
 80120f6:	460d      	mov	r5, r1
 80120f8:	4602      	mov	r2, r0
 80120fa:	460b      	mov	r3, r1
 80120fc:	4630      	mov	r0, r6
 80120fe:	4639      	mov	r1, r7
 8012100:	f7ee f8f4 	bl	80002ec <__adddf3>
 8012104:	4632      	mov	r2, r6
 8012106:	463b      	mov	r3, r7
 8012108:	4680      	mov	r8, r0
 801210a:	4689      	mov	r9, r1
 801210c:	f7ee f8ec 	bl	80002e8 <__aeabi_dsub>
 8012110:	4602      	mov	r2, r0
 8012112:	460b      	mov	r3, r1
 8012114:	4620      	mov	r0, r4
 8012116:	4629      	mov	r1, r5
 8012118:	f7ee f8e6 	bl	80002e8 <__aeabi_dsub>
 801211c:	4642      	mov	r2, r8
 801211e:	4606      	mov	r6, r0
 8012120:	460f      	mov	r7, r1
 8012122:	464b      	mov	r3, r9
 8012124:	4640      	mov	r0, r8
 8012126:	4649      	mov	r1, r9
 8012128:	f7ee fa96 	bl	8000658 <__aeabi_dmul>
 801212c:	a35e      	add	r3, pc, #376	; (adr r3, 80122a8 <__ieee754_pow+0xa18>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	4604      	mov	r4, r0
 8012134:	460d      	mov	r5, r1
 8012136:	f7ee fa8f 	bl	8000658 <__aeabi_dmul>
 801213a:	a35d      	add	r3, pc, #372	; (adr r3, 80122b0 <__ieee754_pow+0xa20>)
 801213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012140:	f7ee f8d2 	bl	80002e8 <__aeabi_dsub>
 8012144:	4622      	mov	r2, r4
 8012146:	462b      	mov	r3, r5
 8012148:	f7ee fa86 	bl	8000658 <__aeabi_dmul>
 801214c:	a35a      	add	r3, pc, #360	; (adr r3, 80122b8 <__ieee754_pow+0xa28>)
 801214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012152:	f7ee f8cb 	bl	80002ec <__adddf3>
 8012156:	4622      	mov	r2, r4
 8012158:	462b      	mov	r3, r5
 801215a:	f7ee fa7d 	bl	8000658 <__aeabi_dmul>
 801215e:	a358      	add	r3, pc, #352	; (adr r3, 80122c0 <__ieee754_pow+0xa30>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee f8c0 	bl	80002e8 <__aeabi_dsub>
 8012168:	4622      	mov	r2, r4
 801216a:	462b      	mov	r3, r5
 801216c:	f7ee fa74 	bl	8000658 <__aeabi_dmul>
 8012170:	a355      	add	r3, pc, #340	; (adr r3, 80122c8 <__ieee754_pow+0xa38>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	f7ee f8b9 	bl	80002ec <__adddf3>
 801217a:	4622      	mov	r2, r4
 801217c:	462b      	mov	r3, r5
 801217e:	f7ee fa6b 	bl	8000658 <__aeabi_dmul>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4640      	mov	r0, r8
 8012188:	4649      	mov	r1, r9
 801218a:	f7ee f8ad 	bl	80002e8 <__aeabi_dsub>
 801218e:	4604      	mov	r4, r0
 8012190:	460d      	mov	r5, r1
 8012192:	4602      	mov	r2, r0
 8012194:	460b      	mov	r3, r1
 8012196:	4640      	mov	r0, r8
 8012198:	4649      	mov	r1, r9
 801219a:	f7ee fa5d 	bl	8000658 <__aeabi_dmul>
 801219e:	2200      	movs	r2, #0
 80121a0:	ec41 0b19 	vmov	d9, r0, r1
 80121a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80121a8:	4620      	mov	r0, r4
 80121aa:	4629      	mov	r1, r5
 80121ac:	f7ee f89c 	bl	80002e8 <__aeabi_dsub>
 80121b0:	4602      	mov	r2, r0
 80121b2:	460b      	mov	r3, r1
 80121b4:	ec51 0b19 	vmov	r0, r1, d9
 80121b8:	f7ee fb78 	bl	80008ac <__aeabi_ddiv>
 80121bc:	4632      	mov	r2, r6
 80121be:	4604      	mov	r4, r0
 80121c0:	460d      	mov	r5, r1
 80121c2:	463b      	mov	r3, r7
 80121c4:	4640      	mov	r0, r8
 80121c6:	4649      	mov	r1, r9
 80121c8:	f7ee fa46 	bl	8000658 <__aeabi_dmul>
 80121cc:	4632      	mov	r2, r6
 80121ce:	463b      	mov	r3, r7
 80121d0:	f7ee f88c 	bl	80002ec <__adddf3>
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	4620      	mov	r0, r4
 80121da:	4629      	mov	r1, r5
 80121dc:	f7ee f884 	bl	80002e8 <__aeabi_dsub>
 80121e0:	4642      	mov	r2, r8
 80121e2:	464b      	mov	r3, r9
 80121e4:	f7ee f880 	bl	80002e8 <__aeabi_dsub>
 80121e8:	460b      	mov	r3, r1
 80121ea:	4602      	mov	r2, r0
 80121ec:	493a      	ldr	r1, [pc, #232]	; (80122d8 <__ieee754_pow+0xa48>)
 80121ee:	2000      	movs	r0, #0
 80121f0:	f7ee f87a 	bl	80002e8 <__aeabi_dsub>
 80121f4:	ec41 0b10 	vmov	d0, r0, r1
 80121f8:	ee10 3a90 	vmov	r3, s1
 80121fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012204:	da2b      	bge.n	801225e <__ieee754_pow+0x9ce>
 8012206:	4650      	mov	r0, sl
 8012208:	f000 fb0a 	bl	8012820 <scalbn>
 801220c:	ec51 0b10 	vmov	r0, r1, d0
 8012210:	ec53 2b18 	vmov	r2, r3, d8
 8012214:	f7ff bbed 	b.w	80119f2 <__ieee754_pow+0x162>
 8012218:	4b30      	ldr	r3, [pc, #192]	; (80122dc <__ieee754_pow+0xa4c>)
 801221a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801221e:	429e      	cmp	r6, r3
 8012220:	f77f af0c 	ble.w	801203c <__ieee754_pow+0x7ac>
 8012224:	4b2e      	ldr	r3, [pc, #184]	; (80122e0 <__ieee754_pow+0xa50>)
 8012226:	440b      	add	r3, r1
 8012228:	4303      	orrs	r3, r0
 801222a:	d009      	beq.n	8012240 <__ieee754_pow+0x9b0>
 801222c:	ec51 0b18 	vmov	r0, r1, d8
 8012230:	2200      	movs	r2, #0
 8012232:	2300      	movs	r3, #0
 8012234:	f7ee fc82 	bl	8000b3c <__aeabi_dcmplt>
 8012238:	3800      	subs	r0, #0
 801223a:	bf18      	it	ne
 801223c:	2001      	movne	r0, #1
 801223e:	e447      	b.n	8011ad0 <__ieee754_pow+0x240>
 8012240:	4622      	mov	r2, r4
 8012242:	462b      	mov	r3, r5
 8012244:	f7ee f850 	bl	80002e8 <__aeabi_dsub>
 8012248:	4642      	mov	r2, r8
 801224a:	464b      	mov	r3, r9
 801224c:	f7ee fc8a 	bl	8000b64 <__aeabi_dcmpge>
 8012250:	2800      	cmp	r0, #0
 8012252:	f43f aef3 	beq.w	801203c <__ieee754_pow+0x7ac>
 8012256:	e7e9      	b.n	801222c <__ieee754_pow+0x99c>
 8012258:	f04f 0a00 	mov.w	sl, #0
 801225c:	e71a      	b.n	8012094 <__ieee754_pow+0x804>
 801225e:	ec51 0b10 	vmov	r0, r1, d0
 8012262:	4619      	mov	r1, r3
 8012264:	e7d4      	b.n	8012210 <__ieee754_pow+0x980>
 8012266:	491c      	ldr	r1, [pc, #112]	; (80122d8 <__ieee754_pow+0xa48>)
 8012268:	2000      	movs	r0, #0
 801226a:	f7ff bb30 	b.w	80118ce <__ieee754_pow+0x3e>
 801226e:	2000      	movs	r0, #0
 8012270:	2100      	movs	r1, #0
 8012272:	f7ff bb2c 	b.w	80118ce <__ieee754_pow+0x3e>
 8012276:	4630      	mov	r0, r6
 8012278:	4639      	mov	r1, r7
 801227a:	f7ff bb28 	b.w	80118ce <__ieee754_pow+0x3e>
 801227e:	9204      	str	r2, [sp, #16]
 8012280:	f7ff bb7a 	b.w	8011978 <__ieee754_pow+0xe8>
 8012284:	2300      	movs	r3, #0
 8012286:	f7ff bb64 	b.w	8011952 <__ieee754_pow+0xc2>
 801228a:	bf00      	nop
 801228c:	f3af 8000 	nop.w
 8012290:	00000000 	.word	0x00000000
 8012294:	3fe62e43 	.word	0x3fe62e43
 8012298:	fefa39ef 	.word	0xfefa39ef
 801229c:	3fe62e42 	.word	0x3fe62e42
 80122a0:	0ca86c39 	.word	0x0ca86c39
 80122a4:	be205c61 	.word	0xbe205c61
 80122a8:	72bea4d0 	.word	0x72bea4d0
 80122ac:	3e663769 	.word	0x3e663769
 80122b0:	c5d26bf1 	.word	0xc5d26bf1
 80122b4:	3ebbbd41 	.word	0x3ebbbd41
 80122b8:	af25de2c 	.word	0xaf25de2c
 80122bc:	3f11566a 	.word	0x3f11566a
 80122c0:	16bebd93 	.word	0x16bebd93
 80122c4:	3f66c16c 	.word	0x3f66c16c
 80122c8:	5555553e 	.word	0x5555553e
 80122cc:	3fc55555 	.word	0x3fc55555
 80122d0:	3fe00000 	.word	0x3fe00000
 80122d4:	000fffff 	.word	0x000fffff
 80122d8:	3ff00000 	.word	0x3ff00000
 80122dc:	4090cbff 	.word	0x4090cbff
 80122e0:	3f6f3400 	.word	0x3f6f3400
 80122e4:	652b82fe 	.word	0x652b82fe
 80122e8:	3c971547 	.word	0x3c971547

080122ec <__ieee754_sqrt>:
 80122ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f0:	ec55 4b10 	vmov	r4, r5, d0
 80122f4:	4e55      	ldr	r6, [pc, #340]	; (801244c <__ieee754_sqrt+0x160>)
 80122f6:	43ae      	bics	r6, r5
 80122f8:	ee10 0a10 	vmov	r0, s0
 80122fc:	ee10 3a10 	vmov	r3, s0
 8012300:	462a      	mov	r2, r5
 8012302:	4629      	mov	r1, r5
 8012304:	d110      	bne.n	8012328 <__ieee754_sqrt+0x3c>
 8012306:	ee10 2a10 	vmov	r2, s0
 801230a:	462b      	mov	r3, r5
 801230c:	f7ee f9a4 	bl	8000658 <__aeabi_dmul>
 8012310:	4602      	mov	r2, r0
 8012312:	460b      	mov	r3, r1
 8012314:	4620      	mov	r0, r4
 8012316:	4629      	mov	r1, r5
 8012318:	f7ed ffe8 	bl	80002ec <__adddf3>
 801231c:	4604      	mov	r4, r0
 801231e:	460d      	mov	r5, r1
 8012320:	ec45 4b10 	vmov	d0, r4, r5
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012328:	2d00      	cmp	r5, #0
 801232a:	dc10      	bgt.n	801234e <__ieee754_sqrt+0x62>
 801232c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012330:	4330      	orrs	r0, r6
 8012332:	d0f5      	beq.n	8012320 <__ieee754_sqrt+0x34>
 8012334:	b15d      	cbz	r5, 801234e <__ieee754_sqrt+0x62>
 8012336:	ee10 2a10 	vmov	r2, s0
 801233a:	462b      	mov	r3, r5
 801233c:	ee10 0a10 	vmov	r0, s0
 8012340:	f7ed ffd2 	bl	80002e8 <__aeabi_dsub>
 8012344:	4602      	mov	r2, r0
 8012346:	460b      	mov	r3, r1
 8012348:	f7ee fab0 	bl	80008ac <__aeabi_ddiv>
 801234c:	e7e6      	b.n	801231c <__ieee754_sqrt+0x30>
 801234e:	1512      	asrs	r2, r2, #20
 8012350:	d074      	beq.n	801243c <__ieee754_sqrt+0x150>
 8012352:	07d4      	lsls	r4, r2, #31
 8012354:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012358:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801235c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012360:	bf5e      	ittt	pl
 8012362:	0fda      	lsrpl	r2, r3, #31
 8012364:	005b      	lslpl	r3, r3, #1
 8012366:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801236a:	2400      	movs	r4, #0
 801236c:	0fda      	lsrs	r2, r3, #31
 801236e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012372:	107f      	asrs	r7, r7, #1
 8012374:	005b      	lsls	r3, r3, #1
 8012376:	2516      	movs	r5, #22
 8012378:	4620      	mov	r0, r4
 801237a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801237e:	1886      	adds	r6, r0, r2
 8012380:	428e      	cmp	r6, r1
 8012382:	bfde      	ittt	le
 8012384:	1b89      	suble	r1, r1, r6
 8012386:	18b0      	addle	r0, r6, r2
 8012388:	18a4      	addle	r4, r4, r2
 801238a:	0049      	lsls	r1, r1, #1
 801238c:	3d01      	subs	r5, #1
 801238e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012392:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012396:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801239a:	d1f0      	bne.n	801237e <__ieee754_sqrt+0x92>
 801239c:	462a      	mov	r2, r5
 801239e:	f04f 0e20 	mov.w	lr, #32
 80123a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80123a6:	4281      	cmp	r1, r0
 80123a8:	eb06 0c05 	add.w	ip, r6, r5
 80123ac:	dc02      	bgt.n	80123b4 <__ieee754_sqrt+0xc8>
 80123ae:	d113      	bne.n	80123d8 <__ieee754_sqrt+0xec>
 80123b0:	459c      	cmp	ip, r3
 80123b2:	d811      	bhi.n	80123d8 <__ieee754_sqrt+0xec>
 80123b4:	f1bc 0f00 	cmp.w	ip, #0
 80123b8:	eb0c 0506 	add.w	r5, ip, r6
 80123bc:	da43      	bge.n	8012446 <__ieee754_sqrt+0x15a>
 80123be:	2d00      	cmp	r5, #0
 80123c0:	db41      	blt.n	8012446 <__ieee754_sqrt+0x15a>
 80123c2:	f100 0801 	add.w	r8, r0, #1
 80123c6:	1a09      	subs	r1, r1, r0
 80123c8:	459c      	cmp	ip, r3
 80123ca:	bf88      	it	hi
 80123cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80123d0:	eba3 030c 	sub.w	r3, r3, ip
 80123d4:	4432      	add	r2, r6
 80123d6:	4640      	mov	r0, r8
 80123d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80123dc:	f1be 0e01 	subs.w	lr, lr, #1
 80123e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80123e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80123e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80123ec:	d1db      	bne.n	80123a6 <__ieee754_sqrt+0xba>
 80123ee:	430b      	orrs	r3, r1
 80123f0:	d006      	beq.n	8012400 <__ieee754_sqrt+0x114>
 80123f2:	1c50      	adds	r0, r2, #1
 80123f4:	bf13      	iteet	ne
 80123f6:	3201      	addne	r2, #1
 80123f8:	3401      	addeq	r4, #1
 80123fa:	4672      	moveq	r2, lr
 80123fc:	f022 0201 	bicne.w	r2, r2, #1
 8012400:	1063      	asrs	r3, r4, #1
 8012402:	0852      	lsrs	r2, r2, #1
 8012404:	07e1      	lsls	r1, r4, #31
 8012406:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801240a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801240e:	bf48      	it	mi
 8012410:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012414:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012418:	4614      	mov	r4, r2
 801241a:	e781      	b.n	8012320 <__ieee754_sqrt+0x34>
 801241c:	0ad9      	lsrs	r1, r3, #11
 801241e:	3815      	subs	r0, #21
 8012420:	055b      	lsls	r3, r3, #21
 8012422:	2900      	cmp	r1, #0
 8012424:	d0fa      	beq.n	801241c <__ieee754_sqrt+0x130>
 8012426:	02cd      	lsls	r5, r1, #11
 8012428:	d50a      	bpl.n	8012440 <__ieee754_sqrt+0x154>
 801242a:	f1c2 0420 	rsb	r4, r2, #32
 801242e:	fa23 f404 	lsr.w	r4, r3, r4
 8012432:	1e55      	subs	r5, r2, #1
 8012434:	4093      	lsls	r3, r2
 8012436:	4321      	orrs	r1, r4
 8012438:	1b42      	subs	r2, r0, r5
 801243a:	e78a      	b.n	8012352 <__ieee754_sqrt+0x66>
 801243c:	4610      	mov	r0, r2
 801243e:	e7f0      	b.n	8012422 <__ieee754_sqrt+0x136>
 8012440:	0049      	lsls	r1, r1, #1
 8012442:	3201      	adds	r2, #1
 8012444:	e7ef      	b.n	8012426 <__ieee754_sqrt+0x13a>
 8012446:	4680      	mov	r8, r0
 8012448:	e7bd      	b.n	80123c6 <__ieee754_sqrt+0xda>
 801244a:	bf00      	nop
 801244c:	7ff00000 	.word	0x7ff00000

08012450 <__ieee754_sqrtf>:
 8012450:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012454:	4770      	bx	lr

08012456 <with_errno>:
 8012456:	b570      	push	{r4, r5, r6, lr}
 8012458:	4604      	mov	r4, r0
 801245a:	460d      	mov	r5, r1
 801245c:	4616      	mov	r6, r2
 801245e:	f7f9 fab7 	bl	800b9d0 <__errno>
 8012462:	4629      	mov	r1, r5
 8012464:	6006      	str	r6, [r0, #0]
 8012466:	4620      	mov	r0, r4
 8012468:	bd70      	pop	{r4, r5, r6, pc}

0801246a <xflow>:
 801246a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801246c:	4614      	mov	r4, r2
 801246e:	461d      	mov	r5, r3
 8012470:	b108      	cbz	r0, 8012476 <xflow+0xc>
 8012472:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012476:	e9cd 2300 	strd	r2, r3, [sp]
 801247a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801247e:	4620      	mov	r0, r4
 8012480:	4629      	mov	r1, r5
 8012482:	f7ee f8e9 	bl	8000658 <__aeabi_dmul>
 8012486:	2222      	movs	r2, #34	; 0x22
 8012488:	b003      	add	sp, #12
 801248a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801248e:	f7ff bfe2 	b.w	8012456 <with_errno>

08012492 <__math_uflow>:
 8012492:	b508      	push	{r3, lr}
 8012494:	2200      	movs	r2, #0
 8012496:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801249a:	f7ff ffe6 	bl	801246a <xflow>
 801249e:	ec41 0b10 	vmov	d0, r0, r1
 80124a2:	bd08      	pop	{r3, pc}

080124a4 <__math_oflow>:
 80124a4:	b508      	push	{r3, lr}
 80124a6:	2200      	movs	r2, #0
 80124a8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80124ac:	f7ff ffdd 	bl	801246a <xflow>
 80124b0:	ec41 0b10 	vmov	d0, r0, r1
 80124b4:	bd08      	pop	{r3, pc}
	...

080124b8 <atan>:
 80124b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124bc:	ec55 4b10 	vmov	r4, r5, d0
 80124c0:	4bc3      	ldr	r3, [pc, #780]	; (80127d0 <atan+0x318>)
 80124c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80124c6:	429e      	cmp	r6, r3
 80124c8:	46ab      	mov	fp, r5
 80124ca:	dd18      	ble.n	80124fe <atan+0x46>
 80124cc:	4bc1      	ldr	r3, [pc, #772]	; (80127d4 <atan+0x31c>)
 80124ce:	429e      	cmp	r6, r3
 80124d0:	dc01      	bgt.n	80124d6 <atan+0x1e>
 80124d2:	d109      	bne.n	80124e8 <atan+0x30>
 80124d4:	b144      	cbz	r4, 80124e8 <atan+0x30>
 80124d6:	4622      	mov	r2, r4
 80124d8:	462b      	mov	r3, r5
 80124da:	4620      	mov	r0, r4
 80124dc:	4629      	mov	r1, r5
 80124de:	f7ed ff05 	bl	80002ec <__adddf3>
 80124e2:	4604      	mov	r4, r0
 80124e4:	460d      	mov	r5, r1
 80124e6:	e006      	b.n	80124f6 <atan+0x3e>
 80124e8:	f1bb 0f00 	cmp.w	fp, #0
 80124ec:	f300 8131 	bgt.w	8012752 <atan+0x29a>
 80124f0:	a59b      	add	r5, pc, #620	; (adr r5, 8012760 <atan+0x2a8>)
 80124f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80124f6:	ec45 4b10 	vmov	d0, r4, r5
 80124fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124fe:	4bb6      	ldr	r3, [pc, #728]	; (80127d8 <atan+0x320>)
 8012500:	429e      	cmp	r6, r3
 8012502:	dc14      	bgt.n	801252e <atan+0x76>
 8012504:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012508:	429e      	cmp	r6, r3
 801250a:	dc0d      	bgt.n	8012528 <atan+0x70>
 801250c:	a396      	add	r3, pc, #600	; (adr r3, 8012768 <atan+0x2b0>)
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	ee10 0a10 	vmov	r0, s0
 8012516:	4629      	mov	r1, r5
 8012518:	f7ed fee8 	bl	80002ec <__adddf3>
 801251c:	4baf      	ldr	r3, [pc, #700]	; (80127dc <atan+0x324>)
 801251e:	2200      	movs	r2, #0
 8012520:	f7ee fb2a 	bl	8000b78 <__aeabi_dcmpgt>
 8012524:	2800      	cmp	r0, #0
 8012526:	d1e6      	bne.n	80124f6 <atan+0x3e>
 8012528:	f04f 3aff 	mov.w	sl, #4294967295
 801252c:	e02b      	b.n	8012586 <atan+0xce>
 801252e:	f000 f963 	bl	80127f8 <fabs>
 8012532:	4bab      	ldr	r3, [pc, #684]	; (80127e0 <atan+0x328>)
 8012534:	429e      	cmp	r6, r3
 8012536:	ec55 4b10 	vmov	r4, r5, d0
 801253a:	f300 80bf 	bgt.w	80126bc <atan+0x204>
 801253e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012542:	429e      	cmp	r6, r3
 8012544:	f300 80a0 	bgt.w	8012688 <atan+0x1d0>
 8012548:	ee10 2a10 	vmov	r2, s0
 801254c:	ee10 0a10 	vmov	r0, s0
 8012550:	462b      	mov	r3, r5
 8012552:	4629      	mov	r1, r5
 8012554:	f7ed feca 	bl	80002ec <__adddf3>
 8012558:	4ba0      	ldr	r3, [pc, #640]	; (80127dc <atan+0x324>)
 801255a:	2200      	movs	r2, #0
 801255c:	f7ed fec4 	bl	80002e8 <__aeabi_dsub>
 8012560:	2200      	movs	r2, #0
 8012562:	4606      	mov	r6, r0
 8012564:	460f      	mov	r7, r1
 8012566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801256a:	4620      	mov	r0, r4
 801256c:	4629      	mov	r1, r5
 801256e:	f7ed febd 	bl	80002ec <__adddf3>
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	4630      	mov	r0, r6
 8012578:	4639      	mov	r1, r7
 801257a:	f7ee f997 	bl	80008ac <__aeabi_ddiv>
 801257e:	f04f 0a00 	mov.w	sl, #0
 8012582:	4604      	mov	r4, r0
 8012584:	460d      	mov	r5, r1
 8012586:	4622      	mov	r2, r4
 8012588:	462b      	mov	r3, r5
 801258a:	4620      	mov	r0, r4
 801258c:	4629      	mov	r1, r5
 801258e:	f7ee f863 	bl	8000658 <__aeabi_dmul>
 8012592:	4602      	mov	r2, r0
 8012594:	460b      	mov	r3, r1
 8012596:	4680      	mov	r8, r0
 8012598:	4689      	mov	r9, r1
 801259a:	f7ee f85d 	bl	8000658 <__aeabi_dmul>
 801259e:	a374      	add	r3, pc, #464	; (adr r3, 8012770 <atan+0x2b8>)
 80125a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a4:	4606      	mov	r6, r0
 80125a6:	460f      	mov	r7, r1
 80125a8:	f7ee f856 	bl	8000658 <__aeabi_dmul>
 80125ac:	a372      	add	r3, pc, #456	; (adr r3, 8012778 <atan+0x2c0>)
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f7ed fe9b 	bl	80002ec <__adddf3>
 80125b6:	4632      	mov	r2, r6
 80125b8:	463b      	mov	r3, r7
 80125ba:	f7ee f84d 	bl	8000658 <__aeabi_dmul>
 80125be:	a370      	add	r3, pc, #448	; (adr r3, 8012780 <atan+0x2c8>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	f7ed fe92 	bl	80002ec <__adddf3>
 80125c8:	4632      	mov	r2, r6
 80125ca:	463b      	mov	r3, r7
 80125cc:	f7ee f844 	bl	8000658 <__aeabi_dmul>
 80125d0:	a36d      	add	r3, pc, #436	; (adr r3, 8012788 <atan+0x2d0>)
 80125d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d6:	f7ed fe89 	bl	80002ec <__adddf3>
 80125da:	4632      	mov	r2, r6
 80125dc:	463b      	mov	r3, r7
 80125de:	f7ee f83b 	bl	8000658 <__aeabi_dmul>
 80125e2:	a36b      	add	r3, pc, #428	; (adr r3, 8012790 <atan+0x2d8>)
 80125e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e8:	f7ed fe80 	bl	80002ec <__adddf3>
 80125ec:	4632      	mov	r2, r6
 80125ee:	463b      	mov	r3, r7
 80125f0:	f7ee f832 	bl	8000658 <__aeabi_dmul>
 80125f4:	a368      	add	r3, pc, #416	; (adr r3, 8012798 <atan+0x2e0>)
 80125f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fa:	f7ed fe77 	bl	80002ec <__adddf3>
 80125fe:	4642      	mov	r2, r8
 8012600:	464b      	mov	r3, r9
 8012602:	f7ee f829 	bl	8000658 <__aeabi_dmul>
 8012606:	a366      	add	r3, pc, #408	; (adr r3, 80127a0 <atan+0x2e8>)
 8012608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260c:	4680      	mov	r8, r0
 801260e:	4689      	mov	r9, r1
 8012610:	4630      	mov	r0, r6
 8012612:	4639      	mov	r1, r7
 8012614:	f7ee f820 	bl	8000658 <__aeabi_dmul>
 8012618:	a363      	add	r3, pc, #396	; (adr r3, 80127a8 <atan+0x2f0>)
 801261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261e:	f7ed fe63 	bl	80002e8 <__aeabi_dsub>
 8012622:	4632      	mov	r2, r6
 8012624:	463b      	mov	r3, r7
 8012626:	f7ee f817 	bl	8000658 <__aeabi_dmul>
 801262a:	a361      	add	r3, pc, #388	; (adr r3, 80127b0 <atan+0x2f8>)
 801262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012630:	f7ed fe5a 	bl	80002e8 <__aeabi_dsub>
 8012634:	4632      	mov	r2, r6
 8012636:	463b      	mov	r3, r7
 8012638:	f7ee f80e 	bl	8000658 <__aeabi_dmul>
 801263c:	a35e      	add	r3, pc, #376	; (adr r3, 80127b8 <atan+0x300>)
 801263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012642:	f7ed fe51 	bl	80002e8 <__aeabi_dsub>
 8012646:	4632      	mov	r2, r6
 8012648:	463b      	mov	r3, r7
 801264a:	f7ee f805 	bl	8000658 <__aeabi_dmul>
 801264e:	a35c      	add	r3, pc, #368	; (adr r3, 80127c0 <atan+0x308>)
 8012650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012654:	f7ed fe48 	bl	80002e8 <__aeabi_dsub>
 8012658:	4632      	mov	r2, r6
 801265a:	463b      	mov	r3, r7
 801265c:	f7ed fffc 	bl	8000658 <__aeabi_dmul>
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	4640      	mov	r0, r8
 8012666:	4649      	mov	r1, r9
 8012668:	f7ed fe40 	bl	80002ec <__adddf3>
 801266c:	4622      	mov	r2, r4
 801266e:	462b      	mov	r3, r5
 8012670:	f7ed fff2 	bl	8000658 <__aeabi_dmul>
 8012674:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012678:	4602      	mov	r2, r0
 801267a:	460b      	mov	r3, r1
 801267c:	d14b      	bne.n	8012716 <atan+0x25e>
 801267e:	4620      	mov	r0, r4
 8012680:	4629      	mov	r1, r5
 8012682:	f7ed fe31 	bl	80002e8 <__aeabi_dsub>
 8012686:	e72c      	b.n	80124e2 <atan+0x2a>
 8012688:	ee10 0a10 	vmov	r0, s0
 801268c:	4b53      	ldr	r3, [pc, #332]	; (80127dc <atan+0x324>)
 801268e:	2200      	movs	r2, #0
 8012690:	4629      	mov	r1, r5
 8012692:	f7ed fe29 	bl	80002e8 <__aeabi_dsub>
 8012696:	4b51      	ldr	r3, [pc, #324]	; (80127dc <atan+0x324>)
 8012698:	4606      	mov	r6, r0
 801269a:	460f      	mov	r7, r1
 801269c:	2200      	movs	r2, #0
 801269e:	4620      	mov	r0, r4
 80126a0:	4629      	mov	r1, r5
 80126a2:	f7ed fe23 	bl	80002ec <__adddf3>
 80126a6:	4602      	mov	r2, r0
 80126a8:	460b      	mov	r3, r1
 80126aa:	4630      	mov	r0, r6
 80126ac:	4639      	mov	r1, r7
 80126ae:	f7ee f8fd 	bl	80008ac <__aeabi_ddiv>
 80126b2:	f04f 0a01 	mov.w	sl, #1
 80126b6:	4604      	mov	r4, r0
 80126b8:	460d      	mov	r5, r1
 80126ba:	e764      	b.n	8012586 <atan+0xce>
 80126bc:	4b49      	ldr	r3, [pc, #292]	; (80127e4 <atan+0x32c>)
 80126be:	429e      	cmp	r6, r3
 80126c0:	da1d      	bge.n	80126fe <atan+0x246>
 80126c2:	ee10 0a10 	vmov	r0, s0
 80126c6:	4b48      	ldr	r3, [pc, #288]	; (80127e8 <atan+0x330>)
 80126c8:	2200      	movs	r2, #0
 80126ca:	4629      	mov	r1, r5
 80126cc:	f7ed fe0c 	bl	80002e8 <__aeabi_dsub>
 80126d0:	4b45      	ldr	r3, [pc, #276]	; (80127e8 <atan+0x330>)
 80126d2:	4606      	mov	r6, r0
 80126d4:	460f      	mov	r7, r1
 80126d6:	2200      	movs	r2, #0
 80126d8:	4620      	mov	r0, r4
 80126da:	4629      	mov	r1, r5
 80126dc:	f7ed ffbc 	bl	8000658 <__aeabi_dmul>
 80126e0:	4b3e      	ldr	r3, [pc, #248]	; (80127dc <atan+0x324>)
 80126e2:	2200      	movs	r2, #0
 80126e4:	f7ed fe02 	bl	80002ec <__adddf3>
 80126e8:	4602      	mov	r2, r0
 80126ea:	460b      	mov	r3, r1
 80126ec:	4630      	mov	r0, r6
 80126ee:	4639      	mov	r1, r7
 80126f0:	f7ee f8dc 	bl	80008ac <__aeabi_ddiv>
 80126f4:	f04f 0a02 	mov.w	sl, #2
 80126f8:	4604      	mov	r4, r0
 80126fa:	460d      	mov	r5, r1
 80126fc:	e743      	b.n	8012586 <atan+0xce>
 80126fe:	462b      	mov	r3, r5
 8012700:	ee10 2a10 	vmov	r2, s0
 8012704:	4939      	ldr	r1, [pc, #228]	; (80127ec <atan+0x334>)
 8012706:	2000      	movs	r0, #0
 8012708:	f7ee f8d0 	bl	80008ac <__aeabi_ddiv>
 801270c:	f04f 0a03 	mov.w	sl, #3
 8012710:	4604      	mov	r4, r0
 8012712:	460d      	mov	r5, r1
 8012714:	e737      	b.n	8012586 <atan+0xce>
 8012716:	4b36      	ldr	r3, [pc, #216]	; (80127f0 <atan+0x338>)
 8012718:	4e36      	ldr	r6, [pc, #216]	; (80127f4 <atan+0x33c>)
 801271a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801271e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012722:	e9da 2300 	ldrd	r2, r3, [sl]
 8012726:	f7ed fddf 	bl	80002e8 <__aeabi_dsub>
 801272a:	4622      	mov	r2, r4
 801272c:	462b      	mov	r3, r5
 801272e:	f7ed fddb 	bl	80002e8 <__aeabi_dsub>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	e9d6 0100 	ldrd	r0, r1, [r6]
 801273a:	f7ed fdd5 	bl	80002e8 <__aeabi_dsub>
 801273e:	f1bb 0f00 	cmp.w	fp, #0
 8012742:	4604      	mov	r4, r0
 8012744:	460d      	mov	r5, r1
 8012746:	f6bf aed6 	bge.w	80124f6 <atan+0x3e>
 801274a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801274e:	461d      	mov	r5, r3
 8012750:	e6d1      	b.n	80124f6 <atan+0x3e>
 8012752:	a51d      	add	r5, pc, #116	; (adr r5, 80127c8 <atan+0x310>)
 8012754:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012758:	e6cd      	b.n	80124f6 <atan+0x3e>
 801275a:	bf00      	nop
 801275c:	f3af 8000 	nop.w
 8012760:	54442d18 	.word	0x54442d18
 8012764:	bff921fb 	.word	0xbff921fb
 8012768:	8800759c 	.word	0x8800759c
 801276c:	7e37e43c 	.word	0x7e37e43c
 8012770:	e322da11 	.word	0xe322da11
 8012774:	3f90ad3a 	.word	0x3f90ad3a
 8012778:	24760deb 	.word	0x24760deb
 801277c:	3fa97b4b 	.word	0x3fa97b4b
 8012780:	a0d03d51 	.word	0xa0d03d51
 8012784:	3fb10d66 	.word	0x3fb10d66
 8012788:	c54c206e 	.word	0xc54c206e
 801278c:	3fb745cd 	.word	0x3fb745cd
 8012790:	920083ff 	.word	0x920083ff
 8012794:	3fc24924 	.word	0x3fc24924
 8012798:	5555550d 	.word	0x5555550d
 801279c:	3fd55555 	.word	0x3fd55555
 80127a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80127a4:	bfa2b444 	.word	0xbfa2b444
 80127a8:	52defd9a 	.word	0x52defd9a
 80127ac:	3fadde2d 	.word	0x3fadde2d
 80127b0:	af749a6d 	.word	0xaf749a6d
 80127b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80127b8:	fe231671 	.word	0xfe231671
 80127bc:	3fbc71c6 	.word	0x3fbc71c6
 80127c0:	9998ebc4 	.word	0x9998ebc4
 80127c4:	3fc99999 	.word	0x3fc99999
 80127c8:	54442d18 	.word	0x54442d18
 80127cc:	3ff921fb 	.word	0x3ff921fb
 80127d0:	440fffff 	.word	0x440fffff
 80127d4:	7ff00000 	.word	0x7ff00000
 80127d8:	3fdbffff 	.word	0x3fdbffff
 80127dc:	3ff00000 	.word	0x3ff00000
 80127e0:	3ff2ffff 	.word	0x3ff2ffff
 80127e4:	40038000 	.word	0x40038000
 80127e8:	3ff80000 	.word	0x3ff80000
 80127ec:	bff00000 	.word	0xbff00000
 80127f0:	08012f38 	.word	0x08012f38
 80127f4:	08012f18 	.word	0x08012f18

080127f8 <fabs>:
 80127f8:	ec51 0b10 	vmov	r0, r1, d0
 80127fc:	ee10 2a10 	vmov	r2, s0
 8012800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012804:	ec43 2b10 	vmov	d0, r2, r3
 8012808:	4770      	bx	lr

0801280a <finite>:
 801280a:	b082      	sub	sp, #8
 801280c:	ed8d 0b00 	vstr	d0, [sp]
 8012810:	9801      	ldr	r0, [sp, #4]
 8012812:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012816:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801281a:	0fc0      	lsrs	r0, r0, #31
 801281c:	b002      	add	sp, #8
 801281e:	4770      	bx	lr

08012820 <scalbn>:
 8012820:	b570      	push	{r4, r5, r6, lr}
 8012822:	ec55 4b10 	vmov	r4, r5, d0
 8012826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801282a:	4606      	mov	r6, r0
 801282c:	462b      	mov	r3, r5
 801282e:	b99a      	cbnz	r2, 8012858 <scalbn+0x38>
 8012830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012834:	4323      	orrs	r3, r4
 8012836:	d036      	beq.n	80128a6 <scalbn+0x86>
 8012838:	4b39      	ldr	r3, [pc, #228]	; (8012920 <scalbn+0x100>)
 801283a:	4629      	mov	r1, r5
 801283c:	ee10 0a10 	vmov	r0, s0
 8012840:	2200      	movs	r2, #0
 8012842:	f7ed ff09 	bl	8000658 <__aeabi_dmul>
 8012846:	4b37      	ldr	r3, [pc, #220]	; (8012924 <scalbn+0x104>)
 8012848:	429e      	cmp	r6, r3
 801284a:	4604      	mov	r4, r0
 801284c:	460d      	mov	r5, r1
 801284e:	da10      	bge.n	8012872 <scalbn+0x52>
 8012850:	a32b      	add	r3, pc, #172	; (adr r3, 8012900 <scalbn+0xe0>)
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	e03a      	b.n	80128ce <scalbn+0xae>
 8012858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801285c:	428a      	cmp	r2, r1
 801285e:	d10c      	bne.n	801287a <scalbn+0x5a>
 8012860:	ee10 2a10 	vmov	r2, s0
 8012864:	4620      	mov	r0, r4
 8012866:	4629      	mov	r1, r5
 8012868:	f7ed fd40 	bl	80002ec <__adddf3>
 801286c:	4604      	mov	r4, r0
 801286e:	460d      	mov	r5, r1
 8012870:	e019      	b.n	80128a6 <scalbn+0x86>
 8012872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012876:	460b      	mov	r3, r1
 8012878:	3a36      	subs	r2, #54	; 0x36
 801287a:	4432      	add	r2, r6
 801287c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012880:	428a      	cmp	r2, r1
 8012882:	dd08      	ble.n	8012896 <scalbn+0x76>
 8012884:	2d00      	cmp	r5, #0
 8012886:	a120      	add	r1, pc, #128	; (adr r1, 8012908 <scalbn+0xe8>)
 8012888:	e9d1 0100 	ldrd	r0, r1, [r1]
 801288c:	da1c      	bge.n	80128c8 <scalbn+0xa8>
 801288e:	a120      	add	r1, pc, #128	; (adr r1, 8012910 <scalbn+0xf0>)
 8012890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012894:	e018      	b.n	80128c8 <scalbn+0xa8>
 8012896:	2a00      	cmp	r2, #0
 8012898:	dd08      	ble.n	80128ac <scalbn+0x8c>
 801289a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801289e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80128a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80128a6:	ec45 4b10 	vmov	d0, r4, r5
 80128aa:	bd70      	pop	{r4, r5, r6, pc}
 80128ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80128b0:	da19      	bge.n	80128e6 <scalbn+0xc6>
 80128b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80128b6:	429e      	cmp	r6, r3
 80128b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80128bc:	dd0a      	ble.n	80128d4 <scalbn+0xb4>
 80128be:	a112      	add	r1, pc, #72	; (adr r1, 8012908 <scalbn+0xe8>)
 80128c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1e2      	bne.n	801288e <scalbn+0x6e>
 80128c8:	a30f      	add	r3, pc, #60	; (adr r3, 8012908 <scalbn+0xe8>)
 80128ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ce:	f7ed fec3 	bl	8000658 <__aeabi_dmul>
 80128d2:	e7cb      	b.n	801286c <scalbn+0x4c>
 80128d4:	a10a      	add	r1, pc, #40	; (adr r1, 8012900 <scalbn+0xe0>)
 80128d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d0b8      	beq.n	8012850 <scalbn+0x30>
 80128de:	a10e      	add	r1, pc, #56	; (adr r1, 8012918 <scalbn+0xf8>)
 80128e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128e4:	e7b4      	b.n	8012850 <scalbn+0x30>
 80128e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80128ea:	3236      	adds	r2, #54	; 0x36
 80128ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80128f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80128f4:	4620      	mov	r0, r4
 80128f6:	4b0c      	ldr	r3, [pc, #48]	; (8012928 <scalbn+0x108>)
 80128f8:	2200      	movs	r2, #0
 80128fa:	e7e8      	b.n	80128ce <scalbn+0xae>
 80128fc:	f3af 8000 	nop.w
 8012900:	c2f8f359 	.word	0xc2f8f359
 8012904:	01a56e1f 	.word	0x01a56e1f
 8012908:	8800759c 	.word	0x8800759c
 801290c:	7e37e43c 	.word	0x7e37e43c
 8012910:	8800759c 	.word	0x8800759c
 8012914:	fe37e43c 	.word	0xfe37e43c
 8012918:	c2f8f359 	.word	0xc2f8f359
 801291c:	81a56e1f 	.word	0x81a56e1f
 8012920:	43500000 	.word	0x43500000
 8012924:	ffff3cb0 	.word	0xffff3cb0
 8012928:	3c900000 	.word	0x3c900000

0801292c <_init>:
 801292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292e:	bf00      	nop
 8012930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012932:	bc08      	pop	{r3}
 8012934:	469e      	mov	lr, r3
 8012936:	4770      	bx	lr

08012938 <_fini>:
 8012938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801293a:	bf00      	nop
 801293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801293e:	bc08      	pop	{r3}
 8012940:	469e      	mov	lr, r3
 8012942:	4770      	bx	lr
