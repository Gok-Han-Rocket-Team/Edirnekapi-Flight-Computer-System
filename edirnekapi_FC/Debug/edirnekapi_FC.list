
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001772c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  08017900  08017900  00027900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185c8  080185c8  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080185c8  080185c8  000285c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185d0  080185d0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185d0  080185d0  000285d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185d4  080185d4  000285d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080185d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004774  20000200  080187d8  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004974  080187d8  00034974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a34  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004def  00000000  00000000  00050c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00055a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  00057268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6be  00000000  00000000  00058888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c32  00000000  00000000  00082f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6134  00000000  00000000  000a8b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ecac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f30  00000000  00000000  0018ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080178e4 	.word	0x080178e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080178e4 	.word	0x080178e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0000      	movs	r0, r0
	...

080012f8 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001302:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001328 <sqr+0x30>
 8001306:	ed97 0b00 	vldr	d0, [r7]
 800130a:	f014 fca1 	bl	8015c50 <pow>
 800130e:	eeb0 7a40 	vmov.f32	s14, s0
 8001312:	eef0 7a60 	vmov.f32	s15, s1
}
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000

08001330 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(BME_280_t* BME)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	//velocity measuiring
	currentTime_1 = (float)HAL_GetTick() / 1000.0;
 8001338:	f006 f86e 	bl	8007418 <HAL_GetTick>
 800133c:	ee07 0a90 	vmov	s15, r0
 8001340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001344:	ee17 0a90 	vmov	r0, s15
 8001348:	f7ff f91e 	bl	8000588 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <algorithm_1_update+0x218>)
 8001352:	f7ff fa9b 	bl	800088c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc63 	bl	8000c28 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a79      	ldr	r2, [pc, #484]	; (800154c <algorithm_1_update+0x21c>)
 8001366:	6013      	str	r3, [r2, #0]
  if(fabs(currentTime_1 - lastTime_1) > 0.1)
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <algorithm_1_update+0x21c>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <algorithm_1_update+0x220>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	ee17 0a90 	vmov	r0, s15
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	a36e      	add	r3, pc, #440	; (adr r3, 8001540 <algorithm_1_update+0x210>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff fbe5 	bl	8000b58 <__aeabi_dcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <algorithm_1_update+0xa6>
  {
	  float currentAltitude = BME->altitude;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	60fb      	str	r3, [r7, #12]
	  BME->velocity = (currentAltitude - lastAltitude_1) / (currentTime_1 - lastTime_1);
 800139a:	4b6e      	ldr	r3, [pc, #440]	; (8001554 <algorithm_1_update+0x224>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <algorithm_1_update+0x21c>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <algorithm_1_update+0x220>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  lastAltitude_1 = currentAltitude;
 80013c2:	4a64      	ldr	r2, [pc, #400]	; (8001554 <algorithm_1_update+0x224>)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6013      	str	r3, [r2, #0]
	  lastTime_1 = currentTime_1;
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <algorithm_1_update+0x21c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a60      	ldr	r2, [pc, #384]	; (8001550 <algorithm_1_update+0x220>)
 80013ce:	6013      	str	r3, [r2, #0]
	  isUpdated_1 = 1;
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <algorithm_1_update+0x228>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
  }

  if(isUpdated_1)
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <algorithm_1_update+0x228>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80ab 	beq.w	8001536 <algorithm_1_update+0x206>
  {
	isUpdated_1 = 0;
 80013e0:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <algorithm_1_update+0x228>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

	//rising detection
	if(BME->velocity > RISING_VELOCITY_TRESHOLD && isRising == 0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013ec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd09      	ble.n	800140e <algorithm_1_update+0xde>
 80013fa:	4b58      	ldr	r3, [pc, #352]	; (800155c <algorithm_1_update+0x22c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d105      	bne.n	800140e <algorithm_1_update+0xde>
	{
	  risingCounter++;
 8001402:	4b57      	ldr	r3, [pc, #348]	; (8001560 <algorithm_1_update+0x230>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a55      	ldr	r2, [pc, #340]	; (8001560 <algorithm_1_update+0x230>)
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e002      	b.n	8001414 <algorithm_1_update+0xe4>
	}
	else
	{
	  risingCounter = 0;
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <algorithm_1_update+0x230>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	}

	if(risingCounter == 1 && isRising == 0 && isFalling == 0 )
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <algorithm_1_update+0x230>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d11c      	bne.n	8001456 <algorithm_1_update+0x126>
 800141c:	4b4f      	ldr	r3, [pc, #316]	; (800155c <algorithm_1_update+0x22c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d118      	bne.n	8001456 <algorithm_1_update+0x126>
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <algorithm_1_update+0x234>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d114      	bne.n	8001456 <algorithm_1_update+0x126>
	{
	  isRising = 1;
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <algorithm_1_update+0x22c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
	  algorithm_1_start_time_u32 = HAL_GetTick();
 8001432:	f005 fff1 	bl	8007418 <HAL_GetTick>
 8001436:	4603      	mov	r3, r0
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <algorithm_1_update+0x238>)
 800143a:	6013      	str	r3, [r2, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <algorithm_1_update+0x23c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <algorithm_1_update+0x23c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2a02      	cmp	r2, #2
 8001448:	bf38      	it	cc
 800144a:	2202      	movcc	r2, #2
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001450:	4847      	ldr	r0, [pc, #284]	; (8001570 <algorithm_1_update+0x240>)
 8001452:	f002 f98b 	bl	800376c <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BME->velocity < FALLING_VELOCITY_TRESHOLD && HAL_GetTick() - algorithm_1_start_time_u32 > ALGORITHM_1_LOCKOUT_TIME)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800145c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d50f      	bpl.n	800148a <algorithm_1_update+0x15a>
 800146a:	f005 ffd5 	bl	8007418 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <algorithm_1_update+0x238>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800147a:	4293      	cmp	r3, r2
 800147c:	d905      	bls.n	800148a <algorithm_1_update+0x15a>
	{
	  fallingCounter++;
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <algorithm_1_update+0x244>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a3b      	ldr	r2, [pc, #236]	; (8001574 <algorithm_1_update+0x244>)
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e002      	b.n	8001490 <algorithm_1_update+0x160>
	}
	else
	{
	  fallingCounter = 0;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <algorithm_1_update+0x244>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	}

	if(fallingCounter == 1 && isRising == 1 && isFalling == 0 && BME->altitude > ARMING_ALTITUDE_1)
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <algorithm_1_update+0x244>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d120      	bne.n	80014da <algorithm_1_update+0x1aa>
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <algorithm_1_update+0x22c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d11c      	bne.n	80014da <algorithm_1_update+0x1aa>
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <algorithm_1_update+0x234>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <algorithm_1_update+0x1aa>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014ae:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001578 <algorithm_1_update+0x248>
 80014b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	dd0e      	ble.n	80014da <algorithm_1_update+0x1aa>
	{
	  isFalling = 1;
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <algorithm_1_update+0x234>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
	  saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <algorithm_1_update+0x23c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <algorithm_1_update+0x23c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2a04      	cmp	r2, #4
 80014ce:	bf38      	it	cc
 80014d0:	2204      	movcc	r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
	  deploy_p_1();
 80014d6:	f003 fec7 	bl	8005268 <deploy_p_1>

	//Second Parachute
	static int second_p_counter_1 = 0;
	static uint8_t is_second_p_OK_1 = 0;

	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling == 1 && is_second_p_OK_1 == 0)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014e0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800157c <algorithm_1_update+0x24c>
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d50d      	bpl.n	800150a <algorithm_1_update+0x1da>
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <algorithm_1_update+0x234>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d109      	bne.n	800150a <algorithm_1_update+0x1da>
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <algorithm_1_update+0x250>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <algorithm_1_update+0x1da>
	{
		second_p_counter_1++;
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <algorithm_1_update+0x254>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <algorithm_1_update+0x254>)
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e002      	b.n	8001510 <algorithm_1_update+0x1e0>
	}
	else{
		second_p_counter_1 = 0;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <algorithm_1_update+0x254>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
	}
	if(second_p_counter_1 == 10)
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <algorithm_1_update+0x254>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d10e      	bne.n	8001536 <algorithm_1_update+0x206>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <algorithm_1_update+0x23c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <algorithm_1_update+0x23c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2a05      	cmp	r2, #5
 8001524:	bf38      	it	cc
 8001526:	2205      	movcc	r2, #5
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
		is_second_p_OK_1 = 1;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <algorithm_1_update+0x250>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 8001532:	f003 fea9 	bl	8005288 <deploy_p_2>
	}
  }
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	9999999a 	.word	0x9999999a
 8001544:	3fb99999 	.word	0x3fb99999
 8001548:	408f4000 	.word	0x408f4000
 800154c:	2000021c 	.word	0x2000021c
 8001550:	20000220 	.word	0x20000220
 8001554:	20000224 	.word	0x20000224
 8001558:	20000248 	.word	0x20000248
 800155c:	20000246 	.word	0x20000246
 8001560:	20000228 	.word	0x20000228
 8001564:	20000244 	.word	0x20000244
 8001568:	2000023c 	.word	0x2000023c
 800156c:	20000008 	.word	0x20000008
 8001570:	2000087c 	.word	0x2000087c
 8001574:	2000022c 	.word	0x2000022c
 8001578:	447a0000 	.word	0x447a0000
 800157c:	440e8000 	.word	0x440e8000
 8001580:	2000024a 	.word	0x2000024a
 8001584:	2000024c 	.word	0x2000024c

08001588 <algorithm_2_update>:

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fff5 	bl	8000588 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	ec43 2b10 	vmov	d0, r2, r3
 80015a6:	f7ff fea7 	bl	80012f8 <sqr>
 80015aa:	ec55 4b10 	vmov	r4, r5, d0
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffe7 	bl	8000588 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b10 	vmov	d0, r2, r3
 80015c2:	f7ff fe99 	bl	80012f8 <sqr>
 80015c6:	ec53 2b10 	vmov	r2, r3, d0
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe7d 	bl	80002cc <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffd1 	bl	8000588 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ec43 2b10 	vmov	d0, r2, r3
 80015ee:	f7ff fe83 	bl	80012f8 <sqr>
 80015f2:	ec53 2b10 	vmov	r2, r3, d0
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe fe67 	bl	80002cc <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fb0f 	bl	8000c28 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	ee00 3a10 	vmov	s0, r3
 8001610:	f014 fbba 	bl	8015d88 <sqrtf>
 8001614:	eef0 7a40 	vmov.f32	s15, s0
 8001618:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80018b8 <algorithm_2_update+0x330>
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd39      	ble.n	800169a <algorithm_2_update+0x112>
 8001626:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <algorithm_2_update+0x334>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d135      	bne.n	800169a <algorithm_2_update+0x112>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001634:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80018c0 <algorithm_2_update+0x338>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d516      	bpl.n	8001670 <algorithm_2_update+0xe8>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001648:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80018c4 <algorithm_2_update+0x33c>
 800164c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	dd0c      	ble.n	8001670 <algorithm_2_update+0xe8>
			saved_datas->base_altitude = BME->altitude + saved_datas->base_altitude;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800165c:	4b9a      	ldr	r3, [pc, #616]	; (80018c8 <algorithm_2_update+0x340>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001664:	4b98      	ldr	r3, [pc, #608]	; (80018c8 <algorithm_2_update+0x340>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		isRising_2 = 1;
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <algorithm_2_update+0x334>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
		algorithm_2_start_time_u32 = HAL_GetTick();
 8001676:	f005 fecf 	bl	8007418 <HAL_GetTick>
 800167a:	4603      	mov	r3, r0
 800167c:	4a93      	ldr	r2, [pc, #588]	; (80018cc <algorithm_2_update+0x344>)
 800167e:	6013      	str	r3, [r2, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : saved_datas->r_status;
 8001680:	4b91      	ldr	r3, [pc, #580]	; (80018c8 <algorithm_2_update+0x340>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	4b90      	ldr	r3, [pc, #576]	; (80018c8 <algorithm_2_update+0x340>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2a02      	cmp	r2, #2
 800168c:	bf38      	it	cc
 800168e:	2202      	movcc	r2, #2
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 8001694:	488e      	ldr	r0, [pc, #568]	; (80018d0 <algorithm_2_update+0x348>)
 8001696:	f002 f869 	bl	800376c <ext_pin_open>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 12)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80016a0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80018d4 <algorithm_2_update+0x34c>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d50c      	bpl.n	80016c8 <algorithm_2_update+0x140>
 80016ae:	4b83      	ldr	r3, [pc, #524]	; (80018bc <algorithm_2_update+0x334>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <algorithm_2_update+0x140>
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <algorithm_2_update+0x350>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b0b      	cmp	r3, #11
 80016bc:	dc04      	bgt.n	80016c8 <algorithm_2_update+0x140>
	{
		burnout_counter++;
 80016be:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <algorithm_2_update+0x350>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a84      	ldr	r2, [pc, #528]	; (80018d8 <algorithm_2_update+0x350>)
 80016c6:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 80016c8:	4b83      	ldr	r3, [pc, #524]	; (80018d8 <algorithm_2_update+0x350>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b0a      	cmp	r3, #10
 80016ce:	d10c      	bne.n	80016ea <algorithm_2_update+0x162>
	{
		saved_datas->r_status = saved_datas->r_status < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : saved_datas->r_status;
 80016d0:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <algorithm_2_update+0x340>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <algorithm_2_update+0x340>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2a03      	cmp	r2, #3
 80016dc:	bf38      	it	cc
 80016de:	2203      	movcc	r2, #3
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80016e4:	487a      	ldr	r0, [pc, #488]	; (80018d0 <algorithm_2_update+0x348>)
 80016e6:	f002 f841 	bl	800376c <ext_pin_open>
	}

	//quaternion setting to zero
	if((HAL_GetTick() - algorithm_2_start_time_u32) > QUATERNION_ZERO_TIME && is_quaternion_zeroed == 0 && isRising_2 == 1)
 80016ea:	f005 fe95 	bl	8007418 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b76      	ldr	r3, [pc, #472]	; (80018cc <algorithm_2_update+0x344>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d90f      	bls.n	800171e <algorithm_2_update+0x196>
 80016fe:	4b77      	ldr	r3, [pc, #476]	; (80018dc <algorithm_2_update+0x354>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10b      	bne.n	800171e <algorithm_2_update+0x196>
 8001706:	4b6d      	ldr	r3, [pc, #436]	; (80018bc <algorithm_2_update+0x334>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <algorithm_2_update+0x196>
	{
	  quaternionSet_zero();
 800170e:	f004 fa31 	bl	8005b74 <quaternionSet_zero>
	  is_quaternion_zeroed = 1;
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <algorithm_2_update+0x354>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
	  ext_pin_open(&buzzer);
 8001718:	486d      	ldr	r0, [pc, #436]	; (80018d0 <algorithm_2_update+0x348>)
 800171a:	f002 f827 	bl	800376c <ext_pin_open>
	}

	//Falling detection || First parachute
	if(BMI->angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && HAL_GetTick() - algorithm_2_start_time_u32 > ALGORITHM_2_LOCKOUT_TIME)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8001724:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80018e0 <algorithm_2_update+0x358>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd20      	ble.n	8001774 <algorithm_2_update+0x1ec>
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <algorithm_2_update+0x334>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d11c      	bne.n	8001774 <algorithm_2_update+0x1ec>
 800173a:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <algorithm_2_update+0x35c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <algorithm_2_update+0x1ec>
 8001742:	f005 fe69 	bl	8007418 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	4b60      	ldr	r3, [pc, #384]	; (80018cc <algorithm_2_update+0x344>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001752:	4293      	cmp	r3, r2
 8001754:	d90e      	bls.n	8001774 <algorithm_2_update+0x1ec>
	{
		isFalling_2 = 1;
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <algorithm_2_update+0x35c>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : saved_datas->r_status;
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <algorithm_2_update+0x340>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <algorithm_2_update+0x340>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2a04      	cmp	r2, #4
 8001768:	bf38      	it	cc
 800176a:	2204      	movcc	r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 8001770:	f003 fd7a 	bl	8005268 <deploy_p_1>
	}

	if(is_BME_ok == 1)
 8001774:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <algorithm_2_update+0x360>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d12d      	bne.n	80017d8 <algorithm_2_update+0x250>
	{
		//Second Parachute
		if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001782:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80018ec <algorithm_2_update+0x364>
 8001786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d50d      	bpl.n	80017ac <algorithm_2_update+0x224>
 8001790:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <algorithm_2_update+0x35c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d109      	bne.n	80017ac <algorithm_2_update+0x224>
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <algorithm_2_update+0x368>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <algorithm_2_update+0x224>
		{
			secondP_counter++;
 80017a0:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <algorithm_2_update+0x36c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a53      	ldr	r2, [pc, #332]	; (80018f4 <algorithm_2_update+0x36c>)
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e002      	b.n	80017b2 <algorithm_2_update+0x22a>
		}
		else{
			secondP_counter = 0;
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <algorithm_2_update+0x36c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
		}
		if(secondP_counter == 10)
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <algorithm_2_update+0x36c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d10e      	bne.n	80017d8 <algorithm_2_update+0x250>
		{
			saved_datas->r_status = saved_datas->r_status < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : saved_datas->r_status;
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <algorithm_2_update+0x340>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <algorithm_2_update+0x340>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2a05      	cmp	r2, #5
 80017c6:	bf38      	it	cc
 80017c8:	2205      	movcc	r2, #5
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]
			is_secondP_OK = 1;
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <algorithm_2_update+0x368>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
			deploy_p_2();
 80017d4:	f003 fd58 	bl	8005288 <deploy_p_2>
		}
	}
	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f7ff fd87 	bl	80012f8 <sqr>
 80017ea:	ec55 4b10 	vmov	r4, r5, d0
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	f7ff fd7c 	bl	80012f8 <sqr>
 8001800:	ec53 2b10 	vmov	r2, r3, d0
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd60 	bl	80002cc <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800181a:	eeb0 0a47 	vmov.f32	s0, s14
 800181e:	eef0 0a67 	vmov.f32	s1, s15
 8001822:	f7ff fd69 	bl	80012f8 <sqr>
 8001826:	ec53 2b10 	vmov	r2, r3, d0
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fd4d 	bl	80002cc <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f014 fa75 	bl	8015d30 <sqrt>
 8001846:	ec51 0b10 	vmov	r0, r1, d0
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <algorithm_2_update+0x370>)
 8001850:	f7ff f964 	bl	8000b1c <__aeabi_dcmplt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d011      	beq.n	800187e <algorithm_2_update+0x2f6>
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <algorithm_2_update+0x35c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <algorithm_2_update+0x2f6>
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <algorithm_2_update+0x368>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d109      	bne.n	800187e <algorithm_2_update+0x2f6>
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <algorithm_2_update+0x374>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <algorithm_2_update+0x2f6>
	{
			TD_counter++;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <algorithm_2_update+0x378>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a21      	ldr	r2, [pc, #132]	; (8001900 <algorithm_2_update+0x378>)
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e002      	b.n	8001884 <algorithm_2_update+0x2fc>
	}
	else{
		TD_counter = 0;
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <algorithm_2_update+0x378>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <algorithm_2_update+0x378>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188c:	dd0f      	ble.n	80018ae <algorithm_2_update+0x326>
	{
		is_TD = 1;
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <algorithm_2_update+0x374>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
		saved_datas->r_status = saved_datas->r_status < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : saved_datas->r_status;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <algorithm_2_update+0x340>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <algorithm_2_update+0x340>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2a06      	cmp	r2, #6
 80018a0:	bf38      	it	cc
 80018a2:	2206      	movcc	r2, #6
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <algorithm_2_update+0x348>)
 80018aa:	f001 ff5f 	bl	800376c <ext_pin_open>
	}
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	453b8000 	.word	0x453b8000
 80018bc:	20000247 	.word	0x20000247
 80018c0:	43480000 	.word	0x43480000
 80018c4:	c3480000 	.word	0xc3480000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000240 	.word	0x20000240
 80018d0:	2000087c 	.word	0x2000087c
 80018d4:	c4fa0000 	.word	0xc4fa0000
 80018d8:	20000250 	.word	0x20000250
 80018dc:	20000230 	.word	0x20000230
 80018e0:	42a00000 	.word	0x42a00000
 80018e4:	20000245 	.word	0x20000245
 80018e8:	200008dc 	.word	0x200008dc
 80018ec:	440e8000 	.word	0x440e8000
 80018f0:	20000249 	.word	0x20000249
 80018f4:	20000238 	.word	0x20000238
 80018f8:	40240000 	.word	0x40240000
 80018fc:	20000254 	.word	0x20000254
 8001900:	20000234 	.word	0x20000234

08001904 <bme280_getVals>:
float array[filterSize];

int currentIndex = 0;

static void bme280_getVals()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <bme280_getVals+0xac>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	9302      	str	r3, [sp, #8]
 8001912:	2301      	movs	r3, #1
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2301      	movs	r3, #1
 800191c:	22f3      	movs	r2, #243	; 0xf3
 800191e:	21ec      	movs	r1, #236	; 0xec
 8001920:	f007 fcc6 	bl	80092b0 <HAL_I2C_Mem_Read>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <bme280_getVals+0xb0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 8001932:	793b      	ldrb	r3, [r7, #4]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d035      	beq.n	80019a8 <bme280_getVals+0xa4>
	{
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <bme280_getVals+0xac>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	2314      	movs	r3, #20
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2308      	movs	r3, #8
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2301      	movs	r3, #1
 800194e:	22f7      	movs	r2, #247	; 0xf7
 8001950:	21ec      	movs	r1, #236	; 0xec
 8001952:	f007 fcad 	bl	80092b0 <HAL_I2C_Mem_Read>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
		if (retVal == HAL_OK){
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d123      	bne.n	80019a8 <bme280_getVals+0xa4>
			BME->isUpdated = 1;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <bme280_getVals+0xb0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	031a      	lsls	r2, r3, #12
 800196e:	7a3b      	ldrb	r3, [r7, #8]
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4313      	orrs	r3, r2
 8001974:	7a7a      	ldrb	r2, [r7, #9]
 8001976:	0912      	lsrs	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	431a      	orrs	r2, r3
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <bme280_getVals+0xb0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
			BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 8001982:	793b      	ldrb	r3, [r7, #4]
 8001984:	031a      	lsls	r2, r3, #12
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4313      	orrs	r3, r2
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	0912      	lsrs	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	431a      	orrs	r2, r3
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <bme280_getVals+0xb0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	609a      	str	r2, [r3, #8]
			BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 800199a:	7abb      	ldrb	r3, [r7, #10]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	7afa      	ldrb	r2, [r7, #11]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <bme280_getVals+0xb0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60da      	str	r2, [r3, #12]
		}
	}
	UNUSED(retVal);
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000258 	.word	0x20000258
 80019b4:	2000025c 	.word	0x2000025c

080019b8 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <bme280_get_altitude+0xd0>)
 80019c0:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80019c2:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <bme280_get_altitude+0xd4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019d2:	ee16 0a90 	vmov	r0, s13
 80019d6:	f7fe fdd7 	bl	8000588 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001a78 <bme280_get_altitude+0xc0>
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f014 f933 	bl	8015c50 <pow>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	4927      	ldr	r1, [pc, #156]	; (8001a90 <bme280_get_altitude+0xd8>)
 80019f4:	f7fe fc68 	bl	80002c8 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	a31f      	add	r3, pc, #124	; (adr r3, 8001a80 <bme280_get_altitude+0xc8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fe17 	bl	8000638 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f909 	bl	8000c28 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - saved_datas->base_altitude;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <bme280_get_altitude+0xd4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	ed97 7a00 	vldr	s14, [r7]
 8001a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <bme280_get_altitude+0xd4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dc00      	bgt.n	8001a4e <bme280_get_altitude+0x96>
	{
		saved_datas->max_altitude = BME->altitude;
	}
}
 8001a4c:	e00e      	b.n	8001a6c <bme280_get_altitude+0xb4>
	if(BME->altitude > saved_datas->max_altitude && saved_datas->base_altitude != 0.0)
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d005      	beq.n	8001a6c <bme280_get_altitude+0xb4>
		saved_datas->max_altitude = BME->altitude;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <bme280_get_altitude+0xd4>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <bme280_get_altitude+0xdc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	ccd9456c 	.word	0xccd9456c
 8001a7c:	3fc85b95 	.word	0x3fc85b95
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40e5a540 	.word	0x40e5a540
 8001a88:	447d5000 	.word	0x447d5000
 8001a8c:	2000025c 	.word	0x2000025c
 8001a90:	3ff00000 	.word	0x3ff00000
 8001a94:	20000008 	.word	0x20000008

08001a98 <bme280_config>:
void bme280_config()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af04      	add	r7, sp, #16
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	saved_datas->base_altitude = 0.0;
 8001a9e:	4b9a      	ldr	r3, [pc, #616]	; (8001d08 <bme280_config+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(I2C_);
 8001aa8:	4b98      	ldr	r3, [pc, #608]	; (8001d0c <bme280_config+0x274>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 fad5 	bl	800905c <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f005 fcbc 	bl	8007430 <HAL_Delay>
	HAL_I2C_Init(I2C_);
 8001ab8:	4b94      	ldr	r3, [pc, #592]	; (8001d0c <bme280_config+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 f989 	bl	8008dd4 <HAL_I2C_Init>
	HAL_Delay(5);
 8001ac2:	2005      	movs	r0, #5
 8001ac4:	f005 fcb4 	bl	8007430 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 8001ac8:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <bme280_config+0x274>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	23c8      	movs	r3, #200	; 0xc8
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	2288      	movs	r2, #136	; 0x88
 8001adc:	21ec      	movs	r1, #236	; 0xec
 8001ade:	f007 fbe7 	bl	80092b0 <HAL_I2C_Mem_Read>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 8001ae6:	793b      	ldrb	r3, [r7, #4]
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b87      	ldr	r3, [pc, #540]	; (8001d10 <bme280_config+0x278>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	b292      	uxth	r2, r2
 8001afc:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	b219      	sxth	r1, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <bme280_config+0x278>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	b212      	sxth	r2, r2
 8001b12:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	b219      	sxth	r1, r3
 8001b18:	7a7b      	ldrb	r3, [r7, #9]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <bme280_config+0x278>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	b212      	sxth	r2, r2
 8001b28:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001b2a:	7abb      	ldrb	r3, [r7, #10]
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <bme280_config+0x278>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	b219      	sxth	r1, r3
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <bme280_config+0x278>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	b212      	sxth	r2, r2
 8001b56:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	b219      	sxth	r1, r3
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <bme280_config+0x278>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	b212      	sxth	r2, r2
 8001b6c:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001b6e:	7c3b      	ldrb	r3, [r7, #16]
 8001b70:	b219      	sxth	r1, r3
 8001b72:	7c7b      	ldrb	r3, [r7, #17]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <bme280_config+0x278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	b212      	sxth	r2, r2
 8001b82:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001b84:	7cbb      	ldrb	r3, [r7, #18]
 8001b86:	b219      	sxth	r1, r3
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <bme280_config+0x278>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	b212      	sxth	r2, r2
 8001b98:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001b9a:	7d3b      	ldrb	r3, [r7, #20]
 8001b9c:	b219      	sxth	r1, r3
 8001b9e:	7d7b      	ldrb	r3, [r7, #21]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <bme280_config+0x278>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	b212      	sxth	r2, r2
 8001bae:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001bb0:	7dbb      	ldrb	r3, [r7, #22]
 8001bb2:	b219      	sxth	r1, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <bme280_config+0x278>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001bc6:	7e3b      	ldrb	r3, [r7, #24]
 8001bc8:	b219      	sxth	r1, r3
 8001bca:	7e7b      	ldrb	r3, [r7, #25]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <bme280_config+0x278>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	b212      	sxth	r2, r2
 8001bda:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001bdc:	7ebb      	ldrb	r3, [r7, #26]
 8001bde:	b219      	sxth	r1, r3
 8001be0:	7efb      	ldrb	r3, [r7, #27]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <bme280_config+0x278>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	b212      	sxth	r2, r2
 8001bf0:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <bme280_config+0x278>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	7f3a      	ldrb	r2, [r7, #28]
 8001bfa:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <bme280_config+0x274>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	2332      	movs	r3, #50	; 0x32
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2307      	movs	r3, #7
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	22e1      	movs	r2, #225	; 0xe1
 8001c10:	21ec      	movs	r1, #236	; 0xec
 8001c12:	f007 fb4d 	bl	80092b0 <HAL_I2C_Mem_Read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	77fb      	strb	r3, [r7, #31]
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001c1a:	793b      	ldrb	r3, [r7, #4]
 8001c1c:	b219      	sxth	r1, r3
 8001c1e:	797b      	ldrb	r3, [r7, #5]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <bme280_config+0x278>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	b212      	sxth	r2, r2
 8001c2e:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <bme280_config+0x278>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	79ba      	ldrb	r2, [r7, #6]
 8001c38:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 8001c3a:	7a3b      	ldrb	r3, [r7, #8]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	b219      	sxth	r1, r3
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <bme280_config+0x278>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	b212      	sxth	r2, r2
 8001c54:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001c56:	7a3b      	ldrb	r3, [r7, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	b219      	sxth	r1, r3
 8001c5e:	7a7b      	ldrb	r3, [r7, #9]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <bme280_config+0x278>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	b212      	sxth	r2, r2
 8001c6e:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 8001c70:	7aba      	ldrb	r2, [r7, #10]
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <bme280_config+0x278>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b252      	sxtb	r2, r2
 8001c7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_output_speed;
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <bme280_config+0x278>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	7c5b      	ldrb	r3, [r3, #17]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <bme280_config+0x274>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	2332      	movs	r3, #50	; 0x32
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	1cfb      	adds	r3, r7, #3
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	22f2      	movs	r2, #242	; 0xf2
 8001ca0:	21ec      	movs	r1, #236	; 0xec
 8001ca2:	f007 fa0b 	bl	80090bc <HAL_I2C_Mem_Write>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	70fb      	strb	r3, [r7, #3]
	data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);																		//Mode has been chosed.
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <bme280_config+0x278>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	7c1b      	ldrb	r3, [r3, #16]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <bme280_config+0x278>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	7c5b      	ldrb	r3, [r3, #17]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <bme280_config+0x278>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	015b      	lsls	r3, r3, #5
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <bme280_config+0x274>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	2332      	movs	r3, #50	; 0x32
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	1cfb      	adds	r3, r7, #3
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2301      	movs	r3, #1
 8001cee:	22f4      	movs	r2, #244	; 0xf4
 8001cf0:	21ec      	movs	r1, #236	; 0xec
 8001cf2:	f007 f9e3 	bl	80090bc <HAL_I2C_Mem_Write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	77fb      	strb	r3, [r7, #31]
	data_ctrl = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	70fb      	strb	r3, [r7, #3]
	data_ctrl = (BME->device_config.bme280_filter << 2);
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <bme280_config+0x278>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	7c9b      	ldrb	r3, [r3, #18]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e005      	b.n	8001d14 <bme280_config+0x27c>
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	20000258 	.word	0x20000258
 8001d10:	2000025c 	.word	0x2000025c
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	70fb      	strb	r3, [r7, #3]
	retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <bme280_config+0x308>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	2332      	movs	r3, #50	; 0x32
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	1cfb      	adds	r3, r7, #3
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	22f5      	movs	r2, #245	; 0xf5
 8001d2e:	21ec      	movs	r1, #236	; 0xec
 8001d30:	f007 f9c4 	bl	80090bc <HAL_I2C_Mem_Write>
 8001d34:	4603      	mov	r3, r0
 8001d36:	77fb      	strb	r3, [r7, #31]

	float base = 0.0;
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_Delay(100);
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f005 fb76 	bl	8007430 <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	e011      	b.n	8001d6e <bme280_config+0x2d6>
	{
	  bme280_update();
 8001d4a:	f000 f865 	bl	8001e18 <bme280_update>
	  base +=  BME->altitude;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <bme280_config+0x30c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  HAL_Delay(30);
 8001d62:	201e      	movs	r0, #30
 8001d64:	f005 fb64 	bl	8007430 <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	2b1d      	cmp	r3, #29
 8001d72:	ddea      	ble.n	8001d4a <bme280_config+0x2b2>
	}
	saved_datas->base_altitude = (base / 30.0);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <bme280_config+0x310>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d7c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8001d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d84:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	bme280_update();
 8001d88:	f000 f846 	bl	8001e18 <bme280_update>
	saved_datas->max_altitude = 0.0;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <bme280_config+0x310>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c

	UNUSED(retVal);
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000258 	.word	0x20000258
 8001da4:	2000025c 	.word	0x2000025c
 8001da8:	20000008 	.word	0x20000008

08001dac <bme280_init>:

void bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	BME = BME_sensor;
 8001db6:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <bme280_init+0x5c>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <bme280_init+0x60>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6013      	str	r3, [r2, #0]
	BME->parameters = (BME_parameters_t *) &saved_datas->bme_params;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <bme280_init+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <bme280_init+0x5c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3214      	adds	r2, #20
 8001dcc:	601a      	str	r2, [r3, #0]
	uint8_t buf[1];
	HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <bme280_init+0x60>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	2332      	movs	r3, #50	; 0x32
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	22d0      	movs	r2, #208	; 0xd0
 8001de4:	21ec      	movs	r1, #236	; 0xec
 8001de6:	f007 fa63 	bl	80092b0 <HAL_I2C_Mem_Read>
	if(*buf == 0x60)
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	2b60      	cmp	r3, #96	; 0x60
 8001dee:	d103      	bne.n	8001df8 <bme280_init+0x4c>
		is_BME_ok = 1;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <bme280_init+0x68>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
	else
		is_BME_ok = 0;


}
 8001df6:	e002      	b.n	8001dfe <bme280_init+0x52>
		is_BME_ok = 0;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <bme280_init+0x68>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000025c 	.word	0x2000025c
 8001e0c:	20000258 	.word	0x20000258
 8001e10:	20000008 	.word	0x20000008
 8001e14:	200008dc 	.word	0x200008dc

08001e18 <bme280_update>:


void bme280_update(){
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b0d2      	sub	sp, #328	; 0x148
 8001e1e:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001e20:	f7ff fd70 	bl	8001904 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001e24:	4bd4      	ldr	r3, [pc, #848]	; (8002178 <bme280_update+0x360>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 83bc 	bne.w	80025aa <bme280_update+0x792>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001e32:	4bd1      	ldr	r3, [pc, #836]	; (8002178 <bme280_update+0x360>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 8001e3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e40:	10da      	asrs	r2, r3, #3
 8001e42:	4bcd      	ldr	r3, [pc, #820]	; (8002178 <bme280_update+0x360>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	1ad2      	subs	r2, r2, r3
 8001e50:	4bc9      	ldr	r3, [pc, #804]	; (8002178 <bme280_update+0x360>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	12db      	asrs	r3, r3, #11
 8001e60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001e64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e68:	111a      	asrs	r2, r3, #4
 8001e6a:	4bc3      	ldr	r3, [pc, #780]	; (8002178 <bme280_update+0x360>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	1ad1      	subs	r1, r2, r3
 8001e76:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e7a:	111a      	asrs	r2, r3, #4
 8001e7c:	4bbe      	ldr	r3, [pc, #760]	; (8002178 <bme280_update+0x360>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	131a      	asrs	r2, r3, #12
 8001e8e:	4bba      	ldr	r3, [pc, #744]	; (8002178 <bme280_update+0x360>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	889b      	ldrh	r3, [r3, #4]
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	139b      	asrs	r3, r3, #14
 8001e9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001ea2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001eaa:	4413      	add	r3, r2
 8001eac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001eb0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3380      	adds	r3, #128	; 0x80
 8001ebc:	121b      	asrs	r3, r3, #8
 8001ebe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ece:	4baa      	ldr	r3, [pc, #680]	; (8002178 <bme280_update+0x360>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800217c <bme280_update+0x364>
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	edc3 7a05 	vstr	s15, [r3, #20]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001ede:	4ba6      	ldr	r3, [pc, #664]	; (8002178 <bme280_update+0x360>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ee8:	657a      	str	r2, [r7, #84]	; 0x54
 8001eea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eee:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ef6:	17da      	asrs	r2, r3, #31
 8001ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001efc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001f00:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001f04:	460b      	mov	r3, r1
 8001f06:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f18:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001f1c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f24:	fb03 f102 	mul.w	r1, r3, r2
 8001f28:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	18ca      	adds	r2, r1, r3
 8001f36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f3a:	fba3 4503 	umull	r4, r5, r3, r3
 8001f3e:	1953      	adds	r3, r2, r5
 8001f40:	461d      	mov	r5, r3
 8001f42:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <bme280_update+0x360>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	8a1b      	ldrh	r3, [r3, #16]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	17da      	asrs	r2, r3, #31
 8001f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f58:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	fb03 f205 	mul.w	r2, r3, r5
 8001f62:	460b      	mov	r3, r1
 8001f64:	fb04 f303 	mul.w	r3, r4, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	fba4 ab02 	umull	sl, fp, r4, r2
 8001f70:	445b      	add	r3, fp
 8001f72:	469b      	mov	fp, r3
 8001f74:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001f78:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <bme280_update+0x360>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	89db      	ldrh	r3, [r3, #14]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	17da      	asrs	r2, r3, #31
 8001f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f8e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f96:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	fb02 f203 	mul.w	r2, r2, r3
 8001fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	441a      	add	r2, r3
 8001fac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	fba3 8901 	umull	r8, r9, r3, r1
 8001fb6:	eb02 0309 	add.w	r3, r2, r9
 8001fba:	4699      	mov	r9, r3
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001fc8:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001fcc:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001fd0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001fd4:	1814      	adds	r4, r2, r0
 8001fd6:	643c      	str	r4, [r7, #64]	; 0x40
 8001fd8:	414b      	adcs	r3, r1
 8001fda:	647b      	str	r3, [r7, #68]	; 0x44
 8001fdc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001fe0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <bme280_update+0x360>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	899b      	ldrh	r3, [r3, #12]
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	17da      	asrs	r2, r3, #31
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ff6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	2000      	movs	r0, #0
 800200a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800200e:	1814      	adds	r4, r2, r0
 8002010:	63bc      	str	r4, [r7, #56]	; 0x38
 8002012:	414b      	adcs	r3, r1
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002016:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800201a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 800201e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002022:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002026:	fb03 f102 	mul.w	r1, r3, r2
 800202a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800202e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	18ca      	adds	r2, r1, r3
 8002038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800203c:	fba3 1303 	umull	r1, r3, r3, r3
 8002040:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002044:	460b      	mov	r3, r1
 8002046:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800204a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800204e:	18d3      	adds	r3, r2, r3
 8002050:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <bme280_update+0x360>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	895b      	ldrh	r3, [r3, #10]
 800205c:	b21b      	sxth	r3, r3
 800205e:	b21b      	sxth	r3, r3
 8002060:	17da      	asrs	r2, r3, #31
 8002062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002066:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800206a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800206e:	462b      	mov	r3, r5
 8002070:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002074:	4642      	mov	r2, r8
 8002076:	fb02 f203 	mul.w	r2, r2, r3
 800207a:	464b      	mov	r3, r9
 800207c:	4621      	mov	r1, r4
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	4622      	mov	r2, r4
 8002086:	4641      	mov	r1, r8
 8002088:	fba2 1201 	umull	r1, r2, r2, r1
 800208c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002090:	460a      	mov	r2, r1
 8002092:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002096:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800209a:	4413      	add	r3, r2
 800209c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80020a0:	f04f 0000 	mov.w	r0, #0
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80020ac:	4623      	mov	r3, r4
 80020ae:	0a18      	lsrs	r0, r3, #8
 80020b0:	462b      	mov	r3, r5
 80020b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020b6:	462b      	mov	r3, r5
 80020b8:	1219      	asrs	r1, r3, #8
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <bme280_update+0x360>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	891b      	ldrh	r3, [r3, #8]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	17da      	asrs	r2, r3, #31
 80020c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020cc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020d4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020d8:	464a      	mov	r2, r9
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020e2:	4644      	mov	r4, r8
 80020e4:	fb04 f303 	mul.w	r3, r4, r3
 80020e8:	441a      	add	r2, r3
 80020ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ee:	4644      	mov	r4, r8
 80020f0:	fba3 4304 	umull	r4, r3, r3, r4
 80020f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80020f8:	4623      	mov	r3, r4
 80020fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002102:	18d3      	adds	r3, r2, r3
 8002104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002114:	464c      	mov	r4, r9
 8002116:	0323      	lsls	r3, r4, #12
 8002118:	4644      	mov	r4, r8
 800211a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800211e:	4644      	mov	r4, r8
 8002120:	0322      	lsls	r2, r4, #12
 8002122:	1884      	adds	r4, r0, r2
 8002124:	633c      	str	r4, [r7, #48]	; 0x30
 8002126:	eb41 0303 	adc.w	r3, r1, r3
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
 800212c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002130:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8002134:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002138:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800213c:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002140:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <bme280_update+0x360>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	88db      	ldrh	r3, [r3, #6]
 800214c:	b29b      	uxth	r3, r3
 800214e:	b29b      	uxth	r3, r3
 8002150:	2200      	movs	r2, #0
 8002152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800215a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800215e:	462b      	mov	r3, r5
 8002160:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002164:	4642      	mov	r2, r8
 8002166:	fb02 f203 	mul.w	r2, r2, r3
 800216a:	464b      	mov	r3, r9
 800216c:	4621      	mov	r1, r4
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	e004      	b.n	8002180 <bme280_update+0x368>
 8002176:	bf00      	nop
 8002178:	2000025c 	.word	0x2000025c
 800217c:	42c80000 	.word	0x42c80000
 8002180:	4622      	mov	r2, r4
 8002182:	4641      	mov	r1, r8
 8002184:	fba2 1201 	umull	r1, r2, r2, r1
 8002188:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800218c:	460a      	mov	r2, r1
 800218e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002192:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002196:	4413      	add	r3, r2
 8002198:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021a8:	4629      	mov	r1, r5
 80021aa:	104a      	asrs	r2, r1, #1
 80021ac:	4629      	mov	r1, r5
 80021ae:	17cb      	asrs	r3, r1, #31
 80021b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 80021b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d106      	bne.n	80021ca <bme280_update+0x3b2>
		{
			P = 0;
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 80021c8:	e14b      	b.n	8002462 <bme280_update+0x64a>
		}else
		{
		P = 1048576 - adc_P;
 80021ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021ce:	2100      	movs	r1, #0
 80021d0:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 80021d4:	62b8      	str	r0, [r7, #40]	; 0x28
 80021d6:	eb61 0303 	sbc.w	r3, r1, r3
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021dc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021e0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 80021e4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	07d9      	lsls	r1, r3, #31
 80021f2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80021f6:	07d0      	lsls	r0, r2, #31
 80021f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80021fc:	1a84      	subs	r4, r0, r2
 80021fe:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002202:	eb61 0303 	sbc.w	r3, r1, r3
 8002206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800220a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	1891      	adds	r1, r2, r2
 8002214:	6239      	str	r1, [r7, #32]
 8002216:	415b      	adcs	r3, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800221e:	4621      	mov	r1, r4
 8002220:	1851      	adds	r1, r2, r1
 8002222:	61b9      	str	r1, [r7, #24]
 8002224:	4629      	mov	r1, r5
 8002226:	414b      	adcs	r3, r1
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002236:	4649      	mov	r1, r9
 8002238:	018b      	lsls	r3, r1, #6
 800223a:	4641      	mov	r1, r8
 800223c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002240:	4641      	mov	r1, r8
 8002242:	018a      	lsls	r2, r1, #6
 8002244:	4641      	mov	r1, r8
 8002246:	1889      	adds	r1, r1, r2
 8002248:	6139      	str	r1, [r7, #16]
 800224a:	4649      	mov	r1, r9
 800224c:	eb43 0101 	adc.w	r1, r3, r1
 8002250:	6179      	str	r1, [r7, #20]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800225e:	4649      	mov	r1, r9
 8002260:	008b      	lsls	r3, r1, #2
 8002262:	4641      	mov	r1, r8
 8002264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002268:	4641      	mov	r1, r8
 800226a:	008a      	lsls	r2, r1, #2
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	4603      	mov	r3, r0
 8002272:	4622      	mov	r2, r4
 8002274:	189b      	adds	r3, r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	460b      	mov	r3, r1
 800227a:	462a      	mov	r2, r5
 800227c:	eb42 0303 	adc.w	r3, r2, r3
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800228e:	4649      	mov	r1, r9
 8002290:	008b      	lsls	r3, r1, #2
 8002292:	4641      	mov	r1, r8
 8002294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002298:	4641      	mov	r1, r8
 800229a:	008a      	lsls	r2, r1, #2
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	4622      	mov	r2, r4
 80022a4:	189b      	adds	r3, r3, r2
 80022a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022aa:	462b      	mov	r3, r5
 80022ac:	460a      	mov	r2, r1
 80022ae:	eb42 0303 	adc.w	r3, r2, r3
 80022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022b6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80022ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022be:	f7fe fe11 	bl	8000ee4 <__aeabi_ldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 80022ca:	4bbb      	ldr	r3, [pc, #748]	; (80025b8 <bme280_update+0x7a0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	8adb      	ldrh	r3, [r3, #22]
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	17da      	asrs	r2, r3, #31
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022dc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	0b50      	lsrs	r0, r2, #13
 80022ea:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80022ee:	1359      	asrs	r1, r3, #13
 80022f0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022f4:	462b      	mov	r3, r5
 80022f6:	fb00 f203 	mul.w	r2, r0, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	fb03 f301 	mul.w	r3, r3, r1
 8002300:	4413      	add	r3, r2
 8002302:	4622      	mov	r2, r4
 8002304:	fba2 1200 	umull	r1, r2, r2, r0
 8002308:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800230c:	460a      	mov	r2, r1
 800230e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002312:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002316:	4413      	add	r3, r2
 8002318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800231c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002320:	f04f 0000 	mov.w	r0, #0
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	0b50      	lsrs	r0, r2, #13
 800232a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800232e:	1359      	asrs	r1, r3, #13
 8002330:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002334:	462b      	mov	r3, r5
 8002336:	fb00 f203 	mul.w	r2, r0, r3
 800233a:	4623      	mov	r3, r4
 800233c:	fb03 f301 	mul.w	r3, r3, r1
 8002340:	4413      	add	r3, r2
 8002342:	4622      	mov	r2, r4
 8002344:	fba2 1200 	umull	r1, r2, r2, r0
 8002348:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800234c:	460a      	mov	r2, r1
 800234e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002352:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002356:	4413      	add	r3, r2
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002368:	4621      	mov	r1, r4
 800236a:	0e4a      	lsrs	r2, r1, #25
 800236c:	4629      	mov	r1, r5
 800236e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002372:	4629      	mov	r1, r5
 8002374:	164b      	asrs	r3, r1, #25
 8002376:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800237a:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <bme280_update+0x7a0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	8a9b      	ldrh	r3, [r3, #20]
 8002382:	b21b      	sxth	r3, r3
 8002384:	b21b      	sxth	r3, r3
 8002386:	17da      	asrs	r2, r3, #31
 8002388:	673b      	str	r3, [r7, #112]	; 0x70
 800238a:	677a      	str	r2, [r7, #116]	; 0x74
 800238c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002390:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002394:	462a      	mov	r2, r5
 8002396:	fb02 f203 	mul.w	r2, r2, r3
 800239a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800239e:	4621      	mov	r1, r4
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80023aa:	4621      	mov	r1, r4
 80023ac:	fba2 1201 	umull	r1, r2, r2, r1
 80023b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023b4:	460a      	mov	r2, r1
 80023b6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80023ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023be:	4413      	add	r3, r2
 80023c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023d0:	4621      	mov	r1, r4
 80023d2:	0cca      	lsrs	r2, r1, #19
 80023d4:	4629      	mov	r1, r5
 80023d6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80023da:	4629      	mov	r1, r5
 80023dc:	14cb      	asrs	r3, r1, #19
 80023de:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 80023e2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80023e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023ea:	1884      	adds	r4, r0, r2
 80023ec:	66bc      	str	r4, [r7, #104]	; 0x68
 80023ee:	eb41 0303 	adc.w	r3, r1, r3
 80023f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023f4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023f8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80023fc:	4621      	mov	r1, r4
 80023fe:	1889      	adds	r1, r1, r2
 8002400:	6639      	str	r1, [r7, #96]	; 0x60
 8002402:	4629      	mov	r1, r5
 8002404:	eb43 0101 	adc.w	r1, r3, r1
 8002408:	6679      	str	r1, [r7, #100]	; 0x64
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002416:	4623      	mov	r3, r4
 8002418:	0a18      	lsrs	r0, r3, #8
 800241a:	462b      	mov	r3, r5
 800241c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002420:	462b      	mov	r3, r5
 8002422:	1219      	asrs	r1, r3, #8
 8002424:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <bme280_update+0x7a0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	8a5b      	ldrh	r3, [r3, #18]
 800242c:	b21b      	sxth	r3, r3
 800242e:	b21b      	sxth	r3, r3
 8002430:	17da      	asrs	r2, r3, #31
 8002432:	65bb      	str	r3, [r7, #88]	; 0x58
 8002434:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8002442:	464c      	mov	r4, r9
 8002444:	0123      	lsls	r3, r4, #4
 8002446:	4644      	mov	r4, r8
 8002448:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800244c:	4644      	mov	r4, r8
 800244e:	0122      	lsls	r2, r4, #4
 8002450:	1884      	adds	r4, r0, r2
 8002452:	603c      	str	r4, [r7, #0]
 8002454:	eb41 0303 	adc.w	r3, r1, r3
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800245e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 8002462:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002466:	f7fe fcff 	bl	8000e68 <__aeabi_l2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f88b 	bl	8000588 <__aeabi_f2d>
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <bme280_update+0x7a4>)
 8002478:	f7fe fa08 	bl	800088c <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <bme280_update+0x7a8>)
 800248a:	f7fe f9ff 	bl	800088c <__aeabi_ddiv>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4949      	ldr	r1, [pc, #292]	; (80025b8 <bme280_update+0x7a0>)
 8002494:	680c      	ldr	r4, [r1, #0]
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fbc5 	bl	8000c28 <__aeabi_d2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	61a3      	str	r3, [r4, #24]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <bme280_update+0x7a0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 80024ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024b0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80024b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 80024b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024bc:	039b      	lsls	r3, r3, #14
 80024be:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <bme280_update+0x7a0>)
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	8bd2      	ldrh	r2, [r2, #30]
 80024c6:	b212      	sxth	r2, r2
 80024c8:	0512      	lsls	r2, r2, #20
 80024ca:	1a9a      	subs	r2, r3, r2
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <bme280_update+0x7a0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	8c1b      	ldrh	r3, [r3, #32]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80024e6:	0bdb      	lsrs	r3, r3, #15
 80024e8:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <bme280_update+0x7a0>)
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80024f2:	b252      	sxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80024fa:	fb01 f202 	mul.w	r2, r1, r2
 80024fe:	0a92      	lsrs	r2, r2, #10
 8002500:	492d      	ldr	r1, [pc, #180]	; (80025b8 <bme280_update+0x7a0>)
 8002502:	6809      	ldr	r1, [r1, #0]
 8002504:	6809      	ldr	r1, [r1, #0]
 8002506:	7f09      	ldrb	r1, [r1, #28]
 8002508:	b2c9      	uxtb	r1, r1
 800250a:	4608      	mov	r0, r1
 800250c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002510:	fb00 f101 	mul.w	r1, r0, r1
 8002514:	0ac9      	lsrs	r1, r1, #11
 8002516:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800251a:	fb01 f202 	mul.w	r2, r1, r2
 800251e:	0a92      	lsrs	r2, r2, #10
 8002520:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002524:	4924      	ldr	r1, [pc, #144]	; (80025b8 <bme280_update+0x7a0>)
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	6809      	ldr	r1, [r1, #0]
 800252a:	8b49      	ldrh	r1, [r1, #26]
 800252c:	b209      	sxth	r1, r1
 800252e:	fb01 f202 	mul.w	r2, r1, r2
 8002532:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002536:	0b92      	lsrs	r2, r2, #14
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8002540:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002544:	0bdb      	lsrs	r3, r3, #15
 8002546:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800254a:	0bd2      	lsrs	r2, r2, #15
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	09db      	lsrs	r3, r3, #7
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <bme280_update+0x7a0>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	7e12      	ldrb	r2, [r2, #24]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800256c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002570:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002574:	bf28      	it	cs
 8002576:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 800257a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800257e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002582:	0b1b      	lsrs	r3, r3, #12
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <bme280_update+0x7a0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80025c4 <bme280_update+0x7ac>
 8002594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002598:	edc3 7a07 	vstr	s15, [r3, #28]

		//get altitude
		bme280_get_altitude();
 800259c:	f7ff fa0c 	bl	80019b8 <bme280_get_altitude>
		BME->isUpdated = 0;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <bme280_update+0x7a0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

}
 80025aa:	bf00      	nop
 80025ac:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	2000025c 	.word	0x2000025c
 80025bc:	40700000 	.word	0x40700000
 80025c0:	40590000 	.word	0x40590000
 80025c4:	44800000 	.word	0x44800000

080025c8 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025ce:	2009      	movs	r0, #9
 80025d0:	f005 fc7d 	bl	8007ece <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025d4:	200a      	movs	r0, #10
 80025d6:	f005 fc7a 	bl	8007ece <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80025de:	2301      	movs	r3, #1
 80025e0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80025e2:	4bb7      	ldr	r3, [pc, #732]	; (80028c0 <bmi088_config+0x2f8>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	2364      	movs	r3, #100	; 0x64
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	227c      	movs	r2, #124	; 0x7c
 80025f6:	2130      	movs	r1, #48	; 0x30
 80025f8:	f006 fd60 	bl	80090bc <HAL_I2C_Mem_Write>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	4313      	orrs	r3, r2
 8002604:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800260a:	4bad      	ldr	r3, [pc, #692]	; (80028c0 <bmi088_config+0x2f8>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	2364      	movs	r3, #100	; 0x64
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	2301      	movs	r3, #1
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	227d      	movs	r2, #125	; 0x7d
 800261e:	2130      	movs	r1, #48	; 0x30
 8002620:	f006 fd4c 	bl	80090bc <HAL_I2C_Mem_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	4313      	orrs	r3, r2
 800262c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 800262e:	2014      	movs	r0, #20
 8002630:	f004 fefe 	bl	8007430 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002634:	23b6      	movs	r3, #182	; 0xb6
 8002636:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002638:	4ba1      	ldr	r3, [pc, #644]	; (80028c0 <bmi088_config+0x2f8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2301      	movs	r3, #1
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2301      	movs	r3, #1
 800264a:	227e      	movs	r2, #126	; 0x7e
 800264c:	2130      	movs	r1, #48	; 0x30
 800264e:	f006 fd35 	bl	80090bc <HAL_I2C_Mem_Write>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	4313      	orrs	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <bmi088_config+0xa0>
 8002662:	4b98      	ldr	r3, [pc, #608]	; (80028c4 <bmi088_config+0x2fc>)
 8002664:	2285      	movs	r2, #133	; 0x85
 8002666:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002668:	200a      	movs	r0, #10
 800266a:	f004 fee1 	bl	8007430 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800266e:	23b0      	movs	r3, #176	; 0xb0
 8002670:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002672:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <bmi088_config+0x2f8>)
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	2364      	movs	r3, #100	; 0x64
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	2301      	movs	r3, #1
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	227e      	movs	r2, #126	; 0x7e
 8002686:	2130      	movs	r1, #48	; 0x30
 8002688:	f006 fd18 	bl	80090bc <HAL_I2C_Mem_Write>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	4313      	orrs	r3, r2
 8002694:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <bmi088_config+0xda>
 800269c:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <bmi088_config+0x2fc>)
 800269e:	228a      	movs	r2, #138	; 0x8a
 80026a0:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f004 fec4 	bl	8007430 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80026a8:	23b6      	movs	r3, #182	; 0xb6
 80026aa:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80026ac:	4b84      	ldr	r3, [pc, #528]	; (80028c0 <bmi088_config+0x2f8>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	2364      	movs	r3, #100	; 0x64
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2301      	movs	r3, #1
 80026be:	2214      	movs	r2, #20
 80026c0:	21d0      	movs	r1, #208	; 0xd0
 80026c2:	f006 fcfb 	bl	80090bc <HAL_I2C_Mem_Write>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <bmi088_config+0x114>
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <bmi088_config+0x2fc>)
 80026d8:	228f      	movs	r2, #143	; 0x8f
 80026da:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80026dc:	200a      	movs	r0, #10
 80026de:	f004 fea7 	bl	8007430 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80026e2:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <bmi088_config+0x300>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	7e5b      	ldrb	r3, [r3, #25]
 80026e8:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80026ea:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <bmi088_config+0x2f8>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	2364      	movs	r3, #100	; 0x64
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2301      	movs	r3, #1
 80026fc:	220f      	movs	r2, #15
 80026fe:	21d0      	movs	r1, #208	; 0xd0
 8002700:	f006 fcdc 	bl	80090bc <HAL_I2C_Mem_Write>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	4313      	orrs	r3, r2
 800270c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <bmi088_config+0x152>
 8002714:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <bmi088_config+0x2fc>)
 8002716:	2295      	movs	r2, #149	; 0x95
 8002718:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 800271a:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <bmi088_config+0x300>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
 8002720:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <bmi088_config+0x2f8>)
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	2314      	movs	r3, #20
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2301      	movs	r3, #1
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2301      	movs	r3, #1
 8002734:	2210      	movs	r2, #16
 8002736:	21d0      	movs	r1, #208	; 0xd0
 8002738:	f006 fcc0 	bl	80090bc <HAL_I2C_Mem_Write>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4313      	orrs	r3, r2
 8002744:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <bmi088_config+0x18a>
 800274c:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <bmi088_config+0x2fc>)
 800274e:	2299      	movs	r2, #153	; 0x99
 8002750:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <bmi088_config+0x300>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	7ddb      	ldrb	r3, [r3, #23]
 8002758:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800275a:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <bmi088_config+0x2f8>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	2314      	movs	r3, #20
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2301      	movs	r3, #1
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	2211      	movs	r2, #17
 800276e:	21d0      	movs	r1, #208	; 0xd0
 8002770:	f006 fca4 	bl	80090bc <HAL_I2C_Mem_Write>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	4313      	orrs	r3, r2
 800277c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <bmi088_config+0x1c2>
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <bmi088_config+0x2fc>)
 8002786:	229d      	movs	r2, #157	; 0x9d
 8002788:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800278a:	2014      	movs	r0, #20
 800278c:	f004 fe50 	bl	8007430 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002794:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <bmi088_config+0x2f8>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	2314      	movs	r3, #20
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	2301      	movs	r3, #1
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2301      	movs	r3, #1
 80027a6:	2215      	movs	r2, #21
 80027a8:	21d0      	movs	r1, #208	; 0xd0
 80027aa:	f006 fc87 	bl	80090bc <HAL_I2C_Mem_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <bmi088_config+0x1fc>
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <bmi088_config+0x2fc>)
 80027c0:	22a3      	movs	r2, #163	; 0xa3
 80027c2:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80027c4:	2301      	movs	r3, #1
 80027c6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <bmi088_config+0x2f8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	2314      	movs	r3, #20
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	2301      	movs	r3, #1
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	2216      	movs	r2, #22
 80027dc:	21d0      	movs	r1, #208	; 0xd0
 80027de:	f006 fc6d 	bl	80090bc <HAL_I2C_Mem_Write>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <bmi088_config+0x230>
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <bmi088_config+0x2fc>)
 80027f4:	22a7      	movs	r2, #167	; 0xa7
 80027f6:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80027f8:	2301      	movs	r3, #1
 80027fa:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80027fc:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <bmi088_config+0x2f8>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	2314      	movs	r3, #20
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	2301      	movs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	2218      	movs	r2, #24
 8002810:	21d0      	movs	r1, #208	; 0xd0
 8002812:	f006 fc53 	bl	80090bc <HAL_I2C_Mem_Write>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4313      	orrs	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <bmi088_config+0x264>
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <bmi088_config+0x2fc>)
 8002828:	22ab      	movs	r2, #171	; 0xab
 800282a:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800282c:	2304      	movs	r3, #4
 800282e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <bmi088_config+0x2f8>)
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	2314      	movs	r3, #20
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	2301      	movs	r3, #1
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2301      	movs	r3, #1
 8002842:	227d      	movs	r2, #125	; 0x7d
 8002844:	2130      	movs	r1, #48	; 0x30
 8002846:	f006 fc39 	bl	80090bc <HAL_I2C_Mem_Write>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4313      	orrs	r3, r2
 8002852:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <bmi088_config+0x298>
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <bmi088_config+0x2fc>)
 800285c:	22b0      	movs	r2, #176	; 0xb0
 800285e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002860:	2008      	movs	r0, #8
 8002862:	f004 fde5 	bl	8007430 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <bmi088_config+0x300>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	7cdb      	ldrb	r3, [r3, #19]
 800286c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <bmi088_config+0x2f8>)
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	2314      	movs	r3, #20
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	2301      	movs	r3, #1
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2301      	movs	r3, #1
 8002880:	227c      	movs	r2, #124	; 0x7c
 8002882:	2130      	movs	r1, #48	; 0x30
 8002884:	f006 fc1a 	bl	80090bc <HAL_I2C_Mem_Write>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4313      	orrs	r3, r2
 8002890:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <bmi088_config+0x2d6>
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <bmi088_config+0x2fc>)
 800289a:	22b5      	movs	r2, #181	; 0xb5
 800289c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800289e:	2008      	movs	r0, #8
 80028a0:	f004 fdc6 	bl	8007430 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <bmi088_config+0x300>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	7d5b      	ldrb	r3, [r3, #21]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	b25a      	sxtb	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <bmi088_config+0x300>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	7d9b      	ldrb	r3, [r3, #22]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	713b      	strb	r3, [r7, #4]
 80028be:	e005      	b.n	80028cc <bmi088_config+0x304>
 80028c0:	20000260 	.word	0x20000260
 80028c4:	2000026c 	.word	0x2000026c
 80028c8:	20000264 	.word	0x20000264
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <bmi088_config+0x3d0>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	2314      	movs	r3, #20
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	2301      	movs	r3, #1
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2301      	movs	r3, #1
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	2130      	movs	r1, #48	; 0x30
 80028e2:	f006 fbeb 	bl	80090bc <HAL_I2C_Mem_Write>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <bmi088_config+0x334>
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <bmi088_config+0x3d4>)
 80028f8:	22ba      	movs	r2, #186	; 0xba
 80028fa:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <bmi088_config+0x3d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	7d1b      	ldrb	r3, [r3, #20]
 8002902:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <bmi088_config+0x3d0>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	2314      	movs	r3, #20
 800290a:	9302      	str	r3, [sp, #8]
 800290c:	2301      	movs	r3, #1
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	2130      	movs	r1, #48	; 0x30
 800291a:	f006 fbcf 	bl	80090bc <HAL_I2C_Mem_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	4313      	orrs	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <bmi088_config+0x36c>
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <bmi088_config+0x3d4>)
 8002930:	22be      	movs	r2, #190	; 0xbe
 8002932:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002934:	230a      	movs	r3, #10
 8002936:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <bmi088_config+0x3d0>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	2314      	movs	r3, #20
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	2301      	movs	r3, #1
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	2253      	movs	r2, #83	; 0x53
 800294c:	2130      	movs	r1, #48	; 0x30
 800294e:	f006 fbb5 	bl	80090bc <HAL_I2C_Mem_Write>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4313      	orrs	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800295c:	2304      	movs	r3, #4
 800295e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <bmi088_config+0x3d0>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	2314      	movs	r3, #20
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	2301      	movs	r3, #1
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	2258      	movs	r2, #88	; 0x58
 8002974:	2130      	movs	r1, #48	; 0x30
 8002976:	f006 fba1 	bl	80090bc <HAL_I2C_Mem_Write>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4313      	orrs	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002984:	2009      	movs	r0, #9
 8002986:	f005 faa2 	bl	8007ece <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800298a:	200a      	movs	r0, #10
 800298c:	f005 fa9f 	bl	8007ece <HAL_NVIC_EnableIRQ>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000260 	.word	0x20000260
 800299c:	2000026c 	.word	0x2000026c
 80029a0:	20000264 	.word	0x20000264

080029a4 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af04      	add	r7, sp, #16
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <bmi088_init+0x90>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <bmi088_init+0x94>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <bmi088_init+0x94>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <bmi088_init+0x94>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <bmi088_init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <bmi088_init+0x9c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80029d6:	2332      	movs	r3, #50	; 0x32
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	2301      	movs	r3, #1
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2301      	movs	r3, #1
 80029e6:	2200      	movs	r2, #0
 80029e8:	21d0      	movs	r1, #208	; 0xd0
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f006 fc60 	bl	80092b0 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80029f0:	7b3b      	ldrb	r3, [r7, #12]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	d103      	bne.n	80029fe <bmi088_init+0x5a>
		is_BMI_ok = 1;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <bmi088_init+0xa0>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
		saved_datas->q[1] = 0;
		saved_datas->q[2] = 0;
		saved_datas->q[3] = 0;
	}
}
 80029fc:	e016      	b.n	8002a2c <bmi088_init+0x88>
		is_BMI_ok = 0;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <bmi088_init+0xa0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
		saved_datas->q[0] = 1;
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <bmi088_init+0xa4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a0c:	605a      	str	r2, [r3, #4]
		saved_datas->q[1] = 0;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <bmi088_init+0xa4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
		saved_datas->q[2] = 0;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <bmi088_init+0xa4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
		saved_datas->q[3] = 0;
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <bmi088_init+0xa4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000260 	.word	0x20000260
 8002a38:	20000264 	.word	0x20000264
 8002a3c:	20000268 	.word	0x20000268
 8002a40:	20000269 	.word	0x20000269
 8002a44:	200008e0 	.word	0x200008e0
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	00000000 	.word	0x00000000

08002a50 <bmi088_update>:
void bmi088_update()
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b08d      	sub	sp, #52	; 0x34
 8002a56:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <bmi088_update+0x94>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	7c9b      	ldrb	r3, [r3, #18]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 81eb 	beq.w	8002e3e <bmi088_update+0x3ee>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <bmi088_update+0x98>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <bmi088_update+0x94>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	2314      	movs	r3, #20
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	2309      	movs	r3, #9
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	2212      	movs	r2, #18
 8002a80:	2130      	movs	r1, #48	; 0x30
 8002a82:	f006 fc15 	bl	80092b0 <HAL_I2C_Mem_Read>
 8002a86:	4603      	mov	r3, r0
 8002a88:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 83a9 	bne.w	80031e4 <bmi088_update+0x794>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <bmi088_update+0x98>)
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <bmi088_update+0x94>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3309      	adds	r3, #9
 8002a9c:	2214      	movs	r2, #20
 8002a9e:	9202      	str	r2, [sp, #8]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	9201      	str	r2, [sp, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	2222      	movs	r2, #34	; 0x22
 8002aaa:	2130      	movs	r1, #48	; 0x30
 8002aac:	f006 fc00 	bl	80092b0 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <bmi088_update+0x94>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	7a5b      	ldrb	r3, [r3, #9]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <bmi088_update+0x94>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	7a9b      	ldrb	r3, [r3, #10]
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 8002ad0:	8bbb      	ldrh	r3, [r7, #28]
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d309      	bcc.n	8002aec <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 8002ad8:	8bbb      	ldrh	r3, [r7, #28]
 8002ada:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	837b      	strh	r3, [r7, #26]
 8002ae2:	e029      	b.n	8002b38 <bmi088_update+0xe8>
 8002ae4:	20000264 	.word	0x20000264
 8002ae8:	20000260 	.word	0x20000260
			}
			else{
				Temp_int11 = Temp_uint11;
 8002aec:	8bbb      	ldrh	r3, [r7, #28]
 8002aee:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002af0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afc:	ee17 0a90 	vmov	r0, s15
 8002b00:	f7fd fd42 	bl	8000588 <__aeabi_f2d>
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002b0c:	f7fd fd94 	bl	8000638 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4bb6      	ldr	r3, [pc, #728]	; (8002df8 <bmi088_update+0x3a8>)
 8002b1e:	f7fd fbd5 	bl	80002cc <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	49b5      	ldr	r1, [pc, #724]	; (8002dfc <bmi088_update+0x3ac>)
 8002b28:	680e      	ldr	r6, [r1, #0]
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f87b 	bl	8000c28 <__aeabi_d2f>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002b38:	4bb0      	ldr	r3, [pc, #704]	; (8002dfc <bmi088_update+0x3ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	7a1b      	ldrb	r3, [r3, #8]
 8002b3e:	041a      	lsls	r2, r3, #16
 8002b40:	4bae      	ldr	r3, [pc, #696]	; (8002dfc <bmi088_update+0x3ac>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	79db      	ldrb	r3, [r3, #7]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	4aac      	ldr	r2, [pc, #688]	; (8002dfc <bmi088_update+0x3ac>)
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	7992      	ldrb	r2, [r2, #6]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ee17 0a90 	vmov	r0, s15
 8002b62:	f7fd fd11 	bl	8000588 <__aeabi_f2d>
 8002b66:	a39e      	add	r3, pc, #632	; (adr r3, 8002de0 <bmi088_update+0x390>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f7fd fd64 	bl	8000638 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	a39b      	add	r3, pc, #620	; (adr r3, 8002de8 <bmi088_update+0x398>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fe85 	bl	800088c <__aeabi_ddiv>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	499d      	ldr	r1, [pc, #628]	; (8002dfc <bmi088_update+0x3ac>)
 8002b88:	680e      	ldr	r6, [r1, #0]
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f84b 	bl	8000c28 <__aeabi_d2f>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002b98:	4b98      	ldr	r3, [pc, #608]	; (8002dfc <bmi088_update+0x3ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	795b      	ldrb	r3, [r3, #5]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	4b96      	ldr	r3, [pc, #600]	; (8002dfc <bmi088_update+0x3ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	791b      	ldrb	r3, [r3, #4]
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002bae:	4b93      	ldr	r3, [pc, #588]	; (8002dfc <bmi088_update+0x3ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	78db      	ldrb	r3, [r3, #3]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	4b90      	ldr	r3, [pc, #576]	; (8002dfc <bmi088_update+0x3ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	789b      	ldrb	r3, [r3, #2]
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002bc4:	4b8d      	ldr	r3, [pc, #564]	; (8002dfc <bmi088_update+0x3ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <bmi088_update+0x3ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 8002bda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be6:	ee17 0a90 	vmov	r0, s15
 8002bea:	f7fd fccd 	bl	8000588 <__aeabi_f2d>
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <bmi088_update+0x3b0>)
 8002bf4:	f7fd fe4a 	bl	800088c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <bmi088_update+0x3b4>)
 8002c06:	f7fd fd17 	bl	8000638 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <bmi088_update+0x3b8>)
 8002c18:	f7fd fd0e 	bl	8000638 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4692      	mov	sl, r2
 8002c22:	469b      	mov	fp, r3
 8002c24:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <bmi088_update+0x3ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	7d1b      	ldrb	r3, [r3, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c34:	ee17 0a90 	vmov	r0, s15
 8002c38:	f7fd fca6 	bl	8000588 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	ec43 2b11 	vmov	d1, r2, r3
 8002c44:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8002df0 <bmi088_update+0x3a0>
 8002c48:	f013 f802 	bl	8015c50 <pow>
 8002c4c:	ec53 2b10 	vmov	r2, r3, d0
 8002c50:	4650      	mov	r0, sl
 8002c52:	4659      	mov	r1, fp
 8002c54:	f7fd fcf0 	bl	8000638 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4967      	ldr	r1, [pc, #412]	; (8002dfc <bmi088_update+0x3ac>)
 8002c5e:	680e      	ldr	r6, [r1, #0]
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f7fd ffe0 	bl	8000c28 <__aeabi_d2f>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 8002c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c7a:	ee17 0a90 	vmov	r0, s15
 8002c7e:	f7fd fc83 	bl	8000588 <__aeabi_f2d>
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <bmi088_update+0x3b0>)
 8002c88:	f7fd fe00 	bl	800088c <__aeabi_ddiv>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	4b5a      	ldr	r3, [pc, #360]	; (8002e04 <bmi088_update+0x3b4>)
 8002c9a:	f7fd fccd 	bl	8000638 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <bmi088_update+0x3b8>)
 8002cac:	f7fd fcc4 	bl	8000638 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4692      	mov	sl, r2
 8002cb6:	469b      	mov	fp, r3
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <bmi088_update+0x3ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	7d1b      	ldrb	r3, [r3, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc8:	ee17 0a90 	vmov	r0, s15
 8002ccc:	f7fd fc5c 	bl	8000588 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	ec43 2b11 	vmov	d1, r2, r3
 8002cd8:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8002df0 <bmi088_update+0x3a0>
 8002cdc:	f012 ffb8 	bl	8015c50 <pow>
 8002ce0:	ec53 2b10 	vmov	r2, r3, d0
 8002ce4:	4650      	mov	r0, sl
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	f7fd fca6 	bl	8000638 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4942      	ldr	r1, [pc, #264]	; (8002dfc <bmi088_update+0x3ac>)
 8002cf2:	680e      	ldr	r6, [r1, #0]
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fd ff96 	bl	8000c28 <__aeabi_d2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 8002d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0e:	ee17 0a90 	vmov	r0, s15
 8002d12:	f7fd fc39 	bl	8000588 <__aeabi_f2d>
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <bmi088_update+0x3b0>)
 8002d1c:	f7fd fdb6 	bl	800088c <__aeabi_ddiv>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <bmi088_update+0x3b4>)
 8002d2e:	f7fd fc83 	bl	8000638 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <bmi088_update+0x3b8>)
 8002d40:	f7fd fc7a 	bl	8000638 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4692      	mov	sl, r2
 8002d4a:	469b      	mov	fp, r3
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <bmi088_update+0x3ac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	7d1b      	ldrb	r3, [r3, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d5c:	ee17 0a90 	vmov	r0, s15
 8002d60:	f7fd fc12 	bl	8000588 <__aeabi_f2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	ec43 2b11 	vmov	d1, r2, r3
 8002d6c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8002df0 <bmi088_update+0x3a0>
 8002d70:	f012 ff6e 	bl	8015c50 <pow>
 8002d74:	ec53 2b10 	vmov	r2, r3, d0
 8002d78:	4650      	mov	r0, sl
 8002d7a:	4659      	mov	r1, fp
 8002d7c:	f7fd fc5c 	bl	8000638 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	491d      	ldr	r1, [pc, #116]	; (8002dfc <bmi088_update+0x3ac>)
 8002d86:	680e      	ldr	r6, [r1, #0]
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff4c 	bl	8000c28 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

			if(isStarded)
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <bmi088_update+0x3bc>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d03a      	beq.n	8002e14 <bmi088_update+0x3c4>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <bmi088_update+0x3ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <bmi088_update+0x3ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d502      	bpl.n	8002dc2 <bmi088_update+0x372>
 8002dbc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002e10 <bmi088_update+0x3c0>
 8002dc0:	e009      	b.n	8002dd6 <bmi088_update+0x386>
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <bmi088_update+0x3ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <bmi088_update+0x3ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <bmi088_update+0x3ac>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 8002dde:	e01f      	b.n	8002e20 <bmi088_update+0x3d0>
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40438800 	.word	0x40438800
 8002de8:	00000000 	.word	0x00000000
 8002dec:	412e8480 	.word	0x412e8480
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40000000 	.word	0x40000000
 8002df8:	40370000 	.word	0x40370000
 8002dfc:	20000264 	.word	0x20000264
 8002e00:	40e00000 	.word	0x40e00000
 8002e04:	408f4000 	.word	0x408f4000
 8002e08:	3ff80000 	.word	0x3ff80000
 8002e0c:	20000269 	.word	0x20000269
 8002e10:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 8002e14:	4bb6      	ldr	r3, [pc, #728]	; (80030f0 <bmi088_update+0x6a0>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4bb4      	ldr	r3, [pc, #720]	; (80030f0 <bmi088_update+0x6a0>)
 8002e1e:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002e20:	4bb4      	ldr	r3, [pc, #720]	; (80030f4 <bmi088_update+0x6a4>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4bb3      	ldr	r3, [pc, #716]	; (80030f4 <bmi088_update+0x6a4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e2c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4


			BMI->rawDatas.isAccelUpdated = 0;
 8002e30:	4bb0      	ldr	r3, [pc, #704]	; (80030f4 <bmi088_update+0x6a4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 8002e38:	4baf      	ldr	r3, [pc, #700]	; (80030f8 <bmi088_update+0x6a8>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002e3e:	4bad      	ldr	r3, [pc, #692]	; (80030f4 <bmi088_update+0x6a4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	7c5b      	ldrb	r3, [r3, #17]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 81d0 	beq.w	80031ea <bmi088_update+0x79a>
 8002e4a:	4bab      	ldr	r3, [pc, #684]	; (80030f8 <bmi088_update+0x6a8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 81cb 	beq.w	80031ea <bmi088_update+0x79a>
		{
			if(isStarded){
 8002e54:	4ba6      	ldr	r3, [pc, #664]	; (80030f0 <bmi088_update+0x6a0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 81bb 	beq.w	80031d4 <bmi088_update+0x784>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 8002e5e:	4ba7      	ldr	r3, [pc, #668]	; (80030fc <bmi088_update+0x6ac>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	4ba4      	ldr	r3, [pc, #656]	; (80030f4 <bmi088_update+0x6a4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330b      	adds	r3, #11
 8002e68:	220a      	movs	r2, #10
 8002e6a:	9202      	str	r2, [sp, #8]
 8002e6c:	2206      	movs	r2, #6
 8002e6e:	9201      	str	r2, [sp, #4]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2301      	movs	r3, #1
 8002e74:	2202      	movs	r2, #2
 8002e76:	21d0      	movs	r1, #208	; 0xd0
 8002e78:	f006 fa1a 	bl	80092b0 <HAL_I2C_Mem_Read>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 81b0 	bne.w	80031e8 <bmi088_update+0x798>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002e88:	4b9a      	ldr	r3, [pc, #616]	; (80030f4 <bmi088_update+0x6a4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	7c1b      	ldrb	r3, [r3, #16]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b21a      	sxth	r2, r3
 8002e92:	4b98      	ldr	r3, [pc, #608]	; (80030f4 <bmi088_update+0x6a4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	7bdb      	ldrb	r3, [r3, #15]
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002e9e:	4b95      	ldr	r3, [pc, #596]	; (80030f4 <bmi088_update+0x6a4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	7b9b      	ldrb	r3, [r3, #14]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	b21a      	sxth	r2, r3
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <bmi088_update+0x6a4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	7b5b      	ldrb	r3, [r3, #13]
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <bmi088_update+0x6a4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	7b1b      	ldrb	r3, [r3, #12]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <bmi088_update+0x6a4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	7adb      	ldrb	r3, [r3, #11]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[0]);
 8002eca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fb48 	bl	8000564 <__aeabi_i2d>
 8002ed4:	a384      	add	r3, pc, #528	; (adr r3, 80030e8 <bmi088_update+0x698>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd fcd7 	bl	800088c <__aeabi_ddiv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4692      	mov	sl, r2
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	4b83      	ldr	r3, [pc, #524]	; (80030f4 <bmi088_update+0x6a4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	7e5b      	ldrb	r3, [r3, #25]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ef2:	4113      	asrs	r3, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb35 	bl	8000564 <__aeabi_i2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4650      	mov	r0, sl
 8002f00:	4659      	mov	r1, fp
 8002f02:	f7fd fb99 	bl	8000638 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4b7c      	ldr	r3, [pc, #496]	; (8003100 <bmi088_update+0x6b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f16:	4e77      	ldr	r6, [pc, #476]	; (80030f4 <bmi088_update+0x6a4>)
 8002f18:	6836      	ldr	r6, [r6, #0]
 8002f1a:	f7fd f9d5 	bl	80002c8 <__aeabi_dsub>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[1]);
 8002f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fb1a 	bl	8000564 <__aeabi_i2d>
 8002f30:	a36d      	add	r3, pc, #436	; (adr r3, 80030e8 <bmi088_update+0x698>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd fca9 	bl	800088c <__aeabi_ddiv>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4692      	mov	sl, r2
 8002f40:	469b      	mov	fp, r3
 8002f42:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <bmi088_update+0x6a4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	7e5b      	ldrb	r3, [r3, #25]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f4e:	4113      	asrs	r3, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fb07 	bl	8000564 <__aeabi_i2d>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4650      	mov	r0, sl
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	f7fd fb6b 	bl	8000638 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <bmi088_update+0x6b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f72:	4e60      	ldr	r6, [pc, #384]	; (80030f4 <bmi088_update+0x6a4>)
 8002f74:	6836      	ldr	r6, [r6, #0]
 8002f76:	f7fd f9a7 	bl	80002c8 <__aeabi_dsub>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - saved_datas->offset_vals[2]);
 8002f82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd faec 	bl	8000564 <__aeabi_i2d>
 8002f8c:	a356      	add	r3, pc, #344	; (adr r3, 80030e8 <bmi088_update+0x698>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd fc7b 	bl	800088c <__aeabi_ddiv>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4692      	mov	sl, r2
 8002f9c:	469b      	mov	fp, r3
 8002f9e:	4b55      	ldr	r3, [pc, #340]	; (80030f4 <bmi088_update+0x6a4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	7e5b      	ldrb	r3, [r3, #25]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002faa:	4113      	asrs	r3, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fad9 	bl	8000564 <__aeabi_i2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4650      	mov	r0, sl
 8002fb8:	4659      	mov	r1, fp
 8002fba:	f7fd fb3d 	bl	8000638 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <bmi088_update+0x6b0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fce:	4e49      	ldr	r6, [pc, #292]	; (80030f4 <bmi088_update+0x6a4>)
 8002fd0:	6836      	ldr	r6, [r6, #0]
 8002fd2:	f7fd f979 	bl	80002c8 <__aeabi_dsub>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002fde:	4b45      	ldr	r3, [pc, #276]	; (80030f4 <bmi088_update+0x6a4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd face 	bl	8000588 <__aeabi_f2d>
 8002fec:	e9c7 0100 	strd	r0, r1, [r7]
 8002ff0:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <bmi088_update+0x6a4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8002ff8:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <bmi088_update+0x6a4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fac1 	bl	8000588 <__aeabi_f2d>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4650      	mov	r0, sl
 800300c:	4659      	mov	r1, fp
 800300e:	f7fd fb13 	bl	8000638 <__aeabi_dmul>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800301a:	f7fd f957 	bl	80002cc <__adddf3>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4934      	ldr	r1, [pc, #208]	; (80030f4 <bmi088_update+0x6a4>)
 8003024:	680e      	ldr	r6, [r1, #0]
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fdfd 	bl	8000c28 <__aeabi_d2f>
 800302e:	4603      	mov	r3, r0
 8003030:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8003034:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <bmi088_update+0x6a4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd faa3 	bl	8000588 <__aeabi_f2d>
 8003042:	e9c7 0100 	strd	r0, r1, [r7]
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <bmi088_update+0x6a4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <bmi088_update+0x6a4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa96 	bl	8000588 <__aeabi_f2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4650      	mov	r0, sl
 8003062:	4659      	mov	r1, fp
 8003064:	f7fd fae8 	bl	8000638 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003070:	f7fd f92c 	bl	80002cc <__adddf3>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	491e      	ldr	r1, [pc, #120]	; (80030f4 <bmi088_update+0x6a4>)
 800307a:	680e      	ldr	r6, [r1, #0]
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fdd2 	bl	8000c28 <__aeabi_d2f>
 8003084:	4603      	mov	r3, r0
 8003086:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <bmi088_update+0x6a4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa78 	bl	8000588 <__aeabi_f2d>
 8003098:	e9c7 0100 	strd	r0, r1, [r7]
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <bmi088_update+0x6a4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <bmi088_update+0x6a4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fa6b 	bl	8000588 <__aeabi_f2d>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4650      	mov	r0, sl
 80030b8:	4659      	mov	r1, fp
 80030ba:	f7fd fabd 	bl	8000638 <__aeabi_dmul>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030c6:	f7fd f901 	bl	80002cc <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4909      	ldr	r1, [pc, #36]	; (80030f4 <bmi088_update+0x6a4>)
 80030d0:	680e      	ldr	r6, [r1, #0]
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fd fda7 	bl	8000c28 <__aeabi_d2f>
 80030da:	4603      	mov	r3, r0
 80030dc:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 80030e0:	e010      	b.n	8003104 <bmi088_update+0x6b4>
 80030e2:	bf00      	nop
 80030e4:	f3af 8000 	nop.w
 80030e8:	00000000 	.word	0x00000000
 80030ec:	40dfffc0 	.word	0x40dfffc0
 80030f0:	20000269 	.word	0x20000269
 80030f4:	20000264 	.word	0x20000264
 80030f8:	20000268 	.word	0x20000268
 80030fc:	20000260 	.word	0x20000260
 8003100:	20000008 	.word	0x20000008


				//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
				//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8003104:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <bmi088_update+0x7b0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800310c:	4690      	mov	r8, r2
 800310e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003112:	a339      	add	r3, pc, #228	; (adr r3, 80031f8 <bmi088_update+0x7a8>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	4640      	mov	r0, r8
 800311a:	4649      	mov	r1, r9
 800311c:	f7fd fa8c 	bl	8000638 <__aeabi_dmul>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <bmi088_update+0x7b4>)
 800312e:	f7fd fbad 	bl	800088c <__aeabi_ddiv>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f7fd fd75 	bl	8000c28 <__aeabi_d2f>
 800313e:	4606      	mov	r6, r0
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <bmi088_update+0x7b0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003148:	a32b      	add	r3, pc, #172	; (adr r3, 80031f8 <bmi088_update+0x7a8>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd fa73 	bl	8000638 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <bmi088_update+0x7b4>)
 8003160:	f7fd fb94 	bl	800088c <__aeabi_ddiv>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	f7fd fd5c 	bl	8000c28 <__aeabi_d2f>
 8003170:	4680      	mov	r8, r0
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <bmi088_update+0x7b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800317a:	4614      	mov	r4, r2
 800317c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003180:	a31d      	add	r3, pc, #116	; (adr r3, 80031f8 <bmi088_update+0x7a8>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd fa55 	bl	8000638 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <bmi088_update+0x7b4>)
 800319c:	f7fd fb76 	bl	800088c <__aeabi_ddiv>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fd3e 	bl	8000c28 <__aeabi_d2f>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <bmi088_update+0x7b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80031b6:	eef0 1a67 	vmov.f32	s3, s15
 80031ba:	ee01 2a10 	vmov	s2, r2
 80031be:	ee00 8a90 	vmov	s1, r8
 80031c2:	ee00 6a10 	vmov	s0, r6
 80031c6:	f002 f89f 	bl	8005308 <updateQuaternion>
				quaternionToEuler();
 80031ca:	f002 f9e9 	bl	80055a0 <quaternionToEuler>

				is_gyro_offset = 1;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <bmi088_update+0x7b8>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <bmi088_update+0x7b0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <bmi088_update+0x7bc>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e002      	b.n	80031ea <bmi088_update+0x79a>
				return;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <bmi088_update+0x79a>
					return;
 80031e8:	bf00      	nop
		}


}
 80031ea:	3724      	adds	r7, #36	; 0x24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	f3af 8000 	nop.w
 80031f8:	54442d18 	.word	0x54442d18
 80031fc:	400921fb 	.word	0x400921fb
 8003200:	20000264 	.word	0x20000264
 8003204:	40668000 	.word	0x40668000
 8003208:	2000026a 	.word	0x2000026a
 800320c:	20000268 	.word	0x20000268

08003210 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <bmi088_getAccelDatas_INT+0x18>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	749a      	strb	r2, [r3, #18]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000264 	.word	0x20000264

0800322c <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <bmi088_getGyroDatas_INT+0x18>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2201      	movs	r2, #1
 8003236:	745a      	strb	r2, [r3, #17]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000264 	.word	0x20000264

08003248 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 800324c:	f7ff fc00 	bl	8002a50 <bmi088_update>
		if(is_gyro_offset == 1)
 8003250:	4b3e      	ldr	r3, [pc, #248]	; (800334c <getOffset+0x104>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d1f9      	bne.n	800324c <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8003258:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <getOffset+0x108>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003260:	da32      	bge.n	80032c8 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8003262:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <getOffset+0x10c>)
 8003264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <getOffset+0x110>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003270:	f7fd f82c 	bl	80002cc <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4936      	ldr	r1, [pc, #216]	; (8003354 <getOffset+0x10c>)
 800327a:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 800327e:	4b35      	ldr	r3, [pc, #212]	; (8003354 <getOffset+0x10c>)
 8003280:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003284:	4b34      	ldr	r3, [pc, #208]	; (8003358 <getOffset+0x110>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800328c:	f7fd f81e 	bl	80002cc <__adddf3>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	492f      	ldr	r1, [pc, #188]	; (8003354 <getOffset+0x10c>)
 8003296:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <getOffset+0x10c>)
 800329c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80032a0:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <getOffset+0x110>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80032a8:	f7fd f810 	bl	80002cc <__adddf3>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4928      	ldr	r1, [pc, #160]	; (8003354 <getOffset+0x10c>)
 80032b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <getOffset+0x108>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <getOffset+0x108>)
 80032be:	6013      	str	r3, [r2, #0]
					 saved_datas->offset_vals[2] = g[0][2];
					 getInitialQuaternion();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 80032c0:	4b22      	ldr	r3, [pc, #136]	; (800334c <getOffset+0x104>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e7c1      	b.n	800324c <getOffset+0x4>
					 g[0][0] /= 1000.0;
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <getOffset+0x10c>)
 80032ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <getOffset+0x114>)
 80032d4:	f7fd fada 	bl	800088c <__aeabi_ddiv>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	491d      	ldr	r1, [pc, #116]	; (8003354 <getOffset+0x10c>)
 80032de:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <getOffset+0x10c>)
 80032e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <getOffset+0x114>)
 80032ee:	f7fd facd 	bl	800088c <__aeabi_ddiv>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4917      	ldr	r1, [pc, #92]	; (8003354 <getOffset+0x10c>)
 80032f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <getOffset+0x10c>)
 80032fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <getOffset+0x114>)
 8003308:	f7fd fac0 	bl	800088c <__aeabi_ddiv>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4910      	ldr	r1, [pc, #64]	; (8003354 <getOffset+0x10c>)
 8003312:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 saved_datas->offset_vals[0] = g[0][0];
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <getOffset+0x118>)
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <getOffset+0x10c>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					 saved_datas->offset_vals[1] = g[0][1];
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <getOffset+0x118>)
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <getOffset+0x10c>)
 800332a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800332e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					 saved_datas->offset_vals[2] = g[0][2];
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <getOffset+0x118>)
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <getOffset+0x10c>)
 8003338:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800333c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
					 getInitialQuaternion();
 8003340:	f002 fada 	bl	80058f8 <getInitialQuaternion>
					 break;
 8003344:	bf00      	nop
		}

	}
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	2000026a 	.word	0x2000026a
 8003350:	200002a0 	.word	0x200002a0
 8003354:	20000270 	.word	0x20000270
 8003358:	20000264 	.word	0x20000264
 800335c:	408f4000 	.word	0x408f4000
 8003360:	20000008 	.word	0x20000008

08003364 <calculateCRC>:

union DataPack veriler;
uint8_t bufferPrint[400];

static uint8_t calculateCRC()
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
	int check_sum = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800336e:	2301      	movs	r3, #1
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	e00a      	b.n	800338a <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8003374:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <calculateCRC+0x48>)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b3c      	cmp	r3, #60	; 0x3c
 800338e:	d9f1      	bls.n	8003374 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	425a      	negs	r2, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	bf58      	it	pl
 800339a:	4253      	negpl	r3, r2
 800339c:	b2db      	uxtb	r3, r3
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200002a4 	.word	0x200002a4

080033b0 <sendRF>:

static void sendRF()
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 80033b4:	4806      	ldr	r0, [pc, #24]	; (80033d0 <sendRF+0x20>)
 80033b6:	f005 f933 	bl	8008620 <HAL_DMA_GetState>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d004      	beq.n	80033ca <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.arr));
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	4904      	ldr	r1, [pc, #16]	; (80033d4 <sendRF+0x24>)
 80033c4:	4804      	ldr	r0, [pc, #16]	; (80033d8 <sendRF+0x28>)
 80033c6:	f008 fdd3 	bl	800bf70 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000560 	.word	0x20000560
 80033d4:	200002a4 	.word	0x200002a4
 80033d8:	20000450 	.word	0x20000450

080033dc <sendPC>:

static void sendPC()
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 80033e0:	4806      	ldr	r0, [pc, #24]	; (80033fc <sendPC+0x20>)
 80033e2:	f005 f91d 	bl	8008620 <HAL_DMA_GetState>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d004      	beq.n	80033f6 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 80033ec:	2240      	movs	r2, #64	; 0x40
 80033ee:	4904      	ldr	r1, [pc, #16]	; (8003400 <sendPC+0x24>)
 80033f0:	4804      	ldr	r0, [pc, #16]	; (8003404 <sendPC+0x28>)
 80033f2:	f008 fdbd 	bl	800bf70 <HAL_UART_Transmit_DMA>
	}
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000620 	.word	0x20000620
 8003400:	200002a4 	.word	0x200002a4
 8003404:	20000494 	.word	0x20000494

08003408 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6178      	str	r0, [r7, #20]
 8003410:	6139      	str	r1, [r7, #16]
 8003412:	60fa      	str	r2, [r7, #12]
 8003414:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 8003416:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <packDatas+0x1fc>)
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	edd3 7a03 	vldr	s15, [r3, #12]
 800342a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342e:	ee17 3a90 	vmov	r3, s15
 8003432:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4a74      	ldr	r2, [pc, #464]	; (8003608 <packDatas+0x200>)
 8003438:	fb82 1203 	smull	r1, r2, r2, r3
 800343c:	1151      	asrs	r1, r2, #5
 800343e:	17da      	asrs	r2, r3, #31
 8003440:	1a8a      	subs	r2, r1, r2
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	fb01 f202 	mul.w	r2, r1, r2
 8003448:	1a9a      	subs	r2, r3, r2
 800344a:	4613      	mov	r3, r2
 800344c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4a6d      	ldr	r2, [pc, #436]	; (8003608 <packDatas+0x200>)
 8003452:	fb82 1203 	smull	r1, r2, r2, r3
 8003456:	1152      	asrs	r2, r2, #5
 8003458:	17db      	asrs	r3, r3, #31
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4a69      	ldr	r2, [pc, #420]	; (8003608 <packDatas+0x200>)
 8003462:	fb82 1203 	smull	r1, r2, r2, r3
 8003466:	1151      	asrs	r1, r2, #5
 8003468:	17da      	asrs	r2, r3, #31
 800346a:	1a8a      	subs	r2, r1, r2
 800346c:	2164      	movs	r1, #100	; 0x64
 800346e:	fb01 f202 	mul.w	r2, r1, r2
 8003472:	1a9a      	subs	r2, r3, r2
 8003474:	4613      	mov	r3, r2
 8003476:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	b25a      	sxtb	r2, r3
 800347e:	7fbb      	ldrb	r3, [r7, #30]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	b2db      	uxtb	r3, r3
 8003484:	b25b      	sxtb	r3, r3
 8003486:	4313      	orrs	r3, r2
 8003488:	b25b      	sxtb	r3, r3
 800348a:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 800348c:	7fbb      	ldrb	r3, [r7, #30]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	b25a      	sxtb	r2, r3
 8003492:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8003496:	4313      	orrs	r3, r2
 8003498:	b25b      	sxtb	r3, r3
 800349a:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 800349c:	4a59      	ldr	r2, [pc, #356]	; (8003604 <packDatas+0x1fc>)
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80034a2:	4a58      	ldr	r2, [pc, #352]	; (8003604 <packDatas+0x1fc>)
 80034a4:	7fbb      	ldrb	r3, [r7, #30]
 80034a6:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800360c <packDatas+0x204>
 80034b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ba:	ee17 3a90 	vmov	r3, s15
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <packDatas+0x1fc>)
 80034c2:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80034ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ce:	ee17 3a90 	vmov	r3, s15
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <packDatas+0x1fc>)
 80034d6:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	edd3 7a05 	vldr	s15, [r3, #20]
 80034de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80034ea:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80034ee:	4b45      	ldr	r3, [pc, #276]	; (8003604 <packDatas+0x1fc>)
 80034f0:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80034f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8003500:	793a      	ldrb	r2, [r7, #4]
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <packDatas+0x1fc>)
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	4a3d      	ldr	r2, [pc, #244]	; (8003604 <packDatas+0x1fc>)
 800350e:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)saved_datas->max_altitude;
#else
	veriler.dataYapi.maxAltitude = (int16_t)(int)((float)strain_gage_get_vals(&loadcell) / 1000.0);
 8003510:	483f      	ldr	r0, [pc, #252]	; (8003610 <packDatas+0x208>)
 8003512:	f003 f928 	bl	8006766 <strain_gage_get_vals>
 8003516:	ee07 0a90 	vmov	s15, r0
 800351a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351e:	ee17 0a90 	vmov	r0, s15
 8003522:	f7fd f831 	bl	8000588 <__aeabi_f2d>
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <packDatas+0x20c>)
 800352c:	f7fd f9ae 	bl	800088c <__aeabi_ddiv>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fb2e 	bl	8000b98 <__aeabi_d2iz>
 800353c:	4603      	mov	r3, r0
 800353e:	b21a      	sxth	r2, r3
 8003540:	4b30      	ldr	r3, [pc, #192]	; (8003604 <packDatas+0x1fc>)
 8003542:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <packDatas+0x1fc>)
 800354a:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <packDatas+0x1fc>)
 8003552:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <packDatas+0x1fc>)
 800355a:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f7fd fb5f 	bl	8000c28 <__aeabi_d2f>
 800356a:	4603      	mov	r3, r0
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef1 7a67 	vneg.f32	s15, s15
 8003574:	4b23      	ldr	r3, [pc, #140]	; (8003604 <packDatas+0x1fc>)
 8003576:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f7fd fb50 	bl	8000c28 <__aeabi_d2f>
 8003588:	4603      	mov	r3, r0
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef1 7a67 	vneg.f32	s15, s15
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <packDatas+0x1fc>)
 8003594:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fb41 	bl	8000c28 <__aeabi_d2f>
 80035a6:	4603      	mov	r3, r0
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eef1 7a67 	vneg.f32	s15, s15
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <packDatas+0x1fc>)
 80035b2:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80035bc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003618 <packDatas+0x210>
 80035c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <packDatas+0x1fc>)
 80035c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80035d0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003618 <packDatas+0x210>
 80035d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <packDatas+0x1fc>)
 80035da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 80035de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d91a      	bls.n	800361c <packDatas+0x214>
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80035ec:	eeb1 7a67 	vneg.f32	s14, s15
 80035f0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003618 <packDatas+0x210>
 80035f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003600:	e013      	b.n	800362a <packDatas+0x222>
 8003602:	bf00      	nop
 8003604:	200002a4 	.word	0x200002a4
 8003608:	51eb851f 	.word	0x51eb851f
 800360c:	42c80000 	.word	0x42c80000
 8003610:	2000088c 	.word	0x2000088c
 8003614:	408f4000 	.word	0x408f4000
 8003618:	447a0000 	.word	0x447a0000
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003622:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003618 <packDatas+0x210>
 8003626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800362a:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <packDatas+0x35c>)
 800362c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	b25a      	sxtb	r2, r3
 800363a:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <packDatas+0x360>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003644:	ee17 3a90 	vmov	r3, s15
 8003648:	135b      	asrs	r3, r3, #13
 800364a:	b25b      	sxtb	r3, r3
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	b25b      	sxtb	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b25a      	sxtb	r2, r3
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <packDatas+0x360>)
 8003658:	edd3 7a01 	vldr	s15, [r3, #4]
 800365c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003660:	ee17 3a90 	vmov	r3, s15
 8003664:	139b      	asrs	r3, r3, #14
 8003666:	b25b      	sxtb	r3, r3
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	b25b      	sxtb	r3, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	b25a      	sxtb	r2, r3
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <packDatas+0x360>)
 8003674:	edd3 7a02 	vldr	s15, [r3, #8]
 8003678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800367c:	ee17 3a90 	vmov	r3, s15
 8003680:	13db      	asrs	r3, r3, #15
 8003682:	b25b      	sxtb	r3, r3
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	b25b      	sxtb	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b25b      	sxtb	r3, r3
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b34      	ldr	r3, [pc, #208]	; (8003764 <packDatas+0x35c>)
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800369c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a8:	ee17 3a90 	vmov	r3, s15
 80036ac:	b21a      	sxth	r2, r3
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <packDatas+0x35c>)
 80036b0:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80036b2:	f002 f861 	bl	8005778 <quaternionToTheta>
 80036b6:	eef0 7a40 	vmov.f32	s15, s0
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <packDatas+0x35c>)
 80036bc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80036c0:	4b29      	ldr	r3, [pc, #164]	; (8003768 <packDatas+0x360>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ca:	ee17 3a90 	vmov	r3, s15
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfb8      	it	lt
 80036d2:	425b      	neglt	r3, r3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <packDatas+0x35c>)
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <packDatas+0x360>)
 80036de:	edd3 7a01 	vldr	s15, [r3, #4]
 80036e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e6:	ee17 3a90 	vmov	r3, s15
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfb8      	it	lt
 80036ee:	425b      	neglt	r3, r3
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <packDatas+0x35c>)
 80036f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <packDatas+0x360>)
 80036fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	ee17 3a90 	vmov	r3, s15
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfb8      	it	lt
 800370a:	425b      	neglt	r3, r3
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <packDatas+0x35c>)
 8003710:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003714:	f7ff fe26 	bl	8003364 <calculateCRC>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <packDatas+0x35c>)
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <packDatas+0x35c>)
 8003724:	220d      	movs	r2, #13
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <packDatas+0x35c>)
 800372c:	220a      	movs	r2, #10
 800372e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800373c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	dd06      	ble.n	8003754 <packDatas+0x34c>
		lora_activate();
 8003746:	f000 fd69 	bl	800421c <lora_activate>
		sendRF();
 800374a:	f7ff fe31 	bl	80033b0 <sendRF>
		sendPC();
 800374e:	f7ff fe45 	bl	80033dc <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 8003752:	e003      	b.n	800375c <packDatas+0x354>
		sendPC();
 8003754:	f7ff fe42 	bl	80033dc <sendPC>
		lora_deactivate();
 8003758:	f000 fd72 	bl	8004240 <lora_deactivate>
}
 800375c:	bf00      	nop
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200002a4 	.word	0x200002a4
 8003768:	200009e4 	.word	0x200009e4

0800376c <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	899b      	ldrh	r3, [r3, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	4619      	mov	r1, r3
 8003780:	f005 fadc 	bl	8008d3c <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 8003784:	f003 fe48 	bl	8007418 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2264      	movs	r2, #100	; 0x64
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	899b      	ldrh	r3, [r3, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4619      	mov	r1, r3
 80037b2:	f005 fac3 	bl	8008d3c <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80037b6:	f003 fe2f 	bl	8007418 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	609a      	str	r2, [r3, #8]
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 80037d6:	f003 fe1f 	bl	8007418 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	1ad2      	subs	r2, r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d907      	bls.n	80037fa <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	899b      	ldrh	r3, [r3, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	f005 faa1 	bl	8008d3c <HAL_GPIO_WritePin>
	}
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003808:	2200      	movs	r2, #0
 800380a:	2110      	movs	r1, #16
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <SELECT+0x14>)
 800380e:	f005 fa95 	bl	8008d3c <HAL_GPIO_WritePin>
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40020000 	.word	0x40020000

0800381c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003820:	2201      	movs	r2, #1
 8003822:	2110      	movs	r1, #16
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <DESELECT+0x14>)
 8003826:	f005 fa89 	bl	8008d3c <HAL_GPIO_WritePin>
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40020000 	.word	0x40020000

08003834 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800383e:	bf00      	nop
 8003840:	4808      	ldr	r0, [pc, #32]	; (8003864 <SPI_TxByte+0x30>)
 8003842:	f008 f9af 	bl	800bba4 <HAL_SPI_GetState>
 8003846:	4603      	mov	r3, r0
 8003848:	2b01      	cmp	r3, #1
 800384a:	d1f9      	bne.n	8003840 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800384c:	1df9      	adds	r1, r7, #7
 800384e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003852:	2201      	movs	r2, #1
 8003854:	4803      	ldr	r0, [pc, #12]	; (8003864 <SPI_TxByte+0x30>)
 8003856:	f007 fec7 	bl	800b5e8 <HAL_SPI_Transmit>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200003f8 	.word	0x200003f8

08003868 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800386e:	23ff      	movs	r3, #255	; 0xff
 8003870:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8003876:	bf00      	nop
 8003878:	4809      	ldr	r0, [pc, #36]	; (80038a0 <SPI_RxByte+0x38>)
 800387a:	f008 f993 	bl	800bba4 <HAL_SPI_GetState>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d1f9      	bne.n	8003878 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8003884:	1dba      	adds	r2, r7, #6
 8003886:	1df9      	adds	r1, r7, #7
 8003888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2301      	movs	r3, #1
 8003890:	4803      	ldr	r0, [pc, #12]	; (80038a0 <SPI_RxByte+0x38>)
 8003892:	f007 ffe5 	bl	800b860 <HAL_SPI_TransmitReceive>

  return data;
 8003896:	79bb      	ldrb	r3, [r7, #6]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200003f8 	.word	0x200003f8

080038a4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80038ac:	f7ff ffdc 	bl	8003868 <SPI_RxByte>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	701a      	strb	r2, [r3, #0]
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <SD_ReadyWait+0x34>)
 80038c8:	2232      	movs	r2, #50	; 0x32
 80038ca:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80038cc:	f7ff ffcc 	bl	8003868 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80038d0:	f7ff ffca 	bl	8003868 <SPI_RxByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	2bff      	cmp	r3, #255	; 0xff
 80038dc:	d004      	beq.n	80038e8 <SD_ReadyWait+0x28>
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SD_ReadyWait+0x34>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f3      	bne.n	80038d0 <SD_ReadyWait+0x10>

  return res;
 80038e8:	79fb      	ldrb	r3, [r7, #7]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200009f2 	.word	0x200009f2

080038f8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80038fe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003902:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8003904:	f7ff ff8a 	bl	800381c <DESELECT>

  for(int i = 0; i < 10; i++)
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	e005      	b.n	800391a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800390e:	20ff      	movs	r0, #255	; 0xff
 8003910:	f7ff ff90 	bl	8003834 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3301      	adds	r3, #1
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b09      	cmp	r3, #9
 800391e:	ddf6      	ble.n	800390e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8003920:	f7ff ff70 	bl	8003804 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8003924:	2340      	movs	r3, #64	; 0x40
 8003926:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8003938:	2395      	movs	r3, #149	; 0x95
 800393a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	e009      	b.n	8003956 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff72 	bl	8003834 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b05      	cmp	r3, #5
 800395a:	ddf2      	ble.n	8003942 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800395c:	e002      	b.n	8003964 <SD_PowerOn+0x6c>
  {
    Count--;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3b01      	subs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8003964:	f7ff ff80 	bl	8003868 <SPI_RxByte>
 8003968:	4603      	mov	r3, r0
 800396a:	2b01      	cmp	r3, #1
 800396c:	d002      	beq.n	8003974 <SD_PowerOn+0x7c>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f4      	bne.n	800395e <SD_PowerOn+0x66>
  }

  DESELECT();
 8003974:	f7ff ff52 	bl	800381c <DESELECT>
  SPI_TxByte(0XFF);
 8003978:	20ff      	movs	r0, #255	; 0xff
 800397a:	f7ff ff5b 	bl	8003834 <SPI_TxByte>

  PowerFlag = 1;
 800397e:	4b03      	ldr	r3, [pc, #12]	; (800398c <SD_PowerOn+0x94>)
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
}
 8003984:	bf00      	nop
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200002e5 	.word	0x200002e5

08003990 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <SD_PowerOff+0x14>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	200002e5 	.word	0x200002e5

080039a8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <SD_CheckPower+0x14>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200002e5 	.word	0x200002e5

080039c0 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <SD_RxDataBlock+0x68>)
 80039cc:	220a      	movs	r2, #10
 80039ce:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80039d0:	f7ff ff4a 	bl	8003868 <SPI_RxByte>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d104      	bne.n	80039e8 <SD_RxDataBlock+0x28>
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <SD_RxDataBlock+0x68>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f3      	bne.n	80039d0 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2bfe      	cmp	r3, #254	; 0xfe
 80039ec:	d001      	beq.n	80039f2 <SD_RxDataBlock+0x32>
    return FALSE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e016      	b.n	8003a20 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff53 	bl	80038a4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff4d 	bl	80038a4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3b02      	subs	r3, #2
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ed      	bne.n	80039f2 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8003a16:	f7ff ff27 	bl	8003868 <SPI_RxByte>
  SPI_RxByte();
 8003a1a:	f7ff ff25 	bl	8003868 <SPI_RxByte>

  return TRUE;
 8003a1e:	2301      	movs	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200009f1 	.word	0x200009f1

08003a2c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  uint8_t resp = 0, wc;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
  uint8_t i = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003a40:	f7ff ff3e 	bl	80038c0 <SD_ReadyWait>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2bff      	cmp	r3, #255	; 0xff
 8003a48:	d001      	beq.n	8003a4e <SD_TxDataBlock+0x22>
    return FALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e040      	b.n	8003ad0 <SD_TxDataBlock+0xa4>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff feef 	bl	8003834 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	2bfd      	cmp	r3, #253	; 0xfd
 8003a5a:	d031      	beq.n	8003ac0 <SD_TxDataBlock+0x94>
  {
    wc = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fee3 	bl	8003834 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fedc 	bl	8003834 <SPI_TxByte>
    } while (--wc);
 8003a7c:	7bbb      	ldrb	r3, [r7, #14]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	73bb      	strb	r3, [r7, #14]
 8003a82:	7bbb      	ldrb	r3, [r7, #14]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1eb      	bne.n	8003a60 <SD_TxDataBlock+0x34>

    SPI_RxByte();       /* CRC 무시 */
 8003a88:	f7ff feee 	bl	8003868 <SPI_RxByte>
    SPI_RxByte();
 8003a8c:	f7ff feec 	bl	8003868 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8003a90:	e00b      	b.n	8003aaa <SD_TxDataBlock+0x7e>
    {
      resp = SPI_RxByte();
 8003a92:	f7ff fee9 	bl	8003868 <SPI_RxByte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d006      	beq.n	8003ab2 <SD_TxDataBlock+0x86>
        break;

      i++;
 8003aa4:	7b7b      	ldrb	r3, [r7, #13]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8003aaa:	7b7b      	ldrb	r3, [r7, #13]
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d9f0      	bls.n	8003a92 <SD_TxDataBlock+0x66>
 8003ab0:	e000      	b.n	8003ab4 <SD_TxDataBlock+0x88>
        break;
 8003ab2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8003ab4:	bf00      	nop
 8003ab6:	f7ff fed7 	bl	8003868 <SPI_RxByte>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0fa      	beq.n	8003ab6 <SD_TxDataBlock+0x8a>
  }

  if ((resp & 0x1F) == 0x05)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d101      	bne.n	8003ace <SD_TxDataBlock+0xa2>
    return TRUE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <SD_TxDataBlock+0xa4>
  else
    return FALSE;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003ae4:	f7ff feec 	bl	80038c0 <SD_ReadyWait>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2bff      	cmp	r3, #255	; 0xff
 8003aec:	d001      	beq.n	8003af2 <SD_SendCmd+0x1a>
    return 0xFF;
 8003aee:	23ff      	movs	r3, #255	; 0xff
 8003af0:	e040      	b.n	8003b74 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fe9d 	bl	8003834 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fe97 	bl	8003834 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fe91 	bl	8003834 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fe8b 	bl	8003834 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fe86 	bl	8003834 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d101      	bne.n	8003b36 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8003b32:	2395      	movs	r3, #149	; 0x95
 8003b34:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b48      	cmp	r3, #72	; 0x48
 8003b3a:	d101      	bne.n	8003b40 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8003b3c:	2387      	movs	r3, #135	; 0x87
 8003b3e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fe76 	bl	8003834 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b4c      	cmp	r3, #76	; 0x4c
 8003b4c:	d101      	bne.n	8003b52 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8003b4e:	f7ff fe8b 	bl	8003868 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8003b52:	230a      	movs	r3, #10
 8003b54:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8003b56:	f7ff fe87 	bl	8003868 <SPI_RxByte>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8003b5e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da05      	bge.n	8003b72 <SD_SendCmd+0x9a>
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	73bb      	strb	r3, [r7, #14]
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f1      	bne.n	8003b56 <SD_SendCmd+0x7e>

  return res;
 8003b72:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d5      	b.n	8003d3c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8003b90:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <SD_disk_initialize+0x1c8>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <SD_disk_initialize+0x2a>
    return Stat;
 8003b9e:	4b69      	ldr	r3, [pc, #420]	; (8003d44 <SD_disk_initialize+0x1c8>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e0ca      	b.n	8003d3c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8003ba6:	f7ff fea7 	bl	80038f8 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8003baa:	f7ff fe2b 	bl	8003804 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2040      	movs	r0, #64	; 0x40
 8003bb6:	f7ff ff8f 	bl	8003ad8 <SD_SendCmd>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f040 80a5 	bne.w	8003d0c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8003bc2:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <SD_disk_initialize+0x1cc>)
 8003bc4:	2264      	movs	r2, #100	; 0x64
 8003bc6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003bc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003bcc:	2048      	movs	r0, #72	; 0x48
 8003bce:	f7ff ff83 	bl	8003ad8 <SD_SendCmd>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d158      	bne.n	8003c8a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e00c      	b.n	8003bf8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8003bde:	7bfc      	ldrb	r4, [r7, #15]
 8003be0:	f7ff fe42 	bl	8003868 <SPI_RxByte>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	f104 0310 	add.w	r3, r4, #16
 8003bec:	443b      	add	r3, r7
 8003bee:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d9ef      	bls.n	8003bde <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003bfe:	7abb      	ldrb	r3, [r7, #10]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f040 8083 	bne.w	8003d0c <SD_disk_initialize+0x190>
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	2baa      	cmp	r3, #170	; 0xaa
 8003c0a:	d17f      	bne.n	8003d0c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2077      	movs	r0, #119	; 0x77
 8003c10:	f7ff ff62 	bl	8003ad8 <SD_SendCmd>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d807      	bhi.n	8003c2a <SD_disk_initialize+0xae>
 8003c1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c1e:	2069      	movs	r0, #105	; 0x69
 8003c20:	f7ff ff5a 	bl	8003ad8 <SD_SendCmd>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8003c2a:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <SD_disk_initialize+0x1cc>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1eb      	bne.n	8003c0c <SD_disk_initialize+0x90>
 8003c34:	e000      	b.n	8003c38 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003c36:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003c38:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <SD_disk_initialize+0x1cc>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d064      	beq.n	8003d0c <SD_disk_initialize+0x190>
 8003c42:	2100      	movs	r1, #0
 8003c44:	207a      	movs	r0, #122	; 0x7a
 8003c46:	f7ff ff47 	bl	8003ad8 <SD_SendCmd>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d15d      	bne.n	8003d0c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e00c      	b.n	8003c70 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8003c56:	7bfc      	ldrb	r4, [r7, #15]
 8003c58:	f7ff fe06 	bl	8003868 <SPI_RxByte>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f104 0310 	add.w	r3, r4, #16
 8003c64:	443b      	add	r3, r7
 8003c66:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d9ef      	bls.n	8003c56 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8003c76:	7a3b      	ldrb	r3, [r7, #8]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <SD_disk_initialize+0x108>
 8003c80:	2306      	movs	r3, #6
 8003c82:	e000      	b.n	8003c86 <SD_disk_initialize+0x10a>
 8003c84:	2302      	movs	r3, #2
 8003c86:	73bb      	strb	r3, [r7, #14]
 8003c88:	e040      	b.n	8003d0c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	2077      	movs	r0, #119	; 0x77
 8003c8e:	f7ff ff23 	bl	8003ad8 <SD_SendCmd>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d808      	bhi.n	8003caa <SD_disk_initialize+0x12e>
 8003c98:	2100      	movs	r1, #0
 8003c9a:	2069      	movs	r0, #105	; 0x69
 8003c9c:	f7ff ff1c 	bl	8003ad8 <SD_SendCmd>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d801      	bhi.n	8003caa <SD_disk_initialize+0x12e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e000      	b.n	8003cac <SD_disk_initialize+0x130>
 8003caa:	2301      	movs	r3, #1
 8003cac:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d10e      	bne.n	8003cd2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2077      	movs	r0, #119	; 0x77
 8003cb8:	f7ff ff0e 	bl	8003ad8 <SD_SendCmd>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d80e      	bhi.n	8003ce0 <SD_disk_initialize+0x164>
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	2069      	movs	r0, #105	; 0x69
 8003cc6:	f7ff ff07 	bl	8003ad8 <SD_SendCmd>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d107      	bne.n	8003ce0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003cd0:	e00d      	b.n	8003cee <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2041      	movs	r0, #65	; 0x41
 8003cd6:	f7ff feff 	bl	8003ad8 <SD_SendCmd>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <SD_disk_initialize+0x1cc>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e1      	bne.n	8003cae <SD_disk_initialize+0x132>
 8003cea:	e000      	b.n	8003cee <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8003cec:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <SD_disk_initialize+0x1cc>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <SD_disk_initialize+0x18c>
 8003cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cfc:	2050      	movs	r0, #80	; 0x50
 8003cfe:	f7ff feeb 	bl	8003ad8 <SD_SendCmd>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <SD_disk_initialize+0x1d0>)
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8003d12:	f7ff fd83 	bl	800381c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8003d16:	f7ff fda7 	bl	8003868 <SPI_RxByte>

  if (type)
 8003d1a:	7bbb      	ldrb	r3, [r7, #14]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <SD_disk_initialize+0x1c8>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <SD_disk_initialize+0x1c8>)
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	e001      	b.n	8003d36 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003d32:	f7ff fe2d 	bl	8003990 <SD_PowerOff>
  }

  return Stat;
 8003d36:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <SD_disk_initialize+0x1c8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}
 8003d44:	20000000 	.word	0x20000000
 8003d48:	200009f1 	.word	0x200009f1
 8003d4c:	200002e4 	.word	0x200002e4

08003d50 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <SD_disk_status+0x14>
    return STA_NOINIT;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e002      	b.n	8003d6a <SD_disk_status+0x1a>

  return Stat;
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <SD_disk_status+0x28>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	b2db      	uxtb	r3, r3
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000

08003d7c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <SD_disk_read+0x1c>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <SD_disk_read+0x20>
    return RES_PARERR;
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e051      	b.n	8003e40 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <SD_disk_read+0xcc>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <SD_disk_read+0x32>
    return RES_NOTRDY;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e048      	b.n	8003e40 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8003dae:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <SD_disk_read+0xd0>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	025b      	lsls	r3, r3, #9
 8003dbe:	607b      	str	r3, [r7, #4]

  SELECT();
 8003dc0:	f7ff fd20 	bl	8003804 <SELECT>

  if (count == 1)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d111      	bne.n	8003dee <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	2051      	movs	r0, #81	; 0x51
 8003dce:	f7ff fe83 	bl	8003ad8 <SD_SendCmd>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d129      	bne.n	8003e2c <SD_disk_read+0xb0>
 8003dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f7ff fdef 	bl	80039c0 <SD_RxDataBlock>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d021      	beq.n	8003e2c <SD_disk_read+0xb0>
      count = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	e01e      	b.n	8003e2c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	2052      	movs	r0, #82	; 0x52
 8003df2:	f7ff fe71 	bl	8003ad8 <SD_SendCmd>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d117      	bne.n	8003e2c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8003dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e00:	68b8      	ldr	r0, [r7, #8]
 8003e02:	f7ff fddd 	bl	80039c0 <SD_RxDataBlock>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e12:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ed      	bne.n	8003dfc <SD_disk_read+0x80>
 8003e20:	e000      	b.n	8003e24 <SD_disk_read+0xa8>
          break;
 8003e22:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8003e24:	2100      	movs	r1, #0
 8003e26:	204c      	movs	r0, #76	; 0x4c
 8003e28:	f7ff fe56 	bl	8003ad8 <SD_SendCmd>
    }
  }

  DESELECT();
 8003e2c:	f7ff fcf6 	bl	800381c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8003e30:	f7ff fd1a 	bl	8003868 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	200002e4 	.word	0x200002e4

08003e50 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <SD_disk_write+0x1c>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <SD_disk_write+0x20>
    return RES_PARERR;
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e06b      	b.n	8003f48 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8003e70:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <SD_disk_write+0x100>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e062      	b.n	8003f48 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <SD_disk_write+0x100>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <SD_disk_write+0x44>
    return RES_WRPRT;
 8003e90:	2302      	movs	r3, #2
 8003e92:	e059      	b.n	8003f48 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <SD_disk_write+0x104>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	025b      	lsls	r3, r3, #9
 8003ea4:	607b      	str	r3, [r7, #4]

  SELECT();
 8003ea6:	f7ff fcad 	bl	8003804 <SELECT>

  if (count == 1)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d110      	bne.n	8003ed2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	2058      	movs	r0, #88	; 0x58
 8003eb4:	f7ff fe10 	bl	8003ad8 <SD_SendCmd>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d13a      	bne.n	8003f34 <SD_disk_write+0xe4>
 8003ebe:	21fe      	movs	r1, #254	; 0xfe
 8003ec0:	68b8      	ldr	r0, [r7, #8]
 8003ec2:	f7ff fdb3 	bl	8003a2c <SD_TxDataBlock>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d033      	beq.n	8003f34 <SD_disk_write+0xe4>
      count = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	e030      	b.n	8003f34 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <SD_disk_write+0x104>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2077      	movs	r0, #119	; 0x77
 8003ee2:	f7ff fdf9 	bl	8003ad8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	2057      	movs	r0, #87	; 0x57
 8003eea:	f7ff fdf5 	bl	8003ad8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	2059      	movs	r0, #89	; 0x59
 8003ef2:	f7ff fdf1 	bl	8003ad8 <SD_SendCmd>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d11b      	bne.n	8003f34 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003efc:	21fc      	movs	r1, #252	; 0xfc
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f7ff fd94 	bl	8003a2c <SD_TxDataBlock>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f10:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1ee      	bne.n	8003efc <SD_disk_write+0xac>
 8003f1e:	e000      	b.n	8003f22 <SD_disk_write+0xd2>
          break;
 8003f20:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8003f22:	21fd      	movs	r1, #253	; 0xfd
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7ff fd81 	bl	8003a2c <SD_TxDataBlock>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <SD_disk_write+0xe4>
      {
        count = 1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003f34:	f7ff fc72 	bl	800381c <DESELECT>
  SPI_RxByte();
 8003f38:	f7ff fc96 	bl	8003868 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000000 	.word	0x20000000
 8003f54:	200002e4 	.word	0x200002e4

08003f58 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b08b      	sub	sp, #44	; 0x2c
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	603a      	str	r2, [r7, #0]
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	460b      	mov	r3, r1
 8003f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8003f72:	2304      	movs	r3, #4
 8003f74:	e11b      	b.n	80041ae <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8003f7c:	79bb      	ldrb	r3, [r7, #6]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d129      	bne.n	8003fd6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d017      	beq.n	8003fba <SD_disk_ioctl+0x62>
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	dc1f      	bgt.n	8003fce <SD_disk_ioctl+0x76>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <SD_disk_ioctl+0x40>
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d00b      	beq.n	8003fae <SD_disk_ioctl+0x56>
 8003f96:	e01a      	b.n	8003fce <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8003f98:	f7ff fd06 	bl	80039a8 <SD_CheckPower>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8003fa2:	f7ff fcf5 	bl	8003990 <SD_PowerOff>
      res = RES_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fac:	e0fd      	b.n	80041aa <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8003fae:	f7ff fca3 	bl	80038f8 <SD_PowerOn>
      res = RES_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fb8:	e0f7      	b.n	80041aa <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	1c5c      	adds	r4, r3, #1
 8003fbe:	f7ff fcf3 	bl	80039a8 <SD_CheckPower>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003fcc:	e0ed      	b.n	80041aa <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8003fce:	2304      	movs	r3, #4
 8003fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fd4:	e0e9      	b.n	80041aa <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003fd6:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <SD_disk_ioctl+0x260>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0e2      	b.n	80041ae <SD_disk_ioctl+0x256>

    SELECT();
 8003fe8:	f7ff fc0c 	bl	8003804 <SELECT>

    switch (ctrl)
 8003fec:	79bb      	ldrb	r3, [r7, #6]
 8003fee:	2b0d      	cmp	r3, #13
 8003ff0:	f200 80cc 	bhi.w	800418c <SD_disk_ioctl+0x234>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <SD_disk_ioctl+0xa4>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	080040f7 	.word	0x080040f7
 8004000:	08004035 	.word	0x08004035
 8004004:	080040e7 	.word	0x080040e7
 8004008:	0800418d 	.word	0x0800418d
 800400c:	0800418d 	.word	0x0800418d
 8004010:	0800418d 	.word	0x0800418d
 8004014:	0800418d 	.word	0x0800418d
 8004018:	0800418d 	.word	0x0800418d
 800401c:	0800418d 	.word	0x0800418d
 8004020:	0800418d 	.word	0x0800418d
 8004024:	0800418d 	.word	0x0800418d
 8004028:	08004109 	.word	0x08004109
 800402c:	0800412d 	.word	0x0800412d
 8004030:	08004151 	.word	0x08004151
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004034:	2100      	movs	r1, #0
 8004036:	2049      	movs	r0, #73	; 0x49
 8004038:	f7ff fd4e 	bl	8003ad8 <SD_SendCmd>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 80a8 	bne.w	8004194 <SD_disk_ioctl+0x23c>
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	2110      	movs	r1, #16
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fcb8 	bl	80039c0 <SD_RxDataBlock>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 809e 	beq.w	8004194 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8004058:	7b3b      	ldrb	r3, [r7, #12]
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10e      	bne.n	8004080 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004062:	7d7b      	ldrb	r3, [r7, #21]
 8004064:	b29a      	uxth	r2, r3
 8004066:	7d3b      	ldrb	r3, [r7, #20]
 8004068:	b29b      	uxth	r3, r3
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	b29b      	uxth	r3, r3
 800406e:	4413      	add	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	3301      	adds	r3, #1
 8004074:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004076:	8bfb      	ldrh	r3, [r7, #30]
 8004078:	029a      	lsls	r2, r3, #10
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e02e      	b.n	80040de <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004080:	7c7b      	ldrb	r3, [r7, #17]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	b2da      	uxtb	r2, r3
 8004088:	7dbb      	ldrb	r3, [r7, #22]
 800408a:	09db      	lsrs	r3, r3, #7
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4413      	add	r3, r2
 8004090:	b2da      	uxtb	r2, r3
 8004092:	7d7b      	ldrb	r3, [r7, #21]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f003 0306 	and.w	r3, r3, #6
 800409c:	b2db      	uxtb	r3, r3
 800409e:	4413      	add	r3, r2
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3302      	adds	r3, #2
 80040a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80040a8:	7d3b      	ldrb	r3, [r7, #20]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	7cbb      	ldrb	r3, [r7, #18]
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80040d0:	8bfa      	ldrh	r2, [r7, #30]
 80040d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040d6:	3b09      	subs	r3, #9
 80040d8:	409a      	lsls	r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80040e4:	e056      	b.n	8004194 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ec:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80040f4:	e055      	b.n	80041a2 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80040f6:	f7ff fbe3 	bl	80038c0 <SD_ReadyWait>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2bff      	cmp	r3, #255	; 0xff
 80040fe:	d14b      	bne.n	8004198 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004106:	e047      	b.n	8004198 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004108:	2100      	movs	r1, #0
 800410a:	2049      	movs	r0, #73	; 0x49
 800410c:	f7ff fce4 	bl	8003ad8 <SD_SendCmd>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d142      	bne.n	800419c <SD_disk_ioctl+0x244>
 8004116:	2110      	movs	r1, #16
 8004118:	6a38      	ldr	r0, [r7, #32]
 800411a:	f7ff fc51 	bl	80039c0 <SD_RxDataBlock>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03b      	beq.n	800419c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800412a:	e037      	b.n	800419c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800412c:	2100      	movs	r1, #0
 800412e:	204a      	movs	r0, #74	; 0x4a
 8004130:	f7ff fcd2 	bl	8003ad8 <SD_SendCmd>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d132      	bne.n	80041a0 <SD_disk_ioctl+0x248>
 800413a:	2110      	movs	r1, #16
 800413c:	6a38      	ldr	r0, [r7, #32]
 800413e:	f7ff fc3f 	bl	80039c0 <SD_RxDataBlock>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02b      	beq.n	80041a0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800414e:	e027      	b.n	80041a0 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8004150:	2100      	movs	r1, #0
 8004152:	207a      	movs	r0, #122	; 0x7a
 8004154:	f7ff fcc0 	bl	8003ad8 <SD_SendCmd>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004164:	e00b      	b.n	800417e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8004166:	6a3c      	ldr	r4, [r7, #32]
 8004168:	1c63      	adds	r3, r4, #1
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	f7ff fb7c 	bl	8003868 <SPI_RxByte>
 8004170:	4603      	mov	r3, r0
 8004172:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004178:	3301      	adds	r3, #1
 800417a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800417e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004182:	2b03      	cmp	r3, #3
 8004184:	d9ef      	bls.n	8004166 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800418c:	2304      	movs	r3, #4
 800418e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004192:	e006      	b.n	80041a2 <SD_disk_ioctl+0x24a>
      break;
 8004194:	bf00      	nop
 8004196:	e004      	b.n	80041a2 <SD_disk_ioctl+0x24a>
      break;
 8004198:	bf00      	nop
 800419a:	e002      	b.n	80041a2 <SD_disk_ioctl+0x24a>
      break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <SD_disk_ioctl+0x24a>
      break;
 80041a0:	bf00      	nop
    }

    DESELECT();
 80041a2:	f7ff fb3b 	bl	800381c <DESELECT>
    SPI_RxByte();
 80041a6:	f7ff fb5f 	bl	8003868 <SPI_RxByte>
  }

  return res;
 80041aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	372c      	adds	r7, #44	; 0x2c
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd90      	pop	{r4, r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000

080041bc <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4603      	mov	r3, r0
 80041c6:	71fb      	strb	r3, [r7, #7]
 80041c8:	460b      	mov	r3, r1
 80041ca:	71bb      	strb	r3, [r7, #6]
 80041cc:	4613      	mov	r3, r2
 80041ce:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80041d4:	79bb      	ldrb	r3, [r7, #6]
 80041d6:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80041d8:	797b      	ldrb	r3, [r7, #5]
 80041da:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e00c      	b.n	80041fc <send_command+0x40>
        command[3 + i] = data[i];
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	441a      	add	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3303      	adds	r3, #3
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	3318      	adds	r3, #24
 80041f0:	443b      	add	r3, r7
 80041f2:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3301      	adds	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	ddef      	ble.n	80041e2 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 8004202:	f107 0108 	add.w	r1, r7, #8
 8004206:	2364      	movs	r3, #100	; 0x64
 8004208:	220c      	movs	r2, #12
 800420a:	4803      	ldr	r0, [pc, #12]	; (8004218 <send_command+0x5c>)
 800420c:	f007 fe1e 	bl	800be4c <HAL_UART_Transmit>
}
 8004210:	bf00      	nop
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000450 	.word	0x20000450

0800421c <lora_activate>:

void lora_activate()
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004226:	4805      	ldr	r0, [pc, #20]	; (800423c <lora_activate+0x20>)
 8004228:	f004 fd88 	bl	8008d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004232:	4802      	ldr	r0, [pc, #8]	; (800423c <lora_activate+0x20>)
 8004234:	f004 fd82 	bl	8008d3c <HAL_GPIO_WritePin>
}
 8004238:	bf00      	nop
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40020800 	.word	0x40020800

08004240 <lora_deactivate>:

void lora_deactivate()
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
 8004244:	2201      	movs	r2, #1
 8004246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800424a:	4805      	ldr	r0, [pc, #20]	; (8004260 <lora_deactivate+0x20>)
 800424c:	f004 fd76 	bl	8008d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8004250:	2201      	movs	r2, #1
 8004252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004256:	4802      	ldr	r0, [pc, #8]	; (8004260 <lora_deactivate+0x20>)
 8004258:	f004 fd70 	bl	8008d3c <HAL_GPIO_WritePin>
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40020800 	.word	0x40020800

08004264 <lora_configure>:

void lora_configure(lorastruct *config)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2208      	movs	r2, #8
 800429a:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2207      	movs	r2, #7
 80042a0:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	79db      	ldrb	r3, [r3, #7]
 80042a6:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	799b      	ldrb	r3, [r3, #6]
 80042ac:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7a5b      	ldrb	r3, [r3, #9]
 80042b2:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7c5b      	ldrb	r3, [r3, #17]
 80042bc:	4313      	orrs	r3, r2
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	789a      	ldrb	r2, [r3, #2]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7a9b      	ldrb	r3, [r3, #10]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	78db      	ldrb	r3, [r3, #3]
 80042da:	4313      	orrs	r3, r2
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7a1b      	ldrb	r3, [r3, #8]
 80042e4:	2b53      	cmp	r3, #83	; 0x53
 80042e6:	d902      	bls.n	80042ee <lora_configure+0x8a>
    	config->channel = 83;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2253      	movs	r2, #83	; 0x53
 80042ec:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	7a1b      	ldrb	r3, [r3, #8]
 80042f2:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7ada      	ldrb	r2, [r3, #11]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7b1b      	ldrb	r3, [r3, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7b5b      	ldrb	r3, [r3, #13]
 8004304:	4313      	orrs	r3, r2
 8004306:	b2da      	uxtb	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7b9b      	ldrb	r3, [r3, #14]
 800430c:	4313      	orrs	r3, r2
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7bdb      	ldrb	r3, [r3, #15]
 8004314:	4313      	orrs	r3, r2
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7c1b      	ldrb	r3, [r3, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	795b      	ldrb	r3, [r3, #5]
 8004326:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	791b      	ldrb	r3, [r3, #4]
 800432c:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	2209      	movs	r2, #9
 8004334:	2100      	movs	r1, #0
 8004336:	20c0      	movs	r0, #192	; 0xc0
 8004338:	f7ff ff40 	bl	80041bc <send_command>
}
 800433c:	bf00      	nop
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	0000      	movs	r0, r0
	...

08004348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800434e:	f002 fffd 	bl	800734c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004352:	f000 fb11 	bl	8004978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004356:	f000 fd89 	bl	8004e6c <MX_GPIO_Init>
  MX_DMA_Init();
 800435a:	f000 fd41 	bl	8004de0 <MX_DMA_Init>
  MX_I2C3_Init();
 800435e:	f000 fc0d 	bl	8004b7c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8004362:	f000 fcbf 	bl	8004ce4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004366:	f000 fce7 	bl	8004d38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800436a:	f000 fbd9 	bl	8004b20 <MX_I2C1_Init>
  MX_ADC1_Init();
 800436e:	f000 fb77 	bl	8004a60 <MX_ADC1_Init>
  MX_UART4_Init();
 8004372:	f000 fc8d 	bl	8004c90 <MX_UART4_Init>
  MX_RTC_Init();
 8004376:	f000 fc2f 	bl	8004bd8 <MX_RTC_Init>
  MX_SPI1_Init();
 800437a:	f000 fc53 	bl	8004c24 <MX_SPI1_Init>
  MX_FATFS_Init();
 800437e:	f008 fffd 	bl	800d37c <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8004382:	f000 fd03 	bl	8004d8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2102      	movs	r1, #2
 800438a:	2009      	movs	r0, #9
 800438c:	f003 fd83 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8004390:	2200      	movs	r2, #0
 8004392:	2102      	movs	r1, #2
 8004394:	200a      	movs	r0, #10
 8004396:	f003 fd7e 	bl	8007e96 <HAL_NVIC_SetPriority>

  usr_fatfsInitial();
 800439a:	f002 fb63 	bl	8006a64 <usr_fatfsInitial>
  sdInitials();
 800439e:	f002 fb67 	bl	8006a70 <sdInitials>

  lora_deactivate();
 80043a2:	f7ff ff4d 	bl	8004240 <lora_deactivate>
  HAL_PWR_EnableBkUpAccess();
 80043a6:	f005 fd05 	bl	8009db4 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 80043aa:	4b93      	ldr	r3, [pc, #588]	; (80045f8 <main+0x2b0>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4a92      	ldr	r2, [pc, #584]	; (80045f8 <main+0x2b0>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30
  HAL_PWR_EnableBkUpReg();
 80043b6:	f005 fd11 	bl	8009ddc <HAL_PWREx_EnableBkUpReg>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80043ba:	2200      	movs	r2, #0
 80043bc:	498f      	ldr	r1, [pc, #572]	; (80045fc <main+0x2b4>)
 80043be:	4890      	ldr	r0, [pc, #576]	; (8004600 <main+0x2b8>)
 80043c0:	f006 ff0a 	bl	800b1d8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80043c4:	2200      	movs	r2, #0
 80043c6:	498f      	ldr	r1, [pc, #572]	; (8004604 <main+0x2bc>)
 80043c8:	488d      	ldr	r0, [pc, #564]	; (8004600 <main+0x2b8>)
 80043ca:	f006 ff63 	bl	800b294 <HAL_RTC_GetDate>

  HAL_Delay(5);
 80043ce:	2005      	movs	r0, #5
 80043d0:	f003 f82e 	bl	8007430 <HAL_Delay>
  bme280_begin();
 80043d4:	f000 fe00 	bl	8004fd8 <bme280_begin>
  bmi088_begin();
 80043d8:	f000 fe14 	bl	8005004 <bmi088_begin>

  if(measure_abs_time(sTime, sDate) > 1)
 80043dc:	4b87      	ldr	r3, [pc, #540]	; (80045fc <main+0x2b4>)
 80043de:	4a89      	ldr	r2, [pc, #548]	; (8004604 <main+0x2bc>)
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	9201      	str	r2, [sp, #4]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	9200      	str	r2, [sp, #0]
 80043e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ea:	f001 fc1b 	bl	8005c24 <measure_abs_time>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d971      	bls.n	80044d8 <main+0x190>
  {
	  if(is_BMI_ok)
 80043f4:	4b84      	ldr	r3, [pc, #528]	; (8004608 <main+0x2c0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <main+0xb8>
		  bmi088_config();
 80043fc:	f7fe f8e4 	bl	80025c8 <bmi088_config>
	  if(is_BME_ok)
 8004400:	4b82      	ldr	r3, [pc, #520]	; (800460c <main+0x2c4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <main+0xc4>
		  bme280_config();
 8004408:	f7fd fb46 	bl	8001a98 <bme280_config>

	  saved_datas->r_status = STAT_ROCKET_READY;
 800440c:	4b80      	ldr	r3, [pc, #512]	; (8004610 <main+0x2c8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
	  saved_datas->max_altitude = 0.0;
 8004414:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <main+0x2c8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	63da      	str	r2, [r3, #60]	; 0x3c
	  saved_datas->offset_vals[0] = 0.0;
 800441e:	4b7c      	ldr	r3, [pc, #496]	; (8004610 <main+0x2c8>)
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  saved_datas->offset_vals[1] = 0.0;
 800442e:	4b78      	ldr	r3, [pc, #480]	; (8004610 <main+0x2c8>)
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  saved_datas->offset_vals[2] = 0.0;
 800443e:	4b74      	ldr	r3, [pc, #464]	; (8004610 <main+0x2c8>)
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	  saved_datas->q[0] = 0.0;
 800444e:	4b70      	ldr	r3, [pc, #448]	; (8004610 <main+0x2c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
	  saved_datas->q[1] = 0.0;
 8004458:	4b6d      	ldr	r3, [pc, #436]	; (8004610 <main+0x2c8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
	  saved_datas->q[2] = 0.0;
 8004462:	4b6b      	ldr	r3, [pc, #428]	; (8004610 <main+0x2c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	60da      	str	r2, [r3, #12]
	  saved_datas->q[3] = 0.0;
 800446c:	4b68      	ldr	r3, [pc, #416]	; (8004610 <main+0x2c8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	611a      	str	r2, [r3, #16]

	  for(int i = 0; i < 20; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e00a      	b.n	8004492 <main+0x14a>
	  {
		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800447c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004480:	4864      	ldr	r0, [pc, #400]	; (8004614 <main+0x2cc>)
 8004482:	f004 fc74 	bl	8008d6e <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8004486:	2032      	movs	r0, #50	; 0x32
 8004488:	f002 ffd2 	bl	8007430 <HAL_Delay>
	  for(int i = 0; i < 20; i++)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3301      	adds	r3, #1
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b13      	cmp	r3, #19
 8004496:	ddf1      	ble.n	800447c <main+0x134>
	  }

	  loraBegin();
 8004498:	f000 fdd6 	bl	8005048 <loraBegin>
	  lora_activate();
 800449c:	f7ff febe 	bl	800421c <lora_activate>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 80044a0:	2364      	movs	r3, #100	; 0x64
 80044a2:	2213      	movs	r2, #19
 80044a4:	495c      	ldr	r1, [pc, #368]	; (8004618 <main+0x2d0>)
 80044a6:	485d      	ldr	r0, [pc, #372]	; (800461c <main+0x2d4>)
 80044a8:	f007 fcd0 	bl	800be4c <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
	  if(is_BMI_ok){
 80044ac:	4b56      	ldr	r3, [pc, #344]	; (8004608 <main+0x2c0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <main+0x170>
		  getOffset();
 80044b4:	f7fe fec8 	bl	8003248 <getOffset>
	  }

	  getInitialQuaternion();
 80044b8:	f001 fa1e 	bl	80058f8 <getInitialQuaternion>

#ifndef	ROCKET_CARD
  straing_gage_gpio_init(&loadcell, GPIO_0_GPIO_Port, GPIO_0_Pin, GPIO_1_GPIO_Port, GPIO_1_Pin);
 80044bc:	2302      	movs	r3, #2
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4b54      	ldr	r3, [pc, #336]	; (8004614 <main+0x2cc>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	4953      	ldr	r1, [pc, #332]	; (8004614 <main+0x2cc>)
 80044c6:	4856      	ldr	r0, [pc, #344]	; (8004620 <main+0x2d8>)
 80044c8:	f002 f8dd 	bl	8006686 <straing_gage_gpio_init>
#endif
  sd_transmit("ok");
 80044cc:	4855      	ldr	r0, [pc, #340]	; (8004624 <main+0x2dc>)
 80044ce:	f002 fb65 	bl	8006b9c <sd_transmit>
	  HAL_Delay(10);
 80044d2:	200a      	movs	r0, #10
 80044d4:	f002 ffac 	bl	8007430 <HAL_Delay>
  }



  HAL_UART_DeInit(&huart4);
 80044d8:	4853      	ldr	r0, [pc, #332]	; (8004628 <main+0x2e0>)
 80044da:	f007 fc88 	bl	800bdee <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 80044de:	484f      	ldr	r0, [pc, #316]	; (800461c <main+0x2d4>)
 80044e0:	f007 fc85 	bl	800bdee <HAL_UART_DeInit>
  huart4.Init.BaudRate = 115200;
 80044e4:	4b50      	ldr	r3, [pc, #320]	; (8004628 <main+0x2e0>)
 80044e6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044ea:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 80044ec:	4b4b      	ldr	r3, [pc, #300]	; (800461c <main+0x2d4>)
 80044ee:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80044f2:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//Telemetry
 80044f4:	484c      	ldr	r0, [pc, #304]	; (8004628 <main+0x2e0>)
 80044f6:	f007 fc2d 	bl	800bd54 <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 80044fa:	4848      	ldr	r0, [pc, #288]	; (800461c <main+0x2d4>)
 80044fc:	f007 fc2a 	bl	800bd54 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8004500:	484a      	ldr	r0, [pc, #296]	; (800462c <main+0x2e4>)
 8004502:	f003 fd0d 	bl	8007f20 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 8004506:	484a      	ldr	r0, [pc, #296]	; (8004630 <main+0x2e8>)
 8004508:	f003 fd0a 	bl	8007f20 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 800450c:	4849      	ldr	r0, [pc, #292]	; (8004634 <main+0x2ec>)
 800450e:	f003 fd07 	bl	8007f20 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 8004512:	4849      	ldr	r0, [pc, #292]	; (8004638 <main+0x2f0>)
 8004514:	f003 fd04 	bl	8007f20 <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8004518:	2203      	movs	r2, #3
 800451a:	4948      	ldr	r1, [pc, #288]	; (800463c <main+0x2f4>)
 800451c:	4842      	ldr	r0, [pc, #264]	; (8004628 <main+0x2e0>)
 800451e:	f007 fda5 	bl	800c06c <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <main+0x2f8>)
 8004524:	4a47      	ldr	r2, [pc, #284]	; (8004644 <main+0x2fc>)
 8004526:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8004528:	4b45      	ldr	r3, [pc, #276]	; (8004640 <main+0x2f8>)
 800452a:	2208      	movs	r2, #8
 800452c:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 800452e:	4b46      	ldr	r3, [pc, #280]	; (8004648 <main+0x300>)
 8004530:	4a44      	ldr	r2, [pc, #272]	; (8004644 <main+0x2fc>)
 8004532:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 8004534:	4b44      	ldr	r3, [pc, #272]	; (8004648 <main+0x300>)
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 800453a:	4b44      	ldr	r3, [pc, #272]	; (800464c <main+0x304>)
 800453c:	4a35      	ldr	r2, [pc, #212]	; (8004614 <main+0x2cc>)
 800453e:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 8004540:	4b42      	ldr	r3, [pc, #264]	; (800464c <main+0x304>)
 8004542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004546:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <main+0x308>)
 800454a:	4a32      	ldr	r2, [pc, #200]	; (8004614 <main+0x2cc>)
 800454c:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 800454e:	4b40      	ldr	r3, [pc, #256]	; (8004650 <main+0x308>)
 8004550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004554:	819a      	strh	r2, [r3, #12]

  //Interrupt activation for IMU sensor.
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004556:	2009      	movs	r0, #9
 8004558:	f003 fcb9 	bl	8007ece <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800455c:	200a      	movs	r0, #10
 800455e:	f003 fcb6 	bl	8007ece <HAL_NVIC_EnableIRQ>
  loraLastTime = -1.0;
 8004562:	4b3c      	ldr	r3, [pc, #240]	; (8004654 <main+0x30c>)
 8004564:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <main+0x310>)
 8004566:	601a      	str	r2, [r3, #0]

  //This macro for viewing the gps raw data.
  //VIEW_GPS()

  UsrGpsL86Init(&huart2);
 8004568:	482c      	ldr	r0, [pc, #176]	; (800461c <main+0x2d4>)
 800456a:	f002 fcdd 	bl	8006f28 <UsrGpsL86Init>

  ext_pin_open_duration(&buzzer, 1000);
 800456e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004572:	4837      	ldr	r0, [pc, #220]	; (8004650 <main+0x308>)
 8004574:	f7ff f912 	bl	800379c <ext_pin_open_duration>
  BMI_sensor.rawDatas.isGyroUpdated = 0;
 8004578:	4b38      	ldr	r3, [pc, #224]	; (800465c <main+0x314>)
 800457a:	2200      	movs	r2, #0
 800457c:	745a      	strb	r2, [r3, #17]
  BMI_sensor.rawDatas.isAccelUpdated = 0;
 800457e:	4b37      	ldr	r3, [pc, #220]	; (800465c <main+0x314>)
 8004580:	2200      	movs	r2, #0
 8004582:	749a      	strb	r2, [r3, #18]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is_BMI_ok)
 8004584:	4b20      	ldr	r3, [pc, #128]	; (8004608 <main+0x2c0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <main+0x248>
		  bmi088_update();
 800458c:	f7fe fa60 	bl	8002a50 <bmi088_update>
	  if(is_BME_ok)
 8004590:	4b1e      	ldr	r3, [pc, #120]	; (800460c <main+0x2c4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <main+0x254>
		  bme280_update();
 8004598:	f7fd fc3e 	bl	8001e18 <bme280_update>

	  measurePower(&guc);
 800459c:	4830      	ldr	r0, [pc, #192]	; (8004660 <main+0x318>)
 800459e:	f000 fd87 	bl	80050b0 <measurePower>

	  ext_pin_update(&mos_1);
 80045a2:	4827      	ldr	r0, [pc, #156]	; (8004640 <main+0x2f8>)
 80045a4:	f7ff f913 	bl	80037ce <ext_pin_update>
	  ext_pin_update(&mos_2);
 80045a8:	4827      	ldr	r0, [pc, #156]	; (8004648 <main+0x300>)
 80045aa:	f7ff f910 	bl	80037ce <ext_pin_update>
	  ext_pin_update(&led);
 80045ae:	4827      	ldr	r0, [pc, #156]	; (800464c <main+0x304>)
 80045b0:	f7ff f90d 	bl	80037ce <ext_pin_update>
	  ext_pin_update(&buzzer);
 80045b4:	4826      	ldr	r0, [pc, #152]	; (8004650 <main+0x308>)
 80045b6:	f7ff f90a 	bl	80037ce <ext_pin_update>

#if defined(ALGORITHM_1)
	  if(is_BME_ok)
 80045ba:	4b14      	ldr	r3, [pc, #80]	; (800460c <main+0x2c4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <main+0x280>
		  algorithm_1_update(&BME280_sensor);
 80045c2:	4828      	ldr	r0, [pc, #160]	; (8004664 <main+0x31c>)
 80045c4:	f7fc feb4 	bl	8001330 <algorithm_1_update>
#endif
#if defined(ALGORITHM_2)
	  BMI_sensor.angle = quaternionToTheta();
 80045c8:	f001 f8d6 	bl	8005778 <quaternionToTheta>
 80045cc:	eef0 7a40 	vmov.f32	s15, s0
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <main+0x314>)
 80045d2:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	  if(is_BMI_ok)
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <main+0x2c0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <main+0x29e>
		  algorithm_2_update(&BME280_sensor, &BMI_sensor);
 80045de:	491f      	ldr	r1, [pc, #124]	; (800465c <main+0x314>)
 80045e0:	4820      	ldr	r0, [pc, #128]	; (8004664 <main+0x31c>)
 80045e2:	f7fc ffd1 	bl	8001588 <algorithm_2_update>

#ifdef ROCKET_CARD
		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
		  else if(saved_datas->r_status > STAT_MOTOR_BURNOUT){lora_hz = 1;}
#else
		  if(saved_datas->r_status == STAT_FLIGHT_STARTED){lora_hz = 5;}
 80045e6:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <main+0x2c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d13f      	bne.n	8004670 <main+0x328>
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <main+0x320>)
 80045f2:	4a1e      	ldr	r2, [pc, #120]	; (800466c <main+0x324>)
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e044      	b.n	8004682 <main+0x33a>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	200008a4 	.word	0x200008a4
 8004600:	200003d8 	.word	0x200003d8
 8004604:	200008b8 	.word	0x200008b8
 8004608:	200008e0 	.word	0x200008e0
 800460c:	200008dc 	.word	0x200008dc
 8004610:	20000008 	.word	0x20000008
 8004614:	40020400 	.word	0x40020400
 8004618:	08017900 	.word	0x08017900
 800461c:	200004d8 	.word	0x200004d8
 8004620:	2000088c 	.word	0x2000088c
 8004624:	08017914 	.word	0x08017914
 8004628:	20000450 	.word	0x20000450
 800462c:	20000620 	.word	0x20000620
 8004630:	20000680 	.word	0x20000680
 8004634:	20000560 	.word	0x20000560
 8004638:	200005c0 	.word	0x200005c0
 800463c:	20000844 	.word	0x20000844
 8004640:	2000084c 	.word	0x2000084c
 8004644:	40020800 	.word	0x40020800
 8004648:	2000085c 	.word	0x2000085c
 800464c:	2000086c 	.word	0x2000086c
 8004650:	2000087c 	.word	0x2000087c
 8004654:	200008cc 	.word	0x200008cc
 8004658:	bf800000 	.word	0xbf800000
 800465c:	20000710 	.word	0x20000710
 8004660:	20000834 	.word	0x20000834
 8004664:	200006e0 	.word	0x200006e0
 8004668:	20000004 	.word	0x20000004
 800466c:	40a00000 	.word	0x40a00000
		  else if(saved_datas->r_status == STAT_TOUCH_DOWN){lora_hz = 1;}
 8004670:	4bab      	ldr	r3, [pc, #684]	; (8004920 <main+0x5d8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b06      	cmp	r3, #6
 8004678:	d103      	bne.n	8004682 <main+0x33a>
 800467a:	4baa      	ldr	r3, [pc, #680]	; (8004924 <main+0x5dc>)
 800467c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004680:	601a      	str	r2, [r3, #0]
#endif

		  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8004682:	f002 fec9 	bl	8007418 <HAL_GetTick>
 8004686:	ee07 0a90 	vmov	s15, r0
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	ee17 0a90 	vmov	r0, s15
 8004692:	f7fb ff79 	bl	8000588 <__aeabi_f2d>
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	4ba3      	ldr	r3, [pc, #652]	; (8004928 <main+0x5e0>)
 800469c:	f7fc f8f6 	bl	800088c <__aeabi_ddiv>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	f7fc fabe 	bl	8000c28 <__aeabi_d2f>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4a9f      	ldr	r2, [pc, #636]	; (800492c <main+0x5e4>)
 80046b0:	6013      	str	r3, [r2, #0]
	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 80046b2:	4b9e      	ldr	r3, [pc, #632]	; (800492c <main+0x5e4>)
 80046b4:	ed93 7a00 	vldr	s14, [r3]
 80046b8:	4b9d      	ldr	r3, [pc, #628]	; (8004930 <main+0x5e8>)
 80046ba:	edd3 7a00 	vldr	s15, [r3]
 80046be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c2:	eef0 7ae7 	vabs.f32	s15, s15
 80046c6:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8004934 <main+0x5ec>
 80046ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	dd5a      	ble.n	800478a <main+0x442>
		 {
			 if(saved_datas->r_status == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0 && is_BMI_ok == 1)
 80046d4:	4b92      	ldr	r3, [pc, #584]	; (8004920 <main+0x5d8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d151      	bne.n	8004782 <main+0x43a>
 80046de:	4b96      	ldr	r3, [pc, #600]	; (8004938 <main+0x5f0>)
 80046e0:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80046e4:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8004908 <main+0x5c0>
 80046e8:	eeb0 0a47 	vmov.f32	s0, s14
 80046ec:	eef0 0a67 	vmov.f32	s1, s15
 80046f0:	f011 faae 	bl	8015c50 <pow>
 80046f4:	ec55 4b10 	vmov	r4, r5, d0
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <main+0x5f0>)
 80046fa:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80046fe:	ed9f 1b82 	vldr	d1, [pc, #520]	; 8004908 <main+0x5c0>
 8004702:	eeb0 0a47 	vmov.f32	s0, s14
 8004706:	eef0 0a67 	vmov.f32	s1, s15
 800470a:	f011 faa1 	bl	8015c50 <pow>
 800470e:	ec53 2b10 	vmov	r2, r3, d0
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f7fb fdd9 	bl	80002cc <__adddf3>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4614      	mov	r4, r2
 8004720:	461d      	mov	r5, r3
 8004722:	4b85      	ldr	r3, [pc, #532]	; (8004938 <main+0x5f0>)
 8004724:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004728:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8004908 <main+0x5c0>
 800472c:	eeb0 0a47 	vmov.f32	s0, s14
 8004730:	eef0 0a67 	vmov.f32	s1, s15
 8004734:	f011 fa8c 	bl	8015c50 <pow>
 8004738:	ec53 2b10 	vmov	r2, r3, d0
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fdc4 	bl	80002cc <__adddf3>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	ec43 2b17 	vmov	d7, r2, r3
 800474c:	eeb0 0a47 	vmov.f32	s0, s14
 8004750:	eef0 0a67 	vmov.f32	s1, s15
 8004754:	f011 faec 	bl	8015d30 <sqrt>
 8004758:	ec51 0b10 	vmov	r0, r1, d0
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	4b76      	ldr	r3, [pc, #472]	; (800493c <main+0x5f4>)
 8004762:	f7fc f9db 	bl	8000b1c <__aeabi_dcmplt>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <main+0x43a>
 800476c:	4b74      	ldr	r3, [pc, #464]	; (8004940 <main+0x5f8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d106      	bne.n	8004782 <main+0x43a>
			 {
				 getInitialQuaternion();
 8004774:	f001 f8c0 	bl	80058f8 <getInitialQuaternion>
				 ext_pin_open_duration(&buzzer, 500);
 8004778:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800477c:	4871      	ldr	r0, [pc, #452]	; (8004944 <main+0x5fc>)
 800477e:	f7ff f80d 	bl	800379c <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <main+0x5e4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6a      	ldr	r2, [pc, #424]	; (8004930 <main+0x5e8>)
 8004788:	6013      	str	r3, [r2, #0]



		 //Lora timer;
		 //loop_counter += 1;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 800478a:	f002 fe45 	bl	8007418 <HAL_GetTick>
 800478e:	ee07 0a90 	vmov	s15, r0
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	ee17 0a90 	vmov	r0, s15
 800479a:	f7fb fef5 	bl	8000588 <__aeabi_f2d>
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	4b61      	ldr	r3, [pc, #388]	; (8004928 <main+0x5e0>)
 80047a4:	f7fc f872 	bl	800088c <__aeabi_ddiv>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fc fa3a 	bl	8000c28 <__aeabi_d2f>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4a5d      	ldr	r2, [pc, #372]	; (800492c <main+0x5e4>)
 80047b8:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 80047ba:	4b5c      	ldr	r3, [pc, #368]	; (800492c <main+0x5e4>)
 80047bc:	ed93 7a00 	vldr	s14, [r3]
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <main+0x600>)
 80047c2:	edd3 7a00 	vldr	s15, [r3]
 80047c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ca:	eef0 7ae7 	vabs.f32	s15, s15
 80047ce:	ee17 0a90 	vmov	r0, s15
 80047d2:	f7fb fed9 	bl	8000588 <__aeabi_f2d>
 80047d6:	4604      	mov	r4, r0
 80047d8:	460d      	mov	r5, r1
 80047da:	4b52      	ldr	r3, [pc, #328]	; (8004924 <main+0x5dc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb fed2 	bl	8000588 <__aeabi_f2d>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	4957      	ldr	r1, [pc, #348]	; (800494c <main+0x604>)
 80047ee:	f7fc f84d 	bl	800088c <__aeabi_ddiv>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fc f9ad 	bl	8000b58 <__aeabi_dcmpgt>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00f      	beq.n	8004824 <main+0x4dc>
		 {
			 //BME280_sensor.velocity = (float)(loop_counter);
			 getWatt();
 8004804:	f000 fce8 	bl	80051d8 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, saved_datas->r_status);
 8004808:	4b45      	ldr	r3, [pc, #276]	; (8004920 <main+0x5d8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4b4f      	ldr	r3, [pc, #316]	; (8004950 <main+0x608>)
 8004812:	4a50      	ldr	r2, [pc, #320]	; (8004954 <main+0x60c>)
 8004814:	4950      	ldr	r1, [pc, #320]	; (8004958 <main+0x610>)
 8004816:	4848      	ldr	r0, [pc, #288]	; (8004938 <main+0x5f0>)
 8004818:	f7fe fdf6 	bl	8003408 <packDatas>
			 loraLastTime = currentTime;
 800481c:	4b43      	ldr	r3, [pc, #268]	; (800492c <main+0x5e4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a49      	ldr	r2, [pc, #292]	; (8004948 <main+0x600>)
 8004822:	6013      	str	r3, [r2, #0]
			 //loop_counter = 0;
		 }

		 if(fabs(currentTime - sd_last_time_f) > 0.1)
 8004824:	4b41      	ldr	r3, [pc, #260]	; (800492c <main+0x5e4>)
 8004826:	ed93 7a00 	vldr	s14, [r3]
 800482a:	4b4c      	ldr	r3, [pc, #304]	; (800495c <main+0x614>)
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004834:	eef0 7ae7 	vabs.f32	s15, s15
 8004838:	ee17 0a90 	vmov	r0, s15
 800483c:	f7fb fea4 	bl	8000588 <__aeabi_f2d>
 8004840:	a333      	add	r3, pc, #204	; (adr r3, 8004910 <main+0x5c8>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fc f987 	bl	8000b58 <__aeabi_dcmpgt>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d014      	beq.n	800487a <main+0x532>
		 {
			 sdDataLogger(sd_log_counter, &BME280_sensor, &BMI_sensor, saved_datas, &gnss_data, &guc); // SD TRANSMIT
 8004850:	4b43      	ldr	r3, [pc, #268]	; (8004960 <main+0x618>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4b32      	ldr	r3, [pc, #200]	; (8004920 <main+0x5d8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <main+0x608>)
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	4a3d      	ldr	r2, [pc, #244]	; (8004954 <main+0x60c>)
 800485e:	9200      	str	r2, [sp, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	; (8004938 <main+0x5f0>)
 8004862:	493d      	ldr	r1, [pc, #244]	; (8004958 <main+0x610>)
 8004864:	f002 f9d2 	bl	8006c0c <sdDataLogger>
			 sd_log_counter++;
 8004868:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <main+0x618>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <main+0x618>)
 8004870:	6013      	str	r3, [r2, #0]
			 sd_last_time_f = currentTime;
 8004872:	4b2e      	ldr	r3, [pc, #184]	; (800492c <main+0x5e4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a39      	ldr	r2, [pc, #228]	; (800495c <main+0x614>)
 8004878:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS update function.
		 if(fabs(currentTime - gnss_last_update_time) > 1.0)
 800487a:	4b2c      	ldr	r3, [pc, #176]	; (800492c <main+0x5e4>)
 800487c:	ed93 7a00 	vldr	s14, [r3]
 8004880:	4b38      	ldr	r3, [pc, #224]	; (8004964 <main+0x61c>)
 8004882:	edd3 7a00 	vldr	s15, [r3]
 8004886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800488a:	eef0 7ae7 	vabs.f32	s15, s15
 800488e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	dd06      	ble.n	80048aa <main+0x562>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 800489c:	482d      	ldr	r0, [pc, #180]	; (8004954 <main+0x60c>)
 800489e:	f002 fb53 	bl	8006f48 <Usr_GpsL86GetValues>
			 gnss_last_update_time = currentTime;
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <main+0x5e4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <main+0x61c>)
 80048a8:	6013      	str	r3, [r2, #0]
		 }

		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <main+0x5e4>)
 80048ac:	ed93 7a00 	vldr	s14, [r3]
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <main+0x620>)
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ba:	eef0 7ae7 	vabs.f32	s15, s15
 80048be:	ee17 0a90 	vmov	r0, s15
 80048c2:	f7fb fe61 	bl	8000588 <__aeabi_f2d>
 80048c6:	a314      	add	r3, pc, #80	; (adr r3, 8004918 <main+0x5d0>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fc f944 	bl	8000b58 <__aeabi_dcmpgt>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <main+0x5bc>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80048d6:	2200      	movs	r2, #0
 80048d8:	4924      	ldr	r1, [pc, #144]	; (800496c <main+0x624>)
 80048da:	4825      	ldr	r0, [pc, #148]	; (8004970 <main+0x628>)
 80048dc:	f006 fc7c 	bl	800b1d8 <HAL_RTC_GetTime>
			 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80048e0:	2200      	movs	r2, #0
 80048e2:	4924      	ldr	r1, [pc, #144]	; (8004974 <main+0x62c>)
 80048e4:	4822      	ldr	r0, [pc, #136]	; (8004970 <main+0x628>)
 80048e6:	f006 fcd5 	bl	800b294 <HAL_RTC_GetDate>
			 save_time(sTime, sDate);
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <main+0x624>)
 80048ec:	4a21      	ldr	r2, [pc, #132]	; (8004974 <main+0x62c>)
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	9201      	str	r2, [sp, #4]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048f8:	f001 f95a 	bl	8005bb0 <save_time>
			 lastTime = currentTime;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <main+0x5e4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <main+0x620>)
 8004902:	6013      	str	r3, [r2, #0]
	  if(is_BMI_ok)
 8004904:	e63e      	b.n	8004584 <main+0x23c>
 8004906:	bf00      	nop
 8004908:	00000000 	.word	0x00000000
 800490c:	40000000 	.word	0x40000000
 8004910:	9999999a 	.word	0x9999999a
 8004914:	3fb99999 	.word	0x3fb99999
 8004918:	9999999a 	.word	0x9999999a
 800491c:	3fc99999 	.word	0x3fc99999
 8004920:	20000008 	.word	0x20000008
 8004924:	20000004 	.word	0x20000004
 8004928:	408f4000 	.word	0x408f4000
 800492c:	200008bc 	.word	0x200008bc
 8004930:	200008c4 	.word	0x200008c4
 8004934:	42700000 	.word	0x42700000
 8004938:	20000710 	.word	0x20000710
 800493c:	40140000 	.word	0x40140000
 8004940:	200008e0 	.word	0x200008e0
 8004944:	2000087c 	.word	0x2000087c
 8004948:	200008cc 	.word	0x200008cc
 800494c:	3ff00000 	.word	0x3ff00000
 8004950:	20000834 	.word	0x20000834
 8004954:	20000804 	.word	0x20000804
 8004958:	200006e0 	.word	0x200006e0
 800495c:	200008d4 	.word	0x200008d4
 8004960:	200008e4 	.word	0x200008e4
 8004964:	200008d8 	.word	0x200008d8
 8004968:	200008c0 	.word	0x200008c0
 800496c:	200008a4 	.word	0x200008a4
 8004970:	200003d8 	.word	0x200003d8
 8004974:	200008b8 	.word	0x200008b8

08004978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b094      	sub	sp, #80	; 0x50
 800497c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800497e:	f107 031c 	add.w	r3, r7, #28
 8004982:	2234      	movs	r2, #52	; 0x34
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f00c f82a 	bl	80109e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	2300      	movs	r3, #0
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	4b2d      	ldr	r3, [pc, #180]	; (8004a58 <SystemClock_Config+0xe0>)
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <SystemClock_Config+0xe0>)
 80049a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049aa:	6413      	str	r3, [r2, #64]	; 0x40
 80049ac:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <SystemClock_Config+0xe0>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049b8:	2300      	movs	r3, #0
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <SystemClock_Config+0xe4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <SystemClock_Config+0xe4>)
 80049c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <SystemClock_Config+0xe4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80049d4:	2305      	movs	r3, #5
 80049d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80049de:	2301      	movs	r3, #1
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049e2:	2302      	movs	r3, #2
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80049ec:	2304      	movs	r3, #4
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80049f0:	23b4      	movs	r3, #180	; 0xb4
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049f4:	2302      	movs	r3, #2
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80049f8:	2302      	movs	r3, #2
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80049fc:	2302      	movs	r3, #2
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a00:	f107 031c 	add.w	r3, r7, #28
 8004a04:	4618      	mov	r0, r3
 8004a06:	f006 f8d3 	bl	800abb0 <HAL_RCC_OscConfig>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004a10:	f000 fc4a 	bl	80052a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a14:	f005 fa08 	bl	8009e28 <HAL_PWREx_EnableOverDrive>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004a1e:	f000 fc43 	bl	80052a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a22:	230f      	movs	r3, #15
 8004a24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a26:	2302      	movs	r3, #2
 8004a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a3a:	f107 0308 	add.w	r3, r7, #8
 8004a3e:	2105      	movs	r1, #5
 8004a40:	4618      	mov	r0, r3
 8004a42:	f005 fa41 	bl	8009ec8 <HAL_RCC_ClockConfig>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004a4c:	f000 fc2c 	bl	80052a8 <Error_Handler>
  }
}
 8004a50:	bf00      	nop
 8004a52:	3750      	adds	r7, #80	; 0x50
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40007000 	.word	0x40007000

08004a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a66:	463b      	mov	r3, r7
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a74:	4a28      	ldr	r2, [pc, #160]	; (8004b18 <MX_ADC1_Init+0xb8>)
 8004a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a78:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004aa0:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004aa2:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <MX_ADC1_Init+0xbc>)
 8004aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004aae:	2202      	movs	r2, #2
 8004ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ab2:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ac0:	4814      	ldr	r0, [pc, #80]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004ac2:	f002 fcd9 	bl	8007478 <HAL_ADC_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004acc:	f000 fbec 	bl	80052a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8004ad8:	2304      	movs	r3, #4
 8004ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004adc:	463b      	mov	r3, r7
 8004ade:	4619      	mov	r1, r3
 8004ae0:	480c      	ldr	r0, [pc, #48]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004ae2:	f002 feab 	bl	800783c <HAL_ADC_ConfigChannel>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004aec:	f000 fbdc 	bl	80052a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004af0:	230b      	movs	r3, #11
 8004af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004af4:	2302      	movs	r3, #2
 8004af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004af8:	463b      	mov	r3, r7
 8004afa:	4619      	mov	r1, r3
 8004afc:	4805      	ldr	r0, [pc, #20]	; (8004b14 <MX_ADC1_Init+0xb4>)
 8004afe:	f002 fe9d 	bl	800783c <HAL_ADC_ConfigChannel>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004b08:	f000 fbce 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200002e8 	.word	0x200002e8
 8004b18:	40012000 	.word	0x40012000
 8004b1c:	0f000001 	.word	0x0f000001

08004b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <MX_I2C1_Init+0x54>)
 8004b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b2c:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <MX_I2C1_Init+0x58>)
 8004b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b5c:	4804      	ldr	r0, [pc, #16]	; (8004b70 <MX_I2C1_Init+0x50>)
 8004b5e:	f004 f939 	bl	8008dd4 <HAL_I2C_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004b68:	f000 fb9e 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000330 	.word	0x20000330
 8004b74:	40005400 	.word	0x40005400
 8004b78:	000186a0 	.word	0x000186a0

08004b7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <MX_I2C3_Init+0x54>)
 8004b84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b88:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <MX_I2C3_Init+0x58>)
 8004b8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b9e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004bb8:	4804      	ldr	r0, [pc, #16]	; (8004bcc <MX_I2C3_Init+0x50>)
 8004bba:	f004 f90b 	bl	8008dd4 <HAL_I2C_Init>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004bc4:	f000 fb70 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000384 	.word	0x20000384
 8004bd0:	40005c00 	.word	0x40005c00
 8004bd4:	000186a0 	.word	0x000186a0

08004bd8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <MX_RTC_Init+0x44>)
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <MX_RTC_Init+0x48>)
 8004be0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004be2:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <MX_RTC_Init+0x44>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <MX_RTC_Init+0x44>)
 8004bea:	227f      	movs	r2, #127	; 0x7f
 8004bec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <MX_RTC_Init+0x44>)
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <MX_RTC_Init+0x44>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <MX_RTC_Init+0x44>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <MX_RTC_Init+0x44>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <MX_RTC_Init+0x44>)
 8004c08:	f006 fa70 	bl	800b0ec <HAL_RTC_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004c12:	f000 fb49 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200003d8 	.word	0x200003d8
 8004c20:	40002800 	.word	0x40002800

08004c24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c2a:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <MX_SPI1_Init+0x68>)
 8004c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c58:	2210      	movs	r2, #16
 8004c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c62:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c70:	220a      	movs	r2, #10
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c74:	4804      	ldr	r0, [pc, #16]	; (8004c88 <MX_SPI1_Init+0x64>)
 8004c76:	f006 fc2e 	bl	800b4d6 <HAL_SPI_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004c80:	f000 fb12 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200003f8 	.word	0x200003f8
 8004c8c:	40013000 	.word	0x40013000

08004c90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004c96:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <MX_UART4_Init+0x50>)
 8004c98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004c9a:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004c9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004ca0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004cb6:	220c      	movs	r2, #12
 8004cb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cba:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004cc6:	4805      	ldr	r0, [pc, #20]	; (8004cdc <MX_UART4_Init+0x4c>)
 8004cc8:	f007 f844 	bl	800bd54 <HAL_UART_Init>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004cd2:	f000 fae9 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000450 	.word	0x20000450
 8004ce0:	40004c00 	.word	0x40004c00

08004ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <MX_USART1_UART_Init+0x50>)
 8004cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d1a:	4805      	ldr	r0, [pc, #20]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d1c:	f007 f81a 	bl	800bd54 <HAL_UART_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d26:	f000 fabf 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000494 	.word	0x20000494
 8004d34:	40011000 	.word	0x40011000

08004d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <MX_USART2_UART_Init+0x50>)
 8004d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d5e:	220c      	movs	r2, #12
 8004d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d6e:	4805      	ldr	r0, [pc, #20]	; (8004d84 <MX_USART2_UART_Init+0x4c>)
 8004d70:	f006 fff0 	bl	800bd54 <HAL_UART_Init>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d7a:	f000 fa95 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200004d8 	.word	0x200004d8
 8004d88:	40004400 	.word	0x40004400

08004d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <MX_USART3_UART_Init+0x50>)
 8004d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004db2:	220c      	movs	r2, #12
 8004db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004dc2:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <MX_USART3_UART_Init+0x4c>)
 8004dc4:	f006 ffc6 	bl	800bd54 <HAL_UART_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004dce:	f000 fa6b 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2000051c 	.word	0x2000051c
 8004ddc:	40004800 	.word	0x40004800

08004de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <MX_DMA_Init+0x88>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <MX_DMA_Init+0x88>)
 8004df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004df4:	6313      	str	r3, [r2, #48]	; 0x30
 8004df6:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <MX_DMA_Init+0x88>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <MX_DMA_Init+0x88>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <MX_DMA_Init+0x88>)
 8004e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e10:	6313      	str	r3, [r2, #48]	; 0x30
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <MX_DMA_Init+0x88>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2100      	movs	r1, #0
 8004e22:	200d      	movs	r0, #13
 8004e24:	f003 f837 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004e28:	200d      	movs	r0, #13
 8004e2a:	f003 f850 	bl	8007ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	200f      	movs	r0, #15
 8004e34:	f003 f82f 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004e38:	200f      	movs	r0, #15
 8004e3a:	f003 f848 	bl	8007ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2100      	movs	r1, #0
 8004e42:	2010      	movs	r0, #16
 8004e44:	f003 f827 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004e48:	2010      	movs	r0, #16
 8004e4a:	f003 f840 	bl	8007ece <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	2046      	movs	r0, #70	; 0x46
 8004e54:	f003 f81f 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004e58:	2046      	movs	r0, #70	; 0x46
 8004e5a:	f003 f838 	bl	8007ece <HAL_NVIC_EnableIRQ>

}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800

08004e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	60da      	str	r2, [r3, #12]
 8004e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	4b50      	ldr	r3, [pc, #320]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	4a4f      	ldr	r2, [pc, #316]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004e8c:	f043 0304 	orr.w	r3, r3, #4
 8004e90:	6313      	str	r3, [r2, #48]	; 0x30
 8004e92:	4b4d      	ldr	r3, [pc, #308]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	4b49      	ldr	r3, [pc, #292]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a48      	ldr	r2, [pc, #288]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b46      	ldr	r3, [pc, #280]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a41      	ldr	r2, [pc, #260]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	4a3a      	ldr	r2, [pc, #232]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <MX_GPIO_Init+0x15c>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f640 4188 	movw	r1, #3208	; 0xc88
 8004ef8:	4834      	ldr	r0, [pc, #208]	; (8004fcc <MX_GPIO_Init+0x160>)
 8004efa:	f003 ff1f 	bl	8008d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004efe:	2200      	movs	r2, #0
 8004f00:	2110      	movs	r1, #16
 8004f02:	4833      	ldr	r0, [pc, #204]	; (8004fd0 <MX_GPIO_Init+0x164>)
 8004f04:	f003 ff1a 	bl	8008d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f243 0103 	movw	r1, #12291	; 0x3003
 8004f0e:	4831      	ldr	r0, [pc, #196]	; (8004fd4 <MX_GPIO_Init+0x168>)
 8004f10:	f003 ff14 	bl	8008d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 8004f14:	f640 4388 	movw	r3, #3208	; 0xc88
 8004f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4827      	ldr	r0, [pc, #156]	; (8004fcc <MX_GPIO_Init+0x160>)
 8004f2e:	f003 fc65 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f32:	2310      	movs	r3, #16
 8004f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f36:	2301      	movs	r3, #1
 8004f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f42:	f107 0314 	add.w	r3, r7, #20
 8004f46:	4619      	mov	r1, r3
 8004f48:	4821      	ldr	r0, [pc, #132]	; (8004fd0 <MX_GPIO_Init+0x164>)
 8004f4a:	f003 fc57 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_0_Pin GPIO_1_Pin BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin|GPIO_1_Pin|BUZZER_Pin|LED_Pin;
 8004f4e:	f243 0303 	movw	r3, #12291	; 0x3003
 8004f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f54:	2301      	movs	r3, #1
 8004f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f60:	f107 0314 	add.w	r3, r7, #20
 8004f64:	4619      	mov	r1, r3
 8004f66:	481b      	ldr	r0, [pc, #108]	; (8004fd4 <MX_GPIO_Init+0x168>)
 8004f68:	f003 fc48 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8004f6c:	2318      	movs	r3, #24
 8004f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7a:	f107 0314 	add.w	r3, r7, #20
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4814      	ldr	r0, [pc, #80]	; (8004fd4 <MX_GPIO_Init+0x168>)
 8004f82:	f003 fc3b 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8004f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8004f94:	f107 0314 	add.w	r3, r7, #20
 8004f98:	4619      	mov	r1, r3
 8004f9a:	480e      	ldr	r0, [pc, #56]	; (8004fd4 <MX_GPIO_Init+0x168>)
 8004f9c:	f003 fc2e 	bl	80087fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	2009      	movs	r0, #9
 8004fa6:	f002 ff76 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004faa:	2009      	movs	r0, #9
 8004fac:	f002 ff8f 	bl	8007ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	200a      	movs	r0, #10
 8004fb6:	f002 ff6e 	bl	8007e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004fba:	200a      	movs	r0, #10
 8004fbc:	f002 ff87 	bl	8007ece <HAL_NVIC_EnableIRQ>

}
 8004fc0:	bf00      	nop
 8004fc2:	3728      	adds	r7, #40	; 0x28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	40020400 	.word	0x40020400

08004fd8 <bme280_begin>:

/* USER CODE BEGIN 4 */

void bme280_begin()
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <bme280_begin+0x24>)
 8004fde:	2203      	movs	r2, #3
 8004fe0:	749a      	strb	r2, [r3, #18]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <bme280_begin+0x24>)
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	741a      	strb	r2, [r3, #16]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <bme280_begin+0x24>)
 8004fea:	2204      	movs	r2, #4
 8004fec:	745a      	strb	r2, [r3, #17]
	bme280_init(&BME280_sensor, &hi2c1);
 8004fee:	4904      	ldr	r1, [pc, #16]	; (8005000 <bme280_begin+0x28>)
 8004ff0:	4802      	ldr	r0, [pc, #8]	; (8004ffc <bme280_begin+0x24>)
 8004ff2:	f7fc fedb 	bl	8001dac <bme280_init>
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	200006e0 	.word	0x200006e0
 8005000:	20000330 	.word	0x20000330

08005004 <bmi088_begin>:
void bmi088_begin()
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <bmi088_begin+0x3c>)
 800500a:	2208      	movs	r2, #8
 800500c:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <bmi088_begin+0x3c>)
 8005010:	2209      	movs	r2, #9
 8005012:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <bmi088_begin+0x3c>)
 8005016:	2200      	movs	r2, #0
 8005018:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <bmi088_begin+0x3c>)
 800501c:	2202      	movs	r2, #2
 800501e:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <bmi088_begin+0x3c>)
 8005022:	2201      	movs	r2, #1
 8005024:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <bmi088_begin+0x3c>)
 8005028:	2200      	movs	r2, #0
 800502a:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <bmi088_begin+0x3c>)
 800502e:	2200      	movs	r2, #0
 8005030:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 8005032:	4904      	ldr	r1, [pc, #16]	; (8005044 <bmi088_begin+0x40>)
 8005034:	4802      	ldr	r0, [pc, #8]	; (8005040 <bmi088_begin+0x3c>)
 8005036:	f7fd fcb5 	bl	80029a4 <bmi088_init>
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000710 	.word	0x20000710
 8005044:	20000384 	.word	0x20000384

08005048 <loraBegin>:


void loraBegin()
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005052:	4814      	ldr	r0, [pc, #80]	; (80050a4 <loraBegin+0x5c>)
 8005054:	f003 fe72 	bl	8008d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8005058:	2201      	movs	r2, #1
 800505a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800505e:	4811      	ldr	r0, [pc, #68]	; (80050a4 <loraBegin+0x5c>)
 8005060:	f003 fe6c 	bl	8008d3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005064:	2064      	movs	r0, #100	; 0x64
 8005066:	f002 f9e3 	bl	8007430 <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <loraBegin+0x60>)
 800506c:	22e0      	movs	r2, #224	; 0xe0
 800506e:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <loraBegin+0x60>)
 8005072:	2206      	movs	r2, #6
 8005074:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <loraBegin+0x60>)
 8005078:	2280      	movs	r2, #128	; 0x80
 800507a:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <loraBegin+0x60>)
 800507e:	2200      	movs	r2, #0
 8005080:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <loraBegin+0x60>)
 8005084:	2200      	movs	r2, #0
 8005086:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <loraBegin+0x60>)
 800508a:	2200      	movs	r2, #0
 800508c:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <loraBegin+0x60>)
 8005090:	221e      	movs	r2, #30
 8005092:	721a      	strb	r2, [r3, #8]
#endif

    lora_configure(&e22_lora);
 8005094:	4804      	ldr	r0, [pc, #16]	; (80050a8 <loraBegin+0x60>)
 8005096:	f7ff f8e5 	bl	8004264 <lora_configure>

    HAL_Delay(100);
 800509a:	2064      	movs	r0, #100	; 0x64
 800509c:	f002 f9c8 	bl	8007430 <HAL_Delay>
}
 80050a0:	bf00      	nop
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40020800 	.word	0x40020800
 80050a8:	200007f0 	.word	0x200007f0
 80050ac:	00000000 	.word	0x00000000

080050b0 <measurePower>:

void measurePower(power *guc_)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	ed2d 8b02 	vpush	{d8}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 80050bc:	4840      	ldr	r0, [pc, #256]	; (80051c0 <measurePower+0x110>)
 80050be:	f002 fa1f 	bl	8007500 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80050c2:	210a      	movs	r1, #10
 80050c4:	483e      	ldr	r0, [pc, #248]	; (80051c0 <measurePower+0x110>)
 80050c6:	f002 fb20 	bl	800770a <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 80050ca:	483d      	ldr	r0, [pc, #244]	; (80051c0 <measurePower+0x110>)
 80050cc:	f002 fba8 	bl	8007820 <HAL_ADC_GetValue>
 80050d0:	4603      	mov	r3, r0
 80050d2:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80050d4:	210a      	movs	r1, #10
 80050d6:	483a      	ldr	r0, [pc, #232]	; (80051c0 <measurePower+0x110>)
 80050d8:	f002 fb17 	bl	800770a <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 80050dc:	4838      	ldr	r0, [pc, #224]	; (80051c0 <measurePower+0x110>)
 80050de:	f002 fb9f 	bl	8007820 <HAL_ADC_GetValue>
 80050e2:	4603      	mov	r3, r0
 80050e4:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 80050e6:	4836      	ldr	r0, [pc, #216]	; (80051c0 <measurePower+0x110>)
 80050e8:	f002 fadc 	bl	80076a4 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80051c4 <measurePower+0x114>
 80050fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050fe:	eddf 6a32 	vldr	s13, [pc, #200]	; 80051c8 <measurePower+0x118>
 8005102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005116:	ee17 0a90 	vmov	r0, s15
 800511a:	f7fb fa35 	bl	8000588 <__aeabi_f2d>
 800511e:	a326      	add	r3, pc, #152	; (adr r3, 80051b8 <measurePower+0x108>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa88 	bl	8000638 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <measurePower+0x11c>)
 8005136:	f7fb fba9 	bl	800088c <__aeabi_ddiv>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	f7fb fd71 	bl	8000c28 <__aeabi_d2f>
 8005146:	4602      	mov	r2, r0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	edd3 7a00 	vldr	s15, [r3]
 8005158:	ee27 8a27 	vmul.f32	s16, s14, s15
 800515c:	f002 f95c 	bl	8007418 <HAL_GetTick>
 8005160:	ee07 0a90 	vmov	s15, r0
 8005164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005168:	eddf 6a19 	vldr	s13, [pc, #100]	; 80051d0 <measurePower+0x120>
 800516c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005170:	4b18      	ldr	r3, [pc, #96]	; (80051d4 <measurePower+0x124>)
 8005172:	edd3 7a00 	vldr	s15, [r3]
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	edd3 7a02 	vldr	s15, [r3, #8]
 8005184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 800518e:	f002 f943 	bl	8007418 <HAL_GetTick>
 8005192:	ee07 0a90 	vmov	s15, r0
 8005196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800519a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80051d0 <measurePower+0x120>
 800519e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <measurePower+0x124>)
 80051a4:	edc3 7a00 	vstr	s15, [r3]
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	ecbd 8b02 	vpop	{d8}
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	f3af 8000 	nop.w
 80051b8:	66666666 	.word	0x66666666
 80051bc:	402a6666 	.word	0x402a6666
 80051c0:	200002e8 	.word	0x200002e8
 80051c4:	454e4000 	.word	0x454e4000
 80051c8:	45800000 	.word	0x45800000
 80051cc:	40b00000 	.word	0x40b00000
 80051d0:	447a0000 	.word	0x447a0000
 80051d4:	200008c8 	.word	0x200008c8

080051d8 <getWatt>:

void getWatt()
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 80051de:	f002 f91b 	bl	8007418 <HAL_GetTick>
 80051e2:	ee07 0a90 	vmov	s15, r0
 80051e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051ea:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005234 <getWatt+0x5c>
 80051ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051f2:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <getWatt+0x60>)
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8005200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005204:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 8005208:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <getWatt+0x60>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <getWatt+0x64>)
 8005210:	edd3 6a02 	vldr	s13, [r3, #8]
 8005214:	ed97 7a00 	vldr	s14, [r7]
 8005218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <getWatt+0x64>)
 800521e:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <getWatt+0x64>)
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	447a0000 	.word	0x447a0000
 8005238:	200008d0 	.word	0x200008d0
 800523c:	20000834 	.word	0x20000834

08005240 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b10      	cmp	r3, #16
 800524e:	d101      	bne.n	8005254 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8005250:	f7fd ffec 	bl	800322c <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	2b08      	cmp	r3, #8
 8005258:	d101      	bne.n	800525e <HAL_GPIO_EXTI_Callback+0x1e>
    {
    	bmi088_getAccelDatas_INT();
 800525a:	f7fd ffd9 	bl	8003210 <bmi088_getAccelDatas_INT>
    	//counterAcc++;
    }
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <deploy_p_1>:

void deploy_p_1()
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 800526c:	2164      	movs	r1, #100	; 0x64
 800526e:	4804      	ldr	r0, [pc, #16]	; (8005280 <deploy_p_1+0x18>)
 8005270:	f7fe fa94 	bl	800379c <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8005274:	4803      	ldr	r0, [pc, #12]	; (8005284 <deploy_p_1+0x1c>)
 8005276:	f7fe fa79 	bl	800376c <ext_pin_open>
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	2000084c 	.word	0x2000084c
 8005284:	2000087c 	.word	0x2000087c

08005288 <deploy_p_2>:

void deploy_p_2()
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 800528c:	2164      	movs	r1, #100	; 0x64
 800528e:	4804      	ldr	r0, [pc, #16]	; (80052a0 <deploy_p_2+0x18>)
 8005290:	f7fe fa84 	bl	800379c <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8005294:	4803      	ldr	r0, [pc, #12]	; (80052a4 <deploy_p_2+0x1c>)
 8005296:	f7fe fa69 	bl	800376c <ext_pin_open>
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	2000085c 	.word	0x2000085c
 80052a4:	2000087c 	.word	0x2000087c

080052a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <Error_Handler+0x4c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4911      	ldr	r1, [pc, #68]	; (80052f8 <Error_Handler+0x50>)
 80052b4:	4811      	ldr	r0, [pc, #68]	; (80052fc <Error_Handler+0x54>)
 80052b6:	f00c fa1b 	bl	80116f0 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 80052ba:	4810      	ldr	r0, [pc, #64]	; (80052fc <Error_Handler+0x54>)
 80052bc:	f7fa ffa8 	bl	8000210 <strlen>
 80052c0:	4603      	mov	r3, r0
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	23fa      	movs	r3, #250	; 0xfa
 80052c6:	490d      	ldr	r1, [pc, #52]	; (80052fc <Error_Handler+0x54>)
 80052c8:	480d      	ldr	r0, [pc, #52]	; (8005300 <Error_Handler+0x58>)
 80052ca:	f006 fdbf 	bl	800be4c <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ce:	b672      	cpsid	i
}
 80052d0:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80052d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052d6:	480b      	ldr	r0, [pc, #44]	; (8005304 <Error_Handler+0x5c>)
 80052d8:	f003 fd49 	bl	8008d6e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80052dc:	2064      	movs	r0, #100	; 0x64
 80052de:	f002 f8a7 	bl	8007430 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80052e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052e6:	4807      	ldr	r0, [pc, #28]	; (8005304 <Error_Handler+0x5c>)
 80052e8:	f003 fd41 	bl	8008d6e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80052ec:	2064      	movs	r0, #100	; 0x64
 80052ee:	f002 f89f 	bl	8007430 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80052f2:	e7ee      	b.n	80052d2 <Error_Handler+0x2a>
 80052f4:	2000026c 	.word	0x2000026c
 80052f8:	08017918 	.word	0x08017918
 80052fc:	200008e8 	.word	0x200008e8
 8005300:	20000494 	.word	0x20000494
 8005304:	40020400 	.word	0x40020400

08005308 <updateQuaternion>:

extern backup_sram_datas_s *saved_datas;

float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af00      	add	r7, sp, #0
 800530e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005312:	edc7 0a02 	vstr	s1, [r7, #8]
 8005316:	ed87 1a01 	vstr	s2, [r7, #4]
 800531a:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_datas->q[1] * gx - saved_datas->q[2] * gy - saved_datas->q[3] * gz);
 800531e:	4b9f      	ldr	r3, [pc, #636]	; (800559c <updateQuaternion+0x294>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	edd3 7a02 	vldr	s15, [r3, #8]
 8005326:	eeb1 7a67 	vneg.f32	s14, s15
 800532a:	edd7 7a03 	vldr	s15, [r7, #12]
 800532e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005332:	4b9a      	ldr	r3, [pc, #616]	; (800559c <updateQuaternion+0x294>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	edd3 6a03 	vldr	s13, [r3, #12]
 800533a:	edd7 7a02 	vldr	s15, [r7, #8]
 800533e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005342:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005346:	4b95      	ldr	r3, [pc, #596]	; (800559c <updateQuaternion+0x294>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	edd3 6a04 	vldr	s13, [r3, #16]
 800534e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800535a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800535e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005362:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (saved_datas->q[0] * gx + saved_datas->q[2] * gz - saved_datas->q[3] * gy);
 8005366:	4b8d      	ldr	r3, [pc, #564]	; (800559c <updateQuaternion+0x294>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	ed93 7a01 	vldr	s14, [r3, #4]
 800536e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005376:	4b89      	ldr	r3, [pc, #548]	; (800559c <updateQuaternion+0x294>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	edd3 6a03 	vldr	s13, [r3, #12]
 800537e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800538a:	4b84      	ldr	r3, [pc, #528]	; (800559c <updateQuaternion+0x294>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	edd3 6a04 	vldr	s13, [r3, #16]
 8005392:	edd7 7a02 	vldr	s15, [r7, #8]
 8005396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800539a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a6:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_datas->q[0] * gy - saved_datas->q[1] * gz + saved_datas->q[3] * gx);
 80053aa:	4b7c      	ldr	r3, [pc, #496]	; (800559c <updateQuaternion+0x294>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80053b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80053b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ba:	4b78      	ldr	r3, [pc, #480]	; (800559c <updateQuaternion+0x294>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	edd3 6a02 	vldr	s13, [r3, #8]
 80053c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80053c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053ce:	4b73      	ldr	r3, [pc, #460]	; (800559c <updateQuaternion+0x294>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	edd3 6a04 	vldr	s13, [r3, #16]
 80053d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_datas->q[0] * gz + saved_datas->q[1] * gy - saved_datas->q[2] * gx);
 80053ee:	4b6b      	ldr	r3, [pc, #428]	; (800559c <updateQuaternion+0x294>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80053f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80053fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053fe:	4b67      	ldr	r3, [pc, #412]	; (800559c <updateQuaternion+0x294>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	edd3 6a02 	vldr	s13, [r3, #8]
 8005406:	edd7 7a02 	vldr	s15, [r7, #8]
 800540a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800540e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005412:	4b62      	ldr	r3, [pc, #392]	; (800559c <updateQuaternion+0x294>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	edd3 6a03 	vldr	s13, [r3, #12]
 800541a:	edd7 7a03 	vldr	s15, [r7, #12]
 800541e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005426:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800542a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800542e:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_datas->q[0] += qDot1 * dt;
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <updateQuaternion+0x294>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	ed93 7a01 	vldr	s14, [r3, #4]
 800543a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800543e:	edd7 7a00 	vldr	s15, [r7]
 8005442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005446:	4b55      	ldr	r3, [pc, #340]	; (800559c <updateQuaternion+0x294>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] += qDot2 * dt;
 8005452:	4b52      	ldr	r3, [pc, #328]	; (800559c <updateQuaternion+0x294>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	ed93 7a02 	vldr	s14, [r3, #8]
 800545a:	edd7 6a08 	vldr	s13, [r7, #32]
 800545e:	edd7 7a00 	vldr	s15, [r7]
 8005462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005466:	4b4d      	ldr	r3, [pc, #308]	; (800559c <updateQuaternion+0x294>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800546e:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] += qDot3 * dt;
 8005472:	4b4a      	ldr	r3, [pc, #296]	; (800559c <updateQuaternion+0x294>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	ed93 7a03 	vldr	s14, [r3, #12]
 800547a:	edd7 6a07 	vldr	s13, [r7, #28]
 800547e:	edd7 7a00 	vldr	s15, [r7]
 8005482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005486:	4b45      	ldr	r3, [pc, #276]	; (800559c <updateQuaternion+0x294>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548e:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] += qDot4 * dt;
 8005492:	4b42      	ldr	r3, [pc, #264]	; (800559c <updateQuaternion+0x294>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	ed93 7a04 	vldr	s14, [r3, #16]
 800549a:	edd7 6a06 	vldr	s13, [r7, #24]
 800549e:	edd7 7a00 	vldr	s15, [r7]
 80054a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a6:	4b3d      	ldr	r3, [pc, #244]	; (800559c <updateQuaternion+0x294>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ae:	edc3 7a04 	vstr	s15, [r3, #16]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_datas->q[0] * saved_datas->q[0] + saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3]);
 80054b2:	4b3a      	ldr	r3, [pc, #232]	; (800559c <updateQuaternion+0x294>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80054ba:	4b38      	ldr	r3, [pc, #224]	; (800559c <updateQuaternion+0x294>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	edd3 7a01 	vldr	s15, [r3, #4]
 80054c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054c6:	4b35      	ldr	r3, [pc, #212]	; (800559c <updateQuaternion+0x294>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <updateQuaternion+0x294>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80054d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054de:	4b2f      	ldr	r3, [pc, #188]	; (800559c <updateQuaternion+0x294>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80054e6:	4b2d      	ldr	r3, [pc, #180]	; (800559c <updateQuaternion+0x294>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80054ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054f6:	4b29      	ldr	r3, [pc, #164]	; (800559c <updateQuaternion+0x294>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	edd3 6a04 	vldr	s13, [r3, #16]
 80054fe:	4b27      	ldr	r3, [pc, #156]	; (800559c <updateQuaternion+0x294>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	edd3 7a04 	vldr	s15, [r3, #16]
 8005506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800550a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550e:	ee17 0a90 	vmov	r0, s15
 8005512:	f7fb f839 	bl	8000588 <__aeabi_f2d>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	ec43 2b10 	vmov	d0, r2, r3
 800551e:	f010 fc07 	bl	8015d30 <sqrt>
 8005522:	ec53 2b10 	vmov	r2, r3, d0
 8005526:	4610      	mov	r0, r2
 8005528:	4619      	mov	r1, r3
 800552a:	f7fb fb7d 	bl	8000c28 <__aeabi_d2f>
 800552e:	4603      	mov	r3, r0
 8005530:	617b      	str	r3, [r7, #20]
  saved_datas->q[0] /= norm;
 8005532:	4b1a      	ldr	r3, [pc, #104]	; (800559c <updateQuaternion+0x294>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	edd3 6a01 	vldr	s13, [r3, #4]
 800553a:	4b18      	ldr	r3, [pc, #96]	; (800559c <updateQuaternion+0x294>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	edc3 7a01 	vstr	s15, [r3, #4]
  saved_datas->q[1] /= norm;
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <updateQuaternion+0x294>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <updateQuaternion+0x294>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	ed97 7a05 	vldr	s14, [r7, #20]
 800555a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555e:	edc3 7a02 	vstr	s15, [r3, #8]
  saved_datas->q[2] /= norm;
 8005562:	4b0e      	ldr	r3, [pc, #56]	; (800559c <updateQuaternion+0x294>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	edd3 6a03 	vldr	s13, [r3, #12]
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <updateQuaternion+0x294>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005576:	edc3 7a03 	vstr	s15, [r3, #12]
  saved_datas->q[3] /= norm;
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <updateQuaternion+0x294>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	edd3 6a04 	vldr	s13, [r3, #16]
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <updateQuaternion+0x294>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	ed97 7a05 	vldr	s14, [r7, #20]
 800558a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8005592:	bf00      	nop
 8005594:	3728      	adds	r7, #40	; 0x28
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000008 	.word	0x20000008

080055a0 <quaternionToEuler>:

void quaternionToEuler(void) {
 80055a0:	b5b0      	push	{r4, r5, r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[3]), 1.0f - 2.0f * (saved_datas->q[1] * saved_datas->q[1] + saved_datas->q[2] * saved_datas->q[2])) * (180.0 / M_PI);
 80055a4:	4b72      	ldr	r3, [pc, #456]	; (8005770 <quaternionToEuler+0x1d0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80055ac:	4b70      	ldr	r3, [pc, #448]	; (8005770 <quaternionToEuler+0x1d0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80055b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055b8:	4b6d      	ldr	r3, [pc, #436]	; (8005770 <quaternionToEuler+0x1d0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80055c0:	4b6b      	ldr	r3, [pc, #428]	; (8005770 <quaternionToEuler+0x1d0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80055c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055d4:	ee17 0a90 	vmov	r0, s15
 80055d8:	f7fa ffd6 	bl	8000588 <__aeabi_f2d>
 80055dc:	4604      	mov	r4, r0
 80055de:	460d      	mov	r5, r1
 80055e0:	4b63      	ldr	r3, [pc, #396]	; (8005770 <quaternionToEuler+0x1d0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80055e8:	4b61      	ldr	r3, [pc, #388]	; (8005770 <quaternionToEuler+0x1d0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80055f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055f4:	4b5e      	ldr	r3, [pc, #376]	; (8005770 <quaternionToEuler+0x1d0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80055fc:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <quaternionToEuler+0x1d0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	edd3 7a03 	vldr	s15, [r3, #12]
 8005604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005618:	ee17 0a90 	vmov	r0, s15
 800561c:	f7fa ffb4 	bl	8000588 <__aeabi_f2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	ec43 2b11 	vmov	d1, r2, r3
 8005628:	ec45 4b10 	vmov	d0, r4, r5
 800562c:	f010 fb0e 	bl	8015c4c <atan2>
 8005630:	ec51 0b10 	vmov	r0, r1, d0
 8005634:	a34c      	add	r3, pc, #304	; (adr r3, 8005768 <quaternionToEuler+0x1c8>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa fffd 	bl	8000638 <__aeabi_dmul>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	f7fb faef 	bl	8000c28 <__aeabi_d2f>
 800564a:	4603      	mov	r3, r0
 800564c:	4a49      	ldr	r2, [pc, #292]	; (8005774 <quaternionToEuler+0x1d4>)
 800564e:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_datas->q[0] * saved_datas->q[2] - saved_datas->q[3] * saved_datas->q[1])) * (180.0 / M_PI);
 8005650:	4b47      	ldr	r3, [pc, #284]	; (8005770 <quaternionToEuler+0x1d0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	ed93 7a01 	vldr	s14, [r3, #4]
 8005658:	4b45      	ldr	r3, [pc, #276]	; (8005770 <quaternionToEuler+0x1d0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005664:	4b42      	ldr	r3, [pc, #264]	; (8005770 <quaternionToEuler+0x1d0>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	edd3 6a04 	vldr	s13, [r3, #16]
 800566c:	4b40      	ldr	r3, [pc, #256]	; (8005770 <quaternionToEuler+0x1d0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	edd3 7a02 	vldr	s15, [r3, #8]
 8005674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800567c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005680:	ee17 0a90 	vmov	r0, s15
 8005684:	f7fa ff80 	bl	8000588 <__aeabi_f2d>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	ec43 2b10 	vmov	d0, r2, r3
 8005690:	f010 faa8 	bl	8015be4 <asin>
 8005694:	ec51 0b10 	vmov	r0, r1, d0
 8005698:	a333      	add	r3, pc, #204	; (adr r3, 8005768 <quaternionToEuler+0x1c8>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa ffcb 	bl	8000638 <__aeabi_dmul>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7fb fabd 	bl	8000c28 <__aeabi_d2f>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4a30      	ldr	r2, [pc, #192]	; (8005774 <quaternionToEuler+0x1d4>)
 80056b2:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_datas->q[0] * saved_datas->q[3] + saved_datas->q[1] * saved_datas->q[2]), 1.0f - 2.0f * (saved_datas->q[2] * saved_datas->q[2] + saved_datas->q[3] * saved_datas->q[3])) * (180.0 / M_PI);
 80056b4:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <quaternionToEuler+0x1d0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80056bc:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <quaternionToEuler+0x1d0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80056c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056c8:	4b29      	ldr	r3, [pc, #164]	; (8005770 <quaternionToEuler+0x1d0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80056d0:	4b27      	ldr	r3, [pc, #156]	; (8005770 <quaternionToEuler+0x1d0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80056d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056e4:	ee17 0a90 	vmov	r0, s15
 80056e8:	f7fa ff4e 	bl	8000588 <__aeabi_f2d>
 80056ec:	4604      	mov	r4, r0
 80056ee:	460d      	mov	r5, r1
 80056f0:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <quaternionToEuler+0x1d0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <quaternionToEuler+0x1d0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005704:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <quaternionToEuler+0x1d0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	edd3 6a04 	vldr	s13, [r3, #16]
 800570c:	4b18      	ldr	r3, [pc, #96]	; (8005770 <quaternionToEuler+0x1d0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	edd3 7a04 	vldr	s15, [r3, #16]
 8005714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800571c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005728:	ee17 0a90 	vmov	r0, s15
 800572c:	f7fa ff2c 	bl	8000588 <__aeabi_f2d>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	ec43 2b11 	vmov	d1, r2, r3
 8005738:	ec45 4b10 	vmov	d0, r4, r5
 800573c:	f010 fa86 	bl	8015c4c <atan2>
 8005740:	ec51 0b10 	vmov	r0, r1, d0
 8005744:	a308      	add	r3, pc, #32	; (adr r3, 8005768 <quaternionToEuler+0x1c8>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa ff75 	bl	8000638 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f7fb fa67 	bl	8000c28 <__aeabi_d2f>
 800575a:	4603      	mov	r3, r0
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <quaternionToEuler+0x1d4>)
 800575e:	6093      	str	r3, [r2, #8]
}
 8005760:	bf00      	nop
 8005762:	bdb0      	pop	{r4, r5, r7, pc}
 8005764:	f3af 8000 	nop.w
 8005768:	1a63c1f8 	.word	0x1a63c1f8
 800576c:	404ca5dc 	.word	0x404ca5dc
 8005770:	20000008 	.word	0x20000008
 8005774:	200009e4 	.word	0x200009e4

08005778 <quaternionToTheta>:


float quaternionToTheta(){
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0

	float theta = 0.0;
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * saved_datas->q[1] * saved_datas->q[3] + 2 * saved_datas->q[2] * saved_datas->q[0];
 8005784:	4b5a      	ldr	r3, [pc, #360]	; (80058f0 <quaternionToTheta+0x178>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	edd3 7a02 	vldr	s15, [r3, #8]
 800578c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005790:	4b57      	ldr	r3, [pc, #348]	; (80058f0 <quaternionToTheta+0x178>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	edd3 7a04 	vldr	s15, [r3, #16]
 8005798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800579c:	4b54      	ldr	r3, [pc, #336]	; (80058f0 <quaternionToTheta+0x178>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80057a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057a8:	4b51      	ldr	r3, [pc, #324]	; (80058f0 <quaternionToTheta+0x178>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80057b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b8:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_datas->q[2] * saved_datas->q[3] - 2 * saved_datas->q[1] * saved_datas->q[0];
 80057bc:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <quaternionToTheta+0x178>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80057c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80057c8:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <quaternionToTheta+0x178>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80057d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057d4:	4b46      	ldr	r3, [pc, #280]	; (80058f0 <quaternionToTheta+0x178>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80057dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057e0:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <quaternionToTheta+0x178>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80057e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f0:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_datas->q[1] * saved_datas->q[1] - 2 * saved_datas->q[2] * saved_datas->q[2];
 80057f4:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <quaternionToTheta+0x178>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80057fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005800:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <quaternionToTheta+0x178>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	edd3 7a02 	vldr	s15, [r3, #8]
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005810:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005814:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <quaternionToTheta+0x178>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	edd3 7a03 	vldr	s15, [r3, #12]
 800581c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <quaternionToTheta+0x178>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	edd3 7a03 	vldr	s15, [r3, #12]
 8005828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800582c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005830:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 8005844:	edd7 7a05 	vldr	s15, [r7, #20]
 8005848:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800584c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005850:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005858:	edd7 7a03 	vldr	s15, [r7, #12]
 800585c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005864:	ee17 0a90 	vmov	r0, s15
 8005868:	f7fa fe8e 	bl	8000588 <__aeabi_f2d>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	ec43 2b10 	vmov	d0, r2, r3
 8005874:	f010 fa5c 	bl	8015d30 <sqrt>
 8005878:	ec53 2b10 	vmov	r2, r3, d0
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	f7fb f9d2 	bl	8000c28 <__aeabi_d2f>
 8005884:	4603      	mov	r3, r0
 8005886:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8005888:	ed97 7a02 	vldr	s14, [r7, #8]
 800588c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005890:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005894:	ee16 0a90 	vmov	r0, s13
 8005898:	f7fa fe76 	bl	8000588 <__aeabi_f2d>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	ec43 2b10 	vmov	d0, r2, r3
 80058a4:	f010 f96a 	bl	8015b7c <acos>
 80058a8:	ec51 0b10 	vmov	r0, r1, d0
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <quaternionToTheta+0x17c>)
 80058b2:	f7fa fec1 	bl	8000638 <__aeabi_dmul>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	a30a      	add	r3, pc, #40	; (adr r3, 80058e8 <quaternionToTheta+0x170>)
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f7fa ffe2 	bl	800088c <__aeabi_ddiv>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	f7fb f9aa 	bl	8000c28 <__aeabi_d2f>
 80058d4:	4603      	mov	r3, r0
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	ee07 3a90 	vmov	s15, r3
}
 80058de:	eeb0 0a67 	vmov.f32	s0, s15
 80058e2:	3728      	adds	r7, #40	; 0x28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	51eb851f 	.word	0x51eb851f
 80058ec:	40091eb8 	.word	0x40091eb8
 80058f0:	20000008 	.word	0x20000008
 80058f4:	40668000 	.word	0x40668000

080058f8 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion() {
 80058f8:	b5b0      	push	{r4, r5, r7, lr}
 80058fa:	b092      	sub	sp, #72	; 0x48
 80058fc:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 80058fe:	4b99      	ldr	r3, [pc, #612]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005900:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8005904:	4b97      	ldr	r3, [pc, #604]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005906:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800590a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800590e:	4b95      	ldr	r3, [pc, #596]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005910:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 8005914:	4b93      	ldr	r3, [pc, #588]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005916:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800591a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800591e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005922:	4b90      	ldr	r3, [pc, #576]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005924:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8005928:	4b8e      	ldr	r3, [pc, #568]	; (8005b64 <getInitialQuaternion+0x26c>)
 800592a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800592e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005936:	ee17 0a90 	vmov	r0, s15
 800593a:	f7fa fe25 	bl	8000588 <__aeabi_f2d>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	ec43 2b10 	vmov	d0, r2, r3
 8005946:	f010 f9f3 	bl	8015d30 <sqrt>
 800594a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 800594e:	4b85      	ldr	r3, [pc, #532]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fe17 	bl	8000588 <__aeabi_f2d>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 8005962:	4b80      	ldr	r3, [pc, #512]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005964:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005968:	4618      	mov	r0, r3
 800596a:	f7fa fe0d 	bl	8000588 <__aeabi_f2d>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 8005976:	4b7b      	ldr	r3, [pc, #492]	; (8005b64 <getInitialQuaternion+0x26c>)
 8005978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800597c:	4618      	mov	r0, r3
 800597e:	f7fa fe03 	bl	8000588 <__aeabi_f2d>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 800598a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005992:	f7fa ff7b 	bl	800088c <__aeabi_ddiv>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 800599e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059a6:	f7fa ff71 	bl	800088c <__aeabi_ddiv>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 80059b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80059b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ba:	f7fa ff67 	bl	800088c <__aeabi_ddiv>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80059c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ca:	f04f 0000 	mov.w	r0, #0
 80059ce:	4966      	ldr	r1, [pc, #408]	; (8005b68 <getInitialQuaternion+0x270>)
 80059d0:	f7fa fc7a 	bl	80002c8 <__aeabi_dsub>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	ec43 2b17 	vmov	d7, r2, r3
 80059dc:	eeb0 0a47 	vmov.f32	s0, s14
 80059e0:	eef0 0a67 	vmov.f32	s1, s15
 80059e4:	f010 f9a4 	bl	8015d30 <sqrt>
 80059e8:	ec51 0b10 	vmov	r0, r1, d0
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	4b5e      	ldr	r3, [pc, #376]	; (8005b6c <getInitialQuaternion+0x274>)
 80059f2:	f7fa fe21 	bl	8000638 <__aeabi_dmul>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 80059fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	4959      	ldr	r1, [pc, #356]	; (8005b6c <getInitialQuaternion+0x274>)
 8005a08:	f7fa ff40 	bl	800088c <__aeabi_ddiv>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8005a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a1c:	f7fa fe0c 	bl	8000638 <__aeabi_dmul>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	4b4f      	ldr	r3, [pc, #316]	; (8005b6c <getInitialQuaternion+0x274>)
 8005a2e:	f7fa fe03 	bl	8000638 <__aeabi_dmul>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8005a3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a42:	f7fa fdf9 	bl	8000638 <__aeabi_dmul>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	4b46      	ldr	r3, [pc, #280]	; (8005b6c <getInitialQuaternion+0x274>)
 8005a54:	f7fa fdf0 	bl	8000638 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8005a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a74:	f7fa fde0 	bl	8000638 <__aeabi_dmul>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	461d      	mov	r5, r3
 8005a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a88:	f7fa fdd6 	bl	8000638 <__aeabi_dmul>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa fc1a 	bl	80002cc <__adddf3>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	461d      	mov	r5, r3
 8005aa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005aa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005aa8:	f7fa fdc6 	bl	8000638 <__aeabi_dmul>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7fa fc0a 	bl	80002cc <__adddf3>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4614      	mov	r4, r2
 8005abe:	461d      	mov	r5, r3
 8005ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac8:	f7fa fdb6 	bl	8000638 <__aeabi_dmul>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	f7fa fbfa 	bl	80002cc <__adddf3>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	ec43 2b17 	vmov	d7, r2, r3
 8005ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8005ae4:	eef0 0a67 	vmov.f32	s1, s15
 8005ae8:	f010 f922 	bl	8015d30 <sqrt>
 8005aec:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    saved_datas->q[0] = q_temp[0] / norm;
 8005af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005af8:	f7fa fec8 	bl	800088c <__aeabi_ddiv>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	491b      	ldr	r1, [pc, #108]	; (8005b70 <getInitialQuaternion+0x278>)
 8005b02:	680c      	ldr	r4, [r1, #0]
 8005b04:	4610      	mov	r0, r2
 8005b06:	4619      	mov	r1, r3
 8005b08:	f7fb f88e 	bl	8000c28 <__aeabi_d2f>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	6063      	str	r3, [r4, #4]
    saved_datas->q[1] = q_temp[1] / norm;
 8005b10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b18:	f7fa feb8 	bl	800088c <__aeabi_ddiv>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4913      	ldr	r1, [pc, #76]	; (8005b70 <getInitialQuaternion+0x278>)
 8005b22:	680c      	ldr	r4, [r1, #0]
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	f7fb f87e 	bl	8000c28 <__aeabi_d2f>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	60a3      	str	r3, [r4, #8]
    saved_datas->q[2] = q_temp[2] / norm;
 8005b30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b38:	f7fa fea8 	bl	800088c <__aeabi_ddiv>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	490b      	ldr	r1, [pc, #44]	; (8005b70 <getInitialQuaternion+0x278>)
 8005b42:	680c      	ldr	r4, [r1, #0]
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	f7fb f86e 	bl	8000c28 <__aeabi_d2f>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	60e3      	str	r3, [r4, #12]
    saved_datas->q[3] = 0.0f;
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <getInitialQuaternion+0x278>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
}
 8005b5a:	bf00      	nop
 8005b5c:	3748      	adds	r7, #72	; 0x48
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bdb0      	pop	{r4, r5, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000710 	.word	0x20000710
 8005b68:	3ff00000 	.word	0x3ff00000
 8005b6c:	3fe00000 	.word	0x3fe00000
 8005b70:	20000008 	.word	0x20000008

08005b74 <quaternionSet_zero>:

void quaternionSet_zero(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
	saved_datas->q[0] = 1.0;
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <quaternionSet_zero+0x38>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b80:	605a      	str	r2, [r3, #4]
	saved_datas->q[1] = 0.0;
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <quaternionSet_zero+0x38>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	609a      	str	r2, [r3, #8]
	saved_datas->q[2] = 0.0;
 8005b8c:	4b07      	ldr	r3, [pc, #28]	; (8005bac <quaternionSet_zero+0x38>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]
	saved_datas->q[3] = 0.0;
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <quaternionSet_zero+0x38>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	611a      	str	r2, [r3, #16]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000008 	.word	0x20000008

08005bb0 <save_time>:
	HAL_PWR_EnableBkUpAccess();
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, (uint32_t)status);
}

void save_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	f107 0c10 	add.w	ip, r7, #16
 8005bbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005bc4:	7c3b      	ldrb	r3, [r7, #16]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005bcc:	fb03 f202 	mul.w	r2, r3, r2
 8005bd0:	7c7b      	ldrb	r3, [r7, #17]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	1a5b      	subs	r3, r3, r1
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	7cba      	ldrb	r2, [r7, #18]
 8005be0:	4413      	add	r3, r2
 8005be2:	461a      	mov	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005bea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <save_time+0x6c>)
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005bfe:	f004 f8d9 	bl	8009db4 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, seconds);
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	2102      	movs	r1, #2
 8005c06:	4806      	ldr	r0, [pc, #24]	; (8005c20 <save_time+0x70>)
 8005c08:	f005 fc33 	bl	800b472 <HAL_RTCEx_BKUPWrite>
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c16:	b004      	add	sp, #16
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	00015180 	.word	0x00015180
 8005c20:	200003d8 	.word	0x200003d8

08005c24 <measure_abs_time>:

uint32_t measure_abs_time(const RTC_TimeTypeDef time_t, const RTC_DateTypeDef date_t)
{
 8005c24:	b084      	sub	sp, #16
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	f107 0c10 	add.w	ip, r7, #16
 8005c30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t seconds = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
	seconds += time_t.Hours * 3600 + time_t.Minutes * 60 + time_t.Seconds;
 8005c38:	7c3b      	ldrb	r3, [r7, #16]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c40:	fb03 f202 	mul.w	r2, r3, r2
 8005c44:	7c7b      	ldrb	r3, [r7, #17]
 8005c46:	4619      	mov	r1, r3
 8005c48:	460b      	mov	r3, r1
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	1a5b      	subs	r3, r3, r1
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	7cba      	ldrb	r2, [r7, #18]
 8005c54:	4413      	add	r3, r2
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	607b      	str	r3, [r7, #4]
	seconds += date_t.Date * 86400;
 8005c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <measure_abs_time+0x78>)
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	607b      	str	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8005c72:	f004 f89f 	bl	8009db4 <HAL_PWR_EnableBkUpAccess>
	uint32_t saved_seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8005c76:	2102      	movs	r1, #2
 8005c78:	4809      	ldr	r0, [pc, #36]	; (8005ca0 <measure_abs_time+0x7c>)
 8005c7a:	f005 fc14 	bl	800b4a6 <HAL_RTCEx_BKUPRead>
 8005c7e:	6038      	str	r0, [r7, #0]
	return((uint32_t)abs((int32_t)seconds - (int32_t)saved_seconds));
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfb8      	it	lt
 8005c8a:	425b      	neglt	r3, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c96:	b004      	add	sp, #16
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	00015180 	.word	0x00015180
 8005ca0:	200003d8 	.word	0x200003d8

08005ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <HAL_MspInit+0x4c>)
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <HAL_MspInit+0x4c>)
 8005cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <HAL_MspInit+0x4c>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <HAL_MspInit+0x4c>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <HAL_MspInit+0x4c>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd6:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <HAL_MspInit+0x4c>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40023800 	.word	0x40023800

08005cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cfc:	f107 0314 	add.w	r3, r7, #20
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <HAL_ADC_MspInit+0x7c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d127      	bne.n	8005d66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <HAL_ADC_MspInit+0x80>)
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_ADC_MspInit+0x80>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d24:	6453      	str	r3, [r2, #68]	; 0x44
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <HAL_ADC_MspInit+0x80>)
 8005d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_ADC_MspInit+0x80>)
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <HAL_ADC_MspInit+0x80>)
 8005d3c:	f043 0304 	orr.w	r3, r3, #4
 8005d40:	6313      	str	r3, [r2, #48]	; 0x30
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <HAL_ADC_MspInit+0x80>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8005d4e:	2306      	movs	r3, #6
 8005d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d52:	2303      	movs	r3, #3
 8005d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4805      	ldr	r0, [pc, #20]	; (8005d78 <HAL_ADC_MspInit+0x84>)
 8005d62:	f002 fd4b 	bl	80087fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005d66:	bf00      	nop
 8005d68:	3728      	adds	r7, #40	; 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40012000 	.word	0x40012000
 8005d74:	40023800 	.word	0x40023800
 8005d78:	40020800 	.word	0x40020800

08005d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	; 0x30
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d84:	f107 031c 	add.w	r3, r7, #28
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a42      	ldr	r2, [pc, #264]	; (8005ea4 <HAL_I2C_MspInit+0x128>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d12c      	bne.n	8005df8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	4a40      	ldr	r2, [pc, #256]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	6313      	str	r3, [r2, #48]	; 0x30
 8005dae:	4b3e      	ldr	r3, [pc, #248]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dba:	23c0      	movs	r3, #192	; 0xc0
 8005dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dbe:	2312      	movs	r3, #18
 8005dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005dca:	2304      	movs	r3, #4
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dce:	f107 031c 	add.w	r3, r7, #28
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4835      	ldr	r0, [pc, #212]	; (8005eac <HAL_I2C_MspInit+0x130>)
 8005dd6:	f002 fd11 	bl	80087fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	4a31      	ldr	r2, [pc, #196]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005de8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dea:	4b2f      	ldr	r3, [pc, #188]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005df6:	e050      	b.n	8005e9a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2c      	ldr	r2, [pc, #176]	; (8005eb0 <HAL_I2C_MspInit+0x134>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d14b      	bne.n	8005e9a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	4a27      	ldr	r2, [pc, #156]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e0c:	f043 0304 	orr.w	r3, r3, #4
 8005e10:	6313      	str	r3, [r2, #48]	; 0x30
 8005e12:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e40:	2312      	movs	r3, #18
 8005e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e50:	f107 031c 	add.w	r3, r7, #28
 8005e54:	4619      	mov	r1, r3
 8005e56:	4817      	ldr	r0, [pc, #92]	; (8005eb4 <HAL_I2C_MspInit+0x138>)
 8005e58:	f002 fcd0 	bl	80087fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e62:	2312      	movs	r3, #18
 8005e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e6e:	2304      	movs	r3, #4
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e72:	f107 031c 	add.w	r3, r7, #28
 8005e76:	4619      	mov	r1, r3
 8005e78:	480f      	ldr	r0, [pc, #60]	; (8005eb8 <HAL_I2C_MspInit+0x13c>)
 8005e7a:	f002 fcbf 	bl	80087fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	4a08      	ldr	r2, [pc, #32]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8e:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <HAL_I2C_MspInit+0x12c>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	68bb      	ldr	r3, [r7, #8]
}
 8005e9a:	bf00      	nop
 8005e9c:	3730      	adds	r7, #48	; 0x30
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40005400 	.word	0x40005400
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40020400 	.word	0x40020400
 8005eb0:	40005c00 	.word	0x40005c00
 8005eb4:	40020800 	.word	0x40020800
 8005eb8:	40020000 	.word	0x40020000

08005ebc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <HAL_I2C_MspDeInit+0x64>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10e      	bne.n	8005eec <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <HAL_I2C_MspDeInit+0x68>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <HAL_I2C_MspDeInit+0x68>)
 8005ed4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ed8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005eda:	2140      	movs	r1, #64	; 0x40
 8005edc:	4812      	ldr	r0, [pc, #72]	; (8005f28 <HAL_I2C_MspDeInit+0x6c>)
 8005ede:	f002 fe21 	bl	8008b24 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	4810      	ldr	r0, [pc, #64]	; (8005f28 <HAL_I2C_MspDeInit+0x6c>)
 8005ee6:	f002 fe1d 	bl	8008b24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005eea:	e014      	b.n	8005f16 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0e      	ldr	r2, [pc, #56]	; (8005f2c <HAL_I2C_MspDeInit+0x70>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10f      	bne.n	8005f16 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_I2C_MspDeInit+0x68>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <HAL_I2C_MspDeInit+0x68>)
 8005efc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f00:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f06:	480a      	ldr	r0, [pc, #40]	; (8005f30 <HAL_I2C_MspDeInit+0x74>)
 8005f08:	f002 fe0c 	bl	8008b24 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f10:	4808      	ldr	r0, [pc, #32]	; (8005f34 <HAL_I2C_MspDeInit+0x78>)
 8005f12:	f002 fe07 	bl	8008b24 <HAL_GPIO_DeInit>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40005400 	.word	0x40005400
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40020400 	.word	0x40020400
 8005f2c:	40005c00 	.word	0x40005c00
 8005f30:	40020800 	.word	0x40020800
 8005f34:	40020000 	.word	0x40020000

08005f38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b09a      	sub	sp, #104	; 0x68
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	225c      	movs	r2, #92	; 0x5c
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f00a fd49 	bl	80109e0 <memset>
  if(hrtc->Instance==RTC)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <HAL_RTC_MspInit+0x4c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d111      	bne.n	8005f7c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005f58:	2320      	movs	r3, #32
 8005f5a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f60:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f62:	f107 030c 	add.w	r3, r7, #12
 8005f66:	4618      	mov	r0, r3
 8005f68:	f004 f8c8 	bl	800a0fc <HAL_RCCEx_PeriphCLKConfig>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005f72:	f7ff f999 	bl	80052a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005f76:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <HAL_RTC_MspInit+0x50>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005f7c:	bf00      	nop
 8005f7e:	3768      	adds	r7, #104	; 0x68
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40002800 	.word	0x40002800
 8005f88:	42470e3c 	.word	0x42470e3c

08005f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <HAL_SPI_MspInit+0x84>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d12b      	bne.n	8006006 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	4b18      	ldr	r3, [pc, #96]	; (8006014 <HAL_SPI_MspInit+0x88>)
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <HAL_SPI_MspInit+0x88>)
 8005fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fbe:	4b15      	ldr	r3, [pc, #84]	; (8006014 <HAL_SPI_MspInit+0x88>)
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_SPI_MspInit+0x88>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <HAL_SPI_MspInit+0x88>)
 8005fd4:	f043 0301 	orr.w	r3, r3, #1
 8005fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fda:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <HAL_SPI_MspInit+0x88>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005fe6:	23e0      	movs	r3, #224	; 0xe0
 8005fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fea:	2302      	movs	r3, #2
 8005fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ff6:	2305      	movs	r3, #5
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ffa:	f107 0314 	add.w	r3, r7, #20
 8005ffe:	4619      	mov	r1, r3
 8006000:	4805      	ldr	r0, [pc, #20]	; (8006018 <HAL_SPI_MspInit+0x8c>)
 8006002:	f002 fbfb 	bl	80087fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006006:	bf00      	nop
 8006008:	3728      	adds	r7, #40	; 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40013000 	.word	0x40013000
 8006014:	40023800 	.word	0x40023800
 8006018:	40020000 	.word	0x40020000

0800601c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b090      	sub	sp, #64	; 0x40
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7f      	ldr	r2, [pc, #508]	; (8006238 <HAL_UART_MspInit+0x21c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	f040 8092 	bne.w	8006164 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006040:	2300      	movs	r3, #0
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
 8006044:	4b7d      	ldr	r3, [pc, #500]	; (800623c <HAL_UART_MspInit+0x220>)
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	4a7c      	ldr	r2, [pc, #496]	; (800623c <HAL_UART_MspInit+0x220>)
 800604a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604e:	6413      	str	r3, [r2, #64]	; 0x40
 8006050:	4b7a      	ldr	r3, [pc, #488]	; (800623c <HAL_UART_MspInit+0x220>)
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605c:	2300      	movs	r3, #0
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	4b76      	ldr	r3, [pc, #472]	; (800623c <HAL_UART_MspInit+0x220>)
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	4a75      	ldr	r2, [pc, #468]	; (800623c <HAL_UART_MspInit+0x220>)
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	6313      	str	r3, [r2, #48]	; 0x30
 800606c:	4b73      	ldr	r3, [pc, #460]	; (800623c <HAL_UART_MspInit+0x220>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006078:	2303      	movs	r3, #3
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607c:	2302      	movs	r3, #2
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006080:	2300      	movs	r3, #0
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006084:	2303      	movs	r3, #3
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006088:	2308      	movs	r3, #8
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800608c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006090:	4619      	mov	r1, r3
 8006092:	486b      	ldr	r0, [pc, #428]	; (8006240 <HAL_UART_MspInit+0x224>)
 8006094:	f002 fbb2 	bl	80087fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006098:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_UART_MspInit+0x228>)
 800609a:	4a6b      	ldr	r2, [pc, #428]	; (8006248 <HAL_UART_MspInit+0x22c>)
 800609c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800609e:	4b69      	ldr	r3, [pc, #420]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060a6:	4b67      	ldr	r3, [pc, #412]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060a8:	2240      	movs	r2, #64	; 0x40
 80060aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ac:	4b65      	ldr	r3, [pc, #404]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060b2:	4b64      	ldr	r3, [pc, #400]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060b8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060ba:	4b62      	ldr	r3, [pc, #392]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060bc:	2200      	movs	r2, #0
 80060be:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060c0:	4b60      	ldr	r3, [pc, #384]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80060c6:	4b5f      	ldr	r3, [pc, #380]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060cc:	4b5d      	ldr	r3, [pc, #372]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060d2:	4b5c      	ldr	r3, [pc, #368]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80060d8:	485a      	ldr	r0, [pc, #360]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060da:	f001 ff21 	bl	8007f20 <HAL_DMA_Init>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80060e4:	f7ff f8e0 	bl	80052a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a56      	ldr	r2, [pc, #344]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060ec:	635a      	str	r2, [r3, #52]	; 0x34
 80060ee:	4a55      	ldr	r2, [pc, #340]	; (8006244 <HAL_UART_MspInit+0x228>)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80060f4:	4b55      	ldr	r3, [pc, #340]	; (800624c <HAL_UART_MspInit+0x230>)
 80060f6:	4a56      	ldr	r2, [pc, #344]	; (8006250 <HAL_UART_MspInit+0x234>)
 80060f8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80060fa:	4b54      	ldr	r3, [pc, #336]	; (800624c <HAL_UART_MspInit+0x230>)
 80060fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006100:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006102:	4b52      	ldr	r3, [pc, #328]	; (800624c <HAL_UART_MspInit+0x230>)
 8006104:	2200      	movs	r2, #0
 8006106:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006108:	4b50      	ldr	r3, [pc, #320]	; (800624c <HAL_UART_MspInit+0x230>)
 800610a:	2200      	movs	r2, #0
 800610c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800610e:	4b4f      	ldr	r3, [pc, #316]	; (800624c <HAL_UART_MspInit+0x230>)
 8006110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006114:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006116:	4b4d      	ldr	r3, [pc, #308]	; (800624c <HAL_UART_MspInit+0x230>)
 8006118:	2200      	movs	r2, #0
 800611a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800611c:	4b4b      	ldr	r3, [pc, #300]	; (800624c <HAL_UART_MspInit+0x230>)
 800611e:	2200      	movs	r2, #0
 8006120:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8006122:	4b4a      	ldr	r3, [pc, #296]	; (800624c <HAL_UART_MspInit+0x230>)
 8006124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006128:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800612a:	4b48      	ldr	r3, [pc, #288]	; (800624c <HAL_UART_MspInit+0x230>)
 800612c:	2200      	movs	r2, #0
 800612e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006130:	4b46      	ldr	r3, [pc, #280]	; (800624c <HAL_UART_MspInit+0x230>)
 8006132:	2200      	movs	r2, #0
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006136:	4845      	ldr	r0, [pc, #276]	; (800624c <HAL_UART_MspInit+0x230>)
 8006138:	f001 fef2 	bl	8007f20 <HAL_DMA_Init>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8006142:	f7ff f8b1 	bl	80052a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a40      	ldr	r2, [pc, #256]	; (800624c <HAL_UART_MspInit+0x230>)
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
 800614c:	4a3f      	ldr	r2, [pc, #252]	; (800624c <HAL_UART_MspInit+0x230>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	2034      	movs	r0, #52	; 0x34
 8006158:	f001 fe9d 	bl	8007e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800615c:	2034      	movs	r0, #52	; 0x34
 800615e:	f001 feb6 	bl	8007ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006162:	e135      	b.n	80063d0 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a3a      	ldr	r2, [pc, #232]	; (8006254 <HAL_UART_MspInit+0x238>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d178      	bne.n	8006260 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	4b32      	ldr	r3, [pc, #200]	; (800623c <HAL_UART_MspInit+0x220>)
 8006174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006176:	4a31      	ldr	r2, [pc, #196]	; (800623c <HAL_UART_MspInit+0x220>)
 8006178:	f043 0310 	orr.w	r3, r3, #16
 800617c:	6453      	str	r3, [r2, #68]	; 0x44
 800617e:	4b2f      	ldr	r3, [pc, #188]	; (800623c <HAL_UART_MspInit+0x220>)
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	4b2b      	ldr	r3, [pc, #172]	; (800623c <HAL_UART_MspInit+0x220>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	4a2a      	ldr	r2, [pc, #168]	; (800623c <HAL_UART_MspInit+0x220>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6313      	str	r3, [r2, #48]	; 0x30
 800619a:	4b28      	ldr	r3, [pc, #160]	; (800623c <HAL_UART_MspInit+0x220>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80061a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ac:	2302      	movs	r3, #2
 80061ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061b4:	2303      	movs	r3, #3
 80061b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061b8:	2307      	movs	r3, #7
 80061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061c0:	4619      	mov	r1, r3
 80061c2:	481f      	ldr	r0, [pc, #124]	; (8006240 <HAL_UART_MspInit+0x224>)
 80061c4:	f002 fb1a 	bl	80087fc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80061c8:	4b23      	ldr	r3, [pc, #140]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_UART_MspInit+0x240>)
 80061cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80061ce:	4b22      	ldr	r3, [pc, #136]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061d8:	2240      	movs	r2, #64	; 0x40
 80061da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061dc:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061e2:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061ea:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80061f6:	4b18      	ldr	r3, [pc, #96]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <HAL_UART_MspInit+0x23c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006204:	2200      	movs	r2, #0
 8006206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006208:	4813      	ldr	r0, [pc, #76]	; (8006258 <HAL_UART_MspInit+0x23c>)
 800620a:	f001 fe89 	bl	8007f20 <HAL_DMA_Init>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8006214:	f7ff f848 	bl	80052a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a0f      	ldr	r2, [pc, #60]	; (8006258 <HAL_UART_MspInit+0x23c>)
 800621c:	635a      	str	r2, [r3, #52]	; 0x34
 800621e:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <HAL_UART_MspInit+0x23c>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	2100      	movs	r1, #0
 8006228:	2025      	movs	r0, #37	; 0x25
 800622a:	f001 fe34 	bl	8007e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800622e:	2025      	movs	r0, #37	; 0x25
 8006230:	f001 fe4d 	bl	8007ece <HAL_NVIC_EnableIRQ>
}
 8006234:	e0cc      	b.n	80063d0 <HAL_UART_MspInit+0x3b4>
 8006236:	bf00      	nop
 8006238:	40004c00 	.word	0x40004c00
 800623c:	40023800 	.word	0x40023800
 8006240:	40020000 	.word	0x40020000
 8006244:	20000560 	.word	0x20000560
 8006248:	40026070 	.word	0x40026070
 800624c:	200005c0 	.word	0x200005c0
 8006250:	40026040 	.word	0x40026040
 8006254:	40011000 	.word	0x40011000
 8006258:	20000620 	.word	0x20000620
 800625c:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5c      	ldr	r2, [pc, #368]	; (80063d8 <HAL_UART_MspInit+0x3bc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d162      	bne.n	8006330 <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART2_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	4b5b      	ldr	r3, [pc, #364]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	4a5a      	ldr	r2, [pc, #360]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006278:	6413      	str	r3, [r2, #64]	; 0x40
 800627a:	4b58      	ldr	r3, [pc, #352]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	4b54      	ldr	r3, [pc, #336]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	4a53      	ldr	r2, [pc, #332]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	6313      	str	r3, [r2, #48]	; 0x30
 8006296:	4b51      	ldr	r3, [pc, #324]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062a2:	230c      	movs	r3, #12
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a6:	2302      	movs	r3, #2
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ae:	2303      	movs	r3, #3
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80062b2:	2307      	movs	r3, #7
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062ba:	4619      	mov	r1, r3
 80062bc:	4848      	ldr	r0, [pc, #288]	; (80063e0 <HAL_UART_MspInit+0x3c4>)
 80062be:	f002 fa9d 	bl	80087fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80062c2:	4b48      	ldr	r3, [pc, #288]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062c4:	4a48      	ldr	r2, [pc, #288]	; (80063e8 <HAL_UART_MspInit+0x3cc>)
 80062c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80062c8:	4b46      	ldr	r3, [pc, #280]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062d0:	4b44      	ldr	r3, [pc, #272]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062d6:	4b43      	ldr	r3, [pc, #268]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062d8:	2200      	movs	r2, #0
 80062da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062dc:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062e4:	4b3f      	ldr	r3, [pc, #252]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062ea:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80062f0:	4b3c      	ldr	r3, [pc, #240]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062f6:	4b3b      	ldr	r3, [pc, #236]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062fc:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 80062fe:	2200      	movs	r2, #0
 8006300:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006302:	4838      	ldr	r0, [pc, #224]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 8006304:	f001 fe0c 	bl	8007f20 <HAL_DMA_Init>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800630e:	f7fe ffcb 	bl	80052a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a33      	ldr	r2, [pc, #204]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
 8006318:	4a32      	ldr	r2, [pc, #200]	; (80063e4 <HAL_UART_MspInit+0x3c8>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800631e:	2200      	movs	r2, #0
 8006320:	2101      	movs	r1, #1
 8006322:	2026      	movs	r0, #38	; 0x26
 8006324:	f001 fdb7 	bl	8007e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006328:	2026      	movs	r0, #38	; 0x26
 800632a:	f001 fdd0 	bl	8007ece <HAL_NVIC_EnableIRQ>
}
 800632e:	e04f      	b.n	80063d0 <HAL_UART_MspInit+0x3b4>
  else if(huart->Instance==USART3)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a2d      	ldr	r2, [pc, #180]	; (80063ec <HAL_UART_MspInit+0x3d0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d14a      	bne.n	80063d0 <HAL_UART_MspInit+0x3b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	4b27      	ldr	r3, [pc, #156]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	4a26      	ldr	r2, [pc, #152]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006348:	6413      	str	r3, [r2, #64]	; 0x40
 800634a:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006360:	f043 0304 	orr.w	r3, r3, #4
 8006364:	6313      	str	r3, [r2, #48]	; 0x30
 8006366:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	4b19      	ldr	r3, [pc, #100]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	4a18      	ldr	r2, [pc, #96]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	6313      	str	r3, [r2, #48]	; 0x30
 8006382:	4b16      	ldr	r3, [pc, #88]	; (80063dc <HAL_UART_MspInit+0x3c0>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	60bb      	str	r3, [r7, #8]
 800638c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800638e:	2320      	movs	r3, #32
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006392:	2302      	movs	r3, #2
 8006394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800639a:	2303      	movs	r3, #3
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800639e:	2307      	movs	r3, #7
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063a6:	4619      	mov	r1, r3
 80063a8:	4811      	ldr	r0, [pc, #68]	; (80063f0 <HAL_UART_MspInit+0x3d4>)
 80063aa:	f002 fa27 	bl	80087fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b4:	2302      	movs	r3, #2
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063bc:	2303      	movs	r3, #3
 80063be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063c0:	2307      	movs	r3, #7
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063c8:	4619      	mov	r1, r3
 80063ca:	480a      	ldr	r0, [pc, #40]	; (80063f4 <HAL_UART_MspInit+0x3d8>)
 80063cc:	f002 fa16 	bl	80087fc <HAL_GPIO_Init>
}
 80063d0:	bf00      	nop
 80063d2:	3740      	adds	r7, #64	; 0x40
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40004400 	.word	0x40004400
 80063dc:	40023800 	.word	0x40023800
 80063e0:	40020000 	.word	0x40020000
 80063e4:	20000680 	.word	0x20000680
 80063e8:	40026088 	.word	0x40026088
 80063ec:	40004800 	.word	0x40004800
 80063f0:	40020800 	.word	0x40020800
 80063f4:	40020400 	.word	0x40020400

080063f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a31      	ldr	r2, [pc, #196]	; (80064cc <HAL_UART_MspDeInit+0xd4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d117      	bne.n	800643a <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	4a30      	ldr	r2, [pc, #192]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 8006410:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006414:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8006416:	2103      	movs	r1, #3
 8006418:	482e      	ldr	r0, [pc, #184]	; (80064d4 <HAL_UART_MspDeInit+0xdc>)
 800641a:	f002 fb83 	bl	8008b24 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fe2a 	bl	800807c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fe25 	bl	800807c <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8006432:	2034      	movs	r0, #52	; 0x34
 8006434:	f001 fd59 	bl	8007eea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8006438:	e044      	b.n	80064c4 <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <HAL_UART_MspDeInit+0xe0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d113      	bne.n	800646c <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 8006444:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006450:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006454:	481f      	ldr	r0, [pc, #124]	; (80064d4 <HAL_UART_MspDeInit+0xdc>)
 8006456:	f002 fb65 	bl	8008b24 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fe0c 	bl	800807c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006464:	2025      	movs	r0, #37	; 0x25
 8006466:	f001 fd40 	bl	8007eea <HAL_NVIC_DisableIRQ>
}
 800646a:	e02b      	b.n	80064c4 <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1a      	ldr	r2, [pc, #104]	; (80064dc <HAL_UART_MspDeInit+0xe4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d112      	bne.n	800649c <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART2_CLK_DISABLE();
 8006476:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 800647c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006482:	210c      	movs	r1, #12
 8006484:	4813      	ldr	r0, [pc, #76]	; (80064d4 <HAL_UART_MspDeInit+0xdc>)
 8006486:	f002 fb4d 	bl	8008b24 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fdf4 	bl	800807c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006494:	2026      	movs	r0, #38	; 0x26
 8006496:	f001 fd28 	bl	8007eea <HAL_NVIC_DisableIRQ>
}
 800649a:	e013      	b.n	80064c4 <HAL_UART_MspDeInit+0xcc>
  else if(huart->Instance==USART3)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <HAL_UART_MspDeInit+0xe8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10e      	bne.n	80064c4 <HAL_UART_MspDeInit+0xcc>
    __HAL_RCC_USART3_CLK_DISABLE();
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <HAL_UART_MspDeInit+0xd8>)
 80064ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 80064b2:	2120      	movs	r1, #32
 80064b4:	480b      	ldr	r0, [pc, #44]	; (80064e4 <HAL_UART_MspDeInit+0xec>)
 80064b6:	f002 fb35 	bl	8008b24 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80064ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064be:	480a      	ldr	r0, [pc, #40]	; (80064e8 <HAL_UART_MspDeInit+0xf0>)
 80064c0:	f002 fb30 	bl	8008b24 <HAL_GPIO_DeInit>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40004c00 	.word	0x40004c00
 80064d0:	40023800 	.word	0x40023800
 80064d4:	40020000 	.word	0x40020000
 80064d8:	40011000 	.word	0x40011000
 80064dc:	40004400 	.word	0x40004400
 80064e0:	40004800 	.word	0x40004800
 80064e4:	40020800 	.word	0x40020800
 80064e8:	40020400 	.word	0x40020400

080064ec <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void){
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <SDTimer_Handler+0x40>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <SDTimer_Handler+0x1c>
		Timer1--;
 80064fa:	4b0c      	ldr	r3, [pc, #48]	; (800652c <SDTimer_Handler+0x40>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	4b09      	ldr	r3, [pc, #36]	; (800652c <SDTimer_Handler+0x40>)
 8006506:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <SDTimer_Handler+0x44>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d006      	beq.n	8006520 <SDTimer_Handler+0x34>
		Timer2--;
 8006512:	4b07      	ldr	r3, [pc, #28]	; (8006530 <SDTimer_Handler+0x44>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b2da      	uxtb	r2, r3
 800651c:	4b04      	ldr	r3, [pc, #16]	; (8006530 <SDTimer_Handler+0x44>)
 800651e:	701a      	strb	r2, [r3, #0]

}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	200009f1 	.word	0x200009f1
 8006530:	200009f2 	.word	0x200009f2

08006534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006538:	e7fe      	b.n	8006538 <NMI_Handler+0x4>

0800653a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800653a:	b480      	push	{r7}
 800653c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800653e:	e7fe      	b.n	800653e <HardFault_Handler+0x4>

08006540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006544:	e7fe      	b.n	8006544 <MemManage_Handler+0x4>

08006546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006546:	b480      	push	{r7}
 8006548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800654a:	e7fe      	b.n	800654a <BusFault_Handler+0x4>

0800654c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006550:	e7fe      	b.n	8006550 <UsageFault_Handler+0x4>

08006552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006552:	b480      	push	{r7}
 8006554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800656e:	b480      	push	{r7}
 8006570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006572:	bf00      	nop
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <SysTick_Handler+0x30>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	3301      	adds	r3, #1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b08      	ldr	r3, [pc, #32]	; (80065ac <SysTick_Handler+0x30>)
 800658c:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt>=10)
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <SysTick_Handler+0x30>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b09      	cmp	r3, #9
 8006596:	d904      	bls.n	80065a2 <SysTick_Handler+0x26>
		{
			FatFsCnt=0;
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <SysTick_Handler+0x30>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
			SDTimer_Handler();
 800659e:	f7ff ffa5 	bl	80064ec <SDTimer_Handler>
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065a2:	f000 ff25 	bl	80073f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200009f0 	.word	0x200009f0

080065b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80065b4:	2008      	movs	r0, #8
 80065b6:	f002 fbf5 	bl	8008da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80065ba:	bf00      	nop
 80065bc:	bd80      	pop	{r7, pc}

080065be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80065c2:	2010      	movs	r0, #16
 80065c4:	f002 fbee 	bl	8008da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}

080065cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80065d0:	4802      	ldr	r0, [pc, #8]	; (80065dc <DMA1_Stream2_IRQHandler+0x10>)
 80065d2:	f001 fe9b 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200005c0 	.word	0x200005c0

080065e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80065e4:	4802      	ldr	r0, [pc, #8]	; (80065f0 <DMA1_Stream4_IRQHandler+0x10>)
 80065e6:	f001 fe91 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000560 	.word	0x20000560

080065f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80065f8:	4802      	ldr	r0, [pc, #8]	; (8006604 <DMA1_Stream5_IRQHandler+0x10>)
 80065fa:	f001 fe87 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000680 	.word	0x20000680

08006608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800660c:	4802      	ldr	r0, [pc, #8]	; (8006618 <USART1_IRQHandler+0x10>)
 800660e:	f005 fd5d 	bl	800c0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000494 	.word	0x20000494

0800661c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006620:	4802      	ldr	r0, [pc, #8]	; (800662c <USART2_IRQHandler+0x10>)
 8006622:	f005 fd53 	bl	800c0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200004d8 	.word	0x200004d8

08006630 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006634:	4802      	ldr	r0, [pc, #8]	; (8006640 <UART4_IRQHandler+0x10>)
 8006636:	f005 fd49 	bl	800c0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800663a:	bf00      	nop
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000450 	.word	0x20000450

08006644 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006648:	4802      	ldr	r0, [pc, #8]	; (8006654 <DMA2_Stream7_IRQHandler+0x10>)
 800664a:	f001 fe5f 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000620 	.word	0x20000620

08006658 <strain_gage_delay_us>:
#include "strain_gauge.h"

extern UART_HandleTypeDef huart1;

static void strain_gage_delay_us(void)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
  uint32_t delay = 4;
 800665e:	2304      	movs	r3, #4
 8006660:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8006662:	e006      	b.n	8006672 <strain_gage_delay_us+0x1a>
  {
    delay--;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3b01      	subs	r3, #1
 8006668:	607b      	str	r3, [r7, #4]
    __nop(); __nop(); __nop(); __nop();
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	bf00      	nop
  while (delay > 0)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f5      	bne.n	8006664 <strain_gage_delay_us+0xc>
  }
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <straing_gage_gpio_init>:

void straing_gage_gpio_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b09a      	sub	sp, #104	; 0x68
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	4613      	mov	r3, r2
 8006694:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[50];
  hx711->clk_gpio = clk_gpio;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80066ae:	815a      	strh	r2, [r3, #10]

  HAL_GPIO_DeInit(clk_gpio, clk_pin);
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68b8      	ldr	r0, [r7, #8]
 80066b6:	f002 fa35 	bl	8008b24 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(dat_gpio, dat_pin);
 80066ba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80066be:	4619      	mov	r1, r3
 80066c0:	6838      	ldr	r0, [r7, #0]
 80066c2:	f002 fa2f 	bl	8008b24 <HAL_GPIO_DeInit>

  GPIO_InitTypeDef  gpio = {0};
 80066c6:	f107 0310 	add.w	r3, r7, #16
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	609a      	str	r2, [r3, #8]
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80066d6:	2301      	movs	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80066de:	2302      	movs	r3, #2
 80066e0:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80066e6:	f107 0310 	add.w	r3, r7, #16
 80066ea:	4619      	mov	r1, r3
 80066ec:	68b8      	ldr	r0, [r7, #8]
 80066ee:	f002 f885 	bl	80087fc <HAL_GPIO_Init>

  gpio.Mode = GPIO_MODE_INPUT;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 80066f6:	2301      	movs	r3, #1
 80066f8:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80066fa:	2302      	movs	r3, #2
 80066fc:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 80066fe:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006702:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8006704:	f107 0310 	add.w	r3, r7, #16
 8006708:	4619      	mov	r1, r3
 800670a:	6838      	ldr	r0, [r7, #0]
 800670c:	f002 f876 	bl	80087fc <HAL_GPIO_Init>

  hx711_delay(10);
 8006710:	200a      	movs	r0, #10
 8006712:	f000 fe8d 	bl	8007430 <HAL_Delay>
  int counter = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	667b      	str	r3, [r7, #100]	; 0x64
  int32_t offset = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	663b      	str	r3, [r7, #96]	; 0x60
  for(int i = 0; i < 20; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006722:	e013      	b.n	800674c <straing_gage_gpio_init+0xc6>
  {
	  int32_t value = strain_gage_get_vals(hx711);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f81e 	bl	8006766 <strain_gage_get_vals>
 800672a:	65b8      	str	r0, [r7, #88]	; 0x58
	  if(value != 0)
 800672c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800672e:	2b00      	cmp	r3, #0
 8006730:	d006      	beq.n	8006740 <straing_gage_gpio_init+0xba>
	  {
		  offset += value;
 8006732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006736:	4413      	add	r3, r2
 8006738:	663b      	str	r3, [r7, #96]	; 0x60
		  counter++;
 800673a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800673c:	3301      	adds	r3, #1
 800673e:	667b      	str	r3, [r7, #100]	; 0x64

	  }
	  hx711_delay(10);
 8006740:	200a      	movs	r0, #10
 8006742:	f000 fe75 	bl	8007430 <HAL_Delay>
  for(int i = 0; i < 20; i++)
 8006746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006748:	3301      	adds	r3, #1
 800674a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800674e:	2b13      	cmp	r3, #19
 8006750:	dde8      	ble.n	8006724 <straing_gage_gpio_init+0x9e>
  }
  hx711->offset = offset / counter;
 8006752:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006756:	fb92 f2f3 	sdiv	r2, r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	60da      	str	r2, [r3, #12]
}
 800675e:	bf00      	nop
 8006760:	3768      	adds	r7, #104	; 0x68
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <strain_gage_get_vals>:

int32_t strain_gage_get_vals(hx711_t *hx711)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8006772:	f000 fe51 	bl	8007418 <HAL_GetTick>
 8006776:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006778:	e00b      	b.n	8006792 <strain_gage_get_vals+0x2c>
  {
    hx711_delay(1);
 800677a:	2001      	movs	r0, #1
 800677c:	f000 fe58 	bl	8007430 <HAL_Delay>
    if(HAL_GetTick() - startTime > 2)
 8006780:	f000 fe4a 	bl	8007418 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <strain_gage_get_vals+0x2c>
      return 0;
 800678e:	2300      	movs	r3, #0
 8006790:	e058      	b.n	8006844 <strain_gage_get_vals+0xde>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	895b      	ldrh	r3, [r3, #10]
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f002 fab5 	bl	8008d0c <HAL_GPIO_ReadPin>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d0e8      	beq.n	800677a <strain_gage_get_vals+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 80067a8:	2300      	movs	r3, #0
 80067aa:	74fb      	strb	r3, [r7, #19]
 80067ac:	e02a      	b.n	8006804 <strain_gage_get_vals+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	891b      	ldrh	r3, [r3, #8]
 80067b6:	2201      	movs	r2, #1
 80067b8:	4619      	mov	r1, r3
 80067ba:	f002 fabf 	bl	8008d3c <HAL_GPIO_WritePin>
    strain_gage_delay_us();
 80067be:	f7ff ff4b 	bl	8006658 <strain_gage_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	891b      	ldrh	r3, [r3, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	4619      	mov	r1, r3
 80067ce:	f002 fab5 	bl	8008d3c <HAL_GPIO_WritePin>
    strain_gage_delay_us();
 80067d2:	f7ff ff41 	bl	8006658 <strain_gage_delay_us>
    data = data << 1;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	895b      	ldrh	r3, [r3, #10]
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f002 fa90 	bl	8008d0c <HAL_GPIO_ReadPin>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d102      	bne.n	80067f8 <strain_gage_get_vals+0x92>
      data ++;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 80067f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	3301      	adds	r3, #1
 8006800:	b2db      	uxtb	r3, r3
 8006802:	74fb      	strb	r3, [r7, #19]
 8006804:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006808:	2b17      	cmp	r3, #23
 800680a:	ddd0      	ble.n	80067ae <strain_gage_get_vals+0x48>
  }
  data = data ^ 0x800000;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8006812:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	891b      	ldrh	r3, [r3, #8]
 800681c:	2201      	movs	r2, #1
 800681e:	4619      	mov	r1, r3
 8006820:	f002 fa8c 	bl	8008d3c <HAL_GPIO_WritePin>
  strain_gage_delay_us();
 8006824:	f7ff ff18 	bl	8006658 <strain_gage_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	891b      	ldrh	r3, [r3, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	4619      	mov	r1, r3
 8006834:	f002 fa82 	bl	8008d3c <HAL_GPIO_WritePin>
  strain_gage_delay_us();
 8006838:	f7ff ff0e 	bl	8006658 <strain_gage_delay_us>
  return (int32_t)data - hx711->offset;
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	1ad3      	subs	r3, r2, r3
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
	return 1;
 8006850:	2301      	movs	r3, #1
}
 8006852:	4618      	mov	r0, r3
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <_kill>:

int _kill(int pid, int sig)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006866:	f00a f891 	bl	801098c <__errno>
 800686a:	4603      	mov	r3, r0
 800686c:	2216      	movs	r2, #22
 800686e:	601a      	str	r2, [r3, #0]
	return -1;
 8006870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <_exit>:

void _exit (int status)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006884:	f04f 31ff 	mov.w	r1, #4294967295
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ffe7 	bl	800685c <_kill>
	while (1) {}		/* Make sure we hang here */
 800688e:	e7fe      	b.n	800688e <_exit+0x12>

08006890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e00a      	b.n	80068b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068a2:	f3af 8000 	nop.w
 80068a6:	4601      	mov	r1, r0
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	60ba      	str	r2, [r7, #8]
 80068ae:	b2ca      	uxtb	r2, r1
 80068b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	3301      	adds	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	dbf0      	blt.n	80068a2 <_read+0x12>
	}

return len;
 80068c0:	687b      	ldr	r3, [r7, #4]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e009      	b.n	80068f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	60ba      	str	r2, [r7, #8]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3301      	adds	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	dbf1      	blt.n	80068dc <_write+0x12>
	}
	return len;
 80068f8:	687b      	ldr	r3, [r7, #4]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <_close>:

int _close(int file)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
	return -1;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800692a:	605a      	str	r2, [r3, #4]
	return 0;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <_isatty>:

int _isatty(int file)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
	return 1;
 8006942:	2301      	movs	r3, #1
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
	return 0;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006974:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <_sbrk+0x5c>)
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <_sbrk+0x60>)
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <_sbrk+0x64>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006988:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <_sbrk+0x64>)
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <_sbrk+0x68>)
 800698c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800698e:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <_sbrk+0x64>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	d207      	bcs.n	80069ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800699c:	f009 fff6 	bl	801098c <__errno>
 80069a0:	4603      	mov	r3, r0
 80069a2:	220c      	movs	r2, #12
 80069a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069a6:	f04f 33ff 	mov.w	r3, #4294967295
 80069aa:	e009      	b.n	80069c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069ac:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <_sbrk+0x64>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069b2:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <_sbrk+0x64>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4413      	add	r3, r2
 80069ba:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <_sbrk+0x64>)
 80069bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069be:	68fb      	ldr	r3, [r7, #12]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20020000 	.word	0x20020000
 80069cc:	00000400 	.word	0x00000400
 80069d0:	200009f4 	.word	0x200009f4
 80069d4:	20004978 	.word	0x20004978

080069d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <SystemInit+0x20>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	4a05      	ldr	r2, [pc, #20]	; (80069f8 <SystemInit+0x20>)
 80069e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	e000ed00 	.word	0xe000ed00

080069fc <uart_Sd_Transmit>:
static power Power_Pack;
backup_sram_datas_s *Backup_Pack = (backup_sram_datas_s *)BKPSRAM_BASE;
*/

_io void uart_Sd_Transmit(char *string)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7f9 fc03 	bl	8000210 <strlen>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, len, 2000); // transmit in blocking mode
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	4803      	ldr	r0, [pc, #12]	; (8006a28 <uart_Sd_Transmit+0x2c>)
 8006a1a:	f005 fa17 	bl	800be4c <HAL_UART_Transmit>
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	2000051c 	.word	0x2000051c

08006a2c <sdBufClear>:
	while (*buf++ != '\0')
		i++;
	return i;
}
_io void sdBufClear(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	607b      	str	r3, [r7, #4]
 8006a36:	e007      	b.n	8006a48 <sdBufClear+0x1c>
		fatBuff[i] = 0;
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <sdBufClear+0x34>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3301      	adds	r3, #1
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	dbf3      	blt.n	8006a38 <sdBufClear+0xc>
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	200009f8 	.word	0x200009f8

08006a64 <usr_fatfsInitial>:
	} while (fno.fname[0] != 0);

	f_closedir(&dir);
}
PUBLIC void usr_fatfsInitial(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
	MX_FATFS_Init();
 8006a68:	f006 fc88 	bl	800d37c <MX_FATFS_Init>
}
 8006a6c:	bf00      	nop
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <sdInitials>:
PUBLIC void sdInitials(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8006a74:	2201      	movs	r2, #1
 8006a76:	4939      	ldr	r1, [pc, #228]	; (8006b5c <sdInitials+0xec>)
 8006a78:	4839      	ldr	r0, [pc, #228]	; (8006b60 <sdInitials+0xf0>)
 8006a7a:	f008 fecd 	bl	800f818 <f_mount>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b38      	ldr	r3, [pc, #224]	; (8006b64 <sdInitials+0xf4>)
 8006a84:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8006a86:	4b37      	ldr	r3, [pc, #220]	; (8006b64 <sdInitials+0xf4>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <sdInitials+0x26>
		uart_Sd_Transmit("error in mount [Check For Fat Response (fresult) in debug mode!!!!]......\n");
 8006a8e:	4836      	ldr	r0, [pc, #216]	; (8006b68 <sdInitials+0xf8>)
 8006a90:	f7ff ffb4 	bl	80069fc <uart_Sd_Transmit>
 8006a94:	e002      	b.n	8006a9c <sdInitials+0x2c>
	else
		uart_Sd_Transmit("SD CARD MOUNTED CUSSESSFULY..\n");
 8006a96:	4835      	ldr	r0, [pc, #212]	; (8006b6c <sdInitials+0xfc>)
 8006a98:	f7ff ffb0 	bl	80069fc <uart_Sd_Transmit>

	/*capacity details*/
	f_getfree("", &fre_clust, &pfs);
 8006a9c:	4a34      	ldr	r2, [pc, #208]	; (8006b70 <sdInitials+0x100>)
 8006a9e:	4935      	ldr	r1, [pc, #212]	; (8006b74 <sdInitials+0x104>)
 8006aa0:	4835      	ldr	r0, [pc, #212]	; (8006b78 <sdInitials+0x108>)
 8006aa2:	f009 fb07 	bl	80100b4 <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8006aa6:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <sdInitials+0x100>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	3b02      	subs	r3, #2
 8006aae:	4a30      	ldr	r2, [pc, #192]	; (8006b70 <sdInitials+0x100>)
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	8952      	ldrh	r2, [r2, #10]
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7f9 fd43 	bl	8000544 <__aeabi_ui2d>
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <sdInitials+0x10c>)
 8006ac4:	f7f9 fdb8 	bl	8000638 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f7fa f88a 	bl	8000be8 <__aeabi_d2uiz>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	4a2a      	ldr	r2, [pc, #168]	; (8006b80 <sdInitials+0x110>)
 8006ad8:	6013      	str	r3, [r2, #0]
	sprintf(fatBuff, "SD CARD [Total] Size: \t%lu\n", total);
 8006ada:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <sdInitials+0x110>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4928      	ldr	r1, [pc, #160]	; (8006b84 <sdInitials+0x114>)
 8006ae2:	4829      	ldr	r0, [pc, #164]	; (8006b88 <sdInitials+0x118>)
 8006ae4:	f00a fe04 	bl	80116f0 <siprintf>
	uart_Sd_Transmit(fatBuff);
 8006ae8:	4827      	ldr	r0, [pc, #156]	; (8006b88 <sdInitials+0x118>)
 8006aea:	f7ff ff87 	bl	80069fc <uart_Sd_Transmit>
	sdBufClear();
 8006aee:	f7ff ff9d 	bl	8006a2c <sdBufClear>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8006af2:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <sdInitials+0x100>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	895b      	ldrh	r3, [r3, #10]
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <sdInitials+0x104>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7f9 fd1e 	bl	8000544 <__aeabi_ui2d>
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <sdInitials+0x10c>)
 8006b0e:	f7f9 fd93 	bl	8000638 <__aeabi_dmul>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4610      	mov	r0, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f7fa f865 	bl	8000be8 <__aeabi_d2uiz>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4a1a      	ldr	r2, [pc, #104]	; (8006b8c <sdInitials+0x11c>)
 8006b22:	6013      	str	r3, [r2, #0]
	sprintf(fatBuff, "SD CARD [Free] Size: \t%lu\n", free_space);
 8006b24:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <sdInitials+0x11c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4919      	ldr	r1, [pc, #100]	; (8006b90 <sdInitials+0x120>)
 8006b2c:	4816      	ldr	r0, [pc, #88]	; (8006b88 <sdInitials+0x118>)
 8006b2e:	f00a fddf 	bl	80116f0 <siprintf>
	uart_Sd_Transmit(fatBuff);
 8006b32:	4815      	ldr	r0, [pc, #84]	; (8006b88 <sdInitials+0x118>)
 8006b34:	f7ff ff62 	bl	80069fc <uart_Sd_Transmit>
	fresult = f_open(&fil, "flightRecorder.csv", FA_CREATE_NEW | FA_WRITE);//test
 8006b38:	2206      	movs	r2, #6
 8006b3a:	4916      	ldr	r1, [pc, #88]	; (8006b94 <sdInitials+0x124>)
 8006b3c:	4816      	ldr	r0, [pc, #88]	; (8006b98 <sdInitials+0x128>)
 8006b3e:	f008 feb1 	bl	800f8a4 <f_open>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <sdInitials+0xf4>)
 8006b48:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 8006b4a:	4813      	ldr	r0, [pc, #76]	; (8006b98 <sdInitials+0x128>)
 8006b4c:	f009 fa88 	bl	8010060 <f_close>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <sdInitials+0xf4>)
 8006b56:	701a      	strb	r2, [r3, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	0801792c 	.word	0x0801792c
 8006b60:	200015f8 	.word	0x200015f8
 8006b64:	20003660 	.word	0x20003660
 8006b68:	08017944 	.word	0x08017944
 8006b6c:	08017990 	.word	0x08017990
 8006b70:	20003664 	.word	0x20003664
 8006b74:	20003668 	.word	0x20003668
 8006b78:	080179b0 	.word	0x080179b0
 8006b7c:	3fe00000 	.word	0x3fe00000
 8006b80:	2000366c 	.word	0x2000366c
 8006b84:	080179b4 	.word	0x080179b4
 8006b88:	200009f8 	.word	0x200009f8
 8006b8c:	20003670 	.word	0x20003670
 8006b90:	080179d0 	.word	0x080179d0
 8006b94:	080179ec 	.word	0x080179ec
 8006b98:	20002630 	.word	0x20002630

08006b9c <sd_transmit>:
	uart_Sd_Transmit("[testDataLogFile.txt] GOK-HAN data log closed.\n");

#endif
}
PUBLIC int sd_transmit(const char *str)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b0c2      	sub	sp, #264	; 0x108
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006baa:	6018      	str	r0, [r3, #0]
	uint8_t _buffer[250];
#ifdef ROCKET_CARD
	sprintf((char*)_buffer, "Counter,Time,Pressure(mPa),Humidity(%%),Temperature(C),Altitude(m),Velocity(m/s),Acc_X,Acc_Y,Acc_Z,Gyro_X,Gyro_Y,Gyro_Z,Rocket_Status,Angle(degree),Q0,Q1,Q2,Q3,Max_altitude(m),Latitude,Longitude,Sat_count,GPS_altitude,Voltage,Current(mA),Power(mWs)\n");
#else
	sprintf((char*)_buffer, "Counter,Time,Pressure(mPa),Humidity(%%),Temperature(C),Altitude(m),Velocity(m/s),Acc_X,Acc_Y,Acc_Z,Gyro_X,Gyro_Y,Gyro_Z,Rocket_Status,Angle(degree),Q0,Q1,Q2,Q3,Strain,Latitude,Longitude,Sat_count,GPS_altitude,Voltage,Current(mA),Power(mWs)\n");
 8006bac:	f107 030c 	add.w	r3, r7, #12
 8006bb0:	4912      	ldr	r1, [pc, #72]	; (8006bfc <sd_transmit+0x60>)
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f00a fd9c 	bl	80116f0 <siprintf>
#endif
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE); // open to write
 8006bb8:	2232      	movs	r2, #50	; 0x32
 8006bba:	4911      	ldr	r1, [pc, #68]	; (8006c00 <sd_transmit+0x64>)
 8006bbc:	4811      	ldr	r0, [pc, #68]	; (8006c04 <sd_transmit+0x68>)
 8006bbe:	f008 fe71 	bl	800f8a4 <f_open>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <sd_transmit+0x6c>)
 8006bc8:	701a      	strb	r2, [r3, #0]
	fresult = f_printf(&fil, (char*)_buffer);
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4619      	mov	r1, r3
 8006bd0:	480c      	ldr	r0, [pc, #48]	; (8006c04 <sd_transmit+0x68>)
 8006bd2:	f009 fb9b 	bl	801030c <f_printf>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <sd_transmit+0x6c>)
 8006bdc:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil); // close
 8006bde:	4809      	ldr	r0, [pc, #36]	; (8006c04 <sd_transmit+0x68>)
 8006be0:	f009 fa3e 	bl	8010060 <f_close>
 8006be4:	4603      	mov	r3, r0
 8006be6:	461a      	mov	r2, r3
 8006be8:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <sd_transmit+0x6c>)
 8006bea:	701a      	strb	r2, [r3, #0]
	return fresult;
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <sd_transmit+0x6c>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08017a00 	.word	0x08017a00
 8006c00:	080179ec 	.word	0x080179ec
 8006c04:	20002630 	.word	0x20002630
 8006c08:	20003660 	.word	0x20003660

08006c0c <sdDataLogger>:
PUBLIC void sdDataLogger(uint32_t counter, BME_280_t *BME_Pack, bmi088_struct_t *BMI_Pack, backup_sram_datas_s *Backup_Pack, S_GPS_L86_DATA *GPS_Pack, power *Power_Pack)
{
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	ed2d 8b06 	vpush	{d8-d10}
 8006c14:	b0dd      	sub	sp, #372	; 0x174
 8006c16:	af34      	add	r7, sp, #208	; 0xd0
 8006c18:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8006c1c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006c20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fresult = f_open(&fil, "flightRecorder.csv", FA_OPEN_APPEND | FA_WRITE);
 8006c28:	2232      	movs	r2, #50	; 0x32
 8006c2a:	49a3      	ldr	r1, [pc, #652]	; (8006eb8 <sdDataLogger+0x2ac>)
 8006c2c:	48a3      	ldr	r0, [pc, #652]	; (8006ebc <sdDataLogger+0x2b0>)
 8006c2e:	f008 fe39 	bl	800f8a4 <f_open>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	4ba2      	ldr	r3, [pc, #648]	; (8006ec0 <sdDataLogger+0x2b4>)
 8006c38:	701a      	strb	r2, [r3, #0]
#ifdef ROCKET_CARD
	sprintf(_aBuf, "%lu,%.0f,%.3f,%.1f,%.1f,%.1f,%.1f,%f,%f,%f,%f,%f,%f,%d,%.2f,%f,%f,%f,%f,%.1f,%f,%f,%d,%.1f,%.2f,%.2f,%.2f\n", counter, GPS_Pack->timeDateBuf, BME_Pack->pressure, BME_Pack->humidity, BME_Pack->temperature, BME_Pack->altitude, BME_Pack->velocity, BMI_Pack->acc_x, BMI_Pack->acc_y, BMI_Pack->acc_z, BMI_Pack->gyro_x, BMI_Pack->gyro_y, BMI_Pack->gyro_z, Backup_Pack->r_status, BMI_Pack->angle, Backup_Pack->q[0], Backup_Pack->q[1], Backup_Pack->q[2], Backup_Pack->q[3], Backup_Pack->max_altitude, GPS_Pack->lat, GPS_Pack->lon, GPS_Pack->satInUse, GPS_Pack->altitudeInMeter, Power_Pack->voltaj, Power_Pack->akim, Power_Pack->mWatt_s);
#else
	sprintf(_aBuf, "%lu,%.0f,%.3f,%.1f,%.1f,%.1f,%.1f,%f,%f,%f,%f,%f,%f,%d,%.2f,%f,%f,%f,%f,%.1f,%f,%f,%d,%.1f,%.2f,%.2f,%.2f\n", counter, GPS_Pack->timeDateBuf, BME_Pack->pressure, BME_Pack->humidity, BME_Pack->temperature, BME_Pack->altitude, BME_Pack->velocity, BMI_Pack->acc_x, BMI_Pack->acc_y, BMI_Pack->acc_z, BMI_Pack->gyro_x, BMI_Pack->gyro_y, BMI_Pack->gyro_z, Backup_Pack->r_status, BMI_Pack->angle, Backup_Pack->q[0], Backup_Pack->q[1], Backup_Pack->q[2], Backup_Pack->q[3], strain_gage_get_vals(&loadcell), GPS_Pack->lat, GPS_Pack->lon, GPS_Pack->satInUse, GPS_Pack->altitudeInMeter, Power_Pack->voltaj, Power_Pack->akim, Power_Pack->mWatt_s);
 8006c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7f9 fca1 	bl	8000588 <__aeabi_f2d>
 8006c46:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 8006c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7f9 fc99 	bl	8000588 <__aeabi_f2d>
 8006c56:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 8006c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7f9 fc91 	bl	8000588 <__aeabi_f2d>
 8006c66:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8006c6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7f9 fc89 	bl	8000588 <__aeabi_f2d>
 8006c76:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8006c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7f9 fc81 	bl	8000588 <__aeabi_f2d>
 8006c86:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8006c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7f9 fc79 	bl	8000588 <__aeabi_f2d>
 8006c96:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8006c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7f9 fc70 	bl	8000588 <__aeabi_f2d>
 8006ca8:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8006cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7f9 fc67 	bl	8000588 <__aeabi_f2d>
 8006cba:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8006cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cc2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7f9 fc5e 	bl	8000588 <__aeabi_f2d>
 8006ccc:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8006cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cd4:	ed93 ab20 	vldr	d10, [r3, #128]	; 0x80
 8006cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cdc:	ed93 9b22 	vldr	d9, [r3, #136]	; 0x88
 8006ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ce4:	ed93 8b24 	vldr	d8, [r3, #144]	; 0x90
 8006ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7f9 fc45 	bl	8000588 <__aeabi_f2d>
 8006cfe:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8006d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7f9 fc3d 	bl	8000588 <__aeabi_f2d>
 8006d0e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8006d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7f9 fc35 	bl	8000588 <__aeabi_f2d>
 8006d1e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8006d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7f9 fc2d 	bl	8000588 <__aeabi_f2d>
 8006d2e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8006d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fc25 	bl	8000588 <__aeabi_f2d>
 8006d3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006d42:	4860      	ldr	r0, [pc, #384]	; (8006ec4 <sdDataLogger+0x2b8>)
 8006d44:	f7ff fd0f 	bl	8006766 <strain_gage_get_vals>
 8006d48:	63b8      	str	r0, [r7, #56]	; 0x38
 8006d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7f9 fc19 	bl	8000588 <__aeabi_f2d>
 8006d56:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7f9 fc11 	bl	8000588 <__aeabi_f2d>
 8006d66:	e9c7 0100 	strd	r0, r1, [r7]
 8006d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6e:	6a1e      	ldr	r6, [r3, #32]
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7f9 fc06 	bl	8000588 <__aeabi_f2d>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	468b      	mov	fp, r1
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7f9 fbfe 	bl	8000588 <__aeabi_f2d>
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4689      	mov	r9, r1
 8006d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7f9 fbf6 	bl	8000588 <__aeabi_f2d>
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	460d      	mov	r5, r1
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7f9 fbee 	bl	8000588 <__aeabi_f2d>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 8006db4:	e9cd 4530 	strd	r4, r5, [sp, #192]	; 0xc0
 8006db8:	e9cd 892e 	strd	r8, r9, [sp, #184]	; 0xb8
 8006dbc:	e9cd ab2c 	strd	sl, fp, [sp, #176]	; 0xb0
 8006dc0:	962a      	str	r6, [sp, #168]	; 0xa8
 8006dc2:	ed97 7b00 	vldr	d7, [r7]
 8006dc6:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8006dca:	ed97 7b02 	vldr	d7, [r7, #8]
 8006dce:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8006dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd4:	9224      	str	r2, [sp, #144]	; 0x90
 8006dd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8006dda:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8006dde:	ed97 7b06 	vldr	d7, [r7, #24]
 8006de2:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8006de6:	ed97 7b08 	vldr	d7, [r7, #32]
 8006dea:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8006dee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006df2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006df6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006dfa:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e00:	9318      	str	r3, [sp, #96]	; 0x60
 8006e02:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8006e06:	ed8d 9b14 	vstr	d9, [sp, #80]	; 0x50
 8006e0a:	ed8d ab12 	vstr	d10, [sp, #72]	; 0x48
 8006e0e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006e12:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006e16:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006e1a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006e1e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006e22:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006e26:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006e2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006e2e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8006e32:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006e36:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8006e3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e3e:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8006e42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e46:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8006e4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e4e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8006e52:	ed8d 7b00 	vstr	d7, [sp]
 8006e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e5a:	491b      	ldr	r1, [pc, #108]	; (8006ec8 <sdDataLogger+0x2bc>)
 8006e5c:	481b      	ldr	r0, [pc, #108]	; (8006ecc <sdDataLogger+0x2c0>)
 8006e5e:	f00a fc47 	bl	80116f0 <siprintf>
#endif
	fresult = f_printf(&fil, _aBuf);
 8006e62:	491a      	ldr	r1, [pc, #104]	; (8006ecc <sdDataLogger+0x2c0>)
 8006e64:	4815      	ldr	r0, [pc, #84]	; (8006ebc <sdDataLogger+0x2b0>)
 8006e66:	f009 fa51 	bl	801030c <f_printf>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <sdDataLogger+0x2b4>)
 8006e70:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);// SD CLOSE
 8006e72:	4812      	ldr	r0, [pc, #72]	; (8006ebc <sdDataLogger+0x2b0>)
 8006e74:	f009 f8f4 	bl	8010060 <f_close>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <sdDataLogger+0x2b4>)
 8006e7e:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2024;i++)
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e86:	e00a      	b.n	8006e9e <sdDataLogger+0x292>
		_aBuf[i] = 0 ;
 8006e88:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <sdDataLogger+0x2c0>)
 8006e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8e:	4413      	add	r3, r2
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2024;i++)
 8006e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e98:	3301      	adds	r3, #1
 8006e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ea2:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8006ea6:	dbef      	blt.n	8006e88 <sdDataLogger+0x27c>
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	37a4      	adds	r7, #164	; 0xa4
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	ecbd 8b06 	vpop	{d8-d10}
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	080179ec 	.word	0x080179ec
 8006ebc:	20002630 	.word	0x20002630
 8006ec0:	20003660 	.word	0x20003660
 8006ec4:	2000088c 	.word	0x2000088c
 8006ec8:	08017af4 	.word	0x08017af4
 8006ecc:	20000df8 	.word	0x20000df8

08006ed0 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <HAL_UART_RxCpltCallback+0x40>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d105      	bne.n	8006eec <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8006ee0:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <HAL_UART_RxCpltCallback+0x44>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <HAL_UART_RxCpltCallback+0x48>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <HAL_UART_RxCpltCallback+0x4c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d109      	bne.n	8006f08 <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <HAL_UART_RxCpltCallback+0x50>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8006efa:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <HAL_UART_RxCpltCallback+0x54>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2203      	movs	r2, #3
 8006f00:	4619      	mov	r1, r3
 8006f02:	4806      	ldr	r0, [pc, #24]	; (8006f1c <HAL_UART_RxCpltCallback+0x4c>)
 8006f04:	f005 f8b2 	bl	800c06c <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200004d8 	.word	0x200004d8
 8006f14:	20003674 	.word	0x20003674
 8006f18:	20003675 	.word	0x20003675
 8006f1c:	20000450 	.word	0x20000450
 8006f20:	20000848 	.word	0x20000848
 8006f24:	20000844 	.word	0x20000844

08006f28 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8006f30:	f240 228a 	movw	r2, #650	; 0x28a
 8006f34:	4903      	ldr	r1, [pc, #12]	; (8006f44 <UsrGpsL86Init+0x1c>)
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f005 f898 	bl	800c06c <HAL_UART_Receive_DMA>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	2000374c 	.word	0x2000374c

08006f48 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
    getRmc();
 8006f50:	f000 f83a 	bl	8006fc8 <getRmc>
    getGGA();
 8006f54:	f000 f94a 	bl	80071ec <getGGA>
    if (rmcValidFlag)
 8006f58:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <Usr_GpsL86GetValues+0x74>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8006f62:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <Usr_GpsL86GetValues+0x74>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8006f68:	f000 f8d2 	bl	8007110 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8006f74:	4b12      	ldr	r3, [pc, #72]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8006f7c:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8006f9c:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8006fa4:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <Usr_GpsL86GetValues+0x78>)
 8006fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 8006fac:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <Usr_GpsL86GetValues+0x7c>)
 8006fae:	f7ff ffbb 	bl	8006f28 <UsrGpsL86Init>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20003676 	.word	0x20003676
 8006fc0:	200046f4 	.word	0x200046f4
 8006fc4:	200004d8 	.word	0x200004d8

08006fc8 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af02      	add	r7, sp, #8

	        MsgIndex = 0;
 8006fce:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <getRmc+0x10c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8006fd4:	4940      	ldr	r1, [pc, #256]	; (80070d8 <getRmc+0x110>)
 8006fd6:	4841      	ldr	r0, [pc, #260]	; (80070dc <getRmc+0x114>)
 8006fd8:	f00a fc1b 	bl	8011812 <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8006fdc:	4940      	ldr	r1, [pc, #256]	; (80070e0 <getRmc+0x118>)
 8006fde:	483f      	ldr	r0, [pc, #252]	; (80070dc <getRmc+0x114>)
 8006fe0:	f00a fc1f 	bl	8011822 <strstr>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	4a3f      	ldr	r2, [pc, #252]	; (80070e4 <getRmc+0x11c>)
 8006fe8:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8006fea:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <getRmc+0x11c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b47      	cmp	r3, #71	; 0x47
 8006ff2:	d167      	bne.n	80070c4 <getRmc+0xfc>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8006ff4:	4b3b      	ldr	r3, [pc, #236]	; (80070e4 <getRmc+0x11c>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <getRmc+0x10c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	7811      	ldrb	r1, [r2, #0]
 8006ffe:	4a3a      	ldr	r2, [pc, #232]	; (80070e8 <getRmc+0x120>)
 8007000:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8007002:	4b34      	ldr	r3, [pc, #208]	; (80070d4 <getRmc+0x10c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	4a32      	ldr	r2, [pc, #200]	; (80070d4 <getRmc+0x10c>)
 800700a:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 800700c:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <getRmc+0x11c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a30      	ldr	r2, [pc, #192]	; (80070d4 <getRmc+0x10c>)
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	441a      	add	r2, r3
 8007016:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <getRmc+0x11c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	7812      	ldrb	r2, [r2, #0]
 800701c:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <getRmc+0x11c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b0a      	cmp	r3, #10
 8007026:	d003      	beq.n	8007030 <getRmc+0x68>
 8007028:	4b2a      	ldr	r3, [pc, #168]	; (80070d4 <getRmc+0x10c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b5a      	cmp	r3, #90	; 0x5a
 800702e:	dde1      	ble.n	8006ff4 <getRmc+0x2c>
	                {
	                    MsgIndex = 0;
 8007030:	4b28      	ldr	r3, [pc, #160]	; (80070d4 <getRmc+0x10c>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

	                    for (int i = 0; i < 100; i++)
 8007036:	2300      	movs	r3, #0
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	e014      	b.n	8007066 <getRmc+0x9e>
	                    {
	                        if (gpsPayload[i] == 'N')
 800703c:	4a2a      	ldr	r2, [pc, #168]	; (80070e8 <getRmc+0x120>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b4e      	cmp	r3, #78	; 0x4e
 8007046:	d102      	bne.n	800704e <getRmc+0x86>
	                            f_northFlag = true;
 8007048:	4b28      	ldr	r3, [pc, #160]	; (80070ec <getRmc+0x124>)
 800704a:	2201      	movs	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 800704e:	4a26      	ldr	r2, [pc, #152]	; (80070e8 <getRmc+0x120>)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b45      	cmp	r3, #69	; 0x45
 8007058:	d102      	bne.n	8007060 <getRmc+0x98>
	                            f_eastFlag = true;
 800705a:	4b25      	ldr	r3, [pc, #148]	; (80070f0 <getRmc+0x128>)
 800705c:	2201      	movs	r2, #1
 800705e:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3301      	adds	r3, #1
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b63      	cmp	r3, #99	; 0x63
 800706a:	dde7      	ble.n	800703c <getRmc+0x74>
	                    }
	                    if (strlen(gpsPayload) > 10)
 800706c:	481e      	ldr	r0, [pc, #120]	; (80070e8 <getRmc+0x120>)
 800706e:	f7f9 f8cf 	bl	8000210 <strlen>
 8007072:	4603      	mov	r3, r0
 8007074:	2b0a      	cmp	r3, #10
 8007076:	d91f      	bls.n	80070b8 <getRmc+0xf0>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8007078:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <getRmc+0x128>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01f      	beq.n	80070c2 <getRmc+0xfa>
 8007082:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <getRmc+0x124>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <getRmc+0xfa>
	                        {
	                            f_northFlag = false;
 800708c:	4b17      	ldr	r3, [pc, #92]	; (80070ec <getRmc+0x124>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <getRmc+0x128>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8007098:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <getRmc+0x12c>)
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <getRmc+0x130>)
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	4b16      	ldr	r3, [pc, #88]	; (80070fc <getRmc+0x134>)
 80070a2:	4a17      	ldr	r2, [pc, #92]	; (8007100 <getRmc+0x138>)
 80070a4:	4917      	ldr	r1, [pc, #92]	; (8007104 <getRmc+0x13c>)
 80070a6:	4810      	ldr	r0, [pc, #64]	; (80070e8 <getRmc+0x120>)
 80070a8:	f00a fb42 	bl	8011730 <siscanf>
	                            rmcValidFlag = true;
 80070ac:	4b16      	ldr	r3, [pc, #88]	; (8007108 <getRmc+0x140>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 80070b2:	f000 f82d 	bl	8007110 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 80070b6:	e004      	b.n	80070c2 <getRmc+0xfa>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80070b8:	2264      	movs	r2, #100	; 0x64
 80070ba:	2100      	movs	r1, #0
 80070bc:	480a      	ldr	r0, [pc, #40]	; (80070e8 <getRmc+0x120>)
 80070be:	f009 fc8f 	bl	80109e0 <memset>
	                    break;
 80070c2:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <getRmc+0x144>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]



}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	2000367c 	.word	0x2000367c
 80070d8:	2000374c 	.word	0x2000374c
 80070dc:	20003f1c 	.word	0x20003f1c
 80070e0:	08017b60 	.word	0x08017b60
 80070e4:	20003680 	.word	0x20003680
 80070e8:	20003684 	.word	0x20003684
 80070ec:	20003677 	.word	0x20003677
 80070f0:	20003678 	.word	0x20003678
 80070f4:	200046fc 	.word	0x200046fc
 80070f8:	200046f0 	.word	0x200046f0
 80070fc:	200046ec 	.word	0x200046ec
 8007100:	20004700 	.word	0x20004700
 8007104:	08017b68 	.word	0x08017b68
 8007108:	20003676 	.word	0x20003676
 800710c:	20003674 	.word	0x20003674

08007110 <formatLatLong>:

_io void formatLatLong(void)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8007116:	4b30      	ldr	r3, [pc, #192]	; (80071d8 <formatLatLong+0xc8>)
 8007118:	edd3 7a00 	vldr	s15, [r3]
 800711c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007120:	ee17 1a90 	vmov	r1, s15
 8007124:	4b2d      	ldr	r3, [pc, #180]	; (80071dc <formatLatLong+0xcc>)
 8007126:	fb83 2301 	smull	r2, r3, r3, r1
 800712a:	115a      	asrs	r2, r3, #5
 800712c:	17cb      	asrs	r3, r1, #31
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8007132:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <formatLatLong+0xc8>)
 8007134:	ed93 7a00 	vldr	s14, [r3]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2264      	movs	r2, #100	; 0x64
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800714c:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800715a:	edd7 6a00 	vldr	s13, [r7]
 800715e:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80071e0 <formatLatLong+0xd0>
 8007162:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800716a:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <formatLatLong+0xd4>)
 800716c:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8007170:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <formatLatLong+0xd8>)
 8007172:	edd3 7a00 	vldr	s15, [r3]
 8007176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800717a:	ee17 1a90 	vmov	r1, s15
 800717e:	4b17      	ldr	r3, [pc, #92]	; (80071dc <formatLatLong+0xcc>)
 8007180:	fb83 2301 	smull	r2, r3, r3, r1
 8007184:	115a      	asrs	r2, r3, #5
 8007186:	17cb      	asrs	r3, r1, #31
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 800718c:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <formatLatLong+0xd8>)
 800718e:	ed93 7a00 	vldr	s14, [r3]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2264      	movs	r2, #100	; 0x64
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071a6:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071b4:	edd7 6a00 	vldr	s13, [r7]
 80071b8:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80071e0 <formatLatLong+0xd0>
 80071bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80071c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <formatLatLong+0xd4>)
 80071c6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	200046ec 	.word	0x200046ec
 80071dc:	51eb851f 	.word	0x51eb851f
 80071e0:	42700000 	.word	0x42700000
 80071e4:	200046f4 	.word	0x200046f4
 80071e8:	200046f0 	.word	0x200046f0

080071ec <getGGA>:

_io void getGGA(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af06      	add	r7, sp, #24

        MsgIndex = 0;
 80071f2:	4b30      	ldr	r3, [pc, #192]	; (80072b4 <getGGA+0xc8>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 80071f8:	492f      	ldr	r1, [pc, #188]	; (80072b8 <getGGA+0xcc>)
 80071fa:	4830      	ldr	r0, [pc, #192]	; (80072bc <getGGA+0xd0>)
 80071fc:	f00a fb11 	bl	8011822 <strstr>
 8007200:	4603      	mov	r3, r0
 8007202:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <getGGA+0xd4>)
 8007204:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8007206:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <getGGA+0xd4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b47      	cmp	r3, #71	; 0x47
 800720e:	d14a      	bne.n	80072a6 <getGGA+0xba>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8007210:	4b2b      	ldr	r3, [pc, #172]	; (80072c0 <getGGA+0xd4>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <getGGA+0xc8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	7811      	ldrb	r1, [r2, #0]
 800721a:	4a2a      	ldr	r2, [pc, #168]	; (80072c4 <getGGA+0xd8>)
 800721c:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 800721e:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <getGGA+0xc8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a23      	ldr	r2, [pc, #140]	; (80072b4 <getGGA+0xc8>)
 8007226:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8007228:	4b25      	ldr	r3, [pc, #148]	; (80072c0 <getGGA+0xd4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <getGGA+0xc8>)
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	441a      	add	r2, r3
 8007232:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <getGGA+0xd4>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800723a:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <getGGA+0xd4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b0a      	cmp	r3, #10
 8007242:	d003      	beq.n	800724c <getGGA+0x60>
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <getGGA+0xc8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b5a      	cmp	r3, #90	; 0x5a
 800724a:	dde1      	ble.n	8007210 <getGGA+0x24>
                {
                    MsgIndex = 0;
 800724c:	4b19      	ldr	r3, [pc, #100]	; (80072b4 <getGGA+0xc8>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8007252:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007256:	2100      	movs	r1, #0
 8007258:	4818      	ldr	r0, [pc, #96]	; (80072bc <getGGA+0xd0>)
 800725a:	f009 fbc1 	bl	80109e0 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 800725e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007262:	2100      	movs	r1, #0
 8007264:	4818      	ldr	r0, [pc, #96]	; (80072c8 <getGGA+0xdc>)
 8007266:	f009 fbbb 	bl	80109e0 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 800726a:	4816      	ldr	r0, [pc, #88]	; (80072c4 <getGGA+0xd8>)
 800726c:	f7f8 ffd0 	bl	8000210 <strlen>
 8007270:	4603      	mov	r3, r0
 8007272:	2b0a      	cmp	r3, #10
 8007274:	d912      	bls.n	800729c <getGGA+0xb0>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8007276:	4b15      	ldr	r3, [pc, #84]	; (80072cc <getGGA+0xe0>)
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <getGGA+0xe4>)
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <getGGA+0xe8>)
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <getGGA+0xec>)
 8007284:	9302      	str	r3, [sp, #8]
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <getGGA+0xf0>)
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <getGGA+0xf4>)
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <getGGA+0xf8>)
 8007290:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <getGGA+0xfc>)
 8007292:	4916      	ldr	r1, [pc, #88]	; (80072ec <getGGA+0x100>)
 8007294:	480b      	ldr	r0, [pc, #44]	; (80072c4 <getGGA+0xd8>)
 8007296:	f00a fa4b 	bl	8011730 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 800729a:	e004      	b.n	80072a6 <getGGA+0xba>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 800729c:	2264      	movs	r2, #100	; 0x64
 800729e:	2100      	movs	r1, #0
 80072a0:	4813      	ldr	r0, [pc, #76]	; (80072f0 <getGGA+0x104>)
 80072a2:	f009 fb9d 	bl	80109e0 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 80072a6:	4b13      	ldr	r3, [pc, #76]	; (80072f4 <getGGA+0x108>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);

}
 80072ac:	bf00      	nop
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	2000367c 	.word	0x2000367c
 80072b8:	08017b84 	.word	0x08017b84
 80072bc:	20003f1c 	.word	0x20003f1c
 80072c0:	20003680 	.word	0x20003680
 80072c4:	200036e8 	.word	0x200036e8
 80072c8:	2000374c 	.word	0x2000374c
 80072cc:	20004720 	.word	0x20004720
 80072d0:	2000471c 	.word	0x2000471c
 80072d4:	20004718 	.word	0x20004718
 80072d8:	20004714 	.word	0x20004714
 80072dc:	20004710 	.word	0x20004710
 80072e0:	2000470c 	.word	0x2000470c
 80072e4:	20004708 	.word	0x20004708
 80072e8:	20004704 	.word	0x20004704
 80072ec:	08017b8c 	.word	0x08017b8c
 80072f0:	20003684 	.word	0x20003684
 80072f4:	20003675 	.word	0x20003675

080072f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80072f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80072fc:	480d      	ldr	r0, [pc, #52]	; (8007334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80072fe:	490e      	ldr	r1, [pc, #56]	; (8007338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007300:	4a0e      	ldr	r2, [pc, #56]	; (800733c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007304:	e002      	b.n	800730c <LoopCopyDataInit>

08007306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800730a:	3304      	adds	r3, #4

0800730c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800730c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800730e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007310:	d3f9      	bcc.n	8007306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007312:	4a0b      	ldr	r2, [pc, #44]	; (8007340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007314:	4c0b      	ldr	r4, [pc, #44]	; (8007344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007318:	e001      	b.n	800731e <LoopFillZerobss>

0800731a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800731a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800731c:	3204      	adds	r2, #4

0800731e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800731e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007320:	d3fb      	bcc.n	800731a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007322:	f7ff fb59 	bl	80069d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007326:	f009 fb37 	bl	8010998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800732a:	f7fd f80d 	bl	8004348 <main>
  bx  lr    
 800732e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007338:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800733c:	080185d8 	.word	0x080185d8
  ldr r2, =_sbss
 8007340:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8007344:	20004974 	.word	0x20004974

08007348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007348:	e7fe      	b.n	8007348 <ADC_IRQHandler>
	...

0800734c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <HAL_Init+0x40>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a0d      	ldr	r2, [pc, #52]	; (800738c <HAL_Init+0x40>)
 8007356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800735a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_Init+0x40>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0a      	ldr	r2, [pc, #40]	; (800738c <HAL_Init+0x40>)
 8007362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007368:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_Init+0x40>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a07      	ldr	r2, [pc, #28]	; (800738c <HAL_Init+0x40>)
 800736e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007374:	2003      	movs	r0, #3
 8007376:	f000 fd83 	bl	8007e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800737a:	200f      	movs	r0, #15
 800737c:	f000 f808 	bl	8007390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007380:	f7fe fc90 	bl	8005ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40023c00 	.word	0x40023c00

08007390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007398:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <HAL_InitTick+0x54>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <HAL_InitTick+0x58>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	4619      	mov	r1, r3
 80073a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fda9 	bl	8007f06 <HAL_SYSTICK_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e00e      	b.n	80073dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d80a      	bhi.n	80073da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073c4:	2200      	movs	r2, #0
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	f000 fd63 	bl	8007e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073d0:	4a06      	ldr	r2, [pc, #24]	; (80073ec <HAL_InitTick+0x5c>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e000      	b.n	80073dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	20000014 	.word	0x20000014
 80073ec:	20000010 	.word	0x20000010

080073f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <HAL_IncTick+0x20>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <HAL_IncTick+0x24>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4413      	add	r3, r2
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <HAL_IncTick+0x24>)
 8007402:	6013      	str	r3, [r2, #0]
}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	20000014 	.word	0x20000014
 8007414:	20004724 	.word	0x20004724

08007418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return uwTick;
 800741c:	4b03      	ldr	r3, [pc, #12]	; (800742c <HAL_GetTick+0x14>)
 800741e:	681b      	ldr	r3, [r3, #0]
}
 8007420:	4618      	mov	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	20004724 	.word	0x20004724

08007430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007438:	f7ff ffee 	bl	8007418 <HAL_GetTick>
 800743c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d005      	beq.n	8007456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800744a:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <HAL_Delay+0x44>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007456:	bf00      	nop
 8007458:	f7ff ffde 	bl	8007418 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	429a      	cmp	r2, r3
 8007466:	d8f7      	bhi.n	8007458 <HAL_Delay+0x28>
  {
  }
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000014 	.word	0x20000014

08007478 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e033      	b.n	80074f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fe fc2c 	bl	8005cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d118      	bne.n	80074e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80074be:	f023 0302 	bic.w	r3, r3, #2
 80074c2:	f043 0202 	orr.w	r2, r3, #2
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fae8 	bl	8007aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40
 80074e6:	e001      	b.n	80074ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_ADC_Start+0x1a>
 8007516:	2302      	movs	r3, #2
 8007518:	e0b2      	b.n	8007680 <HAL_ADC_Start+0x180>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b01      	cmp	r3, #1
 800752e:	d018      	beq.n	8007562 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007540:	4b52      	ldr	r3, [pc, #328]	; (800768c <HAL_ADC_Start+0x18c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a52      	ldr	r2, [pc, #328]	; (8007690 <HAL_ADC_Start+0x190>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	0c9a      	lsrs	r2, r3, #18
 800754c:	4613      	mov	r3, r2
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	4413      	add	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007554:	e002      	b.n	800755c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	3b01      	subs	r3, #1
 800755a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f9      	bne.n	8007556 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b01      	cmp	r3, #1
 800756e:	d17a      	bne.n	8007666 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800759a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d106      	bne.n	80075be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b4:	f023 0206 	bic.w	r2, r3, #6
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	645a      	str	r2, [r3, #68]	; 0x44
 80075bc:	e002      	b.n	80075c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075cc:	4b31      	ldr	r3, [pc, #196]	; (8007694 <HAL_ADC_Start+0x194>)
 80075ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80075d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d12a      	bne.n	800763c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a2b      	ldr	r2, [pc, #172]	; (8007698 <HAL_ADC_Start+0x198>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d015      	beq.n	800761c <HAL_ADC_Start+0x11c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a29      	ldr	r2, [pc, #164]	; (800769c <HAL_ADC_Start+0x19c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d105      	bne.n	8007606 <HAL_ADC_Start+0x106>
 80075fa:	4b26      	ldr	r3, [pc, #152]	; (8007694 <HAL_ADC_Start+0x194>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a25      	ldr	r2, [pc, #148]	; (80076a0 <HAL_ADC_Start+0x1a0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d136      	bne.n	800767e <HAL_ADC_Start+0x17e>
 8007610:	4b20      	ldr	r3, [pc, #128]	; (8007694 <HAL_ADC_Start+0x194>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d130      	bne.n	800767e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d129      	bne.n	800767e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007638:	609a      	str	r2, [r3, #8]
 800763a:	e020      	b.n	800767e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a15      	ldr	r2, [pc, #84]	; (8007698 <HAL_ADC_Start+0x198>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d11b      	bne.n	800767e <HAL_ADC_Start+0x17e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d114      	bne.n	800767e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	e00b      	b.n	800767e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f043 0210 	orr.w	r2, r3, #16
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	f043 0201 	orr.w	r2, r3, #1
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	2000000c 	.word	0x2000000c
 8007690:	431bde83 	.word	0x431bde83
 8007694:	40012300 	.word	0x40012300
 8007698:	40012000 	.word	0x40012000
 800769c:	40012100 	.word	0x40012100
 80076a0:	40012200 	.word	0x40012200

080076a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_ADC_Stop+0x16>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e021      	b.n	80076fe <HAL_ADC_Stop+0x5a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d109      	bne.n	80076f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	f043 0201 	orr.w	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007726:	d113      	bne.n	8007750 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007736:	d10b      	bne.n	8007750 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	f043 0220 	orr.w	r2, r3, #32
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e063      	b.n	8007818 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007750:	f7ff fe62 	bl	8007418 <HAL_GetTick>
 8007754:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007756:	e021      	b.n	800779c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d01d      	beq.n	800779c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <HAL_ADC_PollForConversion+0x6c>
 8007766:	f7ff fe57 	bl	8007418 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d212      	bcs.n	800779c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b02      	cmp	r3, #2
 8007782:	d00b      	beq.n	800779c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f043 0204 	orr.w	r2, r3, #4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e03d      	b.n	8007818 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d1d6      	bne.n	8007758 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f06f 0212 	mvn.w	r2, #18
 80077b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d123      	bne.n	8007816 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d11f      	bne.n	8007816 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d006      	beq.n	80077f2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d111      	bne.n	8007816 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_ADC_ConfigChannel+0x1c>
 8007854:	2302      	movs	r3, #2
 8007856:	e113      	b.n	8007a80 <HAL_ADC_ConfigChannel+0x244>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b09      	cmp	r3, #9
 8007866:	d925      	bls.n	80078b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68d9      	ldr	r1, [r3, #12]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	4613      	mov	r3, r2
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	4413      	add	r3, r2
 800787c:	3b1e      	subs	r3, #30
 800787e:	2207      	movs	r2, #7
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	43da      	mvns	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	400a      	ands	r2, r1
 800788c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68d9      	ldr	r1, [r3, #12]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	4618      	mov	r0, r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4403      	add	r3, r0
 80078a6:	3b1e      	subs	r3, #30
 80078a8:	409a      	lsls	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	e022      	b.n	80078fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6919      	ldr	r1, [r3, #16]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	4613      	mov	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4413      	add	r3, r2
 80078c8:	2207      	movs	r2, #7
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	43da      	mvns	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	400a      	ands	r2, r1
 80078d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6919      	ldr	r1, [r3, #16]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4618      	mov	r0, r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4403      	add	r3, r0
 80078f0:	409a      	lsls	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d824      	bhi.n	800794c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	3b05      	subs	r3, #5
 8007914:	221f      	movs	r2, #31
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	43da      	mvns	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	400a      	ands	r2, r1
 8007922:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	4618      	mov	r0, r3
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	3b05      	subs	r3, #5
 800793e:	fa00 f203 	lsl.w	r2, r0, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	635a      	str	r2, [r3, #52]	; 0x34
 800794a:	e04c      	b.n	80079e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b0c      	cmp	r3, #12
 8007952:	d824      	bhi.n	800799e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	3b23      	subs	r3, #35	; 0x23
 8007966:	221f      	movs	r2, #31
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	43da      	mvns	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	400a      	ands	r2, r1
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	4618      	mov	r0, r3
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	3b23      	subs	r3, #35	; 0x23
 8007990:	fa00 f203 	lsl.w	r2, r0, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
 800799c:	e023      	b.n	80079e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	3b41      	subs	r3, #65	; 0x41
 80079b0:	221f      	movs	r2, #31
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43da      	mvns	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	400a      	ands	r2, r1
 80079be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4618      	mov	r0, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	3b41      	subs	r3, #65	; 0x41
 80079da:	fa00 f203 	lsl.w	r2, r0, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80079e6:	4b29      	ldr	r3, [pc, #164]	; (8007a8c <HAL_ADC_ConfigChannel+0x250>)
 80079e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <HAL_ADC_ConfigChannel+0x254>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d10f      	bne.n	8007a14 <HAL_ADC_ConfigChannel+0x1d8>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b12      	cmp	r3, #18
 80079fa:	d10b      	bne.n	8007a14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <HAL_ADC_ConfigChannel+0x254>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d12b      	bne.n	8007a76 <HAL_ADC_ConfigChannel+0x23a>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_ADC_ConfigChannel+0x258>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <HAL_ADC_ConfigChannel+0x1f4>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b11      	cmp	r3, #17
 8007a2e:	d122      	bne.n	8007a76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a11      	ldr	r2, [pc, #68]	; (8007a94 <HAL_ADC_ConfigChannel+0x258>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d111      	bne.n	8007a76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <HAL_ADC_ConfigChannel+0x25c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <HAL_ADC_ConfigChannel+0x260>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	0c9a      	lsrs	r2, r3, #18
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a68:	e002      	b.n	8007a70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f9      	bne.n	8007a6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	40012300 	.word	0x40012300
 8007a90:	40012000 	.word	0x40012000
 8007a94:	10000012 	.word	0x10000012
 8007a98:	2000000c 	.word	0x2000000c
 8007a9c:	431bde83 	.word	0x431bde83

08007aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007aa8:	4b79      	ldr	r3, [pc, #484]	; (8007c90 <ADC_Init+0x1f0>)
 8007aaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6859      	ldr	r1, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	021a      	lsls	r2, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6859      	ldr	r1, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6899      	ldr	r1, [r3, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	4a58      	ldr	r2, [pc, #352]	; (8007c94 <ADC_Init+0x1f4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d022      	beq.n	8007b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6899      	ldr	r1, [r3, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6899      	ldr	r1, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	609a      	str	r2, [r3, #8]
 8007b7c:	e00f      	b.n	8007b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0202 	bic.w	r2, r2, #2
 8007bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6899      	ldr	r1, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	7e1b      	ldrb	r3, [r3, #24]
 8007bb8:	005a      	lsls	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01b      	beq.n	8007c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6859      	ldr	r1, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	035a      	lsls	r2, r3, #13
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
 8007c02:	e007      	b.n	8007c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	051a      	lsls	r2, r3, #20
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6899      	ldr	r1, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c56:	025a      	lsls	r2, r3, #9
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6899      	ldr	r1, [r3, #8]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	029a      	lsls	r2, r3, #10
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	40012300 	.word	0x40012300
 8007c94:	0f000001 	.word	0x0f000001

08007c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <__NVIC_SetPriorityGrouping+0x44>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007cca:	4a04      	ldr	r2, [pc, #16]	; (8007cdc <__NVIC_SetPriorityGrouping+0x44>)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	60d3      	str	r3, [r2, #12]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	e000ed00 	.word	0xe000ed00

08007ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	0a1b      	lsrs	r3, r3, #8
 8007cea:	f003 0307 	and.w	r3, r3, #7
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	e000ed00 	.word	0xe000ed00

08007cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	db0b      	blt.n	8007d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	f003 021f 	and.w	r2, r3, #31
 8007d14:	4907      	ldr	r1, [pc, #28]	; (8007d34 <__NVIC_EnableIRQ+0x38>)
 8007d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	e000e100 	.word	0xe000e100

08007d38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	db12      	blt.n	8007d70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	f003 021f 	and.w	r2, r3, #31
 8007d50:	490a      	ldr	r1, [pc, #40]	; (8007d7c <__NVIC_DisableIRQ+0x44>)
 8007d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	2001      	movs	r0, #1
 8007d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8007d5e:	3320      	adds	r3, #32
 8007d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007d64:	f3bf 8f4f 	dsb	sy
}
 8007d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007d6a:	f3bf 8f6f 	isb	sy
}
 8007d6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	e000e100 	.word	0xe000e100

08007d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	db0a      	blt.n	8007daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	490c      	ldr	r1, [pc, #48]	; (8007dcc <__NVIC_SetPriority+0x4c>)
 8007d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d9e:	0112      	lsls	r2, r2, #4
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	440b      	add	r3, r1
 8007da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007da8:	e00a      	b.n	8007dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <__NVIC_SetPriority+0x50>)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	3b04      	subs	r3, #4
 8007db8:	0112      	lsls	r2, r2, #4
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	761a      	strb	r2, [r3, #24]
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	e000e100 	.word	0xe000e100
 8007dd0:	e000ed00 	.word	0xe000ed00

08007dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b089      	sub	sp, #36	; 0x24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f1c3 0307 	rsb	r3, r3, #7
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	bf28      	it	cs
 8007df2:	2304      	movcs	r3, #4
 8007df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	2b06      	cmp	r3, #6
 8007dfc:	d902      	bls.n	8007e04 <NVIC_EncodePriority+0x30>
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	3b03      	subs	r3, #3
 8007e02:	e000      	b.n	8007e06 <NVIC_EncodePriority+0x32>
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	43da      	mvns	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	401a      	ands	r2, r3
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	fa01 f303 	lsl.w	r3, r1, r3
 8007e26:	43d9      	mvns	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e2c:	4313      	orrs	r3, r2
         );
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3724      	adds	r7, #36	; 0x24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e4c:	d301      	bcc.n	8007e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e00f      	b.n	8007e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e52:	4a0a      	ldr	r2, [pc, #40]	; (8007e7c <SysTick_Config+0x40>)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e5a:	210f      	movs	r1, #15
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	f7ff ff8e 	bl	8007d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <SysTick_Config+0x40>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e6a:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <SysTick_Config+0x40>)
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	e000e010 	.word	0xe000e010

08007e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff05 	bl	8007c98 <__NVIC_SetPriorityGrouping>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b086      	sub	sp, #24
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ea8:	f7ff ff1a 	bl	8007ce0 <__NVIC_GetPriorityGrouping>
 8007eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	6978      	ldr	r0, [r7, #20]
 8007eb4:	f7ff ff8e 	bl	8007dd4 <NVIC_EncodePriority>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff ff5d 	bl	8007d80 <__NVIC_SetPriority>
}
 8007ec6:	bf00      	nop
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff ff0d 	bl	8007cfc <__NVIC_EnableIRQ>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff ff1d 	bl	8007d38 <__NVIC_DisableIRQ>
}
 8007efe:	bf00      	nop
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff ff94 	bl	8007e3c <SysTick_Config>
 8007f14:	4603      	mov	r3, r0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f2c:	f7ff fa74 	bl	8007418 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e099      	b.n	8008070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0201 	bic.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f5c:	e00f      	b.n	8007f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f5e:	f7ff fa5b 	bl	8007418 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b05      	cmp	r3, #5
 8007f6a:	d908      	bls.n	8007f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2203      	movs	r2, #3
 8007f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e078      	b.n	8008070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e8      	bne.n	8007f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	4b38      	ldr	r3, [pc, #224]	; (8008078 <HAL_DMA_Init+0x158>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d107      	bne.n	8007fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	4313      	orrs	r3, r2
 8008008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	2b04      	cmp	r3, #4
 8008010:	d117      	bne.n	8008042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00e      	beq.n	8008042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb6d 	bl	8008704 <DMA_CheckFifoParam>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d008      	beq.n	8008042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2240      	movs	r2, #64	; 0x40
 8008034:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800803e:	2301      	movs	r3, #1
 8008040:	e016      	b.n	8008070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fb24 	bl	8008698 <DMA_CalcBaseAndBitshift>
 8008050:	4603      	mov	r3, r0
 8008052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008058:	223f      	movs	r2, #63	; 0x3f
 800805a:	409a      	lsls	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	f010803f 	.word	0xf010803f

0800807c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e050      	b.n	8008130 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d101      	bne.n	800809e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800809a:	2302      	movs	r3, #2
 800809c:	e048      	b.n	8008130 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2221      	movs	r2, #33	; 0x21
 80080dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fada 	bl	8008698 <DMA_CalcBaseAndBitshift>
 80080e4:	4603      	mov	r3, r0
 80080e6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008110:	223f      	movs	r2, #63	; 0x3f
 8008112:	409a      	lsls	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_DMA_Start_IT+0x26>
 800815a:	2302      	movs	r3, #2
 800815c:	e040      	b.n	80081e0 <HAL_DMA_Start_IT+0xa8>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	d12f      	bne.n	80081d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fa58 	bl	800863c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008190:	223f      	movs	r2, #63	; 0x3f
 8008192:	409a      	lsls	r2, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0216 	orr.w	r2, r2, #22
 80081a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e005      	b.n	80081de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80081da:	2302      	movs	r3, #2
 80081dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80081f6:	f7ff f90f 	bl	8007418 <HAL_GetTick>
 80081fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d008      	beq.n	800821a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e052      	b.n	80082c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0216 	bic.w	r2, r2, #22
 8008228:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008238:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <HAL_DMA_Abort+0x62>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0208 	bic.w	r2, r2, #8
 8008258:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800826a:	e013      	b.n	8008294 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800826c:	f7ff f8d4 	bl	8007418 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b05      	cmp	r3, #5
 8008278:	d90c      	bls.n	8008294 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2203      	movs	r2, #3
 8008284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e015      	b.n	80082c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e4      	bne.n	800826c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a6:	223f      	movs	r2, #63	; 0x3f
 80082a8:	409a      	lsls	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d004      	beq.n	80082e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e00c      	b.n	8008300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2205      	movs	r2, #5
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008318:	4b8e      	ldr	r3, [pc, #568]	; (8008554 <HAL_DMA_IRQHandler+0x248>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a8e      	ldr	r2, [pc, #568]	; (8008558 <HAL_DMA_IRQHandler+0x24c>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0a9b      	lsrs	r3, r3, #10
 8008324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008336:	2208      	movs	r2, #8
 8008338:	409a      	lsls	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01a      	beq.n	8008378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d013      	beq.n	8008378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0204 	bic.w	r2, r2, #4
 800835e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008364:	2208      	movs	r2, #8
 8008366:	409a      	lsls	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008370:	f043 0201 	orr.w	r2, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837c:	2201      	movs	r2, #1
 800837e:	409a      	lsls	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d012      	beq.n	80083ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	f043 0202 	orr.w	r2, r3, #2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	2204      	movs	r2, #4
 80083b4:	409a      	lsls	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d012      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	2204      	movs	r2, #4
 80083d2:	409a      	lsls	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	f043 0204 	orr.w	r2, r3, #4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e8:	2210      	movs	r2, #16
 80083ea:	409a      	lsls	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4013      	ands	r3, r2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d043      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d03c      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008406:	2210      	movs	r2, #16
 8008408:	409a      	lsls	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d018      	beq.n	800844e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d108      	bne.n	800843c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d024      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
 800843a:	e01f      	b.n	800847c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01b      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	e016      	b.n	800847c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008458:	2b00      	cmp	r3, #0
 800845a:	d107      	bne.n	800846c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0208 	bic.w	r2, r2, #8
 800846a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008480:	2220      	movs	r2, #32
 8008482:	409a      	lsls	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4013      	ands	r3, r2
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 808f 	beq.w	80085ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8087 	beq.w	80085ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a2:	2220      	movs	r2, #32
 80084a4:	409a      	lsls	r2, r3
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d136      	bne.n	8008524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0216 	bic.w	r2, r2, #22
 80084c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <HAL_DMA_IRQHandler+0x1da>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0208 	bic.w	r2, r2, #8
 80084f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fa:	223f      	movs	r2, #63	; 0x3f
 80084fc:	409a      	lsls	r2, r3
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	2b00      	cmp	r3, #0
 8008518:	d07e      	beq.n	8008618 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
        }
        return;
 8008522:	e079      	b.n	8008618 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01d      	beq.n	800856e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008544:	2b00      	cmp	r3, #0
 8008546:	d031      	beq.n	80085ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	e02c      	b.n	80085ac <HAL_DMA_IRQHandler+0x2a0>
 8008552:	bf00      	nop
 8008554:	2000000c 	.word	0x2000000c
 8008558:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d023      	beq.n	80085ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
 800856c:	e01e      	b.n	80085ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10f      	bne.n	800859c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0210 	bic.w	r2, r2, #16
 800858a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d032      	beq.n	800861a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d022      	beq.n	8008606 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2205      	movs	r2, #5
 80085c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0201 	bic.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3301      	adds	r3, #1
 80085dc:	60bb      	str	r3, [r7, #8]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d307      	bcc.n	80085f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f2      	bne.n	80085d8 <HAL_DMA_IRQHandler+0x2cc>
 80085f2:	e000      	b.n	80085f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80085f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
 8008616:	e000      	b.n	800861a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008618:	bf00      	nop
    }
  }
}
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800862e:	b2db      	uxtb	r3, r3
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d108      	bne.n	800867c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800867a:	e007      	b.n	800868c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	60da      	str	r2, [r3, #12]
}
 800868c:	bf00      	nop
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	3b10      	subs	r3, #16
 80086a8:	4a14      	ldr	r2, [pc, #80]	; (80086fc <DMA_CalcBaseAndBitshift+0x64>)
 80086aa:	fba2 2303 	umull	r2, r3, r2, r3
 80086ae:	091b      	lsrs	r3, r3, #4
 80086b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086b2:	4a13      	ldr	r2, [pc, #76]	; (8008700 <DMA_CalcBaseAndBitshift+0x68>)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d909      	bls.n	80086da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	1d1a      	adds	r2, r3, #4
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	659a      	str	r2, [r3, #88]	; 0x58
 80086d8:	e007      	b.n	80086ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	aaaaaaab 	.word	0xaaaaaaab
 8008700:	08017c20 	.word	0x08017c20

08008704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d11f      	bne.n	800875e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d856      	bhi.n	80087d2 <DMA_CheckFifoParam+0xce>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <DMA_CheckFifoParam+0x28>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	0800873d 	.word	0x0800873d
 8008730:	0800874f 	.word	0x0800874f
 8008734:	0800873d 	.word	0x0800873d
 8008738:	080087d3 	.word	0x080087d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d046      	beq.n	80087d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800874c:	e043      	b.n	80087d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008756:	d140      	bne.n	80087da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800875c:	e03d      	b.n	80087da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008766:	d121      	bne.n	80087ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b03      	cmp	r3, #3
 800876c:	d837      	bhi.n	80087de <DMA_CheckFifoParam+0xda>
 800876e:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <DMA_CheckFifoParam+0x70>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	08008785 	.word	0x08008785
 8008778:	0800878b 	.word	0x0800878b
 800877c:	08008785 	.word	0x08008785
 8008780:	0800879d 	.word	0x0800879d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
      break;
 8008788:	e030      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d025      	beq.n	80087e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800879a:	e022      	b.n	80087e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087a4:	d11f      	bne.n	80087e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087aa:	e01c      	b.n	80087e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d903      	bls.n	80087ba <DMA_CheckFifoParam+0xb6>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d003      	beq.n	80087c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087b8:	e018      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
      break;
 80087be:	e015      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00e      	beq.n	80087ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
      break;
 80087d0:	e00b      	b.n	80087ea <DMA_CheckFifoParam+0xe6>
      break;
 80087d2:	bf00      	nop
 80087d4:	e00a      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      break;
 80087d6:	bf00      	nop
 80087d8:	e008      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      break;
 80087da:	bf00      	nop
 80087dc:	e006      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      break;
 80087de:	bf00      	nop
 80087e0:	e004      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      break;
 80087e2:	bf00      	nop
 80087e4:	e002      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      break;   
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
      break;
 80087ea:	bf00      	nop
    }
  } 
  
  return status; 
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop

080087fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b089      	sub	sp, #36	; 0x24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800880a:	2300      	movs	r3, #0
 800880c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800880e:	2300      	movs	r3, #0
 8008810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e165      	b.n	8008ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008818:	2201      	movs	r2, #1
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4013      	ands	r3, r2
 800882a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	429a      	cmp	r2, r3
 8008832:	f040 8154 	bne.w	8008ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b01      	cmp	r3, #1
 8008840:	d005      	beq.n	800884e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800884a:	2b02      	cmp	r3, #2
 800884c:	d130      	bne.n	80088b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	2203      	movs	r2, #3
 800885a:	fa02 f303 	lsl.w	r3, r2, r3
 800885e:	43db      	mvns	r3, r3
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	4013      	ands	r3, r2
 8008864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	4313      	orrs	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008884:	2201      	movs	r2, #1
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	43db      	mvns	r3, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4013      	ands	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	091b      	lsrs	r3, r3, #4
 800889a:	f003 0201 	and.w	r2, r3, #1
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d017      	beq.n	80088ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	2203      	movs	r2, #3
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	43db      	mvns	r3, r3
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	4013      	ands	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d123      	bne.n	8008940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	08da      	lsrs	r2, r3, #3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3208      	adds	r2, #8
 8008900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	220f      	movs	r2, #15
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	43db      	mvns	r3, r3
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	4013      	ands	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	4313      	orrs	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	08da      	lsrs	r2, r3, #3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3208      	adds	r2, #8
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	2203      	movs	r2, #3
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	43db      	mvns	r3, r3
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	4013      	ands	r3, r2
 8008956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f003 0203 	and.w	r2, r3, #3
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4313      	orrs	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80ae 	beq.w	8008ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	4b5d      	ldr	r3, [pc, #372]	; (8008afc <HAL_GPIO_Init+0x300>)
 8008988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898a:	4a5c      	ldr	r2, [pc, #368]	; (8008afc <HAL_GPIO_Init+0x300>)
 800898c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008990:	6453      	str	r3, [r2, #68]	; 0x44
 8008992:	4b5a      	ldr	r3, [pc, #360]	; (8008afc <HAL_GPIO_Init+0x300>)
 8008994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800899e:	4a58      	ldr	r2, [pc, #352]	; (8008b00 <HAL_GPIO_Init+0x304>)
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	089b      	lsrs	r3, r3, #2
 80089a4:	3302      	adds	r3, #2
 80089a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	220f      	movs	r2, #15
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	43db      	mvns	r3, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4013      	ands	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a4f      	ldr	r2, [pc, #316]	; (8008b04 <HAL_GPIO_Init+0x308>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d025      	beq.n	8008a16 <HAL_GPIO_Init+0x21a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a4e      	ldr	r2, [pc, #312]	; (8008b08 <HAL_GPIO_Init+0x30c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d01f      	beq.n	8008a12 <HAL_GPIO_Init+0x216>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a4d      	ldr	r2, [pc, #308]	; (8008b0c <HAL_GPIO_Init+0x310>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d019      	beq.n	8008a0e <HAL_GPIO_Init+0x212>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a4c      	ldr	r2, [pc, #304]	; (8008b10 <HAL_GPIO_Init+0x314>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <HAL_GPIO_Init+0x20e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a4b      	ldr	r2, [pc, #300]	; (8008b14 <HAL_GPIO_Init+0x318>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00d      	beq.n	8008a06 <HAL_GPIO_Init+0x20a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a4a      	ldr	r2, [pc, #296]	; (8008b18 <HAL_GPIO_Init+0x31c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d007      	beq.n	8008a02 <HAL_GPIO_Init+0x206>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a49      	ldr	r2, [pc, #292]	; (8008b1c <HAL_GPIO_Init+0x320>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d101      	bne.n	80089fe <HAL_GPIO_Init+0x202>
 80089fa:	2306      	movs	r3, #6
 80089fc:	e00c      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 80089fe:	2307      	movs	r3, #7
 8008a00:	e00a      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 8008a02:	2305      	movs	r3, #5
 8008a04:	e008      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 8008a06:	2304      	movs	r3, #4
 8008a08:	e006      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e004      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e002      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <HAL_GPIO_Init+0x21c>
 8008a16:	2300      	movs	r3, #0
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	f002 0203 	and.w	r2, r2, #3
 8008a1e:	0092      	lsls	r2, r2, #2
 8008a20:	4093      	lsls	r3, r2
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a28:	4935      	ldr	r1, [pc, #212]	; (8008b00 <HAL_GPIO_Init+0x304>)
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	3302      	adds	r3, #2
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a36:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	43db      	mvns	r3, r3
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	4013      	ands	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a5a:	4a31      	ldr	r2, [pc, #196]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a60:	4b2f      	ldr	r3, [pc, #188]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	43db      	mvns	r3, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a84:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008a8a:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	43db      	mvns	r3, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008aae:	4a1c      	ldr	r2, [pc, #112]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	43db      	mvns	r3, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ad8:	4a11      	ldr	r2, [pc, #68]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	f67f ae96 	bls.w	8008818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	3724      	adds	r7, #36	; 0x24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40023800 	.word	0x40023800
 8008b00:	40013800 	.word	0x40013800
 8008b04:	40020000 	.word	0x40020000
 8008b08:	40020400 	.word	0x40020400
 8008b0c:	40020800 	.word	0x40020800
 8008b10:	40020c00 	.word	0x40020c00
 8008b14:	40021000 	.word	0x40021000
 8008b18:	40021400 	.word	0x40021400
 8008b1c:	40021800 	.word	0x40021800
 8008b20:	40013c00 	.word	0x40013c00

08008b24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e0c7      	b.n	8008cd0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b40:	2201      	movs	r2, #1
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	f040 80b7 	bne.w	8008cca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008b5c:	4a62      	ldr	r2, [pc, #392]	; (8008ce8 <HAL_GPIO_DeInit+0x1c4>)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	3302      	adds	r3, #2
 8008b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b68:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	220f      	movs	r2, #15
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a5a      	ldr	r2, [pc, #360]	; (8008cec <HAL_GPIO_DeInit+0x1c8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d025      	beq.n	8008bd2 <HAL_GPIO_DeInit+0xae>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a59      	ldr	r2, [pc, #356]	; (8008cf0 <HAL_GPIO_DeInit+0x1cc>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d01f      	beq.n	8008bce <HAL_GPIO_DeInit+0xaa>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a58      	ldr	r2, [pc, #352]	; (8008cf4 <HAL_GPIO_DeInit+0x1d0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d019      	beq.n	8008bca <HAL_GPIO_DeInit+0xa6>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a57      	ldr	r2, [pc, #348]	; (8008cf8 <HAL_GPIO_DeInit+0x1d4>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <HAL_GPIO_DeInit+0xa2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a56      	ldr	r2, [pc, #344]	; (8008cfc <HAL_GPIO_DeInit+0x1d8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00d      	beq.n	8008bc2 <HAL_GPIO_DeInit+0x9e>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a55      	ldr	r2, [pc, #340]	; (8008d00 <HAL_GPIO_DeInit+0x1dc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d007      	beq.n	8008bbe <HAL_GPIO_DeInit+0x9a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a54      	ldr	r2, [pc, #336]	; (8008d04 <HAL_GPIO_DeInit+0x1e0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d101      	bne.n	8008bba <HAL_GPIO_DeInit+0x96>
 8008bb6:	2306      	movs	r3, #6
 8008bb8:	e00c      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bba:	2307      	movs	r3, #7
 8008bbc:	e00a      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bbe:	2305      	movs	r3, #5
 8008bc0:	e008      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bc2:	2304      	movs	r3, #4
 8008bc4:	e006      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e004      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e002      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <HAL_GPIO_DeInit+0xb0>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	f002 0203 	and.w	r2, r2, #3
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	4093      	lsls	r3, r2
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d132      	bne.n	8008c4a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008be4:	4b48      	ldr	r3, [pc, #288]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	43db      	mvns	r3, r3
 8008bec:	4946      	ldr	r1, [pc, #280]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008bf2:	4b45      	ldr	r3, [pc, #276]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	43db      	mvns	r3, r3
 8008bfa:	4943      	ldr	r1, [pc, #268]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008c00:	4b41      	ldr	r3, [pc, #260]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008c02:	68da      	ldr	r2, [r3, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	43db      	mvns	r3, r3
 8008c08:	493f      	ldr	r1, [pc, #252]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008c0e:	4b3e      	ldr	r3, [pc, #248]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008c10:	689a      	ldr	r2, [r3, #8]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	43db      	mvns	r3, r3
 8008c16:	493c      	ldr	r1, [pc, #240]	; (8008d08 <HAL_GPIO_DeInit+0x1e4>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	220f      	movs	r2, #15
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008c2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ce8 <HAL_GPIO_DeInit+0x1c4>)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	089b      	lsrs	r3, r3, #2
 8008c32:	3302      	adds	r3, #2
 8008c34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	43da      	mvns	r2, r3
 8008c3c:	482a      	ldr	r0, [pc, #168]	; (8008ce8 <HAL_GPIO_DeInit+0x1c4>)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	089b      	lsrs	r3, r3, #2
 8008c42:	400a      	ands	r2, r1
 8008c44:	3302      	adds	r3, #2
 8008c46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	2103      	movs	r1, #3
 8008c54:	fa01 f303 	lsl.w	r3, r1, r3
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	401a      	ands	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	08da      	lsrs	r2, r3, #3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3208      	adds	r2, #8
 8008c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	220f      	movs	r2, #15
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	08d2      	lsrs	r2, r2, #3
 8008c80:	4019      	ands	r1, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3208      	adds	r2, #8
 8008c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	2103      	movs	r1, #3
 8008c94:	fa01 f303 	lsl.w	r3, r1, r3
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cac:	43db      	mvns	r3, r3
 8008cae:	401a      	ands	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	2103      	movs	r1, #3
 8008cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	401a      	ands	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b0f      	cmp	r3, #15
 8008cd4:	f67f af34 	bls.w	8008b40 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	40013800 	.word	0x40013800
 8008cec:	40020000 	.word	0x40020000
 8008cf0:	40020400 	.word	0x40020400
 8008cf4:	40020800 	.word	0x40020800
 8008cf8:	40020c00 	.word	0x40020c00
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	40021400 	.word	0x40021400
 8008d04:	40021800 	.word	0x40021800
 8008d08:	40013c00 	.word	0x40013c00

08008d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	887b      	ldrh	r3, [r7, #2]
 8008d1e:	4013      	ands	r3, r2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d24:	2301      	movs	r3, #1
 8008d26:	73fb      	strb	r3, [r7, #15]
 8008d28:	e001      	b.n	8008d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	807b      	strh	r3, [r7, #2]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d4c:	787b      	ldrb	r3, [r7, #1]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d52:	887a      	ldrh	r2, [r7, #2]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d58:	e003      	b.n	8008d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d5a:	887b      	ldrh	r3, [r7, #2]
 8008d5c:	041a      	lsls	r2, r3, #16
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	619a      	str	r2, [r3, #24]
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b085      	sub	sp, #20
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d80:	887a      	ldrh	r2, [r7, #2]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4013      	ands	r3, r2
 8008d86:	041a      	lsls	r2, r3, #16
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	43d9      	mvns	r1, r3
 8008d8c:	887b      	ldrh	r3, [r7, #2]
 8008d8e:	400b      	ands	r3, r1
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	619a      	str	r2, [r3, #24]
}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008dae:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	4013      	ands	r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d006      	beq.n	8008dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008dba:	4a05      	ldr	r2, [pc, #20]	; (8008dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fc fa3c 	bl	8005240 <HAL_GPIO_EXTI_Callback>
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40013c00 	.word	0x40013c00

08008dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e12b      	b.n	800903e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7fc ffbe 	bl	8005d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	; 0x24
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0201 	bic.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e38:	f001 f938 	bl	800a0ac <HAL_RCC_GetPCLK1Freq>
 8008e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	4a81      	ldr	r2, [pc, #516]	; (8009048 <HAL_I2C_Init+0x274>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d807      	bhi.n	8008e58 <HAL_I2C_Init+0x84>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4a80      	ldr	r2, [pc, #512]	; (800904c <HAL_I2C_Init+0x278>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	bf94      	ite	ls
 8008e50:	2301      	movls	r3, #1
 8008e52:	2300      	movhi	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e006      	b.n	8008e66 <HAL_I2C_Init+0x92>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a7d      	ldr	r2, [pc, #500]	; (8009050 <HAL_I2C_Init+0x27c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	bf94      	ite	ls
 8008e60:	2301      	movls	r3, #1
 8008e62:	2300      	movhi	r3, #0
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0e7      	b.n	800903e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a78      	ldr	r2, [pc, #480]	; (8009054 <HAL_I2C_Init+0x280>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	0c9b      	lsrs	r3, r3, #18
 8008e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a6a      	ldr	r2, [pc, #424]	; (8009048 <HAL_I2C_Init+0x274>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d802      	bhi.n	8008ea8 <HAL_I2C_Init+0xd4>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	e009      	b.n	8008ebc <HAL_I2C_Init+0xe8>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	4a69      	ldr	r2, [pc, #420]	; (8009058 <HAL_I2C_Init+0x284>)
 8008eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb8:	099b      	lsrs	r3, r3, #6
 8008eba:	3301      	adds	r3, #1
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	495c      	ldr	r1, [pc, #368]	; (8009048 <HAL_I2C_Init+0x274>)
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	d819      	bhi.n	8008f10 <HAL_I2C_Init+0x13c>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	1e59      	subs	r1, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ef0:	400b      	ands	r3, r1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_I2C_Init+0x138>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	1e59      	subs	r1, r3, #1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f04:	3301      	adds	r3, #1
 8008f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f0a:	e051      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	e04f      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d111      	bne.n	8008f3c <HAL_I2C_Init+0x168>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	1e58      	subs	r0, r3, #1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6859      	ldr	r1, [r3, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	440b      	add	r3, r1
 8008f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bf0c      	ite	eq
 8008f34:	2301      	moveq	r3, #1
 8008f36:	2300      	movne	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	e012      	b.n	8008f62 <HAL_I2C_Init+0x18e>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	1e58      	subs	r0, r3, #1
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6859      	ldr	r1, [r3, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	0099      	lsls	r1, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f52:	3301      	adds	r3, #1
 8008f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2301      	moveq	r3, #1
 8008f5e:	2300      	movne	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <HAL_I2C_Init+0x196>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e022      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10e      	bne.n	8008f90 <HAL_I2C_Init+0x1bc>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1e58      	subs	r0, r3, #1
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6859      	ldr	r1, [r3, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	440b      	add	r3, r1
 8008f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f84:	3301      	adds	r3, #1
 8008f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8e:	e00f      	b.n	8008fb0 <HAL_I2C_Init+0x1dc>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	1e58      	subs	r0, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6859      	ldr	r1, [r3, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	0099      	lsls	r1, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	6809      	ldr	r1, [r1, #0]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6911      	ldr	r1, [r2, #16]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68d2      	ldr	r2, [r2, #12]
 8008fea:	4311      	orrs	r1, r2
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6812      	ldr	r2, [r2, #0]
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695a      	ldr	r2, [r3, #20]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	000186a0 	.word	0x000186a0
 800904c:	001e847f 	.word	0x001e847f
 8009050:	003d08ff 	.word	0x003d08ff
 8009054:	431bde83 	.word	0x431bde83
 8009058:	10624dd3 	.word	0x10624dd3

0800905c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e021      	b.n	80090b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2224      	movs	r2, #36	; 0x24
 8009072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0201 	bic.w	r2, r2, #1
 8009084:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fc ff18 	bl	8005ebc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	4608      	mov	r0, r1
 80090c6:	4611      	mov	r1, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	4603      	mov	r3, r0
 80090cc:	817b      	strh	r3, [r7, #10]
 80090ce:	460b      	mov	r3, r1
 80090d0:	813b      	strh	r3, [r7, #8]
 80090d2:	4613      	mov	r3, r2
 80090d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090d6:	f7fe f99f 	bl	8007418 <HAL_GetTick>
 80090da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	f040 80d9 	bne.w	800929c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2319      	movs	r3, #25
 80090f0:	2201      	movs	r2, #1
 80090f2:	496d      	ldr	r1, [pc, #436]	; (80092a8 <HAL_I2C_Mem_Write+0x1ec>)
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fc7f 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009100:	2302      	movs	r3, #2
 8009102:	e0cc      	b.n	800929e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800910a:	2b01      	cmp	r3, #1
 800910c:	d101      	bne.n	8009112 <HAL_I2C_Mem_Write+0x56>
 800910e:	2302      	movs	r3, #2
 8009110:	e0c5      	b.n	800929e <HAL_I2C_Mem_Write+0x1e2>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b01      	cmp	r3, #1
 8009126:	d007      	beq.n	8009138 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2221      	movs	r2, #33	; 0x21
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2240      	movs	r2, #64	; 0x40
 8009154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a3a      	ldr	r2, [r7, #32]
 8009162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a4d      	ldr	r2, [pc, #308]	; (80092ac <HAL_I2C_Mem_Write+0x1f0>)
 8009178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800917a:	88f8      	ldrh	r0, [r7, #6]
 800917c:	893a      	ldrh	r2, [r7, #8]
 800917e:	8979      	ldrh	r1, [r7, #10]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	4603      	mov	r3, r0
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fab6 	bl	80096fc <I2C_RequestMemoryWrite>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d052      	beq.n	800923c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e081      	b.n	800929e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fd00 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00d      	beq.n	80091c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d107      	bne.n	80091c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e06b      	b.n	800929e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b04      	cmp	r3, #4
 8009202:	d11b      	bne.n	800923c <HAL_I2C_Mem_Write+0x180>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009208:	2b00      	cmp	r3, #0
 800920a:	d017      	beq.n	800923c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009226:	3b01      	subs	r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009232:	b29b      	uxth	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1aa      	bne.n	800919a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 fcec 	bl	8009c26 <I2C_WaitOnBTFFlagUntilTimeout>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00d      	beq.n	8009270 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	2b04      	cmp	r3, #4
 800925a:	d107      	bne.n	800926c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800926a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e016      	b.n	800929e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800929c:	2302      	movs	r3, #2
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	00100002 	.word	0x00100002
 80092ac:	ffff0000 	.word	0xffff0000

080092b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08c      	sub	sp, #48	; 0x30
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	4608      	mov	r0, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	461a      	mov	r2, r3
 80092be:	4603      	mov	r3, r0
 80092c0:	817b      	strh	r3, [r7, #10]
 80092c2:	460b      	mov	r3, r1
 80092c4:	813b      	strh	r3, [r7, #8]
 80092c6:	4613      	mov	r3, r2
 80092c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092ca:	f7fe f8a5 	bl	8007418 <HAL_GetTick>
 80092ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b20      	cmp	r3, #32
 80092da:	f040 8208 	bne.w	80096ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	2319      	movs	r3, #25
 80092e4:	2201      	movs	r2, #1
 80092e6:	497b      	ldr	r1, [pc, #492]	; (80094d4 <HAL_I2C_Mem_Read+0x224>)
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fb85 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80092f4:	2302      	movs	r3, #2
 80092f6:	e1fb      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_I2C_Mem_Read+0x56>
 8009302:	2302      	movs	r3, #2
 8009304:	e1f4      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b01      	cmp	r3, #1
 800931a:	d007      	beq.n	800932c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0201 	orr.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800933a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2222      	movs	r2, #34	; 0x22
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2240      	movs	r2, #64	; 0x40
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800935c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a5b      	ldr	r2, [pc, #364]	; (80094d8 <HAL_I2C_Mem_Read+0x228>)
 800936c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800936e:	88f8      	ldrh	r0, [r7, #6]
 8009370:	893a      	ldrh	r2, [r7, #8]
 8009372:	8979      	ldrh	r1, [r7, #10]
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4603      	mov	r3, r0
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fa52 	bl	8009828 <I2C_RequestMemoryRead>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e1b0      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009392:	2b00      	cmp	r3, #0
 8009394:	d113      	bne.n	80093be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009396:	2300      	movs	r3, #0
 8009398:	623b      	str	r3, [r7, #32]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	623b      	str	r3, [r7, #32]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	623b      	str	r3, [r7, #32]
 80093aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	e184      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d11b      	bne.n	80093fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	61fb      	str	r3, [r7, #28]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	e164      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009402:	2b02      	cmp	r3, #2
 8009404:	d11b      	bne.n	800943e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009414:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009426:	2300      	movs	r3, #0
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	61bb      	str	r3, [r7, #24]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	e144      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	617b      	str	r3, [r7, #20]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009454:	e138      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945a:	2b03      	cmp	r3, #3
 800945c:	f200 80f1 	bhi.w	8009642 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009464:	2b01      	cmp	r3, #1
 8009466:	d123      	bne.n	80094b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fc1b 	bl	8009ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e139      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094ae:	e10b      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d14e      	bne.n	8009556 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	2200      	movs	r2, #0
 80094c0:	4906      	ldr	r1, [pc, #24]	; (80094dc <HAL_I2C_Mem_Read+0x22c>)
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fa98 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d008      	beq.n	80094e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e10e      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
 80094d2:	bf00      	nop
 80094d4:	00100002 	.word	0x00100002
 80094d8:	ffff0000 	.word	0xffff0000
 80094dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009518:	b29b      	uxth	r3, r3
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009554:	e0b8      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	2200      	movs	r2, #0
 800955e:	4966      	ldr	r1, [pc, #408]	; (80096f8 <HAL_I2C_Mem_Read+0x448>)
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fa49 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0bf      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691a      	ldr	r2, [r3, #16]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	2200      	movs	r2, #0
 80095ba:	494f      	ldr	r1, [pc, #316]	; (80096f8 <HAL_I2C_Mem_Read+0x448>)
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fa1b 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e091      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	b29a      	uxth	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962a:	3b01      	subs	r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009640:	e042      	b.n	80096c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 fb2e 	bl	8009ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e04c      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009672:	3b01      	subs	r3, #1
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b04      	cmp	r3, #4
 8009694:	d118      	bne.n	80096c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	b2d2      	uxtb	r2, r2
 80096a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096be:	b29b      	uxth	r3, r3
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f47f aec2 	bne.w	8009456 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	e000      	b.n	80096f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80096ee:	2302      	movs	r3, #2
  }
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3728      	adds	r7, #40	; 0x28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	00010004 	.word	0x00010004

080096fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	4603      	mov	r3, r0
 800970c:	817b      	strh	r3, [r7, #10]
 800970e:	460b      	mov	r3, r1
 8009710:	813b      	strh	r3, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	2200      	movs	r2, #0
 800972e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 f960 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00d      	beq.n	800975a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974c:	d103      	bne.n	8009756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e05f      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800975a:	897b      	ldrh	r3, [r7, #10]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	492d      	ldr	r1, [pc, #180]	; (8009824 <I2C_RequestMemoryWrite+0x128>)
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f998 	bl	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e04c      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009798:	6a39      	ldr	r1, [r7, #32]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fa02 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d107      	bne.n	80097be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e02b      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d105      	bne.n	80097d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097c8:	893b      	ldrh	r3, [r7, #8]
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	611a      	str	r2, [r3, #16]
 80097d2:	e021      	b.n	8009818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80097d4:	893b      	ldrh	r3, [r7, #8]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b29b      	uxth	r3, r3
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e4:	6a39      	ldr	r1, [r7, #32]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f9dc 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d107      	bne.n	800980a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e005      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800980e:	893b      	ldrh	r3, [r7, #8]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	00010002 	.word	0x00010002

08009828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	4608      	mov	r0, r1
 8009832:	4611      	mov	r1, r2
 8009834:	461a      	mov	r2, r3
 8009836:	4603      	mov	r3, r0
 8009838:	817b      	strh	r3, [r7, #10]
 800983a:	460b      	mov	r3, r1
 800983c:	813b      	strh	r3, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	2200      	movs	r2, #0
 800986a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f8c2 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009888:	d103      	bne.n	8009892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e0aa      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	6a3a      	ldr	r2, [r7, #32]
 80098aa:	4952      	ldr	r1, [pc, #328]	; (80099f4 <I2C_RequestMemoryRead+0x1cc>)
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f8fa 	bl	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e097      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d4:	6a39      	ldr	r1, [r7, #32]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f964 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d107      	bne.n	80098fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e076      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d105      	bne.n	8009910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	611a      	str	r2, [r3, #16]
 800990e:	e021      	b.n	8009954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009910:	893b      	ldrh	r3, [r7, #8]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009920:	6a39      	ldr	r1, [r7, #32]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f93e 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00d      	beq.n	800994a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	2b04      	cmp	r3, #4
 8009934:	d107      	bne.n	8009946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e050      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800994a:	893b      	ldrh	r3, [r7, #8]
 800994c:	b2da      	uxtb	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009956:	6a39      	ldr	r1, [r7, #32]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f923 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00d      	beq.n	8009980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	2b04      	cmp	r3, #4
 800996a:	d107      	bne.n	800997c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800997a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e035      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800998e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2200      	movs	r2, #0
 8009998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f82b 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d103      	bne.n	80099c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e013      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099c4:	897b      	ldrh	r3, [r7, #10]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	4906      	ldr	r1, [pc, #24]	; (80099f4 <I2C_RequestMemoryRead+0x1cc>)
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f863 	bl	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e000      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	00010002 	.word	0x00010002

080099f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a08:	e025      	b.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d021      	beq.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a12:	f7fd fd01 	bl	8007418 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d302      	bcc.n	8009a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d116      	bne.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	f043 0220 	orr.w	r2, r3, #32
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e023      	b.n	8009a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	0c1b      	lsrs	r3, r3, #16
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d10d      	bne.n	8009a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	43da      	mvns	r2, r3
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bf0c      	ite	eq
 8009a72:	2301      	moveq	r3, #1
 8009a74:	2300      	movne	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	e00c      	b.n	8009a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	43da      	mvns	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4013      	ands	r3, r2
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d0b6      	beq.n	8009a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
 8009ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ab4:	e051      	b.n	8009b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ac4:	d123      	bne.n	8009b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	f043 0204 	orr.w	r2, r3, #4
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e046      	b.n	8009b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b14:	d021      	beq.n	8009b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b16:	f7fd fc7f 	bl	8007418 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d302      	bcc.n	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d116      	bne.n	8009b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	f043 0220 	orr.w	r2, r3, #32
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e020      	b.n	8009b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d10c      	bne.n	8009b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	43da      	mvns	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4013      	ands	r3, r2
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bf14      	ite	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	e00b      	b.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	43da      	mvns	r2, r3
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4013      	ands	r3, r2
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d18d      	bne.n	8009ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bb0:	e02d      	b.n	8009c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f8ce 	bl	8009d54 <I2C_IsAcknowledgeFailed>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e02d      	b.n	8009c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d021      	beq.n	8009c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bca:	f7fd fc25 	bl	8007418 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d302      	bcc.n	8009be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d116      	bne.n	8009c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f043 0220 	orr.w	r2, r3, #32
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e007      	b.n	8009c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c18:	2b80      	cmp	r3, #128	; 0x80
 8009c1a:	d1ca      	bne.n	8009bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c32:	e02d      	b.n	8009c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 f88d 	bl	8009d54 <I2C_IsAcknowledgeFailed>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e02d      	b.n	8009ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	d021      	beq.n	8009c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4c:	f7fd fbe4 	bl	8007418 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d302      	bcc.n	8009c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d116      	bne.n	8009c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	f043 0220 	orr.w	r2, r3, #32
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e007      	b.n	8009ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d1ca      	bne.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cb4:	e042      	b.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b10      	cmp	r3, #16
 8009cc2:	d119      	bne.n	8009cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0210 	mvn.w	r2, #16
 8009ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e029      	b.n	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf8:	f7fd fb8e 	bl	8007418 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d116      	bne.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	f043 0220 	orr.w	r2, r3, #32
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e007      	b.n	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d46:	2b40      	cmp	r3, #64	; 0x40
 8009d48:	d1b5      	bne.n	8009cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6a:	d11b      	bne.n	8009da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d90:	f043 0204 	orr.w	r2, r3, #4
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009dba:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009dc0:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009dc6:	687b      	ldr	r3, [r7, #4]
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	420e0020 	.word	0x420e0020
 8009dd8:	40007000 	.word	0x40007000

08009ddc <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <HAL_PWREx_EnableBkUpReg+0x44>)
 8009de8:	2201      	movs	r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009dec:	f7fd fb14 	bl	8007418 <HAL_GetTick>
 8009df0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009df2:	e009      	b.n	8009e08 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8009df4:	f7fd fb10 	bl	8007418 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e02:	d901      	bls.n	8009e08 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e006      	b.n	8009e16 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009e08:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <HAL_PWREx_EnableBkUpReg+0x48>)
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f003 0308 	and.w	r3, r3, #8
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d1ef      	bne.n	8009df4 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	420e00a4 	.word	0x420e00a4
 8009e24:	40007000 	.word	0x40007000

08009e28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e32:	2300      	movs	r3, #0
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	4b20      	ldr	r3, [pc, #128]	; (8009eb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3a:	4a1f      	ldr	r2, [pc, #124]	; (8009eb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e40:	6413      	str	r3, [r2, #64]	; 0x40
 8009e42:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e4e:	4b1b      	ldr	r3, [pc, #108]	; (8009ebc <HAL_PWREx_EnableOverDrive+0x94>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e54:	f7fd fae0 	bl	8007418 <HAL_GetTick>
 8009e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e5a:	e009      	b.n	8009e70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e5c:	f7fd fadc 	bl	8007418 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e6a:	d901      	bls.n	8009e70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e01f      	b.n	8009eb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e70:	4b13      	ldr	r3, [pc, #76]	; (8009ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e7c:	d1ee      	bne.n	8009e5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009e7e:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009e80:	2201      	movs	r2, #1
 8009e82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e84:	f7fd fac8 	bl	8007418 <HAL_GetTick>
 8009e88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e8a:	e009      	b.n	8009ea0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e8c:	f7fd fac4 	bl	8007418 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e9a:	d901      	bls.n	8009ea0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e007      	b.n	8009eb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eac:	d1ee      	bne.n	8009e8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	40023800 	.word	0x40023800
 8009ebc:	420e0040 	.word	0x420e0040
 8009ec0:	40007000 	.word	0x40007000
 8009ec4:	420e0044 	.word	0x420e0044

08009ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e0cc      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009edc:	4b68      	ldr	r3, [pc, #416]	; (800a080 <HAL_RCC_ClockConfig+0x1b8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 030f 	and.w	r3, r3, #15
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d90c      	bls.n	8009f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eea:	4b65      	ldr	r3, [pc, #404]	; (800a080 <HAL_RCC_ClockConfig+0x1b8>)
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ef2:	4b63      	ldr	r3, [pc, #396]	; (800a080 <HAL_RCC_ClockConfig+0x1b8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 030f 	and.w	r3, r3, #15
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d001      	beq.n	8009f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e0b8      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d020      	beq.n	8009f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0304 	and.w	r3, r3, #4
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f1c:	4b59      	ldr	r3, [pc, #356]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	4a58      	ldr	r2, [pc, #352]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0308 	and.w	r3, r3, #8
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d005      	beq.n	8009f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f34:	4b53      	ldr	r3, [pc, #332]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	4a52      	ldr	r2, [pc, #328]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f40:	4b50      	ldr	r3, [pc, #320]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	494d      	ldr	r1, [pc, #308]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d044      	beq.n	8009fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d107      	bne.n	8009f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f66:	4b47      	ldr	r3, [pc, #284]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d119      	bne.n	8009fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e07f      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d003      	beq.n	8009f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d107      	bne.n	8009f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f86:	4b3f      	ldr	r3, [pc, #252]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d109      	bne.n	8009fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e06f      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f96:	4b3b      	ldr	r3, [pc, #236]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e067      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fa6:	4b37      	ldr	r3, [pc, #220]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f023 0203 	bic.w	r2, r3, #3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4934      	ldr	r1, [pc, #208]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009fb8:	f7fd fa2e 	bl	8007418 <HAL_GetTick>
 8009fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fbe:	e00a      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fc0:	f7fd fa2a 	bl	8007418 <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d901      	bls.n	8009fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e04f      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fd6:	4b2b      	ldr	r3, [pc, #172]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 020c 	and.w	r2, r3, #12
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d1eb      	bne.n	8009fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009fe8:	4b25      	ldr	r3, [pc, #148]	; (800a080 <HAL_RCC_ClockConfig+0x1b8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d20c      	bcs.n	800a010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff6:	4b22      	ldr	r3, [pc, #136]	; (800a080 <HAL_RCC_ClockConfig+0x1b8>)
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ffe:	4b20      	ldr	r3, [pc, #128]	; (800a080 <HAL_RCC_ClockConfig+0x1b8>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 030f 	and.w	r3, r3, #15
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d001      	beq.n	800a010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e032      	b.n	800a076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d008      	beq.n	800a02e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a01c:	4b19      	ldr	r3, [pc, #100]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	4916      	ldr	r1, [pc, #88]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0308 	and.w	r3, r3, #8
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a03a:	4b12      	ldr	r3, [pc, #72]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	490e      	ldr	r1, [pc, #56]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a04e:	f000 fb7f 	bl	800a750 <HAL_RCC_GetSysClockFreq>
 800a052:	4602      	mov	r2, r0
 800a054:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <HAL_RCC_ClockConfig+0x1bc>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	091b      	lsrs	r3, r3, #4
 800a05a:	f003 030f 	and.w	r3, r3, #15
 800a05e:	490a      	ldr	r1, [pc, #40]	; (800a088 <HAL_RCC_ClockConfig+0x1c0>)
 800a060:	5ccb      	ldrb	r3, [r1, r3]
 800a062:	fa22 f303 	lsr.w	r3, r2, r3
 800a066:	4a09      	ldr	r2, [pc, #36]	; (800a08c <HAL_RCC_ClockConfig+0x1c4>)
 800a068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <HAL_RCC_ClockConfig+0x1c8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fd f98e 	bl	8007390 <HAL_InitTick>

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	40023c00 	.word	0x40023c00
 800a084:	40023800 	.word	0x40023800
 800a088:	08017c08 	.word	0x08017c08
 800a08c:	2000000c 	.word	0x2000000c
 800a090:	20000010 	.word	0x20000010

0800a094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a094:	b480      	push	{r7}
 800a096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a09a:	681b      	ldr	r3, [r3, #0]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	2000000c 	.word	0x2000000c

0800a0ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0b0:	f7ff fff0 	bl	800a094 <HAL_RCC_GetHCLKFreq>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	0a9b      	lsrs	r3, r3, #10
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	4903      	ldr	r1, [pc, #12]	; (800a0d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0c2:	5ccb      	ldrb	r3, [r1, r3]
 800a0c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	08017c18 	.word	0x08017c18

0800a0d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0d8:	f7ff ffdc 	bl	800a094 <HAL_RCC_GetHCLKFreq>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	0b5b      	lsrs	r3, r3, #13
 800a0e4:	f003 0307 	and.w	r3, r3, #7
 800a0e8:	4903      	ldr	r1, [pc, #12]	; (800a0f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0ea:	5ccb      	ldrb	r3, [r1, r3]
 800a0ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	40023800 	.word	0x40023800
 800a0f8:	08017c18 	.word	0x08017c18

0800a0fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08c      	sub	sp, #48	; 0x30
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d010      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800a134:	4b6f      	ldr	r3, [pc, #444]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a13a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	496c      	ldr	r1, [pc, #432]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a144:	4313      	orrs	r3, r2
 800a146:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800a152:	2301      	movs	r3, #1
 800a154:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800a162:	4b64      	ldr	r3, [pc, #400]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a168:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a170:	4960      	ldr	r1, [pc, #384]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a172:	4313      	orrs	r3, r2
 800a174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800a180:	2301      	movs	r3, #1
 800a182:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d017      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a190:	4b58      	ldr	r3, [pc, #352]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19e:	4955      	ldr	r1, [pc, #340]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ae:	d101      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0308 	and.w	r3, r3, #8
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d017      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a1cc:	4b49      	ldr	r3, [pc, #292]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	4946      	ldr	r1, [pc, #280]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1ea:	d101      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 808a 	beq.w	800a31e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a20a:	2300      	movs	r3, #0
 800a20c:	60bb      	str	r3, [r7, #8]
 800a20e:	4b39      	ldr	r3, [pc, #228]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	4a38      	ldr	r2, [pc, #224]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a218:	6413      	str	r3, [r2, #64]	; 0x40
 800a21a:	4b36      	ldr	r3, [pc, #216]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a222:	60bb      	str	r3, [r7, #8]
 800a224:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a226:	4b34      	ldr	r3, [pc, #208]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a33      	ldr	r2, [pc, #204]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a230:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a232:	f7fd f8f1 	bl	8007418 <HAL_GetTick>
 800a236:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a238:	e008      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a23a:	f7fd f8ed 	bl	8007418 <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	2b02      	cmp	r3, #2
 800a246:	d901      	bls.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e278      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a24c:	4b2a      	ldr	r3, [pc, #168]	; (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0f0      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a258:	4b26      	ldr	r3, [pc, #152]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a260:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d02f      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	429a      	cmp	r2, r3
 800a274:	d028      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a276:	4b1f      	ldr	r3, [pc, #124]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a27e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a280:	4b1e      	ldr	r3, [pc, #120]	; (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a282:	2201      	movs	r2, #1
 800a284:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a286:	4b1d      	ldr	r3, [pc, #116]	; (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a28c:	4a19      	ldr	r2, [pc, #100]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a292:	4b18      	ldr	r3, [pc, #96]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d114      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a29e:	f7fd f8bb 	bl	8007418 <HAL_GetTick>
 800a2a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2a4:	e00a      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2a6:	f7fd f8b7 	bl	8007418 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d901      	bls.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e240      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d0ee      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2d4:	d114      	bne.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a2d6:	4b07      	ldr	r3, [pc, #28]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ea:	4902      	ldr	r1, [pc, #8]	; (800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	608b      	str	r3, [r1, #8]
 800a2f0:	e00c      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800a2f2:	bf00      	nop
 800a2f4:	40023800 	.word	0x40023800
 800a2f8:	40007000 	.word	0x40007000
 800a2fc:	42470e40 	.word	0x42470e40
 800a300:	4b4a      	ldr	r3, [pc, #296]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	4a49      	ldr	r2, [pc, #292]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a306:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a30a:	6093      	str	r3, [r2, #8]
 800a30c:	4b47      	ldr	r3, [pc, #284]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a30e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a318:	4944      	ldr	r1, [pc, #272]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	2b00      	cmp	r3, #0
 800a328:	d004      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a330:	4b3f      	ldr	r3, [pc, #252]	; (800a430 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800a332:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a340:	4b3a      	ldr	r3, [pc, #232]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34e:	4937      	ldr	r1, [pc, #220]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a350:	4313      	orrs	r3, r2
 800a352:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a362:	4b32      	ldr	r3, [pc, #200]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a368:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a370:	492e      	ldr	r1, [pc, #184]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a372:	4313      	orrs	r3, r2
 800a374:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a380:	2b00      	cmp	r3, #0
 800a382:	d011      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a384:	4b29      	ldr	r3, [pc, #164]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a38a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a392:	4926      	ldr	r1, [pc, #152]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a394:	4313      	orrs	r3, r2
 800a396:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3a2:	d101      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00a      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a3b4:	4b1d      	ldr	r3, [pc, #116]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c2:	491a      	ldr	r1, [pc, #104]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d011      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800a3d6:	4b15      	ldr	r3, [pc, #84]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	4911      	ldr	r1, [pc, #68]	; (800a42c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f4:	d101      	bne.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d005      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a408:	f040 80ff 	bne.w	800a60a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a412:	f7fd f801 	bl	8007418 <HAL_GetTick>
 800a416:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a418:	e00e      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a41a:	f7fc fffd 	bl	8007418 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d907      	bls.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e188      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a42c:	40023800 	.word	0x40023800
 800a430:	424711e0 	.word	0x424711e0
 800a434:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a438:	4b7e      	ldr	r3, [pc, #504]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1ea      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d003      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a460:	2b00      	cmp	r3, #0
 800a462:	d028      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d124      	bne.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a46c:	4b71      	ldr	r3, [pc, #452]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a472:	0c1b      	lsrs	r3, r3, #16
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	3301      	adds	r3, #1
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a47e:	4b6d      	ldr	r3, [pc, #436]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a484:	0e1b      	lsrs	r3, r3, #24
 800a486:	f003 030f 	and.w	r3, r3, #15
 800a48a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	019b      	lsls	r3, r3, #6
 800a496:	431a      	orrs	r2, r3
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	3b01      	subs	r3, #1
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	061b      	lsls	r3, r3, #24
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	071b      	lsls	r3, r3, #28
 800a4ae:	4961      	ldr	r1, [pc, #388]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d004      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ca:	d00a      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d035      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4e0:	d130      	bne.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a4e2:	4b54      	ldr	r3, [pc, #336]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e8:	0c1b      	lsrs	r3, r3, #16
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a4f4:	4b4f      	ldr	r3, [pc, #316]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4fa:	0f1b      	lsrs	r3, r3, #28
 800a4fc:	f003 0307 	and.w	r3, r3, #7
 800a500:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	019b      	lsls	r3, r3, #6
 800a50c:	431a      	orrs	r2, r3
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	3b01      	subs	r3, #1
 800a514:	041b      	lsls	r3, r3, #16
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	061b      	lsls	r3, r3, #24
 800a51e:	431a      	orrs	r2, r3
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	071b      	lsls	r3, r3, #28
 800a524:	4943      	ldr	r1, [pc, #268]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a526:	4313      	orrs	r3, r2
 800a528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a52c:	4b41      	ldr	r3, [pc, #260]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a532:	f023 021f 	bic.w	r2, r3, #31
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	3b01      	subs	r3, #1
 800a53c:	493d      	ldr	r1, [pc, #244]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d029      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a558:	d124      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800a55a:	4b36      	ldr	r3, [pc, #216]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a560:	0c1b      	lsrs	r3, r3, #16
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	3301      	adds	r3, #1
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a56c:	4b31      	ldr	r3, [pc, #196]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a572:	0f1b      	lsrs	r3, r3, #28
 800a574:	f003 0307 	and.w	r3, r3, #7
 800a578:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	019b      	lsls	r3, r3, #6
 800a584:	431a      	orrs	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	085b      	lsrs	r3, r3, #1
 800a58c:	3b01      	subs	r3, #1
 800a58e:	041b      	lsls	r3, r3, #16
 800a590:	431a      	orrs	r2, r3
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	061b      	lsls	r3, r3, #24
 800a596:	431a      	orrs	r2, r3
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	071b      	lsls	r3, r3, #28
 800a59c:	4925      	ldr	r1, [pc, #148]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d016      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	019b      	lsls	r3, r3, #6
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	041b      	lsls	r3, r3, #16
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	061b      	lsls	r3, r3, #24
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	695b      	ldr	r3, [r3, #20]
 800a5d4:	071b      	lsls	r3, r3, #28
 800a5d6:	4917      	ldr	r1, [pc, #92]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a5de:	4b16      	ldr	r3, [pc, #88]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a5e4:	f7fc ff18 	bl	8007418 <HAL_GetTick>
 800a5e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a5ec:	f7fc ff14 	bl	8007418 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e09f      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0f0      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	f040 8095 	bne.w	800a73c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a612:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a618:	f7fc fefe 	bl	8007418 <HAL_GetTick>
 800a61c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a61e:	e00f      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a620:	f7fc fefa 	bl	8007418 <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d908      	bls.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e085      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a632:	bf00      	nop
 800a634:	40023800 	.word	0x40023800
 800a638:	42470068 	.word	0x42470068
 800a63c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a640:	4b41      	ldr	r3, [pc, #260]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a64c:	d0e8      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d02b      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	2b00      	cmp	r3, #0
 800a674:	d127      	bne.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a676:	4b34      	ldr	r3, [pc, #208]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67c:	0c1b      	lsrs	r3, r3, #16
 800a67e:	f003 0303 	and.w	r3, r3, #3
 800a682:	3301      	adds	r3, #1
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	019b      	lsls	r3, r3, #6
 800a692:	431a      	orrs	r2, r3
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	085b      	lsrs	r3, r3, #1
 800a698:	3b01      	subs	r3, #1
 800a69a:	041b      	lsls	r3, r3, #16
 800a69c:	431a      	orrs	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	061b      	lsls	r3, r3, #24
 800a6a4:	4928      	ldr	r1, [pc, #160]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a6ac:	4b26      	ldr	r3, [pc, #152]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	4922      	ldr	r1, [pc, #136]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d01d      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6da:	d118      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6dc:	4b1a      	ldr	r3, [pc, #104]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e2:	0e1b      	lsrs	r3, r3, #24
 800a6e4:	f003 030f 	and.w	r3, r3, #15
 800a6e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	019b      	lsls	r3, r3, #6
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	085b      	lsrs	r3, r3, #1
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	041b      	lsls	r3, r3, #16
 800a700:	431a      	orrs	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	061b      	lsls	r3, r3, #24
 800a706:	4910      	ldr	r1, [pc, #64]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a70e:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800a710:	2201      	movs	r2, #1
 800a712:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a714:	f7fc fe80 	bl	8007418 <HAL_GetTick>
 800a718:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a71a:	e008      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a71c:	f7fc fe7c 	bl	8007418 <HAL_GetTick>
 800a720:	4602      	mov	r2, r0
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b02      	cmp	r3, #2
 800a728:	d901      	bls.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a72a:	2303      	movs	r3, #3
 800a72c:	e007      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a72e:	4b06      	ldr	r3, [pc, #24]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a73a:	d1ef      	bne.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3730      	adds	r7, #48	; 0x30
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	40023800 	.word	0x40023800
 800a74c:	42470070 	.word	0x42470070

0800a750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a754:	b0ae      	sub	sp, #184	; 0xb8
 800a756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a776:	4bcb      	ldr	r3, [pc, #812]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 030c 	and.w	r3, r3, #12
 800a77e:	2b0c      	cmp	r3, #12
 800a780:	f200 8206 	bhi.w	800ab90 <HAL_RCC_GetSysClockFreq+0x440>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <HAL_RCC_GetSysClockFreq+0x3c>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7c1 	.word	0x0800a7c1
 800a790:	0800ab91 	.word	0x0800ab91
 800a794:	0800ab91 	.word	0x0800ab91
 800a798:	0800ab91 	.word	0x0800ab91
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	0800ab91 	.word	0x0800ab91
 800a7a4:	0800ab91 	.word	0x0800ab91
 800a7a8:	0800ab91 	.word	0x0800ab91
 800a7ac:	0800a7d1 	.word	0x0800a7d1
 800a7b0:	0800ab91 	.word	0x0800ab91
 800a7b4:	0800ab91 	.word	0x0800ab91
 800a7b8:	0800ab91 	.word	0x0800ab91
 800a7bc:	0800a9c1 	.word	0x0800a9c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7c0:	4bb9      	ldr	r3, [pc, #740]	; (800aaa8 <HAL_RCC_GetSysClockFreq+0x358>)
 800a7c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800a7c6:	e1e7      	b.n	800ab98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7c8:	4bb8      	ldr	r3, [pc, #736]	; (800aaac <HAL_RCC_GetSysClockFreq+0x35c>)
 800a7ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a7ce:	e1e3      	b.n	800ab98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7d0:	4bb4      	ldr	r3, [pc, #720]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7dc:	4bb1      	ldr	r3, [pc, #708]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d071      	beq.n	800a8cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7e8:	4bae      	ldr	r3, [pc, #696]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	099b      	lsrs	r3, r3, #6
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a7f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a7f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a804:	2300      	movs	r3, #0
 800a806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a80a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a80e:	4622      	mov	r2, r4
 800a810:	462b      	mov	r3, r5
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f04f 0100 	mov.w	r1, #0
 800a81a:	0159      	lsls	r1, r3, #5
 800a81c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a820:	0150      	lsls	r0, r2, #5
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4621      	mov	r1, r4
 800a828:	1a51      	subs	r1, r2, r1
 800a82a:	6439      	str	r1, [r7, #64]	; 0x40
 800a82c:	4629      	mov	r1, r5
 800a82e:	eb63 0301 	sbc.w	r3, r3, r1
 800a832:	647b      	str	r3, [r7, #68]	; 0x44
 800a834:	f04f 0200 	mov.w	r2, #0
 800a838:	f04f 0300 	mov.w	r3, #0
 800a83c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a840:	4649      	mov	r1, r9
 800a842:	018b      	lsls	r3, r1, #6
 800a844:	4641      	mov	r1, r8
 800a846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a84a:	4641      	mov	r1, r8
 800a84c:	018a      	lsls	r2, r1, #6
 800a84e:	4641      	mov	r1, r8
 800a850:	1a51      	subs	r1, r2, r1
 800a852:	63b9      	str	r1, [r7, #56]	; 0x38
 800a854:	4649      	mov	r1, r9
 800a856:	eb63 0301 	sbc.w	r3, r3, r1
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a85c:	f04f 0200 	mov.w	r2, #0
 800a860:	f04f 0300 	mov.w	r3, #0
 800a864:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a868:	4649      	mov	r1, r9
 800a86a:	00cb      	lsls	r3, r1, #3
 800a86c:	4641      	mov	r1, r8
 800a86e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a872:	4641      	mov	r1, r8
 800a874:	00ca      	lsls	r2, r1, #3
 800a876:	4610      	mov	r0, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	4622      	mov	r2, r4
 800a87e:	189b      	adds	r3, r3, r2
 800a880:	633b      	str	r3, [r7, #48]	; 0x30
 800a882:	462b      	mov	r3, r5
 800a884:	460a      	mov	r2, r1
 800a886:	eb42 0303 	adc.w	r3, r2, r3
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	f04f 0300 	mov.w	r3, #0
 800a894:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a898:	4629      	mov	r1, r5
 800a89a:	024b      	lsls	r3, r1, #9
 800a89c:	4621      	mov	r1, r4
 800a89e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	024a      	lsls	r2, r1, #9
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a8b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a8b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a8bc:	f7f6 fb62 	bl	8000f84 <__aeabi_uldivmod>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8ca:	e067      	b.n	800a99c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8cc:	4b75      	ldr	r3, [pc, #468]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	099b      	lsrs	r3, r3, #6
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a8dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	f04f 0000 	mov.w	r0, #0
 800a8f6:	f04f 0100 	mov.w	r1, #0
 800a8fa:	0159      	lsls	r1, r3, #5
 800a8fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a900:	0150      	lsls	r0, r2, #5
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	4621      	mov	r1, r4
 800a908:	1a51      	subs	r1, r2, r1
 800a90a:	62b9      	str	r1, [r7, #40]	; 0x28
 800a90c:	4629      	mov	r1, r5
 800a90e:	eb63 0301 	sbc.w	r3, r3, r1
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a914:	f04f 0200 	mov.w	r2, #0
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a920:	4649      	mov	r1, r9
 800a922:	018b      	lsls	r3, r1, #6
 800a924:	4641      	mov	r1, r8
 800a926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a92a:	4641      	mov	r1, r8
 800a92c:	018a      	lsls	r2, r1, #6
 800a92e:	4641      	mov	r1, r8
 800a930:	ebb2 0a01 	subs.w	sl, r2, r1
 800a934:	4649      	mov	r1, r9
 800a936:	eb63 0b01 	sbc.w	fp, r3, r1
 800a93a:	f04f 0200 	mov.w	r2, #0
 800a93e:	f04f 0300 	mov.w	r3, #0
 800a942:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a946:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a94a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a94e:	4692      	mov	sl, r2
 800a950:	469b      	mov	fp, r3
 800a952:	4623      	mov	r3, r4
 800a954:	eb1a 0303 	adds.w	r3, sl, r3
 800a958:	623b      	str	r3, [r7, #32]
 800a95a:	462b      	mov	r3, r5
 800a95c:	eb4b 0303 	adc.w	r3, fp, r3
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
 800a962:	f04f 0200 	mov.w	r2, #0
 800a966:	f04f 0300 	mov.w	r3, #0
 800a96a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a96e:	4629      	mov	r1, r5
 800a970:	028b      	lsls	r3, r1, #10
 800a972:	4621      	mov	r1, r4
 800a974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a978:	4621      	mov	r1, r4
 800a97a:	028a      	lsls	r2, r1, #10
 800a97c:	4610      	mov	r0, r2
 800a97e:	4619      	mov	r1, r3
 800a980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a984:	2200      	movs	r2, #0
 800a986:	673b      	str	r3, [r7, #112]	; 0x70
 800a988:	677a      	str	r2, [r7, #116]	; 0x74
 800a98a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a98e:	f7f6 faf9 	bl	8000f84 <__aeabi_uldivmod>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4613      	mov	r3, r2
 800a998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a99c:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	0c1b      	lsrs	r3, r3, #16
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800a9ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a9be:	e0eb      	b.n	800ab98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a9c0:	4b38      	ldr	r3, [pc, #224]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a9cc:	4b35      	ldr	r3, [pc, #212]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d06b      	beq.n	800aab0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9d8:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	099b      	lsrs	r3, r3, #6
 800a9de:	2200      	movs	r2, #0
 800a9e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a9f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	f04f 0000 	mov.w	r0, #0
 800a9fc:	f04f 0100 	mov.w	r1, #0
 800aa00:	0159      	lsls	r1, r3, #5
 800aa02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa06:	0150      	lsls	r0, r2, #5
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	1a51      	subs	r1, r2, r1
 800aa10:	61b9      	str	r1, [r7, #24]
 800aa12:	4629      	mov	r1, r5
 800aa14:	eb63 0301 	sbc.w	r3, r3, r1
 800aa18:	61fb      	str	r3, [r7, #28]
 800aa1a:	f04f 0200 	mov.w	r2, #0
 800aa1e:	f04f 0300 	mov.w	r3, #0
 800aa22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800aa26:	4659      	mov	r1, fp
 800aa28:	018b      	lsls	r3, r1, #6
 800aa2a:	4651      	mov	r1, sl
 800aa2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aa30:	4651      	mov	r1, sl
 800aa32:	018a      	lsls	r2, r1, #6
 800aa34:	4651      	mov	r1, sl
 800aa36:	ebb2 0801 	subs.w	r8, r2, r1
 800aa3a:	4659      	mov	r1, fp
 800aa3c:	eb63 0901 	sbc.w	r9, r3, r1
 800aa40:	f04f 0200 	mov.w	r2, #0
 800aa44:	f04f 0300 	mov.w	r3, #0
 800aa48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa54:	4690      	mov	r8, r2
 800aa56:	4699      	mov	r9, r3
 800aa58:	4623      	mov	r3, r4
 800aa5a:	eb18 0303 	adds.w	r3, r8, r3
 800aa5e:	613b      	str	r3, [r7, #16]
 800aa60:	462b      	mov	r3, r5
 800aa62:	eb49 0303 	adc.w	r3, r9, r3
 800aa66:	617b      	str	r3, [r7, #20]
 800aa68:	f04f 0200 	mov.w	r2, #0
 800aa6c:	f04f 0300 	mov.w	r3, #0
 800aa70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800aa74:	4629      	mov	r1, r5
 800aa76:	024b      	lsls	r3, r1, #9
 800aa78:	4621      	mov	r1, r4
 800aa7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800aa7e:	4621      	mov	r1, r4
 800aa80:	024a      	lsls	r2, r1, #9
 800aa82:	4610      	mov	r0, r2
 800aa84:	4619      	mov	r1, r3
 800aa86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800aa90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa94:	f7f6 fa76 	bl	8000f84 <__aeabi_uldivmod>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aaa2:	e065      	b.n	800ab70 <HAL_RCC_GetSysClockFreq+0x420>
 800aaa4:	40023800 	.word	0x40023800
 800aaa8:	00f42400 	.word	0x00f42400
 800aaac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aab0:	4b3d      	ldr	r3, [pc, #244]	; (800aba8 <HAL_RCC_GetSysClockFreq+0x458>)
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	099b      	lsrs	r3, r3, #6
 800aab6:	2200      	movs	r2, #0
 800aab8:	4618      	mov	r0, r3
 800aaba:	4611      	mov	r1, r2
 800aabc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aac0:	653b      	str	r3, [r7, #80]	; 0x50
 800aac2:	2300      	movs	r3, #0
 800aac4:	657b      	str	r3, [r7, #84]	; 0x54
 800aac6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800aaca:	4642      	mov	r2, r8
 800aacc:	464b      	mov	r3, r9
 800aace:	f04f 0000 	mov.w	r0, #0
 800aad2:	f04f 0100 	mov.w	r1, #0
 800aad6:	0159      	lsls	r1, r3, #5
 800aad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aadc:	0150      	lsls	r0, r2, #5
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4641      	mov	r1, r8
 800aae4:	1a51      	subs	r1, r2, r1
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	4649      	mov	r1, r9
 800aaea:	eb63 0301 	sbc.w	r3, r3, r1
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	f04f 0200 	mov.w	r2, #0
 800aaf4:	f04f 0300 	mov.w	r3, #0
 800aaf8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800aafc:	4659      	mov	r1, fp
 800aafe:	018b      	lsls	r3, r1, #6
 800ab00:	4651      	mov	r1, sl
 800ab02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ab06:	4651      	mov	r1, sl
 800ab08:	018a      	lsls	r2, r1, #6
 800ab0a:	4651      	mov	r1, sl
 800ab0c:	1a54      	subs	r4, r2, r1
 800ab0e:	4659      	mov	r1, fp
 800ab10:	eb63 0501 	sbc.w	r5, r3, r1
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	00eb      	lsls	r3, r5, #3
 800ab1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab22:	00e2      	lsls	r2, r4, #3
 800ab24:	4614      	mov	r4, r2
 800ab26:	461d      	mov	r5, r3
 800ab28:	4643      	mov	r3, r8
 800ab2a:	18e3      	adds	r3, r4, r3
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	464b      	mov	r3, r9
 800ab30:	eb45 0303 	adc.w	r3, r5, r3
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	f04f 0300 	mov.w	r3, #0
 800ab3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab42:	4629      	mov	r1, r5
 800ab44:	028b      	lsls	r3, r1, #10
 800ab46:	4621      	mov	r1, r4
 800ab48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	028a      	lsls	r2, r1, #10
 800ab50:	4610      	mov	r0, r2
 800ab52:	4619      	mov	r1, r3
 800ab54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab58:	2200      	movs	r2, #0
 800ab5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ab5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab62:	f7f6 fa0f 	bl	8000f84 <__aeabi_uldivmod>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ab70:	4b0d      	ldr	r3, [pc, #52]	; (800aba8 <HAL_RCC_GetSysClockFreq+0x458>)
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	0f1b      	lsrs	r3, r3, #28
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800ab7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ab8e:	e003      	b.n	800ab98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <HAL_RCC_GetSysClockFreq+0x45c>)
 800ab92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ab96:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	37b8      	adds	r7, #184	; 0xb8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aba6:	bf00      	nop
 800aba8:	40023800 	.word	0x40023800
 800abac:	00f42400 	.word	0x00f42400

0800abb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e28d      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 8083 	beq.w	800acd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800abd0:	4b94      	ldr	r3, [pc, #592]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f003 030c 	and.w	r3, r3, #12
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d019      	beq.n	800ac10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800abdc:	4b91      	ldr	r3, [pc, #580]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800abe4:	2b08      	cmp	r3, #8
 800abe6:	d106      	bne.n	800abf6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800abe8:	4b8e      	ldr	r3, [pc, #568]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abf4:	d00c      	beq.n	800ac10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800abf6:	4b8b      	ldr	r3, [pc, #556]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800abfe:	2b0c      	cmp	r3, #12
 800ac00:	d112      	bne.n	800ac28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac02:	4b88      	ldr	r3, [pc, #544]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac0e:	d10b      	bne.n	800ac28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac10:	4b84      	ldr	r3, [pc, #528]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d05b      	beq.n	800acd4 <HAL_RCC_OscConfig+0x124>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d157      	bne.n	800acd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e25a      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac30:	d106      	bne.n	800ac40 <HAL_RCC_OscConfig+0x90>
 800ac32:	4b7c      	ldr	r3, [pc, #496]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a7b      	ldr	r2, [pc, #492]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	e01d      	b.n	800ac7c <HAL_RCC_OscConfig+0xcc>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac48:	d10c      	bne.n	800ac64 <HAL_RCC_OscConfig+0xb4>
 800ac4a:	4b76      	ldr	r3, [pc, #472]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a75      	ldr	r2, [pc, #468]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	4b73      	ldr	r3, [pc, #460]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a72      	ldr	r2, [pc, #456]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	e00b      	b.n	800ac7c <HAL_RCC_OscConfig+0xcc>
 800ac64:	4b6f      	ldr	r3, [pc, #444]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a6e      	ldr	r2, [pc, #440]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	4b6c      	ldr	r3, [pc, #432]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a6b      	ldr	r2, [pc, #428]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ac76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d013      	beq.n	800acac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac84:	f7fc fbc8 	bl	8007418 <HAL_GetTick>
 800ac88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac8a:	e008      	b.n	800ac9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac8c:	f7fc fbc4 	bl	8007418 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	2b64      	cmp	r3, #100	; 0x64
 800ac98:	d901      	bls.n	800ac9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e21f      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac9e:	4b61      	ldr	r3, [pc, #388]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0f0      	beq.n	800ac8c <HAL_RCC_OscConfig+0xdc>
 800acaa:	e014      	b.n	800acd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acac:	f7fc fbb4 	bl	8007418 <HAL_GetTick>
 800acb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acb2:	e008      	b.n	800acc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800acb4:	f7fc fbb0 	bl	8007418 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	2b64      	cmp	r3, #100	; 0x64
 800acc0:	d901      	bls.n	800acc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e20b      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acc6:	4b57      	ldr	r3, [pc, #348]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1f0      	bne.n	800acb4 <HAL_RCC_OscConfig+0x104>
 800acd2:	e000      	b.n	800acd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0302 	and.w	r3, r3, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d06f      	beq.n	800adc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ace2:	4b50      	ldr	r3, [pc, #320]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f003 030c 	and.w	r3, r3, #12
 800acea:	2b00      	cmp	r3, #0
 800acec:	d017      	beq.n	800ad1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800acee:	4b4d      	ldr	r3, [pc, #308]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800acf6:	2b08      	cmp	r3, #8
 800acf8:	d105      	bne.n	800ad06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800acfa:	4b4a      	ldr	r3, [pc, #296]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad06:	4b47      	ldr	r3, [pc, #284]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ad0e:	2b0c      	cmp	r3, #12
 800ad10:	d11c      	bne.n	800ad4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad12:	4b44      	ldr	r3, [pc, #272]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d116      	bne.n	800ad4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad1e:	4b41      	ldr	r3, [pc, #260]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <HAL_RCC_OscConfig+0x186>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d001      	beq.n	800ad36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e1d3      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad36:	4b3b      	ldr	r3, [pc, #236]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	4937      	ldr	r1, [pc, #220]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad4a:	e03a      	b.n	800adc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d020      	beq.n	800ad96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad54:	4b34      	ldr	r3, [pc, #208]	; (800ae28 <HAL_RCC_OscConfig+0x278>)
 800ad56:	2201      	movs	r2, #1
 800ad58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad5a:	f7fc fb5d 	bl	8007418 <HAL_GetTick>
 800ad5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad60:	e008      	b.n	800ad74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad62:	f7fc fb59 	bl	8007418 <HAL_GetTick>
 800ad66:	4602      	mov	r2, r0
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d901      	bls.n	800ad74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e1b4      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad74:	4b2b      	ldr	r3, [pc, #172]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0f0      	beq.n	800ad62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad80:	4b28      	ldr	r3, [pc, #160]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	4925      	ldr	r1, [pc, #148]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	600b      	str	r3, [r1, #0]
 800ad94:	e015      	b.n	800adc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad96:	4b24      	ldr	r3, [pc, #144]	; (800ae28 <HAL_RCC_OscConfig+0x278>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad9c:	f7fc fb3c 	bl	8007418 <HAL_GetTick>
 800ada0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ada2:	e008      	b.n	800adb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ada4:	f7fc fb38 	bl	8007418 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e193      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adb6:	4b1b      	ldr	r3, [pc, #108]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f0      	bne.n	800ada4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0308 	and.w	r3, r3, #8
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d036      	beq.n	800ae3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d016      	beq.n	800ae04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800add6:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <HAL_RCC_OscConfig+0x27c>)
 800add8:	2201      	movs	r2, #1
 800adda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800addc:	f7fc fb1c 	bl	8007418 <HAL_GetTick>
 800ade0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ade2:	e008      	b.n	800adf6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ade4:	f7fc fb18 	bl	8007418 <HAL_GetTick>
 800ade8:	4602      	mov	r2, r0
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d901      	bls.n	800adf6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e173      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800adf6:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <HAL_RCC_OscConfig+0x274>)
 800adf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0f0      	beq.n	800ade4 <HAL_RCC_OscConfig+0x234>
 800ae02:	e01b      	b.n	800ae3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae04:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <HAL_RCC_OscConfig+0x27c>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae0a:	f7fc fb05 	bl	8007418 <HAL_GetTick>
 800ae0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae10:	e00e      	b.n	800ae30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae12:	f7fc fb01 	bl	8007418 <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d907      	bls.n	800ae30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e15c      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
 800ae24:	40023800 	.word	0x40023800
 800ae28:	42470000 	.word	0x42470000
 800ae2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae30:	4b8a      	ldr	r3, [pc, #552]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800ae32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1ea      	bne.n	800ae12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 8097 	beq.w	800af78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae4e:	4b83      	ldr	r3, [pc, #524]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10f      	bne.n	800ae7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60bb      	str	r3, [r7, #8]
 800ae5e:	4b7f      	ldr	r3, [pc, #508]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800ae60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae62:	4a7e      	ldr	r2, [pc, #504]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800ae64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae68:	6413      	str	r3, [r2, #64]	; 0x40
 800ae6a:	4b7c      	ldr	r3, [pc, #496]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae72:	60bb      	str	r3, [r7, #8]
 800ae74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae76:	2301      	movs	r3, #1
 800ae78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae7a:	4b79      	ldr	r3, [pc, #484]	; (800b060 <HAL_RCC_OscConfig+0x4b0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d118      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae86:	4b76      	ldr	r3, [pc, #472]	; (800b060 <HAL_RCC_OscConfig+0x4b0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a75      	ldr	r2, [pc, #468]	; (800b060 <HAL_RCC_OscConfig+0x4b0>)
 800ae8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae92:	f7fc fac1 	bl	8007418 <HAL_GetTick>
 800ae96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae98:	e008      	b.n	800aeac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae9a:	f7fc fabd 	bl	8007418 <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d901      	bls.n	800aeac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e118      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aeac:	4b6c      	ldr	r3, [pc, #432]	; (800b060 <HAL_RCC_OscConfig+0x4b0>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d0f0      	beq.n	800ae9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d106      	bne.n	800aece <HAL_RCC_OscConfig+0x31e>
 800aec0:	4b66      	ldr	r3, [pc, #408]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec4:	4a65      	ldr	r2, [pc, #404]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	6713      	str	r3, [r2, #112]	; 0x70
 800aecc:	e01c      	b.n	800af08 <HAL_RCC_OscConfig+0x358>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	2b05      	cmp	r3, #5
 800aed4:	d10c      	bne.n	800aef0 <HAL_RCC_OscConfig+0x340>
 800aed6:	4b61      	ldr	r3, [pc, #388]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeda:	4a60      	ldr	r2, [pc, #384]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aedc:	f043 0304 	orr.w	r3, r3, #4
 800aee0:	6713      	str	r3, [r2, #112]	; 0x70
 800aee2:	4b5e      	ldr	r3, [pc, #376]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee6:	4a5d      	ldr	r2, [pc, #372]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aee8:	f043 0301 	orr.w	r3, r3, #1
 800aeec:	6713      	str	r3, [r2, #112]	; 0x70
 800aeee:	e00b      	b.n	800af08 <HAL_RCC_OscConfig+0x358>
 800aef0:	4b5a      	ldr	r3, [pc, #360]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef4:	4a59      	ldr	r2, [pc, #356]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aef6:	f023 0301 	bic.w	r3, r3, #1
 800aefa:	6713      	str	r3, [r2, #112]	; 0x70
 800aefc:	4b57      	ldr	r3, [pc, #348]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af00:	4a56      	ldr	r2, [pc, #344]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800af02:	f023 0304 	bic.w	r3, r3, #4
 800af06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d015      	beq.n	800af3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af10:	f7fc fa82 	bl	8007418 <HAL_GetTick>
 800af14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af16:	e00a      	b.n	800af2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af18:	f7fc fa7e 	bl	8007418 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	f241 3288 	movw	r2, #5000	; 0x1388
 800af26:	4293      	cmp	r3, r2
 800af28:	d901      	bls.n	800af2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e0d7      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af2e:	4b4b      	ldr	r3, [pc, #300]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800af30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0ee      	beq.n	800af18 <HAL_RCC_OscConfig+0x368>
 800af3a:	e014      	b.n	800af66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af3c:	f7fc fa6c 	bl	8007418 <HAL_GetTick>
 800af40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af42:	e00a      	b.n	800af5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af44:	f7fc fa68 	bl	8007418 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af52:	4293      	cmp	r3, r2
 800af54:	d901      	bls.n	800af5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e0c1      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af5a:	4b40      	ldr	r3, [pc, #256]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800af5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1ee      	bne.n	800af44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d105      	bne.n	800af78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af6c:	4b3b      	ldr	r3, [pc, #236]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af70:	4a3a      	ldr	r2, [pc, #232]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800af72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80ad 	beq.w	800b0dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af82:	4b36      	ldr	r3, [pc, #216]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f003 030c 	and.w	r3, r3, #12
 800af8a:	2b08      	cmp	r3, #8
 800af8c:	d060      	beq.n	800b050 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d145      	bne.n	800b022 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af96:	4b33      	ldr	r3, [pc, #204]	; (800b064 <HAL_RCC_OscConfig+0x4b4>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af9c:	f7fc fa3c 	bl	8007418 <HAL_GetTick>
 800afa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afa4:	f7fc fa38 	bl	8007418 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e093      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afb6:	4b29      	ldr	r3, [pc, #164]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1f0      	bne.n	800afa4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	69da      	ldr	r2, [r3, #28]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	431a      	orrs	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	019b      	lsls	r3, r3, #6
 800afd2:	431a      	orrs	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd8:	085b      	lsrs	r3, r3, #1
 800afda:	3b01      	subs	r3, #1
 800afdc:	041b      	lsls	r3, r3, #16
 800afde:	431a      	orrs	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	061b      	lsls	r3, r3, #24
 800afe6:	431a      	orrs	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afec:	071b      	lsls	r3, r3, #28
 800afee:	491b      	ldr	r1, [pc, #108]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aff4:	4b1b      	ldr	r3, [pc, #108]	; (800b064 <HAL_RCC_OscConfig+0x4b4>)
 800aff6:	2201      	movs	r2, #1
 800aff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800affa:	f7fc fa0d 	bl	8007418 <HAL_GetTick>
 800affe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b000:	e008      	b.n	800b014 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b002:	f7fc fa09 	bl	8007418 <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d901      	bls.n	800b014 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e064      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b014:	4b11      	ldr	r3, [pc, #68]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0f0      	beq.n	800b002 <HAL_RCC_OscConfig+0x452>
 800b020:	e05c      	b.n	800b0dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b022:	4b10      	ldr	r3, [pc, #64]	; (800b064 <HAL_RCC_OscConfig+0x4b4>)
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b028:	f7fc f9f6 	bl	8007418 <HAL_GetTick>
 800b02c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b02e:	e008      	b.n	800b042 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b030:	f7fc f9f2 	bl	8007418 <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d901      	bls.n	800b042 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e04d      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b042:	4b06      	ldr	r3, [pc, #24]	; (800b05c <HAL_RCC_OscConfig+0x4ac>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1f0      	bne.n	800b030 <HAL_RCC_OscConfig+0x480>
 800b04e:	e045      	b.n	800b0dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d107      	bne.n	800b068 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e040      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
 800b05c:	40023800 	.word	0x40023800
 800b060:	40007000 	.word	0x40007000
 800b064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b068:	4b1f      	ldr	r3, [pc, #124]	; (800b0e8 <HAL_RCC_OscConfig+0x538>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d030      	beq.n	800b0d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b080:	429a      	cmp	r2, r3
 800b082:	d129      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b08e:	429a      	cmp	r2, r3
 800b090:	d122      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b098:	4013      	ands	r3, r2
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b09e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d119      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ae:	085b      	lsrs	r3, r3, #1
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d10f      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d107      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d001      	beq.n	800b0dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e000      	b.n	800b0de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	40023800 	.word	0x40023800

0800b0ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e066      	b.n	800b1d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	7f5b      	ldrb	r3, [r3, #29]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d105      	bne.n	800b118 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7fa ff10 	bl	8005f38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	22ca      	movs	r2, #202	; 0xca
 800b124:	625a      	str	r2, [r3, #36]	; 0x24
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2253      	movs	r2, #83	; 0x53
 800b12c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f927 	bl	800b382 <RTC_EnterInitMode>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d12c      	bne.n	800b198 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	6812      	ldr	r2, [r2, #0]
 800b148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b150:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6899      	ldr	r1, [r3, #8]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	68d2      	ldr	r2, [r2, #12]
 800b178:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6919      	ldr	r1, [r3, #16]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	041a      	lsls	r2, r3, #16
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f92e 	bl	800b3f0 <RTC_ExitInitMode>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d113      	bne.n	800b1c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b1ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	699a      	ldr	r2, [r3, #24]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	22ff      	movs	r2, #255	; 0xff
 800b1cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b20a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b20e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	0c1b      	lsrs	r3, r3, #16
 800b214:	b2db      	uxtb	r3, r3
 800b216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	b2db      	uxtb	r3, r3
 800b226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	0d9b      	lsrs	r3, r3, #22
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d11a      	bne.n	800b28a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 f8ee 	bl	800b43a <RTC_Bcd2ToByte>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f8e5 	bl	800b43a <RTC_Bcd2ToByte>
 800b270:	4603      	mov	r3, r0
 800b272:	461a      	mov	r2, r3
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	789b      	ldrb	r3, [r3, #2]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f8dc 	bl	800b43a <RTC_Bcd2ToByte>
 800b282:	4603      	mov	r3, r0
 800b284:	461a      	mov	r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b2ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	0c1b      	lsrs	r3, r3, #16
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	0a1b      	lsrs	r3, r3, #8
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f003 031f 	and.w	r3, r3, #31
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	0b5b      	lsrs	r3, r3, #13
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	f003 0307 	and.w	r3, r3, #7
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d11a      	bne.n	800b328 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	78db      	ldrb	r3, [r3, #3]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f89f 	bl	800b43a <RTC_Bcd2ToByte>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	461a      	mov	r2, r3
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 f896 	bl	800b43a <RTC_Bcd2ToByte>
 800b30e:	4603      	mov	r3, r0
 800b310:	461a      	mov	r2, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	789b      	ldrb	r3, [r3, #2]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 f88d 	bl	800b43a <RTC_Bcd2ToByte>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68da      	ldr	r2, [r3, #12]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b34c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b34e:	f7fc f863 	bl	8007418 <HAL_GetTick>
 800b352:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b354:	e009      	b.n	800b36a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b356:	f7fc f85f 	bl	8007418 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b364:	d901      	bls.n	800b36a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e007      	b.n	800b37a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f003 0320 	and.w	r3, r3, #32
 800b374:	2b00      	cmp	r3, #0
 800b376:	d0ee      	beq.n	800b356 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b084      	sub	sp, #16
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d122      	bne.n	800b3e6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b3b0:	f7fc f832 	bl	8007418 <HAL_GetTick>
 800b3b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b3b6:	e00c      	b.n	800b3d2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b3b8:	f7fc f82e 	bl	8007418 <HAL_GetTick>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3c6:	d904      	bls.n	800b3d2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2204      	movs	r2, #4
 800b3cc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <RTC_EnterInitMode+0x64>
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d1e8      	bne.n	800b3b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b40a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff ff89 	bl	800b332 <HAL_RTC_WaitForSynchro>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d004      	beq.n	800b430 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2204      	movs	r2, #4
 800b42a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	4603      	mov	r3, r0
 800b442:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	091b      	lsrs	r3, r3, #4
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	461a      	mov	r2, r3
 800b450:	0092      	lsls	r2, r2, #2
 800b452:	4413      	add	r3, r2
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	f003 030f 	and.w	r3, r3, #15
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	4413      	add	r3, r2
 800b464:	b2db      	uxtb	r3, r3
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b472:	b480      	push	{r7}
 800b474:	b087      	sub	sp, #28
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3350      	adds	r3, #80	; 0x50
 800b488:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	4413      	add	r3, r2
 800b492:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	601a      	str	r2, [r3, #0]
}
 800b49a:	bf00      	nop
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3350      	adds	r3, #80	; 0x50
 800b4ba:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e07b      	b.n	800b5e0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d108      	bne.n	800b502 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4f8:	d009      	beq.n	800b50e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	61da      	str	r2, [r3, #28]
 800b500:	e005      	b.n	800b50e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7fa fd2f 	bl	8005f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2202      	movs	r2, #2
 800b532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b544:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b560:	431a      	orrs	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	431a      	orrs	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	f003 0301 	and.w	r3, r3, #1
 800b574:	431a      	orrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b57e:	431a      	orrs	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b588:	431a      	orrs	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b592:	ea42 0103 	orr.w	r1, r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b59a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	0c1b      	lsrs	r3, r3, #16
 800b5ac:	f003 0104 	and.w	r1, r3, #4
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	f003 0210 	and.w	r2, r3, #16
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	69da      	ldr	r2, [r3, #28]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <HAL_SPI_Transmit+0x22>
 800b606:	2302      	movs	r3, #2
 800b608:	e126      	b.n	800b858 <HAL_SPI_Transmit+0x270>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b612:	f7fb ff01 	bl	8007418 <HAL_GetTick>
 800b616:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b618:	88fb      	ldrh	r3, [r7, #6]
 800b61a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b01      	cmp	r3, #1
 800b626:	d002      	beq.n	800b62e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b628:	2302      	movs	r3, #2
 800b62a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b62c:	e10b      	b.n	800b846 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <HAL_SPI_Transmit+0x52>
 800b634:	88fb      	ldrh	r3, [r7, #6]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d102      	bne.n	800b640 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b63e:	e102      	b.n	800b846 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2203      	movs	r2, #3
 800b644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	88fa      	ldrh	r2, [r7, #6]
 800b658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	88fa      	ldrh	r2, [r7, #6]
 800b65e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b686:	d10f      	bne.n	800b6a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b2:	2b40      	cmp	r3, #64	; 0x40
 800b6b4:	d007      	beq.n	800b6c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6ce:	d14b      	bne.n	800b768 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <HAL_SPI_Transmit+0xf6>
 800b6d8:	8afb      	ldrh	r3, [r7, #22]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d13e      	bne.n	800b75c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	881a      	ldrh	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	1c9a      	adds	r2, r3, #2
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b702:	e02b      	b.n	800b75c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d112      	bne.n	800b738 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b716:	881a      	ldrh	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	1c9a      	adds	r2, r3, #2
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	3b01      	subs	r3, #1
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	86da      	strh	r2, [r3, #54]	; 0x36
 800b736:	e011      	b.n	800b75c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b738:	f7fb fe6e 	bl	8007418 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d803      	bhi.n	800b750 <HAL_SPI_Transmit+0x168>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74e:	d102      	bne.n	800b756 <HAL_SPI_Transmit+0x16e>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d102      	bne.n	800b75c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b756:	2303      	movs	r3, #3
 800b758:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b75a:	e074      	b.n	800b846 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b760:	b29b      	uxth	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1ce      	bne.n	800b704 <HAL_SPI_Transmit+0x11c>
 800b766:	e04c      	b.n	800b802 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <HAL_SPI_Transmit+0x18e>
 800b770:	8afb      	ldrh	r3, [r7, #22]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d140      	bne.n	800b7f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	330c      	adds	r3, #12
 800b780:	7812      	ldrb	r2, [r2, #0]
 800b782:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b792:	b29b      	uxth	r3, r3
 800b794:	3b01      	subs	r3, #1
 800b796:	b29a      	uxth	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b79c:	e02c      	b.n	800b7f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f003 0302 	and.w	r3, r3, #2
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d113      	bne.n	800b7d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	86da      	strh	r2, [r3, #54]	; 0x36
 800b7d2:	e011      	b.n	800b7f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7d4:	f7fb fe20 	bl	8007418 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d803      	bhi.n	800b7ec <HAL_SPI_Transmit+0x204>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ea:	d102      	bne.n	800b7f2 <HAL_SPI_Transmit+0x20a>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b7f6:	e026      	b.n	800b846 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1cd      	bne.n	800b79e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b802:	69ba      	ldr	r2, [r7, #24]
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fa62 	bl	800bcd0 <SPI_EndRxTxTransaction>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2220      	movs	r2, #32
 800b816:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b820:	2300      	movs	r3, #0
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	613b      	str	r3, [r7, #16]
 800b834:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	77fb      	strb	r3, [r7, #31]
 800b842:	e000      	b.n	800b846 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b844:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b856:	7ffb      	ldrb	r3, [r7, #31]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3720      	adds	r7, #32
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08c      	sub	sp, #48	; 0x30
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b86e:	2301      	movs	r3, #1
 800b870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d101      	bne.n	800b886 <HAL_SPI_TransmitReceive+0x26>
 800b882:	2302      	movs	r3, #2
 800b884:	e18a      	b.n	800bb9c <HAL_SPI_TransmitReceive+0x33c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b88e:	f7fb fdc3 	bl	8007418 <HAL_GetTick>
 800b892:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8a4:	887b      	ldrh	r3, [r7, #2]
 800b8a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d00f      	beq.n	800b8d0 <HAL_SPI_TransmitReceive+0x70>
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8b6:	d107      	bne.n	800b8c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <HAL_SPI_TransmitReceive+0x68>
 800b8c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d003      	beq.n	800b8d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8ce:	e15b      	b.n	800bb88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <HAL_SPI_TransmitReceive+0x82>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <HAL_SPI_TransmitReceive+0x82>
 800b8dc:	887b      	ldrh	r3, [r7, #2]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d103      	bne.n	800b8ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8e8:	e14e      	b.n	800bb88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	d003      	beq.n	800b8fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2205      	movs	r2, #5
 800b8fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	887a      	ldrh	r2, [r7, #2]
 800b90e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	887a      	ldrh	r2, [r7, #2]
 800b914:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	887a      	ldrh	r2, [r7, #2]
 800b920:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	887a      	ldrh	r2, [r7, #2]
 800b926:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93e:	2b40      	cmp	r3, #64	; 0x40
 800b940:	d007      	beq.n	800b952 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b950:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b95a:	d178      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <HAL_SPI_TransmitReceive+0x10a>
 800b964:	8b7b      	ldrh	r3, [r7, #26]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d166      	bne.n	800ba38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96e:	881a      	ldrh	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	1c9a      	adds	r2, r3, #2
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b98e:	e053      	b.n	800ba38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d11b      	bne.n	800b9d6 <HAL_SPI_TransmitReceive+0x176>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d016      	beq.n	800b9d6 <HAL_SPI_TransmitReceive+0x176>
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d113      	bne.n	800b9d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b2:	881a      	ldrh	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	1c9a      	adds	r2, r3, #2
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d119      	bne.n	800ba18 <HAL_SPI_TransmitReceive+0x1b8>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d014      	beq.n	800ba18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68da      	ldr	r2, [r3, #12]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f8:	b292      	uxth	r2, r2
 800b9fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba00:	1c9a      	adds	r2, r3, #2
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba14:	2301      	movs	r3, #1
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba18:	f7fb fcfe 	bl	8007418 <HAL_GetTick>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d807      	bhi.n	800ba38 <HAL_SPI_TransmitReceive+0x1d8>
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2e:	d003      	beq.n	800ba38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba36:	e0a7      	b.n	800bb88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1a6      	bne.n	800b990 <HAL_SPI_TransmitReceive+0x130>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1a1      	bne.n	800b990 <HAL_SPI_TransmitReceive+0x130>
 800ba4c:	e07c      	b.n	800bb48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <HAL_SPI_TransmitReceive+0x1fc>
 800ba56:	8b7b      	ldrh	r3, [r7, #26]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d16b      	bne.n	800bb34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	330c      	adds	r3, #12
 800ba66:	7812      	ldrb	r2, [r2, #0]
 800ba68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	1c5a      	adds	r2, r3, #1
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba82:	e057      	b.n	800bb34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d11c      	bne.n	800bacc <HAL_SPI_TransmitReceive+0x26c>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d017      	beq.n	800bacc <HAL_SPI_TransmitReceive+0x26c>
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d114      	bne.n	800bacc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	330c      	adds	r3, #12
 800baac:	7812      	ldrb	r2, [r2, #0]
 800baae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800babe:	b29b      	uxth	r3, r3
 800bac0:	3b01      	subs	r3, #1
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d119      	bne.n	800bb0e <HAL_SPI_TransmitReceive+0x2ae>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bade:	b29b      	uxth	r3, r3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d014      	beq.n	800bb0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68da      	ldr	r2, [r3, #12]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3b01      	subs	r3, #1
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb0e:	f7fb fc83 	bl	8007418 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d803      	bhi.n	800bb26 <HAL_SPI_TransmitReceive+0x2c6>
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb24:	d102      	bne.n	800bb2c <HAL_SPI_TransmitReceive+0x2cc>
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d103      	bne.n	800bb34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb32:	e029      	b.n	800bb88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1a2      	bne.n	800ba84 <HAL_SPI_TransmitReceive+0x224>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d19d      	bne.n	800ba84 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 f8bf 	bl	800bcd0 <SPI_EndRxTxTransaction>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d006      	beq.n	800bb66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2220      	movs	r2, #32
 800bb62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bb64:	e010      	b.n	800bb88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10b      	bne.n	800bb86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	e000      	b.n	800bb88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3730      	adds	r7, #48	; 0x30
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbb2:	b2db      	uxtb	r3, r3
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	603b      	str	r3, [r7, #0]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bbd0:	f7fb fc22 	bl	8007418 <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	1a9b      	subs	r3, r3, r2
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	4413      	add	r3, r2
 800bbde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bbe0:	f7fb fc1a 	bl	8007418 <HAL_GetTick>
 800bbe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bbe6:	4b39      	ldr	r3, [pc, #228]	; (800bccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	015b      	lsls	r3, r3, #5
 800bbec:	0d1b      	lsrs	r3, r3, #20
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	fb02 f303 	mul.w	r3, r2, r3
 800bbf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bbf6:	e054      	b.n	800bca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfe:	d050      	beq.n	800bca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc00:	f7fb fc0a 	bl	8007418 <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	69fa      	ldr	r2, [r7, #28]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d902      	bls.n	800bc16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d13d      	bne.n	800bc92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc2e:	d111      	bne.n	800bc54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc38:	d004      	beq.n	800bc44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc42:	d107      	bne.n	800bc54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc5c:	d10f      	bne.n	800bc7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e017      	b.n	800bcc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	bf0c      	ite	eq
 800bcb2:	2301      	moveq	r3, #1
 800bcb4:	2300      	movne	r3, #0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	461a      	mov	r2, r3
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d19b      	bne.n	800bbf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	2000000c 	.word	0x2000000c

0800bcd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bcdc:	4b1b      	ldr	r3, [pc, #108]	; (800bd4c <SPI_EndRxTxTransaction+0x7c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a1b      	ldr	r2, [pc, #108]	; (800bd50 <SPI_EndRxTxTransaction+0x80>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	0d5b      	lsrs	r3, r3, #21
 800bce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bcec:	fb02 f303 	mul.w	r3, r2, r3
 800bcf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcfa:	d112      	bne.n	800bd22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2200      	movs	r2, #0
 800bd04:	2180      	movs	r1, #128	; 0x80
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f7ff ff5a 	bl	800bbc0 <SPI_WaitFlagStateUntilTimeout>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d016      	beq.n	800bd40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f043 0220 	orr.w	r2, r3, #32
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e00f      	b.n	800bd42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00a      	beq.n	800bd3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd38:	2b80      	cmp	r3, #128	; 0x80
 800bd3a:	d0f2      	beq.n	800bd22 <SPI_EndRxTxTransaction+0x52>
 800bd3c:	e000      	b.n	800bd40 <SPI_EndRxTxTransaction+0x70>
        break;
 800bd3e:	bf00      	nop
  }

  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	2000000c 	.word	0x2000000c
 800bd50:	165e9f81 	.word	0x165e9f81

0800bd54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e03f      	b.n	800bde6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7fa f94e 	bl	800601c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2224      	movs	r2, #36	; 0x24
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 f87b 	bl	800ce94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	691a      	ldr	r2, [r3, #16]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	695a      	ldr	r2, [r3, #20]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e021      	b.n	800be44 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2224      	movs	r2, #36	; 0x24
 800be04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be16:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7fa faed 	bl	80063f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af02      	add	r7, sp, #8
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	4613      	mov	r3, r2
 800be5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b20      	cmp	r3, #32
 800be6a:	d17c      	bne.n	800bf66 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <HAL_UART_Transmit+0x2c>
 800be72:	88fb      	ldrh	r3, [r7, #6]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e075      	b.n	800bf68 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be82:	2b01      	cmp	r3, #1
 800be84:	d101      	bne.n	800be8a <HAL_UART_Transmit+0x3e>
 800be86:	2302      	movs	r3, #2
 800be88:	e06e      	b.n	800bf68 <HAL_UART_Transmit+0x11c>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2221      	movs	r2, #33	; 0x21
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bea0:	f7fb faba 	bl	8007418 <HAL_GetTick>
 800bea4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	88fa      	ldrh	r2, [r7, #6]
 800beaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	88fa      	ldrh	r2, [r7, #6]
 800beb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beba:	d108      	bne.n	800bece <HAL_UART_Transmit+0x82>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d104      	bne.n	800bece <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	61bb      	str	r3, [r7, #24]
 800becc:	e003      	b.n	800bed6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bede:	e02a      	b.n	800bf36 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2200      	movs	r2, #0
 800bee8:	2180      	movs	r1, #128	; 0x80
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 fd03 	bl	800c8f6 <UART_WaitOnFlagUntilTimeout>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bef6:	2303      	movs	r3, #3
 800bef8:	e036      	b.n	800bf68 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10b      	bne.n	800bf18 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	3302      	adds	r3, #2
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	e007      	b.n	800bf28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	781a      	ldrb	r2, [r3, #0]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	3301      	adds	r3, #1
 800bf26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1cf      	bne.n	800bee0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2200      	movs	r2, #0
 800bf48:	2140      	movs	r1, #64	; 0x40
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 fcd3 	bl	800c8f6 <UART_WaitOnFlagUntilTimeout>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e006      	b.n	800bf68 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e000      	b.n	800bf68 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bf66:	2302      	movs	r3, #2
  }
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	; 0x30
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b20      	cmp	r3, #32
 800bf88:	d165      	bne.n	800c056 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <HAL_UART_Transmit_DMA+0x26>
 800bf90:	88fb      	ldrh	r3, [r7, #6]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e05e      	b.n	800c058 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d101      	bne.n	800bfa8 <HAL_UART_Transmit_DMA+0x38>
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	e057      	b.n	800c058 <HAL_UART_Transmit_DMA+0xe8>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	88fa      	ldrh	r2, [r7, #6]
 800bfba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	88fa      	ldrh	r2, [r7, #6]
 800bfc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2221      	movs	r2, #33	; 0x21
 800bfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd4:	4a22      	ldr	r2, [pc, #136]	; (800c060 <HAL_UART_Transmit_DMA+0xf0>)
 800bfd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfdc:	4a21      	ldr	r2, [pc, #132]	; (800c064 <HAL_UART_Transmit_DMA+0xf4>)
 800bfde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe4:	4a20      	ldr	r2, [pc, #128]	; (800c068 <HAL_UART_Transmit_DMA+0xf8>)
 800bfe6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfec:	2200      	movs	r2, #0
 800bfee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bff0:	f107 0308 	add.w	r3, r7, #8
 800bff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	6819      	ldr	r1, [r3, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3304      	adds	r3, #4
 800c004:	461a      	mov	r2, r3
 800c006:	88fb      	ldrh	r3, [r7, #6]
 800c008:	f7fc f896 	bl	8008138 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c014:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3314      	adds	r3, #20
 800c024:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	617b      	str	r3, [r7, #20]
   return(result);
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c034:	62bb      	str	r3, [r7, #40]	; 0x28
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3314      	adds	r3, #20
 800c03c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c03e:	627a      	str	r2, [r7, #36]	; 0x24
 800c040:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6a39      	ldr	r1, [r7, #32]
 800c044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e5      	bne.n	800c01e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	e000      	b.n	800c058 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c056:	2302      	movs	r3, #2
  }
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3730      	adds	r7, #48	; 0x30
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	0800c651 	.word	0x0800c651
 800c064:	0800c6eb 	.word	0x0800c6eb
 800c068:	0800c863 	.word	0x0800c863

0800c06c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	4613      	mov	r3, r2
 800c078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b20      	cmp	r3, #32
 800c084:	d11d      	bne.n	800c0c2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <HAL_UART_Receive_DMA+0x26>
 800c08c:	88fb      	ldrh	r3, [r7, #6]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e016      	b.n	800c0c4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d101      	bne.n	800c0a4 <HAL_UART_Receive_DMA+0x38>
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e00f      	b.n	800c0c4 <HAL_UART_Receive_DMA+0x58>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 fc8b 	bl	800c9d4 <UART_Start_Receive_DMA>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	e000      	b.n	800c0c4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c0c2:	2302      	movs	r3, #2
  }
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b0ba      	sub	sp, #232	; 0xe8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c102:	f003 030f 	and.w	r3, r3, #15
 800c106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c10a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10f      	bne.n	800c132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c116:	f003 0320 	and.w	r3, r3, #32
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d009      	beq.n	800c132 <HAL_UART_IRQHandler+0x66>
 800c11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c122:	f003 0320 	and.w	r3, r3, #32
 800c126:	2b00      	cmp	r3, #0
 800c128:	d003      	beq.n	800c132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fdf7 	bl	800cd1e <UART_Receive_IT>
      return;
 800c130:	e256      	b.n	800c5e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 80de 	beq.w	800c2f8 <HAL_UART_IRQHandler+0x22c>
 800c13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c14c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 80d1 	beq.w	800c2f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00b      	beq.n	800c17a <HAL_UART_IRQHandler+0xae>
 800c162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c172:	f043 0201 	orr.w	r2, r3, #1
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00b      	beq.n	800c19e <HAL_UART_IRQHandler+0xd2>
 800c186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c196:	f043 0202 	orr.w	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a2:	f003 0302 	and.w	r3, r3, #2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00b      	beq.n	800c1c2 <HAL_UART_IRQHandler+0xf6>
 800c1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	f043 0204 	orr.w	r2, r3, #4
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c6:	f003 0308 	and.w	r3, r3, #8
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d011      	beq.n	800c1f2 <HAL_UART_IRQHandler+0x126>
 800c1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d105      	bne.n	800c1e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d005      	beq.n	800c1f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	f043 0208 	orr.w	r2, r3, #8
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f000 81ed 	beq.w	800c5d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c200:	f003 0320 	and.w	r3, r3, #32
 800c204:	2b00      	cmp	r3, #0
 800c206:	d008      	beq.n	800c21a <HAL_UART_IRQHandler+0x14e>
 800c208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c20c:	f003 0320 	and.w	r3, r3, #32
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fd82 	bl	800cd1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c224:	2b40      	cmp	r3, #64	; 0x40
 800c226:	bf0c      	ite	eq
 800c228:	2301      	moveq	r3, #1
 800c22a:	2300      	movne	r3, #0
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c236:	f003 0308 	and.w	r3, r3, #8
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d103      	bne.n	800c246 <HAL_UART_IRQHandler+0x17a>
 800c23e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c242:	2b00      	cmp	r3, #0
 800c244:	d04f      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fc8a 	bl	800cb60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	d141      	bne.n	800c2de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3314      	adds	r3, #20
 800c260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c268:	e853 3f00 	ldrex	r3, [r3]
 800c26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3314      	adds	r3, #20
 800c282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c28a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1d9      	bne.n	800c25a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d013      	beq.n	800c2d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	4a7d      	ldr	r2, [pc, #500]	; (800c4a8 <HAL_UART_IRQHandler+0x3dc>)
 800c2b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fc f804 	bl	80082c8 <HAL_DMA_Abort_IT>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d016      	beq.n	800c2f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d4:	e00e      	b.n	800c2f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f9a4 	bl	800c624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2dc:	e00a      	b.n	800c2f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f9a0 	bl	800c624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2e4:	e006      	b.n	800c2f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f99c 	bl	800c624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c2f2:	e170      	b.n	800c5d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f4:	bf00      	nop
    return;
 800c2f6:	e16e      	b.n	800c5d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	f040 814a 	bne.w	800c596 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c306:	f003 0310 	and.w	r3, r3, #16
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 8143 	beq.w	800c596 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c314:	f003 0310 	and.w	r3, r3, #16
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 813c 	beq.w	800c596 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c31e:	2300      	movs	r3, #0
 800c320:	60bb      	str	r3, [r7, #8]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	60bb      	str	r3, [r7, #8]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	60bb      	str	r3, [r7, #8]
 800c332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33e:	2b40      	cmp	r3, #64	; 0x40
 800c340:	f040 80b4 	bne.w	800c4ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 8140 	beq.w	800c5da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c35e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c362:	429a      	cmp	r2, r3
 800c364:	f080 8139 	bcs.w	800c5da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c36e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c374:	69db      	ldr	r3, [r3, #28]
 800c376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37a:	f000 8088 	beq.w	800c48e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	330c      	adds	r3, #12
 800c384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c39c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	330c      	adds	r3, #12
 800c3a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c3aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c3c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1d9      	bne.n	800c37e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3314      	adds	r3, #20
 800c3d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3dc:	f023 0301 	bic.w	r3, r3, #1
 800c3e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3314      	adds	r3, #20
 800c3ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c3f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c3f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e1      	bne.n	800c3ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3314      	adds	r3, #20
 800c40c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c41c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3314      	adds	r3, #20
 800c426:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c42a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c42c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e3      	bne.n	800c406 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2220      	movs	r2, #32
 800c442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	330c      	adds	r3, #12
 800c452:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c45e:	f023 0310 	bic.w	r3, r3, #16
 800c462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	330c      	adds	r3, #12
 800c46c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c470:	65ba      	str	r2, [r7, #88]	; 0x58
 800c472:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e3      	bne.n	800c44c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fb fead 	bl	80081e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c496:	b29b      	uxth	r3, r3
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f8ca 	bl	800c638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4a4:	e099      	b.n	800c5da <HAL_UART_IRQHandler+0x50e>
 800c4a6:	bf00      	nop
 800c4a8:	0800cc27 	.word	0x0800cc27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 808b 	beq.w	800c5de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c4c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 8086 	beq.w	800c5de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	330c      	adds	r3, #12
 800c4d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	e853 3f00 	ldrex	r3, [r3]
 800c4e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	330c      	adds	r3, #12
 800c4f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c4f6:	647a      	str	r2, [r7, #68]	; 0x44
 800c4f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4fe:	e841 2300 	strex	r3, r2, [r1]
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1e3      	bne.n	800c4d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3314      	adds	r3, #20
 800c510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	e853 3f00 	ldrex	r3, [r3]
 800c518:	623b      	str	r3, [r7, #32]
   return(result);
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	f023 0301 	bic.w	r3, r3, #1
 800c520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3314      	adds	r3, #20
 800c52a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c52e:	633a      	str	r2, [r7, #48]	; 0x30
 800c530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c536:	e841 2300 	strex	r3, r2, [r1]
 800c53a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1e3      	bne.n	800c50a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2220      	movs	r2, #32
 800c546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	330c      	adds	r3, #12
 800c556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	e853 3f00 	ldrex	r3, [r3]
 800c55e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f023 0310 	bic.w	r3, r3, #16
 800c566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	330c      	adds	r3, #12
 800c570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c574:	61fa      	str	r2, [r7, #28]
 800c576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c578:	69b9      	ldr	r1, [r7, #24]
 800c57a:	69fa      	ldr	r2, [r7, #28]
 800c57c:	e841 2300 	strex	r3, r2, [r1]
 800c580:	617b      	str	r3, [r7, #20]
   return(result);
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1e3      	bne.n	800c550 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f852 	bl	800c638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c594:	e023      	b.n	800c5de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d009      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x4ea>
 800c5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fb4d 	bl	800cc4e <UART_Transmit_IT>
    return;
 800c5b4:	e014      	b.n	800c5e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00e      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x514>
 800c5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d008      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fb8d 	bl	800ccee <UART_EndTransmit_IT>
    return;
 800c5d4:	e004      	b.n	800c5e0 <HAL_UART_IRQHandler+0x514>
    return;
 800c5d6:	bf00      	nop
 800c5d8:	e002      	b.n	800c5e0 <HAL_UART_IRQHandler+0x514>
      return;
 800c5da:	bf00      	nop
 800c5dc:	e000      	b.n	800c5e0 <HAL_UART_IRQHandler+0x514>
      return;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	37e8      	adds	r7, #232	; 0xe8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b090      	sub	sp, #64	; 0x40
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d137      	bne.n	800c6dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66e:	2200      	movs	r2, #0
 800c670:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3314      	adds	r3, #20
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	e853 3f00 	ldrex	r3, [r3]
 800c680:	623b      	str	r3, [r7, #32]
   return(result);
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c688:	63bb      	str	r3, [r7, #56]	; 0x38
 800c68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3314      	adds	r3, #20
 800c690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c692:	633a      	str	r2, [r7, #48]	; 0x30
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69a:	e841 2300 	strex	r3, r2, [r1]
 800c69e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1e5      	bne.n	800c672 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	330c      	adds	r3, #12
 800c6ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	330c      	adds	r3, #12
 800c6c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c6:	61fa      	str	r2, [r7, #28]
 800c6c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ca:	69b9      	ldr	r1, [r7, #24]
 800c6cc:	69fa      	ldr	r2, [r7, #28]
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e5      	bne.n	800c6a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6da:	e002      	b.n	800c6e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c6dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c6de:	f7ff ff83 	bl	800c5e8 <HAL_UART_TxCpltCallback>
}
 800c6e2:	bf00      	nop
 800c6e4:	3740      	adds	r7, #64	; 0x40
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f7ff ff7f 	bl	800c5fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6fe:	bf00      	nop
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b09c      	sub	sp, #112	; 0x70
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c712:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d172      	bne.n	800c808 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c724:	2200      	movs	r2, #0
 800c726:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	330c      	adds	r3, #12
 800c72e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c732:	e853 3f00 	ldrex	r3, [r3]
 800c736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c73a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c73e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	330c      	adds	r3, #12
 800c746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c748:	65ba      	str	r2, [r7, #88]	; 0x58
 800c74a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c74e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c750:	e841 2300 	strex	r3, r2, [r1]
 800c754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1e5      	bne.n	800c728 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	3314      	adds	r3, #20
 800c762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	e853 3f00 	ldrex	r3, [r3]
 800c76a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76e:	f023 0301 	bic.w	r3, r3, #1
 800c772:	667b      	str	r3, [r7, #100]	; 0x64
 800c774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3314      	adds	r3, #20
 800c77a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c77c:	647a      	str	r2, [r7, #68]	; 0x44
 800c77e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c784:	e841 2300 	strex	r3, r2, [r1]
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e5      	bne.n	800c75c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3314      	adds	r3, #20
 800c796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	e853 3f00 	ldrex	r3, [r3]
 800c79e:	623b      	str	r3, [r7, #32]
   return(result);
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7a6:	663b      	str	r3, [r7, #96]	; 0x60
 800c7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3314      	adds	r3, #20
 800c7ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7b0:	633a      	str	r2, [r7, #48]	; 0x30
 800c7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e5      	bne.n	800c790 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7c6:	2220      	movs	r2, #32
 800c7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d119      	bne.n	800c808 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	330c      	adds	r3, #12
 800c7da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	e853 3f00 	ldrex	r3, [r3]
 800c7e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f023 0310 	bic.w	r3, r3, #16
 800c7ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	330c      	adds	r3, #12
 800c7f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c7f4:	61fa      	str	r2, [r7, #28]
 800c7f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f8:	69b9      	ldr	r1, [r7, #24]
 800c7fa:	69fa      	ldr	r2, [r7, #28]
 800c7fc:	e841 2300 	strex	r3, r2, [r1]
 800c800:	617b      	str	r3, [r7, #20]
   return(result);
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1e5      	bne.n	800c7d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d106      	bne.n	800c81e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c814:	4619      	mov	r1, r3
 800c816:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c818:	f7ff ff0e 	bl	800c638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c81c:	e002      	b.n	800c824 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c81e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c820:	f7fa fb56 	bl	8006ed0 <HAL_UART_RxCpltCallback>
}
 800c824:	bf00      	nop
 800c826:	3770      	adds	r7, #112	; 0x70
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c838:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d108      	bne.n	800c854 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c846:	085b      	lsrs	r3, r3, #1
 800c848:	b29b      	uxth	r3, r3
 800c84a:	4619      	mov	r1, r3
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f7ff fef3 	bl	800c638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c852:	e002      	b.n	800c85a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7ff fedb 	bl	800c610 <HAL_UART_RxHalfCpltCallback>
}
 800c85a:	bf00      	nop
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c87e:	2b80      	cmp	r3, #128	; 0x80
 800c880:	bf0c      	ite	eq
 800c882:	2301      	moveq	r3, #1
 800c884:	2300      	movne	r3, #0
 800c886:	b2db      	uxtb	r3, r3
 800c888:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b21      	cmp	r3, #33	; 0x21
 800c894:	d108      	bne.n	800c8a8 <UART_DMAError+0x46>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c8a2:	68b8      	ldr	r0, [r7, #8]
 800c8a4:	f000 f934 	bl	800cb10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b2:	2b40      	cmp	r3, #64	; 0x40
 800c8b4:	bf0c      	ite	eq
 800c8b6:	2301      	moveq	r3, #1
 800c8b8:	2300      	movne	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b22      	cmp	r3, #34	; 0x22
 800c8c8:	d108      	bne.n	800c8dc <UART_DMAError+0x7a>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d005      	beq.n	800c8dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c8d6:	68b8      	ldr	r0, [r7, #8]
 800c8d8:	f000 f942 	bl	800cb60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e0:	f043 0210 	orr.w	r2, r3, #16
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8e8:	68b8      	ldr	r0, [r7, #8]
 800c8ea:	f7ff fe9b 	bl	800c624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ee:	bf00      	nop
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b090      	sub	sp, #64	; 0x40
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	60f8      	str	r0, [r7, #12]
 800c8fe:	60b9      	str	r1, [r7, #8]
 800c900:	603b      	str	r3, [r7, #0]
 800c902:	4613      	mov	r3, r2
 800c904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c906:	e050      	b.n	800c9aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90e:	d04c      	beq.n	800c9aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c912:	2b00      	cmp	r3, #0
 800c914:	d007      	beq.n	800c926 <UART_WaitOnFlagUntilTimeout+0x30>
 800c916:	f7fa fd7f 	bl	8007418 <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c922:	429a      	cmp	r2, r3
 800c924:	d241      	bcs.n	800c9aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	330c      	adds	r3, #12
 800c92c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	e853 3f00 	ldrex	r3, [r3]
 800c934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	330c      	adds	r3, #12
 800c944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c946:	637a      	str	r2, [r7, #52]	; 0x34
 800c948:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c94e:	e841 2300 	strex	r3, r2, [r1]
 800c952:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1e5      	bne.n	800c926 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3314      	adds	r3, #20
 800c960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	e853 3f00 	ldrex	r3, [r3]
 800c968:	613b      	str	r3, [r7, #16]
   return(result);
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f023 0301 	bic.w	r3, r3, #1
 800c970:	63bb      	str	r3, [r7, #56]	; 0x38
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3314      	adds	r3, #20
 800c978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c97a:	623a      	str	r2, [r7, #32]
 800c97c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	69f9      	ldr	r1, [r7, #28]
 800c980:	6a3a      	ldr	r2, [r7, #32]
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	61bb      	str	r3, [r7, #24]
   return(result);
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e5      	bne.n	800c95a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2220      	movs	r2, #32
 800c992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2220      	movs	r2, #32
 800c99a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e00f      	b.n	800c9ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	bf0c      	ite	eq
 800c9ba:	2301      	moveq	r3, #1
 800c9bc:	2300      	movne	r3, #0
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d09f      	beq.n	800c908 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3740      	adds	r7, #64	; 0x40
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b098      	sub	sp, #96	; 0x60
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	88fa      	ldrh	r2, [r7, #6]
 800c9ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2222      	movs	r2, #34	; 0x22
 800c9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca00:	4a40      	ldr	r2, [pc, #256]	; (800cb04 <UART_Start_Receive_DMA+0x130>)
 800ca02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca08:	4a3f      	ldr	r2, [pc, #252]	; (800cb08 <UART_Start_Receive_DMA+0x134>)
 800ca0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca10:	4a3e      	ldr	r2, [pc, #248]	; (800cb0c <UART_Start_Receive_DMA+0x138>)
 800ca12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca18:	2200      	movs	r2, #0
 800ca1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ca1c:	f107 0308 	add.w	r3, r7, #8
 800ca20:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	88fb      	ldrh	r3, [r7, #6]
 800ca34:	f7fb fb80 	bl	8008138 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ca38:	2300      	movs	r3, #0
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	613b      	str	r3, [r7, #16]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	613b      	str	r3, [r7, #16]
 800ca4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d019      	beq.n	800ca92 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	330c      	adds	r3, #12
 800ca64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca68:	e853 3f00 	ldrex	r3, [r3]
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca74:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	330c      	adds	r3, #12
 800ca7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ca80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ca84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca86:	e841 2300 	strex	r3, r2, [r1]
 800ca8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ca8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1e5      	bne.n	800ca5e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3314      	adds	r3, #20
 800ca98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800caa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa4:	f043 0301 	orr.w	r3, r3, #1
 800caa8:	657b      	str	r3, [r7, #84]	; 0x54
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3314      	adds	r3, #20
 800cab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cab2:	63ba      	str	r2, [r7, #56]	; 0x38
 800cab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e5      	bne.n	800ca92 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3314      	adds	r3, #20
 800cacc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	617b      	str	r3, [r7, #20]
   return(result);
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cadc:	653b      	str	r3, [r7, #80]	; 0x50
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3314      	adds	r3, #20
 800cae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cae6:	627a      	str	r2, [r7, #36]	; 0x24
 800cae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6a39      	ldr	r1, [r7, #32]
 800caec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e5      	bne.n	800cac6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3760      	adds	r7, #96	; 0x60
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	0800c707 	.word	0x0800c707
 800cb08:	0800c82d 	.word	0x0800c82d
 800cb0c:	0800c863 	.word	0x0800c863

0800cb10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b089      	sub	sp, #36	; 0x24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	330c      	adds	r3, #12
 800cb1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	e853 3f00 	ldrex	r3, [r3]
 800cb26:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cb2e:	61fb      	str	r3, [r7, #28]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	330c      	adds	r3, #12
 800cb36:	69fa      	ldr	r2, [r7, #28]
 800cb38:	61ba      	str	r2, [r7, #24]
 800cb3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	6979      	ldr	r1, [r7, #20]
 800cb3e:	69ba      	ldr	r2, [r7, #24]
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	613b      	str	r3, [r7, #16]
   return(result);
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e5      	bne.n	800cb18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2220      	movs	r2, #32
 800cb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cb54:	bf00      	nop
 800cb56:	3724      	adds	r7, #36	; 0x24
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b095      	sub	sp, #84	; 0x54
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	330c      	adds	r3, #12
 800cb86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb88:	643a      	str	r2, [r7, #64]	; 0x40
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e5      	bne.n	800cb68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3314      	adds	r3, #20
 800cba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	f023 0301 	bic.w	r3, r3, #1
 800cbb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3314      	adds	r3, #20
 800cbba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e5      	bne.n	800cb9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d119      	bne.n	800cc0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	330c      	adds	r3, #12
 800cbde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	e853 3f00 	ldrex	r3, [r3]
 800cbe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	f023 0310 	bic.w	r3, r3, #16
 800cbee:	647b      	str	r3, [r7, #68]	; 0x44
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	330c      	adds	r3, #12
 800cbf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbf8:	61ba      	str	r2, [r7, #24]
 800cbfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfc:	6979      	ldr	r1, [r7, #20]
 800cbfe:	69ba      	ldr	r2, [r7, #24]
 800cc00:	e841 2300 	strex	r3, r2, [r1]
 800cc04:	613b      	str	r3, [r7, #16]
   return(result);
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1e5      	bne.n	800cbd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cc1a:	bf00      	nop
 800cc1c:	3754      	adds	r7, #84	; 0x54
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7ff fcef 	bl	800c624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc46:	bf00      	nop
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b085      	sub	sp, #20
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b21      	cmp	r3, #33	; 0x21
 800cc60:	d13e      	bne.n	800cce0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc6a:	d114      	bne.n	800cc96 <UART_Transmit_IT+0x48>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d110      	bne.n	800cc96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a1b      	ldr	r3, [r3, #32]
 800cc78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	1c9a      	adds	r2, r3, #2
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	621a      	str	r2, [r3, #32]
 800cc94:	e008      	b.n	800cca8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	1c59      	adds	r1, r3, #1
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	6211      	str	r1, [r2, #32]
 800cca0:	781a      	ldrb	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10f      	bne.n	800ccdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68da      	ldr	r2, [r3, #12]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68da      	ldr	r2, [r3, #12]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e000      	b.n	800cce2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cce0:	2302      	movs	r3, #2
  }
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2220      	movs	r2, #32
 800cd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fc6a 	bl	800c5e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b08c      	sub	sp, #48	; 0x30
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b22      	cmp	r3, #34	; 0x22
 800cd30:	f040 80ab 	bne.w	800ce8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd3c:	d117      	bne.n	800cd6e <UART_Receive_IT+0x50>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d113      	bne.n	800cd6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd66:	1c9a      	adds	r2, r3, #2
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	629a      	str	r2, [r3, #40]	; 0x28
 800cd6c:	e026      	b.n	800cdbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd80:	d007      	beq.n	800cd92 <UART_Receive_IT+0x74>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <UART_Receive_IT+0x82>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d106      	bne.n	800cda0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	e008      	b.n	800cdb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d15a      	bne.n	800ce86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f022 0220 	bic.w	r2, r2, #32
 800cdde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68da      	ldr	r2, [r3, #12]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	695a      	ldr	r2, [r3, #20]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f022 0201 	bic.w	r2, r2, #1
 800cdfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2220      	movs	r2, #32
 800ce04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d135      	bne.n	800ce7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	330c      	adds	r3, #12
 800ce1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	e853 3f00 	ldrex	r3, [r3]
 800ce24:	613b      	str	r3, [r7, #16]
   return(result);
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	f023 0310 	bic.w	r3, r3, #16
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	330c      	adds	r3, #12
 800ce34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce36:	623a      	str	r2, [r7, #32]
 800ce38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3a:	69f9      	ldr	r1, [r7, #28]
 800ce3c:	6a3a      	ldr	r2, [r7, #32]
 800ce3e:	e841 2300 	strex	r3, r2, [r1]
 800ce42:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1e5      	bne.n	800ce16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0310 	and.w	r3, r3, #16
 800ce54:	2b10      	cmp	r3, #16
 800ce56:	d10a      	bne.n	800ce6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	60fb      	str	r3, [r7, #12]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff fbdf 	bl	800c638 <HAL_UARTEx_RxEventCallback>
 800ce7a:	e002      	b.n	800ce82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7fa f827 	bl	8006ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	e002      	b.n	800ce8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	e000      	b.n	800ce8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ce8a:	2302      	movs	r3, #2
  }
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3730      	adds	r7, #48	; 0x30
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce98:	b0c0      	sub	sp, #256	; 0x100
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ceac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb0:	68d9      	ldr	r1, [r3, #12]
 800ceb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	ea40 0301 	orr.w	r3, r0, r1
 800cebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	431a      	orrs	r2, r3
 800cecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	431a      	orrs	r2, r3
 800ced4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ceec:	f021 010c 	bic.w	r1, r1, #12
 800cef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cefa:	430b      	orrs	r3, r1
 800cefc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf0e:	6999      	ldr	r1, [r3, #24]
 800cf10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	ea40 0301 	orr.w	r3, r0, r1
 800cf1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	4b8f      	ldr	r3, [pc, #572]	; (800d160 <UART_SetConfig+0x2cc>)
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d005      	beq.n	800cf34 <UART_SetConfig+0xa0>
 800cf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b8d      	ldr	r3, [pc, #564]	; (800d164 <UART_SetConfig+0x2d0>)
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d104      	bne.n	800cf3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf34:	f7fd f8ce 	bl	800a0d4 <HAL_RCC_GetPCLK2Freq>
 800cf38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cf3c:	e003      	b.n	800cf46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf3e:	f7fd f8b5 	bl	800a0ac <HAL_RCC_GetPCLK1Freq>
 800cf42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf50:	f040 810c 	bne.w	800d16c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cf5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cf62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cf66:	4622      	mov	r2, r4
 800cf68:	462b      	mov	r3, r5
 800cf6a:	1891      	adds	r1, r2, r2
 800cf6c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cf6e:	415b      	adcs	r3, r3
 800cf70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cf76:	4621      	mov	r1, r4
 800cf78:	eb12 0801 	adds.w	r8, r2, r1
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	eb43 0901 	adc.w	r9, r3, r1
 800cf82:	f04f 0200 	mov.w	r2, #0
 800cf86:	f04f 0300 	mov.w	r3, #0
 800cf8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf96:	4690      	mov	r8, r2
 800cf98:	4699      	mov	r9, r3
 800cf9a:	4623      	mov	r3, r4
 800cf9c:	eb18 0303 	adds.w	r3, r8, r3
 800cfa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	eb49 0303 	adc.w	r3, r9, r3
 800cfaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cfba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cfbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	18db      	adds	r3, r3, r3
 800cfc6:	653b      	str	r3, [r7, #80]	; 0x50
 800cfc8:	4613      	mov	r3, r2
 800cfca:	eb42 0303 	adc.w	r3, r2, r3
 800cfce:	657b      	str	r3, [r7, #84]	; 0x54
 800cfd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cfd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cfd8:	f7f3 ffd4 	bl	8000f84 <__aeabi_uldivmod>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4b61      	ldr	r3, [pc, #388]	; (800d168 <UART_SetConfig+0x2d4>)
 800cfe2:	fba3 2302 	umull	r2, r3, r3, r2
 800cfe6:	095b      	lsrs	r3, r3, #5
 800cfe8:	011c      	lsls	r4, r3, #4
 800cfea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cff4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cffc:	4642      	mov	r2, r8
 800cffe:	464b      	mov	r3, r9
 800d000:	1891      	adds	r1, r2, r2
 800d002:	64b9      	str	r1, [r7, #72]	; 0x48
 800d004:	415b      	adcs	r3, r3
 800d006:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d00c:	4641      	mov	r1, r8
 800d00e:	eb12 0a01 	adds.w	sl, r2, r1
 800d012:	4649      	mov	r1, r9
 800d014:	eb43 0b01 	adc.w	fp, r3, r1
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	f04f 0300 	mov.w	r3, #0
 800d020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d02c:	4692      	mov	sl, r2
 800d02e:	469b      	mov	fp, r3
 800d030:	4643      	mov	r3, r8
 800d032:	eb1a 0303 	adds.w	r3, sl, r3
 800d036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d03a:	464b      	mov	r3, r9
 800d03c:	eb4b 0303 	adc.w	r3, fp, r3
 800d040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d050:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d058:	460b      	mov	r3, r1
 800d05a:	18db      	adds	r3, r3, r3
 800d05c:	643b      	str	r3, [r7, #64]	; 0x40
 800d05e:	4613      	mov	r3, r2
 800d060:	eb42 0303 	adc.w	r3, r2, r3
 800d064:	647b      	str	r3, [r7, #68]	; 0x44
 800d066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d06a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d06e:	f7f3 ff89 	bl	8000f84 <__aeabi_uldivmod>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4611      	mov	r1, r2
 800d078:	4b3b      	ldr	r3, [pc, #236]	; (800d168 <UART_SetConfig+0x2d4>)
 800d07a:	fba3 2301 	umull	r2, r3, r3, r1
 800d07e:	095b      	lsrs	r3, r3, #5
 800d080:	2264      	movs	r2, #100	; 0x64
 800d082:	fb02 f303 	mul.w	r3, r2, r3
 800d086:	1acb      	subs	r3, r1, r3
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d08e:	4b36      	ldr	r3, [pc, #216]	; (800d168 <UART_SetConfig+0x2d4>)
 800d090:	fba3 2302 	umull	r2, r3, r3, r2
 800d094:	095b      	lsrs	r3, r3, #5
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d09c:	441c      	add	r4, r3
 800d09e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d0a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d0ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d0b0:	4642      	mov	r2, r8
 800d0b2:	464b      	mov	r3, r9
 800d0b4:	1891      	adds	r1, r2, r2
 800d0b6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d0b8:	415b      	adcs	r3, r3
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d0c0:	4641      	mov	r1, r8
 800d0c2:	1851      	adds	r1, r2, r1
 800d0c4:	6339      	str	r1, [r7, #48]	; 0x30
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	414b      	adcs	r3, r1
 800d0ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	f04f 0300 	mov.w	r3, #0
 800d0d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d0d8:	4659      	mov	r1, fp
 800d0da:	00cb      	lsls	r3, r1, #3
 800d0dc:	4651      	mov	r1, sl
 800d0de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0e2:	4651      	mov	r1, sl
 800d0e4:	00ca      	lsls	r2, r1, #3
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	189b      	adds	r3, r3, r2
 800d0f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d0f4:	464b      	mov	r3, r9
 800d0f6:	460a      	mov	r2, r1
 800d0f8:	eb42 0303 	adc.w	r3, r2, r3
 800d0fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d10c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d114:	460b      	mov	r3, r1
 800d116:	18db      	adds	r3, r3, r3
 800d118:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11a:	4613      	mov	r3, r2
 800d11c:	eb42 0303 	adc.w	r3, r2, r3
 800d120:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d12a:	f7f3 ff2b 	bl	8000f84 <__aeabi_uldivmod>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <UART_SetConfig+0x2d4>)
 800d134:	fba3 1302 	umull	r1, r3, r3, r2
 800d138:	095b      	lsrs	r3, r3, #5
 800d13a:	2164      	movs	r1, #100	; 0x64
 800d13c:	fb01 f303 	mul.w	r3, r1, r3
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	3332      	adds	r3, #50	; 0x32
 800d146:	4a08      	ldr	r2, [pc, #32]	; (800d168 <UART_SetConfig+0x2d4>)
 800d148:	fba2 2303 	umull	r2, r3, r2, r3
 800d14c:	095b      	lsrs	r3, r3, #5
 800d14e:	f003 0207 	and.w	r2, r3, #7
 800d152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4422      	add	r2, r4
 800d15a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d15c:	e105      	b.n	800d36a <UART_SetConfig+0x4d6>
 800d15e:	bf00      	nop
 800d160:	40011000 	.word	0x40011000
 800d164:	40011400 	.word	0x40011400
 800d168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d16c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d170:	2200      	movs	r2, #0
 800d172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d17a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d17e:	4642      	mov	r2, r8
 800d180:	464b      	mov	r3, r9
 800d182:	1891      	adds	r1, r2, r2
 800d184:	6239      	str	r1, [r7, #32]
 800d186:	415b      	adcs	r3, r3
 800d188:	627b      	str	r3, [r7, #36]	; 0x24
 800d18a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d18e:	4641      	mov	r1, r8
 800d190:	1854      	adds	r4, r2, r1
 800d192:	4649      	mov	r1, r9
 800d194:	eb43 0501 	adc.w	r5, r3, r1
 800d198:	f04f 0200 	mov.w	r2, #0
 800d19c:	f04f 0300 	mov.w	r3, #0
 800d1a0:	00eb      	lsls	r3, r5, #3
 800d1a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1a6:	00e2      	lsls	r2, r4, #3
 800d1a8:	4614      	mov	r4, r2
 800d1aa:	461d      	mov	r5, r3
 800d1ac:	4643      	mov	r3, r8
 800d1ae:	18e3      	adds	r3, r4, r3
 800d1b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	eb45 0303 	adc.w	r3, r5, r3
 800d1ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d1ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d1ce:	f04f 0200 	mov.w	r2, #0
 800d1d2:	f04f 0300 	mov.w	r3, #0
 800d1d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d1da:	4629      	mov	r1, r5
 800d1dc:	008b      	lsls	r3, r1, #2
 800d1de:	4621      	mov	r1, r4
 800d1e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	008a      	lsls	r2, r1, #2
 800d1e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d1ec:	f7f3 feca 	bl	8000f84 <__aeabi_uldivmod>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4b60      	ldr	r3, [pc, #384]	; (800d378 <UART_SetConfig+0x4e4>)
 800d1f6:	fba3 2302 	umull	r2, r3, r3, r2
 800d1fa:	095b      	lsrs	r3, r3, #5
 800d1fc:	011c      	lsls	r4, r3, #4
 800d1fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d202:	2200      	movs	r2, #0
 800d204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d20c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d210:	4642      	mov	r2, r8
 800d212:	464b      	mov	r3, r9
 800d214:	1891      	adds	r1, r2, r2
 800d216:	61b9      	str	r1, [r7, #24]
 800d218:	415b      	adcs	r3, r3
 800d21a:	61fb      	str	r3, [r7, #28]
 800d21c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d220:	4641      	mov	r1, r8
 800d222:	1851      	adds	r1, r2, r1
 800d224:	6139      	str	r1, [r7, #16]
 800d226:	4649      	mov	r1, r9
 800d228:	414b      	adcs	r3, r1
 800d22a:	617b      	str	r3, [r7, #20]
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d238:	4659      	mov	r1, fp
 800d23a:	00cb      	lsls	r3, r1, #3
 800d23c:	4651      	mov	r1, sl
 800d23e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d242:	4651      	mov	r1, sl
 800d244:	00ca      	lsls	r2, r1, #3
 800d246:	4610      	mov	r0, r2
 800d248:	4619      	mov	r1, r3
 800d24a:	4603      	mov	r3, r0
 800d24c:	4642      	mov	r2, r8
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d254:	464b      	mov	r3, r9
 800d256:	460a      	mov	r2, r1
 800d258:	eb42 0303 	adc.w	r3, r2, r3
 800d25c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	67bb      	str	r3, [r7, #120]	; 0x78
 800d26a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d278:	4649      	mov	r1, r9
 800d27a:	008b      	lsls	r3, r1, #2
 800d27c:	4641      	mov	r1, r8
 800d27e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d282:	4641      	mov	r1, r8
 800d284:	008a      	lsls	r2, r1, #2
 800d286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d28a:	f7f3 fe7b 	bl	8000f84 <__aeabi_uldivmod>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4b39      	ldr	r3, [pc, #228]	; (800d378 <UART_SetConfig+0x4e4>)
 800d294:	fba3 1302 	umull	r1, r3, r3, r2
 800d298:	095b      	lsrs	r3, r3, #5
 800d29a:	2164      	movs	r1, #100	; 0x64
 800d29c:	fb01 f303 	mul.w	r3, r1, r3
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	3332      	adds	r3, #50	; 0x32
 800d2a6:	4a34      	ldr	r2, [pc, #208]	; (800d378 <UART_SetConfig+0x4e4>)
 800d2a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ac:	095b      	lsrs	r3, r3, #5
 800d2ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2b2:	441c      	add	r4, r3
 800d2b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	673b      	str	r3, [r7, #112]	; 0x70
 800d2bc:	677a      	str	r2, [r7, #116]	; 0x74
 800d2be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d2c2:	4642      	mov	r2, r8
 800d2c4:	464b      	mov	r3, r9
 800d2c6:	1891      	adds	r1, r2, r2
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	415b      	adcs	r3, r3
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2d2:	4641      	mov	r1, r8
 800d2d4:	1851      	adds	r1, r2, r1
 800d2d6:	6039      	str	r1, [r7, #0]
 800d2d8:	4649      	mov	r1, r9
 800d2da:	414b      	adcs	r3, r1
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	f04f 0200 	mov.w	r2, #0
 800d2e2:	f04f 0300 	mov.w	r3, #0
 800d2e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d2ea:	4659      	mov	r1, fp
 800d2ec:	00cb      	lsls	r3, r1, #3
 800d2ee:	4651      	mov	r1, sl
 800d2f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2f4:	4651      	mov	r1, sl
 800d2f6:	00ca      	lsls	r2, r1, #3
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	4642      	mov	r2, r8
 800d300:	189b      	adds	r3, r3, r2
 800d302:	66bb      	str	r3, [r7, #104]	; 0x68
 800d304:	464b      	mov	r3, r9
 800d306:	460a      	mov	r2, r1
 800d308:	eb42 0303 	adc.w	r3, r2, r3
 800d30c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	663b      	str	r3, [r7, #96]	; 0x60
 800d318:	667a      	str	r2, [r7, #100]	; 0x64
 800d31a:	f04f 0200 	mov.w	r2, #0
 800d31e:	f04f 0300 	mov.w	r3, #0
 800d322:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d326:	4649      	mov	r1, r9
 800d328:	008b      	lsls	r3, r1, #2
 800d32a:	4641      	mov	r1, r8
 800d32c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d330:	4641      	mov	r1, r8
 800d332:	008a      	lsls	r2, r1, #2
 800d334:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d338:	f7f3 fe24 	bl	8000f84 <__aeabi_uldivmod>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4b0d      	ldr	r3, [pc, #52]	; (800d378 <UART_SetConfig+0x4e4>)
 800d342:	fba3 1302 	umull	r1, r3, r3, r2
 800d346:	095b      	lsrs	r3, r3, #5
 800d348:	2164      	movs	r1, #100	; 0x64
 800d34a:	fb01 f303 	mul.w	r3, r1, r3
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	011b      	lsls	r3, r3, #4
 800d352:	3332      	adds	r3, #50	; 0x32
 800d354:	4a08      	ldr	r2, [pc, #32]	; (800d378 <UART_SetConfig+0x4e4>)
 800d356:	fba2 2303 	umull	r2, r3, r2, r3
 800d35a:	095b      	lsrs	r3, r3, #5
 800d35c:	f003 020f 	and.w	r2, r3, #15
 800d360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4422      	add	r2, r4
 800d368:	609a      	str	r2, [r3, #8]
}
 800d36a:	bf00      	nop
 800d36c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d370:	46bd      	mov	sp, r7
 800d372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d376:	bf00      	nop
 800d378:	51eb851f 	.word	0x51eb851f

0800d37c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d380:	4904      	ldr	r1, [pc, #16]	; (800d394 <MX_FATFS_Init+0x18>)
 800d382:	4805      	ldr	r0, [pc, #20]	; (800d398 <MX_FATFS_Init+0x1c>)
 800d384:	f003 fa2c 	bl	80107e0 <FATFS_LinkDriver>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	4b03      	ldr	r3, [pc, #12]	; (800d39c <MX_FATFS_Init+0x20>)
 800d38e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d390:	bf00      	nop
 800d392:	bd80      	pop	{r7, pc}
 800d394:	2000472c 	.word	0x2000472c
 800d398:	20000018 	.word	0x20000018
 800d39c:	20004728 	.word	0x20004728

0800d3a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d3a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f6 fbdd 	bl	8003b7c <SD_disk_initialize>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status (pdrv);
 800d3d8:	79fb      	ldrb	r3, [r7, #7]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7f6 fcb8 	bl	8003d50 <SD_disk_status>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
 800d3f6:	603b      	str	r3, [r7, #0]
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800d3fc:	7bf8      	ldrb	r0, [r7, #15]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	f7f6 fcba 	bl	8003d7c <SD_disk_read>
 800d408:	4603      	mov	r3, r0
 800d40a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	607a      	str	r2, [r7, #4]
 800d41e:	603b      	str	r3, [r7, #0]
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800d424:	7bf8      	ldrb	r0, [r7, #15]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	f7f6 fd10 	bl	8003e50 <SD_disk_write>
 800d430:	4603      	mov	r3, r0
 800d432:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	4603      	mov	r3, r0
 800d444:	603a      	str	r2, [r7, #0]
 800d446:	71fb      	strb	r3, [r7, #7]
 800d448:	460b      	mov	r3, r1
 800d44a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	79b9      	ldrb	r1, [r7, #6]
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	4618      	mov	r0, r3
 800d454:	f7f6 fd80 	bl	8003f58 <SD_disk_ioctl>
 800d458:	4603      	mov	r3, r0
 800d45a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	4a08      	ldr	r2, [pc, #32]	; (800d494 <disk_status+0x30>)
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	79fa      	ldrb	r2, [r7, #7]
 800d47c:	4905      	ldr	r1, [pc, #20]	; (800d494 <disk_status+0x30>)
 800d47e:	440a      	add	r2, r1
 800d480:	7a12      	ldrb	r2, [r2, #8]
 800d482:	4610      	mov	r0, r2
 800d484:	4798      	blx	r3
 800d486:	4603      	mov	r3, r0
 800d488:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	20004958 	.word	0x20004958

0800d498 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	4603      	mov	r3, r0
 800d4a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	4a0d      	ldr	r2, [pc, #52]	; (800d4e0 <disk_initialize+0x48>)
 800d4aa:	5cd3      	ldrb	r3, [r2, r3]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d111      	bne.n	800d4d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	4a0b      	ldr	r2, [pc, #44]	; (800d4e0 <disk_initialize+0x48>)
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	4a09      	ldr	r2, [pc, #36]	; (800d4e0 <disk_initialize+0x48>)
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4413      	add	r3, r2
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	79fa      	ldrb	r2, [r7, #7]
 800d4c6:	4906      	ldr	r1, [pc, #24]	; (800d4e0 <disk_initialize+0x48>)
 800d4c8:	440a      	add	r2, r1
 800d4ca:	7a12      	ldrb	r2, [r2, #8]
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	4798      	blx	r3
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20004958 	.word	0x20004958

0800d4e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d4e4:	b590      	push	{r4, r7, lr}
 800d4e6:	b087      	sub	sp, #28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60b9      	str	r1, [r7, #8]
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	4a0a      	ldr	r2, [pc, #40]	; (800d520 <disk_read+0x3c>)
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	689c      	ldr	r4, [r3, #8]
 800d500:	7bfb      	ldrb	r3, [r7, #15]
 800d502:	4a07      	ldr	r2, [pc, #28]	; (800d520 <disk_read+0x3c>)
 800d504:	4413      	add	r3, r2
 800d506:	7a18      	ldrb	r0, [r3, #8]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	68b9      	ldr	r1, [r7, #8]
 800d50e:	47a0      	blx	r4
 800d510:	4603      	mov	r3, r0
 800d512:	75fb      	strb	r3, [r7, #23]
  return res;
 800d514:	7dfb      	ldrb	r3, [r7, #23]
}
 800d516:	4618      	mov	r0, r3
 800d518:	371c      	adds	r7, #28
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd90      	pop	{r4, r7, pc}
 800d51e:	bf00      	nop
 800d520:	20004958 	.word	0x20004958

0800d524 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b087      	sub	sp, #28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	603b      	str	r3, [r7, #0]
 800d530:	4603      	mov	r3, r0
 800d532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d534:	7bfb      	ldrb	r3, [r7, #15]
 800d536:	4a0a      	ldr	r2, [pc, #40]	; (800d560 <disk_write+0x3c>)
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	4413      	add	r3, r2
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	68dc      	ldr	r4, [r3, #12]
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	4a07      	ldr	r2, [pc, #28]	; (800d560 <disk_write+0x3c>)
 800d544:	4413      	add	r3, r2
 800d546:	7a18      	ldrb	r0, [r3, #8]
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	47a0      	blx	r4
 800d550:	4603      	mov	r3, r0
 800d552:	75fb      	strb	r3, [r7, #23]
  return res;
 800d554:	7dfb      	ldrb	r3, [r7, #23]
}
 800d556:	4618      	mov	r0, r3
 800d558:	371c      	adds	r7, #28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd90      	pop	{r4, r7, pc}
 800d55e:	bf00      	nop
 800d560:	20004958 	.word	0x20004958

0800d564 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	4603      	mov	r3, r0
 800d56c:	603a      	str	r2, [r7, #0]
 800d56e:	71fb      	strb	r3, [r7, #7]
 800d570:	460b      	mov	r3, r1
 800d572:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	4a09      	ldr	r2, [pc, #36]	; (800d59c <disk_ioctl+0x38>)
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	691b      	ldr	r3, [r3, #16]
 800d580:	79fa      	ldrb	r2, [r7, #7]
 800d582:	4906      	ldr	r1, [pc, #24]	; (800d59c <disk_ioctl+0x38>)
 800d584:	440a      	add	r2, r1
 800d586:	7a10      	ldrb	r0, [r2, #8]
 800d588:	79b9      	ldrb	r1, [r7, #6]
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4798      	blx	r3
 800d58e:	4603      	mov	r3, r0
 800d590:	73fb      	strb	r3, [r7, #15]
  return res;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20004958 	.word	0x20004958

0800d5a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d5b0:	89fb      	ldrh	r3, [r7, #14]
 800d5b2:	021b      	lsls	r3, r3, #8
 800d5b4:	b21a      	sxth	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	b21b      	sxth	r3, r3
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	b21b      	sxth	r3, r3
 800d5c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d5c2:	89fb      	ldrh	r3, [r7, #14]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3303      	adds	r3, #3
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	021b      	lsls	r3, r3, #8
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	3202      	adds	r2, #2
 800d5e8:	7812      	ldrb	r2, [r2, #0]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	3201      	adds	r2, #1
 800d5f6:	7812      	ldrb	r2, [r2, #0]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	7812      	ldrb	r2, [r2, #0]
 800d604:	4313      	orrs	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
	return rv;
 800d608:	68fb      	ldr	r3, [r7, #12]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3714      	adds	r7, #20
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d616:	b480      	push	{r7}
 800d618:	b083      	sub	sp, #12
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	460b      	mov	r3, r1
 800d620:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	887a      	ldrh	r2, [r7, #2]
 800d62a:	b2d2      	uxtb	r2, r2
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	887b      	ldrh	r3, [r7, #2]
 800d630:	0a1b      	lsrs	r3, r3, #8
 800d632:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	607a      	str	r2, [r7, #4]
 800d63a:	887a      	ldrh	r2, [r7, #2]
 800d63c:	b2d2      	uxtb	r2, r2
 800d63e:	701a      	strb	r2, [r3, #0]
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	607a      	str	r2, [r7, #4]
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	b2d2      	uxtb	r2, r2
 800d660:	701a      	strb	r2, [r3, #0]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	0a1b      	lsrs	r3, r3, #8
 800d666:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	607a      	str	r2, [r7, #4]
 800d66e:	683a      	ldr	r2, [r7, #0]
 800d670:	b2d2      	uxtb	r2, r2
 800d672:	701a      	strb	r2, [r3, #0]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	0a1b      	lsrs	r3, r3, #8
 800d678:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	b2d2      	uxtb	r2, r2
 800d684:	701a      	strb	r2, [r3, #0]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	0a1b      	lsrs	r3, r3, #8
 800d68a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	1c5a      	adds	r2, r3, #1
 800d690:	607a      	str	r2, [r7, #4]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	b2d2      	uxtb	r2, r2
 800d696:	701a      	strb	r2, [r3, #0]
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d6a4:	b480      	push	{r7}
 800d6a6:	b087      	sub	sp, #28
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00d      	beq.n	800d6da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	1c53      	adds	r3, r2, #1
 800d6c2:	613b      	str	r3, [r7, #16]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	1c59      	adds	r1, r3, #1
 800d6c8:	6179      	str	r1, [r7, #20]
 800d6ca:	7812      	ldrb	r2, [r2, #0]
 800d6cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	607b      	str	r3, [r7, #4]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1f1      	bne.n	800d6be <mem_cpy+0x1a>
	}
}
 800d6da:	bf00      	nop
 800d6dc:	371c      	adds	r7, #28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d6e6:	b480      	push	{r7}
 800d6e8:	b087      	sub	sp, #28
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	617a      	str	r2, [r7, #20]
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3b01      	subs	r3, #1
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1f3      	bne.n	800d6f6 <mem_set+0x10>
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d71c:	b480      	push	{r7}
 800d71e:	b089      	sub	sp, #36	; 0x24
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	61fb      	str	r3, [r7, #28]
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	61fa      	str	r2, [r7, #28]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	4619      	mov	r1, r3
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	1c5a      	adds	r2, r3, #1
 800d742:	61ba      	str	r2, [r7, #24]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	1acb      	subs	r3, r1, r3
 800d748:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	607b      	str	r3, [r7, #4]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d002      	beq.n	800d75c <mem_cmp+0x40>
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0eb      	beq.n	800d734 <mem_cmp+0x18>

	return r;
 800d75c:	697b      	ldr	r3, [r7, #20]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3724      	adds	r7, #36	; 0x24
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d76a:	b480      	push	{r7}
 800d76c:	b083      	sub	sp, #12
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d774:	e002      	b.n	800d77c <chk_chr+0x12>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	3301      	adds	r3, #1
 800d77a:	607b      	str	r3, [r7, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d005      	beq.n	800d790 <chk_chr+0x26>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	461a      	mov	r2, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d1f2      	bne.n	800d776 <chk_chr+0xc>
	return *str;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	781b      	ldrb	r3, [r3, #0]
}
 800d794:	4618      	mov	r0, r3
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60bb      	str	r3, [r7, #8]
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	e029      	b.n	800d808 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d7b4:	4a27      	ldr	r2, [pc, #156]	; (800d854 <chk_lock+0xb4>)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	011b      	lsls	r3, r3, #4
 800d7ba:	4413      	add	r3, r2
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d01d      	beq.n	800d7fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d7c2:	4a24      	ldr	r2, [pc, #144]	; (800d854 <chk_lock+0xb4>)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	4413      	add	r3, r2
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d116      	bne.n	800d802 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d7d4:	4a1f      	ldr	r2, [pc, #124]	; (800d854 <chk_lock+0xb4>)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	011b      	lsls	r3, r3, #4
 800d7da:	4413      	add	r3, r2
 800d7dc:	3304      	adds	r3, #4
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d10c      	bne.n	800d802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7e8:	4a1a      	ldr	r2, [pc, #104]	; (800d854 <chk_lock+0xb4>)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	011b      	lsls	r3, r3, #4
 800d7ee:	4413      	add	r3, r2
 800d7f0:	3308      	adds	r3, #8
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d102      	bne.n	800d802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7fc:	e007      	b.n	800d80e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d7fe:	2301      	movs	r3, #1
 800d800:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3301      	adds	r3, #1
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d9d2      	bls.n	800d7b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d109      	bne.n	800d828 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d102      	bne.n	800d820 <chk_lock+0x80>
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d101      	bne.n	800d824 <chk_lock+0x84>
 800d820:	2300      	movs	r3, #0
 800d822:	e010      	b.n	800d846 <chk_lock+0xa6>
 800d824:	2312      	movs	r3, #18
 800d826:	e00e      	b.n	800d846 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d108      	bne.n	800d840 <chk_lock+0xa0>
 800d82e:	4a09      	ldr	r2, [pc, #36]	; (800d854 <chk_lock+0xb4>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	4413      	add	r3, r2
 800d836:	330c      	adds	r3, #12
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d83e:	d101      	bne.n	800d844 <chk_lock+0xa4>
 800d840:	2310      	movs	r3, #16
 800d842:	e000      	b.n	800d846 <chk_lock+0xa6>
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20004738 	.word	0x20004738

0800d858 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d85e:	2300      	movs	r3, #0
 800d860:	607b      	str	r3, [r7, #4]
 800d862:	e002      	b.n	800d86a <enq_lock+0x12>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3301      	adds	r3, #1
 800d868:	607b      	str	r3, [r7, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d806      	bhi.n	800d87e <enq_lock+0x26>
 800d870:	4a09      	ldr	r2, [pc, #36]	; (800d898 <enq_lock+0x40>)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	011b      	lsls	r3, r3, #4
 800d876:	4413      	add	r3, r2
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1f2      	bne.n	800d864 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b02      	cmp	r3, #2
 800d882:	bf14      	ite	ne
 800d884:	2301      	movne	r3, #1
 800d886:	2300      	moveq	r3, #0
 800d888:	b2db      	uxtb	r3, r3
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	20004738 	.word	0x20004738

0800d89c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	60fb      	str	r3, [r7, #12]
 800d8aa:	e01f      	b.n	800d8ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d8ac:	4a41      	ldr	r2, [pc, #260]	; (800d9b4 <inc_lock+0x118>)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	011b      	lsls	r3, r3, #4
 800d8b2:	4413      	add	r3, r2
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d113      	bne.n	800d8e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d8be:	4a3d      	ldr	r2, [pc, #244]	; (800d9b4 <inc_lock+0x118>)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	011b      	lsls	r3, r3, #4
 800d8c4:	4413      	add	r3, r2
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d109      	bne.n	800d8e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d8d2:	4a38      	ldr	r2, [pc, #224]	; (800d9b4 <inc_lock+0x118>)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	011b      	lsls	r3, r3, #4
 800d8d8:	4413      	add	r3, r2
 800d8da:	3308      	adds	r3, #8
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d006      	beq.n	800d8f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	60fb      	str	r3, [r7, #12]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d9dc      	bls.n	800d8ac <inc_lock+0x10>
 800d8f2:	e000      	b.n	800d8f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d8f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d132      	bne.n	800d962 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	60fb      	str	r3, [r7, #12]
 800d900:	e002      	b.n	800d908 <inc_lock+0x6c>
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	3301      	adds	r3, #1
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d806      	bhi.n	800d91c <inc_lock+0x80>
 800d90e:	4a29      	ldr	r2, [pc, #164]	; (800d9b4 <inc_lock+0x118>)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	4413      	add	r3, r2
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1f2      	bne.n	800d902 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d101      	bne.n	800d926 <inc_lock+0x8a>
 800d922:	2300      	movs	r3, #0
 800d924:	e040      	b.n	800d9a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	4922      	ldr	r1, [pc, #136]	; (800d9b4 <inc_lock+0x118>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	011b      	lsls	r3, r3, #4
 800d930:	440b      	add	r3, r1
 800d932:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	689a      	ldr	r2, [r3, #8]
 800d938:	491e      	ldr	r1, [pc, #120]	; (800d9b4 <inc_lock+0x118>)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	440b      	add	r3, r1
 800d940:	3304      	adds	r3, #4
 800d942:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	695a      	ldr	r2, [r3, #20]
 800d948:	491a      	ldr	r1, [pc, #104]	; (800d9b4 <inc_lock+0x118>)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	011b      	lsls	r3, r3, #4
 800d94e:	440b      	add	r3, r1
 800d950:	3308      	adds	r3, #8
 800d952:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d954:	4a17      	ldr	r2, [pc, #92]	; (800d9b4 <inc_lock+0x118>)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	011b      	lsls	r3, r3, #4
 800d95a:	4413      	add	r3, r2
 800d95c:	330c      	adds	r3, #12
 800d95e:	2200      	movs	r2, #0
 800d960:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <inc_lock+0xe0>
 800d968:	4a12      	ldr	r2, [pc, #72]	; (800d9b4 <inc_lock+0x118>)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	4413      	add	r3, r2
 800d970:	330c      	adds	r3, #12
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <inc_lock+0xe0>
 800d978:	2300      	movs	r3, #0
 800d97a:	e015      	b.n	800d9a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d108      	bne.n	800d994 <inc_lock+0xf8>
 800d982:	4a0c      	ldr	r2, [pc, #48]	; (800d9b4 <inc_lock+0x118>)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	4413      	add	r3, r2
 800d98a:	330c      	adds	r3, #12
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	b29a      	uxth	r2, r3
 800d992:	e001      	b.n	800d998 <inc_lock+0xfc>
 800d994:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d998:	4906      	ldr	r1, [pc, #24]	; (800d9b4 <inc_lock+0x118>)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	011b      	lsls	r3, r3, #4
 800d99e:	440b      	add	r3, r1
 800d9a0:	330c      	adds	r3, #12
 800d9a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	3301      	adds	r3, #1
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	20004738 	.word	0x20004738

0800d9b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d825      	bhi.n	800da18 <dec_lock+0x60>
		n = Files[i].ctr;
 800d9cc:	4a17      	ldr	r2, [pc, #92]	; (800da2c <dec_lock+0x74>)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	011b      	lsls	r3, r3, #4
 800d9d2:	4413      	add	r3, r2
 800d9d4:	330c      	adds	r3, #12
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d9da:	89fb      	ldrh	r3, [r7, #14]
 800d9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9e0:	d101      	bne.n	800d9e6 <dec_lock+0x2e>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d9e6:	89fb      	ldrh	r3, [r7, #14]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <dec_lock+0x3a>
 800d9ec:	89fb      	ldrh	r3, [r7, #14]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d9f2:	4a0e      	ldr	r2, [pc, #56]	; (800da2c <dec_lock+0x74>)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	011b      	lsls	r3, r3, #4
 800d9f8:	4413      	add	r3, r2
 800d9fa:	330c      	adds	r3, #12
 800d9fc:	89fa      	ldrh	r2, [r7, #14]
 800d9fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800da00:	89fb      	ldrh	r3, [r7, #14]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d105      	bne.n	800da12 <dec_lock+0x5a>
 800da06:	4a09      	ldr	r2, [pc, #36]	; (800da2c <dec_lock+0x74>)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	011b      	lsls	r3, r3, #4
 800da0c:	4413      	add	r3, r2
 800da0e:	2200      	movs	r2, #0
 800da10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	737b      	strb	r3, [r7, #13]
 800da16:	e001      	b.n	800da1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800da18:	2302      	movs	r3, #2
 800da1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800da1c:	7b7b      	ldrb	r3, [r7, #13]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	20004738 	.word	0x20004738

0800da30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da38:	2300      	movs	r3, #0
 800da3a:	60fb      	str	r3, [r7, #12]
 800da3c:	e010      	b.n	800da60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da3e:	4a0d      	ldr	r2, [pc, #52]	; (800da74 <clear_lock+0x44>)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	011b      	lsls	r3, r3, #4
 800da44:	4413      	add	r3, r2
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d105      	bne.n	800da5a <clear_lock+0x2a>
 800da4e:	4a09      	ldr	r2, [pc, #36]	; (800da74 <clear_lock+0x44>)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	011b      	lsls	r3, r3, #4
 800da54:	4413      	add	r3, r2
 800da56:	2200      	movs	r2, #0
 800da58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3301      	adds	r3, #1
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d9eb      	bls.n	800da3e <clear_lock+0xe>
	}
}
 800da66:	bf00      	nop
 800da68:	bf00      	nop
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	20004738 	.word	0x20004738

0800da78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	78db      	ldrb	r3, [r3, #3]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d034      	beq.n	800daf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	7858      	ldrb	r0, [r3, #1]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da9c:	2301      	movs	r3, #1
 800da9e:	697a      	ldr	r2, [r7, #20]
 800daa0:	f7ff fd40 	bl	800d524 <disk_write>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800daaa:	2301      	movs	r3, #1
 800daac:	73fb      	strb	r3, [r7, #15]
 800daae:	e022      	b.n	800daf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	1ad2      	subs	r2, r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a1b      	ldr	r3, [r3, #32]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d217      	bcs.n	800daf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	789b      	ldrb	r3, [r3, #2]
 800daca:	613b      	str	r3, [r7, #16]
 800dacc:	e010      	b.n	800daf0 <sync_window+0x78>
					wsect += fs->fsize;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	4413      	add	r3, r2
 800dad6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	7858      	ldrb	r0, [r3, #1]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dae2:	2301      	movs	r3, #1
 800dae4:	697a      	ldr	r2, [r7, #20]
 800dae6:	f7ff fd1d 	bl	800d524 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	3b01      	subs	r3, #1
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d8eb      	bhi.n	800dace <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db12:	683a      	ldr	r2, [r7, #0]
 800db14:	429a      	cmp	r2, r3
 800db16:	d01b      	beq.n	800db50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff ffad 	bl	800da78 <sync_window>
 800db1e:	4603      	mov	r3, r0
 800db20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d113      	bne.n	800db50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7858      	ldrb	r0, [r3, #1]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db32:	2301      	movs	r3, #1
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	f7ff fcd5 	bl	800d4e4 <disk_read>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d004      	beq.n	800db4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800db40:	f04f 33ff 	mov.w	r3, #4294967295
 800db44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800db46:	2301      	movs	r3, #1
 800db48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800db50:	7bfb      	ldrb	r3, [r7, #15]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
	...

0800db5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff87 	bl	800da78 <sync_window>
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d159      	bne.n	800dc28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d149      	bne.n	800dc10 <sync_fs+0xb4>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	791b      	ldrb	r3, [r3, #4]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d145      	bne.n	800dc10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	899b      	ldrh	r3, [r3, #12]
 800db8e:	461a      	mov	r2, r3
 800db90:	2100      	movs	r1, #0
 800db92:	f7ff fda8 	bl	800d6e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3338      	adds	r3, #56	; 0x38
 800db9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db9e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff fd37 	bl	800d616 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3338      	adds	r3, #56	; 0x38
 800dbac:	4921      	ldr	r1, [pc, #132]	; (800dc34 <sync_fs+0xd8>)
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7ff fd4c 	bl	800d64c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	3338      	adds	r3, #56	; 0x38
 800dbb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dbbc:	491e      	ldr	r1, [pc, #120]	; (800dc38 <sync_fs+0xdc>)
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fd44 	bl	800d64c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	3338      	adds	r3, #56	; 0x38
 800dbc8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	f7ff fd3a 	bl	800d64c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	3338      	adds	r3, #56	; 0x38
 800dbdc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	695b      	ldr	r3, [r3, #20]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	f7ff fd30 	bl	800d64c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	7858      	ldrb	r0, [r3, #1]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc04:	2301      	movs	r3, #1
 800dc06:	f7ff fc8d 	bl	800d524 <disk_write>
			fs->fsi_flag = 0;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	785b      	ldrb	r3, [r3, #1]
 800dc14:	2200      	movs	r2, #0
 800dc16:	2100      	movs	r1, #0
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fca3 	bl	800d564 <disk_ioctl>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <sync_fs+0xcc>
 800dc24:	2301      	movs	r3, #1
 800dc26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	41615252 	.word	0x41615252
 800dc38:	61417272 	.word	0x61417272

0800dc3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	3b02      	subs	r3, #2
 800dc4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	69db      	ldr	r3, [r3, #28]
 800dc50:	3b02      	subs	r3, #2
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d301      	bcc.n	800dc5c <clust2sect+0x20>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e008      	b.n	800dc6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	895b      	ldrh	r3, [r3, #10]
 800dc60:	461a      	mov	r2, r3
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	fb03 f202 	mul.w	r2, r3, r2
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6c:	4413      	add	r3, r2
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b086      	sub	sp, #24
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d904      	bls.n	800dc9a <get_fat+0x20>
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	69db      	ldr	r3, [r3, #28]
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d302      	bcc.n	800dca0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	617b      	str	r3, [r7, #20]
 800dc9e:	e0bb      	b.n	800de18 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dca0:	f04f 33ff 	mov.w	r3, #4294967295
 800dca4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	f000 8083 	beq.w	800ddb6 <get_fat+0x13c>
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	f300 80a7 	bgt.w	800de04 <get_fat+0x18a>
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d002      	beq.n	800dcc0 <get_fat+0x46>
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d056      	beq.n	800dd6c <get_fat+0xf2>
 800dcbe:	e0a1      	b.n	800de04 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	085b      	lsrs	r3, r3, #1
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	4413      	add	r3, r2
 800dccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	899b      	ldrh	r3, [r3, #12]
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcde:	4413      	add	r3, r2
 800dce0:	4619      	mov	r1, r3
 800dce2:	6938      	ldr	r0, [r7, #16]
 800dce4:	f7ff ff0c 	bl	800db00 <move_window>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f040 808d 	bne.w	800de0a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	60fa      	str	r2, [r7, #12]
 800dcf6:	693a      	ldr	r2, [r7, #16]
 800dcf8:	8992      	ldrh	r2, [r2, #12]
 800dcfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcfe:	fb01 f202 	mul.w	r2, r1, r2
 800dd02:	1a9b      	subs	r3, r3, r2
 800dd04:	693a      	ldr	r2, [r7, #16]
 800dd06:	4413      	add	r3, r2
 800dd08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dd0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	899b      	ldrh	r3, [r3, #12]
 800dd16:	4619      	mov	r1, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd1e:	4413      	add	r3, r2
 800dd20:	4619      	mov	r1, r3
 800dd22:	6938      	ldr	r0, [r7, #16]
 800dd24:	f7ff feec 	bl	800db00 <move_window>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d16f      	bne.n	800de0e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	899b      	ldrh	r3, [r3, #12]
 800dd32:	461a      	mov	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd3a:	fb01 f202 	mul.w	r2, r1, r2
 800dd3e:	1a9b      	subs	r3, r3, r2
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	4413      	add	r3, r2
 800dd44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dd48:	021b      	lsls	r3, r3, #8
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	f003 0301 	and.w	r3, r3, #1
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <get_fat+0xe8>
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	091b      	lsrs	r3, r3, #4
 800dd60:	e002      	b.n	800dd68 <get_fat+0xee>
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd68:	617b      	str	r3, [r7, #20]
			break;
 800dd6a:	e055      	b.n	800de18 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	899b      	ldrh	r3, [r3, #12]
 800dd74:	085b      	lsrs	r3, r3, #1
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	4619      	mov	r1, r3
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd80:	4413      	add	r3, r2
 800dd82:	4619      	mov	r1, r3
 800dd84:	6938      	ldr	r0, [r7, #16]
 800dd86:	f7ff febb 	bl	800db00 <move_window>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d140      	bne.n	800de12 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	8992      	ldrh	r2, [r2, #12]
 800dd9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dda2:	fb00 f202 	mul.w	r2, r0, r2
 800dda6:	1a9b      	subs	r3, r3, r2
 800dda8:	440b      	add	r3, r1
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff fbf8 	bl	800d5a0 <ld_word>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	617b      	str	r3, [r7, #20]
			break;
 800ddb4:	e030      	b.n	800de18 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	899b      	ldrh	r3, [r3, #12]
 800ddbe:	089b      	lsrs	r3, r3, #2
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddca:	4413      	add	r3, r2
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6938      	ldr	r0, [r7, #16]
 800ddd0:	f7ff fe96 	bl	800db00 <move_window>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d11d      	bne.n	800de16 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	8992      	ldrh	r2, [r2, #12]
 800dde8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddec:	fb00 f202 	mul.w	r2, r0, r2
 800ddf0:	1a9b      	subs	r3, r3, r2
 800ddf2:	440b      	add	r3, r1
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fbeb 	bl	800d5d0 <ld_dword>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800de00:	617b      	str	r3, [r7, #20]
			break;
 800de02:	e009      	b.n	800de18 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800de04:	2301      	movs	r3, #1
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	e006      	b.n	800de18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de0a:	bf00      	nop
 800de0c:	e004      	b.n	800de18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de0e:	bf00      	nop
 800de10:	e002      	b.n	800de18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de12:	bf00      	nop
 800de14:	e000      	b.n	800de18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de16:	bf00      	nop
		}
	}

	return val;
 800de18:	697b      	ldr	r3, [r7, #20]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800de22:	b590      	push	{r4, r7, lr}
 800de24:	b089      	sub	sp, #36	; 0x24
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800de2e:	2302      	movs	r3, #2
 800de30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b01      	cmp	r3, #1
 800de36:	f240 8102 	bls.w	800e03e <put_fat+0x21c>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	69db      	ldr	r3, [r3, #28]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	429a      	cmp	r2, r3
 800de42:	f080 80fc 	bcs.w	800e03e <put_fat+0x21c>
		switch (fs->fs_type) {
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	f000 80b6 	beq.w	800dfbc <put_fat+0x19a>
 800de50:	2b03      	cmp	r3, #3
 800de52:	f300 80fd 	bgt.w	800e050 <put_fat+0x22e>
 800de56:	2b01      	cmp	r3, #1
 800de58:	d003      	beq.n	800de62 <put_fat+0x40>
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	f000 8083 	beq.w	800df66 <put_fat+0x144>
 800de60:	e0f6      	b.n	800e050 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	61bb      	str	r3, [r7, #24]
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	085b      	lsrs	r3, r3, #1
 800de6a:	69ba      	ldr	r2, [r7, #24]
 800de6c:	4413      	add	r3, r2
 800de6e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	899b      	ldrh	r3, [r3, #12]
 800de78:	4619      	mov	r1, r3
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800de80:	4413      	add	r3, r2
 800de82:	4619      	mov	r1, r3
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7ff fe3b 	bl	800db00 <move_window>
 800de8a:	4603      	mov	r3, r0
 800de8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de8e:	7ffb      	ldrb	r3, [r7, #31]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f040 80d6 	bne.w	800e042 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	1c5a      	adds	r2, r3, #1
 800dea0:	61ba      	str	r2, [r7, #24]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	8992      	ldrh	r2, [r2, #12]
 800dea6:	fbb3 f0f2 	udiv	r0, r3, r2
 800deaa:	fb00 f202 	mul.w	r2, r0, r2
 800deae:	1a9b      	subs	r3, r3, r2
 800deb0:	440b      	add	r3, r1
 800deb2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	f003 0301 	and.w	r3, r3, #1
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00d      	beq.n	800deda <put_fat+0xb8>
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	b25b      	sxtb	r3, r3
 800dec4:	f003 030f 	and.w	r3, r3, #15
 800dec8:	b25a      	sxtb	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	b2db      	uxtb	r3, r3
 800dece:	011b      	lsls	r3, r3, #4
 800ded0:	b25b      	sxtb	r3, r3
 800ded2:	4313      	orrs	r3, r2
 800ded4:	b25b      	sxtb	r3, r3
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	e001      	b.n	800dede <put_fat+0xbc>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2201      	movs	r2, #1
 800dee6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	899b      	ldrh	r3, [r3, #12]
 800def0:	4619      	mov	r1, r3
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	fbb3 f3f1 	udiv	r3, r3, r1
 800def8:	4413      	add	r3, r2
 800defa:	4619      	mov	r1, r3
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f7ff fdff 	bl	800db00 <move_window>
 800df02:	4603      	mov	r3, r0
 800df04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df06:	7ffb      	ldrb	r3, [r7, #31]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f040 809c 	bne.w	800e046 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	899b      	ldrh	r3, [r3, #12]
 800df18:	461a      	mov	r2, r3
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800df20:	fb00 f202 	mul.w	r2, r0, r2
 800df24:	1a9b      	subs	r3, r3, r2
 800df26:	440b      	add	r3, r1
 800df28:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d003      	beq.n	800df3c <put_fat+0x11a>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	091b      	lsrs	r3, r3, #4
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	e00e      	b.n	800df5a <put_fat+0x138>
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	b25b      	sxtb	r3, r3
 800df42:	f023 030f 	bic.w	r3, r3, #15
 800df46:	b25a      	sxtb	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	0a1b      	lsrs	r3, r3, #8
 800df4c:	b25b      	sxtb	r3, r3
 800df4e:	f003 030f 	and.w	r3, r3, #15
 800df52:	b25b      	sxtb	r3, r3
 800df54:	4313      	orrs	r3, r2
 800df56:	b25b      	sxtb	r3, r3
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	697a      	ldr	r2, [r7, #20]
 800df5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	70da      	strb	r2, [r3, #3]
			break;
 800df64:	e074      	b.n	800e050 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	085b      	lsrs	r3, r3, #1
 800df70:	b29b      	uxth	r3, r3
 800df72:	4619      	mov	r1, r3
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	fbb3 f3f1 	udiv	r3, r3, r1
 800df7a:	4413      	add	r3, r2
 800df7c:	4619      	mov	r1, r3
 800df7e:	68f8      	ldr	r0, [r7, #12]
 800df80:	f7ff fdbe 	bl	800db00 <move_window>
 800df84:	4603      	mov	r3, r0
 800df86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df88:	7ffb      	ldrb	r3, [r7, #31]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d15d      	bne.n	800e04a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	8992      	ldrh	r2, [r2, #12]
 800df9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfa0:	fb00 f202 	mul.w	r2, r0, r2
 800dfa4:	1a9b      	subs	r3, r3, r2
 800dfa6:	440b      	add	r3, r1
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	b292      	uxth	r2, r2
 800dfac:	4611      	mov	r1, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7ff fb31 	bl	800d616 <st_word>
			fs->wflag = 1;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	70da      	strb	r2, [r3, #3]
			break;
 800dfba:	e049      	b.n	800e050 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	899b      	ldrh	r3, [r3, #12]
 800dfc4:	089b      	lsrs	r3, r3, #2
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	4619      	mov	r1, r3
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfd0:	4413      	add	r3, r2
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff fd93 	bl	800db00 <move_window>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfde:	7ffb      	ldrb	r3, [r7, #31]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d134      	bne.n	800e04e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	8992      	ldrh	r2, [r2, #12]
 800dff8:	fbb3 f0f2 	udiv	r0, r3, r2
 800dffc:	fb00 f202 	mul.w	r2, r0, r2
 800e000:	1a9b      	subs	r3, r3, r2
 800e002:	440b      	add	r3, r1
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff fae3 	bl	800d5d0 <ld_dword>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e010:	4323      	orrs	r3, r4
 800e012:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	68fa      	ldr	r2, [r7, #12]
 800e020:	8992      	ldrh	r2, [r2, #12]
 800e022:	fbb3 f0f2 	udiv	r0, r3, r2
 800e026:	fb00 f202 	mul.w	r2, r0, r2
 800e02a:	1a9b      	subs	r3, r3, r2
 800e02c:	440b      	add	r3, r1
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fb0b 	bl	800d64c <st_dword>
			fs->wflag = 1;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2201      	movs	r2, #1
 800e03a:	70da      	strb	r2, [r3, #3]
			break;
 800e03c:	e008      	b.n	800e050 <put_fat+0x22e>
		}
	}
 800e03e:	bf00      	nop
 800e040:	e006      	b.n	800e050 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e042:	bf00      	nop
 800e044:	e004      	b.n	800e050 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e046:	bf00      	nop
 800e048:	e002      	b.n	800e050 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e04a:	bf00      	nop
 800e04c:	e000      	b.n	800e050 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e04e:	bf00      	nop
	return res;
 800e050:	7ffb      	ldrb	r3, [r7, #31]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3724      	adds	r7, #36	; 0x24
 800e056:	46bd      	mov	sp, r7
 800e058:	bd90      	pop	{r4, r7, pc}

0800e05a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b088      	sub	sp, #32
 800e05e:	af00      	add	r7, sp, #0
 800e060:	60f8      	str	r0, [r7, #12]
 800e062:	60b9      	str	r1, [r7, #8]
 800e064:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e066:	2300      	movs	r3, #0
 800e068:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d904      	bls.n	800e080 <remove_chain+0x26>
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	69db      	ldr	r3, [r3, #28]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d301      	bcc.n	800e084 <remove_chain+0x2a>
 800e080:	2302      	movs	r3, #2
 800e082:	e04b      	b.n	800e11c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00c      	beq.n	800e0a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e08a:	f04f 32ff 	mov.w	r2, #4294967295
 800e08e:	6879      	ldr	r1, [r7, #4]
 800e090:	69b8      	ldr	r0, [r7, #24]
 800e092:	f7ff fec6 	bl	800de22 <put_fat>
 800e096:	4603      	mov	r3, r0
 800e098:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e09a:	7ffb      	ldrb	r3, [r7, #31]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <remove_chain+0x4a>
 800e0a0:	7ffb      	ldrb	r3, [r7, #31]
 800e0a2:	e03b      	b.n	800e11c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e0a4:	68b9      	ldr	r1, [r7, #8]
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f7ff fde7 	bl	800dc7a <get_fat>
 800e0ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d031      	beq.n	800e118 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d101      	bne.n	800e0be <remove_chain+0x64>
 800e0ba:	2302      	movs	r3, #2
 800e0bc:	e02e      	b.n	800e11c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c4:	d101      	bne.n	800e0ca <remove_chain+0x70>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e028      	b.n	800e11c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	68b9      	ldr	r1, [r7, #8]
 800e0ce:	69b8      	ldr	r0, [r7, #24]
 800e0d0:	f7ff fea7 	bl	800de22 <put_fat>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e0d8:	7ffb      	ldrb	r3, [r7, #31]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <remove_chain+0x88>
 800e0de:	7ffb      	ldrb	r3, [r7, #31]
 800e0e0:	e01c      	b.n	800e11c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	699a      	ldr	r2, [r3, #24]
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	3b02      	subs	r3, #2
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d20b      	bcs.n	800e108 <remove_chain+0xae>
			fs->free_clst++;
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	1c5a      	adds	r2, r3, #1
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	791b      	ldrb	r3, [r3, #4]
 800e0fe:	f043 0301 	orr.w	r3, r3, #1
 800e102:	b2da      	uxtb	r2, r3
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	68ba      	ldr	r2, [r7, #8]
 800e112:	429a      	cmp	r2, r3
 800e114:	d3c6      	bcc.n	800e0a4 <remove_chain+0x4a>
 800e116:	e000      	b.n	800e11a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e118:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3720      	adds	r7, #32
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b088      	sub	sp, #32
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10d      	bne.n	800e156 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d004      	beq.n	800e150 <create_chain+0x2c>
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	69ba      	ldr	r2, [r7, #24]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d31b      	bcc.n	800e188 <create_chain+0x64>
 800e150:	2301      	movs	r3, #1
 800e152:	61bb      	str	r3, [r7, #24]
 800e154:	e018      	b.n	800e188 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff fd8e 	bl	800dc7a <get_fat>
 800e15e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d801      	bhi.n	800e16a <create_chain+0x46>
 800e166:	2301      	movs	r3, #1
 800e168:	e070      	b.n	800e24c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e170:	d101      	bne.n	800e176 <create_chain+0x52>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	e06a      	b.n	800e24c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	69db      	ldr	r3, [r3, #28]
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d201      	bcs.n	800e184 <create_chain+0x60>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	e063      	b.n	800e24c <create_chain+0x128>
		scl = clst;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	3301      	adds	r3, #1
 800e190:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	69db      	ldr	r3, [r3, #28]
 800e196:	69fa      	ldr	r2, [r7, #28]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d307      	bcc.n	800e1ac <create_chain+0x88>
				ncl = 2;
 800e19c:	2302      	movs	r3, #2
 800e19e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e1a0:	69fa      	ldr	r2, [r7, #28]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d901      	bls.n	800e1ac <create_chain+0x88>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e04f      	b.n	800e24c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e1ac:	69f9      	ldr	r1, [r7, #28]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff fd63 	bl	800dc7a <get_fat>
 800e1b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00e      	beq.n	800e1da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d003      	beq.n	800e1ca <create_chain+0xa6>
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c8:	d101      	bne.n	800e1ce <create_chain+0xaa>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	e03e      	b.n	800e24c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e1ce:	69fa      	ldr	r2, [r7, #28]
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d1da      	bne.n	800e18c <create_chain+0x68>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e038      	b.n	800e24c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e1da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e0:	69f9      	ldr	r1, [r7, #28]
 800e1e2:	6938      	ldr	r0, [r7, #16]
 800e1e4:	f7ff fe1d 	bl	800de22 <put_fat>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e1ec:	7dfb      	ldrb	r3, [r7, #23]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <create_chain+0xe2>
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d006      	beq.n	800e206 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e1f8:	69fa      	ldr	r2, [r7, #28]
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6938      	ldr	r0, [r7, #16]
 800e1fe:	f7ff fe10 	bl	800de22 <put_fat>
 800e202:	4603      	mov	r3, r0
 800e204:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e206:	7dfb      	ldrb	r3, [r7, #23]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d116      	bne.n	800e23a <create_chain+0x116>
		fs->last_clst = ncl;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	69fa      	ldr	r2, [r7, #28]
 800e210:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	699a      	ldr	r2, [r3, #24]
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	69db      	ldr	r3, [r3, #28]
 800e21a:	3b02      	subs	r3, #2
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d804      	bhi.n	800e22a <create_chain+0x106>
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	1e5a      	subs	r2, r3, #1
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	791b      	ldrb	r3, [r3, #4]
 800e22e:	f043 0301 	orr.w	r3, r3, #1
 800e232:	b2da      	uxtb	r2, r3
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	711a      	strb	r2, [r3, #4]
 800e238:	e007      	b.n	800e24a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e23a:	7dfb      	ldrb	r3, [r7, #23]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d102      	bne.n	800e246 <create_chain+0x122>
 800e240:	f04f 33ff 	mov.w	r3, #4294967295
 800e244:	e000      	b.n	800e248 <create_chain+0x124>
 800e246:	2301      	movs	r3, #1
 800e248:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e24a:	69fb      	ldr	r3, [r7, #28]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3720      	adds	r7, #32
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e254:	b480      	push	{r7}
 800e256:	b087      	sub	sp, #28
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e268:	3304      	adds	r3, #4
 800e26a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	899b      	ldrh	r3, [r3, #12]
 800e270:	461a      	mov	r2, r3
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	fbb3 f3f2 	udiv	r3, r3, r2
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	8952      	ldrh	r2, [r2, #10]
 800e27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e280:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	1d1a      	adds	r2, r3, #4
 800e286:	613a      	str	r2, [r7, #16]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <clmt_clust+0x42>
 800e292:	2300      	movs	r3, #0
 800e294:	e010      	b.n	800e2b8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d307      	bcc.n	800e2ae <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e29e:	697a      	ldr	r2, [r7, #20]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	617b      	str	r3, [r7, #20]
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e2ac:	e7e9      	b.n	800e282 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e2ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	4413      	add	r3, r2
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	371c      	adds	r7, #28
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e2da:	d204      	bcs.n	800e2e6 <dir_sdi+0x22>
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	f003 031f 	and.w	r3, r3, #31
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <dir_sdi+0x26>
		return FR_INT_ERR;
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	e071      	b.n	800e3ce <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d106      	bne.n	800e30a <dir_sdi+0x46>
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	2b02      	cmp	r3, #2
 800e302:	d902      	bls.n	800e30a <dir_sdi+0x46>
		clst = fs->dirbase;
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e308:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d10c      	bne.n	800e32a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	095b      	lsrs	r3, r3, #5
 800e314:	693a      	ldr	r2, [r7, #16]
 800e316:	8912      	ldrh	r2, [r2, #8]
 800e318:	4293      	cmp	r3, r2
 800e31a:	d301      	bcc.n	800e320 <dir_sdi+0x5c>
 800e31c:	2302      	movs	r3, #2
 800e31e:	e056      	b.n	800e3ce <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	61da      	str	r2, [r3, #28]
 800e328:	e02d      	b.n	800e386 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	895b      	ldrh	r3, [r3, #10]
 800e32e:	461a      	mov	r2, r3
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	899b      	ldrh	r3, [r3, #12]
 800e334:	fb02 f303 	mul.w	r3, r2, r3
 800e338:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e33a:	e019      	b.n	800e370 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6979      	ldr	r1, [r7, #20]
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff fc9a 	bl	800dc7a <get_fat>
 800e346:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d101      	bne.n	800e354 <dir_sdi+0x90>
 800e350:	2301      	movs	r3, #1
 800e352:	e03c      	b.n	800e3ce <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d904      	bls.n	800e364 <dir_sdi+0xa0>
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	697a      	ldr	r2, [r7, #20]
 800e360:	429a      	cmp	r2, r3
 800e362:	d301      	bcc.n	800e368 <dir_sdi+0xa4>
 800e364:	2302      	movs	r3, #2
 800e366:	e032      	b.n	800e3ce <dir_sdi+0x10a>
			ofs -= csz;
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	429a      	cmp	r2, r3
 800e376:	d2e1      	bcs.n	800e33c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e378:	6979      	ldr	r1, [r7, #20]
 800e37a:	6938      	ldr	r0, [r7, #16]
 800e37c:	f7ff fc5e 	bl	800dc3c <clust2sect>
 800e380:	4602      	mov	r2, r0
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d101      	bne.n	800e398 <dir_sdi+0xd4>
 800e394:	2302      	movs	r3, #2
 800e396:	e01a      	b.n	800e3ce <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	69da      	ldr	r2, [r3, #28]
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	899b      	ldrh	r3, [r3, #12]
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3a8:	441a      	add	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	899b      	ldrh	r3, [r3, #12]
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3c0:	fb00 f202 	mul.w	r2, r0, r2
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	18ca      	adds	r2, r1, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3718      	adds	r7, #24
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b086      	sub	sp, #24
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	3320      	adds	r3, #32
 800e3ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	69db      	ldr	r3, [r3, #28]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d003      	beq.n	800e3fe <dir_next+0x28>
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e3fc:	d301      	bcc.n	800e402 <dir_next+0x2c>
 800e3fe:	2304      	movs	r3, #4
 800e400:	e0bb      	b.n	800e57a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	899b      	ldrh	r3, [r3, #12]
 800e406:	461a      	mov	r2, r3
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e40e:	fb01 f202 	mul.w	r2, r1, r2
 800e412:	1a9b      	subs	r3, r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	f040 809d 	bne.w	800e554 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	69db      	ldr	r3, [r3, #28]
 800e41e:	1c5a      	adds	r2, r3, #1
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10b      	bne.n	800e444 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	095b      	lsrs	r3, r3, #5
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	8912      	ldrh	r2, [r2, #8]
 800e434:	4293      	cmp	r3, r2
 800e436:	f0c0 808d 	bcc.w	800e554 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	61da      	str	r2, [r3, #28]
 800e440:	2304      	movs	r3, #4
 800e442:	e09a      	b.n	800e57a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	899b      	ldrh	r3, [r3, #12]
 800e448:	461a      	mov	r2, r3
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	8952      	ldrh	r2, [r2, #10]
 800e454:	3a01      	subs	r2, #1
 800e456:	4013      	ands	r3, r2
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d17b      	bne.n	800e554 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	4619      	mov	r1, r3
 800e464:	4610      	mov	r0, r2
 800e466:	f7ff fc08 	bl	800dc7a <get_fat>
 800e46a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d801      	bhi.n	800e476 <dir_next+0xa0>
 800e472:	2302      	movs	r3, #2
 800e474:	e081      	b.n	800e57a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47c:	d101      	bne.n	800e482 <dir_next+0xac>
 800e47e:	2301      	movs	r3, #1
 800e480:	e07b      	b.n	800e57a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d359      	bcc.n	800e540 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d104      	bne.n	800e49c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	61da      	str	r2, [r3, #28]
 800e498:	2304      	movs	r3, #4
 800e49a:	e06e      	b.n	800e57a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	f7ff fe3d 	bl	800e124 <create_chain>
 800e4aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <dir_next+0xe0>
 800e4b2:	2307      	movs	r3, #7
 800e4b4:	e061      	b.n	800e57a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d101      	bne.n	800e4c0 <dir_next+0xea>
 800e4bc:	2302      	movs	r3, #2
 800e4be:	e05c      	b.n	800e57a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c6:	d101      	bne.n	800e4cc <dir_next+0xf6>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e056      	b.n	800e57a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f7ff fad3 	bl	800da78 <sync_window>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <dir_next+0x106>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e04e      	b.n	800e57a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	899b      	ldrh	r3, [r3, #12]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	f7ff f8fc 	bl	800d6e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	613b      	str	r3, [r7, #16]
 800e4f2:	6979      	ldr	r1, [r7, #20]
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff fba1 	bl	800dc3c <clust2sect>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	635a      	str	r2, [r3, #52]	; 0x34
 800e500:	e012      	b.n	800e528 <dir_next+0x152>
						fs->wflag = 1;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2201      	movs	r2, #1
 800e506:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f7ff fab5 	bl	800da78 <sync_window>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <dir_next+0x142>
 800e514:	2301      	movs	r3, #1
 800e516:	e030      	b.n	800e57a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	3301      	adds	r3, #1
 800e51c:	613b      	str	r3, [r7, #16]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e522:	1c5a      	adds	r2, r3, #1
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	635a      	str	r2, [r3, #52]	; 0x34
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	895b      	ldrh	r3, [r3, #10]
 800e52c:	461a      	mov	r2, r3
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	4293      	cmp	r3, r2
 800e532:	d3e6      	bcc.n	800e502 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	1ad2      	subs	r2, r2, r3
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	697a      	ldr	r2, [r7, #20]
 800e544:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e546:	6979      	ldr	r1, [r7, #20]
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f7ff fb77 	bl	800dc3c <clust2sect>
 800e54e:	4602      	mov	r2, r0
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	899b      	ldrh	r3, [r3, #12]
 800e564:	461a      	mov	r2, r3
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	fbb3 f0f2 	udiv	r0, r3, r2
 800e56c:	fb00 f202 	mul.w	r2, r0, r2
 800e570:	1a9b      	subs	r3, r3, r2
 800e572:	18ca      	adds	r2, r1, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b086      	sub	sp, #24
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e592:	2100      	movs	r1, #0
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7ff fe95 	bl	800e2c4 <dir_sdi>
 800e59a:	4603      	mov	r3, r0
 800e59c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d12b      	bne.n	800e5fc <dir_alloc+0x7a>
		n = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	69db      	ldr	r3, [r3, #28]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f7ff faa6 	bl	800db00 <move_window>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d11d      	bne.n	800e5fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	2be5      	cmp	r3, #229	; 0xe5
 800e5c6:	d004      	beq.n	800e5d2 <dir_alloc+0x50>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a1b      	ldr	r3, [r3, #32]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d107      	bne.n	800e5e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	613b      	str	r3, [r7, #16]
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d102      	bne.n	800e5e6 <dir_alloc+0x64>
 800e5e0:	e00c      	b.n	800e5fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e5e6:	2101      	movs	r1, #1
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff fef4 	bl	800e3d6 <dir_next>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d0d7      	beq.n	800e5a8 <dir_alloc+0x26>
 800e5f8:	e000      	b.n	800e5fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e5fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e5fc:	7dfb      	ldrb	r3, [r7, #23]
 800e5fe:	2b04      	cmp	r3, #4
 800e600:	d101      	bne.n	800e606 <dir_alloc+0x84>
 800e602:	2307      	movs	r3, #7
 800e604:	75fb      	strb	r3, [r7, #23]
	return res;
 800e606:	7dfb      	ldrb	r3, [r7, #23]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3718      	adds	r7, #24
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	331a      	adds	r3, #26
 800e61e:	4618      	mov	r0, r3
 800e620:	f7fe ffbe 	bl	800d5a0 <ld_word>
 800e624:	4603      	mov	r3, r0
 800e626:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b03      	cmp	r3, #3
 800e62e:	d109      	bne.n	800e644 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	3314      	adds	r3, #20
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe ffb3 	bl	800d5a0 <ld_word>
 800e63a:	4603      	mov	r3, r0
 800e63c:	041b      	lsls	r3, r3, #16
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	4313      	orrs	r3, r2
 800e642:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e644:	68fb      	ldr	r3, [r7, #12]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b084      	sub	sp, #16
 800e652:	af00      	add	r7, sp, #0
 800e654:	60f8      	str	r0, [r7, #12]
 800e656:	60b9      	str	r1, [r7, #8]
 800e658:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	331a      	adds	r3, #26
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	b292      	uxth	r2, r2
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe ffd6 	bl	800d616 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b03      	cmp	r3, #3
 800e670:	d109      	bne.n	800e686 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	f103 0214 	add.w	r2, r3, #20
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	0c1b      	lsrs	r3, r3, #16
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	4619      	mov	r1, r3
 800e680:	4610      	mov	r0, r2
 800e682:	f7fe ffc8 	bl	800d616 <st_word>
	}
}
 800e686:	bf00      	nop
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
	...

0800e690 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e690:	b590      	push	{r4, r7, lr}
 800e692:	b087      	sub	sp, #28
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	331a      	adds	r3, #26
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe ff7e 	bl	800d5a0 <ld_word>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <cmp_lfn+0x1e>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e059      	b.n	800e762 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6b6:	1e5a      	subs	r2, r3, #1
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	005b      	lsls	r3, r3, #1
 800e6bc:	4413      	add	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	81fb      	strh	r3, [r7, #14]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	613b      	str	r3, [r7, #16]
 800e6cc:	e033      	b.n	800e736 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e6ce:	4a27      	ldr	r2, [pc, #156]	; (800e76c <cmp_lfn+0xdc>)
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	4413      	add	r3, r2
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fe ff5f 	bl	800d5a0 <ld_word>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e6e6:	89fb      	ldrh	r3, [r7, #14]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01a      	beq.n	800e722 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	2bfe      	cmp	r3, #254	; 0xfe
 800e6f0:	d812      	bhi.n	800e718 <cmp_lfn+0x88>
 800e6f2:	89bb      	ldrh	r3, [r7, #12]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f002 f8bf 	bl	8010878 <ff_wtoupper>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	461c      	mov	r4, r3
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	617a      	str	r2, [r7, #20]
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	4413      	add	r3, r2
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f002 f8b3 	bl	8010878 <ff_wtoupper>
 800e712:	4603      	mov	r3, r0
 800e714:	429c      	cmp	r4, r3
 800e716:	d001      	beq.n	800e71c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e718:	2300      	movs	r3, #0
 800e71a:	e022      	b.n	800e762 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e71c:	89bb      	ldrh	r3, [r7, #12]
 800e71e:	81fb      	strh	r3, [r7, #14]
 800e720:	e006      	b.n	800e730 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e722:	89bb      	ldrh	r3, [r7, #12]
 800e724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e728:	4293      	cmp	r3, r2
 800e72a:	d001      	beq.n	800e730 <cmp_lfn+0xa0>
 800e72c:	2300      	movs	r3, #0
 800e72e:	e018      	b.n	800e762 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	3301      	adds	r3, #1
 800e734:	613b      	str	r3, [r7, #16]
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	2b0c      	cmp	r3, #12
 800e73a:	d9c8      	bls.n	800e6ce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00b      	beq.n	800e760 <cmp_lfn+0xd0>
 800e748:	89fb      	ldrh	r3, [r7, #14]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d008      	beq.n	800e760 <cmp_lfn+0xd0>
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	005b      	lsls	r3, r3, #1
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	4413      	add	r3, r2
 800e756:	881b      	ldrh	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d001      	beq.n	800e760 <cmp_lfn+0xd0>
 800e75c:	2300      	movs	r3, #0
 800e75e:	e000      	b.n	800e762 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e760:	2301      	movs	r3, #1
}
 800e762:	4618      	mov	r0, r3
 800e764:	371c      	adds	r7, #28
 800e766:	46bd      	mov	sp, r7
 800e768:	bd90      	pop	{r4, r7, pc}
 800e76a:	bf00      	nop
 800e76c:	08017ca8 	.word	0x08017ca8

0800e770 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	4611      	mov	r1, r2
 800e77c:	461a      	mov	r2, r3
 800e77e:	460b      	mov	r3, r1
 800e780:	71fb      	strb	r3, [r7, #7]
 800e782:	4613      	mov	r3, r2
 800e784:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	330d      	adds	r3, #13
 800e78a:	79ba      	ldrb	r2, [r7, #6]
 800e78c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	330b      	adds	r3, #11
 800e792:	220f      	movs	r2, #15
 800e794:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	330c      	adds	r3, #12
 800e79a:	2200      	movs	r2, #0
 800e79c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	331a      	adds	r3, #26
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fe ff36 	bl	800d616 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	1e5a      	subs	r2, r3, #1
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	82fb      	strh	r3, [r7, #22]
 800e7be:	2300      	movs	r3, #0
 800e7c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e7c2:	8afb      	ldrh	r3, [r7, #22]
 800e7c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d007      	beq.n	800e7dc <put_lfn+0x6c>
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	61fa      	str	r2, [r7, #28]
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e7dc:	4a17      	ldr	r2, [pc, #92]	; (800e83c <put_lfn+0xcc>)
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	8afa      	ldrh	r2, [r7, #22]
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe ff11 	bl	800d616 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e7f4:	8afb      	ldrh	r3, [r7, #22]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <put_lfn+0x90>
 800e7fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	3301      	adds	r3, #1
 800e804:	61bb      	str	r3, [r7, #24]
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	2b0c      	cmp	r3, #12
 800e80a:	d9da      	bls.n	800e7c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e80c:	8afb      	ldrh	r3, [r7, #22]
 800e80e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e812:	4293      	cmp	r3, r2
 800e814:	d006      	beq.n	800e824 <put_lfn+0xb4>
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	4413      	add	r3, r2
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d103      	bne.n	800e82c <put_lfn+0xbc>
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e82a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	79fa      	ldrb	r2, [r7, #7]
 800e830:	701a      	strb	r2, [r3, #0]
}
 800e832:	bf00      	nop
 800e834:	3720      	adds	r7, #32
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	08017ca8 	.word	0x08017ca8

0800e840 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08c      	sub	sp, #48	; 0x30
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e84e:	220b      	movs	r2, #11
 800e850:	68b9      	ldr	r1, [r7, #8]
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f7fe ff26 	bl	800d6a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b05      	cmp	r3, #5
 800e85c:	d92b      	bls.n	800e8b6 <gen_numname+0x76>
		sr = seq;
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e862:	e022      	b.n	800e8aa <gen_numname+0x6a>
			wc = *lfn++;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	1c9a      	adds	r2, r3, #2
 800e868:	607a      	str	r2, [r7, #4]
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e86e:	2300      	movs	r3, #0
 800e870:	62bb      	str	r3, [r7, #40]	; 0x28
 800e872:	e017      	b.n	800e8a4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	005a      	lsls	r2, r3, #1
 800e878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e87a:	f003 0301 	and.w	r3, r3, #1
 800e87e:	4413      	add	r3, r2
 800e880:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e884:	085b      	lsrs	r3, r3, #1
 800e886:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d005      	beq.n	800e89e <gen_numname+0x5e>
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e898:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e89c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	2b0f      	cmp	r3, #15
 800e8a8:	d9e4      	bls.n	800e874 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1d8      	bne.n	800e864 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e8b6:	2307      	movs	r3, #7
 800e8b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	f003 030f 	and.w	r3, r3, #15
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	3330      	adds	r3, #48	; 0x30
 800e8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8ce:	2b39      	cmp	r3, #57	; 0x39
 800e8d0:	d904      	bls.n	800e8dc <gen_numname+0x9c>
 800e8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8d6:	3307      	adds	r3, #7
 800e8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	1e5a      	subs	r2, r3, #1
 800e8e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800e8e2:	3330      	adds	r3, #48	; 0x30
 800e8e4:	443b      	add	r3, r7
 800e8e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e8ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	091b      	lsrs	r3, r3, #4
 800e8f2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1df      	bne.n	800e8ba <gen_numname+0x7a>
	ns[i] = '~';
 800e8fa:	f107 0214 	add.w	r2, r7, #20
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	4413      	add	r3, r2
 800e902:	227e      	movs	r2, #126	; 0x7e
 800e904:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e906:	2300      	movs	r3, #0
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
 800e90a:	e002      	b.n	800e912 <gen_numname+0xd2>
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	3301      	adds	r3, #1
 800e910:	627b      	str	r3, [r7, #36]	; 0x24
 800e912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	429a      	cmp	r2, r3
 800e918:	d205      	bcs.n	800e926 <gen_numname+0xe6>
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	4413      	add	r3, r2
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b20      	cmp	r3, #32
 800e924:	d1f2      	bne.n	800e90c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	2b07      	cmp	r3, #7
 800e92a:	d807      	bhi.n	800e93c <gen_numname+0xfc>
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	62ba      	str	r2, [r7, #40]	; 0x28
 800e932:	3330      	adds	r3, #48	; 0x30
 800e934:	443b      	add	r3, r7
 800e936:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e93a:	e000      	b.n	800e93e <gen_numname+0xfe>
 800e93c:	2120      	movs	r1, #32
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	627a      	str	r2, [r7, #36]	; 0x24
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	4413      	add	r3, r2
 800e948:	460a      	mov	r2, r1
 800e94a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	2b07      	cmp	r3, #7
 800e950:	d9e9      	bls.n	800e926 <gen_numname+0xe6>
}
 800e952:	bf00      	nop
 800e954:	bf00      	nop
 800e956:	3730      	adds	r7, #48	; 0x30
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b085      	sub	sp, #20
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e968:	230b      	movs	r3, #11
 800e96a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	0852      	lsrs	r2, r2, #1
 800e972:	01db      	lsls	r3, r3, #7
 800e974:	4313      	orrs	r3, r2
 800e976:	b2da      	uxtb	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	1c59      	adds	r1, r3, #1
 800e97c:	6079      	str	r1, [r7, #4]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	4413      	add	r3, r2
 800e982:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	3b01      	subs	r3, #1
 800e988:	60bb      	str	r3, [r7, #8]
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1ed      	bne.n	800e96c <sum_sfn+0x10>
	return sum;
 800e990:	7bfb      	ldrb	r3, [r7, #15]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b086      	sub	sp, #24
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7ff fc88 	bl	800e2c4 <dir_sdi>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <dir_find+0x24>
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
 800e9c0:	e0a9      	b.n	800eb16 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9c2:	23ff      	movs	r3, #255	; 0xff
 800e9c4:	753b      	strb	r3, [r7, #20]
 800e9c6:	7d3b      	ldrb	r3, [r7, #20]
 800e9c8:	757b      	strb	r3, [r7, #21]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	69db      	ldr	r3, [r3, #28]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6938      	ldr	r0, [r7, #16]
 800e9da:	f7ff f891 	bl	800db00 <move_window>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9e2:	7dfb      	ldrb	r3, [r7, #23]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f040 8090 	bne.w	800eb0a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e9f2:	7dbb      	ldrb	r3, [r7, #22]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <dir_find+0x60>
 800e9f8:	2304      	movs	r3, #4
 800e9fa:	75fb      	strb	r3, [r7, #23]
 800e9fc:	e08a      	b.n	800eb14 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	330b      	adds	r3, #11
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea0a:	73fb      	strb	r3, [r7, #15]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7bfa      	ldrb	r2, [r7, #15]
 800ea10:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ea12:	7dbb      	ldrb	r3, [r7, #22]
 800ea14:	2be5      	cmp	r3, #229	; 0xe5
 800ea16:	d007      	beq.n	800ea28 <dir_find+0x8a>
 800ea18:	7bfb      	ldrb	r3, [r7, #15]
 800ea1a:	f003 0308 	and.w	r3, r3, #8
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <dir_find+0x98>
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	2b0f      	cmp	r3, #15
 800ea26:	d006      	beq.n	800ea36 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea28:	23ff      	movs	r3, #255	; 0xff
 800ea2a:	757b      	strb	r3, [r7, #21]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea32:	631a      	str	r2, [r3, #48]	; 0x30
 800ea34:	e05e      	b.n	800eaf4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	2b0f      	cmp	r3, #15
 800ea3a:	d136      	bne.n	800eaaa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d154      	bne.n	800eaf4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ea4a:	7dbb      	ldrb	r3, [r7, #22]
 800ea4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00d      	beq.n	800ea70 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	7b5b      	ldrb	r3, [r3, #13]
 800ea5a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ea5c:	7dbb      	ldrb	r3, [r7, #22]
 800ea5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea62:	75bb      	strb	r3, [r7, #22]
 800ea64:	7dbb      	ldrb	r3, [r7, #22]
 800ea66:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	695a      	ldr	r2, [r3, #20]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea70:	7dba      	ldrb	r2, [r7, #22]
 800ea72:	7d7b      	ldrb	r3, [r7, #21]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d115      	bne.n	800eaa4 <dir_find+0x106>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a1b      	ldr	r3, [r3, #32]
 800ea7c:	330d      	adds	r3, #13
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	7d3a      	ldrb	r2, [r7, #20]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d10e      	bne.n	800eaa4 <dir_find+0x106>
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	691a      	ldr	r2, [r3, #16]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4610      	mov	r0, r2
 800ea92:	f7ff fdfd 	bl	800e690 <cmp_lfn>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d003      	beq.n	800eaa4 <dir_find+0x106>
 800ea9c:	7d7b      	ldrb	r3, [r7, #21]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	e000      	b.n	800eaa6 <dir_find+0x108>
 800eaa4:	23ff      	movs	r3, #255	; 0xff
 800eaa6:	757b      	strb	r3, [r7, #21]
 800eaa8:	e024      	b.n	800eaf4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eaaa:	7d7b      	ldrb	r3, [r7, #21]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d109      	bne.n	800eac4 <dir_find+0x126>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a1b      	ldr	r3, [r3, #32]
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7ff ff51 	bl	800e95c <sum_sfn>
 800eaba:	4603      	mov	r3, r0
 800eabc:	461a      	mov	r2, r3
 800eabe:	7d3b      	ldrb	r3, [r7, #20]
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d024      	beq.n	800eb0e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eaca:	f003 0301 	and.w	r3, r3, #1
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10a      	bne.n	800eae8 <dir_find+0x14a>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a18      	ldr	r0, [r3, #32]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	3324      	adds	r3, #36	; 0x24
 800eada:	220b      	movs	r2, #11
 800eadc:	4619      	mov	r1, r3
 800eade:	f7fe fe1d 	bl	800d71c <mem_cmp>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d014      	beq.n	800eb12 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eae8:	23ff      	movs	r3, #255	; 0xff
 800eaea:	757b      	strb	r3, [r7, #21]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff fc6d 	bl	800e3d6 <dir_next>
 800eafc:	4603      	mov	r3, r0
 800eafe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f43f af65 	beq.w	800e9d2 <dir_find+0x34>
 800eb08:	e004      	b.n	800eb14 <dir_find+0x176>
		if (res != FR_OK) break;
 800eb0a:	bf00      	nop
 800eb0c:	e002      	b.n	800eb14 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eb0e:	bf00      	nop
 800eb10:	e000      	b.n	800eb14 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eb12:	bf00      	nop

	return res;
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3718      	adds	r7, #24
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08c      	sub	sp, #48	; 0x30
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <dir_register+0x20>
 800eb3c:	2306      	movs	r3, #6
 800eb3e:	e0e0      	b.n	800ed02 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eb40:	2300      	movs	r3, #0
 800eb42:	627b      	str	r3, [r7, #36]	; 0x24
 800eb44:	e002      	b.n	800eb4c <dir_register+0x2c>
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	3301      	adds	r3, #1
 800eb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	691a      	ldr	r2, [r3, #16]
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	4413      	add	r3, r2
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1f4      	bne.n	800eb46 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800eb62:	f107 030c 	add.w	r3, r7, #12
 800eb66:	220c      	movs	r2, #12
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe fd9b 	bl	800d6a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d032      	beq.n	800ebde <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2240      	movs	r2, #64	; 0x40
 800eb7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800eb80:	2301      	movs	r3, #1
 800eb82:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb84:	e016      	b.n	800ebb4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	691a      	ldr	r2, [r3, #16]
 800eb90:	f107 010c 	add.w	r1, r7, #12
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	f7ff fe53 	bl	800e840 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff feff 	bl	800e99e <dir_find>
 800eba0:	4603      	mov	r3, r0
 800eba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800eba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	2b63      	cmp	r3, #99	; 0x63
 800ebb8:	d9e5      	bls.n	800eb86 <dir_register+0x66>
 800ebba:	e000      	b.n	800ebbe <dir_register+0x9e>
			if (res != FR_OK) break;
 800ebbc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc0:	2b64      	cmp	r3, #100	; 0x64
 800ebc2:	d101      	bne.n	800ebc8 <dir_register+0xa8>
 800ebc4:	2307      	movs	r3, #7
 800ebc6:	e09c      	b.n	800ed02 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ebc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebcc:	2b04      	cmp	r3, #4
 800ebce:	d002      	beq.n	800ebd6 <dir_register+0xb6>
 800ebd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebd4:	e095      	b.n	800ed02 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ebd6:	7dfa      	ldrb	r2, [r7, #23]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ebde:	7dfb      	ldrb	r3, [r7, #23]
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d007      	beq.n	800ebf8 <dir_register+0xd8>
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	330c      	adds	r3, #12
 800ebec:	4a47      	ldr	r2, [pc, #284]	; (800ed0c <dir_register+0x1ec>)
 800ebee:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf2:	089b      	lsrs	r3, r3, #2
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	e000      	b.n	800ebfa <dir_register+0xda>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ebfc:	6a39      	ldr	r1, [r7, #32]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff fcbf 	bl	800e582 <dir_alloc>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ec0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d148      	bne.n	800eca4 <dir_register+0x184>
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	3b01      	subs	r3, #1
 800ec16:	623b      	str	r3, [r7, #32]
 800ec18:	6a3b      	ldr	r3, [r7, #32]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d042      	beq.n	800eca4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	695a      	ldr	r2, [r3, #20]
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	015b      	lsls	r3, r3, #5
 800ec26:	1ad3      	subs	r3, r2, r3
 800ec28:	4619      	mov	r1, r3
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f7ff fb4a 	bl	800e2c4 <dir_sdi>
 800ec30:	4603      	mov	r3, r0
 800ec32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ec36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d132      	bne.n	800eca4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	3324      	adds	r3, #36	; 0x24
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7ff fe8a 	bl	800e95c <sum_sfn>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	69db      	ldr	r3, [r3, #28]
 800ec50:	4619      	mov	r1, r3
 800ec52:	69f8      	ldr	r0, [r7, #28]
 800ec54:	f7fe ff54 	bl	800db00 <move_window>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ec5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d11d      	bne.n	800eca2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	6918      	ldr	r0, [r3, #16]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a19      	ldr	r1, [r3, #32]
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	b2da      	uxtb	r2, r3
 800ec72:	7efb      	ldrb	r3, [r7, #27]
 800ec74:	f7ff fd7c 	bl	800e770 <put_lfn>
				fs->wflag = 1;
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ec7e:	2100      	movs	r1, #0
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff fba8 	bl	800e3d6 <dir_next>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ec8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d107      	bne.n	800eca4 <dir_register+0x184>
 800ec94:	6a3b      	ldr	r3, [r7, #32]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	623b      	str	r3, [r7, #32]
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1d5      	bne.n	800ec4c <dir_register+0x12c>
 800eca0:	e000      	b.n	800eca4 <dir_register+0x184>
				if (res != FR_OK) break;
 800eca2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d128      	bne.n	800ecfe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	69db      	ldr	r3, [r3, #28]
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	69f8      	ldr	r0, [r7, #28]
 800ecb4:	f7fe ff24 	bl	800db00 <move_window>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ecbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d11b      	bne.n	800ecfe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6a1b      	ldr	r3, [r3, #32]
 800ecca:	2220      	movs	r2, #32
 800eccc:	2100      	movs	r1, #0
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe fd09 	bl	800d6e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a18      	ldr	r0, [r3, #32]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	3324      	adds	r3, #36	; 0x24
 800ecdc:	220b      	movs	r2, #11
 800ecde:	4619      	mov	r1, r3
 800ece0:	f7fe fce0 	bl	800d6a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	330c      	adds	r3, #12
 800ecf0:	f002 0218 	and.w	r2, r2, #24
 800ecf4:	b2d2      	uxtb	r2, r2
 800ecf6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ecfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3730      	adds	r7, #48	; 0x30
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ed10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08a      	sub	sp, #40	; 0x28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	613b      	str	r3, [r7, #16]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	60fb      	str	r3, [r7, #12]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	617b      	str	r3, [r7, #20]
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	61ba      	str	r2, [r7, #24]
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	4413      	add	r3, r2
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ed3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed40:	2b1f      	cmp	r3, #31
 800ed42:	d940      	bls.n	800edc6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ed44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed46:	2b2f      	cmp	r3, #47	; 0x2f
 800ed48:	d006      	beq.n	800ed58 <create_name+0x48>
 800ed4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed4c:	2b5c      	cmp	r3, #92	; 0x5c
 800ed4e:	d110      	bne.n	800ed72 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ed50:	e002      	b.n	800ed58 <create_name+0x48>
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	3301      	adds	r3, #1
 800ed56:	61bb      	str	r3, [r7, #24]
 800ed58:	693a      	ldr	r2, [r7, #16]
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	2b2f      	cmp	r3, #47	; 0x2f
 800ed62:	d0f6      	beq.n	800ed52 <create_name+0x42>
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	4413      	add	r3, r2
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	2b5c      	cmp	r3, #92	; 0x5c
 800ed6e:	d0f0      	beq.n	800ed52 <create_name+0x42>
			break;
 800ed70:	e02a      	b.n	800edc8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	2bfe      	cmp	r3, #254	; 0xfe
 800ed76:	d901      	bls.n	800ed7c <create_name+0x6c>
 800ed78:	2306      	movs	r3, #6
 800ed7a:	e17d      	b.n	800f078 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ed7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ed82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed84:	2101      	movs	r1, #1
 800ed86:	4618      	mov	r0, r3
 800ed88:	f001 fd3a 	bl	8010800 <ff_convert>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ed90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d101      	bne.n	800ed9a <create_name+0x8a>
 800ed96:	2306      	movs	r3, #6
 800ed98:	e16e      	b.n	800f078 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ed9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed9c:	2b7f      	cmp	r3, #127	; 0x7f
 800ed9e:	d809      	bhi.n	800edb4 <create_name+0xa4>
 800eda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda2:	4619      	mov	r1, r3
 800eda4:	488d      	ldr	r0, [pc, #564]	; (800efdc <create_name+0x2cc>)
 800eda6:	f7fe fce0 	bl	800d76a <chk_chr>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <create_name+0xa4>
 800edb0:	2306      	movs	r3, #6
 800edb2:	e161      	b.n	800f078 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	1c5a      	adds	r2, r3, #1
 800edb8:	617a      	str	r2, [r7, #20]
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	4413      	add	r3, r2
 800edc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800edc2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800edc4:	e7b4      	b.n	800ed30 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800edc6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800edc8:	693a      	ldr	r2, [r7, #16]
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	441a      	add	r2, r3
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800edd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edd4:	2b1f      	cmp	r3, #31
 800edd6:	d801      	bhi.n	800eddc <create_name+0xcc>
 800edd8:	2304      	movs	r3, #4
 800edda:	e000      	b.n	800edde <create_name+0xce>
 800eddc:	2300      	movs	r3, #0
 800edde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ede2:	e011      	b.n	800ee08 <create_name+0xf8>
		w = lfn[di - 1];
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800edea:	3b01      	subs	r3, #1
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	4413      	add	r3, r2
 800edf2:	881b      	ldrh	r3, [r3, #0]
 800edf4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800edf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf8:	2b20      	cmp	r3, #32
 800edfa:	d002      	beq.n	800ee02 <create_name+0xf2>
 800edfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ee00:	d106      	bne.n	800ee10 <create_name+0x100>
		di--;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	3b01      	subs	r3, #1
 800ee06:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1ea      	bne.n	800ede4 <create_name+0xd4>
 800ee0e:	e000      	b.n	800ee12 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ee10:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	4413      	add	r3, r2
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d101      	bne.n	800ee28 <create_name+0x118>
 800ee24:	2306      	movs	r3, #6
 800ee26:	e127      	b.n	800f078 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	3324      	adds	r3, #36	; 0x24
 800ee2c:	220b      	movs	r2, #11
 800ee2e:	2120      	movs	r1, #32
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fe fc58 	bl	800d6e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ee36:	2300      	movs	r3, #0
 800ee38:	61bb      	str	r3, [r7, #24]
 800ee3a:	e002      	b.n	800ee42 <create_name+0x132>
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	61bb      	str	r3, [r7, #24]
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	4413      	add	r3, r2
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	2b20      	cmp	r3, #32
 800ee4e:	d0f5      	beq.n	800ee3c <create_name+0x12c>
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	005b      	lsls	r3, r3, #1
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	4413      	add	r3, r2
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee5c:	d0ee      	beq.n	800ee3c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d009      	beq.n	800ee78 <create_name+0x168>
 800ee64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee68:	f043 0303 	orr.w	r3, r3, #3
 800ee6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ee70:	e002      	b.n	800ee78 <create_name+0x168>
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	617b      	str	r3, [r7, #20]
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d009      	beq.n	800ee92 <create_name+0x182>
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee84:	3b01      	subs	r3, #1
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ee90:	d1ef      	bne.n	800ee72 <create_name+0x162>

	i = b = 0; ni = 8;
 800ee92:	2300      	movs	r3, #0
 800ee94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee98:	2300      	movs	r3, #0
 800ee9a:	623b      	str	r3, [r7, #32]
 800ee9c:	2308      	movs	r3, #8
 800ee9e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	61ba      	str	r2, [r7, #24]
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	4413      	add	r3, r2
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eeb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 8090 	beq.w	800efd8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eeb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeba:	2b20      	cmp	r3, #32
 800eebc:	d006      	beq.n	800eecc <create_name+0x1bc>
 800eebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec0:	2b2e      	cmp	r3, #46	; 0x2e
 800eec2:	d10a      	bne.n	800eeda <create_name+0x1ca>
 800eec4:	69ba      	ldr	r2, [r7, #24]
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d006      	beq.n	800eeda <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eed0:	f043 0303 	orr.w	r3, r3, #3
 800eed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eed8:	e07d      	b.n	800efd6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800eeda:	6a3a      	ldr	r2, [r7, #32]
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d203      	bcs.n	800eeea <create_name+0x1da>
 800eee2:	69ba      	ldr	r2, [r7, #24]
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d123      	bne.n	800ef32 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	2b0b      	cmp	r3, #11
 800eeee:	d106      	bne.n	800eefe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eef4:	f043 0303 	orr.w	r3, r3, #3
 800eef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eefc:	e075      	b.n	800efea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800eefe:	69ba      	ldr	r2, [r7, #24]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d005      	beq.n	800ef12 <create_name+0x202>
 800ef06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef0a:	f043 0303 	orr.w	r3, r3, #3
 800ef0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ef12:	69ba      	ldr	r2, [r7, #24]
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d866      	bhi.n	800efe8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	61bb      	str	r3, [r7, #24]
 800ef1e:	2308      	movs	r3, #8
 800ef20:	623b      	str	r3, [r7, #32]
 800ef22:	230b      	movs	r3, #11
 800ef24:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ef26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef30:	e051      	b.n	800efd6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ef32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef34:	2b7f      	cmp	r3, #127	; 0x7f
 800ef36:	d914      	bls.n	800ef62 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ef38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f001 fc5f 	bl	8010800 <ff_convert>
 800ef42:	4603      	mov	r3, r0
 800ef44:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ef46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <create_name+0x246>
 800ef4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef4e:	3b80      	subs	r3, #128	; 0x80
 800ef50:	4a23      	ldr	r2, [pc, #140]	; (800efe0 <create_name+0x2d0>)
 800ef52:	5cd3      	ldrb	r3, [r2, r3]
 800ef54:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ef56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef5a:	f043 0302 	orr.w	r3, r3, #2
 800ef5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ef62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d007      	beq.n	800ef78 <create_name+0x268>
 800ef68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	481d      	ldr	r0, [pc, #116]	; (800efe4 <create_name+0x2d4>)
 800ef6e:	f7fe fbfc 	bl	800d76a <chk_chr>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d008      	beq.n	800ef8a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ef78:	235f      	movs	r3, #95	; 0x5f
 800ef7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ef7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef80:	f043 0303 	orr.w	r3, r3, #3
 800ef84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef88:	e01b      	b.n	800efc2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ef8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef8c:	2b40      	cmp	r3, #64	; 0x40
 800ef8e:	d909      	bls.n	800efa4 <create_name+0x294>
 800ef90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef92:	2b5a      	cmp	r3, #90	; 0x5a
 800ef94:	d806      	bhi.n	800efa4 <create_name+0x294>
					b |= 2;
 800ef96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef9a:	f043 0302 	orr.w	r3, r3, #2
 800ef9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800efa2:	e00e      	b.n	800efc2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800efa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efa6:	2b60      	cmp	r3, #96	; 0x60
 800efa8:	d90b      	bls.n	800efc2 <create_name+0x2b2>
 800efaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efac:	2b7a      	cmp	r3, #122	; 0x7a
 800efae:	d808      	bhi.n	800efc2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800efb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800efb4:	f043 0301 	orr.w	r3, r3, #1
 800efb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800efbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efbe:	3b20      	subs	r3, #32
 800efc0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800efc2:	6a3b      	ldr	r3, [r7, #32]
 800efc4:	1c5a      	adds	r2, r3, #1
 800efc6:	623a      	str	r2, [r7, #32]
 800efc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800efca:	b2d1      	uxtb	r1, r2
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	4413      	add	r3, r2
 800efd0:	460a      	mov	r2, r1
 800efd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800efd6:	e763      	b.n	800eea0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800efd8:	bf00      	nop
 800efda:	e006      	b.n	800efea <create_name+0x2da>
 800efdc:	08017bb4 	.word	0x08017bb4
 800efe0:	08017c28 	.word	0x08017c28
 800efe4:	08017bc0 	.word	0x08017bc0
			if (si > di) break;			/* No extension */
 800efe8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eff0:	2be5      	cmp	r3, #229	; 0xe5
 800eff2:	d103      	bne.n	800effc <create_name+0x2ec>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2205      	movs	r2, #5
 800eff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	2b08      	cmp	r3, #8
 800f000:	d104      	bne.n	800f00c <create_name+0x2fc>
 800f002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f00c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f010:	f003 030c 	and.w	r3, r3, #12
 800f014:	2b0c      	cmp	r3, #12
 800f016:	d005      	beq.n	800f024 <create_name+0x314>
 800f018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f01c:	f003 0303 	and.w	r3, r3, #3
 800f020:	2b03      	cmp	r3, #3
 800f022:	d105      	bne.n	800f030 <create_name+0x320>
 800f024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f028:	f043 0302 	orr.w	r3, r3, #2
 800f02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f034:	f003 0302 	and.w	r3, r3, #2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d117      	bne.n	800f06c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f03c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f040:	f003 0303 	and.w	r3, r3, #3
 800f044:	2b01      	cmp	r3, #1
 800f046:	d105      	bne.n	800f054 <create_name+0x344>
 800f048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f04c:	f043 0310 	orr.w	r3, r3, #16
 800f050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f058:	f003 030c 	and.w	r3, r3, #12
 800f05c:	2b04      	cmp	r3, #4
 800f05e:	d105      	bne.n	800f06c <create_name+0x35c>
 800f060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f064:	f043 0308 	orr.w	r3, r3, #8
 800f068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f072:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f076:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3728      	adds	r7, #40	; 0x28
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f094:	e002      	b.n	800f09c <follow_path+0x1c>
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	3301      	adds	r3, #1
 800f09a:	603b      	str	r3, [r7, #0]
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b2f      	cmp	r3, #47	; 0x2f
 800f0a2:	d0f8      	beq.n	800f096 <follow_path+0x16>
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b5c      	cmp	r3, #92	; 0x5c
 800f0aa:	d0f4      	beq.n	800f096 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b1f      	cmp	r3, #31
 800f0b8:	d80a      	bhi.n	800f0d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2280      	movs	r2, #128	; 0x80
 800f0be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7ff f8fd 	bl	800e2c4 <dir_sdi>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
 800f0ce:	e048      	b.n	800f162 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f0d0:	463b      	mov	r3, r7
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff fe1b 	bl	800ed10 <create_name>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d139      	bne.n	800f158 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fc5a 	bl	800e99e <dir_find>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f0f6:	7dfb      	ldrb	r3, [r7, #23]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f0fc:	7dfb      	ldrb	r3, [r7, #23]
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	d12c      	bne.n	800f15c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f102:	7afb      	ldrb	r3, [r7, #11]
 800f104:	f003 0304 	and.w	r3, r3, #4
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d127      	bne.n	800f15c <follow_path+0xdc>
 800f10c:	2305      	movs	r3, #5
 800f10e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f110:	e024      	b.n	800f15c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f112:	7afb      	ldrb	r3, [r7, #11]
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d121      	bne.n	800f160 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	799b      	ldrb	r3, [r3, #6]
 800f120:	f003 0310 	and.w	r3, r3, #16
 800f124:	2b00      	cmp	r3, #0
 800f126:	d102      	bne.n	800f12e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f128:	2305      	movs	r3, #5
 800f12a:	75fb      	strb	r3, [r7, #23]
 800f12c:	e019      	b.n	800f162 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	695b      	ldr	r3, [r3, #20]
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	8992      	ldrh	r2, [r2, #12]
 800f13c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f140:	fb00 f202 	mul.w	r2, r0, r2
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	440b      	add	r3, r1
 800f148:	4619      	mov	r1, r3
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7ff fa60 	bl	800e610 <ld_clust>
 800f150:	4602      	mov	r2, r0
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f156:	e7bb      	b.n	800f0d0 <follow_path+0x50>
			if (res != FR_OK) break;
 800f158:	bf00      	nop
 800f15a:	e002      	b.n	800f162 <follow_path+0xe2>
				break;
 800f15c:	bf00      	nop
 800f15e:	e000      	b.n	800f162 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f160:	bf00      	nop
			}
		}
	}

	return res;
 800f162:	7dfb      	ldrb	r3, [r7, #23]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b087      	sub	sp, #28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f174:	f04f 33ff 	mov.w	r3, #4294967295
 800f178:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d031      	beq.n	800f1e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	617b      	str	r3, [r7, #20]
 800f188:	e002      	b.n	800f190 <get_ldnumber+0x24>
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	3301      	adds	r3, #1
 800f18e:	617b      	str	r3, [r7, #20]
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b1f      	cmp	r3, #31
 800f196:	d903      	bls.n	800f1a0 <get_ldnumber+0x34>
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	2b3a      	cmp	r3, #58	; 0x3a
 800f19e:	d1f4      	bne.n	800f18a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	2b3a      	cmp	r3, #58	; 0x3a
 800f1a6:	d11c      	bne.n	800f1e2 <get_ldnumber+0x76>
			tp = *path;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	1c5a      	adds	r2, r3, #1
 800f1b2:	60fa      	str	r2, [r7, #12]
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	3b30      	subs	r3, #48	; 0x30
 800f1b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b09      	cmp	r3, #9
 800f1be:	d80e      	bhi.n	800f1de <get_ldnumber+0x72>
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d10a      	bne.n	800f1de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d107      	bne.n	800f1de <get_ldnumber+0x72>
					vol = (int)i;
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	617b      	str	r3, [r7, #20]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	e002      	b.n	800f1e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f1e6:	693b      	ldr	r3, [r7, #16]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	371c      	adds	r7, #28
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	70da      	strb	r2, [r3, #3]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f04f 32ff 	mov.w	r2, #4294967295
 800f20a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7fe fc76 	bl	800db00 <move_window>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <check_fs+0x2a>
 800f21a:	2304      	movs	r3, #4
 800f21c:	e038      	b.n	800f290 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	3338      	adds	r3, #56	; 0x38
 800f222:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f226:	4618      	mov	r0, r3
 800f228:	f7fe f9ba 	bl	800d5a0 <ld_word>
 800f22c:	4603      	mov	r3, r0
 800f22e:	461a      	mov	r2, r3
 800f230:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f234:	429a      	cmp	r2, r3
 800f236:	d001      	beq.n	800f23c <check_fs+0x48>
 800f238:	2303      	movs	r3, #3
 800f23a:	e029      	b.n	800f290 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f242:	2be9      	cmp	r3, #233	; 0xe9
 800f244:	d009      	beq.n	800f25a <check_fs+0x66>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f24c:	2beb      	cmp	r3, #235	; 0xeb
 800f24e:	d11e      	bne.n	800f28e <check_fs+0x9a>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f256:	2b90      	cmp	r3, #144	; 0x90
 800f258:	d119      	bne.n	800f28e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	3338      	adds	r3, #56	; 0x38
 800f25e:	3336      	adds	r3, #54	; 0x36
 800f260:	4618      	mov	r0, r3
 800f262:	f7fe f9b5 	bl	800d5d0 <ld_dword>
 800f266:	4603      	mov	r3, r0
 800f268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f26c:	4a0a      	ldr	r2, [pc, #40]	; (800f298 <check_fs+0xa4>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d101      	bne.n	800f276 <check_fs+0x82>
 800f272:	2300      	movs	r3, #0
 800f274:	e00c      	b.n	800f290 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3338      	adds	r3, #56	; 0x38
 800f27a:	3352      	adds	r3, #82	; 0x52
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fe f9a7 	bl	800d5d0 <ld_dword>
 800f282:	4603      	mov	r3, r0
 800f284:	4a05      	ldr	r2, [pc, #20]	; (800f29c <check_fs+0xa8>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d101      	bne.n	800f28e <check_fs+0x9a>
 800f28a:	2300      	movs	r3, #0
 800f28c:	e000      	b.n	800f290 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f28e:	2302      	movs	r3, #2
}
 800f290:	4618      	mov	r0, r3
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	00544146 	.word	0x00544146
 800f29c:	33544146 	.word	0x33544146

0800f2a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b096      	sub	sp, #88	; 0x58
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f7ff ff59 	bl	800f16c <get_ldnumber>
 800f2ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	da01      	bge.n	800f2c6 <find_volume+0x26>
 800f2c2:	230b      	movs	r3, #11
 800f2c4:	e265      	b.n	800f792 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f2c6:	4a9f      	ldr	r2, [pc, #636]	; (800f544 <find_volume+0x2a4>)
 800f2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d101      	bne.n	800f2da <find_volume+0x3a>
 800f2d6:	230c      	movs	r3, #12
 800f2d8:	e25b      	b.n	800f792 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
 800f2e2:	f023 0301 	bic.w	r3, r3, #1
 800f2e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d01a      	beq.n	800f326 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f2:	785b      	ldrb	r3, [r3, #1]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fe f8b5 	bl	800d464 <disk_status>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f304:	f003 0301 	and.w	r3, r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d10c      	bne.n	800f326 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f30c:	79fb      	ldrb	r3, [r7, #7]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d007      	beq.n	800f322 <find_volume+0x82>
 800f312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f316:	f003 0304 	and.w	r3, r3, #4
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f31e:	230a      	movs	r3, #10
 800f320:	e237      	b.n	800f792 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f322:	2300      	movs	r3, #0
 800f324:	e235      	b.n	800f792 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f328:	2200      	movs	r2, #0
 800f32a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f336:	785b      	ldrb	r3, [r3, #1]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fe f8ad 	bl	800d498 <disk_initialize>
 800f33e:	4603      	mov	r3, r0
 800f340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f348:	f003 0301 	and.w	r3, r3, #1
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d001      	beq.n	800f354 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f350:	2303      	movs	r3, #3
 800f352:	e21e      	b.n	800f792 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f354:	79fb      	ldrb	r3, [r7, #7]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d007      	beq.n	800f36a <find_volume+0xca>
 800f35a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f35e:	f003 0304 	and.w	r3, r3, #4
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f366:	230a      	movs	r3, #10
 800f368:	e213      	b.n	800f792 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36c:	7858      	ldrb	r0, [r3, #1]
 800f36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f370:	330c      	adds	r3, #12
 800f372:	461a      	mov	r2, r3
 800f374:	2102      	movs	r1, #2
 800f376:	f7fe f8f5 	bl	800d564 <disk_ioctl>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <find_volume+0xe4>
 800f380:	2301      	movs	r3, #1
 800f382:	e206      	b.n	800f792 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f386:	899b      	ldrh	r3, [r3, #12]
 800f388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f38c:	d80d      	bhi.n	800f3aa <find_volume+0x10a>
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	899b      	ldrh	r3, [r3, #12]
 800f392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f396:	d308      	bcc.n	800f3aa <find_volume+0x10a>
 800f398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39a:	899b      	ldrh	r3, [r3, #12]
 800f39c:	461a      	mov	r2, r3
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	899b      	ldrh	r3, [r3, #12]
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	4013      	ands	r3, r2
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <find_volume+0x10e>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e1f1      	b.n	800f792 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f3b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f3b6:	f7ff ff1d 	bl	800f1f4 <check_fs>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d149      	bne.n	800f45c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f3cc:	e01e      	b.n	800f40c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3d6:	011b      	lsls	r3, r3, #4
 800f3d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f3dc:	4413      	add	r3, r2
 800f3de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d006      	beq.n	800f3f8 <find_volume+0x158>
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fe f8ee 	bl	800d5d0 <ld_dword>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	e000      	b.n	800f3fa <find_volume+0x15a>
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	3358      	adds	r3, #88	; 0x58
 800f400:	443b      	add	r3, r7
 800f402:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f408:	3301      	adds	r3, #1
 800f40a:	643b      	str	r3, [r7, #64]	; 0x40
 800f40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f40e:	2b03      	cmp	r3, #3
 800f410:	d9dd      	bls.n	800f3ce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f412:	2300      	movs	r3, #0
 800f414:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d002      	beq.n	800f422 <find_volume+0x182>
 800f41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f41e:	3b01      	subs	r3, #1
 800f420:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	3358      	adds	r3, #88	; 0x58
 800f428:	443b      	add	r3, r7
 800f42a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f42e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f432:	2b00      	cmp	r3, #0
 800f434:	d005      	beq.n	800f442 <find_volume+0x1a2>
 800f436:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f43a:	f7ff fedb 	bl	800f1f4 <check_fs>
 800f43e:	4603      	mov	r3, r0
 800f440:	e000      	b.n	800f444 <find_volume+0x1a4>
 800f442:	2303      	movs	r3, #3
 800f444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d905      	bls.n	800f45c <find_volume+0x1bc>
 800f450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f452:	3301      	adds	r3, #1
 800f454:	643b      	str	r3, [r7, #64]	; 0x40
 800f456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f458:	2b03      	cmp	r3, #3
 800f45a:	d9e2      	bls.n	800f422 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f45c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f460:	2b04      	cmp	r3, #4
 800f462:	d101      	bne.n	800f468 <find_volume+0x1c8>
 800f464:	2301      	movs	r3, #1
 800f466:	e194      	b.n	800f792 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d901      	bls.n	800f474 <find_volume+0x1d4>
 800f470:	230d      	movs	r3, #13
 800f472:	e18e      	b.n	800f792 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	3338      	adds	r3, #56	; 0x38
 800f478:	330b      	adds	r3, #11
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe f890 	bl	800d5a0 <ld_word>
 800f480:	4603      	mov	r3, r0
 800f482:	461a      	mov	r2, r3
 800f484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f486:	899b      	ldrh	r3, [r3, #12]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d001      	beq.n	800f490 <find_volume+0x1f0>
 800f48c:	230d      	movs	r3, #13
 800f48e:	e180      	b.n	800f792 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	3338      	adds	r3, #56	; 0x38
 800f494:	3316      	adds	r3, #22
 800f496:	4618      	mov	r0, r3
 800f498:	f7fe f882 	bl	800d5a0 <ld_word>
 800f49c:	4603      	mov	r3, r0
 800f49e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <find_volume+0x214>
 800f4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a8:	3338      	adds	r3, #56	; 0x38
 800f4aa:	3324      	adds	r3, #36	; 0x24
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fe f88f 	bl	800d5d0 <ld_dword>
 800f4b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4b8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c6:	789b      	ldrb	r3, [r3, #2]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d005      	beq.n	800f4d8 <find_volume+0x238>
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ce:	789b      	ldrb	r3, [r3, #2]
 800f4d0:	2b02      	cmp	r3, #2
 800f4d2:	d001      	beq.n	800f4d8 <find_volume+0x238>
 800f4d4:	230d      	movs	r3, #13
 800f4d6:	e15c      	b.n	800f792 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	789b      	ldrb	r3, [r3, #2]
 800f4dc:	461a      	mov	r2, r3
 800f4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4e0:	fb02 f303 	mul.w	r3, r2, r3
 800f4e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f4:	895b      	ldrh	r3, [r3, #10]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d008      	beq.n	800f50c <find_volume+0x26c>
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	895b      	ldrh	r3, [r3, #10]
 800f4fe:	461a      	mov	r2, r3
 800f500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f502:	895b      	ldrh	r3, [r3, #10]
 800f504:	3b01      	subs	r3, #1
 800f506:	4013      	ands	r3, r2
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <find_volume+0x270>
 800f50c:	230d      	movs	r3, #13
 800f50e:	e140      	b.n	800f792 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	3338      	adds	r3, #56	; 0x38
 800f514:	3311      	adds	r3, #17
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe f842 	bl	800d5a0 <ld_word>
 800f51c:	4603      	mov	r3, r0
 800f51e:	461a      	mov	r2, r3
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	891b      	ldrh	r3, [r3, #8]
 800f528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f52a:	8992      	ldrh	r2, [r2, #12]
 800f52c:	0952      	lsrs	r2, r2, #5
 800f52e:	b292      	uxth	r2, r2
 800f530:	fbb3 f1f2 	udiv	r1, r3, r2
 800f534:	fb01 f202 	mul.w	r2, r1, r2
 800f538:	1a9b      	subs	r3, r3, r2
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <find_volume+0x2a8>
 800f540:	230d      	movs	r3, #13
 800f542:	e126      	b.n	800f792 <find_volume+0x4f2>
 800f544:	20004730 	.word	0x20004730

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54a:	3338      	adds	r3, #56	; 0x38
 800f54c:	3313      	adds	r3, #19
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fe f826 	bl	800d5a0 <ld_word>
 800f554:	4603      	mov	r3, r0
 800f556:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d106      	bne.n	800f56c <find_volume+0x2cc>
 800f55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f560:	3338      	adds	r3, #56	; 0x38
 800f562:	3320      	adds	r3, #32
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe f833 	bl	800d5d0 <ld_dword>
 800f56a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56e:	3338      	adds	r3, #56	; 0x38
 800f570:	330e      	adds	r3, #14
 800f572:	4618      	mov	r0, r3
 800f574:	f7fe f814 	bl	800d5a0 <ld_word>
 800f578:	4603      	mov	r3, r0
 800f57a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f57c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <find_volume+0x2e6>
 800f582:	230d      	movs	r3, #13
 800f584:	e105      	b.n	800f792 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f586:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f58a:	4413      	add	r3, r2
 800f58c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f58e:	8911      	ldrh	r1, [r2, #8]
 800f590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f592:	8992      	ldrh	r2, [r2, #12]
 800f594:	0952      	lsrs	r2, r2, #5
 800f596:	b292      	uxth	r2, r2
 800f598:	fbb1 f2f2 	udiv	r2, r1, r2
 800f59c:	b292      	uxth	r2, r2
 800f59e:	4413      	add	r3, r2
 800f5a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f5a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d201      	bcs.n	800f5ae <find_volume+0x30e>
 800f5aa:	230d      	movs	r3, #13
 800f5ac:	e0f1      	b.n	800f792 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f5ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5b6:	8952      	ldrh	r2, [r2, #10]
 800f5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d101      	bne.n	800f5c8 <find_volume+0x328>
 800f5c4:	230d      	movs	r3, #13
 800f5c6:	e0e4      	b.n	800f792 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f5c8:	2303      	movs	r3, #3
 800f5ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d802      	bhi.n	800f5de <find_volume+0x33e>
 800f5d8:	2302      	movs	r3, #2
 800f5da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d802      	bhi.n	800f5ee <find_volume+0x34e>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f0:	1c9a      	adds	r2, r3, #2
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5fa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f5fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f600:	441a      	add	r2, r3
 800f602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f604:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f606:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60a:	441a      	add	r2, r3
 800f60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f610:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f614:	2b03      	cmp	r3, #3
 800f616:	d11e      	bne.n	800f656 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	3338      	adds	r3, #56	; 0x38
 800f61c:	332a      	adds	r3, #42	; 0x2a
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fd ffbe 	bl	800d5a0 <ld_word>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d001      	beq.n	800f62e <find_volume+0x38e>
 800f62a:	230d      	movs	r3, #13
 800f62c:	e0b1      	b.n	800f792 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	891b      	ldrh	r3, [r3, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <find_volume+0x39a>
 800f636:	230d      	movs	r3, #13
 800f638:	e0ab      	b.n	800f792 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	3338      	adds	r3, #56	; 0x38
 800f63e:	332c      	adds	r3, #44	; 0x2c
 800f640:	4618      	mov	r0, r3
 800f642:	f7fd ffc5 	bl	800d5d0 <ld_dword>
 800f646:	4602      	mov	r2, r0
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	647b      	str	r3, [r7, #68]	; 0x44
 800f654:	e01f      	b.n	800f696 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	891b      	ldrh	r3, [r3, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <find_volume+0x3c2>
 800f65e:	230d      	movs	r3, #13
 800f660:	e097      	b.n	800f792 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f668:	441a      	add	r2, r3
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f66e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f672:	2b02      	cmp	r3, #2
 800f674:	d103      	bne.n	800f67e <find_volume+0x3de>
 800f676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f678:	69db      	ldr	r3, [r3, #28]
 800f67a:	005b      	lsls	r3, r3, #1
 800f67c:	e00a      	b.n	800f694 <find_volume+0x3f4>
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	69da      	ldr	r2, [r3, #28]
 800f682:	4613      	mov	r3, r2
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	4413      	add	r3, r2
 800f688:	085a      	lsrs	r2, r3, #1
 800f68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68c:	69db      	ldr	r3, [r3, #28]
 800f68e:	f003 0301 	and.w	r3, r3, #1
 800f692:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f694:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f698:	6a1a      	ldr	r2, [r3, #32]
 800f69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69c:	899b      	ldrh	r3, [r3, #12]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6a2:	440b      	add	r3, r1
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6a8:	8989      	ldrh	r1, [r1, #12]
 800f6aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d201      	bcs.n	800f6b6 <find_volume+0x416>
 800f6b2:	230d      	movs	r3, #13
 800f6b4:	e06d      	b.n	800f792 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6bc:	619a      	str	r2, [r3, #24]
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	699a      	ldr	r2, [r3, #24]
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c8:	2280      	movs	r2, #128	; 0x80
 800f6ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6d0:	2b03      	cmp	r3, #3
 800f6d2:	d149      	bne.n	800f768 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	3338      	adds	r3, #56	; 0x38
 800f6d8:	3330      	adds	r3, #48	; 0x30
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fd ff60 	bl	800d5a0 <ld_word>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d140      	bne.n	800f768 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6ee:	f7fe fa07 	bl	800db00 <move_window>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d137      	bne.n	800f768 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f700:	3338      	adds	r3, #56	; 0x38
 800f702:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f706:	4618      	mov	r0, r3
 800f708:	f7fd ff4a 	bl	800d5a0 <ld_word>
 800f70c:	4603      	mov	r3, r0
 800f70e:	461a      	mov	r2, r3
 800f710:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f714:	429a      	cmp	r2, r3
 800f716:	d127      	bne.n	800f768 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71a:	3338      	adds	r3, #56	; 0x38
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fd ff57 	bl	800d5d0 <ld_dword>
 800f722:	4603      	mov	r3, r0
 800f724:	4a1d      	ldr	r2, [pc, #116]	; (800f79c <find_volume+0x4fc>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d11e      	bne.n	800f768 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72c:	3338      	adds	r3, #56	; 0x38
 800f72e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f732:	4618      	mov	r0, r3
 800f734:	f7fd ff4c 	bl	800d5d0 <ld_dword>
 800f738:	4603      	mov	r3, r0
 800f73a:	4a19      	ldr	r2, [pc, #100]	; (800f7a0 <find_volume+0x500>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d113      	bne.n	800f768 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f742:	3338      	adds	r3, #56	; 0x38
 800f744:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd ff41 	bl	800d5d0 <ld_dword>
 800f74e:	4602      	mov	r2, r0
 800f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f752:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	3338      	adds	r3, #56	; 0x38
 800f758:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fd ff37 	bl	800d5d0 <ld_dword>
 800f762:	4602      	mov	r2, r0
 800f764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f766:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f76a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f76e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f770:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <find_volume+0x504>)
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	3301      	adds	r3, #1
 800f776:	b29a      	uxth	r2, r3
 800f778:	4b0a      	ldr	r3, [pc, #40]	; (800f7a4 <find_volume+0x504>)
 800f77a:	801a      	strh	r2, [r3, #0]
 800f77c:	4b09      	ldr	r3, [pc, #36]	; (800f7a4 <find_volume+0x504>)
 800f77e:	881a      	ldrh	r2, [r3, #0]
 800f780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f782:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	4a08      	ldr	r2, [pc, #32]	; (800f7a8 <find_volume+0x508>)
 800f788:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f78a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f78c:	f7fe f950 	bl	800da30 <clear_lock>
#endif
	return FR_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3758      	adds	r7, #88	; 0x58
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	41615252 	.word	0x41615252
 800f7a0:	61417272 	.word	0x61417272
 800f7a4:	20004734 	.word	0x20004734
 800f7a8:	20004758 	.word	0x20004758

0800f7ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f7b6:	2309      	movs	r3, #9
 800f7b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d01c      	beq.n	800f7fa <validate+0x4e>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d018      	beq.n	800f7fa <validate+0x4e>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d013      	beq.n	800f7fa <validate+0x4e>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	889a      	ldrh	r2, [r3, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	88db      	ldrh	r3, [r3, #6]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d10c      	bne.n	800f7fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	785b      	ldrb	r3, [r3, #1]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fd fe3c 	bl	800d464 <disk_status>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <validate+0x4e>
			res = FR_OK;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f7fa:	7bfb      	ldrb	r3, [r7, #15]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d102      	bne.n	800f806 <validate+0x5a>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	e000      	b.n	800f808 <validate+0x5c>
 800f806:	2300      	movs	r3, #0
 800f808:	683a      	ldr	r2, [r7, #0]
 800f80a:	6013      	str	r3, [r2, #0]
	return res;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	4613      	mov	r3, r2
 800f824:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f82a:	f107 0310 	add.w	r3, r7, #16
 800f82e:	4618      	mov	r0, r3
 800f830:	f7ff fc9c 	bl	800f16c <get_ldnumber>
 800f834:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	da01      	bge.n	800f840 <f_mount+0x28>
 800f83c:	230b      	movs	r3, #11
 800f83e:	e02b      	b.n	800f898 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f840:	4a17      	ldr	r2, [pc, #92]	; (800f8a0 <f_mount+0x88>)
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f848:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d005      	beq.n	800f85c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f850:	69b8      	ldr	r0, [r7, #24]
 800f852:	f7fe f8ed 	bl	800da30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	2200      	movs	r2, #0
 800f85a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d002      	beq.n	800f868 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2200      	movs	r2, #0
 800f866:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	490d      	ldr	r1, [pc, #52]	; (800f8a0 <f_mount+0x88>)
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d002      	beq.n	800f87e <f_mount+0x66>
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d001      	beq.n	800f882 <f_mount+0x6a>
 800f87e:	2300      	movs	r3, #0
 800f880:	e00a      	b.n	800f898 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f882:	f107 010c 	add.w	r1, r7, #12
 800f886:	f107 0308 	add.w	r3, r7, #8
 800f88a:	2200      	movs	r2, #0
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff fd07 	bl	800f2a0 <find_volume>
 800f892:	4603      	mov	r3, r0
 800f894:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f896:	7dfb      	ldrb	r3, [r7, #23]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3720      	adds	r7, #32
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	20004730 	.word	0x20004730

0800f8a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b09a      	sub	sp, #104	; 0x68
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d101      	bne.n	800f8bc <f_open+0x18>
 800f8b8:	2309      	movs	r3, #9
 800f8ba:	e1bb      	b.n	800fc34 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f8c4:	79fa      	ldrb	r2, [r7, #7]
 800f8c6:	f107 0114 	add.w	r1, r7, #20
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7ff fce6 	bl	800f2a0 <find_volume>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f8da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f040 819f 	bne.w	800fc22 <f_open+0x37e>
		dj.obj.fs = fs;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	f107 0318 	add.w	r3, r7, #24
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7ff fbc5 	bl	800f080 <follow_path>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f8fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f900:	2b00      	cmp	r3, #0
 800f902:	d11a      	bne.n	800f93a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f908:	b25b      	sxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	da03      	bge.n	800f916 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f90e:	2306      	movs	r3, #6
 800f910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f914:	e011      	b.n	800f93a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f916:	79fb      	ldrb	r3, [r7, #7]
 800f918:	f023 0301 	bic.w	r3, r3, #1
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	bf14      	ite	ne
 800f920:	2301      	movne	r3, #1
 800f922:	2300      	moveq	r3, #0
 800f924:	b2db      	uxtb	r3, r3
 800f926:	461a      	mov	r2, r3
 800f928:	f107 0318 	add.w	r3, r7, #24
 800f92c:	4611      	mov	r1, r2
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fd ff36 	bl	800d7a0 <chk_lock>
 800f934:	4603      	mov	r3, r0
 800f936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f93a:	79fb      	ldrb	r3, [r7, #7]
 800f93c:	f003 031c 	and.w	r3, r3, #28
 800f940:	2b00      	cmp	r3, #0
 800f942:	d07f      	beq.n	800fa44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f944:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d017      	beq.n	800f97c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f94c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f950:	2b04      	cmp	r3, #4
 800f952:	d10e      	bne.n	800f972 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f954:	f7fd ff80 	bl	800d858 <enq_lock>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d006      	beq.n	800f96c <f_open+0xc8>
 800f95e:	f107 0318 	add.w	r3, r7, #24
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff f8dc 	bl	800eb20 <dir_register>
 800f968:	4603      	mov	r3, r0
 800f96a:	e000      	b.n	800f96e <f_open+0xca>
 800f96c:	2312      	movs	r3, #18
 800f96e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f972:	79fb      	ldrb	r3, [r7, #7]
 800f974:	f043 0308 	orr.w	r3, r3, #8
 800f978:	71fb      	strb	r3, [r7, #7]
 800f97a:	e010      	b.n	800f99e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f97c:	7fbb      	ldrb	r3, [r7, #30]
 800f97e:	f003 0311 	and.w	r3, r3, #17
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <f_open+0xea>
					res = FR_DENIED;
 800f986:	2307      	movs	r3, #7
 800f988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f98c:	e007      	b.n	800f99e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f98e:	79fb      	ldrb	r3, [r7, #7]
 800f990:	f003 0304 	and.w	r3, r3, #4
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <f_open+0xfa>
 800f998:	2308      	movs	r3, #8
 800f99a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f99e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d168      	bne.n	800fa78 <f_open+0x1d4>
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	f003 0308 	and.w	r3, r3, #8
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d063      	beq.n	800fa78 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f9b0:	f7fd fcf6 	bl	800d3a0 <get_fattime>
 800f9b4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b8:	330e      	adds	r3, #14
 800f9ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7fd fe45 	bl	800d64c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	3316      	adds	r3, #22
 800f9c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fd fe3f 	bl	800d64c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	330b      	adds	r3, #11
 800f9d2:	2220      	movs	r2, #32
 800f9d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9da:	4611      	mov	r1, r2
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe fe17 	bl	800e610 <ld_clust>
 800f9e2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fe fe2f 	bl	800e64e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f2:	331c      	adds	r3, #28
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fd fe28 	bl	800d64c <st_dword>
					fs->wflag = 1;
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fa02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d037      	beq.n	800fa78 <f_open+0x1d4>
						dw = fs->winsect;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa0c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fa0e:	f107 0318 	add.w	r3, r7, #24
 800fa12:	2200      	movs	r2, #0
 800fa14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fe fb1f 	bl	800e05a <remove_chain>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fa22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d126      	bne.n	800fa78 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fe f866 	bl	800db00 <move_window>
 800fa34:	4603      	mov	r3, r0
 800fa36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa3e:	3a01      	subs	r2, #1
 800fa40:	615a      	str	r2, [r3, #20]
 800fa42:	e019      	b.n	800fa78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fa44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d115      	bne.n	800fa78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fa4c:	7fbb      	ldrb	r3, [r7, #30]
 800fa4e:	f003 0310 	and.w	r3, r3, #16
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d003      	beq.n	800fa5e <f_open+0x1ba>
					res = FR_NO_FILE;
 800fa56:	2304      	movs	r3, #4
 800fa58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa5c:	e00c      	b.n	800fa78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	f003 0302 	and.w	r3, r3, #2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d007      	beq.n	800fa78 <f_open+0x1d4>
 800fa68:	7fbb      	ldrb	r3, [r7, #30]
 800fa6a:	f003 0301 	and.w	r3, r3, #1
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <f_open+0x1d4>
						res = FR_DENIED;
 800fa72:	2307      	movs	r3, #7
 800fa74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fa78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d128      	bne.n	800fad2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fa80:	79fb      	ldrb	r3, [r7, #7]
 800fa82:	f003 0308 	and.w	r3, r3, #8
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d003      	beq.n	800fa92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fa8a:	79fb      	ldrb	r3, [r7, #7]
 800fa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fa9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800faa0:	79fb      	ldrb	r3, [r7, #7]
 800faa2:	f023 0301 	bic.w	r3, r3, #1
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	bf14      	ite	ne
 800faaa:	2301      	movne	r3, #1
 800faac:	2300      	moveq	r3, #0
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	461a      	mov	r2, r3
 800fab2:	f107 0318 	add.w	r3, r7, #24
 800fab6:	4611      	mov	r1, r2
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fd feef 	bl	800d89c <inc_lock>
 800fabe:	4602      	mov	r2, r0
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d102      	bne.n	800fad2 <f_open+0x22e>
 800facc:	2302      	movs	r3, #2
 800face:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f040 80a3 	bne.w	800fc22 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fe fd94 	bl	800e610 <ld_clust>
 800fae8:	4602      	mov	r2, r0
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800faee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf0:	331c      	adds	r3, #28
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fd fd6c 	bl	800d5d0 <ld_dword>
 800faf8:	4602      	mov	r2, r0
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2200      	movs	r2, #0
 800fb02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	88da      	ldrh	r2, [r3, #6]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	79fa      	ldrb	r2, [r7, #7]
 800fb16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2200      	movs	r2, #0
 800fb22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2200      	movs	r2, #0
 800fb28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3330      	adds	r3, #48	; 0x30
 800fb2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb32:	2100      	movs	r1, #0
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7fd fdd6 	bl	800d6e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fb3a:	79fb      	ldrb	r3, [r7, #7]
 800fb3c:	f003 0320 	and.w	r3, r3, #32
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d06e      	beq.n	800fc22 <f_open+0x37e>
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d06a      	beq.n	800fc22 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	68da      	ldr	r2, [r3, #12]
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	895b      	ldrh	r3, [r3, #10]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	899b      	ldrh	r3, [r3, #12]
 800fb5e:	fb02 f303 	mul.w	r3, r2, r3
 800fb62:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb70:	e016      	b.n	800fba0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fe f87f 	bl	800dc7a <get_fat>
 800fb7c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fb7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d802      	bhi.n	800fb8a <f_open+0x2e6>
 800fb84:	2302      	movs	r3, #2
 800fb86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fb8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb90:	d102      	bne.n	800fb98 <f_open+0x2f4>
 800fb92:	2301      	movs	r3, #1
 800fb94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d103      	bne.n	800fbb0 <f_open+0x30c>
 800fba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fbaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d8e0      	bhi.n	800fb72 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fbb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fbb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d131      	bne.n	800fc22 <f_open+0x37e>
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	899b      	ldrh	r3, [r3, #12]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbca:	fb01 f202 	mul.w	r2, r1, r2
 800fbce:	1a9b      	subs	r3, r3, r2
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d026      	beq.n	800fc22 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fe f82f 	bl	800dc3c <clust2sect>
 800fbde:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d103      	bne.n	800fbee <f_open+0x34a>
						res = FR_INT_ERR;
 800fbe6:	2302      	movs	r3, #2
 800fbe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fbec:	e019      	b.n	800fc22 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	899b      	ldrh	r3, [r3, #12]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800fbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbfc:	441a      	add	r2, r3
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	7858      	ldrb	r0, [r3, #1]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6a1a      	ldr	r2, [r3, #32]
 800fc10:	2301      	movs	r3, #1
 800fc12:	f7fd fc67 	bl	800d4e4 <disk_read>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <f_open+0x37e>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <f_open+0x38c>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3768      	adds	r7, #104	; 0x68
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b08c      	sub	sp, #48	; 0x30
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2200      	movs	r2, #0
 800fc52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f107 0210 	add.w	r2, r7, #16
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff fda5 	bl	800f7ac <validate>
 800fc62:	4603      	mov	r3, r0
 800fc64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fc68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d107      	bne.n	800fc80 <f_write+0x44>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	7d5b      	ldrb	r3, [r3, #21]
 800fc74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fc78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d002      	beq.n	800fc86 <f_write+0x4a>
 800fc80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc84:	e16a      	b.n	800ff5c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	7d1b      	ldrb	r3, [r3, #20]
 800fc8a:	f003 0302 	and.w	r3, r3, #2
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <f_write+0x5a>
 800fc92:	2307      	movs	r3, #7
 800fc94:	e162      	b.n	800ff5c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	699a      	ldr	r2, [r3, #24]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	441a      	add	r2, r3
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	f080 814c 	bcs.w	800ff40 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	43db      	mvns	r3, r3
 800fcae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fcb0:	e146      	b.n	800ff40 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	699b      	ldr	r3, [r3, #24]
 800fcb6:	693a      	ldr	r2, [r7, #16]
 800fcb8:	8992      	ldrh	r2, [r2, #12]
 800fcba:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcbe:	fb01 f202 	mul.w	r2, r1, r2
 800fcc2:	1a9b      	subs	r3, r3, r2
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f040 80f1 	bne.w	800feac <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	693a      	ldr	r2, [r7, #16]
 800fcd0:	8992      	ldrh	r2, [r2, #12]
 800fcd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcd6:	693a      	ldr	r2, [r7, #16]
 800fcd8:	8952      	ldrh	r2, [r2, #10]
 800fcda:	3a01      	subs	r2, #1
 800fcdc:	4013      	ands	r3, r2
 800fcde:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d143      	bne.n	800fd6e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	699b      	ldr	r3, [r3, #24]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10c      	bne.n	800fd08 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d11a      	bne.n	800fd30 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fe fa10 	bl	800e124 <create_chain>
 800fd04:	62b8      	str	r0, [r7, #40]	; 0x28
 800fd06:	e013      	b.n	800fd30 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d007      	beq.n	800fd20 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	4619      	mov	r1, r3
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7fe fa9c 	bl	800e254 <clmt_clust>
 800fd1c:	62b8      	str	r0, [r7, #40]	; 0x28
 800fd1e:	e007      	b.n	800fd30 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	69db      	ldr	r3, [r3, #28]
 800fd26:	4619      	mov	r1, r3
 800fd28:	4610      	mov	r0, r2
 800fd2a:	f7fe f9fb 	bl	800e124 <create_chain>
 800fd2e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f000 8109 	beq.w	800ff4a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d104      	bne.n	800fd48 <f_write+0x10c>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2202      	movs	r2, #2
 800fd42:	755a      	strb	r2, [r3, #21]
 800fd44:	2302      	movs	r3, #2
 800fd46:	e109      	b.n	800ff5c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4e:	d104      	bne.n	800fd5a <f_write+0x11e>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2201      	movs	r2, #1
 800fd54:	755a      	strb	r2, [r3, #21]
 800fd56:	2301      	movs	r3, #1
 800fd58:	e100      	b.n	800ff5c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd5e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <f_write+0x132>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd6c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	7d1b      	ldrb	r3, [r3, #20]
 800fd72:	b25b      	sxtb	r3, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	da18      	bge.n	800fdaa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	7858      	ldrb	r0, [r3, #1]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6a1a      	ldr	r2, [r3, #32]
 800fd86:	2301      	movs	r3, #1
 800fd88:	f7fd fbcc 	bl	800d524 <disk_write>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d004      	beq.n	800fd9c <f_write+0x160>
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2201      	movs	r2, #1
 800fd96:	755a      	strb	r2, [r3, #21]
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e0df      	b.n	800ff5c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	7d1b      	ldrb	r3, [r3, #20]
 800fda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fdaa:	693a      	ldr	r2, [r7, #16]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	69db      	ldr	r3, [r3, #28]
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	f7fd ff42 	bl	800dc3c <clust2sect>
 800fdb8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d104      	bne.n	800fdca <f_write+0x18e>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	755a      	strb	r2, [r3, #21]
 800fdc6:	2302      	movs	r3, #2
 800fdc8:	e0c8      	b.n	800ff5c <f_write+0x320>
			sect += csect;
 800fdca:	697a      	ldr	r2, [r7, #20]
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	4413      	add	r3, r2
 800fdd0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	899b      	ldrh	r3, [r3, #12]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdde:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d043      	beq.n	800fe6e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fde6:	69ba      	ldr	r2, [r7, #24]
 800fde8:	6a3b      	ldr	r3, [r7, #32]
 800fdea:	4413      	add	r3, r2
 800fdec:	693a      	ldr	r2, [r7, #16]
 800fdee:	8952      	ldrh	r2, [r2, #10]
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d905      	bls.n	800fe00 <f_write+0x1c4>
					cc = fs->csize - csect;
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	895b      	ldrh	r3, [r3, #10]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	7858      	ldrb	r0, [r3, #1]
 800fe04:	6a3b      	ldr	r3, [r7, #32]
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	69f9      	ldr	r1, [r7, #28]
 800fe0a:	f7fd fb8b 	bl	800d524 <disk_write>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d004      	beq.n	800fe1e <f_write+0x1e2>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2201      	movs	r2, #1
 800fe18:	755a      	strb	r2, [r3, #21]
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e09e      	b.n	800ff5c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6a1a      	ldr	r2, [r3, #32]
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	6a3a      	ldr	r2, [r7, #32]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d918      	bls.n	800fe5e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6a1a      	ldr	r2, [r3, #32]
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	693a      	ldr	r2, [r7, #16]
 800fe3c:	8992      	ldrh	r2, [r2, #12]
 800fe3e:	fb02 f303 	mul.w	r3, r2, r3
 800fe42:	69fa      	ldr	r2, [r7, #28]
 800fe44:	18d1      	adds	r1, r2, r3
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	899b      	ldrh	r3, [r3, #12]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	f7fd fc2a 	bl	800d6a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	7d1b      	ldrb	r3, [r3, #20]
 800fe54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	899b      	ldrh	r3, [r3, #12]
 800fe62:	461a      	mov	r2, r3
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	fb02 f303 	mul.w	r3, r2, r3
 800fe6a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fe6c:	e04b      	b.n	800ff06 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d016      	beq.n	800fea6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	699a      	ldr	r2, [r3, #24]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d210      	bcs.n	800fea6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	7858      	ldrb	r0, [r3, #1]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe8e:	2301      	movs	r3, #1
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	f7fd fb27 	bl	800d4e4 <disk_read>
 800fe96:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d004      	beq.n	800fea6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	755a      	strb	r2, [r3, #21]
 800fea2:	2301      	movs	r3, #1
 800fea4:	e05a      	b.n	800ff5c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	697a      	ldr	r2, [r7, #20]
 800feaa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	899b      	ldrh	r3, [r3, #12]
 800feb0:	4618      	mov	r0, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	699b      	ldr	r3, [r3, #24]
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	8992      	ldrh	r2, [r2, #12]
 800feba:	fbb3 f1f2 	udiv	r1, r3, r2
 800febe:	fb01 f202 	mul.w	r2, r1, r2
 800fec2:	1a9b      	subs	r3, r3, r2
 800fec4:	1ac3      	subs	r3, r0, r3
 800fec6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d901      	bls.n	800fed4 <f_write+0x298>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	699b      	ldr	r3, [r3, #24]
 800fede:	693a      	ldr	r2, [r7, #16]
 800fee0:	8992      	ldrh	r2, [r2, #12]
 800fee2:	fbb3 f0f2 	udiv	r0, r3, r2
 800fee6:	fb00 f202 	mul.w	r2, r0, r2
 800feea:	1a9b      	subs	r3, r3, r2
 800feec:	440b      	add	r3, r1
 800feee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef0:	69f9      	ldr	r1, [r7, #28]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fd fbd6 	bl	800d6a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	7d1b      	ldrb	r3, [r3, #20]
 800fefc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ff06:	69fa      	ldr	r2, [r7, #28]
 800ff08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0a:	4413      	add	r3, r2
 800ff0c:	61fb      	str	r3, [r7, #28]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	441a      	add	r2, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	619a      	str	r2, [r3, #24]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	68da      	ldr	r2, [r3, #12]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	699b      	ldr	r3, [r3, #24]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	bf38      	it	cc
 800ff26:	461a      	movcc	r2, r3
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	60da      	str	r2, [r3, #12]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff32:	441a      	add	r2, r3
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	601a      	str	r2, [r3, #0]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f47f aeb5 	bne.w	800fcb2 <f_write+0x76>
 800ff48:	e000      	b.n	800ff4c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ff4a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	7d1b      	ldrb	r3, [r3, #20]
 800ff50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff54:	b2da      	uxtb	r2, r3
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ff5a:	2300      	movs	r3, #0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3730      	adds	r7, #48	; 0x30
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f107 0208 	add.w	r2, r7, #8
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7ff fc19 	bl	800f7ac <validate>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d168      	bne.n	8010056 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	7d1b      	ldrb	r3, [r3, #20]
 800ff88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d062      	beq.n	8010056 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	7d1b      	ldrb	r3, [r3, #20]
 800ff94:	b25b      	sxtb	r3, r3
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	da15      	bge.n	800ffc6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	7858      	ldrb	r0, [r3, #1]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a1a      	ldr	r2, [r3, #32]
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	f7fd fabb 	bl	800d524 <disk_write>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <f_sync+0x54>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e04f      	b.n	8010058 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	7d1b      	ldrb	r3, [r3, #20]
 800ffbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffc6:	f7fd f9eb 	bl	800d3a0 <get_fattime>
 800ffca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffcc:	68ba      	ldr	r2, [r7, #8]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	f7fd fd93 	bl	800db00 <move_window>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d138      	bne.n	8010056 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	330b      	adds	r3, #11
 800ffee:	781a      	ldrb	r2, [r3, #0]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	330b      	adds	r3, #11
 800fff4:	f042 0220 	orr.w	r2, r2, #32
 800fff8:	b2d2      	uxtb	r2, r2
 800fffa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6818      	ldr	r0, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	461a      	mov	r2, r3
 8010006:	68f9      	ldr	r1, [r7, #12]
 8010008:	f7fe fb21 	bl	800e64e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f103 021c 	add.w	r2, r3, #28
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	4619      	mov	r1, r3
 8010018:	4610      	mov	r0, r2
 801001a:	f7fd fb17 	bl	800d64c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3316      	adds	r3, #22
 8010022:	6939      	ldr	r1, [r7, #16]
 8010024:	4618      	mov	r0, r3
 8010026:	f7fd fb11 	bl	800d64c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	3312      	adds	r3, #18
 801002e:	2100      	movs	r1, #0
 8010030:	4618      	mov	r0, r3
 8010032:	f7fd faf0 	bl	800d616 <st_word>
					fs->wflag = 1;
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	2201      	movs	r2, #1
 801003a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd fd8c 	bl	800db5c <sync_fs>
 8010044:	4603      	mov	r3, r0
 8010046:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	7d1b      	ldrb	r3, [r3, #20]
 801004c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010050:	b2da      	uxtb	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010056:	7dfb      	ldrb	r3, [r7, #23]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3718      	adds	r7, #24
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}

08010060 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7ff ff7b 	bl	800ff64 <f_sync>
 801006e:	4603      	mov	r3, r0
 8010070:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010072:	7bfb      	ldrb	r3, [r7, #15]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d118      	bne.n	80100aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f107 0208 	add.w	r2, r7, #8
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff fb93 	bl	800f7ac <validate>
 8010086:	4603      	mov	r3, r0
 8010088:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801008a:	7bfb      	ldrb	r3, [r7, #15]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10c      	bne.n	80100aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	4618      	mov	r0, r3
 8010096:	f7fd fc8f 	bl	800d9b8 <dec_lock>
 801009a:	4603      	mov	r3, r0
 801009c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801009e:	7bfb      	ldrb	r3, [r7, #15]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d102      	bne.n	80100aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80100aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b092      	sub	sp, #72	; 0x48
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80100c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80100c4:	f107 030c 	add.w	r3, r7, #12
 80100c8:	2200      	movs	r2, #0
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff f8e8 	bl	800f2a0 <find_volume>
 80100d0:	4603      	mov	r3, r0
 80100d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80100d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f040 8099 	bne.w	8010212 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80100e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80100e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e8:	699a      	ldr	r2, [r3, #24]
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	69db      	ldr	r3, [r3, #28]
 80100ee:	3b02      	subs	r3, #2
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d804      	bhi.n	80100fe <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80100f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f6:	699a      	ldr	r2, [r3, #24]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	e089      	b.n	8010212 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d128      	bne.n	801015c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801010a:	2302      	movs	r3, #2
 801010c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801010e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010110:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010112:	f107 0314 	add.w	r3, r7, #20
 8010116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010118:	4618      	mov	r0, r3
 801011a:	f7fd fdae 	bl	800dc7a <get_fat>
 801011e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010126:	d103      	bne.n	8010130 <f_getfree+0x7c>
 8010128:	2301      	movs	r3, #1
 801012a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801012e:	e063      	b.n	80101f8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010132:	2b01      	cmp	r3, #1
 8010134:	d103      	bne.n	801013e <f_getfree+0x8a>
 8010136:	2302      	movs	r3, #2
 8010138:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801013c:	e05c      	b.n	80101f8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801013e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010140:	2b00      	cmp	r3, #0
 8010142:	d102      	bne.n	801014a <f_getfree+0x96>
 8010144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010146:	3301      	adds	r3, #1
 8010148:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801014a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801014c:	3301      	adds	r3, #1
 801014e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010152:	69db      	ldr	r3, [r3, #28]
 8010154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010156:	429a      	cmp	r2, r3
 8010158:	d3db      	bcc.n	8010112 <f_getfree+0x5e>
 801015a:	e04d      	b.n	80101f8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801015c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015e:	69db      	ldr	r3, [r3, #28]
 8010160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010166:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	637b      	str	r3, [r7, #52]	; 0x34
 801016c:	2300      	movs	r3, #0
 801016e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8010170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010172:	2b00      	cmp	r3, #0
 8010174:	d113      	bne.n	801019e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	1c5a      	adds	r2, r3, #1
 801017c:	63ba      	str	r2, [r7, #56]	; 0x38
 801017e:	4619      	mov	r1, r3
 8010180:	f7fd fcbe 	bl	800db00 <move_window>
 8010184:	4603      	mov	r3, r0
 8010186:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801018a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801018e:	2b00      	cmp	r3, #0
 8010190:	d131      	bne.n	80101f6 <f_getfree+0x142>
							p = fs->win;
 8010192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010194:	3338      	adds	r3, #56	; 0x38
 8010196:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019a:	899b      	ldrh	r3, [r3, #12]
 801019c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801019e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d10f      	bne.n	80101c6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80101a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101a8:	f7fd f9fa 	bl	800d5a0 <ld_word>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d102      	bne.n	80101b8 <f_getfree+0x104>
 80101b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b4:	3301      	adds	r3, #1
 80101b6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80101b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ba:	3302      	adds	r3, #2
 80101bc:	633b      	str	r3, [r7, #48]	; 0x30
 80101be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c0:	3b02      	subs	r3, #2
 80101c2:	637b      	str	r3, [r7, #52]	; 0x34
 80101c4:	e010      	b.n	80101e8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80101c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c8:	f7fd fa02 	bl	800d5d0 <ld_dword>
 80101cc:	4603      	mov	r3, r0
 80101ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d102      	bne.n	80101dc <f_getfree+0x128>
 80101d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101d8:	3301      	adds	r3, #1
 80101da:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80101dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101de:	3304      	adds	r3, #4
 80101e0:	633b      	str	r3, [r7, #48]	; 0x30
 80101e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e4:	3b04      	subs	r3, #4
 80101e6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80101e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ea:	3b01      	subs	r3, #1
 80101ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1bd      	bne.n	8010170 <f_getfree+0xbc>
 80101f4:	e000      	b.n	80101f8 <f_getfree+0x144>
							if (res != FR_OK) break;
 80101f6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101fc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80101fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010202:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010206:	791a      	ldrb	r2, [r3, #4]
 8010208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020a:	f042 0201 	orr.w	r2, r2, #1
 801020e:	b2d2      	uxtb	r2, r2
 8010210:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010212:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010216:	4618      	mov	r0, r3
 8010218:	3748      	adds	r7, #72	; 0x48
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	460b      	mov	r3, r1
 8010228:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	2b0a      	cmp	r3, #10
 801022e:	d103      	bne.n	8010238 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010230:	210d      	movs	r1, #13
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7ff fff3 	bl	801021e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	db25      	blt.n	8010290 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	1c5a      	adds	r2, r3, #1
 8010248:	60fa      	str	r2, [r7, #12]
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	4413      	add	r3, r2
 801024e:	78fa      	ldrb	r2, [r7, #3]
 8010250:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2b3c      	cmp	r3, #60	; 0x3c
 8010256:	dd12      	ble.n	801027e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6818      	ldr	r0, [r3, #0]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f103 010c 	add.w	r1, r3, #12
 8010262:	68fa      	ldr	r2, [r7, #12]
 8010264:	f107 0308 	add.w	r3, r7, #8
 8010268:	f7ff fce8 	bl	800fc3c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801026c:	68ba      	ldr	r2, [r7, #8]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	429a      	cmp	r2, r3
 8010272:	d101      	bne.n	8010278 <putc_bfd+0x5a>
 8010274:	2300      	movs	r3, #0
 8010276:	e001      	b.n	801027c <putc_bfd+0x5e>
 8010278:	f04f 33ff 	mov.w	r3, #4294967295
 801027c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	609a      	str	r2, [r3, #8]
 801028e:	e000      	b.n	8010292 <putc_bfd+0x74>
	if (i < 0) return;
 8010290:	bf00      	nop
}
 8010292:	3710      	adds	r7, #16
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	db16      	blt.n	80102d6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6818      	ldr	r0, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f103 010c 	add.w	r1, r3, #12
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	461a      	mov	r2, r3
 80102b8:	f107 030c 	add.w	r3, r7, #12
 80102bc:	f7ff fcbe 	bl	800fc3c <f_write>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d107      	bne.n	80102d6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d102      	bne.n	80102d6 <putc_flush+0x3e>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	e001      	b.n	80102da <putc_flush+0x42>
	return EOF;
 80102d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80102e2:	b480      	push	{r7}
 80102e4:	b083      	sub	sp, #12
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
 80102ea:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	683a      	ldr	r2, [r7, #0]
 80102f0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	605a      	str	r2, [r3, #4]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	609a      	str	r2, [r3, #8]
}
 8010300:	bf00      	nop
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801030c:	b40e      	push	{r1, r2, r3}
 801030e:	b580      	push	{r7, lr}
 8010310:	b0a7      	sub	sp, #156	; 0x9c
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8010316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801031a:	6879      	ldr	r1, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff ffe0 	bl	80102e2 <putc_init>

	va_start(arp, fmt);
 8010322:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010326:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8010328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8010338:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 81f2 	beq.w	8010726 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8010342:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010346:	2b25      	cmp	r3, #37	; 0x25
 8010348:	d008      	beq.n	801035c <f_printf+0x50>
			putc_bfd(&pb, c);
 801034a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801034e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010352:	4611      	mov	r1, r2
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff ff62 	bl	801021e <putc_bfd>
			continue;
 801035a:	e1e3      	b.n	8010724 <f_printf+0x418>
		}
		w = f = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010362:	2300      	movs	r3, #0
 8010364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010368:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801036c:	1c5a      	adds	r2, r3, #1
 801036e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010378:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801037c:	2b30      	cmp	r3, #48	; 0x30
 801037e:	d10b      	bne.n	8010398 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8010380:	2301      	movs	r3, #1
 8010382:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010396:	e024      	b.n	80103e2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010398:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801039c:	2b2d      	cmp	r3, #45	; 0x2d
 801039e:	d120      	bne.n	80103e2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80103a0:	2302      	movs	r3, #2
 80103a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80103a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80103b6:	e014      	b.n	80103e2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80103b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80103bc:	4613      	mov	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	461a      	mov	r2, r3
 80103c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80103ca:	4413      	add	r3, r2
 80103cc:	3b30      	subs	r3, #48	; 0x30
 80103ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80103d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80103e2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80103e6:	2b2f      	cmp	r3, #47	; 0x2f
 80103e8:	d903      	bls.n	80103f2 <f_printf+0xe6>
 80103ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80103ee:	2b39      	cmp	r3, #57	; 0x39
 80103f0:	d9e2      	bls.n	80103b8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80103f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80103f6:	2b6c      	cmp	r3, #108	; 0x6c
 80103f8:	d003      	beq.n	8010402 <f_printf+0xf6>
 80103fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80103fe:	2b4c      	cmp	r3, #76	; 0x4c
 8010400:	d10d      	bne.n	801041e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8010402:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010406:	f043 0304 	orr.w	r3, r3, #4
 801040a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801040e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010412:	1c5a      	adds	r2, r3, #1
 8010414:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801041e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 8181 	beq.w	801072a <f_printf+0x41e>
		d = c;
 8010428:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801042c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8010430:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010434:	2b60      	cmp	r3, #96	; 0x60
 8010436:	d908      	bls.n	801044a <f_printf+0x13e>
 8010438:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801043c:	2b7a      	cmp	r3, #122	; 0x7a
 801043e:	d804      	bhi.n	801044a <f_printf+0x13e>
 8010440:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010444:	3b20      	subs	r3, #32
 8010446:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801044a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801044e:	3b42      	subs	r3, #66	; 0x42
 8010450:	2b16      	cmp	r3, #22
 8010452:	f200 8098 	bhi.w	8010586 <f_printf+0x27a>
 8010456:	a201      	add	r2, pc, #4	; (adr r2, 801045c <f_printf+0x150>)
 8010458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045c:	08010567 	.word	0x08010567
 8010460:	0801054f 	.word	0x0801054f
 8010464:	08010577 	.word	0x08010577
 8010468:	08010587 	.word	0x08010587
 801046c:	08010587 	.word	0x08010587
 8010470:	08010587 	.word	0x08010587
 8010474:	08010587 	.word	0x08010587
 8010478:	08010587 	.word	0x08010587
 801047c:	08010587 	.word	0x08010587
 8010480:	08010587 	.word	0x08010587
 8010484:	08010587 	.word	0x08010587
 8010488:	08010587 	.word	0x08010587
 801048c:	08010587 	.word	0x08010587
 8010490:	0801056f 	.word	0x0801056f
 8010494:	08010587 	.word	0x08010587
 8010498:	08010587 	.word	0x08010587
 801049c:	08010587 	.word	0x08010587
 80104a0:	080104b9 	.word	0x080104b9
 80104a4:	08010587 	.word	0x08010587
 80104a8:	08010577 	.word	0x08010577
 80104ac:	08010587 	.word	0x08010587
 80104b0:	08010587 	.word	0x08010587
 80104b4:	0801057f 	.word	0x0801057f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80104b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104ba:	1d1a      	adds	r2, r3, #4
 80104bc:	67ba      	str	r2, [r7, #120]	; 0x78
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80104c2:	2300      	movs	r3, #0
 80104c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80104c8:	e004      	b.n	80104d4 <f_printf+0x1c8>
 80104ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104ce:	3301      	adds	r3, #1
 80104d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80104d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104da:	4413      	add	r3, r2
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1f3      	bne.n	80104ca <f_printf+0x1be>
			if (!(f & 2)) {
 80104e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80104e6:	f003 0302 	and.w	r3, r3, #2
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d11a      	bne.n	8010524 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80104ee:	e005      	b.n	80104fc <f_printf+0x1f0>
 80104f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104f4:	2120      	movs	r1, #32
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ff fe91 	bl	801021e <putc_bfd>
 80104fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010500:	1c5a      	adds	r2, r3, #1
 8010502:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010506:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801050a:	429a      	cmp	r2, r3
 801050c:	d8f0      	bhi.n	80104f0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801050e:	e009      	b.n	8010524 <f_printf+0x218>
 8010510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010512:	1c5a      	adds	r2, r3, #1
 8010514:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010516:	781a      	ldrb	r2, [r3, #0]
 8010518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff fe7d 	bl	801021e <putc_bfd>
 8010524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d1f1      	bne.n	8010510 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801052c:	e005      	b.n	801053a <f_printf+0x22e>
 801052e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010532:	2120      	movs	r1, #32
 8010534:	4618      	mov	r0, r3
 8010536:	f7ff fe72 	bl	801021e <putc_bfd>
 801053a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801053e:	1c5a      	adds	r2, r3, #1
 8010540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010544:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010548:	429a      	cmp	r2, r3
 801054a:	d8f0      	bhi.n	801052e <f_printf+0x222>
			continue;
 801054c:	e0ea      	b.n	8010724 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801054e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010550:	1d1a      	adds	r2, r3, #4
 8010552:	67ba      	str	r2, [r7, #120]	; 0x78
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	b2da      	uxtb	r2, r3
 8010558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801055c:	4611      	mov	r1, r2
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff fe5d 	bl	801021e <putc_bfd>
 8010564:	e0de      	b.n	8010724 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010566:	2302      	movs	r3, #2
 8010568:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801056c:	e014      	b.n	8010598 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801056e:	2308      	movs	r3, #8
 8010570:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010574:	e010      	b.n	8010598 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010576:	230a      	movs	r3, #10
 8010578:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801057c:	e00c      	b.n	8010598 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801057e:	2310      	movs	r3, #16
 8010580:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010584:	e008      	b.n	8010598 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010586:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801058a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801058e:	4611      	mov	r1, r2
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff fe44 	bl	801021e <putc_bfd>
 8010596:	e0c5      	b.n	8010724 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010598:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d004      	beq.n	80105ae <f_printf+0x2a2>
 80105a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105a6:	1d1a      	adds	r2, r3, #4
 80105a8:	67ba      	str	r2, [r7, #120]	; 0x78
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	e00c      	b.n	80105c8 <f_printf+0x2bc>
 80105ae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80105b2:	2b44      	cmp	r3, #68	; 0x44
 80105b4:	d104      	bne.n	80105c0 <f_printf+0x2b4>
 80105b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105b8:	1d1a      	adds	r2, r3, #4
 80105ba:	67ba      	str	r2, [r7, #120]	; 0x78
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	e003      	b.n	80105c8 <f_printf+0x2bc>
 80105c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105c2:	1d1a      	adds	r2, r3, #4
 80105c4:	67ba      	str	r2, [r7, #120]	; 0x78
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80105cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80105d0:	2b44      	cmp	r3, #68	; 0x44
 80105d2:	d10e      	bne.n	80105f2 <f_printf+0x2e6>
 80105d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105d8:	2b00      	cmp	r3, #0
 80105da:	da0a      	bge.n	80105f2 <f_printf+0x2e6>
			v = 0 - v;
 80105dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105e0:	425b      	negs	r3, r3
 80105e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80105e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105ea:	f043 0308 	orr.w	r3, r3, #8
 80105ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80105f8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80105fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010600:	fbb3 f1f2 	udiv	r1, r3, r2
 8010604:	fb01 f202 	mul.w	r2, r1, r2
 8010608:	1a9b      	subs	r3, r3, r2
 801060a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 801060e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8010612:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010616:	fbb2 f3f3 	udiv	r3, r2, r3
 801061a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801061e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010622:	2b09      	cmp	r3, #9
 8010624:	d90b      	bls.n	801063e <f_printf+0x332>
 8010626:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801062a:	2b78      	cmp	r3, #120	; 0x78
 801062c:	d101      	bne.n	8010632 <f_printf+0x326>
 801062e:	2227      	movs	r2, #39	; 0x27
 8010630:	e000      	b.n	8010634 <f_printf+0x328>
 8010632:	2207      	movs	r2, #7
 8010634:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010638:	4413      	add	r3, r2
 801063a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801063e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010648:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801064c:	3230      	adds	r2, #48	; 0x30
 801064e:	b2d2      	uxtb	r2, r2
 8010650:	3398      	adds	r3, #152	; 0x98
 8010652:	443b      	add	r3, r7
 8010654:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801065c:	2b00      	cmp	r3, #0
 801065e:	d003      	beq.n	8010668 <f_printf+0x35c>
 8010660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010664:	2b1f      	cmp	r3, #31
 8010666:	d9c7      	bls.n	80105f8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010668:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801066c:	f003 0308 	and.w	r3, r3, #8
 8010670:	2b00      	cmp	r3, #0
 8010672:	d009      	beq.n	8010688 <f_printf+0x37c>
 8010674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801067e:	3398      	adds	r3, #152	; 0x98
 8010680:	443b      	add	r3, r7
 8010682:	222d      	movs	r2, #45	; 0x2d
 8010684:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8010688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801068c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010690:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	2b00      	cmp	r3, #0
 801069a:	d001      	beq.n	80106a0 <f_printf+0x394>
 801069c:	2330      	movs	r3, #48	; 0x30
 801069e:	e000      	b.n	80106a2 <f_printf+0x396>
 80106a0:	2320      	movs	r3, #32
 80106a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80106a6:	e007      	b.n	80106b8 <f_printf+0x3ac>
 80106a8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80106ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106b0:	4611      	mov	r1, r2
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff fdb3 	bl	801021e <putc_bfd>
 80106b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80106bc:	f003 0302 	and.w	r3, r3, #2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d108      	bne.n	80106d6 <f_printf+0x3ca>
 80106c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106c8:	1c5a      	adds	r2, r3, #1
 80106ca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80106ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d8e8      	bhi.n	80106a8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80106d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106da:	3b01      	subs	r3, #1
 80106dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80106e0:	f107 020c 	add.w	r2, r7, #12
 80106e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106e8:	4413      	add	r3, r2
 80106ea:	781a      	ldrb	r2, [r3, #0]
 80106ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106f0:	4611      	mov	r1, r2
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff fd93 	bl	801021e <putc_bfd>
		} while (i);
 80106f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d1ea      	bne.n	80106d6 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8010700:	e007      	b.n	8010712 <f_printf+0x406>
 8010702:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801070a:	4611      	mov	r1, r2
 801070c:	4618      	mov	r0, r3
 801070e:	f7ff fd86 	bl	801021e <putc_bfd>
 8010712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010716:	1c5a      	adds	r2, r3, #1
 8010718:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801071c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010720:	429a      	cmp	r2, r3
 8010722:	d8ee      	bhi.n	8010702 <f_printf+0x3f6>
		c = *fmt++;
 8010724:	e600      	b.n	8010328 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8010726:	bf00      	nop
 8010728:	e000      	b.n	801072c <f_printf+0x420>
		if (!c) break;
 801072a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 801072c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff fdb1 	bl	8010298 <putc_flush>
 8010736:	4603      	mov	r3, r0
}
 8010738:	4618      	mov	r0, r3
 801073a:	379c      	adds	r7, #156	; 0x9c
 801073c:	46bd      	mov	sp, r7
 801073e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010742:	b003      	add	sp, #12
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop

08010748 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010748:	b480      	push	{r7}
 801074a:	b087      	sub	sp, #28
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	4613      	mov	r3, r2
 8010754:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010756:	2301      	movs	r3, #1
 8010758:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801075e:	4b1f      	ldr	r3, [pc, #124]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 8010760:	7a5b      	ldrb	r3, [r3, #9]
 8010762:	b2db      	uxtb	r3, r3
 8010764:	2b00      	cmp	r3, #0
 8010766:	d131      	bne.n	80107cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010768:	4b1c      	ldr	r3, [pc, #112]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 801076a:	7a5b      	ldrb	r3, [r3, #9]
 801076c:	b2db      	uxtb	r3, r3
 801076e:	461a      	mov	r2, r3
 8010770:	4b1a      	ldr	r3, [pc, #104]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 8010772:	2100      	movs	r1, #0
 8010774:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010776:	4b19      	ldr	r3, [pc, #100]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 8010778:	7a5b      	ldrb	r3, [r3, #9]
 801077a:	b2db      	uxtb	r3, r3
 801077c:	4a17      	ldr	r2, [pc, #92]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4413      	add	r3, r2
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010786:	4b15      	ldr	r3, [pc, #84]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 8010788:	7a5b      	ldrb	r3, [r3, #9]
 801078a:	b2db      	uxtb	r3, r3
 801078c:	461a      	mov	r2, r3
 801078e:	4b13      	ldr	r3, [pc, #76]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 8010790:	4413      	add	r3, r2
 8010792:	79fa      	ldrb	r2, [r7, #7]
 8010794:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010796:	4b11      	ldr	r3, [pc, #68]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 8010798:	7a5b      	ldrb	r3, [r3, #9]
 801079a:	b2db      	uxtb	r3, r3
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	b2d1      	uxtb	r1, r2
 80107a0:	4a0e      	ldr	r2, [pc, #56]	; (80107dc <FATFS_LinkDriverEx+0x94>)
 80107a2:	7251      	strb	r1, [r2, #9]
 80107a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80107a6:	7dbb      	ldrb	r3, [r7, #22]
 80107a8:	3330      	adds	r3, #48	; 0x30
 80107aa:	b2da      	uxtb	r2, r3
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	3301      	adds	r3, #1
 80107b4:	223a      	movs	r2, #58	; 0x3a
 80107b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	3302      	adds	r3, #2
 80107bc:	222f      	movs	r2, #47	; 0x2f
 80107be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	3303      	adds	r3, #3
 80107c4:	2200      	movs	r2, #0
 80107c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80107c8:	2300      	movs	r3, #0
 80107ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80107cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	371c      	adds	r7, #28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop
 80107dc:	20004958 	.word	0x20004958

080107e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80107ea:	2200      	movs	r2, #0
 80107ec:	6839      	ldr	r1, [r7, #0]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f7ff ffaa 	bl	8010748 <FATFS_LinkDriverEx>
 80107f4:	4603      	mov	r3, r0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3708      	adds	r7, #8
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
	...

08010800 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	4603      	mov	r3, r0
 8010808:	6039      	str	r1, [r7, #0]
 801080a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801080c:	88fb      	ldrh	r3, [r7, #6]
 801080e:	2b7f      	cmp	r3, #127	; 0x7f
 8010810:	d802      	bhi.n	8010818 <ff_convert+0x18>
		c = chr;
 8010812:	88fb      	ldrh	r3, [r7, #6]
 8010814:	81fb      	strh	r3, [r7, #14]
 8010816:	e025      	b.n	8010864 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00b      	beq.n	8010836 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801081e:	88fb      	ldrh	r3, [r7, #6]
 8010820:	2bff      	cmp	r3, #255	; 0xff
 8010822:	d805      	bhi.n	8010830 <ff_convert+0x30>
 8010824:	88fb      	ldrh	r3, [r7, #6]
 8010826:	3b80      	subs	r3, #128	; 0x80
 8010828:	4a12      	ldr	r2, [pc, #72]	; (8010874 <ff_convert+0x74>)
 801082a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801082e:	e000      	b.n	8010832 <ff_convert+0x32>
 8010830:	2300      	movs	r3, #0
 8010832:	81fb      	strh	r3, [r7, #14]
 8010834:	e016      	b.n	8010864 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010836:	2300      	movs	r3, #0
 8010838:	81fb      	strh	r3, [r7, #14]
 801083a:	e009      	b.n	8010850 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801083c:	89fb      	ldrh	r3, [r7, #14]
 801083e:	4a0d      	ldr	r2, [pc, #52]	; (8010874 <ff_convert+0x74>)
 8010840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010844:	88fa      	ldrh	r2, [r7, #6]
 8010846:	429a      	cmp	r2, r3
 8010848:	d006      	beq.n	8010858 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801084a:	89fb      	ldrh	r3, [r7, #14]
 801084c:	3301      	adds	r3, #1
 801084e:	81fb      	strh	r3, [r7, #14]
 8010850:	89fb      	ldrh	r3, [r7, #14]
 8010852:	2b7f      	cmp	r3, #127	; 0x7f
 8010854:	d9f2      	bls.n	801083c <ff_convert+0x3c>
 8010856:	e000      	b.n	801085a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010858:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801085a:	89fb      	ldrh	r3, [r7, #14]
 801085c:	3380      	adds	r3, #128	; 0x80
 801085e:	b29b      	uxth	r3, r3
 8010860:	b2db      	uxtb	r3, r3
 8010862:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010864:	89fb      	ldrh	r3, [r7, #14]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3714      	adds	r7, #20
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	08017cb8 	.word	0x08017cb8

08010878 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010878:	b480      	push	{r7}
 801087a:	b087      	sub	sp, #28
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010882:	88fb      	ldrh	r3, [r7, #6]
 8010884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010888:	d201      	bcs.n	801088e <ff_wtoupper+0x16>
 801088a:	4b3e      	ldr	r3, [pc, #248]	; (8010984 <ff_wtoupper+0x10c>)
 801088c:	e000      	b.n	8010890 <ff_wtoupper+0x18>
 801088e:	4b3e      	ldr	r3, [pc, #248]	; (8010988 <ff_wtoupper+0x110>)
 8010890:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	1c9a      	adds	r2, r3, #2
 8010896:	617a      	str	r2, [r7, #20]
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801089c:	8a7b      	ldrh	r3, [r7, #18]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d068      	beq.n	8010974 <ff_wtoupper+0xfc>
 80108a2:	88fa      	ldrh	r2, [r7, #6]
 80108a4:	8a7b      	ldrh	r3, [r7, #18]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d364      	bcc.n	8010974 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	1c9a      	adds	r2, r3, #2
 80108ae:	617a      	str	r2, [r7, #20]
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	823b      	strh	r3, [r7, #16]
 80108b4:	8a3b      	ldrh	r3, [r7, #16]
 80108b6:	0a1b      	lsrs	r3, r3, #8
 80108b8:	81fb      	strh	r3, [r7, #14]
 80108ba:	8a3b      	ldrh	r3, [r7, #16]
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80108c0:	88fa      	ldrh	r2, [r7, #6]
 80108c2:	8a79      	ldrh	r1, [r7, #18]
 80108c4:	8a3b      	ldrh	r3, [r7, #16]
 80108c6:	440b      	add	r3, r1
 80108c8:	429a      	cmp	r2, r3
 80108ca:	da49      	bge.n	8010960 <ff_wtoupper+0xe8>
			switch (cmd) {
 80108cc:	89fb      	ldrh	r3, [r7, #14]
 80108ce:	2b08      	cmp	r3, #8
 80108d0:	d84f      	bhi.n	8010972 <ff_wtoupper+0xfa>
 80108d2:	a201      	add	r2, pc, #4	; (adr r2, 80108d8 <ff_wtoupper+0x60>)
 80108d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d8:	080108fd 	.word	0x080108fd
 80108dc:	0801090f 	.word	0x0801090f
 80108e0:	08010925 	.word	0x08010925
 80108e4:	0801092d 	.word	0x0801092d
 80108e8:	08010935 	.word	0x08010935
 80108ec:	0801093d 	.word	0x0801093d
 80108f0:	08010945 	.word	0x08010945
 80108f4:	0801094d 	.word	0x0801094d
 80108f8:	08010955 	.word	0x08010955
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80108fc:	88fa      	ldrh	r2, [r7, #6]
 80108fe:	8a7b      	ldrh	r3, [r7, #18]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	697a      	ldr	r2, [r7, #20]
 8010906:	4413      	add	r3, r2
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	80fb      	strh	r3, [r7, #6]
 801090c:	e027      	b.n	801095e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801090e:	88fa      	ldrh	r2, [r7, #6]
 8010910:	8a7b      	ldrh	r3, [r7, #18]
 8010912:	1ad3      	subs	r3, r2, r3
 8010914:	b29b      	uxth	r3, r3
 8010916:	f003 0301 	and.w	r3, r3, #1
 801091a:	b29b      	uxth	r3, r3
 801091c:	88fa      	ldrh	r2, [r7, #6]
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	80fb      	strh	r3, [r7, #6]
 8010922:	e01c      	b.n	801095e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010924:	88fb      	ldrh	r3, [r7, #6]
 8010926:	3b10      	subs	r3, #16
 8010928:	80fb      	strh	r3, [r7, #6]
 801092a:	e018      	b.n	801095e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801092c:	88fb      	ldrh	r3, [r7, #6]
 801092e:	3b20      	subs	r3, #32
 8010930:	80fb      	strh	r3, [r7, #6]
 8010932:	e014      	b.n	801095e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010934:	88fb      	ldrh	r3, [r7, #6]
 8010936:	3b30      	subs	r3, #48	; 0x30
 8010938:	80fb      	strh	r3, [r7, #6]
 801093a:	e010      	b.n	801095e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801093c:	88fb      	ldrh	r3, [r7, #6]
 801093e:	3b1a      	subs	r3, #26
 8010940:	80fb      	strh	r3, [r7, #6]
 8010942:	e00c      	b.n	801095e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010944:	88fb      	ldrh	r3, [r7, #6]
 8010946:	3308      	adds	r3, #8
 8010948:	80fb      	strh	r3, [r7, #6]
 801094a:	e008      	b.n	801095e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801094c:	88fb      	ldrh	r3, [r7, #6]
 801094e:	3b50      	subs	r3, #80	; 0x50
 8010950:	80fb      	strh	r3, [r7, #6]
 8010952:	e004      	b.n	801095e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010954:	88fb      	ldrh	r3, [r7, #6]
 8010956:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801095a:	80fb      	strh	r3, [r7, #6]
 801095c:	bf00      	nop
			}
			break;
 801095e:	e008      	b.n	8010972 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010960:	89fb      	ldrh	r3, [r7, #14]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d195      	bne.n	8010892 <ff_wtoupper+0x1a>
 8010966:	8a3b      	ldrh	r3, [r7, #16]
 8010968:	005b      	lsls	r3, r3, #1
 801096a:	697a      	ldr	r2, [r7, #20]
 801096c:	4413      	add	r3, r2
 801096e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010970:	e78f      	b.n	8010892 <ff_wtoupper+0x1a>
			break;
 8010972:	bf00      	nop
	}

	return chr;
 8010974:	88fb      	ldrh	r3, [r7, #6]
}
 8010976:	4618      	mov	r0, r3
 8010978:	371c      	adds	r7, #28
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	08017db8 	.word	0x08017db8
 8010988:	08017fac 	.word	0x08017fac

0801098c <__errno>:
 801098c:	4b01      	ldr	r3, [pc, #4]	; (8010994 <__errno+0x8>)
 801098e:	6818      	ldr	r0, [r3, #0]
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	2000002c 	.word	0x2000002c

08010998 <__libc_init_array>:
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	4d0d      	ldr	r5, [pc, #52]	; (80109d0 <__libc_init_array+0x38>)
 801099c:	4c0d      	ldr	r4, [pc, #52]	; (80109d4 <__libc_init_array+0x3c>)
 801099e:	1b64      	subs	r4, r4, r5
 80109a0:	10a4      	asrs	r4, r4, #2
 80109a2:	2600      	movs	r6, #0
 80109a4:	42a6      	cmp	r6, r4
 80109a6:	d109      	bne.n	80109bc <__libc_init_array+0x24>
 80109a8:	4d0b      	ldr	r5, [pc, #44]	; (80109d8 <__libc_init_array+0x40>)
 80109aa:	4c0c      	ldr	r4, [pc, #48]	; (80109dc <__libc_init_array+0x44>)
 80109ac:	f006 ff9a 	bl	80178e4 <_init>
 80109b0:	1b64      	subs	r4, r4, r5
 80109b2:	10a4      	asrs	r4, r4, #2
 80109b4:	2600      	movs	r6, #0
 80109b6:	42a6      	cmp	r6, r4
 80109b8:	d105      	bne.n	80109c6 <__libc_init_array+0x2e>
 80109ba:	bd70      	pop	{r4, r5, r6, pc}
 80109bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80109c0:	4798      	blx	r3
 80109c2:	3601      	adds	r6, #1
 80109c4:	e7ee      	b.n	80109a4 <__libc_init_array+0xc>
 80109c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80109ca:	4798      	blx	r3
 80109cc:	3601      	adds	r6, #1
 80109ce:	e7f2      	b.n	80109b6 <__libc_init_array+0x1e>
 80109d0:	080185d0 	.word	0x080185d0
 80109d4:	080185d0 	.word	0x080185d0
 80109d8:	080185d0 	.word	0x080185d0
 80109dc:	080185d4 	.word	0x080185d4

080109e0 <memset>:
 80109e0:	4402      	add	r2, r0
 80109e2:	4603      	mov	r3, r0
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d100      	bne.n	80109ea <memset+0xa>
 80109e8:	4770      	bx	lr
 80109ea:	f803 1b01 	strb.w	r1, [r3], #1
 80109ee:	e7f9      	b.n	80109e4 <memset+0x4>

080109f0 <__cvt>:
 80109f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109f4:	ec55 4b10 	vmov	r4, r5, d0
 80109f8:	2d00      	cmp	r5, #0
 80109fa:	460e      	mov	r6, r1
 80109fc:	4619      	mov	r1, r3
 80109fe:	462b      	mov	r3, r5
 8010a00:	bfbb      	ittet	lt
 8010a02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010a06:	461d      	movlt	r5, r3
 8010a08:	2300      	movge	r3, #0
 8010a0a:	232d      	movlt	r3, #45	; 0x2d
 8010a0c:	700b      	strb	r3, [r1, #0]
 8010a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010a14:	4691      	mov	r9, r2
 8010a16:	f023 0820 	bic.w	r8, r3, #32
 8010a1a:	bfbc      	itt	lt
 8010a1c:	4622      	movlt	r2, r4
 8010a1e:	4614      	movlt	r4, r2
 8010a20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a24:	d005      	beq.n	8010a32 <__cvt+0x42>
 8010a26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010a2a:	d100      	bne.n	8010a2e <__cvt+0x3e>
 8010a2c:	3601      	adds	r6, #1
 8010a2e:	2102      	movs	r1, #2
 8010a30:	e000      	b.n	8010a34 <__cvt+0x44>
 8010a32:	2103      	movs	r1, #3
 8010a34:	ab03      	add	r3, sp, #12
 8010a36:	9301      	str	r3, [sp, #4]
 8010a38:	ab02      	add	r3, sp, #8
 8010a3a:	9300      	str	r3, [sp, #0]
 8010a3c:	ec45 4b10 	vmov	d0, r4, r5
 8010a40:	4653      	mov	r3, sl
 8010a42:	4632      	mov	r2, r6
 8010a44:	f001 fe60 	bl	8012708 <_dtoa_r>
 8010a48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010a4c:	4607      	mov	r7, r0
 8010a4e:	d102      	bne.n	8010a56 <__cvt+0x66>
 8010a50:	f019 0f01 	tst.w	r9, #1
 8010a54:	d022      	beq.n	8010a9c <__cvt+0xac>
 8010a56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a5a:	eb07 0906 	add.w	r9, r7, r6
 8010a5e:	d110      	bne.n	8010a82 <__cvt+0x92>
 8010a60:	783b      	ldrb	r3, [r7, #0]
 8010a62:	2b30      	cmp	r3, #48	; 0x30
 8010a64:	d10a      	bne.n	8010a7c <__cvt+0x8c>
 8010a66:	2200      	movs	r2, #0
 8010a68:	2300      	movs	r3, #0
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	f7f0 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8010a72:	b918      	cbnz	r0, 8010a7c <__cvt+0x8c>
 8010a74:	f1c6 0601 	rsb	r6, r6, #1
 8010a78:	f8ca 6000 	str.w	r6, [sl]
 8010a7c:	f8da 3000 	ldr.w	r3, [sl]
 8010a80:	4499      	add	r9, r3
 8010a82:	2200      	movs	r2, #0
 8010a84:	2300      	movs	r3, #0
 8010a86:	4620      	mov	r0, r4
 8010a88:	4629      	mov	r1, r5
 8010a8a:	f7f0 f83d 	bl	8000b08 <__aeabi_dcmpeq>
 8010a8e:	b108      	cbz	r0, 8010a94 <__cvt+0xa4>
 8010a90:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a94:	2230      	movs	r2, #48	; 0x30
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	454b      	cmp	r3, r9
 8010a9a:	d307      	bcc.n	8010aac <__cvt+0xbc>
 8010a9c:	9b03      	ldr	r3, [sp, #12]
 8010a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010aa0:	1bdb      	subs	r3, r3, r7
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	6013      	str	r3, [r2, #0]
 8010aa6:	b004      	add	sp, #16
 8010aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aac:	1c59      	adds	r1, r3, #1
 8010aae:	9103      	str	r1, [sp, #12]
 8010ab0:	701a      	strb	r2, [r3, #0]
 8010ab2:	e7f0      	b.n	8010a96 <__cvt+0xa6>

08010ab4 <__exponent>:
 8010ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	bfb8      	it	lt
 8010abc:	4249      	neglt	r1, r1
 8010abe:	f803 2b02 	strb.w	r2, [r3], #2
 8010ac2:	bfb4      	ite	lt
 8010ac4:	222d      	movlt	r2, #45	; 0x2d
 8010ac6:	222b      	movge	r2, #43	; 0x2b
 8010ac8:	2909      	cmp	r1, #9
 8010aca:	7042      	strb	r2, [r0, #1]
 8010acc:	dd2a      	ble.n	8010b24 <__exponent+0x70>
 8010ace:	f10d 0407 	add.w	r4, sp, #7
 8010ad2:	46a4      	mov	ip, r4
 8010ad4:	270a      	movs	r7, #10
 8010ad6:	46a6      	mov	lr, r4
 8010ad8:	460a      	mov	r2, r1
 8010ada:	fb91 f6f7 	sdiv	r6, r1, r7
 8010ade:	fb07 1516 	mls	r5, r7, r6, r1
 8010ae2:	3530      	adds	r5, #48	; 0x30
 8010ae4:	2a63      	cmp	r2, #99	; 0x63
 8010ae6:	f104 34ff 	add.w	r4, r4, #4294967295
 8010aea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010aee:	4631      	mov	r1, r6
 8010af0:	dcf1      	bgt.n	8010ad6 <__exponent+0x22>
 8010af2:	3130      	adds	r1, #48	; 0x30
 8010af4:	f1ae 0502 	sub.w	r5, lr, #2
 8010af8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010afc:	1c44      	adds	r4, r0, #1
 8010afe:	4629      	mov	r1, r5
 8010b00:	4561      	cmp	r1, ip
 8010b02:	d30a      	bcc.n	8010b1a <__exponent+0x66>
 8010b04:	f10d 0209 	add.w	r2, sp, #9
 8010b08:	eba2 020e 	sub.w	r2, r2, lr
 8010b0c:	4565      	cmp	r5, ip
 8010b0e:	bf88      	it	hi
 8010b10:	2200      	movhi	r2, #0
 8010b12:	4413      	add	r3, r2
 8010b14:	1a18      	subs	r0, r3, r0
 8010b16:	b003      	add	sp, #12
 8010b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010b22:	e7ed      	b.n	8010b00 <__exponent+0x4c>
 8010b24:	2330      	movs	r3, #48	; 0x30
 8010b26:	3130      	adds	r1, #48	; 0x30
 8010b28:	7083      	strb	r3, [r0, #2]
 8010b2a:	70c1      	strb	r1, [r0, #3]
 8010b2c:	1d03      	adds	r3, r0, #4
 8010b2e:	e7f1      	b.n	8010b14 <__exponent+0x60>

08010b30 <_printf_float>:
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	ed2d 8b02 	vpush	{d8}
 8010b38:	b08d      	sub	sp, #52	; 0x34
 8010b3a:	460c      	mov	r4, r1
 8010b3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010b40:	4616      	mov	r6, r2
 8010b42:	461f      	mov	r7, r3
 8010b44:	4605      	mov	r5, r0
 8010b46:	f002 ff3d 	bl	80139c4 <_localeconv_r>
 8010b4a:	f8d0 a000 	ldr.w	sl, [r0]
 8010b4e:	4650      	mov	r0, sl
 8010b50:	f7ef fb5e 	bl	8000210 <strlen>
 8010b54:	2300      	movs	r3, #0
 8010b56:	930a      	str	r3, [sp, #40]	; 0x28
 8010b58:	6823      	ldr	r3, [r4, #0]
 8010b5a:	9305      	str	r3, [sp, #20]
 8010b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8010b60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010b64:	3307      	adds	r3, #7
 8010b66:	f023 0307 	bic.w	r3, r3, #7
 8010b6a:	f103 0208 	add.w	r2, r3, #8
 8010b6e:	f8c8 2000 	str.w	r2, [r8]
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010b7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010b7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b82:	9307      	str	r3, [sp, #28]
 8010b84:	f8cd 8018 	str.w	r8, [sp, #24]
 8010b88:	ee08 0a10 	vmov	s16, r0
 8010b8c:	4b9f      	ldr	r3, [pc, #636]	; (8010e0c <_printf_float+0x2dc>)
 8010b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b92:	f04f 32ff 	mov.w	r2, #4294967295
 8010b96:	f7ef ffe9 	bl	8000b6c <__aeabi_dcmpun>
 8010b9a:	bb88      	cbnz	r0, 8010c00 <_printf_float+0xd0>
 8010b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ba0:	4b9a      	ldr	r3, [pc, #616]	; (8010e0c <_printf_float+0x2dc>)
 8010ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ba6:	f7ef ffc3 	bl	8000b30 <__aeabi_dcmple>
 8010baa:	bb48      	cbnz	r0, 8010c00 <_printf_float+0xd0>
 8010bac:	2200      	movs	r2, #0
 8010bae:	2300      	movs	r3, #0
 8010bb0:	4640      	mov	r0, r8
 8010bb2:	4649      	mov	r1, r9
 8010bb4:	f7ef ffb2 	bl	8000b1c <__aeabi_dcmplt>
 8010bb8:	b110      	cbz	r0, 8010bc0 <_printf_float+0x90>
 8010bba:	232d      	movs	r3, #45	; 0x2d
 8010bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bc0:	4b93      	ldr	r3, [pc, #588]	; (8010e10 <_printf_float+0x2e0>)
 8010bc2:	4894      	ldr	r0, [pc, #592]	; (8010e14 <_printf_float+0x2e4>)
 8010bc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010bc8:	bf94      	ite	ls
 8010bca:	4698      	movls	r8, r3
 8010bcc:	4680      	movhi	r8, r0
 8010bce:	2303      	movs	r3, #3
 8010bd0:	6123      	str	r3, [r4, #16]
 8010bd2:	9b05      	ldr	r3, [sp, #20]
 8010bd4:	f023 0204 	bic.w	r2, r3, #4
 8010bd8:	6022      	str	r2, [r4, #0]
 8010bda:	f04f 0900 	mov.w	r9, #0
 8010bde:	9700      	str	r7, [sp, #0]
 8010be0:	4633      	mov	r3, r6
 8010be2:	aa0b      	add	r2, sp, #44	; 0x2c
 8010be4:	4621      	mov	r1, r4
 8010be6:	4628      	mov	r0, r5
 8010be8:	f000 f9d8 	bl	8010f9c <_printf_common>
 8010bec:	3001      	adds	r0, #1
 8010bee:	f040 8090 	bne.w	8010d12 <_printf_float+0x1e2>
 8010bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf6:	b00d      	add	sp, #52	; 0x34
 8010bf8:	ecbd 8b02 	vpop	{d8}
 8010bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c00:	4642      	mov	r2, r8
 8010c02:	464b      	mov	r3, r9
 8010c04:	4640      	mov	r0, r8
 8010c06:	4649      	mov	r1, r9
 8010c08:	f7ef ffb0 	bl	8000b6c <__aeabi_dcmpun>
 8010c0c:	b140      	cbz	r0, 8010c20 <_printf_float+0xf0>
 8010c0e:	464b      	mov	r3, r9
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	bfbc      	itt	lt
 8010c14:	232d      	movlt	r3, #45	; 0x2d
 8010c16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010c1a:	487f      	ldr	r0, [pc, #508]	; (8010e18 <_printf_float+0x2e8>)
 8010c1c:	4b7f      	ldr	r3, [pc, #508]	; (8010e1c <_printf_float+0x2ec>)
 8010c1e:	e7d1      	b.n	8010bc4 <_printf_float+0x94>
 8010c20:	6863      	ldr	r3, [r4, #4]
 8010c22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010c26:	9206      	str	r2, [sp, #24]
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	d13f      	bne.n	8010cac <_printf_float+0x17c>
 8010c2c:	2306      	movs	r3, #6
 8010c2e:	6063      	str	r3, [r4, #4]
 8010c30:	9b05      	ldr	r3, [sp, #20]
 8010c32:	6861      	ldr	r1, [r4, #4]
 8010c34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010c38:	2300      	movs	r3, #0
 8010c3a:	9303      	str	r3, [sp, #12]
 8010c3c:	ab0a      	add	r3, sp, #40	; 0x28
 8010c3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010c42:	ab09      	add	r3, sp, #36	; 0x24
 8010c44:	ec49 8b10 	vmov	d0, r8, r9
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	6022      	str	r2, [r4, #0]
 8010c4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c50:	4628      	mov	r0, r5
 8010c52:	f7ff fecd 	bl	80109f0 <__cvt>
 8010c56:	9b06      	ldr	r3, [sp, #24]
 8010c58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c5a:	2b47      	cmp	r3, #71	; 0x47
 8010c5c:	4680      	mov	r8, r0
 8010c5e:	d108      	bne.n	8010c72 <_printf_float+0x142>
 8010c60:	1cc8      	adds	r0, r1, #3
 8010c62:	db02      	blt.n	8010c6a <_printf_float+0x13a>
 8010c64:	6863      	ldr	r3, [r4, #4]
 8010c66:	4299      	cmp	r1, r3
 8010c68:	dd41      	ble.n	8010cee <_printf_float+0x1be>
 8010c6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8010c6e:	fa5f fb8b 	uxtb.w	fp, fp
 8010c72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010c76:	d820      	bhi.n	8010cba <_printf_float+0x18a>
 8010c78:	3901      	subs	r1, #1
 8010c7a:	465a      	mov	r2, fp
 8010c7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c80:	9109      	str	r1, [sp, #36]	; 0x24
 8010c82:	f7ff ff17 	bl	8010ab4 <__exponent>
 8010c86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c88:	1813      	adds	r3, r2, r0
 8010c8a:	2a01      	cmp	r2, #1
 8010c8c:	4681      	mov	r9, r0
 8010c8e:	6123      	str	r3, [r4, #16]
 8010c90:	dc02      	bgt.n	8010c98 <_printf_float+0x168>
 8010c92:	6822      	ldr	r2, [r4, #0]
 8010c94:	07d2      	lsls	r2, r2, #31
 8010c96:	d501      	bpl.n	8010c9c <_printf_float+0x16c>
 8010c98:	3301      	adds	r3, #1
 8010c9a:	6123      	str	r3, [r4, #16]
 8010c9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d09c      	beq.n	8010bde <_printf_float+0xae>
 8010ca4:	232d      	movs	r3, #45	; 0x2d
 8010ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010caa:	e798      	b.n	8010bde <_printf_float+0xae>
 8010cac:	9a06      	ldr	r2, [sp, #24]
 8010cae:	2a47      	cmp	r2, #71	; 0x47
 8010cb0:	d1be      	bne.n	8010c30 <_printf_float+0x100>
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d1bc      	bne.n	8010c30 <_printf_float+0x100>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e7b9      	b.n	8010c2e <_printf_float+0xfe>
 8010cba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010cbe:	d118      	bne.n	8010cf2 <_printf_float+0x1c2>
 8010cc0:	2900      	cmp	r1, #0
 8010cc2:	6863      	ldr	r3, [r4, #4]
 8010cc4:	dd0b      	ble.n	8010cde <_printf_float+0x1ae>
 8010cc6:	6121      	str	r1, [r4, #16]
 8010cc8:	b913      	cbnz	r3, 8010cd0 <_printf_float+0x1a0>
 8010cca:	6822      	ldr	r2, [r4, #0]
 8010ccc:	07d0      	lsls	r0, r2, #31
 8010cce:	d502      	bpl.n	8010cd6 <_printf_float+0x1a6>
 8010cd0:	3301      	adds	r3, #1
 8010cd2:	440b      	add	r3, r1
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8010cd8:	f04f 0900 	mov.w	r9, #0
 8010cdc:	e7de      	b.n	8010c9c <_printf_float+0x16c>
 8010cde:	b913      	cbnz	r3, 8010ce6 <_printf_float+0x1b6>
 8010ce0:	6822      	ldr	r2, [r4, #0]
 8010ce2:	07d2      	lsls	r2, r2, #31
 8010ce4:	d501      	bpl.n	8010cea <_printf_float+0x1ba>
 8010ce6:	3302      	adds	r3, #2
 8010ce8:	e7f4      	b.n	8010cd4 <_printf_float+0x1a4>
 8010cea:	2301      	movs	r3, #1
 8010cec:	e7f2      	b.n	8010cd4 <_printf_float+0x1a4>
 8010cee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cf4:	4299      	cmp	r1, r3
 8010cf6:	db05      	blt.n	8010d04 <_printf_float+0x1d4>
 8010cf8:	6823      	ldr	r3, [r4, #0]
 8010cfa:	6121      	str	r1, [r4, #16]
 8010cfc:	07d8      	lsls	r0, r3, #31
 8010cfe:	d5ea      	bpl.n	8010cd6 <_printf_float+0x1a6>
 8010d00:	1c4b      	adds	r3, r1, #1
 8010d02:	e7e7      	b.n	8010cd4 <_printf_float+0x1a4>
 8010d04:	2900      	cmp	r1, #0
 8010d06:	bfd4      	ite	le
 8010d08:	f1c1 0202 	rsble	r2, r1, #2
 8010d0c:	2201      	movgt	r2, #1
 8010d0e:	4413      	add	r3, r2
 8010d10:	e7e0      	b.n	8010cd4 <_printf_float+0x1a4>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	055a      	lsls	r2, r3, #21
 8010d16:	d407      	bmi.n	8010d28 <_printf_float+0x1f8>
 8010d18:	6923      	ldr	r3, [r4, #16]
 8010d1a:	4642      	mov	r2, r8
 8010d1c:	4631      	mov	r1, r6
 8010d1e:	4628      	mov	r0, r5
 8010d20:	47b8      	blx	r7
 8010d22:	3001      	adds	r0, #1
 8010d24:	d12c      	bne.n	8010d80 <_printf_float+0x250>
 8010d26:	e764      	b.n	8010bf2 <_printf_float+0xc2>
 8010d28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d2c:	f240 80e0 	bls.w	8010ef0 <_printf_float+0x3c0>
 8010d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d34:	2200      	movs	r2, #0
 8010d36:	2300      	movs	r3, #0
 8010d38:	f7ef fee6 	bl	8000b08 <__aeabi_dcmpeq>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d034      	beq.n	8010daa <_printf_float+0x27a>
 8010d40:	4a37      	ldr	r2, [pc, #220]	; (8010e20 <_printf_float+0x2f0>)
 8010d42:	2301      	movs	r3, #1
 8010d44:	4631      	mov	r1, r6
 8010d46:	4628      	mov	r0, r5
 8010d48:	47b8      	blx	r7
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	f43f af51 	beq.w	8010bf2 <_printf_float+0xc2>
 8010d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d54:	429a      	cmp	r2, r3
 8010d56:	db02      	blt.n	8010d5e <_printf_float+0x22e>
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	07d8      	lsls	r0, r3, #31
 8010d5c:	d510      	bpl.n	8010d80 <_printf_float+0x250>
 8010d5e:	ee18 3a10 	vmov	r3, s16
 8010d62:	4652      	mov	r2, sl
 8010d64:	4631      	mov	r1, r6
 8010d66:	4628      	mov	r0, r5
 8010d68:	47b8      	blx	r7
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	f43f af41 	beq.w	8010bf2 <_printf_float+0xc2>
 8010d70:	f04f 0800 	mov.w	r8, #0
 8010d74:	f104 091a 	add.w	r9, r4, #26
 8010d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	4543      	cmp	r3, r8
 8010d7e:	dc09      	bgt.n	8010d94 <_printf_float+0x264>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	079b      	lsls	r3, r3, #30
 8010d84:	f100 8105 	bmi.w	8010f92 <_printf_float+0x462>
 8010d88:	68e0      	ldr	r0, [r4, #12]
 8010d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d8c:	4298      	cmp	r0, r3
 8010d8e:	bfb8      	it	lt
 8010d90:	4618      	movlt	r0, r3
 8010d92:	e730      	b.n	8010bf6 <_printf_float+0xc6>
 8010d94:	2301      	movs	r3, #1
 8010d96:	464a      	mov	r2, r9
 8010d98:	4631      	mov	r1, r6
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	47b8      	blx	r7
 8010d9e:	3001      	adds	r0, #1
 8010da0:	f43f af27 	beq.w	8010bf2 <_printf_float+0xc2>
 8010da4:	f108 0801 	add.w	r8, r8, #1
 8010da8:	e7e6      	b.n	8010d78 <_printf_float+0x248>
 8010daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	dc39      	bgt.n	8010e24 <_printf_float+0x2f4>
 8010db0:	4a1b      	ldr	r2, [pc, #108]	; (8010e20 <_printf_float+0x2f0>)
 8010db2:	2301      	movs	r3, #1
 8010db4:	4631      	mov	r1, r6
 8010db6:	4628      	mov	r0, r5
 8010db8:	47b8      	blx	r7
 8010dba:	3001      	adds	r0, #1
 8010dbc:	f43f af19 	beq.w	8010bf2 <_printf_float+0xc2>
 8010dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	d102      	bne.n	8010dce <_printf_float+0x29e>
 8010dc8:	6823      	ldr	r3, [r4, #0]
 8010dca:	07d9      	lsls	r1, r3, #31
 8010dcc:	d5d8      	bpl.n	8010d80 <_printf_float+0x250>
 8010dce:	ee18 3a10 	vmov	r3, s16
 8010dd2:	4652      	mov	r2, sl
 8010dd4:	4631      	mov	r1, r6
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	47b8      	blx	r7
 8010dda:	3001      	adds	r0, #1
 8010ddc:	f43f af09 	beq.w	8010bf2 <_printf_float+0xc2>
 8010de0:	f04f 0900 	mov.w	r9, #0
 8010de4:	f104 0a1a 	add.w	sl, r4, #26
 8010de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dea:	425b      	negs	r3, r3
 8010dec:	454b      	cmp	r3, r9
 8010dee:	dc01      	bgt.n	8010df4 <_printf_float+0x2c4>
 8010df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010df2:	e792      	b.n	8010d1a <_printf_float+0x1ea>
 8010df4:	2301      	movs	r3, #1
 8010df6:	4652      	mov	r2, sl
 8010df8:	4631      	mov	r1, r6
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	47b8      	blx	r7
 8010dfe:	3001      	adds	r0, #1
 8010e00:	f43f aef7 	beq.w	8010bf2 <_printf_float+0xc2>
 8010e04:	f109 0901 	add.w	r9, r9, #1
 8010e08:	e7ee      	b.n	8010de8 <_printf_float+0x2b8>
 8010e0a:	bf00      	nop
 8010e0c:	7fefffff 	.word	0x7fefffff
 8010e10:	0801806c 	.word	0x0801806c
 8010e14:	08018070 	.word	0x08018070
 8010e18:	08018078 	.word	0x08018078
 8010e1c:	08018074 	.word	0x08018074
 8010e20:	08018471 	.word	0x08018471
 8010e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	bfa8      	it	ge
 8010e2c:	461a      	movge	r2, r3
 8010e2e:	2a00      	cmp	r2, #0
 8010e30:	4691      	mov	r9, r2
 8010e32:	dc37      	bgt.n	8010ea4 <_printf_float+0x374>
 8010e34:	f04f 0b00 	mov.w	fp, #0
 8010e38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e3c:	f104 021a 	add.w	r2, r4, #26
 8010e40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e42:	9305      	str	r3, [sp, #20]
 8010e44:	eba3 0309 	sub.w	r3, r3, r9
 8010e48:	455b      	cmp	r3, fp
 8010e4a:	dc33      	bgt.n	8010eb4 <_printf_float+0x384>
 8010e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e50:	429a      	cmp	r2, r3
 8010e52:	db3b      	blt.n	8010ecc <_printf_float+0x39c>
 8010e54:	6823      	ldr	r3, [r4, #0]
 8010e56:	07da      	lsls	r2, r3, #31
 8010e58:	d438      	bmi.n	8010ecc <_printf_float+0x39c>
 8010e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5c:	9a05      	ldr	r2, [sp, #20]
 8010e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e60:	1a9a      	subs	r2, r3, r2
 8010e62:	eba3 0901 	sub.w	r9, r3, r1
 8010e66:	4591      	cmp	r9, r2
 8010e68:	bfa8      	it	ge
 8010e6a:	4691      	movge	r9, r2
 8010e6c:	f1b9 0f00 	cmp.w	r9, #0
 8010e70:	dc35      	bgt.n	8010ede <_printf_float+0x3ae>
 8010e72:	f04f 0800 	mov.w	r8, #0
 8010e76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e7a:	f104 0a1a 	add.w	sl, r4, #26
 8010e7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e82:	1a9b      	subs	r3, r3, r2
 8010e84:	eba3 0309 	sub.w	r3, r3, r9
 8010e88:	4543      	cmp	r3, r8
 8010e8a:	f77f af79 	ble.w	8010d80 <_printf_float+0x250>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	4652      	mov	r2, sl
 8010e92:	4631      	mov	r1, r6
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b8      	blx	r7
 8010e98:	3001      	adds	r0, #1
 8010e9a:	f43f aeaa 	beq.w	8010bf2 <_printf_float+0xc2>
 8010e9e:	f108 0801 	add.w	r8, r8, #1
 8010ea2:	e7ec      	b.n	8010e7e <_printf_float+0x34e>
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	4631      	mov	r1, r6
 8010ea8:	4642      	mov	r2, r8
 8010eaa:	4628      	mov	r0, r5
 8010eac:	47b8      	blx	r7
 8010eae:	3001      	adds	r0, #1
 8010eb0:	d1c0      	bne.n	8010e34 <_printf_float+0x304>
 8010eb2:	e69e      	b.n	8010bf2 <_printf_float+0xc2>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	4628      	mov	r0, r5
 8010eba:	9205      	str	r2, [sp, #20]
 8010ebc:	47b8      	blx	r7
 8010ebe:	3001      	adds	r0, #1
 8010ec0:	f43f ae97 	beq.w	8010bf2 <_printf_float+0xc2>
 8010ec4:	9a05      	ldr	r2, [sp, #20]
 8010ec6:	f10b 0b01 	add.w	fp, fp, #1
 8010eca:	e7b9      	b.n	8010e40 <_printf_float+0x310>
 8010ecc:	ee18 3a10 	vmov	r3, s16
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	4631      	mov	r1, r6
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	47b8      	blx	r7
 8010ed8:	3001      	adds	r0, #1
 8010eda:	d1be      	bne.n	8010e5a <_printf_float+0x32a>
 8010edc:	e689      	b.n	8010bf2 <_printf_float+0xc2>
 8010ede:	9a05      	ldr	r2, [sp, #20]
 8010ee0:	464b      	mov	r3, r9
 8010ee2:	4442      	add	r2, r8
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	47b8      	blx	r7
 8010eea:	3001      	adds	r0, #1
 8010eec:	d1c1      	bne.n	8010e72 <_printf_float+0x342>
 8010eee:	e680      	b.n	8010bf2 <_printf_float+0xc2>
 8010ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ef2:	2a01      	cmp	r2, #1
 8010ef4:	dc01      	bgt.n	8010efa <_printf_float+0x3ca>
 8010ef6:	07db      	lsls	r3, r3, #31
 8010ef8:	d538      	bpl.n	8010f6c <_printf_float+0x43c>
 8010efa:	2301      	movs	r3, #1
 8010efc:	4642      	mov	r2, r8
 8010efe:	4631      	mov	r1, r6
 8010f00:	4628      	mov	r0, r5
 8010f02:	47b8      	blx	r7
 8010f04:	3001      	adds	r0, #1
 8010f06:	f43f ae74 	beq.w	8010bf2 <_printf_float+0xc2>
 8010f0a:	ee18 3a10 	vmov	r3, s16
 8010f0e:	4652      	mov	r2, sl
 8010f10:	4631      	mov	r1, r6
 8010f12:	4628      	mov	r0, r5
 8010f14:	47b8      	blx	r7
 8010f16:	3001      	adds	r0, #1
 8010f18:	f43f ae6b 	beq.w	8010bf2 <_printf_float+0xc2>
 8010f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f20:	2200      	movs	r2, #0
 8010f22:	2300      	movs	r3, #0
 8010f24:	f7ef fdf0 	bl	8000b08 <__aeabi_dcmpeq>
 8010f28:	b9d8      	cbnz	r0, 8010f62 <_printf_float+0x432>
 8010f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f2c:	f108 0201 	add.w	r2, r8, #1
 8010f30:	3b01      	subs	r3, #1
 8010f32:	4631      	mov	r1, r6
 8010f34:	4628      	mov	r0, r5
 8010f36:	47b8      	blx	r7
 8010f38:	3001      	adds	r0, #1
 8010f3a:	d10e      	bne.n	8010f5a <_printf_float+0x42a>
 8010f3c:	e659      	b.n	8010bf2 <_printf_float+0xc2>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	4652      	mov	r2, sl
 8010f42:	4631      	mov	r1, r6
 8010f44:	4628      	mov	r0, r5
 8010f46:	47b8      	blx	r7
 8010f48:	3001      	adds	r0, #1
 8010f4a:	f43f ae52 	beq.w	8010bf2 <_printf_float+0xc2>
 8010f4e:	f108 0801 	add.w	r8, r8, #1
 8010f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f54:	3b01      	subs	r3, #1
 8010f56:	4543      	cmp	r3, r8
 8010f58:	dcf1      	bgt.n	8010f3e <_printf_float+0x40e>
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f60:	e6dc      	b.n	8010d1c <_printf_float+0x1ec>
 8010f62:	f04f 0800 	mov.w	r8, #0
 8010f66:	f104 0a1a 	add.w	sl, r4, #26
 8010f6a:	e7f2      	b.n	8010f52 <_printf_float+0x422>
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	4642      	mov	r2, r8
 8010f70:	e7df      	b.n	8010f32 <_printf_float+0x402>
 8010f72:	2301      	movs	r3, #1
 8010f74:	464a      	mov	r2, r9
 8010f76:	4631      	mov	r1, r6
 8010f78:	4628      	mov	r0, r5
 8010f7a:	47b8      	blx	r7
 8010f7c:	3001      	adds	r0, #1
 8010f7e:	f43f ae38 	beq.w	8010bf2 <_printf_float+0xc2>
 8010f82:	f108 0801 	add.w	r8, r8, #1
 8010f86:	68e3      	ldr	r3, [r4, #12]
 8010f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f8a:	1a5b      	subs	r3, r3, r1
 8010f8c:	4543      	cmp	r3, r8
 8010f8e:	dcf0      	bgt.n	8010f72 <_printf_float+0x442>
 8010f90:	e6fa      	b.n	8010d88 <_printf_float+0x258>
 8010f92:	f04f 0800 	mov.w	r8, #0
 8010f96:	f104 0919 	add.w	r9, r4, #25
 8010f9a:	e7f4      	b.n	8010f86 <_printf_float+0x456>

08010f9c <_printf_common>:
 8010f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa0:	4616      	mov	r6, r2
 8010fa2:	4699      	mov	r9, r3
 8010fa4:	688a      	ldr	r2, [r1, #8]
 8010fa6:	690b      	ldr	r3, [r1, #16]
 8010fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fac:	4293      	cmp	r3, r2
 8010fae:	bfb8      	it	lt
 8010fb0:	4613      	movlt	r3, r2
 8010fb2:	6033      	str	r3, [r6, #0]
 8010fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010fb8:	4607      	mov	r7, r0
 8010fba:	460c      	mov	r4, r1
 8010fbc:	b10a      	cbz	r2, 8010fc2 <_printf_common+0x26>
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	6033      	str	r3, [r6, #0]
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	0699      	lsls	r1, r3, #26
 8010fc6:	bf42      	ittt	mi
 8010fc8:	6833      	ldrmi	r3, [r6, #0]
 8010fca:	3302      	addmi	r3, #2
 8010fcc:	6033      	strmi	r3, [r6, #0]
 8010fce:	6825      	ldr	r5, [r4, #0]
 8010fd0:	f015 0506 	ands.w	r5, r5, #6
 8010fd4:	d106      	bne.n	8010fe4 <_printf_common+0x48>
 8010fd6:	f104 0a19 	add.w	sl, r4, #25
 8010fda:	68e3      	ldr	r3, [r4, #12]
 8010fdc:	6832      	ldr	r2, [r6, #0]
 8010fde:	1a9b      	subs	r3, r3, r2
 8010fe0:	42ab      	cmp	r3, r5
 8010fe2:	dc26      	bgt.n	8011032 <_printf_common+0x96>
 8010fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010fe8:	1e13      	subs	r3, r2, #0
 8010fea:	6822      	ldr	r2, [r4, #0]
 8010fec:	bf18      	it	ne
 8010fee:	2301      	movne	r3, #1
 8010ff0:	0692      	lsls	r2, r2, #26
 8010ff2:	d42b      	bmi.n	801104c <_printf_common+0xb0>
 8010ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	47c0      	blx	r8
 8010ffe:	3001      	adds	r0, #1
 8011000:	d01e      	beq.n	8011040 <_printf_common+0xa4>
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	68e5      	ldr	r5, [r4, #12]
 8011006:	6832      	ldr	r2, [r6, #0]
 8011008:	f003 0306 	and.w	r3, r3, #6
 801100c:	2b04      	cmp	r3, #4
 801100e:	bf08      	it	eq
 8011010:	1aad      	subeq	r5, r5, r2
 8011012:	68a3      	ldr	r3, [r4, #8]
 8011014:	6922      	ldr	r2, [r4, #16]
 8011016:	bf0c      	ite	eq
 8011018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801101c:	2500      	movne	r5, #0
 801101e:	4293      	cmp	r3, r2
 8011020:	bfc4      	itt	gt
 8011022:	1a9b      	subgt	r3, r3, r2
 8011024:	18ed      	addgt	r5, r5, r3
 8011026:	2600      	movs	r6, #0
 8011028:	341a      	adds	r4, #26
 801102a:	42b5      	cmp	r5, r6
 801102c:	d11a      	bne.n	8011064 <_printf_common+0xc8>
 801102e:	2000      	movs	r0, #0
 8011030:	e008      	b.n	8011044 <_printf_common+0xa8>
 8011032:	2301      	movs	r3, #1
 8011034:	4652      	mov	r2, sl
 8011036:	4649      	mov	r1, r9
 8011038:	4638      	mov	r0, r7
 801103a:	47c0      	blx	r8
 801103c:	3001      	adds	r0, #1
 801103e:	d103      	bne.n	8011048 <_printf_common+0xac>
 8011040:	f04f 30ff 	mov.w	r0, #4294967295
 8011044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011048:	3501      	adds	r5, #1
 801104a:	e7c6      	b.n	8010fda <_printf_common+0x3e>
 801104c:	18e1      	adds	r1, r4, r3
 801104e:	1c5a      	adds	r2, r3, #1
 8011050:	2030      	movs	r0, #48	; 0x30
 8011052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011056:	4422      	add	r2, r4
 8011058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801105c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011060:	3302      	adds	r3, #2
 8011062:	e7c7      	b.n	8010ff4 <_printf_common+0x58>
 8011064:	2301      	movs	r3, #1
 8011066:	4622      	mov	r2, r4
 8011068:	4649      	mov	r1, r9
 801106a:	4638      	mov	r0, r7
 801106c:	47c0      	blx	r8
 801106e:	3001      	adds	r0, #1
 8011070:	d0e6      	beq.n	8011040 <_printf_common+0xa4>
 8011072:	3601      	adds	r6, #1
 8011074:	e7d9      	b.n	801102a <_printf_common+0x8e>
	...

08011078 <_printf_i>:
 8011078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801107c:	7e0f      	ldrb	r7, [r1, #24]
 801107e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011080:	2f78      	cmp	r7, #120	; 0x78
 8011082:	4691      	mov	r9, r2
 8011084:	4680      	mov	r8, r0
 8011086:	460c      	mov	r4, r1
 8011088:	469a      	mov	sl, r3
 801108a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801108e:	d807      	bhi.n	80110a0 <_printf_i+0x28>
 8011090:	2f62      	cmp	r7, #98	; 0x62
 8011092:	d80a      	bhi.n	80110aa <_printf_i+0x32>
 8011094:	2f00      	cmp	r7, #0
 8011096:	f000 80d8 	beq.w	801124a <_printf_i+0x1d2>
 801109a:	2f58      	cmp	r7, #88	; 0x58
 801109c:	f000 80a3 	beq.w	80111e6 <_printf_i+0x16e>
 80110a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80110a8:	e03a      	b.n	8011120 <_printf_i+0xa8>
 80110aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80110ae:	2b15      	cmp	r3, #21
 80110b0:	d8f6      	bhi.n	80110a0 <_printf_i+0x28>
 80110b2:	a101      	add	r1, pc, #4	; (adr r1, 80110b8 <_printf_i+0x40>)
 80110b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110b8:	08011111 	.word	0x08011111
 80110bc:	08011125 	.word	0x08011125
 80110c0:	080110a1 	.word	0x080110a1
 80110c4:	080110a1 	.word	0x080110a1
 80110c8:	080110a1 	.word	0x080110a1
 80110cc:	080110a1 	.word	0x080110a1
 80110d0:	08011125 	.word	0x08011125
 80110d4:	080110a1 	.word	0x080110a1
 80110d8:	080110a1 	.word	0x080110a1
 80110dc:	080110a1 	.word	0x080110a1
 80110e0:	080110a1 	.word	0x080110a1
 80110e4:	08011231 	.word	0x08011231
 80110e8:	08011155 	.word	0x08011155
 80110ec:	08011213 	.word	0x08011213
 80110f0:	080110a1 	.word	0x080110a1
 80110f4:	080110a1 	.word	0x080110a1
 80110f8:	08011253 	.word	0x08011253
 80110fc:	080110a1 	.word	0x080110a1
 8011100:	08011155 	.word	0x08011155
 8011104:	080110a1 	.word	0x080110a1
 8011108:	080110a1 	.word	0x080110a1
 801110c:	0801121b 	.word	0x0801121b
 8011110:	682b      	ldr	r3, [r5, #0]
 8011112:	1d1a      	adds	r2, r3, #4
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	602a      	str	r2, [r5, #0]
 8011118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801111c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011120:	2301      	movs	r3, #1
 8011122:	e0a3      	b.n	801126c <_printf_i+0x1f4>
 8011124:	6820      	ldr	r0, [r4, #0]
 8011126:	6829      	ldr	r1, [r5, #0]
 8011128:	0606      	lsls	r6, r0, #24
 801112a:	f101 0304 	add.w	r3, r1, #4
 801112e:	d50a      	bpl.n	8011146 <_printf_i+0xce>
 8011130:	680e      	ldr	r6, [r1, #0]
 8011132:	602b      	str	r3, [r5, #0]
 8011134:	2e00      	cmp	r6, #0
 8011136:	da03      	bge.n	8011140 <_printf_i+0xc8>
 8011138:	232d      	movs	r3, #45	; 0x2d
 801113a:	4276      	negs	r6, r6
 801113c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011140:	485e      	ldr	r0, [pc, #376]	; (80112bc <_printf_i+0x244>)
 8011142:	230a      	movs	r3, #10
 8011144:	e019      	b.n	801117a <_printf_i+0x102>
 8011146:	680e      	ldr	r6, [r1, #0]
 8011148:	602b      	str	r3, [r5, #0]
 801114a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801114e:	bf18      	it	ne
 8011150:	b236      	sxthne	r6, r6
 8011152:	e7ef      	b.n	8011134 <_printf_i+0xbc>
 8011154:	682b      	ldr	r3, [r5, #0]
 8011156:	6820      	ldr	r0, [r4, #0]
 8011158:	1d19      	adds	r1, r3, #4
 801115a:	6029      	str	r1, [r5, #0]
 801115c:	0601      	lsls	r1, r0, #24
 801115e:	d501      	bpl.n	8011164 <_printf_i+0xec>
 8011160:	681e      	ldr	r6, [r3, #0]
 8011162:	e002      	b.n	801116a <_printf_i+0xf2>
 8011164:	0646      	lsls	r6, r0, #25
 8011166:	d5fb      	bpl.n	8011160 <_printf_i+0xe8>
 8011168:	881e      	ldrh	r6, [r3, #0]
 801116a:	4854      	ldr	r0, [pc, #336]	; (80112bc <_printf_i+0x244>)
 801116c:	2f6f      	cmp	r7, #111	; 0x6f
 801116e:	bf0c      	ite	eq
 8011170:	2308      	moveq	r3, #8
 8011172:	230a      	movne	r3, #10
 8011174:	2100      	movs	r1, #0
 8011176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801117a:	6865      	ldr	r5, [r4, #4]
 801117c:	60a5      	str	r5, [r4, #8]
 801117e:	2d00      	cmp	r5, #0
 8011180:	bfa2      	ittt	ge
 8011182:	6821      	ldrge	r1, [r4, #0]
 8011184:	f021 0104 	bicge.w	r1, r1, #4
 8011188:	6021      	strge	r1, [r4, #0]
 801118a:	b90e      	cbnz	r6, 8011190 <_printf_i+0x118>
 801118c:	2d00      	cmp	r5, #0
 801118e:	d04d      	beq.n	801122c <_printf_i+0x1b4>
 8011190:	4615      	mov	r5, r2
 8011192:	fbb6 f1f3 	udiv	r1, r6, r3
 8011196:	fb03 6711 	mls	r7, r3, r1, r6
 801119a:	5dc7      	ldrb	r7, [r0, r7]
 801119c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80111a0:	4637      	mov	r7, r6
 80111a2:	42bb      	cmp	r3, r7
 80111a4:	460e      	mov	r6, r1
 80111a6:	d9f4      	bls.n	8011192 <_printf_i+0x11a>
 80111a8:	2b08      	cmp	r3, #8
 80111aa:	d10b      	bne.n	80111c4 <_printf_i+0x14c>
 80111ac:	6823      	ldr	r3, [r4, #0]
 80111ae:	07de      	lsls	r6, r3, #31
 80111b0:	d508      	bpl.n	80111c4 <_printf_i+0x14c>
 80111b2:	6923      	ldr	r3, [r4, #16]
 80111b4:	6861      	ldr	r1, [r4, #4]
 80111b6:	4299      	cmp	r1, r3
 80111b8:	bfde      	ittt	le
 80111ba:	2330      	movle	r3, #48	; 0x30
 80111bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80111c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80111c4:	1b52      	subs	r2, r2, r5
 80111c6:	6122      	str	r2, [r4, #16]
 80111c8:	f8cd a000 	str.w	sl, [sp]
 80111cc:	464b      	mov	r3, r9
 80111ce:	aa03      	add	r2, sp, #12
 80111d0:	4621      	mov	r1, r4
 80111d2:	4640      	mov	r0, r8
 80111d4:	f7ff fee2 	bl	8010f9c <_printf_common>
 80111d8:	3001      	adds	r0, #1
 80111da:	d14c      	bne.n	8011276 <_printf_i+0x1fe>
 80111dc:	f04f 30ff 	mov.w	r0, #4294967295
 80111e0:	b004      	add	sp, #16
 80111e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e6:	4835      	ldr	r0, [pc, #212]	; (80112bc <_printf_i+0x244>)
 80111e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80111ec:	6829      	ldr	r1, [r5, #0]
 80111ee:	6823      	ldr	r3, [r4, #0]
 80111f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80111f4:	6029      	str	r1, [r5, #0]
 80111f6:	061d      	lsls	r5, r3, #24
 80111f8:	d514      	bpl.n	8011224 <_printf_i+0x1ac>
 80111fa:	07df      	lsls	r7, r3, #31
 80111fc:	bf44      	itt	mi
 80111fe:	f043 0320 	orrmi.w	r3, r3, #32
 8011202:	6023      	strmi	r3, [r4, #0]
 8011204:	b91e      	cbnz	r6, 801120e <_printf_i+0x196>
 8011206:	6823      	ldr	r3, [r4, #0]
 8011208:	f023 0320 	bic.w	r3, r3, #32
 801120c:	6023      	str	r3, [r4, #0]
 801120e:	2310      	movs	r3, #16
 8011210:	e7b0      	b.n	8011174 <_printf_i+0xfc>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	f043 0320 	orr.w	r3, r3, #32
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	2378      	movs	r3, #120	; 0x78
 801121c:	4828      	ldr	r0, [pc, #160]	; (80112c0 <_printf_i+0x248>)
 801121e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011222:	e7e3      	b.n	80111ec <_printf_i+0x174>
 8011224:	0659      	lsls	r1, r3, #25
 8011226:	bf48      	it	mi
 8011228:	b2b6      	uxthmi	r6, r6
 801122a:	e7e6      	b.n	80111fa <_printf_i+0x182>
 801122c:	4615      	mov	r5, r2
 801122e:	e7bb      	b.n	80111a8 <_printf_i+0x130>
 8011230:	682b      	ldr	r3, [r5, #0]
 8011232:	6826      	ldr	r6, [r4, #0]
 8011234:	6961      	ldr	r1, [r4, #20]
 8011236:	1d18      	adds	r0, r3, #4
 8011238:	6028      	str	r0, [r5, #0]
 801123a:	0635      	lsls	r5, r6, #24
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	d501      	bpl.n	8011244 <_printf_i+0x1cc>
 8011240:	6019      	str	r1, [r3, #0]
 8011242:	e002      	b.n	801124a <_printf_i+0x1d2>
 8011244:	0670      	lsls	r0, r6, #25
 8011246:	d5fb      	bpl.n	8011240 <_printf_i+0x1c8>
 8011248:	8019      	strh	r1, [r3, #0]
 801124a:	2300      	movs	r3, #0
 801124c:	6123      	str	r3, [r4, #16]
 801124e:	4615      	mov	r5, r2
 8011250:	e7ba      	b.n	80111c8 <_printf_i+0x150>
 8011252:	682b      	ldr	r3, [r5, #0]
 8011254:	1d1a      	adds	r2, r3, #4
 8011256:	602a      	str	r2, [r5, #0]
 8011258:	681d      	ldr	r5, [r3, #0]
 801125a:	6862      	ldr	r2, [r4, #4]
 801125c:	2100      	movs	r1, #0
 801125e:	4628      	mov	r0, r5
 8011260:	f7ee ffde 	bl	8000220 <memchr>
 8011264:	b108      	cbz	r0, 801126a <_printf_i+0x1f2>
 8011266:	1b40      	subs	r0, r0, r5
 8011268:	6060      	str	r0, [r4, #4]
 801126a:	6863      	ldr	r3, [r4, #4]
 801126c:	6123      	str	r3, [r4, #16]
 801126e:	2300      	movs	r3, #0
 8011270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011274:	e7a8      	b.n	80111c8 <_printf_i+0x150>
 8011276:	6923      	ldr	r3, [r4, #16]
 8011278:	462a      	mov	r2, r5
 801127a:	4649      	mov	r1, r9
 801127c:	4640      	mov	r0, r8
 801127e:	47d0      	blx	sl
 8011280:	3001      	adds	r0, #1
 8011282:	d0ab      	beq.n	80111dc <_printf_i+0x164>
 8011284:	6823      	ldr	r3, [r4, #0]
 8011286:	079b      	lsls	r3, r3, #30
 8011288:	d413      	bmi.n	80112b2 <_printf_i+0x23a>
 801128a:	68e0      	ldr	r0, [r4, #12]
 801128c:	9b03      	ldr	r3, [sp, #12]
 801128e:	4298      	cmp	r0, r3
 8011290:	bfb8      	it	lt
 8011292:	4618      	movlt	r0, r3
 8011294:	e7a4      	b.n	80111e0 <_printf_i+0x168>
 8011296:	2301      	movs	r3, #1
 8011298:	4632      	mov	r2, r6
 801129a:	4649      	mov	r1, r9
 801129c:	4640      	mov	r0, r8
 801129e:	47d0      	blx	sl
 80112a0:	3001      	adds	r0, #1
 80112a2:	d09b      	beq.n	80111dc <_printf_i+0x164>
 80112a4:	3501      	adds	r5, #1
 80112a6:	68e3      	ldr	r3, [r4, #12]
 80112a8:	9903      	ldr	r1, [sp, #12]
 80112aa:	1a5b      	subs	r3, r3, r1
 80112ac:	42ab      	cmp	r3, r5
 80112ae:	dcf2      	bgt.n	8011296 <_printf_i+0x21e>
 80112b0:	e7eb      	b.n	801128a <_printf_i+0x212>
 80112b2:	2500      	movs	r5, #0
 80112b4:	f104 0619 	add.w	r6, r4, #25
 80112b8:	e7f5      	b.n	80112a6 <_printf_i+0x22e>
 80112ba:	bf00      	nop
 80112bc:	0801807c 	.word	0x0801807c
 80112c0:	0801808d 	.word	0x0801808d

080112c4 <_scanf_float>:
 80112c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c8:	b087      	sub	sp, #28
 80112ca:	4617      	mov	r7, r2
 80112cc:	9303      	str	r3, [sp, #12]
 80112ce:	688b      	ldr	r3, [r1, #8]
 80112d0:	1e5a      	subs	r2, r3, #1
 80112d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80112d6:	bf83      	ittte	hi
 80112d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80112dc:	195b      	addhi	r3, r3, r5
 80112de:	9302      	strhi	r3, [sp, #8]
 80112e0:	2300      	movls	r3, #0
 80112e2:	bf86      	itte	hi
 80112e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80112e8:	608b      	strhi	r3, [r1, #8]
 80112ea:	9302      	strls	r3, [sp, #8]
 80112ec:	680b      	ldr	r3, [r1, #0]
 80112ee:	468b      	mov	fp, r1
 80112f0:	2500      	movs	r5, #0
 80112f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80112f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80112fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80112fe:	4680      	mov	r8, r0
 8011300:	460c      	mov	r4, r1
 8011302:	465e      	mov	r6, fp
 8011304:	46aa      	mov	sl, r5
 8011306:	46a9      	mov	r9, r5
 8011308:	9501      	str	r5, [sp, #4]
 801130a:	68a2      	ldr	r2, [r4, #8]
 801130c:	b152      	cbz	r2, 8011324 <_scanf_float+0x60>
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	2b4e      	cmp	r3, #78	; 0x4e
 8011314:	d864      	bhi.n	80113e0 <_scanf_float+0x11c>
 8011316:	2b40      	cmp	r3, #64	; 0x40
 8011318:	d83c      	bhi.n	8011394 <_scanf_float+0xd0>
 801131a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801131e:	b2c8      	uxtb	r0, r1
 8011320:	280e      	cmp	r0, #14
 8011322:	d93a      	bls.n	801139a <_scanf_float+0xd6>
 8011324:	f1b9 0f00 	cmp.w	r9, #0
 8011328:	d003      	beq.n	8011332 <_scanf_float+0x6e>
 801132a:	6823      	ldr	r3, [r4, #0]
 801132c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011330:	6023      	str	r3, [r4, #0]
 8011332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011336:	f1ba 0f01 	cmp.w	sl, #1
 801133a:	f200 8113 	bhi.w	8011564 <_scanf_float+0x2a0>
 801133e:	455e      	cmp	r6, fp
 8011340:	f200 8105 	bhi.w	801154e <_scanf_float+0x28a>
 8011344:	2501      	movs	r5, #1
 8011346:	4628      	mov	r0, r5
 8011348:	b007      	add	sp, #28
 801134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801134e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011352:	2a0d      	cmp	r2, #13
 8011354:	d8e6      	bhi.n	8011324 <_scanf_float+0x60>
 8011356:	a101      	add	r1, pc, #4	; (adr r1, 801135c <_scanf_float+0x98>)
 8011358:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801135c:	0801149b 	.word	0x0801149b
 8011360:	08011325 	.word	0x08011325
 8011364:	08011325 	.word	0x08011325
 8011368:	08011325 	.word	0x08011325
 801136c:	080114fb 	.word	0x080114fb
 8011370:	080114d3 	.word	0x080114d3
 8011374:	08011325 	.word	0x08011325
 8011378:	08011325 	.word	0x08011325
 801137c:	080114a9 	.word	0x080114a9
 8011380:	08011325 	.word	0x08011325
 8011384:	08011325 	.word	0x08011325
 8011388:	08011325 	.word	0x08011325
 801138c:	08011325 	.word	0x08011325
 8011390:	08011461 	.word	0x08011461
 8011394:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011398:	e7db      	b.n	8011352 <_scanf_float+0x8e>
 801139a:	290e      	cmp	r1, #14
 801139c:	d8c2      	bhi.n	8011324 <_scanf_float+0x60>
 801139e:	a001      	add	r0, pc, #4	; (adr r0, 80113a4 <_scanf_float+0xe0>)
 80113a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80113a4:	08011453 	.word	0x08011453
 80113a8:	08011325 	.word	0x08011325
 80113ac:	08011453 	.word	0x08011453
 80113b0:	080114e7 	.word	0x080114e7
 80113b4:	08011325 	.word	0x08011325
 80113b8:	08011401 	.word	0x08011401
 80113bc:	0801143d 	.word	0x0801143d
 80113c0:	0801143d 	.word	0x0801143d
 80113c4:	0801143d 	.word	0x0801143d
 80113c8:	0801143d 	.word	0x0801143d
 80113cc:	0801143d 	.word	0x0801143d
 80113d0:	0801143d 	.word	0x0801143d
 80113d4:	0801143d 	.word	0x0801143d
 80113d8:	0801143d 	.word	0x0801143d
 80113dc:	0801143d 	.word	0x0801143d
 80113e0:	2b6e      	cmp	r3, #110	; 0x6e
 80113e2:	d809      	bhi.n	80113f8 <_scanf_float+0x134>
 80113e4:	2b60      	cmp	r3, #96	; 0x60
 80113e6:	d8b2      	bhi.n	801134e <_scanf_float+0x8a>
 80113e8:	2b54      	cmp	r3, #84	; 0x54
 80113ea:	d077      	beq.n	80114dc <_scanf_float+0x218>
 80113ec:	2b59      	cmp	r3, #89	; 0x59
 80113ee:	d199      	bne.n	8011324 <_scanf_float+0x60>
 80113f0:	2d07      	cmp	r5, #7
 80113f2:	d197      	bne.n	8011324 <_scanf_float+0x60>
 80113f4:	2508      	movs	r5, #8
 80113f6:	e029      	b.n	801144c <_scanf_float+0x188>
 80113f8:	2b74      	cmp	r3, #116	; 0x74
 80113fa:	d06f      	beq.n	80114dc <_scanf_float+0x218>
 80113fc:	2b79      	cmp	r3, #121	; 0x79
 80113fe:	e7f6      	b.n	80113ee <_scanf_float+0x12a>
 8011400:	6821      	ldr	r1, [r4, #0]
 8011402:	05c8      	lsls	r0, r1, #23
 8011404:	d51a      	bpl.n	801143c <_scanf_float+0x178>
 8011406:	9b02      	ldr	r3, [sp, #8]
 8011408:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801140c:	6021      	str	r1, [r4, #0]
 801140e:	f109 0901 	add.w	r9, r9, #1
 8011412:	b11b      	cbz	r3, 801141c <_scanf_float+0x158>
 8011414:	3b01      	subs	r3, #1
 8011416:	3201      	adds	r2, #1
 8011418:	9302      	str	r3, [sp, #8]
 801141a:	60a2      	str	r2, [r4, #8]
 801141c:	68a3      	ldr	r3, [r4, #8]
 801141e:	3b01      	subs	r3, #1
 8011420:	60a3      	str	r3, [r4, #8]
 8011422:	6923      	ldr	r3, [r4, #16]
 8011424:	3301      	adds	r3, #1
 8011426:	6123      	str	r3, [r4, #16]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3b01      	subs	r3, #1
 801142c:	2b00      	cmp	r3, #0
 801142e:	607b      	str	r3, [r7, #4]
 8011430:	f340 8084 	ble.w	801153c <_scanf_float+0x278>
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	3301      	adds	r3, #1
 8011438:	603b      	str	r3, [r7, #0]
 801143a:	e766      	b.n	801130a <_scanf_float+0x46>
 801143c:	eb1a 0f05 	cmn.w	sl, r5
 8011440:	f47f af70 	bne.w	8011324 <_scanf_float+0x60>
 8011444:	6822      	ldr	r2, [r4, #0]
 8011446:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801144a:	6022      	str	r2, [r4, #0]
 801144c:	f806 3b01 	strb.w	r3, [r6], #1
 8011450:	e7e4      	b.n	801141c <_scanf_float+0x158>
 8011452:	6822      	ldr	r2, [r4, #0]
 8011454:	0610      	lsls	r0, r2, #24
 8011456:	f57f af65 	bpl.w	8011324 <_scanf_float+0x60>
 801145a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801145e:	e7f4      	b.n	801144a <_scanf_float+0x186>
 8011460:	f1ba 0f00 	cmp.w	sl, #0
 8011464:	d10e      	bne.n	8011484 <_scanf_float+0x1c0>
 8011466:	f1b9 0f00 	cmp.w	r9, #0
 801146a:	d10e      	bne.n	801148a <_scanf_float+0x1c6>
 801146c:	6822      	ldr	r2, [r4, #0]
 801146e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011472:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011476:	d108      	bne.n	801148a <_scanf_float+0x1c6>
 8011478:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801147c:	6022      	str	r2, [r4, #0]
 801147e:	f04f 0a01 	mov.w	sl, #1
 8011482:	e7e3      	b.n	801144c <_scanf_float+0x188>
 8011484:	f1ba 0f02 	cmp.w	sl, #2
 8011488:	d055      	beq.n	8011536 <_scanf_float+0x272>
 801148a:	2d01      	cmp	r5, #1
 801148c:	d002      	beq.n	8011494 <_scanf_float+0x1d0>
 801148e:	2d04      	cmp	r5, #4
 8011490:	f47f af48 	bne.w	8011324 <_scanf_float+0x60>
 8011494:	3501      	adds	r5, #1
 8011496:	b2ed      	uxtb	r5, r5
 8011498:	e7d8      	b.n	801144c <_scanf_float+0x188>
 801149a:	f1ba 0f01 	cmp.w	sl, #1
 801149e:	f47f af41 	bne.w	8011324 <_scanf_float+0x60>
 80114a2:	f04f 0a02 	mov.w	sl, #2
 80114a6:	e7d1      	b.n	801144c <_scanf_float+0x188>
 80114a8:	b97d      	cbnz	r5, 80114ca <_scanf_float+0x206>
 80114aa:	f1b9 0f00 	cmp.w	r9, #0
 80114ae:	f47f af3c 	bne.w	801132a <_scanf_float+0x66>
 80114b2:	6822      	ldr	r2, [r4, #0]
 80114b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80114b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80114bc:	f47f af39 	bne.w	8011332 <_scanf_float+0x6e>
 80114c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80114c4:	6022      	str	r2, [r4, #0]
 80114c6:	2501      	movs	r5, #1
 80114c8:	e7c0      	b.n	801144c <_scanf_float+0x188>
 80114ca:	2d03      	cmp	r5, #3
 80114cc:	d0e2      	beq.n	8011494 <_scanf_float+0x1d0>
 80114ce:	2d05      	cmp	r5, #5
 80114d0:	e7de      	b.n	8011490 <_scanf_float+0x1cc>
 80114d2:	2d02      	cmp	r5, #2
 80114d4:	f47f af26 	bne.w	8011324 <_scanf_float+0x60>
 80114d8:	2503      	movs	r5, #3
 80114da:	e7b7      	b.n	801144c <_scanf_float+0x188>
 80114dc:	2d06      	cmp	r5, #6
 80114de:	f47f af21 	bne.w	8011324 <_scanf_float+0x60>
 80114e2:	2507      	movs	r5, #7
 80114e4:	e7b2      	b.n	801144c <_scanf_float+0x188>
 80114e6:	6822      	ldr	r2, [r4, #0]
 80114e8:	0591      	lsls	r1, r2, #22
 80114ea:	f57f af1b 	bpl.w	8011324 <_scanf_float+0x60>
 80114ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80114f2:	6022      	str	r2, [r4, #0]
 80114f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80114f8:	e7a8      	b.n	801144c <_scanf_float+0x188>
 80114fa:	6822      	ldr	r2, [r4, #0]
 80114fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011500:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011504:	d006      	beq.n	8011514 <_scanf_float+0x250>
 8011506:	0550      	lsls	r0, r2, #21
 8011508:	f57f af0c 	bpl.w	8011324 <_scanf_float+0x60>
 801150c:	f1b9 0f00 	cmp.w	r9, #0
 8011510:	f43f af0f 	beq.w	8011332 <_scanf_float+0x6e>
 8011514:	0591      	lsls	r1, r2, #22
 8011516:	bf58      	it	pl
 8011518:	9901      	ldrpl	r1, [sp, #4]
 801151a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801151e:	bf58      	it	pl
 8011520:	eba9 0101 	subpl.w	r1, r9, r1
 8011524:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011528:	bf58      	it	pl
 801152a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801152e:	6022      	str	r2, [r4, #0]
 8011530:	f04f 0900 	mov.w	r9, #0
 8011534:	e78a      	b.n	801144c <_scanf_float+0x188>
 8011536:	f04f 0a03 	mov.w	sl, #3
 801153a:	e787      	b.n	801144c <_scanf_float+0x188>
 801153c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011540:	4639      	mov	r1, r7
 8011542:	4640      	mov	r0, r8
 8011544:	4798      	blx	r3
 8011546:	2800      	cmp	r0, #0
 8011548:	f43f aedf 	beq.w	801130a <_scanf_float+0x46>
 801154c:	e6ea      	b.n	8011324 <_scanf_float+0x60>
 801154e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011556:	463a      	mov	r2, r7
 8011558:	4640      	mov	r0, r8
 801155a:	4798      	blx	r3
 801155c:	6923      	ldr	r3, [r4, #16]
 801155e:	3b01      	subs	r3, #1
 8011560:	6123      	str	r3, [r4, #16]
 8011562:	e6ec      	b.n	801133e <_scanf_float+0x7a>
 8011564:	1e6b      	subs	r3, r5, #1
 8011566:	2b06      	cmp	r3, #6
 8011568:	d825      	bhi.n	80115b6 <_scanf_float+0x2f2>
 801156a:	2d02      	cmp	r5, #2
 801156c:	d836      	bhi.n	80115dc <_scanf_float+0x318>
 801156e:	455e      	cmp	r6, fp
 8011570:	f67f aee8 	bls.w	8011344 <_scanf_float+0x80>
 8011574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011578:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801157c:	463a      	mov	r2, r7
 801157e:	4640      	mov	r0, r8
 8011580:	4798      	blx	r3
 8011582:	6923      	ldr	r3, [r4, #16]
 8011584:	3b01      	subs	r3, #1
 8011586:	6123      	str	r3, [r4, #16]
 8011588:	e7f1      	b.n	801156e <_scanf_float+0x2aa>
 801158a:	9802      	ldr	r0, [sp, #8]
 801158c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011590:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011594:	9002      	str	r0, [sp, #8]
 8011596:	463a      	mov	r2, r7
 8011598:	4640      	mov	r0, r8
 801159a:	4798      	blx	r3
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	3b01      	subs	r3, #1
 80115a0:	6123      	str	r3, [r4, #16]
 80115a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115a6:	fa5f fa8a 	uxtb.w	sl, sl
 80115aa:	f1ba 0f02 	cmp.w	sl, #2
 80115ae:	d1ec      	bne.n	801158a <_scanf_float+0x2c6>
 80115b0:	3d03      	subs	r5, #3
 80115b2:	b2ed      	uxtb	r5, r5
 80115b4:	1b76      	subs	r6, r6, r5
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	05da      	lsls	r2, r3, #23
 80115ba:	d52f      	bpl.n	801161c <_scanf_float+0x358>
 80115bc:	055b      	lsls	r3, r3, #21
 80115be:	d510      	bpl.n	80115e2 <_scanf_float+0x31e>
 80115c0:	455e      	cmp	r6, fp
 80115c2:	f67f aebf 	bls.w	8011344 <_scanf_float+0x80>
 80115c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80115ce:	463a      	mov	r2, r7
 80115d0:	4640      	mov	r0, r8
 80115d2:	4798      	blx	r3
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	3b01      	subs	r3, #1
 80115d8:	6123      	str	r3, [r4, #16]
 80115da:	e7f1      	b.n	80115c0 <_scanf_float+0x2fc>
 80115dc:	46aa      	mov	sl, r5
 80115de:	9602      	str	r6, [sp, #8]
 80115e0:	e7df      	b.n	80115a2 <_scanf_float+0x2de>
 80115e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80115e6:	6923      	ldr	r3, [r4, #16]
 80115e8:	2965      	cmp	r1, #101	; 0x65
 80115ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80115ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80115f2:	6123      	str	r3, [r4, #16]
 80115f4:	d00c      	beq.n	8011610 <_scanf_float+0x34c>
 80115f6:	2945      	cmp	r1, #69	; 0x45
 80115f8:	d00a      	beq.n	8011610 <_scanf_float+0x34c>
 80115fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115fe:	463a      	mov	r2, r7
 8011600:	4640      	mov	r0, r8
 8011602:	4798      	blx	r3
 8011604:	6923      	ldr	r3, [r4, #16]
 8011606:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801160a:	3b01      	subs	r3, #1
 801160c:	1eb5      	subs	r5, r6, #2
 801160e:	6123      	str	r3, [r4, #16]
 8011610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011614:	463a      	mov	r2, r7
 8011616:	4640      	mov	r0, r8
 8011618:	4798      	blx	r3
 801161a:	462e      	mov	r6, r5
 801161c:	6825      	ldr	r5, [r4, #0]
 801161e:	f015 0510 	ands.w	r5, r5, #16
 8011622:	d159      	bne.n	80116d8 <_scanf_float+0x414>
 8011624:	7035      	strb	r5, [r6, #0]
 8011626:	6823      	ldr	r3, [r4, #0]
 8011628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011630:	d11b      	bne.n	801166a <_scanf_float+0x3a6>
 8011632:	9b01      	ldr	r3, [sp, #4]
 8011634:	454b      	cmp	r3, r9
 8011636:	eba3 0209 	sub.w	r2, r3, r9
 801163a:	d123      	bne.n	8011684 <_scanf_float+0x3c0>
 801163c:	2200      	movs	r2, #0
 801163e:	4659      	mov	r1, fp
 8011640:	4640      	mov	r0, r8
 8011642:	f000 ff27 	bl	8012494 <_strtod_r>
 8011646:	6822      	ldr	r2, [r4, #0]
 8011648:	9b03      	ldr	r3, [sp, #12]
 801164a:	f012 0f02 	tst.w	r2, #2
 801164e:	ec57 6b10 	vmov	r6, r7, d0
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	d021      	beq.n	801169a <_scanf_float+0x3d6>
 8011656:	9903      	ldr	r1, [sp, #12]
 8011658:	1d1a      	adds	r2, r3, #4
 801165a:	600a      	str	r2, [r1, #0]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	e9c3 6700 	strd	r6, r7, [r3]
 8011662:	68e3      	ldr	r3, [r4, #12]
 8011664:	3301      	adds	r3, #1
 8011666:	60e3      	str	r3, [r4, #12]
 8011668:	e66d      	b.n	8011346 <_scanf_float+0x82>
 801166a:	9b04      	ldr	r3, [sp, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d0e5      	beq.n	801163c <_scanf_float+0x378>
 8011670:	9905      	ldr	r1, [sp, #20]
 8011672:	230a      	movs	r3, #10
 8011674:	462a      	mov	r2, r5
 8011676:	3101      	adds	r1, #1
 8011678:	4640      	mov	r0, r8
 801167a:	f000 ff93 	bl	80125a4 <_strtol_r>
 801167e:	9b04      	ldr	r3, [sp, #16]
 8011680:	9e05      	ldr	r6, [sp, #20]
 8011682:	1ac2      	subs	r2, r0, r3
 8011684:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011688:	429e      	cmp	r6, r3
 801168a:	bf28      	it	cs
 801168c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011690:	4912      	ldr	r1, [pc, #72]	; (80116dc <_scanf_float+0x418>)
 8011692:	4630      	mov	r0, r6
 8011694:	f000 f82c 	bl	80116f0 <siprintf>
 8011698:	e7d0      	b.n	801163c <_scanf_float+0x378>
 801169a:	9903      	ldr	r1, [sp, #12]
 801169c:	f012 0f04 	tst.w	r2, #4
 80116a0:	f103 0204 	add.w	r2, r3, #4
 80116a4:	600a      	str	r2, [r1, #0]
 80116a6:	d1d9      	bne.n	801165c <_scanf_float+0x398>
 80116a8:	f8d3 8000 	ldr.w	r8, [r3]
 80116ac:	ee10 2a10 	vmov	r2, s0
 80116b0:	ee10 0a10 	vmov	r0, s0
 80116b4:	463b      	mov	r3, r7
 80116b6:	4639      	mov	r1, r7
 80116b8:	f7ef fa58 	bl	8000b6c <__aeabi_dcmpun>
 80116bc:	b128      	cbz	r0, 80116ca <_scanf_float+0x406>
 80116be:	4808      	ldr	r0, [pc, #32]	; (80116e0 <_scanf_float+0x41c>)
 80116c0:	f000 f810 	bl	80116e4 <nanf>
 80116c4:	ed88 0a00 	vstr	s0, [r8]
 80116c8:	e7cb      	b.n	8011662 <_scanf_float+0x39e>
 80116ca:	4630      	mov	r0, r6
 80116cc:	4639      	mov	r1, r7
 80116ce:	f7ef faab 	bl	8000c28 <__aeabi_d2f>
 80116d2:	f8c8 0000 	str.w	r0, [r8]
 80116d6:	e7c4      	b.n	8011662 <_scanf_float+0x39e>
 80116d8:	2500      	movs	r5, #0
 80116da:	e634      	b.n	8011346 <_scanf_float+0x82>
 80116dc:	0801809e 	.word	0x0801809e
 80116e0:	080184c3 	.word	0x080184c3

080116e4 <nanf>:
 80116e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80116ec <nanf+0x8>
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	7fc00000 	.word	0x7fc00000

080116f0 <siprintf>:
 80116f0:	b40e      	push	{r1, r2, r3}
 80116f2:	b500      	push	{lr}
 80116f4:	b09c      	sub	sp, #112	; 0x70
 80116f6:	ab1d      	add	r3, sp, #116	; 0x74
 80116f8:	9002      	str	r0, [sp, #8]
 80116fa:	9006      	str	r0, [sp, #24]
 80116fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011700:	4809      	ldr	r0, [pc, #36]	; (8011728 <siprintf+0x38>)
 8011702:	9107      	str	r1, [sp, #28]
 8011704:	9104      	str	r1, [sp, #16]
 8011706:	4909      	ldr	r1, [pc, #36]	; (801172c <siprintf+0x3c>)
 8011708:	f853 2b04 	ldr.w	r2, [r3], #4
 801170c:	9105      	str	r1, [sp, #20]
 801170e:	6800      	ldr	r0, [r0, #0]
 8011710:	9301      	str	r3, [sp, #4]
 8011712:	a902      	add	r1, sp, #8
 8011714:	f002 ffa8 	bl	8014668 <_svfiprintf_r>
 8011718:	9b02      	ldr	r3, [sp, #8]
 801171a:	2200      	movs	r2, #0
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	b01c      	add	sp, #112	; 0x70
 8011720:	f85d eb04 	ldr.w	lr, [sp], #4
 8011724:	b003      	add	sp, #12
 8011726:	4770      	bx	lr
 8011728:	2000002c 	.word	0x2000002c
 801172c:	ffff0208 	.word	0xffff0208

08011730 <siscanf>:
 8011730:	b40e      	push	{r1, r2, r3}
 8011732:	b510      	push	{r4, lr}
 8011734:	b09f      	sub	sp, #124	; 0x7c
 8011736:	ac21      	add	r4, sp, #132	; 0x84
 8011738:	f44f 7101 	mov.w	r1, #516	; 0x204
 801173c:	f854 2b04 	ldr.w	r2, [r4], #4
 8011740:	9201      	str	r2, [sp, #4]
 8011742:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011746:	9004      	str	r0, [sp, #16]
 8011748:	9008      	str	r0, [sp, #32]
 801174a:	f7ee fd61 	bl	8000210 <strlen>
 801174e:	4b0c      	ldr	r3, [pc, #48]	; (8011780 <siscanf+0x50>)
 8011750:	9005      	str	r0, [sp, #20]
 8011752:	9009      	str	r0, [sp, #36]	; 0x24
 8011754:	930d      	str	r3, [sp, #52]	; 0x34
 8011756:	480b      	ldr	r0, [pc, #44]	; (8011784 <siscanf+0x54>)
 8011758:	9a01      	ldr	r2, [sp, #4]
 801175a:	6800      	ldr	r0, [r0, #0]
 801175c:	9403      	str	r4, [sp, #12]
 801175e:	2300      	movs	r3, #0
 8011760:	9311      	str	r3, [sp, #68]	; 0x44
 8011762:	9316      	str	r3, [sp, #88]	; 0x58
 8011764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011768:	f8ad 301e 	strh.w	r3, [sp, #30]
 801176c:	a904      	add	r1, sp, #16
 801176e:	4623      	mov	r3, r4
 8011770:	f003 f8d4 	bl	801491c <__ssvfiscanf_r>
 8011774:	b01f      	add	sp, #124	; 0x7c
 8011776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801177a:	b003      	add	sp, #12
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	080117ab 	.word	0x080117ab
 8011784:	2000002c 	.word	0x2000002c

08011788 <__sread>:
 8011788:	b510      	push	{r4, lr}
 801178a:	460c      	mov	r4, r1
 801178c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011790:	f003 fb8e 	bl	8014eb0 <_read_r>
 8011794:	2800      	cmp	r0, #0
 8011796:	bfab      	itete	ge
 8011798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801179a:	89a3      	ldrhlt	r3, [r4, #12]
 801179c:	181b      	addge	r3, r3, r0
 801179e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117a2:	bfac      	ite	ge
 80117a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80117a6:	81a3      	strhlt	r3, [r4, #12]
 80117a8:	bd10      	pop	{r4, pc}

080117aa <__seofread>:
 80117aa:	2000      	movs	r0, #0
 80117ac:	4770      	bx	lr

080117ae <__swrite>:
 80117ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b2:	461f      	mov	r7, r3
 80117b4:	898b      	ldrh	r3, [r1, #12]
 80117b6:	05db      	lsls	r3, r3, #23
 80117b8:	4605      	mov	r5, r0
 80117ba:	460c      	mov	r4, r1
 80117bc:	4616      	mov	r6, r2
 80117be:	d505      	bpl.n	80117cc <__swrite+0x1e>
 80117c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c4:	2302      	movs	r3, #2
 80117c6:	2200      	movs	r2, #0
 80117c8:	f002 f900 	bl	80139cc <_lseek_r>
 80117cc:	89a3      	ldrh	r3, [r4, #12]
 80117ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117d6:	81a3      	strh	r3, [r4, #12]
 80117d8:	4632      	mov	r2, r6
 80117da:	463b      	mov	r3, r7
 80117dc:	4628      	mov	r0, r5
 80117de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117e2:	f000 bee1 	b.w	80125a8 <_write_r>

080117e6 <__sseek>:
 80117e6:	b510      	push	{r4, lr}
 80117e8:	460c      	mov	r4, r1
 80117ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ee:	f002 f8ed 	bl	80139cc <_lseek_r>
 80117f2:	1c43      	adds	r3, r0, #1
 80117f4:	89a3      	ldrh	r3, [r4, #12]
 80117f6:	bf15      	itete	ne
 80117f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80117fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011802:	81a3      	strheq	r3, [r4, #12]
 8011804:	bf18      	it	ne
 8011806:	81a3      	strhne	r3, [r4, #12]
 8011808:	bd10      	pop	{r4, pc}

0801180a <__sclose>:
 801180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180e:	f000 bedd 	b.w	80125cc <_close_r>

08011812 <strcpy>:
 8011812:	4603      	mov	r3, r0
 8011814:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011818:	f803 2b01 	strb.w	r2, [r3], #1
 801181c:	2a00      	cmp	r2, #0
 801181e:	d1f9      	bne.n	8011814 <strcpy+0x2>
 8011820:	4770      	bx	lr

08011822 <strstr>:
 8011822:	780a      	ldrb	r2, [r1, #0]
 8011824:	b570      	push	{r4, r5, r6, lr}
 8011826:	b96a      	cbnz	r2, 8011844 <strstr+0x22>
 8011828:	bd70      	pop	{r4, r5, r6, pc}
 801182a:	429a      	cmp	r2, r3
 801182c:	d109      	bne.n	8011842 <strstr+0x20>
 801182e:	460c      	mov	r4, r1
 8011830:	4605      	mov	r5, r0
 8011832:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011836:	2b00      	cmp	r3, #0
 8011838:	d0f6      	beq.n	8011828 <strstr+0x6>
 801183a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801183e:	429e      	cmp	r6, r3
 8011840:	d0f7      	beq.n	8011832 <strstr+0x10>
 8011842:	3001      	adds	r0, #1
 8011844:	7803      	ldrb	r3, [r0, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1ef      	bne.n	801182a <strstr+0x8>
 801184a:	4618      	mov	r0, r3
 801184c:	e7ec      	b.n	8011828 <strstr+0x6>

0801184e <sulp>:
 801184e:	b570      	push	{r4, r5, r6, lr}
 8011850:	4604      	mov	r4, r0
 8011852:	460d      	mov	r5, r1
 8011854:	ec45 4b10 	vmov	d0, r4, r5
 8011858:	4616      	mov	r6, r2
 801185a:	f002 fc63 	bl	8014124 <__ulp>
 801185e:	ec51 0b10 	vmov	r0, r1, d0
 8011862:	b17e      	cbz	r6, 8011884 <sulp+0x36>
 8011864:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011868:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801186c:	2b00      	cmp	r3, #0
 801186e:	dd09      	ble.n	8011884 <sulp+0x36>
 8011870:	051b      	lsls	r3, r3, #20
 8011872:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011876:	2400      	movs	r4, #0
 8011878:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801187c:	4622      	mov	r2, r4
 801187e:	462b      	mov	r3, r5
 8011880:	f7ee feda 	bl	8000638 <__aeabi_dmul>
 8011884:	bd70      	pop	{r4, r5, r6, pc}
	...

08011888 <_strtod_l>:
 8011888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188c:	ed2d 8b02 	vpush	{d8}
 8011890:	b09d      	sub	sp, #116	; 0x74
 8011892:	461f      	mov	r7, r3
 8011894:	2300      	movs	r3, #0
 8011896:	9318      	str	r3, [sp, #96]	; 0x60
 8011898:	4ba2      	ldr	r3, [pc, #648]	; (8011b24 <_strtod_l+0x29c>)
 801189a:	9213      	str	r2, [sp, #76]	; 0x4c
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	9305      	str	r3, [sp, #20]
 80118a0:	4604      	mov	r4, r0
 80118a2:	4618      	mov	r0, r3
 80118a4:	4688      	mov	r8, r1
 80118a6:	f7ee fcb3 	bl	8000210 <strlen>
 80118aa:	f04f 0a00 	mov.w	sl, #0
 80118ae:	4605      	mov	r5, r0
 80118b0:	f04f 0b00 	mov.w	fp, #0
 80118b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80118b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118ba:	781a      	ldrb	r2, [r3, #0]
 80118bc:	2a2b      	cmp	r2, #43	; 0x2b
 80118be:	d04e      	beq.n	801195e <_strtod_l+0xd6>
 80118c0:	d83b      	bhi.n	801193a <_strtod_l+0xb2>
 80118c2:	2a0d      	cmp	r2, #13
 80118c4:	d834      	bhi.n	8011930 <_strtod_l+0xa8>
 80118c6:	2a08      	cmp	r2, #8
 80118c8:	d834      	bhi.n	8011934 <_strtod_l+0xac>
 80118ca:	2a00      	cmp	r2, #0
 80118cc:	d03e      	beq.n	801194c <_strtod_l+0xc4>
 80118ce:	2300      	movs	r3, #0
 80118d0:	930a      	str	r3, [sp, #40]	; 0x28
 80118d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80118d4:	7833      	ldrb	r3, [r6, #0]
 80118d6:	2b30      	cmp	r3, #48	; 0x30
 80118d8:	f040 80b0 	bne.w	8011a3c <_strtod_l+0x1b4>
 80118dc:	7873      	ldrb	r3, [r6, #1]
 80118de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80118e2:	2b58      	cmp	r3, #88	; 0x58
 80118e4:	d168      	bne.n	80119b8 <_strtod_l+0x130>
 80118e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118e8:	9301      	str	r3, [sp, #4]
 80118ea:	ab18      	add	r3, sp, #96	; 0x60
 80118ec:	9702      	str	r7, [sp, #8]
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	4a8d      	ldr	r2, [pc, #564]	; (8011b28 <_strtod_l+0x2a0>)
 80118f2:	ab19      	add	r3, sp, #100	; 0x64
 80118f4:	a917      	add	r1, sp, #92	; 0x5c
 80118f6:	4620      	mov	r0, r4
 80118f8:	f001 fd5c 	bl	80133b4 <__gethex>
 80118fc:	f010 0707 	ands.w	r7, r0, #7
 8011900:	4605      	mov	r5, r0
 8011902:	d005      	beq.n	8011910 <_strtod_l+0x88>
 8011904:	2f06      	cmp	r7, #6
 8011906:	d12c      	bne.n	8011962 <_strtod_l+0xda>
 8011908:	3601      	adds	r6, #1
 801190a:	2300      	movs	r3, #0
 801190c:	9617      	str	r6, [sp, #92]	; 0x5c
 801190e:	930a      	str	r3, [sp, #40]	; 0x28
 8011910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011912:	2b00      	cmp	r3, #0
 8011914:	f040 8590 	bne.w	8012438 <_strtod_l+0xbb0>
 8011918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801191a:	b1eb      	cbz	r3, 8011958 <_strtod_l+0xd0>
 801191c:	4652      	mov	r2, sl
 801191e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011922:	ec43 2b10 	vmov	d0, r2, r3
 8011926:	b01d      	add	sp, #116	; 0x74
 8011928:	ecbd 8b02 	vpop	{d8}
 801192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011930:	2a20      	cmp	r2, #32
 8011932:	d1cc      	bne.n	80118ce <_strtod_l+0x46>
 8011934:	3301      	adds	r3, #1
 8011936:	9317      	str	r3, [sp, #92]	; 0x5c
 8011938:	e7be      	b.n	80118b8 <_strtod_l+0x30>
 801193a:	2a2d      	cmp	r2, #45	; 0x2d
 801193c:	d1c7      	bne.n	80118ce <_strtod_l+0x46>
 801193e:	2201      	movs	r2, #1
 8011940:	920a      	str	r2, [sp, #40]	; 0x28
 8011942:	1c5a      	adds	r2, r3, #1
 8011944:	9217      	str	r2, [sp, #92]	; 0x5c
 8011946:	785b      	ldrb	r3, [r3, #1]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1c2      	bne.n	80118d2 <_strtod_l+0x4a>
 801194c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801194e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011952:	2b00      	cmp	r3, #0
 8011954:	f040 856e 	bne.w	8012434 <_strtod_l+0xbac>
 8011958:	4652      	mov	r2, sl
 801195a:	465b      	mov	r3, fp
 801195c:	e7e1      	b.n	8011922 <_strtod_l+0x9a>
 801195e:	2200      	movs	r2, #0
 8011960:	e7ee      	b.n	8011940 <_strtod_l+0xb8>
 8011962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011964:	b13a      	cbz	r2, 8011976 <_strtod_l+0xee>
 8011966:	2135      	movs	r1, #53	; 0x35
 8011968:	a81a      	add	r0, sp, #104	; 0x68
 801196a:	f002 fce6 	bl	801433a <__copybits>
 801196e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011970:	4620      	mov	r0, r4
 8011972:	f002 f8a5 	bl	8013ac0 <_Bfree>
 8011976:	3f01      	subs	r7, #1
 8011978:	2f04      	cmp	r7, #4
 801197a:	d806      	bhi.n	801198a <_strtod_l+0x102>
 801197c:	e8df f007 	tbb	[pc, r7]
 8011980:	1714030a 	.word	0x1714030a
 8011984:	0a          	.byte	0x0a
 8011985:	00          	.byte	0x00
 8011986:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801198a:	0728      	lsls	r0, r5, #28
 801198c:	d5c0      	bpl.n	8011910 <_strtod_l+0x88>
 801198e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011992:	e7bd      	b.n	8011910 <_strtod_l+0x88>
 8011994:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011998:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801199a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801199e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80119a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80119a6:	e7f0      	b.n	801198a <_strtod_l+0x102>
 80119a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011b2c <_strtod_l+0x2a4>
 80119ac:	e7ed      	b.n	801198a <_strtod_l+0x102>
 80119ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80119b2:	f04f 3aff 	mov.w	sl, #4294967295
 80119b6:	e7e8      	b.n	801198a <_strtod_l+0x102>
 80119b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119ba:	1c5a      	adds	r2, r3, #1
 80119bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80119be:	785b      	ldrb	r3, [r3, #1]
 80119c0:	2b30      	cmp	r3, #48	; 0x30
 80119c2:	d0f9      	beq.n	80119b8 <_strtod_l+0x130>
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d0a3      	beq.n	8011910 <_strtod_l+0x88>
 80119c8:	2301      	movs	r3, #1
 80119ca:	f04f 0900 	mov.w	r9, #0
 80119ce:	9304      	str	r3, [sp, #16]
 80119d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80119d2:	9308      	str	r3, [sp, #32]
 80119d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80119d8:	464f      	mov	r7, r9
 80119da:	220a      	movs	r2, #10
 80119dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80119de:	7806      	ldrb	r6, [r0, #0]
 80119e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80119e4:	b2d9      	uxtb	r1, r3
 80119e6:	2909      	cmp	r1, #9
 80119e8:	d92a      	bls.n	8011a40 <_strtod_l+0x1b8>
 80119ea:	9905      	ldr	r1, [sp, #20]
 80119ec:	462a      	mov	r2, r5
 80119ee:	f003 fac3 	bl	8014f78 <strncmp>
 80119f2:	b398      	cbz	r0, 8011a5c <_strtod_l+0x1d4>
 80119f4:	2000      	movs	r0, #0
 80119f6:	4632      	mov	r2, r6
 80119f8:	463d      	mov	r5, r7
 80119fa:	9005      	str	r0, [sp, #20]
 80119fc:	4603      	mov	r3, r0
 80119fe:	2a65      	cmp	r2, #101	; 0x65
 8011a00:	d001      	beq.n	8011a06 <_strtod_l+0x17e>
 8011a02:	2a45      	cmp	r2, #69	; 0x45
 8011a04:	d118      	bne.n	8011a38 <_strtod_l+0x1b0>
 8011a06:	b91d      	cbnz	r5, 8011a10 <_strtod_l+0x188>
 8011a08:	9a04      	ldr	r2, [sp, #16]
 8011a0a:	4302      	orrs	r2, r0
 8011a0c:	d09e      	beq.n	801194c <_strtod_l+0xc4>
 8011a0e:	2500      	movs	r5, #0
 8011a10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011a14:	f108 0201 	add.w	r2, r8, #1
 8011a18:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011a1e:	2a2b      	cmp	r2, #43	; 0x2b
 8011a20:	d075      	beq.n	8011b0e <_strtod_l+0x286>
 8011a22:	2a2d      	cmp	r2, #45	; 0x2d
 8011a24:	d07b      	beq.n	8011b1e <_strtod_l+0x296>
 8011a26:	f04f 0c00 	mov.w	ip, #0
 8011a2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011a2e:	2909      	cmp	r1, #9
 8011a30:	f240 8082 	bls.w	8011b38 <_strtod_l+0x2b0>
 8011a34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011a38:	2600      	movs	r6, #0
 8011a3a:	e09d      	b.n	8011b78 <_strtod_l+0x2f0>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e7c4      	b.n	80119ca <_strtod_l+0x142>
 8011a40:	2f08      	cmp	r7, #8
 8011a42:	bfd8      	it	le
 8011a44:	9907      	ldrle	r1, [sp, #28]
 8011a46:	f100 0001 	add.w	r0, r0, #1
 8011a4a:	bfda      	itte	le
 8011a4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011a50:	9307      	strle	r3, [sp, #28]
 8011a52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011a56:	3701      	adds	r7, #1
 8011a58:	9017      	str	r0, [sp, #92]	; 0x5c
 8011a5a:	e7bf      	b.n	80119dc <_strtod_l+0x154>
 8011a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a5e:	195a      	adds	r2, r3, r5
 8011a60:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a62:	5d5a      	ldrb	r2, [r3, r5]
 8011a64:	2f00      	cmp	r7, #0
 8011a66:	d037      	beq.n	8011ad8 <_strtod_l+0x250>
 8011a68:	9005      	str	r0, [sp, #20]
 8011a6a:	463d      	mov	r5, r7
 8011a6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011a70:	2b09      	cmp	r3, #9
 8011a72:	d912      	bls.n	8011a9a <_strtod_l+0x212>
 8011a74:	2301      	movs	r3, #1
 8011a76:	e7c2      	b.n	80119fe <_strtod_l+0x176>
 8011a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a7a:	1c5a      	adds	r2, r3, #1
 8011a7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a7e:	785a      	ldrb	r2, [r3, #1]
 8011a80:	3001      	adds	r0, #1
 8011a82:	2a30      	cmp	r2, #48	; 0x30
 8011a84:	d0f8      	beq.n	8011a78 <_strtod_l+0x1f0>
 8011a86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011a8a:	2b08      	cmp	r3, #8
 8011a8c:	f200 84d9 	bhi.w	8012442 <_strtod_l+0xbba>
 8011a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a92:	9005      	str	r0, [sp, #20]
 8011a94:	2000      	movs	r0, #0
 8011a96:	9308      	str	r3, [sp, #32]
 8011a98:	4605      	mov	r5, r0
 8011a9a:	3a30      	subs	r2, #48	; 0x30
 8011a9c:	f100 0301 	add.w	r3, r0, #1
 8011aa0:	d014      	beq.n	8011acc <_strtod_l+0x244>
 8011aa2:	9905      	ldr	r1, [sp, #20]
 8011aa4:	4419      	add	r1, r3
 8011aa6:	9105      	str	r1, [sp, #20]
 8011aa8:	462b      	mov	r3, r5
 8011aaa:	eb00 0e05 	add.w	lr, r0, r5
 8011aae:	210a      	movs	r1, #10
 8011ab0:	4573      	cmp	r3, lr
 8011ab2:	d113      	bne.n	8011adc <_strtod_l+0x254>
 8011ab4:	182b      	adds	r3, r5, r0
 8011ab6:	2b08      	cmp	r3, #8
 8011ab8:	f105 0501 	add.w	r5, r5, #1
 8011abc:	4405      	add	r5, r0
 8011abe:	dc1c      	bgt.n	8011afa <_strtod_l+0x272>
 8011ac0:	9907      	ldr	r1, [sp, #28]
 8011ac2:	230a      	movs	r3, #10
 8011ac4:	fb03 2301 	mla	r3, r3, r1, r2
 8011ac8:	9307      	str	r3, [sp, #28]
 8011aca:	2300      	movs	r3, #0
 8011acc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011ace:	1c51      	adds	r1, r2, #1
 8011ad0:	9117      	str	r1, [sp, #92]	; 0x5c
 8011ad2:	7852      	ldrb	r2, [r2, #1]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	e7c9      	b.n	8011a6c <_strtod_l+0x1e4>
 8011ad8:	4638      	mov	r0, r7
 8011ada:	e7d2      	b.n	8011a82 <_strtod_l+0x1fa>
 8011adc:	2b08      	cmp	r3, #8
 8011ade:	dc04      	bgt.n	8011aea <_strtod_l+0x262>
 8011ae0:	9e07      	ldr	r6, [sp, #28]
 8011ae2:	434e      	muls	r6, r1
 8011ae4:	9607      	str	r6, [sp, #28]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	e7e2      	b.n	8011ab0 <_strtod_l+0x228>
 8011aea:	f103 0c01 	add.w	ip, r3, #1
 8011aee:	f1bc 0f10 	cmp.w	ip, #16
 8011af2:	bfd8      	it	le
 8011af4:	fb01 f909 	mulle.w	r9, r1, r9
 8011af8:	e7f5      	b.n	8011ae6 <_strtod_l+0x25e>
 8011afa:	2d10      	cmp	r5, #16
 8011afc:	bfdc      	itt	le
 8011afe:	230a      	movle	r3, #10
 8011b00:	fb03 2909 	mlale	r9, r3, r9, r2
 8011b04:	e7e1      	b.n	8011aca <_strtod_l+0x242>
 8011b06:	2300      	movs	r3, #0
 8011b08:	9305      	str	r3, [sp, #20]
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e77c      	b.n	8011a08 <_strtod_l+0x180>
 8011b0e:	f04f 0c00 	mov.w	ip, #0
 8011b12:	f108 0202 	add.w	r2, r8, #2
 8011b16:	9217      	str	r2, [sp, #92]	; 0x5c
 8011b18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011b1c:	e785      	b.n	8011a2a <_strtod_l+0x1a2>
 8011b1e:	f04f 0c01 	mov.w	ip, #1
 8011b22:	e7f6      	b.n	8011b12 <_strtod_l+0x28a>
 8011b24:	080182f0 	.word	0x080182f0
 8011b28:	080180a4 	.word	0x080180a4
 8011b2c:	7ff00000 	.word	0x7ff00000
 8011b30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b32:	1c51      	adds	r1, r2, #1
 8011b34:	9117      	str	r1, [sp, #92]	; 0x5c
 8011b36:	7852      	ldrb	r2, [r2, #1]
 8011b38:	2a30      	cmp	r2, #48	; 0x30
 8011b3a:	d0f9      	beq.n	8011b30 <_strtod_l+0x2a8>
 8011b3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011b40:	2908      	cmp	r1, #8
 8011b42:	f63f af79 	bhi.w	8011a38 <_strtod_l+0x1b0>
 8011b46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011b4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b4c:	9206      	str	r2, [sp, #24]
 8011b4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b50:	1c51      	adds	r1, r2, #1
 8011b52:	9117      	str	r1, [sp, #92]	; 0x5c
 8011b54:	7852      	ldrb	r2, [r2, #1]
 8011b56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011b5a:	2e09      	cmp	r6, #9
 8011b5c:	d937      	bls.n	8011bce <_strtod_l+0x346>
 8011b5e:	9e06      	ldr	r6, [sp, #24]
 8011b60:	1b89      	subs	r1, r1, r6
 8011b62:	2908      	cmp	r1, #8
 8011b64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011b68:	dc02      	bgt.n	8011b70 <_strtod_l+0x2e8>
 8011b6a:	4576      	cmp	r6, lr
 8011b6c:	bfa8      	it	ge
 8011b6e:	4676      	movge	r6, lr
 8011b70:	f1bc 0f00 	cmp.w	ip, #0
 8011b74:	d000      	beq.n	8011b78 <_strtod_l+0x2f0>
 8011b76:	4276      	negs	r6, r6
 8011b78:	2d00      	cmp	r5, #0
 8011b7a:	d14d      	bne.n	8011c18 <_strtod_l+0x390>
 8011b7c:	9904      	ldr	r1, [sp, #16]
 8011b7e:	4301      	orrs	r1, r0
 8011b80:	f47f aec6 	bne.w	8011910 <_strtod_l+0x88>
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f47f aee1 	bne.w	801194c <_strtod_l+0xc4>
 8011b8a:	2a69      	cmp	r2, #105	; 0x69
 8011b8c:	d027      	beq.n	8011bde <_strtod_l+0x356>
 8011b8e:	dc24      	bgt.n	8011bda <_strtod_l+0x352>
 8011b90:	2a49      	cmp	r2, #73	; 0x49
 8011b92:	d024      	beq.n	8011bde <_strtod_l+0x356>
 8011b94:	2a4e      	cmp	r2, #78	; 0x4e
 8011b96:	f47f aed9 	bne.w	801194c <_strtod_l+0xc4>
 8011b9a:	499f      	ldr	r1, [pc, #636]	; (8011e18 <_strtod_l+0x590>)
 8011b9c:	a817      	add	r0, sp, #92	; 0x5c
 8011b9e:	f001 fe61 	bl	8013864 <__match>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	f43f aed2 	beq.w	801194c <_strtod_l+0xc4>
 8011ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	2b28      	cmp	r3, #40	; 0x28
 8011bae:	d12d      	bne.n	8011c0c <_strtod_l+0x384>
 8011bb0:	499a      	ldr	r1, [pc, #616]	; (8011e1c <_strtod_l+0x594>)
 8011bb2:	aa1a      	add	r2, sp, #104	; 0x68
 8011bb4:	a817      	add	r0, sp, #92	; 0x5c
 8011bb6:	f001 fe69 	bl	801388c <__hexnan>
 8011bba:	2805      	cmp	r0, #5
 8011bbc:	d126      	bne.n	8011c0c <_strtod_l+0x384>
 8011bbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011bc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011bc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011bc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011bcc:	e6a0      	b.n	8011910 <_strtod_l+0x88>
 8011bce:	210a      	movs	r1, #10
 8011bd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011bd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011bd8:	e7b9      	b.n	8011b4e <_strtod_l+0x2c6>
 8011bda:	2a6e      	cmp	r2, #110	; 0x6e
 8011bdc:	e7db      	b.n	8011b96 <_strtod_l+0x30e>
 8011bde:	4990      	ldr	r1, [pc, #576]	; (8011e20 <_strtod_l+0x598>)
 8011be0:	a817      	add	r0, sp, #92	; 0x5c
 8011be2:	f001 fe3f 	bl	8013864 <__match>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	f43f aeb0 	beq.w	801194c <_strtod_l+0xc4>
 8011bec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011bee:	498d      	ldr	r1, [pc, #564]	; (8011e24 <_strtod_l+0x59c>)
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	a817      	add	r0, sp, #92	; 0x5c
 8011bf4:	9317      	str	r3, [sp, #92]	; 0x5c
 8011bf6:	f001 fe35 	bl	8013864 <__match>
 8011bfa:	b910      	cbnz	r0, 8011c02 <_strtod_l+0x37a>
 8011bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011bfe:	3301      	adds	r3, #1
 8011c00:	9317      	str	r3, [sp, #92]	; 0x5c
 8011c02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011e34 <_strtod_l+0x5ac>
 8011c06:	f04f 0a00 	mov.w	sl, #0
 8011c0a:	e681      	b.n	8011910 <_strtod_l+0x88>
 8011c0c:	4886      	ldr	r0, [pc, #536]	; (8011e28 <_strtod_l+0x5a0>)
 8011c0e:	f003 f963 	bl	8014ed8 <nan>
 8011c12:	ec5b ab10 	vmov	sl, fp, d0
 8011c16:	e67b      	b.n	8011910 <_strtod_l+0x88>
 8011c18:	9b05      	ldr	r3, [sp, #20]
 8011c1a:	9807      	ldr	r0, [sp, #28]
 8011c1c:	1af3      	subs	r3, r6, r3
 8011c1e:	2f00      	cmp	r7, #0
 8011c20:	bf08      	it	eq
 8011c22:	462f      	moveq	r7, r5
 8011c24:	2d10      	cmp	r5, #16
 8011c26:	9306      	str	r3, [sp, #24]
 8011c28:	46a8      	mov	r8, r5
 8011c2a:	bfa8      	it	ge
 8011c2c:	f04f 0810 	movge.w	r8, #16
 8011c30:	f7ee fc88 	bl	8000544 <__aeabi_ui2d>
 8011c34:	2d09      	cmp	r5, #9
 8011c36:	4682      	mov	sl, r0
 8011c38:	468b      	mov	fp, r1
 8011c3a:	dd13      	ble.n	8011c64 <_strtod_l+0x3dc>
 8011c3c:	4b7b      	ldr	r3, [pc, #492]	; (8011e2c <_strtod_l+0x5a4>)
 8011c3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011c42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011c46:	f7ee fcf7 	bl	8000638 <__aeabi_dmul>
 8011c4a:	4682      	mov	sl, r0
 8011c4c:	4648      	mov	r0, r9
 8011c4e:	468b      	mov	fp, r1
 8011c50:	f7ee fc78 	bl	8000544 <__aeabi_ui2d>
 8011c54:	4602      	mov	r2, r0
 8011c56:	460b      	mov	r3, r1
 8011c58:	4650      	mov	r0, sl
 8011c5a:	4659      	mov	r1, fp
 8011c5c:	f7ee fb36 	bl	80002cc <__adddf3>
 8011c60:	4682      	mov	sl, r0
 8011c62:	468b      	mov	fp, r1
 8011c64:	2d0f      	cmp	r5, #15
 8011c66:	dc38      	bgt.n	8011cda <_strtod_l+0x452>
 8011c68:	9b06      	ldr	r3, [sp, #24]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	f43f ae50 	beq.w	8011910 <_strtod_l+0x88>
 8011c70:	dd24      	ble.n	8011cbc <_strtod_l+0x434>
 8011c72:	2b16      	cmp	r3, #22
 8011c74:	dc0b      	bgt.n	8011c8e <_strtod_l+0x406>
 8011c76:	496d      	ldr	r1, [pc, #436]	; (8011e2c <_strtod_l+0x5a4>)
 8011c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c80:	4652      	mov	r2, sl
 8011c82:	465b      	mov	r3, fp
 8011c84:	f7ee fcd8 	bl	8000638 <__aeabi_dmul>
 8011c88:	4682      	mov	sl, r0
 8011c8a:	468b      	mov	fp, r1
 8011c8c:	e640      	b.n	8011910 <_strtod_l+0x88>
 8011c8e:	9a06      	ldr	r2, [sp, #24]
 8011c90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011c94:	4293      	cmp	r3, r2
 8011c96:	db20      	blt.n	8011cda <_strtod_l+0x452>
 8011c98:	4c64      	ldr	r4, [pc, #400]	; (8011e2c <_strtod_l+0x5a4>)
 8011c9a:	f1c5 050f 	rsb	r5, r5, #15
 8011c9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011ca2:	4652      	mov	r2, sl
 8011ca4:	465b      	mov	r3, fp
 8011ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011caa:	f7ee fcc5 	bl	8000638 <__aeabi_dmul>
 8011cae:	9b06      	ldr	r3, [sp, #24]
 8011cb0:	1b5d      	subs	r5, r3, r5
 8011cb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011cb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011cba:	e7e3      	b.n	8011c84 <_strtod_l+0x3fc>
 8011cbc:	9b06      	ldr	r3, [sp, #24]
 8011cbe:	3316      	adds	r3, #22
 8011cc0:	db0b      	blt.n	8011cda <_strtod_l+0x452>
 8011cc2:	9b05      	ldr	r3, [sp, #20]
 8011cc4:	1b9e      	subs	r6, r3, r6
 8011cc6:	4b59      	ldr	r3, [pc, #356]	; (8011e2c <_strtod_l+0x5a4>)
 8011cc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011ccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011cd0:	4650      	mov	r0, sl
 8011cd2:	4659      	mov	r1, fp
 8011cd4:	f7ee fdda 	bl	800088c <__aeabi_ddiv>
 8011cd8:	e7d6      	b.n	8011c88 <_strtod_l+0x400>
 8011cda:	9b06      	ldr	r3, [sp, #24]
 8011cdc:	eba5 0808 	sub.w	r8, r5, r8
 8011ce0:	4498      	add	r8, r3
 8011ce2:	f1b8 0f00 	cmp.w	r8, #0
 8011ce6:	dd74      	ble.n	8011dd2 <_strtod_l+0x54a>
 8011ce8:	f018 030f 	ands.w	r3, r8, #15
 8011cec:	d00a      	beq.n	8011d04 <_strtod_l+0x47c>
 8011cee:	494f      	ldr	r1, [pc, #316]	; (8011e2c <_strtod_l+0x5a4>)
 8011cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011cf4:	4652      	mov	r2, sl
 8011cf6:	465b      	mov	r3, fp
 8011cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cfc:	f7ee fc9c 	bl	8000638 <__aeabi_dmul>
 8011d00:	4682      	mov	sl, r0
 8011d02:	468b      	mov	fp, r1
 8011d04:	f038 080f 	bics.w	r8, r8, #15
 8011d08:	d04f      	beq.n	8011daa <_strtod_l+0x522>
 8011d0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011d0e:	dd22      	ble.n	8011d56 <_strtod_l+0x4ce>
 8011d10:	2500      	movs	r5, #0
 8011d12:	462e      	mov	r6, r5
 8011d14:	9507      	str	r5, [sp, #28]
 8011d16:	9505      	str	r5, [sp, #20]
 8011d18:	2322      	movs	r3, #34	; 0x22
 8011d1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011e34 <_strtod_l+0x5ac>
 8011d1e:	6023      	str	r3, [r4, #0]
 8011d20:	f04f 0a00 	mov.w	sl, #0
 8011d24:	9b07      	ldr	r3, [sp, #28]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f43f adf2 	beq.w	8011910 <_strtod_l+0x88>
 8011d2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d2e:	4620      	mov	r0, r4
 8011d30:	f001 fec6 	bl	8013ac0 <_Bfree>
 8011d34:	9905      	ldr	r1, [sp, #20]
 8011d36:	4620      	mov	r0, r4
 8011d38:	f001 fec2 	bl	8013ac0 <_Bfree>
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f001 febe 	bl	8013ac0 <_Bfree>
 8011d44:	9907      	ldr	r1, [sp, #28]
 8011d46:	4620      	mov	r0, r4
 8011d48:	f001 feba 	bl	8013ac0 <_Bfree>
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f001 feb6 	bl	8013ac0 <_Bfree>
 8011d54:	e5dc      	b.n	8011910 <_strtod_l+0x88>
 8011d56:	4b36      	ldr	r3, [pc, #216]	; (8011e30 <_strtod_l+0x5a8>)
 8011d58:	9304      	str	r3, [sp, #16]
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011d60:	4650      	mov	r0, sl
 8011d62:	4659      	mov	r1, fp
 8011d64:	4699      	mov	r9, r3
 8011d66:	f1b8 0f01 	cmp.w	r8, #1
 8011d6a:	dc21      	bgt.n	8011db0 <_strtod_l+0x528>
 8011d6c:	b10b      	cbz	r3, 8011d72 <_strtod_l+0x4ea>
 8011d6e:	4682      	mov	sl, r0
 8011d70:	468b      	mov	fp, r1
 8011d72:	4b2f      	ldr	r3, [pc, #188]	; (8011e30 <_strtod_l+0x5a8>)
 8011d74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011d78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011d7c:	4652      	mov	r2, sl
 8011d7e:	465b      	mov	r3, fp
 8011d80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011d84:	f7ee fc58 	bl	8000638 <__aeabi_dmul>
 8011d88:	4b2a      	ldr	r3, [pc, #168]	; (8011e34 <_strtod_l+0x5ac>)
 8011d8a:	460a      	mov	r2, r1
 8011d8c:	400b      	ands	r3, r1
 8011d8e:	492a      	ldr	r1, [pc, #168]	; (8011e38 <_strtod_l+0x5b0>)
 8011d90:	428b      	cmp	r3, r1
 8011d92:	4682      	mov	sl, r0
 8011d94:	d8bc      	bhi.n	8011d10 <_strtod_l+0x488>
 8011d96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011d9a:	428b      	cmp	r3, r1
 8011d9c:	bf86      	itte	hi
 8011d9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011e3c <_strtod_l+0x5b4>
 8011da2:	f04f 3aff 	movhi.w	sl, #4294967295
 8011da6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011daa:	2300      	movs	r3, #0
 8011dac:	9304      	str	r3, [sp, #16]
 8011dae:	e084      	b.n	8011eba <_strtod_l+0x632>
 8011db0:	f018 0f01 	tst.w	r8, #1
 8011db4:	d005      	beq.n	8011dc2 <_strtod_l+0x53a>
 8011db6:	9b04      	ldr	r3, [sp, #16]
 8011db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbc:	f7ee fc3c 	bl	8000638 <__aeabi_dmul>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	9a04      	ldr	r2, [sp, #16]
 8011dc4:	3208      	adds	r2, #8
 8011dc6:	f109 0901 	add.w	r9, r9, #1
 8011dca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011dce:	9204      	str	r2, [sp, #16]
 8011dd0:	e7c9      	b.n	8011d66 <_strtod_l+0x4de>
 8011dd2:	d0ea      	beq.n	8011daa <_strtod_l+0x522>
 8011dd4:	f1c8 0800 	rsb	r8, r8, #0
 8011dd8:	f018 020f 	ands.w	r2, r8, #15
 8011ddc:	d00a      	beq.n	8011df4 <_strtod_l+0x56c>
 8011dde:	4b13      	ldr	r3, [pc, #76]	; (8011e2c <_strtod_l+0x5a4>)
 8011de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011de4:	4650      	mov	r0, sl
 8011de6:	4659      	mov	r1, fp
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	f7ee fd4e 	bl	800088c <__aeabi_ddiv>
 8011df0:	4682      	mov	sl, r0
 8011df2:	468b      	mov	fp, r1
 8011df4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011df8:	d0d7      	beq.n	8011daa <_strtod_l+0x522>
 8011dfa:	f1b8 0f1f 	cmp.w	r8, #31
 8011dfe:	dd1f      	ble.n	8011e40 <_strtod_l+0x5b8>
 8011e00:	2500      	movs	r5, #0
 8011e02:	462e      	mov	r6, r5
 8011e04:	9507      	str	r5, [sp, #28]
 8011e06:	9505      	str	r5, [sp, #20]
 8011e08:	2322      	movs	r3, #34	; 0x22
 8011e0a:	f04f 0a00 	mov.w	sl, #0
 8011e0e:	f04f 0b00 	mov.w	fp, #0
 8011e12:	6023      	str	r3, [r4, #0]
 8011e14:	e786      	b.n	8011d24 <_strtod_l+0x49c>
 8011e16:	bf00      	nop
 8011e18:	08018079 	.word	0x08018079
 8011e1c:	080180b8 	.word	0x080180b8
 8011e20:	08018071 	.word	0x08018071
 8011e24:	080181fc 	.word	0x080181fc
 8011e28:	080184c3 	.word	0x080184c3
 8011e2c:	08018388 	.word	0x08018388
 8011e30:	08018360 	.word	0x08018360
 8011e34:	7ff00000 	.word	0x7ff00000
 8011e38:	7ca00000 	.word	0x7ca00000
 8011e3c:	7fefffff 	.word	0x7fefffff
 8011e40:	f018 0310 	ands.w	r3, r8, #16
 8011e44:	bf18      	it	ne
 8011e46:	236a      	movne	r3, #106	; 0x6a
 8011e48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80121f8 <_strtod_l+0x970>
 8011e4c:	9304      	str	r3, [sp, #16]
 8011e4e:	4650      	mov	r0, sl
 8011e50:	4659      	mov	r1, fp
 8011e52:	2300      	movs	r3, #0
 8011e54:	f018 0f01 	tst.w	r8, #1
 8011e58:	d004      	beq.n	8011e64 <_strtod_l+0x5dc>
 8011e5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011e5e:	f7ee fbeb 	bl	8000638 <__aeabi_dmul>
 8011e62:	2301      	movs	r3, #1
 8011e64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011e68:	f109 0908 	add.w	r9, r9, #8
 8011e6c:	d1f2      	bne.n	8011e54 <_strtod_l+0x5cc>
 8011e6e:	b10b      	cbz	r3, 8011e74 <_strtod_l+0x5ec>
 8011e70:	4682      	mov	sl, r0
 8011e72:	468b      	mov	fp, r1
 8011e74:	9b04      	ldr	r3, [sp, #16]
 8011e76:	b1c3      	cbz	r3, 8011eaa <_strtod_l+0x622>
 8011e78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011e7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	4659      	mov	r1, fp
 8011e84:	dd11      	ble.n	8011eaa <_strtod_l+0x622>
 8011e86:	2b1f      	cmp	r3, #31
 8011e88:	f340 8124 	ble.w	80120d4 <_strtod_l+0x84c>
 8011e8c:	2b34      	cmp	r3, #52	; 0x34
 8011e8e:	bfde      	ittt	le
 8011e90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011e94:	f04f 33ff 	movle.w	r3, #4294967295
 8011e98:	fa03 f202 	lslle.w	r2, r3, r2
 8011e9c:	f04f 0a00 	mov.w	sl, #0
 8011ea0:	bfcc      	ite	gt
 8011ea2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011ea6:	ea02 0b01 	andle.w	fp, r2, r1
 8011eaa:	2200      	movs	r2, #0
 8011eac:	2300      	movs	r3, #0
 8011eae:	4650      	mov	r0, sl
 8011eb0:	4659      	mov	r1, fp
 8011eb2:	f7ee fe29 	bl	8000b08 <__aeabi_dcmpeq>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d1a2      	bne.n	8011e00 <_strtod_l+0x578>
 8011eba:	9b07      	ldr	r3, [sp, #28]
 8011ebc:	9300      	str	r3, [sp, #0]
 8011ebe:	9908      	ldr	r1, [sp, #32]
 8011ec0:	462b      	mov	r3, r5
 8011ec2:	463a      	mov	r2, r7
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	f001 fe63 	bl	8013b90 <__s2b>
 8011eca:	9007      	str	r0, [sp, #28]
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	f43f af1f 	beq.w	8011d10 <_strtod_l+0x488>
 8011ed2:	9b05      	ldr	r3, [sp, #20]
 8011ed4:	1b9e      	subs	r6, r3, r6
 8011ed6:	9b06      	ldr	r3, [sp, #24]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	bfb4      	ite	lt
 8011edc:	4633      	movlt	r3, r6
 8011ede:	2300      	movge	r3, #0
 8011ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8011ee2:	9b06      	ldr	r3, [sp, #24]
 8011ee4:	2500      	movs	r5, #0
 8011ee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011eea:	9312      	str	r3, [sp, #72]	; 0x48
 8011eec:	462e      	mov	r6, r5
 8011eee:	9b07      	ldr	r3, [sp, #28]
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	6859      	ldr	r1, [r3, #4]
 8011ef4:	f001 fda4 	bl	8013a40 <_Balloc>
 8011ef8:	9005      	str	r0, [sp, #20]
 8011efa:	2800      	cmp	r0, #0
 8011efc:	f43f af0c 	beq.w	8011d18 <_strtod_l+0x490>
 8011f00:	9b07      	ldr	r3, [sp, #28]
 8011f02:	691a      	ldr	r2, [r3, #16]
 8011f04:	3202      	adds	r2, #2
 8011f06:	f103 010c 	add.w	r1, r3, #12
 8011f0a:	0092      	lsls	r2, r2, #2
 8011f0c:	300c      	adds	r0, #12
 8011f0e:	f001 fd89 	bl	8013a24 <memcpy>
 8011f12:	ec4b ab10 	vmov	d0, sl, fp
 8011f16:	aa1a      	add	r2, sp, #104	; 0x68
 8011f18:	a919      	add	r1, sp, #100	; 0x64
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f002 f97e 	bl	801421c <__d2b>
 8011f20:	ec4b ab18 	vmov	d8, sl, fp
 8011f24:	9018      	str	r0, [sp, #96]	; 0x60
 8011f26:	2800      	cmp	r0, #0
 8011f28:	f43f aef6 	beq.w	8011d18 <_strtod_l+0x490>
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f001 fec8 	bl	8013cc4 <__i2b>
 8011f34:	4606      	mov	r6, r0
 8011f36:	2800      	cmp	r0, #0
 8011f38:	f43f aeee 	beq.w	8011d18 <_strtod_l+0x490>
 8011f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011f3e:	9904      	ldr	r1, [sp, #16]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	bfab      	itete	ge
 8011f44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011f46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011f48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011f4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011f4e:	bfac      	ite	ge
 8011f50:	eb03 0902 	addge.w	r9, r3, r2
 8011f54:	1ad7      	sublt	r7, r2, r3
 8011f56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011f58:	eba3 0801 	sub.w	r8, r3, r1
 8011f5c:	4490      	add	r8, r2
 8011f5e:	4ba1      	ldr	r3, [pc, #644]	; (80121e4 <_strtod_l+0x95c>)
 8011f60:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f64:	4598      	cmp	r8, r3
 8011f66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011f6a:	f280 80c7 	bge.w	80120fc <_strtod_l+0x874>
 8011f6e:	eba3 0308 	sub.w	r3, r3, r8
 8011f72:	2b1f      	cmp	r3, #31
 8011f74:	eba2 0203 	sub.w	r2, r2, r3
 8011f78:	f04f 0101 	mov.w	r1, #1
 8011f7c:	f300 80b1 	bgt.w	80120e2 <_strtod_l+0x85a>
 8011f80:	fa01 f303 	lsl.w	r3, r1, r3
 8011f84:	930d      	str	r3, [sp, #52]	; 0x34
 8011f86:	2300      	movs	r3, #0
 8011f88:	9308      	str	r3, [sp, #32]
 8011f8a:	eb09 0802 	add.w	r8, r9, r2
 8011f8e:	9b04      	ldr	r3, [sp, #16]
 8011f90:	45c1      	cmp	r9, r8
 8011f92:	4417      	add	r7, r2
 8011f94:	441f      	add	r7, r3
 8011f96:	464b      	mov	r3, r9
 8011f98:	bfa8      	it	ge
 8011f9a:	4643      	movge	r3, r8
 8011f9c:	42bb      	cmp	r3, r7
 8011f9e:	bfa8      	it	ge
 8011fa0:	463b      	movge	r3, r7
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	bfc2      	ittt	gt
 8011fa6:	eba8 0803 	subgt.w	r8, r8, r3
 8011faa:	1aff      	subgt	r7, r7, r3
 8011fac:	eba9 0903 	subgt.w	r9, r9, r3
 8011fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	dd17      	ble.n	8011fe6 <_strtod_l+0x75e>
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	461a      	mov	r2, r3
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f001 ff42 	bl	8013e44 <__pow5mult>
 8011fc0:	4606      	mov	r6, r0
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	f43f aea8 	beq.w	8011d18 <_strtod_l+0x490>
 8011fc8:	4601      	mov	r1, r0
 8011fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f001 fe8f 	bl	8013cf0 <__multiply>
 8011fd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	f43f ae9f 	beq.w	8011d18 <_strtod_l+0x490>
 8011fda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f001 fd6f 	bl	8013ac0 <_Bfree>
 8011fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fe4:	9318      	str	r3, [sp, #96]	; 0x60
 8011fe6:	f1b8 0f00 	cmp.w	r8, #0
 8011fea:	f300 808c 	bgt.w	8012106 <_strtod_l+0x87e>
 8011fee:	9b06      	ldr	r3, [sp, #24]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	dd08      	ble.n	8012006 <_strtod_l+0x77e>
 8011ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011ff6:	9905      	ldr	r1, [sp, #20]
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f001 ff23 	bl	8013e44 <__pow5mult>
 8011ffe:	9005      	str	r0, [sp, #20]
 8012000:	2800      	cmp	r0, #0
 8012002:	f43f ae89 	beq.w	8011d18 <_strtod_l+0x490>
 8012006:	2f00      	cmp	r7, #0
 8012008:	dd08      	ble.n	801201c <_strtod_l+0x794>
 801200a:	9905      	ldr	r1, [sp, #20]
 801200c:	463a      	mov	r2, r7
 801200e:	4620      	mov	r0, r4
 8012010:	f001 ff72 	bl	8013ef8 <__lshift>
 8012014:	9005      	str	r0, [sp, #20]
 8012016:	2800      	cmp	r0, #0
 8012018:	f43f ae7e 	beq.w	8011d18 <_strtod_l+0x490>
 801201c:	f1b9 0f00 	cmp.w	r9, #0
 8012020:	dd08      	ble.n	8012034 <_strtod_l+0x7ac>
 8012022:	4631      	mov	r1, r6
 8012024:	464a      	mov	r2, r9
 8012026:	4620      	mov	r0, r4
 8012028:	f001 ff66 	bl	8013ef8 <__lshift>
 801202c:	4606      	mov	r6, r0
 801202e:	2800      	cmp	r0, #0
 8012030:	f43f ae72 	beq.w	8011d18 <_strtod_l+0x490>
 8012034:	9a05      	ldr	r2, [sp, #20]
 8012036:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012038:	4620      	mov	r0, r4
 801203a:	f001 ffe9 	bl	8014010 <__mdiff>
 801203e:	4605      	mov	r5, r0
 8012040:	2800      	cmp	r0, #0
 8012042:	f43f ae69 	beq.w	8011d18 <_strtod_l+0x490>
 8012046:	68c3      	ldr	r3, [r0, #12]
 8012048:	930b      	str	r3, [sp, #44]	; 0x2c
 801204a:	2300      	movs	r3, #0
 801204c:	60c3      	str	r3, [r0, #12]
 801204e:	4631      	mov	r1, r6
 8012050:	f001 ffc2 	bl	8013fd8 <__mcmp>
 8012054:	2800      	cmp	r0, #0
 8012056:	da60      	bge.n	801211a <_strtod_l+0x892>
 8012058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801205a:	ea53 030a 	orrs.w	r3, r3, sl
 801205e:	f040 8082 	bne.w	8012166 <_strtod_l+0x8de>
 8012062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012066:	2b00      	cmp	r3, #0
 8012068:	d17d      	bne.n	8012166 <_strtod_l+0x8de>
 801206a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801206e:	0d1b      	lsrs	r3, r3, #20
 8012070:	051b      	lsls	r3, r3, #20
 8012072:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012076:	d976      	bls.n	8012166 <_strtod_l+0x8de>
 8012078:	696b      	ldr	r3, [r5, #20]
 801207a:	b913      	cbnz	r3, 8012082 <_strtod_l+0x7fa>
 801207c:	692b      	ldr	r3, [r5, #16]
 801207e:	2b01      	cmp	r3, #1
 8012080:	dd71      	ble.n	8012166 <_strtod_l+0x8de>
 8012082:	4629      	mov	r1, r5
 8012084:	2201      	movs	r2, #1
 8012086:	4620      	mov	r0, r4
 8012088:	f001 ff36 	bl	8013ef8 <__lshift>
 801208c:	4631      	mov	r1, r6
 801208e:	4605      	mov	r5, r0
 8012090:	f001 ffa2 	bl	8013fd8 <__mcmp>
 8012094:	2800      	cmp	r0, #0
 8012096:	dd66      	ble.n	8012166 <_strtod_l+0x8de>
 8012098:	9904      	ldr	r1, [sp, #16]
 801209a:	4a53      	ldr	r2, [pc, #332]	; (80121e8 <_strtod_l+0x960>)
 801209c:	465b      	mov	r3, fp
 801209e:	2900      	cmp	r1, #0
 80120a0:	f000 8081 	beq.w	80121a6 <_strtod_l+0x91e>
 80120a4:	ea02 010b 	and.w	r1, r2, fp
 80120a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80120ac:	dc7b      	bgt.n	80121a6 <_strtod_l+0x91e>
 80120ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80120b2:	f77f aea9 	ble.w	8011e08 <_strtod_l+0x580>
 80120b6:	4b4d      	ldr	r3, [pc, #308]	; (80121ec <_strtod_l+0x964>)
 80120b8:	4650      	mov	r0, sl
 80120ba:	4659      	mov	r1, fp
 80120bc:	2200      	movs	r2, #0
 80120be:	f7ee fabb 	bl	8000638 <__aeabi_dmul>
 80120c2:	460b      	mov	r3, r1
 80120c4:	4303      	orrs	r3, r0
 80120c6:	bf08      	it	eq
 80120c8:	2322      	moveq	r3, #34	; 0x22
 80120ca:	4682      	mov	sl, r0
 80120cc:	468b      	mov	fp, r1
 80120ce:	bf08      	it	eq
 80120d0:	6023      	streq	r3, [r4, #0]
 80120d2:	e62b      	b.n	8011d2c <_strtod_l+0x4a4>
 80120d4:	f04f 32ff 	mov.w	r2, #4294967295
 80120d8:	fa02 f303 	lsl.w	r3, r2, r3
 80120dc:	ea03 0a0a 	and.w	sl, r3, sl
 80120e0:	e6e3      	b.n	8011eaa <_strtod_l+0x622>
 80120e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80120e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80120ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80120ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80120f2:	fa01 f308 	lsl.w	r3, r1, r8
 80120f6:	9308      	str	r3, [sp, #32]
 80120f8:	910d      	str	r1, [sp, #52]	; 0x34
 80120fa:	e746      	b.n	8011f8a <_strtod_l+0x702>
 80120fc:	2300      	movs	r3, #0
 80120fe:	9308      	str	r3, [sp, #32]
 8012100:	2301      	movs	r3, #1
 8012102:	930d      	str	r3, [sp, #52]	; 0x34
 8012104:	e741      	b.n	8011f8a <_strtod_l+0x702>
 8012106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012108:	4642      	mov	r2, r8
 801210a:	4620      	mov	r0, r4
 801210c:	f001 fef4 	bl	8013ef8 <__lshift>
 8012110:	9018      	str	r0, [sp, #96]	; 0x60
 8012112:	2800      	cmp	r0, #0
 8012114:	f47f af6b 	bne.w	8011fee <_strtod_l+0x766>
 8012118:	e5fe      	b.n	8011d18 <_strtod_l+0x490>
 801211a:	465f      	mov	r7, fp
 801211c:	d16e      	bne.n	80121fc <_strtod_l+0x974>
 801211e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012120:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012124:	b342      	cbz	r2, 8012178 <_strtod_l+0x8f0>
 8012126:	4a32      	ldr	r2, [pc, #200]	; (80121f0 <_strtod_l+0x968>)
 8012128:	4293      	cmp	r3, r2
 801212a:	d128      	bne.n	801217e <_strtod_l+0x8f6>
 801212c:	9b04      	ldr	r3, [sp, #16]
 801212e:	4651      	mov	r1, sl
 8012130:	b1eb      	cbz	r3, 801216e <_strtod_l+0x8e6>
 8012132:	4b2d      	ldr	r3, [pc, #180]	; (80121e8 <_strtod_l+0x960>)
 8012134:	403b      	ands	r3, r7
 8012136:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801213a:	f04f 32ff 	mov.w	r2, #4294967295
 801213e:	d819      	bhi.n	8012174 <_strtod_l+0x8ec>
 8012140:	0d1b      	lsrs	r3, r3, #20
 8012142:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012146:	fa02 f303 	lsl.w	r3, r2, r3
 801214a:	4299      	cmp	r1, r3
 801214c:	d117      	bne.n	801217e <_strtod_l+0x8f6>
 801214e:	4b29      	ldr	r3, [pc, #164]	; (80121f4 <_strtod_l+0x96c>)
 8012150:	429f      	cmp	r7, r3
 8012152:	d102      	bne.n	801215a <_strtod_l+0x8d2>
 8012154:	3101      	adds	r1, #1
 8012156:	f43f addf 	beq.w	8011d18 <_strtod_l+0x490>
 801215a:	4b23      	ldr	r3, [pc, #140]	; (80121e8 <_strtod_l+0x960>)
 801215c:	403b      	ands	r3, r7
 801215e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012162:	f04f 0a00 	mov.w	sl, #0
 8012166:	9b04      	ldr	r3, [sp, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1a4      	bne.n	80120b6 <_strtod_l+0x82e>
 801216c:	e5de      	b.n	8011d2c <_strtod_l+0x4a4>
 801216e:	f04f 33ff 	mov.w	r3, #4294967295
 8012172:	e7ea      	b.n	801214a <_strtod_l+0x8c2>
 8012174:	4613      	mov	r3, r2
 8012176:	e7e8      	b.n	801214a <_strtod_l+0x8c2>
 8012178:	ea53 030a 	orrs.w	r3, r3, sl
 801217c:	d08c      	beq.n	8012098 <_strtod_l+0x810>
 801217e:	9b08      	ldr	r3, [sp, #32]
 8012180:	b1db      	cbz	r3, 80121ba <_strtod_l+0x932>
 8012182:	423b      	tst	r3, r7
 8012184:	d0ef      	beq.n	8012166 <_strtod_l+0x8de>
 8012186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012188:	9a04      	ldr	r2, [sp, #16]
 801218a:	4650      	mov	r0, sl
 801218c:	4659      	mov	r1, fp
 801218e:	b1c3      	cbz	r3, 80121c2 <_strtod_l+0x93a>
 8012190:	f7ff fb5d 	bl	801184e <sulp>
 8012194:	4602      	mov	r2, r0
 8012196:	460b      	mov	r3, r1
 8012198:	ec51 0b18 	vmov	r0, r1, d8
 801219c:	f7ee f896 	bl	80002cc <__adddf3>
 80121a0:	4682      	mov	sl, r0
 80121a2:	468b      	mov	fp, r1
 80121a4:	e7df      	b.n	8012166 <_strtod_l+0x8de>
 80121a6:	4013      	ands	r3, r2
 80121a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80121ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80121b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80121b4:	f04f 3aff 	mov.w	sl, #4294967295
 80121b8:	e7d5      	b.n	8012166 <_strtod_l+0x8de>
 80121ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121bc:	ea13 0f0a 	tst.w	r3, sl
 80121c0:	e7e0      	b.n	8012184 <_strtod_l+0x8fc>
 80121c2:	f7ff fb44 	bl	801184e <sulp>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	ec51 0b18 	vmov	r0, r1, d8
 80121ce:	f7ee f87b 	bl	80002c8 <__aeabi_dsub>
 80121d2:	2200      	movs	r2, #0
 80121d4:	2300      	movs	r3, #0
 80121d6:	4682      	mov	sl, r0
 80121d8:	468b      	mov	fp, r1
 80121da:	f7ee fc95 	bl	8000b08 <__aeabi_dcmpeq>
 80121de:	2800      	cmp	r0, #0
 80121e0:	d0c1      	beq.n	8012166 <_strtod_l+0x8de>
 80121e2:	e611      	b.n	8011e08 <_strtod_l+0x580>
 80121e4:	fffffc02 	.word	0xfffffc02
 80121e8:	7ff00000 	.word	0x7ff00000
 80121ec:	39500000 	.word	0x39500000
 80121f0:	000fffff 	.word	0x000fffff
 80121f4:	7fefffff 	.word	0x7fefffff
 80121f8:	080180d0 	.word	0x080180d0
 80121fc:	4631      	mov	r1, r6
 80121fe:	4628      	mov	r0, r5
 8012200:	f002 f868 	bl	80142d4 <__ratio>
 8012204:	ec59 8b10 	vmov	r8, r9, d0
 8012208:	ee10 0a10 	vmov	r0, s0
 801220c:	2200      	movs	r2, #0
 801220e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012212:	4649      	mov	r1, r9
 8012214:	f7ee fc8c 	bl	8000b30 <__aeabi_dcmple>
 8012218:	2800      	cmp	r0, #0
 801221a:	d07a      	beq.n	8012312 <_strtod_l+0xa8a>
 801221c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801221e:	2b00      	cmp	r3, #0
 8012220:	d04a      	beq.n	80122b8 <_strtod_l+0xa30>
 8012222:	4b95      	ldr	r3, [pc, #596]	; (8012478 <_strtod_l+0xbf0>)
 8012224:	2200      	movs	r2, #0
 8012226:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801222a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012478 <_strtod_l+0xbf0>
 801222e:	f04f 0800 	mov.w	r8, #0
 8012232:	4b92      	ldr	r3, [pc, #584]	; (801247c <_strtod_l+0xbf4>)
 8012234:	403b      	ands	r3, r7
 8012236:	930d      	str	r3, [sp, #52]	; 0x34
 8012238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801223a:	4b91      	ldr	r3, [pc, #580]	; (8012480 <_strtod_l+0xbf8>)
 801223c:	429a      	cmp	r2, r3
 801223e:	f040 80b0 	bne.w	80123a2 <_strtod_l+0xb1a>
 8012242:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012246:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801224a:	ec4b ab10 	vmov	d0, sl, fp
 801224e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012252:	f001 ff67 	bl	8014124 <__ulp>
 8012256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801225a:	ec53 2b10 	vmov	r2, r3, d0
 801225e:	f7ee f9eb 	bl	8000638 <__aeabi_dmul>
 8012262:	4652      	mov	r2, sl
 8012264:	465b      	mov	r3, fp
 8012266:	f7ee f831 	bl	80002cc <__adddf3>
 801226a:	460b      	mov	r3, r1
 801226c:	4983      	ldr	r1, [pc, #524]	; (801247c <_strtod_l+0xbf4>)
 801226e:	4a85      	ldr	r2, [pc, #532]	; (8012484 <_strtod_l+0xbfc>)
 8012270:	4019      	ands	r1, r3
 8012272:	4291      	cmp	r1, r2
 8012274:	4682      	mov	sl, r0
 8012276:	d960      	bls.n	801233a <_strtod_l+0xab2>
 8012278:	ee18 3a90 	vmov	r3, s17
 801227c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012280:	4293      	cmp	r3, r2
 8012282:	d104      	bne.n	801228e <_strtod_l+0xa06>
 8012284:	ee18 3a10 	vmov	r3, s16
 8012288:	3301      	adds	r3, #1
 801228a:	f43f ad45 	beq.w	8011d18 <_strtod_l+0x490>
 801228e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8012490 <_strtod_l+0xc08>
 8012292:	f04f 3aff 	mov.w	sl, #4294967295
 8012296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012298:	4620      	mov	r0, r4
 801229a:	f001 fc11 	bl	8013ac0 <_Bfree>
 801229e:	9905      	ldr	r1, [sp, #20]
 80122a0:	4620      	mov	r0, r4
 80122a2:	f001 fc0d 	bl	8013ac0 <_Bfree>
 80122a6:	4631      	mov	r1, r6
 80122a8:	4620      	mov	r0, r4
 80122aa:	f001 fc09 	bl	8013ac0 <_Bfree>
 80122ae:	4629      	mov	r1, r5
 80122b0:	4620      	mov	r0, r4
 80122b2:	f001 fc05 	bl	8013ac0 <_Bfree>
 80122b6:	e61a      	b.n	8011eee <_strtod_l+0x666>
 80122b8:	f1ba 0f00 	cmp.w	sl, #0
 80122bc:	d11b      	bne.n	80122f6 <_strtod_l+0xa6e>
 80122be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122c2:	b9f3      	cbnz	r3, 8012302 <_strtod_l+0xa7a>
 80122c4:	4b6c      	ldr	r3, [pc, #432]	; (8012478 <_strtod_l+0xbf0>)
 80122c6:	2200      	movs	r2, #0
 80122c8:	4640      	mov	r0, r8
 80122ca:	4649      	mov	r1, r9
 80122cc:	f7ee fc26 	bl	8000b1c <__aeabi_dcmplt>
 80122d0:	b9d0      	cbnz	r0, 8012308 <_strtod_l+0xa80>
 80122d2:	4640      	mov	r0, r8
 80122d4:	4649      	mov	r1, r9
 80122d6:	4b6c      	ldr	r3, [pc, #432]	; (8012488 <_strtod_l+0xc00>)
 80122d8:	2200      	movs	r2, #0
 80122da:	f7ee f9ad 	bl	8000638 <__aeabi_dmul>
 80122de:	4680      	mov	r8, r0
 80122e0:	4689      	mov	r9, r1
 80122e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80122e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80122ea:	9315      	str	r3, [sp, #84]	; 0x54
 80122ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80122f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80122f4:	e79d      	b.n	8012232 <_strtod_l+0x9aa>
 80122f6:	f1ba 0f01 	cmp.w	sl, #1
 80122fa:	d102      	bne.n	8012302 <_strtod_l+0xa7a>
 80122fc:	2f00      	cmp	r7, #0
 80122fe:	f43f ad83 	beq.w	8011e08 <_strtod_l+0x580>
 8012302:	4b62      	ldr	r3, [pc, #392]	; (801248c <_strtod_l+0xc04>)
 8012304:	2200      	movs	r2, #0
 8012306:	e78e      	b.n	8012226 <_strtod_l+0x99e>
 8012308:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8012488 <_strtod_l+0xc00>
 801230c:	f04f 0800 	mov.w	r8, #0
 8012310:	e7e7      	b.n	80122e2 <_strtod_l+0xa5a>
 8012312:	4b5d      	ldr	r3, [pc, #372]	; (8012488 <_strtod_l+0xc00>)
 8012314:	4640      	mov	r0, r8
 8012316:	4649      	mov	r1, r9
 8012318:	2200      	movs	r2, #0
 801231a:	f7ee f98d 	bl	8000638 <__aeabi_dmul>
 801231e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012320:	4680      	mov	r8, r0
 8012322:	4689      	mov	r9, r1
 8012324:	b933      	cbnz	r3, 8012334 <_strtod_l+0xaac>
 8012326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801232a:	900e      	str	r0, [sp, #56]	; 0x38
 801232c:	930f      	str	r3, [sp, #60]	; 0x3c
 801232e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012332:	e7dd      	b.n	80122f0 <_strtod_l+0xa68>
 8012334:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012338:	e7f9      	b.n	801232e <_strtod_l+0xaa6>
 801233a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801233e:	9b04      	ldr	r3, [sp, #16]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d1a8      	bne.n	8012296 <_strtod_l+0xa0e>
 8012344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801234a:	0d1b      	lsrs	r3, r3, #20
 801234c:	051b      	lsls	r3, r3, #20
 801234e:	429a      	cmp	r2, r3
 8012350:	d1a1      	bne.n	8012296 <_strtod_l+0xa0e>
 8012352:	4640      	mov	r0, r8
 8012354:	4649      	mov	r1, r9
 8012356:	f7ee fe2d 	bl	8000fb4 <__aeabi_d2lz>
 801235a:	f7ee f93f 	bl	80005dc <__aeabi_l2d>
 801235e:	4602      	mov	r2, r0
 8012360:	460b      	mov	r3, r1
 8012362:	4640      	mov	r0, r8
 8012364:	4649      	mov	r1, r9
 8012366:	f7ed ffaf 	bl	80002c8 <__aeabi_dsub>
 801236a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801236c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012370:	ea43 030a 	orr.w	r3, r3, sl
 8012374:	4313      	orrs	r3, r2
 8012376:	4680      	mov	r8, r0
 8012378:	4689      	mov	r9, r1
 801237a:	d055      	beq.n	8012428 <_strtod_l+0xba0>
 801237c:	a336      	add	r3, pc, #216	; (adr r3, 8012458 <_strtod_l+0xbd0>)
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	f7ee fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8012386:	2800      	cmp	r0, #0
 8012388:	f47f acd0 	bne.w	8011d2c <_strtod_l+0x4a4>
 801238c:	a334      	add	r3, pc, #208	; (adr r3, 8012460 <_strtod_l+0xbd8>)
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	4640      	mov	r0, r8
 8012394:	4649      	mov	r1, r9
 8012396:	f7ee fbdf 	bl	8000b58 <__aeabi_dcmpgt>
 801239a:	2800      	cmp	r0, #0
 801239c:	f43f af7b 	beq.w	8012296 <_strtod_l+0xa0e>
 80123a0:	e4c4      	b.n	8011d2c <_strtod_l+0x4a4>
 80123a2:	9b04      	ldr	r3, [sp, #16]
 80123a4:	b333      	cbz	r3, 80123f4 <_strtod_l+0xb6c>
 80123a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80123ac:	d822      	bhi.n	80123f4 <_strtod_l+0xb6c>
 80123ae:	a32e      	add	r3, pc, #184	; (adr r3, 8012468 <_strtod_l+0xbe0>)
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	4640      	mov	r0, r8
 80123b6:	4649      	mov	r1, r9
 80123b8:	f7ee fbba 	bl	8000b30 <__aeabi_dcmple>
 80123bc:	b1a0      	cbz	r0, 80123e8 <_strtod_l+0xb60>
 80123be:	4649      	mov	r1, r9
 80123c0:	4640      	mov	r0, r8
 80123c2:	f7ee fc11 	bl	8000be8 <__aeabi_d2uiz>
 80123c6:	2801      	cmp	r0, #1
 80123c8:	bf38      	it	cc
 80123ca:	2001      	movcc	r0, #1
 80123cc:	f7ee f8ba 	bl	8000544 <__aeabi_ui2d>
 80123d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123d2:	4680      	mov	r8, r0
 80123d4:	4689      	mov	r9, r1
 80123d6:	bb23      	cbnz	r3, 8012422 <_strtod_l+0xb9a>
 80123d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123dc:	9010      	str	r0, [sp, #64]	; 0x40
 80123de:	9311      	str	r3, [sp, #68]	; 0x44
 80123e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80123e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80123e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80123f0:	1a9b      	subs	r3, r3, r2
 80123f2:	9309      	str	r3, [sp, #36]	; 0x24
 80123f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80123f8:	eeb0 0a48 	vmov.f32	s0, s16
 80123fc:	eef0 0a68 	vmov.f32	s1, s17
 8012400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012404:	f001 fe8e 	bl	8014124 <__ulp>
 8012408:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801240c:	ec53 2b10 	vmov	r2, r3, d0
 8012410:	f7ee f912 	bl	8000638 <__aeabi_dmul>
 8012414:	ec53 2b18 	vmov	r2, r3, d8
 8012418:	f7ed ff58 	bl	80002cc <__adddf3>
 801241c:	4682      	mov	sl, r0
 801241e:	468b      	mov	fp, r1
 8012420:	e78d      	b.n	801233e <_strtod_l+0xab6>
 8012422:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8012426:	e7db      	b.n	80123e0 <_strtod_l+0xb58>
 8012428:	a311      	add	r3, pc, #68	; (adr r3, 8012470 <_strtod_l+0xbe8>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ee fb75 	bl	8000b1c <__aeabi_dcmplt>
 8012432:	e7b2      	b.n	801239a <_strtod_l+0xb12>
 8012434:	2300      	movs	r3, #0
 8012436:	930a      	str	r3, [sp, #40]	; 0x28
 8012438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801243a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801243c:	6013      	str	r3, [r2, #0]
 801243e:	f7ff ba6b 	b.w	8011918 <_strtod_l+0x90>
 8012442:	2a65      	cmp	r2, #101	; 0x65
 8012444:	f43f ab5f 	beq.w	8011b06 <_strtod_l+0x27e>
 8012448:	2a45      	cmp	r2, #69	; 0x45
 801244a:	f43f ab5c 	beq.w	8011b06 <_strtod_l+0x27e>
 801244e:	2301      	movs	r3, #1
 8012450:	f7ff bb94 	b.w	8011b7c <_strtod_l+0x2f4>
 8012454:	f3af 8000 	nop.w
 8012458:	94a03595 	.word	0x94a03595
 801245c:	3fdfffff 	.word	0x3fdfffff
 8012460:	35afe535 	.word	0x35afe535
 8012464:	3fe00000 	.word	0x3fe00000
 8012468:	ffc00000 	.word	0xffc00000
 801246c:	41dfffff 	.word	0x41dfffff
 8012470:	94a03595 	.word	0x94a03595
 8012474:	3fcfffff 	.word	0x3fcfffff
 8012478:	3ff00000 	.word	0x3ff00000
 801247c:	7ff00000 	.word	0x7ff00000
 8012480:	7fe00000 	.word	0x7fe00000
 8012484:	7c9fffff 	.word	0x7c9fffff
 8012488:	3fe00000 	.word	0x3fe00000
 801248c:	bff00000 	.word	0xbff00000
 8012490:	7fefffff 	.word	0x7fefffff

08012494 <_strtod_r>:
 8012494:	4b01      	ldr	r3, [pc, #4]	; (801249c <_strtod_r+0x8>)
 8012496:	f7ff b9f7 	b.w	8011888 <_strtod_l>
 801249a:	bf00      	nop
 801249c:	20000094 	.word	0x20000094

080124a0 <_strtol_l.constprop.0>:
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124a6:	d001      	beq.n	80124ac <_strtol_l.constprop.0+0xc>
 80124a8:	2b24      	cmp	r3, #36	; 0x24
 80124aa:	d906      	bls.n	80124ba <_strtol_l.constprop.0+0x1a>
 80124ac:	f7fe fa6e 	bl	801098c <__errno>
 80124b0:	2316      	movs	r3, #22
 80124b2:	6003      	str	r3, [r0, #0]
 80124b4:	2000      	movs	r0, #0
 80124b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80125a0 <_strtol_l.constprop.0+0x100>
 80124be:	460d      	mov	r5, r1
 80124c0:	462e      	mov	r6, r5
 80124c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80124ca:	f017 0708 	ands.w	r7, r7, #8
 80124ce:	d1f7      	bne.n	80124c0 <_strtol_l.constprop.0+0x20>
 80124d0:	2c2d      	cmp	r4, #45	; 0x2d
 80124d2:	d132      	bne.n	801253a <_strtol_l.constprop.0+0x9a>
 80124d4:	782c      	ldrb	r4, [r5, #0]
 80124d6:	2701      	movs	r7, #1
 80124d8:	1cb5      	adds	r5, r6, #2
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d05b      	beq.n	8012596 <_strtol_l.constprop.0+0xf6>
 80124de:	2b10      	cmp	r3, #16
 80124e0:	d109      	bne.n	80124f6 <_strtol_l.constprop.0+0x56>
 80124e2:	2c30      	cmp	r4, #48	; 0x30
 80124e4:	d107      	bne.n	80124f6 <_strtol_l.constprop.0+0x56>
 80124e6:	782c      	ldrb	r4, [r5, #0]
 80124e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80124ec:	2c58      	cmp	r4, #88	; 0x58
 80124ee:	d14d      	bne.n	801258c <_strtol_l.constprop.0+0xec>
 80124f0:	786c      	ldrb	r4, [r5, #1]
 80124f2:	2310      	movs	r3, #16
 80124f4:	3502      	adds	r5, #2
 80124f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80124fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80124fe:	f04f 0c00 	mov.w	ip, #0
 8012502:	fbb8 f9f3 	udiv	r9, r8, r3
 8012506:	4666      	mov	r6, ip
 8012508:	fb03 8a19 	mls	sl, r3, r9, r8
 801250c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012510:	f1be 0f09 	cmp.w	lr, #9
 8012514:	d816      	bhi.n	8012544 <_strtol_l.constprop.0+0xa4>
 8012516:	4674      	mov	r4, lr
 8012518:	42a3      	cmp	r3, r4
 801251a:	dd24      	ble.n	8012566 <_strtol_l.constprop.0+0xc6>
 801251c:	f1bc 0f00 	cmp.w	ip, #0
 8012520:	db1e      	blt.n	8012560 <_strtol_l.constprop.0+0xc0>
 8012522:	45b1      	cmp	r9, r6
 8012524:	d31c      	bcc.n	8012560 <_strtol_l.constprop.0+0xc0>
 8012526:	d101      	bne.n	801252c <_strtol_l.constprop.0+0x8c>
 8012528:	45a2      	cmp	sl, r4
 801252a:	db19      	blt.n	8012560 <_strtol_l.constprop.0+0xc0>
 801252c:	fb06 4603 	mla	r6, r6, r3, r4
 8012530:	f04f 0c01 	mov.w	ip, #1
 8012534:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012538:	e7e8      	b.n	801250c <_strtol_l.constprop.0+0x6c>
 801253a:	2c2b      	cmp	r4, #43	; 0x2b
 801253c:	bf04      	itt	eq
 801253e:	782c      	ldrbeq	r4, [r5, #0]
 8012540:	1cb5      	addeq	r5, r6, #2
 8012542:	e7ca      	b.n	80124da <_strtol_l.constprop.0+0x3a>
 8012544:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012548:	f1be 0f19 	cmp.w	lr, #25
 801254c:	d801      	bhi.n	8012552 <_strtol_l.constprop.0+0xb2>
 801254e:	3c37      	subs	r4, #55	; 0x37
 8012550:	e7e2      	b.n	8012518 <_strtol_l.constprop.0+0x78>
 8012552:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012556:	f1be 0f19 	cmp.w	lr, #25
 801255a:	d804      	bhi.n	8012566 <_strtol_l.constprop.0+0xc6>
 801255c:	3c57      	subs	r4, #87	; 0x57
 801255e:	e7db      	b.n	8012518 <_strtol_l.constprop.0+0x78>
 8012560:	f04f 3cff 	mov.w	ip, #4294967295
 8012564:	e7e6      	b.n	8012534 <_strtol_l.constprop.0+0x94>
 8012566:	f1bc 0f00 	cmp.w	ip, #0
 801256a:	da05      	bge.n	8012578 <_strtol_l.constprop.0+0xd8>
 801256c:	2322      	movs	r3, #34	; 0x22
 801256e:	6003      	str	r3, [r0, #0]
 8012570:	4646      	mov	r6, r8
 8012572:	b942      	cbnz	r2, 8012586 <_strtol_l.constprop.0+0xe6>
 8012574:	4630      	mov	r0, r6
 8012576:	e79e      	b.n	80124b6 <_strtol_l.constprop.0+0x16>
 8012578:	b107      	cbz	r7, 801257c <_strtol_l.constprop.0+0xdc>
 801257a:	4276      	negs	r6, r6
 801257c:	2a00      	cmp	r2, #0
 801257e:	d0f9      	beq.n	8012574 <_strtol_l.constprop.0+0xd4>
 8012580:	f1bc 0f00 	cmp.w	ip, #0
 8012584:	d000      	beq.n	8012588 <_strtol_l.constprop.0+0xe8>
 8012586:	1e69      	subs	r1, r5, #1
 8012588:	6011      	str	r1, [r2, #0]
 801258a:	e7f3      	b.n	8012574 <_strtol_l.constprop.0+0xd4>
 801258c:	2430      	movs	r4, #48	; 0x30
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1b1      	bne.n	80124f6 <_strtol_l.constprop.0+0x56>
 8012592:	2308      	movs	r3, #8
 8012594:	e7af      	b.n	80124f6 <_strtol_l.constprop.0+0x56>
 8012596:	2c30      	cmp	r4, #48	; 0x30
 8012598:	d0a5      	beq.n	80124e6 <_strtol_l.constprop.0+0x46>
 801259a:	230a      	movs	r3, #10
 801259c:	e7ab      	b.n	80124f6 <_strtol_l.constprop.0+0x56>
 801259e:	bf00      	nop
 80125a0:	080180f9 	.word	0x080180f9

080125a4 <_strtol_r>:
 80125a4:	f7ff bf7c 	b.w	80124a0 <_strtol_l.constprop.0>

080125a8 <_write_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4d07      	ldr	r5, [pc, #28]	; (80125c8 <_write_r+0x20>)
 80125ac:	4604      	mov	r4, r0
 80125ae:	4608      	mov	r0, r1
 80125b0:	4611      	mov	r1, r2
 80125b2:	2200      	movs	r2, #0
 80125b4:	602a      	str	r2, [r5, #0]
 80125b6:	461a      	mov	r2, r3
 80125b8:	f7f4 f987 	bl	80068ca <_write>
 80125bc:	1c43      	adds	r3, r0, #1
 80125be:	d102      	bne.n	80125c6 <_write_r+0x1e>
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	b103      	cbz	r3, 80125c6 <_write_r+0x1e>
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	bd38      	pop	{r3, r4, r5, pc}
 80125c8:	2000496c 	.word	0x2000496c

080125cc <_close_r>:
 80125cc:	b538      	push	{r3, r4, r5, lr}
 80125ce:	4d06      	ldr	r5, [pc, #24]	; (80125e8 <_close_r+0x1c>)
 80125d0:	2300      	movs	r3, #0
 80125d2:	4604      	mov	r4, r0
 80125d4:	4608      	mov	r0, r1
 80125d6:	602b      	str	r3, [r5, #0]
 80125d8:	f7f4 f993 	bl	8006902 <_close>
 80125dc:	1c43      	adds	r3, r0, #1
 80125de:	d102      	bne.n	80125e6 <_close_r+0x1a>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	b103      	cbz	r3, 80125e6 <_close_r+0x1a>
 80125e4:	6023      	str	r3, [r4, #0]
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	2000496c 	.word	0x2000496c

080125ec <quorem>:
 80125ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f0:	6903      	ldr	r3, [r0, #16]
 80125f2:	690c      	ldr	r4, [r1, #16]
 80125f4:	42a3      	cmp	r3, r4
 80125f6:	4607      	mov	r7, r0
 80125f8:	f2c0 8081 	blt.w	80126fe <quorem+0x112>
 80125fc:	3c01      	subs	r4, #1
 80125fe:	f101 0814 	add.w	r8, r1, #20
 8012602:	f100 0514 	add.w	r5, r0, #20
 8012606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801260a:	9301      	str	r3, [sp, #4]
 801260c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012614:	3301      	adds	r3, #1
 8012616:	429a      	cmp	r2, r3
 8012618:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801261c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012620:	fbb2 f6f3 	udiv	r6, r2, r3
 8012624:	d331      	bcc.n	801268a <quorem+0x9e>
 8012626:	f04f 0e00 	mov.w	lr, #0
 801262a:	4640      	mov	r0, r8
 801262c:	46ac      	mov	ip, r5
 801262e:	46f2      	mov	sl, lr
 8012630:	f850 2b04 	ldr.w	r2, [r0], #4
 8012634:	b293      	uxth	r3, r2
 8012636:	fb06 e303 	mla	r3, r6, r3, lr
 801263a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801263e:	b29b      	uxth	r3, r3
 8012640:	ebaa 0303 	sub.w	r3, sl, r3
 8012644:	f8dc a000 	ldr.w	sl, [ip]
 8012648:	0c12      	lsrs	r2, r2, #16
 801264a:	fa13 f38a 	uxtah	r3, r3, sl
 801264e:	fb06 e202 	mla	r2, r6, r2, lr
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	9b00      	ldr	r3, [sp, #0]
 8012656:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801265a:	b292      	uxth	r2, r2
 801265c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012664:	f8bd 3000 	ldrh.w	r3, [sp]
 8012668:	4581      	cmp	r9, r0
 801266a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801266e:	f84c 3b04 	str.w	r3, [ip], #4
 8012672:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012676:	d2db      	bcs.n	8012630 <quorem+0x44>
 8012678:	f855 300b 	ldr.w	r3, [r5, fp]
 801267c:	b92b      	cbnz	r3, 801268a <quorem+0x9e>
 801267e:	9b01      	ldr	r3, [sp, #4]
 8012680:	3b04      	subs	r3, #4
 8012682:	429d      	cmp	r5, r3
 8012684:	461a      	mov	r2, r3
 8012686:	d32e      	bcc.n	80126e6 <quorem+0xfa>
 8012688:	613c      	str	r4, [r7, #16]
 801268a:	4638      	mov	r0, r7
 801268c:	f001 fca4 	bl	8013fd8 <__mcmp>
 8012690:	2800      	cmp	r0, #0
 8012692:	db24      	blt.n	80126de <quorem+0xf2>
 8012694:	3601      	adds	r6, #1
 8012696:	4628      	mov	r0, r5
 8012698:	f04f 0c00 	mov.w	ip, #0
 801269c:	f858 2b04 	ldr.w	r2, [r8], #4
 80126a0:	f8d0 e000 	ldr.w	lr, [r0]
 80126a4:	b293      	uxth	r3, r2
 80126a6:	ebac 0303 	sub.w	r3, ip, r3
 80126aa:	0c12      	lsrs	r2, r2, #16
 80126ac:	fa13 f38e 	uxtah	r3, r3, lr
 80126b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80126b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126be:	45c1      	cmp	r9, r8
 80126c0:	f840 3b04 	str.w	r3, [r0], #4
 80126c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80126c8:	d2e8      	bcs.n	801269c <quorem+0xb0>
 80126ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126d2:	b922      	cbnz	r2, 80126de <quorem+0xf2>
 80126d4:	3b04      	subs	r3, #4
 80126d6:	429d      	cmp	r5, r3
 80126d8:	461a      	mov	r2, r3
 80126da:	d30a      	bcc.n	80126f2 <quorem+0x106>
 80126dc:	613c      	str	r4, [r7, #16]
 80126de:	4630      	mov	r0, r6
 80126e0:	b003      	add	sp, #12
 80126e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e6:	6812      	ldr	r2, [r2, #0]
 80126e8:	3b04      	subs	r3, #4
 80126ea:	2a00      	cmp	r2, #0
 80126ec:	d1cc      	bne.n	8012688 <quorem+0x9c>
 80126ee:	3c01      	subs	r4, #1
 80126f0:	e7c7      	b.n	8012682 <quorem+0x96>
 80126f2:	6812      	ldr	r2, [r2, #0]
 80126f4:	3b04      	subs	r3, #4
 80126f6:	2a00      	cmp	r2, #0
 80126f8:	d1f0      	bne.n	80126dc <quorem+0xf0>
 80126fa:	3c01      	subs	r4, #1
 80126fc:	e7eb      	b.n	80126d6 <quorem+0xea>
 80126fe:	2000      	movs	r0, #0
 8012700:	e7ee      	b.n	80126e0 <quorem+0xf4>
 8012702:	0000      	movs	r0, r0
 8012704:	0000      	movs	r0, r0
	...

08012708 <_dtoa_r>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	ed2d 8b04 	vpush	{d8-d9}
 8012710:	ec57 6b10 	vmov	r6, r7, d0
 8012714:	b093      	sub	sp, #76	; 0x4c
 8012716:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012718:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801271c:	9106      	str	r1, [sp, #24]
 801271e:	ee10 aa10 	vmov	sl, s0
 8012722:	4604      	mov	r4, r0
 8012724:	9209      	str	r2, [sp, #36]	; 0x24
 8012726:	930c      	str	r3, [sp, #48]	; 0x30
 8012728:	46bb      	mov	fp, r7
 801272a:	b975      	cbnz	r5, 801274a <_dtoa_r+0x42>
 801272c:	2010      	movs	r0, #16
 801272e:	f001 f95f 	bl	80139f0 <malloc>
 8012732:	4602      	mov	r2, r0
 8012734:	6260      	str	r0, [r4, #36]	; 0x24
 8012736:	b920      	cbnz	r0, 8012742 <_dtoa_r+0x3a>
 8012738:	4ba7      	ldr	r3, [pc, #668]	; (80129d8 <_dtoa_r+0x2d0>)
 801273a:	21ea      	movs	r1, #234	; 0xea
 801273c:	48a7      	ldr	r0, [pc, #668]	; (80129dc <_dtoa_r+0x2d4>)
 801273e:	f002 fceb 	bl	8015118 <__assert_func>
 8012742:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012746:	6005      	str	r5, [r0, #0]
 8012748:	60c5      	str	r5, [r0, #12]
 801274a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801274c:	6819      	ldr	r1, [r3, #0]
 801274e:	b151      	cbz	r1, 8012766 <_dtoa_r+0x5e>
 8012750:	685a      	ldr	r2, [r3, #4]
 8012752:	604a      	str	r2, [r1, #4]
 8012754:	2301      	movs	r3, #1
 8012756:	4093      	lsls	r3, r2
 8012758:	608b      	str	r3, [r1, #8]
 801275a:	4620      	mov	r0, r4
 801275c:	f001 f9b0 	bl	8013ac0 <_Bfree>
 8012760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012762:	2200      	movs	r2, #0
 8012764:	601a      	str	r2, [r3, #0]
 8012766:	1e3b      	subs	r3, r7, #0
 8012768:	bfaa      	itet	ge
 801276a:	2300      	movge	r3, #0
 801276c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012770:	f8c8 3000 	strge.w	r3, [r8]
 8012774:	4b9a      	ldr	r3, [pc, #616]	; (80129e0 <_dtoa_r+0x2d8>)
 8012776:	bfbc      	itt	lt
 8012778:	2201      	movlt	r2, #1
 801277a:	f8c8 2000 	strlt.w	r2, [r8]
 801277e:	ea33 030b 	bics.w	r3, r3, fp
 8012782:	d11b      	bne.n	80127bc <_dtoa_r+0xb4>
 8012784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012786:	f242 730f 	movw	r3, #9999	; 0x270f
 801278a:	6013      	str	r3, [r2, #0]
 801278c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012790:	4333      	orrs	r3, r6
 8012792:	f000 8592 	beq.w	80132ba <_dtoa_r+0xbb2>
 8012796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012798:	b963      	cbnz	r3, 80127b4 <_dtoa_r+0xac>
 801279a:	4b92      	ldr	r3, [pc, #584]	; (80129e4 <_dtoa_r+0x2dc>)
 801279c:	e022      	b.n	80127e4 <_dtoa_r+0xdc>
 801279e:	4b92      	ldr	r3, [pc, #584]	; (80129e8 <_dtoa_r+0x2e0>)
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	3308      	adds	r3, #8
 80127a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127a6:	6013      	str	r3, [r2, #0]
 80127a8:	9801      	ldr	r0, [sp, #4]
 80127aa:	b013      	add	sp, #76	; 0x4c
 80127ac:	ecbd 8b04 	vpop	{d8-d9}
 80127b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b4:	4b8b      	ldr	r3, [pc, #556]	; (80129e4 <_dtoa_r+0x2dc>)
 80127b6:	9301      	str	r3, [sp, #4]
 80127b8:	3303      	adds	r3, #3
 80127ba:	e7f3      	b.n	80127a4 <_dtoa_r+0x9c>
 80127bc:	2200      	movs	r2, #0
 80127be:	2300      	movs	r3, #0
 80127c0:	4650      	mov	r0, sl
 80127c2:	4659      	mov	r1, fp
 80127c4:	f7ee f9a0 	bl	8000b08 <__aeabi_dcmpeq>
 80127c8:	ec4b ab19 	vmov	d9, sl, fp
 80127cc:	4680      	mov	r8, r0
 80127ce:	b158      	cbz	r0, 80127e8 <_dtoa_r+0xe0>
 80127d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127d2:	2301      	movs	r3, #1
 80127d4:	6013      	str	r3, [r2, #0]
 80127d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 856b 	beq.w	80132b4 <_dtoa_r+0xbac>
 80127de:	4883      	ldr	r0, [pc, #524]	; (80129ec <_dtoa_r+0x2e4>)
 80127e0:	6018      	str	r0, [r3, #0]
 80127e2:	1e43      	subs	r3, r0, #1
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	e7df      	b.n	80127a8 <_dtoa_r+0xa0>
 80127e8:	ec4b ab10 	vmov	d0, sl, fp
 80127ec:	aa10      	add	r2, sp, #64	; 0x40
 80127ee:	a911      	add	r1, sp, #68	; 0x44
 80127f0:	4620      	mov	r0, r4
 80127f2:	f001 fd13 	bl	801421c <__d2b>
 80127f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80127fa:	ee08 0a10 	vmov	s16, r0
 80127fe:	2d00      	cmp	r5, #0
 8012800:	f000 8084 	beq.w	801290c <_dtoa_r+0x204>
 8012804:	ee19 3a90 	vmov	r3, s19
 8012808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801280c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012810:	4656      	mov	r6, sl
 8012812:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801281a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801281e:	4b74      	ldr	r3, [pc, #464]	; (80129f0 <_dtoa_r+0x2e8>)
 8012820:	2200      	movs	r2, #0
 8012822:	4630      	mov	r0, r6
 8012824:	4639      	mov	r1, r7
 8012826:	f7ed fd4f 	bl	80002c8 <__aeabi_dsub>
 801282a:	a365      	add	r3, pc, #404	; (adr r3, 80129c0 <_dtoa_r+0x2b8>)
 801282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012830:	f7ed ff02 	bl	8000638 <__aeabi_dmul>
 8012834:	a364      	add	r3, pc, #400	; (adr r3, 80129c8 <_dtoa_r+0x2c0>)
 8012836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283a:	f7ed fd47 	bl	80002cc <__adddf3>
 801283e:	4606      	mov	r6, r0
 8012840:	4628      	mov	r0, r5
 8012842:	460f      	mov	r7, r1
 8012844:	f7ed fe8e 	bl	8000564 <__aeabi_i2d>
 8012848:	a361      	add	r3, pc, #388	; (adr r3, 80129d0 <_dtoa_r+0x2c8>)
 801284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284e:	f7ed fef3 	bl	8000638 <__aeabi_dmul>
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	4630      	mov	r0, r6
 8012858:	4639      	mov	r1, r7
 801285a:	f7ed fd37 	bl	80002cc <__adddf3>
 801285e:	4606      	mov	r6, r0
 8012860:	460f      	mov	r7, r1
 8012862:	f7ee f999 	bl	8000b98 <__aeabi_d2iz>
 8012866:	2200      	movs	r2, #0
 8012868:	9000      	str	r0, [sp, #0]
 801286a:	2300      	movs	r3, #0
 801286c:	4630      	mov	r0, r6
 801286e:	4639      	mov	r1, r7
 8012870:	f7ee f954 	bl	8000b1c <__aeabi_dcmplt>
 8012874:	b150      	cbz	r0, 801288c <_dtoa_r+0x184>
 8012876:	9800      	ldr	r0, [sp, #0]
 8012878:	f7ed fe74 	bl	8000564 <__aeabi_i2d>
 801287c:	4632      	mov	r2, r6
 801287e:	463b      	mov	r3, r7
 8012880:	f7ee f942 	bl	8000b08 <__aeabi_dcmpeq>
 8012884:	b910      	cbnz	r0, 801288c <_dtoa_r+0x184>
 8012886:	9b00      	ldr	r3, [sp, #0]
 8012888:	3b01      	subs	r3, #1
 801288a:	9300      	str	r3, [sp, #0]
 801288c:	9b00      	ldr	r3, [sp, #0]
 801288e:	2b16      	cmp	r3, #22
 8012890:	d85a      	bhi.n	8012948 <_dtoa_r+0x240>
 8012892:	9a00      	ldr	r2, [sp, #0]
 8012894:	4b57      	ldr	r3, [pc, #348]	; (80129f4 <_dtoa_r+0x2ec>)
 8012896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	ec51 0b19 	vmov	r0, r1, d9
 80128a2:	f7ee f93b 	bl	8000b1c <__aeabi_dcmplt>
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d050      	beq.n	801294c <_dtoa_r+0x244>
 80128aa:	9b00      	ldr	r3, [sp, #0]
 80128ac:	3b01      	subs	r3, #1
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	2300      	movs	r3, #0
 80128b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80128b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128b6:	1b5d      	subs	r5, r3, r5
 80128b8:	1e6b      	subs	r3, r5, #1
 80128ba:	9305      	str	r3, [sp, #20]
 80128bc:	bf45      	ittet	mi
 80128be:	f1c5 0301 	rsbmi	r3, r5, #1
 80128c2:	9304      	strmi	r3, [sp, #16]
 80128c4:	2300      	movpl	r3, #0
 80128c6:	2300      	movmi	r3, #0
 80128c8:	bf4c      	ite	mi
 80128ca:	9305      	strmi	r3, [sp, #20]
 80128cc:	9304      	strpl	r3, [sp, #16]
 80128ce:	9b00      	ldr	r3, [sp, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	db3d      	blt.n	8012950 <_dtoa_r+0x248>
 80128d4:	9b05      	ldr	r3, [sp, #20]
 80128d6:	9a00      	ldr	r2, [sp, #0]
 80128d8:	920a      	str	r2, [sp, #40]	; 0x28
 80128da:	4413      	add	r3, r2
 80128dc:	9305      	str	r3, [sp, #20]
 80128de:	2300      	movs	r3, #0
 80128e0:	9307      	str	r3, [sp, #28]
 80128e2:	9b06      	ldr	r3, [sp, #24]
 80128e4:	2b09      	cmp	r3, #9
 80128e6:	f200 8089 	bhi.w	80129fc <_dtoa_r+0x2f4>
 80128ea:	2b05      	cmp	r3, #5
 80128ec:	bfc4      	itt	gt
 80128ee:	3b04      	subgt	r3, #4
 80128f0:	9306      	strgt	r3, [sp, #24]
 80128f2:	9b06      	ldr	r3, [sp, #24]
 80128f4:	f1a3 0302 	sub.w	r3, r3, #2
 80128f8:	bfcc      	ite	gt
 80128fa:	2500      	movgt	r5, #0
 80128fc:	2501      	movle	r5, #1
 80128fe:	2b03      	cmp	r3, #3
 8012900:	f200 8087 	bhi.w	8012a12 <_dtoa_r+0x30a>
 8012904:	e8df f003 	tbb	[pc, r3]
 8012908:	59383a2d 	.word	0x59383a2d
 801290c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012910:	441d      	add	r5, r3
 8012912:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012916:	2b20      	cmp	r3, #32
 8012918:	bfc1      	itttt	gt
 801291a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801291e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012922:	fa0b f303 	lslgt.w	r3, fp, r3
 8012926:	fa26 f000 	lsrgt.w	r0, r6, r0
 801292a:	bfda      	itte	le
 801292c:	f1c3 0320 	rsble	r3, r3, #32
 8012930:	fa06 f003 	lslle.w	r0, r6, r3
 8012934:	4318      	orrgt	r0, r3
 8012936:	f7ed fe05 	bl	8000544 <__aeabi_ui2d>
 801293a:	2301      	movs	r3, #1
 801293c:	4606      	mov	r6, r0
 801293e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012942:	3d01      	subs	r5, #1
 8012944:	930e      	str	r3, [sp, #56]	; 0x38
 8012946:	e76a      	b.n	801281e <_dtoa_r+0x116>
 8012948:	2301      	movs	r3, #1
 801294a:	e7b2      	b.n	80128b2 <_dtoa_r+0x1aa>
 801294c:	900b      	str	r0, [sp, #44]	; 0x2c
 801294e:	e7b1      	b.n	80128b4 <_dtoa_r+0x1ac>
 8012950:	9b04      	ldr	r3, [sp, #16]
 8012952:	9a00      	ldr	r2, [sp, #0]
 8012954:	1a9b      	subs	r3, r3, r2
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	4253      	negs	r3, r2
 801295a:	9307      	str	r3, [sp, #28]
 801295c:	2300      	movs	r3, #0
 801295e:	930a      	str	r3, [sp, #40]	; 0x28
 8012960:	e7bf      	b.n	80128e2 <_dtoa_r+0x1da>
 8012962:	2300      	movs	r3, #0
 8012964:	9308      	str	r3, [sp, #32]
 8012966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012968:	2b00      	cmp	r3, #0
 801296a:	dc55      	bgt.n	8012a18 <_dtoa_r+0x310>
 801296c:	2301      	movs	r3, #1
 801296e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012972:	461a      	mov	r2, r3
 8012974:	9209      	str	r2, [sp, #36]	; 0x24
 8012976:	e00c      	b.n	8012992 <_dtoa_r+0x28a>
 8012978:	2301      	movs	r3, #1
 801297a:	e7f3      	b.n	8012964 <_dtoa_r+0x25c>
 801297c:	2300      	movs	r3, #0
 801297e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012980:	9308      	str	r3, [sp, #32]
 8012982:	9b00      	ldr	r3, [sp, #0]
 8012984:	4413      	add	r3, r2
 8012986:	9302      	str	r3, [sp, #8]
 8012988:	3301      	adds	r3, #1
 801298a:	2b01      	cmp	r3, #1
 801298c:	9303      	str	r3, [sp, #12]
 801298e:	bfb8      	it	lt
 8012990:	2301      	movlt	r3, #1
 8012992:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012994:	2200      	movs	r2, #0
 8012996:	6042      	str	r2, [r0, #4]
 8012998:	2204      	movs	r2, #4
 801299a:	f102 0614 	add.w	r6, r2, #20
 801299e:	429e      	cmp	r6, r3
 80129a0:	6841      	ldr	r1, [r0, #4]
 80129a2:	d93d      	bls.n	8012a20 <_dtoa_r+0x318>
 80129a4:	4620      	mov	r0, r4
 80129a6:	f001 f84b 	bl	8013a40 <_Balloc>
 80129aa:	9001      	str	r0, [sp, #4]
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d13b      	bne.n	8012a28 <_dtoa_r+0x320>
 80129b0:	4b11      	ldr	r3, [pc, #68]	; (80129f8 <_dtoa_r+0x2f0>)
 80129b2:	4602      	mov	r2, r0
 80129b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80129b8:	e6c0      	b.n	801273c <_dtoa_r+0x34>
 80129ba:	2301      	movs	r3, #1
 80129bc:	e7df      	b.n	801297e <_dtoa_r+0x276>
 80129be:	bf00      	nop
 80129c0:	636f4361 	.word	0x636f4361
 80129c4:	3fd287a7 	.word	0x3fd287a7
 80129c8:	8b60c8b3 	.word	0x8b60c8b3
 80129cc:	3fc68a28 	.word	0x3fc68a28
 80129d0:	509f79fb 	.word	0x509f79fb
 80129d4:	3fd34413 	.word	0x3fd34413
 80129d8:	08018206 	.word	0x08018206
 80129dc:	0801821d 	.word	0x0801821d
 80129e0:	7ff00000 	.word	0x7ff00000
 80129e4:	08018202 	.word	0x08018202
 80129e8:	080181f9 	.word	0x080181f9
 80129ec:	08018472 	.word	0x08018472
 80129f0:	3ff80000 	.word	0x3ff80000
 80129f4:	08018388 	.word	0x08018388
 80129f8:	08018278 	.word	0x08018278
 80129fc:	2501      	movs	r5, #1
 80129fe:	2300      	movs	r3, #0
 8012a00:	9306      	str	r3, [sp, #24]
 8012a02:	9508      	str	r5, [sp, #32]
 8012a04:	f04f 33ff 	mov.w	r3, #4294967295
 8012a08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	2312      	movs	r3, #18
 8012a10:	e7b0      	b.n	8012974 <_dtoa_r+0x26c>
 8012a12:	2301      	movs	r3, #1
 8012a14:	9308      	str	r3, [sp, #32]
 8012a16:	e7f5      	b.n	8012a04 <_dtoa_r+0x2fc>
 8012a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a1e:	e7b8      	b.n	8012992 <_dtoa_r+0x28a>
 8012a20:	3101      	adds	r1, #1
 8012a22:	6041      	str	r1, [r0, #4]
 8012a24:	0052      	lsls	r2, r2, #1
 8012a26:	e7b8      	b.n	801299a <_dtoa_r+0x292>
 8012a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a2a:	9a01      	ldr	r2, [sp, #4]
 8012a2c:	601a      	str	r2, [r3, #0]
 8012a2e:	9b03      	ldr	r3, [sp, #12]
 8012a30:	2b0e      	cmp	r3, #14
 8012a32:	f200 809d 	bhi.w	8012b70 <_dtoa_r+0x468>
 8012a36:	2d00      	cmp	r5, #0
 8012a38:	f000 809a 	beq.w	8012b70 <_dtoa_r+0x468>
 8012a3c:	9b00      	ldr	r3, [sp, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	dd32      	ble.n	8012aa8 <_dtoa_r+0x3a0>
 8012a42:	4ab7      	ldr	r2, [pc, #732]	; (8012d20 <_dtoa_r+0x618>)
 8012a44:	f003 030f 	and.w	r3, r3, #15
 8012a48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a50:	9b00      	ldr	r3, [sp, #0]
 8012a52:	05d8      	lsls	r0, r3, #23
 8012a54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012a58:	d516      	bpl.n	8012a88 <_dtoa_r+0x380>
 8012a5a:	4bb2      	ldr	r3, [pc, #712]	; (8012d24 <_dtoa_r+0x61c>)
 8012a5c:	ec51 0b19 	vmov	r0, r1, d9
 8012a60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a64:	f7ed ff12 	bl	800088c <__aeabi_ddiv>
 8012a68:	f007 070f 	and.w	r7, r7, #15
 8012a6c:	4682      	mov	sl, r0
 8012a6e:	468b      	mov	fp, r1
 8012a70:	2503      	movs	r5, #3
 8012a72:	4eac      	ldr	r6, [pc, #688]	; (8012d24 <_dtoa_r+0x61c>)
 8012a74:	b957      	cbnz	r7, 8012a8c <_dtoa_r+0x384>
 8012a76:	4642      	mov	r2, r8
 8012a78:	464b      	mov	r3, r9
 8012a7a:	4650      	mov	r0, sl
 8012a7c:	4659      	mov	r1, fp
 8012a7e:	f7ed ff05 	bl	800088c <__aeabi_ddiv>
 8012a82:	4682      	mov	sl, r0
 8012a84:	468b      	mov	fp, r1
 8012a86:	e028      	b.n	8012ada <_dtoa_r+0x3d2>
 8012a88:	2502      	movs	r5, #2
 8012a8a:	e7f2      	b.n	8012a72 <_dtoa_r+0x36a>
 8012a8c:	07f9      	lsls	r1, r7, #31
 8012a8e:	d508      	bpl.n	8012aa2 <_dtoa_r+0x39a>
 8012a90:	4640      	mov	r0, r8
 8012a92:	4649      	mov	r1, r9
 8012a94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a98:	f7ed fdce 	bl	8000638 <__aeabi_dmul>
 8012a9c:	3501      	adds	r5, #1
 8012a9e:	4680      	mov	r8, r0
 8012aa0:	4689      	mov	r9, r1
 8012aa2:	107f      	asrs	r7, r7, #1
 8012aa4:	3608      	adds	r6, #8
 8012aa6:	e7e5      	b.n	8012a74 <_dtoa_r+0x36c>
 8012aa8:	f000 809b 	beq.w	8012be2 <_dtoa_r+0x4da>
 8012aac:	9b00      	ldr	r3, [sp, #0]
 8012aae:	4f9d      	ldr	r7, [pc, #628]	; (8012d24 <_dtoa_r+0x61c>)
 8012ab0:	425e      	negs	r6, r3
 8012ab2:	4b9b      	ldr	r3, [pc, #620]	; (8012d20 <_dtoa_r+0x618>)
 8012ab4:	f006 020f 	and.w	r2, r6, #15
 8012ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac0:	ec51 0b19 	vmov	r0, r1, d9
 8012ac4:	f7ed fdb8 	bl	8000638 <__aeabi_dmul>
 8012ac8:	1136      	asrs	r6, r6, #4
 8012aca:	4682      	mov	sl, r0
 8012acc:	468b      	mov	fp, r1
 8012ace:	2300      	movs	r3, #0
 8012ad0:	2502      	movs	r5, #2
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	d17a      	bne.n	8012bcc <_dtoa_r+0x4c4>
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1d3      	bne.n	8012a82 <_dtoa_r+0x37a>
 8012ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f000 8082 	beq.w	8012be6 <_dtoa_r+0x4de>
 8012ae2:	4b91      	ldr	r3, [pc, #580]	; (8012d28 <_dtoa_r+0x620>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	4650      	mov	r0, sl
 8012ae8:	4659      	mov	r1, fp
 8012aea:	f7ee f817 	bl	8000b1c <__aeabi_dcmplt>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	d079      	beq.n	8012be6 <_dtoa_r+0x4de>
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d076      	beq.n	8012be6 <_dtoa_r+0x4de>
 8012af8:	9b02      	ldr	r3, [sp, #8]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	dd36      	ble.n	8012b6c <_dtoa_r+0x464>
 8012afe:	9b00      	ldr	r3, [sp, #0]
 8012b00:	4650      	mov	r0, sl
 8012b02:	4659      	mov	r1, fp
 8012b04:	1e5f      	subs	r7, r3, #1
 8012b06:	2200      	movs	r2, #0
 8012b08:	4b88      	ldr	r3, [pc, #544]	; (8012d2c <_dtoa_r+0x624>)
 8012b0a:	f7ed fd95 	bl	8000638 <__aeabi_dmul>
 8012b0e:	9e02      	ldr	r6, [sp, #8]
 8012b10:	4682      	mov	sl, r0
 8012b12:	468b      	mov	fp, r1
 8012b14:	3501      	adds	r5, #1
 8012b16:	4628      	mov	r0, r5
 8012b18:	f7ed fd24 	bl	8000564 <__aeabi_i2d>
 8012b1c:	4652      	mov	r2, sl
 8012b1e:	465b      	mov	r3, fp
 8012b20:	f7ed fd8a 	bl	8000638 <__aeabi_dmul>
 8012b24:	4b82      	ldr	r3, [pc, #520]	; (8012d30 <_dtoa_r+0x628>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	f7ed fbd0 	bl	80002cc <__adddf3>
 8012b2c:	46d0      	mov	r8, sl
 8012b2e:	46d9      	mov	r9, fp
 8012b30:	4682      	mov	sl, r0
 8012b32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012b36:	2e00      	cmp	r6, #0
 8012b38:	d158      	bne.n	8012bec <_dtoa_r+0x4e4>
 8012b3a:	4b7e      	ldr	r3, [pc, #504]	; (8012d34 <_dtoa_r+0x62c>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	4640      	mov	r0, r8
 8012b40:	4649      	mov	r1, r9
 8012b42:	f7ed fbc1 	bl	80002c8 <__aeabi_dsub>
 8012b46:	4652      	mov	r2, sl
 8012b48:	465b      	mov	r3, fp
 8012b4a:	4680      	mov	r8, r0
 8012b4c:	4689      	mov	r9, r1
 8012b4e:	f7ee f803 	bl	8000b58 <__aeabi_dcmpgt>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	f040 8295 	bne.w	8013082 <_dtoa_r+0x97a>
 8012b58:	4652      	mov	r2, sl
 8012b5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012b5e:	4640      	mov	r0, r8
 8012b60:	4649      	mov	r1, r9
 8012b62:	f7ed ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8012b66:	2800      	cmp	r0, #0
 8012b68:	f040 8289 	bne.w	801307e <_dtoa_r+0x976>
 8012b6c:	ec5b ab19 	vmov	sl, fp, d9
 8012b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f2c0 8148 	blt.w	8012e08 <_dtoa_r+0x700>
 8012b78:	9a00      	ldr	r2, [sp, #0]
 8012b7a:	2a0e      	cmp	r2, #14
 8012b7c:	f300 8144 	bgt.w	8012e08 <_dtoa_r+0x700>
 8012b80:	4b67      	ldr	r3, [pc, #412]	; (8012d20 <_dtoa_r+0x618>)
 8012b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	f280 80d5 	bge.w	8012d3c <_dtoa_r+0x634>
 8012b92:	9b03      	ldr	r3, [sp, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f300 80d1 	bgt.w	8012d3c <_dtoa_r+0x634>
 8012b9a:	f040 826f 	bne.w	801307c <_dtoa_r+0x974>
 8012b9e:	4b65      	ldr	r3, [pc, #404]	; (8012d34 <_dtoa_r+0x62c>)
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	4640      	mov	r0, r8
 8012ba4:	4649      	mov	r1, r9
 8012ba6:	f7ed fd47 	bl	8000638 <__aeabi_dmul>
 8012baa:	4652      	mov	r2, sl
 8012bac:	465b      	mov	r3, fp
 8012bae:	f7ed ffc9 	bl	8000b44 <__aeabi_dcmpge>
 8012bb2:	9e03      	ldr	r6, [sp, #12]
 8012bb4:	4637      	mov	r7, r6
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	f040 8245 	bne.w	8013046 <_dtoa_r+0x93e>
 8012bbc:	9d01      	ldr	r5, [sp, #4]
 8012bbe:	2331      	movs	r3, #49	; 0x31
 8012bc0:	f805 3b01 	strb.w	r3, [r5], #1
 8012bc4:	9b00      	ldr	r3, [sp, #0]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	e240      	b.n	801304e <_dtoa_r+0x946>
 8012bcc:	07f2      	lsls	r2, r6, #31
 8012bce:	d505      	bpl.n	8012bdc <_dtoa_r+0x4d4>
 8012bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bd4:	f7ed fd30 	bl	8000638 <__aeabi_dmul>
 8012bd8:	3501      	adds	r5, #1
 8012bda:	2301      	movs	r3, #1
 8012bdc:	1076      	asrs	r6, r6, #1
 8012bde:	3708      	adds	r7, #8
 8012be0:	e777      	b.n	8012ad2 <_dtoa_r+0x3ca>
 8012be2:	2502      	movs	r5, #2
 8012be4:	e779      	b.n	8012ada <_dtoa_r+0x3d2>
 8012be6:	9f00      	ldr	r7, [sp, #0]
 8012be8:	9e03      	ldr	r6, [sp, #12]
 8012bea:	e794      	b.n	8012b16 <_dtoa_r+0x40e>
 8012bec:	9901      	ldr	r1, [sp, #4]
 8012bee:	4b4c      	ldr	r3, [pc, #304]	; (8012d20 <_dtoa_r+0x618>)
 8012bf0:	4431      	add	r1, r6
 8012bf2:	910d      	str	r1, [sp, #52]	; 0x34
 8012bf4:	9908      	ldr	r1, [sp, #32]
 8012bf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012bfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012bfe:	2900      	cmp	r1, #0
 8012c00:	d043      	beq.n	8012c8a <_dtoa_r+0x582>
 8012c02:	494d      	ldr	r1, [pc, #308]	; (8012d38 <_dtoa_r+0x630>)
 8012c04:	2000      	movs	r0, #0
 8012c06:	f7ed fe41 	bl	800088c <__aeabi_ddiv>
 8012c0a:	4652      	mov	r2, sl
 8012c0c:	465b      	mov	r3, fp
 8012c0e:	f7ed fb5b 	bl	80002c8 <__aeabi_dsub>
 8012c12:	9d01      	ldr	r5, [sp, #4]
 8012c14:	4682      	mov	sl, r0
 8012c16:	468b      	mov	fp, r1
 8012c18:	4649      	mov	r1, r9
 8012c1a:	4640      	mov	r0, r8
 8012c1c:	f7ed ffbc 	bl	8000b98 <__aeabi_d2iz>
 8012c20:	4606      	mov	r6, r0
 8012c22:	f7ed fc9f 	bl	8000564 <__aeabi_i2d>
 8012c26:	4602      	mov	r2, r0
 8012c28:	460b      	mov	r3, r1
 8012c2a:	4640      	mov	r0, r8
 8012c2c:	4649      	mov	r1, r9
 8012c2e:	f7ed fb4b 	bl	80002c8 <__aeabi_dsub>
 8012c32:	3630      	adds	r6, #48	; 0x30
 8012c34:	f805 6b01 	strb.w	r6, [r5], #1
 8012c38:	4652      	mov	r2, sl
 8012c3a:	465b      	mov	r3, fp
 8012c3c:	4680      	mov	r8, r0
 8012c3e:	4689      	mov	r9, r1
 8012c40:	f7ed ff6c 	bl	8000b1c <__aeabi_dcmplt>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d163      	bne.n	8012d10 <_dtoa_r+0x608>
 8012c48:	4642      	mov	r2, r8
 8012c4a:	464b      	mov	r3, r9
 8012c4c:	4936      	ldr	r1, [pc, #216]	; (8012d28 <_dtoa_r+0x620>)
 8012c4e:	2000      	movs	r0, #0
 8012c50:	f7ed fb3a 	bl	80002c8 <__aeabi_dsub>
 8012c54:	4652      	mov	r2, sl
 8012c56:	465b      	mov	r3, fp
 8012c58:	f7ed ff60 	bl	8000b1c <__aeabi_dcmplt>
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	f040 80b5 	bne.w	8012dcc <_dtoa_r+0x6c4>
 8012c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c64:	429d      	cmp	r5, r3
 8012c66:	d081      	beq.n	8012b6c <_dtoa_r+0x464>
 8012c68:	4b30      	ldr	r3, [pc, #192]	; (8012d2c <_dtoa_r+0x624>)
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	4650      	mov	r0, sl
 8012c6e:	4659      	mov	r1, fp
 8012c70:	f7ed fce2 	bl	8000638 <__aeabi_dmul>
 8012c74:	4b2d      	ldr	r3, [pc, #180]	; (8012d2c <_dtoa_r+0x624>)
 8012c76:	4682      	mov	sl, r0
 8012c78:	468b      	mov	fp, r1
 8012c7a:	4640      	mov	r0, r8
 8012c7c:	4649      	mov	r1, r9
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f7ed fcda 	bl	8000638 <__aeabi_dmul>
 8012c84:	4680      	mov	r8, r0
 8012c86:	4689      	mov	r9, r1
 8012c88:	e7c6      	b.n	8012c18 <_dtoa_r+0x510>
 8012c8a:	4650      	mov	r0, sl
 8012c8c:	4659      	mov	r1, fp
 8012c8e:	f7ed fcd3 	bl	8000638 <__aeabi_dmul>
 8012c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c94:	9d01      	ldr	r5, [sp, #4]
 8012c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c98:	4682      	mov	sl, r0
 8012c9a:	468b      	mov	fp, r1
 8012c9c:	4649      	mov	r1, r9
 8012c9e:	4640      	mov	r0, r8
 8012ca0:	f7ed ff7a 	bl	8000b98 <__aeabi_d2iz>
 8012ca4:	4606      	mov	r6, r0
 8012ca6:	f7ed fc5d 	bl	8000564 <__aeabi_i2d>
 8012caa:	3630      	adds	r6, #48	; 0x30
 8012cac:	4602      	mov	r2, r0
 8012cae:	460b      	mov	r3, r1
 8012cb0:	4640      	mov	r0, r8
 8012cb2:	4649      	mov	r1, r9
 8012cb4:	f7ed fb08 	bl	80002c8 <__aeabi_dsub>
 8012cb8:	f805 6b01 	strb.w	r6, [r5], #1
 8012cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cbe:	429d      	cmp	r5, r3
 8012cc0:	4680      	mov	r8, r0
 8012cc2:	4689      	mov	r9, r1
 8012cc4:	f04f 0200 	mov.w	r2, #0
 8012cc8:	d124      	bne.n	8012d14 <_dtoa_r+0x60c>
 8012cca:	4b1b      	ldr	r3, [pc, #108]	; (8012d38 <_dtoa_r+0x630>)
 8012ccc:	4650      	mov	r0, sl
 8012cce:	4659      	mov	r1, fp
 8012cd0:	f7ed fafc 	bl	80002cc <__adddf3>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	4640      	mov	r0, r8
 8012cda:	4649      	mov	r1, r9
 8012cdc:	f7ed ff3c 	bl	8000b58 <__aeabi_dcmpgt>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d173      	bne.n	8012dcc <_dtoa_r+0x6c4>
 8012ce4:	4652      	mov	r2, sl
 8012ce6:	465b      	mov	r3, fp
 8012ce8:	4913      	ldr	r1, [pc, #76]	; (8012d38 <_dtoa_r+0x630>)
 8012cea:	2000      	movs	r0, #0
 8012cec:	f7ed faec 	bl	80002c8 <__aeabi_dsub>
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4640      	mov	r0, r8
 8012cf6:	4649      	mov	r1, r9
 8012cf8:	f7ed ff10 	bl	8000b1c <__aeabi_dcmplt>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	f43f af35 	beq.w	8012b6c <_dtoa_r+0x464>
 8012d02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012d04:	1e6b      	subs	r3, r5, #1
 8012d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d0c:	2b30      	cmp	r3, #48	; 0x30
 8012d0e:	d0f8      	beq.n	8012d02 <_dtoa_r+0x5fa>
 8012d10:	9700      	str	r7, [sp, #0]
 8012d12:	e049      	b.n	8012da8 <_dtoa_r+0x6a0>
 8012d14:	4b05      	ldr	r3, [pc, #20]	; (8012d2c <_dtoa_r+0x624>)
 8012d16:	f7ed fc8f 	bl	8000638 <__aeabi_dmul>
 8012d1a:	4680      	mov	r8, r0
 8012d1c:	4689      	mov	r9, r1
 8012d1e:	e7bd      	b.n	8012c9c <_dtoa_r+0x594>
 8012d20:	08018388 	.word	0x08018388
 8012d24:	08018360 	.word	0x08018360
 8012d28:	3ff00000 	.word	0x3ff00000
 8012d2c:	40240000 	.word	0x40240000
 8012d30:	401c0000 	.word	0x401c0000
 8012d34:	40140000 	.word	0x40140000
 8012d38:	3fe00000 	.word	0x3fe00000
 8012d3c:	9d01      	ldr	r5, [sp, #4]
 8012d3e:	4656      	mov	r6, sl
 8012d40:	465f      	mov	r7, fp
 8012d42:	4642      	mov	r2, r8
 8012d44:	464b      	mov	r3, r9
 8012d46:	4630      	mov	r0, r6
 8012d48:	4639      	mov	r1, r7
 8012d4a:	f7ed fd9f 	bl	800088c <__aeabi_ddiv>
 8012d4e:	f7ed ff23 	bl	8000b98 <__aeabi_d2iz>
 8012d52:	4682      	mov	sl, r0
 8012d54:	f7ed fc06 	bl	8000564 <__aeabi_i2d>
 8012d58:	4642      	mov	r2, r8
 8012d5a:	464b      	mov	r3, r9
 8012d5c:	f7ed fc6c 	bl	8000638 <__aeabi_dmul>
 8012d60:	4602      	mov	r2, r0
 8012d62:	460b      	mov	r3, r1
 8012d64:	4630      	mov	r0, r6
 8012d66:	4639      	mov	r1, r7
 8012d68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012d6c:	f7ed faac 	bl	80002c8 <__aeabi_dsub>
 8012d70:	f805 6b01 	strb.w	r6, [r5], #1
 8012d74:	9e01      	ldr	r6, [sp, #4]
 8012d76:	9f03      	ldr	r7, [sp, #12]
 8012d78:	1bae      	subs	r6, r5, r6
 8012d7a:	42b7      	cmp	r7, r6
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	d135      	bne.n	8012dee <_dtoa_r+0x6e6>
 8012d82:	f7ed faa3 	bl	80002cc <__adddf3>
 8012d86:	4642      	mov	r2, r8
 8012d88:	464b      	mov	r3, r9
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	460f      	mov	r7, r1
 8012d8e:	f7ed fee3 	bl	8000b58 <__aeabi_dcmpgt>
 8012d92:	b9d0      	cbnz	r0, 8012dca <_dtoa_r+0x6c2>
 8012d94:	4642      	mov	r2, r8
 8012d96:	464b      	mov	r3, r9
 8012d98:	4630      	mov	r0, r6
 8012d9a:	4639      	mov	r1, r7
 8012d9c:	f7ed feb4 	bl	8000b08 <__aeabi_dcmpeq>
 8012da0:	b110      	cbz	r0, 8012da8 <_dtoa_r+0x6a0>
 8012da2:	f01a 0f01 	tst.w	sl, #1
 8012da6:	d110      	bne.n	8012dca <_dtoa_r+0x6c2>
 8012da8:	4620      	mov	r0, r4
 8012daa:	ee18 1a10 	vmov	r1, s16
 8012dae:	f000 fe87 	bl	8013ac0 <_Bfree>
 8012db2:	2300      	movs	r3, #0
 8012db4:	9800      	ldr	r0, [sp, #0]
 8012db6:	702b      	strb	r3, [r5, #0]
 8012db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dba:	3001      	adds	r0, #1
 8012dbc:	6018      	str	r0, [r3, #0]
 8012dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f43f acf1 	beq.w	80127a8 <_dtoa_r+0xa0>
 8012dc6:	601d      	str	r5, [r3, #0]
 8012dc8:	e4ee      	b.n	80127a8 <_dtoa_r+0xa0>
 8012dca:	9f00      	ldr	r7, [sp, #0]
 8012dcc:	462b      	mov	r3, r5
 8012dce:	461d      	mov	r5, r3
 8012dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012dd4:	2a39      	cmp	r2, #57	; 0x39
 8012dd6:	d106      	bne.n	8012de6 <_dtoa_r+0x6de>
 8012dd8:	9a01      	ldr	r2, [sp, #4]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d1f7      	bne.n	8012dce <_dtoa_r+0x6c6>
 8012dde:	9901      	ldr	r1, [sp, #4]
 8012de0:	2230      	movs	r2, #48	; 0x30
 8012de2:	3701      	adds	r7, #1
 8012de4:	700a      	strb	r2, [r1, #0]
 8012de6:	781a      	ldrb	r2, [r3, #0]
 8012de8:	3201      	adds	r2, #1
 8012dea:	701a      	strb	r2, [r3, #0]
 8012dec:	e790      	b.n	8012d10 <_dtoa_r+0x608>
 8012dee:	4ba6      	ldr	r3, [pc, #664]	; (8013088 <_dtoa_r+0x980>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	f7ed fc21 	bl	8000638 <__aeabi_dmul>
 8012df6:	2200      	movs	r2, #0
 8012df8:	2300      	movs	r3, #0
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460f      	mov	r7, r1
 8012dfe:	f7ed fe83 	bl	8000b08 <__aeabi_dcmpeq>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d09d      	beq.n	8012d42 <_dtoa_r+0x63a>
 8012e06:	e7cf      	b.n	8012da8 <_dtoa_r+0x6a0>
 8012e08:	9a08      	ldr	r2, [sp, #32]
 8012e0a:	2a00      	cmp	r2, #0
 8012e0c:	f000 80d7 	beq.w	8012fbe <_dtoa_r+0x8b6>
 8012e10:	9a06      	ldr	r2, [sp, #24]
 8012e12:	2a01      	cmp	r2, #1
 8012e14:	f300 80ba 	bgt.w	8012f8c <_dtoa_r+0x884>
 8012e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e1a:	2a00      	cmp	r2, #0
 8012e1c:	f000 80b2 	beq.w	8012f84 <_dtoa_r+0x87c>
 8012e20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012e24:	9e07      	ldr	r6, [sp, #28]
 8012e26:	9d04      	ldr	r5, [sp, #16]
 8012e28:	9a04      	ldr	r2, [sp, #16]
 8012e2a:	441a      	add	r2, r3
 8012e2c:	9204      	str	r2, [sp, #16]
 8012e2e:	9a05      	ldr	r2, [sp, #20]
 8012e30:	2101      	movs	r1, #1
 8012e32:	441a      	add	r2, r3
 8012e34:	4620      	mov	r0, r4
 8012e36:	9205      	str	r2, [sp, #20]
 8012e38:	f000 ff44 	bl	8013cc4 <__i2b>
 8012e3c:	4607      	mov	r7, r0
 8012e3e:	2d00      	cmp	r5, #0
 8012e40:	dd0c      	ble.n	8012e5c <_dtoa_r+0x754>
 8012e42:	9b05      	ldr	r3, [sp, #20]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	dd09      	ble.n	8012e5c <_dtoa_r+0x754>
 8012e48:	42ab      	cmp	r3, r5
 8012e4a:	9a04      	ldr	r2, [sp, #16]
 8012e4c:	bfa8      	it	ge
 8012e4e:	462b      	movge	r3, r5
 8012e50:	1ad2      	subs	r2, r2, r3
 8012e52:	9204      	str	r2, [sp, #16]
 8012e54:	9a05      	ldr	r2, [sp, #20]
 8012e56:	1aed      	subs	r5, r5, r3
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	9305      	str	r3, [sp, #20]
 8012e5c:	9b07      	ldr	r3, [sp, #28]
 8012e5e:	b31b      	cbz	r3, 8012ea8 <_dtoa_r+0x7a0>
 8012e60:	9b08      	ldr	r3, [sp, #32]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f000 80af 	beq.w	8012fc6 <_dtoa_r+0x8be>
 8012e68:	2e00      	cmp	r6, #0
 8012e6a:	dd13      	ble.n	8012e94 <_dtoa_r+0x78c>
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	4632      	mov	r2, r6
 8012e70:	4620      	mov	r0, r4
 8012e72:	f000 ffe7 	bl	8013e44 <__pow5mult>
 8012e76:	ee18 2a10 	vmov	r2, s16
 8012e7a:	4601      	mov	r1, r0
 8012e7c:	4607      	mov	r7, r0
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 ff36 	bl	8013cf0 <__multiply>
 8012e84:	ee18 1a10 	vmov	r1, s16
 8012e88:	4680      	mov	r8, r0
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f000 fe18 	bl	8013ac0 <_Bfree>
 8012e90:	ee08 8a10 	vmov	s16, r8
 8012e94:	9b07      	ldr	r3, [sp, #28]
 8012e96:	1b9a      	subs	r2, r3, r6
 8012e98:	d006      	beq.n	8012ea8 <_dtoa_r+0x7a0>
 8012e9a:	ee18 1a10 	vmov	r1, s16
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f000 ffd0 	bl	8013e44 <__pow5mult>
 8012ea4:	ee08 0a10 	vmov	s16, r0
 8012ea8:	2101      	movs	r1, #1
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f000 ff0a 	bl	8013cc4 <__i2b>
 8012eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	4606      	mov	r6, r0
 8012eb6:	f340 8088 	ble.w	8012fca <_dtoa_r+0x8c2>
 8012eba:	461a      	mov	r2, r3
 8012ebc:	4601      	mov	r1, r0
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f000 ffc0 	bl	8013e44 <__pow5mult>
 8012ec4:	9b06      	ldr	r3, [sp, #24]
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	4606      	mov	r6, r0
 8012eca:	f340 8081 	ble.w	8012fd0 <_dtoa_r+0x8c8>
 8012ece:	f04f 0800 	mov.w	r8, #0
 8012ed2:	6933      	ldr	r3, [r6, #16]
 8012ed4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ed8:	6918      	ldr	r0, [r3, #16]
 8012eda:	f000 fea3 	bl	8013c24 <__hi0bits>
 8012ede:	f1c0 0020 	rsb	r0, r0, #32
 8012ee2:	9b05      	ldr	r3, [sp, #20]
 8012ee4:	4418      	add	r0, r3
 8012ee6:	f010 001f 	ands.w	r0, r0, #31
 8012eea:	f000 8092 	beq.w	8013012 <_dtoa_r+0x90a>
 8012eee:	f1c0 0320 	rsb	r3, r0, #32
 8012ef2:	2b04      	cmp	r3, #4
 8012ef4:	f340 808a 	ble.w	801300c <_dtoa_r+0x904>
 8012ef8:	f1c0 001c 	rsb	r0, r0, #28
 8012efc:	9b04      	ldr	r3, [sp, #16]
 8012efe:	4403      	add	r3, r0
 8012f00:	9304      	str	r3, [sp, #16]
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	4403      	add	r3, r0
 8012f06:	4405      	add	r5, r0
 8012f08:	9305      	str	r3, [sp, #20]
 8012f0a:	9b04      	ldr	r3, [sp, #16]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	dd07      	ble.n	8012f20 <_dtoa_r+0x818>
 8012f10:	ee18 1a10 	vmov	r1, s16
 8012f14:	461a      	mov	r2, r3
 8012f16:	4620      	mov	r0, r4
 8012f18:	f000 ffee 	bl	8013ef8 <__lshift>
 8012f1c:	ee08 0a10 	vmov	s16, r0
 8012f20:	9b05      	ldr	r3, [sp, #20]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	dd05      	ble.n	8012f32 <_dtoa_r+0x82a>
 8012f26:	4631      	mov	r1, r6
 8012f28:	461a      	mov	r2, r3
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f000 ffe4 	bl	8013ef8 <__lshift>
 8012f30:	4606      	mov	r6, r0
 8012f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d06e      	beq.n	8013016 <_dtoa_r+0x90e>
 8012f38:	ee18 0a10 	vmov	r0, s16
 8012f3c:	4631      	mov	r1, r6
 8012f3e:	f001 f84b 	bl	8013fd8 <__mcmp>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	da67      	bge.n	8013016 <_dtoa_r+0x90e>
 8012f46:	9b00      	ldr	r3, [sp, #0]
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	ee18 1a10 	vmov	r1, s16
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	220a      	movs	r2, #10
 8012f52:	2300      	movs	r3, #0
 8012f54:	4620      	mov	r0, r4
 8012f56:	f000 fdd5 	bl	8013b04 <__multadd>
 8012f5a:	9b08      	ldr	r3, [sp, #32]
 8012f5c:	ee08 0a10 	vmov	s16, r0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	f000 81b1 	beq.w	80132c8 <_dtoa_r+0xbc0>
 8012f66:	2300      	movs	r3, #0
 8012f68:	4639      	mov	r1, r7
 8012f6a:	220a      	movs	r2, #10
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f000 fdc9 	bl	8013b04 <__multadd>
 8012f72:	9b02      	ldr	r3, [sp, #8]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	4607      	mov	r7, r0
 8012f78:	f300 808e 	bgt.w	8013098 <_dtoa_r+0x990>
 8012f7c:	9b06      	ldr	r3, [sp, #24]
 8012f7e:	2b02      	cmp	r3, #2
 8012f80:	dc51      	bgt.n	8013026 <_dtoa_r+0x91e>
 8012f82:	e089      	b.n	8013098 <_dtoa_r+0x990>
 8012f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012f8a:	e74b      	b.n	8012e24 <_dtoa_r+0x71c>
 8012f8c:	9b03      	ldr	r3, [sp, #12]
 8012f8e:	1e5e      	subs	r6, r3, #1
 8012f90:	9b07      	ldr	r3, [sp, #28]
 8012f92:	42b3      	cmp	r3, r6
 8012f94:	bfbf      	itttt	lt
 8012f96:	9b07      	ldrlt	r3, [sp, #28]
 8012f98:	9607      	strlt	r6, [sp, #28]
 8012f9a:	1af2      	sublt	r2, r6, r3
 8012f9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012f9e:	bfb6      	itet	lt
 8012fa0:	189b      	addlt	r3, r3, r2
 8012fa2:	1b9e      	subge	r6, r3, r6
 8012fa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012fa6:	9b03      	ldr	r3, [sp, #12]
 8012fa8:	bfb8      	it	lt
 8012faa:	2600      	movlt	r6, #0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	bfb7      	itett	lt
 8012fb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012fb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012fb8:	1a9d      	sublt	r5, r3, r2
 8012fba:	2300      	movlt	r3, #0
 8012fbc:	e734      	b.n	8012e28 <_dtoa_r+0x720>
 8012fbe:	9e07      	ldr	r6, [sp, #28]
 8012fc0:	9d04      	ldr	r5, [sp, #16]
 8012fc2:	9f08      	ldr	r7, [sp, #32]
 8012fc4:	e73b      	b.n	8012e3e <_dtoa_r+0x736>
 8012fc6:	9a07      	ldr	r2, [sp, #28]
 8012fc8:	e767      	b.n	8012e9a <_dtoa_r+0x792>
 8012fca:	9b06      	ldr	r3, [sp, #24]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	dc18      	bgt.n	8013002 <_dtoa_r+0x8fa>
 8012fd0:	f1ba 0f00 	cmp.w	sl, #0
 8012fd4:	d115      	bne.n	8013002 <_dtoa_r+0x8fa>
 8012fd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fda:	b993      	cbnz	r3, 8013002 <_dtoa_r+0x8fa>
 8012fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012fe0:	0d1b      	lsrs	r3, r3, #20
 8012fe2:	051b      	lsls	r3, r3, #20
 8012fe4:	b183      	cbz	r3, 8013008 <_dtoa_r+0x900>
 8012fe6:	9b04      	ldr	r3, [sp, #16]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	9304      	str	r3, [sp, #16]
 8012fec:	9b05      	ldr	r3, [sp, #20]
 8012fee:	3301      	adds	r3, #1
 8012ff0:	9305      	str	r3, [sp, #20]
 8012ff2:	f04f 0801 	mov.w	r8, #1
 8012ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	f47f af6a 	bne.w	8012ed2 <_dtoa_r+0x7ca>
 8012ffe:	2001      	movs	r0, #1
 8013000:	e76f      	b.n	8012ee2 <_dtoa_r+0x7da>
 8013002:	f04f 0800 	mov.w	r8, #0
 8013006:	e7f6      	b.n	8012ff6 <_dtoa_r+0x8ee>
 8013008:	4698      	mov	r8, r3
 801300a:	e7f4      	b.n	8012ff6 <_dtoa_r+0x8ee>
 801300c:	f43f af7d 	beq.w	8012f0a <_dtoa_r+0x802>
 8013010:	4618      	mov	r0, r3
 8013012:	301c      	adds	r0, #28
 8013014:	e772      	b.n	8012efc <_dtoa_r+0x7f4>
 8013016:	9b03      	ldr	r3, [sp, #12]
 8013018:	2b00      	cmp	r3, #0
 801301a:	dc37      	bgt.n	801308c <_dtoa_r+0x984>
 801301c:	9b06      	ldr	r3, [sp, #24]
 801301e:	2b02      	cmp	r3, #2
 8013020:	dd34      	ble.n	801308c <_dtoa_r+0x984>
 8013022:	9b03      	ldr	r3, [sp, #12]
 8013024:	9302      	str	r3, [sp, #8]
 8013026:	9b02      	ldr	r3, [sp, #8]
 8013028:	b96b      	cbnz	r3, 8013046 <_dtoa_r+0x93e>
 801302a:	4631      	mov	r1, r6
 801302c:	2205      	movs	r2, #5
 801302e:	4620      	mov	r0, r4
 8013030:	f000 fd68 	bl	8013b04 <__multadd>
 8013034:	4601      	mov	r1, r0
 8013036:	4606      	mov	r6, r0
 8013038:	ee18 0a10 	vmov	r0, s16
 801303c:	f000 ffcc 	bl	8013fd8 <__mcmp>
 8013040:	2800      	cmp	r0, #0
 8013042:	f73f adbb 	bgt.w	8012bbc <_dtoa_r+0x4b4>
 8013046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013048:	9d01      	ldr	r5, [sp, #4]
 801304a:	43db      	mvns	r3, r3
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	f04f 0800 	mov.w	r8, #0
 8013052:	4631      	mov	r1, r6
 8013054:	4620      	mov	r0, r4
 8013056:	f000 fd33 	bl	8013ac0 <_Bfree>
 801305a:	2f00      	cmp	r7, #0
 801305c:	f43f aea4 	beq.w	8012da8 <_dtoa_r+0x6a0>
 8013060:	f1b8 0f00 	cmp.w	r8, #0
 8013064:	d005      	beq.n	8013072 <_dtoa_r+0x96a>
 8013066:	45b8      	cmp	r8, r7
 8013068:	d003      	beq.n	8013072 <_dtoa_r+0x96a>
 801306a:	4641      	mov	r1, r8
 801306c:	4620      	mov	r0, r4
 801306e:	f000 fd27 	bl	8013ac0 <_Bfree>
 8013072:	4639      	mov	r1, r7
 8013074:	4620      	mov	r0, r4
 8013076:	f000 fd23 	bl	8013ac0 <_Bfree>
 801307a:	e695      	b.n	8012da8 <_dtoa_r+0x6a0>
 801307c:	2600      	movs	r6, #0
 801307e:	4637      	mov	r7, r6
 8013080:	e7e1      	b.n	8013046 <_dtoa_r+0x93e>
 8013082:	9700      	str	r7, [sp, #0]
 8013084:	4637      	mov	r7, r6
 8013086:	e599      	b.n	8012bbc <_dtoa_r+0x4b4>
 8013088:	40240000 	.word	0x40240000
 801308c:	9b08      	ldr	r3, [sp, #32]
 801308e:	2b00      	cmp	r3, #0
 8013090:	f000 80ca 	beq.w	8013228 <_dtoa_r+0xb20>
 8013094:	9b03      	ldr	r3, [sp, #12]
 8013096:	9302      	str	r3, [sp, #8]
 8013098:	2d00      	cmp	r5, #0
 801309a:	dd05      	ble.n	80130a8 <_dtoa_r+0x9a0>
 801309c:	4639      	mov	r1, r7
 801309e:	462a      	mov	r2, r5
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 ff29 	bl	8013ef8 <__lshift>
 80130a6:	4607      	mov	r7, r0
 80130a8:	f1b8 0f00 	cmp.w	r8, #0
 80130ac:	d05b      	beq.n	8013166 <_dtoa_r+0xa5e>
 80130ae:	6879      	ldr	r1, [r7, #4]
 80130b0:	4620      	mov	r0, r4
 80130b2:	f000 fcc5 	bl	8013a40 <_Balloc>
 80130b6:	4605      	mov	r5, r0
 80130b8:	b928      	cbnz	r0, 80130c6 <_dtoa_r+0x9be>
 80130ba:	4b87      	ldr	r3, [pc, #540]	; (80132d8 <_dtoa_r+0xbd0>)
 80130bc:	4602      	mov	r2, r0
 80130be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80130c2:	f7ff bb3b 	b.w	801273c <_dtoa_r+0x34>
 80130c6:	693a      	ldr	r2, [r7, #16]
 80130c8:	3202      	adds	r2, #2
 80130ca:	0092      	lsls	r2, r2, #2
 80130cc:	f107 010c 	add.w	r1, r7, #12
 80130d0:	300c      	adds	r0, #12
 80130d2:	f000 fca7 	bl	8013a24 <memcpy>
 80130d6:	2201      	movs	r2, #1
 80130d8:	4629      	mov	r1, r5
 80130da:	4620      	mov	r0, r4
 80130dc:	f000 ff0c 	bl	8013ef8 <__lshift>
 80130e0:	9b01      	ldr	r3, [sp, #4]
 80130e2:	f103 0901 	add.w	r9, r3, #1
 80130e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80130ea:	4413      	add	r3, r2
 80130ec:	9305      	str	r3, [sp, #20]
 80130ee:	f00a 0301 	and.w	r3, sl, #1
 80130f2:	46b8      	mov	r8, r7
 80130f4:	9304      	str	r3, [sp, #16]
 80130f6:	4607      	mov	r7, r0
 80130f8:	4631      	mov	r1, r6
 80130fa:	ee18 0a10 	vmov	r0, s16
 80130fe:	f7ff fa75 	bl	80125ec <quorem>
 8013102:	4641      	mov	r1, r8
 8013104:	9002      	str	r0, [sp, #8]
 8013106:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801310a:	ee18 0a10 	vmov	r0, s16
 801310e:	f000 ff63 	bl	8013fd8 <__mcmp>
 8013112:	463a      	mov	r2, r7
 8013114:	9003      	str	r0, [sp, #12]
 8013116:	4631      	mov	r1, r6
 8013118:	4620      	mov	r0, r4
 801311a:	f000 ff79 	bl	8014010 <__mdiff>
 801311e:	68c2      	ldr	r2, [r0, #12]
 8013120:	f109 3bff 	add.w	fp, r9, #4294967295
 8013124:	4605      	mov	r5, r0
 8013126:	bb02      	cbnz	r2, 801316a <_dtoa_r+0xa62>
 8013128:	4601      	mov	r1, r0
 801312a:	ee18 0a10 	vmov	r0, s16
 801312e:	f000 ff53 	bl	8013fd8 <__mcmp>
 8013132:	4602      	mov	r2, r0
 8013134:	4629      	mov	r1, r5
 8013136:	4620      	mov	r0, r4
 8013138:	9207      	str	r2, [sp, #28]
 801313a:	f000 fcc1 	bl	8013ac0 <_Bfree>
 801313e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013142:	ea43 0102 	orr.w	r1, r3, r2
 8013146:	9b04      	ldr	r3, [sp, #16]
 8013148:	430b      	orrs	r3, r1
 801314a:	464d      	mov	r5, r9
 801314c:	d10f      	bne.n	801316e <_dtoa_r+0xa66>
 801314e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013152:	d02a      	beq.n	80131aa <_dtoa_r+0xaa2>
 8013154:	9b03      	ldr	r3, [sp, #12]
 8013156:	2b00      	cmp	r3, #0
 8013158:	dd02      	ble.n	8013160 <_dtoa_r+0xa58>
 801315a:	9b02      	ldr	r3, [sp, #8]
 801315c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013160:	f88b a000 	strb.w	sl, [fp]
 8013164:	e775      	b.n	8013052 <_dtoa_r+0x94a>
 8013166:	4638      	mov	r0, r7
 8013168:	e7ba      	b.n	80130e0 <_dtoa_r+0x9d8>
 801316a:	2201      	movs	r2, #1
 801316c:	e7e2      	b.n	8013134 <_dtoa_r+0xa2c>
 801316e:	9b03      	ldr	r3, [sp, #12]
 8013170:	2b00      	cmp	r3, #0
 8013172:	db04      	blt.n	801317e <_dtoa_r+0xa76>
 8013174:	9906      	ldr	r1, [sp, #24]
 8013176:	430b      	orrs	r3, r1
 8013178:	9904      	ldr	r1, [sp, #16]
 801317a:	430b      	orrs	r3, r1
 801317c:	d122      	bne.n	80131c4 <_dtoa_r+0xabc>
 801317e:	2a00      	cmp	r2, #0
 8013180:	ddee      	ble.n	8013160 <_dtoa_r+0xa58>
 8013182:	ee18 1a10 	vmov	r1, s16
 8013186:	2201      	movs	r2, #1
 8013188:	4620      	mov	r0, r4
 801318a:	f000 feb5 	bl	8013ef8 <__lshift>
 801318e:	4631      	mov	r1, r6
 8013190:	ee08 0a10 	vmov	s16, r0
 8013194:	f000 ff20 	bl	8013fd8 <__mcmp>
 8013198:	2800      	cmp	r0, #0
 801319a:	dc03      	bgt.n	80131a4 <_dtoa_r+0xa9c>
 801319c:	d1e0      	bne.n	8013160 <_dtoa_r+0xa58>
 801319e:	f01a 0f01 	tst.w	sl, #1
 80131a2:	d0dd      	beq.n	8013160 <_dtoa_r+0xa58>
 80131a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80131a8:	d1d7      	bne.n	801315a <_dtoa_r+0xa52>
 80131aa:	2339      	movs	r3, #57	; 0x39
 80131ac:	f88b 3000 	strb.w	r3, [fp]
 80131b0:	462b      	mov	r3, r5
 80131b2:	461d      	mov	r5, r3
 80131b4:	3b01      	subs	r3, #1
 80131b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80131ba:	2a39      	cmp	r2, #57	; 0x39
 80131bc:	d071      	beq.n	80132a2 <_dtoa_r+0xb9a>
 80131be:	3201      	adds	r2, #1
 80131c0:	701a      	strb	r2, [r3, #0]
 80131c2:	e746      	b.n	8013052 <_dtoa_r+0x94a>
 80131c4:	2a00      	cmp	r2, #0
 80131c6:	dd07      	ble.n	80131d8 <_dtoa_r+0xad0>
 80131c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80131cc:	d0ed      	beq.n	80131aa <_dtoa_r+0xaa2>
 80131ce:	f10a 0301 	add.w	r3, sl, #1
 80131d2:	f88b 3000 	strb.w	r3, [fp]
 80131d6:	e73c      	b.n	8013052 <_dtoa_r+0x94a>
 80131d8:	9b05      	ldr	r3, [sp, #20]
 80131da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80131de:	4599      	cmp	r9, r3
 80131e0:	d047      	beq.n	8013272 <_dtoa_r+0xb6a>
 80131e2:	ee18 1a10 	vmov	r1, s16
 80131e6:	2300      	movs	r3, #0
 80131e8:	220a      	movs	r2, #10
 80131ea:	4620      	mov	r0, r4
 80131ec:	f000 fc8a 	bl	8013b04 <__multadd>
 80131f0:	45b8      	cmp	r8, r7
 80131f2:	ee08 0a10 	vmov	s16, r0
 80131f6:	f04f 0300 	mov.w	r3, #0
 80131fa:	f04f 020a 	mov.w	r2, #10
 80131fe:	4641      	mov	r1, r8
 8013200:	4620      	mov	r0, r4
 8013202:	d106      	bne.n	8013212 <_dtoa_r+0xb0a>
 8013204:	f000 fc7e 	bl	8013b04 <__multadd>
 8013208:	4680      	mov	r8, r0
 801320a:	4607      	mov	r7, r0
 801320c:	f109 0901 	add.w	r9, r9, #1
 8013210:	e772      	b.n	80130f8 <_dtoa_r+0x9f0>
 8013212:	f000 fc77 	bl	8013b04 <__multadd>
 8013216:	4639      	mov	r1, r7
 8013218:	4680      	mov	r8, r0
 801321a:	2300      	movs	r3, #0
 801321c:	220a      	movs	r2, #10
 801321e:	4620      	mov	r0, r4
 8013220:	f000 fc70 	bl	8013b04 <__multadd>
 8013224:	4607      	mov	r7, r0
 8013226:	e7f1      	b.n	801320c <_dtoa_r+0xb04>
 8013228:	9b03      	ldr	r3, [sp, #12]
 801322a:	9302      	str	r3, [sp, #8]
 801322c:	9d01      	ldr	r5, [sp, #4]
 801322e:	ee18 0a10 	vmov	r0, s16
 8013232:	4631      	mov	r1, r6
 8013234:	f7ff f9da 	bl	80125ec <quorem>
 8013238:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801323c:	9b01      	ldr	r3, [sp, #4]
 801323e:	f805 ab01 	strb.w	sl, [r5], #1
 8013242:	1aea      	subs	r2, r5, r3
 8013244:	9b02      	ldr	r3, [sp, #8]
 8013246:	4293      	cmp	r3, r2
 8013248:	dd09      	ble.n	801325e <_dtoa_r+0xb56>
 801324a:	ee18 1a10 	vmov	r1, s16
 801324e:	2300      	movs	r3, #0
 8013250:	220a      	movs	r2, #10
 8013252:	4620      	mov	r0, r4
 8013254:	f000 fc56 	bl	8013b04 <__multadd>
 8013258:	ee08 0a10 	vmov	s16, r0
 801325c:	e7e7      	b.n	801322e <_dtoa_r+0xb26>
 801325e:	9b02      	ldr	r3, [sp, #8]
 8013260:	2b00      	cmp	r3, #0
 8013262:	bfc8      	it	gt
 8013264:	461d      	movgt	r5, r3
 8013266:	9b01      	ldr	r3, [sp, #4]
 8013268:	bfd8      	it	le
 801326a:	2501      	movle	r5, #1
 801326c:	441d      	add	r5, r3
 801326e:	f04f 0800 	mov.w	r8, #0
 8013272:	ee18 1a10 	vmov	r1, s16
 8013276:	2201      	movs	r2, #1
 8013278:	4620      	mov	r0, r4
 801327a:	f000 fe3d 	bl	8013ef8 <__lshift>
 801327e:	4631      	mov	r1, r6
 8013280:	ee08 0a10 	vmov	s16, r0
 8013284:	f000 fea8 	bl	8013fd8 <__mcmp>
 8013288:	2800      	cmp	r0, #0
 801328a:	dc91      	bgt.n	80131b0 <_dtoa_r+0xaa8>
 801328c:	d102      	bne.n	8013294 <_dtoa_r+0xb8c>
 801328e:	f01a 0f01 	tst.w	sl, #1
 8013292:	d18d      	bne.n	80131b0 <_dtoa_r+0xaa8>
 8013294:	462b      	mov	r3, r5
 8013296:	461d      	mov	r5, r3
 8013298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801329c:	2a30      	cmp	r2, #48	; 0x30
 801329e:	d0fa      	beq.n	8013296 <_dtoa_r+0xb8e>
 80132a0:	e6d7      	b.n	8013052 <_dtoa_r+0x94a>
 80132a2:	9a01      	ldr	r2, [sp, #4]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d184      	bne.n	80131b2 <_dtoa_r+0xaaa>
 80132a8:	9b00      	ldr	r3, [sp, #0]
 80132aa:	3301      	adds	r3, #1
 80132ac:	9300      	str	r3, [sp, #0]
 80132ae:	2331      	movs	r3, #49	; 0x31
 80132b0:	7013      	strb	r3, [r2, #0]
 80132b2:	e6ce      	b.n	8013052 <_dtoa_r+0x94a>
 80132b4:	4b09      	ldr	r3, [pc, #36]	; (80132dc <_dtoa_r+0xbd4>)
 80132b6:	f7ff ba95 	b.w	80127e4 <_dtoa_r+0xdc>
 80132ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f47f aa6e 	bne.w	801279e <_dtoa_r+0x96>
 80132c2:	4b07      	ldr	r3, [pc, #28]	; (80132e0 <_dtoa_r+0xbd8>)
 80132c4:	f7ff ba8e 	b.w	80127e4 <_dtoa_r+0xdc>
 80132c8:	9b02      	ldr	r3, [sp, #8]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	dcae      	bgt.n	801322c <_dtoa_r+0xb24>
 80132ce:	9b06      	ldr	r3, [sp, #24]
 80132d0:	2b02      	cmp	r3, #2
 80132d2:	f73f aea8 	bgt.w	8013026 <_dtoa_r+0x91e>
 80132d6:	e7a9      	b.n	801322c <_dtoa_r+0xb24>
 80132d8:	08018278 	.word	0x08018278
 80132dc:	08018471 	.word	0x08018471
 80132e0:	080181f9 	.word	0x080181f9

080132e4 <rshift>:
 80132e4:	6903      	ldr	r3, [r0, #16]
 80132e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80132ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80132f2:	f100 0414 	add.w	r4, r0, #20
 80132f6:	dd45      	ble.n	8013384 <rshift+0xa0>
 80132f8:	f011 011f 	ands.w	r1, r1, #31
 80132fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013304:	d10c      	bne.n	8013320 <rshift+0x3c>
 8013306:	f100 0710 	add.w	r7, r0, #16
 801330a:	4629      	mov	r1, r5
 801330c:	42b1      	cmp	r1, r6
 801330e:	d334      	bcc.n	801337a <rshift+0x96>
 8013310:	1a9b      	subs	r3, r3, r2
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	1eea      	subs	r2, r5, #3
 8013316:	4296      	cmp	r6, r2
 8013318:	bf38      	it	cc
 801331a:	2300      	movcc	r3, #0
 801331c:	4423      	add	r3, r4
 801331e:	e015      	b.n	801334c <rshift+0x68>
 8013320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013324:	f1c1 0820 	rsb	r8, r1, #32
 8013328:	40cf      	lsrs	r7, r1
 801332a:	f105 0e04 	add.w	lr, r5, #4
 801332e:	46a1      	mov	r9, r4
 8013330:	4576      	cmp	r6, lr
 8013332:	46f4      	mov	ip, lr
 8013334:	d815      	bhi.n	8013362 <rshift+0x7e>
 8013336:	1a9a      	subs	r2, r3, r2
 8013338:	0092      	lsls	r2, r2, #2
 801333a:	3a04      	subs	r2, #4
 801333c:	3501      	adds	r5, #1
 801333e:	42ae      	cmp	r6, r5
 8013340:	bf38      	it	cc
 8013342:	2200      	movcc	r2, #0
 8013344:	18a3      	adds	r3, r4, r2
 8013346:	50a7      	str	r7, [r4, r2]
 8013348:	b107      	cbz	r7, 801334c <rshift+0x68>
 801334a:	3304      	adds	r3, #4
 801334c:	1b1a      	subs	r2, r3, r4
 801334e:	42a3      	cmp	r3, r4
 8013350:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013354:	bf08      	it	eq
 8013356:	2300      	moveq	r3, #0
 8013358:	6102      	str	r2, [r0, #16]
 801335a:	bf08      	it	eq
 801335c:	6143      	streq	r3, [r0, #20]
 801335e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013362:	f8dc c000 	ldr.w	ip, [ip]
 8013366:	fa0c fc08 	lsl.w	ip, ip, r8
 801336a:	ea4c 0707 	orr.w	r7, ip, r7
 801336e:	f849 7b04 	str.w	r7, [r9], #4
 8013372:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013376:	40cf      	lsrs	r7, r1
 8013378:	e7da      	b.n	8013330 <rshift+0x4c>
 801337a:	f851 cb04 	ldr.w	ip, [r1], #4
 801337e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013382:	e7c3      	b.n	801330c <rshift+0x28>
 8013384:	4623      	mov	r3, r4
 8013386:	e7e1      	b.n	801334c <rshift+0x68>

08013388 <__hexdig_fun>:
 8013388:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801338c:	2b09      	cmp	r3, #9
 801338e:	d802      	bhi.n	8013396 <__hexdig_fun+0xe>
 8013390:	3820      	subs	r0, #32
 8013392:	b2c0      	uxtb	r0, r0
 8013394:	4770      	bx	lr
 8013396:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801339a:	2b05      	cmp	r3, #5
 801339c:	d801      	bhi.n	80133a2 <__hexdig_fun+0x1a>
 801339e:	3847      	subs	r0, #71	; 0x47
 80133a0:	e7f7      	b.n	8013392 <__hexdig_fun+0xa>
 80133a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80133a6:	2b05      	cmp	r3, #5
 80133a8:	d801      	bhi.n	80133ae <__hexdig_fun+0x26>
 80133aa:	3827      	subs	r0, #39	; 0x27
 80133ac:	e7f1      	b.n	8013392 <__hexdig_fun+0xa>
 80133ae:	2000      	movs	r0, #0
 80133b0:	4770      	bx	lr
	...

080133b4 <__gethex>:
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b8:	ed2d 8b02 	vpush	{d8}
 80133bc:	b089      	sub	sp, #36	; 0x24
 80133be:	ee08 0a10 	vmov	s16, r0
 80133c2:	9304      	str	r3, [sp, #16]
 80133c4:	4bb4      	ldr	r3, [pc, #720]	; (8013698 <__gethex+0x2e4>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	9301      	str	r3, [sp, #4]
 80133ca:	4618      	mov	r0, r3
 80133cc:	468b      	mov	fp, r1
 80133ce:	4690      	mov	r8, r2
 80133d0:	f7ec ff1e 	bl	8000210 <strlen>
 80133d4:	9b01      	ldr	r3, [sp, #4]
 80133d6:	f8db 2000 	ldr.w	r2, [fp]
 80133da:	4403      	add	r3, r0
 80133dc:	4682      	mov	sl, r0
 80133de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80133e2:	9305      	str	r3, [sp, #20]
 80133e4:	1c93      	adds	r3, r2, #2
 80133e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80133ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80133ee:	32fe      	adds	r2, #254	; 0xfe
 80133f0:	18d1      	adds	r1, r2, r3
 80133f2:	461f      	mov	r7, r3
 80133f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80133f8:	9100      	str	r1, [sp, #0]
 80133fa:	2830      	cmp	r0, #48	; 0x30
 80133fc:	d0f8      	beq.n	80133f0 <__gethex+0x3c>
 80133fe:	f7ff ffc3 	bl	8013388 <__hexdig_fun>
 8013402:	4604      	mov	r4, r0
 8013404:	2800      	cmp	r0, #0
 8013406:	d13a      	bne.n	801347e <__gethex+0xca>
 8013408:	9901      	ldr	r1, [sp, #4]
 801340a:	4652      	mov	r2, sl
 801340c:	4638      	mov	r0, r7
 801340e:	f001 fdb3 	bl	8014f78 <strncmp>
 8013412:	4605      	mov	r5, r0
 8013414:	2800      	cmp	r0, #0
 8013416:	d168      	bne.n	80134ea <__gethex+0x136>
 8013418:	f817 000a 	ldrb.w	r0, [r7, sl]
 801341c:	eb07 060a 	add.w	r6, r7, sl
 8013420:	f7ff ffb2 	bl	8013388 <__hexdig_fun>
 8013424:	2800      	cmp	r0, #0
 8013426:	d062      	beq.n	80134ee <__gethex+0x13a>
 8013428:	4633      	mov	r3, r6
 801342a:	7818      	ldrb	r0, [r3, #0]
 801342c:	2830      	cmp	r0, #48	; 0x30
 801342e:	461f      	mov	r7, r3
 8013430:	f103 0301 	add.w	r3, r3, #1
 8013434:	d0f9      	beq.n	801342a <__gethex+0x76>
 8013436:	f7ff ffa7 	bl	8013388 <__hexdig_fun>
 801343a:	2301      	movs	r3, #1
 801343c:	fab0 f480 	clz	r4, r0
 8013440:	0964      	lsrs	r4, r4, #5
 8013442:	4635      	mov	r5, r6
 8013444:	9300      	str	r3, [sp, #0]
 8013446:	463a      	mov	r2, r7
 8013448:	4616      	mov	r6, r2
 801344a:	3201      	adds	r2, #1
 801344c:	7830      	ldrb	r0, [r6, #0]
 801344e:	f7ff ff9b 	bl	8013388 <__hexdig_fun>
 8013452:	2800      	cmp	r0, #0
 8013454:	d1f8      	bne.n	8013448 <__gethex+0x94>
 8013456:	9901      	ldr	r1, [sp, #4]
 8013458:	4652      	mov	r2, sl
 801345a:	4630      	mov	r0, r6
 801345c:	f001 fd8c 	bl	8014f78 <strncmp>
 8013460:	b980      	cbnz	r0, 8013484 <__gethex+0xd0>
 8013462:	b94d      	cbnz	r5, 8013478 <__gethex+0xc4>
 8013464:	eb06 050a 	add.w	r5, r6, sl
 8013468:	462a      	mov	r2, r5
 801346a:	4616      	mov	r6, r2
 801346c:	3201      	adds	r2, #1
 801346e:	7830      	ldrb	r0, [r6, #0]
 8013470:	f7ff ff8a 	bl	8013388 <__hexdig_fun>
 8013474:	2800      	cmp	r0, #0
 8013476:	d1f8      	bne.n	801346a <__gethex+0xb6>
 8013478:	1bad      	subs	r5, r5, r6
 801347a:	00ad      	lsls	r5, r5, #2
 801347c:	e004      	b.n	8013488 <__gethex+0xd4>
 801347e:	2400      	movs	r4, #0
 8013480:	4625      	mov	r5, r4
 8013482:	e7e0      	b.n	8013446 <__gethex+0x92>
 8013484:	2d00      	cmp	r5, #0
 8013486:	d1f7      	bne.n	8013478 <__gethex+0xc4>
 8013488:	7833      	ldrb	r3, [r6, #0]
 801348a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801348e:	2b50      	cmp	r3, #80	; 0x50
 8013490:	d13b      	bne.n	801350a <__gethex+0x156>
 8013492:	7873      	ldrb	r3, [r6, #1]
 8013494:	2b2b      	cmp	r3, #43	; 0x2b
 8013496:	d02c      	beq.n	80134f2 <__gethex+0x13e>
 8013498:	2b2d      	cmp	r3, #45	; 0x2d
 801349a:	d02e      	beq.n	80134fa <__gethex+0x146>
 801349c:	1c71      	adds	r1, r6, #1
 801349e:	f04f 0900 	mov.w	r9, #0
 80134a2:	7808      	ldrb	r0, [r1, #0]
 80134a4:	f7ff ff70 	bl	8013388 <__hexdig_fun>
 80134a8:	1e43      	subs	r3, r0, #1
 80134aa:	b2db      	uxtb	r3, r3
 80134ac:	2b18      	cmp	r3, #24
 80134ae:	d82c      	bhi.n	801350a <__gethex+0x156>
 80134b0:	f1a0 0210 	sub.w	r2, r0, #16
 80134b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134b8:	f7ff ff66 	bl	8013388 <__hexdig_fun>
 80134bc:	1e43      	subs	r3, r0, #1
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	2b18      	cmp	r3, #24
 80134c2:	d91d      	bls.n	8013500 <__gethex+0x14c>
 80134c4:	f1b9 0f00 	cmp.w	r9, #0
 80134c8:	d000      	beq.n	80134cc <__gethex+0x118>
 80134ca:	4252      	negs	r2, r2
 80134cc:	4415      	add	r5, r2
 80134ce:	f8cb 1000 	str.w	r1, [fp]
 80134d2:	b1e4      	cbz	r4, 801350e <__gethex+0x15a>
 80134d4:	9b00      	ldr	r3, [sp, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	bf14      	ite	ne
 80134da:	2700      	movne	r7, #0
 80134dc:	2706      	moveq	r7, #6
 80134de:	4638      	mov	r0, r7
 80134e0:	b009      	add	sp, #36	; 0x24
 80134e2:	ecbd 8b02 	vpop	{d8}
 80134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ea:	463e      	mov	r6, r7
 80134ec:	4625      	mov	r5, r4
 80134ee:	2401      	movs	r4, #1
 80134f0:	e7ca      	b.n	8013488 <__gethex+0xd4>
 80134f2:	f04f 0900 	mov.w	r9, #0
 80134f6:	1cb1      	adds	r1, r6, #2
 80134f8:	e7d3      	b.n	80134a2 <__gethex+0xee>
 80134fa:	f04f 0901 	mov.w	r9, #1
 80134fe:	e7fa      	b.n	80134f6 <__gethex+0x142>
 8013500:	230a      	movs	r3, #10
 8013502:	fb03 0202 	mla	r2, r3, r2, r0
 8013506:	3a10      	subs	r2, #16
 8013508:	e7d4      	b.n	80134b4 <__gethex+0x100>
 801350a:	4631      	mov	r1, r6
 801350c:	e7df      	b.n	80134ce <__gethex+0x11a>
 801350e:	1bf3      	subs	r3, r6, r7
 8013510:	3b01      	subs	r3, #1
 8013512:	4621      	mov	r1, r4
 8013514:	2b07      	cmp	r3, #7
 8013516:	dc0b      	bgt.n	8013530 <__gethex+0x17c>
 8013518:	ee18 0a10 	vmov	r0, s16
 801351c:	f000 fa90 	bl	8013a40 <_Balloc>
 8013520:	4604      	mov	r4, r0
 8013522:	b940      	cbnz	r0, 8013536 <__gethex+0x182>
 8013524:	4b5d      	ldr	r3, [pc, #372]	; (801369c <__gethex+0x2e8>)
 8013526:	4602      	mov	r2, r0
 8013528:	21de      	movs	r1, #222	; 0xde
 801352a:	485d      	ldr	r0, [pc, #372]	; (80136a0 <__gethex+0x2ec>)
 801352c:	f001 fdf4 	bl	8015118 <__assert_func>
 8013530:	3101      	adds	r1, #1
 8013532:	105b      	asrs	r3, r3, #1
 8013534:	e7ee      	b.n	8013514 <__gethex+0x160>
 8013536:	f100 0914 	add.w	r9, r0, #20
 801353a:	f04f 0b00 	mov.w	fp, #0
 801353e:	f1ca 0301 	rsb	r3, sl, #1
 8013542:	f8cd 9008 	str.w	r9, [sp, #8]
 8013546:	f8cd b000 	str.w	fp, [sp]
 801354a:	9306      	str	r3, [sp, #24]
 801354c:	42b7      	cmp	r7, r6
 801354e:	d340      	bcc.n	80135d2 <__gethex+0x21e>
 8013550:	9802      	ldr	r0, [sp, #8]
 8013552:	9b00      	ldr	r3, [sp, #0]
 8013554:	f840 3b04 	str.w	r3, [r0], #4
 8013558:	eba0 0009 	sub.w	r0, r0, r9
 801355c:	1080      	asrs	r0, r0, #2
 801355e:	0146      	lsls	r6, r0, #5
 8013560:	6120      	str	r0, [r4, #16]
 8013562:	4618      	mov	r0, r3
 8013564:	f000 fb5e 	bl	8013c24 <__hi0bits>
 8013568:	1a30      	subs	r0, r6, r0
 801356a:	f8d8 6000 	ldr.w	r6, [r8]
 801356e:	42b0      	cmp	r0, r6
 8013570:	dd63      	ble.n	801363a <__gethex+0x286>
 8013572:	1b87      	subs	r7, r0, r6
 8013574:	4639      	mov	r1, r7
 8013576:	4620      	mov	r0, r4
 8013578:	f000 ff02 	bl	8014380 <__any_on>
 801357c:	4682      	mov	sl, r0
 801357e:	b1a8      	cbz	r0, 80135ac <__gethex+0x1f8>
 8013580:	1e7b      	subs	r3, r7, #1
 8013582:	1159      	asrs	r1, r3, #5
 8013584:	f003 021f 	and.w	r2, r3, #31
 8013588:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801358c:	f04f 0a01 	mov.w	sl, #1
 8013590:	fa0a f202 	lsl.w	r2, sl, r2
 8013594:	420a      	tst	r2, r1
 8013596:	d009      	beq.n	80135ac <__gethex+0x1f8>
 8013598:	4553      	cmp	r3, sl
 801359a:	dd05      	ble.n	80135a8 <__gethex+0x1f4>
 801359c:	1eb9      	subs	r1, r7, #2
 801359e:	4620      	mov	r0, r4
 80135a0:	f000 feee 	bl	8014380 <__any_on>
 80135a4:	2800      	cmp	r0, #0
 80135a6:	d145      	bne.n	8013634 <__gethex+0x280>
 80135a8:	f04f 0a02 	mov.w	sl, #2
 80135ac:	4639      	mov	r1, r7
 80135ae:	4620      	mov	r0, r4
 80135b0:	f7ff fe98 	bl	80132e4 <rshift>
 80135b4:	443d      	add	r5, r7
 80135b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135ba:	42ab      	cmp	r3, r5
 80135bc:	da4c      	bge.n	8013658 <__gethex+0x2a4>
 80135be:	ee18 0a10 	vmov	r0, s16
 80135c2:	4621      	mov	r1, r4
 80135c4:	f000 fa7c 	bl	8013ac0 <_Bfree>
 80135c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80135ca:	2300      	movs	r3, #0
 80135cc:	6013      	str	r3, [r2, #0]
 80135ce:	27a3      	movs	r7, #163	; 0xa3
 80135d0:	e785      	b.n	80134de <__gethex+0x12a>
 80135d2:	1e73      	subs	r3, r6, #1
 80135d4:	9a05      	ldr	r2, [sp, #20]
 80135d6:	9303      	str	r3, [sp, #12]
 80135d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80135dc:	4293      	cmp	r3, r2
 80135de:	d019      	beq.n	8013614 <__gethex+0x260>
 80135e0:	f1bb 0f20 	cmp.w	fp, #32
 80135e4:	d107      	bne.n	80135f6 <__gethex+0x242>
 80135e6:	9b02      	ldr	r3, [sp, #8]
 80135e8:	9a00      	ldr	r2, [sp, #0]
 80135ea:	f843 2b04 	str.w	r2, [r3], #4
 80135ee:	9302      	str	r3, [sp, #8]
 80135f0:	2300      	movs	r3, #0
 80135f2:	9300      	str	r3, [sp, #0]
 80135f4:	469b      	mov	fp, r3
 80135f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80135fa:	f7ff fec5 	bl	8013388 <__hexdig_fun>
 80135fe:	9b00      	ldr	r3, [sp, #0]
 8013600:	f000 000f 	and.w	r0, r0, #15
 8013604:	fa00 f00b 	lsl.w	r0, r0, fp
 8013608:	4303      	orrs	r3, r0
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	f10b 0b04 	add.w	fp, fp, #4
 8013610:	9b03      	ldr	r3, [sp, #12]
 8013612:	e00d      	b.n	8013630 <__gethex+0x27c>
 8013614:	9b03      	ldr	r3, [sp, #12]
 8013616:	9a06      	ldr	r2, [sp, #24]
 8013618:	4413      	add	r3, r2
 801361a:	42bb      	cmp	r3, r7
 801361c:	d3e0      	bcc.n	80135e0 <__gethex+0x22c>
 801361e:	4618      	mov	r0, r3
 8013620:	9901      	ldr	r1, [sp, #4]
 8013622:	9307      	str	r3, [sp, #28]
 8013624:	4652      	mov	r2, sl
 8013626:	f001 fca7 	bl	8014f78 <strncmp>
 801362a:	9b07      	ldr	r3, [sp, #28]
 801362c:	2800      	cmp	r0, #0
 801362e:	d1d7      	bne.n	80135e0 <__gethex+0x22c>
 8013630:	461e      	mov	r6, r3
 8013632:	e78b      	b.n	801354c <__gethex+0x198>
 8013634:	f04f 0a03 	mov.w	sl, #3
 8013638:	e7b8      	b.n	80135ac <__gethex+0x1f8>
 801363a:	da0a      	bge.n	8013652 <__gethex+0x29e>
 801363c:	1a37      	subs	r7, r6, r0
 801363e:	4621      	mov	r1, r4
 8013640:	ee18 0a10 	vmov	r0, s16
 8013644:	463a      	mov	r2, r7
 8013646:	f000 fc57 	bl	8013ef8 <__lshift>
 801364a:	1bed      	subs	r5, r5, r7
 801364c:	4604      	mov	r4, r0
 801364e:	f100 0914 	add.w	r9, r0, #20
 8013652:	f04f 0a00 	mov.w	sl, #0
 8013656:	e7ae      	b.n	80135b6 <__gethex+0x202>
 8013658:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801365c:	42a8      	cmp	r0, r5
 801365e:	dd72      	ble.n	8013746 <__gethex+0x392>
 8013660:	1b45      	subs	r5, r0, r5
 8013662:	42ae      	cmp	r6, r5
 8013664:	dc36      	bgt.n	80136d4 <__gethex+0x320>
 8013666:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801366a:	2b02      	cmp	r3, #2
 801366c:	d02a      	beq.n	80136c4 <__gethex+0x310>
 801366e:	2b03      	cmp	r3, #3
 8013670:	d02c      	beq.n	80136cc <__gethex+0x318>
 8013672:	2b01      	cmp	r3, #1
 8013674:	d11c      	bne.n	80136b0 <__gethex+0x2fc>
 8013676:	42ae      	cmp	r6, r5
 8013678:	d11a      	bne.n	80136b0 <__gethex+0x2fc>
 801367a:	2e01      	cmp	r6, #1
 801367c:	d112      	bne.n	80136a4 <__gethex+0x2f0>
 801367e:	9a04      	ldr	r2, [sp, #16]
 8013680:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013684:	6013      	str	r3, [r2, #0]
 8013686:	2301      	movs	r3, #1
 8013688:	6123      	str	r3, [r4, #16]
 801368a:	f8c9 3000 	str.w	r3, [r9]
 801368e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013690:	2762      	movs	r7, #98	; 0x62
 8013692:	601c      	str	r4, [r3, #0]
 8013694:	e723      	b.n	80134de <__gethex+0x12a>
 8013696:	bf00      	nop
 8013698:	080182f0 	.word	0x080182f0
 801369c:	08018278 	.word	0x08018278
 80136a0:	08018289 	.word	0x08018289
 80136a4:	1e71      	subs	r1, r6, #1
 80136a6:	4620      	mov	r0, r4
 80136a8:	f000 fe6a 	bl	8014380 <__any_on>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	d1e6      	bne.n	801367e <__gethex+0x2ca>
 80136b0:	ee18 0a10 	vmov	r0, s16
 80136b4:	4621      	mov	r1, r4
 80136b6:	f000 fa03 	bl	8013ac0 <_Bfree>
 80136ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80136bc:	2300      	movs	r3, #0
 80136be:	6013      	str	r3, [r2, #0]
 80136c0:	2750      	movs	r7, #80	; 0x50
 80136c2:	e70c      	b.n	80134de <__gethex+0x12a>
 80136c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d1f2      	bne.n	80136b0 <__gethex+0x2fc>
 80136ca:	e7d8      	b.n	801367e <__gethex+0x2ca>
 80136cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d1d5      	bne.n	801367e <__gethex+0x2ca>
 80136d2:	e7ed      	b.n	80136b0 <__gethex+0x2fc>
 80136d4:	1e6f      	subs	r7, r5, #1
 80136d6:	f1ba 0f00 	cmp.w	sl, #0
 80136da:	d131      	bne.n	8013740 <__gethex+0x38c>
 80136dc:	b127      	cbz	r7, 80136e8 <__gethex+0x334>
 80136de:	4639      	mov	r1, r7
 80136e0:	4620      	mov	r0, r4
 80136e2:	f000 fe4d 	bl	8014380 <__any_on>
 80136e6:	4682      	mov	sl, r0
 80136e8:	117b      	asrs	r3, r7, #5
 80136ea:	2101      	movs	r1, #1
 80136ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80136f0:	f007 071f 	and.w	r7, r7, #31
 80136f4:	fa01 f707 	lsl.w	r7, r1, r7
 80136f8:	421f      	tst	r7, r3
 80136fa:	4629      	mov	r1, r5
 80136fc:	4620      	mov	r0, r4
 80136fe:	bf18      	it	ne
 8013700:	f04a 0a02 	orrne.w	sl, sl, #2
 8013704:	1b76      	subs	r6, r6, r5
 8013706:	f7ff fded 	bl	80132e4 <rshift>
 801370a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801370e:	2702      	movs	r7, #2
 8013710:	f1ba 0f00 	cmp.w	sl, #0
 8013714:	d048      	beq.n	80137a8 <__gethex+0x3f4>
 8013716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801371a:	2b02      	cmp	r3, #2
 801371c:	d015      	beq.n	801374a <__gethex+0x396>
 801371e:	2b03      	cmp	r3, #3
 8013720:	d017      	beq.n	8013752 <__gethex+0x39e>
 8013722:	2b01      	cmp	r3, #1
 8013724:	d109      	bne.n	801373a <__gethex+0x386>
 8013726:	f01a 0f02 	tst.w	sl, #2
 801372a:	d006      	beq.n	801373a <__gethex+0x386>
 801372c:	f8d9 0000 	ldr.w	r0, [r9]
 8013730:	ea4a 0a00 	orr.w	sl, sl, r0
 8013734:	f01a 0f01 	tst.w	sl, #1
 8013738:	d10e      	bne.n	8013758 <__gethex+0x3a4>
 801373a:	f047 0710 	orr.w	r7, r7, #16
 801373e:	e033      	b.n	80137a8 <__gethex+0x3f4>
 8013740:	f04f 0a01 	mov.w	sl, #1
 8013744:	e7d0      	b.n	80136e8 <__gethex+0x334>
 8013746:	2701      	movs	r7, #1
 8013748:	e7e2      	b.n	8013710 <__gethex+0x35c>
 801374a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801374c:	f1c3 0301 	rsb	r3, r3, #1
 8013750:	9315      	str	r3, [sp, #84]	; 0x54
 8013752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013754:	2b00      	cmp	r3, #0
 8013756:	d0f0      	beq.n	801373a <__gethex+0x386>
 8013758:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801375c:	f104 0314 	add.w	r3, r4, #20
 8013760:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013764:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013768:	f04f 0c00 	mov.w	ip, #0
 801376c:	4618      	mov	r0, r3
 801376e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013772:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013776:	d01c      	beq.n	80137b2 <__gethex+0x3fe>
 8013778:	3201      	adds	r2, #1
 801377a:	6002      	str	r2, [r0, #0]
 801377c:	2f02      	cmp	r7, #2
 801377e:	f104 0314 	add.w	r3, r4, #20
 8013782:	d13f      	bne.n	8013804 <__gethex+0x450>
 8013784:	f8d8 2000 	ldr.w	r2, [r8]
 8013788:	3a01      	subs	r2, #1
 801378a:	42b2      	cmp	r2, r6
 801378c:	d10a      	bne.n	80137a4 <__gethex+0x3f0>
 801378e:	1171      	asrs	r1, r6, #5
 8013790:	2201      	movs	r2, #1
 8013792:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013796:	f006 061f 	and.w	r6, r6, #31
 801379a:	fa02 f606 	lsl.w	r6, r2, r6
 801379e:	421e      	tst	r6, r3
 80137a0:	bf18      	it	ne
 80137a2:	4617      	movne	r7, r2
 80137a4:	f047 0720 	orr.w	r7, r7, #32
 80137a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80137aa:	601c      	str	r4, [r3, #0]
 80137ac:	9b04      	ldr	r3, [sp, #16]
 80137ae:	601d      	str	r5, [r3, #0]
 80137b0:	e695      	b.n	80134de <__gethex+0x12a>
 80137b2:	4299      	cmp	r1, r3
 80137b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80137b8:	d8d8      	bhi.n	801376c <__gethex+0x3b8>
 80137ba:	68a3      	ldr	r3, [r4, #8]
 80137bc:	459b      	cmp	fp, r3
 80137be:	db19      	blt.n	80137f4 <__gethex+0x440>
 80137c0:	6861      	ldr	r1, [r4, #4]
 80137c2:	ee18 0a10 	vmov	r0, s16
 80137c6:	3101      	adds	r1, #1
 80137c8:	f000 f93a 	bl	8013a40 <_Balloc>
 80137cc:	4681      	mov	r9, r0
 80137ce:	b918      	cbnz	r0, 80137d8 <__gethex+0x424>
 80137d0:	4b1a      	ldr	r3, [pc, #104]	; (801383c <__gethex+0x488>)
 80137d2:	4602      	mov	r2, r0
 80137d4:	2184      	movs	r1, #132	; 0x84
 80137d6:	e6a8      	b.n	801352a <__gethex+0x176>
 80137d8:	6922      	ldr	r2, [r4, #16]
 80137da:	3202      	adds	r2, #2
 80137dc:	f104 010c 	add.w	r1, r4, #12
 80137e0:	0092      	lsls	r2, r2, #2
 80137e2:	300c      	adds	r0, #12
 80137e4:	f000 f91e 	bl	8013a24 <memcpy>
 80137e8:	4621      	mov	r1, r4
 80137ea:	ee18 0a10 	vmov	r0, s16
 80137ee:	f000 f967 	bl	8013ac0 <_Bfree>
 80137f2:	464c      	mov	r4, r9
 80137f4:	6923      	ldr	r3, [r4, #16]
 80137f6:	1c5a      	adds	r2, r3, #1
 80137f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80137fc:	6122      	str	r2, [r4, #16]
 80137fe:	2201      	movs	r2, #1
 8013800:	615a      	str	r2, [r3, #20]
 8013802:	e7bb      	b.n	801377c <__gethex+0x3c8>
 8013804:	6922      	ldr	r2, [r4, #16]
 8013806:	455a      	cmp	r2, fp
 8013808:	dd0b      	ble.n	8013822 <__gethex+0x46e>
 801380a:	2101      	movs	r1, #1
 801380c:	4620      	mov	r0, r4
 801380e:	f7ff fd69 	bl	80132e4 <rshift>
 8013812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013816:	3501      	adds	r5, #1
 8013818:	42ab      	cmp	r3, r5
 801381a:	f6ff aed0 	blt.w	80135be <__gethex+0x20a>
 801381e:	2701      	movs	r7, #1
 8013820:	e7c0      	b.n	80137a4 <__gethex+0x3f0>
 8013822:	f016 061f 	ands.w	r6, r6, #31
 8013826:	d0fa      	beq.n	801381e <__gethex+0x46a>
 8013828:	4453      	add	r3, sl
 801382a:	f1c6 0620 	rsb	r6, r6, #32
 801382e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013832:	f000 f9f7 	bl	8013c24 <__hi0bits>
 8013836:	42b0      	cmp	r0, r6
 8013838:	dbe7      	blt.n	801380a <__gethex+0x456>
 801383a:	e7f0      	b.n	801381e <__gethex+0x46a>
 801383c:	08018278 	.word	0x08018278

08013840 <L_shift>:
 8013840:	f1c2 0208 	rsb	r2, r2, #8
 8013844:	0092      	lsls	r2, r2, #2
 8013846:	b570      	push	{r4, r5, r6, lr}
 8013848:	f1c2 0620 	rsb	r6, r2, #32
 801384c:	6843      	ldr	r3, [r0, #4]
 801384e:	6804      	ldr	r4, [r0, #0]
 8013850:	fa03 f506 	lsl.w	r5, r3, r6
 8013854:	432c      	orrs	r4, r5
 8013856:	40d3      	lsrs	r3, r2
 8013858:	6004      	str	r4, [r0, #0]
 801385a:	f840 3f04 	str.w	r3, [r0, #4]!
 801385e:	4288      	cmp	r0, r1
 8013860:	d3f4      	bcc.n	801384c <L_shift+0xc>
 8013862:	bd70      	pop	{r4, r5, r6, pc}

08013864 <__match>:
 8013864:	b530      	push	{r4, r5, lr}
 8013866:	6803      	ldr	r3, [r0, #0]
 8013868:	3301      	adds	r3, #1
 801386a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801386e:	b914      	cbnz	r4, 8013876 <__match+0x12>
 8013870:	6003      	str	r3, [r0, #0]
 8013872:	2001      	movs	r0, #1
 8013874:	bd30      	pop	{r4, r5, pc}
 8013876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801387a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801387e:	2d19      	cmp	r5, #25
 8013880:	bf98      	it	ls
 8013882:	3220      	addls	r2, #32
 8013884:	42a2      	cmp	r2, r4
 8013886:	d0f0      	beq.n	801386a <__match+0x6>
 8013888:	2000      	movs	r0, #0
 801388a:	e7f3      	b.n	8013874 <__match+0x10>

0801388c <__hexnan>:
 801388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013890:	680b      	ldr	r3, [r1, #0]
 8013892:	115e      	asrs	r6, r3, #5
 8013894:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013898:	f013 031f 	ands.w	r3, r3, #31
 801389c:	b087      	sub	sp, #28
 801389e:	bf18      	it	ne
 80138a0:	3604      	addne	r6, #4
 80138a2:	2500      	movs	r5, #0
 80138a4:	1f37      	subs	r7, r6, #4
 80138a6:	4690      	mov	r8, r2
 80138a8:	6802      	ldr	r2, [r0, #0]
 80138aa:	9301      	str	r3, [sp, #4]
 80138ac:	4682      	mov	sl, r0
 80138ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80138b2:	46b9      	mov	r9, r7
 80138b4:	463c      	mov	r4, r7
 80138b6:	9502      	str	r5, [sp, #8]
 80138b8:	46ab      	mov	fp, r5
 80138ba:	7851      	ldrb	r1, [r2, #1]
 80138bc:	1c53      	adds	r3, r2, #1
 80138be:	9303      	str	r3, [sp, #12]
 80138c0:	b341      	cbz	r1, 8013914 <__hexnan+0x88>
 80138c2:	4608      	mov	r0, r1
 80138c4:	9205      	str	r2, [sp, #20]
 80138c6:	9104      	str	r1, [sp, #16]
 80138c8:	f7ff fd5e 	bl	8013388 <__hexdig_fun>
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d14f      	bne.n	8013970 <__hexnan+0xe4>
 80138d0:	9904      	ldr	r1, [sp, #16]
 80138d2:	9a05      	ldr	r2, [sp, #20]
 80138d4:	2920      	cmp	r1, #32
 80138d6:	d818      	bhi.n	801390a <__hexnan+0x7e>
 80138d8:	9b02      	ldr	r3, [sp, #8]
 80138da:	459b      	cmp	fp, r3
 80138dc:	dd13      	ble.n	8013906 <__hexnan+0x7a>
 80138de:	454c      	cmp	r4, r9
 80138e0:	d206      	bcs.n	80138f0 <__hexnan+0x64>
 80138e2:	2d07      	cmp	r5, #7
 80138e4:	dc04      	bgt.n	80138f0 <__hexnan+0x64>
 80138e6:	462a      	mov	r2, r5
 80138e8:	4649      	mov	r1, r9
 80138ea:	4620      	mov	r0, r4
 80138ec:	f7ff ffa8 	bl	8013840 <L_shift>
 80138f0:	4544      	cmp	r4, r8
 80138f2:	d950      	bls.n	8013996 <__hexnan+0x10a>
 80138f4:	2300      	movs	r3, #0
 80138f6:	f1a4 0904 	sub.w	r9, r4, #4
 80138fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80138fe:	f8cd b008 	str.w	fp, [sp, #8]
 8013902:	464c      	mov	r4, r9
 8013904:	461d      	mov	r5, r3
 8013906:	9a03      	ldr	r2, [sp, #12]
 8013908:	e7d7      	b.n	80138ba <__hexnan+0x2e>
 801390a:	2929      	cmp	r1, #41	; 0x29
 801390c:	d156      	bne.n	80139bc <__hexnan+0x130>
 801390e:	3202      	adds	r2, #2
 8013910:	f8ca 2000 	str.w	r2, [sl]
 8013914:	f1bb 0f00 	cmp.w	fp, #0
 8013918:	d050      	beq.n	80139bc <__hexnan+0x130>
 801391a:	454c      	cmp	r4, r9
 801391c:	d206      	bcs.n	801392c <__hexnan+0xa0>
 801391e:	2d07      	cmp	r5, #7
 8013920:	dc04      	bgt.n	801392c <__hexnan+0xa0>
 8013922:	462a      	mov	r2, r5
 8013924:	4649      	mov	r1, r9
 8013926:	4620      	mov	r0, r4
 8013928:	f7ff ff8a 	bl	8013840 <L_shift>
 801392c:	4544      	cmp	r4, r8
 801392e:	d934      	bls.n	801399a <__hexnan+0x10e>
 8013930:	f1a8 0204 	sub.w	r2, r8, #4
 8013934:	4623      	mov	r3, r4
 8013936:	f853 1b04 	ldr.w	r1, [r3], #4
 801393a:	f842 1f04 	str.w	r1, [r2, #4]!
 801393e:	429f      	cmp	r7, r3
 8013940:	d2f9      	bcs.n	8013936 <__hexnan+0xaa>
 8013942:	1b3b      	subs	r3, r7, r4
 8013944:	f023 0303 	bic.w	r3, r3, #3
 8013948:	3304      	adds	r3, #4
 801394a:	3401      	adds	r4, #1
 801394c:	3e03      	subs	r6, #3
 801394e:	42b4      	cmp	r4, r6
 8013950:	bf88      	it	hi
 8013952:	2304      	movhi	r3, #4
 8013954:	4443      	add	r3, r8
 8013956:	2200      	movs	r2, #0
 8013958:	f843 2b04 	str.w	r2, [r3], #4
 801395c:	429f      	cmp	r7, r3
 801395e:	d2fb      	bcs.n	8013958 <__hexnan+0xcc>
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	b91b      	cbnz	r3, 801396c <__hexnan+0xe0>
 8013964:	4547      	cmp	r7, r8
 8013966:	d127      	bne.n	80139b8 <__hexnan+0x12c>
 8013968:	2301      	movs	r3, #1
 801396a:	603b      	str	r3, [r7, #0]
 801396c:	2005      	movs	r0, #5
 801396e:	e026      	b.n	80139be <__hexnan+0x132>
 8013970:	3501      	adds	r5, #1
 8013972:	2d08      	cmp	r5, #8
 8013974:	f10b 0b01 	add.w	fp, fp, #1
 8013978:	dd06      	ble.n	8013988 <__hexnan+0xfc>
 801397a:	4544      	cmp	r4, r8
 801397c:	d9c3      	bls.n	8013906 <__hexnan+0x7a>
 801397e:	2300      	movs	r3, #0
 8013980:	f844 3c04 	str.w	r3, [r4, #-4]
 8013984:	2501      	movs	r5, #1
 8013986:	3c04      	subs	r4, #4
 8013988:	6822      	ldr	r2, [r4, #0]
 801398a:	f000 000f 	and.w	r0, r0, #15
 801398e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013992:	6022      	str	r2, [r4, #0]
 8013994:	e7b7      	b.n	8013906 <__hexnan+0x7a>
 8013996:	2508      	movs	r5, #8
 8013998:	e7b5      	b.n	8013906 <__hexnan+0x7a>
 801399a:	9b01      	ldr	r3, [sp, #4]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d0df      	beq.n	8013960 <__hexnan+0xd4>
 80139a0:	f04f 32ff 	mov.w	r2, #4294967295
 80139a4:	f1c3 0320 	rsb	r3, r3, #32
 80139a8:	fa22 f303 	lsr.w	r3, r2, r3
 80139ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80139b0:	401a      	ands	r2, r3
 80139b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80139b6:	e7d3      	b.n	8013960 <__hexnan+0xd4>
 80139b8:	3f04      	subs	r7, #4
 80139ba:	e7d1      	b.n	8013960 <__hexnan+0xd4>
 80139bc:	2004      	movs	r0, #4
 80139be:	b007      	add	sp, #28
 80139c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139c4 <_localeconv_r>:
 80139c4:	4800      	ldr	r0, [pc, #0]	; (80139c8 <_localeconv_r+0x4>)
 80139c6:	4770      	bx	lr
 80139c8:	20000184 	.word	0x20000184

080139cc <_lseek_r>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4d07      	ldr	r5, [pc, #28]	; (80139ec <_lseek_r+0x20>)
 80139d0:	4604      	mov	r4, r0
 80139d2:	4608      	mov	r0, r1
 80139d4:	4611      	mov	r1, r2
 80139d6:	2200      	movs	r2, #0
 80139d8:	602a      	str	r2, [r5, #0]
 80139da:	461a      	mov	r2, r3
 80139dc:	f7f2 ffb8 	bl	8006950 <_lseek>
 80139e0:	1c43      	adds	r3, r0, #1
 80139e2:	d102      	bne.n	80139ea <_lseek_r+0x1e>
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	b103      	cbz	r3, 80139ea <_lseek_r+0x1e>
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	bd38      	pop	{r3, r4, r5, pc}
 80139ec:	2000496c 	.word	0x2000496c

080139f0 <malloc>:
 80139f0:	4b02      	ldr	r3, [pc, #8]	; (80139fc <malloc+0xc>)
 80139f2:	4601      	mov	r1, r0
 80139f4:	6818      	ldr	r0, [r3, #0]
 80139f6:	f000 bd67 	b.w	80144c8 <_malloc_r>
 80139fa:	bf00      	nop
 80139fc:	2000002c 	.word	0x2000002c

08013a00 <__ascii_mbtowc>:
 8013a00:	b082      	sub	sp, #8
 8013a02:	b901      	cbnz	r1, 8013a06 <__ascii_mbtowc+0x6>
 8013a04:	a901      	add	r1, sp, #4
 8013a06:	b142      	cbz	r2, 8013a1a <__ascii_mbtowc+0x1a>
 8013a08:	b14b      	cbz	r3, 8013a1e <__ascii_mbtowc+0x1e>
 8013a0a:	7813      	ldrb	r3, [r2, #0]
 8013a0c:	600b      	str	r3, [r1, #0]
 8013a0e:	7812      	ldrb	r2, [r2, #0]
 8013a10:	1e10      	subs	r0, r2, #0
 8013a12:	bf18      	it	ne
 8013a14:	2001      	movne	r0, #1
 8013a16:	b002      	add	sp, #8
 8013a18:	4770      	bx	lr
 8013a1a:	4610      	mov	r0, r2
 8013a1c:	e7fb      	b.n	8013a16 <__ascii_mbtowc+0x16>
 8013a1e:	f06f 0001 	mvn.w	r0, #1
 8013a22:	e7f8      	b.n	8013a16 <__ascii_mbtowc+0x16>

08013a24 <memcpy>:
 8013a24:	440a      	add	r2, r1
 8013a26:	4291      	cmp	r1, r2
 8013a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a2c:	d100      	bne.n	8013a30 <memcpy+0xc>
 8013a2e:	4770      	bx	lr
 8013a30:	b510      	push	{r4, lr}
 8013a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a3a:	4291      	cmp	r1, r2
 8013a3c:	d1f9      	bne.n	8013a32 <memcpy+0xe>
 8013a3e:	bd10      	pop	{r4, pc}

08013a40 <_Balloc>:
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013a44:	4604      	mov	r4, r0
 8013a46:	460d      	mov	r5, r1
 8013a48:	b976      	cbnz	r6, 8013a68 <_Balloc+0x28>
 8013a4a:	2010      	movs	r0, #16
 8013a4c:	f7ff ffd0 	bl	80139f0 <malloc>
 8013a50:	4602      	mov	r2, r0
 8013a52:	6260      	str	r0, [r4, #36]	; 0x24
 8013a54:	b920      	cbnz	r0, 8013a60 <_Balloc+0x20>
 8013a56:	4b18      	ldr	r3, [pc, #96]	; (8013ab8 <_Balloc+0x78>)
 8013a58:	4818      	ldr	r0, [pc, #96]	; (8013abc <_Balloc+0x7c>)
 8013a5a:	2166      	movs	r1, #102	; 0x66
 8013a5c:	f001 fb5c 	bl	8015118 <__assert_func>
 8013a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a64:	6006      	str	r6, [r0, #0]
 8013a66:	60c6      	str	r6, [r0, #12]
 8013a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013a6a:	68f3      	ldr	r3, [r6, #12]
 8013a6c:	b183      	cbz	r3, 8013a90 <_Balloc+0x50>
 8013a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a70:	68db      	ldr	r3, [r3, #12]
 8013a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a76:	b9b8      	cbnz	r0, 8013aa8 <_Balloc+0x68>
 8013a78:	2101      	movs	r1, #1
 8013a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8013a7e:	1d72      	adds	r2, r6, #5
 8013a80:	0092      	lsls	r2, r2, #2
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 fc9d 	bl	80143c2 <_calloc_r>
 8013a88:	b160      	cbz	r0, 8013aa4 <_Balloc+0x64>
 8013a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a8e:	e00e      	b.n	8013aae <_Balloc+0x6e>
 8013a90:	2221      	movs	r2, #33	; 0x21
 8013a92:	2104      	movs	r1, #4
 8013a94:	4620      	mov	r0, r4
 8013a96:	f000 fc94 	bl	80143c2 <_calloc_r>
 8013a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a9c:	60f0      	str	r0, [r6, #12]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d1e4      	bne.n	8013a6e <_Balloc+0x2e>
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	bd70      	pop	{r4, r5, r6, pc}
 8013aa8:	6802      	ldr	r2, [r0, #0]
 8013aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013aae:	2300      	movs	r3, #0
 8013ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ab4:	e7f7      	b.n	8013aa6 <_Balloc+0x66>
 8013ab6:	bf00      	nop
 8013ab8:	08018206 	.word	0x08018206
 8013abc:	08018304 	.word	0x08018304

08013ac0 <_Bfree>:
 8013ac0:	b570      	push	{r4, r5, r6, lr}
 8013ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	b976      	cbnz	r6, 8013ae8 <_Bfree+0x28>
 8013aca:	2010      	movs	r0, #16
 8013acc:	f7ff ff90 	bl	80139f0 <malloc>
 8013ad0:	4602      	mov	r2, r0
 8013ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8013ad4:	b920      	cbnz	r0, 8013ae0 <_Bfree+0x20>
 8013ad6:	4b09      	ldr	r3, [pc, #36]	; (8013afc <_Bfree+0x3c>)
 8013ad8:	4809      	ldr	r0, [pc, #36]	; (8013b00 <_Bfree+0x40>)
 8013ada:	218a      	movs	r1, #138	; 0x8a
 8013adc:	f001 fb1c 	bl	8015118 <__assert_func>
 8013ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ae4:	6006      	str	r6, [r0, #0]
 8013ae6:	60c6      	str	r6, [r0, #12]
 8013ae8:	b13c      	cbz	r4, 8013afa <_Bfree+0x3a>
 8013aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013aec:	6862      	ldr	r2, [r4, #4]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013af4:	6021      	str	r1, [r4, #0]
 8013af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013afa:	bd70      	pop	{r4, r5, r6, pc}
 8013afc:	08018206 	.word	0x08018206
 8013b00:	08018304 	.word	0x08018304

08013b04 <__multadd>:
 8013b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b08:	690d      	ldr	r5, [r1, #16]
 8013b0a:	4607      	mov	r7, r0
 8013b0c:	460c      	mov	r4, r1
 8013b0e:	461e      	mov	r6, r3
 8013b10:	f101 0c14 	add.w	ip, r1, #20
 8013b14:	2000      	movs	r0, #0
 8013b16:	f8dc 3000 	ldr.w	r3, [ip]
 8013b1a:	b299      	uxth	r1, r3
 8013b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8013b20:	0c1e      	lsrs	r6, r3, #16
 8013b22:	0c0b      	lsrs	r3, r1, #16
 8013b24:	fb02 3306 	mla	r3, r2, r6, r3
 8013b28:	b289      	uxth	r1, r1
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013b30:	4285      	cmp	r5, r0
 8013b32:	f84c 1b04 	str.w	r1, [ip], #4
 8013b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013b3a:	dcec      	bgt.n	8013b16 <__multadd+0x12>
 8013b3c:	b30e      	cbz	r6, 8013b82 <__multadd+0x7e>
 8013b3e:	68a3      	ldr	r3, [r4, #8]
 8013b40:	42ab      	cmp	r3, r5
 8013b42:	dc19      	bgt.n	8013b78 <__multadd+0x74>
 8013b44:	6861      	ldr	r1, [r4, #4]
 8013b46:	4638      	mov	r0, r7
 8013b48:	3101      	adds	r1, #1
 8013b4a:	f7ff ff79 	bl	8013a40 <_Balloc>
 8013b4e:	4680      	mov	r8, r0
 8013b50:	b928      	cbnz	r0, 8013b5e <__multadd+0x5a>
 8013b52:	4602      	mov	r2, r0
 8013b54:	4b0c      	ldr	r3, [pc, #48]	; (8013b88 <__multadd+0x84>)
 8013b56:	480d      	ldr	r0, [pc, #52]	; (8013b8c <__multadd+0x88>)
 8013b58:	21b5      	movs	r1, #181	; 0xb5
 8013b5a:	f001 fadd 	bl	8015118 <__assert_func>
 8013b5e:	6922      	ldr	r2, [r4, #16]
 8013b60:	3202      	adds	r2, #2
 8013b62:	f104 010c 	add.w	r1, r4, #12
 8013b66:	0092      	lsls	r2, r2, #2
 8013b68:	300c      	adds	r0, #12
 8013b6a:	f7ff ff5b 	bl	8013a24 <memcpy>
 8013b6e:	4621      	mov	r1, r4
 8013b70:	4638      	mov	r0, r7
 8013b72:	f7ff ffa5 	bl	8013ac0 <_Bfree>
 8013b76:	4644      	mov	r4, r8
 8013b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b7c:	3501      	adds	r5, #1
 8013b7e:	615e      	str	r6, [r3, #20]
 8013b80:	6125      	str	r5, [r4, #16]
 8013b82:	4620      	mov	r0, r4
 8013b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b88:	08018278 	.word	0x08018278
 8013b8c:	08018304 	.word	0x08018304

08013b90 <__s2b>:
 8013b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b94:	460c      	mov	r4, r1
 8013b96:	4615      	mov	r5, r2
 8013b98:	461f      	mov	r7, r3
 8013b9a:	2209      	movs	r2, #9
 8013b9c:	3308      	adds	r3, #8
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	db09      	blt.n	8013bc0 <__s2b+0x30>
 8013bac:	4630      	mov	r0, r6
 8013bae:	f7ff ff47 	bl	8013a40 <_Balloc>
 8013bb2:	b940      	cbnz	r0, 8013bc6 <__s2b+0x36>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	4b19      	ldr	r3, [pc, #100]	; (8013c1c <__s2b+0x8c>)
 8013bb8:	4819      	ldr	r0, [pc, #100]	; (8013c20 <__s2b+0x90>)
 8013bba:	21ce      	movs	r1, #206	; 0xce
 8013bbc:	f001 faac 	bl	8015118 <__assert_func>
 8013bc0:	0052      	lsls	r2, r2, #1
 8013bc2:	3101      	adds	r1, #1
 8013bc4:	e7f0      	b.n	8013ba8 <__s2b+0x18>
 8013bc6:	9b08      	ldr	r3, [sp, #32]
 8013bc8:	6143      	str	r3, [r0, #20]
 8013bca:	2d09      	cmp	r5, #9
 8013bcc:	f04f 0301 	mov.w	r3, #1
 8013bd0:	6103      	str	r3, [r0, #16]
 8013bd2:	dd16      	ble.n	8013c02 <__s2b+0x72>
 8013bd4:	f104 0909 	add.w	r9, r4, #9
 8013bd8:	46c8      	mov	r8, r9
 8013bda:	442c      	add	r4, r5
 8013bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013be0:	4601      	mov	r1, r0
 8013be2:	3b30      	subs	r3, #48	; 0x30
 8013be4:	220a      	movs	r2, #10
 8013be6:	4630      	mov	r0, r6
 8013be8:	f7ff ff8c 	bl	8013b04 <__multadd>
 8013bec:	45a0      	cmp	r8, r4
 8013bee:	d1f5      	bne.n	8013bdc <__s2b+0x4c>
 8013bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8013bf4:	444c      	add	r4, r9
 8013bf6:	1b2d      	subs	r5, r5, r4
 8013bf8:	1963      	adds	r3, r4, r5
 8013bfa:	42bb      	cmp	r3, r7
 8013bfc:	db04      	blt.n	8013c08 <__s2b+0x78>
 8013bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c02:	340a      	adds	r4, #10
 8013c04:	2509      	movs	r5, #9
 8013c06:	e7f6      	b.n	8013bf6 <__s2b+0x66>
 8013c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c0c:	4601      	mov	r1, r0
 8013c0e:	3b30      	subs	r3, #48	; 0x30
 8013c10:	220a      	movs	r2, #10
 8013c12:	4630      	mov	r0, r6
 8013c14:	f7ff ff76 	bl	8013b04 <__multadd>
 8013c18:	e7ee      	b.n	8013bf8 <__s2b+0x68>
 8013c1a:	bf00      	nop
 8013c1c:	08018278 	.word	0x08018278
 8013c20:	08018304 	.word	0x08018304

08013c24 <__hi0bits>:
 8013c24:	0c03      	lsrs	r3, r0, #16
 8013c26:	041b      	lsls	r3, r3, #16
 8013c28:	b9d3      	cbnz	r3, 8013c60 <__hi0bits+0x3c>
 8013c2a:	0400      	lsls	r0, r0, #16
 8013c2c:	2310      	movs	r3, #16
 8013c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c32:	bf04      	itt	eq
 8013c34:	0200      	lsleq	r0, r0, #8
 8013c36:	3308      	addeq	r3, #8
 8013c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c3c:	bf04      	itt	eq
 8013c3e:	0100      	lsleq	r0, r0, #4
 8013c40:	3304      	addeq	r3, #4
 8013c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013c46:	bf04      	itt	eq
 8013c48:	0080      	lsleq	r0, r0, #2
 8013c4a:	3302      	addeq	r3, #2
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	db05      	blt.n	8013c5c <__hi0bits+0x38>
 8013c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013c54:	f103 0301 	add.w	r3, r3, #1
 8013c58:	bf08      	it	eq
 8013c5a:	2320      	moveq	r3, #32
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	4770      	bx	lr
 8013c60:	2300      	movs	r3, #0
 8013c62:	e7e4      	b.n	8013c2e <__hi0bits+0xa>

08013c64 <__lo0bits>:
 8013c64:	6803      	ldr	r3, [r0, #0]
 8013c66:	f013 0207 	ands.w	r2, r3, #7
 8013c6a:	4601      	mov	r1, r0
 8013c6c:	d00b      	beq.n	8013c86 <__lo0bits+0x22>
 8013c6e:	07da      	lsls	r2, r3, #31
 8013c70:	d423      	bmi.n	8013cba <__lo0bits+0x56>
 8013c72:	0798      	lsls	r0, r3, #30
 8013c74:	bf49      	itett	mi
 8013c76:	085b      	lsrmi	r3, r3, #1
 8013c78:	089b      	lsrpl	r3, r3, #2
 8013c7a:	2001      	movmi	r0, #1
 8013c7c:	600b      	strmi	r3, [r1, #0]
 8013c7e:	bf5c      	itt	pl
 8013c80:	600b      	strpl	r3, [r1, #0]
 8013c82:	2002      	movpl	r0, #2
 8013c84:	4770      	bx	lr
 8013c86:	b298      	uxth	r0, r3
 8013c88:	b9a8      	cbnz	r0, 8013cb6 <__lo0bits+0x52>
 8013c8a:	0c1b      	lsrs	r3, r3, #16
 8013c8c:	2010      	movs	r0, #16
 8013c8e:	b2da      	uxtb	r2, r3
 8013c90:	b90a      	cbnz	r2, 8013c96 <__lo0bits+0x32>
 8013c92:	3008      	adds	r0, #8
 8013c94:	0a1b      	lsrs	r3, r3, #8
 8013c96:	071a      	lsls	r2, r3, #28
 8013c98:	bf04      	itt	eq
 8013c9a:	091b      	lsreq	r3, r3, #4
 8013c9c:	3004      	addeq	r0, #4
 8013c9e:	079a      	lsls	r2, r3, #30
 8013ca0:	bf04      	itt	eq
 8013ca2:	089b      	lsreq	r3, r3, #2
 8013ca4:	3002      	addeq	r0, #2
 8013ca6:	07da      	lsls	r2, r3, #31
 8013ca8:	d403      	bmi.n	8013cb2 <__lo0bits+0x4e>
 8013caa:	085b      	lsrs	r3, r3, #1
 8013cac:	f100 0001 	add.w	r0, r0, #1
 8013cb0:	d005      	beq.n	8013cbe <__lo0bits+0x5a>
 8013cb2:	600b      	str	r3, [r1, #0]
 8013cb4:	4770      	bx	lr
 8013cb6:	4610      	mov	r0, r2
 8013cb8:	e7e9      	b.n	8013c8e <__lo0bits+0x2a>
 8013cba:	2000      	movs	r0, #0
 8013cbc:	4770      	bx	lr
 8013cbe:	2020      	movs	r0, #32
 8013cc0:	4770      	bx	lr
	...

08013cc4 <__i2b>:
 8013cc4:	b510      	push	{r4, lr}
 8013cc6:	460c      	mov	r4, r1
 8013cc8:	2101      	movs	r1, #1
 8013cca:	f7ff feb9 	bl	8013a40 <_Balloc>
 8013cce:	4602      	mov	r2, r0
 8013cd0:	b928      	cbnz	r0, 8013cde <__i2b+0x1a>
 8013cd2:	4b05      	ldr	r3, [pc, #20]	; (8013ce8 <__i2b+0x24>)
 8013cd4:	4805      	ldr	r0, [pc, #20]	; (8013cec <__i2b+0x28>)
 8013cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013cda:	f001 fa1d 	bl	8015118 <__assert_func>
 8013cde:	2301      	movs	r3, #1
 8013ce0:	6144      	str	r4, [r0, #20]
 8013ce2:	6103      	str	r3, [r0, #16]
 8013ce4:	bd10      	pop	{r4, pc}
 8013ce6:	bf00      	nop
 8013ce8:	08018278 	.word	0x08018278
 8013cec:	08018304 	.word	0x08018304

08013cf0 <__multiply>:
 8013cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf4:	4691      	mov	r9, r2
 8013cf6:	690a      	ldr	r2, [r1, #16]
 8013cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	bfb8      	it	lt
 8013d00:	460b      	movlt	r3, r1
 8013d02:	460c      	mov	r4, r1
 8013d04:	bfbc      	itt	lt
 8013d06:	464c      	movlt	r4, r9
 8013d08:	4699      	movlt	r9, r3
 8013d0a:	6927      	ldr	r7, [r4, #16]
 8013d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013d10:	68a3      	ldr	r3, [r4, #8]
 8013d12:	6861      	ldr	r1, [r4, #4]
 8013d14:	eb07 060a 	add.w	r6, r7, sl
 8013d18:	42b3      	cmp	r3, r6
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	bfb8      	it	lt
 8013d1e:	3101      	addlt	r1, #1
 8013d20:	f7ff fe8e 	bl	8013a40 <_Balloc>
 8013d24:	b930      	cbnz	r0, 8013d34 <__multiply+0x44>
 8013d26:	4602      	mov	r2, r0
 8013d28:	4b44      	ldr	r3, [pc, #272]	; (8013e3c <__multiply+0x14c>)
 8013d2a:	4845      	ldr	r0, [pc, #276]	; (8013e40 <__multiply+0x150>)
 8013d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8013d30:	f001 f9f2 	bl	8015118 <__assert_func>
 8013d34:	f100 0514 	add.w	r5, r0, #20
 8013d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d3c:	462b      	mov	r3, r5
 8013d3e:	2200      	movs	r2, #0
 8013d40:	4543      	cmp	r3, r8
 8013d42:	d321      	bcc.n	8013d88 <__multiply+0x98>
 8013d44:	f104 0314 	add.w	r3, r4, #20
 8013d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013d4c:	f109 0314 	add.w	r3, r9, #20
 8013d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013d54:	9202      	str	r2, [sp, #8]
 8013d56:	1b3a      	subs	r2, r7, r4
 8013d58:	3a15      	subs	r2, #21
 8013d5a:	f022 0203 	bic.w	r2, r2, #3
 8013d5e:	3204      	adds	r2, #4
 8013d60:	f104 0115 	add.w	r1, r4, #21
 8013d64:	428f      	cmp	r7, r1
 8013d66:	bf38      	it	cc
 8013d68:	2204      	movcc	r2, #4
 8013d6a:	9201      	str	r2, [sp, #4]
 8013d6c:	9a02      	ldr	r2, [sp, #8]
 8013d6e:	9303      	str	r3, [sp, #12]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d80c      	bhi.n	8013d8e <__multiply+0x9e>
 8013d74:	2e00      	cmp	r6, #0
 8013d76:	dd03      	ble.n	8013d80 <__multiply+0x90>
 8013d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d05a      	beq.n	8013e36 <__multiply+0x146>
 8013d80:	6106      	str	r6, [r0, #16]
 8013d82:	b005      	add	sp, #20
 8013d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d88:	f843 2b04 	str.w	r2, [r3], #4
 8013d8c:	e7d8      	b.n	8013d40 <__multiply+0x50>
 8013d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8013d92:	f1ba 0f00 	cmp.w	sl, #0
 8013d96:	d024      	beq.n	8013de2 <__multiply+0xf2>
 8013d98:	f104 0e14 	add.w	lr, r4, #20
 8013d9c:	46a9      	mov	r9, r5
 8013d9e:	f04f 0c00 	mov.w	ip, #0
 8013da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013da6:	f8d9 1000 	ldr.w	r1, [r9]
 8013daa:	fa1f fb82 	uxth.w	fp, r2
 8013dae:	b289      	uxth	r1, r1
 8013db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8013db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013db8:	f8d9 2000 	ldr.w	r2, [r9]
 8013dbc:	4461      	add	r1, ip
 8013dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8013dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013dca:	b289      	uxth	r1, r1
 8013dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013dd0:	4577      	cmp	r7, lr
 8013dd2:	f849 1b04 	str.w	r1, [r9], #4
 8013dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013dda:	d8e2      	bhi.n	8013da2 <__multiply+0xb2>
 8013ddc:	9a01      	ldr	r2, [sp, #4]
 8013dde:	f845 c002 	str.w	ip, [r5, r2]
 8013de2:	9a03      	ldr	r2, [sp, #12]
 8013de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013de8:	3304      	adds	r3, #4
 8013dea:	f1b9 0f00 	cmp.w	r9, #0
 8013dee:	d020      	beq.n	8013e32 <__multiply+0x142>
 8013df0:	6829      	ldr	r1, [r5, #0]
 8013df2:	f104 0c14 	add.w	ip, r4, #20
 8013df6:	46ae      	mov	lr, r5
 8013df8:	f04f 0a00 	mov.w	sl, #0
 8013dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8013e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013e04:	fb09 220b 	mla	r2, r9, fp, r2
 8013e08:	4492      	add	sl, r2
 8013e0a:	b289      	uxth	r1, r1
 8013e0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013e10:	f84e 1b04 	str.w	r1, [lr], #4
 8013e14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013e18:	f8be 1000 	ldrh.w	r1, [lr]
 8013e1c:	0c12      	lsrs	r2, r2, #16
 8013e1e:	fb09 1102 	mla	r1, r9, r2, r1
 8013e22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013e26:	4567      	cmp	r7, ip
 8013e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013e2c:	d8e6      	bhi.n	8013dfc <__multiply+0x10c>
 8013e2e:	9a01      	ldr	r2, [sp, #4]
 8013e30:	50a9      	str	r1, [r5, r2]
 8013e32:	3504      	adds	r5, #4
 8013e34:	e79a      	b.n	8013d6c <__multiply+0x7c>
 8013e36:	3e01      	subs	r6, #1
 8013e38:	e79c      	b.n	8013d74 <__multiply+0x84>
 8013e3a:	bf00      	nop
 8013e3c:	08018278 	.word	0x08018278
 8013e40:	08018304 	.word	0x08018304

08013e44 <__pow5mult>:
 8013e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e48:	4615      	mov	r5, r2
 8013e4a:	f012 0203 	ands.w	r2, r2, #3
 8013e4e:	4606      	mov	r6, r0
 8013e50:	460f      	mov	r7, r1
 8013e52:	d007      	beq.n	8013e64 <__pow5mult+0x20>
 8013e54:	4c25      	ldr	r4, [pc, #148]	; (8013eec <__pow5mult+0xa8>)
 8013e56:	3a01      	subs	r2, #1
 8013e58:	2300      	movs	r3, #0
 8013e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e5e:	f7ff fe51 	bl	8013b04 <__multadd>
 8013e62:	4607      	mov	r7, r0
 8013e64:	10ad      	asrs	r5, r5, #2
 8013e66:	d03d      	beq.n	8013ee4 <__pow5mult+0xa0>
 8013e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013e6a:	b97c      	cbnz	r4, 8013e8c <__pow5mult+0x48>
 8013e6c:	2010      	movs	r0, #16
 8013e6e:	f7ff fdbf 	bl	80139f0 <malloc>
 8013e72:	4602      	mov	r2, r0
 8013e74:	6270      	str	r0, [r6, #36]	; 0x24
 8013e76:	b928      	cbnz	r0, 8013e84 <__pow5mult+0x40>
 8013e78:	4b1d      	ldr	r3, [pc, #116]	; (8013ef0 <__pow5mult+0xac>)
 8013e7a:	481e      	ldr	r0, [pc, #120]	; (8013ef4 <__pow5mult+0xb0>)
 8013e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013e80:	f001 f94a 	bl	8015118 <__assert_func>
 8013e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e88:	6004      	str	r4, [r0, #0]
 8013e8a:	60c4      	str	r4, [r0, #12]
 8013e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e94:	b94c      	cbnz	r4, 8013eaa <__pow5mult+0x66>
 8013e96:	f240 2171 	movw	r1, #625	; 0x271
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f7ff ff12 	bl	8013cc4 <__i2b>
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	6003      	str	r3, [r0, #0]
 8013eaa:	f04f 0900 	mov.w	r9, #0
 8013eae:	07eb      	lsls	r3, r5, #31
 8013eb0:	d50a      	bpl.n	8013ec8 <__pow5mult+0x84>
 8013eb2:	4639      	mov	r1, r7
 8013eb4:	4622      	mov	r2, r4
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	f7ff ff1a 	bl	8013cf0 <__multiply>
 8013ebc:	4639      	mov	r1, r7
 8013ebe:	4680      	mov	r8, r0
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	f7ff fdfd 	bl	8013ac0 <_Bfree>
 8013ec6:	4647      	mov	r7, r8
 8013ec8:	106d      	asrs	r5, r5, #1
 8013eca:	d00b      	beq.n	8013ee4 <__pow5mult+0xa0>
 8013ecc:	6820      	ldr	r0, [r4, #0]
 8013ece:	b938      	cbnz	r0, 8013ee0 <__pow5mult+0x9c>
 8013ed0:	4622      	mov	r2, r4
 8013ed2:	4621      	mov	r1, r4
 8013ed4:	4630      	mov	r0, r6
 8013ed6:	f7ff ff0b 	bl	8013cf0 <__multiply>
 8013eda:	6020      	str	r0, [r4, #0]
 8013edc:	f8c0 9000 	str.w	r9, [r0]
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	e7e4      	b.n	8013eae <__pow5mult+0x6a>
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eea:	bf00      	nop
 8013eec:	08018450 	.word	0x08018450
 8013ef0:	08018206 	.word	0x08018206
 8013ef4:	08018304 	.word	0x08018304

08013ef8 <__lshift>:
 8013ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013efc:	460c      	mov	r4, r1
 8013efe:	6849      	ldr	r1, [r1, #4]
 8013f00:	6923      	ldr	r3, [r4, #16]
 8013f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f06:	68a3      	ldr	r3, [r4, #8]
 8013f08:	4607      	mov	r7, r0
 8013f0a:	4691      	mov	r9, r2
 8013f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f10:	f108 0601 	add.w	r6, r8, #1
 8013f14:	42b3      	cmp	r3, r6
 8013f16:	db0b      	blt.n	8013f30 <__lshift+0x38>
 8013f18:	4638      	mov	r0, r7
 8013f1a:	f7ff fd91 	bl	8013a40 <_Balloc>
 8013f1e:	4605      	mov	r5, r0
 8013f20:	b948      	cbnz	r0, 8013f36 <__lshift+0x3e>
 8013f22:	4602      	mov	r2, r0
 8013f24:	4b2a      	ldr	r3, [pc, #168]	; (8013fd0 <__lshift+0xd8>)
 8013f26:	482b      	ldr	r0, [pc, #172]	; (8013fd4 <__lshift+0xdc>)
 8013f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f2c:	f001 f8f4 	bl	8015118 <__assert_func>
 8013f30:	3101      	adds	r1, #1
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	e7ee      	b.n	8013f14 <__lshift+0x1c>
 8013f36:	2300      	movs	r3, #0
 8013f38:	f100 0114 	add.w	r1, r0, #20
 8013f3c:	f100 0210 	add.w	r2, r0, #16
 8013f40:	4618      	mov	r0, r3
 8013f42:	4553      	cmp	r3, sl
 8013f44:	db37      	blt.n	8013fb6 <__lshift+0xbe>
 8013f46:	6920      	ldr	r0, [r4, #16]
 8013f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f4c:	f104 0314 	add.w	r3, r4, #20
 8013f50:	f019 091f 	ands.w	r9, r9, #31
 8013f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013f5c:	d02f      	beq.n	8013fbe <__lshift+0xc6>
 8013f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8013f62:	468a      	mov	sl, r1
 8013f64:	f04f 0c00 	mov.w	ip, #0
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	fa02 f209 	lsl.w	r2, r2, r9
 8013f6e:	ea42 020c 	orr.w	r2, r2, ip
 8013f72:	f84a 2b04 	str.w	r2, [sl], #4
 8013f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f7a:	4298      	cmp	r0, r3
 8013f7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013f80:	d8f2      	bhi.n	8013f68 <__lshift+0x70>
 8013f82:	1b03      	subs	r3, r0, r4
 8013f84:	3b15      	subs	r3, #21
 8013f86:	f023 0303 	bic.w	r3, r3, #3
 8013f8a:	3304      	adds	r3, #4
 8013f8c:	f104 0215 	add.w	r2, r4, #21
 8013f90:	4290      	cmp	r0, r2
 8013f92:	bf38      	it	cc
 8013f94:	2304      	movcc	r3, #4
 8013f96:	f841 c003 	str.w	ip, [r1, r3]
 8013f9a:	f1bc 0f00 	cmp.w	ip, #0
 8013f9e:	d001      	beq.n	8013fa4 <__lshift+0xac>
 8013fa0:	f108 0602 	add.w	r6, r8, #2
 8013fa4:	3e01      	subs	r6, #1
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	612e      	str	r6, [r5, #16]
 8013faa:	4621      	mov	r1, r4
 8013fac:	f7ff fd88 	bl	8013ac0 <_Bfree>
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013fba:	3301      	adds	r3, #1
 8013fbc:	e7c1      	b.n	8013f42 <__lshift+0x4a>
 8013fbe:	3904      	subs	r1, #4
 8013fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013fc8:	4298      	cmp	r0, r3
 8013fca:	d8f9      	bhi.n	8013fc0 <__lshift+0xc8>
 8013fcc:	e7ea      	b.n	8013fa4 <__lshift+0xac>
 8013fce:	bf00      	nop
 8013fd0:	08018278 	.word	0x08018278
 8013fd4:	08018304 	.word	0x08018304

08013fd8 <__mcmp>:
 8013fd8:	b530      	push	{r4, r5, lr}
 8013fda:	6902      	ldr	r2, [r0, #16]
 8013fdc:	690c      	ldr	r4, [r1, #16]
 8013fde:	1b12      	subs	r2, r2, r4
 8013fe0:	d10e      	bne.n	8014000 <__mcmp+0x28>
 8013fe2:	f100 0314 	add.w	r3, r0, #20
 8013fe6:	3114      	adds	r1, #20
 8013fe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013fec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013ff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ff8:	42a5      	cmp	r5, r4
 8013ffa:	d003      	beq.n	8014004 <__mcmp+0x2c>
 8013ffc:	d305      	bcc.n	801400a <__mcmp+0x32>
 8013ffe:	2201      	movs	r2, #1
 8014000:	4610      	mov	r0, r2
 8014002:	bd30      	pop	{r4, r5, pc}
 8014004:	4283      	cmp	r3, r0
 8014006:	d3f3      	bcc.n	8013ff0 <__mcmp+0x18>
 8014008:	e7fa      	b.n	8014000 <__mcmp+0x28>
 801400a:	f04f 32ff 	mov.w	r2, #4294967295
 801400e:	e7f7      	b.n	8014000 <__mcmp+0x28>

08014010 <__mdiff>:
 8014010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	460c      	mov	r4, r1
 8014016:	4606      	mov	r6, r0
 8014018:	4611      	mov	r1, r2
 801401a:	4620      	mov	r0, r4
 801401c:	4690      	mov	r8, r2
 801401e:	f7ff ffdb 	bl	8013fd8 <__mcmp>
 8014022:	1e05      	subs	r5, r0, #0
 8014024:	d110      	bne.n	8014048 <__mdiff+0x38>
 8014026:	4629      	mov	r1, r5
 8014028:	4630      	mov	r0, r6
 801402a:	f7ff fd09 	bl	8013a40 <_Balloc>
 801402e:	b930      	cbnz	r0, 801403e <__mdiff+0x2e>
 8014030:	4b3a      	ldr	r3, [pc, #232]	; (801411c <__mdiff+0x10c>)
 8014032:	4602      	mov	r2, r0
 8014034:	f240 2132 	movw	r1, #562	; 0x232
 8014038:	4839      	ldr	r0, [pc, #228]	; (8014120 <__mdiff+0x110>)
 801403a:	f001 f86d 	bl	8015118 <__assert_func>
 801403e:	2301      	movs	r3, #1
 8014040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014048:	bfa4      	itt	ge
 801404a:	4643      	movge	r3, r8
 801404c:	46a0      	movge	r8, r4
 801404e:	4630      	mov	r0, r6
 8014050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014054:	bfa6      	itte	ge
 8014056:	461c      	movge	r4, r3
 8014058:	2500      	movge	r5, #0
 801405a:	2501      	movlt	r5, #1
 801405c:	f7ff fcf0 	bl	8013a40 <_Balloc>
 8014060:	b920      	cbnz	r0, 801406c <__mdiff+0x5c>
 8014062:	4b2e      	ldr	r3, [pc, #184]	; (801411c <__mdiff+0x10c>)
 8014064:	4602      	mov	r2, r0
 8014066:	f44f 7110 	mov.w	r1, #576	; 0x240
 801406a:	e7e5      	b.n	8014038 <__mdiff+0x28>
 801406c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014070:	6926      	ldr	r6, [r4, #16]
 8014072:	60c5      	str	r5, [r0, #12]
 8014074:	f104 0914 	add.w	r9, r4, #20
 8014078:	f108 0514 	add.w	r5, r8, #20
 801407c:	f100 0e14 	add.w	lr, r0, #20
 8014080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014088:	f108 0210 	add.w	r2, r8, #16
 801408c:	46f2      	mov	sl, lr
 801408e:	2100      	movs	r1, #0
 8014090:	f859 3b04 	ldr.w	r3, [r9], #4
 8014094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014098:	fa1f f883 	uxth.w	r8, r3
 801409c:	fa11 f18b 	uxtah	r1, r1, fp
 80140a0:	0c1b      	lsrs	r3, r3, #16
 80140a2:	eba1 0808 	sub.w	r8, r1, r8
 80140a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80140aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80140ae:	fa1f f888 	uxth.w	r8, r8
 80140b2:	1419      	asrs	r1, r3, #16
 80140b4:	454e      	cmp	r6, r9
 80140b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80140ba:	f84a 3b04 	str.w	r3, [sl], #4
 80140be:	d8e7      	bhi.n	8014090 <__mdiff+0x80>
 80140c0:	1b33      	subs	r3, r6, r4
 80140c2:	3b15      	subs	r3, #21
 80140c4:	f023 0303 	bic.w	r3, r3, #3
 80140c8:	3304      	adds	r3, #4
 80140ca:	3415      	adds	r4, #21
 80140cc:	42a6      	cmp	r6, r4
 80140ce:	bf38      	it	cc
 80140d0:	2304      	movcc	r3, #4
 80140d2:	441d      	add	r5, r3
 80140d4:	4473      	add	r3, lr
 80140d6:	469e      	mov	lr, r3
 80140d8:	462e      	mov	r6, r5
 80140da:	4566      	cmp	r6, ip
 80140dc:	d30e      	bcc.n	80140fc <__mdiff+0xec>
 80140de:	f10c 0203 	add.w	r2, ip, #3
 80140e2:	1b52      	subs	r2, r2, r5
 80140e4:	f022 0203 	bic.w	r2, r2, #3
 80140e8:	3d03      	subs	r5, #3
 80140ea:	45ac      	cmp	ip, r5
 80140ec:	bf38      	it	cc
 80140ee:	2200      	movcc	r2, #0
 80140f0:	441a      	add	r2, r3
 80140f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80140f6:	b17b      	cbz	r3, 8014118 <__mdiff+0x108>
 80140f8:	6107      	str	r7, [r0, #16]
 80140fa:	e7a3      	b.n	8014044 <__mdiff+0x34>
 80140fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8014100:	fa11 f288 	uxtah	r2, r1, r8
 8014104:	1414      	asrs	r4, r2, #16
 8014106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801410a:	b292      	uxth	r2, r2
 801410c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014110:	f84e 2b04 	str.w	r2, [lr], #4
 8014114:	1421      	asrs	r1, r4, #16
 8014116:	e7e0      	b.n	80140da <__mdiff+0xca>
 8014118:	3f01      	subs	r7, #1
 801411a:	e7ea      	b.n	80140f2 <__mdiff+0xe2>
 801411c:	08018278 	.word	0x08018278
 8014120:	08018304 	.word	0x08018304

08014124 <__ulp>:
 8014124:	b082      	sub	sp, #8
 8014126:	ed8d 0b00 	vstr	d0, [sp]
 801412a:	9b01      	ldr	r3, [sp, #4]
 801412c:	4912      	ldr	r1, [pc, #72]	; (8014178 <__ulp+0x54>)
 801412e:	4019      	ands	r1, r3
 8014130:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014134:	2900      	cmp	r1, #0
 8014136:	dd05      	ble.n	8014144 <__ulp+0x20>
 8014138:	2200      	movs	r2, #0
 801413a:	460b      	mov	r3, r1
 801413c:	ec43 2b10 	vmov	d0, r2, r3
 8014140:	b002      	add	sp, #8
 8014142:	4770      	bx	lr
 8014144:	4249      	negs	r1, r1
 8014146:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801414a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801414e:	f04f 0200 	mov.w	r2, #0
 8014152:	f04f 0300 	mov.w	r3, #0
 8014156:	da04      	bge.n	8014162 <__ulp+0x3e>
 8014158:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801415c:	fa41 f300 	asr.w	r3, r1, r0
 8014160:	e7ec      	b.n	801413c <__ulp+0x18>
 8014162:	f1a0 0114 	sub.w	r1, r0, #20
 8014166:	291e      	cmp	r1, #30
 8014168:	bfda      	itte	le
 801416a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801416e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014172:	2101      	movgt	r1, #1
 8014174:	460a      	mov	r2, r1
 8014176:	e7e1      	b.n	801413c <__ulp+0x18>
 8014178:	7ff00000 	.word	0x7ff00000

0801417c <__b2d>:
 801417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801417e:	6905      	ldr	r5, [r0, #16]
 8014180:	f100 0714 	add.w	r7, r0, #20
 8014184:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014188:	1f2e      	subs	r6, r5, #4
 801418a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801418e:	4620      	mov	r0, r4
 8014190:	f7ff fd48 	bl	8013c24 <__hi0bits>
 8014194:	f1c0 0320 	rsb	r3, r0, #32
 8014198:	280a      	cmp	r0, #10
 801419a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014218 <__b2d+0x9c>
 801419e:	600b      	str	r3, [r1, #0]
 80141a0:	dc14      	bgt.n	80141cc <__b2d+0x50>
 80141a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80141a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80141aa:	42b7      	cmp	r7, r6
 80141ac:	ea41 030c 	orr.w	r3, r1, ip
 80141b0:	bf34      	ite	cc
 80141b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141b6:	2100      	movcs	r1, #0
 80141b8:	3015      	adds	r0, #21
 80141ba:	fa04 f000 	lsl.w	r0, r4, r0
 80141be:	fa21 f10e 	lsr.w	r1, r1, lr
 80141c2:	ea40 0201 	orr.w	r2, r0, r1
 80141c6:	ec43 2b10 	vmov	d0, r2, r3
 80141ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141cc:	42b7      	cmp	r7, r6
 80141ce:	bf3a      	itte	cc
 80141d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80141d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80141d8:	2100      	movcs	r1, #0
 80141da:	380b      	subs	r0, #11
 80141dc:	d017      	beq.n	801420e <__b2d+0x92>
 80141de:	f1c0 0c20 	rsb	ip, r0, #32
 80141e2:	fa04 f500 	lsl.w	r5, r4, r0
 80141e6:	42be      	cmp	r6, r7
 80141e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80141ec:	ea45 0504 	orr.w	r5, r5, r4
 80141f0:	bf8c      	ite	hi
 80141f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80141f6:	2400      	movls	r4, #0
 80141f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80141fc:	fa01 f000 	lsl.w	r0, r1, r0
 8014200:	fa24 f40c 	lsr.w	r4, r4, ip
 8014204:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014208:	ea40 0204 	orr.w	r2, r0, r4
 801420c:	e7db      	b.n	80141c6 <__b2d+0x4a>
 801420e:	ea44 030c 	orr.w	r3, r4, ip
 8014212:	460a      	mov	r2, r1
 8014214:	e7d7      	b.n	80141c6 <__b2d+0x4a>
 8014216:	bf00      	nop
 8014218:	3ff00000 	.word	0x3ff00000

0801421c <__d2b>:
 801421c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014220:	4689      	mov	r9, r1
 8014222:	2101      	movs	r1, #1
 8014224:	ec57 6b10 	vmov	r6, r7, d0
 8014228:	4690      	mov	r8, r2
 801422a:	f7ff fc09 	bl	8013a40 <_Balloc>
 801422e:	4604      	mov	r4, r0
 8014230:	b930      	cbnz	r0, 8014240 <__d2b+0x24>
 8014232:	4602      	mov	r2, r0
 8014234:	4b25      	ldr	r3, [pc, #148]	; (80142cc <__d2b+0xb0>)
 8014236:	4826      	ldr	r0, [pc, #152]	; (80142d0 <__d2b+0xb4>)
 8014238:	f240 310a 	movw	r1, #778	; 0x30a
 801423c:	f000 ff6c 	bl	8015118 <__assert_func>
 8014240:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014248:	bb35      	cbnz	r5, 8014298 <__d2b+0x7c>
 801424a:	2e00      	cmp	r6, #0
 801424c:	9301      	str	r3, [sp, #4]
 801424e:	d028      	beq.n	80142a2 <__d2b+0x86>
 8014250:	4668      	mov	r0, sp
 8014252:	9600      	str	r6, [sp, #0]
 8014254:	f7ff fd06 	bl	8013c64 <__lo0bits>
 8014258:	9900      	ldr	r1, [sp, #0]
 801425a:	b300      	cbz	r0, 801429e <__d2b+0x82>
 801425c:	9a01      	ldr	r2, [sp, #4]
 801425e:	f1c0 0320 	rsb	r3, r0, #32
 8014262:	fa02 f303 	lsl.w	r3, r2, r3
 8014266:	430b      	orrs	r3, r1
 8014268:	40c2      	lsrs	r2, r0
 801426a:	6163      	str	r3, [r4, #20]
 801426c:	9201      	str	r2, [sp, #4]
 801426e:	9b01      	ldr	r3, [sp, #4]
 8014270:	61a3      	str	r3, [r4, #24]
 8014272:	2b00      	cmp	r3, #0
 8014274:	bf14      	ite	ne
 8014276:	2202      	movne	r2, #2
 8014278:	2201      	moveq	r2, #1
 801427a:	6122      	str	r2, [r4, #16]
 801427c:	b1d5      	cbz	r5, 80142b4 <__d2b+0x98>
 801427e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014282:	4405      	add	r5, r0
 8014284:	f8c9 5000 	str.w	r5, [r9]
 8014288:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801428c:	f8c8 0000 	str.w	r0, [r8]
 8014290:	4620      	mov	r0, r4
 8014292:	b003      	add	sp, #12
 8014294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801429c:	e7d5      	b.n	801424a <__d2b+0x2e>
 801429e:	6161      	str	r1, [r4, #20]
 80142a0:	e7e5      	b.n	801426e <__d2b+0x52>
 80142a2:	a801      	add	r0, sp, #4
 80142a4:	f7ff fcde 	bl	8013c64 <__lo0bits>
 80142a8:	9b01      	ldr	r3, [sp, #4]
 80142aa:	6163      	str	r3, [r4, #20]
 80142ac:	2201      	movs	r2, #1
 80142ae:	6122      	str	r2, [r4, #16]
 80142b0:	3020      	adds	r0, #32
 80142b2:	e7e3      	b.n	801427c <__d2b+0x60>
 80142b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80142b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80142bc:	f8c9 0000 	str.w	r0, [r9]
 80142c0:	6918      	ldr	r0, [r3, #16]
 80142c2:	f7ff fcaf 	bl	8013c24 <__hi0bits>
 80142c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80142ca:	e7df      	b.n	801428c <__d2b+0x70>
 80142cc:	08018278 	.word	0x08018278
 80142d0:	08018304 	.word	0x08018304

080142d4 <__ratio>:
 80142d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d8:	4688      	mov	r8, r1
 80142da:	4669      	mov	r1, sp
 80142dc:	4681      	mov	r9, r0
 80142de:	f7ff ff4d 	bl	801417c <__b2d>
 80142e2:	a901      	add	r1, sp, #4
 80142e4:	4640      	mov	r0, r8
 80142e6:	ec55 4b10 	vmov	r4, r5, d0
 80142ea:	f7ff ff47 	bl	801417c <__b2d>
 80142ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80142f6:	eba3 0c02 	sub.w	ip, r3, r2
 80142fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80142fe:	1a9b      	subs	r3, r3, r2
 8014300:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014304:	ec51 0b10 	vmov	r0, r1, d0
 8014308:	2b00      	cmp	r3, #0
 801430a:	bfd6      	itet	le
 801430c:	460a      	movle	r2, r1
 801430e:	462a      	movgt	r2, r5
 8014310:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014314:	468b      	mov	fp, r1
 8014316:	462f      	mov	r7, r5
 8014318:	bfd4      	ite	le
 801431a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801431e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014322:	4620      	mov	r0, r4
 8014324:	ee10 2a10 	vmov	r2, s0
 8014328:	465b      	mov	r3, fp
 801432a:	4639      	mov	r1, r7
 801432c:	f7ec faae 	bl	800088c <__aeabi_ddiv>
 8014330:	ec41 0b10 	vmov	d0, r0, r1
 8014334:	b003      	add	sp, #12
 8014336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801433a <__copybits>:
 801433a:	3901      	subs	r1, #1
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	1149      	asrs	r1, r1, #5
 8014340:	6914      	ldr	r4, [r2, #16]
 8014342:	3101      	adds	r1, #1
 8014344:	f102 0314 	add.w	r3, r2, #20
 8014348:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801434c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014350:	1f05      	subs	r5, r0, #4
 8014352:	42a3      	cmp	r3, r4
 8014354:	d30c      	bcc.n	8014370 <__copybits+0x36>
 8014356:	1aa3      	subs	r3, r4, r2
 8014358:	3b11      	subs	r3, #17
 801435a:	f023 0303 	bic.w	r3, r3, #3
 801435e:	3211      	adds	r2, #17
 8014360:	42a2      	cmp	r2, r4
 8014362:	bf88      	it	hi
 8014364:	2300      	movhi	r3, #0
 8014366:	4418      	add	r0, r3
 8014368:	2300      	movs	r3, #0
 801436a:	4288      	cmp	r0, r1
 801436c:	d305      	bcc.n	801437a <__copybits+0x40>
 801436e:	bd70      	pop	{r4, r5, r6, pc}
 8014370:	f853 6b04 	ldr.w	r6, [r3], #4
 8014374:	f845 6f04 	str.w	r6, [r5, #4]!
 8014378:	e7eb      	b.n	8014352 <__copybits+0x18>
 801437a:	f840 3b04 	str.w	r3, [r0], #4
 801437e:	e7f4      	b.n	801436a <__copybits+0x30>

08014380 <__any_on>:
 8014380:	f100 0214 	add.w	r2, r0, #20
 8014384:	6900      	ldr	r0, [r0, #16]
 8014386:	114b      	asrs	r3, r1, #5
 8014388:	4298      	cmp	r0, r3
 801438a:	b510      	push	{r4, lr}
 801438c:	db11      	blt.n	80143b2 <__any_on+0x32>
 801438e:	dd0a      	ble.n	80143a6 <__any_on+0x26>
 8014390:	f011 011f 	ands.w	r1, r1, #31
 8014394:	d007      	beq.n	80143a6 <__any_on+0x26>
 8014396:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801439a:	fa24 f001 	lsr.w	r0, r4, r1
 801439e:	fa00 f101 	lsl.w	r1, r0, r1
 80143a2:	428c      	cmp	r4, r1
 80143a4:	d10b      	bne.n	80143be <__any_on+0x3e>
 80143a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d803      	bhi.n	80143b6 <__any_on+0x36>
 80143ae:	2000      	movs	r0, #0
 80143b0:	bd10      	pop	{r4, pc}
 80143b2:	4603      	mov	r3, r0
 80143b4:	e7f7      	b.n	80143a6 <__any_on+0x26>
 80143b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143ba:	2900      	cmp	r1, #0
 80143bc:	d0f5      	beq.n	80143aa <__any_on+0x2a>
 80143be:	2001      	movs	r0, #1
 80143c0:	e7f6      	b.n	80143b0 <__any_on+0x30>

080143c2 <_calloc_r>:
 80143c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143c4:	fba1 2402 	umull	r2, r4, r1, r2
 80143c8:	b94c      	cbnz	r4, 80143de <_calloc_r+0x1c>
 80143ca:	4611      	mov	r1, r2
 80143cc:	9201      	str	r2, [sp, #4]
 80143ce:	f000 f87b 	bl	80144c8 <_malloc_r>
 80143d2:	9a01      	ldr	r2, [sp, #4]
 80143d4:	4605      	mov	r5, r0
 80143d6:	b930      	cbnz	r0, 80143e6 <_calloc_r+0x24>
 80143d8:	4628      	mov	r0, r5
 80143da:	b003      	add	sp, #12
 80143dc:	bd30      	pop	{r4, r5, pc}
 80143de:	220c      	movs	r2, #12
 80143e0:	6002      	str	r2, [r0, #0]
 80143e2:	2500      	movs	r5, #0
 80143e4:	e7f8      	b.n	80143d8 <_calloc_r+0x16>
 80143e6:	4621      	mov	r1, r4
 80143e8:	f7fc fafa 	bl	80109e0 <memset>
 80143ec:	e7f4      	b.n	80143d8 <_calloc_r+0x16>
	...

080143f0 <_free_r>:
 80143f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143f2:	2900      	cmp	r1, #0
 80143f4:	d044      	beq.n	8014480 <_free_r+0x90>
 80143f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143fa:	9001      	str	r0, [sp, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f1a1 0404 	sub.w	r4, r1, #4
 8014402:	bfb8      	it	lt
 8014404:	18e4      	addlt	r4, r4, r3
 8014406:	f001 f88b 	bl	8015520 <__malloc_lock>
 801440a:	4a1e      	ldr	r2, [pc, #120]	; (8014484 <_free_r+0x94>)
 801440c:	9801      	ldr	r0, [sp, #4]
 801440e:	6813      	ldr	r3, [r2, #0]
 8014410:	b933      	cbnz	r3, 8014420 <_free_r+0x30>
 8014412:	6063      	str	r3, [r4, #4]
 8014414:	6014      	str	r4, [r2, #0]
 8014416:	b003      	add	sp, #12
 8014418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801441c:	f001 b886 	b.w	801552c <__malloc_unlock>
 8014420:	42a3      	cmp	r3, r4
 8014422:	d908      	bls.n	8014436 <_free_r+0x46>
 8014424:	6825      	ldr	r5, [r4, #0]
 8014426:	1961      	adds	r1, r4, r5
 8014428:	428b      	cmp	r3, r1
 801442a:	bf01      	itttt	eq
 801442c:	6819      	ldreq	r1, [r3, #0]
 801442e:	685b      	ldreq	r3, [r3, #4]
 8014430:	1949      	addeq	r1, r1, r5
 8014432:	6021      	streq	r1, [r4, #0]
 8014434:	e7ed      	b.n	8014412 <_free_r+0x22>
 8014436:	461a      	mov	r2, r3
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	b10b      	cbz	r3, 8014440 <_free_r+0x50>
 801443c:	42a3      	cmp	r3, r4
 801443e:	d9fa      	bls.n	8014436 <_free_r+0x46>
 8014440:	6811      	ldr	r1, [r2, #0]
 8014442:	1855      	adds	r5, r2, r1
 8014444:	42a5      	cmp	r5, r4
 8014446:	d10b      	bne.n	8014460 <_free_r+0x70>
 8014448:	6824      	ldr	r4, [r4, #0]
 801444a:	4421      	add	r1, r4
 801444c:	1854      	adds	r4, r2, r1
 801444e:	42a3      	cmp	r3, r4
 8014450:	6011      	str	r1, [r2, #0]
 8014452:	d1e0      	bne.n	8014416 <_free_r+0x26>
 8014454:	681c      	ldr	r4, [r3, #0]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	6053      	str	r3, [r2, #4]
 801445a:	4421      	add	r1, r4
 801445c:	6011      	str	r1, [r2, #0]
 801445e:	e7da      	b.n	8014416 <_free_r+0x26>
 8014460:	d902      	bls.n	8014468 <_free_r+0x78>
 8014462:	230c      	movs	r3, #12
 8014464:	6003      	str	r3, [r0, #0]
 8014466:	e7d6      	b.n	8014416 <_free_r+0x26>
 8014468:	6825      	ldr	r5, [r4, #0]
 801446a:	1961      	adds	r1, r4, r5
 801446c:	428b      	cmp	r3, r1
 801446e:	bf04      	itt	eq
 8014470:	6819      	ldreq	r1, [r3, #0]
 8014472:	685b      	ldreq	r3, [r3, #4]
 8014474:	6063      	str	r3, [r4, #4]
 8014476:	bf04      	itt	eq
 8014478:	1949      	addeq	r1, r1, r5
 801447a:	6021      	streq	r1, [r4, #0]
 801447c:	6054      	str	r4, [r2, #4]
 801447e:	e7ca      	b.n	8014416 <_free_r+0x26>
 8014480:	b003      	add	sp, #12
 8014482:	bd30      	pop	{r4, r5, pc}
 8014484:	20004964 	.word	0x20004964

08014488 <sbrk_aligned>:
 8014488:	b570      	push	{r4, r5, r6, lr}
 801448a:	4e0e      	ldr	r6, [pc, #56]	; (80144c4 <sbrk_aligned+0x3c>)
 801448c:	460c      	mov	r4, r1
 801448e:	6831      	ldr	r1, [r6, #0]
 8014490:	4605      	mov	r5, r0
 8014492:	b911      	cbnz	r1, 801449a <sbrk_aligned+0x12>
 8014494:	f000 fd28 	bl	8014ee8 <_sbrk_r>
 8014498:	6030      	str	r0, [r6, #0]
 801449a:	4621      	mov	r1, r4
 801449c:	4628      	mov	r0, r5
 801449e:	f000 fd23 	bl	8014ee8 <_sbrk_r>
 80144a2:	1c43      	adds	r3, r0, #1
 80144a4:	d00a      	beq.n	80144bc <sbrk_aligned+0x34>
 80144a6:	1cc4      	adds	r4, r0, #3
 80144a8:	f024 0403 	bic.w	r4, r4, #3
 80144ac:	42a0      	cmp	r0, r4
 80144ae:	d007      	beq.n	80144c0 <sbrk_aligned+0x38>
 80144b0:	1a21      	subs	r1, r4, r0
 80144b2:	4628      	mov	r0, r5
 80144b4:	f000 fd18 	bl	8014ee8 <_sbrk_r>
 80144b8:	3001      	adds	r0, #1
 80144ba:	d101      	bne.n	80144c0 <sbrk_aligned+0x38>
 80144bc:	f04f 34ff 	mov.w	r4, #4294967295
 80144c0:	4620      	mov	r0, r4
 80144c2:	bd70      	pop	{r4, r5, r6, pc}
 80144c4:	20004968 	.word	0x20004968

080144c8 <_malloc_r>:
 80144c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144cc:	1ccd      	adds	r5, r1, #3
 80144ce:	f025 0503 	bic.w	r5, r5, #3
 80144d2:	3508      	adds	r5, #8
 80144d4:	2d0c      	cmp	r5, #12
 80144d6:	bf38      	it	cc
 80144d8:	250c      	movcc	r5, #12
 80144da:	2d00      	cmp	r5, #0
 80144dc:	4607      	mov	r7, r0
 80144de:	db01      	blt.n	80144e4 <_malloc_r+0x1c>
 80144e0:	42a9      	cmp	r1, r5
 80144e2:	d905      	bls.n	80144f0 <_malloc_r+0x28>
 80144e4:	230c      	movs	r3, #12
 80144e6:	603b      	str	r3, [r7, #0]
 80144e8:	2600      	movs	r6, #0
 80144ea:	4630      	mov	r0, r6
 80144ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144f0:	4e2e      	ldr	r6, [pc, #184]	; (80145ac <_malloc_r+0xe4>)
 80144f2:	f001 f815 	bl	8015520 <__malloc_lock>
 80144f6:	6833      	ldr	r3, [r6, #0]
 80144f8:	461c      	mov	r4, r3
 80144fa:	bb34      	cbnz	r4, 801454a <_malloc_r+0x82>
 80144fc:	4629      	mov	r1, r5
 80144fe:	4638      	mov	r0, r7
 8014500:	f7ff ffc2 	bl	8014488 <sbrk_aligned>
 8014504:	1c43      	adds	r3, r0, #1
 8014506:	4604      	mov	r4, r0
 8014508:	d14d      	bne.n	80145a6 <_malloc_r+0xde>
 801450a:	6834      	ldr	r4, [r6, #0]
 801450c:	4626      	mov	r6, r4
 801450e:	2e00      	cmp	r6, #0
 8014510:	d140      	bne.n	8014594 <_malloc_r+0xcc>
 8014512:	6823      	ldr	r3, [r4, #0]
 8014514:	4631      	mov	r1, r6
 8014516:	4638      	mov	r0, r7
 8014518:	eb04 0803 	add.w	r8, r4, r3
 801451c:	f000 fce4 	bl	8014ee8 <_sbrk_r>
 8014520:	4580      	cmp	r8, r0
 8014522:	d13a      	bne.n	801459a <_malloc_r+0xd2>
 8014524:	6821      	ldr	r1, [r4, #0]
 8014526:	3503      	adds	r5, #3
 8014528:	1a6d      	subs	r5, r5, r1
 801452a:	f025 0503 	bic.w	r5, r5, #3
 801452e:	3508      	adds	r5, #8
 8014530:	2d0c      	cmp	r5, #12
 8014532:	bf38      	it	cc
 8014534:	250c      	movcc	r5, #12
 8014536:	4629      	mov	r1, r5
 8014538:	4638      	mov	r0, r7
 801453a:	f7ff ffa5 	bl	8014488 <sbrk_aligned>
 801453e:	3001      	adds	r0, #1
 8014540:	d02b      	beq.n	801459a <_malloc_r+0xd2>
 8014542:	6823      	ldr	r3, [r4, #0]
 8014544:	442b      	add	r3, r5
 8014546:	6023      	str	r3, [r4, #0]
 8014548:	e00e      	b.n	8014568 <_malloc_r+0xa0>
 801454a:	6822      	ldr	r2, [r4, #0]
 801454c:	1b52      	subs	r2, r2, r5
 801454e:	d41e      	bmi.n	801458e <_malloc_r+0xc6>
 8014550:	2a0b      	cmp	r2, #11
 8014552:	d916      	bls.n	8014582 <_malloc_r+0xba>
 8014554:	1961      	adds	r1, r4, r5
 8014556:	42a3      	cmp	r3, r4
 8014558:	6025      	str	r5, [r4, #0]
 801455a:	bf18      	it	ne
 801455c:	6059      	strne	r1, [r3, #4]
 801455e:	6863      	ldr	r3, [r4, #4]
 8014560:	bf08      	it	eq
 8014562:	6031      	streq	r1, [r6, #0]
 8014564:	5162      	str	r2, [r4, r5]
 8014566:	604b      	str	r3, [r1, #4]
 8014568:	4638      	mov	r0, r7
 801456a:	f104 060b 	add.w	r6, r4, #11
 801456e:	f000 ffdd 	bl	801552c <__malloc_unlock>
 8014572:	f026 0607 	bic.w	r6, r6, #7
 8014576:	1d23      	adds	r3, r4, #4
 8014578:	1af2      	subs	r2, r6, r3
 801457a:	d0b6      	beq.n	80144ea <_malloc_r+0x22>
 801457c:	1b9b      	subs	r3, r3, r6
 801457e:	50a3      	str	r3, [r4, r2]
 8014580:	e7b3      	b.n	80144ea <_malloc_r+0x22>
 8014582:	6862      	ldr	r2, [r4, #4]
 8014584:	42a3      	cmp	r3, r4
 8014586:	bf0c      	ite	eq
 8014588:	6032      	streq	r2, [r6, #0]
 801458a:	605a      	strne	r2, [r3, #4]
 801458c:	e7ec      	b.n	8014568 <_malloc_r+0xa0>
 801458e:	4623      	mov	r3, r4
 8014590:	6864      	ldr	r4, [r4, #4]
 8014592:	e7b2      	b.n	80144fa <_malloc_r+0x32>
 8014594:	4634      	mov	r4, r6
 8014596:	6876      	ldr	r6, [r6, #4]
 8014598:	e7b9      	b.n	801450e <_malloc_r+0x46>
 801459a:	230c      	movs	r3, #12
 801459c:	603b      	str	r3, [r7, #0]
 801459e:	4638      	mov	r0, r7
 80145a0:	f000 ffc4 	bl	801552c <__malloc_unlock>
 80145a4:	e7a1      	b.n	80144ea <_malloc_r+0x22>
 80145a6:	6025      	str	r5, [r4, #0]
 80145a8:	e7de      	b.n	8014568 <_malloc_r+0xa0>
 80145aa:	bf00      	nop
 80145ac:	20004964 	.word	0x20004964

080145b0 <__ssputs_r>:
 80145b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145b4:	688e      	ldr	r6, [r1, #8]
 80145b6:	429e      	cmp	r6, r3
 80145b8:	4682      	mov	sl, r0
 80145ba:	460c      	mov	r4, r1
 80145bc:	4690      	mov	r8, r2
 80145be:	461f      	mov	r7, r3
 80145c0:	d838      	bhi.n	8014634 <__ssputs_r+0x84>
 80145c2:	898a      	ldrh	r2, [r1, #12]
 80145c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80145c8:	d032      	beq.n	8014630 <__ssputs_r+0x80>
 80145ca:	6825      	ldr	r5, [r4, #0]
 80145cc:	6909      	ldr	r1, [r1, #16]
 80145ce:	eba5 0901 	sub.w	r9, r5, r1
 80145d2:	6965      	ldr	r5, [r4, #20]
 80145d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145dc:	3301      	adds	r3, #1
 80145de:	444b      	add	r3, r9
 80145e0:	106d      	asrs	r5, r5, #1
 80145e2:	429d      	cmp	r5, r3
 80145e4:	bf38      	it	cc
 80145e6:	461d      	movcc	r5, r3
 80145e8:	0553      	lsls	r3, r2, #21
 80145ea:	d531      	bpl.n	8014650 <__ssputs_r+0xa0>
 80145ec:	4629      	mov	r1, r5
 80145ee:	f7ff ff6b 	bl	80144c8 <_malloc_r>
 80145f2:	4606      	mov	r6, r0
 80145f4:	b950      	cbnz	r0, 801460c <__ssputs_r+0x5c>
 80145f6:	230c      	movs	r3, #12
 80145f8:	f8ca 3000 	str.w	r3, [sl]
 80145fc:	89a3      	ldrh	r3, [r4, #12]
 80145fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	f04f 30ff 	mov.w	r0, #4294967295
 8014608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801460c:	6921      	ldr	r1, [r4, #16]
 801460e:	464a      	mov	r2, r9
 8014610:	f7ff fa08 	bl	8013a24 <memcpy>
 8014614:	89a3      	ldrh	r3, [r4, #12]
 8014616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801461a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801461e:	81a3      	strh	r3, [r4, #12]
 8014620:	6126      	str	r6, [r4, #16]
 8014622:	6165      	str	r5, [r4, #20]
 8014624:	444e      	add	r6, r9
 8014626:	eba5 0509 	sub.w	r5, r5, r9
 801462a:	6026      	str	r6, [r4, #0]
 801462c:	60a5      	str	r5, [r4, #8]
 801462e:	463e      	mov	r6, r7
 8014630:	42be      	cmp	r6, r7
 8014632:	d900      	bls.n	8014636 <__ssputs_r+0x86>
 8014634:	463e      	mov	r6, r7
 8014636:	6820      	ldr	r0, [r4, #0]
 8014638:	4632      	mov	r2, r6
 801463a:	4641      	mov	r1, r8
 801463c:	f000 ff56 	bl	80154ec <memmove>
 8014640:	68a3      	ldr	r3, [r4, #8]
 8014642:	1b9b      	subs	r3, r3, r6
 8014644:	60a3      	str	r3, [r4, #8]
 8014646:	6823      	ldr	r3, [r4, #0]
 8014648:	4433      	add	r3, r6
 801464a:	6023      	str	r3, [r4, #0]
 801464c:	2000      	movs	r0, #0
 801464e:	e7db      	b.n	8014608 <__ssputs_r+0x58>
 8014650:	462a      	mov	r2, r5
 8014652:	f000 ff71 	bl	8015538 <_realloc_r>
 8014656:	4606      	mov	r6, r0
 8014658:	2800      	cmp	r0, #0
 801465a:	d1e1      	bne.n	8014620 <__ssputs_r+0x70>
 801465c:	6921      	ldr	r1, [r4, #16]
 801465e:	4650      	mov	r0, sl
 8014660:	f7ff fec6 	bl	80143f0 <_free_r>
 8014664:	e7c7      	b.n	80145f6 <__ssputs_r+0x46>
	...

08014668 <_svfiprintf_r>:
 8014668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801466c:	4698      	mov	r8, r3
 801466e:	898b      	ldrh	r3, [r1, #12]
 8014670:	061b      	lsls	r3, r3, #24
 8014672:	b09d      	sub	sp, #116	; 0x74
 8014674:	4607      	mov	r7, r0
 8014676:	460d      	mov	r5, r1
 8014678:	4614      	mov	r4, r2
 801467a:	d50e      	bpl.n	801469a <_svfiprintf_r+0x32>
 801467c:	690b      	ldr	r3, [r1, #16]
 801467e:	b963      	cbnz	r3, 801469a <_svfiprintf_r+0x32>
 8014680:	2140      	movs	r1, #64	; 0x40
 8014682:	f7ff ff21 	bl	80144c8 <_malloc_r>
 8014686:	6028      	str	r0, [r5, #0]
 8014688:	6128      	str	r0, [r5, #16]
 801468a:	b920      	cbnz	r0, 8014696 <_svfiprintf_r+0x2e>
 801468c:	230c      	movs	r3, #12
 801468e:	603b      	str	r3, [r7, #0]
 8014690:	f04f 30ff 	mov.w	r0, #4294967295
 8014694:	e0d1      	b.n	801483a <_svfiprintf_r+0x1d2>
 8014696:	2340      	movs	r3, #64	; 0x40
 8014698:	616b      	str	r3, [r5, #20]
 801469a:	2300      	movs	r3, #0
 801469c:	9309      	str	r3, [sp, #36]	; 0x24
 801469e:	2320      	movs	r3, #32
 80146a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80146a8:	2330      	movs	r3, #48	; 0x30
 80146aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014854 <_svfiprintf_r+0x1ec>
 80146ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146b2:	f04f 0901 	mov.w	r9, #1
 80146b6:	4623      	mov	r3, r4
 80146b8:	469a      	mov	sl, r3
 80146ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146be:	b10a      	cbz	r2, 80146c4 <_svfiprintf_r+0x5c>
 80146c0:	2a25      	cmp	r2, #37	; 0x25
 80146c2:	d1f9      	bne.n	80146b8 <_svfiprintf_r+0x50>
 80146c4:	ebba 0b04 	subs.w	fp, sl, r4
 80146c8:	d00b      	beq.n	80146e2 <_svfiprintf_r+0x7a>
 80146ca:	465b      	mov	r3, fp
 80146cc:	4622      	mov	r2, r4
 80146ce:	4629      	mov	r1, r5
 80146d0:	4638      	mov	r0, r7
 80146d2:	f7ff ff6d 	bl	80145b0 <__ssputs_r>
 80146d6:	3001      	adds	r0, #1
 80146d8:	f000 80aa 	beq.w	8014830 <_svfiprintf_r+0x1c8>
 80146dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146de:	445a      	add	r2, fp
 80146e0:	9209      	str	r2, [sp, #36]	; 0x24
 80146e2:	f89a 3000 	ldrb.w	r3, [sl]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f000 80a2 	beq.w	8014830 <_svfiprintf_r+0x1c8>
 80146ec:	2300      	movs	r3, #0
 80146ee:	f04f 32ff 	mov.w	r2, #4294967295
 80146f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146f6:	f10a 0a01 	add.w	sl, sl, #1
 80146fa:	9304      	str	r3, [sp, #16]
 80146fc:	9307      	str	r3, [sp, #28]
 80146fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014702:	931a      	str	r3, [sp, #104]	; 0x68
 8014704:	4654      	mov	r4, sl
 8014706:	2205      	movs	r2, #5
 8014708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801470c:	4851      	ldr	r0, [pc, #324]	; (8014854 <_svfiprintf_r+0x1ec>)
 801470e:	f7eb fd87 	bl	8000220 <memchr>
 8014712:	9a04      	ldr	r2, [sp, #16]
 8014714:	b9d8      	cbnz	r0, 801474e <_svfiprintf_r+0xe6>
 8014716:	06d0      	lsls	r0, r2, #27
 8014718:	bf44      	itt	mi
 801471a:	2320      	movmi	r3, #32
 801471c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014720:	0711      	lsls	r1, r2, #28
 8014722:	bf44      	itt	mi
 8014724:	232b      	movmi	r3, #43	; 0x2b
 8014726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801472a:	f89a 3000 	ldrb.w	r3, [sl]
 801472e:	2b2a      	cmp	r3, #42	; 0x2a
 8014730:	d015      	beq.n	801475e <_svfiprintf_r+0xf6>
 8014732:	9a07      	ldr	r2, [sp, #28]
 8014734:	4654      	mov	r4, sl
 8014736:	2000      	movs	r0, #0
 8014738:	f04f 0c0a 	mov.w	ip, #10
 801473c:	4621      	mov	r1, r4
 801473e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014742:	3b30      	subs	r3, #48	; 0x30
 8014744:	2b09      	cmp	r3, #9
 8014746:	d94e      	bls.n	80147e6 <_svfiprintf_r+0x17e>
 8014748:	b1b0      	cbz	r0, 8014778 <_svfiprintf_r+0x110>
 801474a:	9207      	str	r2, [sp, #28]
 801474c:	e014      	b.n	8014778 <_svfiprintf_r+0x110>
 801474e:	eba0 0308 	sub.w	r3, r0, r8
 8014752:	fa09 f303 	lsl.w	r3, r9, r3
 8014756:	4313      	orrs	r3, r2
 8014758:	9304      	str	r3, [sp, #16]
 801475a:	46a2      	mov	sl, r4
 801475c:	e7d2      	b.n	8014704 <_svfiprintf_r+0x9c>
 801475e:	9b03      	ldr	r3, [sp, #12]
 8014760:	1d19      	adds	r1, r3, #4
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	9103      	str	r1, [sp, #12]
 8014766:	2b00      	cmp	r3, #0
 8014768:	bfbb      	ittet	lt
 801476a:	425b      	neglt	r3, r3
 801476c:	f042 0202 	orrlt.w	r2, r2, #2
 8014770:	9307      	strge	r3, [sp, #28]
 8014772:	9307      	strlt	r3, [sp, #28]
 8014774:	bfb8      	it	lt
 8014776:	9204      	strlt	r2, [sp, #16]
 8014778:	7823      	ldrb	r3, [r4, #0]
 801477a:	2b2e      	cmp	r3, #46	; 0x2e
 801477c:	d10c      	bne.n	8014798 <_svfiprintf_r+0x130>
 801477e:	7863      	ldrb	r3, [r4, #1]
 8014780:	2b2a      	cmp	r3, #42	; 0x2a
 8014782:	d135      	bne.n	80147f0 <_svfiprintf_r+0x188>
 8014784:	9b03      	ldr	r3, [sp, #12]
 8014786:	1d1a      	adds	r2, r3, #4
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	9203      	str	r2, [sp, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	bfb8      	it	lt
 8014790:	f04f 33ff 	movlt.w	r3, #4294967295
 8014794:	3402      	adds	r4, #2
 8014796:	9305      	str	r3, [sp, #20]
 8014798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014864 <_svfiprintf_r+0x1fc>
 801479c:	7821      	ldrb	r1, [r4, #0]
 801479e:	2203      	movs	r2, #3
 80147a0:	4650      	mov	r0, sl
 80147a2:	f7eb fd3d 	bl	8000220 <memchr>
 80147a6:	b140      	cbz	r0, 80147ba <_svfiprintf_r+0x152>
 80147a8:	2340      	movs	r3, #64	; 0x40
 80147aa:	eba0 000a 	sub.w	r0, r0, sl
 80147ae:	fa03 f000 	lsl.w	r0, r3, r0
 80147b2:	9b04      	ldr	r3, [sp, #16]
 80147b4:	4303      	orrs	r3, r0
 80147b6:	3401      	adds	r4, #1
 80147b8:	9304      	str	r3, [sp, #16]
 80147ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147be:	4826      	ldr	r0, [pc, #152]	; (8014858 <_svfiprintf_r+0x1f0>)
 80147c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147c4:	2206      	movs	r2, #6
 80147c6:	f7eb fd2b 	bl	8000220 <memchr>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d038      	beq.n	8014840 <_svfiprintf_r+0x1d8>
 80147ce:	4b23      	ldr	r3, [pc, #140]	; (801485c <_svfiprintf_r+0x1f4>)
 80147d0:	bb1b      	cbnz	r3, 801481a <_svfiprintf_r+0x1b2>
 80147d2:	9b03      	ldr	r3, [sp, #12]
 80147d4:	3307      	adds	r3, #7
 80147d6:	f023 0307 	bic.w	r3, r3, #7
 80147da:	3308      	adds	r3, #8
 80147dc:	9303      	str	r3, [sp, #12]
 80147de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147e0:	4433      	add	r3, r6
 80147e2:	9309      	str	r3, [sp, #36]	; 0x24
 80147e4:	e767      	b.n	80146b6 <_svfiprintf_r+0x4e>
 80147e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80147ea:	460c      	mov	r4, r1
 80147ec:	2001      	movs	r0, #1
 80147ee:	e7a5      	b.n	801473c <_svfiprintf_r+0xd4>
 80147f0:	2300      	movs	r3, #0
 80147f2:	3401      	adds	r4, #1
 80147f4:	9305      	str	r3, [sp, #20]
 80147f6:	4619      	mov	r1, r3
 80147f8:	f04f 0c0a 	mov.w	ip, #10
 80147fc:	4620      	mov	r0, r4
 80147fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014802:	3a30      	subs	r2, #48	; 0x30
 8014804:	2a09      	cmp	r2, #9
 8014806:	d903      	bls.n	8014810 <_svfiprintf_r+0x1a8>
 8014808:	2b00      	cmp	r3, #0
 801480a:	d0c5      	beq.n	8014798 <_svfiprintf_r+0x130>
 801480c:	9105      	str	r1, [sp, #20]
 801480e:	e7c3      	b.n	8014798 <_svfiprintf_r+0x130>
 8014810:	fb0c 2101 	mla	r1, ip, r1, r2
 8014814:	4604      	mov	r4, r0
 8014816:	2301      	movs	r3, #1
 8014818:	e7f0      	b.n	80147fc <_svfiprintf_r+0x194>
 801481a:	ab03      	add	r3, sp, #12
 801481c:	9300      	str	r3, [sp, #0]
 801481e:	462a      	mov	r2, r5
 8014820:	4b0f      	ldr	r3, [pc, #60]	; (8014860 <_svfiprintf_r+0x1f8>)
 8014822:	a904      	add	r1, sp, #16
 8014824:	4638      	mov	r0, r7
 8014826:	f7fc f983 	bl	8010b30 <_printf_float>
 801482a:	1c42      	adds	r2, r0, #1
 801482c:	4606      	mov	r6, r0
 801482e:	d1d6      	bne.n	80147de <_svfiprintf_r+0x176>
 8014830:	89ab      	ldrh	r3, [r5, #12]
 8014832:	065b      	lsls	r3, r3, #25
 8014834:	f53f af2c 	bmi.w	8014690 <_svfiprintf_r+0x28>
 8014838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801483a:	b01d      	add	sp, #116	; 0x74
 801483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014840:	ab03      	add	r3, sp, #12
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	462a      	mov	r2, r5
 8014846:	4b06      	ldr	r3, [pc, #24]	; (8014860 <_svfiprintf_r+0x1f8>)
 8014848:	a904      	add	r1, sp, #16
 801484a:	4638      	mov	r0, r7
 801484c:	f7fc fc14 	bl	8011078 <_printf_i>
 8014850:	e7eb      	b.n	801482a <_svfiprintf_r+0x1c2>
 8014852:	bf00      	nop
 8014854:	0801845c 	.word	0x0801845c
 8014858:	08018466 	.word	0x08018466
 801485c:	08010b31 	.word	0x08010b31
 8014860:	080145b1 	.word	0x080145b1
 8014864:	08018462 	.word	0x08018462

08014868 <_sungetc_r>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	1c4b      	adds	r3, r1, #1
 801486c:	4614      	mov	r4, r2
 801486e:	d103      	bne.n	8014878 <_sungetc_r+0x10>
 8014870:	f04f 35ff 	mov.w	r5, #4294967295
 8014874:	4628      	mov	r0, r5
 8014876:	bd38      	pop	{r3, r4, r5, pc}
 8014878:	8993      	ldrh	r3, [r2, #12]
 801487a:	f023 0320 	bic.w	r3, r3, #32
 801487e:	8193      	strh	r3, [r2, #12]
 8014880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014882:	6852      	ldr	r2, [r2, #4]
 8014884:	b2cd      	uxtb	r5, r1
 8014886:	b18b      	cbz	r3, 80148ac <_sungetc_r+0x44>
 8014888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801488a:	4293      	cmp	r3, r2
 801488c:	dd08      	ble.n	80148a0 <_sungetc_r+0x38>
 801488e:	6823      	ldr	r3, [r4, #0]
 8014890:	1e5a      	subs	r2, r3, #1
 8014892:	6022      	str	r2, [r4, #0]
 8014894:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014898:	6863      	ldr	r3, [r4, #4]
 801489a:	3301      	adds	r3, #1
 801489c:	6063      	str	r3, [r4, #4]
 801489e:	e7e9      	b.n	8014874 <_sungetc_r+0xc>
 80148a0:	4621      	mov	r1, r4
 80148a2:	f000 fbf1 	bl	8015088 <__submore>
 80148a6:	2800      	cmp	r0, #0
 80148a8:	d0f1      	beq.n	801488e <_sungetc_r+0x26>
 80148aa:	e7e1      	b.n	8014870 <_sungetc_r+0x8>
 80148ac:	6921      	ldr	r1, [r4, #16]
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	b151      	cbz	r1, 80148c8 <_sungetc_r+0x60>
 80148b2:	4299      	cmp	r1, r3
 80148b4:	d208      	bcs.n	80148c8 <_sungetc_r+0x60>
 80148b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80148ba:	42a9      	cmp	r1, r5
 80148bc:	d104      	bne.n	80148c8 <_sungetc_r+0x60>
 80148be:	3b01      	subs	r3, #1
 80148c0:	3201      	adds	r2, #1
 80148c2:	6023      	str	r3, [r4, #0]
 80148c4:	6062      	str	r2, [r4, #4]
 80148c6:	e7d5      	b.n	8014874 <_sungetc_r+0xc>
 80148c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80148cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148d0:	6363      	str	r3, [r4, #52]	; 0x34
 80148d2:	2303      	movs	r3, #3
 80148d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80148d6:	4623      	mov	r3, r4
 80148d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80148dc:	6023      	str	r3, [r4, #0]
 80148de:	2301      	movs	r3, #1
 80148e0:	e7dc      	b.n	801489c <_sungetc_r+0x34>

080148e2 <__ssrefill_r>:
 80148e2:	b510      	push	{r4, lr}
 80148e4:	460c      	mov	r4, r1
 80148e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80148e8:	b169      	cbz	r1, 8014906 <__ssrefill_r+0x24>
 80148ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148ee:	4299      	cmp	r1, r3
 80148f0:	d001      	beq.n	80148f6 <__ssrefill_r+0x14>
 80148f2:	f7ff fd7d 	bl	80143f0 <_free_r>
 80148f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148f8:	6063      	str	r3, [r4, #4]
 80148fa:	2000      	movs	r0, #0
 80148fc:	6360      	str	r0, [r4, #52]	; 0x34
 80148fe:	b113      	cbz	r3, 8014906 <__ssrefill_r+0x24>
 8014900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014902:	6023      	str	r3, [r4, #0]
 8014904:	bd10      	pop	{r4, pc}
 8014906:	6923      	ldr	r3, [r4, #16]
 8014908:	6023      	str	r3, [r4, #0]
 801490a:	2300      	movs	r3, #0
 801490c:	6063      	str	r3, [r4, #4]
 801490e:	89a3      	ldrh	r3, [r4, #12]
 8014910:	f043 0320 	orr.w	r3, r3, #32
 8014914:	81a3      	strh	r3, [r4, #12]
 8014916:	f04f 30ff 	mov.w	r0, #4294967295
 801491a:	e7f3      	b.n	8014904 <__ssrefill_r+0x22>

0801491c <__ssvfiscanf_r>:
 801491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014920:	460c      	mov	r4, r1
 8014922:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8014926:	2100      	movs	r1, #0
 8014928:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801492c:	49a6      	ldr	r1, [pc, #664]	; (8014bc8 <__ssvfiscanf_r+0x2ac>)
 801492e:	91a0      	str	r1, [sp, #640]	; 0x280
 8014930:	f10d 0804 	add.w	r8, sp, #4
 8014934:	49a5      	ldr	r1, [pc, #660]	; (8014bcc <__ssvfiscanf_r+0x2b0>)
 8014936:	4fa6      	ldr	r7, [pc, #664]	; (8014bd0 <__ssvfiscanf_r+0x2b4>)
 8014938:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014bd4 <__ssvfiscanf_r+0x2b8>
 801493c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014940:	4606      	mov	r6, r0
 8014942:	91a1      	str	r1, [sp, #644]	; 0x284
 8014944:	9300      	str	r3, [sp, #0]
 8014946:	7813      	ldrb	r3, [r2, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	f000 815a 	beq.w	8014c02 <__ssvfiscanf_r+0x2e6>
 801494e:	5dd9      	ldrb	r1, [r3, r7]
 8014950:	f011 0108 	ands.w	r1, r1, #8
 8014954:	f102 0501 	add.w	r5, r2, #1
 8014958:	d019      	beq.n	801498e <__ssvfiscanf_r+0x72>
 801495a:	6863      	ldr	r3, [r4, #4]
 801495c:	2b00      	cmp	r3, #0
 801495e:	dd0f      	ble.n	8014980 <__ssvfiscanf_r+0x64>
 8014960:	6823      	ldr	r3, [r4, #0]
 8014962:	781a      	ldrb	r2, [r3, #0]
 8014964:	5cba      	ldrb	r2, [r7, r2]
 8014966:	0712      	lsls	r2, r2, #28
 8014968:	d401      	bmi.n	801496e <__ssvfiscanf_r+0x52>
 801496a:	462a      	mov	r2, r5
 801496c:	e7eb      	b.n	8014946 <__ssvfiscanf_r+0x2a>
 801496e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014970:	3201      	adds	r2, #1
 8014972:	9245      	str	r2, [sp, #276]	; 0x114
 8014974:	6862      	ldr	r2, [r4, #4]
 8014976:	3301      	adds	r3, #1
 8014978:	3a01      	subs	r2, #1
 801497a:	6062      	str	r2, [r4, #4]
 801497c:	6023      	str	r3, [r4, #0]
 801497e:	e7ec      	b.n	801495a <__ssvfiscanf_r+0x3e>
 8014980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014982:	4621      	mov	r1, r4
 8014984:	4630      	mov	r0, r6
 8014986:	4798      	blx	r3
 8014988:	2800      	cmp	r0, #0
 801498a:	d0e9      	beq.n	8014960 <__ssvfiscanf_r+0x44>
 801498c:	e7ed      	b.n	801496a <__ssvfiscanf_r+0x4e>
 801498e:	2b25      	cmp	r3, #37	; 0x25
 8014990:	d012      	beq.n	80149b8 <__ssvfiscanf_r+0x9c>
 8014992:	469a      	mov	sl, r3
 8014994:	6863      	ldr	r3, [r4, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	f340 8091 	ble.w	8014abe <__ssvfiscanf_r+0x1a2>
 801499c:	6822      	ldr	r2, [r4, #0]
 801499e:	7813      	ldrb	r3, [r2, #0]
 80149a0:	4553      	cmp	r3, sl
 80149a2:	f040 812e 	bne.w	8014c02 <__ssvfiscanf_r+0x2e6>
 80149a6:	6863      	ldr	r3, [r4, #4]
 80149a8:	3b01      	subs	r3, #1
 80149aa:	6063      	str	r3, [r4, #4]
 80149ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80149ae:	3201      	adds	r2, #1
 80149b0:	3301      	adds	r3, #1
 80149b2:	6022      	str	r2, [r4, #0]
 80149b4:	9345      	str	r3, [sp, #276]	; 0x114
 80149b6:	e7d8      	b.n	801496a <__ssvfiscanf_r+0x4e>
 80149b8:	9141      	str	r1, [sp, #260]	; 0x104
 80149ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80149bc:	7853      	ldrb	r3, [r2, #1]
 80149be:	2b2a      	cmp	r3, #42	; 0x2a
 80149c0:	bf02      	ittt	eq
 80149c2:	2310      	moveq	r3, #16
 80149c4:	1c95      	addeq	r5, r2, #2
 80149c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80149c8:	220a      	movs	r2, #10
 80149ca:	46aa      	mov	sl, r5
 80149cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80149d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80149d4:	2b09      	cmp	r3, #9
 80149d6:	d91d      	bls.n	8014a14 <__ssvfiscanf_r+0xf8>
 80149d8:	487e      	ldr	r0, [pc, #504]	; (8014bd4 <__ssvfiscanf_r+0x2b8>)
 80149da:	2203      	movs	r2, #3
 80149dc:	f7eb fc20 	bl	8000220 <memchr>
 80149e0:	b140      	cbz	r0, 80149f4 <__ssvfiscanf_r+0xd8>
 80149e2:	2301      	movs	r3, #1
 80149e4:	eba0 0009 	sub.w	r0, r0, r9
 80149e8:	fa03 f000 	lsl.w	r0, r3, r0
 80149ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80149ee:	4318      	orrs	r0, r3
 80149f0:	9041      	str	r0, [sp, #260]	; 0x104
 80149f2:	4655      	mov	r5, sl
 80149f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80149f8:	2b78      	cmp	r3, #120	; 0x78
 80149fa:	d806      	bhi.n	8014a0a <__ssvfiscanf_r+0xee>
 80149fc:	2b57      	cmp	r3, #87	; 0x57
 80149fe:	d810      	bhi.n	8014a22 <__ssvfiscanf_r+0x106>
 8014a00:	2b25      	cmp	r3, #37	; 0x25
 8014a02:	d0c6      	beq.n	8014992 <__ssvfiscanf_r+0x76>
 8014a04:	d856      	bhi.n	8014ab4 <__ssvfiscanf_r+0x198>
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d064      	beq.n	8014ad4 <__ssvfiscanf_r+0x1b8>
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	9347      	str	r3, [sp, #284]	; 0x11c
 8014a0e:	230a      	movs	r3, #10
 8014a10:	9342      	str	r3, [sp, #264]	; 0x108
 8014a12:	e071      	b.n	8014af8 <__ssvfiscanf_r+0x1dc>
 8014a14:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014a16:	fb02 1103 	mla	r1, r2, r3, r1
 8014a1a:	3930      	subs	r1, #48	; 0x30
 8014a1c:	9143      	str	r1, [sp, #268]	; 0x10c
 8014a1e:	4655      	mov	r5, sl
 8014a20:	e7d3      	b.n	80149ca <__ssvfiscanf_r+0xae>
 8014a22:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014a26:	2a20      	cmp	r2, #32
 8014a28:	d8ef      	bhi.n	8014a0a <__ssvfiscanf_r+0xee>
 8014a2a:	a101      	add	r1, pc, #4	; (adr r1, 8014a30 <__ssvfiscanf_r+0x114>)
 8014a2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014a30:	08014ae3 	.word	0x08014ae3
 8014a34:	08014a0b 	.word	0x08014a0b
 8014a38:	08014a0b 	.word	0x08014a0b
 8014a3c:	08014b41 	.word	0x08014b41
 8014a40:	08014a0b 	.word	0x08014a0b
 8014a44:	08014a0b 	.word	0x08014a0b
 8014a48:	08014a0b 	.word	0x08014a0b
 8014a4c:	08014a0b 	.word	0x08014a0b
 8014a50:	08014a0b 	.word	0x08014a0b
 8014a54:	08014a0b 	.word	0x08014a0b
 8014a58:	08014a0b 	.word	0x08014a0b
 8014a5c:	08014b57 	.word	0x08014b57
 8014a60:	08014b2d 	.word	0x08014b2d
 8014a64:	08014abb 	.word	0x08014abb
 8014a68:	08014abb 	.word	0x08014abb
 8014a6c:	08014abb 	.word	0x08014abb
 8014a70:	08014a0b 	.word	0x08014a0b
 8014a74:	08014b31 	.word	0x08014b31
 8014a78:	08014a0b 	.word	0x08014a0b
 8014a7c:	08014a0b 	.word	0x08014a0b
 8014a80:	08014a0b 	.word	0x08014a0b
 8014a84:	08014a0b 	.word	0x08014a0b
 8014a88:	08014b67 	.word	0x08014b67
 8014a8c:	08014b39 	.word	0x08014b39
 8014a90:	08014adb 	.word	0x08014adb
 8014a94:	08014a0b 	.word	0x08014a0b
 8014a98:	08014a0b 	.word	0x08014a0b
 8014a9c:	08014b63 	.word	0x08014b63
 8014aa0:	08014a0b 	.word	0x08014a0b
 8014aa4:	08014b2d 	.word	0x08014b2d
 8014aa8:	08014a0b 	.word	0x08014a0b
 8014aac:	08014a0b 	.word	0x08014a0b
 8014ab0:	08014ae3 	.word	0x08014ae3
 8014ab4:	3b45      	subs	r3, #69	; 0x45
 8014ab6:	2b02      	cmp	r3, #2
 8014ab8:	d8a7      	bhi.n	8014a0a <__ssvfiscanf_r+0xee>
 8014aba:	2305      	movs	r3, #5
 8014abc:	e01b      	b.n	8014af6 <__ssvfiscanf_r+0x1da>
 8014abe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014ac0:	4621      	mov	r1, r4
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	4798      	blx	r3
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	f43f af68 	beq.w	801499c <__ssvfiscanf_r+0x80>
 8014acc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	f040 808d 	bne.w	8014bee <__ssvfiscanf_r+0x2d2>
 8014ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ad8:	e08f      	b.n	8014bfa <__ssvfiscanf_r+0x2de>
 8014ada:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014adc:	f042 0220 	orr.w	r2, r2, #32
 8014ae0:	9241      	str	r2, [sp, #260]	; 0x104
 8014ae2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014ae8:	9241      	str	r2, [sp, #260]	; 0x104
 8014aea:	2210      	movs	r2, #16
 8014aec:	2b6f      	cmp	r3, #111	; 0x6f
 8014aee:	9242      	str	r2, [sp, #264]	; 0x108
 8014af0:	bf34      	ite	cc
 8014af2:	2303      	movcc	r3, #3
 8014af4:	2304      	movcs	r3, #4
 8014af6:	9347      	str	r3, [sp, #284]	; 0x11c
 8014af8:	6863      	ldr	r3, [r4, #4]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	dd42      	ble.n	8014b84 <__ssvfiscanf_r+0x268>
 8014afe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014b00:	0659      	lsls	r1, r3, #25
 8014b02:	d404      	bmi.n	8014b0e <__ssvfiscanf_r+0x1f2>
 8014b04:	6823      	ldr	r3, [r4, #0]
 8014b06:	781a      	ldrb	r2, [r3, #0]
 8014b08:	5cba      	ldrb	r2, [r7, r2]
 8014b0a:	0712      	lsls	r2, r2, #28
 8014b0c:	d441      	bmi.n	8014b92 <__ssvfiscanf_r+0x276>
 8014b0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014b10:	2b02      	cmp	r3, #2
 8014b12:	dc50      	bgt.n	8014bb6 <__ssvfiscanf_r+0x29a>
 8014b14:	466b      	mov	r3, sp
 8014b16:	4622      	mov	r2, r4
 8014b18:	a941      	add	r1, sp, #260	; 0x104
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	f000 f876 	bl	8014c0c <_scanf_chars>
 8014b20:	2801      	cmp	r0, #1
 8014b22:	d06e      	beq.n	8014c02 <__ssvfiscanf_r+0x2e6>
 8014b24:	2802      	cmp	r0, #2
 8014b26:	f47f af20 	bne.w	801496a <__ssvfiscanf_r+0x4e>
 8014b2a:	e7cf      	b.n	8014acc <__ssvfiscanf_r+0x1b0>
 8014b2c:	220a      	movs	r2, #10
 8014b2e:	e7dd      	b.n	8014aec <__ssvfiscanf_r+0x1d0>
 8014b30:	2300      	movs	r3, #0
 8014b32:	9342      	str	r3, [sp, #264]	; 0x108
 8014b34:	2303      	movs	r3, #3
 8014b36:	e7de      	b.n	8014af6 <__ssvfiscanf_r+0x1da>
 8014b38:	2308      	movs	r3, #8
 8014b3a:	9342      	str	r3, [sp, #264]	; 0x108
 8014b3c:	2304      	movs	r3, #4
 8014b3e:	e7da      	b.n	8014af6 <__ssvfiscanf_r+0x1da>
 8014b40:	4629      	mov	r1, r5
 8014b42:	4640      	mov	r0, r8
 8014b44:	f000 f9e0 	bl	8014f08 <__sccl>
 8014b48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b4e:	9341      	str	r3, [sp, #260]	; 0x104
 8014b50:	4605      	mov	r5, r0
 8014b52:	2301      	movs	r3, #1
 8014b54:	e7cf      	b.n	8014af6 <__ssvfiscanf_r+0x1da>
 8014b56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b5c:	9341      	str	r3, [sp, #260]	; 0x104
 8014b5e:	2300      	movs	r3, #0
 8014b60:	e7c9      	b.n	8014af6 <__ssvfiscanf_r+0x1da>
 8014b62:	2302      	movs	r3, #2
 8014b64:	e7c7      	b.n	8014af6 <__ssvfiscanf_r+0x1da>
 8014b66:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014b68:	06c3      	lsls	r3, r0, #27
 8014b6a:	f53f aefe 	bmi.w	801496a <__ssvfiscanf_r+0x4e>
 8014b6e:	9b00      	ldr	r3, [sp, #0]
 8014b70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014b72:	1d19      	adds	r1, r3, #4
 8014b74:	9100      	str	r1, [sp, #0]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	f010 0f01 	tst.w	r0, #1
 8014b7c:	bf14      	ite	ne
 8014b7e:	801a      	strhne	r2, [r3, #0]
 8014b80:	601a      	streq	r2, [r3, #0]
 8014b82:	e6f2      	b.n	801496a <__ssvfiscanf_r+0x4e>
 8014b84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014b86:	4621      	mov	r1, r4
 8014b88:	4630      	mov	r0, r6
 8014b8a:	4798      	blx	r3
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	d0b6      	beq.n	8014afe <__ssvfiscanf_r+0x1e2>
 8014b90:	e79c      	b.n	8014acc <__ssvfiscanf_r+0x1b0>
 8014b92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014b94:	3201      	adds	r2, #1
 8014b96:	9245      	str	r2, [sp, #276]	; 0x114
 8014b98:	6862      	ldr	r2, [r4, #4]
 8014b9a:	3a01      	subs	r2, #1
 8014b9c:	2a00      	cmp	r2, #0
 8014b9e:	6062      	str	r2, [r4, #4]
 8014ba0:	dd02      	ble.n	8014ba8 <__ssvfiscanf_r+0x28c>
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	6023      	str	r3, [r4, #0]
 8014ba6:	e7ad      	b.n	8014b04 <__ssvfiscanf_r+0x1e8>
 8014ba8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014baa:	4621      	mov	r1, r4
 8014bac:	4630      	mov	r0, r6
 8014bae:	4798      	blx	r3
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	d0a7      	beq.n	8014b04 <__ssvfiscanf_r+0x1e8>
 8014bb4:	e78a      	b.n	8014acc <__ssvfiscanf_r+0x1b0>
 8014bb6:	2b04      	cmp	r3, #4
 8014bb8:	dc0e      	bgt.n	8014bd8 <__ssvfiscanf_r+0x2bc>
 8014bba:	466b      	mov	r3, sp
 8014bbc:	4622      	mov	r2, r4
 8014bbe:	a941      	add	r1, sp, #260	; 0x104
 8014bc0:	4630      	mov	r0, r6
 8014bc2:	f000 f87d 	bl	8014cc0 <_scanf_i>
 8014bc6:	e7ab      	b.n	8014b20 <__ssvfiscanf_r+0x204>
 8014bc8:	08014869 	.word	0x08014869
 8014bcc:	080148e3 	.word	0x080148e3
 8014bd0:	080180f9 	.word	0x080180f9
 8014bd4:	08018462 	.word	0x08018462
 8014bd8:	4b0b      	ldr	r3, [pc, #44]	; (8014c08 <__ssvfiscanf_r+0x2ec>)
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f43f aec5 	beq.w	801496a <__ssvfiscanf_r+0x4e>
 8014be0:	466b      	mov	r3, sp
 8014be2:	4622      	mov	r2, r4
 8014be4:	a941      	add	r1, sp, #260	; 0x104
 8014be6:	4630      	mov	r0, r6
 8014be8:	f7fc fb6c 	bl	80112c4 <_scanf_float>
 8014bec:	e798      	b.n	8014b20 <__ssvfiscanf_r+0x204>
 8014bee:	89a3      	ldrh	r3, [r4, #12]
 8014bf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014bf4:	bf18      	it	ne
 8014bf6:	f04f 30ff 	movne.w	r0, #4294967295
 8014bfa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8014bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c02:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014c04:	e7f9      	b.n	8014bfa <__ssvfiscanf_r+0x2de>
 8014c06:	bf00      	nop
 8014c08:	080112c5 	.word	0x080112c5

08014c0c <_scanf_chars>:
 8014c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c10:	4615      	mov	r5, r2
 8014c12:	688a      	ldr	r2, [r1, #8]
 8014c14:	4680      	mov	r8, r0
 8014c16:	460c      	mov	r4, r1
 8014c18:	b932      	cbnz	r2, 8014c28 <_scanf_chars+0x1c>
 8014c1a:	698a      	ldr	r2, [r1, #24]
 8014c1c:	2a00      	cmp	r2, #0
 8014c1e:	bf0c      	ite	eq
 8014c20:	2201      	moveq	r2, #1
 8014c22:	f04f 32ff 	movne.w	r2, #4294967295
 8014c26:	608a      	str	r2, [r1, #8]
 8014c28:	6822      	ldr	r2, [r4, #0]
 8014c2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014cbc <_scanf_chars+0xb0>
 8014c2e:	06d1      	lsls	r1, r2, #27
 8014c30:	bf5f      	itttt	pl
 8014c32:	681a      	ldrpl	r2, [r3, #0]
 8014c34:	1d11      	addpl	r1, r2, #4
 8014c36:	6019      	strpl	r1, [r3, #0]
 8014c38:	6816      	ldrpl	r6, [r2, #0]
 8014c3a:	2700      	movs	r7, #0
 8014c3c:	69a0      	ldr	r0, [r4, #24]
 8014c3e:	b188      	cbz	r0, 8014c64 <_scanf_chars+0x58>
 8014c40:	2801      	cmp	r0, #1
 8014c42:	d107      	bne.n	8014c54 <_scanf_chars+0x48>
 8014c44:	682a      	ldr	r2, [r5, #0]
 8014c46:	7811      	ldrb	r1, [r2, #0]
 8014c48:	6962      	ldr	r2, [r4, #20]
 8014c4a:	5c52      	ldrb	r2, [r2, r1]
 8014c4c:	b952      	cbnz	r2, 8014c64 <_scanf_chars+0x58>
 8014c4e:	2f00      	cmp	r7, #0
 8014c50:	d031      	beq.n	8014cb6 <_scanf_chars+0xaa>
 8014c52:	e022      	b.n	8014c9a <_scanf_chars+0x8e>
 8014c54:	2802      	cmp	r0, #2
 8014c56:	d120      	bne.n	8014c9a <_scanf_chars+0x8e>
 8014c58:	682b      	ldr	r3, [r5, #0]
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014c60:	071b      	lsls	r3, r3, #28
 8014c62:	d41a      	bmi.n	8014c9a <_scanf_chars+0x8e>
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	06da      	lsls	r2, r3, #27
 8014c68:	bf5e      	ittt	pl
 8014c6a:	682b      	ldrpl	r3, [r5, #0]
 8014c6c:	781b      	ldrbpl	r3, [r3, #0]
 8014c6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014c72:	682a      	ldr	r2, [r5, #0]
 8014c74:	686b      	ldr	r3, [r5, #4]
 8014c76:	3201      	adds	r2, #1
 8014c78:	602a      	str	r2, [r5, #0]
 8014c7a:	68a2      	ldr	r2, [r4, #8]
 8014c7c:	3b01      	subs	r3, #1
 8014c7e:	3a01      	subs	r2, #1
 8014c80:	606b      	str	r3, [r5, #4]
 8014c82:	3701      	adds	r7, #1
 8014c84:	60a2      	str	r2, [r4, #8]
 8014c86:	b142      	cbz	r2, 8014c9a <_scanf_chars+0x8e>
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	dcd7      	bgt.n	8014c3c <_scanf_chars+0x30>
 8014c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014c90:	4629      	mov	r1, r5
 8014c92:	4640      	mov	r0, r8
 8014c94:	4798      	blx	r3
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d0d0      	beq.n	8014c3c <_scanf_chars+0x30>
 8014c9a:	6823      	ldr	r3, [r4, #0]
 8014c9c:	f013 0310 	ands.w	r3, r3, #16
 8014ca0:	d105      	bne.n	8014cae <_scanf_chars+0xa2>
 8014ca2:	68e2      	ldr	r2, [r4, #12]
 8014ca4:	3201      	adds	r2, #1
 8014ca6:	60e2      	str	r2, [r4, #12]
 8014ca8:	69a2      	ldr	r2, [r4, #24]
 8014caa:	b102      	cbz	r2, 8014cae <_scanf_chars+0xa2>
 8014cac:	7033      	strb	r3, [r6, #0]
 8014cae:	6923      	ldr	r3, [r4, #16]
 8014cb0:	443b      	add	r3, r7
 8014cb2:	6123      	str	r3, [r4, #16]
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cba:	bf00      	nop
 8014cbc:	080180f9 	.word	0x080180f9

08014cc0 <_scanf_i>:
 8014cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cc4:	4698      	mov	r8, r3
 8014cc6:	4b76      	ldr	r3, [pc, #472]	; (8014ea0 <_scanf_i+0x1e0>)
 8014cc8:	460c      	mov	r4, r1
 8014cca:	4682      	mov	sl, r0
 8014ccc:	4616      	mov	r6, r2
 8014cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014cd2:	b087      	sub	sp, #28
 8014cd4:	ab03      	add	r3, sp, #12
 8014cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014cda:	4b72      	ldr	r3, [pc, #456]	; (8014ea4 <_scanf_i+0x1e4>)
 8014cdc:	69a1      	ldr	r1, [r4, #24]
 8014cde:	4a72      	ldr	r2, [pc, #456]	; (8014ea8 <_scanf_i+0x1e8>)
 8014ce0:	2903      	cmp	r1, #3
 8014ce2:	bf18      	it	ne
 8014ce4:	461a      	movne	r2, r3
 8014ce6:	68a3      	ldr	r3, [r4, #8]
 8014ce8:	9201      	str	r2, [sp, #4]
 8014cea:	1e5a      	subs	r2, r3, #1
 8014cec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014cf0:	bf88      	it	hi
 8014cf2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014cf6:	4627      	mov	r7, r4
 8014cf8:	bf82      	ittt	hi
 8014cfa:	eb03 0905 	addhi.w	r9, r3, r5
 8014cfe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014d02:	60a3      	strhi	r3, [r4, #8]
 8014d04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014d08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014d0c:	bf98      	it	ls
 8014d0e:	f04f 0900 	movls.w	r9, #0
 8014d12:	6023      	str	r3, [r4, #0]
 8014d14:	463d      	mov	r5, r7
 8014d16:	f04f 0b00 	mov.w	fp, #0
 8014d1a:	6831      	ldr	r1, [r6, #0]
 8014d1c:	ab03      	add	r3, sp, #12
 8014d1e:	7809      	ldrb	r1, [r1, #0]
 8014d20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014d24:	2202      	movs	r2, #2
 8014d26:	f7eb fa7b 	bl	8000220 <memchr>
 8014d2a:	b328      	cbz	r0, 8014d78 <_scanf_i+0xb8>
 8014d2c:	f1bb 0f01 	cmp.w	fp, #1
 8014d30:	d159      	bne.n	8014de6 <_scanf_i+0x126>
 8014d32:	6862      	ldr	r2, [r4, #4]
 8014d34:	b92a      	cbnz	r2, 8014d42 <_scanf_i+0x82>
 8014d36:	6822      	ldr	r2, [r4, #0]
 8014d38:	2308      	movs	r3, #8
 8014d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014d3e:	6063      	str	r3, [r4, #4]
 8014d40:	6022      	str	r2, [r4, #0]
 8014d42:	6822      	ldr	r2, [r4, #0]
 8014d44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014d48:	6022      	str	r2, [r4, #0]
 8014d4a:	68a2      	ldr	r2, [r4, #8]
 8014d4c:	1e51      	subs	r1, r2, #1
 8014d4e:	60a1      	str	r1, [r4, #8]
 8014d50:	b192      	cbz	r2, 8014d78 <_scanf_i+0xb8>
 8014d52:	6832      	ldr	r2, [r6, #0]
 8014d54:	1c51      	adds	r1, r2, #1
 8014d56:	6031      	str	r1, [r6, #0]
 8014d58:	7812      	ldrb	r2, [r2, #0]
 8014d5a:	f805 2b01 	strb.w	r2, [r5], #1
 8014d5e:	6872      	ldr	r2, [r6, #4]
 8014d60:	3a01      	subs	r2, #1
 8014d62:	2a00      	cmp	r2, #0
 8014d64:	6072      	str	r2, [r6, #4]
 8014d66:	dc07      	bgt.n	8014d78 <_scanf_i+0xb8>
 8014d68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014d6c:	4631      	mov	r1, r6
 8014d6e:	4650      	mov	r0, sl
 8014d70:	4790      	blx	r2
 8014d72:	2800      	cmp	r0, #0
 8014d74:	f040 8085 	bne.w	8014e82 <_scanf_i+0x1c2>
 8014d78:	f10b 0b01 	add.w	fp, fp, #1
 8014d7c:	f1bb 0f03 	cmp.w	fp, #3
 8014d80:	d1cb      	bne.n	8014d1a <_scanf_i+0x5a>
 8014d82:	6863      	ldr	r3, [r4, #4]
 8014d84:	b90b      	cbnz	r3, 8014d8a <_scanf_i+0xca>
 8014d86:	230a      	movs	r3, #10
 8014d88:	6063      	str	r3, [r4, #4]
 8014d8a:	6863      	ldr	r3, [r4, #4]
 8014d8c:	4947      	ldr	r1, [pc, #284]	; (8014eac <_scanf_i+0x1ec>)
 8014d8e:	6960      	ldr	r0, [r4, #20]
 8014d90:	1ac9      	subs	r1, r1, r3
 8014d92:	f000 f8b9 	bl	8014f08 <__sccl>
 8014d96:	f04f 0b00 	mov.w	fp, #0
 8014d9a:	68a3      	ldr	r3, [r4, #8]
 8014d9c:	6822      	ldr	r2, [r4, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d03d      	beq.n	8014e1e <_scanf_i+0x15e>
 8014da2:	6831      	ldr	r1, [r6, #0]
 8014da4:	6960      	ldr	r0, [r4, #20]
 8014da6:	f891 c000 	ldrb.w	ip, [r1]
 8014daa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d035      	beq.n	8014e1e <_scanf_i+0x15e>
 8014db2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014db6:	d124      	bne.n	8014e02 <_scanf_i+0x142>
 8014db8:	0510      	lsls	r0, r2, #20
 8014dba:	d522      	bpl.n	8014e02 <_scanf_i+0x142>
 8014dbc:	f10b 0b01 	add.w	fp, fp, #1
 8014dc0:	f1b9 0f00 	cmp.w	r9, #0
 8014dc4:	d003      	beq.n	8014dce <_scanf_i+0x10e>
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8014dcc:	60a3      	str	r3, [r4, #8]
 8014dce:	6873      	ldr	r3, [r6, #4]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	6073      	str	r3, [r6, #4]
 8014dd6:	dd1b      	ble.n	8014e10 <_scanf_i+0x150>
 8014dd8:	6833      	ldr	r3, [r6, #0]
 8014dda:	3301      	adds	r3, #1
 8014ddc:	6033      	str	r3, [r6, #0]
 8014dde:	68a3      	ldr	r3, [r4, #8]
 8014de0:	3b01      	subs	r3, #1
 8014de2:	60a3      	str	r3, [r4, #8]
 8014de4:	e7d9      	b.n	8014d9a <_scanf_i+0xda>
 8014de6:	f1bb 0f02 	cmp.w	fp, #2
 8014dea:	d1ae      	bne.n	8014d4a <_scanf_i+0x8a>
 8014dec:	6822      	ldr	r2, [r4, #0]
 8014dee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014df2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014df6:	d1bf      	bne.n	8014d78 <_scanf_i+0xb8>
 8014df8:	2310      	movs	r3, #16
 8014dfa:	6063      	str	r3, [r4, #4]
 8014dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014e00:	e7a2      	b.n	8014d48 <_scanf_i+0x88>
 8014e02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014e06:	6022      	str	r2, [r4, #0]
 8014e08:	780b      	ldrb	r3, [r1, #0]
 8014e0a:	f805 3b01 	strb.w	r3, [r5], #1
 8014e0e:	e7de      	b.n	8014dce <_scanf_i+0x10e>
 8014e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014e14:	4631      	mov	r1, r6
 8014e16:	4650      	mov	r0, sl
 8014e18:	4798      	blx	r3
 8014e1a:	2800      	cmp	r0, #0
 8014e1c:	d0df      	beq.n	8014dde <_scanf_i+0x11e>
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	05db      	lsls	r3, r3, #23
 8014e22:	d50d      	bpl.n	8014e40 <_scanf_i+0x180>
 8014e24:	42bd      	cmp	r5, r7
 8014e26:	d909      	bls.n	8014e3c <_scanf_i+0x17c>
 8014e28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014e2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014e30:	4632      	mov	r2, r6
 8014e32:	4650      	mov	r0, sl
 8014e34:	4798      	blx	r3
 8014e36:	f105 39ff 	add.w	r9, r5, #4294967295
 8014e3a:	464d      	mov	r5, r9
 8014e3c:	42bd      	cmp	r5, r7
 8014e3e:	d02d      	beq.n	8014e9c <_scanf_i+0x1dc>
 8014e40:	6822      	ldr	r2, [r4, #0]
 8014e42:	f012 0210 	ands.w	r2, r2, #16
 8014e46:	d113      	bne.n	8014e70 <_scanf_i+0x1b0>
 8014e48:	702a      	strb	r2, [r5, #0]
 8014e4a:	6863      	ldr	r3, [r4, #4]
 8014e4c:	9e01      	ldr	r6, [sp, #4]
 8014e4e:	4639      	mov	r1, r7
 8014e50:	4650      	mov	r0, sl
 8014e52:	47b0      	blx	r6
 8014e54:	6821      	ldr	r1, [r4, #0]
 8014e56:	f8d8 3000 	ldr.w	r3, [r8]
 8014e5a:	f011 0f20 	tst.w	r1, #32
 8014e5e:	d013      	beq.n	8014e88 <_scanf_i+0x1c8>
 8014e60:	1d1a      	adds	r2, r3, #4
 8014e62:	f8c8 2000 	str.w	r2, [r8]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	6018      	str	r0, [r3, #0]
 8014e6a:	68e3      	ldr	r3, [r4, #12]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	60e3      	str	r3, [r4, #12]
 8014e70:	1bed      	subs	r5, r5, r7
 8014e72:	44ab      	add	fp, r5
 8014e74:	6925      	ldr	r5, [r4, #16]
 8014e76:	445d      	add	r5, fp
 8014e78:	6125      	str	r5, [r4, #16]
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	b007      	add	sp, #28
 8014e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e82:	f04f 0b00 	mov.w	fp, #0
 8014e86:	e7ca      	b.n	8014e1e <_scanf_i+0x15e>
 8014e88:	1d1a      	adds	r2, r3, #4
 8014e8a:	f8c8 2000 	str.w	r2, [r8]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	f011 0f01 	tst.w	r1, #1
 8014e94:	bf14      	ite	ne
 8014e96:	8018      	strhne	r0, [r3, #0]
 8014e98:	6018      	streq	r0, [r3, #0]
 8014e9a:	e7e6      	b.n	8014e6a <_scanf_i+0x1aa>
 8014e9c:	2001      	movs	r0, #1
 8014e9e:	e7ed      	b.n	8014e7c <_scanf_i+0x1bc>
 8014ea0:	08017bfc 	.word	0x08017bfc
 8014ea4:	08015085 	.word	0x08015085
 8014ea8:	080125a5 	.word	0x080125a5
 8014eac:	08018486 	.word	0x08018486

08014eb0 <_read_r>:
 8014eb0:	b538      	push	{r3, r4, r5, lr}
 8014eb2:	4d07      	ldr	r5, [pc, #28]	; (8014ed0 <_read_r+0x20>)
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	4608      	mov	r0, r1
 8014eb8:	4611      	mov	r1, r2
 8014eba:	2200      	movs	r2, #0
 8014ebc:	602a      	str	r2, [r5, #0]
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	f7f1 fce6 	bl	8006890 <_read>
 8014ec4:	1c43      	adds	r3, r0, #1
 8014ec6:	d102      	bne.n	8014ece <_read_r+0x1e>
 8014ec8:	682b      	ldr	r3, [r5, #0]
 8014eca:	b103      	cbz	r3, 8014ece <_read_r+0x1e>
 8014ecc:	6023      	str	r3, [r4, #0]
 8014ece:	bd38      	pop	{r3, r4, r5, pc}
 8014ed0:	2000496c 	.word	0x2000496c
 8014ed4:	00000000 	.word	0x00000000

08014ed8 <nan>:
 8014ed8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014ee0 <nan+0x8>
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	00000000 	.word	0x00000000
 8014ee4:	7ff80000 	.word	0x7ff80000

08014ee8 <_sbrk_r>:
 8014ee8:	b538      	push	{r3, r4, r5, lr}
 8014eea:	4d06      	ldr	r5, [pc, #24]	; (8014f04 <_sbrk_r+0x1c>)
 8014eec:	2300      	movs	r3, #0
 8014eee:	4604      	mov	r4, r0
 8014ef0:	4608      	mov	r0, r1
 8014ef2:	602b      	str	r3, [r5, #0]
 8014ef4:	f7f1 fd3a 	bl	800696c <_sbrk>
 8014ef8:	1c43      	adds	r3, r0, #1
 8014efa:	d102      	bne.n	8014f02 <_sbrk_r+0x1a>
 8014efc:	682b      	ldr	r3, [r5, #0]
 8014efe:	b103      	cbz	r3, 8014f02 <_sbrk_r+0x1a>
 8014f00:	6023      	str	r3, [r4, #0]
 8014f02:	bd38      	pop	{r3, r4, r5, pc}
 8014f04:	2000496c 	.word	0x2000496c

08014f08 <__sccl>:
 8014f08:	b570      	push	{r4, r5, r6, lr}
 8014f0a:	780b      	ldrb	r3, [r1, #0]
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	2b5e      	cmp	r3, #94	; 0x5e
 8014f10:	bf0b      	itete	eq
 8014f12:	784b      	ldrbeq	r3, [r1, #1]
 8014f14:	1c48      	addne	r0, r1, #1
 8014f16:	1c88      	addeq	r0, r1, #2
 8014f18:	2200      	movne	r2, #0
 8014f1a:	bf08      	it	eq
 8014f1c:	2201      	moveq	r2, #1
 8014f1e:	1e61      	subs	r1, r4, #1
 8014f20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014f24:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014f28:	42a9      	cmp	r1, r5
 8014f2a:	d1fb      	bne.n	8014f24 <__sccl+0x1c>
 8014f2c:	b90b      	cbnz	r3, 8014f32 <__sccl+0x2a>
 8014f2e:	3801      	subs	r0, #1
 8014f30:	bd70      	pop	{r4, r5, r6, pc}
 8014f32:	f082 0201 	eor.w	r2, r2, #1
 8014f36:	54e2      	strb	r2, [r4, r3]
 8014f38:	4605      	mov	r5, r0
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014f40:	292d      	cmp	r1, #45	; 0x2d
 8014f42:	d006      	beq.n	8014f52 <__sccl+0x4a>
 8014f44:	295d      	cmp	r1, #93	; 0x5d
 8014f46:	d0f3      	beq.n	8014f30 <__sccl+0x28>
 8014f48:	b909      	cbnz	r1, 8014f4e <__sccl+0x46>
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	e7f0      	b.n	8014f30 <__sccl+0x28>
 8014f4e:	460b      	mov	r3, r1
 8014f50:	e7f1      	b.n	8014f36 <__sccl+0x2e>
 8014f52:	786e      	ldrb	r6, [r5, #1]
 8014f54:	2e5d      	cmp	r6, #93	; 0x5d
 8014f56:	d0fa      	beq.n	8014f4e <__sccl+0x46>
 8014f58:	42b3      	cmp	r3, r6
 8014f5a:	dcf8      	bgt.n	8014f4e <__sccl+0x46>
 8014f5c:	3502      	adds	r5, #2
 8014f5e:	4619      	mov	r1, r3
 8014f60:	3101      	adds	r1, #1
 8014f62:	428e      	cmp	r6, r1
 8014f64:	5462      	strb	r2, [r4, r1]
 8014f66:	dcfb      	bgt.n	8014f60 <__sccl+0x58>
 8014f68:	1af1      	subs	r1, r6, r3
 8014f6a:	3901      	subs	r1, #1
 8014f6c:	1c58      	adds	r0, r3, #1
 8014f6e:	42b3      	cmp	r3, r6
 8014f70:	bfa8      	it	ge
 8014f72:	2100      	movge	r1, #0
 8014f74:	1843      	adds	r3, r0, r1
 8014f76:	e7e0      	b.n	8014f3a <__sccl+0x32>

08014f78 <strncmp>:
 8014f78:	b510      	push	{r4, lr}
 8014f7a:	b17a      	cbz	r2, 8014f9c <strncmp+0x24>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	3901      	subs	r1, #1
 8014f80:	1884      	adds	r4, r0, r2
 8014f82:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014f8a:	4290      	cmp	r0, r2
 8014f8c:	d101      	bne.n	8014f92 <strncmp+0x1a>
 8014f8e:	42a3      	cmp	r3, r4
 8014f90:	d101      	bne.n	8014f96 <strncmp+0x1e>
 8014f92:	1a80      	subs	r0, r0, r2
 8014f94:	bd10      	pop	{r4, pc}
 8014f96:	2800      	cmp	r0, #0
 8014f98:	d1f3      	bne.n	8014f82 <strncmp+0xa>
 8014f9a:	e7fa      	b.n	8014f92 <strncmp+0x1a>
 8014f9c:	4610      	mov	r0, r2
 8014f9e:	e7f9      	b.n	8014f94 <strncmp+0x1c>

08014fa0 <_strtoul_l.constprop.0>:
 8014fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fa4:	4f36      	ldr	r7, [pc, #216]	; (8015080 <_strtoul_l.constprop.0+0xe0>)
 8014fa6:	4686      	mov	lr, r0
 8014fa8:	460d      	mov	r5, r1
 8014faa:	4628      	mov	r0, r5
 8014fac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fb0:	5de6      	ldrb	r6, [r4, r7]
 8014fb2:	f016 0608 	ands.w	r6, r6, #8
 8014fb6:	d1f8      	bne.n	8014faa <_strtoul_l.constprop.0+0xa>
 8014fb8:	2c2d      	cmp	r4, #45	; 0x2d
 8014fba:	d12f      	bne.n	801501c <_strtoul_l.constprop.0+0x7c>
 8014fbc:	782c      	ldrb	r4, [r5, #0]
 8014fbe:	2601      	movs	r6, #1
 8014fc0:	1c85      	adds	r5, r0, #2
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d057      	beq.n	8015076 <_strtoul_l.constprop.0+0xd6>
 8014fc6:	2b10      	cmp	r3, #16
 8014fc8:	d109      	bne.n	8014fde <_strtoul_l.constprop.0+0x3e>
 8014fca:	2c30      	cmp	r4, #48	; 0x30
 8014fcc:	d107      	bne.n	8014fde <_strtoul_l.constprop.0+0x3e>
 8014fce:	7828      	ldrb	r0, [r5, #0]
 8014fd0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014fd4:	2858      	cmp	r0, #88	; 0x58
 8014fd6:	d149      	bne.n	801506c <_strtoul_l.constprop.0+0xcc>
 8014fd8:	786c      	ldrb	r4, [r5, #1]
 8014fda:	2310      	movs	r3, #16
 8014fdc:	3502      	adds	r5, #2
 8014fde:	f04f 38ff 	mov.w	r8, #4294967295
 8014fe2:	2700      	movs	r7, #0
 8014fe4:	fbb8 f8f3 	udiv	r8, r8, r3
 8014fe8:	fb03 f908 	mul.w	r9, r3, r8
 8014fec:	ea6f 0909 	mvn.w	r9, r9
 8014ff0:	4638      	mov	r0, r7
 8014ff2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014ff6:	f1bc 0f09 	cmp.w	ip, #9
 8014ffa:	d814      	bhi.n	8015026 <_strtoul_l.constprop.0+0x86>
 8014ffc:	4664      	mov	r4, ip
 8014ffe:	42a3      	cmp	r3, r4
 8015000:	dd22      	ble.n	8015048 <_strtoul_l.constprop.0+0xa8>
 8015002:	2f00      	cmp	r7, #0
 8015004:	db1d      	blt.n	8015042 <_strtoul_l.constprop.0+0xa2>
 8015006:	4580      	cmp	r8, r0
 8015008:	d31b      	bcc.n	8015042 <_strtoul_l.constprop.0+0xa2>
 801500a:	d101      	bne.n	8015010 <_strtoul_l.constprop.0+0x70>
 801500c:	45a1      	cmp	r9, r4
 801500e:	db18      	blt.n	8015042 <_strtoul_l.constprop.0+0xa2>
 8015010:	fb00 4003 	mla	r0, r0, r3, r4
 8015014:	2701      	movs	r7, #1
 8015016:	f815 4b01 	ldrb.w	r4, [r5], #1
 801501a:	e7ea      	b.n	8014ff2 <_strtoul_l.constprop.0+0x52>
 801501c:	2c2b      	cmp	r4, #43	; 0x2b
 801501e:	bf04      	itt	eq
 8015020:	782c      	ldrbeq	r4, [r5, #0]
 8015022:	1c85      	addeq	r5, r0, #2
 8015024:	e7cd      	b.n	8014fc2 <_strtoul_l.constprop.0+0x22>
 8015026:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801502a:	f1bc 0f19 	cmp.w	ip, #25
 801502e:	d801      	bhi.n	8015034 <_strtoul_l.constprop.0+0x94>
 8015030:	3c37      	subs	r4, #55	; 0x37
 8015032:	e7e4      	b.n	8014ffe <_strtoul_l.constprop.0+0x5e>
 8015034:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015038:	f1bc 0f19 	cmp.w	ip, #25
 801503c:	d804      	bhi.n	8015048 <_strtoul_l.constprop.0+0xa8>
 801503e:	3c57      	subs	r4, #87	; 0x57
 8015040:	e7dd      	b.n	8014ffe <_strtoul_l.constprop.0+0x5e>
 8015042:	f04f 37ff 	mov.w	r7, #4294967295
 8015046:	e7e6      	b.n	8015016 <_strtoul_l.constprop.0+0x76>
 8015048:	2f00      	cmp	r7, #0
 801504a:	da07      	bge.n	801505c <_strtoul_l.constprop.0+0xbc>
 801504c:	2322      	movs	r3, #34	; 0x22
 801504e:	f8ce 3000 	str.w	r3, [lr]
 8015052:	f04f 30ff 	mov.w	r0, #4294967295
 8015056:	b932      	cbnz	r2, 8015066 <_strtoul_l.constprop.0+0xc6>
 8015058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801505c:	b106      	cbz	r6, 8015060 <_strtoul_l.constprop.0+0xc0>
 801505e:	4240      	negs	r0, r0
 8015060:	2a00      	cmp	r2, #0
 8015062:	d0f9      	beq.n	8015058 <_strtoul_l.constprop.0+0xb8>
 8015064:	b107      	cbz	r7, 8015068 <_strtoul_l.constprop.0+0xc8>
 8015066:	1e69      	subs	r1, r5, #1
 8015068:	6011      	str	r1, [r2, #0]
 801506a:	e7f5      	b.n	8015058 <_strtoul_l.constprop.0+0xb8>
 801506c:	2430      	movs	r4, #48	; 0x30
 801506e:	2b00      	cmp	r3, #0
 8015070:	d1b5      	bne.n	8014fde <_strtoul_l.constprop.0+0x3e>
 8015072:	2308      	movs	r3, #8
 8015074:	e7b3      	b.n	8014fde <_strtoul_l.constprop.0+0x3e>
 8015076:	2c30      	cmp	r4, #48	; 0x30
 8015078:	d0a9      	beq.n	8014fce <_strtoul_l.constprop.0+0x2e>
 801507a:	230a      	movs	r3, #10
 801507c:	e7af      	b.n	8014fde <_strtoul_l.constprop.0+0x3e>
 801507e:	bf00      	nop
 8015080:	080180f9 	.word	0x080180f9

08015084 <_strtoul_r>:
 8015084:	f7ff bf8c 	b.w	8014fa0 <_strtoul_l.constprop.0>

08015088 <__submore>:
 8015088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508c:	460c      	mov	r4, r1
 801508e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015094:	4299      	cmp	r1, r3
 8015096:	d11d      	bne.n	80150d4 <__submore+0x4c>
 8015098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801509c:	f7ff fa14 	bl	80144c8 <_malloc_r>
 80150a0:	b918      	cbnz	r0, 80150aa <__submore+0x22>
 80150a2:	f04f 30ff 	mov.w	r0, #4294967295
 80150a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80150ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80150b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80150b4:	6360      	str	r0, [r4, #52]	; 0x34
 80150b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80150ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80150be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80150c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80150c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80150ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80150ce:	6020      	str	r0, [r4, #0]
 80150d0:	2000      	movs	r0, #0
 80150d2:	e7e8      	b.n	80150a6 <__submore+0x1e>
 80150d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80150d6:	0077      	lsls	r7, r6, #1
 80150d8:	463a      	mov	r2, r7
 80150da:	f000 fa2d 	bl	8015538 <_realloc_r>
 80150de:	4605      	mov	r5, r0
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d0de      	beq.n	80150a2 <__submore+0x1a>
 80150e4:	eb00 0806 	add.w	r8, r0, r6
 80150e8:	4601      	mov	r1, r0
 80150ea:	4632      	mov	r2, r6
 80150ec:	4640      	mov	r0, r8
 80150ee:	f7fe fc99 	bl	8013a24 <memcpy>
 80150f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80150f6:	f8c4 8000 	str.w	r8, [r4]
 80150fa:	e7e9      	b.n	80150d0 <__submore+0x48>

080150fc <__ascii_wctomb>:
 80150fc:	b149      	cbz	r1, 8015112 <__ascii_wctomb+0x16>
 80150fe:	2aff      	cmp	r2, #255	; 0xff
 8015100:	bf85      	ittet	hi
 8015102:	238a      	movhi	r3, #138	; 0x8a
 8015104:	6003      	strhi	r3, [r0, #0]
 8015106:	700a      	strbls	r2, [r1, #0]
 8015108:	f04f 30ff 	movhi.w	r0, #4294967295
 801510c:	bf98      	it	ls
 801510e:	2001      	movls	r0, #1
 8015110:	4770      	bx	lr
 8015112:	4608      	mov	r0, r1
 8015114:	4770      	bx	lr
	...

08015118 <__assert_func>:
 8015118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801511a:	4614      	mov	r4, r2
 801511c:	461a      	mov	r2, r3
 801511e:	4b09      	ldr	r3, [pc, #36]	; (8015144 <__assert_func+0x2c>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4605      	mov	r5, r0
 8015124:	68d8      	ldr	r0, [r3, #12]
 8015126:	b14c      	cbz	r4, 801513c <__assert_func+0x24>
 8015128:	4b07      	ldr	r3, [pc, #28]	; (8015148 <__assert_func+0x30>)
 801512a:	9100      	str	r1, [sp, #0]
 801512c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015130:	4906      	ldr	r1, [pc, #24]	; (801514c <__assert_func+0x34>)
 8015132:	462b      	mov	r3, r5
 8015134:	f000 f9a6 	bl	8015484 <fiprintf>
 8015138:	f000 fc46 	bl	80159c8 <abort>
 801513c:	4b04      	ldr	r3, [pc, #16]	; (8015150 <__assert_func+0x38>)
 801513e:	461c      	mov	r4, r3
 8015140:	e7f3      	b.n	801512a <__assert_func+0x12>
 8015142:	bf00      	nop
 8015144:	2000002c 	.word	0x2000002c
 8015148:	08018488 	.word	0x08018488
 801514c:	08018495 	.word	0x08018495
 8015150:	080184c3 	.word	0x080184c3

08015154 <__sflush_r>:
 8015154:	898a      	ldrh	r2, [r1, #12]
 8015156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801515a:	4605      	mov	r5, r0
 801515c:	0710      	lsls	r0, r2, #28
 801515e:	460c      	mov	r4, r1
 8015160:	d458      	bmi.n	8015214 <__sflush_r+0xc0>
 8015162:	684b      	ldr	r3, [r1, #4]
 8015164:	2b00      	cmp	r3, #0
 8015166:	dc05      	bgt.n	8015174 <__sflush_r+0x20>
 8015168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801516a:	2b00      	cmp	r3, #0
 801516c:	dc02      	bgt.n	8015174 <__sflush_r+0x20>
 801516e:	2000      	movs	r0, #0
 8015170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015176:	2e00      	cmp	r6, #0
 8015178:	d0f9      	beq.n	801516e <__sflush_r+0x1a>
 801517a:	2300      	movs	r3, #0
 801517c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015180:	682f      	ldr	r7, [r5, #0]
 8015182:	602b      	str	r3, [r5, #0]
 8015184:	d032      	beq.n	80151ec <__sflush_r+0x98>
 8015186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015188:	89a3      	ldrh	r3, [r4, #12]
 801518a:	075a      	lsls	r2, r3, #29
 801518c:	d505      	bpl.n	801519a <__sflush_r+0x46>
 801518e:	6863      	ldr	r3, [r4, #4]
 8015190:	1ac0      	subs	r0, r0, r3
 8015192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015194:	b10b      	cbz	r3, 801519a <__sflush_r+0x46>
 8015196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015198:	1ac0      	subs	r0, r0, r3
 801519a:	2300      	movs	r3, #0
 801519c:	4602      	mov	r2, r0
 801519e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151a0:	6a21      	ldr	r1, [r4, #32]
 80151a2:	4628      	mov	r0, r5
 80151a4:	47b0      	blx	r6
 80151a6:	1c43      	adds	r3, r0, #1
 80151a8:	89a3      	ldrh	r3, [r4, #12]
 80151aa:	d106      	bne.n	80151ba <__sflush_r+0x66>
 80151ac:	6829      	ldr	r1, [r5, #0]
 80151ae:	291d      	cmp	r1, #29
 80151b0:	d82c      	bhi.n	801520c <__sflush_r+0xb8>
 80151b2:	4a2a      	ldr	r2, [pc, #168]	; (801525c <__sflush_r+0x108>)
 80151b4:	40ca      	lsrs	r2, r1
 80151b6:	07d6      	lsls	r6, r2, #31
 80151b8:	d528      	bpl.n	801520c <__sflush_r+0xb8>
 80151ba:	2200      	movs	r2, #0
 80151bc:	6062      	str	r2, [r4, #4]
 80151be:	04d9      	lsls	r1, r3, #19
 80151c0:	6922      	ldr	r2, [r4, #16]
 80151c2:	6022      	str	r2, [r4, #0]
 80151c4:	d504      	bpl.n	80151d0 <__sflush_r+0x7c>
 80151c6:	1c42      	adds	r2, r0, #1
 80151c8:	d101      	bne.n	80151ce <__sflush_r+0x7a>
 80151ca:	682b      	ldr	r3, [r5, #0]
 80151cc:	b903      	cbnz	r3, 80151d0 <__sflush_r+0x7c>
 80151ce:	6560      	str	r0, [r4, #84]	; 0x54
 80151d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151d2:	602f      	str	r7, [r5, #0]
 80151d4:	2900      	cmp	r1, #0
 80151d6:	d0ca      	beq.n	801516e <__sflush_r+0x1a>
 80151d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151dc:	4299      	cmp	r1, r3
 80151de:	d002      	beq.n	80151e6 <__sflush_r+0x92>
 80151e0:	4628      	mov	r0, r5
 80151e2:	f7ff f905 	bl	80143f0 <_free_r>
 80151e6:	2000      	movs	r0, #0
 80151e8:	6360      	str	r0, [r4, #52]	; 0x34
 80151ea:	e7c1      	b.n	8015170 <__sflush_r+0x1c>
 80151ec:	6a21      	ldr	r1, [r4, #32]
 80151ee:	2301      	movs	r3, #1
 80151f0:	4628      	mov	r0, r5
 80151f2:	47b0      	blx	r6
 80151f4:	1c41      	adds	r1, r0, #1
 80151f6:	d1c7      	bne.n	8015188 <__sflush_r+0x34>
 80151f8:	682b      	ldr	r3, [r5, #0]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d0c4      	beq.n	8015188 <__sflush_r+0x34>
 80151fe:	2b1d      	cmp	r3, #29
 8015200:	d001      	beq.n	8015206 <__sflush_r+0xb2>
 8015202:	2b16      	cmp	r3, #22
 8015204:	d101      	bne.n	801520a <__sflush_r+0xb6>
 8015206:	602f      	str	r7, [r5, #0]
 8015208:	e7b1      	b.n	801516e <__sflush_r+0x1a>
 801520a:	89a3      	ldrh	r3, [r4, #12]
 801520c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015210:	81a3      	strh	r3, [r4, #12]
 8015212:	e7ad      	b.n	8015170 <__sflush_r+0x1c>
 8015214:	690f      	ldr	r7, [r1, #16]
 8015216:	2f00      	cmp	r7, #0
 8015218:	d0a9      	beq.n	801516e <__sflush_r+0x1a>
 801521a:	0793      	lsls	r3, r2, #30
 801521c:	680e      	ldr	r6, [r1, #0]
 801521e:	bf08      	it	eq
 8015220:	694b      	ldreq	r3, [r1, #20]
 8015222:	600f      	str	r7, [r1, #0]
 8015224:	bf18      	it	ne
 8015226:	2300      	movne	r3, #0
 8015228:	eba6 0807 	sub.w	r8, r6, r7
 801522c:	608b      	str	r3, [r1, #8]
 801522e:	f1b8 0f00 	cmp.w	r8, #0
 8015232:	dd9c      	ble.n	801516e <__sflush_r+0x1a>
 8015234:	6a21      	ldr	r1, [r4, #32]
 8015236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015238:	4643      	mov	r3, r8
 801523a:	463a      	mov	r2, r7
 801523c:	4628      	mov	r0, r5
 801523e:	47b0      	blx	r6
 8015240:	2800      	cmp	r0, #0
 8015242:	dc06      	bgt.n	8015252 <__sflush_r+0xfe>
 8015244:	89a3      	ldrh	r3, [r4, #12]
 8015246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801524a:	81a3      	strh	r3, [r4, #12]
 801524c:	f04f 30ff 	mov.w	r0, #4294967295
 8015250:	e78e      	b.n	8015170 <__sflush_r+0x1c>
 8015252:	4407      	add	r7, r0
 8015254:	eba8 0800 	sub.w	r8, r8, r0
 8015258:	e7e9      	b.n	801522e <__sflush_r+0xda>
 801525a:	bf00      	nop
 801525c:	20400001 	.word	0x20400001

08015260 <_fflush_r>:
 8015260:	b538      	push	{r3, r4, r5, lr}
 8015262:	690b      	ldr	r3, [r1, #16]
 8015264:	4605      	mov	r5, r0
 8015266:	460c      	mov	r4, r1
 8015268:	b913      	cbnz	r3, 8015270 <_fflush_r+0x10>
 801526a:	2500      	movs	r5, #0
 801526c:	4628      	mov	r0, r5
 801526e:	bd38      	pop	{r3, r4, r5, pc}
 8015270:	b118      	cbz	r0, 801527a <_fflush_r+0x1a>
 8015272:	6983      	ldr	r3, [r0, #24]
 8015274:	b90b      	cbnz	r3, 801527a <_fflush_r+0x1a>
 8015276:	f000 f887 	bl	8015388 <__sinit>
 801527a:	4b14      	ldr	r3, [pc, #80]	; (80152cc <_fflush_r+0x6c>)
 801527c:	429c      	cmp	r4, r3
 801527e:	d11b      	bne.n	80152b8 <_fflush_r+0x58>
 8015280:	686c      	ldr	r4, [r5, #4]
 8015282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d0ef      	beq.n	801526a <_fflush_r+0xa>
 801528a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801528c:	07d0      	lsls	r0, r2, #31
 801528e:	d404      	bmi.n	801529a <_fflush_r+0x3a>
 8015290:	0599      	lsls	r1, r3, #22
 8015292:	d402      	bmi.n	801529a <_fflush_r+0x3a>
 8015294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015296:	f000 f927 	bl	80154e8 <__retarget_lock_acquire_recursive>
 801529a:	4628      	mov	r0, r5
 801529c:	4621      	mov	r1, r4
 801529e:	f7ff ff59 	bl	8015154 <__sflush_r>
 80152a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152a4:	07da      	lsls	r2, r3, #31
 80152a6:	4605      	mov	r5, r0
 80152a8:	d4e0      	bmi.n	801526c <_fflush_r+0xc>
 80152aa:	89a3      	ldrh	r3, [r4, #12]
 80152ac:	059b      	lsls	r3, r3, #22
 80152ae:	d4dd      	bmi.n	801526c <_fflush_r+0xc>
 80152b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152b2:	f000 f91a 	bl	80154ea <__retarget_lock_release_recursive>
 80152b6:	e7d9      	b.n	801526c <_fflush_r+0xc>
 80152b8:	4b05      	ldr	r3, [pc, #20]	; (80152d0 <_fflush_r+0x70>)
 80152ba:	429c      	cmp	r4, r3
 80152bc:	d101      	bne.n	80152c2 <_fflush_r+0x62>
 80152be:	68ac      	ldr	r4, [r5, #8]
 80152c0:	e7df      	b.n	8015282 <_fflush_r+0x22>
 80152c2:	4b04      	ldr	r3, [pc, #16]	; (80152d4 <_fflush_r+0x74>)
 80152c4:	429c      	cmp	r4, r3
 80152c6:	bf08      	it	eq
 80152c8:	68ec      	ldreq	r4, [r5, #12]
 80152ca:	e7da      	b.n	8015282 <_fflush_r+0x22>
 80152cc:	080184e4 	.word	0x080184e4
 80152d0:	08018504 	.word	0x08018504
 80152d4:	080184c4 	.word	0x080184c4

080152d8 <std>:
 80152d8:	2300      	movs	r3, #0
 80152da:	b510      	push	{r4, lr}
 80152dc:	4604      	mov	r4, r0
 80152de:	e9c0 3300 	strd	r3, r3, [r0]
 80152e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80152e6:	6083      	str	r3, [r0, #8]
 80152e8:	8181      	strh	r1, [r0, #12]
 80152ea:	6643      	str	r3, [r0, #100]	; 0x64
 80152ec:	81c2      	strh	r2, [r0, #14]
 80152ee:	6183      	str	r3, [r0, #24]
 80152f0:	4619      	mov	r1, r3
 80152f2:	2208      	movs	r2, #8
 80152f4:	305c      	adds	r0, #92	; 0x5c
 80152f6:	f7fb fb73 	bl	80109e0 <memset>
 80152fa:	4b05      	ldr	r3, [pc, #20]	; (8015310 <std+0x38>)
 80152fc:	6263      	str	r3, [r4, #36]	; 0x24
 80152fe:	4b05      	ldr	r3, [pc, #20]	; (8015314 <std+0x3c>)
 8015300:	62a3      	str	r3, [r4, #40]	; 0x28
 8015302:	4b05      	ldr	r3, [pc, #20]	; (8015318 <std+0x40>)
 8015304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015306:	4b05      	ldr	r3, [pc, #20]	; (801531c <std+0x44>)
 8015308:	6224      	str	r4, [r4, #32]
 801530a:	6323      	str	r3, [r4, #48]	; 0x30
 801530c:	bd10      	pop	{r4, pc}
 801530e:	bf00      	nop
 8015310:	08011789 	.word	0x08011789
 8015314:	080117af 	.word	0x080117af
 8015318:	080117e7 	.word	0x080117e7
 801531c:	0801180b 	.word	0x0801180b

08015320 <_cleanup_r>:
 8015320:	4901      	ldr	r1, [pc, #4]	; (8015328 <_cleanup_r+0x8>)
 8015322:	f000 b8c1 	b.w	80154a8 <_fwalk_reent>
 8015326:	bf00      	nop
 8015328:	08015261 	.word	0x08015261

0801532c <__sfmoreglue>:
 801532c:	b570      	push	{r4, r5, r6, lr}
 801532e:	2268      	movs	r2, #104	; 0x68
 8015330:	1e4d      	subs	r5, r1, #1
 8015332:	4355      	muls	r5, r2
 8015334:	460e      	mov	r6, r1
 8015336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801533a:	f7ff f8c5 	bl	80144c8 <_malloc_r>
 801533e:	4604      	mov	r4, r0
 8015340:	b140      	cbz	r0, 8015354 <__sfmoreglue+0x28>
 8015342:	2100      	movs	r1, #0
 8015344:	e9c0 1600 	strd	r1, r6, [r0]
 8015348:	300c      	adds	r0, #12
 801534a:	60a0      	str	r0, [r4, #8]
 801534c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015350:	f7fb fb46 	bl	80109e0 <memset>
 8015354:	4620      	mov	r0, r4
 8015356:	bd70      	pop	{r4, r5, r6, pc}

08015358 <__sfp_lock_acquire>:
 8015358:	4801      	ldr	r0, [pc, #4]	; (8015360 <__sfp_lock_acquire+0x8>)
 801535a:	f000 b8c5 	b.w	80154e8 <__retarget_lock_acquire_recursive>
 801535e:	bf00      	nop
 8015360:	20004971 	.word	0x20004971

08015364 <__sfp_lock_release>:
 8015364:	4801      	ldr	r0, [pc, #4]	; (801536c <__sfp_lock_release+0x8>)
 8015366:	f000 b8c0 	b.w	80154ea <__retarget_lock_release_recursive>
 801536a:	bf00      	nop
 801536c:	20004971 	.word	0x20004971

08015370 <__sinit_lock_acquire>:
 8015370:	4801      	ldr	r0, [pc, #4]	; (8015378 <__sinit_lock_acquire+0x8>)
 8015372:	f000 b8b9 	b.w	80154e8 <__retarget_lock_acquire_recursive>
 8015376:	bf00      	nop
 8015378:	20004972 	.word	0x20004972

0801537c <__sinit_lock_release>:
 801537c:	4801      	ldr	r0, [pc, #4]	; (8015384 <__sinit_lock_release+0x8>)
 801537e:	f000 b8b4 	b.w	80154ea <__retarget_lock_release_recursive>
 8015382:	bf00      	nop
 8015384:	20004972 	.word	0x20004972

08015388 <__sinit>:
 8015388:	b510      	push	{r4, lr}
 801538a:	4604      	mov	r4, r0
 801538c:	f7ff fff0 	bl	8015370 <__sinit_lock_acquire>
 8015390:	69a3      	ldr	r3, [r4, #24]
 8015392:	b11b      	cbz	r3, 801539c <__sinit+0x14>
 8015394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015398:	f7ff bff0 	b.w	801537c <__sinit_lock_release>
 801539c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80153a0:	6523      	str	r3, [r4, #80]	; 0x50
 80153a2:	4b13      	ldr	r3, [pc, #76]	; (80153f0 <__sinit+0x68>)
 80153a4:	4a13      	ldr	r2, [pc, #76]	; (80153f4 <__sinit+0x6c>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80153aa:	42a3      	cmp	r3, r4
 80153ac:	bf04      	itt	eq
 80153ae:	2301      	moveq	r3, #1
 80153b0:	61a3      	streq	r3, [r4, #24]
 80153b2:	4620      	mov	r0, r4
 80153b4:	f000 f820 	bl	80153f8 <__sfp>
 80153b8:	6060      	str	r0, [r4, #4]
 80153ba:	4620      	mov	r0, r4
 80153bc:	f000 f81c 	bl	80153f8 <__sfp>
 80153c0:	60a0      	str	r0, [r4, #8]
 80153c2:	4620      	mov	r0, r4
 80153c4:	f000 f818 	bl	80153f8 <__sfp>
 80153c8:	2200      	movs	r2, #0
 80153ca:	60e0      	str	r0, [r4, #12]
 80153cc:	2104      	movs	r1, #4
 80153ce:	6860      	ldr	r0, [r4, #4]
 80153d0:	f7ff ff82 	bl	80152d8 <std>
 80153d4:	68a0      	ldr	r0, [r4, #8]
 80153d6:	2201      	movs	r2, #1
 80153d8:	2109      	movs	r1, #9
 80153da:	f7ff ff7d 	bl	80152d8 <std>
 80153de:	68e0      	ldr	r0, [r4, #12]
 80153e0:	2202      	movs	r2, #2
 80153e2:	2112      	movs	r1, #18
 80153e4:	f7ff ff78 	bl	80152d8 <std>
 80153e8:	2301      	movs	r3, #1
 80153ea:	61a3      	str	r3, [r4, #24]
 80153ec:	e7d2      	b.n	8015394 <__sinit+0xc>
 80153ee:	bf00      	nop
 80153f0:	08018068 	.word	0x08018068
 80153f4:	08015321 	.word	0x08015321

080153f8 <__sfp>:
 80153f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153fa:	4607      	mov	r7, r0
 80153fc:	f7ff ffac 	bl	8015358 <__sfp_lock_acquire>
 8015400:	4b1e      	ldr	r3, [pc, #120]	; (801547c <__sfp+0x84>)
 8015402:	681e      	ldr	r6, [r3, #0]
 8015404:	69b3      	ldr	r3, [r6, #24]
 8015406:	b913      	cbnz	r3, 801540e <__sfp+0x16>
 8015408:	4630      	mov	r0, r6
 801540a:	f7ff ffbd 	bl	8015388 <__sinit>
 801540e:	3648      	adds	r6, #72	; 0x48
 8015410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015414:	3b01      	subs	r3, #1
 8015416:	d503      	bpl.n	8015420 <__sfp+0x28>
 8015418:	6833      	ldr	r3, [r6, #0]
 801541a:	b30b      	cbz	r3, 8015460 <__sfp+0x68>
 801541c:	6836      	ldr	r6, [r6, #0]
 801541e:	e7f7      	b.n	8015410 <__sfp+0x18>
 8015420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015424:	b9d5      	cbnz	r5, 801545c <__sfp+0x64>
 8015426:	4b16      	ldr	r3, [pc, #88]	; (8015480 <__sfp+0x88>)
 8015428:	60e3      	str	r3, [r4, #12]
 801542a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801542e:	6665      	str	r5, [r4, #100]	; 0x64
 8015430:	f000 f859 	bl	80154e6 <__retarget_lock_init_recursive>
 8015434:	f7ff ff96 	bl	8015364 <__sfp_lock_release>
 8015438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801543c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015440:	6025      	str	r5, [r4, #0]
 8015442:	61a5      	str	r5, [r4, #24]
 8015444:	2208      	movs	r2, #8
 8015446:	4629      	mov	r1, r5
 8015448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801544c:	f7fb fac8 	bl	80109e0 <memset>
 8015450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015458:	4620      	mov	r0, r4
 801545a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801545c:	3468      	adds	r4, #104	; 0x68
 801545e:	e7d9      	b.n	8015414 <__sfp+0x1c>
 8015460:	2104      	movs	r1, #4
 8015462:	4638      	mov	r0, r7
 8015464:	f7ff ff62 	bl	801532c <__sfmoreglue>
 8015468:	4604      	mov	r4, r0
 801546a:	6030      	str	r0, [r6, #0]
 801546c:	2800      	cmp	r0, #0
 801546e:	d1d5      	bne.n	801541c <__sfp+0x24>
 8015470:	f7ff ff78 	bl	8015364 <__sfp_lock_release>
 8015474:	230c      	movs	r3, #12
 8015476:	603b      	str	r3, [r7, #0]
 8015478:	e7ee      	b.n	8015458 <__sfp+0x60>
 801547a:	bf00      	nop
 801547c:	08018068 	.word	0x08018068
 8015480:	ffff0001 	.word	0xffff0001

08015484 <fiprintf>:
 8015484:	b40e      	push	{r1, r2, r3}
 8015486:	b503      	push	{r0, r1, lr}
 8015488:	4601      	mov	r1, r0
 801548a:	ab03      	add	r3, sp, #12
 801548c:	4805      	ldr	r0, [pc, #20]	; (80154a4 <fiprintf+0x20>)
 801548e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015492:	6800      	ldr	r0, [r0, #0]
 8015494:	9301      	str	r3, [sp, #4]
 8015496:	f000 f8a7 	bl	80155e8 <_vfiprintf_r>
 801549a:	b002      	add	sp, #8
 801549c:	f85d eb04 	ldr.w	lr, [sp], #4
 80154a0:	b003      	add	sp, #12
 80154a2:	4770      	bx	lr
 80154a4:	2000002c 	.word	0x2000002c

080154a8 <_fwalk_reent>:
 80154a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154ac:	4606      	mov	r6, r0
 80154ae:	4688      	mov	r8, r1
 80154b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80154b4:	2700      	movs	r7, #0
 80154b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80154ba:	f1b9 0901 	subs.w	r9, r9, #1
 80154be:	d505      	bpl.n	80154cc <_fwalk_reent+0x24>
 80154c0:	6824      	ldr	r4, [r4, #0]
 80154c2:	2c00      	cmp	r4, #0
 80154c4:	d1f7      	bne.n	80154b6 <_fwalk_reent+0xe>
 80154c6:	4638      	mov	r0, r7
 80154c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154cc:	89ab      	ldrh	r3, [r5, #12]
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d907      	bls.n	80154e2 <_fwalk_reent+0x3a>
 80154d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80154d6:	3301      	adds	r3, #1
 80154d8:	d003      	beq.n	80154e2 <_fwalk_reent+0x3a>
 80154da:	4629      	mov	r1, r5
 80154dc:	4630      	mov	r0, r6
 80154de:	47c0      	blx	r8
 80154e0:	4307      	orrs	r7, r0
 80154e2:	3568      	adds	r5, #104	; 0x68
 80154e4:	e7e9      	b.n	80154ba <_fwalk_reent+0x12>

080154e6 <__retarget_lock_init_recursive>:
 80154e6:	4770      	bx	lr

080154e8 <__retarget_lock_acquire_recursive>:
 80154e8:	4770      	bx	lr

080154ea <__retarget_lock_release_recursive>:
 80154ea:	4770      	bx	lr

080154ec <memmove>:
 80154ec:	4288      	cmp	r0, r1
 80154ee:	b510      	push	{r4, lr}
 80154f0:	eb01 0402 	add.w	r4, r1, r2
 80154f4:	d902      	bls.n	80154fc <memmove+0x10>
 80154f6:	4284      	cmp	r4, r0
 80154f8:	4623      	mov	r3, r4
 80154fa:	d807      	bhi.n	801550c <memmove+0x20>
 80154fc:	1e43      	subs	r3, r0, #1
 80154fe:	42a1      	cmp	r1, r4
 8015500:	d008      	beq.n	8015514 <memmove+0x28>
 8015502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015506:	f803 2f01 	strb.w	r2, [r3, #1]!
 801550a:	e7f8      	b.n	80154fe <memmove+0x12>
 801550c:	4402      	add	r2, r0
 801550e:	4601      	mov	r1, r0
 8015510:	428a      	cmp	r2, r1
 8015512:	d100      	bne.n	8015516 <memmove+0x2a>
 8015514:	bd10      	pop	{r4, pc}
 8015516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801551a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801551e:	e7f7      	b.n	8015510 <memmove+0x24>

08015520 <__malloc_lock>:
 8015520:	4801      	ldr	r0, [pc, #4]	; (8015528 <__malloc_lock+0x8>)
 8015522:	f7ff bfe1 	b.w	80154e8 <__retarget_lock_acquire_recursive>
 8015526:	bf00      	nop
 8015528:	20004970 	.word	0x20004970

0801552c <__malloc_unlock>:
 801552c:	4801      	ldr	r0, [pc, #4]	; (8015534 <__malloc_unlock+0x8>)
 801552e:	f7ff bfdc 	b.w	80154ea <__retarget_lock_release_recursive>
 8015532:	bf00      	nop
 8015534:	20004970 	.word	0x20004970

08015538 <_realloc_r>:
 8015538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553c:	4680      	mov	r8, r0
 801553e:	4614      	mov	r4, r2
 8015540:	460e      	mov	r6, r1
 8015542:	b921      	cbnz	r1, 801554e <_realloc_r+0x16>
 8015544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015548:	4611      	mov	r1, r2
 801554a:	f7fe bfbd 	b.w	80144c8 <_malloc_r>
 801554e:	b92a      	cbnz	r2, 801555c <_realloc_r+0x24>
 8015550:	f7fe ff4e 	bl	80143f0 <_free_r>
 8015554:	4625      	mov	r5, r4
 8015556:	4628      	mov	r0, r5
 8015558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801555c:	f000 faa0 	bl	8015aa0 <_malloc_usable_size_r>
 8015560:	4284      	cmp	r4, r0
 8015562:	4607      	mov	r7, r0
 8015564:	d802      	bhi.n	801556c <_realloc_r+0x34>
 8015566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801556a:	d812      	bhi.n	8015592 <_realloc_r+0x5a>
 801556c:	4621      	mov	r1, r4
 801556e:	4640      	mov	r0, r8
 8015570:	f7fe ffaa 	bl	80144c8 <_malloc_r>
 8015574:	4605      	mov	r5, r0
 8015576:	2800      	cmp	r0, #0
 8015578:	d0ed      	beq.n	8015556 <_realloc_r+0x1e>
 801557a:	42bc      	cmp	r4, r7
 801557c:	4622      	mov	r2, r4
 801557e:	4631      	mov	r1, r6
 8015580:	bf28      	it	cs
 8015582:	463a      	movcs	r2, r7
 8015584:	f7fe fa4e 	bl	8013a24 <memcpy>
 8015588:	4631      	mov	r1, r6
 801558a:	4640      	mov	r0, r8
 801558c:	f7fe ff30 	bl	80143f0 <_free_r>
 8015590:	e7e1      	b.n	8015556 <_realloc_r+0x1e>
 8015592:	4635      	mov	r5, r6
 8015594:	e7df      	b.n	8015556 <_realloc_r+0x1e>

08015596 <__sfputc_r>:
 8015596:	6893      	ldr	r3, [r2, #8]
 8015598:	3b01      	subs	r3, #1
 801559a:	2b00      	cmp	r3, #0
 801559c:	b410      	push	{r4}
 801559e:	6093      	str	r3, [r2, #8]
 80155a0:	da08      	bge.n	80155b4 <__sfputc_r+0x1e>
 80155a2:	6994      	ldr	r4, [r2, #24]
 80155a4:	42a3      	cmp	r3, r4
 80155a6:	db01      	blt.n	80155ac <__sfputc_r+0x16>
 80155a8:	290a      	cmp	r1, #10
 80155aa:	d103      	bne.n	80155b4 <__sfputc_r+0x1e>
 80155ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155b0:	f000 b94a 	b.w	8015848 <__swbuf_r>
 80155b4:	6813      	ldr	r3, [r2, #0]
 80155b6:	1c58      	adds	r0, r3, #1
 80155b8:	6010      	str	r0, [r2, #0]
 80155ba:	7019      	strb	r1, [r3, #0]
 80155bc:	4608      	mov	r0, r1
 80155be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <__sfputs_r>:
 80155c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c6:	4606      	mov	r6, r0
 80155c8:	460f      	mov	r7, r1
 80155ca:	4614      	mov	r4, r2
 80155cc:	18d5      	adds	r5, r2, r3
 80155ce:	42ac      	cmp	r4, r5
 80155d0:	d101      	bne.n	80155d6 <__sfputs_r+0x12>
 80155d2:	2000      	movs	r0, #0
 80155d4:	e007      	b.n	80155e6 <__sfputs_r+0x22>
 80155d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155da:	463a      	mov	r2, r7
 80155dc:	4630      	mov	r0, r6
 80155de:	f7ff ffda 	bl	8015596 <__sfputc_r>
 80155e2:	1c43      	adds	r3, r0, #1
 80155e4:	d1f3      	bne.n	80155ce <__sfputs_r+0xa>
 80155e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080155e8 <_vfiprintf_r>:
 80155e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ec:	460d      	mov	r5, r1
 80155ee:	b09d      	sub	sp, #116	; 0x74
 80155f0:	4614      	mov	r4, r2
 80155f2:	4698      	mov	r8, r3
 80155f4:	4606      	mov	r6, r0
 80155f6:	b118      	cbz	r0, 8015600 <_vfiprintf_r+0x18>
 80155f8:	6983      	ldr	r3, [r0, #24]
 80155fa:	b90b      	cbnz	r3, 8015600 <_vfiprintf_r+0x18>
 80155fc:	f7ff fec4 	bl	8015388 <__sinit>
 8015600:	4b89      	ldr	r3, [pc, #548]	; (8015828 <_vfiprintf_r+0x240>)
 8015602:	429d      	cmp	r5, r3
 8015604:	d11b      	bne.n	801563e <_vfiprintf_r+0x56>
 8015606:	6875      	ldr	r5, [r6, #4]
 8015608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801560a:	07d9      	lsls	r1, r3, #31
 801560c:	d405      	bmi.n	801561a <_vfiprintf_r+0x32>
 801560e:	89ab      	ldrh	r3, [r5, #12]
 8015610:	059a      	lsls	r2, r3, #22
 8015612:	d402      	bmi.n	801561a <_vfiprintf_r+0x32>
 8015614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015616:	f7ff ff67 	bl	80154e8 <__retarget_lock_acquire_recursive>
 801561a:	89ab      	ldrh	r3, [r5, #12]
 801561c:	071b      	lsls	r3, r3, #28
 801561e:	d501      	bpl.n	8015624 <_vfiprintf_r+0x3c>
 8015620:	692b      	ldr	r3, [r5, #16]
 8015622:	b9eb      	cbnz	r3, 8015660 <_vfiprintf_r+0x78>
 8015624:	4629      	mov	r1, r5
 8015626:	4630      	mov	r0, r6
 8015628:	f000 f960 	bl	80158ec <__swsetup_r>
 801562c:	b1c0      	cbz	r0, 8015660 <_vfiprintf_r+0x78>
 801562e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015630:	07dc      	lsls	r4, r3, #31
 8015632:	d50e      	bpl.n	8015652 <_vfiprintf_r+0x6a>
 8015634:	f04f 30ff 	mov.w	r0, #4294967295
 8015638:	b01d      	add	sp, #116	; 0x74
 801563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801563e:	4b7b      	ldr	r3, [pc, #492]	; (801582c <_vfiprintf_r+0x244>)
 8015640:	429d      	cmp	r5, r3
 8015642:	d101      	bne.n	8015648 <_vfiprintf_r+0x60>
 8015644:	68b5      	ldr	r5, [r6, #8]
 8015646:	e7df      	b.n	8015608 <_vfiprintf_r+0x20>
 8015648:	4b79      	ldr	r3, [pc, #484]	; (8015830 <_vfiprintf_r+0x248>)
 801564a:	429d      	cmp	r5, r3
 801564c:	bf08      	it	eq
 801564e:	68f5      	ldreq	r5, [r6, #12]
 8015650:	e7da      	b.n	8015608 <_vfiprintf_r+0x20>
 8015652:	89ab      	ldrh	r3, [r5, #12]
 8015654:	0598      	lsls	r0, r3, #22
 8015656:	d4ed      	bmi.n	8015634 <_vfiprintf_r+0x4c>
 8015658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801565a:	f7ff ff46 	bl	80154ea <__retarget_lock_release_recursive>
 801565e:	e7e9      	b.n	8015634 <_vfiprintf_r+0x4c>
 8015660:	2300      	movs	r3, #0
 8015662:	9309      	str	r3, [sp, #36]	; 0x24
 8015664:	2320      	movs	r3, #32
 8015666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801566a:	f8cd 800c 	str.w	r8, [sp, #12]
 801566e:	2330      	movs	r3, #48	; 0x30
 8015670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015834 <_vfiprintf_r+0x24c>
 8015674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015678:	f04f 0901 	mov.w	r9, #1
 801567c:	4623      	mov	r3, r4
 801567e:	469a      	mov	sl, r3
 8015680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015684:	b10a      	cbz	r2, 801568a <_vfiprintf_r+0xa2>
 8015686:	2a25      	cmp	r2, #37	; 0x25
 8015688:	d1f9      	bne.n	801567e <_vfiprintf_r+0x96>
 801568a:	ebba 0b04 	subs.w	fp, sl, r4
 801568e:	d00b      	beq.n	80156a8 <_vfiprintf_r+0xc0>
 8015690:	465b      	mov	r3, fp
 8015692:	4622      	mov	r2, r4
 8015694:	4629      	mov	r1, r5
 8015696:	4630      	mov	r0, r6
 8015698:	f7ff ff94 	bl	80155c4 <__sfputs_r>
 801569c:	3001      	adds	r0, #1
 801569e:	f000 80aa 	beq.w	80157f6 <_vfiprintf_r+0x20e>
 80156a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156a4:	445a      	add	r2, fp
 80156a6:	9209      	str	r2, [sp, #36]	; 0x24
 80156a8:	f89a 3000 	ldrb.w	r3, [sl]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f000 80a2 	beq.w	80157f6 <_vfiprintf_r+0x20e>
 80156b2:	2300      	movs	r3, #0
 80156b4:	f04f 32ff 	mov.w	r2, #4294967295
 80156b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156bc:	f10a 0a01 	add.w	sl, sl, #1
 80156c0:	9304      	str	r3, [sp, #16]
 80156c2:	9307      	str	r3, [sp, #28]
 80156c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156c8:	931a      	str	r3, [sp, #104]	; 0x68
 80156ca:	4654      	mov	r4, sl
 80156cc:	2205      	movs	r2, #5
 80156ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156d2:	4858      	ldr	r0, [pc, #352]	; (8015834 <_vfiprintf_r+0x24c>)
 80156d4:	f7ea fda4 	bl	8000220 <memchr>
 80156d8:	9a04      	ldr	r2, [sp, #16]
 80156da:	b9d8      	cbnz	r0, 8015714 <_vfiprintf_r+0x12c>
 80156dc:	06d1      	lsls	r1, r2, #27
 80156de:	bf44      	itt	mi
 80156e0:	2320      	movmi	r3, #32
 80156e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156e6:	0713      	lsls	r3, r2, #28
 80156e8:	bf44      	itt	mi
 80156ea:	232b      	movmi	r3, #43	; 0x2b
 80156ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156f0:	f89a 3000 	ldrb.w	r3, [sl]
 80156f4:	2b2a      	cmp	r3, #42	; 0x2a
 80156f6:	d015      	beq.n	8015724 <_vfiprintf_r+0x13c>
 80156f8:	9a07      	ldr	r2, [sp, #28]
 80156fa:	4654      	mov	r4, sl
 80156fc:	2000      	movs	r0, #0
 80156fe:	f04f 0c0a 	mov.w	ip, #10
 8015702:	4621      	mov	r1, r4
 8015704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015708:	3b30      	subs	r3, #48	; 0x30
 801570a:	2b09      	cmp	r3, #9
 801570c:	d94e      	bls.n	80157ac <_vfiprintf_r+0x1c4>
 801570e:	b1b0      	cbz	r0, 801573e <_vfiprintf_r+0x156>
 8015710:	9207      	str	r2, [sp, #28]
 8015712:	e014      	b.n	801573e <_vfiprintf_r+0x156>
 8015714:	eba0 0308 	sub.w	r3, r0, r8
 8015718:	fa09 f303 	lsl.w	r3, r9, r3
 801571c:	4313      	orrs	r3, r2
 801571e:	9304      	str	r3, [sp, #16]
 8015720:	46a2      	mov	sl, r4
 8015722:	e7d2      	b.n	80156ca <_vfiprintf_r+0xe2>
 8015724:	9b03      	ldr	r3, [sp, #12]
 8015726:	1d19      	adds	r1, r3, #4
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	9103      	str	r1, [sp, #12]
 801572c:	2b00      	cmp	r3, #0
 801572e:	bfbb      	ittet	lt
 8015730:	425b      	neglt	r3, r3
 8015732:	f042 0202 	orrlt.w	r2, r2, #2
 8015736:	9307      	strge	r3, [sp, #28]
 8015738:	9307      	strlt	r3, [sp, #28]
 801573a:	bfb8      	it	lt
 801573c:	9204      	strlt	r2, [sp, #16]
 801573e:	7823      	ldrb	r3, [r4, #0]
 8015740:	2b2e      	cmp	r3, #46	; 0x2e
 8015742:	d10c      	bne.n	801575e <_vfiprintf_r+0x176>
 8015744:	7863      	ldrb	r3, [r4, #1]
 8015746:	2b2a      	cmp	r3, #42	; 0x2a
 8015748:	d135      	bne.n	80157b6 <_vfiprintf_r+0x1ce>
 801574a:	9b03      	ldr	r3, [sp, #12]
 801574c:	1d1a      	adds	r2, r3, #4
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	9203      	str	r2, [sp, #12]
 8015752:	2b00      	cmp	r3, #0
 8015754:	bfb8      	it	lt
 8015756:	f04f 33ff 	movlt.w	r3, #4294967295
 801575a:	3402      	adds	r4, #2
 801575c:	9305      	str	r3, [sp, #20]
 801575e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015844 <_vfiprintf_r+0x25c>
 8015762:	7821      	ldrb	r1, [r4, #0]
 8015764:	2203      	movs	r2, #3
 8015766:	4650      	mov	r0, sl
 8015768:	f7ea fd5a 	bl	8000220 <memchr>
 801576c:	b140      	cbz	r0, 8015780 <_vfiprintf_r+0x198>
 801576e:	2340      	movs	r3, #64	; 0x40
 8015770:	eba0 000a 	sub.w	r0, r0, sl
 8015774:	fa03 f000 	lsl.w	r0, r3, r0
 8015778:	9b04      	ldr	r3, [sp, #16]
 801577a:	4303      	orrs	r3, r0
 801577c:	3401      	adds	r4, #1
 801577e:	9304      	str	r3, [sp, #16]
 8015780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015784:	482c      	ldr	r0, [pc, #176]	; (8015838 <_vfiprintf_r+0x250>)
 8015786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801578a:	2206      	movs	r2, #6
 801578c:	f7ea fd48 	bl	8000220 <memchr>
 8015790:	2800      	cmp	r0, #0
 8015792:	d03f      	beq.n	8015814 <_vfiprintf_r+0x22c>
 8015794:	4b29      	ldr	r3, [pc, #164]	; (801583c <_vfiprintf_r+0x254>)
 8015796:	bb1b      	cbnz	r3, 80157e0 <_vfiprintf_r+0x1f8>
 8015798:	9b03      	ldr	r3, [sp, #12]
 801579a:	3307      	adds	r3, #7
 801579c:	f023 0307 	bic.w	r3, r3, #7
 80157a0:	3308      	adds	r3, #8
 80157a2:	9303      	str	r3, [sp, #12]
 80157a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157a6:	443b      	add	r3, r7
 80157a8:	9309      	str	r3, [sp, #36]	; 0x24
 80157aa:	e767      	b.n	801567c <_vfiprintf_r+0x94>
 80157ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80157b0:	460c      	mov	r4, r1
 80157b2:	2001      	movs	r0, #1
 80157b4:	e7a5      	b.n	8015702 <_vfiprintf_r+0x11a>
 80157b6:	2300      	movs	r3, #0
 80157b8:	3401      	adds	r4, #1
 80157ba:	9305      	str	r3, [sp, #20]
 80157bc:	4619      	mov	r1, r3
 80157be:	f04f 0c0a 	mov.w	ip, #10
 80157c2:	4620      	mov	r0, r4
 80157c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157c8:	3a30      	subs	r2, #48	; 0x30
 80157ca:	2a09      	cmp	r2, #9
 80157cc:	d903      	bls.n	80157d6 <_vfiprintf_r+0x1ee>
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d0c5      	beq.n	801575e <_vfiprintf_r+0x176>
 80157d2:	9105      	str	r1, [sp, #20]
 80157d4:	e7c3      	b.n	801575e <_vfiprintf_r+0x176>
 80157d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80157da:	4604      	mov	r4, r0
 80157dc:	2301      	movs	r3, #1
 80157de:	e7f0      	b.n	80157c2 <_vfiprintf_r+0x1da>
 80157e0:	ab03      	add	r3, sp, #12
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	462a      	mov	r2, r5
 80157e6:	4b16      	ldr	r3, [pc, #88]	; (8015840 <_vfiprintf_r+0x258>)
 80157e8:	a904      	add	r1, sp, #16
 80157ea:	4630      	mov	r0, r6
 80157ec:	f7fb f9a0 	bl	8010b30 <_printf_float>
 80157f0:	4607      	mov	r7, r0
 80157f2:	1c78      	adds	r0, r7, #1
 80157f4:	d1d6      	bne.n	80157a4 <_vfiprintf_r+0x1bc>
 80157f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157f8:	07d9      	lsls	r1, r3, #31
 80157fa:	d405      	bmi.n	8015808 <_vfiprintf_r+0x220>
 80157fc:	89ab      	ldrh	r3, [r5, #12]
 80157fe:	059a      	lsls	r2, r3, #22
 8015800:	d402      	bmi.n	8015808 <_vfiprintf_r+0x220>
 8015802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015804:	f7ff fe71 	bl	80154ea <__retarget_lock_release_recursive>
 8015808:	89ab      	ldrh	r3, [r5, #12]
 801580a:	065b      	lsls	r3, r3, #25
 801580c:	f53f af12 	bmi.w	8015634 <_vfiprintf_r+0x4c>
 8015810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015812:	e711      	b.n	8015638 <_vfiprintf_r+0x50>
 8015814:	ab03      	add	r3, sp, #12
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	462a      	mov	r2, r5
 801581a:	4b09      	ldr	r3, [pc, #36]	; (8015840 <_vfiprintf_r+0x258>)
 801581c:	a904      	add	r1, sp, #16
 801581e:	4630      	mov	r0, r6
 8015820:	f7fb fc2a 	bl	8011078 <_printf_i>
 8015824:	e7e4      	b.n	80157f0 <_vfiprintf_r+0x208>
 8015826:	bf00      	nop
 8015828:	080184e4 	.word	0x080184e4
 801582c:	08018504 	.word	0x08018504
 8015830:	080184c4 	.word	0x080184c4
 8015834:	0801845c 	.word	0x0801845c
 8015838:	08018466 	.word	0x08018466
 801583c:	08010b31 	.word	0x08010b31
 8015840:	080155c5 	.word	0x080155c5
 8015844:	08018462 	.word	0x08018462

08015848 <__swbuf_r>:
 8015848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584a:	460e      	mov	r6, r1
 801584c:	4614      	mov	r4, r2
 801584e:	4605      	mov	r5, r0
 8015850:	b118      	cbz	r0, 801585a <__swbuf_r+0x12>
 8015852:	6983      	ldr	r3, [r0, #24]
 8015854:	b90b      	cbnz	r3, 801585a <__swbuf_r+0x12>
 8015856:	f7ff fd97 	bl	8015388 <__sinit>
 801585a:	4b21      	ldr	r3, [pc, #132]	; (80158e0 <__swbuf_r+0x98>)
 801585c:	429c      	cmp	r4, r3
 801585e:	d12b      	bne.n	80158b8 <__swbuf_r+0x70>
 8015860:	686c      	ldr	r4, [r5, #4]
 8015862:	69a3      	ldr	r3, [r4, #24]
 8015864:	60a3      	str	r3, [r4, #8]
 8015866:	89a3      	ldrh	r3, [r4, #12]
 8015868:	071a      	lsls	r2, r3, #28
 801586a:	d52f      	bpl.n	80158cc <__swbuf_r+0x84>
 801586c:	6923      	ldr	r3, [r4, #16]
 801586e:	b36b      	cbz	r3, 80158cc <__swbuf_r+0x84>
 8015870:	6923      	ldr	r3, [r4, #16]
 8015872:	6820      	ldr	r0, [r4, #0]
 8015874:	1ac0      	subs	r0, r0, r3
 8015876:	6963      	ldr	r3, [r4, #20]
 8015878:	b2f6      	uxtb	r6, r6
 801587a:	4283      	cmp	r3, r0
 801587c:	4637      	mov	r7, r6
 801587e:	dc04      	bgt.n	801588a <__swbuf_r+0x42>
 8015880:	4621      	mov	r1, r4
 8015882:	4628      	mov	r0, r5
 8015884:	f7ff fcec 	bl	8015260 <_fflush_r>
 8015888:	bb30      	cbnz	r0, 80158d8 <__swbuf_r+0x90>
 801588a:	68a3      	ldr	r3, [r4, #8]
 801588c:	3b01      	subs	r3, #1
 801588e:	60a3      	str	r3, [r4, #8]
 8015890:	6823      	ldr	r3, [r4, #0]
 8015892:	1c5a      	adds	r2, r3, #1
 8015894:	6022      	str	r2, [r4, #0]
 8015896:	701e      	strb	r6, [r3, #0]
 8015898:	6963      	ldr	r3, [r4, #20]
 801589a:	3001      	adds	r0, #1
 801589c:	4283      	cmp	r3, r0
 801589e:	d004      	beq.n	80158aa <__swbuf_r+0x62>
 80158a0:	89a3      	ldrh	r3, [r4, #12]
 80158a2:	07db      	lsls	r3, r3, #31
 80158a4:	d506      	bpl.n	80158b4 <__swbuf_r+0x6c>
 80158a6:	2e0a      	cmp	r6, #10
 80158a8:	d104      	bne.n	80158b4 <__swbuf_r+0x6c>
 80158aa:	4621      	mov	r1, r4
 80158ac:	4628      	mov	r0, r5
 80158ae:	f7ff fcd7 	bl	8015260 <_fflush_r>
 80158b2:	b988      	cbnz	r0, 80158d8 <__swbuf_r+0x90>
 80158b4:	4638      	mov	r0, r7
 80158b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158b8:	4b0a      	ldr	r3, [pc, #40]	; (80158e4 <__swbuf_r+0x9c>)
 80158ba:	429c      	cmp	r4, r3
 80158bc:	d101      	bne.n	80158c2 <__swbuf_r+0x7a>
 80158be:	68ac      	ldr	r4, [r5, #8]
 80158c0:	e7cf      	b.n	8015862 <__swbuf_r+0x1a>
 80158c2:	4b09      	ldr	r3, [pc, #36]	; (80158e8 <__swbuf_r+0xa0>)
 80158c4:	429c      	cmp	r4, r3
 80158c6:	bf08      	it	eq
 80158c8:	68ec      	ldreq	r4, [r5, #12]
 80158ca:	e7ca      	b.n	8015862 <__swbuf_r+0x1a>
 80158cc:	4621      	mov	r1, r4
 80158ce:	4628      	mov	r0, r5
 80158d0:	f000 f80c 	bl	80158ec <__swsetup_r>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	d0cb      	beq.n	8015870 <__swbuf_r+0x28>
 80158d8:	f04f 37ff 	mov.w	r7, #4294967295
 80158dc:	e7ea      	b.n	80158b4 <__swbuf_r+0x6c>
 80158de:	bf00      	nop
 80158e0:	080184e4 	.word	0x080184e4
 80158e4:	08018504 	.word	0x08018504
 80158e8:	080184c4 	.word	0x080184c4

080158ec <__swsetup_r>:
 80158ec:	4b32      	ldr	r3, [pc, #200]	; (80159b8 <__swsetup_r+0xcc>)
 80158ee:	b570      	push	{r4, r5, r6, lr}
 80158f0:	681d      	ldr	r5, [r3, #0]
 80158f2:	4606      	mov	r6, r0
 80158f4:	460c      	mov	r4, r1
 80158f6:	b125      	cbz	r5, 8015902 <__swsetup_r+0x16>
 80158f8:	69ab      	ldr	r3, [r5, #24]
 80158fa:	b913      	cbnz	r3, 8015902 <__swsetup_r+0x16>
 80158fc:	4628      	mov	r0, r5
 80158fe:	f7ff fd43 	bl	8015388 <__sinit>
 8015902:	4b2e      	ldr	r3, [pc, #184]	; (80159bc <__swsetup_r+0xd0>)
 8015904:	429c      	cmp	r4, r3
 8015906:	d10f      	bne.n	8015928 <__swsetup_r+0x3c>
 8015908:	686c      	ldr	r4, [r5, #4]
 801590a:	89a3      	ldrh	r3, [r4, #12]
 801590c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015910:	0719      	lsls	r1, r3, #28
 8015912:	d42c      	bmi.n	801596e <__swsetup_r+0x82>
 8015914:	06dd      	lsls	r5, r3, #27
 8015916:	d411      	bmi.n	801593c <__swsetup_r+0x50>
 8015918:	2309      	movs	r3, #9
 801591a:	6033      	str	r3, [r6, #0]
 801591c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015920:	81a3      	strh	r3, [r4, #12]
 8015922:	f04f 30ff 	mov.w	r0, #4294967295
 8015926:	e03e      	b.n	80159a6 <__swsetup_r+0xba>
 8015928:	4b25      	ldr	r3, [pc, #148]	; (80159c0 <__swsetup_r+0xd4>)
 801592a:	429c      	cmp	r4, r3
 801592c:	d101      	bne.n	8015932 <__swsetup_r+0x46>
 801592e:	68ac      	ldr	r4, [r5, #8]
 8015930:	e7eb      	b.n	801590a <__swsetup_r+0x1e>
 8015932:	4b24      	ldr	r3, [pc, #144]	; (80159c4 <__swsetup_r+0xd8>)
 8015934:	429c      	cmp	r4, r3
 8015936:	bf08      	it	eq
 8015938:	68ec      	ldreq	r4, [r5, #12]
 801593a:	e7e6      	b.n	801590a <__swsetup_r+0x1e>
 801593c:	0758      	lsls	r0, r3, #29
 801593e:	d512      	bpl.n	8015966 <__swsetup_r+0x7a>
 8015940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015942:	b141      	cbz	r1, 8015956 <__swsetup_r+0x6a>
 8015944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015948:	4299      	cmp	r1, r3
 801594a:	d002      	beq.n	8015952 <__swsetup_r+0x66>
 801594c:	4630      	mov	r0, r6
 801594e:	f7fe fd4f 	bl	80143f0 <_free_r>
 8015952:	2300      	movs	r3, #0
 8015954:	6363      	str	r3, [r4, #52]	; 0x34
 8015956:	89a3      	ldrh	r3, [r4, #12]
 8015958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801595c:	81a3      	strh	r3, [r4, #12]
 801595e:	2300      	movs	r3, #0
 8015960:	6063      	str	r3, [r4, #4]
 8015962:	6923      	ldr	r3, [r4, #16]
 8015964:	6023      	str	r3, [r4, #0]
 8015966:	89a3      	ldrh	r3, [r4, #12]
 8015968:	f043 0308 	orr.w	r3, r3, #8
 801596c:	81a3      	strh	r3, [r4, #12]
 801596e:	6923      	ldr	r3, [r4, #16]
 8015970:	b94b      	cbnz	r3, 8015986 <__swsetup_r+0x9a>
 8015972:	89a3      	ldrh	r3, [r4, #12]
 8015974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801597c:	d003      	beq.n	8015986 <__swsetup_r+0x9a>
 801597e:	4621      	mov	r1, r4
 8015980:	4630      	mov	r0, r6
 8015982:	f000 f84d 	bl	8015a20 <__smakebuf_r>
 8015986:	89a0      	ldrh	r0, [r4, #12]
 8015988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801598c:	f010 0301 	ands.w	r3, r0, #1
 8015990:	d00a      	beq.n	80159a8 <__swsetup_r+0xbc>
 8015992:	2300      	movs	r3, #0
 8015994:	60a3      	str	r3, [r4, #8]
 8015996:	6963      	ldr	r3, [r4, #20]
 8015998:	425b      	negs	r3, r3
 801599a:	61a3      	str	r3, [r4, #24]
 801599c:	6923      	ldr	r3, [r4, #16]
 801599e:	b943      	cbnz	r3, 80159b2 <__swsetup_r+0xc6>
 80159a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80159a4:	d1ba      	bne.n	801591c <__swsetup_r+0x30>
 80159a6:	bd70      	pop	{r4, r5, r6, pc}
 80159a8:	0781      	lsls	r1, r0, #30
 80159aa:	bf58      	it	pl
 80159ac:	6963      	ldrpl	r3, [r4, #20]
 80159ae:	60a3      	str	r3, [r4, #8]
 80159b0:	e7f4      	b.n	801599c <__swsetup_r+0xb0>
 80159b2:	2000      	movs	r0, #0
 80159b4:	e7f7      	b.n	80159a6 <__swsetup_r+0xba>
 80159b6:	bf00      	nop
 80159b8:	2000002c 	.word	0x2000002c
 80159bc:	080184e4 	.word	0x080184e4
 80159c0:	08018504 	.word	0x08018504
 80159c4:	080184c4 	.word	0x080184c4

080159c8 <abort>:
 80159c8:	b508      	push	{r3, lr}
 80159ca:	2006      	movs	r0, #6
 80159cc:	f000 f898 	bl	8015b00 <raise>
 80159d0:	2001      	movs	r0, #1
 80159d2:	f7f0 ff53 	bl	800687c <_exit>

080159d6 <__swhatbuf_r>:
 80159d6:	b570      	push	{r4, r5, r6, lr}
 80159d8:	460e      	mov	r6, r1
 80159da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159de:	2900      	cmp	r1, #0
 80159e0:	b096      	sub	sp, #88	; 0x58
 80159e2:	4614      	mov	r4, r2
 80159e4:	461d      	mov	r5, r3
 80159e6:	da08      	bge.n	80159fa <__swhatbuf_r+0x24>
 80159e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80159ec:	2200      	movs	r2, #0
 80159ee:	602a      	str	r2, [r5, #0]
 80159f0:	061a      	lsls	r2, r3, #24
 80159f2:	d410      	bmi.n	8015a16 <__swhatbuf_r+0x40>
 80159f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80159f8:	e00e      	b.n	8015a18 <__swhatbuf_r+0x42>
 80159fa:	466a      	mov	r2, sp
 80159fc:	f000 f89c 	bl	8015b38 <_fstat_r>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	dbf1      	blt.n	80159e8 <__swhatbuf_r+0x12>
 8015a04:	9a01      	ldr	r2, [sp, #4]
 8015a06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a0e:	425a      	negs	r2, r3
 8015a10:	415a      	adcs	r2, r3
 8015a12:	602a      	str	r2, [r5, #0]
 8015a14:	e7ee      	b.n	80159f4 <__swhatbuf_r+0x1e>
 8015a16:	2340      	movs	r3, #64	; 0x40
 8015a18:	2000      	movs	r0, #0
 8015a1a:	6023      	str	r3, [r4, #0]
 8015a1c:	b016      	add	sp, #88	; 0x58
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}

08015a20 <__smakebuf_r>:
 8015a20:	898b      	ldrh	r3, [r1, #12]
 8015a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a24:	079d      	lsls	r5, r3, #30
 8015a26:	4606      	mov	r6, r0
 8015a28:	460c      	mov	r4, r1
 8015a2a:	d507      	bpl.n	8015a3c <__smakebuf_r+0x1c>
 8015a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a30:	6023      	str	r3, [r4, #0]
 8015a32:	6123      	str	r3, [r4, #16]
 8015a34:	2301      	movs	r3, #1
 8015a36:	6163      	str	r3, [r4, #20]
 8015a38:	b002      	add	sp, #8
 8015a3a:	bd70      	pop	{r4, r5, r6, pc}
 8015a3c:	ab01      	add	r3, sp, #4
 8015a3e:	466a      	mov	r2, sp
 8015a40:	f7ff ffc9 	bl	80159d6 <__swhatbuf_r>
 8015a44:	9900      	ldr	r1, [sp, #0]
 8015a46:	4605      	mov	r5, r0
 8015a48:	4630      	mov	r0, r6
 8015a4a:	f7fe fd3d 	bl	80144c8 <_malloc_r>
 8015a4e:	b948      	cbnz	r0, 8015a64 <__smakebuf_r+0x44>
 8015a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a54:	059a      	lsls	r2, r3, #22
 8015a56:	d4ef      	bmi.n	8015a38 <__smakebuf_r+0x18>
 8015a58:	f023 0303 	bic.w	r3, r3, #3
 8015a5c:	f043 0302 	orr.w	r3, r3, #2
 8015a60:	81a3      	strh	r3, [r4, #12]
 8015a62:	e7e3      	b.n	8015a2c <__smakebuf_r+0xc>
 8015a64:	4b0d      	ldr	r3, [pc, #52]	; (8015a9c <__smakebuf_r+0x7c>)
 8015a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8015a68:	89a3      	ldrh	r3, [r4, #12]
 8015a6a:	6020      	str	r0, [r4, #0]
 8015a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a70:	81a3      	strh	r3, [r4, #12]
 8015a72:	9b00      	ldr	r3, [sp, #0]
 8015a74:	6163      	str	r3, [r4, #20]
 8015a76:	9b01      	ldr	r3, [sp, #4]
 8015a78:	6120      	str	r0, [r4, #16]
 8015a7a:	b15b      	cbz	r3, 8015a94 <__smakebuf_r+0x74>
 8015a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a80:	4630      	mov	r0, r6
 8015a82:	f000 f86b 	bl	8015b5c <_isatty_r>
 8015a86:	b128      	cbz	r0, 8015a94 <__smakebuf_r+0x74>
 8015a88:	89a3      	ldrh	r3, [r4, #12]
 8015a8a:	f023 0303 	bic.w	r3, r3, #3
 8015a8e:	f043 0301 	orr.w	r3, r3, #1
 8015a92:	81a3      	strh	r3, [r4, #12]
 8015a94:	89a0      	ldrh	r0, [r4, #12]
 8015a96:	4305      	orrs	r5, r0
 8015a98:	81a5      	strh	r5, [r4, #12]
 8015a9a:	e7cd      	b.n	8015a38 <__smakebuf_r+0x18>
 8015a9c:	08015321 	.word	0x08015321

08015aa0 <_malloc_usable_size_r>:
 8015aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aa4:	1f18      	subs	r0, r3, #4
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	bfbc      	itt	lt
 8015aaa:	580b      	ldrlt	r3, [r1, r0]
 8015aac:	18c0      	addlt	r0, r0, r3
 8015aae:	4770      	bx	lr

08015ab0 <_raise_r>:
 8015ab0:	291f      	cmp	r1, #31
 8015ab2:	b538      	push	{r3, r4, r5, lr}
 8015ab4:	4604      	mov	r4, r0
 8015ab6:	460d      	mov	r5, r1
 8015ab8:	d904      	bls.n	8015ac4 <_raise_r+0x14>
 8015aba:	2316      	movs	r3, #22
 8015abc:	6003      	str	r3, [r0, #0]
 8015abe:	f04f 30ff 	mov.w	r0, #4294967295
 8015ac2:	bd38      	pop	{r3, r4, r5, pc}
 8015ac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ac6:	b112      	cbz	r2, 8015ace <_raise_r+0x1e>
 8015ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015acc:	b94b      	cbnz	r3, 8015ae2 <_raise_r+0x32>
 8015ace:	4620      	mov	r0, r4
 8015ad0:	f000 f830 	bl	8015b34 <_getpid_r>
 8015ad4:	462a      	mov	r2, r5
 8015ad6:	4601      	mov	r1, r0
 8015ad8:	4620      	mov	r0, r4
 8015ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ade:	f000 b817 	b.w	8015b10 <_kill_r>
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d00a      	beq.n	8015afc <_raise_r+0x4c>
 8015ae6:	1c59      	adds	r1, r3, #1
 8015ae8:	d103      	bne.n	8015af2 <_raise_r+0x42>
 8015aea:	2316      	movs	r3, #22
 8015aec:	6003      	str	r3, [r0, #0]
 8015aee:	2001      	movs	r0, #1
 8015af0:	e7e7      	b.n	8015ac2 <_raise_r+0x12>
 8015af2:	2400      	movs	r4, #0
 8015af4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015af8:	4628      	mov	r0, r5
 8015afa:	4798      	blx	r3
 8015afc:	2000      	movs	r0, #0
 8015afe:	e7e0      	b.n	8015ac2 <_raise_r+0x12>

08015b00 <raise>:
 8015b00:	4b02      	ldr	r3, [pc, #8]	; (8015b0c <raise+0xc>)
 8015b02:	4601      	mov	r1, r0
 8015b04:	6818      	ldr	r0, [r3, #0]
 8015b06:	f7ff bfd3 	b.w	8015ab0 <_raise_r>
 8015b0a:	bf00      	nop
 8015b0c:	2000002c 	.word	0x2000002c

08015b10 <_kill_r>:
 8015b10:	b538      	push	{r3, r4, r5, lr}
 8015b12:	4d07      	ldr	r5, [pc, #28]	; (8015b30 <_kill_r+0x20>)
 8015b14:	2300      	movs	r3, #0
 8015b16:	4604      	mov	r4, r0
 8015b18:	4608      	mov	r0, r1
 8015b1a:	4611      	mov	r1, r2
 8015b1c:	602b      	str	r3, [r5, #0]
 8015b1e:	f7f0 fe9d 	bl	800685c <_kill>
 8015b22:	1c43      	adds	r3, r0, #1
 8015b24:	d102      	bne.n	8015b2c <_kill_r+0x1c>
 8015b26:	682b      	ldr	r3, [r5, #0]
 8015b28:	b103      	cbz	r3, 8015b2c <_kill_r+0x1c>
 8015b2a:	6023      	str	r3, [r4, #0]
 8015b2c:	bd38      	pop	{r3, r4, r5, pc}
 8015b2e:	bf00      	nop
 8015b30:	2000496c 	.word	0x2000496c

08015b34 <_getpid_r>:
 8015b34:	f7f0 be8a 	b.w	800684c <_getpid>

08015b38 <_fstat_r>:
 8015b38:	b538      	push	{r3, r4, r5, lr}
 8015b3a:	4d07      	ldr	r5, [pc, #28]	; (8015b58 <_fstat_r+0x20>)
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	4604      	mov	r4, r0
 8015b40:	4608      	mov	r0, r1
 8015b42:	4611      	mov	r1, r2
 8015b44:	602b      	str	r3, [r5, #0]
 8015b46:	f7f0 fee8 	bl	800691a <_fstat>
 8015b4a:	1c43      	adds	r3, r0, #1
 8015b4c:	d102      	bne.n	8015b54 <_fstat_r+0x1c>
 8015b4e:	682b      	ldr	r3, [r5, #0]
 8015b50:	b103      	cbz	r3, 8015b54 <_fstat_r+0x1c>
 8015b52:	6023      	str	r3, [r4, #0]
 8015b54:	bd38      	pop	{r3, r4, r5, pc}
 8015b56:	bf00      	nop
 8015b58:	2000496c 	.word	0x2000496c

08015b5c <_isatty_r>:
 8015b5c:	b538      	push	{r3, r4, r5, lr}
 8015b5e:	4d06      	ldr	r5, [pc, #24]	; (8015b78 <_isatty_r+0x1c>)
 8015b60:	2300      	movs	r3, #0
 8015b62:	4604      	mov	r4, r0
 8015b64:	4608      	mov	r0, r1
 8015b66:	602b      	str	r3, [r5, #0]
 8015b68:	f7f0 fee7 	bl	800693a <_isatty>
 8015b6c:	1c43      	adds	r3, r0, #1
 8015b6e:	d102      	bne.n	8015b76 <_isatty_r+0x1a>
 8015b70:	682b      	ldr	r3, [r5, #0]
 8015b72:	b103      	cbz	r3, 8015b76 <_isatty_r+0x1a>
 8015b74:	6023      	str	r3, [r4, #0]
 8015b76:	bd38      	pop	{r3, r4, r5, pc}
 8015b78:	2000496c 	.word	0x2000496c

08015b7c <acos>:
 8015b7c:	b538      	push	{r3, r4, r5, lr}
 8015b7e:	ed2d 8b02 	vpush	{d8}
 8015b82:	ec55 4b10 	vmov	r4, r5, d0
 8015b86:	f000 f91f 	bl	8015dc8 <__ieee754_acos>
 8015b8a:	4622      	mov	r2, r4
 8015b8c:	462b      	mov	r3, r5
 8015b8e:	4620      	mov	r0, r4
 8015b90:	4629      	mov	r1, r5
 8015b92:	eeb0 8a40 	vmov.f32	s16, s0
 8015b96:	eef0 8a60 	vmov.f32	s17, s1
 8015b9a:	f7ea ffe7 	bl	8000b6c <__aeabi_dcmpun>
 8015b9e:	b9a8      	cbnz	r0, 8015bcc <acos+0x50>
 8015ba0:	ec45 4b10 	vmov	d0, r4, r5
 8015ba4:	f001 fe04 	bl	80177b0 <fabs>
 8015ba8:	4b0c      	ldr	r3, [pc, #48]	; (8015bdc <acos+0x60>)
 8015baa:	ec51 0b10 	vmov	r0, r1, d0
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f7ea ffd2 	bl	8000b58 <__aeabi_dcmpgt>
 8015bb4:	b150      	cbz	r0, 8015bcc <acos+0x50>
 8015bb6:	f7fa fee9 	bl	801098c <__errno>
 8015bba:	ecbd 8b02 	vpop	{d8}
 8015bbe:	2321      	movs	r3, #33	; 0x21
 8015bc0:	6003      	str	r3, [r0, #0]
 8015bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bc6:	4806      	ldr	r0, [pc, #24]	; (8015be0 <acos+0x64>)
 8015bc8:	f7ff b986 	b.w	8014ed8 <nan>
 8015bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8015bd0:	eef0 0a68 	vmov.f32	s1, s17
 8015bd4:	ecbd 8b02 	vpop	{d8}
 8015bd8:	bd38      	pop	{r3, r4, r5, pc}
 8015bda:	bf00      	nop
 8015bdc:	3ff00000 	.word	0x3ff00000
 8015be0:	080184c3 	.word	0x080184c3

08015be4 <asin>:
 8015be4:	b538      	push	{r3, r4, r5, lr}
 8015be6:	ed2d 8b02 	vpush	{d8}
 8015bea:	ec55 4b10 	vmov	r4, r5, d0
 8015bee:	f000 fb4b 	bl	8016288 <__ieee754_asin>
 8015bf2:	4622      	mov	r2, r4
 8015bf4:	462b      	mov	r3, r5
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	4629      	mov	r1, r5
 8015bfa:	eeb0 8a40 	vmov.f32	s16, s0
 8015bfe:	eef0 8a60 	vmov.f32	s17, s1
 8015c02:	f7ea ffb3 	bl	8000b6c <__aeabi_dcmpun>
 8015c06:	b9a8      	cbnz	r0, 8015c34 <asin+0x50>
 8015c08:	ec45 4b10 	vmov	d0, r4, r5
 8015c0c:	f001 fdd0 	bl	80177b0 <fabs>
 8015c10:	4b0c      	ldr	r3, [pc, #48]	; (8015c44 <asin+0x60>)
 8015c12:	ec51 0b10 	vmov	r0, r1, d0
 8015c16:	2200      	movs	r2, #0
 8015c18:	f7ea ff9e 	bl	8000b58 <__aeabi_dcmpgt>
 8015c1c:	b150      	cbz	r0, 8015c34 <asin+0x50>
 8015c1e:	f7fa feb5 	bl	801098c <__errno>
 8015c22:	ecbd 8b02 	vpop	{d8}
 8015c26:	2321      	movs	r3, #33	; 0x21
 8015c28:	6003      	str	r3, [r0, #0]
 8015c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c2e:	4806      	ldr	r0, [pc, #24]	; (8015c48 <asin+0x64>)
 8015c30:	f7ff b952 	b.w	8014ed8 <nan>
 8015c34:	eeb0 0a48 	vmov.f32	s0, s16
 8015c38:	eef0 0a68 	vmov.f32	s1, s17
 8015c3c:	ecbd 8b02 	vpop	{d8}
 8015c40:	bd38      	pop	{r3, r4, r5, pc}
 8015c42:	bf00      	nop
 8015c44:	3ff00000 	.word	0x3ff00000
 8015c48:	080184c3 	.word	0x080184c3

08015c4c <atan2>:
 8015c4c:	f000 bd30 	b.w	80166b0 <__ieee754_atan2>

08015c50 <pow>:
 8015c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c52:	ed2d 8b02 	vpush	{d8}
 8015c56:	eeb0 8a40 	vmov.f32	s16, s0
 8015c5a:	eef0 8a60 	vmov.f32	s17, s1
 8015c5e:	ec55 4b11 	vmov	r4, r5, d1
 8015c62:	f000 fdf1 	bl	8016848 <__ieee754_pow>
 8015c66:	4622      	mov	r2, r4
 8015c68:	462b      	mov	r3, r5
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	4629      	mov	r1, r5
 8015c6e:	ec57 6b10 	vmov	r6, r7, d0
 8015c72:	f7ea ff7b 	bl	8000b6c <__aeabi_dcmpun>
 8015c76:	2800      	cmp	r0, #0
 8015c78:	d13b      	bne.n	8015cf2 <pow+0xa2>
 8015c7a:	ec51 0b18 	vmov	r0, r1, d8
 8015c7e:	2200      	movs	r2, #0
 8015c80:	2300      	movs	r3, #0
 8015c82:	f7ea ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8015c86:	b1b8      	cbz	r0, 8015cb8 <pow+0x68>
 8015c88:	2200      	movs	r2, #0
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	4629      	mov	r1, r5
 8015c90:	f7ea ff3a 	bl	8000b08 <__aeabi_dcmpeq>
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d146      	bne.n	8015d26 <pow+0xd6>
 8015c98:	ec45 4b10 	vmov	d0, r4, r5
 8015c9c:	f001 fd91 	bl	80177c2 <finite>
 8015ca0:	b338      	cbz	r0, 8015cf2 <pow+0xa2>
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	4629      	mov	r1, r5
 8015caa:	f7ea ff37 	bl	8000b1c <__aeabi_dcmplt>
 8015cae:	b300      	cbz	r0, 8015cf2 <pow+0xa2>
 8015cb0:	f7fa fe6c 	bl	801098c <__errno>
 8015cb4:	2322      	movs	r3, #34	; 0x22
 8015cb6:	e01b      	b.n	8015cf0 <pow+0xa0>
 8015cb8:	ec47 6b10 	vmov	d0, r6, r7
 8015cbc:	f001 fd81 	bl	80177c2 <finite>
 8015cc0:	b9e0      	cbnz	r0, 8015cfc <pow+0xac>
 8015cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8015cc6:	eef0 0a68 	vmov.f32	s1, s17
 8015cca:	f001 fd7a 	bl	80177c2 <finite>
 8015cce:	b1a8      	cbz	r0, 8015cfc <pow+0xac>
 8015cd0:	ec45 4b10 	vmov	d0, r4, r5
 8015cd4:	f001 fd75 	bl	80177c2 <finite>
 8015cd8:	b180      	cbz	r0, 8015cfc <pow+0xac>
 8015cda:	4632      	mov	r2, r6
 8015cdc:	463b      	mov	r3, r7
 8015cde:	4630      	mov	r0, r6
 8015ce0:	4639      	mov	r1, r7
 8015ce2:	f7ea ff43 	bl	8000b6c <__aeabi_dcmpun>
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	d0e2      	beq.n	8015cb0 <pow+0x60>
 8015cea:	f7fa fe4f 	bl	801098c <__errno>
 8015cee:	2321      	movs	r3, #33	; 0x21
 8015cf0:	6003      	str	r3, [r0, #0]
 8015cf2:	ecbd 8b02 	vpop	{d8}
 8015cf6:	ec47 6b10 	vmov	d0, r6, r7
 8015cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	2300      	movs	r3, #0
 8015d00:	4630      	mov	r0, r6
 8015d02:	4639      	mov	r1, r7
 8015d04:	f7ea ff00 	bl	8000b08 <__aeabi_dcmpeq>
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	d0f2      	beq.n	8015cf2 <pow+0xa2>
 8015d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8015d10:	eef0 0a68 	vmov.f32	s1, s17
 8015d14:	f001 fd55 	bl	80177c2 <finite>
 8015d18:	2800      	cmp	r0, #0
 8015d1a:	d0ea      	beq.n	8015cf2 <pow+0xa2>
 8015d1c:	ec45 4b10 	vmov	d0, r4, r5
 8015d20:	f001 fd4f 	bl	80177c2 <finite>
 8015d24:	e7c3      	b.n	8015cae <pow+0x5e>
 8015d26:	4f01      	ldr	r7, [pc, #4]	; (8015d2c <pow+0xdc>)
 8015d28:	2600      	movs	r6, #0
 8015d2a:	e7e2      	b.n	8015cf2 <pow+0xa2>
 8015d2c:	3ff00000 	.word	0x3ff00000

08015d30 <sqrt>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	ed2d 8b02 	vpush	{d8}
 8015d36:	ec55 4b10 	vmov	r4, r5, d0
 8015d3a:	f001 fab3 	bl	80172a4 <__ieee754_sqrt>
 8015d3e:	4622      	mov	r2, r4
 8015d40:	462b      	mov	r3, r5
 8015d42:	4620      	mov	r0, r4
 8015d44:	4629      	mov	r1, r5
 8015d46:	eeb0 8a40 	vmov.f32	s16, s0
 8015d4a:	eef0 8a60 	vmov.f32	s17, s1
 8015d4e:	f7ea ff0d 	bl	8000b6c <__aeabi_dcmpun>
 8015d52:	b990      	cbnz	r0, 8015d7a <sqrt+0x4a>
 8015d54:	2200      	movs	r2, #0
 8015d56:	2300      	movs	r3, #0
 8015d58:	4620      	mov	r0, r4
 8015d5a:	4629      	mov	r1, r5
 8015d5c:	f7ea fede 	bl	8000b1c <__aeabi_dcmplt>
 8015d60:	b158      	cbz	r0, 8015d7a <sqrt+0x4a>
 8015d62:	f7fa fe13 	bl	801098c <__errno>
 8015d66:	2321      	movs	r3, #33	; 0x21
 8015d68:	6003      	str	r3, [r0, #0]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	4610      	mov	r0, r2
 8015d70:	4619      	mov	r1, r3
 8015d72:	f7ea fd8b 	bl	800088c <__aeabi_ddiv>
 8015d76:	ec41 0b18 	vmov	d8, r0, r1
 8015d7a:	eeb0 0a48 	vmov.f32	s0, s16
 8015d7e:	eef0 0a68 	vmov.f32	s1, s17
 8015d82:	ecbd 8b02 	vpop	{d8}
 8015d86:	bd38      	pop	{r3, r4, r5, pc}

08015d88 <sqrtf>:
 8015d88:	b508      	push	{r3, lr}
 8015d8a:	ed2d 8b02 	vpush	{d8}
 8015d8e:	eeb0 8a40 	vmov.f32	s16, s0
 8015d92:	f001 fb39 	bl	8017408 <__ieee754_sqrtf>
 8015d96:	eeb4 8a48 	vcmp.f32	s16, s16
 8015d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9e:	d60c      	bvs.n	8015dba <sqrtf+0x32>
 8015da0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8015dc0 <sqrtf+0x38>
 8015da4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dac:	d505      	bpl.n	8015dba <sqrtf+0x32>
 8015dae:	f7fa fded 	bl	801098c <__errno>
 8015db2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015db6:	2321      	movs	r3, #33	; 0x21
 8015db8:	6003      	str	r3, [r0, #0]
 8015dba:	ecbd 8b02 	vpop	{d8}
 8015dbe:	bd08      	pop	{r3, pc}
	...

08015dc8 <__ieee754_acos>:
 8015dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dcc:	ec55 4b10 	vmov	r4, r5, d0
 8015dd0:	49b7      	ldr	r1, [pc, #732]	; (80160b0 <__ieee754_acos+0x2e8>)
 8015dd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015dd6:	428b      	cmp	r3, r1
 8015dd8:	dd1b      	ble.n	8015e12 <__ieee754_acos+0x4a>
 8015dda:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8015dde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015de2:	4323      	orrs	r3, r4
 8015de4:	d106      	bne.n	8015df4 <__ieee754_acos+0x2c>
 8015de6:	2d00      	cmp	r5, #0
 8015de8:	f300 8211 	bgt.w	801620e <__ieee754_acos+0x446>
 8015dec:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8016048 <__ieee754_acos+0x280>
 8015df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df4:	ee10 2a10 	vmov	r2, s0
 8015df8:	462b      	mov	r3, r5
 8015dfa:	ee10 0a10 	vmov	r0, s0
 8015dfe:	4629      	mov	r1, r5
 8015e00:	f7ea fa62 	bl	80002c8 <__aeabi_dsub>
 8015e04:	4602      	mov	r2, r0
 8015e06:	460b      	mov	r3, r1
 8015e08:	f7ea fd40 	bl	800088c <__aeabi_ddiv>
 8015e0c:	ec41 0b10 	vmov	d0, r0, r1
 8015e10:	e7ee      	b.n	8015df0 <__ieee754_acos+0x28>
 8015e12:	49a8      	ldr	r1, [pc, #672]	; (80160b4 <__ieee754_acos+0x2ec>)
 8015e14:	428b      	cmp	r3, r1
 8015e16:	f300 8087 	bgt.w	8015f28 <__ieee754_acos+0x160>
 8015e1a:	4aa7      	ldr	r2, [pc, #668]	; (80160b8 <__ieee754_acos+0x2f0>)
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	f340 81f9 	ble.w	8016214 <__ieee754_acos+0x44c>
 8015e22:	ee10 2a10 	vmov	r2, s0
 8015e26:	ee10 0a10 	vmov	r0, s0
 8015e2a:	462b      	mov	r3, r5
 8015e2c:	4629      	mov	r1, r5
 8015e2e:	f7ea fc03 	bl	8000638 <__aeabi_dmul>
 8015e32:	a387      	add	r3, pc, #540	; (adr r3, 8016050 <__ieee754_acos+0x288>)
 8015e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e38:	4606      	mov	r6, r0
 8015e3a:	460f      	mov	r7, r1
 8015e3c:	f7ea fbfc 	bl	8000638 <__aeabi_dmul>
 8015e40:	a385      	add	r3, pc, #532	; (adr r3, 8016058 <__ieee754_acos+0x290>)
 8015e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e46:	f7ea fa41 	bl	80002cc <__adddf3>
 8015e4a:	4632      	mov	r2, r6
 8015e4c:	463b      	mov	r3, r7
 8015e4e:	f7ea fbf3 	bl	8000638 <__aeabi_dmul>
 8015e52:	a383      	add	r3, pc, #524	; (adr r3, 8016060 <__ieee754_acos+0x298>)
 8015e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e58:	f7ea fa36 	bl	80002c8 <__aeabi_dsub>
 8015e5c:	4632      	mov	r2, r6
 8015e5e:	463b      	mov	r3, r7
 8015e60:	f7ea fbea 	bl	8000638 <__aeabi_dmul>
 8015e64:	a380      	add	r3, pc, #512	; (adr r3, 8016068 <__ieee754_acos+0x2a0>)
 8015e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e6a:	f7ea fa2f 	bl	80002cc <__adddf3>
 8015e6e:	4632      	mov	r2, r6
 8015e70:	463b      	mov	r3, r7
 8015e72:	f7ea fbe1 	bl	8000638 <__aeabi_dmul>
 8015e76:	a37e      	add	r3, pc, #504	; (adr r3, 8016070 <__ieee754_acos+0x2a8>)
 8015e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7c:	f7ea fa24 	bl	80002c8 <__aeabi_dsub>
 8015e80:	4632      	mov	r2, r6
 8015e82:	463b      	mov	r3, r7
 8015e84:	f7ea fbd8 	bl	8000638 <__aeabi_dmul>
 8015e88:	a37b      	add	r3, pc, #492	; (adr r3, 8016078 <__ieee754_acos+0x2b0>)
 8015e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8e:	f7ea fa1d 	bl	80002cc <__adddf3>
 8015e92:	4632      	mov	r2, r6
 8015e94:	463b      	mov	r3, r7
 8015e96:	f7ea fbcf 	bl	8000638 <__aeabi_dmul>
 8015e9a:	a379      	add	r3, pc, #484	; (adr r3, 8016080 <__ieee754_acos+0x2b8>)
 8015e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea0:	4680      	mov	r8, r0
 8015ea2:	4689      	mov	r9, r1
 8015ea4:	4630      	mov	r0, r6
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	f7ea fbc6 	bl	8000638 <__aeabi_dmul>
 8015eac:	a376      	add	r3, pc, #472	; (adr r3, 8016088 <__ieee754_acos+0x2c0>)
 8015eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb2:	f7ea fa09 	bl	80002c8 <__aeabi_dsub>
 8015eb6:	4632      	mov	r2, r6
 8015eb8:	463b      	mov	r3, r7
 8015eba:	f7ea fbbd 	bl	8000638 <__aeabi_dmul>
 8015ebe:	a374      	add	r3, pc, #464	; (adr r3, 8016090 <__ieee754_acos+0x2c8>)
 8015ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec4:	f7ea fa02 	bl	80002cc <__adddf3>
 8015ec8:	4632      	mov	r2, r6
 8015eca:	463b      	mov	r3, r7
 8015ecc:	f7ea fbb4 	bl	8000638 <__aeabi_dmul>
 8015ed0:	a371      	add	r3, pc, #452	; (adr r3, 8016098 <__ieee754_acos+0x2d0>)
 8015ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed6:	f7ea f9f7 	bl	80002c8 <__aeabi_dsub>
 8015eda:	4632      	mov	r2, r6
 8015edc:	463b      	mov	r3, r7
 8015ede:	f7ea fbab 	bl	8000638 <__aeabi_dmul>
 8015ee2:	4b76      	ldr	r3, [pc, #472]	; (80160bc <__ieee754_acos+0x2f4>)
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	f7ea f9f1 	bl	80002cc <__adddf3>
 8015eea:	4602      	mov	r2, r0
 8015eec:	460b      	mov	r3, r1
 8015eee:	4640      	mov	r0, r8
 8015ef0:	4649      	mov	r1, r9
 8015ef2:	f7ea fccb 	bl	800088c <__aeabi_ddiv>
 8015ef6:	4622      	mov	r2, r4
 8015ef8:	462b      	mov	r3, r5
 8015efa:	f7ea fb9d 	bl	8000638 <__aeabi_dmul>
 8015efe:	4602      	mov	r2, r0
 8015f00:	460b      	mov	r3, r1
 8015f02:	a167      	add	r1, pc, #412	; (adr r1, 80160a0 <__ieee754_acos+0x2d8>)
 8015f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f08:	f7ea f9de 	bl	80002c8 <__aeabi_dsub>
 8015f0c:	4602      	mov	r2, r0
 8015f0e:	460b      	mov	r3, r1
 8015f10:	4620      	mov	r0, r4
 8015f12:	4629      	mov	r1, r5
 8015f14:	f7ea f9d8 	bl	80002c8 <__aeabi_dsub>
 8015f18:	4602      	mov	r2, r0
 8015f1a:	460b      	mov	r3, r1
 8015f1c:	a162      	add	r1, pc, #392	; (adr r1, 80160a8 <__ieee754_acos+0x2e0>)
 8015f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f22:	f7ea f9d1 	bl	80002c8 <__aeabi_dsub>
 8015f26:	e771      	b.n	8015e0c <__ieee754_acos+0x44>
 8015f28:	2d00      	cmp	r5, #0
 8015f2a:	f280 80cb 	bge.w	80160c4 <__ieee754_acos+0x2fc>
 8015f2e:	ee10 0a10 	vmov	r0, s0
 8015f32:	4b62      	ldr	r3, [pc, #392]	; (80160bc <__ieee754_acos+0x2f4>)
 8015f34:	2200      	movs	r2, #0
 8015f36:	4629      	mov	r1, r5
 8015f38:	f7ea f9c8 	bl	80002cc <__adddf3>
 8015f3c:	4b60      	ldr	r3, [pc, #384]	; (80160c0 <__ieee754_acos+0x2f8>)
 8015f3e:	2200      	movs	r2, #0
 8015f40:	f7ea fb7a 	bl	8000638 <__aeabi_dmul>
 8015f44:	a342      	add	r3, pc, #264	; (adr r3, 8016050 <__ieee754_acos+0x288>)
 8015f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	460d      	mov	r5, r1
 8015f4e:	f7ea fb73 	bl	8000638 <__aeabi_dmul>
 8015f52:	a341      	add	r3, pc, #260	; (adr r3, 8016058 <__ieee754_acos+0x290>)
 8015f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f58:	f7ea f9b8 	bl	80002cc <__adddf3>
 8015f5c:	4622      	mov	r2, r4
 8015f5e:	462b      	mov	r3, r5
 8015f60:	f7ea fb6a 	bl	8000638 <__aeabi_dmul>
 8015f64:	a33e      	add	r3, pc, #248	; (adr r3, 8016060 <__ieee754_acos+0x298>)
 8015f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f6a:	f7ea f9ad 	bl	80002c8 <__aeabi_dsub>
 8015f6e:	4622      	mov	r2, r4
 8015f70:	462b      	mov	r3, r5
 8015f72:	f7ea fb61 	bl	8000638 <__aeabi_dmul>
 8015f76:	a33c      	add	r3, pc, #240	; (adr r3, 8016068 <__ieee754_acos+0x2a0>)
 8015f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7c:	f7ea f9a6 	bl	80002cc <__adddf3>
 8015f80:	4622      	mov	r2, r4
 8015f82:	462b      	mov	r3, r5
 8015f84:	f7ea fb58 	bl	8000638 <__aeabi_dmul>
 8015f88:	a339      	add	r3, pc, #228	; (adr r3, 8016070 <__ieee754_acos+0x2a8>)
 8015f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f8e:	f7ea f99b 	bl	80002c8 <__aeabi_dsub>
 8015f92:	4622      	mov	r2, r4
 8015f94:	462b      	mov	r3, r5
 8015f96:	f7ea fb4f 	bl	8000638 <__aeabi_dmul>
 8015f9a:	a337      	add	r3, pc, #220	; (adr r3, 8016078 <__ieee754_acos+0x2b0>)
 8015f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fa0:	f7ea f994 	bl	80002cc <__adddf3>
 8015fa4:	4622      	mov	r2, r4
 8015fa6:	462b      	mov	r3, r5
 8015fa8:	f7ea fb46 	bl	8000638 <__aeabi_dmul>
 8015fac:	ec45 4b10 	vmov	d0, r4, r5
 8015fb0:	4680      	mov	r8, r0
 8015fb2:	4689      	mov	r9, r1
 8015fb4:	f001 f976 	bl	80172a4 <__ieee754_sqrt>
 8015fb8:	a331      	add	r3, pc, #196	; (adr r3, 8016080 <__ieee754_acos+0x2b8>)
 8015fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fbe:	4620      	mov	r0, r4
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	ec57 6b10 	vmov	r6, r7, d0
 8015fc6:	f7ea fb37 	bl	8000638 <__aeabi_dmul>
 8015fca:	a32f      	add	r3, pc, #188	; (adr r3, 8016088 <__ieee754_acos+0x2c0>)
 8015fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd0:	f7ea f97a 	bl	80002c8 <__aeabi_dsub>
 8015fd4:	4622      	mov	r2, r4
 8015fd6:	462b      	mov	r3, r5
 8015fd8:	f7ea fb2e 	bl	8000638 <__aeabi_dmul>
 8015fdc:	a32c      	add	r3, pc, #176	; (adr r3, 8016090 <__ieee754_acos+0x2c8>)
 8015fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe2:	f7ea f973 	bl	80002cc <__adddf3>
 8015fe6:	4622      	mov	r2, r4
 8015fe8:	462b      	mov	r3, r5
 8015fea:	f7ea fb25 	bl	8000638 <__aeabi_dmul>
 8015fee:	a32a      	add	r3, pc, #168	; (adr r3, 8016098 <__ieee754_acos+0x2d0>)
 8015ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff4:	f7ea f968 	bl	80002c8 <__aeabi_dsub>
 8015ff8:	4622      	mov	r2, r4
 8015ffa:	462b      	mov	r3, r5
 8015ffc:	f7ea fb1c 	bl	8000638 <__aeabi_dmul>
 8016000:	4b2e      	ldr	r3, [pc, #184]	; (80160bc <__ieee754_acos+0x2f4>)
 8016002:	2200      	movs	r2, #0
 8016004:	f7ea f962 	bl	80002cc <__adddf3>
 8016008:	4602      	mov	r2, r0
 801600a:	460b      	mov	r3, r1
 801600c:	4640      	mov	r0, r8
 801600e:	4649      	mov	r1, r9
 8016010:	f7ea fc3c 	bl	800088c <__aeabi_ddiv>
 8016014:	4632      	mov	r2, r6
 8016016:	463b      	mov	r3, r7
 8016018:	f7ea fb0e 	bl	8000638 <__aeabi_dmul>
 801601c:	a320      	add	r3, pc, #128	; (adr r3, 80160a0 <__ieee754_acos+0x2d8>)
 801601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016022:	f7ea f951 	bl	80002c8 <__aeabi_dsub>
 8016026:	4632      	mov	r2, r6
 8016028:	463b      	mov	r3, r7
 801602a:	f7ea f94f 	bl	80002cc <__adddf3>
 801602e:	4602      	mov	r2, r0
 8016030:	460b      	mov	r3, r1
 8016032:	f7ea f94b 	bl	80002cc <__adddf3>
 8016036:	4602      	mov	r2, r0
 8016038:	460b      	mov	r3, r1
 801603a:	a103      	add	r1, pc, #12	; (adr r1, 8016048 <__ieee754_acos+0x280>)
 801603c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016040:	e76f      	b.n	8015f22 <__ieee754_acos+0x15a>
 8016042:	bf00      	nop
 8016044:	f3af 8000 	nop.w
 8016048:	54442d18 	.word	0x54442d18
 801604c:	400921fb 	.word	0x400921fb
 8016050:	0dfdf709 	.word	0x0dfdf709
 8016054:	3f023de1 	.word	0x3f023de1
 8016058:	7501b288 	.word	0x7501b288
 801605c:	3f49efe0 	.word	0x3f49efe0
 8016060:	b5688f3b 	.word	0xb5688f3b
 8016064:	3fa48228 	.word	0x3fa48228
 8016068:	0e884455 	.word	0x0e884455
 801606c:	3fc9c155 	.word	0x3fc9c155
 8016070:	03eb6f7d 	.word	0x03eb6f7d
 8016074:	3fd4d612 	.word	0x3fd4d612
 8016078:	55555555 	.word	0x55555555
 801607c:	3fc55555 	.word	0x3fc55555
 8016080:	b12e9282 	.word	0xb12e9282
 8016084:	3fb3b8c5 	.word	0x3fb3b8c5
 8016088:	1b8d0159 	.word	0x1b8d0159
 801608c:	3fe6066c 	.word	0x3fe6066c
 8016090:	9c598ac8 	.word	0x9c598ac8
 8016094:	40002ae5 	.word	0x40002ae5
 8016098:	1c8a2d4b 	.word	0x1c8a2d4b
 801609c:	40033a27 	.word	0x40033a27
 80160a0:	33145c07 	.word	0x33145c07
 80160a4:	3c91a626 	.word	0x3c91a626
 80160a8:	54442d18 	.word	0x54442d18
 80160ac:	3ff921fb 	.word	0x3ff921fb
 80160b0:	3fefffff 	.word	0x3fefffff
 80160b4:	3fdfffff 	.word	0x3fdfffff
 80160b8:	3c600000 	.word	0x3c600000
 80160bc:	3ff00000 	.word	0x3ff00000
 80160c0:	3fe00000 	.word	0x3fe00000
 80160c4:	ee10 2a10 	vmov	r2, s0
 80160c8:	462b      	mov	r3, r5
 80160ca:	496d      	ldr	r1, [pc, #436]	; (8016280 <__ieee754_acos+0x4b8>)
 80160cc:	2000      	movs	r0, #0
 80160ce:	f7ea f8fb 	bl	80002c8 <__aeabi_dsub>
 80160d2:	4b6c      	ldr	r3, [pc, #432]	; (8016284 <__ieee754_acos+0x4bc>)
 80160d4:	2200      	movs	r2, #0
 80160d6:	f7ea faaf 	bl	8000638 <__aeabi_dmul>
 80160da:	4604      	mov	r4, r0
 80160dc:	460d      	mov	r5, r1
 80160de:	ec45 4b10 	vmov	d0, r4, r5
 80160e2:	f001 f8df 	bl	80172a4 <__ieee754_sqrt>
 80160e6:	a34e      	add	r3, pc, #312	; (adr r3, 8016220 <__ieee754_acos+0x458>)
 80160e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ec:	4620      	mov	r0, r4
 80160ee:	4629      	mov	r1, r5
 80160f0:	ec59 8b10 	vmov	r8, r9, d0
 80160f4:	f7ea faa0 	bl	8000638 <__aeabi_dmul>
 80160f8:	a34b      	add	r3, pc, #300	; (adr r3, 8016228 <__ieee754_acos+0x460>)
 80160fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fe:	f7ea f8e5 	bl	80002cc <__adddf3>
 8016102:	4622      	mov	r2, r4
 8016104:	462b      	mov	r3, r5
 8016106:	f7ea fa97 	bl	8000638 <__aeabi_dmul>
 801610a:	a349      	add	r3, pc, #292	; (adr r3, 8016230 <__ieee754_acos+0x468>)
 801610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016110:	f7ea f8da 	bl	80002c8 <__aeabi_dsub>
 8016114:	4622      	mov	r2, r4
 8016116:	462b      	mov	r3, r5
 8016118:	f7ea fa8e 	bl	8000638 <__aeabi_dmul>
 801611c:	a346      	add	r3, pc, #280	; (adr r3, 8016238 <__ieee754_acos+0x470>)
 801611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016122:	f7ea f8d3 	bl	80002cc <__adddf3>
 8016126:	4622      	mov	r2, r4
 8016128:	462b      	mov	r3, r5
 801612a:	f7ea fa85 	bl	8000638 <__aeabi_dmul>
 801612e:	a344      	add	r3, pc, #272	; (adr r3, 8016240 <__ieee754_acos+0x478>)
 8016130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016134:	f7ea f8c8 	bl	80002c8 <__aeabi_dsub>
 8016138:	4622      	mov	r2, r4
 801613a:	462b      	mov	r3, r5
 801613c:	f7ea fa7c 	bl	8000638 <__aeabi_dmul>
 8016140:	a341      	add	r3, pc, #260	; (adr r3, 8016248 <__ieee754_acos+0x480>)
 8016142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016146:	f7ea f8c1 	bl	80002cc <__adddf3>
 801614a:	4622      	mov	r2, r4
 801614c:	462b      	mov	r3, r5
 801614e:	f7ea fa73 	bl	8000638 <__aeabi_dmul>
 8016152:	a33f      	add	r3, pc, #252	; (adr r3, 8016250 <__ieee754_acos+0x488>)
 8016154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016158:	4682      	mov	sl, r0
 801615a:	468b      	mov	fp, r1
 801615c:	4620      	mov	r0, r4
 801615e:	4629      	mov	r1, r5
 8016160:	f7ea fa6a 	bl	8000638 <__aeabi_dmul>
 8016164:	a33c      	add	r3, pc, #240	; (adr r3, 8016258 <__ieee754_acos+0x490>)
 8016166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801616a:	f7ea f8ad 	bl	80002c8 <__aeabi_dsub>
 801616e:	4622      	mov	r2, r4
 8016170:	462b      	mov	r3, r5
 8016172:	f7ea fa61 	bl	8000638 <__aeabi_dmul>
 8016176:	a33a      	add	r3, pc, #232	; (adr r3, 8016260 <__ieee754_acos+0x498>)
 8016178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801617c:	f7ea f8a6 	bl	80002cc <__adddf3>
 8016180:	4622      	mov	r2, r4
 8016182:	462b      	mov	r3, r5
 8016184:	f7ea fa58 	bl	8000638 <__aeabi_dmul>
 8016188:	a337      	add	r3, pc, #220	; (adr r3, 8016268 <__ieee754_acos+0x4a0>)
 801618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618e:	f7ea f89b 	bl	80002c8 <__aeabi_dsub>
 8016192:	4622      	mov	r2, r4
 8016194:	462b      	mov	r3, r5
 8016196:	f7ea fa4f 	bl	8000638 <__aeabi_dmul>
 801619a:	4b39      	ldr	r3, [pc, #228]	; (8016280 <__ieee754_acos+0x4b8>)
 801619c:	2200      	movs	r2, #0
 801619e:	f7ea f895 	bl	80002cc <__adddf3>
 80161a2:	4602      	mov	r2, r0
 80161a4:	460b      	mov	r3, r1
 80161a6:	4650      	mov	r0, sl
 80161a8:	4659      	mov	r1, fp
 80161aa:	f7ea fb6f 	bl	800088c <__aeabi_ddiv>
 80161ae:	4642      	mov	r2, r8
 80161b0:	464b      	mov	r3, r9
 80161b2:	f7ea fa41 	bl	8000638 <__aeabi_dmul>
 80161b6:	2600      	movs	r6, #0
 80161b8:	4682      	mov	sl, r0
 80161ba:	468b      	mov	fp, r1
 80161bc:	4632      	mov	r2, r6
 80161be:	464b      	mov	r3, r9
 80161c0:	4630      	mov	r0, r6
 80161c2:	4649      	mov	r1, r9
 80161c4:	f7ea fa38 	bl	8000638 <__aeabi_dmul>
 80161c8:	4602      	mov	r2, r0
 80161ca:	460b      	mov	r3, r1
 80161cc:	4620      	mov	r0, r4
 80161ce:	4629      	mov	r1, r5
 80161d0:	f7ea f87a 	bl	80002c8 <__aeabi_dsub>
 80161d4:	4632      	mov	r2, r6
 80161d6:	4604      	mov	r4, r0
 80161d8:	460d      	mov	r5, r1
 80161da:	464b      	mov	r3, r9
 80161dc:	4640      	mov	r0, r8
 80161de:	4649      	mov	r1, r9
 80161e0:	f7ea f874 	bl	80002cc <__adddf3>
 80161e4:	4602      	mov	r2, r0
 80161e6:	460b      	mov	r3, r1
 80161e8:	4620      	mov	r0, r4
 80161ea:	4629      	mov	r1, r5
 80161ec:	f7ea fb4e 	bl	800088c <__aeabi_ddiv>
 80161f0:	4602      	mov	r2, r0
 80161f2:	460b      	mov	r3, r1
 80161f4:	4650      	mov	r0, sl
 80161f6:	4659      	mov	r1, fp
 80161f8:	f7ea f868 	bl	80002cc <__adddf3>
 80161fc:	4632      	mov	r2, r6
 80161fe:	464b      	mov	r3, r9
 8016200:	f7ea f864 	bl	80002cc <__adddf3>
 8016204:	4602      	mov	r2, r0
 8016206:	460b      	mov	r3, r1
 8016208:	f7ea f860 	bl	80002cc <__adddf3>
 801620c:	e5fe      	b.n	8015e0c <__ieee754_acos+0x44>
 801620e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8016270 <__ieee754_acos+0x4a8>
 8016212:	e5ed      	b.n	8015df0 <__ieee754_acos+0x28>
 8016214:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8016278 <__ieee754_acos+0x4b0>
 8016218:	e5ea      	b.n	8015df0 <__ieee754_acos+0x28>
 801621a:	bf00      	nop
 801621c:	f3af 8000 	nop.w
 8016220:	0dfdf709 	.word	0x0dfdf709
 8016224:	3f023de1 	.word	0x3f023de1
 8016228:	7501b288 	.word	0x7501b288
 801622c:	3f49efe0 	.word	0x3f49efe0
 8016230:	b5688f3b 	.word	0xb5688f3b
 8016234:	3fa48228 	.word	0x3fa48228
 8016238:	0e884455 	.word	0x0e884455
 801623c:	3fc9c155 	.word	0x3fc9c155
 8016240:	03eb6f7d 	.word	0x03eb6f7d
 8016244:	3fd4d612 	.word	0x3fd4d612
 8016248:	55555555 	.word	0x55555555
 801624c:	3fc55555 	.word	0x3fc55555
 8016250:	b12e9282 	.word	0xb12e9282
 8016254:	3fb3b8c5 	.word	0x3fb3b8c5
 8016258:	1b8d0159 	.word	0x1b8d0159
 801625c:	3fe6066c 	.word	0x3fe6066c
 8016260:	9c598ac8 	.word	0x9c598ac8
 8016264:	40002ae5 	.word	0x40002ae5
 8016268:	1c8a2d4b 	.word	0x1c8a2d4b
 801626c:	40033a27 	.word	0x40033a27
	...
 8016278:	54442d18 	.word	0x54442d18
 801627c:	3ff921fb 	.word	0x3ff921fb
 8016280:	3ff00000 	.word	0x3ff00000
 8016284:	3fe00000 	.word	0x3fe00000

08016288 <__ieee754_asin>:
 8016288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801628c:	ed2d 8b04 	vpush	{d8-d9}
 8016290:	ec55 4b10 	vmov	r4, r5, d0
 8016294:	4bcc      	ldr	r3, [pc, #816]	; (80165c8 <__ieee754_asin+0x340>)
 8016296:	b083      	sub	sp, #12
 8016298:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801629c:	4598      	cmp	r8, r3
 801629e:	9501      	str	r5, [sp, #4]
 80162a0:	dd35      	ble.n	801630e <__ieee754_asin+0x86>
 80162a2:	ee10 3a10 	vmov	r3, s0
 80162a6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80162aa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80162ae:	ea58 0303 	orrs.w	r3, r8, r3
 80162b2:	d117      	bne.n	80162e4 <__ieee754_asin+0x5c>
 80162b4:	a3aa      	add	r3, pc, #680	; (adr r3, 8016560 <__ieee754_asin+0x2d8>)
 80162b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ba:	ee10 0a10 	vmov	r0, s0
 80162be:	4629      	mov	r1, r5
 80162c0:	f7ea f9ba 	bl	8000638 <__aeabi_dmul>
 80162c4:	a3a8      	add	r3, pc, #672	; (adr r3, 8016568 <__ieee754_asin+0x2e0>)
 80162c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ca:	4606      	mov	r6, r0
 80162cc:	460f      	mov	r7, r1
 80162ce:	4620      	mov	r0, r4
 80162d0:	4629      	mov	r1, r5
 80162d2:	f7ea f9b1 	bl	8000638 <__aeabi_dmul>
 80162d6:	4602      	mov	r2, r0
 80162d8:	460b      	mov	r3, r1
 80162da:	4630      	mov	r0, r6
 80162dc:	4639      	mov	r1, r7
 80162de:	f7e9 fff5 	bl	80002cc <__adddf3>
 80162e2:	e00b      	b.n	80162fc <__ieee754_asin+0x74>
 80162e4:	ee10 2a10 	vmov	r2, s0
 80162e8:	462b      	mov	r3, r5
 80162ea:	ee10 0a10 	vmov	r0, s0
 80162ee:	4629      	mov	r1, r5
 80162f0:	f7e9 ffea 	bl	80002c8 <__aeabi_dsub>
 80162f4:	4602      	mov	r2, r0
 80162f6:	460b      	mov	r3, r1
 80162f8:	f7ea fac8 	bl	800088c <__aeabi_ddiv>
 80162fc:	4604      	mov	r4, r0
 80162fe:	460d      	mov	r5, r1
 8016300:	ec45 4b10 	vmov	d0, r4, r5
 8016304:	b003      	add	sp, #12
 8016306:	ecbd 8b04 	vpop	{d8-d9}
 801630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801630e:	4baf      	ldr	r3, [pc, #700]	; (80165cc <__ieee754_asin+0x344>)
 8016310:	4598      	cmp	r8, r3
 8016312:	dc11      	bgt.n	8016338 <__ieee754_asin+0xb0>
 8016314:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016318:	f280 80ae 	bge.w	8016478 <__ieee754_asin+0x1f0>
 801631c:	a394      	add	r3, pc, #592	; (adr r3, 8016570 <__ieee754_asin+0x2e8>)
 801631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016322:	ee10 0a10 	vmov	r0, s0
 8016326:	4629      	mov	r1, r5
 8016328:	f7e9 ffd0 	bl	80002cc <__adddf3>
 801632c:	4ba8      	ldr	r3, [pc, #672]	; (80165d0 <__ieee754_asin+0x348>)
 801632e:	2200      	movs	r2, #0
 8016330:	f7ea fc12 	bl	8000b58 <__aeabi_dcmpgt>
 8016334:	2800      	cmp	r0, #0
 8016336:	d1e3      	bne.n	8016300 <__ieee754_asin+0x78>
 8016338:	ec45 4b10 	vmov	d0, r4, r5
 801633c:	f001 fa38 	bl	80177b0 <fabs>
 8016340:	49a3      	ldr	r1, [pc, #652]	; (80165d0 <__ieee754_asin+0x348>)
 8016342:	ec53 2b10 	vmov	r2, r3, d0
 8016346:	2000      	movs	r0, #0
 8016348:	f7e9 ffbe 	bl	80002c8 <__aeabi_dsub>
 801634c:	4ba1      	ldr	r3, [pc, #644]	; (80165d4 <__ieee754_asin+0x34c>)
 801634e:	2200      	movs	r2, #0
 8016350:	f7ea f972 	bl	8000638 <__aeabi_dmul>
 8016354:	a388      	add	r3, pc, #544	; (adr r3, 8016578 <__ieee754_asin+0x2f0>)
 8016356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635a:	4604      	mov	r4, r0
 801635c:	460d      	mov	r5, r1
 801635e:	f7ea f96b 	bl	8000638 <__aeabi_dmul>
 8016362:	a387      	add	r3, pc, #540	; (adr r3, 8016580 <__ieee754_asin+0x2f8>)
 8016364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016368:	f7e9 ffb0 	bl	80002cc <__adddf3>
 801636c:	4622      	mov	r2, r4
 801636e:	462b      	mov	r3, r5
 8016370:	f7ea f962 	bl	8000638 <__aeabi_dmul>
 8016374:	a384      	add	r3, pc, #528	; (adr r3, 8016588 <__ieee754_asin+0x300>)
 8016376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637a:	f7e9 ffa5 	bl	80002c8 <__aeabi_dsub>
 801637e:	4622      	mov	r2, r4
 8016380:	462b      	mov	r3, r5
 8016382:	f7ea f959 	bl	8000638 <__aeabi_dmul>
 8016386:	a382      	add	r3, pc, #520	; (adr r3, 8016590 <__ieee754_asin+0x308>)
 8016388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638c:	f7e9 ff9e 	bl	80002cc <__adddf3>
 8016390:	4622      	mov	r2, r4
 8016392:	462b      	mov	r3, r5
 8016394:	f7ea f950 	bl	8000638 <__aeabi_dmul>
 8016398:	a37f      	add	r3, pc, #508	; (adr r3, 8016598 <__ieee754_asin+0x310>)
 801639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639e:	f7e9 ff93 	bl	80002c8 <__aeabi_dsub>
 80163a2:	4622      	mov	r2, r4
 80163a4:	462b      	mov	r3, r5
 80163a6:	f7ea f947 	bl	8000638 <__aeabi_dmul>
 80163aa:	a37d      	add	r3, pc, #500	; (adr r3, 80165a0 <__ieee754_asin+0x318>)
 80163ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b0:	f7e9 ff8c 	bl	80002cc <__adddf3>
 80163b4:	4622      	mov	r2, r4
 80163b6:	462b      	mov	r3, r5
 80163b8:	f7ea f93e 	bl	8000638 <__aeabi_dmul>
 80163bc:	a37a      	add	r3, pc, #488	; (adr r3, 80165a8 <__ieee754_asin+0x320>)
 80163be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c2:	ec41 0b18 	vmov	d8, r0, r1
 80163c6:	4620      	mov	r0, r4
 80163c8:	4629      	mov	r1, r5
 80163ca:	f7ea f935 	bl	8000638 <__aeabi_dmul>
 80163ce:	a378      	add	r3, pc, #480	; (adr r3, 80165b0 <__ieee754_asin+0x328>)
 80163d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d4:	f7e9 ff78 	bl	80002c8 <__aeabi_dsub>
 80163d8:	4622      	mov	r2, r4
 80163da:	462b      	mov	r3, r5
 80163dc:	f7ea f92c 	bl	8000638 <__aeabi_dmul>
 80163e0:	a375      	add	r3, pc, #468	; (adr r3, 80165b8 <__ieee754_asin+0x330>)
 80163e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e6:	f7e9 ff71 	bl	80002cc <__adddf3>
 80163ea:	4622      	mov	r2, r4
 80163ec:	462b      	mov	r3, r5
 80163ee:	f7ea f923 	bl	8000638 <__aeabi_dmul>
 80163f2:	a373      	add	r3, pc, #460	; (adr r3, 80165c0 <__ieee754_asin+0x338>)
 80163f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f8:	f7e9 ff66 	bl	80002c8 <__aeabi_dsub>
 80163fc:	4622      	mov	r2, r4
 80163fe:	462b      	mov	r3, r5
 8016400:	f7ea f91a 	bl	8000638 <__aeabi_dmul>
 8016404:	4b72      	ldr	r3, [pc, #456]	; (80165d0 <__ieee754_asin+0x348>)
 8016406:	2200      	movs	r2, #0
 8016408:	f7e9 ff60 	bl	80002cc <__adddf3>
 801640c:	ec45 4b10 	vmov	d0, r4, r5
 8016410:	4606      	mov	r6, r0
 8016412:	460f      	mov	r7, r1
 8016414:	f000 ff46 	bl	80172a4 <__ieee754_sqrt>
 8016418:	4b6f      	ldr	r3, [pc, #444]	; (80165d8 <__ieee754_asin+0x350>)
 801641a:	4598      	cmp	r8, r3
 801641c:	ec5b ab10 	vmov	sl, fp, d0
 8016420:	f340 80dc 	ble.w	80165dc <__ieee754_asin+0x354>
 8016424:	4632      	mov	r2, r6
 8016426:	463b      	mov	r3, r7
 8016428:	ec51 0b18 	vmov	r0, r1, d8
 801642c:	f7ea fa2e 	bl	800088c <__aeabi_ddiv>
 8016430:	4652      	mov	r2, sl
 8016432:	465b      	mov	r3, fp
 8016434:	f7ea f900 	bl	8000638 <__aeabi_dmul>
 8016438:	4652      	mov	r2, sl
 801643a:	465b      	mov	r3, fp
 801643c:	f7e9 ff46 	bl	80002cc <__adddf3>
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	f7e9 ff42 	bl	80002cc <__adddf3>
 8016448:	a347      	add	r3, pc, #284	; (adr r3, 8016568 <__ieee754_asin+0x2e0>)
 801644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644e:	f7e9 ff3b 	bl	80002c8 <__aeabi_dsub>
 8016452:	4602      	mov	r2, r0
 8016454:	460b      	mov	r3, r1
 8016456:	a142      	add	r1, pc, #264	; (adr r1, 8016560 <__ieee754_asin+0x2d8>)
 8016458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801645c:	f7e9 ff34 	bl	80002c8 <__aeabi_dsub>
 8016460:	9b01      	ldr	r3, [sp, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	bfdc      	itt	le
 8016466:	4602      	movle	r2, r0
 8016468:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801646c:	4604      	mov	r4, r0
 801646e:	460d      	mov	r5, r1
 8016470:	bfdc      	itt	le
 8016472:	4614      	movle	r4, r2
 8016474:	461d      	movle	r5, r3
 8016476:	e743      	b.n	8016300 <__ieee754_asin+0x78>
 8016478:	ee10 2a10 	vmov	r2, s0
 801647c:	ee10 0a10 	vmov	r0, s0
 8016480:	462b      	mov	r3, r5
 8016482:	4629      	mov	r1, r5
 8016484:	f7ea f8d8 	bl	8000638 <__aeabi_dmul>
 8016488:	a33b      	add	r3, pc, #236	; (adr r3, 8016578 <__ieee754_asin+0x2f0>)
 801648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801648e:	4606      	mov	r6, r0
 8016490:	460f      	mov	r7, r1
 8016492:	f7ea f8d1 	bl	8000638 <__aeabi_dmul>
 8016496:	a33a      	add	r3, pc, #232	; (adr r3, 8016580 <__ieee754_asin+0x2f8>)
 8016498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801649c:	f7e9 ff16 	bl	80002cc <__adddf3>
 80164a0:	4632      	mov	r2, r6
 80164a2:	463b      	mov	r3, r7
 80164a4:	f7ea f8c8 	bl	8000638 <__aeabi_dmul>
 80164a8:	a337      	add	r3, pc, #220	; (adr r3, 8016588 <__ieee754_asin+0x300>)
 80164aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ae:	f7e9 ff0b 	bl	80002c8 <__aeabi_dsub>
 80164b2:	4632      	mov	r2, r6
 80164b4:	463b      	mov	r3, r7
 80164b6:	f7ea f8bf 	bl	8000638 <__aeabi_dmul>
 80164ba:	a335      	add	r3, pc, #212	; (adr r3, 8016590 <__ieee754_asin+0x308>)
 80164bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c0:	f7e9 ff04 	bl	80002cc <__adddf3>
 80164c4:	4632      	mov	r2, r6
 80164c6:	463b      	mov	r3, r7
 80164c8:	f7ea f8b6 	bl	8000638 <__aeabi_dmul>
 80164cc:	a332      	add	r3, pc, #200	; (adr r3, 8016598 <__ieee754_asin+0x310>)
 80164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d2:	f7e9 fef9 	bl	80002c8 <__aeabi_dsub>
 80164d6:	4632      	mov	r2, r6
 80164d8:	463b      	mov	r3, r7
 80164da:	f7ea f8ad 	bl	8000638 <__aeabi_dmul>
 80164de:	a330      	add	r3, pc, #192	; (adr r3, 80165a0 <__ieee754_asin+0x318>)
 80164e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e4:	f7e9 fef2 	bl	80002cc <__adddf3>
 80164e8:	4632      	mov	r2, r6
 80164ea:	463b      	mov	r3, r7
 80164ec:	f7ea f8a4 	bl	8000638 <__aeabi_dmul>
 80164f0:	a32d      	add	r3, pc, #180	; (adr r3, 80165a8 <__ieee754_asin+0x320>)
 80164f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f6:	4680      	mov	r8, r0
 80164f8:	4689      	mov	r9, r1
 80164fa:	4630      	mov	r0, r6
 80164fc:	4639      	mov	r1, r7
 80164fe:	f7ea f89b 	bl	8000638 <__aeabi_dmul>
 8016502:	a32b      	add	r3, pc, #172	; (adr r3, 80165b0 <__ieee754_asin+0x328>)
 8016504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016508:	f7e9 fede 	bl	80002c8 <__aeabi_dsub>
 801650c:	4632      	mov	r2, r6
 801650e:	463b      	mov	r3, r7
 8016510:	f7ea f892 	bl	8000638 <__aeabi_dmul>
 8016514:	a328      	add	r3, pc, #160	; (adr r3, 80165b8 <__ieee754_asin+0x330>)
 8016516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801651a:	f7e9 fed7 	bl	80002cc <__adddf3>
 801651e:	4632      	mov	r2, r6
 8016520:	463b      	mov	r3, r7
 8016522:	f7ea f889 	bl	8000638 <__aeabi_dmul>
 8016526:	a326      	add	r3, pc, #152	; (adr r3, 80165c0 <__ieee754_asin+0x338>)
 8016528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652c:	f7e9 fecc 	bl	80002c8 <__aeabi_dsub>
 8016530:	4632      	mov	r2, r6
 8016532:	463b      	mov	r3, r7
 8016534:	f7ea f880 	bl	8000638 <__aeabi_dmul>
 8016538:	4b25      	ldr	r3, [pc, #148]	; (80165d0 <__ieee754_asin+0x348>)
 801653a:	2200      	movs	r2, #0
 801653c:	f7e9 fec6 	bl	80002cc <__adddf3>
 8016540:	4602      	mov	r2, r0
 8016542:	460b      	mov	r3, r1
 8016544:	4640      	mov	r0, r8
 8016546:	4649      	mov	r1, r9
 8016548:	f7ea f9a0 	bl	800088c <__aeabi_ddiv>
 801654c:	4622      	mov	r2, r4
 801654e:	462b      	mov	r3, r5
 8016550:	f7ea f872 	bl	8000638 <__aeabi_dmul>
 8016554:	4602      	mov	r2, r0
 8016556:	460b      	mov	r3, r1
 8016558:	4620      	mov	r0, r4
 801655a:	4629      	mov	r1, r5
 801655c:	e6bf      	b.n	80162de <__ieee754_asin+0x56>
 801655e:	bf00      	nop
 8016560:	54442d18 	.word	0x54442d18
 8016564:	3ff921fb 	.word	0x3ff921fb
 8016568:	33145c07 	.word	0x33145c07
 801656c:	3c91a626 	.word	0x3c91a626
 8016570:	8800759c 	.word	0x8800759c
 8016574:	7e37e43c 	.word	0x7e37e43c
 8016578:	0dfdf709 	.word	0x0dfdf709
 801657c:	3f023de1 	.word	0x3f023de1
 8016580:	7501b288 	.word	0x7501b288
 8016584:	3f49efe0 	.word	0x3f49efe0
 8016588:	b5688f3b 	.word	0xb5688f3b
 801658c:	3fa48228 	.word	0x3fa48228
 8016590:	0e884455 	.word	0x0e884455
 8016594:	3fc9c155 	.word	0x3fc9c155
 8016598:	03eb6f7d 	.word	0x03eb6f7d
 801659c:	3fd4d612 	.word	0x3fd4d612
 80165a0:	55555555 	.word	0x55555555
 80165a4:	3fc55555 	.word	0x3fc55555
 80165a8:	b12e9282 	.word	0xb12e9282
 80165ac:	3fb3b8c5 	.word	0x3fb3b8c5
 80165b0:	1b8d0159 	.word	0x1b8d0159
 80165b4:	3fe6066c 	.word	0x3fe6066c
 80165b8:	9c598ac8 	.word	0x9c598ac8
 80165bc:	40002ae5 	.word	0x40002ae5
 80165c0:	1c8a2d4b 	.word	0x1c8a2d4b
 80165c4:	40033a27 	.word	0x40033a27
 80165c8:	3fefffff 	.word	0x3fefffff
 80165cc:	3fdfffff 	.word	0x3fdfffff
 80165d0:	3ff00000 	.word	0x3ff00000
 80165d4:	3fe00000 	.word	0x3fe00000
 80165d8:	3fef3332 	.word	0x3fef3332
 80165dc:	ee10 2a10 	vmov	r2, s0
 80165e0:	ee10 0a10 	vmov	r0, s0
 80165e4:	465b      	mov	r3, fp
 80165e6:	4659      	mov	r1, fp
 80165e8:	f7e9 fe70 	bl	80002cc <__adddf3>
 80165ec:	4632      	mov	r2, r6
 80165ee:	463b      	mov	r3, r7
 80165f0:	ec41 0b19 	vmov	d9, r0, r1
 80165f4:	ec51 0b18 	vmov	r0, r1, d8
 80165f8:	f7ea f948 	bl	800088c <__aeabi_ddiv>
 80165fc:	4602      	mov	r2, r0
 80165fe:	460b      	mov	r3, r1
 8016600:	ec51 0b19 	vmov	r0, r1, d9
 8016604:	f7ea f818 	bl	8000638 <__aeabi_dmul>
 8016608:	f04f 0800 	mov.w	r8, #0
 801660c:	4606      	mov	r6, r0
 801660e:	460f      	mov	r7, r1
 8016610:	4642      	mov	r2, r8
 8016612:	465b      	mov	r3, fp
 8016614:	4640      	mov	r0, r8
 8016616:	4659      	mov	r1, fp
 8016618:	f7ea f80e 	bl	8000638 <__aeabi_dmul>
 801661c:	4602      	mov	r2, r0
 801661e:	460b      	mov	r3, r1
 8016620:	4620      	mov	r0, r4
 8016622:	4629      	mov	r1, r5
 8016624:	f7e9 fe50 	bl	80002c8 <__aeabi_dsub>
 8016628:	4642      	mov	r2, r8
 801662a:	4604      	mov	r4, r0
 801662c:	460d      	mov	r5, r1
 801662e:	465b      	mov	r3, fp
 8016630:	4650      	mov	r0, sl
 8016632:	4659      	mov	r1, fp
 8016634:	f7e9 fe4a 	bl	80002cc <__adddf3>
 8016638:	4602      	mov	r2, r0
 801663a:	460b      	mov	r3, r1
 801663c:	4620      	mov	r0, r4
 801663e:	4629      	mov	r1, r5
 8016640:	f7ea f924 	bl	800088c <__aeabi_ddiv>
 8016644:	4602      	mov	r2, r0
 8016646:	460b      	mov	r3, r1
 8016648:	f7e9 fe40 	bl	80002cc <__adddf3>
 801664c:	4602      	mov	r2, r0
 801664e:	460b      	mov	r3, r1
 8016650:	a113      	add	r1, pc, #76	; (adr r1, 80166a0 <__ieee754_asin+0x418>)
 8016652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016656:	f7e9 fe37 	bl	80002c8 <__aeabi_dsub>
 801665a:	4602      	mov	r2, r0
 801665c:	460b      	mov	r3, r1
 801665e:	4630      	mov	r0, r6
 8016660:	4639      	mov	r1, r7
 8016662:	f7e9 fe31 	bl	80002c8 <__aeabi_dsub>
 8016666:	4642      	mov	r2, r8
 8016668:	4604      	mov	r4, r0
 801666a:	460d      	mov	r5, r1
 801666c:	465b      	mov	r3, fp
 801666e:	4640      	mov	r0, r8
 8016670:	4659      	mov	r1, fp
 8016672:	f7e9 fe2b 	bl	80002cc <__adddf3>
 8016676:	4602      	mov	r2, r0
 8016678:	460b      	mov	r3, r1
 801667a:	a10b      	add	r1, pc, #44	; (adr r1, 80166a8 <__ieee754_asin+0x420>)
 801667c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016680:	f7e9 fe22 	bl	80002c8 <__aeabi_dsub>
 8016684:	4602      	mov	r2, r0
 8016686:	460b      	mov	r3, r1
 8016688:	4620      	mov	r0, r4
 801668a:	4629      	mov	r1, r5
 801668c:	f7e9 fe1c 	bl	80002c8 <__aeabi_dsub>
 8016690:	4602      	mov	r2, r0
 8016692:	460b      	mov	r3, r1
 8016694:	a104      	add	r1, pc, #16	; (adr r1, 80166a8 <__ieee754_asin+0x420>)
 8016696:	e9d1 0100 	ldrd	r0, r1, [r1]
 801669a:	e6df      	b.n	801645c <__ieee754_asin+0x1d4>
 801669c:	f3af 8000 	nop.w
 80166a0:	33145c07 	.word	0x33145c07
 80166a4:	3c91a626 	.word	0x3c91a626
 80166a8:	54442d18 	.word	0x54442d18
 80166ac:	3fe921fb 	.word	0x3fe921fb

080166b0 <__ieee754_atan2>:
 80166b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166b4:	ec57 6b11 	vmov	r6, r7, d1
 80166b8:	4273      	negs	r3, r6
 80166ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8016840 <__ieee754_atan2+0x190>
 80166be:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80166c2:	4333      	orrs	r3, r6
 80166c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80166c8:	4573      	cmp	r3, lr
 80166ca:	ec51 0b10 	vmov	r0, r1, d0
 80166ce:	ee11 8a10 	vmov	r8, s2
 80166d2:	d80a      	bhi.n	80166ea <__ieee754_atan2+0x3a>
 80166d4:	4244      	negs	r4, r0
 80166d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80166da:	4304      	orrs	r4, r0
 80166dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80166e0:	4574      	cmp	r4, lr
 80166e2:	ee10 9a10 	vmov	r9, s0
 80166e6:	468c      	mov	ip, r1
 80166e8:	d907      	bls.n	80166fa <__ieee754_atan2+0x4a>
 80166ea:	4632      	mov	r2, r6
 80166ec:	463b      	mov	r3, r7
 80166ee:	f7e9 fded 	bl	80002cc <__adddf3>
 80166f2:	ec41 0b10 	vmov	d0, r0, r1
 80166f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80166fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016702:	4334      	orrs	r4, r6
 8016704:	d103      	bne.n	801670e <__ieee754_atan2+0x5e>
 8016706:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801670a:	f000 beb1 	b.w	8017470 <atan>
 801670e:	17bc      	asrs	r4, r7, #30
 8016710:	f004 0402 	and.w	r4, r4, #2
 8016714:	ea53 0909 	orrs.w	r9, r3, r9
 8016718:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801671c:	d107      	bne.n	801672e <__ieee754_atan2+0x7e>
 801671e:	2c02      	cmp	r4, #2
 8016720:	d060      	beq.n	80167e4 <__ieee754_atan2+0x134>
 8016722:	2c03      	cmp	r4, #3
 8016724:	d1e5      	bne.n	80166f2 <__ieee754_atan2+0x42>
 8016726:	a142      	add	r1, pc, #264	; (adr r1, 8016830 <__ieee754_atan2+0x180>)
 8016728:	e9d1 0100 	ldrd	r0, r1, [r1]
 801672c:	e7e1      	b.n	80166f2 <__ieee754_atan2+0x42>
 801672e:	ea52 0808 	orrs.w	r8, r2, r8
 8016732:	d106      	bne.n	8016742 <__ieee754_atan2+0x92>
 8016734:	f1bc 0f00 	cmp.w	ip, #0
 8016738:	da5f      	bge.n	80167fa <__ieee754_atan2+0x14a>
 801673a:	a13f      	add	r1, pc, #252	; (adr r1, 8016838 <__ieee754_atan2+0x188>)
 801673c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016740:	e7d7      	b.n	80166f2 <__ieee754_atan2+0x42>
 8016742:	4572      	cmp	r2, lr
 8016744:	d10f      	bne.n	8016766 <__ieee754_atan2+0xb6>
 8016746:	4293      	cmp	r3, r2
 8016748:	f104 34ff 	add.w	r4, r4, #4294967295
 801674c:	d107      	bne.n	801675e <__ieee754_atan2+0xae>
 801674e:	2c02      	cmp	r4, #2
 8016750:	d84c      	bhi.n	80167ec <__ieee754_atan2+0x13c>
 8016752:	4b35      	ldr	r3, [pc, #212]	; (8016828 <__ieee754_atan2+0x178>)
 8016754:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016758:	e9d4 0100 	ldrd	r0, r1, [r4]
 801675c:	e7c9      	b.n	80166f2 <__ieee754_atan2+0x42>
 801675e:	2c02      	cmp	r4, #2
 8016760:	d848      	bhi.n	80167f4 <__ieee754_atan2+0x144>
 8016762:	4b32      	ldr	r3, [pc, #200]	; (801682c <__ieee754_atan2+0x17c>)
 8016764:	e7f6      	b.n	8016754 <__ieee754_atan2+0xa4>
 8016766:	4573      	cmp	r3, lr
 8016768:	d0e4      	beq.n	8016734 <__ieee754_atan2+0x84>
 801676a:	1a9b      	subs	r3, r3, r2
 801676c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016770:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016774:	da1e      	bge.n	80167b4 <__ieee754_atan2+0x104>
 8016776:	2f00      	cmp	r7, #0
 8016778:	da01      	bge.n	801677e <__ieee754_atan2+0xce>
 801677a:	323c      	adds	r2, #60	; 0x3c
 801677c:	db1e      	blt.n	80167bc <__ieee754_atan2+0x10c>
 801677e:	4632      	mov	r2, r6
 8016780:	463b      	mov	r3, r7
 8016782:	f7ea f883 	bl	800088c <__aeabi_ddiv>
 8016786:	ec41 0b10 	vmov	d0, r0, r1
 801678a:	f001 f811 	bl	80177b0 <fabs>
 801678e:	f000 fe6f 	bl	8017470 <atan>
 8016792:	ec51 0b10 	vmov	r0, r1, d0
 8016796:	2c01      	cmp	r4, #1
 8016798:	d013      	beq.n	80167c2 <__ieee754_atan2+0x112>
 801679a:	2c02      	cmp	r4, #2
 801679c:	d015      	beq.n	80167ca <__ieee754_atan2+0x11a>
 801679e:	2c00      	cmp	r4, #0
 80167a0:	d0a7      	beq.n	80166f2 <__ieee754_atan2+0x42>
 80167a2:	a319      	add	r3, pc, #100	; (adr r3, 8016808 <__ieee754_atan2+0x158>)
 80167a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a8:	f7e9 fd8e 	bl	80002c8 <__aeabi_dsub>
 80167ac:	a318      	add	r3, pc, #96	; (adr r3, 8016810 <__ieee754_atan2+0x160>)
 80167ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b2:	e014      	b.n	80167de <__ieee754_atan2+0x12e>
 80167b4:	a118      	add	r1, pc, #96	; (adr r1, 8016818 <__ieee754_atan2+0x168>)
 80167b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167ba:	e7ec      	b.n	8016796 <__ieee754_atan2+0xe6>
 80167bc:	2000      	movs	r0, #0
 80167be:	2100      	movs	r1, #0
 80167c0:	e7e9      	b.n	8016796 <__ieee754_atan2+0xe6>
 80167c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167c6:	4619      	mov	r1, r3
 80167c8:	e793      	b.n	80166f2 <__ieee754_atan2+0x42>
 80167ca:	a30f      	add	r3, pc, #60	; (adr r3, 8016808 <__ieee754_atan2+0x158>)
 80167cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d0:	f7e9 fd7a 	bl	80002c8 <__aeabi_dsub>
 80167d4:	4602      	mov	r2, r0
 80167d6:	460b      	mov	r3, r1
 80167d8:	a10d      	add	r1, pc, #52	; (adr r1, 8016810 <__ieee754_atan2+0x160>)
 80167da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167de:	f7e9 fd73 	bl	80002c8 <__aeabi_dsub>
 80167e2:	e786      	b.n	80166f2 <__ieee754_atan2+0x42>
 80167e4:	a10a      	add	r1, pc, #40	; (adr r1, 8016810 <__ieee754_atan2+0x160>)
 80167e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167ea:	e782      	b.n	80166f2 <__ieee754_atan2+0x42>
 80167ec:	a10c      	add	r1, pc, #48	; (adr r1, 8016820 <__ieee754_atan2+0x170>)
 80167ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167f2:	e77e      	b.n	80166f2 <__ieee754_atan2+0x42>
 80167f4:	2000      	movs	r0, #0
 80167f6:	2100      	movs	r1, #0
 80167f8:	e77b      	b.n	80166f2 <__ieee754_atan2+0x42>
 80167fa:	a107      	add	r1, pc, #28	; (adr r1, 8016818 <__ieee754_atan2+0x168>)
 80167fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016800:	e777      	b.n	80166f2 <__ieee754_atan2+0x42>
 8016802:	bf00      	nop
 8016804:	f3af 8000 	nop.w
 8016808:	33145c07 	.word	0x33145c07
 801680c:	3ca1a626 	.word	0x3ca1a626
 8016810:	54442d18 	.word	0x54442d18
 8016814:	400921fb 	.word	0x400921fb
 8016818:	54442d18 	.word	0x54442d18
 801681c:	3ff921fb 	.word	0x3ff921fb
 8016820:	54442d18 	.word	0x54442d18
 8016824:	3fe921fb 	.word	0x3fe921fb
 8016828:	08018528 	.word	0x08018528
 801682c:	08018540 	.word	0x08018540
 8016830:	54442d18 	.word	0x54442d18
 8016834:	c00921fb 	.word	0xc00921fb
 8016838:	54442d18 	.word	0x54442d18
 801683c:	bff921fb 	.word	0xbff921fb
 8016840:	7ff00000 	.word	0x7ff00000
 8016844:	00000000 	.word	0x00000000

08016848 <__ieee754_pow>:
 8016848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684c:	ed2d 8b06 	vpush	{d8-d10}
 8016850:	b089      	sub	sp, #36	; 0x24
 8016852:	ed8d 1b00 	vstr	d1, [sp]
 8016856:	e9dd 2900 	ldrd	r2, r9, [sp]
 801685a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801685e:	ea58 0102 	orrs.w	r1, r8, r2
 8016862:	ec57 6b10 	vmov	r6, r7, d0
 8016866:	d115      	bne.n	8016894 <__ieee754_pow+0x4c>
 8016868:	19b3      	adds	r3, r6, r6
 801686a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801686e:	4152      	adcs	r2, r2
 8016870:	4299      	cmp	r1, r3
 8016872:	4b89      	ldr	r3, [pc, #548]	; (8016a98 <__ieee754_pow+0x250>)
 8016874:	4193      	sbcs	r3, r2
 8016876:	f080 84d2 	bcs.w	801721e <__ieee754_pow+0x9d6>
 801687a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801687e:	4630      	mov	r0, r6
 8016880:	4639      	mov	r1, r7
 8016882:	f7e9 fd23 	bl	80002cc <__adddf3>
 8016886:	ec41 0b10 	vmov	d0, r0, r1
 801688a:	b009      	add	sp, #36	; 0x24
 801688c:	ecbd 8b06 	vpop	{d8-d10}
 8016890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016894:	4b81      	ldr	r3, [pc, #516]	; (8016a9c <__ieee754_pow+0x254>)
 8016896:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801689a:	429c      	cmp	r4, r3
 801689c:	ee10 aa10 	vmov	sl, s0
 80168a0:	463d      	mov	r5, r7
 80168a2:	dc06      	bgt.n	80168b2 <__ieee754_pow+0x6a>
 80168a4:	d101      	bne.n	80168aa <__ieee754_pow+0x62>
 80168a6:	2e00      	cmp	r6, #0
 80168a8:	d1e7      	bne.n	801687a <__ieee754_pow+0x32>
 80168aa:	4598      	cmp	r8, r3
 80168ac:	dc01      	bgt.n	80168b2 <__ieee754_pow+0x6a>
 80168ae:	d10f      	bne.n	80168d0 <__ieee754_pow+0x88>
 80168b0:	b172      	cbz	r2, 80168d0 <__ieee754_pow+0x88>
 80168b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80168b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80168ba:	ea55 050a 	orrs.w	r5, r5, sl
 80168be:	d1dc      	bne.n	801687a <__ieee754_pow+0x32>
 80168c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80168c4:	18db      	adds	r3, r3, r3
 80168c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80168ca:	4152      	adcs	r2, r2
 80168cc:	429d      	cmp	r5, r3
 80168ce:	e7d0      	b.n	8016872 <__ieee754_pow+0x2a>
 80168d0:	2d00      	cmp	r5, #0
 80168d2:	da3b      	bge.n	801694c <__ieee754_pow+0x104>
 80168d4:	4b72      	ldr	r3, [pc, #456]	; (8016aa0 <__ieee754_pow+0x258>)
 80168d6:	4598      	cmp	r8, r3
 80168d8:	dc51      	bgt.n	801697e <__ieee754_pow+0x136>
 80168da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80168de:	4598      	cmp	r8, r3
 80168e0:	f340 84ac 	ble.w	801723c <__ieee754_pow+0x9f4>
 80168e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80168e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80168ec:	2b14      	cmp	r3, #20
 80168ee:	dd0f      	ble.n	8016910 <__ieee754_pow+0xc8>
 80168f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80168f4:	fa22 f103 	lsr.w	r1, r2, r3
 80168f8:	fa01 f303 	lsl.w	r3, r1, r3
 80168fc:	4293      	cmp	r3, r2
 80168fe:	f040 849d 	bne.w	801723c <__ieee754_pow+0x9f4>
 8016902:	f001 0101 	and.w	r1, r1, #1
 8016906:	f1c1 0302 	rsb	r3, r1, #2
 801690a:	9304      	str	r3, [sp, #16]
 801690c:	b182      	cbz	r2, 8016930 <__ieee754_pow+0xe8>
 801690e:	e05f      	b.n	80169d0 <__ieee754_pow+0x188>
 8016910:	2a00      	cmp	r2, #0
 8016912:	d15b      	bne.n	80169cc <__ieee754_pow+0x184>
 8016914:	f1c3 0314 	rsb	r3, r3, #20
 8016918:	fa48 f103 	asr.w	r1, r8, r3
 801691c:	fa01 f303 	lsl.w	r3, r1, r3
 8016920:	4543      	cmp	r3, r8
 8016922:	f040 8488 	bne.w	8017236 <__ieee754_pow+0x9ee>
 8016926:	f001 0101 	and.w	r1, r1, #1
 801692a:	f1c1 0302 	rsb	r3, r1, #2
 801692e:	9304      	str	r3, [sp, #16]
 8016930:	4b5c      	ldr	r3, [pc, #368]	; (8016aa4 <__ieee754_pow+0x25c>)
 8016932:	4598      	cmp	r8, r3
 8016934:	d132      	bne.n	801699c <__ieee754_pow+0x154>
 8016936:	f1b9 0f00 	cmp.w	r9, #0
 801693a:	f280 8478 	bge.w	801722e <__ieee754_pow+0x9e6>
 801693e:	4959      	ldr	r1, [pc, #356]	; (8016aa4 <__ieee754_pow+0x25c>)
 8016940:	4632      	mov	r2, r6
 8016942:	463b      	mov	r3, r7
 8016944:	2000      	movs	r0, #0
 8016946:	f7e9 ffa1 	bl	800088c <__aeabi_ddiv>
 801694a:	e79c      	b.n	8016886 <__ieee754_pow+0x3e>
 801694c:	2300      	movs	r3, #0
 801694e:	9304      	str	r3, [sp, #16]
 8016950:	2a00      	cmp	r2, #0
 8016952:	d13d      	bne.n	80169d0 <__ieee754_pow+0x188>
 8016954:	4b51      	ldr	r3, [pc, #324]	; (8016a9c <__ieee754_pow+0x254>)
 8016956:	4598      	cmp	r8, r3
 8016958:	d1ea      	bne.n	8016930 <__ieee754_pow+0xe8>
 801695a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801695e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016962:	ea53 030a 	orrs.w	r3, r3, sl
 8016966:	f000 845a 	beq.w	801721e <__ieee754_pow+0x9d6>
 801696a:	4b4f      	ldr	r3, [pc, #316]	; (8016aa8 <__ieee754_pow+0x260>)
 801696c:	429c      	cmp	r4, r3
 801696e:	dd08      	ble.n	8016982 <__ieee754_pow+0x13a>
 8016970:	f1b9 0f00 	cmp.w	r9, #0
 8016974:	f2c0 8457 	blt.w	8017226 <__ieee754_pow+0x9de>
 8016978:	e9dd 0100 	ldrd	r0, r1, [sp]
 801697c:	e783      	b.n	8016886 <__ieee754_pow+0x3e>
 801697e:	2302      	movs	r3, #2
 8016980:	e7e5      	b.n	801694e <__ieee754_pow+0x106>
 8016982:	f1b9 0f00 	cmp.w	r9, #0
 8016986:	f04f 0000 	mov.w	r0, #0
 801698a:	f04f 0100 	mov.w	r1, #0
 801698e:	f6bf af7a 	bge.w	8016886 <__ieee754_pow+0x3e>
 8016992:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016996:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801699a:	e774      	b.n	8016886 <__ieee754_pow+0x3e>
 801699c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80169a0:	d106      	bne.n	80169b0 <__ieee754_pow+0x168>
 80169a2:	4632      	mov	r2, r6
 80169a4:	463b      	mov	r3, r7
 80169a6:	4630      	mov	r0, r6
 80169a8:	4639      	mov	r1, r7
 80169aa:	f7e9 fe45 	bl	8000638 <__aeabi_dmul>
 80169ae:	e76a      	b.n	8016886 <__ieee754_pow+0x3e>
 80169b0:	4b3e      	ldr	r3, [pc, #248]	; (8016aac <__ieee754_pow+0x264>)
 80169b2:	4599      	cmp	r9, r3
 80169b4:	d10c      	bne.n	80169d0 <__ieee754_pow+0x188>
 80169b6:	2d00      	cmp	r5, #0
 80169b8:	db0a      	blt.n	80169d0 <__ieee754_pow+0x188>
 80169ba:	ec47 6b10 	vmov	d0, r6, r7
 80169be:	b009      	add	sp, #36	; 0x24
 80169c0:	ecbd 8b06 	vpop	{d8-d10}
 80169c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c8:	f000 bc6c 	b.w	80172a4 <__ieee754_sqrt>
 80169cc:	2300      	movs	r3, #0
 80169ce:	9304      	str	r3, [sp, #16]
 80169d0:	ec47 6b10 	vmov	d0, r6, r7
 80169d4:	f000 feec 	bl	80177b0 <fabs>
 80169d8:	ec51 0b10 	vmov	r0, r1, d0
 80169dc:	f1ba 0f00 	cmp.w	sl, #0
 80169e0:	d129      	bne.n	8016a36 <__ieee754_pow+0x1ee>
 80169e2:	b124      	cbz	r4, 80169ee <__ieee754_pow+0x1a6>
 80169e4:	4b2f      	ldr	r3, [pc, #188]	; (8016aa4 <__ieee754_pow+0x25c>)
 80169e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d123      	bne.n	8016a36 <__ieee754_pow+0x1ee>
 80169ee:	f1b9 0f00 	cmp.w	r9, #0
 80169f2:	da05      	bge.n	8016a00 <__ieee754_pow+0x1b8>
 80169f4:	4602      	mov	r2, r0
 80169f6:	460b      	mov	r3, r1
 80169f8:	2000      	movs	r0, #0
 80169fa:	492a      	ldr	r1, [pc, #168]	; (8016aa4 <__ieee754_pow+0x25c>)
 80169fc:	f7e9 ff46 	bl	800088c <__aeabi_ddiv>
 8016a00:	2d00      	cmp	r5, #0
 8016a02:	f6bf af40 	bge.w	8016886 <__ieee754_pow+0x3e>
 8016a06:	9b04      	ldr	r3, [sp, #16]
 8016a08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016a0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016a10:	4323      	orrs	r3, r4
 8016a12:	d108      	bne.n	8016a26 <__ieee754_pow+0x1de>
 8016a14:	4602      	mov	r2, r0
 8016a16:	460b      	mov	r3, r1
 8016a18:	4610      	mov	r0, r2
 8016a1a:	4619      	mov	r1, r3
 8016a1c:	f7e9 fc54 	bl	80002c8 <__aeabi_dsub>
 8016a20:	4602      	mov	r2, r0
 8016a22:	460b      	mov	r3, r1
 8016a24:	e78f      	b.n	8016946 <__ieee754_pow+0xfe>
 8016a26:	9b04      	ldr	r3, [sp, #16]
 8016a28:	2b01      	cmp	r3, #1
 8016a2a:	f47f af2c 	bne.w	8016886 <__ieee754_pow+0x3e>
 8016a2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a32:	4619      	mov	r1, r3
 8016a34:	e727      	b.n	8016886 <__ieee754_pow+0x3e>
 8016a36:	0feb      	lsrs	r3, r5, #31
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	9306      	str	r3, [sp, #24]
 8016a3c:	9a06      	ldr	r2, [sp, #24]
 8016a3e:	9b04      	ldr	r3, [sp, #16]
 8016a40:	4313      	orrs	r3, r2
 8016a42:	d102      	bne.n	8016a4a <__ieee754_pow+0x202>
 8016a44:	4632      	mov	r2, r6
 8016a46:	463b      	mov	r3, r7
 8016a48:	e7e6      	b.n	8016a18 <__ieee754_pow+0x1d0>
 8016a4a:	4b19      	ldr	r3, [pc, #100]	; (8016ab0 <__ieee754_pow+0x268>)
 8016a4c:	4598      	cmp	r8, r3
 8016a4e:	f340 80fb 	ble.w	8016c48 <__ieee754_pow+0x400>
 8016a52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016a56:	4598      	cmp	r8, r3
 8016a58:	4b13      	ldr	r3, [pc, #76]	; (8016aa8 <__ieee754_pow+0x260>)
 8016a5a:	dd0c      	ble.n	8016a76 <__ieee754_pow+0x22e>
 8016a5c:	429c      	cmp	r4, r3
 8016a5e:	dc0f      	bgt.n	8016a80 <__ieee754_pow+0x238>
 8016a60:	f1b9 0f00 	cmp.w	r9, #0
 8016a64:	da0f      	bge.n	8016a86 <__ieee754_pow+0x23e>
 8016a66:	2000      	movs	r0, #0
 8016a68:	b009      	add	sp, #36	; 0x24
 8016a6a:	ecbd 8b06 	vpop	{d8-d10}
 8016a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a72:	f000 bcf3 	b.w	801745c <__math_oflow>
 8016a76:	429c      	cmp	r4, r3
 8016a78:	dbf2      	blt.n	8016a60 <__ieee754_pow+0x218>
 8016a7a:	4b0a      	ldr	r3, [pc, #40]	; (8016aa4 <__ieee754_pow+0x25c>)
 8016a7c:	429c      	cmp	r4, r3
 8016a7e:	dd19      	ble.n	8016ab4 <__ieee754_pow+0x26c>
 8016a80:	f1b9 0f00 	cmp.w	r9, #0
 8016a84:	dcef      	bgt.n	8016a66 <__ieee754_pow+0x21e>
 8016a86:	2000      	movs	r0, #0
 8016a88:	b009      	add	sp, #36	; 0x24
 8016a8a:	ecbd 8b06 	vpop	{d8-d10}
 8016a8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a92:	f000 bcda 	b.w	801744a <__math_uflow>
 8016a96:	bf00      	nop
 8016a98:	fff00000 	.word	0xfff00000
 8016a9c:	7ff00000 	.word	0x7ff00000
 8016aa0:	433fffff 	.word	0x433fffff
 8016aa4:	3ff00000 	.word	0x3ff00000
 8016aa8:	3fefffff 	.word	0x3fefffff
 8016aac:	3fe00000 	.word	0x3fe00000
 8016ab0:	41e00000 	.word	0x41e00000
 8016ab4:	4b60      	ldr	r3, [pc, #384]	; (8016c38 <__ieee754_pow+0x3f0>)
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	f7e9 fc06 	bl	80002c8 <__aeabi_dsub>
 8016abc:	a354      	add	r3, pc, #336	; (adr r3, 8016c10 <__ieee754_pow+0x3c8>)
 8016abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac2:	4604      	mov	r4, r0
 8016ac4:	460d      	mov	r5, r1
 8016ac6:	f7e9 fdb7 	bl	8000638 <__aeabi_dmul>
 8016aca:	a353      	add	r3, pc, #332	; (adr r3, 8016c18 <__ieee754_pow+0x3d0>)
 8016acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad0:	4606      	mov	r6, r0
 8016ad2:	460f      	mov	r7, r1
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	4629      	mov	r1, r5
 8016ad8:	f7e9 fdae 	bl	8000638 <__aeabi_dmul>
 8016adc:	4b57      	ldr	r3, [pc, #348]	; (8016c3c <__ieee754_pow+0x3f4>)
 8016ade:	4682      	mov	sl, r0
 8016ae0:	468b      	mov	fp, r1
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	f7e9 fda6 	bl	8000638 <__aeabi_dmul>
 8016aec:	4602      	mov	r2, r0
 8016aee:	460b      	mov	r3, r1
 8016af0:	a14b      	add	r1, pc, #300	; (adr r1, 8016c20 <__ieee754_pow+0x3d8>)
 8016af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016af6:	f7e9 fbe7 	bl	80002c8 <__aeabi_dsub>
 8016afa:	4622      	mov	r2, r4
 8016afc:	462b      	mov	r3, r5
 8016afe:	f7e9 fd9b 	bl	8000638 <__aeabi_dmul>
 8016b02:	4602      	mov	r2, r0
 8016b04:	460b      	mov	r3, r1
 8016b06:	2000      	movs	r0, #0
 8016b08:	494d      	ldr	r1, [pc, #308]	; (8016c40 <__ieee754_pow+0x3f8>)
 8016b0a:	f7e9 fbdd 	bl	80002c8 <__aeabi_dsub>
 8016b0e:	4622      	mov	r2, r4
 8016b10:	4680      	mov	r8, r0
 8016b12:	4689      	mov	r9, r1
 8016b14:	462b      	mov	r3, r5
 8016b16:	4620      	mov	r0, r4
 8016b18:	4629      	mov	r1, r5
 8016b1a:	f7e9 fd8d 	bl	8000638 <__aeabi_dmul>
 8016b1e:	4602      	mov	r2, r0
 8016b20:	460b      	mov	r3, r1
 8016b22:	4640      	mov	r0, r8
 8016b24:	4649      	mov	r1, r9
 8016b26:	f7e9 fd87 	bl	8000638 <__aeabi_dmul>
 8016b2a:	a33f      	add	r3, pc, #252	; (adr r3, 8016c28 <__ieee754_pow+0x3e0>)
 8016b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b30:	f7e9 fd82 	bl	8000638 <__aeabi_dmul>
 8016b34:	4602      	mov	r2, r0
 8016b36:	460b      	mov	r3, r1
 8016b38:	4650      	mov	r0, sl
 8016b3a:	4659      	mov	r1, fp
 8016b3c:	f7e9 fbc4 	bl	80002c8 <__aeabi_dsub>
 8016b40:	4602      	mov	r2, r0
 8016b42:	460b      	mov	r3, r1
 8016b44:	4680      	mov	r8, r0
 8016b46:	4689      	mov	r9, r1
 8016b48:	4630      	mov	r0, r6
 8016b4a:	4639      	mov	r1, r7
 8016b4c:	f7e9 fbbe 	bl	80002cc <__adddf3>
 8016b50:	2000      	movs	r0, #0
 8016b52:	4632      	mov	r2, r6
 8016b54:	463b      	mov	r3, r7
 8016b56:	4604      	mov	r4, r0
 8016b58:	460d      	mov	r5, r1
 8016b5a:	f7e9 fbb5 	bl	80002c8 <__aeabi_dsub>
 8016b5e:	4602      	mov	r2, r0
 8016b60:	460b      	mov	r3, r1
 8016b62:	4640      	mov	r0, r8
 8016b64:	4649      	mov	r1, r9
 8016b66:	f7e9 fbaf 	bl	80002c8 <__aeabi_dsub>
 8016b6a:	9b04      	ldr	r3, [sp, #16]
 8016b6c:	9a06      	ldr	r2, [sp, #24]
 8016b6e:	3b01      	subs	r3, #1
 8016b70:	4313      	orrs	r3, r2
 8016b72:	4682      	mov	sl, r0
 8016b74:	468b      	mov	fp, r1
 8016b76:	f040 81e7 	bne.w	8016f48 <__ieee754_pow+0x700>
 8016b7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016c30 <__ieee754_pow+0x3e8>
 8016b7e:	eeb0 8a47 	vmov.f32	s16, s14
 8016b82:	eef0 8a67 	vmov.f32	s17, s15
 8016b86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016b8a:	2600      	movs	r6, #0
 8016b8c:	4632      	mov	r2, r6
 8016b8e:	463b      	mov	r3, r7
 8016b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b94:	f7e9 fb98 	bl	80002c8 <__aeabi_dsub>
 8016b98:	4622      	mov	r2, r4
 8016b9a:	462b      	mov	r3, r5
 8016b9c:	f7e9 fd4c 	bl	8000638 <__aeabi_dmul>
 8016ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ba4:	4680      	mov	r8, r0
 8016ba6:	4689      	mov	r9, r1
 8016ba8:	4650      	mov	r0, sl
 8016baa:	4659      	mov	r1, fp
 8016bac:	f7e9 fd44 	bl	8000638 <__aeabi_dmul>
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	4640      	mov	r0, r8
 8016bb6:	4649      	mov	r1, r9
 8016bb8:	f7e9 fb88 	bl	80002cc <__adddf3>
 8016bbc:	4632      	mov	r2, r6
 8016bbe:	463b      	mov	r3, r7
 8016bc0:	4680      	mov	r8, r0
 8016bc2:	4689      	mov	r9, r1
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	4629      	mov	r1, r5
 8016bc8:	f7e9 fd36 	bl	8000638 <__aeabi_dmul>
 8016bcc:	460b      	mov	r3, r1
 8016bce:	4604      	mov	r4, r0
 8016bd0:	460d      	mov	r5, r1
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	4649      	mov	r1, r9
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	f7e9 fb78 	bl	80002cc <__adddf3>
 8016bdc:	4b19      	ldr	r3, [pc, #100]	; (8016c44 <__ieee754_pow+0x3fc>)
 8016bde:	4299      	cmp	r1, r3
 8016be0:	ec45 4b19 	vmov	d9, r4, r5
 8016be4:	4606      	mov	r6, r0
 8016be6:	460f      	mov	r7, r1
 8016be8:	468b      	mov	fp, r1
 8016bea:	f340 82f1 	ble.w	80171d0 <__ieee754_pow+0x988>
 8016bee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016bf2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016bf6:	4303      	orrs	r3, r0
 8016bf8:	f000 81e4 	beq.w	8016fc4 <__ieee754_pow+0x77c>
 8016bfc:	ec51 0b18 	vmov	r0, r1, d8
 8016c00:	2200      	movs	r2, #0
 8016c02:	2300      	movs	r3, #0
 8016c04:	f7e9 ff8a 	bl	8000b1c <__aeabi_dcmplt>
 8016c08:	3800      	subs	r0, #0
 8016c0a:	bf18      	it	ne
 8016c0c:	2001      	movne	r0, #1
 8016c0e:	e72b      	b.n	8016a68 <__ieee754_pow+0x220>
 8016c10:	60000000 	.word	0x60000000
 8016c14:	3ff71547 	.word	0x3ff71547
 8016c18:	f85ddf44 	.word	0xf85ddf44
 8016c1c:	3e54ae0b 	.word	0x3e54ae0b
 8016c20:	55555555 	.word	0x55555555
 8016c24:	3fd55555 	.word	0x3fd55555
 8016c28:	652b82fe 	.word	0x652b82fe
 8016c2c:	3ff71547 	.word	0x3ff71547
 8016c30:	00000000 	.word	0x00000000
 8016c34:	bff00000 	.word	0xbff00000
 8016c38:	3ff00000 	.word	0x3ff00000
 8016c3c:	3fd00000 	.word	0x3fd00000
 8016c40:	3fe00000 	.word	0x3fe00000
 8016c44:	408fffff 	.word	0x408fffff
 8016c48:	4bd5      	ldr	r3, [pc, #852]	; (8016fa0 <__ieee754_pow+0x758>)
 8016c4a:	402b      	ands	r3, r5
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	b92b      	cbnz	r3, 8016c5c <__ieee754_pow+0x414>
 8016c50:	4bd4      	ldr	r3, [pc, #848]	; (8016fa4 <__ieee754_pow+0x75c>)
 8016c52:	f7e9 fcf1 	bl	8000638 <__aeabi_dmul>
 8016c56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	1523      	asrs	r3, r4, #20
 8016c5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016c62:	4413      	add	r3, r2
 8016c64:	9305      	str	r3, [sp, #20]
 8016c66:	4bd0      	ldr	r3, [pc, #832]	; (8016fa8 <__ieee754_pow+0x760>)
 8016c68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016c6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016c70:	429c      	cmp	r4, r3
 8016c72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016c76:	dd08      	ble.n	8016c8a <__ieee754_pow+0x442>
 8016c78:	4bcc      	ldr	r3, [pc, #816]	; (8016fac <__ieee754_pow+0x764>)
 8016c7a:	429c      	cmp	r4, r3
 8016c7c:	f340 8162 	ble.w	8016f44 <__ieee754_pow+0x6fc>
 8016c80:	9b05      	ldr	r3, [sp, #20]
 8016c82:	3301      	adds	r3, #1
 8016c84:	9305      	str	r3, [sp, #20]
 8016c86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016c8a:	2400      	movs	r4, #0
 8016c8c:	00e3      	lsls	r3, r4, #3
 8016c8e:	9307      	str	r3, [sp, #28]
 8016c90:	4bc7      	ldr	r3, [pc, #796]	; (8016fb0 <__ieee754_pow+0x768>)
 8016c92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016c96:	ed93 7b00 	vldr	d7, [r3]
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	ec53 2b17 	vmov	r2, r3, d7
 8016ca0:	eeb0 9a47 	vmov.f32	s18, s14
 8016ca4:	eef0 9a67 	vmov.f32	s19, s15
 8016ca8:	4682      	mov	sl, r0
 8016caa:	f7e9 fb0d 	bl	80002c8 <__aeabi_dsub>
 8016cae:	4652      	mov	r2, sl
 8016cb0:	4606      	mov	r6, r0
 8016cb2:	460f      	mov	r7, r1
 8016cb4:	462b      	mov	r3, r5
 8016cb6:	ec51 0b19 	vmov	r0, r1, d9
 8016cba:	f7e9 fb07 	bl	80002cc <__adddf3>
 8016cbe:	4602      	mov	r2, r0
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	49bb      	ldr	r1, [pc, #748]	; (8016fb4 <__ieee754_pow+0x76c>)
 8016cc6:	f7e9 fde1 	bl	800088c <__aeabi_ddiv>
 8016cca:	ec41 0b1a 	vmov	d10, r0, r1
 8016cce:	4602      	mov	r2, r0
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	4639      	mov	r1, r7
 8016cd6:	f7e9 fcaf 	bl	8000638 <__aeabi_dmul>
 8016cda:	2300      	movs	r3, #0
 8016cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ce0:	9302      	str	r3, [sp, #8]
 8016ce2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016ce6:	46ab      	mov	fp, r5
 8016ce8:	106d      	asrs	r5, r5, #1
 8016cea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016cee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016cf2:	ec41 0b18 	vmov	d8, r0, r1
 8016cf6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	4640      	mov	r0, r8
 8016cfe:	4649      	mov	r1, r9
 8016d00:	4614      	mov	r4, r2
 8016d02:	461d      	mov	r5, r3
 8016d04:	f7e9 fc98 	bl	8000638 <__aeabi_dmul>
 8016d08:	4602      	mov	r2, r0
 8016d0a:	460b      	mov	r3, r1
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	4639      	mov	r1, r7
 8016d10:	f7e9 fada 	bl	80002c8 <__aeabi_dsub>
 8016d14:	ec53 2b19 	vmov	r2, r3, d9
 8016d18:	4606      	mov	r6, r0
 8016d1a:	460f      	mov	r7, r1
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	4629      	mov	r1, r5
 8016d20:	f7e9 fad2 	bl	80002c8 <__aeabi_dsub>
 8016d24:	4602      	mov	r2, r0
 8016d26:	460b      	mov	r3, r1
 8016d28:	4650      	mov	r0, sl
 8016d2a:	4659      	mov	r1, fp
 8016d2c:	f7e9 facc 	bl	80002c8 <__aeabi_dsub>
 8016d30:	4642      	mov	r2, r8
 8016d32:	464b      	mov	r3, r9
 8016d34:	f7e9 fc80 	bl	8000638 <__aeabi_dmul>
 8016d38:	4602      	mov	r2, r0
 8016d3a:	460b      	mov	r3, r1
 8016d3c:	4630      	mov	r0, r6
 8016d3e:	4639      	mov	r1, r7
 8016d40:	f7e9 fac2 	bl	80002c8 <__aeabi_dsub>
 8016d44:	ec53 2b1a 	vmov	r2, r3, d10
 8016d48:	f7e9 fc76 	bl	8000638 <__aeabi_dmul>
 8016d4c:	ec53 2b18 	vmov	r2, r3, d8
 8016d50:	ec41 0b19 	vmov	d9, r0, r1
 8016d54:	ec51 0b18 	vmov	r0, r1, d8
 8016d58:	f7e9 fc6e 	bl	8000638 <__aeabi_dmul>
 8016d5c:	a37c      	add	r3, pc, #496	; (adr r3, 8016f50 <__ieee754_pow+0x708>)
 8016d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d62:	4604      	mov	r4, r0
 8016d64:	460d      	mov	r5, r1
 8016d66:	f7e9 fc67 	bl	8000638 <__aeabi_dmul>
 8016d6a:	a37b      	add	r3, pc, #492	; (adr r3, 8016f58 <__ieee754_pow+0x710>)
 8016d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d70:	f7e9 faac 	bl	80002cc <__adddf3>
 8016d74:	4622      	mov	r2, r4
 8016d76:	462b      	mov	r3, r5
 8016d78:	f7e9 fc5e 	bl	8000638 <__aeabi_dmul>
 8016d7c:	a378      	add	r3, pc, #480	; (adr r3, 8016f60 <__ieee754_pow+0x718>)
 8016d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d82:	f7e9 faa3 	bl	80002cc <__adddf3>
 8016d86:	4622      	mov	r2, r4
 8016d88:	462b      	mov	r3, r5
 8016d8a:	f7e9 fc55 	bl	8000638 <__aeabi_dmul>
 8016d8e:	a376      	add	r3, pc, #472	; (adr r3, 8016f68 <__ieee754_pow+0x720>)
 8016d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d94:	f7e9 fa9a 	bl	80002cc <__adddf3>
 8016d98:	4622      	mov	r2, r4
 8016d9a:	462b      	mov	r3, r5
 8016d9c:	f7e9 fc4c 	bl	8000638 <__aeabi_dmul>
 8016da0:	a373      	add	r3, pc, #460	; (adr r3, 8016f70 <__ieee754_pow+0x728>)
 8016da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016da6:	f7e9 fa91 	bl	80002cc <__adddf3>
 8016daa:	4622      	mov	r2, r4
 8016dac:	462b      	mov	r3, r5
 8016dae:	f7e9 fc43 	bl	8000638 <__aeabi_dmul>
 8016db2:	a371      	add	r3, pc, #452	; (adr r3, 8016f78 <__ieee754_pow+0x730>)
 8016db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db8:	f7e9 fa88 	bl	80002cc <__adddf3>
 8016dbc:	4622      	mov	r2, r4
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	460f      	mov	r7, r1
 8016dc2:	462b      	mov	r3, r5
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	4629      	mov	r1, r5
 8016dc8:	f7e9 fc36 	bl	8000638 <__aeabi_dmul>
 8016dcc:	4602      	mov	r2, r0
 8016dce:	460b      	mov	r3, r1
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	4639      	mov	r1, r7
 8016dd4:	f7e9 fc30 	bl	8000638 <__aeabi_dmul>
 8016dd8:	4642      	mov	r2, r8
 8016dda:	4604      	mov	r4, r0
 8016ddc:	460d      	mov	r5, r1
 8016dde:	464b      	mov	r3, r9
 8016de0:	ec51 0b18 	vmov	r0, r1, d8
 8016de4:	f7e9 fa72 	bl	80002cc <__adddf3>
 8016de8:	ec53 2b19 	vmov	r2, r3, d9
 8016dec:	f7e9 fc24 	bl	8000638 <__aeabi_dmul>
 8016df0:	4622      	mov	r2, r4
 8016df2:	462b      	mov	r3, r5
 8016df4:	f7e9 fa6a 	bl	80002cc <__adddf3>
 8016df8:	4642      	mov	r2, r8
 8016dfa:	4682      	mov	sl, r0
 8016dfc:	468b      	mov	fp, r1
 8016dfe:	464b      	mov	r3, r9
 8016e00:	4640      	mov	r0, r8
 8016e02:	4649      	mov	r1, r9
 8016e04:	f7e9 fc18 	bl	8000638 <__aeabi_dmul>
 8016e08:	4b6b      	ldr	r3, [pc, #428]	; (8016fb8 <__ieee754_pow+0x770>)
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	4606      	mov	r6, r0
 8016e0e:	460f      	mov	r7, r1
 8016e10:	f7e9 fa5c 	bl	80002cc <__adddf3>
 8016e14:	4652      	mov	r2, sl
 8016e16:	465b      	mov	r3, fp
 8016e18:	f7e9 fa58 	bl	80002cc <__adddf3>
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	460d      	mov	r5, r1
 8016e22:	4602      	mov	r2, r0
 8016e24:	460b      	mov	r3, r1
 8016e26:	4640      	mov	r0, r8
 8016e28:	4649      	mov	r1, r9
 8016e2a:	f7e9 fc05 	bl	8000638 <__aeabi_dmul>
 8016e2e:	4b62      	ldr	r3, [pc, #392]	; (8016fb8 <__ieee754_pow+0x770>)
 8016e30:	4680      	mov	r8, r0
 8016e32:	4689      	mov	r9, r1
 8016e34:	2200      	movs	r2, #0
 8016e36:	4620      	mov	r0, r4
 8016e38:	4629      	mov	r1, r5
 8016e3a:	f7e9 fa45 	bl	80002c8 <__aeabi_dsub>
 8016e3e:	4632      	mov	r2, r6
 8016e40:	463b      	mov	r3, r7
 8016e42:	f7e9 fa41 	bl	80002c8 <__aeabi_dsub>
 8016e46:	4602      	mov	r2, r0
 8016e48:	460b      	mov	r3, r1
 8016e4a:	4650      	mov	r0, sl
 8016e4c:	4659      	mov	r1, fp
 8016e4e:	f7e9 fa3b 	bl	80002c8 <__aeabi_dsub>
 8016e52:	ec53 2b18 	vmov	r2, r3, d8
 8016e56:	f7e9 fbef 	bl	8000638 <__aeabi_dmul>
 8016e5a:	4622      	mov	r2, r4
 8016e5c:	4606      	mov	r6, r0
 8016e5e:	460f      	mov	r7, r1
 8016e60:	462b      	mov	r3, r5
 8016e62:	ec51 0b19 	vmov	r0, r1, d9
 8016e66:	f7e9 fbe7 	bl	8000638 <__aeabi_dmul>
 8016e6a:	4602      	mov	r2, r0
 8016e6c:	460b      	mov	r3, r1
 8016e6e:	4630      	mov	r0, r6
 8016e70:	4639      	mov	r1, r7
 8016e72:	f7e9 fa2b 	bl	80002cc <__adddf3>
 8016e76:	4606      	mov	r6, r0
 8016e78:	460f      	mov	r7, r1
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	4640      	mov	r0, r8
 8016e80:	4649      	mov	r1, r9
 8016e82:	f7e9 fa23 	bl	80002cc <__adddf3>
 8016e86:	a33e      	add	r3, pc, #248	; (adr r3, 8016f80 <__ieee754_pow+0x738>)
 8016e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	4604      	mov	r4, r0
 8016e90:	460d      	mov	r5, r1
 8016e92:	f7e9 fbd1 	bl	8000638 <__aeabi_dmul>
 8016e96:	4642      	mov	r2, r8
 8016e98:	ec41 0b18 	vmov	d8, r0, r1
 8016e9c:	464b      	mov	r3, r9
 8016e9e:	4620      	mov	r0, r4
 8016ea0:	4629      	mov	r1, r5
 8016ea2:	f7e9 fa11 	bl	80002c8 <__aeabi_dsub>
 8016ea6:	4602      	mov	r2, r0
 8016ea8:	460b      	mov	r3, r1
 8016eaa:	4630      	mov	r0, r6
 8016eac:	4639      	mov	r1, r7
 8016eae:	f7e9 fa0b 	bl	80002c8 <__aeabi_dsub>
 8016eb2:	a335      	add	r3, pc, #212	; (adr r3, 8016f88 <__ieee754_pow+0x740>)
 8016eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb8:	f7e9 fbbe 	bl	8000638 <__aeabi_dmul>
 8016ebc:	a334      	add	r3, pc, #208	; (adr r3, 8016f90 <__ieee754_pow+0x748>)
 8016ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec2:	4606      	mov	r6, r0
 8016ec4:	460f      	mov	r7, r1
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	4629      	mov	r1, r5
 8016eca:	f7e9 fbb5 	bl	8000638 <__aeabi_dmul>
 8016ece:	4602      	mov	r2, r0
 8016ed0:	460b      	mov	r3, r1
 8016ed2:	4630      	mov	r0, r6
 8016ed4:	4639      	mov	r1, r7
 8016ed6:	f7e9 f9f9 	bl	80002cc <__adddf3>
 8016eda:	9a07      	ldr	r2, [sp, #28]
 8016edc:	4b37      	ldr	r3, [pc, #220]	; (8016fbc <__ieee754_pow+0x774>)
 8016ede:	4413      	add	r3, r2
 8016ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee4:	f7e9 f9f2 	bl	80002cc <__adddf3>
 8016ee8:	4682      	mov	sl, r0
 8016eea:	9805      	ldr	r0, [sp, #20]
 8016eec:	468b      	mov	fp, r1
 8016eee:	f7e9 fb39 	bl	8000564 <__aeabi_i2d>
 8016ef2:	9a07      	ldr	r2, [sp, #28]
 8016ef4:	4b32      	ldr	r3, [pc, #200]	; (8016fc0 <__ieee754_pow+0x778>)
 8016ef6:	4413      	add	r3, r2
 8016ef8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016efc:	4606      	mov	r6, r0
 8016efe:	460f      	mov	r7, r1
 8016f00:	4652      	mov	r2, sl
 8016f02:	465b      	mov	r3, fp
 8016f04:	ec51 0b18 	vmov	r0, r1, d8
 8016f08:	f7e9 f9e0 	bl	80002cc <__adddf3>
 8016f0c:	4642      	mov	r2, r8
 8016f0e:	464b      	mov	r3, r9
 8016f10:	f7e9 f9dc 	bl	80002cc <__adddf3>
 8016f14:	4632      	mov	r2, r6
 8016f16:	463b      	mov	r3, r7
 8016f18:	f7e9 f9d8 	bl	80002cc <__adddf3>
 8016f1c:	2000      	movs	r0, #0
 8016f1e:	4632      	mov	r2, r6
 8016f20:	463b      	mov	r3, r7
 8016f22:	4604      	mov	r4, r0
 8016f24:	460d      	mov	r5, r1
 8016f26:	f7e9 f9cf 	bl	80002c8 <__aeabi_dsub>
 8016f2a:	4642      	mov	r2, r8
 8016f2c:	464b      	mov	r3, r9
 8016f2e:	f7e9 f9cb 	bl	80002c8 <__aeabi_dsub>
 8016f32:	ec53 2b18 	vmov	r2, r3, d8
 8016f36:	f7e9 f9c7 	bl	80002c8 <__aeabi_dsub>
 8016f3a:	4602      	mov	r2, r0
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	4650      	mov	r0, sl
 8016f40:	4659      	mov	r1, fp
 8016f42:	e610      	b.n	8016b66 <__ieee754_pow+0x31e>
 8016f44:	2401      	movs	r4, #1
 8016f46:	e6a1      	b.n	8016c8c <__ieee754_pow+0x444>
 8016f48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8016f98 <__ieee754_pow+0x750>
 8016f4c:	e617      	b.n	8016b7e <__ieee754_pow+0x336>
 8016f4e:	bf00      	nop
 8016f50:	4a454eef 	.word	0x4a454eef
 8016f54:	3fca7e28 	.word	0x3fca7e28
 8016f58:	93c9db65 	.word	0x93c9db65
 8016f5c:	3fcd864a 	.word	0x3fcd864a
 8016f60:	a91d4101 	.word	0xa91d4101
 8016f64:	3fd17460 	.word	0x3fd17460
 8016f68:	518f264d 	.word	0x518f264d
 8016f6c:	3fd55555 	.word	0x3fd55555
 8016f70:	db6fabff 	.word	0xdb6fabff
 8016f74:	3fdb6db6 	.word	0x3fdb6db6
 8016f78:	33333303 	.word	0x33333303
 8016f7c:	3fe33333 	.word	0x3fe33333
 8016f80:	e0000000 	.word	0xe0000000
 8016f84:	3feec709 	.word	0x3feec709
 8016f88:	dc3a03fd 	.word	0xdc3a03fd
 8016f8c:	3feec709 	.word	0x3feec709
 8016f90:	145b01f5 	.word	0x145b01f5
 8016f94:	be3e2fe0 	.word	0xbe3e2fe0
 8016f98:	00000000 	.word	0x00000000
 8016f9c:	3ff00000 	.word	0x3ff00000
 8016fa0:	7ff00000 	.word	0x7ff00000
 8016fa4:	43400000 	.word	0x43400000
 8016fa8:	0003988e 	.word	0x0003988e
 8016fac:	000bb679 	.word	0x000bb679
 8016fb0:	08018558 	.word	0x08018558
 8016fb4:	3ff00000 	.word	0x3ff00000
 8016fb8:	40080000 	.word	0x40080000
 8016fbc:	08018578 	.word	0x08018578
 8016fc0:	08018568 	.word	0x08018568
 8016fc4:	a3b5      	add	r3, pc, #724	; (adr r3, 801729c <__ieee754_pow+0xa54>)
 8016fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fca:	4640      	mov	r0, r8
 8016fcc:	4649      	mov	r1, r9
 8016fce:	f7e9 f97d 	bl	80002cc <__adddf3>
 8016fd2:	4622      	mov	r2, r4
 8016fd4:	ec41 0b1a 	vmov	d10, r0, r1
 8016fd8:	462b      	mov	r3, r5
 8016fda:	4630      	mov	r0, r6
 8016fdc:	4639      	mov	r1, r7
 8016fde:	f7e9 f973 	bl	80002c8 <__aeabi_dsub>
 8016fe2:	4602      	mov	r2, r0
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	ec51 0b1a 	vmov	r0, r1, d10
 8016fea:	f7e9 fdb5 	bl	8000b58 <__aeabi_dcmpgt>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	f47f ae04 	bne.w	8016bfc <__ieee754_pow+0x3b4>
 8016ff4:	4aa4      	ldr	r2, [pc, #656]	; (8017288 <__ieee754_pow+0xa40>)
 8016ff6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016ffa:	4293      	cmp	r3, r2
 8016ffc:	f340 8108 	ble.w	8017210 <__ieee754_pow+0x9c8>
 8017000:	151b      	asrs	r3, r3, #20
 8017002:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017006:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801700a:	fa4a f303 	asr.w	r3, sl, r3
 801700e:	445b      	add	r3, fp
 8017010:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017014:	4e9d      	ldr	r6, [pc, #628]	; (801728c <__ieee754_pow+0xa44>)
 8017016:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801701a:	4116      	asrs	r6, r2
 801701c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017020:	2000      	movs	r0, #0
 8017022:	ea23 0106 	bic.w	r1, r3, r6
 8017026:	f1c2 0214 	rsb	r2, r2, #20
 801702a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801702e:	fa4a fa02 	asr.w	sl, sl, r2
 8017032:	f1bb 0f00 	cmp.w	fp, #0
 8017036:	4602      	mov	r2, r0
 8017038:	460b      	mov	r3, r1
 801703a:	4620      	mov	r0, r4
 801703c:	4629      	mov	r1, r5
 801703e:	bfb8      	it	lt
 8017040:	f1ca 0a00 	rsblt	sl, sl, #0
 8017044:	f7e9 f940 	bl	80002c8 <__aeabi_dsub>
 8017048:	ec41 0b19 	vmov	d9, r0, r1
 801704c:	4642      	mov	r2, r8
 801704e:	464b      	mov	r3, r9
 8017050:	ec51 0b19 	vmov	r0, r1, d9
 8017054:	f7e9 f93a 	bl	80002cc <__adddf3>
 8017058:	a37b      	add	r3, pc, #492	; (adr r3, 8017248 <__ieee754_pow+0xa00>)
 801705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801705e:	2000      	movs	r0, #0
 8017060:	4604      	mov	r4, r0
 8017062:	460d      	mov	r5, r1
 8017064:	f7e9 fae8 	bl	8000638 <__aeabi_dmul>
 8017068:	ec53 2b19 	vmov	r2, r3, d9
 801706c:	4606      	mov	r6, r0
 801706e:	460f      	mov	r7, r1
 8017070:	4620      	mov	r0, r4
 8017072:	4629      	mov	r1, r5
 8017074:	f7e9 f928 	bl	80002c8 <__aeabi_dsub>
 8017078:	4602      	mov	r2, r0
 801707a:	460b      	mov	r3, r1
 801707c:	4640      	mov	r0, r8
 801707e:	4649      	mov	r1, r9
 8017080:	f7e9 f922 	bl	80002c8 <__aeabi_dsub>
 8017084:	a372      	add	r3, pc, #456	; (adr r3, 8017250 <__ieee754_pow+0xa08>)
 8017086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708a:	f7e9 fad5 	bl	8000638 <__aeabi_dmul>
 801708e:	a372      	add	r3, pc, #456	; (adr r3, 8017258 <__ieee754_pow+0xa10>)
 8017090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017094:	4680      	mov	r8, r0
 8017096:	4689      	mov	r9, r1
 8017098:	4620      	mov	r0, r4
 801709a:	4629      	mov	r1, r5
 801709c:	f7e9 facc 	bl	8000638 <__aeabi_dmul>
 80170a0:	4602      	mov	r2, r0
 80170a2:	460b      	mov	r3, r1
 80170a4:	4640      	mov	r0, r8
 80170a6:	4649      	mov	r1, r9
 80170a8:	f7e9 f910 	bl	80002cc <__adddf3>
 80170ac:	4604      	mov	r4, r0
 80170ae:	460d      	mov	r5, r1
 80170b0:	4602      	mov	r2, r0
 80170b2:	460b      	mov	r3, r1
 80170b4:	4630      	mov	r0, r6
 80170b6:	4639      	mov	r1, r7
 80170b8:	f7e9 f908 	bl	80002cc <__adddf3>
 80170bc:	4632      	mov	r2, r6
 80170be:	463b      	mov	r3, r7
 80170c0:	4680      	mov	r8, r0
 80170c2:	4689      	mov	r9, r1
 80170c4:	f7e9 f900 	bl	80002c8 <__aeabi_dsub>
 80170c8:	4602      	mov	r2, r0
 80170ca:	460b      	mov	r3, r1
 80170cc:	4620      	mov	r0, r4
 80170ce:	4629      	mov	r1, r5
 80170d0:	f7e9 f8fa 	bl	80002c8 <__aeabi_dsub>
 80170d4:	4642      	mov	r2, r8
 80170d6:	4606      	mov	r6, r0
 80170d8:	460f      	mov	r7, r1
 80170da:	464b      	mov	r3, r9
 80170dc:	4640      	mov	r0, r8
 80170de:	4649      	mov	r1, r9
 80170e0:	f7e9 faaa 	bl	8000638 <__aeabi_dmul>
 80170e4:	a35e      	add	r3, pc, #376	; (adr r3, 8017260 <__ieee754_pow+0xa18>)
 80170e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ea:	4604      	mov	r4, r0
 80170ec:	460d      	mov	r5, r1
 80170ee:	f7e9 faa3 	bl	8000638 <__aeabi_dmul>
 80170f2:	a35d      	add	r3, pc, #372	; (adr r3, 8017268 <__ieee754_pow+0xa20>)
 80170f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f8:	f7e9 f8e6 	bl	80002c8 <__aeabi_dsub>
 80170fc:	4622      	mov	r2, r4
 80170fe:	462b      	mov	r3, r5
 8017100:	f7e9 fa9a 	bl	8000638 <__aeabi_dmul>
 8017104:	a35a      	add	r3, pc, #360	; (adr r3, 8017270 <__ieee754_pow+0xa28>)
 8017106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801710a:	f7e9 f8df 	bl	80002cc <__adddf3>
 801710e:	4622      	mov	r2, r4
 8017110:	462b      	mov	r3, r5
 8017112:	f7e9 fa91 	bl	8000638 <__aeabi_dmul>
 8017116:	a358      	add	r3, pc, #352	; (adr r3, 8017278 <__ieee754_pow+0xa30>)
 8017118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711c:	f7e9 f8d4 	bl	80002c8 <__aeabi_dsub>
 8017120:	4622      	mov	r2, r4
 8017122:	462b      	mov	r3, r5
 8017124:	f7e9 fa88 	bl	8000638 <__aeabi_dmul>
 8017128:	a355      	add	r3, pc, #340	; (adr r3, 8017280 <__ieee754_pow+0xa38>)
 801712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801712e:	f7e9 f8cd 	bl	80002cc <__adddf3>
 8017132:	4622      	mov	r2, r4
 8017134:	462b      	mov	r3, r5
 8017136:	f7e9 fa7f 	bl	8000638 <__aeabi_dmul>
 801713a:	4602      	mov	r2, r0
 801713c:	460b      	mov	r3, r1
 801713e:	4640      	mov	r0, r8
 8017140:	4649      	mov	r1, r9
 8017142:	f7e9 f8c1 	bl	80002c8 <__aeabi_dsub>
 8017146:	4604      	mov	r4, r0
 8017148:	460d      	mov	r5, r1
 801714a:	4602      	mov	r2, r0
 801714c:	460b      	mov	r3, r1
 801714e:	4640      	mov	r0, r8
 8017150:	4649      	mov	r1, r9
 8017152:	f7e9 fa71 	bl	8000638 <__aeabi_dmul>
 8017156:	2200      	movs	r2, #0
 8017158:	ec41 0b19 	vmov	d9, r0, r1
 801715c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017160:	4620      	mov	r0, r4
 8017162:	4629      	mov	r1, r5
 8017164:	f7e9 f8b0 	bl	80002c8 <__aeabi_dsub>
 8017168:	4602      	mov	r2, r0
 801716a:	460b      	mov	r3, r1
 801716c:	ec51 0b19 	vmov	r0, r1, d9
 8017170:	f7e9 fb8c 	bl	800088c <__aeabi_ddiv>
 8017174:	4632      	mov	r2, r6
 8017176:	4604      	mov	r4, r0
 8017178:	460d      	mov	r5, r1
 801717a:	463b      	mov	r3, r7
 801717c:	4640      	mov	r0, r8
 801717e:	4649      	mov	r1, r9
 8017180:	f7e9 fa5a 	bl	8000638 <__aeabi_dmul>
 8017184:	4632      	mov	r2, r6
 8017186:	463b      	mov	r3, r7
 8017188:	f7e9 f8a0 	bl	80002cc <__adddf3>
 801718c:	4602      	mov	r2, r0
 801718e:	460b      	mov	r3, r1
 8017190:	4620      	mov	r0, r4
 8017192:	4629      	mov	r1, r5
 8017194:	f7e9 f898 	bl	80002c8 <__aeabi_dsub>
 8017198:	4642      	mov	r2, r8
 801719a:	464b      	mov	r3, r9
 801719c:	f7e9 f894 	bl	80002c8 <__aeabi_dsub>
 80171a0:	460b      	mov	r3, r1
 80171a2:	4602      	mov	r2, r0
 80171a4:	493a      	ldr	r1, [pc, #232]	; (8017290 <__ieee754_pow+0xa48>)
 80171a6:	2000      	movs	r0, #0
 80171a8:	f7e9 f88e 	bl	80002c8 <__aeabi_dsub>
 80171ac:	ec41 0b10 	vmov	d0, r0, r1
 80171b0:	ee10 3a90 	vmov	r3, s1
 80171b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80171b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80171bc:	da2b      	bge.n	8017216 <__ieee754_pow+0x9ce>
 80171be:	4650      	mov	r0, sl
 80171c0:	f000 fb0a 	bl	80177d8 <scalbn>
 80171c4:	ec51 0b10 	vmov	r0, r1, d0
 80171c8:	ec53 2b18 	vmov	r2, r3, d8
 80171cc:	f7ff bbed 	b.w	80169aa <__ieee754_pow+0x162>
 80171d0:	4b30      	ldr	r3, [pc, #192]	; (8017294 <__ieee754_pow+0xa4c>)
 80171d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80171d6:	429e      	cmp	r6, r3
 80171d8:	f77f af0c 	ble.w	8016ff4 <__ieee754_pow+0x7ac>
 80171dc:	4b2e      	ldr	r3, [pc, #184]	; (8017298 <__ieee754_pow+0xa50>)
 80171de:	440b      	add	r3, r1
 80171e0:	4303      	orrs	r3, r0
 80171e2:	d009      	beq.n	80171f8 <__ieee754_pow+0x9b0>
 80171e4:	ec51 0b18 	vmov	r0, r1, d8
 80171e8:	2200      	movs	r2, #0
 80171ea:	2300      	movs	r3, #0
 80171ec:	f7e9 fc96 	bl	8000b1c <__aeabi_dcmplt>
 80171f0:	3800      	subs	r0, #0
 80171f2:	bf18      	it	ne
 80171f4:	2001      	movne	r0, #1
 80171f6:	e447      	b.n	8016a88 <__ieee754_pow+0x240>
 80171f8:	4622      	mov	r2, r4
 80171fa:	462b      	mov	r3, r5
 80171fc:	f7e9 f864 	bl	80002c8 <__aeabi_dsub>
 8017200:	4642      	mov	r2, r8
 8017202:	464b      	mov	r3, r9
 8017204:	f7e9 fc9e 	bl	8000b44 <__aeabi_dcmpge>
 8017208:	2800      	cmp	r0, #0
 801720a:	f43f aef3 	beq.w	8016ff4 <__ieee754_pow+0x7ac>
 801720e:	e7e9      	b.n	80171e4 <__ieee754_pow+0x99c>
 8017210:	f04f 0a00 	mov.w	sl, #0
 8017214:	e71a      	b.n	801704c <__ieee754_pow+0x804>
 8017216:	ec51 0b10 	vmov	r0, r1, d0
 801721a:	4619      	mov	r1, r3
 801721c:	e7d4      	b.n	80171c8 <__ieee754_pow+0x980>
 801721e:	491c      	ldr	r1, [pc, #112]	; (8017290 <__ieee754_pow+0xa48>)
 8017220:	2000      	movs	r0, #0
 8017222:	f7ff bb30 	b.w	8016886 <__ieee754_pow+0x3e>
 8017226:	2000      	movs	r0, #0
 8017228:	2100      	movs	r1, #0
 801722a:	f7ff bb2c 	b.w	8016886 <__ieee754_pow+0x3e>
 801722e:	4630      	mov	r0, r6
 8017230:	4639      	mov	r1, r7
 8017232:	f7ff bb28 	b.w	8016886 <__ieee754_pow+0x3e>
 8017236:	9204      	str	r2, [sp, #16]
 8017238:	f7ff bb7a 	b.w	8016930 <__ieee754_pow+0xe8>
 801723c:	2300      	movs	r3, #0
 801723e:	f7ff bb64 	b.w	801690a <__ieee754_pow+0xc2>
 8017242:	bf00      	nop
 8017244:	f3af 8000 	nop.w
 8017248:	00000000 	.word	0x00000000
 801724c:	3fe62e43 	.word	0x3fe62e43
 8017250:	fefa39ef 	.word	0xfefa39ef
 8017254:	3fe62e42 	.word	0x3fe62e42
 8017258:	0ca86c39 	.word	0x0ca86c39
 801725c:	be205c61 	.word	0xbe205c61
 8017260:	72bea4d0 	.word	0x72bea4d0
 8017264:	3e663769 	.word	0x3e663769
 8017268:	c5d26bf1 	.word	0xc5d26bf1
 801726c:	3ebbbd41 	.word	0x3ebbbd41
 8017270:	af25de2c 	.word	0xaf25de2c
 8017274:	3f11566a 	.word	0x3f11566a
 8017278:	16bebd93 	.word	0x16bebd93
 801727c:	3f66c16c 	.word	0x3f66c16c
 8017280:	5555553e 	.word	0x5555553e
 8017284:	3fc55555 	.word	0x3fc55555
 8017288:	3fe00000 	.word	0x3fe00000
 801728c:	000fffff 	.word	0x000fffff
 8017290:	3ff00000 	.word	0x3ff00000
 8017294:	4090cbff 	.word	0x4090cbff
 8017298:	3f6f3400 	.word	0x3f6f3400
 801729c:	652b82fe 	.word	0x652b82fe
 80172a0:	3c971547 	.word	0x3c971547

080172a4 <__ieee754_sqrt>:
 80172a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172a8:	ec55 4b10 	vmov	r4, r5, d0
 80172ac:	4e55      	ldr	r6, [pc, #340]	; (8017404 <__ieee754_sqrt+0x160>)
 80172ae:	43ae      	bics	r6, r5
 80172b0:	ee10 0a10 	vmov	r0, s0
 80172b4:	ee10 3a10 	vmov	r3, s0
 80172b8:	462a      	mov	r2, r5
 80172ba:	4629      	mov	r1, r5
 80172bc:	d110      	bne.n	80172e0 <__ieee754_sqrt+0x3c>
 80172be:	ee10 2a10 	vmov	r2, s0
 80172c2:	462b      	mov	r3, r5
 80172c4:	f7e9 f9b8 	bl	8000638 <__aeabi_dmul>
 80172c8:	4602      	mov	r2, r0
 80172ca:	460b      	mov	r3, r1
 80172cc:	4620      	mov	r0, r4
 80172ce:	4629      	mov	r1, r5
 80172d0:	f7e8 fffc 	bl	80002cc <__adddf3>
 80172d4:	4604      	mov	r4, r0
 80172d6:	460d      	mov	r5, r1
 80172d8:	ec45 4b10 	vmov	d0, r4, r5
 80172dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172e0:	2d00      	cmp	r5, #0
 80172e2:	dc10      	bgt.n	8017306 <__ieee754_sqrt+0x62>
 80172e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80172e8:	4330      	orrs	r0, r6
 80172ea:	d0f5      	beq.n	80172d8 <__ieee754_sqrt+0x34>
 80172ec:	b15d      	cbz	r5, 8017306 <__ieee754_sqrt+0x62>
 80172ee:	ee10 2a10 	vmov	r2, s0
 80172f2:	462b      	mov	r3, r5
 80172f4:	ee10 0a10 	vmov	r0, s0
 80172f8:	f7e8 ffe6 	bl	80002c8 <__aeabi_dsub>
 80172fc:	4602      	mov	r2, r0
 80172fe:	460b      	mov	r3, r1
 8017300:	f7e9 fac4 	bl	800088c <__aeabi_ddiv>
 8017304:	e7e6      	b.n	80172d4 <__ieee754_sqrt+0x30>
 8017306:	1512      	asrs	r2, r2, #20
 8017308:	d074      	beq.n	80173f4 <__ieee754_sqrt+0x150>
 801730a:	07d4      	lsls	r4, r2, #31
 801730c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8017310:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8017314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8017318:	bf5e      	ittt	pl
 801731a:	0fda      	lsrpl	r2, r3, #31
 801731c:	005b      	lslpl	r3, r3, #1
 801731e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8017322:	2400      	movs	r4, #0
 8017324:	0fda      	lsrs	r2, r3, #31
 8017326:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801732a:	107f      	asrs	r7, r7, #1
 801732c:	005b      	lsls	r3, r3, #1
 801732e:	2516      	movs	r5, #22
 8017330:	4620      	mov	r0, r4
 8017332:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8017336:	1886      	adds	r6, r0, r2
 8017338:	428e      	cmp	r6, r1
 801733a:	bfde      	ittt	le
 801733c:	1b89      	suble	r1, r1, r6
 801733e:	18b0      	addle	r0, r6, r2
 8017340:	18a4      	addle	r4, r4, r2
 8017342:	0049      	lsls	r1, r1, #1
 8017344:	3d01      	subs	r5, #1
 8017346:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801734a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801734e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017352:	d1f0      	bne.n	8017336 <__ieee754_sqrt+0x92>
 8017354:	462a      	mov	r2, r5
 8017356:	f04f 0e20 	mov.w	lr, #32
 801735a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801735e:	4281      	cmp	r1, r0
 8017360:	eb06 0c05 	add.w	ip, r6, r5
 8017364:	dc02      	bgt.n	801736c <__ieee754_sqrt+0xc8>
 8017366:	d113      	bne.n	8017390 <__ieee754_sqrt+0xec>
 8017368:	459c      	cmp	ip, r3
 801736a:	d811      	bhi.n	8017390 <__ieee754_sqrt+0xec>
 801736c:	f1bc 0f00 	cmp.w	ip, #0
 8017370:	eb0c 0506 	add.w	r5, ip, r6
 8017374:	da43      	bge.n	80173fe <__ieee754_sqrt+0x15a>
 8017376:	2d00      	cmp	r5, #0
 8017378:	db41      	blt.n	80173fe <__ieee754_sqrt+0x15a>
 801737a:	f100 0801 	add.w	r8, r0, #1
 801737e:	1a09      	subs	r1, r1, r0
 8017380:	459c      	cmp	ip, r3
 8017382:	bf88      	it	hi
 8017384:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8017388:	eba3 030c 	sub.w	r3, r3, ip
 801738c:	4432      	add	r2, r6
 801738e:	4640      	mov	r0, r8
 8017390:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8017394:	f1be 0e01 	subs.w	lr, lr, #1
 8017398:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801739c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80173a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80173a4:	d1db      	bne.n	801735e <__ieee754_sqrt+0xba>
 80173a6:	430b      	orrs	r3, r1
 80173a8:	d006      	beq.n	80173b8 <__ieee754_sqrt+0x114>
 80173aa:	1c50      	adds	r0, r2, #1
 80173ac:	bf13      	iteet	ne
 80173ae:	3201      	addne	r2, #1
 80173b0:	3401      	addeq	r4, #1
 80173b2:	4672      	moveq	r2, lr
 80173b4:	f022 0201 	bicne.w	r2, r2, #1
 80173b8:	1063      	asrs	r3, r4, #1
 80173ba:	0852      	lsrs	r2, r2, #1
 80173bc:	07e1      	lsls	r1, r4, #31
 80173be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80173c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80173c6:	bf48      	it	mi
 80173c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80173cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80173d0:	4614      	mov	r4, r2
 80173d2:	e781      	b.n	80172d8 <__ieee754_sqrt+0x34>
 80173d4:	0ad9      	lsrs	r1, r3, #11
 80173d6:	3815      	subs	r0, #21
 80173d8:	055b      	lsls	r3, r3, #21
 80173da:	2900      	cmp	r1, #0
 80173dc:	d0fa      	beq.n	80173d4 <__ieee754_sqrt+0x130>
 80173de:	02cd      	lsls	r5, r1, #11
 80173e0:	d50a      	bpl.n	80173f8 <__ieee754_sqrt+0x154>
 80173e2:	f1c2 0420 	rsb	r4, r2, #32
 80173e6:	fa23 f404 	lsr.w	r4, r3, r4
 80173ea:	1e55      	subs	r5, r2, #1
 80173ec:	4093      	lsls	r3, r2
 80173ee:	4321      	orrs	r1, r4
 80173f0:	1b42      	subs	r2, r0, r5
 80173f2:	e78a      	b.n	801730a <__ieee754_sqrt+0x66>
 80173f4:	4610      	mov	r0, r2
 80173f6:	e7f0      	b.n	80173da <__ieee754_sqrt+0x136>
 80173f8:	0049      	lsls	r1, r1, #1
 80173fa:	3201      	adds	r2, #1
 80173fc:	e7ef      	b.n	80173de <__ieee754_sqrt+0x13a>
 80173fe:	4680      	mov	r8, r0
 8017400:	e7bd      	b.n	801737e <__ieee754_sqrt+0xda>
 8017402:	bf00      	nop
 8017404:	7ff00000 	.word	0x7ff00000

08017408 <__ieee754_sqrtf>:
 8017408:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801740c:	4770      	bx	lr

0801740e <with_errno>:
 801740e:	b570      	push	{r4, r5, r6, lr}
 8017410:	4604      	mov	r4, r0
 8017412:	460d      	mov	r5, r1
 8017414:	4616      	mov	r6, r2
 8017416:	f7f9 fab9 	bl	801098c <__errno>
 801741a:	4629      	mov	r1, r5
 801741c:	6006      	str	r6, [r0, #0]
 801741e:	4620      	mov	r0, r4
 8017420:	bd70      	pop	{r4, r5, r6, pc}

08017422 <xflow>:
 8017422:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017424:	4614      	mov	r4, r2
 8017426:	461d      	mov	r5, r3
 8017428:	b108      	cbz	r0, 801742e <xflow+0xc>
 801742a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801742e:	e9cd 2300 	strd	r2, r3, [sp]
 8017432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017436:	4620      	mov	r0, r4
 8017438:	4629      	mov	r1, r5
 801743a:	f7e9 f8fd 	bl	8000638 <__aeabi_dmul>
 801743e:	2222      	movs	r2, #34	; 0x22
 8017440:	b003      	add	sp, #12
 8017442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017446:	f7ff bfe2 	b.w	801740e <with_errno>

0801744a <__math_uflow>:
 801744a:	b508      	push	{r3, lr}
 801744c:	2200      	movs	r2, #0
 801744e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017452:	f7ff ffe6 	bl	8017422 <xflow>
 8017456:	ec41 0b10 	vmov	d0, r0, r1
 801745a:	bd08      	pop	{r3, pc}

0801745c <__math_oflow>:
 801745c:	b508      	push	{r3, lr}
 801745e:	2200      	movs	r2, #0
 8017460:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017464:	f7ff ffdd 	bl	8017422 <xflow>
 8017468:	ec41 0b10 	vmov	d0, r0, r1
 801746c:	bd08      	pop	{r3, pc}
	...

08017470 <atan>:
 8017470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017474:	ec55 4b10 	vmov	r4, r5, d0
 8017478:	4bc3      	ldr	r3, [pc, #780]	; (8017788 <atan+0x318>)
 801747a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801747e:	429e      	cmp	r6, r3
 8017480:	46ab      	mov	fp, r5
 8017482:	dd18      	ble.n	80174b6 <atan+0x46>
 8017484:	4bc1      	ldr	r3, [pc, #772]	; (801778c <atan+0x31c>)
 8017486:	429e      	cmp	r6, r3
 8017488:	dc01      	bgt.n	801748e <atan+0x1e>
 801748a:	d109      	bne.n	80174a0 <atan+0x30>
 801748c:	b144      	cbz	r4, 80174a0 <atan+0x30>
 801748e:	4622      	mov	r2, r4
 8017490:	462b      	mov	r3, r5
 8017492:	4620      	mov	r0, r4
 8017494:	4629      	mov	r1, r5
 8017496:	f7e8 ff19 	bl	80002cc <__adddf3>
 801749a:	4604      	mov	r4, r0
 801749c:	460d      	mov	r5, r1
 801749e:	e006      	b.n	80174ae <atan+0x3e>
 80174a0:	f1bb 0f00 	cmp.w	fp, #0
 80174a4:	f300 8131 	bgt.w	801770a <atan+0x29a>
 80174a8:	a59b      	add	r5, pc, #620	; (adr r5, 8017718 <atan+0x2a8>)
 80174aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80174ae:	ec45 4b10 	vmov	d0, r4, r5
 80174b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b6:	4bb6      	ldr	r3, [pc, #728]	; (8017790 <atan+0x320>)
 80174b8:	429e      	cmp	r6, r3
 80174ba:	dc14      	bgt.n	80174e6 <atan+0x76>
 80174bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80174c0:	429e      	cmp	r6, r3
 80174c2:	dc0d      	bgt.n	80174e0 <atan+0x70>
 80174c4:	a396      	add	r3, pc, #600	; (adr r3, 8017720 <atan+0x2b0>)
 80174c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ca:	ee10 0a10 	vmov	r0, s0
 80174ce:	4629      	mov	r1, r5
 80174d0:	f7e8 fefc 	bl	80002cc <__adddf3>
 80174d4:	4baf      	ldr	r3, [pc, #700]	; (8017794 <atan+0x324>)
 80174d6:	2200      	movs	r2, #0
 80174d8:	f7e9 fb3e 	bl	8000b58 <__aeabi_dcmpgt>
 80174dc:	2800      	cmp	r0, #0
 80174de:	d1e6      	bne.n	80174ae <atan+0x3e>
 80174e0:	f04f 3aff 	mov.w	sl, #4294967295
 80174e4:	e02b      	b.n	801753e <atan+0xce>
 80174e6:	f000 f963 	bl	80177b0 <fabs>
 80174ea:	4bab      	ldr	r3, [pc, #684]	; (8017798 <atan+0x328>)
 80174ec:	429e      	cmp	r6, r3
 80174ee:	ec55 4b10 	vmov	r4, r5, d0
 80174f2:	f300 80bf 	bgt.w	8017674 <atan+0x204>
 80174f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80174fa:	429e      	cmp	r6, r3
 80174fc:	f300 80a0 	bgt.w	8017640 <atan+0x1d0>
 8017500:	ee10 2a10 	vmov	r2, s0
 8017504:	ee10 0a10 	vmov	r0, s0
 8017508:	462b      	mov	r3, r5
 801750a:	4629      	mov	r1, r5
 801750c:	f7e8 fede 	bl	80002cc <__adddf3>
 8017510:	4ba0      	ldr	r3, [pc, #640]	; (8017794 <atan+0x324>)
 8017512:	2200      	movs	r2, #0
 8017514:	f7e8 fed8 	bl	80002c8 <__aeabi_dsub>
 8017518:	2200      	movs	r2, #0
 801751a:	4606      	mov	r6, r0
 801751c:	460f      	mov	r7, r1
 801751e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017522:	4620      	mov	r0, r4
 8017524:	4629      	mov	r1, r5
 8017526:	f7e8 fed1 	bl	80002cc <__adddf3>
 801752a:	4602      	mov	r2, r0
 801752c:	460b      	mov	r3, r1
 801752e:	4630      	mov	r0, r6
 8017530:	4639      	mov	r1, r7
 8017532:	f7e9 f9ab 	bl	800088c <__aeabi_ddiv>
 8017536:	f04f 0a00 	mov.w	sl, #0
 801753a:	4604      	mov	r4, r0
 801753c:	460d      	mov	r5, r1
 801753e:	4622      	mov	r2, r4
 8017540:	462b      	mov	r3, r5
 8017542:	4620      	mov	r0, r4
 8017544:	4629      	mov	r1, r5
 8017546:	f7e9 f877 	bl	8000638 <__aeabi_dmul>
 801754a:	4602      	mov	r2, r0
 801754c:	460b      	mov	r3, r1
 801754e:	4680      	mov	r8, r0
 8017550:	4689      	mov	r9, r1
 8017552:	f7e9 f871 	bl	8000638 <__aeabi_dmul>
 8017556:	a374      	add	r3, pc, #464	; (adr r3, 8017728 <atan+0x2b8>)
 8017558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801755c:	4606      	mov	r6, r0
 801755e:	460f      	mov	r7, r1
 8017560:	f7e9 f86a 	bl	8000638 <__aeabi_dmul>
 8017564:	a372      	add	r3, pc, #456	; (adr r3, 8017730 <atan+0x2c0>)
 8017566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756a:	f7e8 feaf 	bl	80002cc <__adddf3>
 801756e:	4632      	mov	r2, r6
 8017570:	463b      	mov	r3, r7
 8017572:	f7e9 f861 	bl	8000638 <__aeabi_dmul>
 8017576:	a370      	add	r3, pc, #448	; (adr r3, 8017738 <atan+0x2c8>)
 8017578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757c:	f7e8 fea6 	bl	80002cc <__adddf3>
 8017580:	4632      	mov	r2, r6
 8017582:	463b      	mov	r3, r7
 8017584:	f7e9 f858 	bl	8000638 <__aeabi_dmul>
 8017588:	a36d      	add	r3, pc, #436	; (adr r3, 8017740 <atan+0x2d0>)
 801758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801758e:	f7e8 fe9d 	bl	80002cc <__adddf3>
 8017592:	4632      	mov	r2, r6
 8017594:	463b      	mov	r3, r7
 8017596:	f7e9 f84f 	bl	8000638 <__aeabi_dmul>
 801759a:	a36b      	add	r3, pc, #428	; (adr r3, 8017748 <atan+0x2d8>)
 801759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a0:	f7e8 fe94 	bl	80002cc <__adddf3>
 80175a4:	4632      	mov	r2, r6
 80175a6:	463b      	mov	r3, r7
 80175a8:	f7e9 f846 	bl	8000638 <__aeabi_dmul>
 80175ac:	a368      	add	r3, pc, #416	; (adr r3, 8017750 <atan+0x2e0>)
 80175ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b2:	f7e8 fe8b 	bl	80002cc <__adddf3>
 80175b6:	4642      	mov	r2, r8
 80175b8:	464b      	mov	r3, r9
 80175ba:	f7e9 f83d 	bl	8000638 <__aeabi_dmul>
 80175be:	a366      	add	r3, pc, #408	; (adr r3, 8017758 <atan+0x2e8>)
 80175c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c4:	4680      	mov	r8, r0
 80175c6:	4689      	mov	r9, r1
 80175c8:	4630      	mov	r0, r6
 80175ca:	4639      	mov	r1, r7
 80175cc:	f7e9 f834 	bl	8000638 <__aeabi_dmul>
 80175d0:	a363      	add	r3, pc, #396	; (adr r3, 8017760 <atan+0x2f0>)
 80175d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d6:	f7e8 fe77 	bl	80002c8 <__aeabi_dsub>
 80175da:	4632      	mov	r2, r6
 80175dc:	463b      	mov	r3, r7
 80175de:	f7e9 f82b 	bl	8000638 <__aeabi_dmul>
 80175e2:	a361      	add	r3, pc, #388	; (adr r3, 8017768 <atan+0x2f8>)
 80175e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e8:	f7e8 fe6e 	bl	80002c8 <__aeabi_dsub>
 80175ec:	4632      	mov	r2, r6
 80175ee:	463b      	mov	r3, r7
 80175f0:	f7e9 f822 	bl	8000638 <__aeabi_dmul>
 80175f4:	a35e      	add	r3, pc, #376	; (adr r3, 8017770 <atan+0x300>)
 80175f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fa:	f7e8 fe65 	bl	80002c8 <__aeabi_dsub>
 80175fe:	4632      	mov	r2, r6
 8017600:	463b      	mov	r3, r7
 8017602:	f7e9 f819 	bl	8000638 <__aeabi_dmul>
 8017606:	a35c      	add	r3, pc, #368	; (adr r3, 8017778 <atan+0x308>)
 8017608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801760c:	f7e8 fe5c 	bl	80002c8 <__aeabi_dsub>
 8017610:	4632      	mov	r2, r6
 8017612:	463b      	mov	r3, r7
 8017614:	f7e9 f810 	bl	8000638 <__aeabi_dmul>
 8017618:	4602      	mov	r2, r0
 801761a:	460b      	mov	r3, r1
 801761c:	4640      	mov	r0, r8
 801761e:	4649      	mov	r1, r9
 8017620:	f7e8 fe54 	bl	80002cc <__adddf3>
 8017624:	4622      	mov	r2, r4
 8017626:	462b      	mov	r3, r5
 8017628:	f7e9 f806 	bl	8000638 <__aeabi_dmul>
 801762c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017630:	4602      	mov	r2, r0
 8017632:	460b      	mov	r3, r1
 8017634:	d14b      	bne.n	80176ce <atan+0x25e>
 8017636:	4620      	mov	r0, r4
 8017638:	4629      	mov	r1, r5
 801763a:	f7e8 fe45 	bl	80002c8 <__aeabi_dsub>
 801763e:	e72c      	b.n	801749a <atan+0x2a>
 8017640:	ee10 0a10 	vmov	r0, s0
 8017644:	4b53      	ldr	r3, [pc, #332]	; (8017794 <atan+0x324>)
 8017646:	2200      	movs	r2, #0
 8017648:	4629      	mov	r1, r5
 801764a:	f7e8 fe3d 	bl	80002c8 <__aeabi_dsub>
 801764e:	4b51      	ldr	r3, [pc, #324]	; (8017794 <atan+0x324>)
 8017650:	4606      	mov	r6, r0
 8017652:	460f      	mov	r7, r1
 8017654:	2200      	movs	r2, #0
 8017656:	4620      	mov	r0, r4
 8017658:	4629      	mov	r1, r5
 801765a:	f7e8 fe37 	bl	80002cc <__adddf3>
 801765e:	4602      	mov	r2, r0
 8017660:	460b      	mov	r3, r1
 8017662:	4630      	mov	r0, r6
 8017664:	4639      	mov	r1, r7
 8017666:	f7e9 f911 	bl	800088c <__aeabi_ddiv>
 801766a:	f04f 0a01 	mov.w	sl, #1
 801766e:	4604      	mov	r4, r0
 8017670:	460d      	mov	r5, r1
 8017672:	e764      	b.n	801753e <atan+0xce>
 8017674:	4b49      	ldr	r3, [pc, #292]	; (801779c <atan+0x32c>)
 8017676:	429e      	cmp	r6, r3
 8017678:	da1d      	bge.n	80176b6 <atan+0x246>
 801767a:	ee10 0a10 	vmov	r0, s0
 801767e:	4b48      	ldr	r3, [pc, #288]	; (80177a0 <atan+0x330>)
 8017680:	2200      	movs	r2, #0
 8017682:	4629      	mov	r1, r5
 8017684:	f7e8 fe20 	bl	80002c8 <__aeabi_dsub>
 8017688:	4b45      	ldr	r3, [pc, #276]	; (80177a0 <atan+0x330>)
 801768a:	4606      	mov	r6, r0
 801768c:	460f      	mov	r7, r1
 801768e:	2200      	movs	r2, #0
 8017690:	4620      	mov	r0, r4
 8017692:	4629      	mov	r1, r5
 8017694:	f7e8 ffd0 	bl	8000638 <__aeabi_dmul>
 8017698:	4b3e      	ldr	r3, [pc, #248]	; (8017794 <atan+0x324>)
 801769a:	2200      	movs	r2, #0
 801769c:	f7e8 fe16 	bl	80002cc <__adddf3>
 80176a0:	4602      	mov	r2, r0
 80176a2:	460b      	mov	r3, r1
 80176a4:	4630      	mov	r0, r6
 80176a6:	4639      	mov	r1, r7
 80176a8:	f7e9 f8f0 	bl	800088c <__aeabi_ddiv>
 80176ac:	f04f 0a02 	mov.w	sl, #2
 80176b0:	4604      	mov	r4, r0
 80176b2:	460d      	mov	r5, r1
 80176b4:	e743      	b.n	801753e <atan+0xce>
 80176b6:	462b      	mov	r3, r5
 80176b8:	ee10 2a10 	vmov	r2, s0
 80176bc:	4939      	ldr	r1, [pc, #228]	; (80177a4 <atan+0x334>)
 80176be:	2000      	movs	r0, #0
 80176c0:	f7e9 f8e4 	bl	800088c <__aeabi_ddiv>
 80176c4:	f04f 0a03 	mov.w	sl, #3
 80176c8:	4604      	mov	r4, r0
 80176ca:	460d      	mov	r5, r1
 80176cc:	e737      	b.n	801753e <atan+0xce>
 80176ce:	4b36      	ldr	r3, [pc, #216]	; (80177a8 <atan+0x338>)
 80176d0:	4e36      	ldr	r6, [pc, #216]	; (80177ac <atan+0x33c>)
 80176d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80176d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80176da:	e9da 2300 	ldrd	r2, r3, [sl]
 80176de:	f7e8 fdf3 	bl	80002c8 <__aeabi_dsub>
 80176e2:	4622      	mov	r2, r4
 80176e4:	462b      	mov	r3, r5
 80176e6:	f7e8 fdef 	bl	80002c8 <__aeabi_dsub>
 80176ea:	4602      	mov	r2, r0
 80176ec:	460b      	mov	r3, r1
 80176ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80176f2:	f7e8 fde9 	bl	80002c8 <__aeabi_dsub>
 80176f6:	f1bb 0f00 	cmp.w	fp, #0
 80176fa:	4604      	mov	r4, r0
 80176fc:	460d      	mov	r5, r1
 80176fe:	f6bf aed6 	bge.w	80174ae <atan+0x3e>
 8017702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017706:	461d      	mov	r5, r3
 8017708:	e6d1      	b.n	80174ae <atan+0x3e>
 801770a:	a51d      	add	r5, pc, #116	; (adr r5, 8017780 <atan+0x310>)
 801770c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017710:	e6cd      	b.n	80174ae <atan+0x3e>
 8017712:	bf00      	nop
 8017714:	f3af 8000 	nop.w
 8017718:	54442d18 	.word	0x54442d18
 801771c:	bff921fb 	.word	0xbff921fb
 8017720:	8800759c 	.word	0x8800759c
 8017724:	7e37e43c 	.word	0x7e37e43c
 8017728:	e322da11 	.word	0xe322da11
 801772c:	3f90ad3a 	.word	0x3f90ad3a
 8017730:	24760deb 	.word	0x24760deb
 8017734:	3fa97b4b 	.word	0x3fa97b4b
 8017738:	a0d03d51 	.word	0xa0d03d51
 801773c:	3fb10d66 	.word	0x3fb10d66
 8017740:	c54c206e 	.word	0xc54c206e
 8017744:	3fb745cd 	.word	0x3fb745cd
 8017748:	920083ff 	.word	0x920083ff
 801774c:	3fc24924 	.word	0x3fc24924
 8017750:	5555550d 	.word	0x5555550d
 8017754:	3fd55555 	.word	0x3fd55555
 8017758:	2c6a6c2f 	.word	0x2c6a6c2f
 801775c:	bfa2b444 	.word	0xbfa2b444
 8017760:	52defd9a 	.word	0x52defd9a
 8017764:	3fadde2d 	.word	0x3fadde2d
 8017768:	af749a6d 	.word	0xaf749a6d
 801776c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017770:	fe231671 	.word	0xfe231671
 8017774:	3fbc71c6 	.word	0x3fbc71c6
 8017778:	9998ebc4 	.word	0x9998ebc4
 801777c:	3fc99999 	.word	0x3fc99999
 8017780:	54442d18 	.word	0x54442d18
 8017784:	3ff921fb 	.word	0x3ff921fb
 8017788:	440fffff 	.word	0x440fffff
 801778c:	7ff00000 	.word	0x7ff00000
 8017790:	3fdbffff 	.word	0x3fdbffff
 8017794:	3ff00000 	.word	0x3ff00000
 8017798:	3ff2ffff 	.word	0x3ff2ffff
 801779c:	40038000 	.word	0x40038000
 80177a0:	3ff80000 	.word	0x3ff80000
 80177a4:	bff00000 	.word	0xbff00000
 80177a8:	080185a8 	.word	0x080185a8
 80177ac:	08018588 	.word	0x08018588

080177b0 <fabs>:
 80177b0:	ec51 0b10 	vmov	r0, r1, d0
 80177b4:	ee10 2a10 	vmov	r2, s0
 80177b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80177bc:	ec43 2b10 	vmov	d0, r2, r3
 80177c0:	4770      	bx	lr

080177c2 <finite>:
 80177c2:	b082      	sub	sp, #8
 80177c4:	ed8d 0b00 	vstr	d0, [sp]
 80177c8:	9801      	ldr	r0, [sp, #4]
 80177ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80177ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80177d2:	0fc0      	lsrs	r0, r0, #31
 80177d4:	b002      	add	sp, #8
 80177d6:	4770      	bx	lr

080177d8 <scalbn>:
 80177d8:	b570      	push	{r4, r5, r6, lr}
 80177da:	ec55 4b10 	vmov	r4, r5, d0
 80177de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80177e2:	4606      	mov	r6, r0
 80177e4:	462b      	mov	r3, r5
 80177e6:	b99a      	cbnz	r2, 8017810 <scalbn+0x38>
 80177e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80177ec:	4323      	orrs	r3, r4
 80177ee:	d036      	beq.n	801785e <scalbn+0x86>
 80177f0:	4b39      	ldr	r3, [pc, #228]	; (80178d8 <scalbn+0x100>)
 80177f2:	4629      	mov	r1, r5
 80177f4:	ee10 0a10 	vmov	r0, s0
 80177f8:	2200      	movs	r2, #0
 80177fa:	f7e8 ff1d 	bl	8000638 <__aeabi_dmul>
 80177fe:	4b37      	ldr	r3, [pc, #220]	; (80178dc <scalbn+0x104>)
 8017800:	429e      	cmp	r6, r3
 8017802:	4604      	mov	r4, r0
 8017804:	460d      	mov	r5, r1
 8017806:	da10      	bge.n	801782a <scalbn+0x52>
 8017808:	a32b      	add	r3, pc, #172	; (adr r3, 80178b8 <scalbn+0xe0>)
 801780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801780e:	e03a      	b.n	8017886 <scalbn+0xae>
 8017810:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017814:	428a      	cmp	r2, r1
 8017816:	d10c      	bne.n	8017832 <scalbn+0x5a>
 8017818:	ee10 2a10 	vmov	r2, s0
 801781c:	4620      	mov	r0, r4
 801781e:	4629      	mov	r1, r5
 8017820:	f7e8 fd54 	bl	80002cc <__adddf3>
 8017824:	4604      	mov	r4, r0
 8017826:	460d      	mov	r5, r1
 8017828:	e019      	b.n	801785e <scalbn+0x86>
 801782a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801782e:	460b      	mov	r3, r1
 8017830:	3a36      	subs	r2, #54	; 0x36
 8017832:	4432      	add	r2, r6
 8017834:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017838:	428a      	cmp	r2, r1
 801783a:	dd08      	ble.n	801784e <scalbn+0x76>
 801783c:	2d00      	cmp	r5, #0
 801783e:	a120      	add	r1, pc, #128	; (adr r1, 80178c0 <scalbn+0xe8>)
 8017840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017844:	da1c      	bge.n	8017880 <scalbn+0xa8>
 8017846:	a120      	add	r1, pc, #128	; (adr r1, 80178c8 <scalbn+0xf0>)
 8017848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801784c:	e018      	b.n	8017880 <scalbn+0xa8>
 801784e:	2a00      	cmp	r2, #0
 8017850:	dd08      	ble.n	8017864 <scalbn+0x8c>
 8017852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801785a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801785e:	ec45 4b10 	vmov	d0, r4, r5
 8017862:	bd70      	pop	{r4, r5, r6, pc}
 8017864:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017868:	da19      	bge.n	801789e <scalbn+0xc6>
 801786a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801786e:	429e      	cmp	r6, r3
 8017870:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8017874:	dd0a      	ble.n	801788c <scalbn+0xb4>
 8017876:	a112      	add	r1, pc, #72	; (adr r1, 80178c0 <scalbn+0xe8>)
 8017878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1e2      	bne.n	8017846 <scalbn+0x6e>
 8017880:	a30f      	add	r3, pc, #60	; (adr r3, 80178c0 <scalbn+0xe8>)
 8017882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017886:	f7e8 fed7 	bl	8000638 <__aeabi_dmul>
 801788a:	e7cb      	b.n	8017824 <scalbn+0x4c>
 801788c:	a10a      	add	r1, pc, #40	; (adr r1, 80178b8 <scalbn+0xe0>)
 801788e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d0b8      	beq.n	8017808 <scalbn+0x30>
 8017896:	a10e      	add	r1, pc, #56	; (adr r1, 80178d0 <scalbn+0xf8>)
 8017898:	e9d1 0100 	ldrd	r0, r1, [r1]
 801789c:	e7b4      	b.n	8017808 <scalbn+0x30>
 801789e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80178a2:	3236      	adds	r2, #54	; 0x36
 80178a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80178a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80178ac:	4620      	mov	r0, r4
 80178ae:	4b0c      	ldr	r3, [pc, #48]	; (80178e0 <scalbn+0x108>)
 80178b0:	2200      	movs	r2, #0
 80178b2:	e7e8      	b.n	8017886 <scalbn+0xae>
 80178b4:	f3af 8000 	nop.w
 80178b8:	c2f8f359 	.word	0xc2f8f359
 80178bc:	01a56e1f 	.word	0x01a56e1f
 80178c0:	8800759c 	.word	0x8800759c
 80178c4:	7e37e43c 	.word	0x7e37e43c
 80178c8:	8800759c 	.word	0x8800759c
 80178cc:	fe37e43c 	.word	0xfe37e43c
 80178d0:	c2f8f359 	.word	0xc2f8f359
 80178d4:	81a56e1f 	.word	0x81a56e1f
 80178d8:	43500000 	.word	0x43500000
 80178dc:	ffff3cb0 	.word	0xffff3cb0
 80178e0:	3c900000 	.word	0x3c900000

080178e4 <_init>:
 80178e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178e6:	bf00      	nop
 80178e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178ea:	bc08      	pop	{r3}
 80178ec:	469e      	mov	lr, r3
 80178ee:	4770      	bx	lr

080178f0 <_fini>:
 80178f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178f2:	bf00      	nop
 80178f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80178f6:	bc08      	pop	{r3}
 80178f8:	469e      	mov	lr, r3
 80178fa:	4770      	bx	lr
