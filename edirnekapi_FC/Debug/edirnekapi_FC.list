
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  080110e0  080110e0  000210e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011708  08011708  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011708  08011708  00021708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011710  08011710  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011710  08011710  00021710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011714  08011714  00021714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011718  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f90  200001e8  08011900  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001178  08011900  00031178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014660  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003178  00000000  00000000  00044878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000479f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00048828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026147  00000000  00000000  00049530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f71  00000000  00000000  0006f677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba1b  00000000  00000000  000855e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056fc  00000000  00000000  00161054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080110c4 	.word	0x080110c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080110c4 	.word	0x080110c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <buzz>:
uint8_t buffer_alg[100];



static void buzz()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <buzz+0x28>)
 80012fe:	f005 fdc6 	bl	8006e8e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f004 f93c 	bl	8005580 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <buzz+0x28>)
 800130e:	f005 fdbe 	bl	8006e8e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f004 f934 	bl	8005580 <HAL_Delay>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40020400 	.word	0x40020400

08001320 <sqr>:

static double sqr(double nmbr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 800132a:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001350 <sqr+0x30>
 800132e:	ed97 0b00 	vldr	d0, [r7]
 8001332:	f00e f87d 	bl	800f430 <pow>
 8001336:	eeb0 7a40 	vmov.f32	s14, s0
 800133a:	eef0 7a60 	vmov.f32	s15, s1
}
 800133e:	eeb0 0a47 	vmov.f32	s0, s14
 8001342:	eef0 0a67 	vmov.f32	s1, s15
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	f3af 8000 	nop.w
 8001350:	00000000 	.word	0x00000000
 8001354:	40000000 	.word	0x40000000

08001358 <algorithm_2_update>:
  }
}


void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI, float angle)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f90b 	bl	8000588 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	ec43 2b10 	vmov	d0, r2, r3
 800137a:	f7ff ffd1 	bl	8001320 <sqr>
 800137e:	ec55 4b10 	vmov	r4, r5, d0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8fd 	bl	8000588 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	ec43 2b10 	vmov	d0, r2, r3
 8001396:	f7ff ffc3 	bl	8001320 <sqr>
 800139a:	ec53 2b10 	vmov	r2, r3, d0
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7fe ff93 	bl	80002cc <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8e7 	bl	8000588 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	ec43 2b10 	vmov	d0, r2, r3
 80013c2:	f7ff ffad 	bl	8001320 <sqr>
 80013c6:	ec53 2b10 	vmov	r2, r3, d0
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7fe ff7d 	bl	80002cc <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc25 	bl	8000c28 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	ee00 3a10 	vmov	s0, r3
 80013e4:	f00e f8c0 	bl	800f568 <sqrtf>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
 80013ec:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800162c <algorithm_2_update+0x2d4>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd2f      	ble.n	800145a <algorithm_2_update+0x102>
 80013fa:	4b8d      	ldr	r3, [pc, #564]	; (8001630 <algorithm_2_update+0x2d8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d12b      	bne.n	800145a <algorithm_2_update+0x102>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001408:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001634 <algorithm_2_update+0x2dc>
 800140c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d514      	bpl.n	8001440 <algorithm_2_update+0xe8>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800141c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001638 <algorithm_2_update+0x2e0>
 8001420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd0a      	ble.n	8001440 <algorithm_2_update+0xe8>
			BME->baseAltitude = BME->altitude + BME->baseAltitude;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		}

		isRising_2 = 1;
 8001440:	4b7b      	ldr	r3, [pc, #492]	; (8001630 <algorithm_2_update+0x2d8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : rocketStatus;
 8001446:	4b7d      	ldr	r3, [pc, #500]	; (800163c <algorithm_2_update+0x2e4>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	bf38      	it	cc
 800144e:	2302      	movcc	r3, #2
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b7a      	ldr	r3, [pc, #488]	; (800163c <algorithm_2_update+0x2e4>)
 8001454:	701a      	strb	r2, [r3, #0]
		buzz();
 8001456:	f7ff ff4d 	bl	80012f4 <buzz>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y > BURNOUT_THRESHOLD && isRising_2 == 1 && BMI->rawDatas.isAccelUpdated == 1 && rocketStatus < STAT_MOTOR_BURNOUT)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	dd10      	ble.n	800148c <algorithm_2_update+0x134>
 800146a:	4b71      	ldr	r3, [pc, #452]	; (8001630 <algorithm_2_update+0x2d8>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10c      	bne.n	800148c <algorithm_2_update+0x134>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	7c9b      	ldrb	r3, [r3, #18]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d108      	bne.n	800148c <algorithm_2_update+0x134>
 800147a:	4b70      	ldr	r3, [pc, #448]	; (800163c <algorithm_2_update+0x2e4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d804      	bhi.n	800148c <algorithm_2_update+0x134>
	{
		burnout_counter++;
 8001482:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <algorithm_2_update+0x2e8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a6d      	ldr	r2, [pc, #436]	; (8001640 <algorithm_2_update+0x2e8>)
 800148a:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 800148c:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <algorithm_2_update+0x2e8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b0a      	cmp	r3, #10
 8001492:	d109      	bne.n	80014a8 <algorithm_2_update+0x150>
	{
		rocketStatus = rocketStatus < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : rocketStatus;
 8001494:	4b69      	ldr	r3, [pc, #420]	; (800163c <algorithm_2_update+0x2e4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b03      	cmp	r3, #3
 800149a:	bf38      	it	cc
 800149c:	2303      	movcc	r3, #3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b66      	ldr	r3, [pc, #408]	; (800163c <algorithm_2_update+0x2e4>)
 80014a2:	701a      	strb	r2, [r3, #0]
		buzz();
 80014a4:	f7ff ff26 	bl	80012f4 <buzz>
	}

	//Falling detection || First parachute
	if(angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && BME->altitude > ARMING_ALTITUDE)
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001644 <algorithm_2_update+0x2ec>
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	dd1e      	ble.n	80014f8 <algorithm_2_update+0x1a0>
 80014ba:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <algorithm_2_update+0x2d8>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d11a      	bne.n	80014f8 <algorithm_2_update+0x1a0>
 80014c2:	4b61      	ldr	r3, [pc, #388]	; (8001648 <algorithm_2_update+0x2f0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <algorithm_2_update+0x1a0>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014d0:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	dd0c      	ble.n	80014f8 <algorithm_2_update+0x1a0>
	{
		isFalling_2 = 1;
 80014de:	4b5a      	ldr	r3, [pc, #360]	; (8001648 <algorithm_2_update+0x2f0>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : rocketStatus;
 80014e4:	4b55      	ldr	r3, [pc, #340]	; (800163c <algorithm_2_update+0x2e4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	bf38      	it	cc
 80014ec:	2304      	movcc	r3, #4
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b52      	ldr	r3, [pc, #328]	; (800163c <algorithm_2_update+0x2e4>)
 80014f2:	701a      	strb	r2, [r3, #0]
		buzz();
 80014f4:	f7ff fefe 	bl	80012f4 <buzz>
	}

	//Second Parachute
	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 1 && rocketStatus < STAT_P1_OK_P2_OK)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	d511      	bpl.n	8001530 <algorithm_2_update+0x1d8>
 800150c:	4b4e      	ldr	r3, [pc, #312]	; (8001648 <algorithm_2_update+0x2f0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10d      	bne.n	8001530 <algorithm_2_update+0x1d8>
 8001514:	4b4d      	ldr	r3, [pc, #308]	; (800164c <algorithm_2_update+0x2f4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d109      	bne.n	8001530 <algorithm_2_update+0x1d8>
 800151c:	4b47      	ldr	r3, [pc, #284]	; (800163c <algorithm_2_update+0x2e4>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d805      	bhi.n	8001530 <algorithm_2_update+0x1d8>
	{
		secondP_counter++;
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <algorithm_2_update+0x2f8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <algorithm_2_update+0x2f8>)
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e002      	b.n	8001536 <algorithm_2_update+0x1de>
	}
	else{
		secondP_counter = 0;
 8001530:	4b47      	ldr	r3, [pc, #284]	; (8001650 <algorithm_2_update+0x2f8>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
	}
	if(secondP_counter > 20)
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <algorithm_2_update+0x2f8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b14      	cmp	r3, #20
 800153c:	dd0c      	ble.n	8001558 <algorithm_2_update+0x200>
	{
		rocketStatus = rocketStatus < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : rocketStatus;
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <algorithm_2_update+0x2e4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b05      	cmp	r3, #5
 8001544:	bf38      	it	cc
 8001546:	2305      	movcc	r3, #5
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <algorithm_2_update+0x2e4>)
 800154c:	701a      	strb	r2, [r3, #0]
		is_secondP_OK = 1;
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <algorithm_2_update+0x2f4>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
		buzz();
 8001554:	f7ff fece 	bl	80012f4 <buzz>
	}

	//Touchdown Detection
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && rocketStatus < STAT_TOUCH_DOWN)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 800155e:	eeb0 0a47 	vmov.f32	s0, s14
 8001562:	eef0 0a67 	vmov.f32	s1, s15
 8001566:	f7ff fedb 	bl	8001320 <sqr>
 800156a:	ec55 4b10 	vmov	r4, r5, d0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001574:	eeb0 0a47 	vmov.f32	s0, s14
 8001578:	eef0 0a67 	vmov.f32	s1, s15
 800157c:	f7ff fed0 	bl	8001320 <sqr>
 8001580:	ec53 2b10 	vmov	r2, r3, d0
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7fe fea0 	bl	80002cc <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4614      	mov	r4, r2
 8001592:	461d      	mov	r5, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800159a:	eeb0 0a47 	vmov.f32	s0, s14
 800159e:	eef0 0a67 	vmov.f32	s1, s15
 80015a2:	f7ff febd 	bl	8001320 <sqr>
 80015a6:	ec53 2b10 	vmov	r2, r3, d0
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f7fe fe8d 	bl	80002cc <__adddf3>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ec43 2b17 	vmov	d7, r2, r3
 80015ba:	eeb0 0a47 	vmov.f32	s0, s14
 80015be:	eef0 0a67 	vmov.f32	s1, s15
 80015c2:	f00d ffa5 	bl	800f510 <sqrt>
 80015c6:	ec51 0b10 	vmov	r0, r1, d0
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <algorithm_2_update+0x2fc>)
 80015d0:	f7ff faa4 	bl	8000b1c <__aeabi_dcmplt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d011      	beq.n	80015fe <algorithm_2_update+0x2a6>
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <algorithm_2_update+0x2f0>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10d      	bne.n	80015fe <algorithm_2_update+0x2a6>
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <algorithm_2_update+0x2f4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d109      	bne.n	80015fe <algorithm_2_update+0x2a6>
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <algorithm_2_update+0x2e4>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d805      	bhi.n	80015fe <algorithm_2_update+0x2a6>
	{
			TD_counter++;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <algorithm_2_update+0x300>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <algorithm_2_update+0x300>)
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e002      	b.n	8001604 <algorithm_2_update+0x2ac>
	}
	else{
		TD_counter = 0;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <algorithm_2_update+0x300>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 100)
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <algorithm_2_update+0x300>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	dd0a      	ble.n	8001622 <algorithm_2_update+0x2ca>
	{
		rocketStatus = rocketStatus < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : rocketStatus;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <algorithm_2_update+0x2e4>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b07      	cmp	r3, #7
 8001612:	bf38      	it	cc
 8001614:	2307      	movcc	r3, #7
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <algorithm_2_update+0x2e4>)
 800161a:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			buzz();
 800161c:	f7ff fe6a 	bl	80012f4 <buzz>
 8001620:	e7fc      	b.n	800161c <algorithm_2_update+0x2c4>
		}

	}
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	453b8000 	.word	0x453b8000
 8001630:	2000020d 	.word	0x2000020d
 8001634:	43480000 	.word	0x43480000
 8001638:	c3480000 	.word	0xc3480000
 800163c:	20000004 	.word	0x20000004
 8001640:	20000210 	.word	0x20000210
 8001644:	42a00000 	.word	0x42a00000
 8001648:	2000020c 	.word	0x2000020c
 800164c:	2000020e 	.word	0x2000020e
 8001650:	20000208 	.word	0x20000208
 8001654:	40240000 	.word	0x40240000
 8001658:	20000204 	.word	0x20000204

0800165c <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <bme280_getVals+0xa8>)
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	2364      	movs	r3, #100	; 0x64
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	22f3      	movs	r2, #243	; 0xf3
 8001676:	21ec      	movs	r1, #236	; 0xec
 8001678:	f005 feaa 	bl	80073d0 <HAL_I2C_Mem_Read>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <bme280_getVals+0xac>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 800168a:	793b      	ldrb	r3, [r7, #4]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d032      	beq.n	80016fa <bme280_getVals+0x9e>
	{
		BME->isUpdated = 1;
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <bme280_getVals+0xac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 200);
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <bme280_getVals+0xa8>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	23c8      	movs	r3, #200	; 0xc8
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2308      	movs	r3, #8
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	22f7      	movs	r2, #247	; 0xf7
 80016b2:	21ec      	movs	r1, #236	; 0xec
 80016b4:	f005 fe8c 	bl	80073d0 <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
		BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	031a      	lsls	r2, r3, #12
 80016c0:	7a3b      	ldrb	r3, [r7, #8]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4313      	orrs	r3, r2
 80016c6:	7a7a      	ldrb	r2, [r7, #9]
 80016c8:	0912      	lsrs	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	431a      	orrs	r2, r3
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <bme280_getVals+0xac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
		BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 80016d4:	793b      	ldrb	r3, [r7, #4]
 80016d6:	031a      	lsls	r2, r3, #12
 80016d8:	797b      	ldrb	r3, [r7, #5]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4313      	orrs	r3, r2
 80016de:	79ba      	ldrb	r2, [r7, #6]
 80016e0:	0912      	lsrs	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	431a      	orrs	r2, r3
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <bme280_getVals+0xac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
		BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 80016ec:	7abb      	ldrb	r3, [r7, #10]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	7afa      	ldrb	r2, [r7, #11]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <bme280_getVals+0xac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	UNUSED(retVal);
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000214 	.word	0x20000214
 8001708:	20000218 	.word	0x20000218
 800170c:	00000000 	.word	0x00000000

08001710 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <bme280_get_altitude+0xc0>)
 8001718:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <bme280_get_altitude+0xc4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001722:	edd7 7a01 	vldr	s15, [r7, #4]
 8001726:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800172a:	ee16 0a90 	vmov	r0, s13
 800172e:	f7fe ff2b 	bl	8000588 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80017c0 <bme280_get_altitude+0xb0>
 800173a:	ec43 2b10 	vmov	d0, r2, r3
 800173e:	f00d fe77 	bl	800f430 <pow>
 8001742:	ec53 2b10 	vmov	r2, r3, d0
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	4923      	ldr	r1, [pc, #140]	; (80017d8 <bme280_get_altitude+0xc8>)
 800174c:	f7fe fdbc 	bl	80002c8 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	a31b      	add	r3, pc, #108	; (adr r3, 80017c8 <bme280_get_altitude+0xb8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff6b 	bl	8000638 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fa5d 	bl	8000c28 <__aeabi_d2f>
 800176e:	4603      	mov	r3, r0
 8001770:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - BME->baseAltitude;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <bme280_get_altitude+0xc4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <bme280_get_altitude+0xc4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	ed97 7a00 	vldr	s14, [r7]
 8001782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001786:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	if(BME->altitude > BME->maxAltitude)
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <bme280_get_altitude+0xc4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <bme280_get_altitude+0xc4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800179a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	dc00      	bgt.n	80017a6 <bme280_get_altitude+0x96>
	{
		BME->maxAltitude = BME->altitude;
	}
}
 80017a4:	e005      	b.n	80017b2 <bme280_get_altitude+0xa2>
		BME->maxAltitude = BME->altitude;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <bme280_get_altitude+0xc4>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <bme280_get_altitude+0xc4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	ccd9456c 	.word	0xccd9456c
 80017c4:	3fc85b95 	.word	0x3fc85b95
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40e5a540 	.word	0x40e5a540
 80017d0:	447d5000 	.word	0x447d5000
 80017d4:	20000218 	.word	0x20000218
 80017d8:	3ff00000 	.word	0x3ff00000

080017dc <bme280_init>:

HAL_StatusTypeDef bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme, uint8_t mode, uint8_t OS, uint8_t filter){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b092      	sub	sp, #72	; 0x48
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71bb      	strb	r3, [r7, #6]
	BME = BME_sensor;
 80017f2:	4aab      	ldr	r2, [pc, #684]	; (8001aa0 <bme280_init+0x2c4>)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 80017f8:	4aaa      	ldr	r2, [pc, #680]	; (8001aa4 <bme280_init+0x2c8>)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	6013      	str	r3, [r2, #0]
	BME->baseAltitude = 0.0;
 80017fe:	4ba8      	ldr	r3, [pc, #672]	; (8001aa0 <bme280_init+0x2c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	649a      	str	r2, [r3, #72]	; 0x48

	uint8_t params[25];

	HAL_StatusTypeDef retVal;

	uint8_t resetData = BME280_SOFT_RESET;
 8001808:	23b6      	movs	r3, #182	; 0xb6
 800180a:	74fb      	strb	r3, [r7, #19]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
 800180c:	2332      	movs	r3, #50	; 0x32
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	f107 0313 	add.w	r3, r7, #19
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	22e0      	movs	r2, #224	; 0xe0
 800181e:	21ec      	movs	r1, #236	; 0xec
 8001820:	68b8      	ldr	r0, [r7, #8]
 8001822:	f005 fcdb 	bl	80071dc <HAL_I2C_Mem_Write>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_Delay(50);
 800182c:	2032      	movs	r0, #50	; 0x32
 800182e:	f003 fea7 	bl	8005580 <HAL_Delay>
	HAL_I2C_DeInit(I2C_bme);
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f005 fca2 	bl	800717c <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001838:	2005      	movs	r0, #5
 800183a:	f003 fea1 	bl	8005580 <HAL_Delay>
	HAL_I2C_Init(I2C_bme);
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f005 fb58 	bl	8006ef4 <HAL_I2C_Init>
	HAL_Delay(5);
 8001844:	2005      	movs	r0, #5
 8001846:	f003 fe9b 	bl	8005580 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800184a:	23c8      	movs	r3, #200	; 0xc8
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	2319      	movs	r3, #25
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	2288      	movs	r2, #136	; 0x88
 800185c:	21ec      	movs	r1, #236	; 0xec
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f005 fdb6 	bl	80073d0 <HAL_I2C_Mem_Read>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800186a:	7d3b      	ldrb	r3, [r7, #20]
 800186c:	b299      	uxth	r1, r3
 800186e:	7d7b      	ldrb	r3, [r7, #21]
 8001870:	b29b      	uxth	r3, r3
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b8a      	ldr	r3, [pc, #552]	; (8001aa0 <bme280_init+0x2c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	b292      	uxth	r2, r2
 800187e:	801a      	strh	r2, [r3, #0]
	BME->parameters.dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	b219      	sxth	r1, r3
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b85      	ldr	r3, [pc, #532]	; (8001aa0 <bme280_init+0x2c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	b212      	sxth	r2, r2
 8001892:	805a      	strh	r2, [r3, #2]
	BME->parameters.dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001894:	7e3b      	ldrb	r3, [r7, #24]
 8001896:	b219      	sxth	r1, r3
 8001898:	7e7b      	ldrb	r3, [r7, #25]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <bme280_init+0x2c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	b212      	sxth	r2, r2
 80018a6:	809a      	strh	r2, [r3, #4]
	BME->parameters.dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 80018a8:	7ebb      	ldrb	r3, [r7, #26]
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	7efb      	ldrb	r3, [r7, #27]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	4b7a      	ldr	r3, [pc, #488]	; (8001aa0 <bme280_init+0x2c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b292      	uxth	r2, r2
 80018bc:	80da      	strh	r2, [r3, #6]
	BME->parameters.dig_P2 = params[8] | ((int16_t)params[9] << 8);
 80018be:	7f3b      	ldrb	r3, [r7, #28]
 80018c0:	b219      	sxth	r1, r3
 80018c2:	7f7b      	ldrb	r3, [r7, #29]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	4b75      	ldr	r3, [pc, #468]	; (8001aa0 <bme280_init+0x2c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	b212      	sxth	r2, r2
 80018d0:	811a      	strh	r2, [r3, #8]
	BME->parameters.dig_P3 = params[10] | ((int16_t)params[11] << 8);
 80018d2:	7fbb      	ldrb	r3, [r7, #30]
 80018d4:	b219      	sxth	r1, r3
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <bme280_init+0x2c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	b212      	sxth	r2, r2
 80018e4:	815a      	strh	r2, [r3, #10]
	BME->parameters.dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80018e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ea:	b219      	sxth	r1, r3
 80018ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <bme280_init+0x2c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	b212      	sxth	r2, r2
 80018fc:	819a      	strh	r2, [r3, #12]
	BME->parameters.dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80018fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001902:	b219      	sxth	r1, r3
 8001904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <bme280_init+0x2c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	b212      	sxth	r2, r2
 8001914:	81da      	strh	r2, [r3, #14]
	BME->parameters.dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001916:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191a:	b219      	sxth	r1, r3
 800191c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <bme280_init+0x2c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	b212      	sxth	r2, r2
 800192c:	821a      	strh	r2, [r3, #16]
	BME->parameters.dig_P7 = params[18] | ((int16_t)params[19] << 8);
 800192e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001932:	b219      	sxth	r1, r3
 8001934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b21a      	sxth	r2, r3
 800193c:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <bme280_init+0x2c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	b212      	sxth	r2, r2
 8001944:	825a      	strh	r2, [r3, #18]
	BME->parameters.dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b219      	sxth	r1, r3
 800194c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <bme280_init+0x2c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	b212      	sxth	r2, r2
 800195c:	829a      	strh	r2, [r3, #20]
	BME->parameters.dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800195e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001962:	b219      	sxth	r1, r3
 8001964:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <bme280_init+0x2c4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	b212      	sxth	r2, r2
 8001974:	82da      	strh	r2, [r3, #22]
	BME->parameters.dig_H1 = params[24];
 8001976:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <bme280_init+0x2c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800197e:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001980:	2332      	movs	r3, #50	; 0x32
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	2307      	movs	r3, #7
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	22e1      	movs	r2, #225	; 0xe1
 8001992:	21ec      	movs	r1, #236	; 0xec
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f005 fd1b 	bl	80073d0 <HAL_I2C_Mem_Read>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_H2 = params[0] | ((int16_t)params[1] << 8);
 80019a0:	7d3b      	ldrb	r3, [r7, #20]
 80019a2:	b219      	sxth	r1, r3
 80019a4:	7d7b      	ldrb	r3, [r7, #21]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <bme280_init+0x2c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	b212      	sxth	r2, r2
 80019b2:	835a      	strh	r2, [r3, #26]
	BME->parameters.dig_H3	= params[2];
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <bme280_init+0x2c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	7dba      	ldrb	r2, [r7, #22]
 80019ba:	771a      	strb	r2, [r3, #28]
	BME->parameters.dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 80019bc:	7e3b      	ldrb	r3, [r7, #24]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	b219      	sxth	r1, r3
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <bme280_init+0x2c4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	b212      	sxth	r2, r2
 80019d4:	83da      	strh	r2, [r3, #30]
	BME->parameters.dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 80019d6:	7e3b      	ldrb	r3, [r7, #24]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	b219      	sxth	r1, r3
 80019de:	7e7b      	ldrb	r3, [r7, #25]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <bme280_init+0x2c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	b212      	sxth	r2, r2
 80019ec:	841a      	strh	r2, [r3, #32]
	BME->parameters.dig_H6 = params[6];
 80019ee:	7eba      	ldrb	r2, [r7, #26]
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <bme280_init+0x2c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b252      	sxtb	r2, r2
 80019f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	74bb      	strb	r3, [r7, #18]
	data_ctrl = OS;
 80019fe:	79bb      	ldrb	r3, [r7, #6]
 8001a00:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 8001a02:	2332      	movs	r3, #50	; 0x32
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2301      	movs	r3, #1
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	f107 0312 	add.w	r3, r7, #18
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	22f2      	movs	r2, #242	; 0xf2
 8001a14:	21ec      	movs	r1, #236	; 0xec
 8001a16:	68b8      	ldr	r0, [r7, #8]
 8001a18:	f005 fbe0 	bl	80071dc <HAL_I2C_Mem_Write>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	74bb      	strb	r3, [r7, #18]
	data_ctrl = mode | (OS << 2) | (OS << 5);																		//Mode has been chosed.
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	b25a      	sxtb	r2, r3
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001a42:	2332      	movs	r3, #50	; 0x32
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f107 0312 	add.w	r3, r7, #18
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	22f4      	movs	r2, #244	; 0xf4
 8001a54:	21ec      	movs	r1, #236	; 0xec
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f005 fbc0 	bl	80071dc <HAL_I2C_Mem_Write>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	74bb      	strb	r3, [r7, #18]
	data_ctrl = (filter << 2);
 8001a66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001a70:	2332      	movs	r3, #50	; 0x32
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	f107 0312 	add.w	r3, r7, #18
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	22f5      	movs	r2, #245	; 0xf5
 8001a82:	21ec      	movs	r1, #236	; 0xec
 8001a84:	68b8      	ldr	r0, [r7, #8]
 8001a86:	f005 fba9 	bl	80071dc <HAL_I2C_Mem_Write>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//uint8_t buf[50];

	float base = 0.0;
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_Delay(200);
 8001a96:	20c8      	movs	r0, #200	; 0xc8
 8001a98:	f003 fd72 	bl	8005580 <HAL_Delay>
	for(int i = 0; i < 50; i++)		//Taking base altitude
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e003      	b.n	8001aa8 <bme280_init+0x2cc>
 8001aa0:	20000218 	.word	0x20000218
 8001aa4:	20000214 	.word	0x20000214
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aaa:	e011      	b.n	8001ad0 <bme280_init+0x2f4>
	{
	  bme280_update();
 8001aac:	f000 f828 	bl	8001b00 <bme280_update>
	  base +=  BME->altitude;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <bme280_init+0x31c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001ab8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  HAL_Delay(10);
 8001ac4:	200a      	movs	r0, #10
 8001ac6:	f003 fd5b 	bl	8005580 <HAL_Delay>
	for(int i = 0; i < 50; i++)		//Taking base altitude
 8001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001acc:	3301      	adds	r3, #1
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad2:	2b31      	cmp	r3, #49	; 0x31
 8001ad4:	ddea      	ble.n	8001aac <bme280_init+0x2d0>
	}
	BME->baseAltitude = (base / 50.0);
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <bme280_init+0x31c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ade:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001afc <bme280_init+0x320>
 8001ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	return retVal;
 8001aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3738      	adds	r7, #56	; 0x38
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000218 	.word	0x20000218
 8001afc:	42480000 	.word	0x42480000

08001b00 <bme280_update>:


void bme280_update(){
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b0d2      	sub	sp, #328	; 0x148
 8001b06:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001b08:	f7ff fda8 	bl	800165c <bme280_getVals>

	if(BME->isUpdated == 1)
 8001b0c:	4bd9      	ldr	r3, [pc, #868]	; (8001e74 <bme280_update+0x374>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f040 83a7 	bne.w	8002268 <bme280_update+0x768>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001b1a:	4bd6      	ldr	r3, [pc, #856]	; (8001e74 <bme280_update+0x374>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters.dig_T1 << 1))) * ((int32_t)BME->parameters.dig_T2)) >> 11;
 8001b24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b28:	10da      	asrs	r2, r3, #3
 8001b2a:	4bd2      	ldr	r3, [pc, #840]	; (8001e74 <bme280_update+0x374>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	4bcf      	ldr	r3, [pc, #828]	; (8001e74 <bme280_update+0x374>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	885b      	ldrh	r3, [r3, #2]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	12db      	asrs	r3, r3, #11
 8001b44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1))) >> 12) * ((int32_t)BME->parameters.dig_T3)) >> 14;
 8001b48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b4c:	111a      	asrs	r2, r3, #4
 8001b4e:	4bc9      	ldr	r3, [pc, #804]	; (8001e74 <bme280_update+0x374>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	1ad1      	subs	r1, r2, r3
 8001b58:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b5c:	111a      	asrs	r2, r3, #4
 8001b5e:	4bc5      	ldr	r3, [pc, #788]	; (8001e74 <bme280_update+0x374>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	131a      	asrs	r2, r3, #12
 8001b6e:	4bc1      	ldr	r3, [pc, #772]	; (8001e74 <bme280_update+0x374>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	889b      	ldrh	r3, [r3, #4]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	139b      	asrs	r3, r3, #14
 8001b7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001b80:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b88:	4413      	add	r3, r2
 8001b8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001b8e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3380      	adds	r3, #128	; 0x80
 8001b9a:	121b      	asrs	r3, r3, #8
 8001b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	4bb1      	ldr	r3, [pc, #708]	; (8001e74 <bme280_update+0x374>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001e78 <bme280_update+0x378>
 8001bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001bbc:	4bad      	ldr	r3, [pc, #692]	; (8001e74 <bme280_update+0x374>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8001bc6:	657a      	str	r2, [r7, #84]	; 0x54
 8001bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bcc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001bd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bd4:	17da      	asrs	r2, r3, #31
 8001bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bda:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001bde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001be2:	460b      	mov	r3, r1
 8001be4:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bea:	4613      	mov	r3, r2
 8001bec:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bf6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters.dig_P6;
 8001bfa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bfe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c02:	fb03 f102 	mul.w	r1, r3, r2
 8001c06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	18ca      	adds	r2, r1, r3
 8001c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c18:	fba3 4503 	umull	r4, r5, r3, r3
 8001c1c:	1953      	adds	r3, r2, r5
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <bme280_update+0x374>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	8a1b      	ldrh	r3, [r3, #16]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	17da      	asrs	r2, r3, #31
 8001c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c34:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	fb03 f205 	mul.w	r2, r3, r5
 8001c3e:	460b      	mov	r3, r1
 8001c40:	fb04 f303 	mul.w	r3, r4, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	4602      	mov	r2, r0
 8001c48:	fba4 ab02 	umull	sl, fp, r4, r2
 8001c4c:	445b      	add	r3, fp
 8001c4e:	469b      	mov	fp, r3
 8001c50:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001c54:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters.dig_P5) <<17);
 8001c58:	4b86      	ldr	r3, [pc, #536]	; (8001e74 <bme280_update+0x374>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	89db      	ldrh	r3, [r3, #14]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	17da      	asrs	r2, r3, #31
 8001c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c70:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001c74:	462a      	mov	r2, r5
 8001c76:	fb02 f203 	mul.w	r2, r2, r3
 8001c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c7e:	4621      	mov	r1, r4
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	441a      	add	r2, r3
 8001c86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	fba3 8901 	umull	r8, r9, r3, r1
 8001c90:	eb02 0309 	add.w	r3, r2, r9
 8001c94:	4699      	mov	r9, r3
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001ca2:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001ca6:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001caa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001cae:	1814      	adds	r4, r2, r0
 8001cb0:	643c      	str	r4, [r7, #64]	; 0x40
 8001cb2:	414b      	adcs	r3, r1
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001cba:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters.dig_P4) << 35);
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <bme280_update+0x374>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	899b      	ldrh	r3, [r3, #12]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	17da      	asrs	r2, r3, #31
 8001cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cde:	00d9      	lsls	r1, r3, #3
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ce6:	1814      	adds	r4, r2, r0
 8001ce8:	63bc      	str	r4, [r7, #56]	; 0x38
 8001cea:	414b      	adcs	r3, r1
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cf2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters.dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters.dig_P2) << 12);
 8001cf6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cfe:	fb03 f102 	mul.w	r1, r3, r2
 8001d02:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	18ca      	adds	r2, r1, r3
 8001d10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d14:	fba3 1303 	umull	r1, r3, r3, r3
 8001d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d2c:	4b51      	ldr	r3, [pc, #324]	; (8001e74 <bme280_update+0x374>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	895b      	ldrh	r3, [r3, #10]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	17da      	asrs	r2, r3, #31
 8001d38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d40:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001d44:	462b      	mov	r3, r5
 8001d46:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001d4a:	4642      	mov	r2, r8
 8001d4c:	fb02 f203 	mul.w	r2, r2, r3
 8001d50:	464b      	mov	r3, r9
 8001d52:	4621      	mov	r1, r4
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d62:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001d66:	460a      	mov	r2, r1
 8001d68:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001d6c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001d70:	4413      	add	r3, r2
 8001d72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001d82:	4623      	mov	r3, r4
 8001d84:	0a18      	lsrs	r0, r3, #8
 8001d86:	462b      	mov	r3, r5
 8001d88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	1219      	asrs	r1, r3, #8
 8001d90:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <bme280_update+0x374>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	891b      	ldrh	r3, [r3, #8]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	17da      	asrs	r2, r3, #31
 8001d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001da0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001da4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001da8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001dac:	464a      	mov	r2, r9
 8001dae:	fb02 f203 	mul.w	r2, r2, r3
 8001db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001db6:	4644      	mov	r4, r8
 8001db8:	fb04 f303 	mul.w	r3, r4, r3
 8001dbc:	441a      	add	r2, r3
 8001dbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001dc2:	4644      	mov	r4, r8
 8001dc4:	fba3 4304 	umull	r4, r3, r3, r4
 8001dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dcc:	4623      	mov	r3, r4
 8001dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001de8:	464c      	mov	r4, r9
 8001dea:	0323      	lsls	r3, r4, #12
 8001dec:	4644      	mov	r4, r8
 8001dee:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001df2:	4644      	mov	r4, r8
 8001df4:	0322      	lsls	r2, r4, #12
 8001df6:	1884      	adds	r4, r0, r2
 8001df8:	633c      	str	r4, [r7, #48]	; 0x30
 8001dfa:	eb41 0303 	adc.w	r3, r1, r3
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001e00:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e04:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters.dig_P1) >> 33;
 8001e08:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e0c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001e10:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001e14:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <bme280_update+0x374>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	88db      	ldrh	r3, [r3, #6]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e2c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001e30:	462b      	mov	r3, r5
 8001e32:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001e36:	4642      	mov	r2, r8
 8001e38:	fb02 f203 	mul.w	r2, r2, r3
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	4622      	mov	r2, r4
 8001e48:	4641      	mov	r1, r8
 8001e4a:	fba2 1201 	umull	r1, r2, r2, r1
 8001e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e52:	460a      	mov	r2, r1
 8001e54:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001e58:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e6e:	4629      	mov	r1, r5
 8001e70:	104a      	asrs	r2, r1, #1
 8001e72:	e003      	b.n	8001e7c <bme280_update+0x37c>
 8001e74:	20000218 	.word	0x20000218
 8001e78:	42c80000 	.word	0x42c80000
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	17cb      	asrs	r3, r1, #31
 8001e80:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8001e84:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	d106      	bne.n	8001e9a <bme280_update+0x39a>
		{
			P = 0;
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 8001e98:	e148      	b.n	800212c <bme280_update+0x62c>
		}else
		{
		P = 1048576 - adc_P;
 8001e9a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 8001ea4:	62b8      	str	r0, [r7, #40]	; 0x28
 8001ea6:	eb61 0303 	sbc.w	r3, r1, r3
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001eb0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001eb4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001eb8:	f04f 0000 	mov.w	r0, #0
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	07d9      	lsls	r1, r3, #31
 8001ec2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001ec6:	07d0      	lsls	r0, r2, #31
 8001ec8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ecc:	1a84      	subs	r4, r0, r2
 8001ece:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001ed2:	eb61 0303 	sbc.w	r3, r1, r3
 8001ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eda:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001ede:	4622      	mov	r2, r4
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	1891      	adds	r1, r2, r2
 8001ee4:	6239      	str	r1, [r7, #32]
 8001ee6:	415b      	adcs	r3, r3
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eee:	4621      	mov	r1, r4
 8001ef0:	1851      	adds	r1, r2, r1
 8001ef2:	61b9      	str	r1, [r7, #24]
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	414b      	adcs	r3, r1
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001f06:	4649      	mov	r1, r9
 8001f08:	018b      	lsls	r3, r1, #6
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f10:	4641      	mov	r1, r8
 8001f12:	018a      	lsls	r2, r1, #6
 8001f14:	4641      	mov	r1, r8
 8001f16:	1889      	adds	r1, r1, r2
 8001f18:	6139      	str	r1, [r7, #16]
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	eb43 0101 	adc.w	r1, r3, r1
 8001f20:	6179      	str	r1, [r7, #20]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f2e:	4649      	mov	r1, r9
 8001f30:	008b      	lsls	r3, r1, #2
 8001f32:	4641      	mov	r1, r8
 8001f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f38:	4641      	mov	r1, r8
 8001f3a:	008a      	lsls	r2, r1, #2
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4603      	mov	r3, r0
 8001f42:	4622      	mov	r2, r4
 8001f44:	189b      	adds	r3, r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	462a      	mov	r2, r5
 8001f4c:	eb42 0303 	adc.w	r3, r2, r3
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f5e:	4649      	mov	r1, r9
 8001f60:	008b      	lsls	r3, r1, #2
 8001f62:	4641      	mov	r1, r8
 8001f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f68:	4641      	mov	r1, r8
 8001f6a:	008a      	lsls	r2, r1, #2
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	4622      	mov	r2, r4
 8001f74:	189b      	adds	r3, r3, r2
 8001f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	eb42 0303 	adc.w	r3, r2, r3
 8001f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f86:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f8e:	f7fe ffa9 	bl	8000ee4 <__aeabi_ldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters.dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001f9a:	4bb6      	ldr	r3, [pc, #728]	; (8002274 <bme280_update+0x774>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	8adb      	ldrh	r3, [r3, #22]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	17da      	asrs	r2, r3, #31
 8001fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fa8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001faa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0b50      	lsrs	r0, r2, #13
 8001fb8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fbc:	1359      	asrs	r1, r3, #13
 8001fbe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	fb00 f203 	mul.w	r2, r0, r3
 8001fc8:	4623      	mov	r3, r4
 8001fca:	fb03 f301 	mul.w	r3, r3, r1
 8001fce:	4413      	add	r3, r2
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	fba2 1200 	umull	r1, r2, r2, r0
 8001fd6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001fda:	460a      	mov	r2, r1
 8001fdc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001fe0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0b50      	lsrs	r0, r2, #13
 8001ff8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ffc:	1359      	asrs	r1, r3, #13
 8001ffe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002002:	462b      	mov	r3, r5
 8002004:	fb00 f203 	mul.w	r2, r0, r3
 8002008:	4623      	mov	r3, r4
 800200a:	fb03 f301 	mul.w	r3, r3, r1
 800200e:	4413      	add	r3, r2
 8002010:	4622      	mov	r2, r4
 8002012:	fba2 1200 	umull	r1, r2, r2, r0
 8002016:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800201a:	460a      	mov	r2, r1
 800201c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002020:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002024:	4413      	add	r3, r2
 8002026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002036:	4621      	mov	r1, r4
 8002038:	0e4a      	lsrs	r2, r1, #25
 800203a:	4629      	mov	r1, r5
 800203c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002040:	4629      	mov	r1, r5
 8002042:	164b      	asrs	r3, r1, #25
 8002044:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters.dig_P8) * P) >> 19;
 8002048:	4b8a      	ldr	r3, [pc, #552]	; (8002274 <bme280_update+0x774>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	8a9b      	ldrh	r3, [r3, #20]
 800204e:	b21b      	sxth	r3, r3
 8002050:	b21b      	sxth	r3, r3
 8002052:	17da      	asrs	r2, r3, #31
 8002054:	673b      	str	r3, [r7, #112]	; 0x70
 8002056:	677a      	str	r2, [r7, #116]	; 0x74
 8002058:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800205c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002060:	462a      	mov	r2, r5
 8002062:	fb02 f203 	mul.w	r2, r2, r3
 8002066:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800206a:	4621      	mov	r1, r4
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002076:	4621      	mov	r1, r4
 8002078:	fba2 1201 	umull	r1, r2, r2, r1
 800207c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002080:	460a      	mov	r2, r1
 8002082:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002086:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800208a:	4413      	add	r3, r2
 800208c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800209c:	4621      	mov	r1, r4
 800209e:	0cca      	lsrs	r2, r1, #19
 80020a0:	4629      	mov	r1, r5
 80020a2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80020a6:	4629      	mov	r1, r5
 80020a8:	14cb      	asrs	r3, r1, #19
 80020aa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters.dig_P7) << 4);
 80020ae:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80020b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80020b6:	1884      	adds	r4, r0, r2
 80020b8:	66bc      	str	r4, [r7, #104]	; 0x68
 80020ba:	eb41 0303 	adc.w	r3, r1, r3
 80020be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020c0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020c4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80020c8:	4621      	mov	r1, r4
 80020ca:	1889      	adds	r1, r1, r2
 80020cc:	6639      	str	r1, [r7, #96]	; 0x60
 80020ce:	4629      	mov	r1, r5
 80020d0:	eb43 0101 	adc.w	r1, r3, r1
 80020d4:	6679      	str	r1, [r7, #100]	; 0x64
 80020d6:	f04f 0000 	mov.w	r0, #0
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020e2:	4623      	mov	r3, r4
 80020e4:	0a18      	lsrs	r0, r3, #8
 80020e6:	462b      	mov	r3, r5
 80020e8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020ec:	462b      	mov	r3, r5
 80020ee:	1219      	asrs	r1, r3, #8
 80020f0:	4b60      	ldr	r3, [pc, #384]	; (8002274 <bme280_update+0x774>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	8a5b      	ldrh	r3, [r3, #18]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	17da      	asrs	r2, r3, #31
 80020fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80020fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800210c:	464c      	mov	r4, r9
 800210e:	0123      	lsls	r3, r4, #4
 8002110:	4644      	mov	r4, r8
 8002112:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002116:	4644      	mov	r4, r8
 8002118:	0122      	lsls	r2, r4, #4
 800211a:	1884      	adds	r4, r0, r2
 800211c:	603c      	str	r4, [r7, #0]
 800211e:	eb41 0303 	adc.w	r3, r1, r3
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002128:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 800212c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002130:	f7fe fe9a 	bl	8000e68 <__aeabi_l2f>
 8002134:	4603      	mov	r3, r0
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa26 	bl	8000588 <__aeabi_f2d>
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <bme280_update+0x778>)
 8002142:	f7fe fba3 	bl	800088c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b4a      	ldr	r3, [pc, #296]	; (800227c <bme280_update+0x77c>)
 8002154:	f7fe fb9a 	bl	800088c <__aeabi_ddiv>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4945      	ldr	r1, [pc, #276]	; (8002274 <bme280_update+0x774>)
 800215e:	680c      	ldr	r4, [r1, #0]
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fd60 	bl	8000c28 <__aeabi_d2f>
 8002168:	4603      	mov	r3, r0
 800216a:	6363      	str	r3, [r4, #52]	; 0x34

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 800216c:	4b41      	ldr	r3, [pc, #260]	; (8002274 <bme280_update+0x774>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 8002176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800217a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800217e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters.dig_H4) << 20) - (((int32_t)BME->parameters.dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters.dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters.dig_H2) + 8192) >> 14));
 8002182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002186:	039b      	lsls	r3, r3, #14
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <bme280_update+0x774>)
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	8bd2      	ldrh	r2, [r2, #30]
 800218e:	b212      	sxth	r2, r2
 8002190:	0512      	lsls	r2, r2, #20
 8002192:	1a9a      	subs	r2, r3, r2
 8002194:	4b37      	ldr	r3, [pc, #220]	; (8002274 <bme280_update+0x774>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	8c1b      	ldrh	r3, [r3, #32]
 800219a:	b21b      	sxth	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021ac:	0bdb      	lsrs	r3, r3, #15
 80021ae:	4a31      	ldr	r2, [pc, #196]	; (8002274 <bme280_update+0x774>)
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80021b6:	b252      	sxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80021be:	fb01 f202 	mul.w	r2, r1, r2
 80021c2:	0a92      	lsrs	r2, r2, #10
 80021c4:	492b      	ldr	r1, [pc, #172]	; (8002274 <bme280_update+0x774>)
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	7f09      	ldrb	r1, [r1, #28]
 80021ca:	b2c9      	uxtb	r1, r1
 80021cc:	4608      	mov	r0, r1
 80021ce:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80021d2:	fb00 f101 	mul.w	r1, r0, r1
 80021d6:	0ac9      	lsrs	r1, r1, #11
 80021d8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80021dc:	fb01 f202 	mul.w	r2, r1, r2
 80021e0:	0a92      	lsrs	r2, r2, #10
 80021e2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80021e6:	4923      	ldr	r1, [pc, #140]	; (8002274 <bme280_update+0x774>)
 80021e8:	6809      	ldr	r1, [r1, #0]
 80021ea:	8b49      	ldrh	r1, [r1, #26]
 80021ec:	b209      	sxth	r1, r1
 80021ee:	fb01 f202 	mul.w	r2, r1, r2
 80021f2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80021f6:	0b92      	lsrs	r2, r2, #14
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters.dig_H1)) >> 4));
 8002200:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002204:	0bdb      	lsrs	r3, r3, #15
 8002206:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800220a:	0bd2      	lsrs	r2, r2, #15
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	09db      	lsrs	r3, r3, #7
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <bme280_update+0x774>)
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	7e12      	ldrb	r2, [r2, #24]
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800222a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800222e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002232:	bf28      	it	cs
 8002234:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 8002238:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800223c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002240:	0b1b      	lsrs	r3, r3, #12
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <bme280_update+0x774>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002280 <bme280_update+0x780>
 8002252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002256:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		//get altitude
		bme280_get_altitude();
 800225a:	f7ff fa59 	bl	8001710 <bme280_get_altitude>
		BME->isUpdated = 0;
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <bme280_update+0x774>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

}
 8002268:	bf00      	nop
 800226a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800226e:	46bd      	mov	sp, r7
 8002270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002274:	20000218 	.word	0x20000218
 8002278:	40700000 	.word	0x40700000
 800227c:	40590000 	.word	0x40590000
 8002280:	44800000 	.word	0x44800000

08002284 <bmi088_init>:
	if(retVal != HAL_OK)
		Error_Handler();
}

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af04      	add	r7, sp, #16
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	HAL_StatusTypeDef retVal = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
	bmi_I2C = I2C_;
 8002292:	4aba      	ldr	r2, [pc, #744]	; (800257c <bmi088_init+0x2f8>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002298:	4ab9      	ldr	r2, [pc, #740]	; (8002580 <bmi088_init+0x2fc>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800229e:	4bb8      	ldr	r3, [pc, #736]	; (8002580 <bmi088_init+0x2fc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80022a6:	4bb6      	ldr	r3, [pc, #728]	; (8002580 <bmi088_init+0x2fc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	749a      	strb	r2, [r3, #18]
	HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 50);
	while(1);
#endif
	uint8_t buf[1];

	HAL_Delay(10);
 80022ae:	200a      	movs	r0, #10
 80022b0:	f003 f966 	bl	8005580 <HAL_Delay>

	buf[0] = 0x01;
 80022b4:	2301      	movs	r3, #1
 80022b6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80022b8:	4bb0      	ldr	r3, [pc, #704]	; (800257c <bmi088_init+0x2f8>)
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	2301      	movs	r3, #1
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2301      	movs	r3, #1
 80022cc:	227c      	movs	r2, #124	; 0x7c
 80022ce:	2130      	movs	r1, #48	; 0x30
 80022d0:	f004 ff84 	bl	80071dc <HAL_I2C_Mem_Write>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	4313      	orrs	r3, r2
 80022dc:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80022e2:	4ba6      	ldr	r3, [pc, #664]	; (800257c <bmi088_init+0x2f8>)
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2301      	movs	r3, #1
 80022f6:	227d      	movs	r2, #125	; 0x7d
 80022f8:	2130      	movs	r1, #48	; 0x30
 80022fa:	f004 ff6f 	bl	80071dc <HAL_I2C_Mem_Write>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4313      	orrs	r3, r2
 8002306:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002308:	2014      	movs	r0, #20
 800230a:	f003 f939 	bl	8005580 <HAL_Delay>

	buf[0] = ACC_RESET;
 800230e:	23b6      	movs	r3, #182	; 0xb6
 8002310:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002312:	4b9a      	ldr	r3, [pc, #616]	; (800257c <bmi088_init+0x2f8>)
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	2364      	movs	r3, #100	; 0x64
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	2301      	movs	r3, #1
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2301      	movs	r3, #1
 8002326:	227e      	movs	r2, #126	; 0x7e
 8002328:	2130      	movs	r1, #48	; 0x30
 800232a:	f004 ff57 	bl	80071dc <HAL_I2C_Mem_Write>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4313      	orrs	r3, r2
 8002336:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <bmi088_init+0xc0>
 800233e:	4b91      	ldr	r3, [pc, #580]	; (8002584 <bmi088_init+0x300>)
 8002340:	2277      	movs	r2, #119	; 0x77
 8002342:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002344:	2028      	movs	r0, #40	; 0x28
 8002346:	f003 f91b 	bl	8005580 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800234a:	23b0      	movs	r3, #176	; 0xb0
 800234c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800234e:	4b8b      	ldr	r3, [pc, #556]	; (800257c <bmi088_init+0x2f8>)
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	2364      	movs	r3, #100	; 0x64
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2301      	movs	r3, #1
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	227e      	movs	r2, #126	; 0x7e
 8002364:	2130      	movs	r1, #48	; 0x30
 8002366:	f004 ff39 	bl	80071dc <HAL_I2C_Mem_Write>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	4313      	orrs	r3, r2
 8002372:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <bmi088_init+0xfc>
 800237a:	4b82      	ldr	r3, [pc, #520]	; (8002584 <bmi088_init+0x300>)
 800237c:	227c      	movs	r2, #124	; 0x7c
 800237e:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002380:	2028      	movs	r0, #40	; 0x28
 8002382:	f003 f8fd 	bl	8005580 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002386:	23b6      	movs	r3, #182	; 0xb6
 8002388:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800238a:	4b7c      	ldr	r3, [pc, #496]	; (800257c <bmi088_init+0x2f8>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	2364      	movs	r3, #100	; 0x64
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2301      	movs	r3, #1
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	2214      	movs	r2, #20
 80023a0:	21d0      	movs	r1, #208	; 0xd0
 80023a2:	f004 ff1b 	bl	80071dc <HAL_I2C_Mem_Write>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <bmi088_init+0x138>
 80023b6:	4b73      	ldr	r3, [pc, #460]	; (8002584 <bmi088_init+0x300>)
 80023b8:	2281      	movs	r2, #129	; 0x81
 80023ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 80023bc:	2028      	movs	r0, #40	; 0x28
 80023be:	f003 f8df 	bl	8005580 <HAL_Delay>

	HAL_I2C_DeInit(bmi_I2C);  // I2C arayüzünü de-initialize edin
 80023c2:	4b6e      	ldr	r3, [pc, #440]	; (800257c <bmi088_init+0x2f8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fed8 	bl	800717c <HAL_I2C_DeInit>
	HAL_Delay(5);
 80023cc:	2005      	movs	r0, #5
 80023ce:	f003 f8d7 	bl	8005580 <HAL_Delay>
	HAL_I2C_Init(bmi_I2C);    // I2C arayüzünü yeniden initialize edin
 80023d2:	4b6a      	ldr	r3, [pc, #424]	; (800257c <bmi088_init+0x2f8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fd8c 	bl	8006ef4 <HAL_I2C_Init>
	HAL_Delay(5);
 80023dc:	2005      	movs	r0, #5
 80023de:	f003 f8cf 	bl	8005580 <HAL_Delay>
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
	HAL_Delay(40);
*/

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <bmi088_init+0x2fc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	7e5b      	ldrb	r3, [r3, #25]
 80023e8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80023ea:	4b64      	ldr	r3, [pc, #400]	; (800257c <bmi088_init+0x2f8>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	2364      	movs	r3, #100	; 0x64
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	2301      	movs	r3, #1
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	220f      	movs	r2, #15
 8002400:	21d0      	movs	r1, #208	; 0xd0
 8002402:	f004 feeb 	bl	80071dc <HAL_I2C_Mem_Write>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	4313      	orrs	r3, r2
 800240e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <bmi088_init+0x198>
 8002416:	4b5b      	ldr	r3, [pc, #364]	; (8002584 <bmi088_init+0x300>)
 8002418:	2297      	movs	r2, #151	; 0x97
 800241a:	601a      	str	r2, [r3, #0]


	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 800241c:	4b58      	ldr	r3, [pc, #352]	; (8002580 <bmi088_init+0x2fc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	7e1b      	ldrb	r3, [r3, #24]
 8002422:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <bmi088_init+0x2f8>)
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	2314      	movs	r3, #20
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	2301      	movs	r3, #1
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	2210      	movs	r2, #16
 800243a:	21d0      	movs	r1, #208	; 0xd0
 800243c:	f004 fece 	bl	80071dc <HAL_I2C_Mem_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	4313      	orrs	r3, r2
 8002448:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <bmi088_init+0x1d2>
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <bmi088_init+0x300>)
 8002452:	229c      	movs	r2, #156	; 0x9c
 8002454:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <bmi088_init+0x2fc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	7ddb      	ldrb	r3, [r3, #23]
 800245c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <bmi088_init+0x2f8>)
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	2314      	movs	r3, #20
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	2301      	movs	r3, #1
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2301      	movs	r3, #1
 8002472:	2211      	movs	r2, #17
 8002474:	21d0      	movs	r1, #208	; 0xd0
 8002476:	f004 feb1 	bl	80071dc <HAL_I2C_Mem_Write>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	4313      	orrs	r3, r2
 8002482:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <bmi088_init+0x20c>
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <bmi088_init+0x300>)
 800248c:	22a0      	movs	r2, #160	; 0xa0
 800248e:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002490:	2028      	movs	r0, #40	; 0x28
 8002492:	f003 f875 	bl	8005580 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <bmi088_init+0x2f8>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	2314      	movs	r3, #20
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	2301      	movs	r3, #1
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2301      	movs	r3, #1
 80024ae:	2215      	movs	r2, #21
 80024b0:	21d0      	movs	r1, #208	; 0xd0
 80024b2:	f004 fe93 	bl	80071dc <HAL_I2C_Mem_Write>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	4313      	orrs	r3, r2
 80024be:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <bmi088_init+0x248>
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <bmi088_init+0x300>)
 80024c8:	22a6      	movs	r2, #166	; 0xa6
 80024ca:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80024cc:	2301      	movs	r3, #1
 80024ce:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <bmi088_init+0x2f8>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	2314      	movs	r3, #20
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	2301      	movs	r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2301      	movs	r3, #1
 80024e4:	2216      	movs	r2, #22
 80024e6:	21d0      	movs	r1, #208	; 0xd0
 80024e8:	f004 fe78 	bl	80071dc <HAL_I2C_Mem_Write>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <bmi088_init+0x27e>
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <bmi088_init+0x300>)
 80024fe:	22aa      	movs	r2, #170	; 0xaa
 8002500:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 8002502:	2301      	movs	r3, #1
 8002504:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <bmi088_init+0x2f8>)
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	2314      	movs	r3, #20
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	2301      	movs	r3, #1
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2301      	movs	r3, #1
 800251a:	2218      	movs	r2, #24
 800251c:	21d0      	movs	r1, #208	; 0xd0
 800251e:	f004 fe5d 	bl	80071dc <HAL_I2C_Mem_Write>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	4313      	orrs	r3, r2
 800252a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <bmi088_init+0x2b4>
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <bmi088_init+0x300>)
 8002534:	22ae      	movs	r2, #174	; 0xae
 8002536:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002538:	2304      	movs	r3, #4
 800253a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <bmi088_init+0x2f8>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	2314      	movs	r3, #20
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	2301      	movs	r3, #1
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2301      	movs	r3, #1
 8002550:	227d      	movs	r2, #125	; 0x7d
 8002552:	2130      	movs	r1, #48	; 0x30
 8002554:	f004 fe42 	bl	80071dc <HAL_I2C_Mem_Write>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4313      	orrs	r3, r2
 8002560:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <bmi088_init+0x2ea>
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <bmi088_init+0x300>)
 800256a:	22b3      	movs	r2, #179	; 0xb3
 800256c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800256e:	2008      	movs	r0, #8
 8002570:	f003 f806 	bl	8005580 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <bmi088_init+0x2fc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	7cdb      	ldrb	r3, [r3, #19]
 800257a:	e005      	b.n	8002588 <bmi088_init+0x304>
 800257c:	2000021c 	.word	0x2000021c
 8002580:	20000220 	.word	0x20000220
 8002584:	20000228 	.word	0x20000228
 8002588:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800258a:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <bmi088_init+0x42c>)
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	2314      	movs	r3, #20
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	2301      	movs	r3, #1
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	227c      	movs	r2, #124	; 0x7c
 80025a0:	2130      	movs	r1, #48	; 0x30
 80025a2:	f004 fe1b 	bl	80071dc <HAL_I2C_Mem_Write>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <bmi088_init+0x338>
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <bmi088_init+0x430>)
 80025b8:	22b8      	movs	r2, #184	; 0xb8
 80025ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80025bc:	2008      	movs	r0, #8
 80025be:	f002 ffdf 	bl	8005580 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <bmi088_init+0x434>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	7d5b      	ldrb	r3, [r3, #21]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	b25a      	sxtb	r2, r3
 80025cc:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <bmi088_init+0x434>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	7d9b      	ldrb	r3, [r3, #22]
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <bmi088_init+0x42c>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	2314      	movs	r3, #20
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	2301      	movs	r3, #1
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	2240      	movs	r2, #64	; 0x40
 80025f2:	2130      	movs	r1, #48	; 0x30
 80025f4:	f004 fdf2 	bl	80071dc <HAL_I2C_Mem_Write>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	4313      	orrs	r3, r2
 8002600:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <bmi088_init+0x38a>
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <bmi088_init+0x430>)
 800260a:	22bd      	movs	r2, #189	; 0xbd
 800260c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <bmi088_init+0x434>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	7d1b      	ldrb	r3, [r3, #20]
 8002614:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <bmi088_init+0x42c>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	2314      	movs	r3, #20
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	2301      	movs	r3, #1
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	2241      	movs	r2, #65	; 0x41
 800262c:	2130      	movs	r1, #48	; 0x30
 800262e:	f004 fdd5 	bl	80071dc <HAL_I2C_Mem_Write>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	4313      	orrs	r3, r2
 800263a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <bmi088_init+0x3c4>
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <bmi088_init+0x430>)
 8002644:	22c1      	movs	r2, #193	; 0xc1
 8002646:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002648:	230a      	movs	r3, #10
 800264a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <bmi088_init+0x42c>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	2314      	movs	r3, #20
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	2301      	movs	r3, #1
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	2253      	movs	r2, #83	; 0x53
 8002662:	2130      	movs	r1, #48	; 0x30
 8002664:	f004 fdba 	bl	80071dc <HAL_I2C_Mem_Write>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	4313      	orrs	r3, r2
 8002670:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002672:	2304      	movs	r3, #4
 8002674:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <bmi088_init+0x42c>)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	2314      	movs	r3, #20
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	2258      	movs	r2, #88	; 0x58
 800268c:	2130      	movs	r1, #48	; 0x30
 800268e:	f004 fda5 	bl	80071dc <HAL_I2C_Mem_Write>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	4313      	orrs	r3, r2
 800269a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800269c:	2009      	movs	r0, #9
 800269e:	f003 fcbe 	bl	800601e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80026a2:	200a      	movs	r0, #10
 80026a4:	f003 fcbb 	bl	800601e <HAL_NVIC_EnableIRQ>
	//if(retVal != HAL_OK)

		//Error_Handler();

}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000021c 	.word	0x2000021c
 80026b4:	20000228 	.word	0x20000228
 80026b8:	20000220 	.word	0x20000220
 80026bc:	00000000 	.word	0x00000000

080026c0 <bmi088_update>:
void bmi088_update()
{
 80026c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c4:	b08d      	sub	sp, #52	; 0x34
 80026c6:	af04      	add	r7, sp, #16

	if(BMI->rawDatas.isAccelUpdated)
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <bmi088_update+0x88>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	7c9b      	ldrb	r3, [r3, #18]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 81fb 	beq.w	8002aca <bmi088_update+0x40a>
	{
		HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <bmi088_update+0x8c>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <bmi088_update+0x88>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	2314      	movs	r3, #20
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	2309      	movs	r3, #9
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	9200      	str	r2, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	2212      	movs	r2, #18
 80026ec:	2130      	movs	r1, #48	; 0x30
 80026ee:	f004 fe6f 	bl	80073d0 <HAL_I2C_Mem_Read>
 80026f2:	4603      	mov	r3, r0
 80026f4:	77fb      	strb	r3, [r7, #31]
		HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <bmi088_update+0x8c>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <bmi088_update+0x88>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3309      	adds	r3, #9
 8002700:	2214      	movs	r2, #20
 8002702:	9202      	str	r2, [sp, #8]
 8002704:	2202      	movs	r2, #2
 8002706:	9201      	str	r2, [sp, #4]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2301      	movs	r3, #1
 800270c:	2222      	movs	r2, #34	; 0x22
 800270e:	2130      	movs	r1, #48	; 0x30
 8002710:	f004 fe5e 	bl	80073d0 <HAL_I2C_Mem_Read>

		uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <bmi088_update+0x88>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	7a5b      	ldrb	r3, [r3, #9]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	b21a      	sxth	r2, r3
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <bmi088_update+0x88>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	7a9b      	ldrb	r3, [r3, #10]
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	b21b      	sxth	r3, r3
 800272a:	4313      	orrs	r3, r2
 800272c:	b21b      	sxth	r3, r3
 800272e:	83bb      	strh	r3, [r7, #28]
		int16_t Temp_int11 = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	837b      	strh	r3, [r7, #26]
		if (Temp_uint11 > 1023){
 8002734:	8bbb      	ldrh	r3, [r7, #28]
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d309      	bcc.n	8002750 <bmi088_update+0x90>
			Temp_int11 = Temp_uint11 - 2048;
 800273c:	8bbb      	ldrh	r3, [r7, #28]
 800273e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002742:	b29b      	uxth	r3, r3
 8002744:	837b      	strh	r3, [r7, #26]
 8002746:	e029      	b.n	800279c <bmi088_update+0xdc>
 8002748:	20000220 	.word	0x20000220
 800274c:	2000021c 	.word	0x2000021c
		}
		else{
			Temp_int11 = Temp_uint11;
 8002750:	8bbb      	ldrh	r3, [r7, #28]
 8002752:	837b      	strh	r3, [r7, #26]
			BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002754:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002760:	ee17 0a90 	vmov	r0, s15
 8002764:	f7fd ff10 	bl	8000588 <__aeabi_f2d>
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002770:	f7fd ff62 	bl	8000638 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	4bbb      	ldr	r3, [pc, #748]	; (8002a70 <bmi088_update+0x3b0>)
 8002782:	f7fd fda3 	bl	80002cc <__adddf3>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	49ba      	ldr	r1, [pc, #744]	; (8002a74 <bmi088_update+0x3b4>)
 800278c:	680e      	ldr	r6, [r1, #0]
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe fa49 	bl	8000c28 <__aeabi_d2f>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
		}
		uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 800279c:	4bb5      	ldr	r3, [pc, #724]	; (8002a74 <bmi088_update+0x3b4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	7a1b      	ldrb	r3, [r3, #8]
 80027a2:	041a      	lsls	r2, r3, #16
 80027a4:	4bb3      	ldr	r3, [pc, #716]	; (8002a74 <bmi088_update+0x3b4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	79db      	ldrb	r3, [r3, #7]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	4313      	orrs	r3, r2
 80027ae:	4ab1      	ldr	r2, [pc, #708]	; (8002a74 <bmi088_update+0x3b4>)
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	7992      	ldrb	r2, [r2, #6]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

		BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	ee17 0a90 	vmov	r0, s15
 80027c6:	f7fd fedf 	bl	8000588 <__aeabi_f2d>
 80027ca:	a3a3      	add	r3, pc, #652	; (adr r3, 8002a58 <bmi088_update+0x398>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd ff32 	bl	8000638 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a60 <bmi088_update+0x3a0>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fe f853 	bl	800088c <__aeabi_ddiv>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	49a2      	ldr	r1, [pc, #648]	; (8002a74 <bmi088_update+0x3b4>)
 80027ec:	680e      	ldr	r6, [r1, #0]
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe fa19 	bl	8000c28 <__aeabi_d2f>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

		int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 80027fc:	4b9d      	ldr	r3, [pc, #628]	; (8002a74 <bmi088_update+0x3b4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	795b      	ldrb	r3, [r3, #5]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	b21a      	sxth	r2, r3
 8002806:	4b9b      	ldr	r3, [pc, #620]	; (8002a74 <bmi088_update+0x3b4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	827b      	strh	r3, [r7, #18]
		int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002812:	4b98      	ldr	r3, [pc, #608]	; (8002a74 <bmi088_update+0x3b4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	78db      	ldrb	r3, [r3, #3]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b95      	ldr	r3, [pc, #596]	; (8002a74 <bmi088_update+0x3b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	789b      	ldrb	r3, [r3, #2]
 8002822:	b21b      	sxth	r3, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	823b      	strh	r3, [r7, #16]
		int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <bmi088_update+0x3b4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	b21a      	sxth	r2, r3
 8002832:	4b90      	ldr	r3, [pc, #576]	; (8002a74 <bmi088_update+0x3b4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b21b      	sxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	81fb      	strh	r3, [r7, #14]

		BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 800283e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284a:	ee17 0a90 	vmov	r0, s15
 800284e:	f7fd fe9b 	bl	8000588 <__aeabi_f2d>
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <bmi088_update+0x3b8>)
 8002858:	f7fe f818 	bl	800088c <__aeabi_ddiv>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <bmi088_update+0x3bc>)
 800286a:	f7fd fee5 	bl	8000638 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <bmi088_update+0x3c0>)
 800287c:	f7fd fedc 	bl	8000638 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4692      	mov	sl, r2
 8002886:	469b      	mov	fp, r3
 8002888:	4b7a      	ldr	r3, [pc, #488]	; (8002a74 <bmi088_update+0x3b4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	7d1b      	ldrb	r3, [r3, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002898:	ee17 0a90 	vmov	r0, s15
 800289c:	f7fd fe74 	bl	8000588 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	ec43 2b11 	vmov	d1, r2, r3
 80028a8:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8002a68 <bmi088_update+0x3a8>
 80028ac:	f00c fdc0 	bl	800f430 <pow>
 80028b0:	ec53 2b10 	vmov	r2, r3, d0
 80028b4:	4650      	mov	r0, sl
 80028b6:	4659      	mov	r1, fp
 80028b8:	f7fd febe 	bl	8000638 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <bmi088_update+0x3c4>)
 80028ca:	f7fd fcfd 	bl	80002c8 <__aeabi_dsub>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4968      	ldr	r1, [pc, #416]	; (8002a74 <bmi088_update+0x3b4>)
 80028d4:	680e      	ldr	r6, [r1, #0]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f9a5 	bl	8000c28 <__aeabi_d2f>
 80028de:	4603      	mov	r3, r0
 80028e0:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
		BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 80028e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f0:	ee17 0a90 	vmov	r0, s15
 80028f4:	f7fd fe48 	bl	8000588 <__aeabi_f2d>
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <bmi088_update+0x3b8>)
 80028fe:	f7fd ffc5 	bl	800088c <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <bmi088_update+0x3bc>)
 8002910:	f7fd fe92 	bl	8000638 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <bmi088_update+0x3c0>)
 8002922:	f7fd fe89 	bl	8000638 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4692      	mov	sl, r2
 800292c:	469b      	mov	fp, r3
 800292e:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <bmi088_update+0x3b4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	7d1b      	ldrb	r3, [r3, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800293e:	ee17 0a90 	vmov	r0, s15
 8002942:	f7fd fe21 	bl	8000588 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	ec43 2b11 	vmov	d1, r2, r3
 800294e:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002a68 <bmi088_update+0x3a8>
 8002952:	f00c fd6d 	bl	800f430 <pow>
 8002956:	ec53 2b10 	vmov	r2, r3, d0
 800295a:	4650      	mov	r0, sl
 800295c:	4659      	mov	r1, fp
 800295e:	f7fd fe6b 	bl	8000638 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <bmi088_update+0x3c8>)
 8002970:	f7fd fcac 	bl	80002cc <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	493e      	ldr	r1, [pc, #248]	; (8002a74 <bmi088_update+0x3b4>)
 800297a:	680e      	ldr	r6, [r1, #0]
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f952 	bl	8000c28 <__aeabi_d2f>
 8002984:	4603      	mov	r3, r0
 8002986:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
		BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 800298a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	ee17 0a90 	vmov	r0, s15
 800299a:	f7fd fdf5 	bl	8000588 <__aeabi_f2d>
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <bmi088_update+0x3b8>)
 80029a4:	f7fd ff72 	bl	800088c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <bmi088_update+0x3bc>)
 80029b6:	f7fd fe3f 	bl	8000638 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <bmi088_update+0x3c0>)
 80029c8:	f7fd fe36 	bl	8000638 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4692      	mov	sl, r2
 80029d2:	469b      	mov	fp, r3
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <bmi088_update+0x3b4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	7d1b      	ldrb	r3, [r3, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e4:	ee17 0a90 	vmov	r0, s15
 80029e8:	f7fd fdce 	bl	8000588 <__aeabi_f2d>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	ec43 2b11 	vmov	d1, r2, r3
 80029f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a68 <bmi088_update+0x3a8>
 80029f8:	f00c fd1a 	bl	800f430 <pow>
 80029fc:	ec53 2b10 	vmov	r2, r3, d0
 8002a00:	4650      	mov	r0, sl
 8002a02:	4659      	mov	r1, fp
 8002a04:	f7fd fe18 	bl	8000638 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <bmi088_update+0x3c4>)
 8002a16:	f7fd fc59 	bl	80002cc <__adddf3>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4915      	ldr	r1, [pc, #84]	; (8002a74 <bmi088_update+0x3b4>)
 8002a20:	680e      	ldr	r6, [r1, #0]
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7fe f8ff 	bl	8000c28 <__aeabi_d2f>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

		//BMI->vel_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET - 1000.0) * BMI->deltaTime;
		//BMI->vel_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET) * BMI->deltaTime;
		//BMI->vel_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET) * BMI->deltaTime;

		BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <bmi088_update+0x3b4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <bmi088_update+0x3b4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	d520      	bpl.n	8002a90 <bmi088_update+0x3d0>
 8002a4e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002a8c <bmi088_update+0x3cc>
 8002a52:	e027      	b.n	8002aa4 <bmi088_update+0x3e4>
 8002a54:	f3af 8000 	nop.w
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	40438800 	.word	0x40438800
 8002a60:	00000000 	.word	0x00000000
 8002a64:	412e8480 	.word	0x412e8480
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	40000000 	.word	0x40000000
 8002a70:	40370000 	.word	0x40370000
 8002a74:	20000220 	.word	0x20000220
 8002a78:	40e00000 	.word	0x40e00000
 8002a7c:	408f4000 	.word	0x408f4000
 8002a80:	3ff80000 	.word	0x3ff80000
 8002a84:	40100000 	.word	0x40100000
 8002a88:	402e0000 	.word	0x402e0000
 8002a8c:	00000000 	.word	0x00000000
 8002a90:	4bb5      	ldr	r3, [pc, #724]	; (8002d68 <bmi088_update+0x6a8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a98:	4bb3      	ldr	r3, [pc, #716]	; (8002d68 <bmi088_update+0x6a8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa4:	4bb0      	ldr	r3, [pc, #704]	; (8002d68 <bmi088_update+0x6a8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		BMI->lastTime = BMI->currentTime;
 8002aac:	4bae      	ldr	r3, [pc, #696]	; (8002d68 <bmi088_update+0x6a8>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4bad      	ldr	r3, [pc, #692]	; (8002d68 <bmi088_update+0x6a8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002ab8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		BMI->rawDatas.isAccelUpdated = 0;
 8002abc:	4baa      	ldr	r3, [pc, #680]	; (8002d68 <bmi088_update+0x6a8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	749a      	strb	r2, [r3, #18]
		isTimeUpdated = 1;
 8002ac4:	4ba9      	ldr	r3, [pc, #676]	; (8002d6c <bmi088_update+0x6ac>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
		UNUSED(retVal);
	}

	if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002aca:	4ba7      	ldr	r3, [pc, #668]	; (8002d68 <bmi088_update+0x6a8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	7c5b      	ldrb	r3, [r3, #17]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 81cc 	beq.w	8002e6e <bmi088_update+0x7ae>
 8002ad6:	4ba5      	ldr	r3, [pc, #660]	; (8002d6c <bmi088_update+0x6ac>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 81c7 	beq.w	8002e6e <bmi088_update+0x7ae>
	{
		if(isStarded){
 8002ae0:	4ba3      	ldr	r3, [pc, #652]	; (8002d70 <bmi088_update+0x6b0>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 81b7 	beq.w	8002e58 <bmi088_update+0x798>
			HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 20);
 8002aea:	4ba2      	ldr	r3, [pc, #648]	; (8002d74 <bmi088_update+0x6b4>)
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	4b9e      	ldr	r3, [pc, #632]	; (8002d68 <bmi088_update+0x6a8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330b      	adds	r3, #11
 8002af4:	2214      	movs	r2, #20
 8002af6:	9202      	str	r2, [sp, #8]
 8002af8:	2206      	movs	r2, #6
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2301      	movs	r3, #1
 8002b00:	2202      	movs	r2, #2
 8002b02:	21d0      	movs	r1, #208	; 0xd0
 8002b04:	f004 fc64 	bl	80073d0 <HAL_I2C_Mem_Read>
			int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002b08:	4b97      	ldr	r3, [pc, #604]	; (8002d68 <bmi088_update+0x6a8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	7c1b      	ldrb	r3, [r3, #16]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	b21a      	sxth	r2, r3
 8002b12:	4b95      	ldr	r3, [pc, #596]	; (8002d68 <bmi088_update+0x6a8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	7bdb      	ldrb	r3, [r3, #15]
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	81bb      	strh	r3, [r7, #12]
			int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002b1e:	4b92      	ldr	r3, [pc, #584]	; (8002d68 <bmi088_update+0x6a8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	7b9b      	ldrb	r3, [r3, #14]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	4b8f      	ldr	r3, [pc, #572]	; (8002d68 <bmi088_update+0x6a8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	7b5b      	ldrb	r3, [r3, #13]
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	4313      	orrs	r3, r2
 8002b32:	817b      	strh	r3, [r7, #10]
			int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002b34:	4b8c      	ldr	r3, [pc, #560]	; (8002d68 <bmi088_update+0x6a8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	7b1b      	ldrb	r3, [r3, #12]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	4b8a      	ldr	r3, [pc, #552]	; (8002d68 <bmi088_update+0x6a8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	7adb      	ldrb	r3, [r3, #11]
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	813b      	strh	r3, [r7, #8]
			/*
			BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
			BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
			BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
			 */
			BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[0]);
 8002b4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fd08 	bl	8000564 <__aeabi_i2d>
 8002b54:	a382      	add	r3, pc, #520	; (adr r3, 8002d60 <bmi088_update+0x6a0>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd fe97 	bl	800088c <__aeabi_ddiv>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4692      	mov	sl, r2
 8002b64:	469b      	mov	fp, r3
 8002b66:	4b80      	ldr	r3, [pc, #512]	; (8002d68 <bmi088_update+0x6a8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	7e5b      	ldrb	r3, [r3, #25]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b72:	4113      	asrs	r3, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fcf5 	bl	8000564 <__aeabi_i2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4650      	mov	r0, sl
 8002b80:	4659      	mov	r1, fp
 8002b82:	f7fd fd59 	bl	8000638 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <bmi088_update+0x6b8>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	4e74      	ldr	r6, [pc, #464]	; (8002d68 <bmi088_update+0x6a8>)
 8002b96:	6836      	ldr	r6, [r6, #0]
 8002b98:	f7fd fb96 	bl	80002c8 <__aeabi_dsub>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
			BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[1]);
 8002ba4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fcdb 	bl	8000564 <__aeabi_i2d>
 8002bae:	a36c      	add	r3, pc, #432	; (adr r3, 8002d60 <bmi088_update+0x6a0>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fe6a 	bl	800088c <__aeabi_ddiv>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4692      	mov	sl, r2
 8002bbe:	469b      	mov	fp, r3
 8002bc0:	4b69      	ldr	r3, [pc, #420]	; (8002d68 <bmi088_update+0x6a8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	7e5b      	ldrb	r3, [r3, #25]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bcc:	4113      	asrs	r3, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcc8 	bl	8000564 <__aeabi_i2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4650      	mov	r0, sl
 8002bda:	4659      	mov	r1, fp
 8002bdc:	f7fd fd2c 	bl	8000638 <__aeabi_dmul>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <bmi088_update+0x6b8>)
 8002bea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bee:	4e5e      	ldr	r6, [pc, #376]	; (8002d68 <bmi088_update+0x6a8>)
 8002bf0:	6836      	ldr	r6, [r6, #0]
 8002bf2:	f7fd fb69 	bl	80002c8 <__aeabi_dsub>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
			BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[2]);
 8002bfe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fcae 	bl	8000564 <__aeabi_i2d>
 8002c08:	a355      	add	r3, pc, #340	; (adr r3, 8002d60 <bmi088_update+0x6a0>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fe3d 	bl	800088c <__aeabi_ddiv>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4692      	mov	sl, r2
 8002c18:	469b      	mov	fp, r3
 8002c1a:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <bmi088_update+0x6a8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	7e5b      	ldrb	r3, [r3, #25]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c26:	4113      	asrs	r3, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc9b 	bl	8000564 <__aeabi_i2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4650      	mov	r0, sl
 8002c34:	4659      	mov	r1, fp
 8002c36:	f7fd fcff 	bl	8000638 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <bmi088_update+0x6b8>)
 8002c44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c48:	4e47      	ldr	r6, [pc, #284]	; (8002d68 <bmi088_update+0x6a8>)
 8002c4a:	6836      	ldr	r6, [r6, #0]
 8002c4c:	f7fd fb3c 	bl	80002c8 <__aeabi_dsub>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

			BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002c58:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <bmi088_update+0x6a8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc91 	bl	8000588 <__aeabi_f2d>
 8002c66:	e9c7 0100 	strd	r0, r1, [r7]
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <bmi088_update+0x6a8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <bmi088_update+0x6a8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc84 	bl	8000588 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4650      	mov	r0, sl
 8002c86:	4659      	mov	r1, fp
 8002c88:	f7fd fcd6 	bl	8000638 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c94:	f7fd fb1a 	bl	80002cc <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4932      	ldr	r1, [pc, #200]	; (8002d68 <bmi088_update+0x6a8>)
 8002c9e:	680e      	ldr	r6, [r1, #0]
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f7fd ffc0 	bl	8000c28 <__aeabi_d2f>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
			BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8002cae:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <bmi088_update+0x6a8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc66 	bl	8000588 <__aeabi_f2d>
 8002cbc:	e9c7 0100 	strd	r0, r1, [r7]
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <bmi088_update+0x6a8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <bmi088_update+0x6a8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc59 	bl	8000588 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4650      	mov	r0, sl
 8002cdc:	4659      	mov	r1, fp
 8002cde:	f7fd fcab 	bl	8000638 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cea:	f7fd faef 	bl	80002cc <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	491d      	ldr	r1, [pc, #116]	; (8002d68 <bmi088_update+0x6a8>)
 8002cf4:	680e      	ldr	r6, [r1, #0]
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd ff95 	bl	8000c28 <__aeabi_d2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
			BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <bmi088_update+0x6a8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fc3b 	bl	8000588 <__aeabi_f2d>
 8002d12:	e9c7 0100 	strd	r0, r1, [r7]
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <bmi088_update+0x6a8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <bmi088_update+0x6a8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fc2e 	bl	8000588 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4650      	mov	r0, sl
 8002d32:	4659      	mov	r1, fp
 8002d34:	f7fd fc80 	bl	8000638 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d40:	f7fd fac4 	bl	80002cc <__adddf3>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <bmi088_update+0x6a8>)
 8002d4a:	680e      	ldr	r6, [r1, #0]
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7fd ff6a 	bl	8000c28 <__aeabi_d2f>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98


			//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
			//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

			updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8002d5a:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <bmi088_update+0x6a8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e00d      	b.n	8002d7c <bmi088_update+0x6bc>
 8002d60:	00000000 	.word	0x00000000
 8002d64:	40dfffc0 	.word	0x40dfffc0
 8002d68:	20000220 	.word	0x20000220
 8002d6c:	20000224 	.word	0x20000224
 8002d70:	20000225 	.word	0x20000225
 8002d74:	2000021c 	.word	0x2000021c
 8002d78:	20000260 	.word	0x20000260
 8002d7c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002d80:	4690      	mov	r8, r2
 8002d82:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002d86:	a33c      	add	r3, pc, #240	; (adr r3, 8002e78 <bmi088_update+0x7b8>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	4649      	mov	r1, r9
 8002d90:	f7fd fc52 	bl	8000638 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <bmi088_update+0x7c0>)
 8002da2:	f7fd fd73 	bl	800088c <__aeabi_ddiv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7fd ff3b 	bl	8000c28 <__aeabi_d2f>
 8002db2:	4606      	mov	r6, r0
 8002db4:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <bmi088_update+0x7c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8002dbc:	a32e      	add	r3, pc, #184	; (adr r3, 8002e78 <bmi088_update+0x7b8>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fc39 	bl	8000638 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <bmi088_update+0x7c0>)
 8002dd4:	f7fd fd5a 	bl	800088c <__aeabi_ddiv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd ff22 	bl	8000c28 <__aeabi_d2f>
 8002de4:	4680      	mov	r8, r0
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <bmi088_update+0x7c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002dee:	4614      	mov	r4, r2
 8002df0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002df4:	a320      	add	r3, pc, #128	; (adr r3, 8002e78 <bmi088_update+0x7b8>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	f7fd fc1b 	bl	8000638 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <bmi088_update+0x7c0>)
 8002e10:	f7fd fd3c 	bl	800088c <__aeabi_ddiv>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7fd ff04 	bl	8000c28 <__aeabi_d2f>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <bmi088_update+0x7c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8002e2a:	eef0 1a67 	vmov.f32	s3, s15
 8002e2e:	ee01 2a10 	vmov	s2, r2
 8002e32:	ee00 8a90 	vmov	s1, r8
 8002e36:	ee00 6a10 	vmov	s0, r6
 8002e3a:	f001 f8ab 	bl	8003f94 <updateQuaternion>
			quaternionToEuler();
 8002e3e:	f001 f9d3 	bl	80041e8 <quaternionToEuler>

			BMI->rawDatas.isGyroUpdated = 0;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <bmi088_update+0x7c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <bmi088_update+0x7c8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
			is_gyro_offset = 1;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <bmi088_update+0x7cc>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
		{
			BMI->lastTime = BMI->currentTime;
			isStarded = 1;
		}
	}
}
 8002e56:	e00a      	b.n	8002e6e <bmi088_update+0x7ae>
			BMI->lastTime = BMI->currentTime;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <bmi088_update+0x7c4>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <bmi088_update+0x7c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			isStarded = 1;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <bmi088_update+0x7d0>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e78:	54442d18 	.word	0x54442d18
 8002e7c:	400921fb 	.word	0x400921fb
 8002e80:	40668000 	.word	0x40668000
 8002e84:	20000220 	.word	0x20000220
 8002e88:	20000224 	.word	0x20000224
 8002e8c:	20000226 	.word	0x20000226
 8002e90:	20000225 	.word	0x20000225

08002e94 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <bmi088_getAccelDatas_INT+0x18>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	749a      	strb	r2, [r3, #18]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000220 	.word	0x20000220

08002eb0 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <bmi088_getGyroDatas_INT+0x18>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	745a      	strb	r2, [r3, #17]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000220 	.word	0x20000220

08002ecc <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	b0c5      	sub	sp, #276	; 0x114
 8002ed0:	af04      	add	r7, sp, #16
	uint8_t buffer[250];
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002ed2:	f7ff fbf5 	bl	80026c0 <bmi088_update>
		if(is_gyro_offset == 1)
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	; (8003010 <getOffset+0x144>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d1f9      	bne.n	8002ed2 <getOffset+0x6>
		{
			if(offsetCounter < 1000){
 8002ede:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <getOffset+0x148>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee6:	da32      	bge.n	8002f4e <getOffset+0x82>
					 g[0][0] += BMI->gyro_x;
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <getOffset+0x14c>)
 8002eea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eee:	4b4b      	ldr	r3, [pc, #300]	; (800301c <getOffset+0x150>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002ef6:	f7fd f9e9 	bl	80002cc <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4946      	ldr	r1, [pc, #280]	; (8003018 <getOffset+0x14c>)
 8002f00:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002f04:	4b44      	ldr	r3, [pc, #272]	; (8003018 <getOffset+0x14c>)
 8002f06:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f0a:	4b44      	ldr	r3, [pc, #272]	; (800301c <getOffset+0x150>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002f12:	f7fd f9db 	bl	80002cc <__adddf3>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	493f      	ldr	r1, [pc, #252]	; (8003018 <getOffset+0x14c>)
 8002f1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <getOffset+0x14c>)
 8002f22:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <getOffset+0x150>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f2e:	f7fd f9cd 	bl	80002cc <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4938      	ldr	r1, [pc, #224]	; (8003018 <getOffset+0x14c>)
 8002f38:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002f3c:	4b35      	ldr	r3, [pc, #212]	; (8003014 <getOffset+0x148>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <getOffset+0x148>)
 8002f44:	6013      	str	r3, [r2, #0]
					 HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 250);
					 quaternionSet_zero();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <getOffset+0x144>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e7c1      	b.n	8002ed2 <getOffset+0x6>
					 g[0][0] /= 1000.0;
 8002f4e:	4b32      	ldr	r3, [pc, #200]	; (8003018 <getOffset+0x14c>)
 8002f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <getOffset+0x154>)
 8002f5a:	f7fd fc97 	bl	800088c <__aeabi_ddiv>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	492d      	ldr	r1, [pc, #180]	; (8003018 <getOffset+0x14c>)
 8002f64:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <getOffset+0x14c>)
 8002f6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <getOffset+0x154>)
 8002f74:	f7fd fc8a 	bl	800088c <__aeabi_ddiv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4926      	ldr	r1, [pc, #152]	; (8003018 <getOffset+0x14c>)
 8002f7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <getOffset+0x14c>)
 8002f84:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <getOffset+0x154>)
 8002f8e:	f7fd fc7d 	bl	800088c <__aeabi_ddiv>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4920      	ldr	r1, [pc, #128]	; (8003018 <getOffset+0x14c>)
 8002f98:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offset_vals_d[0] = g[0][0];
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <getOffset+0x14c>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	4920      	ldr	r1, [pc, #128]	; (8003024 <getOffset+0x158>)
 8002fa4:	e9c1 2300 	strd	r2, r3, [r1]
					 offset_vals_d[1] = g[0][1];
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <getOffset+0x14c>)
 8002faa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fae:	491d      	ldr	r1, [pc, #116]	; (8003024 <getOffset+0x158>)
 8002fb0:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 offset_vals_d[2] = g[0][2];
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <getOffset+0x14c>)
 8002fb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fba:	491a      	ldr	r1, [pc, #104]	; (8003024 <getOffset+0x158>)
 8002fbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 sprintf((char*)buffer, "\n\n\rg_x:%f \t g_y:%f \t g_z:%f\n\n\r", g[0][0], g[0][1], g[0][2]);
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <getOffset+0x14c>)
 8002fc2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <getOffset+0x14c>)
 8002fc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fcc:	4912      	ldr	r1, [pc, #72]	; (8003018 <getOffset+0x14c>)
 8002fce:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002fd2:	1d3e      	adds	r6, r7, #4
 8002fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fd8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fdc:	4622      	mov	r2, r4
 8002fde:	462b      	mov	r3, r5
 8002fe0:	4911      	ldr	r1, [pc, #68]	; (8003028 <getOffset+0x15c>)
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f007 ff74 	bl	800aed0 <siprintf>
					 HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 250);
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd f910 	bl	8000210 <strlen>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	1d39      	adds	r1, r7, #4
 8002ff6:	23fa      	movs	r3, #250	; 0xfa
 8002ff8:	480c      	ldr	r0, [pc, #48]	; (800302c <getOffset+0x160>)
 8002ffa:	f005 fe1f 	bl	8008c3c <HAL_UART_Transmit>
					 quaternionSet_zero();
 8002ffe:	f001 fbb9 	bl	8004774 <quaternionSet_zero>
					 break;
 8003002:	bf00      	nop
		}

	}
}
 8003004:	bf00      	nop
 8003006:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800300a:	46bd      	mov	sp, r7
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300e:	bf00      	nop
 8003010:	20000226 	.word	0x20000226
 8003014:	20000278 	.word	0x20000278
 8003018:	20000230 	.word	0x20000230
 800301c:	20000220 	.word	0x20000220
 8003020:	408f4000 	.word	0x408f4000
 8003024:	20000260 	.word	0x20000260
 8003028:	080110e0 	.word	0x080110e0
 800302c:	200003f0 	.word	0x200003f0

08003030 <calculateCRC>:
#include "queternion.h"

union DataPack veriler;

static uint8_t calculateCRC()
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
	int check_sum = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800303a:	2301      	movs	r3, #1
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	e00a      	b.n	8003056 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <calculateCRC+0x48>)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b3c      	cmp	r3, #60	; 0x3c
 800305a:	d9f1      	bls.n	8003040 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	425a      	negs	r2, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	bf58      	it	pl
 8003066:	4253      	negpl	r3, r2
 8003068:	b2db      	uxtb	r3, r3
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	2000027c 	.word	0x2000027c

0800307c <sendRF>:

static void sendRF()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 8003080:	4806      	ldr	r0, [pc, #24]	; (800309c <sendRF+0x20>)
 8003082:	f003 fb75 	bl	8006770 <HAL_DMA_GetState>
 8003086:	4603      	mov	r3, r0
 8003088:	2b02      	cmp	r3, #2
 800308a:	d004      	beq.n	8003096 <sendRF+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.dataYapi));
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	4904      	ldr	r1, [pc, #16]	; (80030a0 <sendRF+0x24>)
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <sendRF+0x28>)
 8003092:	f005 fe65 	bl	8008d60 <HAL_UART_Transmit_DMA>
	}
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000478 	.word	0x20000478
 80030a0:	2000027c 	.word	0x2000027c
 80030a4:	200003ac 	.word	0x200003ac

080030a8 <sendPC>:

static void sendPC()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 80030ac:	4806      	ldr	r0, [pc, #24]	; (80030c8 <sendPC+0x20>)
 80030ae:	f003 fb5f 	bl	8006770 <HAL_DMA_GetState>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d004      	beq.n	80030c2 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 80030b8:	2240      	movs	r2, #64	; 0x40
 80030ba:	4904      	ldr	r1, [pc, #16]	; (80030cc <sendPC+0x24>)
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <sendPC+0x28>)
 80030be:	f005 fe4f 	bl	8008d60 <HAL_UART_Transmit_DMA>
	}
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200004d8 	.word	0x200004d8
 80030cc:	2000027c 	.word	0x2000027c
 80030d0:	200003f0 	.word	0x200003f0

080030d4 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6178      	str	r0, [r7, #20]
 80030dc:	6139      	str	r1, [r7, #16]
 80030de:	60fa      	str	r2, [r7, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 80030e2:	4bb1      	ldr	r3, [pc, #708]	; (80033a8 <packDatas+0x2d4>)
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80030f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030fa:	ee17 3a90 	vmov	r3, s15
 80030fe:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4aaa      	ldr	r2, [pc, #680]	; (80033ac <packDatas+0x2d8>)
 8003104:	fb82 1203 	smull	r1, r2, r2, r3
 8003108:	1151      	asrs	r1, r2, #5
 800310a:	17da      	asrs	r2, r3, #31
 800310c:	1a8a      	subs	r2, r1, r2
 800310e:	2164      	movs	r1, #100	; 0x64
 8003110:	fb01 f202 	mul.w	r2, r1, r2
 8003114:	1a9a      	subs	r2, r3, r2
 8003116:	4613      	mov	r3, r2
 8003118:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4aa3      	ldr	r2, [pc, #652]	; (80033ac <packDatas+0x2d8>)
 800311e:	fb82 1203 	smull	r1, r2, r2, r3
 8003122:	1152      	asrs	r2, r2, #5
 8003124:	17db      	asrs	r3, r3, #31
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4a9f      	ldr	r2, [pc, #636]	; (80033ac <packDatas+0x2d8>)
 800312e:	fb82 1203 	smull	r1, r2, r2, r3
 8003132:	1151      	asrs	r1, r2, #5
 8003134:	17da      	asrs	r2, r3, #31
 8003136:	1a8a      	subs	r2, r1, r2
 8003138:	2164      	movs	r1, #100	; 0x64
 800313a:	fb01 f202 	mul.w	r2, r1, r2
 800313e:	1a9a      	subs	r2, r3, r2
 8003140:	4613      	mov	r3, r2
 8003142:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8003144:	7ffb      	ldrb	r3, [r7, #31]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	b25a      	sxtb	r2, r3
 800314a:	7fbb      	ldrb	r3, [r7, #30]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	b2db      	uxtb	r3, r3
 8003150:	b25b      	sxtb	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b25b      	sxtb	r3, r3
 8003156:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 8003158:	7fbb      	ldrb	r3, [r7, #30]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	b25a      	sxtb	r2, r3
 800315e:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8003162:	4313      	orrs	r3, r2
 8003164:	b25b      	sxtb	r3, r3
 8003166:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 8003168:	4a8f      	ldr	r2, [pc, #572]	; (80033a8 <packDatas+0x2d4>)
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 800316e:	4a8e      	ldr	r2, [pc, #568]	; (80033a8 <packDatas+0x2d4>)
 8003170:	7fbb      	ldrb	r3, [r7, #30]
 8003172:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80033b0 <packDatas+0x2dc>
 800317e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003186:	ee17 3a90 	vmov	r3, s15
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b86      	ldr	r3, [pc, #536]	; (80033a8 <packDatas+0x2d4>)
 800318e:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	edd3 7a03 	vldr	s15, [r3, #12]
 8003196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319a:	ee17 3a90 	vmov	r3, s15
 800319e:	b29a      	uxth	r2, r3
 80031a0:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <packDatas+0x2d4>)
 80031a2:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (uint8_t)(int)(bme->temperature * 3);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80031aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80031ba:	793a      	ldrb	r2, [r7, #4]
 80031bc:	4b7a      	ldr	r3, [pc, #488]	; (80033a8 <packDatas+0x2d4>)
 80031be:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80031c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80031ce:	793a      	ldrb	r2, [r7, #4]
 80031d0:	4b75      	ldr	r3, [pc, #468]	; (80033a8 <packDatas+0x2d4>)
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a73      	ldr	r2, [pc, #460]	; (80033a8 <packDatas+0x2d4>)
 80031dc:	6093      	str	r3, [r2, #8]
	veriler.dataYapi.maxAltitude = (int16_t)(int)bme->maxAltitude;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e8:	ee17 3a90 	vmov	r3, s15
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b6e      	ldr	r3, [pc, #440]	; (80033a8 <packDatas+0x2d4>)
 80031f0:	875a      	strh	r2, [r3, #58]	; 0x3a
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	4a6c      	ldr	r2, [pc, #432]	; (80033a8 <packDatas+0x2d4>)
 80031f8:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6a      	ldr	r2, [pc, #424]	; (80033a8 <packDatas+0x2d4>)
 8003200:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a68      	ldr	r2, [pc, #416]	; (80033a8 <packDatas+0x2d4>)
 8003208:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = bmi->gyro_x;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fd08 	bl	8000c28 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <packDatas+0x2d4>)
 800321c:	6193      	str	r3, [r2, #24]
	veriler.dataYapi.gyroY = bmi->gyro_y;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fcfe 	bl	8000c28 <__aeabi_d2f>
 800322c:	4603      	mov	r3, r0
 800322e:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <packDatas+0x2d4>)
 8003230:	61d3      	str	r3, [r2, #28]
	veriler.dataYapi.gyroZ = bmi->gyro_z;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fcf4 	bl	8000c28 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
 8003242:	4a59      	ldr	r2, [pc, #356]	; (80033a8 <packDatas+0x2d4>)
 8003244:	6213      	str	r3, [r2, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800324c:	eddf 6a59 	vldr	s13, [pc, #356]	; 80033b4 <packDatas+0x2e0>
 8003250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003254:	4b54      	ldr	r3, [pc, #336]	; (80033a8 <packDatas+0x2d4>)
 8003256:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_y / 1000;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003260:	eddf 6a54 	vldr	s13, [pc, #336]	; 80033b4 <packDatas+0x2e0>
 8003264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003268:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <packDatas+0x2d4>)
 800326a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = bmi->acc_z / 1000;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8003274:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80033b4 <packDatas+0x2e0>
 8003278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800327c:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <packDatas+0x2d4>)
 800327e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	b25a      	sxtb	r2, r3
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <packDatas+0x2e4>)
 800328e:	edd3 7a00 	vldr	s15, [r3]
 8003292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003296:	ee17 3a90 	vmov	r3, s15
 800329a:	135b      	asrs	r3, r3, #13
 800329c:	b25b      	sxtb	r3, r3
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b25a      	sxtb	r2, r3
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <packDatas+0x2e4>)
 80032aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b2:	ee17 3a90 	vmov	r3, s15
 80032b6:	139b      	asrs	r3, r3, #14
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b25a      	sxtb	r2, r3
 80032c4:	4b3c      	ldr	r3, [pc, #240]	; (80033b8 <packDatas+0x2e4>)
 80032c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ce:	ee17 3a90 	vmov	r3, s15
 80032d2:	13db      	asrs	r3, r3, #15
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	4313      	orrs	r3, r2
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <packDatas+0x2d4>)
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (uint16_t)(int)(bme->velocity * 10);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80032ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	b29a      	uxth	r2, r3
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <packDatas+0x2d4>)
 8003302:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 8003304:	f001 f848 	bl	8004398 <quaternionToTheta>
 8003308:	eef0 7a40 	vmov.f32	s15, s0
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <packDatas+0x2d4>)
 800330e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <packDatas+0x2e4>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331c:	ee17 3a90 	vmov	r3, s15
 8003320:	2b00      	cmp	r3, #0
 8003322:	bfb8      	it	lt
 8003324:	425b      	neglt	r3, r3
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <packDatas+0x2d4>)
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <packDatas+0x2e4>)
 8003330:	edd3 7a01 	vldr	s15, [r3, #4]
 8003334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003338:	ee17 3a90 	vmov	r3, s15
 800333c:	2b00      	cmp	r3, #0
 800333e:	bfb8      	it	lt
 8003340:	425b      	neglt	r3, r3
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <packDatas+0x2d4>)
 8003346:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <packDatas+0x2e4>)
 800334c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003354:	ee17 3a90 	vmov	r3, s15
 8003358:	2b00      	cmp	r3, #0
 800335a:	bfb8      	it	lt
 800335c:	425b      	neglt	r3, r3
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <packDatas+0x2d4>)
 8003362:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003366:	f7ff fe63 	bl	8003030 <calculateCRC>
 800336a:	4603      	mov	r3, r0
 800336c:	461a      	mov	r2, r3
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <packDatas+0x2d4>)
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <packDatas+0x2d4>)
 8003376:	220d      	movs	r2, #13
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <packDatas+0x2d4>)
 800337e:	220a      	movs	r2, #10
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef ACTIVATE_RF
	if(guc->voltaj > 8.0){
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800338e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	dd01      	ble.n	800339c <packDatas+0x2c8>
		sendRF();
 8003398:	f7ff fe70 	bl	800307c <sendRF>
	}
#endif
	sendPC();
 800339c:	f7ff fe84 	bl	80030a8 <sendPC>
}
 80033a0:	bf00      	nop
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	2000027c 	.word	0x2000027c
 80033ac:	51eb851f 	.word	0x51eb851f
 80033b0:	42c80000 	.word	0x42c80000
 80033b4:	447a0000 	.word	0x447a0000
 80033b8:	20000844 	.word	0x20000844

080033bc <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
 80033c8:	460b      	mov	r3, r1
 80033ca:	71bb      	strb	r3, [r7, #6]
 80033cc:	4613      	mov	r3, r2
 80033ce:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80033d4:	79bb      	ldrb	r3, [r7, #6]
 80033d6:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80033d8:	797b      	ldrb	r3, [r7, #5]
 80033da:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e00c      	b.n	80033fc <send_command+0x40>
        command[3 + i] = data[i];
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	441a      	add	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3303      	adds	r3, #3
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	3318      	adds	r3, #24
 80033f0:	443b      	add	r3, r7
 80033f2:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	ddef      	ble.n	80033e2 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 8003402:	f107 0108 	add.w	r1, r7, #8
 8003406:	2364      	movs	r3, #100	; 0x64
 8003408:	220c      	movs	r2, #12
 800340a:	4803      	ldr	r0, [pc, #12]	; (8003418 <send_command+0x5c>)
 800340c:	f005 fc16 	bl	8008c3c <HAL_UART_Transmit>
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200003ac 	.word	0x200003ac

0800341c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2207      	movs	r2, #7
 8003458:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[0];
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	799b      	ldrb	r3, [r3, #6]
 800345e:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[1];
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	79db      	ldrb	r3, [r3, #7]
 8003464:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7a5b      	ldrb	r3, [r3, #9]
 800346a:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7c5b      	ldrb	r3, [r3, #17]
 8003474:	4313      	orrs	r3, r2
 8003476:	b2da      	uxtb	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	4313      	orrs	r3, r2
 800347e:	b2db      	uxtb	r3, r3
 8003480:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	789a      	ldrb	r2, [r3, #2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7a9b      	ldrb	r3, [r3, #10]
 800348a:	4313      	orrs	r3, r2
 800348c:	b2da      	uxtb	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	4313      	orrs	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7a1b      	ldrb	r3, [r3, #8]
 800349c:	2b53      	cmp	r3, #83	; 0x53
 800349e:	d902      	bls.n	80034a6 <lora_configure+0x8a>
    	config->channel = 83;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2253      	movs	r2, #83	; 0x53
 80034a4:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7a1b      	ldrb	r3, [r3, #8]
 80034aa:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7ada      	ldrb	r2, [r3, #11]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7b1b      	ldrb	r3, [r3, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7b5b      	ldrb	r3, [r3, #13]
 80034bc:	4313      	orrs	r3, r2
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7b9b      	ldrb	r3, [r3, #14]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7bdb      	ldrb	r3, [r3, #15]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7c1b      	ldrb	r3, [r3, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[0];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	791b      	ldrb	r3, [r3, #4]
 80034de:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[1];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	795b      	ldrb	r3, [r3, #5]
 80034e4:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	2209      	movs	r2, #9
 80034ec:	2100      	movs	r1, #0
 80034ee:	20c0      	movs	r0, #192	; 0xc0
 80034f0:	f7ff ff64 	bl	80033bc <send_command>
}
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	0000      	movs	r0, r0
	...

08003500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003506:	f001 ffc9 	bl	800549c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800350a:	f000 f945 	bl	8003798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800350e:	f000 fb2d 	bl	8003b6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003512:	f000 fa13 	bl	800393c <MX_I2C1_Init>
  MX_I2C3_Init();
 8003516:	f000 fa3f 	bl	8003998 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800351a:	f000 fa95 	bl	8003a48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800351e:	f000 fabd 	bl	8003a9c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8003522:	f000 fae5 	bl	8003af0 <MX_DMA_Init>
  MX_ADC1_Init();
 8003526:	f000 f9a9 	bl	800387c <MX_ADC1_Init>
  MX_UART4_Init();
 800352a:	f000 fa63 	bl	80039f4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 800352e:	2009      	movs	r0, #9
 8003530:	f002 fd83 	bl	800603a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8003534:	200a      	movs	r0, #10
 8003536:	f002 fd80 	bl	800603a <HAL_NVIC_DisableIRQ>

  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800353a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800353e:	4880      	ldr	r0, [pc, #512]	; (8003740 <main+0x240>)
 8003540:	f003 fca5 	bl	8006e8e <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8003544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003548:	f002 f81a 	bl	8005580 <HAL_Delay>
  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800354c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003550:	487b      	ldr	r0, [pc, #492]	; (8003740 <main+0x240>)
 8003552:	f003 fc9c 	bl	8006e8e <HAL_GPIO_TogglePin>
  bmiBegin();
 8003556:	f000 fbab 	bl	8003cb0 <bmiBegin>
  bme280_init(&BME280_sensor, &hi2c1, BME280_MODE_NORMAL, BME280_OS_8, BME280_FILTER_8);
 800355a:	2303      	movs	r3, #3
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2304      	movs	r3, #4
 8003560:	2203      	movs	r2, #3
 8003562:	4978      	ldr	r1, [pc, #480]	; (8003744 <main+0x244>)
 8003564:	4878      	ldr	r0, [pc, #480]	; (8003748 <main+0x248>)
 8003566:	f7fe f939 	bl	80017dc <bme280_init>
  loraBegin();
 800356a:	f000 fbc3 	bl	8003cf4 <loraBegin>
  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 800356e:	2364      	movs	r3, #100	; 0x64
 8003570:	2213      	movs	r2, #19
 8003572:	4976      	ldr	r1, [pc, #472]	; (800374c <main+0x24c>)
 8003574:	4876      	ldr	r0, [pc, #472]	; (8003750 <main+0x250>)
 8003576:	f005 fb61 	bl	8008c3c <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
  HAL_UART_DeInit(&huart4);
 800357a:	4876      	ldr	r0, [pc, #472]	; (8003754 <main+0x254>)
 800357c:	f005 fb2f 	bl	8008bde <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8003580:	4873      	ldr	r0, [pc, #460]	; (8003750 <main+0x250>)
 8003582:	f005 fb2c 	bl	8008bde <HAL_UART_DeInit>
  HAL_Delay(10);
 8003586:	200a      	movs	r0, #10
 8003588:	f001 fffa 	bl	8005580 <HAL_Delay>
  huart4.Init.BaudRate = 115200;
 800358c:	4b71      	ldr	r3, [pc, #452]	; (8003754 <main+0x254>)
 800358e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003592:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8003594:	4b6e      	ldr	r3, [pc, #440]	; (8003750 <main+0x250>)
 8003596:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800359a:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//telemetri
 800359c:	486d      	ldr	r0, [pc, #436]	; (8003754 <main+0x254>)
 800359e:	f005 fad1 	bl	8008b44 <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 80035a2:	486b      	ldr	r0, [pc, #428]	; (8003750 <main+0x250>)
 80035a4:	f005 face 	bl	8008b44 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 80035a8:	486b      	ldr	r0, [pc, #428]	; (8003758 <main+0x258>)
 80035aa:	f002 fd61 	bl	8006070 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 80035ae:	486b      	ldr	r0, [pc, #428]	; (800375c <main+0x25c>)
 80035b0:	f002 fd5e 	bl	8006070 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 80035b4:	486a      	ldr	r0, [pc, #424]	; (8003760 <main+0x260>)
 80035b6:	f002 fd5b 	bl	8006070 <HAL_DMA_Init>
   // Timer'ı başlat

  //Bu makro gps verisini gözlemlemek içindir.
  //VIEW_GPS()

  getOffset();
 80035ba:	f7ff fc87 	bl	8002ecc <getOffset>

  UsrGpsL86Init(&huart2);
 80035be:	4864      	ldr	r0, [pc, #400]	; (8003750 <main+0x250>)
 80035c0:	f001 fd40 	bl	8005044 <UsrGpsL86Init>
  HAL_Delay(200);
 80035c4:	20c8      	movs	r0, #200	; 0xc8
 80035c6:	f001 ffdb 	bl	8005580 <HAL_Delay>
  rocketStatus = STAT_ROCKET_READY;
 80035ca:	4b66      	ldr	r3, [pc, #408]	; (8003764 <main+0x264>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bmi088_update();
 80035d0:	f7ff f876 	bl	80026c0 <bmi088_update>
	  bme280_update();
 80035d4:	f7fe fa94 	bl	8001b00 <bme280_update>
	  measurePower(&guc);
 80035d8:	4863      	ldr	r0, [pc, #396]	; (8003768 <main+0x268>)
 80035da:	f000 fbc9 	bl	8003d70 <measurePower>

#if defined(ALGORITHM_1)
	  algorithm_1_update(&BME280_sensor, algorithm_1_stat);
#endif
#if defined(ALGORITHM_2)
	  float teta = quaternionToTheta();
 80035de:	f000 fedb 	bl	8004398 <quaternionToTheta>
 80035e2:	ed87 0a01 	vstr	s0, [r7, #4]
	  algorithm_2_update(&BME280_sensor, &BMI_sensor, teta);
 80035e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80035ea:	4960      	ldr	r1, [pc, #384]	; (800376c <main+0x26c>)
 80035ec:	4856      	ldr	r0, [pc, #344]	; (8003748 <main+0x248>)
 80035ee:	f7fd feb3 	bl	8001358 <algorithm_2_update>
		 HAL_UART_Transmit(&huart1, (uint8_t *) dat, 1, 100);
		 HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
	 }
*/

	  if(rocketStatus == STAT_FLIGHT_STARTED)
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <main+0x264>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d102      	bne.n	8003600 <main+0x100>
		  lora_hz = 5;
 80035fa:	4b5d      	ldr	r3, [pc, #372]	; (8003770 <main+0x270>)
 80035fc:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <main+0x274>)
 80035fe:	601a      	str	r2, [r3, #0]

	  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003600:	f001 ffb2 	bl	8005568 <HAL_GetTick>
 8003604:	ee07 0a90 	vmov	s15, r0
 8003608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360c:	ee17 0a90 	vmov	r0, s15
 8003610:	f7fc ffba 	bl	8000588 <__aeabi_f2d>
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	4b57      	ldr	r3, [pc, #348]	; (8003778 <main+0x278>)
 800361a:	f7fd f937 	bl	800088c <__aeabi_ddiv>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f7fd faff 	bl	8000c28 <__aeabi_d2f>
 800362a:	4603      	mov	r3, r0
 800362c:	4a53      	ldr	r2, [pc, #332]	; (800377c <main+0x27c>)
 800362e:	6013      	str	r3, [r2, #0]

		 if(fabs(currentTime - lastTime) > 0.2)
 8003630:	4b52      	ldr	r3, [pc, #328]	; (800377c <main+0x27c>)
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	4b52      	ldr	r3, [pc, #328]	; (8003780 <main+0x280>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	eef0 7ae7 	vabs.f32	s15, s15
 8003644:	ee17 0a90 	vmov	r0, s15
 8003648:	f7fc ff9e 	bl	8000588 <__aeabi_f2d>
 800364c:	a33a      	add	r3, pc, #232	; (adr r3, 8003738 <main+0x238>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f7fd fa81 	bl	8000b58 <__aeabi_dcmpgt>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <main+0x164>


			 //sprintf((char*)buf, "teta = %f", teta);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);

			 lastTime = currentTime;
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <main+0x27c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a47      	ldr	r2, [pc, #284]	; (8003780 <main+0x280>)
 8003662:	6013      	str	r3, [r2, #0]
		 }




		 if(fabs(currentTime - lastTime2) > 5)
 8003664:	4b45      	ldr	r3, [pc, #276]	; (800377c <main+0x27c>)
 8003666:	ed93 7a00 	vldr	s14, [r3]
 800366a:	4b46      	ldr	r3, [pc, #280]	; (8003784 <main+0x284>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003674:	eef0 7ae7 	vabs.f32	s15, s15
 8003678:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800367c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	dd03      	ble.n	800368e <main+0x18e>

			 //sprintf((char*)buf, "acc counter: %d  dt:%f\r\n", counterAcc, BMI_sensor.deltaTime);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 //counterAcc = 0;

			 lastTime2 = currentTime;
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <main+0x27c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a3e      	ldr	r2, [pc, #248]	; (8003784 <main+0x284>)
 800368c:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS get location
		 if(g_GnssRx_Flag)
 800368e:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <main+0x288>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <main+0x19c>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 8003696:	483d      	ldr	r0, [pc, #244]	; (800378c <main+0x28c>)
 8003698:	f001 fce4 	bl	8005064 <Usr_GpsL86GetValues>
			 //printDatas();
		 }


		 //Lora timer;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 800369c:	f001 ff64 	bl	8005568 <HAL_GetTick>
 80036a0:	ee07 0a90 	vmov	s15, r0
 80036a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a8:	ee17 0a90 	vmov	r0, s15
 80036ac:	f7fc ff6c 	bl	8000588 <__aeabi_f2d>
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b30      	ldr	r3, [pc, #192]	; (8003778 <main+0x278>)
 80036b6:	f7fd f8e9 	bl	800088c <__aeabi_ddiv>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f7fd fab1 	bl	8000c28 <__aeabi_d2f>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <main+0x27c>)
 80036ca:	6013      	str	r3, [r2, #0]

		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 80036cc:	4b2b      	ldr	r3, [pc, #172]	; (800377c <main+0x27c>)
 80036ce:	ed93 7a00 	vldr	s14, [r3]
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <main+0x290>)
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036dc:	eef0 7ae7 	vabs.f32	s15, s15
 80036e0:	ee17 0a90 	vmov	r0, s15
 80036e4:	f7fc ff50 	bl	8000588 <__aeabi_f2d>
 80036e8:	4604      	mov	r4, r0
 80036ea:	460d      	mov	r5, r1
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <main+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fc ff49 	bl	8000588 <__aeabi_f2d>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	4925      	ldr	r1, [pc, #148]	; (8003794 <main+0x294>)
 8003700:	f7fd f8c4 	bl	800088c <__aeabi_ddiv>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4620      	mov	r0, r4
 800370a:	4629      	mov	r1, r5
 800370c:	f7fd fa24 	bl	8000b58 <__aeabi_dcmpgt>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <main+0x234>
		 {
			 getWatt();
 8003716:	f000 fbbf 	bl	8003e98 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, rocketStatus);
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <main+0x264>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <main+0x268>)
 8003722:	4a1a      	ldr	r2, [pc, #104]	; (800378c <main+0x28c>)
 8003724:	4908      	ldr	r1, [pc, #32]	; (8003748 <main+0x248>)
 8003726:	4811      	ldr	r0, [pc, #68]	; (800376c <main+0x26c>)
 8003728:	f7ff fcd4 	bl	80030d4 <packDatas>
			 //printDatas();
			 loraLastTime = currentTime;
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <main+0x27c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <main+0x290>)
 8003732:	6013      	str	r3, [r2, #0]
  {
 8003734:	e74c      	b.n	80035d0 <main+0xd0>
 8003736:	bf00      	nop
 8003738:	9999999a 	.word	0x9999999a
 800373c:	3fc99999 	.word	0x3fc99999
 8003740:	40020400 	.word	0x40020400
 8003744:	20000304 	.word	0x20000304
 8003748:	20000598 	.word	0x20000598
 800374c:	08011100 	.word	0x08011100
 8003750:	20000434 	.word	0x20000434
 8003754:	200003ac 	.word	0x200003ac
 8003758:	200004d8 	.word	0x200004d8
 800375c:	20000538 	.word	0x20000538
 8003760:	20000478 	.word	0x20000478
 8003764:	20000004 	.word	0x20000004
 8003768:	2000070c 	.word	0x2000070c
 800376c:	200005f0 	.word	0x200005f0
 8003770:	20000000 	.word	0x20000000
 8003774:	40a00000 	.word	0x40a00000
 8003778:	408f4000 	.word	0x408f4000
 800377c:	2000071c 	.word	0x2000071c
 8003780:	20000720 	.word	0x20000720
 8003784:	20000724 	.word	0x20000724
 8003788:	20000854 	.word	0x20000854
 800378c:	200006dc 	.word	0x200006dc
 8003790:	2000072c 	.word	0x2000072c
 8003794:	3ff00000 	.word	0x3ff00000

08003798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b094      	sub	sp, #80	; 0x50
 800379c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800379e:	f107 031c 	add.w	r3, r7, #28
 80037a2:	2234      	movs	r2, #52	; 0x34
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f006 fd0a 	bl	800a1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037ac:	f107 0308 	add.w	r3, r7, #8
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <SystemClock_Config+0xdc>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <SystemClock_Config+0xdc>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6413      	str	r3, [r2, #64]	; 0x40
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <SystemClock_Config+0xdc>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d8:	2300      	movs	r3, #0
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <SystemClock_Config+0xe0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <SystemClock_Config+0xe0>)
 80037e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <SystemClock_Config+0xe0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037fe:	2302      	movs	r3, #2
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003808:	2304      	movs	r3, #4
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800380c:	23b4      	movs	r3, #180	; 0xb4
 800380e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003810:	2302      	movs	r3, #2
 8003812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003814:	2302      	movs	r3, #2
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003818:	2302      	movs	r3, #2
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	4618      	mov	r0, r3
 8003822:	f004 fef1 	bl	8008608 <HAL_RCC_OscConfig>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800382c:	f000 fb82 	bl	8003f34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003830:	f004 fb50 	bl	8007ed4 <HAL_PWREx_EnableOverDrive>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800383a:	f000 fb7b 	bl	8003f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800383e:	230f      	movs	r3, #15
 8003840:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003842:	2302      	movs	r3, #2
 8003844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800384a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800384e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003854:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	2105      	movs	r1, #5
 800385c:	4618      	mov	r0, r3
 800385e:	f004 fb89 	bl	8007f74 <HAL_RCC_ClockConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003868:	f000 fb64 	bl	8003f34 <Error_Handler>
  }
}
 800386c:	bf00      	nop
 800386e:	3750      	adds	r7, #80	; 0x50
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000

0800387c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003882:	463b      	mov	r3, r7
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <MX_ADC1_Init+0xb4>)
 8003890:	4a28      	ldr	r2, [pc, #160]	; (8003934 <MX_ADC1_Init+0xb8>)
 8003892:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <MX_ADC1_Init+0xb4>)
 8003896:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800389a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <MX_ADC1_Init+0xb4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80038a2:	4b23      	ldr	r3, [pc, #140]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80038a8:	4b21      	ldr	r3, [pc, #132]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <MX_ADC1_Init+0xbc>)
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038ca:	2202      	movs	r2, #2
 80038cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038d8:	2201      	movs	r2, #1
 80038da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038dc:	4814      	ldr	r0, [pc, #80]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038de:	f001 fe73 	bl	80055c8 <HAL_ADC_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80038e8:	f000 fb24 	bl	8003f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80038ec:	230c      	movs	r3, #12
 80038ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80038f0:	2301      	movs	r3, #1
 80038f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80038f4:	2304      	movs	r3, #4
 80038f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038f8:	463b      	mov	r3, r7
 80038fa:	4619      	mov	r1, r3
 80038fc:	480c      	ldr	r0, [pc, #48]	; (8003930 <MX_ADC1_Init+0xb4>)
 80038fe:	f002 f845 	bl	800598c <HAL_ADC_ConfigChannel>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003908:	f000 fb14 	bl	8003f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800390c:	230b      	movs	r3, #11
 800390e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003910:	2302      	movs	r3, #2
 8003912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003914:	463b      	mov	r3, r7
 8003916:	4619      	mov	r1, r3
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <MX_ADC1_Init+0xb4>)
 800391a:	f002 f837 	bl	800598c <HAL_ADC_ConfigChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003924:	f000 fb06 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200002bc 	.word	0x200002bc
 8003934:	40012000 	.word	0x40012000
 8003938:	0f000001 	.word	0x0f000001

0800393c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <MX_I2C1_Init+0x50>)
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <MX_I2C1_Init+0x54>)
 8003944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <MX_I2C1_Init+0x50>)
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <MX_I2C1_Init+0x58>)
 800394a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <MX_I2C1_Init+0x50>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <MX_I2C1_Init+0x50>)
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <MX_I2C1_Init+0x50>)
 800395a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800395e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <MX_I2C1_Init+0x50>)
 8003962:	2200      	movs	r2, #0
 8003964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <MX_I2C1_Init+0x50>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <MX_I2C1_Init+0x50>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <MX_I2C1_Init+0x50>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003978:	4804      	ldr	r0, [pc, #16]	; (800398c <MX_I2C1_Init+0x50>)
 800397a:	f003 fabb 	bl	8006ef4 <HAL_I2C_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003984:	f000 fad6 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000304 	.word	0x20000304
 8003990:	40005400 	.word	0x40005400
 8003994:	000186a0 	.word	0x000186a0

08003998 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <MX_I2C3_Init+0x50>)
 800399e:	4a13      	ldr	r2, [pc, #76]	; (80039ec <MX_I2C3_Init+0x54>)
 80039a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039a4:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <MX_I2C3_Init+0x58>)
 80039a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039be:	2200      	movs	r2, #0
 80039c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <MX_I2C3_Init+0x50>)
 80039d6:	f003 fa8d 	bl	8006ef4 <HAL_I2C_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80039e0:	f000 faa8 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000358 	.word	0x20000358
 80039ec:	40005c00 	.word	0x40005c00
 80039f0:	000186a0 	.word	0x000186a0

080039f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <MX_UART4_Init+0x4c>)
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <MX_UART4_Init+0x50>)
 80039fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <MX_UART4_Init+0x4c>)
 8003a2c:	f005 f88a 	bl	8008b44 <HAL_UART_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003a36:	f000 fa7d 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200003ac 	.word	0x200003ac
 8003a44:	40004c00 	.word	0x40004c00

08003a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <MX_USART1_UART_Init+0x50>)
 8003a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a6e:	220c      	movs	r2, #12
 8003a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a7e:	4805      	ldr	r0, [pc, #20]	; (8003a94 <MX_USART1_UART_Init+0x4c>)
 8003a80:	f005 f860 	bl	8008b44 <HAL_UART_Init>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a8a:	f000 fa53 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200003f0 	.word	0x200003f0
 8003a98:	40011000 	.word	0x40011000

08003a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <MX_USART2_UART_Init+0x50>)
 8003aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <MX_USART2_UART_Init+0x4c>)
 8003ad4:	f005 f836 	bl	8008b44 <HAL_UART_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ade:	f000 fa29 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000434 	.word	0x20000434
 8003aec:	40004400 	.word	0x40004400

08003af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <MX_DMA_Init+0x78>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <MX_DMA_Init+0x78>)
 8003b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <MX_DMA_Init+0x78>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <MX_DMA_Init+0x78>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <MX_DMA_Init+0x78>)
 8003b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <MX_DMA_Init+0x78>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2100      	movs	r1, #0
 8003b32:	200f      	movs	r0, #15
 8003b34:	f002 fa57 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b38:	200f      	movs	r0, #15
 8003b3a:	f002 fa70 	bl	800601e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	2010      	movs	r0, #16
 8003b44:	f002 fa4f 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b48:	2010      	movs	r0, #16
 8003b4a:	f002 fa68 	bl	800601e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2100      	movs	r1, #0
 8003b52:	2046      	movs	r0, #70	; 0x46
 8003b54:	f002 fa47 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003b58:	2046      	movs	r0, #70	; 0x46
 8003b5a:	f002 fa60 	bl	800601e <HAL_NVIC_EnableIRQ>

}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	6313      	str	r3, [r2, #48]	; 0x30
 8003be6:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <MX_GPIO_Init+0x138>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|Led_Pin, GPIO_PIN_RESET);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003bf8:	482b      	ldr	r0, [pc, #172]	; (8003ca8 <MX_GPIO_Init+0x13c>)
 8003bfa:	f003 f92f 	bl	8006e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003c04:	4829      	ldr	r0, [pc, #164]	; (8003cac <MX_GPIO_Init+0x140>)
 8003c06:	f003 f929 	bl	8006e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin Led_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|Led_Pin;
 8003c0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c10:	2301      	movs	r3, #1
 8003c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4619      	mov	r1, r3
 8003c22:	4821      	ldr	r0, [pc, #132]	; (8003ca8 <MX_GPIO_Init+0x13c>)
 8003c24:	f002 fe92 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = LORA_M0_Pin|LORA_M1_Pin;
 8003c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	481a      	ldr	r0, [pc, #104]	; (8003cac <MX_GPIO_Init+0x140>)
 8003c42:	f002 fe83 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8003c46:	2318      	movs	r3, #24
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4813      	ldr	r0, [pc, #76]	; (8003ca8 <MX_GPIO_Init+0x13c>)
 8003c5c:	f002 fe76 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4619      	mov	r1, r3
 8003c74:	480c      	ldr	r0, [pc, #48]	; (8003ca8 <MX_GPIO_Init+0x13c>)
 8003c76:	f002 fe69 	bl	800694c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	2009      	movs	r0, #9
 8003c80:	f002 f9b1 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003c84:	2009      	movs	r0, #9
 8003c86:	f002 f9ca 	bl	800601e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	200a      	movs	r0, #10
 8003c90:	f002 f9a9 	bl	8005fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003c94:	200a      	movs	r0, #10
 8003c96:	f002 f9c2 	bl	800601e <HAL_NVIC_EnableIRQ>

}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	; 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020800 	.word	0x40020800

08003cb0 <bmiBegin>:

/* USER CODE BEGIN 4 */
void bmiBegin()
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <bmiBegin+0x3c>)
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <bmiBegin+0x3c>)
 8003cbc:	2209      	movs	r2, #9
 8003cbe:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <bmiBegin+0x3c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <bmiBegin+0x3c>)
 8003cc8:	2202      	movs	r2, #2
 8003cca:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8003ccc:	4b07      	ldr	r3, [pc, #28]	; (8003cec <bmiBegin+0x3c>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <bmiBegin+0x3c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <bmiBegin+0x3c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 8003cde:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <bmiBegin+0x40>)
 8003ce0:	4802      	ldr	r0, [pc, #8]	; (8003cec <bmiBegin+0x3c>)
 8003ce2:	f7fe facf 	bl	8002284 <bmi088_init>
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	200005f0 	.word	0x200005f0
 8003cf0:	20000358 	.word	0x20000358

08003cf4 <loraBegin>:


void loraBegin()
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cfe:	481a      	ldr	r0, [pc, #104]	; (8003d68 <loraBegin+0x74>)
 8003d00:	f003 f8ac 	bl	8006e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8003d04:	2201      	movs	r2, #1
 8003d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d0a:	4817      	ldr	r0, [pc, #92]	; (8003d68 <loraBegin+0x74>)
 8003d0c:	f003 f8a6 	bl	8006e5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003d10:	2064      	movs	r0, #100	; 0x64
 8003d12:	f001 fc35 	bl	8005580 <HAL_Delay>
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <loraBegin+0x78>)
 8003d18:	22e0      	movs	r2, #224	; 0xe0
 8003d1a:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <loraBegin+0x78>)
 8003d1e:	2206      	movs	r2, #6
 8003d20:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <loraBegin+0x78>)
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <loraBegin+0x78>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <loraBegin+0x78>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <loraBegin+0x78>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	809a      	strh	r2, [r3, #4]
    e22_lora.channel = 25;
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <loraBegin+0x78>)
 8003d3c:	2219      	movs	r2, #25
 8003d3e:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 8003d40:	480a      	ldr	r0, [pc, #40]	; (8003d6c <loraBegin+0x78>)
 8003d42:	f7ff fb6b 	bl	800341c <lora_configure>
   		 HAL_UART_Transmit(&huart1, (uint8_t *) dat, 1, 100);
   		 HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
   	 }
    }
    */
    HAL_Delay(100);
 8003d46:	2064      	movs	r0, #100	; 0x64
 8003d48:	f001 fc1a 	bl	8005580 <HAL_Delay>

	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d52:	4805      	ldr	r0, [pc, #20]	; (8003d68 <loraBegin+0x74>)
 8003d54:	f003 f882 	bl	8006e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d5e:	4802      	ldr	r0, [pc, #8]	; (8003d68 <loraBegin+0x74>)
 8003d60:	f003 f87c 	bl	8006e5c <HAL_GPIO_WritePin>
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40020800 	.word	0x40020800
 8003d6c:	200006c8 	.word	0x200006c8

08003d70 <measurePower>:


void measurePower(power *guc_)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	ed2d 8b02 	vpush	{d8}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 8003d7c:	4840      	ldr	r0, [pc, #256]	; (8003e80 <measurePower+0x110>)
 8003d7e:	f001 fc67 	bl	8005650 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8003d82:	210a      	movs	r1, #10
 8003d84:	483e      	ldr	r0, [pc, #248]	; (8003e80 <measurePower+0x110>)
 8003d86:	f001 fd68 	bl	800585a <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 8003d8a:	483d      	ldr	r0, [pc, #244]	; (8003e80 <measurePower+0x110>)
 8003d8c:	f001 fdf0 	bl	8005970 <HAL_ADC_GetValue>
 8003d90:	4603      	mov	r3, r0
 8003d92:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8003d94:	210a      	movs	r1, #10
 8003d96:	483a      	ldr	r0, [pc, #232]	; (8003e80 <measurePower+0x110>)
 8003d98:	f001 fd5f 	bl	800585a <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 8003d9c:	4838      	ldr	r0, [pc, #224]	; (8003e80 <measurePower+0x110>)
 8003d9e:	f001 fde7 	bl	8005970 <HAL_ADC_GetValue>
 8003da2:	4603      	mov	r3, r0
 8003da4:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 8003da6:	4836      	ldr	r0, [pc, #216]	; (8003e80 <measurePower+0x110>)
 8003da8:	f001 fd24 	bl	80057f4 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003e84 <measurePower+0x114>
 8003dba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dbe:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003e88 <measurePower+0x118>
 8003dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd6:	ee17 0a90 	vmov	r0, s15
 8003dda:	f7fc fbd5 	bl	8000588 <__aeabi_f2d>
 8003dde:	a326      	add	r3, pc, #152	; (adr r3, 8003e78 <measurePower+0x108>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc28 	bl	8000638 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <measurePower+0x11c>)
 8003df6:	f7fc fd49 	bl	800088c <__aeabi_ddiv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fc ff11 	bl	8000c28 <__aeabi_d2f>
 8003e06:	4602      	mov	r2, r0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	edd3 7a00 	vldr	s15, [r3]
 8003e18:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003e1c:	f001 fba4 	bl	8005568 <HAL_GetTick>
 8003e20:	ee07 0a90 	vmov	s15, r0
 8003e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e28:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003e90 <measurePower+0x120>
 8003e2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <measurePower+0x124>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 8003e4e:	f001 fb8b 	bl	8005568 <HAL_GetTick>
 8003e52:	ee07 0a90 	vmov	s15, r0
 8003e56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e5a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003e90 <measurePower+0x120>
 8003e5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <measurePower+0x124>)
 8003e64:	edc3 7a00 	vstr	s15, [r3]
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	ecbd 8b02 	vpop	{d8}
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	f3af 8000 	nop.w
 8003e78:	66666666 	.word	0x66666666
 8003e7c:	402a6666 	.word	0x402a6666
 8003e80:	200002bc 	.word	0x200002bc
 8003e84:	454e4000 	.word	0x454e4000
 8003e88:	45800000 	.word	0x45800000
 8003e8c:	40b00000 	.word	0x40b00000
 8003e90:	447a0000 	.word	0x447a0000
 8003e94:	20000728 	.word	0x20000728

08003e98 <getWatt>:

void getWatt()
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 8003e9e:	f001 fb63 	bl	8005568 <HAL_GetTick>
 8003ea2:	ee07 0a90 	vmov	s15, r0
 8003ea6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eaa:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003ef4 <getWatt+0x5c>
 8003eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb2:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <getWatt+0x60>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec4:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <getWatt+0x60>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <getWatt+0x64>)
 8003ed0:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ed4:	ed97 7a00 	vldr	s14, [r7]
 8003ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <getWatt+0x64>)
 8003ede:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <getWatt+0x64>)
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	447a0000 	.word	0x447a0000
 8003ef8:	20000730 	.word	0x20000730
 8003efc:	2000070c 	.word	0x2000070c

08003f00 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d101      	bne.n	8003f14 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8003f10:	f7fe ffce 	bl	8002eb0 <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d106      	bne.n	8003f28 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 8003f1a:	f7fe ffbb 	bl	8002e94 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_GPIO_EXTI_Callback+0x30>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a02      	ldr	r2, [pc, #8]	; (8003f30 <HAL_GPIO_EXTI_Callback+0x30>)
 8003f26:	6013      	str	r3, [r2, #0]
    }
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000734 	.word	0x20000734

08003f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <Error_Handler+0x4c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4911      	ldr	r1, [pc, #68]	; (8003f84 <Error_Handler+0x50>)
 8003f40:	4811      	ldr	r0, [pc, #68]	; (8003f88 <Error_Handler+0x54>)
 8003f42:	f006 ffc5 	bl	800aed0 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 8003f46:	4810      	ldr	r0, [pc, #64]	; (8003f88 <Error_Handler+0x54>)
 8003f48:	f7fc f962 	bl	8000210 <strlen>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	23fa      	movs	r3, #250	; 0xfa
 8003f52:	490d      	ldr	r1, [pc, #52]	; (8003f88 <Error_Handler+0x54>)
 8003f54:	480d      	ldr	r0, [pc, #52]	; (8003f8c <Error_Handler+0x58>)
 8003f56:	f004 fe71 	bl	8008c3c <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f5e:	480c      	ldr	r0, [pc, #48]	; (8003f90 <Error_Handler+0x5c>)
 8003f60:	f002 ff95 	bl	8006e8e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003f64:	2064      	movs	r0, #100	; 0x64
 8003f66:	f001 fb0b 	bl	8005580 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f6e:	4808      	ldr	r0, [pc, #32]	; (8003f90 <Error_Handler+0x5c>)
 8003f70:	f002 ff8d 	bl	8006e8e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003f74:	2064      	movs	r0, #100	; 0x64
 8003f76:	f001 fb03 	bl	8005580 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7a:	b672      	cpsid	i
}
 8003f7c:	bf00      	nop

	__disable_irq();
  while (1)
 8003f7e:	e7fe      	b.n	8003f7e <Error_Handler+0x4a>
 8003f80:	20000228 	.word	0x20000228
 8003f84:	08011114 	.word	0x08011114
 8003f88:	20000738 	.word	0x20000738
 8003f8c:	200003f0 	.word	0x200003f0
 8003f90:	40020400 	.word	0x40020400

08003f94 <updateQuaternion>:
#include "math.h"

static float q[4];
float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fa2:	ed87 1a01 	vstr	s2, [r7, #4]
 8003fa6:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8003faa:	4b8d      	ldr	r3, [pc, #564]	; (80041e0 <updateQuaternion+0x24c>)
 8003fac:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fb0:	eeb1 7a67 	vneg.f32	s14, s15
 8003fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fbc:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <updateQuaternion+0x24c>)
 8003fbe:	edd3 6a02 	vldr	s13, [r3, #8]
 8003fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fce:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <updateQuaternion+0x24c>)
 8003fd0:	edd3 6a03 	vldr	s13, [r3, #12]
 8003fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fe0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (q[0] * gx + q[2] * gz - q[3] * gy);
 8003fec:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <updateQuaternion+0x24c>)
 8003fee:	ed93 7a00 	vldr	s14, [r3]
 8003ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ffa:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <updateQuaternion+0x24c>)
 8003ffc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004000:	edd7 7a01 	vldr	s15, [r7, #4]
 8004004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800400c:	4b74      	ldr	r3, [pc, #464]	; (80041e0 <updateQuaternion+0x24c>)
 800400e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004012:	edd7 7a02 	vldr	s15, [r7, #8]
 8004016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800401a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004026:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (q[0] * gy - q[1] * gz + q[3] * gx);
 800402a:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <updateQuaternion+0x24c>)
 800402c:	ed93 7a00 	vldr	s14, [r3]
 8004030:	edd7 7a02 	vldr	s15, [r7, #8]
 8004034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004038:	4b69      	ldr	r3, [pc, #420]	; (80041e0 <updateQuaternion+0x24c>)
 800403a:	edd3 6a01 	vldr	s13, [r3, #4]
 800403e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <updateQuaternion+0x24c>)
 800404c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004050:	edd7 7a03 	vldr	s15, [r7, #12]
 8004054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004064:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (q[0] * gz + q[1] * gy - q[2] * gx);
 8004068:	4b5d      	ldr	r3, [pc, #372]	; (80041e0 <updateQuaternion+0x24c>)
 800406a:	ed93 7a00 	vldr	s14, [r3]
 800406e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004076:	4b5a      	ldr	r3, [pc, #360]	; (80041e0 <updateQuaternion+0x24c>)
 8004078:	edd3 6a01 	vldr	s13, [r3, #4]
 800407c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004088:	4b55      	ldr	r3, [pc, #340]	; (80041e0 <updateQuaternion+0x24c>)
 800408a:	edd3 6a02 	vldr	s13, [r3, #8]
 800408e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800409e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a2:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  q[0] += qDot1 * dt;
 80040a6:	4b4e      	ldr	r3, [pc, #312]	; (80041e0 <updateQuaternion+0x24c>)
 80040a8:	ed93 7a00 	vldr	s14, [r3]
 80040ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80040b0:	edd7 7a00 	vldr	s15, [r7]
 80040b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040bc:	4b48      	ldr	r3, [pc, #288]	; (80041e0 <updateQuaternion+0x24c>)
 80040be:	edc3 7a00 	vstr	s15, [r3]
  q[1] += qDot2 * dt;
 80040c2:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <updateQuaternion+0x24c>)
 80040c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80040c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80040cc:	edd7 7a00 	vldr	s15, [r7]
 80040d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <updateQuaternion+0x24c>)
 80040da:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += qDot3 * dt;
 80040de:	4b40      	ldr	r3, [pc, #256]	; (80041e0 <updateQuaternion+0x24c>)
 80040e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80040e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e8:	edd7 7a00 	vldr	s15, [r7]
 80040ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f4:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <updateQuaternion+0x24c>)
 80040f6:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += qDot4 * dt;
 80040fa:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <updateQuaternion+0x24c>)
 80040fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004100:	edd7 6a06 	vldr	s13, [r7, #24]
 8004104:	edd7 7a00 	vldr	s15, [r7]
 8004108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004110:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <updateQuaternion+0x24c>)
 8004112:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalize quaternion to prevent drift
  float norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8004116:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <updateQuaternion+0x24c>)
 8004118:	ed93 7a00 	vldr	s14, [r3]
 800411c:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <updateQuaternion+0x24c>)
 800411e:	edd3 7a00 	vldr	s15, [r3]
 8004122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004126:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <updateQuaternion+0x24c>)
 8004128:	edd3 6a01 	vldr	s13, [r3, #4]
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <updateQuaternion+0x24c>)
 800412e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <updateQuaternion+0x24c>)
 800413c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <updateQuaternion+0x24c>)
 8004142:	edd3 7a02 	vldr	s15, [r3, #8]
 8004146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800414a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <updateQuaternion+0x24c>)
 8004150:	edd3 6a03 	vldr	s13, [r3, #12]
 8004154:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <updateQuaternion+0x24c>)
 8004156:	edd3 7a03 	vldr	s15, [r3, #12]
 800415a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	ee17 0a90 	vmov	r0, s15
 8004166:	f7fc fa0f 	bl	8000588 <__aeabi_f2d>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	ec43 2b10 	vmov	d0, r2, r3
 8004172:	f00b f9cd 	bl	800f510 <sqrt>
 8004176:	ec53 2b10 	vmov	r2, r3, d0
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	f7fc fd53 	bl	8000c28 <__aeabi_d2f>
 8004182:	4603      	mov	r3, r0
 8004184:	617b      	str	r3, [r7, #20]
  q[0] /= norm;
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <updateQuaternion+0x24c>)
 8004188:	edd3 6a00 	vldr	s13, [r3]
 800418c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <updateQuaternion+0x24c>)
 8004196:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <updateQuaternion+0x24c>)
 800419c:	edd3 6a01 	vldr	s13, [r3, #4]
 80041a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80041a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <updateQuaternion+0x24c>)
 80041aa:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <updateQuaternion+0x24c>)
 80041b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80041b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80041b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <updateQuaternion+0x24c>)
 80041be:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <updateQuaternion+0x24c>)
 80041c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80041c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80041cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <updateQuaternion+0x24c>)
 80041d2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80041d6:	bf00      	nop
 80041d8:	3728      	adds	r7, #40	; 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000834 	.word	0x20000834
 80041e4:	00000000 	.word	0x00000000

080041e8 <quaternionToEuler>:

void quaternionToEuler(void) {
 80041e8:	b5b0      	push	{r4, r5, r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), 1.0f - 2.0f * (q[1] * q[1] + q[2] * q[2])) * (180.0 / M_PI);
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <quaternionToEuler+0x1a8>)
 80041ee:	ed93 7a00 	vldr	s14, [r3]
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <quaternionToEuler+0x1a8>)
 80041f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80041f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041fc:	4b64      	ldr	r3, [pc, #400]	; (8004390 <quaternionToEuler+0x1a8>)
 80041fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <quaternionToEuler+0x1a8>)
 8004204:	edd3 7a03 	vldr	s15, [r3, #12]
 8004208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800420c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004210:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004214:	ee17 0a90 	vmov	r0, s15
 8004218:	f7fc f9b6 	bl	8000588 <__aeabi_f2d>
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	4b5b      	ldr	r3, [pc, #364]	; (8004390 <quaternionToEuler+0x1a8>)
 8004222:	ed93 7a01 	vldr	s14, [r3, #4]
 8004226:	4b5a      	ldr	r3, [pc, #360]	; (8004390 <quaternionToEuler+0x1a8>)
 8004228:	edd3 7a01 	vldr	s15, [r3, #4]
 800422c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004230:	4b57      	ldr	r3, [pc, #348]	; (8004390 <quaternionToEuler+0x1a8>)
 8004232:	edd3 6a02 	vldr	s13, [r3, #8]
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <quaternionToEuler+0x1a8>)
 8004238:	edd3 7a02 	vldr	s15, [r3, #8]
 800423c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004244:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800424c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004250:	ee17 0a90 	vmov	r0, s15
 8004254:	f7fc f998 	bl	8000588 <__aeabi_f2d>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	ec43 2b11 	vmov	d1, r2, r3
 8004260:	ec45 4b10 	vmov	d0, r4, r5
 8004264:	f00b f8e2 	bl	800f42c <atan2>
 8004268:	ec51 0b10 	vmov	r0, r1, d0
 800426c:	a346      	add	r3, pc, #280	; (adr r3, 8004388 <quaternionToEuler+0x1a0>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f7fc f9e1 	bl	8000638 <__aeabi_dmul>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	f7fc fcd3 	bl	8000c28 <__aeabi_d2f>
 8004282:	4603      	mov	r3, r0
 8004284:	4a43      	ldr	r2, [pc, #268]	; (8004394 <quaternionToEuler+0x1ac>)
 8004286:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (q[0] * q[2] - q[3] * q[1])) * (180.0 / M_PI);
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <quaternionToEuler+0x1a8>)
 800428a:	ed93 7a00 	vldr	s14, [r3]
 800428e:	4b40      	ldr	r3, [pc, #256]	; (8004390 <quaternionToEuler+0x1a8>)
 8004290:	edd3 7a02 	vldr	s15, [r3, #8]
 8004294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004298:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <quaternionToEuler+0x1a8>)
 800429a:	edd3 6a03 	vldr	s13, [r3, #12]
 800429e:	4b3c      	ldr	r3, [pc, #240]	; (8004390 <quaternionToEuler+0x1a8>)
 80042a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80042a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042b0:	ee17 0a90 	vmov	r0, s15
 80042b4:	f7fc f968 	bl	8000588 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	ec43 2b10 	vmov	d0, r2, r3
 80042c0:	f00b f880 	bl	800f3c4 <asin>
 80042c4:	ec51 0b10 	vmov	r0, r1, d0
 80042c8:	a32f      	add	r3, pc, #188	; (adr r3, 8004388 <quaternionToEuler+0x1a0>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc f9b3 	bl	8000638 <__aeabi_dmul>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fca5 	bl	8000c28 <__aeabi_d2f>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <quaternionToEuler+0x1ac>)
 80042e2:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (q[0] * q[3] + q[1] * q[2]), 1.0f - 2.0f * (q[2] * q[2] + q[3] * q[3])) * (180.0 / M_PI);
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <quaternionToEuler+0x1a8>)
 80042e6:	ed93 7a00 	vldr	s14, [r3]
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <quaternionToEuler+0x1a8>)
 80042ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80042f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f4:	4b26      	ldr	r3, [pc, #152]	; (8004390 <quaternionToEuler+0x1a8>)
 80042f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <quaternionToEuler+0x1a8>)
 80042fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8004300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004308:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800430c:	ee17 0a90 	vmov	r0, s15
 8004310:	f7fc f93a 	bl	8000588 <__aeabi_f2d>
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <quaternionToEuler+0x1a8>)
 800431a:	ed93 7a02 	vldr	s14, [r3, #8]
 800431e:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <quaternionToEuler+0x1a8>)
 8004320:	edd3 7a02 	vldr	s15, [r3, #8]
 8004324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <quaternionToEuler+0x1a8>)
 800432a:	edd3 6a03 	vldr	s13, [r3, #12]
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <quaternionToEuler+0x1a8>)
 8004330:	edd3 7a03 	vldr	s15, [r3, #12]
 8004334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800433c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004348:	ee17 0a90 	vmov	r0, s15
 800434c:	f7fc f91c 	bl	8000588 <__aeabi_f2d>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	ec43 2b11 	vmov	d1, r2, r3
 8004358:	ec45 4b10 	vmov	d0, r4, r5
 800435c:	f00b f866 	bl	800f42c <atan2>
 8004360:	ec51 0b10 	vmov	r0, r1, d0
 8004364:	a308      	add	r3, pc, #32	; (adr r3, 8004388 <quaternionToEuler+0x1a0>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc f965 	bl	8000638 <__aeabi_dmul>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	f7fc fc57 	bl	8000c28 <__aeabi_d2f>
 800437a:	4603      	mov	r3, r0
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <quaternionToEuler+0x1ac>)
 800437e:	6093      	str	r3, [r2, #8]
}
 8004380:	bf00      	nop
 8004382:	bdb0      	pop	{r4, r5, r7, pc}
 8004384:	f3af 8000 	nop.w
 8004388:	1a63c1f8 	.word	0x1a63c1f8
 800438c:	404ca5dc 	.word	0x404ca5dc
 8004390:	20000834 	.word	0x20000834
 8004394:	20000844 	.word	0x20000844

08004398 <quaternionToTheta>:


float quaternionToTheta(){
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0

	float theta = 0.0;
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 80043a4:	4b54      	ldr	r3, [pc, #336]	; (80044f8 <quaternionToTheta+0x160>)
 80043a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80043ae:	4b52      	ldr	r3, [pc, #328]	; (80044f8 <quaternionToTheta+0x160>)
 80043b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80043b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b8:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <quaternionToTheta+0x160>)
 80043ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80043be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80043c2:	4b4d      	ldr	r3, [pc, #308]	; (80044f8 <quaternionToTheta+0x160>)
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d0:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 80043d4:	4b48      	ldr	r3, [pc, #288]	; (80044f8 <quaternionToTheta+0x160>)
 80043d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80043da:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80043de:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <quaternionToTheta+0x160>)
 80043e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80043e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <quaternionToTheta+0x160>)
 80043ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80043ee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80043f2:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <quaternionToTheta+0x160>)
 80043f4:	edd3 7a00 	vldr	s15, [r3]
 80043f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004400:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8004404:	4b3c      	ldr	r3, [pc, #240]	; (80044f8 <quaternionToTheta+0x160>)
 8004406:	edd3 7a01 	vldr	s15, [r3, #4]
 800440a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800440e:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <quaternionToTheta+0x160>)
 8004410:	edd3 7a01 	vldr	s15, [r3, #4]
 8004414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800441c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004420:	4b35      	ldr	r3, [pc, #212]	; (80044f8 <quaternionToTheta+0x160>)
 8004422:	edd3 7a02 	vldr	s15, [r3, #8]
 8004426:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800442a:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <quaternionToTheta+0x160>)
 800442c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004438:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 800444c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004450:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004454:	edd7 7a04 	vldr	s15, [r7, #16]
 8004458:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800445c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004460:	edd7 7a03 	vldr	s15, [r7, #12]
 8004464:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446c:	ee17 0a90 	vmov	r0, s15
 8004470:	f7fc f88a 	bl	8000588 <__aeabi_f2d>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	ec43 2b10 	vmov	d0, r2, r3
 800447c:	f00b f848 	bl	800f510 <sqrt>
 8004480:	ec53 2b10 	vmov	r2, r3, d0
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f7fc fbce 	bl	8000c28 <__aeabi_d2f>
 800448c:	4603      	mov	r3, r0
 800448e:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8004490:	ed97 7a02 	vldr	s14, [r7, #8]
 8004494:	edd7 7a01 	vldr	s15, [r7, #4]
 8004498:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800449c:	ee16 0a90 	vmov	r0, s13
 80044a0:	f7fc f872 	bl	8000588 <__aeabi_f2d>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	ec43 2b10 	vmov	d0, r2, r3
 80044ac:	f00a ff56 	bl	800f35c <acos>
 80044b0:	ec51 0b10 	vmov	r0, r1, d0
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <quaternionToTheta+0x164>)
 80044ba:	f7fc f8bd 	bl	8000638 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	a30a      	add	r3, pc, #40	; (adr r3, 80044f0 <quaternionToTheta+0x158>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f7fc f9de 	bl	800088c <__aeabi_ddiv>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	f7fc fba6 	bl	8000c28 <__aeabi_d2f>
 80044dc:	4603      	mov	r3, r0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	ee07 3a90 	vmov	s15, r3
}
 80044e6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	51eb851f 	.word	0x51eb851f
 80044f4:	40091eb8 	.word	0x40091eb8
 80044f8:	20000834 	.word	0x20000834
 80044fc:	40668000 	.word	0x40668000

08004500 <getInitialQuaternion>:



// İvmeölçerden başlangıç quaternioni hesaplama
static void getInitialQuaternion() {
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b092      	sub	sp, #72	; 0x48
 8004504:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8004506:	4b97      	ldr	r3, [pc, #604]	; (8004764 <getInitialQuaternion+0x264>)
 8004508:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800450c:	4b95      	ldr	r3, [pc, #596]	; (8004764 <getInitialQuaternion+0x264>)
 800450e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004516:	4b93      	ldr	r3, [pc, #588]	; (8004764 <getInitialQuaternion+0x264>)
 8004518:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800451c:	4b91      	ldr	r3, [pc, #580]	; (8004764 <getInitialQuaternion+0x264>)
 800451e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8004522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800452a:	4b8e      	ldr	r3, [pc, #568]	; (8004764 <getInitialQuaternion+0x264>)
 800452c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8004530:	4b8c      	ldr	r3, [pc, #560]	; (8004764 <getInitialQuaternion+0x264>)
 8004532:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800453a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453e:	ee17 0a90 	vmov	r0, s15
 8004542:	f7fc f821 	bl	8000588 <__aeabi_f2d>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	ec43 2b10 	vmov	d0, r2, r3
 800454e:	f00a ffdf 	bl	800f510 <sqrt>
 8004552:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 8004556:	4b83      	ldr	r3, [pc, #524]	; (8004764 <getInitialQuaternion+0x264>)
 8004558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800455c:	4618      	mov	r0, r3
 800455e:	f7fc f813 	bl	8000588 <__aeabi_f2d>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 800456a:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <getInitialQuaternion+0x264>)
 800456c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004570:	4618      	mov	r0, r3
 8004572:	f7fc f809 	bl	8000588 <__aeabi_f2d>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 800457e:	4b79      	ldr	r3, [pc, #484]	; (8004764 <getInitialQuaternion+0x264>)
 8004580:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004584:	4618      	mov	r0, r3
 8004586:	f7fb ffff 	bl	8000588 <__aeabi_f2d>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 8004592:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800459a:	f7fc f977 	bl	800088c <__aeabi_ddiv>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80045a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ae:	f7fc f96d 	bl	800088c <__aeabi_ddiv>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 80045ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80045be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045c2:	f7fc f963 	bl	800088c <__aeabi_ddiv>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80045ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	4964      	ldr	r1, [pc, #400]	; (8004768 <getInitialQuaternion+0x268>)
 80045d8:	f7fb fe76 	bl	80002c8 <__aeabi_dsub>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	ec43 2b17 	vmov	d7, r2, r3
 80045e4:	eeb0 0a47 	vmov.f32	s0, s14
 80045e8:	eef0 0a67 	vmov.f32	s1, s15
 80045ec:	f00a ff90 	bl	800f510 <sqrt>
 80045f0:	ec51 0b10 	vmov	r0, r1, d0
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	4b5c      	ldr	r3, [pc, #368]	; (800476c <getInitialQuaternion+0x26c>)
 80045fa:	f7fc f81d 	bl	8000638 <__aeabi_dmul>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8004606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460a:	f04f 0000 	mov.w	r0, #0
 800460e:	4957      	ldr	r1, [pc, #348]	; (800476c <getInitialQuaternion+0x26c>)
 8004610:	f7fc f93c 	bl	800088c <__aeabi_ddiv>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 800461c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004624:	f7fc f808 	bl	8000638 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	4b4d      	ldr	r3, [pc, #308]	; (800476c <getInitialQuaternion+0x26c>)
 8004636:	f7fb ffff 	bl	8000638 <__aeabi_dmul>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8004642:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004646:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800464a:	f7fb fff5 	bl	8000638 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	4b44      	ldr	r3, [pc, #272]	; (800476c <getInitialQuaternion+0x26c>)
 800465c:	f7fb ffec 	bl	8000638 <__aeabi_dmul>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8004674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467c:	f7fb ffdc 	bl	8000638 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4614      	mov	r4, r2
 8004686:	461d      	mov	r5, r3
 8004688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800468c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004690:	f7fb ffd2 	bl	8000638 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4620      	mov	r0, r4
 800469a:	4629      	mov	r1, r5
 800469c:	f7fb fe16 	bl	80002cc <__adddf3>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4614      	mov	r4, r2
 80046a6:	461d      	mov	r5, r3
 80046a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046b0:	f7fb ffc2 	bl	8000638 <__aeabi_dmul>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4620      	mov	r0, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	f7fb fe06 	bl	80002cc <__adddf3>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4614      	mov	r4, r2
 80046c6:	461d      	mov	r5, r3
 80046c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	f7fb ffb2 	bl	8000638 <__aeabi_dmul>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4620      	mov	r0, r4
 80046da:	4629      	mov	r1, r5
 80046dc:	f7fb fdf6 	bl	80002cc <__adddf3>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	ec43 2b17 	vmov	d7, r2, r3
 80046e8:	eeb0 0a47 	vmov.f32	s0, s14
 80046ec:	eef0 0a67 	vmov.f32	s1, s15
 80046f0:	f00a ff0e 	bl	800f510 <sqrt>
 80046f4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    q[0] = q_temp[0] / norm;
 80046f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004700:	f7fc f8c4 	bl	800088c <__aeabi_ddiv>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	f7fc fa8c 	bl	8000c28 <__aeabi_d2f>
 8004710:	4603      	mov	r3, r0
 8004712:	4a17      	ldr	r2, [pc, #92]	; (8004770 <getInitialQuaternion+0x270>)
 8004714:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8004716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800471a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800471e:	f7fc f8b5 	bl	800088c <__aeabi_ddiv>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	f7fc fa7d 	bl	8000c28 <__aeabi_d2f>
 800472e:	4603      	mov	r3, r0
 8004730:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <getInitialQuaternion+0x270>)
 8004732:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8004734:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800473c:	f7fc f8a6 	bl	800088c <__aeabi_ddiv>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	f7fc fa6e 	bl	8000c28 <__aeabi_d2f>
 800474c:	4603      	mov	r3, r0
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <getInitialQuaternion+0x270>)
 8004750:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <getInitialQuaternion+0x270>)
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
}
 800475a:	bf00      	nop
 800475c:	3748      	adds	r7, #72	; 0x48
 800475e:	46bd      	mov	sp, r7
 8004760:	bdb0      	pop	{r4, r5, r7, pc}
 8004762:	bf00      	nop
 8004764:	200005f0 	.word	0x200005f0
 8004768:	3ff00000 	.word	0x3ff00000
 800476c:	3fe00000 	.word	0x3fe00000
 8004770:	20000834 	.word	0x20000834

08004774 <quaternionSet_zero>:



void quaternionSet_zero(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	getInitialQuaternion();
 8004778:	f7ff fec2 	bl	8004500 <getInitialQuaternion>
}
 800477c:	bf00      	nop
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_MspInit+0x4c>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <HAL_MspInit+0x4c>)
 8004790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004794:	6453      	str	r3, [r2, #68]	; 0x44
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_MspInit+0x4c>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_MspInit+0x4c>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a08      	ldr	r2, [pc, #32]	; (80047cc <HAL_MspInit+0x4c>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_MspInit+0x4c>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <HAL_ADC_MspInit+0x7c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d127      	bne.n	8004842 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_ADC_MspInit+0x80>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_ADC_MspInit+0x80>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6453      	str	r3, [r2, #68]	; 0x44
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_ADC_MspInit+0x80>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_ADC_MspInit+0x80>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <HAL_ADC_MspInit+0x80>)
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	6313      	str	r3, [r2, #48]	; 0x30
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_ADC_MspInit+0x80>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 800482a:	2306      	movs	r3, #6
 800482c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800482e:	2303      	movs	r3, #3
 8004830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004836:	f107 0314 	add.w	r3, r7, #20
 800483a:	4619      	mov	r1, r3
 800483c:	4805      	ldr	r0, [pc, #20]	; (8004854 <HAL_ADC_MspInit+0x84>)
 800483e:	f002 f885 	bl	800694c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004842:	bf00      	nop
 8004844:	3728      	adds	r7, #40	; 0x28
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40012000 	.word	0x40012000
 8004850:	40023800 	.word	0x40023800
 8004854:	40020800 	.word	0x40020800

08004858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 031c 	add.w	r3, r7, #28
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a42      	ldr	r2, [pc, #264]	; (8004980 <HAL_I2C_MspInit+0x128>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d12c      	bne.n	80048d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a40      	ldr	r2, [pc, #256]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	6313      	str	r3, [r2, #48]	; 0x30
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004896:	23c0      	movs	r3, #192	; 0xc0
 8004898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800489a:	2312      	movs	r3, #18
 800489c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a2:	2303      	movs	r3, #3
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048a6:	2304      	movs	r3, #4
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	f107 031c 	add.w	r3, r7, #28
 80048ae:	4619      	mov	r1, r3
 80048b0:	4835      	ldr	r0, [pc, #212]	; (8004988 <HAL_I2C_MspInit+0x130>)
 80048b2:	f002 f84b 	bl	800694c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a31      	ldr	r2, [pc, #196]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 80048c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80048d2:	e050      	b.n	8004976 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	; (800498c <HAL_I2C_MspInit+0x134>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d14b      	bne.n	8004976 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a27      	ldr	r2, [pc, #156]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a20      	ldr	r2, [pc, #128]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800491a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800491c:	2312      	movs	r3, #18
 800491e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004924:	2303      	movs	r3, #3
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004928:	2304      	movs	r3, #4
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492c:	f107 031c 	add.w	r3, r7, #28
 8004930:	4619      	mov	r1, r3
 8004932:	4817      	ldr	r0, [pc, #92]	; (8004990 <HAL_I2C_MspInit+0x138>)
 8004934:	f002 f80a 	bl	800694c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800493e:	2312      	movs	r3, #18
 8004940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004946:	2303      	movs	r3, #3
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800494a:	2304      	movs	r3, #4
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494e:	f107 031c 	add.w	r3, r7, #28
 8004952:	4619      	mov	r1, r3
 8004954:	480f      	ldr	r0, [pc, #60]	; (8004994 <HAL_I2C_MspInit+0x13c>)
 8004956:	f001 fff9 	bl	800694c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 8004964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_I2C_MspInit+0x12c>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
}
 8004976:	bf00      	nop
 8004978:	3730      	adds	r7, #48	; 0x30
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40005400 	.word	0x40005400
 8004984:	40023800 	.word	0x40023800
 8004988:	40020400 	.word	0x40020400
 800498c:	40005c00 	.word	0x40005c00
 8004990:	40020800 	.word	0x40020800
 8004994:	40020000 	.word	0x40020000

08004998 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <HAL_I2C_MspDeInit+0x64>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10e      	bne.n	80049c8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_I2C_MspDeInit+0x68>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_I2C_MspDeInit+0x68>)
 80049b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	4812      	ldr	r0, [pc, #72]	; (8004a04 <HAL_I2C_MspDeInit+0x6c>)
 80049ba:	f002 f95b 	bl	8006c74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	4810      	ldr	r0, [pc, #64]	; (8004a04 <HAL_I2C_MspDeInit+0x6c>)
 80049c2:	f002 f957 	bl	8006c74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80049c6:	e014      	b.n	80049f2 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0e      	ldr	r2, [pc, #56]	; (8004a08 <HAL_I2C_MspDeInit+0x70>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10f      	bne.n	80049f2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_I2C_MspDeInit+0x68>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <HAL_I2C_MspDeInit+0x68>)
 80049d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80049de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049e2:	480a      	ldr	r0, [pc, #40]	; (8004a0c <HAL_I2C_MspDeInit+0x74>)
 80049e4:	f002 f946 	bl	8006c74 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80049e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049ec:	4808      	ldr	r0, [pc, #32]	; (8004a10 <HAL_I2C_MspDeInit+0x78>)
 80049ee:	f002 f941 	bl	8006c74 <HAL_GPIO_DeInit>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40005400 	.word	0x40005400
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40020400 	.word	0x40020400
 8004a08:	40005c00 	.word	0x40005c00
 8004a0c:	40020800 	.word	0x40020800
 8004a10:	40020000 	.word	0x40020000

08004a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08e      	sub	sp, #56	; 0x38
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a9c      	ldr	r2, [pc, #624]	; (8004ca4 <HAL_UART_MspInit+0x290>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d162      	bne.n	8004afc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	4b9b      	ldr	r3, [pc, #620]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	4a9a      	ldr	r2, [pc, #616]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a44:	6413      	str	r3, [r2, #64]	; 0x40
 8004a46:	4b98      	ldr	r3, [pc, #608]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	4b94      	ldr	r3, [pc, #592]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	4a93      	ldr	r2, [pc, #588]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6313      	str	r3, [r2, #48]	; 0x30
 8004a62:	4b91      	ldr	r3, [pc, #580]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a72:	2302      	movs	r3, #2
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004a7e:	2308      	movs	r3, #8
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a86:	4619      	mov	r1, r3
 8004a88:	4888      	ldr	r0, [pc, #544]	; (8004cac <HAL_UART_MspInit+0x298>)
 8004a8a:	f001 ff5f 	bl	800694c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004a8e:	4b88      	ldr	r3, [pc, #544]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004a90:	4a88      	ldr	r2, [pc, #544]	; (8004cb4 <HAL_UART_MspInit+0x2a0>)
 8004a92:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004a94:	4b86      	ldr	r3, [pc, #536]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a9a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a9c:	4b84      	ldr	r3, [pc, #528]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004a9e:	2240      	movs	r2, #64	; 0x40
 8004aa0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa2:	4b83      	ldr	r3, [pc, #524]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004aa8:	4b81      	ldr	r3, [pc, #516]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aae:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ab0:	4b7f      	ldr	r3, [pc, #508]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ab6:	4b7e      	ldr	r3, [pc, #504]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004abc:	4b7c      	ldr	r3, [pc, #496]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ac8:	4b79      	ldr	r3, [pc, #484]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004ace:	4878      	ldr	r0, [pc, #480]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004ad0:	f001 face 	bl	8006070 <HAL_DMA_Init>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004ada:	f7ff fa2b 	bl	8003f34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a73      	ldr	r2, [pc, #460]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ae4:	4a72      	ldr	r2, [pc, #456]	; (8004cb0 <HAL_UART_MspInit+0x29c>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2034      	movs	r0, #52	; 0x34
 8004af0:	f001 fa79 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004af4:	2034      	movs	r0, #52	; 0x34
 8004af6:	f001 fa92 	bl	800601e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004afa:	e0cf      	b.n	8004c9c <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a6d      	ldr	r2, [pc, #436]	; (8004cb8 <HAL_UART_MspInit+0x2a4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d163      	bne.n	8004bce <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	4b67      	ldr	r3, [pc, #412]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004b10:	f043 0310 	orr.w	r3, r3, #16
 8004b14:	6453      	str	r3, [r2, #68]	; 0x44
 8004b16:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	4b60      	ldr	r3, [pc, #384]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a5f      	ldr	r2, [pc, #380]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b5d      	ldr	r3, [pc, #372]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b44:	2302      	movs	r3, #2
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b50:	2307      	movs	r3, #7
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4854      	ldr	r0, [pc, #336]	; (8004cac <HAL_UART_MspInit+0x298>)
 8004b5c:	f001 fef6 	bl	800694c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004b60:	4b56      	ldr	r3, [pc, #344]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b62:	4a57      	ldr	r2, [pc, #348]	; (8004cc0 <HAL_UART_MspInit+0x2ac>)
 8004b64:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004b66:	4b55      	ldr	r3, [pc, #340]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b6e:	4b53      	ldr	r3, [pc, #332]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b70:	2240      	movs	r2, #64	; 0x40
 8004b72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b74:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b7a:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b80:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b82:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b88:	4b4c      	ldr	r3, [pc, #304]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004b8e:	4b4b      	ldr	r3, [pc, #300]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b94:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b9a:	4b48      	ldr	r3, [pc, #288]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004ba0:	4846      	ldr	r0, [pc, #280]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004ba2:	f001 fa65 	bl	8006070 <HAL_DMA_Init>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004bac:	f7ff f9c2 	bl	8003f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a42      	ldr	r2, [pc, #264]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8004bb6:	4a41      	ldr	r2, [pc, #260]	; (8004cbc <HAL_UART_MspInit+0x2a8>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	2025      	movs	r0, #37	; 0x25
 8004bc2:	f001 fa10 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bc6:	2025      	movs	r0, #37	; 0x25
 8004bc8:	f001 fa29 	bl	800601e <HAL_NVIC_EnableIRQ>
}
 8004bcc:	e066      	b.n	8004c9c <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <HAL_UART_MspInit+0x2b0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d161      	bne.n	8004c9c <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	4a31      	ldr	r2, [pc, #196]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	6413      	str	r3, [r2, #64]	; 0x40
 8004be8:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30
 8004c04:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <HAL_UART_MspInit+0x294>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c10:	230c      	movs	r3, #12
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	2302      	movs	r3, #2
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c20:	2307      	movs	r3, #7
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4820      	ldr	r0, [pc, #128]	; (8004cac <HAL_UART_MspInit+0x298>)
 8004c2c:	f001 fe8e 	bl	800694c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c32:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <HAL_UART_MspInit+0x2b8>)
 8004c34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004c70:	4815      	ldr	r0, [pc, #84]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c72:	f001 f9fd 	bl	8006070 <HAL_DMA_Init>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8004c7c:	f7ff f95a 	bl	8003f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
 8004c86:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <HAL_UART_MspInit+0x2b4>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2101      	movs	r1, #1
 8004c90:	2026      	movs	r0, #38	; 0x26
 8004c92:	f001 f9a8 	bl	8005fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c96:	2026      	movs	r0, #38	; 0x26
 8004c98:	f001 f9c1 	bl	800601e <HAL_NVIC_EnableIRQ>
}
 8004c9c:	bf00      	nop
 8004c9e:	3738      	adds	r7, #56	; 0x38
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40004c00 	.word	0x40004c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40020000 	.word	0x40020000
 8004cb0:	20000478 	.word	0x20000478
 8004cb4:	40026070 	.word	0x40026070
 8004cb8:	40011000 	.word	0x40011000
 8004cbc:	200004d8 	.word	0x200004d8
 8004cc0:	400264b8 	.word	0x400264b8
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	20000538 	.word	0x20000538
 8004ccc:	40026088 	.word	0x40026088

08004cd0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <HAL_UART_MspDeInit+0xa0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d112      	bne.n	8004d08 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004ce2:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_UART_MspDeInit+0xa4>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_UART_MspDeInit+0xa4>)
 8004ce8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8004cee:	2103      	movs	r1, #3
 8004cf0:	4821      	ldr	r0, [pc, #132]	; (8004d78 <HAL_UART_MspDeInit+0xa8>)
 8004cf2:	f001 ffbf 	bl	8006c74 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fa66 	bl	80061cc <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004d00:	2034      	movs	r0, #52	; 0x34
 8004d02:	f001 f99a 	bl	800603a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004d06:	e02f      	b.n	8004d68 <HAL_UART_MspDeInit+0x98>
  else if(huart->Instance==USART1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <HAL_UART_MspDeInit+0xac>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d113      	bne.n	8004d3a <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART1_CLK_DISABLE();
 8004d12:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <HAL_UART_MspDeInit+0xa4>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <HAL_UART_MspDeInit+0xa4>)
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d22:	4815      	ldr	r0, [pc, #84]	; (8004d78 <HAL_UART_MspDeInit+0xa8>)
 8004d24:	f001 ffa6 	bl	8006c74 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 fa4d 	bl	80061cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004d32:	2025      	movs	r0, #37	; 0x25
 8004d34:	f001 f981 	bl	800603a <HAL_NVIC_DisableIRQ>
}
 8004d38:	e016      	b.n	8004d68 <HAL_UART_MspDeInit+0x98>
  else if(huart->Instance==USART2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a10      	ldr	r2, [pc, #64]	; (8004d80 <HAL_UART_MspDeInit+0xb0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d111      	bne.n	8004d68 <HAL_UART_MspDeInit+0x98>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_UART_MspDeInit+0xa4>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <HAL_UART_MspDeInit+0xa4>)
 8004d4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d4e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004d50:	210c      	movs	r1, #12
 8004d52:	4809      	ldr	r0, [pc, #36]	; (8004d78 <HAL_UART_MspDeInit+0xa8>)
 8004d54:	f001 ff8e 	bl	8006c74 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 fa35 	bl	80061cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004d62:	2026      	movs	r0, #38	; 0x26
 8004d64:	f001 f969 	bl	800603a <HAL_NVIC_DisableIRQ>
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40004c00 	.word	0x40004c00
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	40004400 	.word	0x40004400

08004d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d88:	e7fe      	b.n	8004d88 <NMI_Handler+0x4>

08004d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d8e:	e7fe      	b.n	8004d8e <HardFault_Handler+0x4>

08004d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d94:	e7fe      	b.n	8004d94 <MemManage_Handler+0x4>

08004d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d9a:	e7fe      	b.n	8004d9a <BusFault_Handler+0x4>

08004d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <UsageFault_Handler+0x4>

08004da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dd0:	f000 fbb6 	bl	8005540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8004ddc:	2008      	movs	r0, #8
 8004dde:	f002 f871 	bl	8006ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8004dea:	2010      	movs	r0, #16
 8004dec:	f002 f86a 	bl	8006ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004df0:	bf00      	nop
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004df8:	4802      	ldr	r0, [pc, #8]	; (8004e04 <DMA1_Stream4_IRQHandler+0x10>)
 8004dfa:	f001 fb2f 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000478 	.word	0x20000478

08004e08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <DMA1_Stream5_IRQHandler+0x10>)
 8004e0e:	f001 fb25 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000538 	.word	0x20000538

08004e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e20:	4802      	ldr	r0, [pc, #8]	; (8004e2c <USART1_IRQHandler+0x10>)
 8004e22:	f004 f84b 	bl	8008ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200003f0 	.word	0x200003f0

08004e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e34:	4802      	ldr	r0, [pc, #8]	; (8004e40 <USART2_IRQHandler+0x10>)
 8004e36:	f004 f841 	bl	8008ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000434 	.word	0x20000434

08004e44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004e48:	4802      	ldr	r0, [pc, #8]	; (8004e54 <UART4_IRQHandler+0x10>)
 8004e4a:	f004 f837 	bl	8008ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200003ac 	.word	0x200003ac

08004e58 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <DMA2_Stream7_IRQHandler+0x10>)
 8004e5e:	f001 fafd 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200004d8 	.word	0x200004d8

08004e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
	return 1;
 8004e70:	2301      	movs	r3, #1
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_kill>:

int _kill(int pid, int sig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e86:	f005 f971 	bl	800a16c <__errno>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2216      	movs	r2, #22
 8004e8e:	601a      	str	r2, [r3, #0]
	return -1;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_exit>:

void _exit (int status)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ffe7 	bl	8004e7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004eae:	e7fe      	b.n	8004eae <_exit+0x12>

08004eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e00a      	b.n	8004ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ec2:	f3af 8000 	nop.w
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	60ba      	str	r2, [r7, #8]
 8004ece:	b2ca      	uxtb	r2, r1
 8004ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	dbf0      	blt.n	8004ec2 <_read+0x12>
	}

return len;
 8004ee0:	687b      	ldr	r3, [r7, #4]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e009      	b.n	8004f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	60ba      	str	r2, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	dbf1      	blt.n	8004efc <_write+0x12>
	}
	return len;
 8004f18:	687b      	ldr	r3, [r7, #4]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <_close>:

int _close(int file)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
	return -1;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <_isatty>:

int _isatty(int file)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
	return 1;
 8004f62:	2301      	movs	r3, #1
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <_sbrk+0x5c>)
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <_sbrk+0x60>)
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <_sbrk+0x64>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <_sbrk+0x64>)
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <_sbrk+0x68>)
 8004fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <_sbrk+0x64>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d207      	bcs.n	8004fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fbc:	f005 f8d6 	bl	800a16c <__errno>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	220c      	movs	r2, #12
 8004fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	e009      	b.n	8004fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <_sbrk+0x64>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <_sbrk+0x64>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <_sbrk+0x64>)
 8004fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20020000 	.word	0x20020000
 8004fec:	00000400 	.word	0x00000400
 8004ff0:	20000850 	.word	0x20000850
 8004ff4:	20001178 	.word	0x20001178

08004ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <SystemInit+0x20>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	4a05      	ldr	r2, [pc, #20]	; (8005018 <SystemInit+0x20>)
 8005004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	g_GnssRx_Flag = true;
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_UART_RxCpltCallback+0x20>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
	g_openFixedDataTransmition = true;
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_UART_RxCpltCallback+0x24>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000854 	.word	0x20000854
 8005040:	20000855 	.word	0x20000855

08005044 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 800504c:	f240 228a 	movw	r2, #650	; 0x28a
 8005050:	4903      	ldr	r1, [pc, #12]	; (8005060 <UsrGpsL86Init+0x1c>)
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f003 ff02 	bl	8008e5c <HAL_UART_Receive_DMA>
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	2000092c 	.word	0x2000092c

08005064 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    getRmc();
 800506c:	f000 f83a 	bl	80050e4 <getRmc>
    getGGA();
 8005070:	f000 f95c 	bl	800532c <getGGA>
    if (rmcValidFlag)
 8005074:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <Usr_GpsL86GetValues+0x74>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <Usr_GpsL86GetValues+0x74>)
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8005084:	f000 f8e4 	bl	8005250 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8005090:	4b12      	ldr	r3, [pc, #72]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8005098:	4b10      	ldr	r3, [pc, #64]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 800509a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <Usr_GpsL86GetValues+0x78>)
 80050c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <Usr_GpsL86GetValues+0x7c>)
 80050ca:	f7ff ffbb 	bl	8005044 <UsrGpsL86Init>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000856 	.word	0x20000856
 80050dc:	20001134 	.word	0x20001134
 80050e0:	20000434 	.word	0x20000434

080050e4 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af02      	add	r7, sp, #8
	if (g_GnssRx_Flag)
 80050ea:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <getRmc+0x130>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 808a 	beq.w	800520a <getRmc+0x126>
	    {
	        MsgIndex = 0;
 80050f6:	4b48      	ldr	r3, [pc, #288]	; (8005218 <getRmc+0x134>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 80050fc:	4947      	ldr	r1, [pc, #284]	; (800521c <getRmc+0x138>)
 80050fe:	4848      	ldr	r0, [pc, #288]	; (8005220 <getRmc+0x13c>)
 8005100:	f005 ff77 	bl	800aff2 <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8005104:	4947      	ldr	r1, [pc, #284]	; (8005224 <getRmc+0x140>)
 8005106:	4846      	ldr	r0, [pc, #280]	; (8005220 <getRmc+0x13c>)
 8005108:	f005 ff7b 	bl	800b002 <strstr>
 800510c:	4603      	mov	r3, r0
 800510e:	4a46      	ldr	r2, [pc, #280]	; (8005228 <getRmc+0x144>)
 8005110:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8005112:	4b45      	ldr	r3, [pc, #276]	; (8005228 <getRmc+0x144>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b47      	cmp	r3, #71	; 0x47
 800511a:	d173      	bne.n	8005204 <getRmc+0x120>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 800511c:	4b42      	ldr	r3, [pc, #264]	; (8005228 <getRmc+0x144>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b3d      	ldr	r3, [pc, #244]	; (8005218 <getRmc+0x134>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	7811      	ldrb	r1, [r2, #0]
 8005126:	4a41      	ldr	r2, [pc, #260]	; (800522c <getRmc+0x148>)
 8005128:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <getRmc+0x134>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3301      	adds	r3, #1
 8005130:	4a39      	ldr	r2, [pc, #228]	; (8005218 <getRmc+0x134>)
 8005132:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8005134:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <getRmc+0x144>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a37      	ldr	r2, [pc, #220]	; (8005218 <getRmc+0x134>)
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	441a      	add	r2, r3
 800513e:	4b3a      	ldr	r3, [pc, #232]	; (8005228 <getRmc+0x144>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8005146:	4b38      	ldr	r3, [pc, #224]	; (8005228 <getRmc+0x144>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b0a      	cmp	r3, #10
 800514e:	d003      	beq.n	8005158 <getRmc+0x74>
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <getRmc+0x134>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b5a      	cmp	r3, #90	; 0x5a
 8005156:	dde1      	ble.n	800511c <getRmc+0x38>
	                {
	                    MsgIndex = 0;
 8005158:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <getRmc+0x134>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
	                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 800515e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005162:	2100      	movs	r1, #0
 8005164:	482e      	ldr	r0, [pc, #184]	; (8005220 <getRmc+0x13c>)
 8005166:	f005 f82b 	bl	800a1c0 <memset>
	                    memset(m_rxData, 0, sizeof(m_rxData));
 800516a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800516e:	2100      	movs	r1, #0
 8005170:	482a      	ldr	r0, [pc, #168]	; (800521c <getRmc+0x138>)
 8005172:	f005 f825 	bl	800a1c0 <memset>

	                    for (int i = 0; i < 100; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	e014      	b.n	80051a6 <getRmc+0xc2>
	                    {
	                        if (gpsPayload[i] == 'N')
 800517c:	4a2b      	ldr	r2, [pc, #172]	; (800522c <getRmc+0x148>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b4e      	cmp	r3, #78	; 0x4e
 8005186:	d102      	bne.n	800518e <getRmc+0xaa>
	                            f_northFlag = true;
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <getRmc+0x14c>)
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 800518e:	4a27      	ldr	r2, [pc, #156]	; (800522c <getRmc+0x148>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b45      	cmp	r3, #69	; 0x45
 8005198:	d102      	bne.n	80051a0 <getRmc+0xbc>
	                            f_eastFlag = true;
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <getRmc+0x150>)
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3301      	adds	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b63      	cmp	r3, #99	; 0x63
 80051aa:	dde7      	ble.n	800517c <getRmc+0x98>
	                    }
	                    if (strlen(gpsPayload) > 10)
 80051ac:	481f      	ldr	r0, [pc, #124]	; (800522c <getRmc+0x148>)
 80051ae:	f7fb f82f 	bl	8000210 <strlen>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b0a      	cmp	r3, #10
 80051b6:	d91f      	bls.n	80051f8 <getRmc+0x114>
	                    {
	                        if (f_eastFlag && f_northFlag)
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <getRmc+0x150>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01f      	beq.n	8005202 <getRmc+0x11e>
 80051c2:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <getRmc+0x14c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <getRmc+0x11e>
	                        {
	                            f_northFlag = false;
 80051cc:	4b18      	ldr	r3, [pc, #96]	; (8005230 <getRmc+0x14c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <getRmc+0x150>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 80051d8:	4b17      	ldr	r3, [pc, #92]	; (8005238 <getRmc+0x154>)
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <getRmc+0x158>)
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <getRmc+0x15c>)
 80051e2:	4a18      	ldr	r2, [pc, #96]	; (8005244 <getRmc+0x160>)
 80051e4:	4918      	ldr	r1, [pc, #96]	; (8005248 <getRmc+0x164>)
 80051e6:	4811      	ldr	r0, [pc, #68]	; (800522c <getRmc+0x148>)
 80051e8:	f005 fe92 	bl	800af10 <siscanf>
	                            rmcValidFlag = true;
 80051ec:	4b17      	ldr	r3, [pc, #92]	; (800524c <getRmc+0x168>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 80051f2:	f000 f82d 	bl	8005250 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 80051f6:	e004      	b.n	8005202 <getRmc+0x11e>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80051f8:	2264      	movs	r2, #100	; 0x64
 80051fa:	2100      	movs	r1, #0
 80051fc:	480b      	ldr	r0, [pc, #44]	; (800522c <getRmc+0x148>)
 80051fe:	f004 ffdf 	bl	800a1c0 <memset>
	                    break;
 8005202:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <getRmc+0x130>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]

	    }

}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000854 	.word	0x20000854
 8005218:	2000085c 	.word	0x2000085c
 800521c:	2000092c 	.word	0x2000092c
 8005220:	20000d2c 	.word	0x20000d2c
 8005224:	08011128 	.word	0x08011128
 8005228:	20000860 	.word	0x20000860
 800522c:	20000864 	.word	0x20000864
 8005230:	20000857 	.word	0x20000857
 8005234:	20000858 	.word	0x20000858
 8005238:	2000113c 	.word	0x2000113c
 800523c:	20001130 	.word	0x20001130
 8005240:	2000112c 	.word	0x2000112c
 8005244:	20001140 	.word	0x20001140
 8005248:	08011130 	.word	0x08011130
 800524c:	20000856 	.word	0x20000856

08005250 <formatLatLong>:

_io void formatLatLong(void)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <formatLatLong+0xc8>)
 8005258:	edd3 7a00 	vldr	s15, [r3]
 800525c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005260:	ee17 1a90 	vmov	r1, s15
 8005264:	4b2d      	ldr	r3, [pc, #180]	; (800531c <formatLatLong+0xcc>)
 8005266:	fb83 2301 	smull	r2, r3, r3, r1
 800526a:	115a      	asrs	r2, r3, #5
 800526c:	17cb      	asrs	r3, r1, #31
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8005272:	4b29      	ldr	r3, [pc, #164]	; (8005318 <formatLatLong+0xc8>)
 8005274:	ed93 7a00 	vldr	s14, [r3]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2264      	movs	r2, #100	; 0x64
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	ee07 3a90 	vmov	s15, r3
 8005284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800528c:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800529a:	edd7 6a00 	vldr	s13, [r7]
 800529e:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8005320 <formatLatLong+0xd0>
 80052a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80052a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052aa:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <formatLatLong+0xd4>)
 80052ac:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 80052b0:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <formatLatLong+0xd8>)
 80052b2:	edd3 7a00 	vldr	s15, [r3]
 80052b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ba:	ee17 1a90 	vmov	r1, s15
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <formatLatLong+0xcc>)
 80052c0:	fb83 2301 	smull	r2, r3, r3, r1
 80052c4:	115a      	asrs	r2, r3, #5
 80052c6:	17cb      	asrs	r3, r1, #31
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 80052cc:	4b16      	ldr	r3, [pc, #88]	; (8005328 <formatLatLong+0xd8>)
 80052ce:	ed93 7a00 	vldr	s14, [r3]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2264      	movs	r2, #100	; 0x64
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e6:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052f4:	edd7 6a00 	vldr	s13, [r7]
 80052f8:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8005320 <formatLatLong+0xd0>
 80052fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <formatLatLong+0xd4>)
 8005306:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	2000112c 	.word	0x2000112c
 800531c:	51eb851f 	.word	0x51eb851f
 8005320:	42700000 	.word	0x42700000
 8005324:	20001134 	.word	0x20001134
 8005328:	20001130 	.word	0x20001130

0800532c <getGGA>:

_io void getGGA(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8005332:	4b34      	ldr	r3, [pc, #208]	; (8005404 <getGGA+0xd8>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d060      	beq.n	80053fe <getGGA+0xd2>
    {
        MsgIndex = 0;
 800533c:	4b32      	ldr	r3, [pc, #200]	; (8005408 <getGGA+0xdc>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005342:	4932      	ldr	r1, [pc, #200]	; (800540c <getGGA+0xe0>)
 8005344:	4832      	ldr	r0, [pc, #200]	; (8005410 <getGGA+0xe4>)
 8005346:	f005 fe54 	bl	800aff2 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800534a:	4932      	ldr	r1, [pc, #200]	; (8005414 <getGGA+0xe8>)
 800534c:	4830      	ldr	r0, [pc, #192]	; (8005410 <getGGA+0xe4>)
 800534e:	f005 fe58 	bl	800b002 <strstr>
 8005352:	4603      	mov	r3, r0
 8005354:	4a30      	ldr	r2, [pc, #192]	; (8005418 <getGGA+0xec>)
 8005356:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8005358:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <getGGA+0xec>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b47      	cmp	r3, #71	; 0x47
 8005360:	d14a      	bne.n	80053f8 <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8005362:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <getGGA+0xec>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b28      	ldr	r3, [pc, #160]	; (8005408 <getGGA+0xdc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	7811      	ldrb	r1, [r2, #0]
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <getGGA+0xf0>)
 800536e:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8005370:	4b25      	ldr	r3, [pc, #148]	; (8005408 <getGGA+0xdc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	4a24      	ldr	r2, [pc, #144]	; (8005408 <getGGA+0xdc>)
 8005378:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800537a:	4b27      	ldr	r3, [pc, #156]	; (8005418 <getGGA+0xec>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a22      	ldr	r2, [pc, #136]	; (8005408 <getGGA+0xdc>)
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	441a      	add	r2, r3
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <getGGA+0xec>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800538c:	4b22      	ldr	r3, [pc, #136]	; (8005418 <getGGA+0xec>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b0a      	cmp	r3, #10
 8005394:	d003      	beq.n	800539e <getGGA+0x72>
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <getGGA+0xdc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b5a      	cmp	r3, #90	; 0x5a
 800539c:	dde1      	ble.n	8005362 <getGGA+0x36>
                {
                    MsgIndex = 0;
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <getGGA+0xdc>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80053a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a8:	2100      	movs	r1, #0
 80053aa:	4819      	ldr	r0, [pc, #100]	; (8005410 <getGGA+0xe4>)
 80053ac:	f004 ff08 	bl	800a1c0 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 80053b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b4:	2100      	movs	r1, #0
 80053b6:	4815      	ldr	r0, [pc, #84]	; (800540c <getGGA+0xe0>)
 80053b8:	f004 ff02 	bl	800a1c0 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 80053bc:	4817      	ldr	r0, [pc, #92]	; (800541c <getGGA+0xf0>)
 80053be:	f7fa ff27 	bl	8000210 <strlen>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b0a      	cmp	r3, #10
 80053c6:	d912      	bls.n	80053ee <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <getGGA+0xf4>)
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <getGGA+0xf8>)
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <getGGA+0xfc>)
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	4b15      	ldr	r3, [pc, #84]	; (800542c <getGGA+0x100>)
 80053d6:	9302      	str	r3, [sp, #8]
 80053d8:	4b15      	ldr	r3, [pc, #84]	; (8005430 <getGGA+0x104>)
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	4b15      	ldr	r3, [pc, #84]	; (8005434 <getGGA+0x108>)
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	4b15      	ldr	r3, [pc, #84]	; (8005438 <getGGA+0x10c>)
 80053e2:	4a16      	ldr	r2, [pc, #88]	; (800543c <getGGA+0x110>)
 80053e4:	4916      	ldr	r1, [pc, #88]	; (8005440 <getGGA+0x114>)
 80053e6:	480d      	ldr	r0, [pc, #52]	; (800541c <getGGA+0xf0>)
 80053e8:	f005 fd92 	bl	800af10 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80053ec:	e004      	b.n	80053f8 <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80053ee:	2264      	movs	r2, #100	; 0x64
 80053f0:	2100      	movs	r1, #0
 80053f2:	4814      	ldr	r0, [pc, #80]	; (8005444 <getGGA+0x118>)
 80053f4:	f004 fee4 	bl	800a1c0 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 80053f8:	4b02      	ldr	r3, [pc, #8]	; (8005404 <getGGA+0xd8>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);
    }
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000855 	.word	0x20000855
 8005408:	2000085c 	.word	0x2000085c
 800540c:	2000092c 	.word	0x2000092c
 8005410:	20000d2c 	.word	0x20000d2c
 8005414:	0801114c 	.word	0x0801114c
 8005418:	20000860 	.word	0x20000860
 800541c:	200008c8 	.word	0x200008c8
 8005420:	20001160 	.word	0x20001160
 8005424:	2000115c 	.word	0x2000115c
 8005428:	20001158 	.word	0x20001158
 800542c:	20001154 	.word	0x20001154
 8005430:	20001150 	.word	0x20001150
 8005434:	2000114c 	.word	0x2000114c
 8005438:	20001148 	.word	0x20001148
 800543c:	20001144 	.word	0x20001144
 8005440:	08011154 	.word	0x08011154
 8005444:	20000864 	.word	0x20000864

08005448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800544c:	480d      	ldr	r0, [pc, #52]	; (8005484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800544e:	490e      	ldr	r1, [pc, #56]	; (8005488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005450:	4a0e      	ldr	r2, [pc, #56]	; (800548c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005454:	e002      	b.n	800545c <LoopCopyDataInit>

08005456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800545a:	3304      	adds	r3, #4

0800545c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800545c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005460:	d3f9      	bcc.n	8005456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005462:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005464:	4c0b      	ldr	r4, [pc, #44]	; (8005494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005468:	e001      	b.n	800546e <LoopFillZerobss>

0800546a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800546a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800546c:	3204      	adds	r2, #4

0800546e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005470:	d3fb      	bcc.n	800546a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005472:	f7ff fdc1 	bl	8004ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005476:	f004 fe7f 	bl	800a178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800547a:	f7fe f841 	bl	8003500 <main>
  bx  lr    
 800547e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005488:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800548c:	08011718 	.word	0x08011718
  ldr r2, =_sbss
 8005490:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005494:	20001178 	.word	0x20001178

08005498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005498:	e7fe      	b.n	8005498 <ADC_IRQHandler>
	...

0800549c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <HAL_Init+0x40>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a0d      	ldr	r2, [pc, #52]	; (80054dc <HAL_Init+0x40>)
 80054a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_Init+0x40>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <HAL_Init+0x40>)
 80054b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054b8:	4b08      	ldr	r3, [pc, #32]	; (80054dc <HAL_Init+0x40>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a07      	ldr	r2, [pc, #28]	; (80054dc <HAL_Init+0x40>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054c4:	2003      	movs	r0, #3
 80054c6:	f000 fd83 	bl	8005fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ca:	200f      	movs	r0, #15
 80054cc:	f000 f808 	bl	80054e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054d0:	f7ff f956 	bl	8004780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023c00 	.word	0x40023c00

080054e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054e8:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_InitTick+0x54>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_InitTick+0x58>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4619      	mov	r1, r3
 80054f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fda9 	bl	8006056 <HAL_SYSTICK_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e00e      	b.n	800552c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b0f      	cmp	r3, #15
 8005512:	d80a      	bhi.n	800552a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005514:	2200      	movs	r2, #0
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	f000 fd63 	bl	8005fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005520:	4a06      	ldr	r2, [pc, #24]	; (800553c <HAL_InitTick+0x5c>)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000008 	.word	0x20000008
 8005538:	20000010 	.word	0x20000010
 800553c:	2000000c 	.word	0x2000000c

08005540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_IncTick+0x20>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_IncTick+0x24>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4413      	add	r3, r2
 8005550:	4a04      	ldr	r2, [pc, #16]	; (8005564 <HAL_IncTick+0x24>)
 8005552:	6013      	str	r3, [r2, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20000010 	.word	0x20000010
 8005564:	20001164 	.word	0x20001164

08005568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return uwTick;
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_GetTick+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20001164 	.word	0x20001164

08005580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005588:	f7ff ffee 	bl	8005568 <HAL_GetTick>
 800558c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d005      	beq.n	80055a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_Delay+0x44>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055a6:	bf00      	nop
 80055a8:	f7ff ffde 	bl	8005568 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d8f7      	bhi.n	80055a8 <HAL_Delay+0x28>
  {
  }
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000010 	.word	0x20000010

080055c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e033      	b.n	8005646 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff f8f2 	bl	80047d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d118      	bne.n	8005638 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800560e:	f023 0302 	bic.w	r3, r3, #2
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fae8 	bl	8005bf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	f043 0201 	orr.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
 8005636:	e001      	b.n	800563c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_ADC_Start+0x1a>
 8005666:	2302      	movs	r3, #2
 8005668:	e0b2      	b.n	80057d0 <HAL_ADC_Start+0x180>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d018      	beq.n	80056b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005690:	4b52      	ldr	r3, [pc, #328]	; (80057dc <HAL_ADC_Start+0x18c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a52      	ldr	r2, [pc, #328]	; (80057e0 <HAL_ADC_Start+0x190>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	0c9a      	lsrs	r2, r3, #18
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80056a4:	e002      	b.n	80056ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f9      	bne.n	80056a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d17a      	bne.n	80057b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fe:	d106      	bne.n	800570e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	f023 0206 	bic.w	r2, r3, #6
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	645a      	str	r2, [r3, #68]	; 0x44
 800570c:	e002      	b.n	8005714 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800571c:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <HAL_ADC_Start+0x194>)
 800571e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005728:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2b00      	cmp	r3, #0
 8005734:	d12a      	bne.n	800578c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a2b      	ldr	r2, [pc, #172]	; (80057e8 <HAL_ADC_Start+0x198>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d015      	beq.n	800576c <HAL_ADC_Start+0x11c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a29      	ldr	r2, [pc, #164]	; (80057ec <HAL_ADC_Start+0x19c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d105      	bne.n	8005756 <HAL_ADC_Start+0x106>
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <HAL_ADC_Start+0x194>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <HAL_ADC_Start+0x1a0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d136      	bne.n	80057ce <HAL_ADC_Start+0x17e>
 8005760:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <HAL_ADC_Start+0x194>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d130      	bne.n	80057ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d129      	bne.n	80057ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	e020      	b.n	80057ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <HAL_ADC_Start+0x198>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d11b      	bne.n	80057ce <HAL_ADC_Start+0x17e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d114      	bne.n	80057ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057b2:	609a      	str	r2, [r3, #8]
 80057b4:	e00b      	b.n	80057ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0210 	orr.w	r2, r3, #16
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f043 0201 	orr.w	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000008 	.word	0x20000008
 80057e0:	431bde83 	.word	0x431bde83
 80057e4:	40012300 	.word	0x40012300
 80057e8:	40012000 	.word	0x40012000
 80057ec:	40012100 	.word	0x40012100
 80057f0:	40012200 	.word	0x40012200

080057f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_ADC_Stop+0x16>
 8005806:	2302      	movs	r3, #2
 8005808:	e021      	b.n	800584e <HAL_ADC_Stop+0x5a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f043 0201 	orr.w	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d113      	bne.n	80058a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005886:	d10b      	bne.n	80058a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e063      	b.n	8005968 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80058a0:	f7ff fe62 	bl	8005568 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058a6:	e021      	b.n	80058ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d01d      	beq.n	80058ec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_ADC_PollForConversion+0x6c>
 80058b6:	f7ff fe57 	bl	8005568 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d212      	bcs.n	80058ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d00b      	beq.n	80058ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0204 	orr.w	r2, r3, #4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e03d      	b.n	8005968 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d1d6      	bne.n	80058a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0212 	mvn.w	r2, #18
 8005902:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d123      	bne.n	8005966 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11f      	bne.n	8005966 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d111      	bne.n	8005966 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0201 	orr.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e113      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x244>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d925      	bls.n	8005a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	3b1e      	subs	r3, #30
 80059ce:	2207      	movs	r2, #7
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43da      	mvns	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	400a      	ands	r2, r1
 80059dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68d9      	ldr	r1, [r3, #12]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4618      	mov	r0, r3
 80059f0:	4603      	mov	r3, r0
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4403      	add	r3, r0
 80059f6:	3b1e      	subs	r3, #30
 80059f8:	409a      	lsls	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e022      	b.n	8005a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6919      	ldr	r1, [r3, #16]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	2207      	movs	r2, #7
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	400a      	ands	r2, r1
 8005a26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6919      	ldr	r1, [r3, #16]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4403      	add	r3, r0
 8005a40:	409a      	lsls	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d824      	bhi.n	8005a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	3b05      	subs	r3, #5
 8005a64:	221f      	movs	r2, #31
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	400a      	ands	r2, r1
 8005a72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4618      	mov	r0, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3b05      	subs	r3, #5
 8005a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34
 8005a9a:	e04c      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d824      	bhi.n	8005aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3b23      	subs	r3, #35	; 0x23
 8005ab6:	221f      	movs	r2, #31
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43da      	mvns	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	3b23      	subs	r3, #35	; 0x23
 8005ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
 8005aec:	e023      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	3b41      	subs	r3, #65	; 0x41
 8005b00:	221f      	movs	r2, #31
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43da      	mvns	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	3b41      	subs	r3, #65	; 0x41
 8005b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_ADC_ConfigChannel+0x250>)
 8005b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <HAL_ADC_ConfigChannel+0x254>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d10f      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x1d8>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b12      	cmp	r3, #18
 8005b4a:	d10b      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <HAL_ADC_ConfigChannel+0x254>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d12b      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x23a>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_ADC_ConfigChannel+0x258>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <HAL_ADC_ConfigChannel+0x1f4>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b11      	cmp	r3, #17
 8005b7e:	d122      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a11      	ldr	r2, [pc, #68]	; (8005be4 <HAL_ADC_ConfigChannel+0x258>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d111      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <HAL_ADC_ConfigChannel+0x25c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a11      	ldr	r2, [pc, #68]	; (8005bec <HAL_ADC_ConfigChannel+0x260>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	0c9a      	lsrs	r2, r3, #18
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bb8:	e002      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f9      	bne.n	8005bba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40012300 	.word	0x40012300
 8005be0:	40012000 	.word	0x40012000
 8005be4:	10000012 	.word	0x10000012
 8005be8:	20000008 	.word	0x20000008
 8005bec:	431bde83 	.word	0x431bde83

08005bf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bf8:	4b79      	ldr	r3, [pc, #484]	; (8005de0 <ADC_Init+0x1f0>)
 8005bfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6899      	ldr	r1, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	4a58      	ldr	r2, [pc, #352]	; (8005de4 <ADC_Init+0x1f4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6899      	ldr	r1, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]
 8005ccc:	e00f      	b.n	8005cee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0202 	bic.w	r2, r2, #2
 8005cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6899      	ldr	r1, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7e1b      	ldrb	r3, [r3, #24]
 8005d08:	005a      	lsls	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01b      	beq.n	8005d54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	3b01      	subs	r3, #1
 8005d48:	035a      	lsls	r2, r3, #13
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	e007      	b.n	8005d64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	051a      	lsls	r2, r3, #20
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6899      	ldr	r1, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005da6:	025a      	lsls	r2, r3, #9
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	029a      	lsls	r2, r3, #10
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40012300 	.word	0x40012300
 8005de4:	0f000001 	.word	0x0f000001

08005de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e04:	4013      	ands	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e1a:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	60d3      	str	r3, [r2, #12]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <__NVIC_GetPriorityGrouping+0x18>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 0307 	and.w	r3, r3, #7
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000ed00 	.word	0xe000ed00

08005e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	db0b      	blt.n	8005e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	f003 021f 	and.w	r2, r3, #31
 8005e64:	4907      	ldr	r1, [pc, #28]	; (8005e84 <__NVIC_EnableIRQ+0x38>)
 8005e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000e100 	.word	0xe000e100

08005e88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	db12      	blt.n	8005ec0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	f003 021f 	and.w	r2, r3, #31
 8005ea0:	490a      	ldr	r1, [pc, #40]	; (8005ecc <__NVIC_DisableIRQ+0x44>)
 8005ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8005eae:	3320      	adds	r3, #32
 8005eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005eb4:	f3bf 8f4f 	dsb	sy
}
 8005eb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005eba:	f3bf 8f6f 	isb	sy
}
 8005ebe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	e000e100 	.word	0xe000e100

08005ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	db0a      	blt.n	8005efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	490c      	ldr	r1, [pc, #48]	; (8005f1c <__NVIC_SetPriority+0x4c>)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	0112      	lsls	r2, r2, #4
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ef8:	e00a      	b.n	8005f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	4908      	ldr	r1, [pc, #32]	; (8005f20 <__NVIC_SetPriority+0x50>)
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	3b04      	subs	r3, #4
 8005f08:	0112      	lsls	r2, r2, #4
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	761a      	strb	r2, [r3, #24]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	e000e100 	.word	0xe000e100
 8005f20:	e000ed00 	.word	0xe000ed00

08005f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f1c3 0307 	rsb	r3, r3, #7
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	bf28      	it	cs
 8005f42:	2304      	movcs	r3, #4
 8005f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	2b06      	cmp	r3, #6
 8005f4c:	d902      	bls.n	8005f54 <NVIC_EncodePriority+0x30>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3b03      	subs	r3, #3
 8005f52:	e000      	b.n	8005f56 <NVIC_EncodePriority+0x32>
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43da      	mvns	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	401a      	ands	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	fa01 f303 	lsl.w	r3, r1, r3
 8005f76:	43d9      	mvns	r1, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7c:	4313      	orrs	r3, r2
         );
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3724      	adds	r7, #36	; 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f9c:	d301      	bcc.n	8005fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00f      	b.n	8005fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fa2:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <SysTick_Config+0x40>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005faa:	210f      	movs	r1, #15
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	f7ff ff8e 	bl	8005ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <SysTick_Config+0x40>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <SysTick_Config+0x40>)
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	e000e010 	.word	0xe000e010

08005fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff05 	bl	8005de8 <__NVIC_SetPriorityGrouping>
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	4603      	mov	r3, r0
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ff8:	f7ff ff1a 	bl	8005e30 <__NVIC_GetPriorityGrouping>
 8005ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	6978      	ldr	r0, [r7, #20]
 8006004:	f7ff ff8e 	bl	8005f24 <NVIC_EncodePriority>
 8006008:	4602      	mov	r2, r0
 800600a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff ff5d 	bl	8005ed0 <__NVIC_SetPriority>
}
 8006016:	bf00      	nop
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	4603      	mov	r3, r0
 8006026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff0d 	bl	8005e4c <__NVIC_EnableIRQ>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff1d 	bl	8005e88 <__NVIC_DisableIRQ>
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ff94 	bl	8005f8c <SysTick_Config>
 8006064:	4603      	mov	r3, r0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800607c:	f7ff fa74 	bl	8005568 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e099      	b.n	80061c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ac:	e00f      	b.n	80060ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ae:	f7ff fa5b 	bl	8005568 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d908      	bls.n	80060ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e078      	b.n	80061c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e8      	bne.n	80060ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4b38      	ldr	r3, [pc, #224]	; (80061c8 <HAL_DMA_Init+0x158>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2b04      	cmp	r3, #4
 8006126:	d107      	bne.n	8006138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	4313      	orrs	r3, r2
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0307 	bic.w	r3, r3, #7
 800614e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b04      	cmp	r3, #4
 8006160:	d117      	bne.n	8006192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fb6d 	bl	8006854 <DMA_CheckFifoParam>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2240      	movs	r2, #64	; 0x40
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800618e:	2301      	movs	r3, #1
 8006190:	e016      	b.n	80061c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb24 	bl	80067e8 <DMA_CalcBaseAndBitshift>
 80061a0:	4603      	mov	r3, r0
 80061a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	223f      	movs	r2, #63	; 0x3f
 80061aa:	409a      	lsls	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	f010803f 	.word	0xf010803f

080061cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e050      	b.n	8006280 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d101      	bne.n	80061ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
 80061ec:	e048      	b.n	8006280 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2221      	movs	r2, #33	; 0x21
 800622c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fada 	bl	80067e8 <DMA_CalcBaseAndBitshift>
 8006234:	4603      	mov	r3, r0
 8006236:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	223f      	movs	r2, #63	; 0x3f
 8006262:	409a      	lsls	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_DMA_Start_IT+0x26>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e040      	b.n	8006330 <HAL_DMA_Start_IT+0xa8>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d12f      	bne.n	8006322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fa58 	bl	800678c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	223f      	movs	r2, #63	; 0x3f
 80062e2:	409a      	lsls	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0216 	orr.w	r2, r2, #22
 80062f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0208 	orr.w	r2, r2, #8
 800630e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e005      	b.n	800632e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006346:	f7ff f90f 	bl	8005568 <HAL_GetTick>
 800634a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d008      	beq.n	800636a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2280      	movs	r2, #128	; 0x80
 800635c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e052      	b.n	8006410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0216 	bic.w	r2, r2, #22
 8006378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <HAL_DMA_Abort+0x62>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0208 	bic.w	r2, r2, #8
 80063a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063ba:	e013      	b.n	80063e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063bc:	f7ff f8d4 	bl	8005568 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d90c      	bls.n	80063e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2203      	movs	r2, #3
 80063d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e015      	b.n	8006410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e4      	bne.n	80063bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f6:	223f      	movs	r2, #63	; 0x3f
 80063f8:	409a      	lsls	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d004      	beq.n	8006436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e00c      	b.n	8006450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2205      	movs	r2, #5
 800643a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006468:	4b8e      	ldr	r3, [pc, #568]	; (80066a4 <HAL_DMA_IRQHandler+0x248>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a8e      	ldr	r2, [pc, #568]	; (80066a8 <HAL_DMA_IRQHandler+0x24c>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	0a9b      	lsrs	r3, r3, #10
 8006474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006486:	2208      	movs	r2, #8
 8006488:	409a      	lsls	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01a      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d013      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0204 	bic.w	r2, r2, #4
 80064ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b4:	2208      	movs	r2, #8
 80064b6:	409a      	lsls	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	f043 0201 	orr.w	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	2201      	movs	r2, #1
 80064ce:	409a      	lsls	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	2201      	movs	r2, #1
 80064ec:	409a      	lsls	r2, r3
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f043 0202 	orr.w	r2, r3, #2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	2204      	movs	r2, #4
 8006504:	409a      	lsls	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4013      	ands	r3, r2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d012      	beq.n	8006534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	2204      	movs	r2, #4
 8006522:	409a      	lsls	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	f043 0204 	orr.w	r2, r3, #4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	2210      	movs	r2, #16
 800653a:	409a      	lsls	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d043      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d03c      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	2210      	movs	r2, #16
 8006558:	409a      	lsls	r2, r3
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d018      	beq.n	800659e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d108      	bne.n	800658c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d024      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	e01f      	b.n	80065cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
 800659c:	e016      	b.n	80065cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d107      	bne.n	80065bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0208 	bic.w	r2, r2, #8
 80065ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	2220      	movs	r2, #32
 80065d2:	409a      	lsls	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 808f 	beq.w	80066fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8087 	beq.w	80066fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f2:	2220      	movs	r2, #32
 80065f4:	409a      	lsls	r2, r3
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b05      	cmp	r3, #5
 8006604:	d136      	bne.n	8006674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0216 	bic.w	r2, r2, #22
 8006614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_DMA_IRQHandler+0x1da>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0208 	bic.w	r2, r2, #8
 8006644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	223f      	movs	r2, #63	; 0x3f
 800664c:	409a      	lsls	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d07e      	beq.n	8006768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
        }
        return;
 8006672:	e079      	b.n	8006768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01d      	beq.n	80066be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	2b00      	cmp	r3, #0
 8006696:	d031      	beq.n	80066fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	e02c      	b.n	80066fc <HAL_DMA_IRQHandler+0x2a0>
 80066a2:	bf00      	nop
 80066a4:	20000008 	.word	0x20000008
 80066a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d023      	beq.n	80066fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
 80066bc:	e01e      	b.n	80066fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10f      	bne.n	80066ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0210 	bic.w	r2, r2, #16
 80066da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	2b00      	cmp	r3, #0
 8006702:	d032      	beq.n	800676a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d022      	beq.n	8006756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2205      	movs	r2, #5
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	3301      	adds	r3, #1
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	429a      	cmp	r2, r3
 8006732:	d307      	bcc.n	8006744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f2      	bne.n	8006728 <HAL_DMA_IRQHandler+0x2cc>
 8006742:	e000      	b.n	8006746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
 8006766:	e000      	b.n	800676a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006768:	bf00      	nop
    }
  }
}
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800677e:	b2db      	uxtb	r3, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d108      	bne.n	80067cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ca:	e007      	b.n	80067dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	3b10      	subs	r3, #16
 80067f8:	4a14      	ldr	r2, [pc, #80]	; (800684c <DMA_CalcBaseAndBitshift+0x64>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006802:	4a13      	ldr	r2, [pc, #76]	; (8006850 <DMA_CalcBaseAndBitshift+0x68>)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d909      	bls.n	800682a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	659a      	str	r2, [r3, #88]	; 0x58
 8006828:	e007      	b.n	800683a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	aaaaaaab 	.word	0xaaaaaaab
 8006850:	080111a0 	.word	0x080111a0

08006854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11f      	bne.n	80068ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d856      	bhi.n	8006922 <DMA_CheckFifoParam+0xce>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <DMA_CheckFifoParam+0x28>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	0800688d 	.word	0x0800688d
 8006880:	0800689f 	.word	0x0800689f
 8006884:	0800688d 	.word	0x0800688d
 8006888:	08006923 	.word	0x08006923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d046      	beq.n	8006926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800689c:	e043      	b.n	8006926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068a6:	d140      	bne.n	800692a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ac:	e03d      	b.n	800692a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b6:	d121      	bne.n	80068fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d837      	bhi.n	800692e <DMA_CheckFifoParam+0xda>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <DMA_CheckFifoParam+0x70>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068db 	.word	0x080068db
 80068cc:	080068d5 	.word	0x080068d5
 80068d0:	080068ed 	.word	0x080068ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
      break;
 80068d8:	e030      	b.n	800693c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d025      	beq.n	8006932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ea:	e022      	b.n	8006932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068f4:	d11f      	bne.n	8006936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068fa:	e01c      	b.n	8006936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d903      	bls.n	800690a <DMA_CheckFifoParam+0xb6>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d003      	beq.n	8006910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006908:	e018      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
      break;
 800690e:	e015      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00e      	beq.n	800693a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
      break;
 8006920:	e00b      	b.n	800693a <DMA_CheckFifoParam+0xe6>
      break;
 8006922:	bf00      	nop
 8006924:	e00a      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 8006926:	bf00      	nop
 8006928:	e008      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 800692a:	bf00      	nop
 800692c:	e006      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;   
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <DMA_CheckFifoParam+0xe8>
      break;
 800693a:	bf00      	nop
    }
  } 
  
  return status; 
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	; 0x24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800695e:	2300      	movs	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e165      	b.n	8006c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006968:	2201      	movs	r2, #1
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4013      	ands	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	429a      	cmp	r2, r3
 8006982:	f040 8154 	bne.w	8006c2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b01      	cmp	r3, #1
 8006990:	d005      	beq.n	800699e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800699a:	2b02      	cmp	r3, #2
 800699c:	d130      	bne.n	8006a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	2203      	movs	r2, #3
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4013      	ands	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069d4:	2201      	movs	r2, #1
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4013      	ands	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	f003 0201 	and.w	r2, r3, #1
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d017      	beq.n	8006a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	2203      	movs	r2, #3
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	4013      	ands	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d123      	bne.n	8006a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	08da      	lsrs	r2, r3, #3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3208      	adds	r2, #8
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	220f      	movs	r2, #15
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	08da      	lsrs	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3208      	adds	r2, #8
 8006a8a:	69b9      	ldr	r1, [r7, #24]
 8006a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f003 0203 	and.w	r2, r3, #3
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80ae 	beq.w	8006c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	4b5d      	ldr	r3, [pc, #372]	; (8006c4c <HAL_GPIO_Init+0x300>)
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	4a5c      	ldr	r2, [pc, #368]	; (8006c4c <HAL_GPIO_Init+0x300>)
 8006adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae2:	4b5a      	ldr	r3, [pc, #360]	; (8006c4c <HAL_GPIO_Init+0x300>)
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006aee:	4a58      	ldr	r2, [pc, #352]	; (8006c50 <HAL_GPIO_Init+0x304>)
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	089b      	lsrs	r3, r3, #2
 8006af4:	3302      	adds	r3, #2
 8006af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	220f      	movs	r2, #15
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a4f      	ldr	r2, [pc, #316]	; (8006c54 <HAL_GPIO_Init+0x308>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d025      	beq.n	8006b66 <HAL_GPIO_Init+0x21a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a4e      	ldr	r2, [pc, #312]	; (8006c58 <HAL_GPIO_Init+0x30c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01f      	beq.n	8006b62 <HAL_GPIO_Init+0x216>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a4d      	ldr	r2, [pc, #308]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d019      	beq.n	8006b5e <HAL_GPIO_Init+0x212>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a4c      	ldr	r2, [pc, #304]	; (8006c60 <HAL_GPIO_Init+0x314>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_GPIO_Init+0x20e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a4b      	ldr	r2, [pc, #300]	; (8006c64 <HAL_GPIO_Init+0x318>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00d      	beq.n	8006b56 <HAL_GPIO_Init+0x20a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a4a      	ldr	r2, [pc, #296]	; (8006c68 <HAL_GPIO_Init+0x31c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d007      	beq.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a49      	ldr	r2, [pc, #292]	; (8006c6c <HAL_GPIO_Init+0x320>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d101      	bne.n	8006b4e <HAL_GPIO_Init+0x202>
 8006b4a:	2306      	movs	r3, #6
 8006b4c:	e00c      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b4e:	2307      	movs	r3, #7
 8006b50:	e00a      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b52:	2305      	movs	r3, #5
 8006b54:	e008      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b56:	2304      	movs	r3, #4
 8006b58:	e006      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e004      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e002      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <HAL_GPIO_Init+0x21c>
 8006b66:	2300      	movs	r3, #0
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	f002 0203 	and.w	r2, r2, #3
 8006b6e:	0092      	lsls	r2, r2, #2
 8006b70:	4093      	lsls	r3, r2
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b78:	4935      	ldr	r1, [pc, #212]	; (8006c50 <HAL_GPIO_Init+0x304>)
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	089b      	lsrs	r3, r3, #2
 8006b7e:	3302      	adds	r3, #2
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b86:	4b3a      	ldr	r3, [pc, #232]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4013      	ands	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006baa:	4a31      	ldr	r2, [pc, #196]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bb0:	4b2f      	ldr	r3, [pc, #188]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bd4:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bda:	4b25      	ldr	r3, [pc, #148]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	43db      	mvns	r3, r3
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	4013      	ands	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c04:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	4013      	ands	r3, r2
 8006c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c28:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <HAL_GPIO_Init+0x324>)
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	3301      	adds	r3, #1
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	f67f ae96 	bls.w	8006968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	3724      	adds	r7, #36	; 0x24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40013800 	.word	0x40013800
 8006c54:	40020000 	.word	0x40020000
 8006c58:	40020400 	.word	0x40020400
 8006c5c:	40020800 	.word	0x40020800
 8006c60:	40020c00 	.word	0x40020c00
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40021400 	.word	0x40021400
 8006c6c:	40021800 	.word	0x40021800
 8006c70:	40013c00 	.word	0x40013c00

08006c74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e0c7      	b.n	8006e20 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c90:	2201      	movs	r2, #1
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	f040 80b7 	bne.w	8006e1a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006cac:	4a62      	ldr	r2, [pc, #392]	; (8006e38 <HAL_GPIO_DeInit+0x1c4>)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	089b      	lsrs	r3, r3, #2
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	220f      	movs	r2, #15
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a5a      	ldr	r2, [pc, #360]	; (8006e3c <HAL_GPIO_DeInit+0x1c8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d025      	beq.n	8006d22 <HAL_GPIO_DeInit+0xae>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a59      	ldr	r2, [pc, #356]	; (8006e40 <HAL_GPIO_DeInit+0x1cc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01f      	beq.n	8006d1e <HAL_GPIO_DeInit+0xaa>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <HAL_GPIO_DeInit+0x1d0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d019      	beq.n	8006d1a <HAL_GPIO_DeInit+0xa6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a57      	ldr	r2, [pc, #348]	; (8006e48 <HAL_GPIO_DeInit+0x1d4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_GPIO_DeInit+0xa2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a56      	ldr	r2, [pc, #344]	; (8006e4c <HAL_GPIO_DeInit+0x1d8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00d      	beq.n	8006d12 <HAL_GPIO_DeInit+0x9e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a55      	ldr	r2, [pc, #340]	; (8006e50 <HAL_GPIO_DeInit+0x1dc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d007      	beq.n	8006d0e <HAL_GPIO_DeInit+0x9a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a54      	ldr	r2, [pc, #336]	; (8006e54 <HAL_GPIO_DeInit+0x1e0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d101      	bne.n	8006d0a <HAL_GPIO_DeInit+0x96>
 8006d06:	2306      	movs	r3, #6
 8006d08:	e00c      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d0a:	2307      	movs	r3, #7
 8006d0c:	e00a      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d0e:	2305      	movs	r3, #5
 8006d10:	e008      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d12:	2304      	movs	r3, #4
 8006d14:	e006      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d16:	2303      	movs	r3, #3
 8006d18:	e004      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e002      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <HAL_GPIO_DeInit+0xb0>
 8006d22:	2300      	movs	r3, #0
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	f002 0203 	and.w	r2, r2, #3
 8006d2a:	0092      	lsls	r2, r2, #2
 8006d2c:	4093      	lsls	r3, r2
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d132      	bne.n	8006d9a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d34:	4b48      	ldr	r3, [pc, #288]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	4946      	ldr	r1, [pc, #280]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d42:	4b45      	ldr	r3, [pc, #276]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	4943      	ldr	r1, [pc, #268]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d50:	4b41      	ldr	r3, [pc, #260]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	43db      	mvns	r3, r3
 8006d58:	493f      	ldr	r1, [pc, #252]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d5e:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	493c      	ldr	r1, [pc, #240]	; (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	220f      	movs	r2, #15
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d7c:	4a2e      	ldr	r2, [pc, #184]	; (8006e38 <HAL_GPIO_DeInit+0x1c4>)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	089b      	lsrs	r3, r3, #2
 8006d82:	3302      	adds	r3, #2
 8006d84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	43da      	mvns	r2, r3
 8006d8c:	482a      	ldr	r0, [pc, #168]	; (8006e38 <HAL_GPIO_DeInit+0x1c4>)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	089b      	lsrs	r3, r3, #2
 8006d92:	400a      	ands	r2, r1
 8006d94:	3302      	adds	r3, #2
 8006d96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	2103      	movs	r1, #3
 8006da4:	fa01 f303 	lsl.w	r3, r1, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	401a      	ands	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	08da      	lsrs	r2, r3, #3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3208      	adds	r2, #8
 8006db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	220f      	movs	r2, #15
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	08d2      	lsrs	r2, r2, #3
 8006dd0:	4019      	ands	r1, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3208      	adds	r2, #8
 8006dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	2103      	movs	r1, #3
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	2101      	movs	r1, #1
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e12:	43db      	mvns	r3, r3
 8006e14:	401a      	ands	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	f67f af34 	bls.w	8006c90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	40020000 	.word	0x40020000
 8006e40:	40020400 	.word	0x40020400
 8006e44:	40020800 	.word	0x40020800
 8006e48:	40020c00 	.word	0x40020c00
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	40021400 	.word	0x40021400
 8006e54:	40021800 	.word	0x40021800
 8006e58:	40013c00 	.word	0x40013c00

08006e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	807b      	strh	r3, [r7, #2]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e6c:	787b      	ldrb	r3, [r7, #1]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e72:	887a      	ldrh	r2, [r7, #2]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e78:	e003      	b.n	8006e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e7a:	887b      	ldrh	r3, [r7, #2]
 8006e7c:	041a      	lsls	r2, r3, #16
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	619a      	str	r2, [r3, #24]
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ea0:	887a      	ldrh	r2, [r7, #2]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	041a      	lsls	r2, r3, #16
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	43d9      	mvns	r1, r3
 8006eac:	887b      	ldrh	r3, [r7, #2]
 8006eae:	400b      	ands	r3, r1
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	619a      	str	r2, [r3, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006ece:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d006      	beq.n	8006ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eda:	4a05      	ldr	r2, [pc, #20]	; (8006ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd f80c 	bl	8003f00 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40013c00 	.word	0x40013c00

08006ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e12b      	b.n	800715e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fd fc9c 	bl	8004858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2224      	movs	r2, #36	; 0x24
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f58:	f001 f8fe 	bl	8008158 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4a81      	ldr	r2, [pc, #516]	; (8007168 <HAL_I2C_Init+0x274>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d807      	bhi.n	8006f78 <HAL_I2C_Init+0x84>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a80      	ldr	r2, [pc, #512]	; (800716c <HAL_I2C_Init+0x278>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	bf94      	ite	ls
 8006f70:	2301      	movls	r3, #1
 8006f72:	2300      	movhi	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	e006      	b.n	8006f86 <HAL_I2C_Init+0x92>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4a7d      	ldr	r2, [pc, #500]	; (8007170 <HAL_I2C_Init+0x27c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	bf94      	ite	ls
 8006f80:	2301      	movls	r3, #1
 8006f82:	2300      	movhi	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0e7      	b.n	800715e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4a78      	ldr	r2, [pc, #480]	; (8007174 <HAL_I2C_Init+0x280>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	0c9b      	lsrs	r3, r3, #18
 8006f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4a6a      	ldr	r2, [pc, #424]	; (8007168 <HAL_I2C_Init+0x274>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d802      	bhi.n	8006fc8 <HAL_I2C_Init+0xd4>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	e009      	b.n	8006fdc <HAL_I2C_Init+0xe8>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fce:	fb02 f303 	mul.w	r3, r2, r3
 8006fd2:	4a69      	ldr	r2, [pc, #420]	; (8007178 <HAL_I2C_Init+0x284>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	3301      	adds	r3, #1
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006fee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	495c      	ldr	r1, [pc, #368]	; (8007168 <HAL_I2C_Init+0x274>)
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	d819      	bhi.n	8007030 <HAL_I2C_Init+0x13c>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1e59      	subs	r1, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	fbb1 f3f3 	udiv	r3, r1, r3
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007010:	400b      	ands	r3, r1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_I2C_Init+0x138>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1e59      	subs	r1, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	fbb1 f3f3 	udiv	r3, r1, r3
 8007024:	3301      	adds	r3, #1
 8007026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800702a:	e051      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 800702c:	2304      	movs	r3, #4
 800702e:	e04f      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d111      	bne.n	800705c <HAL_I2C_Init+0x168>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1e58      	subs	r0, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	440b      	add	r3, r1
 8007046:	fbb0 f3f3 	udiv	r3, r0, r3
 800704a:	3301      	adds	r3, #1
 800704c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007050:	2b00      	cmp	r3, #0
 8007052:	bf0c      	ite	eq
 8007054:	2301      	moveq	r3, #1
 8007056:	2300      	movne	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e012      	b.n	8007082 <HAL_I2C_Init+0x18e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1e58      	subs	r0, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6859      	ldr	r1, [r3, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	0099      	lsls	r1, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007072:	3301      	adds	r3, #1
 8007074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_I2C_Init+0x196>
 8007086:	2301      	movs	r3, #1
 8007088:	e022      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10e      	bne.n	80070b0 <HAL_I2C_Init+0x1bc>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1e58      	subs	r0, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	440b      	add	r3, r1
 80070a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80070a4:	3301      	adds	r3, #1
 80070a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	e00f      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	1e58      	subs	r0, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6859      	ldr	r1, [r3, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	0099      	lsls	r1, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070c6:	3301      	adds	r3, #1
 80070c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	6809      	ldr	r1, [r1, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80070fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6911      	ldr	r1, [r2, #16]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68d2      	ldr	r2, [r2, #12]
 800710a:	4311      	orrs	r1, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	430b      	orrs	r3, r1
 8007112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	000186a0 	.word	0x000186a0
 800716c:	001e847f 	.word	0x001e847f
 8007170:	003d08ff 	.word	0x003d08ff
 8007174:	431bde83 	.word	0x431bde83
 8007178:	10624dd3 	.word	0x10624dd3

0800717c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e021      	b.n	80071d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	; 0x24
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fd fbf6 	bl	8004998 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	817b      	strh	r3, [r7, #10]
 80071ee:	460b      	mov	r3, r1
 80071f0:	813b      	strh	r3, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071f6:	f7fe f9b7 	bl	8005568 <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b20      	cmp	r3, #32
 8007206:	f040 80d9 	bne.w	80073bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2319      	movs	r3, #25
 8007210:	2201      	movs	r2, #1
 8007212:	496d      	ldr	r1, [pc, #436]	; (80073c8 <HAL_I2C_Mem_Write+0x1ec>)
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fc7f 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
 8007222:	e0cc      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_I2C_Mem_Write+0x56>
 800722e:	2302      	movs	r3, #2
 8007230:	e0c5      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d007      	beq.n	8007258 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2221      	movs	r2, #33	; 0x21
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2240      	movs	r2, #64	; 0x40
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a3a      	ldr	r2, [r7, #32]
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a4d      	ldr	r2, [pc, #308]	; (80073cc <HAL_I2C_Mem_Write+0x1f0>)
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800729a:	88f8      	ldrh	r0, [r7, #6]
 800729c:	893a      	ldrh	r2, [r7, #8]
 800729e:	8979      	ldrh	r1, [r7, #10]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4603      	mov	r3, r0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fab6 	bl	800781c <I2C_RequestMemoryWrite>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d052      	beq.n	800735c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e081      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fd00 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d107      	bne.n	80072e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e06b      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b04      	cmp	r3, #4
 8007322:	d11b      	bne.n	800735c <HAL_I2C_Mem_Write+0x180>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d017      	beq.n	800735c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1aa      	bne.n	80072ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fcec 	bl	8007d46 <I2C_WaitOnBTFFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00d      	beq.n	8007390 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	2b04      	cmp	r3, #4
 800737a:	d107      	bne.n	800738c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e016      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e000      	b.n	80073be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	00100002 	.word	0x00100002
 80073cc:	ffff0000 	.word	0xffff0000

080073d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	4608      	mov	r0, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	817b      	strh	r3, [r7, #10]
 80073e2:	460b      	mov	r3, r1
 80073e4:	813b      	strh	r3, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ea:	f7fe f8bd 	bl	8005568 <HAL_GetTick>
 80073ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	f040 8208 	bne.w	800780e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	2319      	movs	r3, #25
 8007404:	2201      	movs	r2, #1
 8007406:	497b      	ldr	r1, [pc, #492]	; (80075f4 <HAL_I2C_Mem_Read+0x224>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fb85 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
 8007416:	e1fb      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_I2C_Mem_Read+0x56>
 8007422:	2302      	movs	r3, #2
 8007424:	e1f4      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d007      	beq.n	800744c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2222      	movs	r2, #34	; 0x22
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800747c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a5b      	ldr	r2, [pc, #364]	; (80075f8 <HAL_I2C_Mem_Read+0x228>)
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800748e:	88f8      	ldrh	r0, [r7, #6]
 8007490:	893a      	ldrh	r2, [r7, #8]
 8007492:	8979      	ldrh	r1, [r7, #10]
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4603      	mov	r3, r0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fa52 	bl	8007948 <I2C_RequestMemoryRead>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e1b0      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d113      	bne.n	80074de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b6:	2300      	movs	r3, #0
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	623b      	str	r3, [r7, #32]
 80074ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	e184      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d11b      	bne.n	800751e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e164      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	2b02      	cmp	r3, #2
 8007524:	d11b      	bne.n	800755e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007534:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007546:	2300      	movs	r3, #0
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	e144      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007574:	e138      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757a:	2b03      	cmp	r3, #3
 800757c:	f200 80f1 	bhi.w	8007762 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007584:	2b01      	cmp	r3, #1
 8007586:	d123      	bne.n	80075d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fc1b 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e139      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075ce:	e10b      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d14e      	bne.n	8007676 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	2200      	movs	r2, #0
 80075e0:	4906      	ldr	r1, [pc, #24]	; (80075fc <HAL_I2C_Mem_Read+0x22c>)
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fa98 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e10e      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
 80075f2:	bf00      	nop
 80075f4:	00100002 	.word	0x00100002
 80075f8:	ffff0000 	.word	0xffff0000
 80075fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007674:	e0b8      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	2200      	movs	r2, #0
 800767e:	4966      	ldr	r1, [pc, #408]	; (8007818 <HAL_I2C_Mem_Read+0x448>)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa49 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0bf      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2200      	movs	r2, #0
 80076da:	494f      	ldr	r1, [pc, #316]	; (8007818 <HAL_I2C_Mem_Read+0x448>)
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fa1b 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e091      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007760:	e042      	b.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fb2e 	bl	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e04c      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d118      	bne.n	80077e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f47f aec2 	bne.w	8007576 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800780e:	2302      	movs	r3, #2
  }
}
 8007810:	4618      	mov	r0, r3
 8007812:	3728      	adds	r7, #40	; 0x28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	00010004 	.word	0x00010004

0800781c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	461a      	mov	r2, r3
 800782a:	4603      	mov	r3, r0
 800782c:	817b      	strh	r3, [r7, #10]
 800782e:	460b      	mov	r3, r1
 8007830:	813b      	strh	r3, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	2200      	movs	r2, #0
 800784e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f960 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00d      	beq.n	800787a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786c:	d103      	bne.n	8007876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e05f      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800787a:	897b      	ldrh	r3, [r7, #10]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	492d      	ldr	r1, [pc, #180]	; (8007944 <I2C_RequestMemoryWrite+0x128>)
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f998 	bl	8007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e04c      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	6a39      	ldr	r1, [r7, #32]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa02 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d107      	bne.n	80078de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e02b      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d105      	bne.n	80078f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	611a      	str	r2, [r3, #16]
 80078f2:	e021      	b.n	8007938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078f4:	893b      	ldrh	r3, [r7, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007904:	6a39      	ldr	r1, [r7, #32]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f9dc 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00d      	beq.n	800792e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b04      	cmp	r3, #4
 8007918:	d107      	bne.n	800792a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e005      	b.n	800793a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800792e:	893b      	ldrh	r3, [r7, #8]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	00010002 	.word	0x00010002

08007948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	2200      	movs	r2, #0
 800798a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f8c2 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a8:	d103      	bne.n	80079b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e0aa      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079b6:	897b      	ldrh	r3, [r7, #10]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	4952      	ldr	r1, [pc, #328]	; (8007b14 <I2C_RequestMemoryRead+0x1cc>)
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f8fa 	bl	8007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e097      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f4:	6a39      	ldr	r1, [r7, #32]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f964 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d107      	bne.n	8007a1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e076      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d105      	bne.n	8007a30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a24:	893b      	ldrh	r3, [r7, #8]
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	611a      	str	r2, [r3, #16]
 8007a2e:	e021      	b.n	8007a74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a30:	893b      	ldrh	r3, [r7, #8]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a40:	6a39      	ldr	r1, [r7, #32]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f93e 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00d      	beq.n	8007a6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d107      	bne.n	8007a66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e050      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a6a:	893b      	ldrh	r3, [r7, #8]
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	6a39      	ldr	r1, [r7, #32]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f923 	bl	8007cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00d      	beq.n	8007aa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d107      	bne.n	8007a9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e035      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 f82b 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00d      	beq.n	8007ae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad6:	d103      	bne.n	8007ae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e013      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ae4:	897b      	ldrh	r3, [r7, #10]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	4906      	ldr	r1, [pc, #24]	; (8007b14 <I2C_RequestMemoryRead+0x1cc>)
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f863 	bl	8007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	00010002 	.word	0x00010002

08007b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b28:	e025      	b.n	8007b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d021      	beq.n	8007b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fd fd19 	bl	8005568 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d116      	bne.n	8007b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e023      	b.n	8007bbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10d      	bne.n	8007b9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	43da      	mvns	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	e00c      	b.n	8007bb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d0b6      	beq.n	8007b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bd4:	e051      	b.n	8007c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be4:	d123      	bne.n	8007c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f043 0204 	orr.w	r2, r3, #4
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e046      	b.n	8007cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d021      	beq.n	8007c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c36:	f7fd fc97 	bl	8005568 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d302      	bcc.n	8007c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d116      	bne.n	8007c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e020      	b.n	8007cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10c      	bne.n	8007c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	43da      	mvns	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	e00b      	b.n	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	43da      	mvns	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4013      	ands	r3, r2
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d18d      	bne.n	8007bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cd0:	e02d      	b.n	8007d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8ce 	bl	8007e74 <I2C_IsAcknowledgeFailed>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e02d      	b.n	8007d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d021      	beq.n	8007d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7fd fc3d 	bl	8005568 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d116      	bne.n	8007d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f043 0220 	orr.w	r2, r3, #32
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e007      	b.n	8007d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d38:	2b80      	cmp	r3, #128	; 0x80
 8007d3a:	d1ca      	bne.n	8007cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d52:	e02d      	b.n	8007db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f88d 	bl	8007e74 <I2C_IsAcknowledgeFailed>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e02d      	b.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d021      	beq.n	8007db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6c:	f7fd fbfc 	bl	8005568 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d116      	bne.n	8007db0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e007      	b.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d1ca      	bne.n	8007d54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dd4:	e042      	b.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d119      	bne.n	8007e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e029      	b.n	8007e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e18:	f7fd fba6 	bl	8005568 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d302      	bcc.n	8007e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d116      	bne.n	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e007      	b.n	8007e6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d1b5      	bne.n	8007dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8a:	d11b      	bne.n	8007ec4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	f043 0204 	orr.w	r2, r3, #4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
	...

08007ed4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eec:	6413      	str	r3, [r2, #64]	; 0x40
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <HAL_PWREx_EnableOverDrive+0x90>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <HAL_PWREx_EnableOverDrive+0x94>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f00:	f7fd fb32 	bl	8005568 <HAL_GetTick>
 8007f04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007f06:	e009      	b.n	8007f1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f08:	f7fd fb2e 	bl	8005568 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f16:	d901      	bls.n	8007f1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e01f      	b.n	8007f5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007f1c:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f28:	d1ee      	bne.n	8007f08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f30:	f7fd fb1a 	bl	8005568 <HAL_GetTick>
 8007f34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f36:	e009      	b.n	8007f4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f38:	f7fd fb16 	bl	8005568 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f46:	d901      	bls.n	8007f4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e007      	b.n	8007f5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f4c:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f58:	d1ee      	bne.n	8007f38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40023800 	.word	0x40023800
 8007f68:	420e0040 	.word	0x420e0040
 8007f6c:	40007000 	.word	0x40007000
 8007f70:	420e0044 	.word	0x420e0044

08007f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0cc      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f88:	4b68      	ldr	r3, [pc, #416]	; (800812c <HAL_RCC_ClockConfig+0x1b8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d90c      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f96:	4b65      	ldr	r3, [pc, #404]	; (800812c <HAL_RCC_ClockConfig+0x1b8>)
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9e:	4b63      	ldr	r3, [pc, #396]	; (800812c <HAL_RCC_ClockConfig+0x1b8>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d001      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e0b8      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d020      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fc8:	4b59      	ldr	r3, [pc, #356]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	4a58      	ldr	r2, [pc, #352]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8007fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fe0:	4b53      	ldr	r3, [pc, #332]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	4a52      	ldr	r2, [pc, #328]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fec:	4b50      	ldr	r3, [pc, #320]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	494d      	ldr	r1, [pc, #308]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d044      	beq.n	8008094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d107      	bne.n	8008022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008012:	4b47      	ldr	r3, [pc, #284]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d119      	bne.n	8008052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e07f      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d003      	beq.n	8008032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800802e:	2b03      	cmp	r3, #3
 8008030:	d107      	bne.n	8008042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008032:	4b3f      	ldr	r3, [pc, #252]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e06f      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008042:	4b3b      	ldr	r3, [pc, #236]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e067      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008052:	4b37      	ldr	r3, [pc, #220]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f023 0203 	bic.w	r2, r3, #3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	4934      	ldr	r1, [pc, #208]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008060:	4313      	orrs	r3, r2
 8008062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008064:	f7fd fa80 	bl	8005568 <HAL_GetTick>
 8008068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800806a:	e00a      	b.n	8008082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800806c:	f7fd fa7c 	bl	8005568 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f241 3288 	movw	r2, #5000	; 0x1388
 800807a:	4293      	cmp	r3, r2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e04f      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008082:	4b2b      	ldr	r3, [pc, #172]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 020c 	and.w	r2, r3, #12
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	429a      	cmp	r2, r3
 8008092:	d1eb      	bne.n	800806c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <HAL_RCC_ClockConfig+0x1b8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d20c      	bcs.n	80080bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a2:	4b22      	ldr	r3, [pc, #136]	; (800812c <HAL_RCC_ClockConfig+0x1b8>)
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080aa:	4b20      	ldr	r3, [pc, #128]	; (800812c <HAL_RCC_ClockConfig+0x1b8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d001      	beq.n	80080bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e032      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080c8:	4b19      	ldr	r3, [pc, #100]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4916      	ldr	r1, [pc, #88]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080e6:	4b12      	ldr	r3, [pc, #72]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	490e      	ldr	r1, [pc, #56]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080fa:	f000 f855 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 80080fe:	4602      	mov	r2, r0
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <HAL_RCC_ClockConfig+0x1bc>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	091b      	lsrs	r3, r3, #4
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	490a      	ldr	r1, [pc, #40]	; (8008134 <HAL_RCC_ClockConfig+0x1c0>)
 800810c:	5ccb      	ldrb	r3, [r1, r3]
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <HAL_RCC_ClockConfig+0x1c4>)
 8008114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <HAL_RCC_ClockConfig+0x1c8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd f9e0 	bl	80054e0 <HAL_InitTick>

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40023c00 	.word	0x40023c00
 8008130:	40023800 	.word	0x40023800
 8008134:	08011188 	.word	0x08011188
 8008138:	20000008 	.word	0x20000008
 800813c:	2000000c 	.word	0x2000000c

08008140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008144:	4b03      	ldr	r3, [pc, #12]	; (8008154 <HAL_RCC_GetHCLKFreq+0x14>)
 8008146:	681b      	ldr	r3, [r3, #0]
}
 8008148:	4618      	mov	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000008 	.word	0x20000008

08008158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800815c:	f7ff fff0 	bl	8008140 <HAL_RCC_GetHCLKFreq>
 8008160:	4602      	mov	r2, r0
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	0a9b      	lsrs	r3, r3, #10
 8008168:	f003 0307 	and.w	r3, r3, #7
 800816c:	4903      	ldr	r1, [pc, #12]	; (800817c <HAL_RCC_GetPCLK1Freq+0x24>)
 800816e:	5ccb      	ldrb	r3, [r1, r3]
 8008170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008174:	4618      	mov	r0, r3
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40023800 	.word	0x40023800
 800817c:	08011198 	.word	0x08011198

08008180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008184:	f7ff ffdc 	bl	8008140 <HAL_RCC_GetHCLKFreq>
 8008188:	4602      	mov	r2, r0
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	0b5b      	lsrs	r3, r3, #13
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	4903      	ldr	r1, [pc, #12]	; (80081a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008196:	5ccb      	ldrb	r3, [r1, r3]
 8008198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800819c:	4618      	mov	r0, r3
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40023800 	.word	0x40023800
 80081a4:	08011198 	.word	0x08011198

080081a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081ac:	b0ae      	sub	sp, #184	; 0xb8
 80081ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ce:	4bcb      	ldr	r3, [pc, #812]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 030c 	and.w	r3, r3, #12
 80081d6:	2b0c      	cmp	r3, #12
 80081d8:	f200 8206 	bhi.w	80085e8 <HAL_RCC_GetSysClockFreq+0x440>
 80081dc:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80081de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e2:	bf00      	nop
 80081e4:	08008219 	.word	0x08008219
 80081e8:	080085e9 	.word	0x080085e9
 80081ec:	080085e9 	.word	0x080085e9
 80081f0:	080085e9 	.word	0x080085e9
 80081f4:	08008221 	.word	0x08008221
 80081f8:	080085e9 	.word	0x080085e9
 80081fc:	080085e9 	.word	0x080085e9
 8008200:	080085e9 	.word	0x080085e9
 8008204:	08008229 	.word	0x08008229
 8008208:	080085e9 	.word	0x080085e9
 800820c:	080085e9 	.word	0x080085e9
 8008210:	080085e9 	.word	0x080085e9
 8008214:	08008419 	.word	0x08008419
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008218:	4bb9      	ldr	r3, [pc, #740]	; (8008500 <HAL_RCC_GetSysClockFreq+0x358>)
 800821a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800821e:	e1e7      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008220:	4bb8      	ldr	r3, [pc, #736]	; (8008504 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008226:	e1e3      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008228:	4bb4      	ldr	r3, [pc, #720]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008234:	4bb1      	ldr	r3, [pc, #708]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d071      	beq.n	8008324 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008240:	4bae      	ldr	r3, [pc, #696]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	099b      	lsrs	r3, r3, #6
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800824c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800825c:	2300      	movs	r3, #0
 800825e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008266:	4622      	mov	r2, r4
 8008268:	462b      	mov	r3, r5
 800826a:	f04f 0000 	mov.w	r0, #0
 800826e:	f04f 0100 	mov.w	r1, #0
 8008272:	0159      	lsls	r1, r3, #5
 8008274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008278:	0150      	lsls	r0, r2, #5
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4621      	mov	r1, r4
 8008280:	1a51      	subs	r1, r2, r1
 8008282:	6439      	str	r1, [r7, #64]	; 0x40
 8008284:	4629      	mov	r1, r5
 8008286:	eb63 0301 	sbc.w	r3, r3, r1
 800828a:	647b      	str	r3, [r7, #68]	; 0x44
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008298:	4649      	mov	r1, r9
 800829a:	018b      	lsls	r3, r1, #6
 800829c:	4641      	mov	r1, r8
 800829e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082a2:	4641      	mov	r1, r8
 80082a4:	018a      	lsls	r2, r1, #6
 80082a6:	4641      	mov	r1, r8
 80082a8:	1a51      	subs	r1, r2, r1
 80082aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80082ac:	4649      	mov	r1, r9
 80082ae:	eb63 0301 	sbc.w	r3, r3, r1
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80082c0:	4649      	mov	r1, r9
 80082c2:	00cb      	lsls	r3, r1, #3
 80082c4:	4641      	mov	r1, r8
 80082c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ca:	4641      	mov	r1, r8
 80082cc:	00ca      	lsls	r2, r1, #3
 80082ce:	4610      	mov	r0, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	4622      	mov	r2, r4
 80082d6:	189b      	adds	r3, r3, r2
 80082d8:	633b      	str	r3, [r7, #48]	; 0x30
 80082da:	462b      	mov	r3, r5
 80082dc:	460a      	mov	r2, r1
 80082de:	eb42 0303 	adc.w	r3, r2, r3
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80082f0:	4629      	mov	r1, r5
 80082f2:	024b      	lsls	r3, r1, #9
 80082f4:	4621      	mov	r1, r4
 80082f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082fa:	4621      	mov	r1, r4
 80082fc:	024a      	lsls	r2, r1, #9
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
 8008302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008306:	2200      	movs	r2, #0
 8008308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800830c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008310:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008314:	f7f8 fe36 	bl	8000f84 <__aeabi_uldivmod>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4613      	mov	r3, r2
 800831e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008322:	e067      	b.n	80083f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008324:	4b75      	ldr	r3, [pc, #468]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	099b      	lsrs	r3, r3, #6
 800832a:	2200      	movs	r2, #0
 800832c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008330:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833c:	67bb      	str	r3, [r7, #120]	; 0x78
 800833e:	2300      	movs	r3, #0
 8008340:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008342:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008346:	4622      	mov	r2, r4
 8008348:	462b      	mov	r3, r5
 800834a:	f04f 0000 	mov.w	r0, #0
 800834e:	f04f 0100 	mov.w	r1, #0
 8008352:	0159      	lsls	r1, r3, #5
 8008354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008358:	0150      	lsls	r0, r2, #5
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4621      	mov	r1, r4
 8008360:	1a51      	subs	r1, r2, r1
 8008362:	62b9      	str	r1, [r7, #40]	; 0x28
 8008364:	4629      	mov	r1, r5
 8008366:	eb63 0301 	sbc.w	r3, r3, r1
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008378:	4649      	mov	r1, r9
 800837a:	018b      	lsls	r3, r1, #6
 800837c:	4641      	mov	r1, r8
 800837e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008382:	4641      	mov	r1, r8
 8008384:	018a      	lsls	r2, r1, #6
 8008386:	4641      	mov	r1, r8
 8008388:	ebb2 0a01 	subs.w	sl, r2, r1
 800838c:	4649      	mov	r1, r9
 800838e:	eb63 0b01 	sbc.w	fp, r3, r1
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800839e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083a6:	4692      	mov	sl, r2
 80083a8:	469b      	mov	fp, r3
 80083aa:	4623      	mov	r3, r4
 80083ac:	eb1a 0303 	adds.w	r3, sl, r3
 80083b0:	623b      	str	r3, [r7, #32]
 80083b2:	462b      	mov	r3, r5
 80083b4:	eb4b 0303 	adc.w	r3, fp, r3
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80083c6:	4629      	mov	r1, r5
 80083c8:	028b      	lsls	r3, r1, #10
 80083ca:	4621      	mov	r1, r4
 80083cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083d0:	4621      	mov	r1, r4
 80083d2:	028a      	lsls	r2, r1, #10
 80083d4:	4610      	mov	r0, r2
 80083d6:	4619      	mov	r1, r3
 80083d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083dc:	2200      	movs	r2, #0
 80083de:	673b      	str	r3, [r7, #112]	; 0x70
 80083e0:	677a      	str	r2, [r7, #116]	; 0x74
 80083e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80083e6:	f7f8 fdcd 	bl	8000f84 <__aeabi_uldivmod>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4613      	mov	r3, r2
 80083f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80083f4:	4b41      	ldr	r3, [pc, #260]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	3301      	adds	r3, #1
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800840a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008416:	e0eb      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008418:	4b38      	ldr	r3, [pc, #224]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008424:	4b35      	ldr	r3, [pc, #212]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d06b      	beq.n	8008508 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008430:	4b32      	ldr	r3, [pc, #200]	; (80084fc <HAL_RCC_GetSysClockFreq+0x354>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	099b      	lsrs	r3, r3, #6
 8008436:	2200      	movs	r2, #0
 8008438:	66bb      	str	r3, [r7, #104]	; 0x68
 800843a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800843c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800843e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008442:	663b      	str	r3, [r7, #96]	; 0x60
 8008444:	2300      	movs	r3, #0
 8008446:	667b      	str	r3, [r7, #100]	; 0x64
 8008448:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800844c:	4622      	mov	r2, r4
 800844e:	462b      	mov	r3, r5
 8008450:	f04f 0000 	mov.w	r0, #0
 8008454:	f04f 0100 	mov.w	r1, #0
 8008458:	0159      	lsls	r1, r3, #5
 800845a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800845e:	0150      	lsls	r0, r2, #5
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4621      	mov	r1, r4
 8008466:	1a51      	subs	r1, r2, r1
 8008468:	61b9      	str	r1, [r7, #24]
 800846a:	4629      	mov	r1, r5
 800846c:	eb63 0301 	sbc.w	r3, r3, r1
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800847e:	4659      	mov	r1, fp
 8008480:	018b      	lsls	r3, r1, #6
 8008482:	4651      	mov	r1, sl
 8008484:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008488:	4651      	mov	r1, sl
 800848a:	018a      	lsls	r2, r1, #6
 800848c:	4651      	mov	r1, sl
 800848e:	ebb2 0801 	subs.w	r8, r2, r1
 8008492:	4659      	mov	r1, fp
 8008494:	eb63 0901 	sbc.w	r9, r3, r1
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084ac:	4690      	mov	r8, r2
 80084ae:	4699      	mov	r9, r3
 80084b0:	4623      	mov	r3, r4
 80084b2:	eb18 0303 	adds.w	r3, r8, r3
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	462b      	mov	r3, r5
 80084ba:	eb49 0303 	adc.w	r3, r9, r3
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80084cc:	4629      	mov	r1, r5
 80084ce:	024b      	lsls	r3, r1, #9
 80084d0:	4621      	mov	r1, r4
 80084d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80084d6:	4621      	mov	r1, r4
 80084d8:	024a      	lsls	r2, r1, #9
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084e2:	2200      	movs	r2, #0
 80084e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80084e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084ec:	f7f8 fd4a 	bl	8000f84 <__aeabi_uldivmod>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4613      	mov	r3, r2
 80084f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084fa:	e065      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x420>
 80084fc:	40023800 	.word	0x40023800
 8008500:	00f42400 	.word	0x00f42400
 8008504:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008508:	4b3d      	ldr	r3, [pc, #244]	; (8008600 <HAL_RCC_GetSysClockFreq+0x458>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	099b      	lsrs	r3, r3, #6
 800850e:	2200      	movs	r2, #0
 8008510:	4618      	mov	r0, r3
 8008512:	4611      	mov	r1, r2
 8008514:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008518:	653b      	str	r3, [r7, #80]	; 0x50
 800851a:	2300      	movs	r3, #0
 800851c:	657b      	str	r3, [r7, #84]	; 0x54
 800851e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008522:	4642      	mov	r2, r8
 8008524:	464b      	mov	r3, r9
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	0159      	lsls	r1, r3, #5
 8008530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008534:	0150      	lsls	r0, r2, #5
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4641      	mov	r1, r8
 800853c:	1a51      	subs	r1, r2, r1
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	4649      	mov	r1, r9
 8008542:	eb63 0301 	sbc.w	r3, r3, r1
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008554:	4659      	mov	r1, fp
 8008556:	018b      	lsls	r3, r1, #6
 8008558:	4651      	mov	r1, sl
 800855a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800855e:	4651      	mov	r1, sl
 8008560:	018a      	lsls	r2, r1, #6
 8008562:	4651      	mov	r1, sl
 8008564:	1a54      	subs	r4, r2, r1
 8008566:	4659      	mov	r1, fp
 8008568:	eb63 0501 	sbc.w	r5, r3, r1
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	00eb      	lsls	r3, r5, #3
 8008576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800857a:	00e2      	lsls	r2, r4, #3
 800857c:	4614      	mov	r4, r2
 800857e:	461d      	mov	r5, r3
 8008580:	4643      	mov	r3, r8
 8008582:	18e3      	adds	r3, r4, r3
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	464b      	mov	r3, r9
 8008588:	eb45 0303 	adc.w	r3, r5, r3
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800859a:	4629      	mov	r1, r5
 800859c:	028b      	lsls	r3, r1, #10
 800859e:	4621      	mov	r1, r4
 80085a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085a4:	4621      	mov	r1, r4
 80085a6:	028a      	lsls	r2, r1, #10
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085b0:	2200      	movs	r2, #0
 80085b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80085b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085ba:	f7f8 fce3 	bl	8000f84 <__aeabi_uldivmod>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4613      	mov	r3, r2
 80085c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80085c8:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <HAL_RCC_GetSysClockFreq+0x458>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	0f1b      	lsrs	r3, r3, #28
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80085d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80085e6:	e003      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <HAL_RCC_GetSysClockFreq+0x45c>)
 80085ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80085ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	37b8      	adds	r7, #184	; 0xb8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085fe:	bf00      	nop
 8008600:	40023800 	.word	0x40023800
 8008604:	00f42400 	.word	0x00f42400

08008608 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e28d      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 8083 	beq.w	800872e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008628:	4b94      	ldr	r3, [pc, #592]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 030c 	and.w	r3, r3, #12
 8008630:	2b04      	cmp	r3, #4
 8008632:	d019      	beq.n	8008668 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008634:	4b91      	ldr	r3, [pc, #580]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800863c:	2b08      	cmp	r3, #8
 800863e:	d106      	bne.n	800864e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008640:	4b8e      	ldr	r3, [pc, #568]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800864c:	d00c      	beq.n	8008668 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800864e:	4b8b      	ldr	r3, [pc, #556]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008656:	2b0c      	cmp	r3, #12
 8008658:	d112      	bne.n	8008680 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800865a:	4b88      	ldr	r3, [pc, #544]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008666:	d10b      	bne.n	8008680 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008668:	4b84      	ldr	r3, [pc, #528]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d05b      	beq.n	800872c <HAL_RCC_OscConfig+0x124>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d157      	bne.n	800872c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e25a      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008688:	d106      	bne.n	8008698 <HAL_RCC_OscConfig+0x90>
 800868a:	4b7c      	ldr	r3, [pc, #496]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a7b      	ldr	r2, [pc, #492]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e01d      	b.n	80086d4 <HAL_RCC_OscConfig+0xcc>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086a0:	d10c      	bne.n	80086bc <HAL_RCC_OscConfig+0xb4>
 80086a2:	4b76      	ldr	r3, [pc, #472]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a75      	ldr	r2, [pc, #468]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	4b73      	ldr	r3, [pc, #460]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a72      	ldr	r2, [pc, #456]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	e00b      	b.n	80086d4 <HAL_RCC_OscConfig+0xcc>
 80086bc:	4b6f      	ldr	r3, [pc, #444]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a6e      	ldr	r2, [pc, #440]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	4b6c      	ldr	r3, [pc, #432]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a6b      	ldr	r2, [pc, #428]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d013      	beq.n	8008704 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086dc:	f7fc ff44 	bl	8005568 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e4:	f7fc ff40 	bl	8005568 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b64      	cmp	r3, #100	; 0x64
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e21f      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086f6:	4b61      	ldr	r3, [pc, #388]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f0      	beq.n	80086e4 <HAL_RCC_OscConfig+0xdc>
 8008702:	e014      	b.n	800872e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008704:	f7fc ff30 	bl	8005568 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800870c:	f7fc ff2c 	bl	8005568 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b64      	cmp	r3, #100	; 0x64
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e20b      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800871e:	4b57      	ldr	r3, [pc, #348]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f0      	bne.n	800870c <HAL_RCC_OscConfig+0x104>
 800872a:	e000      	b.n	800872e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d06f      	beq.n	800881a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800873a:	4b50      	ldr	r3, [pc, #320]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b00      	cmp	r3, #0
 8008744:	d017      	beq.n	8008776 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008746:	4b4d      	ldr	r3, [pc, #308]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800874e:	2b08      	cmp	r3, #8
 8008750:	d105      	bne.n	800875e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008752:	4b4a      	ldr	r3, [pc, #296]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800875e:	4b47      	ldr	r3, [pc, #284]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008766:	2b0c      	cmp	r3, #12
 8008768:	d11c      	bne.n	80087a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800876a:	4b44      	ldr	r3, [pc, #272]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d116      	bne.n	80087a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008776:	4b41      	ldr	r3, [pc, #260]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <HAL_RCC_OscConfig+0x186>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d001      	beq.n	800878e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e1d3      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800878e:	4b3b      	ldr	r3, [pc, #236]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4937      	ldr	r1, [pc, #220]	; (800887c <HAL_RCC_OscConfig+0x274>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087a2:	e03a      	b.n	800881a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d020      	beq.n	80087ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087ac:	4b34      	ldr	r3, [pc, #208]	; (8008880 <HAL_RCC_OscConfig+0x278>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b2:	f7fc fed9 	bl	8005568 <HAL_GetTick>
 80087b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087ba:	f7fc fed5 	bl	8005568 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e1b4      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087cc:	4b2b      	ldr	r3, [pc, #172]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0f0      	beq.n	80087ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d8:	4b28      	ldr	r3, [pc, #160]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4925      	ldr	r1, [pc, #148]	; (800887c <HAL_RCC_OscConfig+0x274>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	600b      	str	r3, [r1, #0]
 80087ec:	e015      	b.n	800881a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ee:	4b24      	ldr	r3, [pc, #144]	; (8008880 <HAL_RCC_OscConfig+0x278>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fc feb8 	bl	8005568 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087fc:	f7fc feb4 	bl	8005568 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e193      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800880e:	4b1b      	ldr	r3, [pc, #108]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f0      	bne.n	80087fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d036      	beq.n	8008894 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d016      	beq.n	800885c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800882e:	4b15      	ldr	r3, [pc, #84]	; (8008884 <HAL_RCC_OscConfig+0x27c>)
 8008830:	2201      	movs	r2, #1
 8008832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008834:	f7fc fe98 	bl	8005568 <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800883c:	f7fc fe94 	bl	8005568 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e173      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <HAL_RCC_OscConfig+0x274>)
 8008850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0f0      	beq.n	800883c <HAL_RCC_OscConfig+0x234>
 800885a:	e01b      	b.n	8008894 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <HAL_RCC_OscConfig+0x27c>)
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008862:	f7fc fe81 	bl	8005568 <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008868:	e00e      	b.n	8008888 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800886a:	f7fc fe7d 	bl	8005568 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d907      	bls.n	8008888 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e15c      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
 800887c:	40023800 	.word	0x40023800
 8008880:	42470000 	.word	0x42470000
 8008884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008888:	4b8a      	ldr	r3, [pc, #552]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800888a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1ea      	bne.n	800886a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8097 	beq.w	80089d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088a6:	4b83      	ldr	r3, [pc, #524]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10f      	bne.n	80088d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088b2:	2300      	movs	r3, #0
 80088b4:	60bb      	str	r3, [r7, #8]
 80088b6:	4b7f      	ldr	r3, [pc, #508]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	4a7e      	ldr	r2, [pc, #504]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80088bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c0:	6413      	str	r3, [r2, #64]	; 0x40
 80088c2:	4b7c      	ldr	r3, [pc, #496]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ce:	2301      	movs	r3, #1
 80088d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d2:	4b79      	ldr	r3, [pc, #484]	; (8008ab8 <HAL_RCC_OscConfig+0x4b0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d118      	bne.n	8008910 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088de:	4b76      	ldr	r3, [pc, #472]	; (8008ab8 <HAL_RCC_OscConfig+0x4b0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a75      	ldr	r2, [pc, #468]	; (8008ab8 <HAL_RCC_OscConfig+0x4b0>)
 80088e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ea:	f7fc fe3d 	bl	8005568 <HAL_GetTick>
 80088ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088f0:	e008      	b.n	8008904 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088f2:	f7fc fe39 	bl	8005568 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e118      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008904:	4b6c      	ldr	r3, [pc, #432]	; (8008ab8 <HAL_RCC_OscConfig+0x4b0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0f0      	beq.n	80088f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d106      	bne.n	8008926 <HAL_RCC_OscConfig+0x31e>
 8008918:	4b66      	ldr	r3, [pc, #408]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	4a65      	ldr	r2, [pc, #404]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	6713      	str	r3, [r2, #112]	; 0x70
 8008924:	e01c      	b.n	8008960 <HAL_RCC_OscConfig+0x358>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	2b05      	cmp	r3, #5
 800892c:	d10c      	bne.n	8008948 <HAL_RCC_OscConfig+0x340>
 800892e:	4b61      	ldr	r3, [pc, #388]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	4a60      	ldr	r2, [pc, #384]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008934:	f043 0304 	orr.w	r3, r3, #4
 8008938:	6713      	str	r3, [r2, #112]	; 0x70
 800893a:	4b5e      	ldr	r3, [pc, #376]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	4a5d      	ldr	r2, [pc, #372]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	6713      	str	r3, [r2, #112]	; 0x70
 8008946:	e00b      	b.n	8008960 <HAL_RCC_OscConfig+0x358>
 8008948:	4b5a      	ldr	r3, [pc, #360]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	4a59      	ldr	r2, [pc, #356]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800894e:	f023 0301 	bic.w	r3, r3, #1
 8008952:	6713      	str	r3, [r2, #112]	; 0x70
 8008954:	4b57      	ldr	r3, [pc, #348]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	4a56      	ldr	r2, [pc, #344]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 800895a:	f023 0304 	bic.w	r3, r3, #4
 800895e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d015      	beq.n	8008994 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008968:	f7fc fdfe 	bl	8005568 <HAL_GetTick>
 800896c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800896e:	e00a      	b.n	8008986 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008970:	f7fc fdfa 	bl	8005568 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	f241 3288 	movw	r2, #5000	; 0x1388
 800897e:	4293      	cmp	r3, r2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e0d7      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008986:	4b4b      	ldr	r3, [pc, #300]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0ee      	beq.n	8008970 <HAL_RCC_OscConfig+0x368>
 8008992:	e014      	b.n	80089be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008994:	f7fc fde8 	bl	8005568 <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800899a:	e00a      	b.n	80089b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800899c:	f7fc fde4 	bl	8005568 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e0c1      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089b2:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80089b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1ee      	bne.n	800899c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d105      	bne.n	80089d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089c4:	4b3b      	ldr	r3, [pc, #236]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80089c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c8:	4a3a      	ldr	r2, [pc, #232]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80089ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80ad 	beq.w	8008b34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089da:	4b36      	ldr	r3, [pc, #216]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 030c 	and.w	r3, r3, #12
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d060      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d145      	bne.n	8008a7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ee:	4b33      	ldr	r3, [pc, #204]	; (8008abc <HAL_RCC_OscConfig+0x4b4>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fc fdb8 	bl	8005568 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fc:	f7fc fdb4 	bl	8005568 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e093      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a0e:	4b29      	ldr	r3, [pc, #164]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69da      	ldr	r2, [r3, #28]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	019b      	lsls	r3, r3, #6
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	3b01      	subs	r3, #1
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	061b      	lsls	r3, r3, #24
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	071b      	lsls	r3, r3, #28
 8008a46:	491b      	ldr	r1, [pc, #108]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a4c:	4b1b      	ldr	r3, [pc, #108]	; (8008abc <HAL_RCC_OscConfig+0x4b4>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a52:	f7fc fd89 	bl	8005568 <HAL_GetTick>
 8008a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a5a:	f7fc fd85 	bl	8005568 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e064      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCC_OscConfig+0x452>
 8008a78:	e05c      	b.n	8008b34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7a:	4b10      	ldr	r3, [pc, #64]	; (8008abc <HAL_RCC_OscConfig+0x4b4>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a80:	f7fc fd72 	bl	8005568 <HAL_GetTick>
 8008a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a86:	e008      	b.n	8008a9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a88:	f7fc fd6e 	bl	8005568 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e04d      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <HAL_RCC_OscConfig+0x4ac>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1f0      	bne.n	8008a88 <HAL_RCC_OscConfig+0x480>
 8008aa6:	e045      	b.n	8008b34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d107      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e040      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40007000 	.word	0x40007000
 8008abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ac0:	4b1f      	ldr	r3, [pc, #124]	; (8008b40 <HAL_RCC_OscConfig+0x538>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d030      	beq.n	8008b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d129      	bne.n	8008b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d122      	bne.n	8008b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008af0:	4013      	ands	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d119      	bne.n	8008b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	085b      	lsrs	r3, r3, #1
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d10f      	bne.n	8008b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d107      	bne.n	8008b30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d001      	beq.n	8008b34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	40023800 	.word	0x40023800

08008b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e03f      	b.n	8008bd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fb ff52 	bl	8004a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2224      	movs	r2, #36	; 0x24
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f87b 	bl	8009c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b082      	sub	sp, #8
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e021      	b.n	8008c34 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2224      	movs	r2, #36	; 0x24
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c06:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7fc f861 	bl	8004cd0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d17c      	bne.n	8008d56 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <HAL_UART_Transmit+0x2c>
 8008c62:	88fb      	ldrh	r3, [r7, #6]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e075      	b.n	8008d58 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d101      	bne.n	8008c7a <HAL_UART_Transmit+0x3e>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e06e      	b.n	8008d58 <HAL_UART_Transmit+0x11c>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2221      	movs	r2, #33	; 0x21
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c90:	f7fc fc6a 	bl	8005568 <HAL_GetTick>
 8008c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	88fa      	ldrh	r2, [r7, #6]
 8008ca0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008caa:	d108      	bne.n	8008cbe <HAL_UART_Transmit+0x82>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d104      	bne.n	8008cbe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e003      	b.n	8008cc6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cce:	e02a      	b.n	8008d26 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2180      	movs	r1, #128	; 0x80
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fd03 	bl	80096e6 <UART_WaitOnFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e036      	b.n	8008d58 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10b      	bne.n	8008d08 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cfe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	3302      	adds	r3, #2
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e007      	b.n	8008d18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	3301      	adds	r3, #1
 8008d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1cf      	bne.n	8008cd0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2200      	movs	r2, #0
 8008d38:	2140      	movs	r1, #64	; 0x40
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fcd3 	bl	80096e6 <UART_WaitOnFlagUntilTimeout>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e006      	b.n	8008d58 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e000      	b.n	8008d58 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
  }
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08c      	sub	sp, #48	; 0x30
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d165      	bne.n	8008e46 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <HAL_UART_Transmit_DMA+0x26>
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e05e      	b.n	8008e48 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <HAL_UART_Transmit_DMA+0x38>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e057      	b.n	8008e48 <HAL_UART_Transmit_DMA+0xe8>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	88fa      	ldrh	r2, [r7, #6]
 8008daa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2221      	movs	r2, #33	; 0x21
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc4:	4a22      	ldr	r2, [pc, #136]	; (8008e50 <HAL_UART_Transmit_DMA+0xf0>)
 8008dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dcc:	4a21      	ldr	r2, [pc, #132]	; (8008e54 <HAL_UART_Transmit_DMA+0xf4>)
 8008dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd4:	4a20      	ldr	r2, [pc, #128]	; (8008e58 <HAL_UART_Transmit_DMA+0xf8>)
 8008dd6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	2200      	movs	r2, #0
 8008dde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008de0:	f107 0308 	add.w	r3, r7, #8
 8008de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	6819      	ldr	r1, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3304      	adds	r3, #4
 8008df4:	461a      	mov	r2, r3
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	f7fd fa46 	bl	8006288 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e04:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3314      	adds	r3, #20
 8008e14:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e30:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	6a39      	ldr	r1, [r7, #32]
 8008e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e5      	bne.n	8008e0e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e000      	b.n	8008e48 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008e46:	2302      	movs	r3, #2
  }
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3730      	adds	r7, #48	; 0x30
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	08009441 	.word	0x08009441
 8008e54:	080094db 	.word	0x080094db
 8008e58:	08009653 	.word	0x08009653

08008e5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d11d      	bne.n	8008eb2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <HAL_UART_Receive_DMA+0x26>
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e016      	b.n	8008eb4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_UART_Receive_DMA+0x38>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e00f      	b.n	8008eb4 <HAL_UART_Receive_DMA+0x58>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fc8b 	bl	80097c4 <UART_Start_Receive_DMA>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	e000      	b.n	8008eb4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008eb2:	2302      	movs	r3, #2
  }
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b0ba      	sub	sp, #232	; 0xe8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10f      	bne.n	8008f22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <HAL_UART_IRQHandler+0x66>
 8008f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fdf7 	bl	8009b0e <UART_Receive_IT>
      return;
 8008f20:	e256      	b.n	80093d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 80de 	beq.w	80090e8 <HAL_UART_IRQHandler+0x22c>
 8008f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80d1 	beq.w	80090e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <HAL_UART_IRQHandler+0xae>
 8008f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d005      	beq.n	8008f6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00b      	beq.n	8008f8e <HAL_UART_IRQHandler+0xd2>
 8008f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	f043 0202 	orr.w	r2, r3, #2
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xf6>
 8008f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	f043 0204 	orr.w	r2, r3, #4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d011      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x126>
 8008fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f043 0208 	orr.w	r2, r3, #8
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 81ed 	beq.w	80093c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <HAL_UART_IRQHandler+0x14e>
 8008ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fd82 	bl	8009b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <HAL_UART_IRQHandler+0x17a>
 800902e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d04f      	beq.n	80090d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fc8a 	bl	8009950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009046:	2b40      	cmp	r3, #64	; 0x40
 8009048:	d141      	bne.n	80090ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3314      	adds	r3, #20
 8009072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009076:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800907a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800908e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1d9      	bne.n	800904a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	4a7d      	ldr	r2, [pc, #500]	; (8009298 <HAL_UART_IRQHandler+0x3dc>)
 80090a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fd f9b4 	bl	8006418 <HAL_DMA_Abort_IT>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d016      	beq.n	80090e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c4:	e00e      	b.n	80090e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f9a4 	bl	8009414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090cc:	e00a      	b.n	80090e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9a0 	bl	8009414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d4:	e006      	b.n	80090e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f99c 	bl	8009414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80090e2:	e170      	b.n	80093c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e4:	bf00      	nop
    return;
 80090e6:	e16e      	b.n	80093c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	f040 814a 	bne.w	8009386 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80090f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f6:	f003 0310 	and.w	r3, r3, #16
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 8143 	beq.w	8009386 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 813c 	beq.w	8009386 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800910e:	2300      	movs	r3, #0
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	60bb      	str	r3, [r7, #8]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	60bb      	str	r3, [r7, #8]
 8009122:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	f040 80b4 	bne.w	800929c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8140 	beq.w	80093ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800914e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009152:	429a      	cmp	r2, r3
 8009154:	f080 8139 	bcs.w	80093ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800915e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916a:	f000 8088 	beq.w	800927e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	330c      	adds	r3, #12
 8009174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800918c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	330c      	adds	r3, #12
 8009196:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800919a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800919e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1d9      	bne.n	800916e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091cc:	f023 0301 	bic.w	r3, r3, #1
 80091d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3314      	adds	r3, #20
 80091da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80091f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e1      	bne.n	80091ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3314      	adds	r3, #20
 80091fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3314      	adds	r3, #20
 8009216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800921a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800921c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009220:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e3      	bne.n	80091f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	330c      	adds	r3, #12
 8009242:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800924c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800924e:	f023 0310 	bic.w	r3, r3, #16
 8009252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	330c      	adds	r3, #12
 800925c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009260:	65ba      	str	r2, [r7, #88]	; 0x58
 8009262:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009266:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800926e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e3      	bne.n	800923c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	4618      	mov	r0, r3
 800927a:	f7fd f85d 	bl	8006338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009286:	b29b      	uxth	r3, r3
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	b29b      	uxth	r3, r3
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8ca 	bl	8009428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009294:	e099      	b.n	80093ca <HAL_UART_IRQHandler+0x50e>
 8009296:	bf00      	nop
 8009298:	08009a17 	.word	0x08009a17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 808b 	beq.w	80093ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8086 	beq.w	80093ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80092e6:	647a      	str	r2, [r7, #68]	; 0x44
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e3      	bne.n	80092c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3314      	adds	r3, #20
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	623b      	str	r3, [r7, #32]
   return(result);
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	f023 0301 	bic.w	r3, r3, #1
 8009310:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3314      	adds	r3, #20
 800931a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800931e:	633a      	str	r2, [r7, #48]	; 0x30
 8009320:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e3      	bne.n	80092fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2220      	movs	r2, #32
 8009336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	330c      	adds	r3, #12
 8009346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0310 	bic.w	r3, r3, #16
 8009356:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	330c      	adds	r3, #12
 8009360:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009364:	61fa      	str	r2, [r7, #28]
 8009366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	69b9      	ldr	r1, [r7, #24]
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	617b      	str	r3, [r7, #20]
   return(result);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e3      	bne.n	8009340 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f852 	bl	8009428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009384:	e023      	b.n	80093ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <HAL_UART_IRQHandler+0x4ea>
 8009392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fb4d 	bl	8009a3e <UART_Transmit_IT>
    return;
 80093a4:	e014      	b.n	80093d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00e      	beq.n	80093d0 <HAL_UART_IRQHandler+0x514>
 80093b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fb8d 	bl	8009ade <UART_EndTransmit_IT>
    return;
 80093c4:	e004      	b.n	80093d0 <HAL_UART_IRQHandler+0x514>
    return;
 80093c6:	bf00      	nop
 80093c8:	e002      	b.n	80093d0 <HAL_UART_IRQHandler+0x514>
      return;
 80093ca:	bf00      	nop
 80093cc:	e000      	b.n	80093d0 <HAL_UART_IRQHandler+0x514>
      return;
 80093ce:	bf00      	nop
  }
}
 80093d0:	37e8      	adds	r7, #232	; 0xe8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop

080093d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b090      	sub	sp, #64	; 0x40
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009458:	2b00      	cmp	r3, #0
 800945a:	d137      	bne.n	80094cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945e:	2200      	movs	r2, #0
 8009460:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3314      	adds	r3, #20
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	623b      	str	r3, [r7, #32]
   return(result);
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009478:	63bb      	str	r3, [r7, #56]	; 0x38
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3314      	adds	r3, #20
 8009480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009482:	633a      	str	r2, [r7, #48]	; 0x30
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e5      	bne.n	8009462 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	330c      	adds	r3, #12
 800949c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b6:	61fa      	str	r2, [r7, #28]
 80094b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	69b9      	ldr	r1, [r7, #24]
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	617b      	str	r3, [r7, #20]
   return(result);
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e5      	bne.n	8009496 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094ca:	e002      	b.n	80094d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80094cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80094ce:	f7ff ff83 	bl	80093d8 <HAL_UART_TxCpltCallback>
}
 80094d2:	bf00      	nop
 80094d4:	3740      	adds	r7, #64	; 0x40
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff ff7f 	bl	80093ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b09c      	sub	sp, #112	; 0x70
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950e:	2b00      	cmp	r3, #0
 8009510:	d172      	bne.n	80095f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009514:	2200      	movs	r2, #0
 8009516:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	330c      	adds	r3, #12
 800951e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800952a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800952e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	330c      	adds	r3, #12
 8009536:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009538:	65ba      	str	r2, [r7, #88]	; 0x58
 800953a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800953e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e5      	bne.n	8009518 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3314      	adds	r3, #20
 8009552:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	667b      	str	r3, [r7, #100]	; 0x64
 8009564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3314      	adds	r3, #20
 800956a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800956c:	647a      	str	r2, [r7, #68]	; 0x44
 800956e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800957a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e5      	bne.n	800954c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3314      	adds	r3, #20
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	623b      	str	r3, [r7, #32]
   return(result);
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009596:	663b      	str	r3, [r7, #96]	; 0x60
 8009598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3314      	adds	r3, #20
 800959e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095a0:	633a      	str	r2, [r7, #48]	; 0x30
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e5      	bne.n	8009580 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d119      	bne.n	80095f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	330c      	adds	r3, #12
 80095ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095e4:	61fa      	str	r2, [r7, #28]
 80095e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69b9      	ldr	r1, [r7, #24]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	617b      	str	r3, [r7, #20]
   return(result);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e5      	bne.n	80095c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d106      	bne.n	800960e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009602:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009604:	4619      	mov	r1, r3
 8009606:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009608:	f7ff ff0e 	bl	8009428 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800960c:	e002      	b.n	8009614 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800960e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009610:	f7fb fd04 	bl	800501c <HAL_UART_RxCpltCallback>
}
 8009614:	bf00      	nop
 8009616:	3770      	adds	r7, #112	; 0x70
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009628:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	2b01      	cmp	r3, #1
 8009630:	d108      	bne.n	8009644 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009636:	085b      	lsrs	r3, r3, #1
 8009638:	b29b      	uxth	r3, r3
 800963a:	4619      	mov	r1, r3
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff fef3 	bl	8009428 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009642:	e002      	b.n	800964a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fedb 	bl	8009400 <HAL_UART_RxHalfCpltCallback>
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966e:	2b80      	cmp	r3, #128	; 0x80
 8009670:	bf0c      	ite	eq
 8009672:	2301      	moveq	r3, #1
 8009674:	2300      	movne	r3, #0
 8009676:	b2db      	uxtb	r3, r3
 8009678:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b21      	cmp	r3, #33	; 0x21
 8009684:	d108      	bne.n	8009698 <UART_DMAError+0x46>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2200      	movs	r2, #0
 8009690:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009692:	68b8      	ldr	r0, [r7, #8]
 8009694:	f000 f934 	bl	8009900 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b40      	cmp	r3, #64	; 0x40
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b22      	cmp	r3, #34	; 0x22
 80096b8:	d108      	bne.n	80096cc <UART_DMAError+0x7a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80096c6:	68b8      	ldr	r0, [r7, #8]
 80096c8:	f000 f942 	bl	8009950 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	f043 0210 	orr.w	r2, r3, #16
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096d8:	68b8      	ldr	r0, [r7, #8]
 80096da:	f7ff fe9b 	bl	8009414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b090      	sub	sp, #64	; 0x40
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	4613      	mov	r3, r2
 80096f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f6:	e050      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d04c      	beq.n	800979a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <UART_WaitOnFlagUntilTimeout+0x30>
 8009706:	f7fb ff2f 	bl	8005568 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009712:	429a      	cmp	r2, r3
 8009714:	d241      	bcs.n	800979a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	330c      	adds	r3, #12
 800971c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	330c      	adds	r3, #12
 8009734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009736:	637a      	str	r2, [r7, #52]	; 0x34
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800973c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e5      	bne.n	8009716 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3314      	adds	r3, #20
 8009750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	613b      	str	r3, [r7, #16]
   return(result);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f023 0301 	bic.w	r3, r3, #1
 8009760:	63bb      	str	r3, [r7, #56]	; 0x38
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3314      	adds	r3, #20
 8009768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800976a:	623a      	str	r2, [r7, #32]
 800976c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	69f9      	ldr	r1, [r7, #28]
 8009770:	6a3a      	ldr	r2, [r7, #32]
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	61bb      	str	r3, [r7, #24]
   return(result);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e5      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e00f      	b.n	80097ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4013      	ands	r3, r2
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	bf0c      	ite	eq
 80097aa:	2301      	moveq	r3, #1
 80097ac:	2300      	movne	r3, #0
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d09f      	beq.n	80096f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3740      	adds	r7, #64	; 0x40
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b098      	sub	sp, #96	; 0x60
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	88fa      	ldrh	r2, [r7, #6]
 80097dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2222      	movs	r2, #34	; 0x22
 80097e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	4a40      	ldr	r2, [pc, #256]	; (80098f4 <UART_Start_Receive_DMA+0x130>)
 80097f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	4a3f      	ldr	r2, [pc, #252]	; (80098f8 <UART_Start_Receive_DMA+0x134>)
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	4a3e      	ldr	r2, [pc, #248]	; (80098fc <UART_Start_Receive_DMA+0x138>)
 8009802:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	2200      	movs	r2, #0
 800980a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	88fb      	ldrh	r3, [r7, #6]
 8009824:	f7fc fd30 	bl	8006288 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009828:	2300      	movs	r3, #0
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d019      	beq.n	8009882 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	330c      	adds	r3, #12
 8009854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800985e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009864:	65bb      	str	r3, [r7, #88]	; 0x58
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	330c      	adds	r3, #12
 800986c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800986e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800987c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e5      	bne.n	800984e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3314      	adds	r3, #20
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	f043 0301 	orr.w	r3, r3, #1
 8009898:	657b      	str	r3, [r7, #84]	; 0x54
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3314      	adds	r3, #20
 80098a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e5      	bne.n	8009882 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3314      	adds	r3, #20
 80098bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	617b      	str	r3, [r7, #20]
   return(result);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098cc:	653b      	str	r3, [r7, #80]	; 0x50
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3314      	adds	r3, #20
 80098d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098d6:	627a      	str	r2, [r7, #36]	; 0x24
 80098d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6a39      	ldr	r1, [r7, #32]
 80098dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e5      	bne.n	80098b6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3760      	adds	r7, #96	; 0x60
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	080094f7 	.word	0x080094f7
 80098f8:	0800961d 	.word	0x0800961d
 80098fc:	08009653 	.word	0x08009653

08009900 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b089      	sub	sp, #36	; 0x24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	330c      	adds	r3, #12
 800990e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	60bb      	str	r3, [r7, #8]
   return(result);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	330c      	adds	r3, #12
 8009926:	69fa      	ldr	r2, [r7, #28]
 8009928:	61ba      	str	r2, [r7, #24]
 800992a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6979      	ldr	r1, [r7, #20]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	613b      	str	r3, [r7, #16]
   return(result);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e5      	bne.n	8009908 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009944:	bf00      	nop
 8009946:	3724      	adds	r7, #36	; 0x24
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b095      	sub	sp, #84	; 0x54
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	330c      	adds	r3, #12
 800995e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800996e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	330c      	adds	r3, #12
 8009976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009978:	643a      	str	r2, [r7, #64]	; 0x40
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800997e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e5      	bne.n	8009958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3314      	adds	r3, #20
 8009992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	61fb      	str	r3, [r7, #28]
   return(result);
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3314      	adds	r3, #20
 80099aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e5      	bne.n	800998c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d119      	bne.n	80099fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	330c      	adds	r3, #12
 80099ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	f023 0310 	bic.w	r3, r3, #16
 80099de:	647b      	str	r3, [r7, #68]	; 0x44
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099e8:	61ba      	str	r2, [r7, #24]
 80099ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6979      	ldr	r1, [r7, #20]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	613b      	str	r3, [r7, #16]
   return(result);
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e5      	bne.n	80099c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a0a:	bf00      	nop
 8009a0c:	3754      	adds	r7, #84	; 0x54
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff fcef 	bl	8009414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b21      	cmp	r3, #33	; 0x21
 8009a50:	d13e      	bne.n	8009ad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5a:	d114      	bne.n	8009a86 <UART_Transmit_IT+0x48>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d110      	bne.n	8009a86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	1c9a      	adds	r2, r3, #2
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	621a      	str	r2, [r3, #32]
 8009a84:	e008      	b.n	8009a98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	1c59      	adds	r1, r3, #1
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6211      	str	r1, [r2, #32]
 8009a90:	781a      	ldrb	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10f      	bne.n	8009acc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	e000      	b.n	8009ad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ad0:	2302      	movs	r3, #2
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff fc6a 	bl	80093d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b08c      	sub	sp, #48	; 0x30
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b22      	cmp	r3, #34	; 0x22
 8009b20:	f040 80ab 	bne.w	8009c7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b2c:	d117      	bne.n	8009b5e <UART_Receive_IT+0x50>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d113      	bne.n	8009b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	1c9a      	adds	r2, r3, #2
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8009b5c:	e026      	b.n	8009bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b70:	d007      	beq.n	8009b82 <UART_Receive_IT+0x74>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <UART_Receive_IT+0x82>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e008      	b.n	8009ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d15a      	bne.n	8009c76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 0220 	bic.w	r2, r2, #32
 8009bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68da      	ldr	r2, [r3, #12]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695a      	ldr	r2, [r3, #20]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0201 	bic.w	r2, r2, #1
 8009bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d135      	bne.n	8009c6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	613b      	str	r3, [r7, #16]
   return(result);
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f023 0310 	bic.w	r3, r3, #16
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	330c      	adds	r3, #12
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	623a      	str	r2, [r7, #32]
 8009c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	69f9      	ldr	r1, [r7, #28]
 8009c2c:	6a3a      	ldr	r2, [r7, #32]
 8009c2e:	e841 2300 	strex	r3, r2, [r1]
 8009c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1e5      	bne.n	8009c06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	2b10      	cmp	r3, #16
 8009c46:	d10a      	bne.n	8009c5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff fbdf 	bl	8009428 <HAL_UARTEx_RxEventCallback>
 8009c6a:	e002      	b.n	8009c72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7fb f9d5 	bl	800501c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	e002      	b.n	8009c7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e000      	b.n	8009c7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c7a:	2302      	movs	r3, #2
  }
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3730      	adds	r7, #48	; 0x30
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c88:	b0c0      	sub	sp, #256	; 0x100
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	68d9      	ldr	r1, [r3, #12]
 8009ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	ea40 0301 	orr.w	r3, r0, r1
 8009cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cdc:	f021 010c 	bic.w	r1, r1, #12
 8009ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009cea:	430b      	orrs	r3, r1
 8009cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfe:	6999      	ldr	r1, [r3, #24]
 8009d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	ea40 0301 	orr.w	r3, r0, r1
 8009d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b8f      	ldr	r3, [pc, #572]	; (8009f50 <UART_SetConfig+0x2cc>)
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d005      	beq.n	8009d24 <UART_SetConfig+0xa0>
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b8d      	ldr	r3, [pc, #564]	; (8009f54 <UART_SetConfig+0x2d0>)
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d104      	bne.n	8009d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d24:	f7fe fa2c 	bl	8008180 <HAL_RCC_GetPCLK2Freq>
 8009d28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d2c:	e003      	b.n	8009d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d2e:	f7fe fa13 	bl	8008158 <HAL_RCC_GetPCLK1Freq>
 8009d32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d40:	f040 810c 	bne.w	8009f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d56:	4622      	mov	r2, r4
 8009d58:	462b      	mov	r3, r5
 8009d5a:	1891      	adds	r1, r2, r2
 8009d5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d5e:	415b      	adcs	r3, r3
 8009d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d66:	4621      	mov	r1, r4
 8009d68:	eb12 0801 	adds.w	r8, r2, r1
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	eb43 0901 	adc.w	r9, r3, r1
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d86:	4690      	mov	r8, r2
 8009d88:	4699      	mov	r9, r3
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	eb18 0303 	adds.w	r3, r8, r3
 8009d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d94:	462b      	mov	r3, r5
 8009d96:	eb49 0303 	adc.w	r3, r9, r3
 8009d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009daa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009db2:	460b      	mov	r3, r1
 8009db4:	18db      	adds	r3, r3, r3
 8009db6:	653b      	str	r3, [r7, #80]	; 0x50
 8009db8:	4613      	mov	r3, r2
 8009dba:	eb42 0303 	adc.w	r3, r2, r3
 8009dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009dc8:	f7f7 f8dc 	bl	8000f84 <__aeabi_uldivmod>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4b61      	ldr	r3, [pc, #388]	; (8009f58 <UART_SetConfig+0x2d4>)
 8009dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8009dd6:	095b      	lsrs	r3, r3, #5
 8009dd8:	011c      	lsls	r4, r3, #4
 8009dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009de4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009dec:	4642      	mov	r2, r8
 8009dee:	464b      	mov	r3, r9
 8009df0:	1891      	adds	r1, r2, r2
 8009df2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009df4:	415b      	adcs	r3, r3
 8009df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009dfc:	4641      	mov	r1, r8
 8009dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8009e02:	4649      	mov	r1, r9
 8009e04:	eb43 0b01 	adc.w	fp, r3, r1
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	f04f 0300 	mov.w	r3, #0
 8009e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e1c:	4692      	mov	sl, r2
 8009e1e:	469b      	mov	fp, r3
 8009e20:	4643      	mov	r3, r8
 8009e22:	eb1a 0303 	adds.w	r3, sl, r3
 8009e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8009e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	18db      	adds	r3, r3, r3
 8009e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e4e:	4613      	mov	r3, r2
 8009e50:	eb42 0303 	adc.w	r3, r2, r3
 8009e54:	647b      	str	r3, [r7, #68]	; 0x44
 8009e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e5e:	f7f7 f891 	bl	8000f84 <__aeabi_uldivmod>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	4b3b      	ldr	r3, [pc, #236]	; (8009f58 <UART_SetConfig+0x2d4>)
 8009e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009e6e:	095b      	lsrs	r3, r3, #5
 8009e70:	2264      	movs	r2, #100	; 0x64
 8009e72:	fb02 f303 	mul.w	r3, r2, r3
 8009e76:	1acb      	subs	r3, r1, r3
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e7e:	4b36      	ldr	r3, [pc, #216]	; (8009f58 <UART_SetConfig+0x2d4>)
 8009e80:	fba3 2302 	umull	r2, r3, r3, r2
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e8c:	441c      	add	r4, r3
 8009e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	1891      	adds	r1, r2, r2
 8009ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ea8:	415b      	adcs	r3, r3
 8009eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	1851      	adds	r1, r2, r1
 8009eb4:	6339      	str	r1, [r7, #48]	; 0x30
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	414b      	adcs	r3, r1
 8009eba:	637b      	str	r3, [r7, #52]	; 0x34
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ec8:	4659      	mov	r1, fp
 8009eca:	00cb      	lsls	r3, r1, #3
 8009ecc:	4651      	mov	r1, sl
 8009ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ed2:	4651      	mov	r1, sl
 8009ed4:	00ca      	lsls	r2, r1, #3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4603      	mov	r3, r0
 8009edc:	4642      	mov	r2, r8
 8009ede:	189b      	adds	r3, r3, r2
 8009ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	460a      	mov	r2, r1
 8009ee8:	eb42 0303 	adc.w	r3, r2, r3
 8009eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009efc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009f04:	460b      	mov	r3, r1
 8009f06:	18db      	adds	r3, r3, r3
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	eb42 0303 	adc.w	r3, r2, r3
 8009f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f1a:	f7f7 f833 	bl	8000f84 <__aeabi_uldivmod>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <UART_SetConfig+0x2d4>)
 8009f24:	fba3 1302 	umull	r1, r3, r3, r2
 8009f28:	095b      	lsrs	r3, r3, #5
 8009f2a:	2164      	movs	r1, #100	; 0x64
 8009f2c:	fb01 f303 	mul.w	r3, r1, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	3332      	adds	r3, #50	; 0x32
 8009f36:	4a08      	ldr	r2, [pc, #32]	; (8009f58 <UART_SetConfig+0x2d4>)
 8009f38:	fba2 2303 	umull	r2, r3, r2, r3
 8009f3c:	095b      	lsrs	r3, r3, #5
 8009f3e:	f003 0207 	and.w	r2, r3, #7
 8009f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4422      	add	r2, r4
 8009f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f4c:	e105      	b.n	800a15a <UART_SetConfig+0x4d6>
 8009f4e:	bf00      	nop
 8009f50:	40011000 	.word	0x40011000
 8009f54:	40011400 	.word	0x40011400
 8009f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f6e:	4642      	mov	r2, r8
 8009f70:	464b      	mov	r3, r9
 8009f72:	1891      	adds	r1, r2, r2
 8009f74:	6239      	str	r1, [r7, #32]
 8009f76:	415b      	adcs	r3, r3
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
 8009f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f7e:	4641      	mov	r1, r8
 8009f80:	1854      	adds	r4, r2, r1
 8009f82:	4649      	mov	r1, r9
 8009f84:	eb43 0501 	adc.w	r5, r3, r1
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	f04f 0300 	mov.w	r3, #0
 8009f90:	00eb      	lsls	r3, r5, #3
 8009f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f96:	00e2      	lsls	r2, r4, #3
 8009f98:	4614      	mov	r4, r2
 8009f9a:	461d      	mov	r5, r3
 8009f9c:	4643      	mov	r3, r8
 8009f9e:	18e3      	adds	r3, r4, r3
 8009fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	eb45 0303 	adc.w	r3, r5, r3
 8009faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009fbe:	f04f 0200 	mov.w	r2, #0
 8009fc2:	f04f 0300 	mov.w	r3, #0
 8009fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009fca:	4629      	mov	r1, r5
 8009fcc:	008b      	lsls	r3, r1, #2
 8009fce:	4621      	mov	r1, r4
 8009fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	008a      	lsls	r2, r1, #2
 8009fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009fdc:	f7f6 ffd2 	bl	8000f84 <__aeabi_uldivmod>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4b60      	ldr	r3, [pc, #384]	; (800a168 <UART_SetConfig+0x4e4>)
 8009fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	011c      	lsls	r4, r3, #4
 8009fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a000:	4642      	mov	r2, r8
 800a002:	464b      	mov	r3, r9
 800a004:	1891      	adds	r1, r2, r2
 800a006:	61b9      	str	r1, [r7, #24]
 800a008:	415b      	adcs	r3, r3
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a010:	4641      	mov	r1, r8
 800a012:	1851      	adds	r1, r2, r1
 800a014:	6139      	str	r1, [r7, #16]
 800a016:	4649      	mov	r1, r9
 800a018:	414b      	adcs	r3, r1
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a028:	4659      	mov	r1, fp
 800a02a:	00cb      	lsls	r3, r1, #3
 800a02c:	4651      	mov	r1, sl
 800a02e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a032:	4651      	mov	r1, sl
 800a034:	00ca      	lsls	r2, r1, #3
 800a036:	4610      	mov	r0, r2
 800a038:	4619      	mov	r1, r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	4642      	mov	r2, r8
 800a03e:	189b      	adds	r3, r3, r2
 800a040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a044:	464b      	mov	r3, r9
 800a046:	460a      	mov	r2, r1
 800a048:	eb42 0303 	adc.w	r3, r2, r3
 800a04c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	67bb      	str	r3, [r7, #120]	; 0x78
 800a05a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a068:	4649      	mov	r1, r9
 800a06a:	008b      	lsls	r3, r1, #2
 800a06c:	4641      	mov	r1, r8
 800a06e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a072:	4641      	mov	r1, r8
 800a074:	008a      	lsls	r2, r1, #2
 800a076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a07a:	f7f6 ff83 	bl	8000f84 <__aeabi_uldivmod>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4b39      	ldr	r3, [pc, #228]	; (800a168 <UART_SetConfig+0x4e4>)
 800a084:	fba3 1302 	umull	r1, r3, r3, r2
 800a088:	095b      	lsrs	r3, r3, #5
 800a08a:	2164      	movs	r1, #100	; 0x64
 800a08c:	fb01 f303 	mul.w	r3, r1, r3
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	3332      	adds	r3, #50	; 0x32
 800a096:	4a34      	ldr	r2, [pc, #208]	; (800a168 <UART_SetConfig+0x4e4>)
 800a098:	fba2 2303 	umull	r2, r3, r2, r3
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0a2:	441c      	add	r4, r3
 800a0a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a0ac:	677a      	str	r2, [r7, #116]	; 0x74
 800a0ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	1891      	adds	r1, r2, r2
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	415b      	adcs	r3, r3
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0c2:	4641      	mov	r1, r8
 800a0c4:	1851      	adds	r1, r2, r1
 800a0c6:	6039      	str	r1, [r7, #0]
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	414b      	adcs	r3, r1
 800a0cc:	607b      	str	r3, [r7, #4]
 800a0ce:	f04f 0200 	mov.w	r2, #0
 800a0d2:	f04f 0300 	mov.w	r3, #0
 800a0d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0da:	4659      	mov	r1, fp
 800a0dc:	00cb      	lsls	r3, r1, #3
 800a0de:	4651      	mov	r1, sl
 800a0e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0e4:	4651      	mov	r1, sl
 800a0e6:	00ca      	lsls	r2, r1, #3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	189b      	adds	r3, r3, r2
 800a0f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	460a      	mov	r2, r1
 800a0f8:	eb42 0303 	adc.w	r3, r2, r3
 800a0fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	663b      	str	r3, [r7, #96]	; 0x60
 800a108:	667a      	str	r2, [r7, #100]	; 0x64
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	f04f 0300 	mov.w	r3, #0
 800a112:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a116:	4649      	mov	r1, r9
 800a118:	008b      	lsls	r3, r1, #2
 800a11a:	4641      	mov	r1, r8
 800a11c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a120:	4641      	mov	r1, r8
 800a122:	008a      	lsls	r2, r1, #2
 800a124:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a128:	f7f6 ff2c 	bl	8000f84 <__aeabi_uldivmod>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <UART_SetConfig+0x4e4>)
 800a132:	fba3 1302 	umull	r1, r3, r3, r2
 800a136:	095b      	lsrs	r3, r3, #5
 800a138:	2164      	movs	r1, #100	; 0x64
 800a13a:	fb01 f303 	mul.w	r3, r1, r3
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	3332      	adds	r3, #50	; 0x32
 800a144:	4a08      	ldr	r2, [pc, #32]	; (800a168 <UART_SetConfig+0x4e4>)
 800a146:	fba2 2303 	umull	r2, r3, r2, r3
 800a14a:	095b      	lsrs	r3, r3, #5
 800a14c:	f003 020f 	and.w	r2, r3, #15
 800a150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4422      	add	r2, r4
 800a158:	609a      	str	r2, [r3, #8]
}
 800a15a:	bf00      	nop
 800a15c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a160:	46bd      	mov	sp, r7
 800a162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a166:	bf00      	nop
 800a168:	51eb851f 	.word	0x51eb851f

0800a16c <__errno>:
 800a16c:	4b01      	ldr	r3, [pc, #4]	; (800a174 <__errno+0x8>)
 800a16e:	6818      	ldr	r0, [r3, #0]
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000014 	.word	0x20000014

0800a178 <__libc_init_array>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	4d0d      	ldr	r5, [pc, #52]	; (800a1b0 <__libc_init_array+0x38>)
 800a17c:	4c0d      	ldr	r4, [pc, #52]	; (800a1b4 <__libc_init_array+0x3c>)
 800a17e:	1b64      	subs	r4, r4, r5
 800a180:	10a4      	asrs	r4, r4, #2
 800a182:	2600      	movs	r6, #0
 800a184:	42a6      	cmp	r6, r4
 800a186:	d109      	bne.n	800a19c <__libc_init_array+0x24>
 800a188:	4d0b      	ldr	r5, [pc, #44]	; (800a1b8 <__libc_init_array+0x40>)
 800a18a:	4c0c      	ldr	r4, [pc, #48]	; (800a1bc <__libc_init_array+0x44>)
 800a18c:	f006 ff9a 	bl	80110c4 <_init>
 800a190:	1b64      	subs	r4, r4, r5
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	2600      	movs	r6, #0
 800a196:	42a6      	cmp	r6, r4
 800a198:	d105      	bne.n	800a1a6 <__libc_init_array+0x2e>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a0:	4798      	blx	r3
 800a1a2:	3601      	adds	r6, #1
 800a1a4:	e7ee      	b.n	800a184 <__libc_init_array+0xc>
 800a1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1aa:	4798      	blx	r3
 800a1ac:	3601      	adds	r6, #1
 800a1ae:	e7f2      	b.n	800a196 <__libc_init_array+0x1e>
 800a1b0:	08011710 	.word	0x08011710
 800a1b4:	08011710 	.word	0x08011710
 800a1b8:	08011710 	.word	0x08011710
 800a1bc:	08011714 	.word	0x08011714

0800a1c0 <memset>:
 800a1c0:	4402      	add	r2, r0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d100      	bne.n	800a1ca <memset+0xa>
 800a1c8:	4770      	bx	lr
 800a1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ce:	e7f9      	b.n	800a1c4 <memset+0x4>

0800a1d0 <__cvt>:
 800a1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	ec55 4b10 	vmov	r4, r5, d0
 800a1d8:	2d00      	cmp	r5, #0
 800a1da:	460e      	mov	r6, r1
 800a1dc:	4619      	mov	r1, r3
 800a1de:	462b      	mov	r3, r5
 800a1e0:	bfbb      	ittet	lt
 800a1e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1e6:	461d      	movlt	r5, r3
 800a1e8:	2300      	movge	r3, #0
 800a1ea:	232d      	movlt	r3, #45	; 0x2d
 800a1ec:	700b      	strb	r3, [r1, #0]
 800a1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1f4:	4691      	mov	r9, r2
 800a1f6:	f023 0820 	bic.w	r8, r3, #32
 800a1fa:	bfbc      	itt	lt
 800a1fc:	4622      	movlt	r2, r4
 800a1fe:	4614      	movlt	r4, r2
 800a200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a204:	d005      	beq.n	800a212 <__cvt+0x42>
 800a206:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a20a:	d100      	bne.n	800a20e <__cvt+0x3e>
 800a20c:	3601      	adds	r6, #1
 800a20e:	2102      	movs	r1, #2
 800a210:	e000      	b.n	800a214 <__cvt+0x44>
 800a212:	2103      	movs	r1, #3
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	ab02      	add	r3, sp, #8
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	ec45 4b10 	vmov	d0, r4, r5
 800a220:	4653      	mov	r3, sl
 800a222:	4632      	mov	r2, r6
 800a224:	f001 fe60 	bl	800bee8 <_dtoa_r>
 800a228:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a22c:	4607      	mov	r7, r0
 800a22e:	d102      	bne.n	800a236 <__cvt+0x66>
 800a230:	f019 0f01 	tst.w	r9, #1
 800a234:	d022      	beq.n	800a27c <__cvt+0xac>
 800a236:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a23a:	eb07 0906 	add.w	r9, r7, r6
 800a23e:	d110      	bne.n	800a262 <__cvt+0x92>
 800a240:	783b      	ldrb	r3, [r7, #0]
 800a242:	2b30      	cmp	r3, #48	; 0x30
 800a244:	d10a      	bne.n	800a25c <__cvt+0x8c>
 800a246:	2200      	movs	r2, #0
 800a248:	2300      	movs	r3, #0
 800a24a:	4620      	mov	r0, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	f7f6 fc5b 	bl	8000b08 <__aeabi_dcmpeq>
 800a252:	b918      	cbnz	r0, 800a25c <__cvt+0x8c>
 800a254:	f1c6 0601 	rsb	r6, r6, #1
 800a258:	f8ca 6000 	str.w	r6, [sl]
 800a25c:	f8da 3000 	ldr.w	r3, [sl]
 800a260:	4499      	add	r9, r3
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800a26e:	b108      	cbz	r0, 800a274 <__cvt+0xa4>
 800a270:	f8cd 900c 	str.w	r9, [sp, #12]
 800a274:	2230      	movs	r2, #48	; 0x30
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	454b      	cmp	r3, r9
 800a27a:	d307      	bcc.n	800a28c <__cvt+0xbc>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a280:	1bdb      	subs	r3, r3, r7
 800a282:	4638      	mov	r0, r7
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	b004      	add	sp, #16
 800a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28c:	1c59      	adds	r1, r3, #1
 800a28e:	9103      	str	r1, [sp, #12]
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	e7f0      	b.n	800a276 <__cvt+0xa6>

0800a294 <__exponent>:
 800a294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a296:	4603      	mov	r3, r0
 800a298:	2900      	cmp	r1, #0
 800a29a:	bfb8      	it	lt
 800a29c:	4249      	neglt	r1, r1
 800a29e:	f803 2b02 	strb.w	r2, [r3], #2
 800a2a2:	bfb4      	ite	lt
 800a2a4:	222d      	movlt	r2, #45	; 0x2d
 800a2a6:	222b      	movge	r2, #43	; 0x2b
 800a2a8:	2909      	cmp	r1, #9
 800a2aa:	7042      	strb	r2, [r0, #1]
 800a2ac:	dd2a      	ble.n	800a304 <__exponent+0x70>
 800a2ae:	f10d 0407 	add.w	r4, sp, #7
 800a2b2:	46a4      	mov	ip, r4
 800a2b4:	270a      	movs	r7, #10
 800a2b6:	46a6      	mov	lr, r4
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2be:	fb07 1516 	mls	r5, r7, r6, r1
 800a2c2:	3530      	adds	r5, #48	; 0x30
 800a2c4:	2a63      	cmp	r2, #99	; 0x63
 800a2c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	dcf1      	bgt.n	800a2b6 <__exponent+0x22>
 800a2d2:	3130      	adds	r1, #48	; 0x30
 800a2d4:	f1ae 0502 	sub.w	r5, lr, #2
 800a2d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2dc:	1c44      	adds	r4, r0, #1
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4561      	cmp	r1, ip
 800a2e2:	d30a      	bcc.n	800a2fa <__exponent+0x66>
 800a2e4:	f10d 0209 	add.w	r2, sp, #9
 800a2e8:	eba2 020e 	sub.w	r2, r2, lr
 800a2ec:	4565      	cmp	r5, ip
 800a2ee:	bf88      	it	hi
 800a2f0:	2200      	movhi	r2, #0
 800a2f2:	4413      	add	r3, r2
 800a2f4:	1a18      	subs	r0, r3, r0
 800a2f6:	b003      	add	sp, #12
 800a2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a302:	e7ed      	b.n	800a2e0 <__exponent+0x4c>
 800a304:	2330      	movs	r3, #48	; 0x30
 800a306:	3130      	adds	r1, #48	; 0x30
 800a308:	7083      	strb	r3, [r0, #2]
 800a30a:	70c1      	strb	r1, [r0, #3]
 800a30c:	1d03      	adds	r3, r0, #4
 800a30e:	e7f1      	b.n	800a2f4 <__exponent+0x60>

0800a310 <_printf_float>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	ed2d 8b02 	vpush	{d8}
 800a318:	b08d      	sub	sp, #52	; 0x34
 800a31a:	460c      	mov	r4, r1
 800a31c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a320:	4616      	mov	r6, r2
 800a322:	461f      	mov	r7, r3
 800a324:	4605      	mov	r5, r0
 800a326:	f002 ff3d 	bl	800d1a4 <_localeconv_r>
 800a32a:	f8d0 a000 	ldr.w	sl, [r0]
 800a32e:	4650      	mov	r0, sl
 800a330:	f7f5 ff6e 	bl	8000210 <strlen>
 800a334:	2300      	movs	r3, #0
 800a336:	930a      	str	r3, [sp, #40]	; 0x28
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	9305      	str	r3, [sp, #20]
 800a33c:	f8d8 3000 	ldr.w	r3, [r8]
 800a340:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a344:	3307      	adds	r3, #7
 800a346:	f023 0307 	bic.w	r3, r3, #7
 800a34a:	f103 0208 	add.w	r2, r3, #8
 800a34e:	f8c8 2000 	str.w	r2, [r8]
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a35a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f8cd 8018 	str.w	r8, [sp, #24]
 800a368:	ee08 0a10 	vmov	s16, r0
 800a36c:	4b9f      	ldr	r3, [pc, #636]	; (800a5ec <_printf_float+0x2dc>)
 800a36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a372:	f04f 32ff 	mov.w	r2, #4294967295
 800a376:	f7f6 fbf9 	bl	8000b6c <__aeabi_dcmpun>
 800a37a:	bb88      	cbnz	r0, 800a3e0 <_printf_float+0xd0>
 800a37c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a380:	4b9a      	ldr	r3, [pc, #616]	; (800a5ec <_printf_float+0x2dc>)
 800a382:	f04f 32ff 	mov.w	r2, #4294967295
 800a386:	f7f6 fbd3 	bl	8000b30 <__aeabi_dcmple>
 800a38a:	bb48      	cbnz	r0, 800a3e0 <_printf_float+0xd0>
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f6 fbc2 	bl	8000b1c <__aeabi_dcmplt>
 800a398:	b110      	cbz	r0, 800a3a0 <_printf_float+0x90>
 800a39a:	232d      	movs	r3, #45	; 0x2d
 800a39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a0:	4b93      	ldr	r3, [pc, #588]	; (800a5f0 <_printf_float+0x2e0>)
 800a3a2:	4894      	ldr	r0, [pc, #592]	; (800a5f4 <_printf_float+0x2e4>)
 800a3a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3a8:	bf94      	ite	ls
 800a3aa:	4698      	movls	r8, r3
 800a3ac:	4680      	movhi	r8, r0
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	6123      	str	r3, [r4, #16]
 800a3b2:	9b05      	ldr	r3, [sp, #20]
 800a3b4:	f023 0204 	bic.w	r2, r3, #4
 800a3b8:	6022      	str	r2, [r4, #0]
 800a3ba:	f04f 0900 	mov.w	r9, #0
 800a3be:	9700      	str	r7, [sp, #0]
 800a3c0:	4633      	mov	r3, r6
 800a3c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f000 f9d8 	bl	800a77c <_printf_common>
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f040 8090 	bne.w	800a4f2 <_printf_float+0x1e2>
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d6:	b00d      	add	sp, #52	; 0x34
 800a3d8:	ecbd 8b02 	vpop	{d8}
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	f7f6 fbc0 	bl	8000b6c <__aeabi_dcmpun>
 800a3ec:	b140      	cbz	r0, 800a400 <_printf_float+0xf0>
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbc      	itt	lt
 800a3f4:	232d      	movlt	r3, #45	; 0x2d
 800a3f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a3fa:	487f      	ldr	r0, [pc, #508]	; (800a5f8 <_printf_float+0x2e8>)
 800a3fc:	4b7f      	ldr	r3, [pc, #508]	; (800a5fc <_printf_float+0x2ec>)
 800a3fe:	e7d1      	b.n	800a3a4 <_printf_float+0x94>
 800a400:	6863      	ldr	r3, [r4, #4]
 800a402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a406:	9206      	str	r2, [sp, #24]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	d13f      	bne.n	800a48c <_printf_float+0x17c>
 800a40c:	2306      	movs	r3, #6
 800a40e:	6063      	str	r3, [r4, #4]
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	6861      	ldr	r1, [r4, #4]
 800a414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a418:	2300      	movs	r3, #0
 800a41a:	9303      	str	r3, [sp, #12]
 800a41c:	ab0a      	add	r3, sp, #40	; 0x28
 800a41e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a422:	ab09      	add	r3, sp, #36	; 0x24
 800a424:	ec49 8b10 	vmov	d0, r8, r9
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a430:	4628      	mov	r0, r5
 800a432:	f7ff fecd 	bl	800a1d0 <__cvt>
 800a436:	9b06      	ldr	r3, [sp, #24]
 800a438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a43a:	2b47      	cmp	r3, #71	; 0x47
 800a43c:	4680      	mov	r8, r0
 800a43e:	d108      	bne.n	800a452 <_printf_float+0x142>
 800a440:	1cc8      	adds	r0, r1, #3
 800a442:	db02      	blt.n	800a44a <_printf_float+0x13a>
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	4299      	cmp	r1, r3
 800a448:	dd41      	ble.n	800a4ce <_printf_float+0x1be>
 800a44a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a44e:	fa5f fb8b 	uxtb.w	fp, fp
 800a452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a456:	d820      	bhi.n	800a49a <_printf_float+0x18a>
 800a458:	3901      	subs	r1, #1
 800a45a:	465a      	mov	r2, fp
 800a45c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a460:	9109      	str	r1, [sp, #36]	; 0x24
 800a462:	f7ff ff17 	bl	800a294 <__exponent>
 800a466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a468:	1813      	adds	r3, r2, r0
 800a46a:	2a01      	cmp	r2, #1
 800a46c:	4681      	mov	r9, r0
 800a46e:	6123      	str	r3, [r4, #16]
 800a470:	dc02      	bgt.n	800a478 <_printf_float+0x168>
 800a472:	6822      	ldr	r2, [r4, #0]
 800a474:	07d2      	lsls	r2, r2, #31
 800a476:	d501      	bpl.n	800a47c <_printf_float+0x16c>
 800a478:	3301      	adds	r3, #1
 800a47a:	6123      	str	r3, [r4, #16]
 800a47c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a480:	2b00      	cmp	r3, #0
 800a482:	d09c      	beq.n	800a3be <_printf_float+0xae>
 800a484:	232d      	movs	r3, #45	; 0x2d
 800a486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a48a:	e798      	b.n	800a3be <_printf_float+0xae>
 800a48c:	9a06      	ldr	r2, [sp, #24]
 800a48e:	2a47      	cmp	r2, #71	; 0x47
 800a490:	d1be      	bne.n	800a410 <_printf_float+0x100>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1bc      	bne.n	800a410 <_printf_float+0x100>
 800a496:	2301      	movs	r3, #1
 800a498:	e7b9      	b.n	800a40e <_printf_float+0xfe>
 800a49a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a49e:	d118      	bne.n	800a4d2 <_printf_float+0x1c2>
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	dd0b      	ble.n	800a4be <_printf_float+0x1ae>
 800a4a6:	6121      	str	r1, [r4, #16]
 800a4a8:	b913      	cbnz	r3, 800a4b0 <_printf_float+0x1a0>
 800a4aa:	6822      	ldr	r2, [r4, #0]
 800a4ac:	07d0      	lsls	r0, r2, #31
 800a4ae:	d502      	bpl.n	800a4b6 <_printf_float+0x1a6>
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	440b      	add	r3, r1
 800a4b4:	6123      	str	r3, [r4, #16]
 800a4b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4b8:	f04f 0900 	mov.w	r9, #0
 800a4bc:	e7de      	b.n	800a47c <_printf_float+0x16c>
 800a4be:	b913      	cbnz	r3, 800a4c6 <_printf_float+0x1b6>
 800a4c0:	6822      	ldr	r2, [r4, #0]
 800a4c2:	07d2      	lsls	r2, r2, #31
 800a4c4:	d501      	bpl.n	800a4ca <_printf_float+0x1ba>
 800a4c6:	3302      	adds	r3, #2
 800a4c8:	e7f4      	b.n	800a4b4 <_printf_float+0x1a4>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e7f2      	b.n	800a4b4 <_printf_float+0x1a4>
 800a4ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d4:	4299      	cmp	r1, r3
 800a4d6:	db05      	blt.n	800a4e4 <_printf_float+0x1d4>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	6121      	str	r1, [r4, #16]
 800a4dc:	07d8      	lsls	r0, r3, #31
 800a4de:	d5ea      	bpl.n	800a4b6 <_printf_float+0x1a6>
 800a4e0:	1c4b      	adds	r3, r1, #1
 800a4e2:	e7e7      	b.n	800a4b4 <_printf_float+0x1a4>
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	bfd4      	ite	le
 800a4e8:	f1c1 0202 	rsble	r2, r1, #2
 800a4ec:	2201      	movgt	r2, #1
 800a4ee:	4413      	add	r3, r2
 800a4f0:	e7e0      	b.n	800a4b4 <_printf_float+0x1a4>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	055a      	lsls	r2, r3, #21
 800a4f6:	d407      	bmi.n	800a508 <_printf_float+0x1f8>
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	4642      	mov	r2, r8
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	d12c      	bne.n	800a560 <_printf_float+0x250>
 800a506:	e764      	b.n	800a3d2 <_printf_float+0xc2>
 800a508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a50c:	f240 80e0 	bls.w	800a6d0 <_printf_float+0x3c0>
 800a510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	f7f6 faf6 	bl	8000b08 <__aeabi_dcmpeq>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d034      	beq.n	800a58a <_printf_float+0x27a>
 800a520:	4a37      	ldr	r2, [pc, #220]	; (800a600 <_printf_float+0x2f0>)
 800a522:	2301      	movs	r3, #1
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	f43f af51 	beq.w	800a3d2 <_printf_float+0xc2>
 800a530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a534:	429a      	cmp	r2, r3
 800a536:	db02      	blt.n	800a53e <_printf_float+0x22e>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	07d8      	lsls	r0, r3, #31
 800a53c:	d510      	bpl.n	800a560 <_printf_float+0x250>
 800a53e:	ee18 3a10 	vmov	r3, s16
 800a542:	4652      	mov	r2, sl
 800a544:	4631      	mov	r1, r6
 800a546:	4628      	mov	r0, r5
 800a548:	47b8      	blx	r7
 800a54a:	3001      	adds	r0, #1
 800a54c:	f43f af41 	beq.w	800a3d2 <_printf_float+0xc2>
 800a550:	f04f 0800 	mov.w	r8, #0
 800a554:	f104 091a 	add.w	r9, r4, #26
 800a558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55a:	3b01      	subs	r3, #1
 800a55c:	4543      	cmp	r3, r8
 800a55e:	dc09      	bgt.n	800a574 <_printf_float+0x264>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	079b      	lsls	r3, r3, #30
 800a564:	f100 8105 	bmi.w	800a772 <_printf_float+0x462>
 800a568:	68e0      	ldr	r0, [r4, #12]
 800a56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a56c:	4298      	cmp	r0, r3
 800a56e:	bfb8      	it	lt
 800a570:	4618      	movlt	r0, r3
 800a572:	e730      	b.n	800a3d6 <_printf_float+0xc6>
 800a574:	2301      	movs	r3, #1
 800a576:	464a      	mov	r2, r9
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	47b8      	blx	r7
 800a57e:	3001      	adds	r0, #1
 800a580:	f43f af27 	beq.w	800a3d2 <_printf_float+0xc2>
 800a584:	f108 0801 	add.w	r8, r8, #1
 800a588:	e7e6      	b.n	800a558 <_printf_float+0x248>
 800a58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dc39      	bgt.n	800a604 <_printf_float+0x2f4>
 800a590:	4a1b      	ldr	r2, [pc, #108]	; (800a600 <_printf_float+0x2f0>)
 800a592:	2301      	movs	r3, #1
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f af19 	beq.w	800a3d2 <_printf_float+0xc2>
 800a5a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	d102      	bne.n	800a5ae <_printf_float+0x29e>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	07d9      	lsls	r1, r3, #31
 800a5ac:	d5d8      	bpl.n	800a560 <_printf_float+0x250>
 800a5ae:	ee18 3a10 	vmov	r3, s16
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	47b8      	blx	r7
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	f43f af09 	beq.w	800a3d2 <_printf_float+0xc2>
 800a5c0:	f04f 0900 	mov.w	r9, #0
 800a5c4:	f104 0a1a 	add.w	sl, r4, #26
 800a5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ca:	425b      	negs	r3, r3
 800a5cc:	454b      	cmp	r3, r9
 800a5ce:	dc01      	bgt.n	800a5d4 <_printf_float+0x2c4>
 800a5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d2:	e792      	b.n	800a4fa <_printf_float+0x1ea>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	4652      	mov	r2, sl
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f aef7 	beq.w	800a3d2 <_printf_float+0xc2>
 800a5e4:	f109 0901 	add.w	r9, r9, #1
 800a5e8:	e7ee      	b.n	800a5c8 <_printf_float+0x2b8>
 800a5ea:	bf00      	nop
 800a5ec:	7fefffff 	.word	0x7fefffff
 800a5f0:	080111ac 	.word	0x080111ac
 800a5f4:	080111b0 	.word	0x080111b0
 800a5f8:	080111b8 	.word	0x080111b8
 800a5fc:	080111b4 	.word	0x080111b4
 800a600:	080115b1 	.word	0x080115b1
 800a604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a608:	429a      	cmp	r2, r3
 800a60a:	bfa8      	it	ge
 800a60c:	461a      	movge	r2, r3
 800a60e:	2a00      	cmp	r2, #0
 800a610:	4691      	mov	r9, r2
 800a612:	dc37      	bgt.n	800a684 <_printf_float+0x374>
 800a614:	f04f 0b00 	mov.w	fp, #0
 800a618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a61c:	f104 021a 	add.w	r2, r4, #26
 800a620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a622:	9305      	str	r3, [sp, #20]
 800a624:	eba3 0309 	sub.w	r3, r3, r9
 800a628:	455b      	cmp	r3, fp
 800a62a:	dc33      	bgt.n	800a694 <_printf_float+0x384>
 800a62c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a630:	429a      	cmp	r2, r3
 800a632:	db3b      	blt.n	800a6ac <_printf_float+0x39c>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	07da      	lsls	r2, r3, #31
 800a638:	d438      	bmi.n	800a6ac <_printf_float+0x39c>
 800a63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63c:	9a05      	ldr	r2, [sp, #20]
 800a63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a640:	1a9a      	subs	r2, r3, r2
 800a642:	eba3 0901 	sub.w	r9, r3, r1
 800a646:	4591      	cmp	r9, r2
 800a648:	bfa8      	it	ge
 800a64a:	4691      	movge	r9, r2
 800a64c:	f1b9 0f00 	cmp.w	r9, #0
 800a650:	dc35      	bgt.n	800a6be <_printf_float+0x3ae>
 800a652:	f04f 0800 	mov.w	r8, #0
 800a656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a65a:	f104 0a1a 	add.w	sl, r4, #26
 800a65e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a662:	1a9b      	subs	r3, r3, r2
 800a664:	eba3 0309 	sub.w	r3, r3, r9
 800a668:	4543      	cmp	r3, r8
 800a66a:	f77f af79 	ble.w	800a560 <_printf_float+0x250>
 800a66e:	2301      	movs	r3, #1
 800a670:	4652      	mov	r2, sl
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	f43f aeaa 	beq.w	800a3d2 <_printf_float+0xc2>
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	e7ec      	b.n	800a65e <_printf_float+0x34e>
 800a684:	4613      	mov	r3, r2
 800a686:	4631      	mov	r1, r6
 800a688:	4642      	mov	r2, r8
 800a68a:	4628      	mov	r0, r5
 800a68c:	47b8      	blx	r7
 800a68e:	3001      	adds	r0, #1
 800a690:	d1c0      	bne.n	800a614 <_printf_float+0x304>
 800a692:	e69e      	b.n	800a3d2 <_printf_float+0xc2>
 800a694:	2301      	movs	r3, #1
 800a696:	4631      	mov	r1, r6
 800a698:	4628      	mov	r0, r5
 800a69a:	9205      	str	r2, [sp, #20]
 800a69c:	47b8      	blx	r7
 800a69e:	3001      	adds	r0, #1
 800a6a0:	f43f ae97 	beq.w	800a3d2 <_printf_float+0xc2>
 800a6a4:	9a05      	ldr	r2, [sp, #20]
 800a6a6:	f10b 0b01 	add.w	fp, fp, #1
 800a6aa:	e7b9      	b.n	800a620 <_printf_float+0x310>
 800a6ac:	ee18 3a10 	vmov	r3, s16
 800a6b0:	4652      	mov	r2, sl
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b8      	blx	r7
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d1be      	bne.n	800a63a <_printf_float+0x32a>
 800a6bc:	e689      	b.n	800a3d2 <_printf_float+0xc2>
 800a6be:	9a05      	ldr	r2, [sp, #20]
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	4442      	add	r2, r8
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b8      	blx	r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d1c1      	bne.n	800a652 <_printf_float+0x342>
 800a6ce:	e680      	b.n	800a3d2 <_printf_float+0xc2>
 800a6d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d2:	2a01      	cmp	r2, #1
 800a6d4:	dc01      	bgt.n	800a6da <_printf_float+0x3ca>
 800a6d6:	07db      	lsls	r3, r3, #31
 800a6d8:	d538      	bpl.n	800a74c <_printf_float+0x43c>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4642      	mov	r2, r8
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f43f ae74 	beq.w	800a3d2 <_printf_float+0xc2>
 800a6ea:	ee18 3a10 	vmov	r3, s16
 800a6ee:	4652      	mov	r2, sl
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	f43f ae6b 	beq.w	800a3d2 <_printf_float+0xc2>
 800a6fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a700:	2200      	movs	r2, #0
 800a702:	2300      	movs	r3, #0
 800a704:	f7f6 fa00 	bl	8000b08 <__aeabi_dcmpeq>
 800a708:	b9d8      	cbnz	r0, 800a742 <_printf_float+0x432>
 800a70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70c:	f108 0201 	add.w	r2, r8, #1
 800a710:	3b01      	subs	r3, #1
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	47b8      	blx	r7
 800a718:	3001      	adds	r0, #1
 800a71a:	d10e      	bne.n	800a73a <_printf_float+0x42a>
 800a71c:	e659      	b.n	800a3d2 <_printf_float+0xc2>
 800a71e:	2301      	movs	r3, #1
 800a720:	4652      	mov	r2, sl
 800a722:	4631      	mov	r1, r6
 800a724:	4628      	mov	r0, r5
 800a726:	47b8      	blx	r7
 800a728:	3001      	adds	r0, #1
 800a72a:	f43f ae52 	beq.w	800a3d2 <_printf_float+0xc2>
 800a72e:	f108 0801 	add.w	r8, r8, #1
 800a732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a734:	3b01      	subs	r3, #1
 800a736:	4543      	cmp	r3, r8
 800a738:	dcf1      	bgt.n	800a71e <_printf_float+0x40e>
 800a73a:	464b      	mov	r3, r9
 800a73c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a740:	e6dc      	b.n	800a4fc <_printf_float+0x1ec>
 800a742:	f04f 0800 	mov.w	r8, #0
 800a746:	f104 0a1a 	add.w	sl, r4, #26
 800a74a:	e7f2      	b.n	800a732 <_printf_float+0x422>
 800a74c:	2301      	movs	r3, #1
 800a74e:	4642      	mov	r2, r8
 800a750:	e7df      	b.n	800a712 <_printf_float+0x402>
 800a752:	2301      	movs	r3, #1
 800a754:	464a      	mov	r2, r9
 800a756:	4631      	mov	r1, r6
 800a758:	4628      	mov	r0, r5
 800a75a:	47b8      	blx	r7
 800a75c:	3001      	adds	r0, #1
 800a75e:	f43f ae38 	beq.w	800a3d2 <_printf_float+0xc2>
 800a762:	f108 0801 	add.w	r8, r8, #1
 800a766:	68e3      	ldr	r3, [r4, #12]
 800a768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a76a:	1a5b      	subs	r3, r3, r1
 800a76c:	4543      	cmp	r3, r8
 800a76e:	dcf0      	bgt.n	800a752 <_printf_float+0x442>
 800a770:	e6fa      	b.n	800a568 <_printf_float+0x258>
 800a772:	f04f 0800 	mov.w	r8, #0
 800a776:	f104 0919 	add.w	r9, r4, #25
 800a77a:	e7f4      	b.n	800a766 <_printf_float+0x456>

0800a77c <_printf_common>:
 800a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a780:	4616      	mov	r6, r2
 800a782:	4699      	mov	r9, r3
 800a784:	688a      	ldr	r2, [r1, #8]
 800a786:	690b      	ldr	r3, [r1, #16]
 800a788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a78c:	4293      	cmp	r3, r2
 800a78e:	bfb8      	it	lt
 800a790:	4613      	movlt	r3, r2
 800a792:	6033      	str	r3, [r6, #0]
 800a794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a798:	4607      	mov	r7, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b10a      	cbz	r2, 800a7a2 <_printf_common+0x26>
 800a79e:	3301      	adds	r3, #1
 800a7a0:	6033      	str	r3, [r6, #0]
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	0699      	lsls	r1, r3, #26
 800a7a6:	bf42      	ittt	mi
 800a7a8:	6833      	ldrmi	r3, [r6, #0]
 800a7aa:	3302      	addmi	r3, #2
 800a7ac:	6033      	strmi	r3, [r6, #0]
 800a7ae:	6825      	ldr	r5, [r4, #0]
 800a7b0:	f015 0506 	ands.w	r5, r5, #6
 800a7b4:	d106      	bne.n	800a7c4 <_printf_common+0x48>
 800a7b6:	f104 0a19 	add.w	sl, r4, #25
 800a7ba:	68e3      	ldr	r3, [r4, #12]
 800a7bc:	6832      	ldr	r2, [r6, #0]
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	42ab      	cmp	r3, r5
 800a7c2:	dc26      	bgt.n	800a812 <_printf_common+0x96>
 800a7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7c8:	1e13      	subs	r3, r2, #0
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	bf18      	it	ne
 800a7ce:	2301      	movne	r3, #1
 800a7d0:	0692      	lsls	r2, r2, #26
 800a7d2:	d42b      	bmi.n	800a82c <_printf_common+0xb0>
 800a7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4638      	mov	r0, r7
 800a7dc:	47c0      	blx	r8
 800a7de:	3001      	adds	r0, #1
 800a7e0:	d01e      	beq.n	800a820 <_printf_common+0xa4>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	68e5      	ldr	r5, [r4, #12]
 800a7e6:	6832      	ldr	r2, [r6, #0]
 800a7e8:	f003 0306 	and.w	r3, r3, #6
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	bf08      	it	eq
 800a7f0:	1aad      	subeq	r5, r5, r2
 800a7f2:	68a3      	ldr	r3, [r4, #8]
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	bf0c      	ite	eq
 800a7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7fc:	2500      	movne	r5, #0
 800a7fe:	4293      	cmp	r3, r2
 800a800:	bfc4      	itt	gt
 800a802:	1a9b      	subgt	r3, r3, r2
 800a804:	18ed      	addgt	r5, r5, r3
 800a806:	2600      	movs	r6, #0
 800a808:	341a      	adds	r4, #26
 800a80a:	42b5      	cmp	r5, r6
 800a80c:	d11a      	bne.n	800a844 <_printf_common+0xc8>
 800a80e:	2000      	movs	r0, #0
 800a810:	e008      	b.n	800a824 <_printf_common+0xa8>
 800a812:	2301      	movs	r3, #1
 800a814:	4652      	mov	r2, sl
 800a816:	4649      	mov	r1, r9
 800a818:	4638      	mov	r0, r7
 800a81a:	47c0      	blx	r8
 800a81c:	3001      	adds	r0, #1
 800a81e:	d103      	bne.n	800a828 <_printf_common+0xac>
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a828:	3501      	adds	r5, #1
 800a82a:	e7c6      	b.n	800a7ba <_printf_common+0x3e>
 800a82c:	18e1      	adds	r1, r4, r3
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	2030      	movs	r0, #48	; 0x30
 800a832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a836:	4422      	add	r2, r4
 800a838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a840:	3302      	adds	r3, #2
 800a842:	e7c7      	b.n	800a7d4 <_printf_common+0x58>
 800a844:	2301      	movs	r3, #1
 800a846:	4622      	mov	r2, r4
 800a848:	4649      	mov	r1, r9
 800a84a:	4638      	mov	r0, r7
 800a84c:	47c0      	blx	r8
 800a84e:	3001      	adds	r0, #1
 800a850:	d0e6      	beq.n	800a820 <_printf_common+0xa4>
 800a852:	3601      	adds	r6, #1
 800a854:	e7d9      	b.n	800a80a <_printf_common+0x8e>
	...

0800a858 <_printf_i>:
 800a858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a85c:	7e0f      	ldrb	r7, [r1, #24]
 800a85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a860:	2f78      	cmp	r7, #120	; 0x78
 800a862:	4691      	mov	r9, r2
 800a864:	4680      	mov	r8, r0
 800a866:	460c      	mov	r4, r1
 800a868:	469a      	mov	sl, r3
 800a86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a86e:	d807      	bhi.n	800a880 <_printf_i+0x28>
 800a870:	2f62      	cmp	r7, #98	; 0x62
 800a872:	d80a      	bhi.n	800a88a <_printf_i+0x32>
 800a874:	2f00      	cmp	r7, #0
 800a876:	f000 80d8 	beq.w	800aa2a <_printf_i+0x1d2>
 800a87a:	2f58      	cmp	r7, #88	; 0x58
 800a87c:	f000 80a3 	beq.w	800a9c6 <_printf_i+0x16e>
 800a880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a888:	e03a      	b.n	800a900 <_printf_i+0xa8>
 800a88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a88e:	2b15      	cmp	r3, #21
 800a890:	d8f6      	bhi.n	800a880 <_printf_i+0x28>
 800a892:	a101      	add	r1, pc, #4	; (adr r1, 800a898 <_printf_i+0x40>)
 800a894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a898:	0800a8f1 	.word	0x0800a8f1
 800a89c:	0800a905 	.word	0x0800a905
 800a8a0:	0800a881 	.word	0x0800a881
 800a8a4:	0800a881 	.word	0x0800a881
 800a8a8:	0800a881 	.word	0x0800a881
 800a8ac:	0800a881 	.word	0x0800a881
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800a881 	.word	0x0800a881
 800a8b8:	0800a881 	.word	0x0800a881
 800a8bc:	0800a881 	.word	0x0800a881
 800a8c0:	0800a881 	.word	0x0800a881
 800a8c4:	0800aa11 	.word	0x0800aa11
 800a8c8:	0800a935 	.word	0x0800a935
 800a8cc:	0800a9f3 	.word	0x0800a9f3
 800a8d0:	0800a881 	.word	0x0800a881
 800a8d4:	0800a881 	.word	0x0800a881
 800a8d8:	0800aa33 	.word	0x0800aa33
 800a8dc:	0800a881 	.word	0x0800a881
 800a8e0:	0800a935 	.word	0x0800a935
 800a8e4:	0800a881 	.word	0x0800a881
 800a8e8:	0800a881 	.word	0x0800a881
 800a8ec:	0800a9fb 	.word	0x0800a9fb
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	1d1a      	adds	r2, r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	602a      	str	r2, [r5, #0]
 800a8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a900:	2301      	movs	r3, #1
 800a902:	e0a3      	b.n	800aa4c <_printf_i+0x1f4>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	6829      	ldr	r1, [r5, #0]
 800a908:	0606      	lsls	r6, r0, #24
 800a90a:	f101 0304 	add.w	r3, r1, #4
 800a90e:	d50a      	bpl.n	800a926 <_printf_i+0xce>
 800a910:	680e      	ldr	r6, [r1, #0]
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	2e00      	cmp	r6, #0
 800a916:	da03      	bge.n	800a920 <_printf_i+0xc8>
 800a918:	232d      	movs	r3, #45	; 0x2d
 800a91a:	4276      	negs	r6, r6
 800a91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a920:	485e      	ldr	r0, [pc, #376]	; (800aa9c <_printf_i+0x244>)
 800a922:	230a      	movs	r3, #10
 800a924:	e019      	b.n	800a95a <_printf_i+0x102>
 800a926:	680e      	ldr	r6, [r1, #0]
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a92e:	bf18      	it	ne
 800a930:	b236      	sxthne	r6, r6
 800a932:	e7ef      	b.n	800a914 <_printf_i+0xbc>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	6820      	ldr	r0, [r4, #0]
 800a938:	1d19      	adds	r1, r3, #4
 800a93a:	6029      	str	r1, [r5, #0]
 800a93c:	0601      	lsls	r1, r0, #24
 800a93e:	d501      	bpl.n	800a944 <_printf_i+0xec>
 800a940:	681e      	ldr	r6, [r3, #0]
 800a942:	e002      	b.n	800a94a <_printf_i+0xf2>
 800a944:	0646      	lsls	r6, r0, #25
 800a946:	d5fb      	bpl.n	800a940 <_printf_i+0xe8>
 800a948:	881e      	ldrh	r6, [r3, #0]
 800a94a:	4854      	ldr	r0, [pc, #336]	; (800aa9c <_printf_i+0x244>)
 800a94c:	2f6f      	cmp	r7, #111	; 0x6f
 800a94e:	bf0c      	ite	eq
 800a950:	2308      	moveq	r3, #8
 800a952:	230a      	movne	r3, #10
 800a954:	2100      	movs	r1, #0
 800a956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a95a:	6865      	ldr	r5, [r4, #4]
 800a95c:	60a5      	str	r5, [r4, #8]
 800a95e:	2d00      	cmp	r5, #0
 800a960:	bfa2      	ittt	ge
 800a962:	6821      	ldrge	r1, [r4, #0]
 800a964:	f021 0104 	bicge.w	r1, r1, #4
 800a968:	6021      	strge	r1, [r4, #0]
 800a96a:	b90e      	cbnz	r6, 800a970 <_printf_i+0x118>
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	d04d      	beq.n	800aa0c <_printf_i+0x1b4>
 800a970:	4615      	mov	r5, r2
 800a972:	fbb6 f1f3 	udiv	r1, r6, r3
 800a976:	fb03 6711 	mls	r7, r3, r1, r6
 800a97a:	5dc7      	ldrb	r7, [r0, r7]
 800a97c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a980:	4637      	mov	r7, r6
 800a982:	42bb      	cmp	r3, r7
 800a984:	460e      	mov	r6, r1
 800a986:	d9f4      	bls.n	800a972 <_printf_i+0x11a>
 800a988:	2b08      	cmp	r3, #8
 800a98a:	d10b      	bne.n	800a9a4 <_printf_i+0x14c>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	07de      	lsls	r6, r3, #31
 800a990:	d508      	bpl.n	800a9a4 <_printf_i+0x14c>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	6861      	ldr	r1, [r4, #4]
 800a996:	4299      	cmp	r1, r3
 800a998:	bfde      	ittt	le
 800a99a:	2330      	movle	r3, #48	; 0x30
 800a99c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9a4:	1b52      	subs	r2, r2, r5
 800a9a6:	6122      	str	r2, [r4, #16]
 800a9a8:	f8cd a000 	str.w	sl, [sp]
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	aa03      	add	r2, sp, #12
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7ff fee2 	bl	800a77c <_printf_common>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d14c      	bne.n	800aa56 <_printf_i+0x1fe>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	b004      	add	sp, #16
 800a9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c6:	4835      	ldr	r0, [pc, #212]	; (800aa9c <_printf_i+0x244>)
 800a9c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9cc:	6829      	ldr	r1, [r5, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9d4:	6029      	str	r1, [r5, #0]
 800a9d6:	061d      	lsls	r5, r3, #24
 800a9d8:	d514      	bpl.n	800aa04 <_printf_i+0x1ac>
 800a9da:	07df      	lsls	r7, r3, #31
 800a9dc:	bf44      	itt	mi
 800a9de:	f043 0320 	orrmi.w	r3, r3, #32
 800a9e2:	6023      	strmi	r3, [r4, #0]
 800a9e4:	b91e      	cbnz	r6, 800a9ee <_printf_i+0x196>
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	f023 0320 	bic.w	r3, r3, #32
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	2310      	movs	r3, #16
 800a9f0:	e7b0      	b.n	800a954 <_printf_i+0xfc>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	f043 0320 	orr.w	r3, r3, #32
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	2378      	movs	r3, #120	; 0x78
 800a9fc:	4828      	ldr	r0, [pc, #160]	; (800aaa0 <_printf_i+0x248>)
 800a9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa02:	e7e3      	b.n	800a9cc <_printf_i+0x174>
 800aa04:	0659      	lsls	r1, r3, #25
 800aa06:	bf48      	it	mi
 800aa08:	b2b6      	uxthmi	r6, r6
 800aa0a:	e7e6      	b.n	800a9da <_printf_i+0x182>
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	e7bb      	b.n	800a988 <_printf_i+0x130>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	6826      	ldr	r6, [r4, #0]
 800aa14:	6961      	ldr	r1, [r4, #20]
 800aa16:	1d18      	adds	r0, r3, #4
 800aa18:	6028      	str	r0, [r5, #0]
 800aa1a:	0635      	lsls	r5, r6, #24
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	d501      	bpl.n	800aa24 <_printf_i+0x1cc>
 800aa20:	6019      	str	r1, [r3, #0]
 800aa22:	e002      	b.n	800aa2a <_printf_i+0x1d2>
 800aa24:	0670      	lsls	r0, r6, #25
 800aa26:	d5fb      	bpl.n	800aa20 <_printf_i+0x1c8>
 800aa28:	8019      	strh	r1, [r3, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6123      	str	r3, [r4, #16]
 800aa2e:	4615      	mov	r5, r2
 800aa30:	e7ba      	b.n	800a9a8 <_printf_i+0x150>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	1d1a      	adds	r2, r3, #4
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	681d      	ldr	r5, [r3, #0]
 800aa3a:	6862      	ldr	r2, [r4, #4]
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f7f5 fbee 	bl	8000220 <memchr>
 800aa44:	b108      	cbz	r0, 800aa4a <_printf_i+0x1f2>
 800aa46:	1b40      	subs	r0, r0, r5
 800aa48:	6060      	str	r0, [r4, #4]
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa54:	e7a8      	b.n	800a9a8 <_printf_i+0x150>
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	462a      	mov	r2, r5
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	47d0      	blx	sl
 800aa60:	3001      	adds	r0, #1
 800aa62:	d0ab      	beq.n	800a9bc <_printf_i+0x164>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	079b      	lsls	r3, r3, #30
 800aa68:	d413      	bmi.n	800aa92 <_printf_i+0x23a>
 800aa6a:	68e0      	ldr	r0, [r4, #12]
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	bfb8      	it	lt
 800aa72:	4618      	movlt	r0, r3
 800aa74:	e7a4      	b.n	800a9c0 <_printf_i+0x168>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	47d0      	blx	sl
 800aa80:	3001      	adds	r0, #1
 800aa82:	d09b      	beq.n	800a9bc <_printf_i+0x164>
 800aa84:	3501      	adds	r5, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	9903      	ldr	r1, [sp, #12]
 800aa8a:	1a5b      	subs	r3, r3, r1
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dcf2      	bgt.n	800aa76 <_printf_i+0x21e>
 800aa90:	e7eb      	b.n	800aa6a <_printf_i+0x212>
 800aa92:	2500      	movs	r5, #0
 800aa94:	f104 0619 	add.w	r6, r4, #25
 800aa98:	e7f5      	b.n	800aa86 <_printf_i+0x22e>
 800aa9a:	bf00      	nop
 800aa9c:	080111bc 	.word	0x080111bc
 800aaa0:	080111cd 	.word	0x080111cd

0800aaa4 <_scanf_float>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	b087      	sub	sp, #28
 800aaaa:	4617      	mov	r7, r2
 800aaac:	9303      	str	r3, [sp, #12]
 800aaae:	688b      	ldr	r3, [r1, #8]
 800aab0:	1e5a      	subs	r2, r3, #1
 800aab2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aab6:	bf83      	ittte	hi
 800aab8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aabc:	195b      	addhi	r3, r3, r5
 800aabe:	9302      	strhi	r3, [sp, #8]
 800aac0:	2300      	movls	r3, #0
 800aac2:	bf86      	itte	hi
 800aac4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aac8:	608b      	strhi	r3, [r1, #8]
 800aaca:	9302      	strls	r3, [sp, #8]
 800aacc:	680b      	ldr	r3, [r1, #0]
 800aace:	468b      	mov	fp, r1
 800aad0:	2500      	movs	r5, #0
 800aad2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aad6:	f84b 3b1c 	str.w	r3, [fp], #28
 800aada:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aade:	4680      	mov	r8, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	465e      	mov	r6, fp
 800aae4:	46aa      	mov	sl, r5
 800aae6:	46a9      	mov	r9, r5
 800aae8:	9501      	str	r5, [sp, #4]
 800aaea:	68a2      	ldr	r2, [r4, #8]
 800aaec:	b152      	cbz	r2, 800ab04 <_scanf_float+0x60>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	2b4e      	cmp	r3, #78	; 0x4e
 800aaf4:	d864      	bhi.n	800abc0 <_scanf_float+0x11c>
 800aaf6:	2b40      	cmp	r3, #64	; 0x40
 800aaf8:	d83c      	bhi.n	800ab74 <_scanf_float+0xd0>
 800aafa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aafe:	b2c8      	uxtb	r0, r1
 800ab00:	280e      	cmp	r0, #14
 800ab02:	d93a      	bls.n	800ab7a <_scanf_float+0xd6>
 800ab04:	f1b9 0f00 	cmp.w	r9, #0
 800ab08:	d003      	beq.n	800ab12 <_scanf_float+0x6e>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab16:	f1ba 0f01 	cmp.w	sl, #1
 800ab1a:	f200 8113 	bhi.w	800ad44 <_scanf_float+0x2a0>
 800ab1e:	455e      	cmp	r6, fp
 800ab20:	f200 8105 	bhi.w	800ad2e <_scanf_float+0x28a>
 800ab24:	2501      	movs	r5, #1
 800ab26:	4628      	mov	r0, r5
 800ab28:	b007      	add	sp, #28
 800ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ab32:	2a0d      	cmp	r2, #13
 800ab34:	d8e6      	bhi.n	800ab04 <_scanf_float+0x60>
 800ab36:	a101      	add	r1, pc, #4	; (adr r1, 800ab3c <_scanf_float+0x98>)
 800ab38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab3c:	0800ac7b 	.word	0x0800ac7b
 800ab40:	0800ab05 	.word	0x0800ab05
 800ab44:	0800ab05 	.word	0x0800ab05
 800ab48:	0800ab05 	.word	0x0800ab05
 800ab4c:	0800acdb 	.word	0x0800acdb
 800ab50:	0800acb3 	.word	0x0800acb3
 800ab54:	0800ab05 	.word	0x0800ab05
 800ab58:	0800ab05 	.word	0x0800ab05
 800ab5c:	0800ac89 	.word	0x0800ac89
 800ab60:	0800ab05 	.word	0x0800ab05
 800ab64:	0800ab05 	.word	0x0800ab05
 800ab68:	0800ab05 	.word	0x0800ab05
 800ab6c:	0800ab05 	.word	0x0800ab05
 800ab70:	0800ac41 	.word	0x0800ac41
 800ab74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ab78:	e7db      	b.n	800ab32 <_scanf_float+0x8e>
 800ab7a:	290e      	cmp	r1, #14
 800ab7c:	d8c2      	bhi.n	800ab04 <_scanf_float+0x60>
 800ab7e:	a001      	add	r0, pc, #4	; (adr r0, 800ab84 <_scanf_float+0xe0>)
 800ab80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab84:	0800ac33 	.word	0x0800ac33
 800ab88:	0800ab05 	.word	0x0800ab05
 800ab8c:	0800ac33 	.word	0x0800ac33
 800ab90:	0800acc7 	.word	0x0800acc7
 800ab94:	0800ab05 	.word	0x0800ab05
 800ab98:	0800abe1 	.word	0x0800abe1
 800ab9c:	0800ac1d 	.word	0x0800ac1d
 800aba0:	0800ac1d 	.word	0x0800ac1d
 800aba4:	0800ac1d 	.word	0x0800ac1d
 800aba8:	0800ac1d 	.word	0x0800ac1d
 800abac:	0800ac1d 	.word	0x0800ac1d
 800abb0:	0800ac1d 	.word	0x0800ac1d
 800abb4:	0800ac1d 	.word	0x0800ac1d
 800abb8:	0800ac1d 	.word	0x0800ac1d
 800abbc:	0800ac1d 	.word	0x0800ac1d
 800abc0:	2b6e      	cmp	r3, #110	; 0x6e
 800abc2:	d809      	bhi.n	800abd8 <_scanf_float+0x134>
 800abc4:	2b60      	cmp	r3, #96	; 0x60
 800abc6:	d8b2      	bhi.n	800ab2e <_scanf_float+0x8a>
 800abc8:	2b54      	cmp	r3, #84	; 0x54
 800abca:	d077      	beq.n	800acbc <_scanf_float+0x218>
 800abcc:	2b59      	cmp	r3, #89	; 0x59
 800abce:	d199      	bne.n	800ab04 <_scanf_float+0x60>
 800abd0:	2d07      	cmp	r5, #7
 800abd2:	d197      	bne.n	800ab04 <_scanf_float+0x60>
 800abd4:	2508      	movs	r5, #8
 800abd6:	e029      	b.n	800ac2c <_scanf_float+0x188>
 800abd8:	2b74      	cmp	r3, #116	; 0x74
 800abda:	d06f      	beq.n	800acbc <_scanf_float+0x218>
 800abdc:	2b79      	cmp	r3, #121	; 0x79
 800abde:	e7f6      	b.n	800abce <_scanf_float+0x12a>
 800abe0:	6821      	ldr	r1, [r4, #0]
 800abe2:	05c8      	lsls	r0, r1, #23
 800abe4:	d51a      	bpl.n	800ac1c <_scanf_float+0x178>
 800abe6:	9b02      	ldr	r3, [sp, #8]
 800abe8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800abec:	6021      	str	r1, [r4, #0]
 800abee:	f109 0901 	add.w	r9, r9, #1
 800abf2:	b11b      	cbz	r3, 800abfc <_scanf_float+0x158>
 800abf4:	3b01      	subs	r3, #1
 800abf6:	3201      	adds	r2, #1
 800abf8:	9302      	str	r3, [sp, #8]
 800abfa:	60a2      	str	r2, [r4, #8]
 800abfc:	68a3      	ldr	r3, [r4, #8]
 800abfe:	3b01      	subs	r3, #1
 800ac00:	60a3      	str	r3, [r4, #8]
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	3301      	adds	r3, #1
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	607b      	str	r3, [r7, #4]
 800ac10:	f340 8084 	ble.w	800ad1c <_scanf_float+0x278>
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	3301      	adds	r3, #1
 800ac18:	603b      	str	r3, [r7, #0]
 800ac1a:	e766      	b.n	800aaea <_scanf_float+0x46>
 800ac1c:	eb1a 0f05 	cmn.w	sl, r5
 800ac20:	f47f af70 	bne.w	800ab04 <_scanf_float+0x60>
 800ac24:	6822      	ldr	r2, [r4, #0]
 800ac26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ac2a:	6022      	str	r2, [r4, #0]
 800ac2c:	f806 3b01 	strb.w	r3, [r6], #1
 800ac30:	e7e4      	b.n	800abfc <_scanf_float+0x158>
 800ac32:	6822      	ldr	r2, [r4, #0]
 800ac34:	0610      	lsls	r0, r2, #24
 800ac36:	f57f af65 	bpl.w	800ab04 <_scanf_float+0x60>
 800ac3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac3e:	e7f4      	b.n	800ac2a <_scanf_float+0x186>
 800ac40:	f1ba 0f00 	cmp.w	sl, #0
 800ac44:	d10e      	bne.n	800ac64 <_scanf_float+0x1c0>
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	d10e      	bne.n	800ac6a <_scanf_float+0x1c6>
 800ac4c:	6822      	ldr	r2, [r4, #0]
 800ac4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac56:	d108      	bne.n	800ac6a <_scanf_float+0x1c6>
 800ac58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	f04f 0a01 	mov.w	sl, #1
 800ac62:	e7e3      	b.n	800ac2c <_scanf_float+0x188>
 800ac64:	f1ba 0f02 	cmp.w	sl, #2
 800ac68:	d055      	beq.n	800ad16 <_scanf_float+0x272>
 800ac6a:	2d01      	cmp	r5, #1
 800ac6c:	d002      	beq.n	800ac74 <_scanf_float+0x1d0>
 800ac6e:	2d04      	cmp	r5, #4
 800ac70:	f47f af48 	bne.w	800ab04 <_scanf_float+0x60>
 800ac74:	3501      	adds	r5, #1
 800ac76:	b2ed      	uxtb	r5, r5
 800ac78:	e7d8      	b.n	800ac2c <_scanf_float+0x188>
 800ac7a:	f1ba 0f01 	cmp.w	sl, #1
 800ac7e:	f47f af41 	bne.w	800ab04 <_scanf_float+0x60>
 800ac82:	f04f 0a02 	mov.w	sl, #2
 800ac86:	e7d1      	b.n	800ac2c <_scanf_float+0x188>
 800ac88:	b97d      	cbnz	r5, 800acaa <_scanf_float+0x206>
 800ac8a:	f1b9 0f00 	cmp.w	r9, #0
 800ac8e:	f47f af3c 	bne.w	800ab0a <_scanf_float+0x66>
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac9c:	f47f af39 	bne.w	800ab12 <_scanf_float+0x6e>
 800aca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aca4:	6022      	str	r2, [r4, #0]
 800aca6:	2501      	movs	r5, #1
 800aca8:	e7c0      	b.n	800ac2c <_scanf_float+0x188>
 800acaa:	2d03      	cmp	r5, #3
 800acac:	d0e2      	beq.n	800ac74 <_scanf_float+0x1d0>
 800acae:	2d05      	cmp	r5, #5
 800acb0:	e7de      	b.n	800ac70 <_scanf_float+0x1cc>
 800acb2:	2d02      	cmp	r5, #2
 800acb4:	f47f af26 	bne.w	800ab04 <_scanf_float+0x60>
 800acb8:	2503      	movs	r5, #3
 800acba:	e7b7      	b.n	800ac2c <_scanf_float+0x188>
 800acbc:	2d06      	cmp	r5, #6
 800acbe:	f47f af21 	bne.w	800ab04 <_scanf_float+0x60>
 800acc2:	2507      	movs	r5, #7
 800acc4:	e7b2      	b.n	800ac2c <_scanf_float+0x188>
 800acc6:	6822      	ldr	r2, [r4, #0]
 800acc8:	0591      	lsls	r1, r2, #22
 800acca:	f57f af1b 	bpl.w	800ab04 <_scanf_float+0x60>
 800acce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800acd2:	6022      	str	r2, [r4, #0]
 800acd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800acd8:	e7a8      	b.n	800ac2c <_scanf_float+0x188>
 800acda:	6822      	ldr	r2, [r4, #0]
 800acdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ace0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ace4:	d006      	beq.n	800acf4 <_scanf_float+0x250>
 800ace6:	0550      	lsls	r0, r2, #21
 800ace8:	f57f af0c 	bpl.w	800ab04 <_scanf_float+0x60>
 800acec:	f1b9 0f00 	cmp.w	r9, #0
 800acf0:	f43f af0f 	beq.w	800ab12 <_scanf_float+0x6e>
 800acf4:	0591      	lsls	r1, r2, #22
 800acf6:	bf58      	it	pl
 800acf8:	9901      	ldrpl	r1, [sp, #4]
 800acfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800acfe:	bf58      	it	pl
 800ad00:	eba9 0101 	subpl.w	r1, r9, r1
 800ad04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ad08:	bf58      	it	pl
 800ad0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad0e:	6022      	str	r2, [r4, #0]
 800ad10:	f04f 0900 	mov.w	r9, #0
 800ad14:	e78a      	b.n	800ac2c <_scanf_float+0x188>
 800ad16:	f04f 0a03 	mov.w	sl, #3
 800ad1a:	e787      	b.n	800ac2c <_scanf_float+0x188>
 800ad1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad20:	4639      	mov	r1, r7
 800ad22:	4640      	mov	r0, r8
 800ad24:	4798      	blx	r3
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f43f aedf 	beq.w	800aaea <_scanf_float+0x46>
 800ad2c:	e6ea      	b.n	800ab04 <_scanf_float+0x60>
 800ad2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad36:	463a      	mov	r2, r7
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4798      	blx	r3
 800ad3c:	6923      	ldr	r3, [r4, #16]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	e6ec      	b.n	800ab1e <_scanf_float+0x7a>
 800ad44:	1e6b      	subs	r3, r5, #1
 800ad46:	2b06      	cmp	r3, #6
 800ad48:	d825      	bhi.n	800ad96 <_scanf_float+0x2f2>
 800ad4a:	2d02      	cmp	r5, #2
 800ad4c:	d836      	bhi.n	800adbc <_scanf_float+0x318>
 800ad4e:	455e      	cmp	r6, fp
 800ad50:	f67f aee8 	bls.w	800ab24 <_scanf_float+0x80>
 800ad54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4640      	mov	r0, r8
 800ad60:	4798      	blx	r3
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	e7f1      	b.n	800ad4e <_scanf_float+0x2aa>
 800ad6a:	9802      	ldr	r0, [sp, #8]
 800ad6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ad74:	9002      	str	r0, [sp, #8]
 800ad76:	463a      	mov	r2, r7
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4798      	blx	r3
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad86:	fa5f fa8a 	uxtb.w	sl, sl
 800ad8a:	f1ba 0f02 	cmp.w	sl, #2
 800ad8e:	d1ec      	bne.n	800ad6a <_scanf_float+0x2c6>
 800ad90:	3d03      	subs	r5, #3
 800ad92:	b2ed      	uxtb	r5, r5
 800ad94:	1b76      	subs	r6, r6, r5
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	05da      	lsls	r2, r3, #23
 800ad9a:	d52f      	bpl.n	800adfc <_scanf_float+0x358>
 800ad9c:	055b      	lsls	r3, r3, #21
 800ad9e:	d510      	bpl.n	800adc2 <_scanf_float+0x31e>
 800ada0:	455e      	cmp	r6, fp
 800ada2:	f67f aebf 	bls.w	800ab24 <_scanf_float+0x80>
 800ada6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adae:	463a      	mov	r2, r7
 800adb0:	4640      	mov	r0, r8
 800adb2:	4798      	blx	r3
 800adb4:	6923      	ldr	r3, [r4, #16]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	e7f1      	b.n	800ada0 <_scanf_float+0x2fc>
 800adbc:	46aa      	mov	sl, r5
 800adbe:	9602      	str	r6, [sp, #8]
 800adc0:	e7df      	b.n	800ad82 <_scanf_float+0x2de>
 800adc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	2965      	cmp	r1, #101	; 0x65
 800adca:	f103 33ff 	add.w	r3, r3, #4294967295
 800adce:	f106 35ff 	add.w	r5, r6, #4294967295
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	d00c      	beq.n	800adf0 <_scanf_float+0x34c>
 800add6:	2945      	cmp	r1, #69	; 0x45
 800add8:	d00a      	beq.n	800adf0 <_scanf_float+0x34c>
 800adda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adde:	463a      	mov	r2, r7
 800ade0:	4640      	mov	r0, r8
 800ade2:	4798      	blx	r3
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800adea:	3b01      	subs	r3, #1
 800adec:	1eb5      	subs	r5, r6, #2
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adf4:	463a      	mov	r2, r7
 800adf6:	4640      	mov	r0, r8
 800adf8:	4798      	blx	r3
 800adfa:	462e      	mov	r6, r5
 800adfc:	6825      	ldr	r5, [r4, #0]
 800adfe:	f015 0510 	ands.w	r5, r5, #16
 800ae02:	d159      	bne.n	800aeb8 <_scanf_float+0x414>
 800ae04:	7035      	strb	r5, [r6, #0]
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae10:	d11b      	bne.n	800ae4a <_scanf_float+0x3a6>
 800ae12:	9b01      	ldr	r3, [sp, #4]
 800ae14:	454b      	cmp	r3, r9
 800ae16:	eba3 0209 	sub.w	r2, r3, r9
 800ae1a:	d123      	bne.n	800ae64 <_scanf_float+0x3c0>
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4659      	mov	r1, fp
 800ae20:	4640      	mov	r0, r8
 800ae22:	f000 ff27 	bl	800bc74 <_strtod_r>
 800ae26:	6822      	ldr	r2, [r4, #0]
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	f012 0f02 	tst.w	r2, #2
 800ae2e:	ec57 6b10 	vmov	r6, r7, d0
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	d021      	beq.n	800ae7a <_scanf_float+0x3d6>
 800ae36:	9903      	ldr	r1, [sp, #12]
 800ae38:	1d1a      	adds	r2, r3, #4
 800ae3a:	600a      	str	r2, [r1, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	e9c3 6700 	strd	r6, r7, [r3]
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60e3      	str	r3, [r4, #12]
 800ae48:	e66d      	b.n	800ab26 <_scanf_float+0x82>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0e5      	beq.n	800ae1c <_scanf_float+0x378>
 800ae50:	9905      	ldr	r1, [sp, #20]
 800ae52:	230a      	movs	r3, #10
 800ae54:	462a      	mov	r2, r5
 800ae56:	3101      	adds	r1, #1
 800ae58:	4640      	mov	r0, r8
 800ae5a:	f000 ff93 	bl	800bd84 <_strtol_r>
 800ae5e:	9b04      	ldr	r3, [sp, #16]
 800ae60:	9e05      	ldr	r6, [sp, #20]
 800ae62:	1ac2      	subs	r2, r0, r3
 800ae64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ae68:	429e      	cmp	r6, r3
 800ae6a:	bf28      	it	cs
 800ae6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ae70:	4912      	ldr	r1, [pc, #72]	; (800aebc <_scanf_float+0x418>)
 800ae72:	4630      	mov	r0, r6
 800ae74:	f000 f82c 	bl	800aed0 <siprintf>
 800ae78:	e7d0      	b.n	800ae1c <_scanf_float+0x378>
 800ae7a:	9903      	ldr	r1, [sp, #12]
 800ae7c:	f012 0f04 	tst.w	r2, #4
 800ae80:	f103 0204 	add.w	r2, r3, #4
 800ae84:	600a      	str	r2, [r1, #0]
 800ae86:	d1d9      	bne.n	800ae3c <_scanf_float+0x398>
 800ae88:	f8d3 8000 	ldr.w	r8, [r3]
 800ae8c:	ee10 2a10 	vmov	r2, s0
 800ae90:	ee10 0a10 	vmov	r0, s0
 800ae94:	463b      	mov	r3, r7
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 fe68 	bl	8000b6c <__aeabi_dcmpun>
 800ae9c:	b128      	cbz	r0, 800aeaa <_scanf_float+0x406>
 800ae9e:	4808      	ldr	r0, [pc, #32]	; (800aec0 <_scanf_float+0x41c>)
 800aea0:	f000 f810 	bl	800aec4 <nanf>
 800aea4:	ed88 0a00 	vstr	s0, [r8]
 800aea8:	e7cb      	b.n	800ae42 <_scanf_float+0x39e>
 800aeaa:	4630      	mov	r0, r6
 800aeac:	4639      	mov	r1, r7
 800aeae:	f7f5 febb 	bl	8000c28 <__aeabi_d2f>
 800aeb2:	f8c8 0000 	str.w	r0, [r8]
 800aeb6:	e7c4      	b.n	800ae42 <_scanf_float+0x39e>
 800aeb8:	2500      	movs	r5, #0
 800aeba:	e634      	b.n	800ab26 <_scanf_float+0x82>
 800aebc:	080111de 	.word	0x080111de
 800aec0:	08011603 	.word	0x08011603

0800aec4 <nanf>:
 800aec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aecc <nanf+0x8>
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	7fc00000 	.word	0x7fc00000

0800aed0 <siprintf>:
 800aed0:	b40e      	push	{r1, r2, r3}
 800aed2:	b500      	push	{lr}
 800aed4:	b09c      	sub	sp, #112	; 0x70
 800aed6:	ab1d      	add	r3, sp, #116	; 0x74
 800aed8:	9002      	str	r0, [sp, #8]
 800aeda:	9006      	str	r0, [sp, #24]
 800aedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aee0:	4809      	ldr	r0, [pc, #36]	; (800af08 <siprintf+0x38>)
 800aee2:	9107      	str	r1, [sp, #28]
 800aee4:	9104      	str	r1, [sp, #16]
 800aee6:	4909      	ldr	r1, [pc, #36]	; (800af0c <siprintf+0x3c>)
 800aee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeec:	9105      	str	r1, [sp, #20]
 800aeee:	6800      	ldr	r0, [r0, #0]
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	a902      	add	r1, sp, #8
 800aef4:	f002 ffa8 	bl	800de48 <_svfiprintf_r>
 800aef8:	9b02      	ldr	r3, [sp, #8]
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	b01c      	add	sp, #112	; 0x70
 800af00:	f85d eb04 	ldr.w	lr, [sp], #4
 800af04:	b003      	add	sp, #12
 800af06:	4770      	bx	lr
 800af08:	20000014 	.word	0x20000014
 800af0c:	ffff0208 	.word	0xffff0208

0800af10 <siscanf>:
 800af10:	b40e      	push	{r1, r2, r3}
 800af12:	b510      	push	{r4, lr}
 800af14:	b09f      	sub	sp, #124	; 0x7c
 800af16:	ac21      	add	r4, sp, #132	; 0x84
 800af18:	f44f 7101 	mov.w	r1, #516	; 0x204
 800af1c:	f854 2b04 	ldr.w	r2, [r4], #4
 800af20:	9201      	str	r2, [sp, #4]
 800af22:	f8ad 101c 	strh.w	r1, [sp, #28]
 800af26:	9004      	str	r0, [sp, #16]
 800af28:	9008      	str	r0, [sp, #32]
 800af2a:	f7f5 f971 	bl	8000210 <strlen>
 800af2e:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <siscanf+0x50>)
 800af30:	9005      	str	r0, [sp, #20]
 800af32:	9009      	str	r0, [sp, #36]	; 0x24
 800af34:	930d      	str	r3, [sp, #52]	; 0x34
 800af36:	480b      	ldr	r0, [pc, #44]	; (800af64 <siscanf+0x54>)
 800af38:	9a01      	ldr	r2, [sp, #4]
 800af3a:	6800      	ldr	r0, [r0, #0]
 800af3c:	9403      	str	r4, [sp, #12]
 800af3e:	2300      	movs	r3, #0
 800af40:	9311      	str	r3, [sp, #68]	; 0x44
 800af42:	9316      	str	r3, [sp, #88]	; 0x58
 800af44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af48:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af4c:	a904      	add	r1, sp, #16
 800af4e:	4623      	mov	r3, r4
 800af50:	f003 f8d4 	bl	800e0fc <__ssvfiscanf_r>
 800af54:	b01f      	add	sp, #124	; 0x7c
 800af56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af5a:	b003      	add	sp, #12
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	0800af8b 	.word	0x0800af8b
 800af64:	20000014 	.word	0x20000014

0800af68 <__sread>:
 800af68:	b510      	push	{r4, lr}
 800af6a:	460c      	mov	r4, r1
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	f003 fb8e 	bl	800e690 <_read_r>
 800af74:	2800      	cmp	r0, #0
 800af76:	bfab      	itete	ge
 800af78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af7a:	89a3      	ldrhlt	r3, [r4, #12]
 800af7c:	181b      	addge	r3, r3, r0
 800af7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af82:	bfac      	ite	ge
 800af84:	6563      	strge	r3, [r4, #84]	; 0x54
 800af86:	81a3      	strhlt	r3, [r4, #12]
 800af88:	bd10      	pop	{r4, pc}

0800af8a <__seofread>:
 800af8a:	2000      	movs	r0, #0
 800af8c:	4770      	bx	lr

0800af8e <__swrite>:
 800af8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af92:	461f      	mov	r7, r3
 800af94:	898b      	ldrh	r3, [r1, #12]
 800af96:	05db      	lsls	r3, r3, #23
 800af98:	4605      	mov	r5, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	4616      	mov	r6, r2
 800af9e:	d505      	bpl.n	800afac <__swrite+0x1e>
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	2302      	movs	r3, #2
 800afa6:	2200      	movs	r2, #0
 800afa8:	f002 f900 	bl	800d1ac <_lseek_r>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	4628      	mov	r0, r5
 800afbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	f000 bee1 	b.w	800bd88 <_write_r>

0800afc6 <__sseek>:
 800afc6:	b510      	push	{r4, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afce:	f002 f8ed 	bl	800d1ac <_lseek_r>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	bf15      	itete	ne
 800afd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800afda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afe2:	81a3      	strheq	r3, [r4, #12]
 800afe4:	bf18      	it	ne
 800afe6:	81a3      	strhne	r3, [r4, #12]
 800afe8:	bd10      	pop	{r4, pc}

0800afea <__sclose>:
 800afea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afee:	f000 bedd 	b.w	800bdac <_close_r>

0800aff2 <strcpy>:
 800aff2:	4603      	mov	r3, r0
 800aff4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aff8:	f803 2b01 	strb.w	r2, [r3], #1
 800affc:	2a00      	cmp	r2, #0
 800affe:	d1f9      	bne.n	800aff4 <strcpy+0x2>
 800b000:	4770      	bx	lr

0800b002 <strstr>:
 800b002:	780a      	ldrb	r2, [r1, #0]
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	b96a      	cbnz	r2, 800b024 <strstr+0x22>
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d109      	bne.n	800b022 <strstr+0x20>
 800b00e:	460c      	mov	r4, r1
 800b010:	4605      	mov	r5, r0
 800b012:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0f6      	beq.n	800b008 <strstr+0x6>
 800b01a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b01e:	429e      	cmp	r6, r3
 800b020:	d0f7      	beq.n	800b012 <strstr+0x10>
 800b022:	3001      	adds	r0, #1
 800b024:	7803      	ldrb	r3, [r0, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1ef      	bne.n	800b00a <strstr+0x8>
 800b02a:	4618      	mov	r0, r3
 800b02c:	e7ec      	b.n	800b008 <strstr+0x6>

0800b02e <sulp>:
 800b02e:	b570      	push	{r4, r5, r6, lr}
 800b030:	4604      	mov	r4, r0
 800b032:	460d      	mov	r5, r1
 800b034:	ec45 4b10 	vmov	d0, r4, r5
 800b038:	4616      	mov	r6, r2
 800b03a:	f002 fc63 	bl	800d904 <__ulp>
 800b03e:	ec51 0b10 	vmov	r0, r1, d0
 800b042:	b17e      	cbz	r6, 800b064 <sulp+0x36>
 800b044:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b048:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd09      	ble.n	800b064 <sulp+0x36>
 800b050:	051b      	lsls	r3, r3, #20
 800b052:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b056:	2400      	movs	r4, #0
 800b058:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b05c:	4622      	mov	r2, r4
 800b05e:	462b      	mov	r3, r5
 800b060:	f7f5 faea 	bl	8000638 <__aeabi_dmul>
 800b064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b068 <_strtod_l>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	ed2d 8b02 	vpush	{d8}
 800b070:	b09d      	sub	sp, #116	; 0x74
 800b072:	461f      	mov	r7, r3
 800b074:	2300      	movs	r3, #0
 800b076:	9318      	str	r3, [sp, #96]	; 0x60
 800b078:	4ba2      	ldr	r3, [pc, #648]	; (800b304 <_strtod_l+0x29c>)
 800b07a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	9305      	str	r3, [sp, #20]
 800b080:	4604      	mov	r4, r0
 800b082:	4618      	mov	r0, r3
 800b084:	4688      	mov	r8, r1
 800b086:	f7f5 f8c3 	bl	8000210 <strlen>
 800b08a:	f04f 0a00 	mov.w	sl, #0
 800b08e:	4605      	mov	r5, r0
 800b090:	f04f 0b00 	mov.w	fp, #0
 800b094:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b09a:	781a      	ldrb	r2, [r3, #0]
 800b09c:	2a2b      	cmp	r2, #43	; 0x2b
 800b09e:	d04e      	beq.n	800b13e <_strtod_l+0xd6>
 800b0a0:	d83b      	bhi.n	800b11a <_strtod_l+0xb2>
 800b0a2:	2a0d      	cmp	r2, #13
 800b0a4:	d834      	bhi.n	800b110 <_strtod_l+0xa8>
 800b0a6:	2a08      	cmp	r2, #8
 800b0a8:	d834      	bhi.n	800b114 <_strtod_l+0xac>
 800b0aa:	2a00      	cmp	r2, #0
 800b0ac:	d03e      	beq.n	800b12c <_strtod_l+0xc4>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b0b4:	7833      	ldrb	r3, [r6, #0]
 800b0b6:	2b30      	cmp	r3, #48	; 0x30
 800b0b8:	f040 80b0 	bne.w	800b21c <_strtod_l+0x1b4>
 800b0bc:	7873      	ldrb	r3, [r6, #1]
 800b0be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0c2:	2b58      	cmp	r3, #88	; 0x58
 800b0c4:	d168      	bne.n	800b198 <_strtod_l+0x130>
 800b0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	ab18      	add	r3, sp, #96	; 0x60
 800b0cc:	9702      	str	r7, [sp, #8]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4a8d      	ldr	r2, [pc, #564]	; (800b308 <_strtod_l+0x2a0>)
 800b0d2:	ab19      	add	r3, sp, #100	; 0x64
 800b0d4:	a917      	add	r1, sp, #92	; 0x5c
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f001 fd5c 	bl	800cb94 <__gethex>
 800b0dc:	f010 0707 	ands.w	r7, r0, #7
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	d005      	beq.n	800b0f0 <_strtod_l+0x88>
 800b0e4:	2f06      	cmp	r7, #6
 800b0e6:	d12c      	bne.n	800b142 <_strtod_l+0xda>
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800b0ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b0f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f040 8590 	bne.w	800bc18 <_strtod_l+0xbb0>
 800b0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fa:	b1eb      	cbz	r3, 800b138 <_strtod_l+0xd0>
 800b0fc:	4652      	mov	r2, sl
 800b0fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b102:	ec43 2b10 	vmov	d0, r2, r3
 800b106:	b01d      	add	sp, #116	; 0x74
 800b108:	ecbd 8b02 	vpop	{d8}
 800b10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b110:	2a20      	cmp	r2, #32
 800b112:	d1cc      	bne.n	800b0ae <_strtod_l+0x46>
 800b114:	3301      	adds	r3, #1
 800b116:	9317      	str	r3, [sp, #92]	; 0x5c
 800b118:	e7be      	b.n	800b098 <_strtod_l+0x30>
 800b11a:	2a2d      	cmp	r2, #45	; 0x2d
 800b11c:	d1c7      	bne.n	800b0ae <_strtod_l+0x46>
 800b11e:	2201      	movs	r2, #1
 800b120:	920a      	str	r2, [sp, #40]	; 0x28
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	9217      	str	r2, [sp, #92]	; 0x5c
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1c2      	bne.n	800b0b2 <_strtod_l+0x4a>
 800b12c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b12e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b132:	2b00      	cmp	r3, #0
 800b134:	f040 856e 	bne.w	800bc14 <_strtod_l+0xbac>
 800b138:	4652      	mov	r2, sl
 800b13a:	465b      	mov	r3, fp
 800b13c:	e7e1      	b.n	800b102 <_strtod_l+0x9a>
 800b13e:	2200      	movs	r2, #0
 800b140:	e7ee      	b.n	800b120 <_strtod_l+0xb8>
 800b142:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b144:	b13a      	cbz	r2, 800b156 <_strtod_l+0xee>
 800b146:	2135      	movs	r1, #53	; 0x35
 800b148:	a81a      	add	r0, sp, #104	; 0x68
 800b14a:	f002 fce6 	bl	800db1a <__copybits>
 800b14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b150:	4620      	mov	r0, r4
 800b152:	f002 f8a5 	bl	800d2a0 <_Bfree>
 800b156:	3f01      	subs	r7, #1
 800b158:	2f04      	cmp	r7, #4
 800b15a:	d806      	bhi.n	800b16a <_strtod_l+0x102>
 800b15c:	e8df f007 	tbb	[pc, r7]
 800b160:	1714030a 	.word	0x1714030a
 800b164:	0a          	.byte	0x0a
 800b165:	00          	.byte	0x00
 800b166:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b16a:	0728      	lsls	r0, r5, #28
 800b16c:	d5c0      	bpl.n	800b0f0 <_strtod_l+0x88>
 800b16e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b172:	e7bd      	b.n	800b0f0 <_strtod_l+0x88>
 800b174:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b178:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b17a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b17e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b182:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b186:	e7f0      	b.n	800b16a <_strtod_l+0x102>
 800b188:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b30c <_strtod_l+0x2a4>
 800b18c:	e7ed      	b.n	800b16a <_strtod_l+0x102>
 800b18e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b192:	f04f 3aff 	mov.w	sl, #4294967295
 800b196:	e7e8      	b.n	800b16a <_strtod_l+0x102>
 800b198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b19e:	785b      	ldrb	r3, [r3, #1]
 800b1a0:	2b30      	cmp	r3, #48	; 0x30
 800b1a2:	d0f9      	beq.n	800b198 <_strtod_l+0x130>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0a3      	beq.n	800b0f0 <_strtod_l+0x88>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f04f 0900 	mov.w	r9, #0
 800b1ae:	9304      	str	r3, [sp, #16]
 800b1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1b2:	9308      	str	r3, [sp, #32]
 800b1b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800b1b8:	464f      	mov	r7, r9
 800b1ba:	220a      	movs	r2, #10
 800b1bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b1be:	7806      	ldrb	r6, [r0, #0]
 800b1c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b1c4:	b2d9      	uxtb	r1, r3
 800b1c6:	2909      	cmp	r1, #9
 800b1c8:	d92a      	bls.n	800b220 <_strtod_l+0x1b8>
 800b1ca:	9905      	ldr	r1, [sp, #20]
 800b1cc:	462a      	mov	r2, r5
 800b1ce:	f003 fac3 	bl	800e758 <strncmp>
 800b1d2:	b398      	cbz	r0, 800b23c <_strtod_l+0x1d4>
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	4632      	mov	r2, r6
 800b1d8:	463d      	mov	r5, r7
 800b1da:	9005      	str	r0, [sp, #20]
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2a65      	cmp	r2, #101	; 0x65
 800b1e0:	d001      	beq.n	800b1e6 <_strtod_l+0x17e>
 800b1e2:	2a45      	cmp	r2, #69	; 0x45
 800b1e4:	d118      	bne.n	800b218 <_strtod_l+0x1b0>
 800b1e6:	b91d      	cbnz	r5, 800b1f0 <_strtod_l+0x188>
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	4302      	orrs	r2, r0
 800b1ec:	d09e      	beq.n	800b12c <_strtod_l+0xc4>
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b1f4:	f108 0201 	add.w	r2, r8, #1
 800b1f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b1fe:	2a2b      	cmp	r2, #43	; 0x2b
 800b200:	d075      	beq.n	800b2ee <_strtod_l+0x286>
 800b202:	2a2d      	cmp	r2, #45	; 0x2d
 800b204:	d07b      	beq.n	800b2fe <_strtod_l+0x296>
 800b206:	f04f 0c00 	mov.w	ip, #0
 800b20a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b20e:	2909      	cmp	r1, #9
 800b210:	f240 8082 	bls.w	800b318 <_strtod_l+0x2b0>
 800b214:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b218:	2600      	movs	r6, #0
 800b21a:	e09d      	b.n	800b358 <_strtod_l+0x2f0>
 800b21c:	2300      	movs	r3, #0
 800b21e:	e7c4      	b.n	800b1aa <_strtod_l+0x142>
 800b220:	2f08      	cmp	r7, #8
 800b222:	bfd8      	it	le
 800b224:	9907      	ldrle	r1, [sp, #28]
 800b226:	f100 0001 	add.w	r0, r0, #1
 800b22a:	bfda      	itte	le
 800b22c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b230:	9307      	strle	r3, [sp, #28]
 800b232:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b236:	3701      	adds	r7, #1
 800b238:	9017      	str	r0, [sp, #92]	; 0x5c
 800b23a:	e7bf      	b.n	800b1bc <_strtod_l+0x154>
 800b23c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b23e:	195a      	adds	r2, r3, r5
 800b240:	9217      	str	r2, [sp, #92]	; 0x5c
 800b242:	5d5a      	ldrb	r2, [r3, r5]
 800b244:	2f00      	cmp	r7, #0
 800b246:	d037      	beq.n	800b2b8 <_strtod_l+0x250>
 800b248:	9005      	str	r0, [sp, #20]
 800b24a:	463d      	mov	r5, r7
 800b24c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b250:	2b09      	cmp	r3, #9
 800b252:	d912      	bls.n	800b27a <_strtod_l+0x212>
 800b254:	2301      	movs	r3, #1
 800b256:	e7c2      	b.n	800b1de <_strtod_l+0x176>
 800b258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b25e:	785a      	ldrb	r2, [r3, #1]
 800b260:	3001      	adds	r0, #1
 800b262:	2a30      	cmp	r2, #48	; 0x30
 800b264:	d0f8      	beq.n	800b258 <_strtod_l+0x1f0>
 800b266:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b26a:	2b08      	cmp	r3, #8
 800b26c:	f200 84d9 	bhi.w	800bc22 <_strtod_l+0xbba>
 800b270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b272:	9005      	str	r0, [sp, #20]
 800b274:	2000      	movs	r0, #0
 800b276:	9308      	str	r3, [sp, #32]
 800b278:	4605      	mov	r5, r0
 800b27a:	3a30      	subs	r2, #48	; 0x30
 800b27c:	f100 0301 	add.w	r3, r0, #1
 800b280:	d014      	beq.n	800b2ac <_strtod_l+0x244>
 800b282:	9905      	ldr	r1, [sp, #20]
 800b284:	4419      	add	r1, r3
 800b286:	9105      	str	r1, [sp, #20]
 800b288:	462b      	mov	r3, r5
 800b28a:	eb00 0e05 	add.w	lr, r0, r5
 800b28e:	210a      	movs	r1, #10
 800b290:	4573      	cmp	r3, lr
 800b292:	d113      	bne.n	800b2bc <_strtod_l+0x254>
 800b294:	182b      	adds	r3, r5, r0
 800b296:	2b08      	cmp	r3, #8
 800b298:	f105 0501 	add.w	r5, r5, #1
 800b29c:	4405      	add	r5, r0
 800b29e:	dc1c      	bgt.n	800b2da <_strtod_l+0x272>
 800b2a0:	9907      	ldr	r1, [sp, #28]
 800b2a2:	230a      	movs	r3, #10
 800b2a4:	fb03 2301 	mla	r3, r3, r1, r2
 800b2a8:	9307      	str	r3, [sp, #28]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2ae:	1c51      	adds	r1, r2, #1
 800b2b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800b2b2:	7852      	ldrb	r2, [r2, #1]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	e7c9      	b.n	800b24c <_strtod_l+0x1e4>
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	e7d2      	b.n	800b262 <_strtod_l+0x1fa>
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	dc04      	bgt.n	800b2ca <_strtod_l+0x262>
 800b2c0:	9e07      	ldr	r6, [sp, #28]
 800b2c2:	434e      	muls	r6, r1
 800b2c4:	9607      	str	r6, [sp, #28]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	e7e2      	b.n	800b290 <_strtod_l+0x228>
 800b2ca:	f103 0c01 	add.w	ip, r3, #1
 800b2ce:	f1bc 0f10 	cmp.w	ip, #16
 800b2d2:	bfd8      	it	le
 800b2d4:	fb01 f909 	mulle.w	r9, r1, r9
 800b2d8:	e7f5      	b.n	800b2c6 <_strtod_l+0x25e>
 800b2da:	2d10      	cmp	r5, #16
 800b2dc:	bfdc      	itt	le
 800b2de:	230a      	movle	r3, #10
 800b2e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b2e4:	e7e1      	b.n	800b2aa <_strtod_l+0x242>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9305      	str	r3, [sp, #20]
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e77c      	b.n	800b1e8 <_strtod_l+0x180>
 800b2ee:	f04f 0c00 	mov.w	ip, #0
 800b2f2:	f108 0202 	add.w	r2, r8, #2
 800b2f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b2fc:	e785      	b.n	800b20a <_strtod_l+0x1a2>
 800b2fe:	f04f 0c01 	mov.w	ip, #1
 800b302:	e7f6      	b.n	800b2f2 <_strtod_l+0x28a>
 800b304:	08011430 	.word	0x08011430
 800b308:	080111e4 	.word	0x080111e4
 800b30c:	7ff00000 	.word	0x7ff00000
 800b310:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b312:	1c51      	adds	r1, r2, #1
 800b314:	9117      	str	r1, [sp, #92]	; 0x5c
 800b316:	7852      	ldrb	r2, [r2, #1]
 800b318:	2a30      	cmp	r2, #48	; 0x30
 800b31a:	d0f9      	beq.n	800b310 <_strtod_l+0x2a8>
 800b31c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b320:	2908      	cmp	r1, #8
 800b322:	f63f af79 	bhi.w	800b218 <_strtod_l+0x1b0>
 800b326:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b32a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b32c:	9206      	str	r2, [sp, #24]
 800b32e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b330:	1c51      	adds	r1, r2, #1
 800b332:	9117      	str	r1, [sp, #92]	; 0x5c
 800b334:	7852      	ldrb	r2, [r2, #1]
 800b336:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b33a:	2e09      	cmp	r6, #9
 800b33c:	d937      	bls.n	800b3ae <_strtod_l+0x346>
 800b33e:	9e06      	ldr	r6, [sp, #24]
 800b340:	1b89      	subs	r1, r1, r6
 800b342:	2908      	cmp	r1, #8
 800b344:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b348:	dc02      	bgt.n	800b350 <_strtod_l+0x2e8>
 800b34a:	4576      	cmp	r6, lr
 800b34c:	bfa8      	it	ge
 800b34e:	4676      	movge	r6, lr
 800b350:	f1bc 0f00 	cmp.w	ip, #0
 800b354:	d000      	beq.n	800b358 <_strtod_l+0x2f0>
 800b356:	4276      	negs	r6, r6
 800b358:	2d00      	cmp	r5, #0
 800b35a:	d14d      	bne.n	800b3f8 <_strtod_l+0x390>
 800b35c:	9904      	ldr	r1, [sp, #16]
 800b35e:	4301      	orrs	r1, r0
 800b360:	f47f aec6 	bne.w	800b0f0 <_strtod_l+0x88>
 800b364:	2b00      	cmp	r3, #0
 800b366:	f47f aee1 	bne.w	800b12c <_strtod_l+0xc4>
 800b36a:	2a69      	cmp	r2, #105	; 0x69
 800b36c:	d027      	beq.n	800b3be <_strtod_l+0x356>
 800b36e:	dc24      	bgt.n	800b3ba <_strtod_l+0x352>
 800b370:	2a49      	cmp	r2, #73	; 0x49
 800b372:	d024      	beq.n	800b3be <_strtod_l+0x356>
 800b374:	2a4e      	cmp	r2, #78	; 0x4e
 800b376:	f47f aed9 	bne.w	800b12c <_strtod_l+0xc4>
 800b37a:	499f      	ldr	r1, [pc, #636]	; (800b5f8 <_strtod_l+0x590>)
 800b37c:	a817      	add	r0, sp, #92	; 0x5c
 800b37e:	f001 fe61 	bl	800d044 <__match>
 800b382:	2800      	cmp	r0, #0
 800b384:	f43f aed2 	beq.w	800b12c <_strtod_l+0xc4>
 800b388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	2b28      	cmp	r3, #40	; 0x28
 800b38e:	d12d      	bne.n	800b3ec <_strtod_l+0x384>
 800b390:	499a      	ldr	r1, [pc, #616]	; (800b5fc <_strtod_l+0x594>)
 800b392:	aa1a      	add	r2, sp, #104	; 0x68
 800b394:	a817      	add	r0, sp, #92	; 0x5c
 800b396:	f001 fe69 	bl	800d06c <__hexnan>
 800b39a:	2805      	cmp	r0, #5
 800b39c:	d126      	bne.n	800b3ec <_strtod_l+0x384>
 800b39e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b3a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b3a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b3ac:	e6a0      	b.n	800b0f0 <_strtod_l+0x88>
 800b3ae:	210a      	movs	r1, #10
 800b3b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b3b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b3b8:	e7b9      	b.n	800b32e <_strtod_l+0x2c6>
 800b3ba:	2a6e      	cmp	r2, #110	; 0x6e
 800b3bc:	e7db      	b.n	800b376 <_strtod_l+0x30e>
 800b3be:	4990      	ldr	r1, [pc, #576]	; (800b600 <_strtod_l+0x598>)
 800b3c0:	a817      	add	r0, sp, #92	; 0x5c
 800b3c2:	f001 fe3f 	bl	800d044 <__match>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f43f aeb0 	beq.w	800b12c <_strtod_l+0xc4>
 800b3cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3ce:	498d      	ldr	r1, [pc, #564]	; (800b604 <_strtod_l+0x59c>)
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	a817      	add	r0, sp, #92	; 0x5c
 800b3d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b3d6:	f001 fe35 	bl	800d044 <__match>
 800b3da:	b910      	cbnz	r0, 800b3e2 <_strtod_l+0x37a>
 800b3dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3de:	3301      	adds	r3, #1
 800b3e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b3e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b614 <_strtod_l+0x5ac>
 800b3e6:	f04f 0a00 	mov.w	sl, #0
 800b3ea:	e681      	b.n	800b0f0 <_strtod_l+0x88>
 800b3ec:	4886      	ldr	r0, [pc, #536]	; (800b608 <_strtod_l+0x5a0>)
 800b3ee:	f003 f963 	bl	800e6b8 <nan>
 800b3f2:	ec5b ab10 	vmov	sl, fp, d0
 800b3f6:	e67b      	b.n	800b0f0 <_strtod_l+0x88>
 800b3f8:	9b05      	ldr	r3, [sp, #20]
 800b3fa:	9807      	ldr	r0, [sp, #28]
 800b3fc:	1af3      	subs	r3, r6, r3
 800b3fe:	2f00      	cmp	r7, #0
 800b400:	bf08      	it	eq
 800b402:	462f      	moveq	r7, r5
 800b404:	2d10      	cmp	r5, #16
 800b406:	9306      	str	r3, [sp, #24]
 800b408:	46a8      	mov	r8, r5
 800b40a:	bfa8      	it	ge
 800b40c:	f04f 0810 	movge.w	r8, #16
 800b410:	f7f5 f898 	bl	8000544 <__aeabi_ui2d>
 800b414:	2d09      	cmp	r5, #9
 800b416:	4682      	mov	sl, r0
 800b418:	468b      	mov	fp, r1
 800b41a:	dd13      	ble.n	800b444 <_strtod_l+0x3dc>
 800b41c:	4b7b      	ldr	r3, [pc, #492]	; (800b60c <_strtod_l+0x5a4>)
 800b41e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b422:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b426:	f7f5 f907 	bl	8000638 <__aeabi_dmul>
 800b42a:	4682      	mov	sl, r0
 800b42c:	4648      	mov	r0, r9
 800b42e:	468b      	mov	fp, r1
 800b430:	f7f5 f888 	bl	8000544 <__aeabi_ui2d>
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	4650      	mov	r0, sl
 800b43a:	4659      	mov	r1, fp
 800b43c:	f7f4 ff46 	bl	80002cc <__adddf3>
 800b440:	4682      	mov	sl, r0
 800b442:	468b      	mov	fp, r1
 800b444:	2d0f      	cmp	r5, #15
 800b446:	dc38      	bgt.n	800b4ba <_strtod_l+0x452>
 800b448:	9b06      	ldr	r3, [sp, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f43f ae50 	beq.w	800b0f0 <_strtod_l+0x88>
 800b450:	dd24      	ble.n	800b49c <_strtod_l+0x434>
 800b452:	2b16      	cmp	r3, #22
 800b454:	dc0b      	bgt.n	800b46e <_strtod_l+0x406>
 800b456:	496d      	ldr	r1, [pc, #436]	; (800b60c <_strtod_l+0x5a4>)
 800b458:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b45c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b460:	4652      	mov	r2, sl
 800b462:	465b      	mov	r3, fp
 800b464:	f7f5 f8e8 	bl	8000638 <__aeabi_dmul>
 800b468:	4682      	mov	sl, r0
 800b46a:	468b      	mov	fp, r1
 800b46c:	e640      	b.n	800b0f0 <_strtod_l+0x88>
 800b46e:	9a06      	ldr	r2, [sp, #24]
 800b470:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b474:	4293      	cmp	r3, r2
 800b476:	db20      	blt.n	800b4ba <_strtod_l+0x452>
 800b478:	4c64      	ldr	r4, [pc, #400]	; (800b60c <_strtod_l+0x5a4>)
 800b47a:	f1c5 050f 	rsb	r5, r5, #15
 800b47e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b482:	4652      	mov	r2, sl
 800b484:	465b      	mov	r3, fp
 800b486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b48a:	f7f5 f8d5 	bl	8000638 <__aeabi_dmul>
 800b48e:	9b06      	ldr	r3, [sp, #24]
 800b490:	1b5d      	subs	r5, r3, r5
 800b492:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b496:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b49a:	e7e3      	b.n	800b464 <_strtod_l+0x3fc>
 800b49c:	9b06      	ldr	r3, [sp, #24]
 800b49e:	3316      	adds	r3, #22
 800b4a0:	db0b      	blt.n	800b4ba <_strtod_l+0x452>
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	1b9e      	subs	r6, r3, r6
 800b4a6:	4b59      	ldr	r3, [pc, #356]	; (800b60c <_strtod_l+0x5a4>)
 800b4a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b4ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4b0:	4650      	mov	r0, sl
 800b4b2:	4659      	mov	r1, fp
 800b4b4:	f7f5 f9ea 	bl	800088c <__aeabi_ddiv>
 800b4b8:	e7d6      	b.n	800b468 <_strtod_l+0x400>
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	eba5 0808 	sub.w	r8, r5, r8
 800b4c0:	4498      	add	r8, r3
 800b4c2:	f1b8 0f00 	cmp.w	r8, #0
 800b4c6:	dd74      	ble.n	800b5b2 <_strtod_l+0x54a>
 800b4c8:	f018 030f 	ands.w	r3, r8, #15
 800b4cc:	d00a      	beq.n	800b4e4 <_strtod_l+0x47c>
 800b4ce:	494f      	ldr	r1, [pc, #316]	; (800b60c <_strtod_l+0x5a4>)
 800b4d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4d4:	4652      	mov	r2, sl
 800b4d6:	465b      	mov	r3, fp
 800b4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4dc:	f7f5 f8ac 	bl	8000638 <__aeabi_dmul>
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	468b      	mov	fp, r1
 800b4e4:	f038 080f 	bics.w	r8, r8, #15
 800b4e8:	d04f      	beq.n	800b58a <_strtod_l+0x522>
 800b4ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b4ee:	dd22      	ble.n	800b536 <_strtod_l+0x4ce>
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	462e      	mov	r6, r5
 800b4f4:	9507      	str	r5, [sp, #28]
 800b4f6:	9505      	str	r5, [sp, #20]
 800b4f8:	2322      	movs	r3, #34	; 0x22
 800b4fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b614 <_strtod_l+0x5ac>
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	f04f 0a00 	mov.w	sl, #0
 800b504:	9b07      	ldr	r3, [sp, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f43f adf2 	beq.w	800b0f0 <_strtod_l+0x88>
 800b50c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b50e:	4620      	mov	r0, r4
 800b510:	f001 fec6 	bl	800d2a0 <_Bfree>
 800b514:	9905      	ldr	r1, [sp, #20]
 800b516:	4620      	mov	r0, r4
 800b518:	f001 fec2 	bl	800d2a0 <_Bfree>
 800b51c:	4631      	mov	r1, r6
 800b51e:	4620      	mov	r0, r4
 800b520:	f001 febe 	bl	800d2a0 <_Bfree>
 800b524:	9907      	ldr	r1, [sp, #28]
 800b526:	4620      	mov	r0, r4
 800b528:	f001 feba 	bl	800d2a0 <_Bfree>
 800b52c:	4629      	mov	r1, r5
 800b52e:	4620      	mov	r0, r4
 800b530:	f001 feb6 	bl	800d2a0 <_Bfree>
 800b534:	e5dc      	b.n	800b0f0 <_strtod_l+0x88>
 800b536:	4b36      	ldr	r3, [pc, #216]	; (800b610 <_strtod_l+0x5a8>)
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	2300      	movs	r3, #0
 800b53c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b540:	4650      	mov	r0, sl
 800b542:	4659      	mov	r1, fp
 800b544:	4699      	mov	r9, r3
 800b546:	f1b8 0f01 	cmp.w	r8, #1
 800b54a:	dc21      	bgt.n	800b590 <_strtod_l+0x528>
 800b54c:	b10b      	cbz	r3, 800b552 <_strtod_l+0x4ea>
 800b54e:	4682      	mov	sl, r0
 800b550:	468b      	mov	fp, r1
 800b552:	4b2f      	ldr	r3, [pc, #188]	; (800b610 <_strtod_l+0x5a8>)
 800b554:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b558:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b55c:	4652      	mov	r2, sl
 800b55e:	465b      	mov	r3, fp
 800b560:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b564:	f7f5 f868 	bl	8000638 <__aeabi_dmul>
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <_strtod_l+0x5ac>)
 800b56a:	460a      	mov	r2, r1
 800b56c:	400b      	ands	r3, r1
 800b56e:	492a      	ldr	r1, [pc, #168]	; (800b618 <_strtod_l+0x5b0>)
 800b570:	428b      	cmp	r3, r1
 800b572:	4682      	mov	sl, r0
 800b574:	d8bc      	bhi.n	800b4f0 <_strtod_l+0x488>
 800b576:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b57a:	428b      	cmp	r3, r1
 800b57c:	bf86      	itte	hi
 800b57e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b61c <_strtod_l+0x5b4>
 800b582:	f04f 3aff 	movhi.w	sl, #4294967295
 800b586:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b58a:	2300      	movs	r3, #0
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	e084      	b.n	800b69a <_strtod_l+0x632>
 800b590:	f018 0f01 	tst.w	r8, #1
 800b594:	d005      	beq.n	800b5a2 <_strtod_l+0x53a>
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f7f5 f84c 	bl	8000638 <__aeabi_dmul>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	9a04      	ldr	r2, [sp, #16]
 800b5a4:	3208      	adds	r2, #8
 800b5a6:	f109 0901 	add.w	r9, r9, #1
 800b5aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b5ae:	9204      	str	r2, [sp, #16]
 800b5b0:	e7c9      	b.n	800b546 <_strtod_l+0x4de>
 800b5b2:	d0ea      	beq.n	800b58a <_strtod_l+0x522>
 800b5b4:	f1c8 0800 	rsb	r8, r8, #0
 800b5b8:	f018 020f 	ands.w	r2, r8, #15
 800b5bc:	d00a      	beq.n	800b5d4 <_strtod_l+0x56c>
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <_strtod_l+0x5a4>)
 800b5c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5c4:	4650      	mov	r0, sl
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f5 f95e 	bl	800088c <__aeabi_ddiv>
 800b5d0:	4682      	mov	sl, r0
 800b5d2:	468b      	mov	fp, r1
 800b5d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b5d8:	d0d7      	beq.n	800b58a <_strtod_l+0x522>
 800b5da:	f1b8 0f1f 	cmp.w	r8, #31
 800b5de:	dd1f      	ble.n	800b620 <_strtod_l+0x5b8>
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	462e      	mov	r6, r5
 800b5e4:	9507      	str	r5, [sp, #28]
 800b5e6:	9505      	str	r5, [sp, #20]
 800b5e8:	2322      	movs	r3, #34	; 0x22
 800b5ea:	f04f 0a00 	mov.w	sl, #0
 800b5ee:	f04f 0b00 	mov.w	fp, #0
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	e786      	b.n	800b504 <_strtod_l+0x49c>
 800b5f6:	bf00      	nop
 800b5f8:	080111b9 	.word	0x080111b9
 800b5fc:	080111f8 	.word	0x080111f8
 800b600:	080111b1 	.word	0x080111b1
 800b604:	0801133c 	.word	0x0801133c
 800b608:	08011603 	.word	0x08011603
 800b60c:	080114c8 	.word	0x080114c8
 800b610:	080114a0 	.word	0x080114a0
 800b614:	7ff00000 	.word	0x7ff00000
 800b618:	7ca00000 	.word	0x7ca00000
 800b61c:	7fefffff 	.word	0x7fefffff
 800b620:	f018 0310 	ands.w	r3, r8, #16
 800b624:	bf18      	it	ne
 800b626:	236a      	movne	r3, #106	; 0x6a
 800b628:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b9d8 <_strtod_l+0x970>
 800b62c:	9304      	str	r3, [sp, #16]
 800b62e:	4650      	mov	r0, sl
 800b630:	4659      	mov	r1, fp
 800b632:	2300      	movs	r3, #0
 800b634:	f018 0f01 	tst.w	r8, #1
 800b638:	d004      	beq.n	800b644 <_strtod_l+0x5dc>
 800b63a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b63e:	f7f4 fffb 	bl	8000638 <__aeabi_dmul>
 800b642:	2301      	movs	r3, #1
 800b644:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b648:	f109 0908 	add.w	r9, r9, #8
 800b64c:	d1f2      	bne.n	800b634 <_strtod_l+0x5cc>
 800b64e:	b10b      	cbz	r3, 800b654 <_strtod_l+0x5ec>
 800b650:	4682      	mov	sl, r0
 800b652:	468b      	mov	fp, r1
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	b1c3      	cbz	r3, 800b68a <_strtod_l+0x622>
 800b658:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b65c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b660:	2b00      	cmp	r3, #0
 800b662:	4659      	mov	r1, fp
 800b664:	dd11      	ble.n	800b68a <_strtod_l+0x622>
 800b666:	2b1f      	cmp	r3, #31
 800b668:	f340 8124 	ble.w	800b8b4 <_strtod_l+0x84c>
 800b66c:	2b34      	cmp	r3, #52	; 0x34
 800b66e:	bfde      	ittt	le
 800b670:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b674:	f04f 33ff 	movle.w	r3, #4294967295
 800b678:	fa03 f202 	lslle.w	r2, r3, r2
 800b67c:	f04f 0a00 	mov.w	sl, #0
 800b680:	bfcc      	ite	gt
 800b682:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b686:	ea02 0b01 	andle.w	fp, r2, r1
 800b68a:	2200      	movs	r2, #0
 800b68c:	2300      	movs	r3, #0
 800b68e:	4650      	mov	r0, sl
 800b690:	4659      	mov	r1, fp
 800b692:	f7f5 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 800b696:	2800      	cmp	r0, #0
 800b698:	d1a2      	bne.n	800b5e0 <_strtod_l+0x578>
 800b69a:	9b07      	ldr	r3, [sp, #28]
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	9908      	ldr	r1, [sp, #32]
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	463a      	mov	r2, r7
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f001 fe63 	bl	800d370 <__s2b>
 800b6aa:	9007      	str	r0, [sp, #28]
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f43f af1f 	beq.w	800b4f0 <_strtod_l+0x488>
 800b6b2:	9b05      	ldr	r3, [sp, #20]
 800b6b4:	1b9e      	subs	r6, r3, r6
 800b6b6:	9b06      	ldr	r3, [sp, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfb4      	ite	lt
 800b6bc:	4633      	movlt	r3, r6
 800b6be:	2300      	movge	r3, #0
 800b6c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	2500      	movs	r5, #0
 800b6c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b6ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b6cc:	462e      	mov	r6, r5
 800b6ce:	9b07      	ldr	r3, [sp, #28]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	6859      	ldr	r1, [r3, #4]
 800b6d4:	f001 fda4 	bl	800d220 <_Balloc>
 800b6d8:	9005      	str	r0, [sp, #20]
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	f43f af0c 	beq.w	800b4f8 <_strtod_l+0x490>
 800b6e0:	9b07      	ldr	r3, [sp, #28]
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	3202      	adds	r2, #2
 800b6e6:	f103 010c 	add.w	r1, r3, #12
 800b6ea:	0092      	lsls	r2, r2, #2
 800b6ec:	300c      	adds	r0, #12
 800b6ee:	f001 fd89 	bl	800d204 <memcpy>
 800b6f2:	ec4b ab10 	vmov	d0, sl, fp
 800b6f6:	aa1a      	add	r2, sp, #104	; 0x68
 800b6f8:	a919      	add	r1, sp, #100	; 0x64
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f002 f97e 	bl	800d9fc <__d2b>
 800b700:	ec4b ab18 	vmov	d8, sl, fp
 800b704:	9018      	str	r0, [sp, #96]	; 0x60
 800b706:	2800      	cmp	r0, #0
 800b708:	f43f aef6 	beq.w	800b4f8 <_strtod_l+0x490>
 800b70c:	2101      	movs	r1, #1
 800b70e:	4620      	mov	r0, r4
 800b710:	f001 fec8 	bl	800d4a4 <__i2b>
 800b714:	4606      	mov	r6, r0
 800b716:	2800      	cmp	r0, #0
 800b718:	f43f aeee 	beq.w	800b4f8 <_strtod_l+0x490>
 800b71c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b71e:	9904      	ldr	r1, [sp, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfab      	itete	ge
 800b724:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b726:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b728:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b72a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b72e:	bfac      	ite	ge
 800b730:	eb03 0902 	addge.w	r9, r3, r2
 800b734:	1ad7      	sublt	r7, r2, r3
 800b736:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b738:	eba3 0801 	sub.w	r8, r3, r1
 800b73c:	4490      	add	r8, r2
 800b73e:	4ba1      	ldr	r3, [pc, #644]	; (800b9c4 <_strtod_l+0x95c>)
 800b740:	f108 38ff 	add.w	r8, r8, #4294967295
 800b744:	4598      	cmp	r8, r3
 800b746:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b74a:	f280 80c7 	bge.w	800b8dc <_strtod_l+0x874>
 800b74e:	eba3 0308 	sub.w	r3, r3, r8
 800b752:	2b1f      	cmp	r3, #31
 800b754:	eba2 0203 	sub.w	r2, r2, r3
 800b758:	f04f 0101 	mov.w	r1, #1
 800b75c:	f300 80b1 	bgt.w	800b8c2 <_strtod_l+0x85a>
 800b760:	fa01 f303 	lsl.w	r3, r1, r3
 800b764:	930d      	str	r3, [sp, #52]	; 0x34
 800b766:	2300      	movs	r3, #0
 800b768:	9308      	str	r3, [sp, #32]
 800b76a:	eb09 0802 	add.w	r8, r9, r2
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	45c1      	cmp	r9, r8
 800b772:	4417      	add	r7, r2
 800b774:	441f      	add	r7, r3
 800b776:	464b      	mov	r3, r9
 800b778:	bfa8      	it	ge
 800b77a:	4643      	movge	r3, r8
 800b77c:	42bb      	cmp	r3, r7
 800b77e:	bfa8      	it	ge
 800b780:	463b      	movge	r3, r7
 800b782:	2b00      	cmp	r3, #0
 800b784:	bfc2      	ittt	gt
 800b786:	eba8 0803 	subgt.w	r8, r8, r3
 800b78a:	1aff      	subgt	r7, r7, r3
 800b78c:	eba9 0903 	subgt.w	r9, r9, r3
 800b790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b792:	2b00      	cmp	r3, #0
 800b794:	dd17      	ble.n	800b7c6 <_strtod_l+0x75e>
 800b796:	4631      	mov	r1, r6
 800b798:	461a      	mov	r2, r3
 800b79a:	4620      	mov	r0, r4
 800b79c:	f001 ff42 	bl	800d624 <__pow5mult>
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	f43f aea8 	beq.w	800b4f8 <_strtod_l+0x490>
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f001 fe8f 	bl	800d4d0 <__multiply>
 800b7b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f43f ae9f 	beq.w	800b4f8 <_strtod_l+0x490>
 800b7ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f001 fd6f 	bl	800d2a0 <_Bfree>
 800b7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c4:	9318      	str	r3, [sp, #96]	; 0x60
 800b7c6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ca:	f300 808c 	bgt.w	800b8e6 <_strtod_l+0x87e>
 800b7ce:	9b06      	ldr	r3, [sp, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	dd08      	ble.n	800b7e6 <_strtod_l+0x77e>
 800b7d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7d6:	9905      	ldr	r1, [sp, #20]
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f001 ff23 	bl	800d624 <__pow5mult>
 800b7de:	9005      	str	r0, [sp, #20]
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	f43f ae89 	beq.w	800b4f8 <_strtod_l+0x490>
 800b7e6:	2f00      	cmp	r7, #0
 800b7e8:	dd08      	ble.n	800b7fc <_strtod_l+0x794>
 800b7ea:	9905      	ldr	r1, [sp, #20]
 800b7ec:	463a      	mov	r2, r7
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f001 ff72 	bl	800d6d8 <__lshift>
 800b7f4:	9005      	str	r0, [sp, #20]
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	f43f ae7e 	beq.w	800b4f8 <_strtod_l+0x490>
 800b7fc:	f1b9 0f00 	cmp.w	r9, #0
 800b800:	dd08      	ble.n	800b814 <_strtod_l+0x7ac>
 800b802:	4631      	mov	r1, r6
 800b804:	464a      	mov	r2, r9
 800b806:	4620      	mov	r0, r4
 800b808:	f001 ff66 	bl	800d6d8 <__lshift>
 800b80c:	4606      	mov	r6, r0
 800b80e:	2800      	cmp	r0, #0
 800b810:	f43f ae72 	beq.w	800b4f8 <_strtod_l+0x490>
 800b814:	9a05      	ldr	r2, [sp, #20]
 800b816:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b818:	4620      	mov	r0, r4
 800b81a:	f001 ffe9 	bl	800d7f0 <__mdiff>
 800b81e:	4605      	mov	r5, r0
 800b820:	2800      	cmp	r0, #0
 800b822:	f43f ae69 	beq.w	800b4f8 <_strtod_l+0x490>
 800b826:	68c3      	ldr	r3, [r0, #12]
 800b828:	930b      	str	r3, [sp, #44]	; 0x2c
 800b82a:	2300      	movs	r3, #0
 800b82c:	60c3      	str	r3, [r0, #12]
 800b82e:	4631      	mov	r1, r6
 800b830:	f001 ffc2 	bl	800d7b8 <__mcmp>
 800b834:	2800      	cmp	r0, #0
 800b836:	da60      	bge.n	800b8fa <_strtod_l+0x892>
 800b838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83a:	ea53 030a 	orrs.w	r3, r3, sl
 800b83e:	f040 8082 	bne.w	800b946 <_strtod_l+0x8de>
 800b842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b846:	2b00      	cmp	r3, #0
 800b848:	d17d      	bne.n	800b946 <_strtod_l+0x8de>
 800b84a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b84e:	0d1b      	lsrs	r3, r3, #20
 800b850:	051b      	lsls	r3, r3, #20
 800b852:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b856:	d976      	bls.n	800b946 <_strtod_l+0x8de>
 800b858:	696b      	ldr	r3, [r5, #20]
 800b85a:	b913      	cbnz	r3, 800b862 <_strtod_l+0x7fa>
 800b85c:	692b      	ldr	r3, [r5, #16]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	dd71      	ble.n	800b946 <_strtod_l+0x8de>
 800b862:	4629      	mov	r1, r5
 800b864:	2201      	movs	r2, #1
 800b866:	4620      	mov	r0, r4
 800b868:	f001 ff36 	bl	800d6d8 <__lshift>
 800b86c:	4631      	mov	r1, r6
 800b86e:	4605      	mov	r5, r0
 800b870:	f001 ffa2 	bl	800d7b8 <__mcmp>
 800b874:	2800      	cmp	r0, #0
 800b876:	dd66      	ble.n	800b946 <_strtod_l+0x8de>
 800b878:	9904      	ldr	r1, [sp, #16]
 800b87a:	4a53      	ldr	r2, [pc, #332]	; (800b9c8 <_strtod_l+0x960>)
 800b87c:	465b      	mov	r3, fp
 800b87e:	2900      	cmp	r1, #0
 800b880:	f000 8081 	beq.w	800b986 <_strtod_l+0x91e>
 800b884:	ea02 010b 	and.w	r1, r2, fp
 800b888:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b88c:	dc7b      	bgt.n	800b986 <_strtod_l+0x91e>
 800b88e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b892:	f77f aea9 	ble.w	800b5e8 <_strtod_l+0x580>
 800b896:	4b4d      	ldr	r3, [pc, #308]	; (800b9cc <_strtod_l+0x964>)
 800b898:	4650      	mov	r0, sl
 800b89a:	4659      	mov	r1, fp
 800b89c:	2200      	movs	r2, #0
 800b89e:	f7f4 fecb 	bl	8000638 <__aeabi_dmul>
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4303      	orrs	r3, r0
 800b8a6:	bf08      	it	eq
 800b8a8:	2322      	moveq	r3, #34	; 0x22
 800b8aa:	4682      	mov	sl, r0
 800b8ac:	468b      	mov	fp, r1
 800b8ae:	bf08      	it	eq
 800b8b0:	6023      	streq	r3, [r4, #0]
 800b8b2:	e62b      	b.n	800b50c <_strtod_l+0x4a4>
 800b8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8bc:	ea03 0a0a 	and.w	sl, r3, sl
 800b8c0:	e6e3      	b.n	800b68a <_strtod_l+0x622>
 800b8c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b8c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b8ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b8ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b8d2:	fa01 f308 	lsl.w	r3, r1, r8
 800b8d6:	9308      	str	r3, [sp, #32]
 800b8d8:	910d      	str	r1, [sp, #52]	; 0x34
 800b8da:	e746      	b.n	800b76a <_strtod_l+0x702>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9308      	str	r3, [sp, #32]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b8e4:	e741      	b.n	800b76a <_strtod_l+0x702>
 800b8e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f001 fef4 	bl	800d6d8 <__lshift>
 800b8f0:	9018      	str	r0, [sp, #96]	; 0x60
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f47f af6b 	bne.w	800b7ce <_strtod_l+0x766>
 800b8f8:	e5fe      	b.n	800b4f8 <_strtod_l+0x490>
 800b8fa:	465f      	mov	r7, fp
 800b8fc:	d16e      	bne.n	800b9dc <_strtod_l+0x974>
 800b8fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b904:	b342      	cbz	r2, 800b958 <_strtod_l+0x8f0>
 800b906:	4a32      	ldr	r2, [pc, #200]	; (800b9d0 <_strtod_l+0x968>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d128      	bne.n	800b95e <_strtod_l+0x8f6>
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	4651      	mov	r1, sl
 800b910:	b1eb      	cbz	r3, 800b94e <_strtod_l+0x8e6>
 800b912:	4b2d      	ldr	r3, [pc, #180]	; (800b9c8 <_strtod_l+0x960>)
 800b914:	403b      	ands	r3, r7
 800b916:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b91a:	f04f 32ff 	mov.w	r2, #4294967295
 800b91e:	d819      	bhi.n	800b954 <_strtod_l+0x8ec>
 800b920:	0d1b      	lsrs	r3, r3, #20
 800b922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b926:	fa02 f303 	lsl.w	r3, r2, r3
 800b92a:	4299      	cmp	r1, r3
 800b92c:	d117      	bne.n	800b95e <_strtod_l+0x8f6>
 800b92e:	4b29      	ldr	r3, [pc, #164]	; (800b9d4 <_strtod_l+0x96c>)
 800b930:	429f      	cmp	r7, r3
 800b932:	d102      	bne.n	800b93a <_strtod_l+0x8d2>
 800b934:	3101      	adds	r1, #1
 800b936:	f43f addf 	beq.w	800b4f8 <_strtod_l+0x490>
 800b93a:	4b23      	ldr	r3, [pc, #140]	; (800b9c8 <_strtod_l+0x960>)
 800b93c:	403b      	ands	r3, r7
 800b93e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b942:	f04f 0a00 	mov.w	sl, #0
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1a4      	bne.n	800b896 <_strtod_l+0x82e>
 800b94c:	e5de      	b.n	800b50c <_strtod_l+0x4a4>
 800b94e:	f04f 33ff 	mov.w	r3, #4294967295
 800b952:	e7ea      	b.n	800b92a <_strtod_l+0x8c2>
 800b954:	4613      	mov	r3, r2
 800b956:	e7e8      	b.n	800b92a <_strtod_l+0x8c2>
 800b958:	ea53 030a 	orrs.w	r3, r3, sl
 800b95c:	d08c      	beq.n	800b878 <_strtod_l+0x810>
 800b95e:	9b08      	ldr	r3, [sp, #32]
 800b960:	b1db      	cbz	r3, 800b99a <_strtod_l+0x932>
 800b962:	423b      	tst	r3, r7
 800b964:	d0ef      	beq.n	800b946 <_strtod_l+0x8de>
 800b966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b968:	9a04      	ldr	r2, [sp, #16]
 800b96a:	4650      	mov	r0, sl
 800b96c:	4659      	mov	r1, fp
 800b96e:	b1c3      	cbz	r3, 800b9a2 <_strtod_l+0x93a>
 800b970:	f7ff fb5d 	bl	800b02e <sulp>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	ec51 0b18 	vmov	r0, r1, d8
 800b97c:	f7f4 fca6 	bl	80002cc <__adddf3>
 800b980:	4682      	mov	sl, r0
 800b982:	468b      	mov	fp, r1
 800b984:	e7df      	b.n	800b946 <_strtod_l+0x8de>
 800b986:	4013      	ands	r3, r2
 800b988:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b98c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b990:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b994:	f04f 3aff 	mov.w	sl, #4294967295
 800b998:	e7d5      	b.n	800b946 <_strtod_l+0x8de>
 800b99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b99c:	ea13 0f0a 	tst.w	r3, sl
 800b9a0:	e7e0      	b.n	800b964 <_strtod_l+0x8fc>
 800b9a2:	f7ff fb44 	bl	800b02e <sulp>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	ec51 0b18 	vmov	r0, r1, d8
 800b9ae:	f7f4 fc8b 	bl	80002c8 <__aeabi_dsub>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4682      	mov	sl, r0
 800b9b8:	468b      	mov	fp, r1
 800b9ba:	f7f5 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d0c1      	beq.n	800b946 <_strtod_l+0x8de>
 800b9c2:	e611      	b.n	800b5e8 <_strtod_l+0x580>
 800b9c4:	fffffc02 	.word	0xfffffc02
 800b9c8:	7ff00000 	.word	0x7ff00000
 800b9cc:	39500000 	.word	0x39500000
 800b9d0:	000fffff 	.word	0x000fffff
 800b9d4:	7fefffff 	.word	0x7fefffff
 800b9d8:	08011210 	.word	0x08011210
 800b9dc:	4631      	mov	r1, r6
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f002 f868 	bl	800dab4 <__ratio>
 800b9e4:	ec59 8b10 	vmov	r8, r9, d0
 800b9e8:	ee10 0a10 	vmov	r0, s0
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	f7f5 f89c 	bl	8000b30 <__aeabi_dcmple>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d07a      	beq.n	800baf2 <_strtod_l+0xa8a>
 800b9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d04a      	beq.n	800ba98 <_strtod_l+0xa30>
 800ba02:	4b95      	ldr	r3, [pc, #596]	; (800bc58 <_strtod_l+0xbf0>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bc58 <_strtod_l+0xbf0>
 800ba0e:	f04f 0800 	mov.w	r8, #0
 800ba12:	4b92      	ldr	r3, [pc, #584]	; (800bc5c <_strtod_l+0xbf4>)
 800ba14:	403b      	ands	r3, r7
 800ba16:	930d      	str	r3, [sp, #52]	; 0x34
 800ba18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba1a:	4b91      	ldr	r3, [pc, #580]	; (800bc60 <_strtod_l+0xbf8>)
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	f040 80b0 	bne.w	800bb82 <_strtod_l+0xb1a>
 800ba22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ba2a:	ec4b ab10 	vmov	d0, sl, fp
 800ba2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba32:	f001 ff67 	bl	800d904 <__ulp>
 800ba36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba3a:	ec53 2b10 	vmov	r2, r3, d0
 800ba3e:	f7f4 fdfb 	bl	8000638 <__aeabi_dmul>
 800ba42:	4652      	mov	r2, sl
 800ba44:	465b      	mov	r3, fp
 800ba46:	f7f4 fc41 	bl	80002cc <__adddf3>
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4983      	ldr	r1, [pc, #524]	; (800bc5c <_strtod_l+0xbf4>)
 800ba4e:	4a85      	ldr	r2, [pc, #532]	; (800bc64 <_strtod_l+0xbfc>)
 800ba50:	4019      	ands	r1, r3
 800ba52:	4291      	cmp	r1, r2
 800ba54:	4682      	mov	sl, r0
 800ba56:	d960      	bls.n	800bb1a <_strtod_l+0xab2>
 800ba58:	ee18 3a90 	vmov	r3, s17
 800ba5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d104      	bne.n	800ba6e <_strtod_l+0xa06>
 800ba64:	ee18 3a10 	vmov	r3, s16
 800ba68:	3301      	adds	r3, #1
 800ba6a:	f43f ad45 	beq.w	800b4f8 <_strtod_l+0x490>
 800ba6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bc70 <_strtod_l+0xc08>
 800ba72:	f04f 3aff 	mov.w	sl, #4294967295
 800ba76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f001 fc11 	bl	800d2a0 <_Bfree>
 800ba7e:	9905      	ldr	r1, [sp, #20]
 800ba80:	4620      	mov	r0, r4
 800ba82:	f001 fc0d 	bl	800d2a0 <_Bfree>
 800ba86:	4631      	mov	r1, r6
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f001 fc09 	bl	800d2a0 <_Bfree>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4620      	mov	r0, r4
 800ba92:	f001 fc05 	bl	800d2a0 <_Bfree>
 800ba96:	e61a      	b.n	800b6ce <_strtod_l+0x666>
 800ba98:	f1ba 0f00 	cmp.w	sl, #0
 800ba9c:	d11b      	bne.n	800bad6 <_strtod_l+0xa6e>
 800ba9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baa2:	b9f3      	cbnz	r3, 800bae2 <_strtod_l+0xa7a>
 800baa4:	4b6c      	ldr	r3, [pc, #432]	; (800bc58 <_strtod_l+0xbf0>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	4640      	mov	r0, r8
 800baaa:	4649      	mov	r1, r9
 800baac:	f7f5 f836 	bl	8000b1c <__aeabi_dcmplt>
 800bab0:	b9d0      	cbnz	r0, 800bae8 <_strtod_l+0xa80>
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	4b6c      	ldr	r3, [pc, #432]	; (800bc68 <_strtod_l+0xc00>)
 800bab8:	2200      	movs	r2, #0
 800baba:	f7f4 fdbd 	bl	8000638 <__aeabi_dmul>
 800babe:	4680      	mov	r8, r0
 800bac0:	4689      	mov	r9, r1
 800bac2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bac6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800baca:	9315      	str	r3, [sp, #84]	; 0x54
 800bacc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bad0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bad4:	e79d      	b.n	800ba12 <_strtod_l+0x9aa>
 800bad6:	f1ba 0f01 	cmp.w	sl, #1
 800bada:	d102      	bne.n	800bae2 <_strtod_l+0xa7a>
 800badc:	2f00      	cmp	r7, #0
 800bade:	f43f ad83 	beq.w	800b5e8 <_strtod_l+0x580>
 800bae2:	4b62      	ldr	r3, [pc, #392]	; (800bc6c <_strtod_l+0xc04>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	e78e      	b.n	800ba06 <_strtod_l+0x99e>
 800bae8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bc68 <_strtod_l+0xc00>
 800baec:	f04f 0800 	mov.w	r8, #0
 800baf0:	e7e7      	b.n	800bac2 <_strtod_l+0xa5a>
 800baf2:	4b5d      	ldr	r3, [pc, #372]	; (800bc68 <_strtod_l+0xc00>)
 800baf4:	4640      	mov	r0, r8
 800baf6:	4649      	mov	r1, r9
 800baf8:	2200      	movs	r2, #0
 800bafa:	f7f4 fd9d 	bl	8000638 <__aeabi_dmul>
 800bafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb00:	4680      	mov	r8, r0
 800bb02:	4689      	mov	r9, r1
 800bb04:	b933      	cbnz	r3, 800bb14 <_strtod_l+0xaac>
 800bb06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb0a:	900e      	str	r0, [sp, #56]	; 0x38
 800bb0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb12:	e7dd      	b.n	800bad0 <_strtod_l+0xa68>
 800bb14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bb18:	e7f9      	b.n	800bb0e <_strtod_l+0xaa6>
 800bb1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bb1e:	9b04      	ldr	r3, [sp, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1a8      	bne.n	800ba76 <_strtod_l+0xa0e>
 800bb24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb2a:	0d1b      	lsrs	r3, r3, #20
 800bb2c:	051b      	lsls	r3, r3, #20
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d1a1      	bne.n	800ba76 <_strtod_l+0xa0e>
 800bb32:	4640      	mov	r0, r8
 800bb34:	4649      	mov	r1, r9
 800bb36:	f7f5 fa3d 	bl	8000fb4 <__aeabi_d2lz>
 800bb3a:	f7f4 fd4f 	bl	80005dc <__aeabi_l2d>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 fbbf 	bl	80002c8 <__aeabi_dsub>
 800bb4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb50:	ea43 030a 	orr.w	r3, r3, sl
 800bb54:	4313      	orrs	r3, r2
 800bb56:	4680      	mov	r8, r0
 800bb58:	4689      	mov	r9, r1
 800bb5a:	d055      	beq.n	800bc08 <_strtod_l+0xba0>
 800bb5c:	a336      	add	r3, pc, #216	; (adr r3, 800bc38 <_strtod_l+0xbd0>)
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	f7f4 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	f47f acd0 	bne.w	800b50c <_strtod_l+0x4a4>
 800bb6c:	a334      	add	r3, pc, #208	; (adr r3, 800bc40 <_strtod_l+0xbd8>)
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	f7f4 ffef 	bl	8000b58 <__aeabi_dcmpgt>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f43f af7b 	beq.w	800ba76 <_strtod_l+0xa0e>
 800bb80:	e4c4      	b.n	800b50c <_strtod_l+0x4a4>
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	b333      	cbz	r3, 800bbd4 <_strtod_l+0xb6c>
 800bb86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb8c:	d822      	bhi.n	800bbd4 <_strtod_l+0xb6c>
 800bb8e:	a32e      	add	r3, pc, #184	; (adr r3, 800bc48 <_strtod_l+0xbe0>)
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	4640      	mov	r0, r8
 800bb96:	4649      	mov	r1, r9
 800bb98:	f7f4 ffca 	bl	8000b30 <__aeabi_dcmple>
 800bb9c:	b1a0      	cbz	r0, 800bbc8 <_strtod_l+0xb60>
 800bb9e:	4649      	mov	r1, r9
 800bba0:	4640      	mov	r0, r8
 800bba2:	f7f5 f821 	bl	8000be8 <__aeabi_d2uiz>
 800bba6:	2801      	cmp	r0, #1
 800bba8:	bf38      	it	cc
 800bbaa:	2001      	movcc	r0, #1
 800bbac:	f7f4 fcca 	bl	8000544 <__aeabi_ui2d>
 800bbb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbb2:	4680      	mov	r8, r0
 800bbb4:	4689      	mov	r9, r1
 800bbb6:	bb23      	cbnz	r3, 800bc02 <_strtod_l+0xb9a>
 800bbb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbbc:	9010      	str	r0, [sp, #64]	; 0x40
 800bbbe:	9311      	str	r3, [sp, #68]	; 0x44
 800bbc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bbd0:	1a9b      	subs	r3, r3, r2
 800bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbd8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbdc:	eef0 0a68 	vmov.f32	s1, s17
 800bbe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bbe4:	f001 fe8e 	bl	800d904 <__ulp>
 800bbe8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbec:	ec53 2b10 	vmov	r2, r3, d0
 800bbf0:	f7f4 fd22 	bl	8000638 <__aeabi_dmul>
 800bbf4:	ec53 2b18 	vmov	r2, r3, d8
 800bbf8:	f7f4 fb68 	bl	80002cc <__adddf3>
 800bbfc:	4682      	mov	sl, r0
 800bbfe:	468b      	mov	fp, r1
 800bc00:	e78d      	b.n	800bb1e <_strtod_l+0xab6>
 800bc02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bc06:	e7db      	b.n	800bbc0 <_strtod_l+0xb58>
 800bc08:	a311      	add	r3, pc, #68	; (adr r3, 800bc50 <_strtod_l+0xbe8>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 ff85 	bl	8000b1c <__aeabi_dcmplt>
 800bc12:	e7b2      	b.n	800bb7a <_strtod_l+0xb12>
 800bc14:	2300      	movs	r3, #0
 800bc16:	930a      	str	r3, [sp, #40]	; 0x28
 800bc18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	f7ff ba6b 	b.w	800b0f8 <_strtod_l+0x90>
 800bc22:	2a65      	cmp	r2, #101	; 0x65
 800bc24:	f43f ab5f 	beq.w	800b2e6 <_strtod_l+0x27e>
 800bc28:	2a45      	cmp	r2, #69	; 0x45
 800bc2a:	f43f ab5c 	beq.w	800b2e6 <_strtod_l+0x27e>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f7ff bb94 	b.w	800b35c <_strtod_l+0x2f4>
 800bc34:	f3af 8000 	nop.w
 800bc38:	94a03595 	.word	0x94a03595
 800bc3c:	3fdfffff 	.word	0x3fdfffff
 800bc40:	35afe535 	.word	0x35afe535
 800bc44:	3fe00000 	.word	0x3fe00000
 800bc48:	ffc00000 	.word	0xffc00000
 800bc4c:	41dfffff 	.word	0x41dfffff
 800bc50:	94a03595 	.word	0x94a03595
 800bc54:	3fcfffff 	.word	0x3fcfffff
 800bc58:	3ff00000 	.word	0x3ff00000
 800bc5c:	7ff00000 	.word	0x7ff00000
 800bc60:	7fe00000 	.word	0x7fe00000
 800bc64:	7c9fffff 	.word	0x7c9fffff
 800bc68:	3fe00000 	.word	0x3fe00000
 800bc6c:	bff00000 	.word	0xbff00000
 800bc70:	7fefffff 	.word	0x7fefffff

0800bc74 <_strtod_r>:
 800bc74:	4b01      	ldr	r3, [pc, #4]	; (800bc7c <_strtod_r+0x8>)
 800bc76:	f7ff b9f7 	b.w	800b068 <_strtod_l>
 800bc7a:	bf00      	nop
 800bc7c:	2000007c 	.word	0x2000007c

0800bc80 <_strtol_l.constprop.0>:
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc86:	d001      	beq.n	800bc8c <_strtol_l.constprop.0+0xc>
 800bc88:	2b24      	cmp	r3, #36	; 0x24
 800bc8a:	d906      	bls.n	800bc9a <_strtol_l.constprop.0+0x1a>
 800bc8c:	f7fe fa6e 	bl	800a16c <__errno>
 800bc90:	2316      	movs	r3, #22
 800bc92:	6003      	str	r3, [r0, #0]
 800bc94:	2000      	movs	r0, #0
 800bc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd80 <_strtol_l.constprop.0+0x100>
 800bc9e:	460d      	mov	r5, r1
 800bca0:	462e      	mov	r6, r5
 800bca2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bca6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bcaa:	f017 0708 	ands.w	r7, r7, #8
 800bcae:	d1f7      	bne.n	800bca0 <_strtol_l.constprop.0+0x20>
 800bcb0:	2c2d      	cmp	r4, #45	; 0x2d
 800bcb2:	d132      	bne.n	800bd1a <_strtol_l.constprop.0+0x9a>
 800bcb4:	782c      	ldrb	r4, [r5, #0]
 800bcb6:	2701      	movs	r7, #1
 800bcb8:	1cb5      	adds	r5, r6, #2
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d05b      	beq.n	800bd76 <_strtol_l.constprop.0+0xf6>
 800bcbe:	2b10      	cmp	r3, #16
 800bcc0:	d109      	bne.n	800bcd6 <_strtol_l.constprop.0+0x56>
 800bcc2:	2c30      	cmp	r4, #48	; 0x30
 800bcc4:	d107      	bne.n	800bcd6 <_strtol_l.constprop.0+0x56>
 800bcc6:	782c      	ldrb	r4, [r5, #0]
 800bcc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bccc:	2c58      	cmp	r4, #88	; 0x58
 800bcce:	d14d      	bne.n	800bd6c <_strtol_l.constprop.0+0xec>
 800bcd0:	786c      	ldrb	r4, [r5, #1]
 800bcd2:	2310      	movs	r3, #16
 800bcd4:	3502      	adds	r5, #2
 800bcd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bcda:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcde:	f04f 0c00 	mov.w	ip, #0
 800bce2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bce6:	4666      	mov	r6, ip
 800bce8:	fb03 8a19 	mls	sl, r3, r9, r8
 800bcec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bcf0:	f1be 0f09 	cmp.w	lr, #9
 800bcf4:	d816      	bhi.n	800bd24 <_strtol_l.constprop.0+0xa4>
 800bcf6:	4674      	mov	r4, lr
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	dd24      	ble.n	800bd46 <_strtol_l.constprop.0+0xc6>
 800bcfc:	f1bc 0f00 	cmp.w	ip, #0
 800bd00:	db1e      	blt.n	800bd40 <_strtol_l.constprop.0+0xc0>
 800bd02:	45b1      	cmp	r9, r6
 800bd04:	d31c      	bcc.n	800bd40 <_strtol_l.constprop.0+0xc0>
 800bd06:	d101      	bne.n	800bd0c <_strtol_l.constprop.0+0x8c>
 800bd08:	45a2      	cmp	sl, r4
 800bd0a:	db19      	blt.n	800bd40 <_strtol_l.constprop.0+0xc0>
 800bd0c:	fb06 4603 	mla	r6, r6, r3, r4
 800bd10:	f04f 0c01 	mov.w	ip, #1
 800bd14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd18:	e7e8      	b.n	800bcec <_strtol_l.constprop.0+0x6c>
 800bd1a:	2c2b      	cmp	r4, #43	; 0x2b
 800bd1c:	bf04      	itt	eq
 800bd1e:	782c      	ldrbeq	r4, [r5, #0]
 800bd20:	1cb5      	addeq	r5, r6, #2
 800bd22:	e7ca      	b.n	800bcba <_strtol_l.constprop.0+0x3a>
 800bd24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bd28:	f1be 0f19 	cmp.w	lr, #25
 800bd2c:	d801      	bhi.n	800bd32 <_strtol_l.constprop.0+0xb2>
 800bd2e:	3c37      	subs	r4, #55	; 0x37
 800bd30:	e7e2      	b.n	800bcf8 <_strtol_l.constprop.0+0x78>
 800bd32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bd36:	f1be 0f19 	cmp.w	lr, #25
 800bd3a:	d804      	bhi.n	800bd46 <_strtol_l.constprop.0+0xc6>
 800bd3c:	3c57      	subs	r4, #87	; 0x57
 800bd3e:	e7db      	b.n	800bcf8 <_strtol_l.constprop.0+0x78>
 800bd40:	f04f 3cff 	mov.w	ip, #4294967295
 800bd44:	e7e6      	b.n	800bd14 <_strtol_l.constprop.0+0x94>
 800bd46:	f1bc 0f00 	cmp.w	ip, #0
 800bd4a:	da05      	bge.n	800bd58 <_strtol_l.constprop.0+0xd8>
 800bd4c:	2322      	movs	r3, #34	; 0x22
 800bd4e:	6003      	str	r3, [r0, #0]
 800bd50:	4646      	mov	r6, r8
 800bd52:	b942      	cbnz	r2, 800bd66 <_strtol_l.constprop.0+0xe6>
 800bd54:	4630      	mov	r0, r6
 800bd56:	e79e      	b.n	800bc96 <_strtol_l.constprop.0+0x16>
 800bd58:	b107      	cbz	r7, 800bd5c <_strtol_l.constprop.0+0xdc>
 800bd5a:	4276      	negs	r6, r6
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	d0f9      	beq.n	800bd54 <_strtol_l.constprop.0+0xd4>
 800bd60:	f1bc 0f00 	cmp.w	ip, #0
 800bd64:	d000      	beq.n	800bd68 <_strtol_l.constprop.0+0xe8>
 800bd66:	1e69      	subs	r1, r5, #1
 800bd68:	6011      	str	r1, [r2, #0]
 800bd6a:	e7f3      	b.n	800bd54 <_strtol_l.constprop.0+0xd4>
 800bd6c:	2430      	movs	r4, #48	; 0x30
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1b1      	bne.n	800bcd6 <_strtol_l.constprop.0+0x56>
 800bd72:	2308      	movs	r3, #8
 800bd74:	e7af      	b.n	800bcd6 <_strtol_l.constprop.0+0x56>
 800bd76:	2c30      	cmp	r4, #48	; 0x30
 800bd78:	d0a5      	beq.n	800bcc6 <_strtol_l.constprop.0+0x46>
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	e7ab      	b.n	800bcd6 <_strtol_l.constprop.0+0x56>
 800bd7e:	bf00      	nop
 800bd80:	08011239 	.word	0x08011239

0800bd84 <_strtol_r>:
 800bd84:	f7ff bf7c 	b.w	800bc80 <_strtol_l.constprop.0>

0800bd88 <_write_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4d07      	ldr	r5, [pc, #28]	; (800bda8 <_write_r+0x20>)
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	4608      	mov	r0, r1
 800bd90:	4611      	mov	r1, r2
 800bd92:	2200      	movs	r2, #0
 800bd94:	602a      	str	r2, [r5, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	f7f9 f8a7 	bl	8004eea <_write>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d102      	bne.n	800bda6 <_write_r+0x1e>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	b103      	cbz	r3, 800bda6 <_write_r+0x1e>
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	20001170 	.word	0x20001170

0800bdac <_close_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d06      	ldr	r5, [pc, #24]	; (800bdc8 <_close_r+0x1c>)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	f7f9 f8b3 	bl	8004f22 <_close>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_close_r+0x1a>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_close_r+0x1a>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	20001170 	.word	0x20001170

0800bdcc <quorem>:
 800bdcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd0:	6903      	ldr	r3, [r0, #16]
 800bdd2:	690c      	ldr	r4, [r1, #16]
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	f2c0 8081 	blt.w	800bede <quorem+0x112>
 800bddc:	3c01      	subs	r4, #1
 800bdde:	f101 0814 	add.w	r8, r1, #20
 800bde2:	f100 0514 	add.w	r5, r0, #20
 800bde6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdea:	9301      	str	r3, [sp, #4]
 800bdec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bdfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be00:	fbb2 f6f3 	udiv	r6, r2, r3
 800be04:	d331      	bcc.n	800be6a <quorem+0x9e>
 800be06:	f04f 0e00 	mov.w	lr, #0
 800be0a:	4640      	mov	r0, r8
 800be0c:	46ac      	mov	ip, r5
 800be0e:	46f2      	mov	sl, lr
 800be10:	f850 2b04 	ldr.w	r2, [r0], #4
 800be14:	b293      	uxth	r3, r2
 800be16:	fb06 e303 	mla	r3, r6, r3, lr
 800be1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be1e:	b29b      	uxth	r3, r3
 800be20:	ebaa 0303 	sub.w	r3, sl, r3
 800be24:	f8dc a000 	ldr.w	sl, [ip]
 800be28:	0c12      	lsrs	r2, r2, #16
 800be2a:	fa13 f38a 	uxtah	r3, r3, sl
 800be2e:	fb06 e202 	mla	r2, r6, r2, lr
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	9b00      	ldr	r3, [sp, #0]
 800be36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be3a:	b292      	uxth	r2, r2
 800be3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be44:	f8bd 3000 	ldrh.w	r3, [sp]
 800be48:	4581      	cmp	r9, r0
 800be4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be4e:	f84c 3b04 	str.w	r3, [ip], #4
 800be52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be56:	d2db      	bcs.n	800be10 <quorem+0x44>
 800be58:	f855 300b 	ldr.w	r3, [r5, fp]
 800be5c:	b92b      	cbnz	r3, 800be6a <quorem+0x9e>
 800be5e:	9b01      	ldr	r3, [sp, #4]
 800be60:	3b04      	subs	r3, #4
 800be62:	429d      	cmp	r5, r3
 800be64:	461a      	mov	r2, r3
 800be66:	d32e      	bcc.n	800bec6 <quorem+0xfa>
 800be68:	613c      	str	r4, [r7, #16]
 800be6a:	4638      	mov	r0, r7
 800be6c:	f001 fca4 	bl	800d7b8 <__mcmp>
 800be70:	2800      	cmp	r0, #0
 800be72:	db24      	blt.n	800bebe <quorem+0xf2>
 800be74:	3601      	adds	r6, #1
 800be76:	4628      	mov	r0, r5
 800be78:	f04f 0c00 	mov.w	ip, #0
 800be7c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be80:	f8d0 e000 	ldr.w	lr, [r0]
 800be84:	b293      	uxth	r3, r2
 800be86:	ebac 0303 	sub.w	r3, ip, r3
 800be8a:	0c12      	lsrs	r2, r2, #16
 800be8c:	fa13 f38e 	uxtah	r3, r3, lr
 800be90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be98:	b29b      	uxth	r3, r3
 800be9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be9e:	45c1      	cmp	r9, r8
 800bea0:	f840 3b04 	str.w	r3, [r0], #4
 800bea4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bea8:	d2e8      	bcs.n	800be7c <quorem+0xb0>
 800beaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beb2:	b922      	cbnz	r2, 800bebe <quorem+0xf2>
 800beb4:	3b04      	subs	r3, #4
 800beb6:	429d      	cmp	r5, r3
 800beb8:	461a      	mov	r2, r3
 800beba:	d30a      	bcc.n	800bed2 <quorem+0x106>
 800bebc:	613c      	str	r4, [r7, #16]
 800bebe:	4630      	mov	r0, r6
 800bec0:	b003      	add	sp, #12
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	6812      	ldr	r2, [r2, #0]
 800bec8:	3b04      	subs	r3, #4
 800beca:	2a00      	cmp	r2, #0
 800becc:	d1cc      	bne.n	800be68 <quorem+0x9c>
 800bece:	3c01      	subs	r4, #1
 800bed0:	e7c7      	b.n	800be62 <quorem+0x96>
 800bed2:	6812      	ldr	r2, [r2, #0]
 800bed4:	3b04      	subs	r3, #4
 800bed6:	2a00      	cmp	r2, #0
 800bed8:	d1f0      	bne.n	800bebc <quorem+0xf0>
 800beda:	3c01      	subs	r4, #1
 800bedc:	e7eb      	b.n	800beb6 <quorem+0xea>
 800bede:	2000      	movs	r0, #0
 800bee0:	e7ee      	b.n	800bec0 <quorem+0xf4>
 800bee2:	0000      	movs	r0, r0
 800bee4:	0000      	movs	r0, r0
	...

0800bee8 <_dtoa_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	ed2d 8b04 	vpush	{d8-d9}
 800bef0:	ec57 6b10 	vmov	r6, r7, d0
 800bef4:	b093      	sub	sp, #76	; 0x4c
 800bef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800befc:	9106      	str	r1, [sp, #24]
 800befe:	ee10 aa10 	vmov	sl, s0
 800bf02:	4604      	mov	r4, r0
 800bf04:	9209      	str	r2, [sp, #36]	; 0x24
 800bf06:	930c      	str	r3, [sp, #48]	; 0x30
 800bf08:	46bb      	mov	fp, r7
 800bf0a:	b975      	cbnz	r5, 800bf2a <_dtoa_r+0x42>
 800bf0c:	2010      	movs	r0, #16
 800bf0e:	f001 f95f 	bl	800d1d0 <malloc>
 800bf12:	4602      	mov	r2, r0
 800bf14:	6260      	str	r0, [r4, #36]	; 0x24
 800bf16:	b920      	cbnz	r0, 800bf22 <_dtoa_r+0x3a>
 800bf18:	4ba7      	ldr	r3, [pc, #668]	; (800c1b8 <_dtoa_r+0x2d0>)
 800bf1a:	21ea      	movs	r1, #234	; 0xea
 800bf1c:	48a7      	ldr	r0, [pc, #668]	; (800c1bc <_dtoa_r+0x2d4>)
 800bf1e:	f002 fceb 	bl	800e8f8 <__assert_func>
 800bf22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf26:	6005      	str	r5, [r0, #0]
 800bf28:	60c5      	str	r5, [r0, #12]
 800bf2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf2c:	6819      	ldr	r1, [r3, #0]
 800bf2e:	b151      	cbz	r1, 800bf46 <_dtoa_r+0x5e>
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	604a      	str	r2, [r1, #4]
 800bf34:	2301      	movs	r3, #1
 800bf36:	4093      	lsls	r3, r2
 800bf38:	608b      	str	r3, [r1, #8]
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f001 f9b0 	bl	800d2a0 <_Bfree>
 800bf40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	1e3b      	subs	r3, r7, #0
 800bf48:	bfaa      	itet	ge
 800bf4a:	2300      	movge	r3, #0
 800bf4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bf50:	f8c8 3000 	strge.w	r3, [r8]
 800bf54:	4b9a      	ldr	r3, [pc, #616]	; (800c1c0 <_dtoa_r+0x2d8>)
 800bf56:	bfbc      	itt	lt
 800bf58:	2201      	movlt	r2, #1
 800bf5a:	f8c8 2000 	strlt.w	r2, [r8]
 800bf5e:	ea33 030b 	bics.w	r3, r3, fp
 800bf62:	d11b      	bne.n	800bf9c <_dtoa_r+0xb4>
 800bf64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf66:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf6a:	6013      	str	r3, [r2, #0]
 800bf6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf70:	4333      	orrs	r3, r6
 800bf72:	f000 8592 	beq.w	800ca9a <_dtoa_r+0xbb2>
 800bf76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf78:	b963      	cbnz	r3, 800bf94 <_dtoa_r+0xac>
 800bf7a:	4b92      	ldr	r3, [pc, #584]	; (800c1c4 <_dtoa_r+0x2dc>)
 800bf7c:	e022      	b.n	800bfc4 <_dtoa_r+0xdc>
 800bf7e:	4b92      	ldr	r3, [pc, #584]	; (800c1c8 <_dtoa_r+0x2e0>)
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	3308      	adds	r3, #8
 800bf84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	9801      	ldr	r0, [sp, #4]
 800bf8a:	b013      	add	sp, #76	; 0x4c
 800bf8c:	ecbd 8b04 	vpop	{d8-d9}
 800bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf94:	4b8b      	ldr	r3, [pc, #556]	; (800c1c4 <_dtoa_r+0x2dc>)
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	3303      	adds	r3, #3
 800bf9a:	e7f3      	b.n	800bf84 <_dtoa_r+0x9c>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	4650      	mov	r0, sl
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	f7f4 fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 800bfa8:	ec4b ab19 	vmov	d9, sl, fp
 800bfac:	4680      	mov	r8, r0
 800bfae:	b158      	cbz	r0, 800bfc8 <_dtoa_r+0xe0>
 800bfb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 856b 	beq.w	800ca94 <_dtoa_r+0xbac>
 800bfbe:	4883      	ldr	r0, [pc, #524]	; (800c1cc <_dtoa_r+0x2e4>)
 800bfc0:	6018      	str	r0, [r3, #0]
 800bfc2:	1e43      	subs	r3, r0, #1
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	e7df      	b.n	800bf88 <_dtoa_r+0xa0>
 800bfc8:	ec4b ab10 	vmov	d0, sl, fp
 800bfcc:	aa10      	add	r2, sp, #64	; 0x40
 800bfce:	a911      	add	r1, sp, #68	; 0x44
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f001 fd13 	bl	800d9fc <__d2b>
 800bfd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bfda:	ee08 0a10 	vmov	s16, r0
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	f000 8084 	beq.w	800c0ec <_dtoa_r+0x204>
 800bfe4:	ee19 3a90 	vmov	r3, s19
 800bfe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bff0:	4656      	mov	r6, sl
 800bff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bffa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bffe:	4b74      	ldr	r3, [pc, #464]	; (800c1d0 <_dtoa_r+0x2e8>)
 800c000:	2200      	movs	r2, #0
 800c002:	4630      	mov	r0, r6
 800c004:	4639      	mov	r1, r7
 800c006:	f7f4 f95f 	bl	80002c8 <__aeabi_dsub>
 800c00a:	a365      	add	r3, pc, #404	; (adr r3, 800c1a0 <_dtoa_r+0x2b8>)
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	f7f4 fb12 	bl	8000638 <__aeabi_dmul>
 800c014:	a364      	add	r3, pc, #400	; (adr r3, 800c1a8 <_dtoa_r+0x2c0>)
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	f7f4 f957 	bl	80002cc <__adddf3>
 800c01e:	4606      	mov	r6, r0
 800c020:	4628      	mov	r0, r5
 800c022:	460f      	mov	r7, r1
 800c024:	f7f4 fa9e 	bl	8000564 <__aeabi_i2d>
 800c028:	a361      	add	r3, pc, #388	; (adr r3, 800c1b0 <_dtoa_r+0x2c8>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f7f4 fb03 	bl	8000638 <__aeabi_dmul>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4630      	mov	r0, r6
 800c038:	4639      	mov	r1, r7
 800c03a:	f7f4 f947 	bl	80002cc <__adddf3>
 800c03e:	4606      	mov	r6, r0
 800c040:	460f      	mov	r7, r1
 800c042:	f7f4 fda9 	bl	8000b98 <__aeabi_d2iz>
 800c046:	2200      	movs	r2, #0
 800c048:	9000      	str	r0, [sp, #0]
 800c04a:	2300      	movs	r3, #0
 800c04c:	4630      	mov	r0, r6
 800c04e:	4639      	mov	r1, r7
 800c050:	f7f4 fd64 	bl	8000b1c <__aeabi_dcmplt>
 800c054:	b150      	cbz	r0, 800c06c <_dtoa_r+0x184>
 800c056:	9800      	ldr	r0, [sp, #0]
 800c058:	f7f4 fa84 	bl	8000564 <__aeabi_i2d>
 800c05c:	4632      	mov	r2, r6
 800c05e:	463b      	mov	r3, r7
 800c060:	f7f4 fd52 	bl	8000b08 <__aeabi_dcmpeq>
 800c064:	b910      	cbnz	r0, 800c06c <_dtoa_r+0x184>
 800c066:	9b00      	ldr	r3, [sp, #0]
 800c068:	3b01      	subs	r3, #1
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	9b00      	ldr	r3, [sp, #0]
 800c06e:	2b16      	cmp	r3, #22
 800c070:	d85a      	bhi.n	800c128 <_dtoa_r+0x240>
 800c072:	9a00      	ldr	r2, [sp, #0]
 800c074:	4b57      	ldr	r3, [pc, #348]	; (800c1d4 <_dtoa_r+0x2ec>)
 800c076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	ec51 0b19 	vmov	r0, r1, d9
 800c082:	f7f4 fd4b 	bl	8000b1c <__aeabi_dcmplt>
 800c086:	2800      	cmp	r0, #0
 800c088:	d050      	beq.n	800c12c <_dtoa_r+0x244>
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	2300      	movs	r3, #0
 800c092:	930b      	str	r3, [sp, #44]	; 0x2c
 800c094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c096:	1b5d      	subs	r5, r3, r5
 800c098:	1e6b      	subs	r3, r5, #1
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	bf45      	ittet	mi
 800c09e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c0a2:	9304      	strmi	r3, [sp, #16]
 800c0a4:	2300      	movpl	r3, #0
 800c0a6:	2300      	movmi	r3, #0
 800c0a8:	bf4c      	ite	mi
 800c0aa:	9305      	strmi	r3, [sp, #20]
 800c0ac:	9304      	strpl	r3, [sp, #16]
 800c0ae:	9b00      	ldr	r3, [sp, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	db3d      	blt.n	800c130 <_dtoa_r+0x248>
 800c0b4:	9b05      	ldr	r3, [sp, #20]
 800c0b6:	9a00      	ldr	r2, [sp, #0]
 800c0b8:	920a      	str	r2, [sp, #40]	; 0x28
 800c0ba:	4413      	add	r3, r2
 800c0bc:	9305      	str	r3, [sp, #20]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9307      	str	r3, [sp, #28]
 800c0c2:	9b06      	ldr	r3, [sp, #24]
 800c0c4:	2b09      	cmp	r3, #9
 800c0c6:	f200 8089 	bhi.w	800c1dc <_dtoa_r+0x2f4>
 800c0ca:	2b05      	cmp	r3, #5
 800c0cc:	bfc4      	itt	gt
 800c0ce:	3b04      	subgt	r3, #4
 800c0d0:	9306      	strgt	r3, [sp, #24]
 800c0d2:	9b06      	ldr	r3, [sp, #24]
 800c0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800c0d8:	bfcc      	ite	gt
 800c0da:	2500      	movgt	r5, #0
 800c0dc:	2501      	movle	r5, #1
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	f200 8087 	bhi.w	800c1f2 <_dtoa_r+0x30a>
 800c0e4:	e8df f003 	tbb	[pc, r3]
 800c0e8:	59383a2d 	.word	0x59383a2d
 800c0ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c0f0:	441d      	add	r5, r3
 800c0f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	bfc1      	itttt	gt
 800c0fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c0fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c102:	fa0b f303 	lslgt.w	r3, fp, r3
 800c106:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c10a:	bfda      	itte	le
 800c10c:	f1c3 0320 	rsble	r3, r3, #32
 800c110:	fa06 f003 	lslle.w	r0, r6, r3
 800c114:	4318      	orrgt	r0, r3
 800c116:	f7f4 fa15 	bl	8000544 <__aeabi_ui2d>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4606      	mov	r6, r0
 800c11e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c122:	3d01      	subs	r5, #1
 800c124:	930e      	str	r3, [sp, #56]	; 0x38
 800c126:	e76a      	b.n	800bffe <_dtoa_r+0x116>
 800c128:	2301      	movs	r3, #1
 800c12a:	e7b2      	b.n	800c092 <_dtoa_r+0x1aa>
 800c12c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c12e:	e7b1      	b.n	800c094 <_dtoa_r+0x1ac>
 800c130:	9b04      	ldr	r3, [sp, #16]
 800c132:	9a00      	ldr	r2, [sp, #0]
 800c134:	1a9b      	subs	r3, r3, r2
 800c136:	9304      	str	r3, [sp, #16]
 800c138:	4253      	negs	r3, r2
 800c13a:	9307      	str	r3, [sp, #28]
 800c13c:	2300      	movs	r3, #0
 800c13e:	930a      	str	r3, [sp, #40]	; 0x28
 800c140:	e7bf      	b.n	800c0c2 <_dtoa_r+0x1da>
 800c142:	2300      	movs	r3, #0
 800c144:	9308      	str	r3, [sp, #32]
 800c146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c148:	2b00      	cmp	r3, #0
 800c14a:	dc55      	bgt.n	800c1f8 <_dtoa_r+0x310>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c152:	461a      	mov	r2, r3
 800c154:	9209      	str	r2, [sp, #36]	; 0x24
 800c156:	e00c      	b.n	800c172 <_dtoa_r+0x28a>
 800c158:	2301      	movs	r3, #1
 800c15a:	e7f3      	b.n	800c144 <_dtoa_r+0x25c>
 800c15c:	2300      	movs	r3, #0
 800c15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c160:	9308      	str	r3, [sp, #32]
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	4413      	add	r3, r2
 800c166:	9302      	str	r3, [sp, #8]
 800c168:	3301      	adds	r3, #1
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	9303      	str	r3, [sp, #12]
 800c16e:	bfb8      	it	lt
 800c170:	2301      	movlt	r3, #1
 800c172:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c174:	2200      	movs	r2, #0
 800c176:	6042      	str	r2, [r0, #4]
 800c178:	2204      	movs	r2, #4
 800c17a:	f102 0614 	add.w	r6, r2, #20
 800c17e:	429e      	cmp	r6, r3
 800c180:	6841      	ldr	r1, [r0, #4]
 800c182:	d93d      	bls.n	800c200 <_dtoa_r+0x318>
 800c184:	4620      	mov	r0, r4
 800c186:	f001 f84b 	bl	800d220 <_Balloc>
 800c18a:	9001      	str	r0, [sp, #4]
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d13b      	bne.n	800c208 <_dtoa_r+0x320>
 800c190:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <_dtoa_r+0x2f0>)
 800c192:	4602      	mov	r2, r0
 800c194:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c198:	e6c0      	b.n	800bf1c <_dtoa_r+0x34>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e7df      	b.n	800c15e <_dtoa_r+0x276>
 800c19e:	bf00      	nop
 800c1a0:	636f4361 	.word	0x636f4361
 800c1a4:	3fd287a7 	.word	0x3fd287a7
 800c1a8:	8b60c8b3 	.word	0x8b60c8b3
 800c1ac:	3fc68a28 	.word	0x3fc68a28
 800c1b0:	509f79fb 	.word	0x509f79fb
 800c1b4:	3fd34413 	.word	0x3fd34413
 800c1b8:	08011346 	.word	0x08011346
 800c1bc:	0801135d 	.word	0x0801135d
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	08011342 	.word	0x08011342
 800c1c8:	08011339 	.word	0x08011339
 800c1cc:	080115b2 	.word	0x080115b2
 800c1d0:	3ff80000 	.word	0x3ff80000
 800c1d4:	080114c8 	.word	0x080114c8
 800c1d8:	080113b8 	.word	0x080113b8
 800c1dc:	2501      	movs	r5, #1
 800c1de:	2300      	movs	r3, #0
 800c1e0:	9306      	str	r3, [sp, #24]
 800c1e2:	9508      	str	r5, [sp, #32]
 800c1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2312      	movs	r3, #18
 800c1f0:	e7b0      	b.n	800c154 <_dtoa_r+0x26c>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	9308      	str	r3, [sp, #32]
 800c1f6:	e7f5      	b.n	800c1e4 <_dtoa_r+0x2fc>
 800c1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1fe:	e7b8      	b.n	800c172 <_dtoa_r+0x28a>
 800c200:	3101      	adds	r1, #1
 800c202:	6041      	str	r1, [r0, #4]
 800c204:	0052      	lsls	r2, r2, #1
 800c206:	e7b8      	b.n	800c17a <_dtoa_r+0x292>
 800c208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c20a:	9a01      	ldr	r2, [sp, #4]
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	9b03      	ldr	r3, [sp, #12]
 800c210:	2b0e      	cmp	r3, #14
 800c212:	f200 809d 	bhi.w	800c350 <_dtoa_r+0x468>
 800c216:	2d00      	cmp	r5, #0
 800c218:	f000 809a 	beq.w	800c350 <_dtoa_r+0x468>
 800c21c:	9b00      	ldr	r3, [sp, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	dd32      	ble.n	800c288 <_dtoa_r+0x3a0>
 800c222:	4ab7      	ldr	r2, [pc, #732]	; (800c500 <_dtoa_r+0x618>)
 800c224:	f003 030f 	and.w	r3, r3, #15
 800c228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c22c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	05d8      	lsls	r0, r3, #23
 800c234:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c238:	d516      	bpl.n	800c268 <_dtoa_r+0x380>
 800c23a:	4bb2      	ldr	r3, [pc, #712]	; (800c504 <_dtoa_r+0x61c>)
 800c23c:	ec51 0b19 	vmov	r0, r1, d9
 800c240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c244:	f7f4 fb22 	bl	800088c <__aeabi_ddiv>
 800c248:	f007 070f 	and.w	r7, r7, #15
 800c24c:	4682      	mov	sl, r0
 800c24e:	468b      	mov	fp, r1
 800c250:	2503      	movs	r5, #3
 800c252:	4eac      	ldr	r6, [pc, #688]	; (800c504 <_dtoa_r+0x61c>)
 800c254:	b957      	cbnz	r7, 800c26c <_dtoa_r+0x384>
 800c256:	4642      	mov	r2, r8
 800c258:	464b      	mov	r3, r9
 800c25a:	4650      	mov	r0, sl
 800c25c:	4659      	mov	r1, fp
 800c25e:	f7f4 fb15 	bl	800088c <__aeabi_ddiv>
 800c262:	4682      	mov	sl, r0
 800c264:	468b      	mov	fp, r1
 800c266:	e028      	b.n	800c2ba <_dtoa_r+0x3d2>
 800c268:	2502      	movs	r5, #2
 800c26a:	e7f2      	b.n	800c252 <_dtoa_r+0x36a>
 800c26c:	07f9      	lsls	r1, r7, #31
 800c26e:	d508      	bpl.n	800c282 <_dtoa_r+0x39a>
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c278:	f7f4 f9de 	bl	8000638 <__aeabi_dmul>
 800c27c:	3501      	adds	r5, #1
 800c27e:	4680      	mov	r8, r0
 800c280:	4689      	mov	r9, r1
 800c282:	107f      	asrs	r7, r7, #1
 800c284:	3608      	adds	r6, #8
 800c286:	e7e5      	b.n	800c254 <_dtoa_r+0x36c>
 800c288:	f000 809b 	beq.w	800c3c2 <_dtoa_r+0x4da>
 800c28c:	9b00      	ldr	r3, [sp, #0]
 800c28e:	4f9d      	ldr	r7, [pc, #628]	; (800c504 <_dtoa_r+0x61c>)
 800c290:	425e      	negs	r6, r3
 800c292:	4b9b      	ldr	r3, [pc, #620]	; (800c500 <_dtoa_r+0x618>)
 800c294:	f006 020f 	and.w	r2, r6, #15
 800c298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	ec51 0b19 	vmov	r0, r1, d9
 800c2a4:	f7f4 f9c8 	bl	8000638 <__aeabi_dmul>
 800c2a8:	1136      	asrs	r6, r6, #4
 800c2aa:	4682      	mov	sl, r0
 800c2ac:	468b      	mov	fp, r1
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	2502      	movs	r5, #2
 800c2b2:	2e00      	cmp	r6, #0
 800c2b4:	d17a      	bne.n	800c3ac <_dtoa_r+0x4c4>
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1d3      	bne.n	800c262 <_dtoa_r+0x37a>
 800c2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 8082 	beq.w	800c3c6 <_dtoa_r+0x4de>
 800c2c2:	4b91      	ldr	r3, [pc, #580]	; (800c508 <_dtoa_r+0x620>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4650      	mov	r0, sl
 800c2c8:	4659      	mov	r1, fp
 800c2ca:	f7f4 fc27 	bl	8000b1c <__aeabi_dcmplt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d079      	beq.n	800c3c6 <_dtoa_r+0x4de>
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d076      	beq.n	800c3c6 <_dtoa_r+0x4de>
 800c2d8:	9b02      	ldr	r3, [sp, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dd36      	ble.n	800c34c <_dtoa_r+0x464>
 800c2de:	9b00      	ldr	r3, [sp, #0]
 800c2e0:	4650      	mov	r0, sl
 800c2e2:	4659      	mov	r1, fp
 800c2e4:	1e5f      	subs	r7, r3, #1
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	4b88      	ldr	r3, [pc, #544]	; (800c50c <_dtoa_r+0x624>)
 800c2ea:	f7f4 f9a5 	bl	8000638 <__aeabi_dmul>
 800c2ee:	9e02      	ldr	r6, [sp, #8]
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	468b      	mov	fp, r1
 800c2f4:	3501      	adds	r5, #1
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f7f4 f934 	bl	8000564 <__aeabi_i2d>
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	465b      	mov	r3, fp
 800c300:	f7f4 f99a 	bl	8000638 <__aeabi_dmul>
 800c304:	4b82      	ldr	r3, [pc, #520]	; (800c510 <_dtoa_r+0x628>)
 800c306:	2200      	movs	r2, #0
 800c308:	f7f3 ffe0 	bl	80002cc <__adddf3>
 800c30c:	46d0      	mov	r8, sl
 800c30e:	46d9      	mov	r9, fp
 800c310:	4682      	mov	sl, r0
 800c312:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c316:	2e00      	cmp	r6, #0
 800c318:	d158      	bne.n	800c3cc <_dtoa_r+0x4e4>
 800c31a:	4b7e      	ldr	r3, [pc, #504]	; (800c514 <_dtoa_r+0x62c>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f3 ffd1 	bl	80002c8 <__aeabi_dsub>
 800c326:	4652      	mov	r2, sl
 800c328:	465b      	mov	r3, fp
 800c32a:	4680      	mov	r8, r0
 800c32c:	4689      	mov	r9, r1
 800c32e:	f7f4 fc13 	bl	8000b58 <__aeabi_dcmpgt>
 800c332:	2800      	cmp	r0, #0
 800c334:	f040 8295 	bne.w	800c862 <_dtoa_r+0x97a>
 800c338:	4652      	mov	r2, sl
 800c33a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c33e:	4640      	mov	r0, r8
 800c340:	4649      	mov	r1, r9
 800c342:	f7f4 fbeb 	bl	8000b1c <__aeabi_dcmplt>
 800c346:	2800      	cmp	r0, #0
 800c348:	f040 8289 	bne.w	800c85e <_dtoa_r+0x976>
 800c34c:	ec5b ab19 	vmov	sl, fp, d9
 800c350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c352:	2b00      	cmp	r3, #0
 800c354:	f2c0 8148 	blt.w	800c5e8 <_dtoa_r+0x700>
 800c358:	9a00      	ldr	r2, [sp, #0]
 800c35a:	2a0e      	cmp	r2, #14
 800c35c:	f300 8144 	bgt.w	800c5e8 <_dtoa_r+0x700>
 800c360:	4b67      	ldr	r3, [pc, #412]	; (800c500 <_dtoa_r+0x618>)
 800c362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c366:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f280 80d5 	bge.w	800c51c <_dtoa_r+0x634>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f300 80d1 	bgt.w	800c51c <_dtoa_r+0x634>
 800c37a:	f040 826f 	bne.w	800c85c <_dtoa_r+0x974>
 800c37e:	4b65      	ldr	r3, [pc, #404]	; (800c514 <_dtoa_r+0x62c>)
 800c380:	2200      	movs	r2, #0
 800c382:	4640      	mov	r0, r8
 800c384:	4649      	mov	r1, r9
 800c386:	f7f4 f957 	bl	8000638 <__aeabi_dmul>
 800c38a:	4652      	mov	r2, sl
 800c38c:	465b      	mov	r3, fp
 800c38e:	f7f4 fbd9 	bl	8000b44 <__aeabi_dcmpge>
 800c392:	9e03      	ldr	r6, [sp, #12]
 800c394:	4637      	mov	r7, r6
 800c396:	2800      	cmp	r0, #0
 800c398:	f040 8245 	bne.w	800c826 <_dtoa_r+0x93e>
 800c39c:	9d01      	ldr	r5, [sp, #4]
 800c39e:	2331      	movs	r3, #49	; 0x31
 800c3a0:	f805 3b01 	strb.w	r3, [r5], #1
 800c3a4:	9b00      	ldr	r3, [sp, #0]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	e240      	b.n	800c82e <_dtoa_r+0x946>
 800c3ac:	07f2      	lsls	r2, r6, #31
 800c3ae:	d505      	bpl.n	800c3bc <_dtoa_r+0x4d4>
 800c3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b4:	f7f4 f940 	bl	8000638 <__aeabi_dmul>
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	1076      	asrs	r6, r6, #1
 800c3be:	3708      	adds	r7, #8
 800c3c0:	e777      	b.n	800c2b2 <_dtoa_r+0x3ca>
 800c3c2:	2502      	movs	r5, #2
 800c3c4:	e779      	b.n	800c2ba <_dtoa_r+0x3d2>
 800c3c6:	9f00      	ldr	r7, [sp, #0]
 800c3c8:	9e03      	ldr	r6, [sp, #12]
 800c3ca:	e794      	b.n	800c2f6 <_dtoa_r+0x40e>
 800c3cc:	9901      	ldr	r1, [sp, #4]
 800c3ce:	4b4c      	ldr	r3, [pc, #304]	; (800c500 <_dtoa_r+0x618>)
 800c3d0:	4431      	add	r1, r6
 800c3d2:	910d      	str	r1, [sp, #52]	; 0x34
 800c3d4:	9908      	ldr	r1, [sp, #32]
 800c3d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c3da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3de:	2900      	cmp	r1, #0
 800c3e0:	d043      	beq.n	800c46a <_dtoa_r+0x582>
 800c3e2:	494d      	ldr	r1, [pc, #308]	; (800c518 <_dtoa_r+0x630>)
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	f7f4 fa51 	bl	800088c <__aeabi_ddiv>
 800c3ea:	4652      	mov	r2, sl
 800c3ec:	465b      	mov	r3, fp
 800c3ee:	f7f3 ff6b 	bl	80002c8 <__aeabi_dsub>
 800c3f2:	9d01      	ldr	r5, [sp, #4]
 800c3f4:	4682      	mov	sl, r0
 800c3f6:	468b      	mov	fp, r1
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	f7f4 fbcc 	bl	8000b98 <__aeabi_d2iz>
 800c400:	4606      	mov	r6, r0
 800c402:	f7f4 f8af 	bl	8000564 <__aeabi_i2d>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4640      	mov	r0, r8
 800c40c:	4649      	mov	r1, r9
 800c40e:	f7f3 ff5b 	bl	80002c8 <__aeabi_dsub>
 800c412:	3630      	adds	r6, #48	; 0x30
 800c414:	f805 6b01 	strb.w	r6, [r5], #1
 800c418:	4652      	mov	r2, sl
 800c41a:	465b      	mov	r3, fp
 800c41c:	4680      	mov	r8, r0
 800c41e:	4689      	mov	r9, r1
 800c420:	f7f4 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 800c424:	2800      	cmp	r0, #0
 800c426:	d163      	bne.n	800c4f0 <_dtoa_r+0x608>
 800c428:	4642      	mov	r2, r8
 800c42a:	464b      	mov	r3, r9
 800c42c:	4936      	ldr	r1, [pc, #216]	; (800c508 <_dtoa_r+0x620>)
 800c42e:	2000      	movs	r0, #0
 800c430:	f7f3 ff4a 	bl	80002c8 <__aeabi_dsub>
 800c434:	4652      	mov	r2, sl
 800c436:	465b      	mov	r3, fp
 800c438:	f7f4 fb70 	bl	8000b1c <__aeabi_dcmplt>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f040 80b5 	bne.w	800c5ac <_dtoa_r+0x6c4>
 800c442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c444:	429d      	cmp	r5, r3
 800c446:	d081      	beq.n	800c34c <_dtoa_r+0x464>
 800c448:	4b30      	ldr	r3, [pc, #192]	; (800c50c <_dtoa_r+0x624>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	4650      	mov	r0, sl
 800c44e:	4659      	mov	r1, fp
 800c450:	f7f4 f8f2 	bl	8000638 <__aeabi_dmul>
 800c454:	4b2d      	ldr	r3, [pc, #180]	; (800c50c <_dtoa_r+0x624>)
 800c456:	4682      	mov	sl, r0
 800c458:	468b      	mov	fp, r1
 800c45a:	4640      	mov	r0, r8
 800c45c:	4649      	mov	r1, r9
 800c45e:	2200      	movs	r2, #0
 800c460:	f7f4 f8ea 	bl	8000638 <__aeabi_dmul>
 800c464:	4680      	mov	r8, r0
 800c466:	4689      	mov	r9, r1
 800c468:	e7c6      	b.n	800c3f8 <_dtoa_r+0x510>
 800c46a:	4650      	mov	r0, sl
 800c46c:	4659      	mov	r1, fp
 800c46e:	f7f4 f8e3 	bl	8000638 <__aeabi_dmul>
 800c472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c474:	9d01      	ldr	r5, [sp, #4]
 800c476:	930f      	str	r3, [sp, #60]	; 0x3c
 800c478:	4682      	mov	sl, r0
 800c47a:	468b      	mov	fp, r1
 800c47c:	4649      	mov	r1, r9
 800c47e:	4640      	mov	r0, r8
 800c480:	f7f4 fb8a 	bl	8000b98 <__aeabi_d2iz>
 800c484:	4606      	mov	r6, r0
 800c486:	f7f4 f86d 	bl	8000564 <__aeabi_i2d>
 800c48a:	3630      	adds	r6, #48	; 0x30
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	4640      	mov	r0, r8
 800c492:	4649      	mov	r1, r9
 800c494:	f7f3 ff18 	bl	80002c8 <__aeabi_dsub>
 800c498:	f805 6b01 	strb.w	r6, [r5], #1
 800c49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c49e:	429d      	cmp	r5, r3
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4689      	mov	r9, r1
 800c4a4:	f04f 0200 	mov.w	r2, #0
 800c4a8:	d124      	bne.n	800c4f4 <_dtoa_r+0x60c>
 800c4aa:	4b1b      	ldr	r3, [pc, #108]	; (800c518 <_dtoa_r+0x630>)
 800c4ac:	4650      	mov	r0, sl
 800c4ae:	4659      	mov	r1, fp
 800c4b0:	f7f3 ff0c 	bl	80002cc <__adddf3>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4640      	mov	r0, r8
 800c4ba:	4649      	mov	r1, r9
 800c4bc:	f7f4 fb4c 	bl	8000b58 <__aeabi_dcmpgt>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d173      	bne.n	800c5ac <_dtoa_r+0x6c4>
 800c4c4:	4652      	mov	r2, sl
 800c4c6:	465b      	mov	r3, fp
 800c4c8:	4913      	ldr	r1, [pc, #76]	; (800c518 <_dtoa_r+0x630>)
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	f7f3 fefc 	bl	80002c8 <__aeabi_dsub>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 fb20 	bl	8000b1c <__aeabi_dcmplt>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f43f af35 	beq.w	800c34c <_dtoa_r+0x464>
 800c4e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c4e4:	1e6b      	subs	r3, r5, #1
 800c4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4ec:	2b30      	cmp	r3, #48	; 0x30
 800c4ee:	d0f8      	beq.n	800c4e2 <_dtoa_r+0x5fa>
 800c4f0:	9700      	str	r7, [sp, #0]
 800c4f2:	e049      	b.n	800c588 <_dtoa_r+0x6a0>
 800c4f4:	4b05      	ldr	r3, [pc, #20]	; (800c50c <_dtoa_r+0x624>)
 800c4f6:	f7f4 f89f 	bl	8000638 <__aeabi_dmul>
 800c4fa:	4680      	mov	r8, r0
 800c4fc:	4689      	mov	r9, r1
 800c4fe:	e7bd      	b.n	800c47c <_dtoa_r+0x594>
 800c500:	080114c8 	.word	0x080114c8
 800c504:	080114a0 	.word	0x080114a0
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	40240000 	.word	0x40240000
 800c510:	401c0000 	.word	0x401c0000
 800c514:	40140000 	.word	0x40140000
 800c518:	3fe00000 	.word	0x3fe00000
 800c51c:	9d01      	ldr	r5, [sp, #4]
 800c51e:	4656      	mov	r6, sl
 800c520:	465f      	mov	r7, fp
 800c522:	4642      	mov	r2, r8
 800c524:	464b      	mov	r3, r9
 800c526:	4630      	mov	r0, r6
 800c528:	4639      	mov	r1, r7
 800c52a:	f7f4 f9af 	bl	800088c <__aeabi_ddiv>
 800c52e:	f7f4 fb33 	bl	8000b98 <__aeabi_d2iz>
 800c532:	4682      	mov	sl, r0
 800c534:	f7f4 f816 	bl	8000564 <__aeabi_i2d>
 800c538:	4642      	mov	r2, r8
 800c53a:	464b      	mov	r3, r9
 800c53c:	f7f4 f87c 	bl	8000638 <__aeabi_dmul>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4630      	mov	r0, r6
 800c546:	4639      	mov	r1, r7
 800c548:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c54c:	f7f3 febc 	bl	80002c8 <__aeabi_dsub>
 800c550:	f805 6b01 	strb.w	r6, [r5], #1
 800c554:	9e01      	ldr	r6, [sp, #4]
 800c556:	9f03      	ldr	r7, [sp, #12]
 800c558:	1bae      	subs	r6, r5, r6
 800c55a:	42b7      	cmp	r7, r6
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	d135      	bne.n	800c5ce <_dtoa_r+0x6e6>
 800c562:	f7f3 feb3 	bl	80002cc <__adddf3>
 800c566:	4642      	mov	r2, r8
 800c568:	464b      	mov	r3, r9
 800c56a:	4606      	mov	r6, r0
 800c56c:	460f      	mov	r7, r1
 800c56e:	f7f4 faf3 	bl	8000b58 <__aeabi_dcmpgt>
 800c572:	b9d0      	cbnz	r0, 800c5aa <_dtoa_r+0x6c2>
 800c574:	4642      	mov	r2, r8
 800c576:	464b      	mov	r3, r9
 800c578:	4630      	mov	r0, r6
 800c57a:	4639      	mov	r1, r7
 800c57c:	f7f4 fac4 	bl	8000b08 <__aeabi_dcmpeq>
 800c580:	b110      	cbz	r0, 800c588 <_dtoa_r+0x6a0>
 800c582:	f01a 0f01 	tst.w	sl, #1
 800c586:	d110      	bne.n	800c5aa <_dtoa_r+0x6c2>
 800c588:	4620      	mov	r0, r4
 800c58a:	ee18 1a10 	vmov	r1, s16
 800c58e:	f000 fe87 	bl	800d2a0 <_Bfree>
 800c592:	2300      	movs	r3, #0
 800c594:	9800      	ldr	r0, [sp, #0]
 800c596:	702b      	strb	r3, [r5, #0]
 800c598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c59a:	3001      	adds	r0, #1
 800c59c:	6018      	str	r0, [r3, #0]
 800c59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f43f acf1 	beq.w	800bf88 <_dtoa_r+0xa0>
 800c5a6:	601d      	str	r5, [r3, #0]
 800c5a8:	e4ee      	b.n	800bf88 <_dtoa_r+0xa0>
 800c5aa:	9f00      	ldr	r7, [sp, #0]
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	461d      	mov	r5, r3
 800c5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5b4:	2a39      	cmp	r2, #57	; 0x39
 800c5b6:	d106      	bne.n	800c5c6 <_dtoa_r+0x6de>
 800c5b8:	9a01      	ldr	r2, [sp, #4]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d1f7      	bne.n	800c5ae <_dtoa_r+0x6c6>
 800c5be:	9901      	ldr	r1, [sp, #4]
 800c5c0:	2230      	movs	r2, #48	; 0x30
 800c5c2:	3701      	adds	r7, #1
 800c5c4:	700a      	strb	r2, [r1, #0]
 800c5c6:	781a      	ldrb	r2, [r3, #0]
 800c5c8:	3201      	adds	r2, #1
 800c5ca:	701a      	strb	r2, [r3, #0]
 800c5cc:	e790      	b.n	800c4f0 <_dtoa_r+0x608>
 800c5ce:	4ba6      	ldr	r3, [pc, #664]	; (800c868 <_dtoa_r+0x980>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f7f4 f831 	bl	8000638 <__aeabi_dmul>
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4606      	mov	r6, r0
 800c5dc:	460f      	mov	r7, r1
 800c5de:	f7f4 fa93 	bl	8000b08 <__aeabi_dcmpeq>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d09d      	beq.n	800c522 <_dtoa_r+0x63a>
 800c5e6:	e7cf      	b.n	800c588 <_dtoa_r+0x6a0>
 800c5e8:	9a08      	ldr	r2, [sp, #32]
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	f000 80d7 	beq.w	800c79e <_dtoa_r+0x8b6>
 800c5f0:	9a06      	ldr	r2, [sp, #24]
 800c5f2:	2a01      	cmp	r2, #1
 800c5f4:	f300 80ba 	bgt.w	800c76c <_dtoa_r+0x884>
 800c5f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	f000 80b2 	beq.w	800c764 <_dtoa_r+0x87c>
 800c600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c604:	9e07      	ldr	r6, [sp, #28]
 800c606:	9d04      	ldr	r5, [sp, #16]
 800c608:	9a04      	ldr	r2, [sp, #16]
 800c60a:	441a      	add	r2, r3
 800c60c:	9204      	str	r2, [sp, #16]
 800c60e:	9a05      	ldr	r2, [sp, #20]
 800c610:	2101      	movs	r1, #1
 800c612:	441a      	add	r2, r3
 800c614:	4620      	mov	r0, r4
 800c616:	9205      	str	r2, [sp, #20]
 800c618:	f000 ff44 	bl	800d4a4 <__i2b>
 800c61c:	4607      	mov	r7, r0
 800c61e:	2d00      	cmp	r5, #0
 800c620:	dd0c      	ble.n	800c63c <_dtoa_r+0x754>
 800c622:	9b05      	ldr	r3, [sp, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	dd09      	ble.n	800c63c <_dtoa_r+0x754>
 800c628:	42ab      	cmp	r3, r5
 800c62a:	9a04      	ldr	r2, [sp, #16]
 800c62c:	bfa8      	it	ge
 800c62e:	462b      	movge	r3, r5
 800c630:	1ad2      	subs	r2, r2, r3
 800c632:	9204      	str	r2, [sp, #16]
 800c634:	9a05      	ldr	r2, [sp, #20]
 800c636:	1aed      	subs	r5, r5, r3
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	9305      	str	r3, [sp, #20]
 800c63c:	9b07      	ldr	r3, [sp, #28]
 800c63e:	b31b      	cbz	r3, 800c688 <_dtoa_r+0x7a0>
 800c640:	9b08      	ldr	r3, [sp, #32]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80af 	beq.w	800c7a6 <_dtoa_r+0x8be>
 800c648:	2e00      	cmp	r6, #0
 800c64a:	dd13      	ble.n	800c674 <_dtoa_r+0x78c>
 800c64c:	4639      	mov	r1, r7
 800c64e:	4632      	mov	r2, r6
 800c650:	4620      	mov	r0, r4
 800c652:	f000 ffe7 	bl	800d624 <__pow5mult>
 800c656:	ee18 2a10 	vmov	r2, s16
 800c65a:	4601      	mov	r1, r0
 800c65c:	4607      	mov	r7, r0
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 ff36 	bl	800d4d0 <__multiply>
 800c664:	ee18 1a10 	vmov	r1, s16
 800c668:	4680      	mov	r8, r0
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fe18 	bl	800d2a0 <_Bfree>
 800c670:	ee08 8a10 	vmov	s16, r8
 800c674:	9b07      	ldr	r3, [sp, #28]
 800c676:	1b9a      	subs	r2, r3, r6
 800c678:	d006      	beq.n	800c688 <_dtoa_r+0x7a0>
 800c67a:	ee18 1a10 	vmov	r1, s16
 800c67e:	4620      	mov	r0, r4
 800c680:	f000 ffd0 	bl	800d624 <__pow5mult>
 800c684:	ee08 0a10 	vmov	s16, r0
 800c688:	2101      	movs	r1, #1
 800c68a:	4620      	mov	r0, r4
 800c68c:	f000 ff0a 	bl	800d4a4 <__i2b>
 800c690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c692:	2b00      	cmp	r3, #0
 800c694:	4606      	mov	r6, r0
 800c696:	f340 8088 	ble.w	800c7aa <_dtoa_r+0x8c2>
 800c69a:	461a      	mov	r2, r3
 800c69c:	4601      	mov	r1, r0
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f000 ffc0 	bl	800d624 <__pow5mult>
 800c6a4:	9b06      	ldr	r3, [sp, #24]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	f340 8081 	ble.w	800c7b0 <_dtoa_r+0x8c8>
 800c6ae:	f04f 0800 	mov.w	r8, #0
 800c6b2:	6933      	ldr	r3, [r6, #16]
 800c6b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c6b8:	6918      	ldr	r0, [r3, #16]
 800c6ba:	f000 fea3 	bl	800d404 <__hi0bits>
 800c6be:	f1c0 0020 	rsb	r0, r0, #32
 800c6c2:	9b05      	ldr	r3, [sp, #20]
 800c6c4:	4418      	add	r0, r3
 800c6c6:	f010 001f 	ands.w	r0, r0, #31
 800c6ca:	f000 8092 	beq.w	800c7f2 <_dtoa_r+0x90a>
 800c6ce:	f1c0 0320 	rsb	r3, r0, #32
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	f340 808a 	ble.w	800c7ec <_dtoa_r+0x904>
 800c6d8:	f1c0 001c 	rsb	r0, r0, #28
 800c6dc:	9b04      	ldr	r3, [sp, #16]
 800c6de:	4403      	add	r3, r0
 800c6e0:	9304      	str	r3, [sp, #16]
 800c6e2:	9b05      	ldr	r3, [sp, #20]
 800c6e4:	4403      	add	r3, r0
 800c6e6:	4405      	add	r5, r0
 800c6e8:	9305      	str	r3, [sp, #20]
 800c6ea:	9b04      	ldr	r3, [sp, #16]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd07      	ble.n	800c700 <_dtoa_r+0x818>
 800c6f0:	ee18 1a10 	vmov	r1, s16
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 ffee 	bl	800d6d8 <__lshift>
 800c6fc:	ee08 0a10 	vmov	s16, r0
 800c700:	9b05      	ldr	r3, [sp, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	dd05      	ble.n	800c712 <_dtoa_r+0x82a>
 800c706:	4631      	mov	r1, r6
 800c708:	461a      	mov	r2, r3
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 ffe4 	bl	800d6d8 <__lshift>
 800c710:	4606      	mov	r6, r0
 800c712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d06e      	beq.n	800c7f6 <_dtoa_r+0x90e>
 800c718:	ee18 0a10 	vmov	r0, s16
 800c71c:	4631      	mov	r1, r6
 800c71e:	f001 f84b 	bl	800d7b8 <__mcmp>
 800c722:	2800      	cmp	r0, #0
 800c724:	da67      	bge.n	800c7f6 <_dtoa_r+0x90e>
 800c726:	9b00      	ldr	r3, [sp, #0]
 800c728:	3b01      	subs	r3, #1
 800c72a:	ee18 1a10 	vmov	r1, s16
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	220a      	movs	r2, #10
 800c732:	2300      	movs	r3, #0
 800c734:	4620      	mov	r0, r4
 800c736:	f000 fdd5 	bl	800d2e4 <__multadd>
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	ee08 0a10 	vmov	s16, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 81b1 	beq.w	800caa8 <_dtoa_r+0xbc0>
 800c746:	2300      	movs	r3, #0
 800c748:	4639      	mov	r1, r7
 800c74a:	220a      	movs	r2, #10
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 fdc9 	bl	800d2e4 <__multadd>
 800c752:	9b02      	ldr	r3, [sp, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	4607      	mov	r7, r0
 800c758:	f300 808e 	bgt.w	800c878 <_dtoa_r+0x990>
 800c75c:	9b06      	ldr	r3, [sp, #24]
 800c75e:	2b02      	cmp	r3, #2
 800c760:	dc51      	bgt.n	800c806 <_dtoa_r+0x91e>
 800c762:	e089      	b.n	800c878 <_dtoa_r+0x990>
 800c764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c76a:	e74b      	b.n	800c604 <_dtoa_r+0x71c>
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	1e5e      	subs	r6, r3, #1
 800c770:	9b07      	ldr	r3, [sp, #28]
 800c772:	42b3      	cmp	r3, r6
 800c774:	bfbf      	itttt	lt
 800c776:	9b07      	ldrlt	r3, [sp, #28]
 800c778:	9607      	strlt	r6, [sp, #28]
 800c77a:	1af2      	sublt	r2, r6, r3
 800c77c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c77e:	bfb6      	itet	lt
 800c780:	189b      	addlt	r3, r3, r2
 800c782:	1b9e      	subge	r6, r3, r6
 800c784:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c786:	9b03      	ldr	r3, [sp, #12]
 800c788:	bfb8      	it	lt
 800c78a:	2600      	movlt	r6, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	bfb7      	itett	lt
 800c790:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c794:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c798:	1a9d      	sublt	r5, r3, r2
 800c79a:	2300      	movlt	r3, #0
 800c79c:	e734      	b.n	800c608 <_dtoa_r+0x720>
 800c79e:	9e07      	ldr	r6, [sp, #28]
 800c7a0:	9d04      	ldr	r5, [sp, #16]
 800c7a2:	9f08      	ldr	r7, [sp, #32]
 800c7a4:	e73b      	b.n	800c61e <_dtoa_r+0x736>
 800c7a6:	9a07      	ldr	r2, [sp, #28]
 800c7a8:	e767      	b.n	800c67a <_dtoa_r+0x792>
 800c7aa:	9b06      	ldr	r3, [sp, #24]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	dc18      	bgt.n	800c7e2 <_dtoa_r+0x8fa>
 800c7b0:	f1ba 0f00 	cmp.w	sl, #0
 800c7b4:	d115      	bne.n	800c7e2 <_dtoa_r+0x8fa>
 800c7b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7ba:	b993      	cbnz	r3, 800c7e2 <_dtoa_r+0x8fa>
 800c7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7c0:	0d1b      	lsrs	r3, r3, #20
 800c7c2:	051b      	lsls	r3, r3, #20
 800c7c4:	b183      	cbz	r3, 800c7e8 <_dtoa_r+0x900>
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	9b05      	ldr	r3, [sp, #20]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	9305      	str	r3, [sp, #20]
 800c7d2:	f04f 0801 	mov.w	r8, #1
 800c7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f47f af6a 	bne.w	800c6b2 <_dtoa_r+0x7ca>
 800c7de:	2001      	movs	r0, #1
 800c7e0:	e76f      	b.n	800c6c2 <_dtoa_r+0x7da>
 800c7e2:	f04f 0800 	mov.w	r8, #0
 800c7e6:	e7f6      	b.n	800c7d6 <_dtoa_r+0x8ee>
 800c7e8:	4698      	mov	r8, r3
 800c7ea:	e7f4      	b.n	800c7d6 <_dtoa_r+0x8ee>
 800c7ec:	f43f af7d 	beq.w	800c6ea <_dtoa_r+0x802>
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	301c      	adds	r0, #28
 800c7f4:	e772      	b.n	800c6dc <_dtoa_r+0x7f4>
 800c7f6:	9b03      	ldr	r3, [sp, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc37      	bgt.n	800c86c <_dtoa_r+0x984>
 800c7fc:	9b06      	ldr	r3, [sp, #24]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	dd34      	ble.n	800c86c <_dtoa_r+0x984>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	9302      	str	r3, [sp, #8]
 800c806:	9b02      	ldr	r3, [sp, #8]
 800c808:	b96b      	cbnz	r3, 800c826 <_dtoa_r+0x93e>
 800c80a:	4631      	mov	r1, r6
 800c80c:	2205      	movs	r2, #5
 800c80e:	4620      	mov	r0, r4
 800c810:	f000 fd68 	bl	800d2e4 <__multadd>
 800c814:	4601      	mov	r1, r0
 800c816:	4606      	mov	r6, r0
 800c818:	ee18 0a10 	vmov	r0, s16
 800c81c:	f000 ffcc 	bl	800d7b8 <__mcmp>
 800c820:	2800      	cmp	r0, #0
 800c822:	f73f adbb 	bgt.w	800c39c <_dtoa_r+0x4b4>
 800c826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c828:	9d01      	ldr	r5, [sp, #4]
 800c82a:	43db      	mvns	r3, r3
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	f04f 0800 	mov.w	r8, #0
 800c832:	4631      	mov	r1, r6
 800c834:	4620      	mov	r0, r4
 800c836:	f000 fd33 	bl	800d2a0 <_Bfree>
 800c83a:	2f00      	cmp	r7, #0
 800c83c:	f43f aea4 	beq.w	800c588 <_dtoa_r+0x6a0>
 800c840:	f1b8 0f00 	cmp.w	r8, #0
 800c844:	d005      	beq.n	800c852 <_dtoa_r+0x96a>
 800c846:	45b8      	cmp	r8, r7
 800c848:	d003      	beq.n	800c852 <_dtoa_r+0x96a>
 800c84a:	4641      	mov	r1, r8
 800c84c:	4620      	mov	r0, r4
 800c84e:	f000 fd27 	bl	800d2a0 <_Bfree>
 800c852:	4639      	mov	r1, r7
 800c854:	4620      	mov	r0, r4
 800c856:	f000 fd23 	bl	800d2a0 <_Bfree>
 800c85a:	e695      	b.n	800c588 <_dtoa_r+0x6a0>
 800c85c:	2600      	movs	r6, #0
 800c85e:	4637      	mov	r7, r6
 800c860:	e7e1      	b.n	800c826 <_dtoa_r+0x93e>
 800c862:	9700      	str	r7, [sp, #0]
 800c864:	4637      	mov	r7, r6
 800c866:	e599      	b.n	800c39c <_dtoa_r+0x4b4>
 800c868:	40240000 	.word	0x40240000
 800c86c:	9b08      	ldr	r3, [sp, #32]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 80ca 	beq.w	800ca08 <_dtoa_r+0xb20>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	9302      	str	r3, [sp, #8]
 800c878:	2d00      	cmp	r5, #0
 800c87a:	dd05      	ble.n	800c888 <_dtoa_r+0x9a0>
 800c87c:	4639      	mov	r1, r7
 800c87e:	462a      	mov	r2, r5
 800c880:	4620      	mov	r0, r4
 800c882:	f000 ff29 	bl	800d6d8 <__lshift>
 800c886:	4607      	mov	r7, r0
 800c888:	f1b8 0f00 	cmp.w	r8, #0
 800c88c:	d05b      	beq.n	800c946 <_dtoa_r+0xa5e>
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fcc5 	bl	800d220 <_Balloc>
 800c896:	4605      	mov	r5, r0
 800c898:	b928      	cbnz	r0, 800c8a6 <_dtoa_r+0x9be>
 800c89a:	4b87      	ldr	r3, [pc, #540]	; (800cab8 <_dtoa_r+0xbd0>)
 800c89c:	4602      	mov	r2, r0
 800c89e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c8a2:	f7ff bb3b 	b.w	800bf1c <_dtoa_r+0x34>
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	3202      	adds	r2, #2
 800c8aa:	0092      	lsls	r2, r2, #2
 800c8ac:	f107 010c 	add.w	r1, r7, #12
 800c8b0:	300c      	adds	r0, #12
 800c8b2:	f000 fca7 	bl	800d204 <memcpy>
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f000 ff0c 	bl	800d6d8 <__lshift>
 800c8c0:	9b01      	ldr	r3, [sp, #4]
 800c8c2:	f103 0901 	add.w	r9, r3, #1
 800c8c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	9305      	str	r3, [sp, #20]
 800c8ce:	f00a 0301 	and.w	r3, sl, #1
 800c8d2:	46b8      	mov	r8, r7
 800c8d4:	9304      	str	r3, [sp, #16]
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	4631      	mov	r1, r6
 800c8da:	ee18 0a10 	vmov	r0, s16
 800c8de:	f7ff fa75 	bl	800bdcc <quorem>
 800c8e2:	4641      	mov	r1, r8
 800c8e4:	9002      	str	r0, [sp, #8]
 800c8e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c8ea:	ee18 0a10 	vmov	r0, s16
 800c8ee:	f000 ff63 	bl	800d7b8 <__mcmp>
 800c8f2:	463a      	mov	r2, r7
 800c8f4:	9003      	str	r0, [sp, #12]
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 ff79 	bl	800d7f0 <__mdiff>
 800c8fe:	68c2      	ldr	r2, [r0, #12]
 800c900:	f109 3bff 	add.w	fp, r9, #4294967295
 800c904:	4605      	mov	r5, r0
 800c906:	bb02      	cbnz	r2, 800c94a <_dtoa_r+0xa62>
 800c908:	4601      	mov	r1, r0
 800c90a:	ee18 0a10 	vmov	r0, s16
 800c90e:	f000 ff53 	bl	800d7b8 <__mcmp>
 800c912:	4602      	mov	r2, r0
 800c914:	4629      	mov	r1, r5
 800c916:	4620      	mov	r0, r4
 800c918:	9207      	str	r2, [sp, #28]
 800c91a:	f000 fcc1 	bl	800d2a0 <_Bfree>
 800c91e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c922:	ea43 0102 	orr.w	r1, r3, r2
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	430b      	orrs	r3, r1
 800c92a:	464d      	mov	r5, r9
 800c92c:	d10f      	bne.n	800c94e <_dtoa_r+0xa66>
 800c92e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c932:	d02a      	beq.n	800c98a <_dtoa_r+0xaa2>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	dd02      	ble.n	800c940 <_dtoa_r+0xa58>
 800c93a:	9b02      	ldr	r3, [sp, #8]
 800c93c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c940:	f88b a000 	strb.w	sl, [fp]
 800c944:	e775      	b.n	800c832 <_dtoa_r+0x94a>
 800c946:	4638      	mov	r0, r7
 800c948:	e7ba      	b.n	800c8c0 <_dtoa_r+0x9d8>
 800c94a:	2201      	movs	r2, #1
 800c94c:	e7e2      	b.n	800c914 <_dtoa_r+0xa2c>
 800c94e:	9b03      	ldr	r3, [sp, #12]
 800c950:	2b00      	cmp	r3, #0
 800c952:	db04      	blt.n	800c95e <_dtoa_r+0xa76>
 800c954:	9906      	ldr	r1, [sp, #24]
 800c956:	430b      	orrs	r3, r1
 800c958:	9904      	ldr	r1, [sp, #16]
 800c95a:	430b      	orrs	r3, r1
 800c95c:	d122      	bne.n	800c9a4 <_dtoa_r+0xabc>
 800c95e:	2a00      	cmp	r2, #0
 800c960:	ddee      	ble.n	800c940 <_dtoa_r+0xa58>
 800c962:	ee18 1a10 	vmov	r1, s16
 800c966:	2201      	movs	r2, #1
 800c968:	4620      	mov	r0, r4
 800c96a:	f000 feb5 	bl	800d6d8 <__lshift>
 800c96e:	4631      	mov	r1, r6
 800c970:	ee08 0a10 	vmov	s16, r0
 800c974:	f000 ff20 	bl	800d7b8 <__mcmp>
 800c978:	2800      	cmp	r0, #0
 800c97a:	dc03      	bgt.n	800c984 <_dtoa_r+0xa9c>
 800c97c:	d1e0      	bne.n	800c940 <_dtoa_r+0xa58>
 800c97e:	f01a 0f01 	tst.w	sl, #1
 800c982:	d0dd      	beq.n	800c940 <_dtoa_r+0xa58>
 800c984:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c988:	d1d7      	bne.n	800c93a <_dtoa_r+0xa52>
 800c98a:	2339      	movs	r3, #57	; 0x39
 800c98c:	f88b 3000 	strb.w	r3, [fp]
 800c990:	462b      	mov	r3, r5
 800c992:	461d      	mov	r5, r3
 800c994:	3b01      	subs	r3, #1
 800c996:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c99a:	2a39      	cmp	r2, #57	; 0x39
 800c99c:	d071      	beq.n	800ca82 <_dtoa_r+0xb9a>
 800c99e:	3201      	adds	r2, #1
 800c9a0:	701a      	strb	r2, [r3, #0]
 800c9a2:	e746      	b.n	800c832 <_dtoa_r+0x94a>
 800c9a4:	2a00      	cmp	r2, #0
 800c9a6:	dd07      	ble.n	800c9b8 <_dtoa_r+0xad0>
 800c9a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9ac:	d0ed      	beq.n	800c98a <_dtoa_r+0xaa2>
 800c9ae:	f10a 0301 	add.w	r3, sl, #1
 800c9b2:	f88b 3000 	strb.w	r3, [fp]
 800c9b6:	e73c      	b.n	800c832 <_dtoa_r+0x94a>
 800c9b8:	9b05      	ldr	r3, [sp, #20]
 800c9ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c9be:	4599      	cmp	r9, r3
 800c9c0:	d047      	beq.n	800ca52 <_dtoa_r+0xb6a>
 800c9c2:	ee18 1a10 	vmov	r1, s16
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f000 fc8a 	bl	800d2e4 <__multadd>
 800c9d0:	45b8      	cmp	r8, r7
 800c9d2:	ee08 0a10 	vmov	s16, r0
 800c9d6:	f04f 0300 	mov.w	r3, #0
 800c9da:	f04f 020a 	mov.w	r2, #10
 800c9de:	4641      	mov	r1, r8
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	d106      	bne.n	800c9f2 <_dtoa_r+0xb0a>
 800c9e4:	f000 fc7e 	bl	800d2e4 <__multadd>
 800c9e8:	4680      	mov	r8, r0
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	f109 0901 	add.w	r9, r9, #1
 800c9f0:	e772      	b.n	800c8d8 <_dtoa_r+0x9f0>
 800c9f2:	f000 fc77 	bl	800d2e4 <__multadd>
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	4680      	mov	r8, r0
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	220a      	movs	r2, #10
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f000 fc70 	bl	800d2e4 <__multadd>
 800ca04:	4607      	mov	r7, r0
 800ca06:	e7f1      	b.n	800c9ec <_dtoa_r+0xb04>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	9302      	str	r3, [sp, #8]
 800ca0c:	9d01      	ldr	r5, [sp, #4]
 800ca0e:	ee18 0a10 	vmov	r0, s16
 800ca12:	4631      	mov	r1, r6
 800ca14:	f7ff f9da 	bl	800bdcc <quorem>
 800ca18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca1c:	9b01      	ldr	r3, [sp, #4]
 800ca1e:	f805 ab01 	strb.w	sl, [r5], #1
 800ca22:	1aea      	subs	r2, r5, r3
 800ca24:	9b02      	ldr	r3, [sp, #8]
 800ca26:	4293      	cmp	r3, r2
 800ca28:	dd09      	ble.n	800ca3e <_dtoa_r+0xb56>
 800ca2a:	ee18 1a10 	vmov	r1, s16
 800ca2e:	2300      	movs	r3, #0
 800ca30:	220a      	movs	r2, #10
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 fc56 	bl	800d2e4 <__multadd>
 800ca38:	ee08 0a10 	vmov	s16, r0
 800ca3c:	e7e7      	b.n	800ca0e <_dtoa_r+0xb26>
 800ca3e:	9b02      	ldr	r3, [sp, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	bfc8      	it	gt
 800ca44:	461d      	movgt	r5, r3
 800ca46:	9b01      	ldr	r3, [sp, #4]
 800ca48:	bfd8      	it	le
 800ca4a:	2501      	movle	r5, #1
 800ca4c:	441d      	add	r5, r3
 800ca4e:	f04f 0800 	mov.w	r8, #0
 800ca52:	ee18 1a10 	vmov	r1, s16
 800ca56:	2201      	movs	r2, #1
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 fe3d 	bl	800d6d8 <__lshift>
 800ca5e:	4631      	mov	r1, r6
 800ca60:	ee08 0a10 	vmov	s16, r0
 800ca64:	f000 fea8 	bl	800d7b8 <__mcmp>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	dc91      	bgt.n	800c990 <_dtoa_r+0xaa8>
 800ca6c:	d102      	bne.n	800ca74 <_dtoa_r+0xb8c>
 800ca6e:	f01a 0f01 	tst.w	sl, #1
 800ca72:	d18d      	bne.n	800c990 <_dtoa_r+0xaa8>
 800ca74:	462b      	mov	r3, r5
 800ca76:	461d      	mov	r5, r3
 800ca78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca7c:	2a30      	cmp	r2, #48	; 0x30
 800ca7e:	d0fa      	beq.n	800ca76 <_dtoa_r+0xb8e>
 800ca80:	e6d7      	b.n	800c832 <_dtoa_r+0x94a>
 800ca82:	9a01      	ldr	r2, [sp, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d184      	bne.n	800c992 <_dtoa_r+0xaaa>
 800ca88:	9b00      	ldr	r3, [sp, #0]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	2331      	movs	r3, #49	; 0x31
 800ca90:	7013      	strb	r3, [r2, #0]
 800ca92:	e6ce      	b.n	800c832 <_dtoa_r+0x94a>
 800ca94:	4b09      	ldr	r3, [pc, #36]	; (800cabc <_dtoa_r+0xbd4>)
 800ca96:	f7ff ba95 	b.w	800bfc4 <_dtoa_r+0xdc>
 800ca9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f47f aa6e 	bne.w	800bf7e <_dtoa_r+0x96>
 800caa2:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <_dtoa_r+0xbd8>)
 800caa4:	f7ff ba8e 	b.w	800bfc4 <_dtoa_r+0xdc>
 800caa8:	9b02      	ldr	r3, [sp, #8]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dcae      	bgt.n	800ca0c <_dtoa_r+0xb24>
 800caae:	9b06      	ldr	r3, [sp, #24]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	f73f aea8 	bgt.w	800c806 <_dtoa_r+0x91e>
 800cab6:	e7a9      	b.n	800ca0c <_dtoa_r+0xb24>
 800cab8:	080113b8 	.word	0x080113b8
 800cabc:	080115b1 	.word	0x080115b1
 800cac0:	08011339 	.word	0x08011339

0800cac4 <rshift>:
 800cac4:	6903      	ldr	r3, [r0, #16]
 800cac6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800caca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cace:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cad2:	f100 0414 	add.w	r4, r0, #20
 800cad6:	dd45      	ble.n	800cb64 <rshift+0xa0>
 800cad8:	f011 011f 	ands.w	r1, r1, #31
 800cadc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cae0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cae4:	d10c      	bne.n	800cb00 <rshift+0x3c>
 800cae6:	f100 0710 	add.w	r7, r0, #16
 800caea:	4629      	mov	r1, r5
 800caec:	42b1      	cmp	r1, r6
 800caee:	d334      	bcc.n	800cb5a <rshift+0x96>
 800caf0:	1a9b      	subs	r3, r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	1eea      	subs	r2, r5, #3
 800caf6:	4296      	cmp	r6, r2
 800caf8:	bf38      	it	cc
 800cafa:	2300      	movcc	r3, #0
 800cafc:	4423      	add	r3, r4
 800cafe:	e015      	b.n	800cb2c <rshift+0x68>
 800cb00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb04:	f1c1 0820 	rsb	r8, r1, #32
 800cb08:	40cf      	lsrs	r7, r1
 800cb0a:	f105 0e04 	add.w	lr, r5, #4
 800cb0e:	46a1      	mov	r9, r4
 800cb10:	4576      	cmp	r6, lr
 800cb12:	46f4      	mov	ip, lr
 800cb14:	d815      	bhi.n	800cb42 <rshift+0x7e>
 800cb16:	1a9a      	subs	r2, r3, r2
 800cb18:	0092      	lsls	r2, r2, #2
 800cb1a:	3a04      	subs	r2, #4
 800cb1c:	3501      	adds	r5, #1
 800cb1e:	42ae      	cmp	r6, r5
 800cb20:	bf38      	it	cc
 800cb22:	2200      	movcc	r2, #0
 800cb24:	18a3      	adds	r3, r4, r2
 800cb26:	50a7      	str	r7, [r4, r2]
 800cb28:	b107      	cbz	r7, 800cb2c <rshift+0x68>
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	1b1a      	subs	r2, r3, r4
 800cb2e:	42a3      	cmp	r3, r4
 800cb30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb34:	bf08      	it	eq
 800cb36:	2300      	moveq	r3, #0
 800cb38:	6102      	str	r2, [r0, #16]
 800cb3a:	bf08      	it	eq
 800cb3c:	6143      	streq	r3, [r0, #20]
 800cb3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb42:	f8dc c000 	ldr.w	ip, [ip]
 800cb46:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb4a:	ea4c 0707 	orr.w	r7, ip, r7
 800cb4e:	f849 7b04 	str.w	r7, [r9], #4
 800cb52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb56:	40cf      	lsrs	r7, r1
 800cb58:	e7da      	b.n	800cb10 <rshift+0x4c>
 800cb5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb62:	e7c3      	b.n	800caec <rshift+0x28>
 800cb64:	4623      	mov	r3, r4
 800cb66:	e7e1      	b.n	800cb2c <rshift+0x68>

0800cb68 <__hexdig_fun>:
 800cb68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	d802      	bhi.n	800cb76 <__hexdig_fun+0xe>
 800cb70:	3820      	subs	r0, #32
 800cb72:	b2c0      	uxtb	r0, r0
 800cb74:	4770      	bx	lr
 800cb76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb7a:	2b05      	cmp	r3, #5
 800cb7c:	d801      	bhi.n	800cb82 <__hexdig_fun+0x1a>
 800cb7e:	3847      	subs	r0, #71	; 0x47
 800cb80:	e7f7      	b.n	800cb72 <__hexdig_fun+0xa>
 800cb82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb86:	2b05      	cmp	r3, #5
 800cb88:	d801      	bhi.n	800cb8e <__hexdig_fun+0x26>
 800cb8a:	3827      	subs	r0, #39	; 0x27
 800cb8c:	e7f1      	b.n	800cb72 <__hexdig_fun+0xa>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	4770      	bx	lr
	...

0800cb94 <__gethex>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	ed2d 8b02 	vpush	{d8}
 800cb9c:	b089      	sub	sp, #36	; 0x24
 800cb9e:	ee08 0a10 	vmov	s16, r0
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	4bb4      	ldr	r3, [pc, #720]	; (800ce78 <__gethex+0x2e4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	468b      	mov	fp, r1
 800cbae:	4690      	mov	r8, r2
 800cbb0:	f7f3 fb2e 	bl	8000210 <strlen>
 800cbb4:	9b01      	ldr	r3, [sp, #4]
 800cbb6:	f8db 2000 	ldr.w	r2, [fp]
 800cbba:	4403      	add	r3, r0
 800cbbc:	4682      	mov	sl, r0
 800cbbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	1c93      	adds	r3, r2, #2
 800cbc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cbca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cbce:	32fe      	adds	r2, #254	; 0xfe
 800cbd0:	18d1      	adds	r1, r2, r3
 800cbd2:	461f      	mov	r7, r3
 800cbd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cbd8:	9100      	str	r1, [sp, #0]
 800cbda:	2830      	cmp	r0, #48	; 0x30
 800cbdc:	d0f8      	beq.n	800cbd0 <__gethex+0x3c>
 800cbde:	f7ff ffc3 	bl	800cb68 <__hexdig_fun>
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d13a      	bne.n	800cc5e <__gethex+0xca>
 800cbe8:	9901      	ldr	r1, [sp, #4]
 800cbea:	4652      	mov	r2, sl
 800cbec:	4638      	mov	r0, r7
 800cbee:	f001 fdb3 	bl	800e758 <strncmp>
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d168      	bne.n	800ccca <__gethex+0x136>
 800cbf8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cbfc:	eb07 060a 	add.w	r6, r7, sl
 800cc00:	f7ff ffb2 	bl	800cb68 <__hexdig_fun>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d062      	beq.n	800ccce <__gethex+0x13a>
 800cc08:	4633      	mov	r3, r6
 800cc0a:	7818      	ldrb	r0, [r3, #0]
 800cc0c:	2830      	cmp	r0, #48	; 0x30
 800cc0e:	461f      	mov	r7, r3
 800cc10:	f103 0301 	add.w	r3, r3, #1
 800cc14:	d0f9      	beq.n	800cc0a <__gethex+0x76>
 800cc16:	f7ff ffa7 	bl	800cb68 <__hexdig_fun>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	fab0 f480 	clz	r4, r0
 800cc20:	0964      	lsrs	r4, r4, #5
 800cc22:	4635      	mov	r5, r6
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	463a      	mov	r2, r7
 800cc28:	4616      	mov	r6, r2
 800cc2a:	3201      	adds	r2, #1
 800cc2c:	7830      	ldrb	r0, [r6, #0]
 800cc2e:	f7ff ff9b 	bl	800cb68 <__hexdig_fun>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d1f8      	bne.n	800cc28 <__gethex+0x94>
 800cc36:	9901      	ldr	r1, [sp, #4]
 800cc38:	4652      	mov	r2, sl
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f001 fd8c 	bl	800e758 <strncmp>
 800cc40:	b980      	cbnz	r0, 800cc64 <__gethex+0xd0>
 800cc42:	b94d      	cbnz	r5, 800cc58 <__gethex+0xc4>
 800cc44:	eb06 050a 	add.w	r5, r6, sl
 800cc48:	462a      	mov	r2, r5
 800cc4a:	4616      	mov	r6, r2
 800cc4c:	3201      	adds	r2, #1
 800cc4e:	7830      	ldrb	r0, [r6, #0]
 800cc50:	f7ff ff8a 	bl	800cb68 <__hexdig_fun>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d1f8      	bne.n	800cc4a <__gethex+0xb6>
 800cc58:	1bad      	subs	r5, r5, r6
 800cc5a:	00ad      	lsls	r5, r5, #2
 800cc5c:	e004      	b.n	800cc68 <__gethex+0xd4>
 800cc5e:	2400      	movs	r4, #0
 800cc60:	4625      	mov	r5, r4
 800cc62:	e7e0      	b.n	800cc26 <__gethex+0x92>
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	d1f7      	bne.n	800cc58 <__gethex+0xc4>
 800cc68:	7833      	ldrb	r3, [r6, #0]
 800cc6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cc6e:	2b50      	cmp	r3, #80	; 0x50
 800cc70:	d13b      	bne.n	800ccea <__gethex+0x156>
 800cc72:	7873      	ldrb	r3, [r6, #1]
 800cc74:	2b2b      	cmp	r3, #43	; 0x2b
 800cc76:	d02c      	beq.n	800ccd2 <__gethex+0x13e>
 800cc78:	2b2d      	cmp	r3, #45	; 0x2d
 800cc7a:	d02e      	beq.n	800ccda <__gethex+0x146>
 800cc7c:	1c71      	adds	r1, r6, #1
 800cc7e:	f04f 0900 	mov.w	r9, #0
 800cc82:	7808      	ldrb	r0, [r1, #0]
 800cc84:	f7ff ff70 	bl	800cb68 <__hexdig_fun>
 800cc88:	1e43      	subs	r3, r0, #1
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b18      	cmp	r3, #24
 800cc8e:	d82c      	bhi.n	800ccea <__gethex+0x156>
 800cc90:	f1a0 0210 	sub.w	r2, r0, #16
 800cc94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc98:	f7ff ff66 	bl	800cb68 <__hexdig_fun>
 800cc9c:	1e43      	subs	r3, r0, #1
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b18      	cmp	r3, #24
 800cca2:	d91d      	bls.n	800cce0 <__gethex+0x14c>
 800cca4:	f1b9 0f00 	cmp.w	r9, #0
 800cca8:	d000      	beq.n	800ccac <__gethex+0x118>
 800ccaa:	4252      	negs	r2, r2
 800ccac:	4415      	add	r5, r2
 800ccae:	f8cb 1000 	str.w	r1, [fp]
 800ccb2:	b1e4      	cbz	r4, 800ccee <__gethex+0x15a>
 800ccb4:	9b00      	ldr	r3, [sp, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	bf14      	ite	ne
 800ccba:	2700      	movne	r7, #0
 800ccbc:	2706      	moveq	r7, #6
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	b009      	add	sp, #36	; 0x24
 800ccc2:	ecbd 8b02 	vpop	{d8}
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	463e      	mov	r6, r7
 800cccc:	4625      	mov	r5, r4
 800ccce:	2401      	movs	r4, #1
 800ccd0:	e7ca      	b.n	800cc68 <__gethex+0xd4>
 800ccd2:	f04f 0900 	mov.w	r9, #0
 800ccd6:	1cb1      	adds	r1, r6, #2
 800ccd8:	e7d3      	b.n	800cc82 <__gethex+0xee>
 800ccda:	f04f 0901 	mov.w	r9, #1
 800ccde:	e7fa      	b.n	800ccd6 <__gethex+0x142>
 800cce0:	230a      	movs	r3, #10
 800cce2:	fb03 0202 	mla	r2, r3, r2, r0
 800cce6:	3a10      	subs	r2, #16
 800cce8:	e7d4      	b.n	800cc94 <__gethex+0x100>
 800ccea:	4631      	mov	r1, r6
 800ccec:	e7df      	b.n	800ccae <__gethex+0x11a>
 800ccee:	1bf3      	subs	r3, r6, r7
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	2b07      	cmp	r3, #7
 800ccf6:	dc0b      	bgt.n	800cd10 <__gethex+0x17c>
 800ccf8:	ee18 0a10 	vmov	r0, s16
 800ccfc:	f000 fa90 	bl	800d220 <_Balloc>
 800cd00:	4604      	mov	r4, r0
 800cd02:	b940      	cbnz	r0, 800cd16 <__gethex+0x182>
 800cd04:	4b5d      	ldr	r3, [pc, #372]	; (800ce7c <__gethex+0x2e8>)
 800cd06:	4602      	mov	r2, r0
 800cd08:	21de      	movs	r1, #222	; 0xde
 800cd0a:	485d      	ldr	r0, [pc, #372]	; (800ce80 <__gethex+0x2ec>)
 800cd0c:	f001 fdf4 	bl	800e8f8 <__assert_func>
 800cd10:	3101      	adds	r1, #1
 800cd12:	105b      	asrs	r3, r3, #1
 800cd14:	e7ee      	b.n	800ccf4 <__gethex+0x160>
 800cd16:	f100 0914 	add.w	r9, r0, #20
 800cd1a:	f04f 0b00 	mov.w	fp, #0
 800cd1e:	f1ca 0301 	rsb	r3, sl, #1
 800cd22:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd26:	f8cd b000 	str.w	fp, [sp]
 800cd2a:	9306      	str	r3, [sp, #24]
 800cd2c:	42b7      	cmp	r7, r6
 800cd2e:	d340      	bcc.n	800cdb2 <__gethex+0x21e>
 800cd30:	9802      	ldr	r0, [sp, #8]
 800cd32:	9b00      	ldr	r3, [sp, #0]
 800cd34:	f840 3b04 	str.w	r3, [r0], #4
 800cd38:	eba0 0009 	sub.w	r0, r0, r9
 800cd3c:	1080      	asrs	r0, r0, #2
 800cd3e:	0146      	lsls	r6, r0, #5
 800cd40:	6120      	str	r0, [r4, #16]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 fb5e 	bl	800d404 <__hi0bits>
 800cd48:	1a30      	subs	r0, r6, r0
 800cd4a:	f8d8 6000 	ldr.w	r6, [r8]
 800cd4e:	42b0      	cmp	r0, r6
 800cd50:	dd63      	ble.n	800ce1a <__gethex+0x286>
 800cd52:	1b87      	subs	r7, r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 ff02 	bl	800db60 <__any_on>
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	b1a8      	cbz	r0, 800cd8c <__gethex+0x1f8>
 800cd60:	1e7b      	subs	r3, r7, #1
 800cd62:	1159      	asrs	r1, r3, #5
 800cd64:	f003 021f 	and.w	r2, r3, #31
 800cd68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cd6c:	f04f 0a01 	mov.w	sl, #1
 800cd70:	fa0a f202 	lsl.w	r2, sl, r2
 800cd74:	420a      	tst	r2, r1
 800cd76:	d009      	beq.n	800cd8c <__gethex+0x1f8>
 800cd78:	4553      	cmp	r3, sl
 800cd7a:	dd05      	ble.n	800cd88 <__gethex+0x1f4>
 800cd7c:	1eb9      	subs	r1, r7, #2
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 feee 	bl	800db60 <__any_on>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d145      	bne.n	800ce14 <__gethex+0x280>
 800cd88:	f04f 0a02 	mov.w	sl, #2
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f7ff fe98 	bl	800cac4 <rshift>
 800cd94:	443d      	add	r5, r7
 800cd96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd9a:	42ab      	cmp	r3, r5
 800cd9c:	da4c      	bge.n	800ce38 <__gethex+0x2a4>
 800cd9e:	ee18 0a10 	vmov	r0, s16
 800cda2:	4621      	mov	r1, r4
 800cda4:	f000 fa7c 	bl	800d2a0 <_Bfree>
 800cda8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdaa:	2300      	movs	r3, #0
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	27a3      	movs	r7, #163	; 0xa3
 800cdb0:	e785      	b.n	800ccbe <__gethex+0x12a>
 800cdb2:	1e73      	subs	r3, r6, #1
 800cdb4:	9a05      	ldr	r2, [sp, #20]
 800cdb6:	9303      	str	r3, [sp, #12]
 800cdb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d019      	beq.n	800cdf4 <__gethex+0x260>
 800cdc0:	f1bb 0f20 	cmp.w	fp, #32
 800cdc4:	d107      	bne.n	800cdd6 <__gethex+0x242>
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	9a00      	ldr	r2, [sp, #0]
 800cdca:	f843 2b04 	str.w	r2, [r3], #4
 800cdce:	9302      	str	r3, [sp, #8]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	469b      	mov	fp, r3
 800cdd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cdda:	f7ff fec5 	bl	800cb68 <__hexdig_fun>
 800cdde:	9b00      	ldr	r3, [sp, #0]
 800cde0:	f000 000f 	and.w	r0, r0, #15
 800cde4:	fa00 f00b 	lsl.w	r0, r0, fp
 800cde8:	4303      	orrs	r3, r0
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	f10b 0b04 	add.w	fp, fp, #4
 800cdf0:	9b03      	ldr	r3, [sp, #12]
 800cdf2:	e00d      	b.n	800ce10 <__gethex+0x27c>
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	9a06      	ldr	r2, [sp, #24]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	42bb      	cmp	r3, r7
 800cdfc:	d3e0      	bcc.n	800cdc0 <__gethex+0x22c>
 800cdfe:	4618      	mov	r0, r3
 800ce00:	9901      	ldr	r1, [sp, #4]
 800ce02:	9307      	str	r3, [sp, #28]
 800ce04:	4652      	mov	r2, sl
 800ce06:	f001 fca7 	bl	800e758 <strncmp>
 800ce0a:	9b07      	ldr	r3, [sp, #28]
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d1d7      	bne.n	800cdc0 <__gethex+0x22c>
 800ce10:	461e      	mov	r6, r3
 800ce12:	e78b      	b.n	800cd2c <__gethex+0x198>
 800ce14:	f04f 0a03 	mov.w	sl, #3
 800ce18:	e7b8      	b.n	800cd8c <__gethex+0x1f8>
 800ce1a:	da0a      	bge.n	800ce32 <__gethex+0x29e>
 800ce1c:	1a37      	subs	r7, r6, r0
 800ce1e:	4621      	mov	r1, r4
 800ce20:	ee18 0a10 	vmov	r0, s16
 800ce24:	463a      	mov	r2, r7
 800ce26:	f000 fc57 	bl	800d6d8 <__lshift>
 800ce2a:	1bed      	subs	r5, r5, r7
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	f100 0914 	add.w	r9, r0, #20
 800ce32:	f04f 0a00 	mov.w	sl, #0
 800ce36:	e7ae      	b.n	800cd96 <__gethex+0x202>
 800ce38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ce3c:	42a8      	cmp	r0, r5
 800ce3e:	dd72      	ble.n	800cf26 <__gethex+0x392>
 800ce40:	1b45      	subs	r5, r0, r5
 800ce42:	42ae      	cmp	r6, r5
 800ce44:	dc36      	bgt.n	800ceb4 <__gethex+0x320>
 800ce46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d02a      	beq.n	800cea4 <__gethex+0x310>
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d02c      	beq.n	800ceac <__gethex+0x318>
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d11c      	bne.n	800ce90 <__gethex+0x2fc>
 800ce56:	42ae      	cmp	r6, r5
 800ce58:	d11a      	bne.n	800ce90 <__gethex+0x2fc>
 800ce5a:	2e01      	cmp	r6, #1
 800ce5c:	d112      	bne.n	800ce84 <__gethex+0x2f0>
 800ce5e:	9a04      	ldr	r2, [sp, #16]
 800ce60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce64:	6013      	str	r3, [r2, #0]
 800ce66:	2301      	movs	r3, #1
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	f8c9 3000 	str.w	r3, [r9]
 800ce6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce70:	2762      	movs	r7, #98	; 0x62
 800ce72:	601c      	str	r4, [r3, #0]
 800ce74:	e723      	b.n	800ccbe <__gethex+0x12a>
 800ce76:	bf00      	nop
 800ce78:	08011430 	.word	0x08011430
 800ce7c:	080113b8 	.word	0x080113b8
 800ce80:	080113c9 	.word	0x080113c9
 800ce84:	1e71      	subs	r1, r6, #1
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 fe6a 	bl	800db60 <__any_on>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d1e6      	bne.n	800ce5e <__gethex+0x2ca>
 800ce90:	ee18 0a10 	vmov	r0, s16
 800ce94:	4621      	mov	r1, r4
 800ce96:	f000 fa03 	bl	800d2a0 <_Bfree>
 800ce9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	2750      	movs	r7, #80	; 0x50
 800cea2:	e70c      	b.n	800ccbe <__gethex+0x12a>
 800cea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1f2      	bne.n	800ce90 <__gethex+0x2fc>
 800ceaa:	e7d8      	b.n	800ce5e <__gethex+0x2ca>
 800ceac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1d5      	bne.n	800ce5e <__gethex+0x2ca>
 800ceb2:	e7ed      	b.n	800ce90 <__gethex+0x2fc>
 800ceb4:	1e6f      	subs	r7, r5, #1
 800ceb6:	f1ba 0f00 	cmp.w	sl, #0
 800ceba:	d131      	bne.n	800cf20 <__gethex+0x38c>
 800cebc:	b127      	cbz	r7, 800cec8 <__gethex+0x334>
 800cebe:	4639      	mov	r1, r7
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fe4d 	bl	800db60 <__any_on>
 800cec6:	4682      	mov	sl, r0
 800cec8:	117b      	asrs	r3, r7, #5
 800ceca:	2101      	movs	r1, #1
 800cecc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ced0:	f007 071f 	and.w	r7, r7, #31
 800ced4:	fa01 f707 	lsl.w	r7, r1, r7
 800ced8:	421f      	tst	r7, r3
 800ceda:	4629      	mov	r1, r5
 800cedc:	4620      	mov	r0, r4
 800cede:	bf18      	it	ne
 800cee0:	f04a 0a02 	orrne.w	sl, sl, #2
 800cee4:	1b76      	subs	r6, r6, r5
 800cee6:	f7ff fded 	bl	800cac4 <rshift>
 800ceea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ceee:	2702      	movs	r7, #2
 800cef0:	f1ba 0f00 	cmp.w	sl, #0
 800cef4:	d048      	beq.n	800cf88 <__gethex+0x3f4>
 800cef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d015      	beq.n	800cf2a <__gethex+0x396>
 800cefe:	2b03      	cmp	r3, #3
 800cf00:	d017      	beq.n	800cf32 <__gethex+0x39e>
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d109      	bne.n	800cf1a <__gethex+0x386>
 800cf06:	f01a 0f02 	tst.w	sl, #2
 800cf0a:	d006      	beq.n	800cf1a <__gethex+0x386>
 800cf0c:	f8d9 0000 	ldr.w	r0, [r9]
 800cf10:	ea4a 0a00 	orr.w	sl, sl, r0
 800cf14:	f01a 0f01 	tst.w	sl, #1
 800cf18:	d10e      	bne.n	800cf38 <__gethex+0x3a4>
 800cf1a:	f047 0710 	orr.w	r7, r7, #16
 800cf1e:	e033      	b.n	800cf88 <__gethex+0x3f4>
 800cf20:	f04f 0a01 	mov.w	sl, #1
 800cf24:	e7d0      	b.n	800cec8 <__gethex+0x334>
 800cf26:	2701      	movs	r7, #1
 800cf28:	e7e2      	b.n	800cef0 <__gethex+0x35c>
 800cf2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf2c:	f1c3 0301 	rsb	r3, r3, #1
 800cf30:	9315      	str	r3, [sp, #84]	; 0x54
 800cf32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0f0      	beq.n	800cf1a <__gethex+0x386>
 800cf38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf3c:	f104 0314 	add.w	r3, r4, #20
 800cf40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf48:	f04f 0c00 	mov.w	ip, #0
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf52:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf56:	d01c      	beq.n	800cf92 <__gethex+0x3fe>
 800cf58:	3201      	adds	r2, #1
 800cf5a:	6002      	str	r2, [r0, #0]
 800cf5c:	2f02      	cmp	r7, #2
 800cf5e:	f104 0314 	add.w	r3, r4, #20
 800cf62:	d13f      	bne.n	800cfe4 <__gethex+0x450>
 800cf64:	f8d8 2000 	ldr.w	r2, [r8]
 800cf68:	3a01      	subs	r2, #1
 800cf6a:	42b2      	cmp	r2, r6
 800cf6c:	d10a      	bne.n	800cf84 <__gethex+0x3f0>
 800cf6e:	1171      	asrs	r1, r6, #5
 800cf70:	2201      	movs	r2, #1
 800cf72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf76:	f006 061f 	and.w	r6, r6, #31
 800cf7a:	fa02 f606 	lsl.w	r6, r2, r6
 800cf7e:	421e      	tst	r6, r3
 800cf80:	bf18      	it	ne
 800cf82:	4617      	movne	r7, r2
 800cf84:	f047 0720 	orr.w	r7, r7, #32
 800cf88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf8a:	601c      	str	r4, [r3, #0]
 800cf8c:	9b04      	ldr	r3, [sp, #16]
 800cf8e:	601d      	str	r5, [r3, #0]
 800cf90:	e695      	b.n	800ccbe <__gethex+0x12a>
 800cf92:	4299      	cmp	r1, r3
 800cf94:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf98:	d8d8      	bhi.n	800cf4c <__gethex+0x3b8>
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	459b      	cmp	fp, r3
 800cf9e:	db19      	blt.n	800cfd4 <__gethex+0x440>
 800cfa0:	6861      	ldr	r1, [r4, #4]
 800cfa2:	ee18 0a10 	vmov	r0, s16
 800cfa6:	3101      	adds	r1, #1
 800cfa8:	f000 f93a 	bl	800d220 <_Balloc>
 800cfac:	4681      	mov	r9, r0
 800cfae:	b918      	cbnz	r0, 800cfb8 <__gethex+0x424>
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <__gethex+0x488>)
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	2184      	movs	r1, #132	; 0x84
 800cfb6:	e6a8      	b.n	800cd0a <__gethex+0x176>
 800cfb8:	6922      	ldr	r2, [r4, #16]
 800cfba:	3202      	adds	r2, #2
 800cfbc:	f104 010c 	add.w	r1, r4, #12
 800cfc0:	0092      	lsls	r2, r2, #2
 800cfc2:	300c      	adds	r0, #12
 800cfc4:	f000 f91e 	bl	800d204 <memcpy>
 800cfc8:	4621      	mov	r1, r4
 800cfca:	ee18 0a10 	vmov	r0, s16
 800cfce:	f000 f967 	bl	800d2a0 <_Bfree>
 800cfd2:	464c      	mov	r4, r9
 800cfd4:	6923      	ldr	r3, [r4, #16]
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfdc:	6122      	str	r2, [r4, #16]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	615a      	str	r2, [r3, #20]
 800cfe2:	e7bb      	b.n	800cf5c <__gethex+0x3c8>
 800cfe4:	6922      	ldr	r2, [r4, #16]
 800cfe6:	455a      	cmp	r2, fp
 800cfe8:	dd0b      	ble.n	800d002 <__gethex+0x46e>
 800cfea:	2101      	movs	r1, #1
 800cfec:	4620      	mov	r0, r4
 800cfee:	f7ff fd69 	bl	800cac4 <rshift>
 800cff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cff6:	3501      	adds	r5, #1
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	f6ff aed0 	blt.w	800cd9e <__gethex+0x20a>
 800cffe:	2701      	movs	r7, #1
 800d000:	e7c0      	b.n	800cf84 <__gethex+0x3f0>
 800d002:	f016 061f 	ands.w	r6, r6, #31
 800d006:	d0fa      	beq.n	800cffe <__gethex+0x46a>
 800d008:	4453      	add	r3, sl
 800d00a:	f1c6 0620 	rsb	r6, r6, #32
 800d00e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d012:	f000 f9f7 	bl	800d404 <__hi0bits>
 800d016:	42b0      	cmp	r0, r6
 800d018:	dbe7      	blt.n	800cfea <__gethex+0x456>
 800d01a:	e7f0      	b.n	800cffe <__gethex+0x46a>
 800d01c:	080113b8 	.word	0x080113b8

0800d020 <L_shift>:
 800d020:	f1c2 0208 	rsb	r2, r2, #8
 800d024:	0092      	lsls	r2, r2, #2
 800d026:	b570      	push	{r4, r5, r6, lr}
 800d028:	f1c2 0620 	rsb	r6, r2, #32
 800d02c:	6843      	ldr	r3, [r0, #4]
 800d02e:	6804      	ldr	r4, [r0, #0]
 800d030:	fa03 f506 	lsl.w	r5, r3, r6
 800d034:	432c      	orrs	r4, r5
 800d036:	40d3      	lsrs	r3, r2
 800d038:	6004      	str	r4, [r0, #0]
 800d03a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d03e:	4288      	cmp	r0, r1
 800d040:	d3f4      	bcc.n	800d02c <L_shift+0xc>
 800d042:	bd70      	pop	{r4, r5, r6, pc}

0800d044 <__match>:
 800d044:	b530      	push	{r4, r5, lr}
 800d046:	6803      	ldr	r3, [r0, #0]
 800d048:	3301      	adds	r3, #1
 800d04a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d04e:	b914      	cbnz	r4, 800d056 <__match+0x12>
 800d050:	6003      	str	r3, [r0, #0]
 800d052:	2001      	movs	r0, #1
 800d054:	bd30      	pop	{r4, r5, pc}
 800d056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d05a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d05e:	2d19      	cmp	r5, #25
 800d060:	bf98      	it	ls
 800d062:	3220      	addls	r2, #32
 800d064:	42a2      	cmp	r2, r4
 800d066:	d0f0      	beq.n	800d04a <__match+0x6>
 800d068:	2000      	movs	r0, #0
 800d06a:	e7f3      	b.n	800d054 <__match+0x10>

0800d06c <__hexnan>:
 800d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d070:	680b      	ldr	r3, [r1, #0]
 800d072:	115e      	asrs	r6, r3, #5
 800d074:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d078:	f013 031f 	ands.w	r3, r3, #31
 800d07c:	b087      	sub	sp, #28
 800d07e:	bf18      	it	ne
 800d080:	3604      	addne	r6, #4
 800d082:	2500      	movs	r5, #0
 800d084:	1f37      	subs	r7, r6, #4
 800d086:	4690      	mov	r8, r2
 800d088:	6802      	ldr	r2, [r0, #0]
 800d08a:	9301      	str	r3, [sp, #4]
 800d08c:	4682      	mov	sl, r0
 800d08e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d092:	46b9      	mov	r9, r7
 800d094:	463c      	mov	r4, r7
 800d096:	9502      	str	r5, [sp, #8]
 800d098:	46ab      	mov	fp, r5
 800d09a:	7851      	ldrb	r1, [r2, #1]
 800d09c:	1c53      	adds	r3, r2, #1
 800d09e:	9303      	str	r3, [sp, #12]
 800d0a0:	b341      	cbz	r1, 800d0f4 <__hexnan+0x88>
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	9205      	str	r2, [sp, #20]
 800d0a6:	9104      	str	r1, [sp, #16]
 800d0a8:	f7ff fd5e 	bl	800cb68 <__hexdig_fun>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d14f      	bne.n	800d150 <__hexnan+0xe4>
 800d0b0:	9904      	ldr	r1, [sp, #16]
 800d0b2:	9a05      	ldr	r2, [sp, #20]
 800d0b4:	2920      	cmp	r1, #32
 800d0b6:	d818      	bhi.n	800d0ea <__hexnan+0x7e>
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	459b      	cmp	fp, r3
 800d0bc:	dd13      	ble.n	800d0e6 <__hexnan+0x7a>
 800d0be:	454c      	cmp	r4, r9
 800d0c0:	d206      	bcs.n	800d0d0 <__hexnan+0x64>
 800d0c2:	2d07      	cmp	r5, #7
 800d0c4:	dc04      	bgt.n	800d0d0 <__hexnan+0x64>
 800d0c6:	462a      	mov	r2, r5
 800d0c8:	4649      	mov	r1, r9
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f7ff ffa8 	bl	800d020 <L_shift>
 800d0d0:	4544      	cmp	r4, r8
 800d0d2:	d950      	bls.n	800d176 <__hexnan+0x10a>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f1a4 0904 	sub.w	r9, r4, #4
 800d0da:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0de:	f8cd b008 	str.w	fp, [sp, #8]
 800d0e2:	464c      	mov	r4, r9
 800d0e4:	461d      	mov	r5, r3
 800d0e6:	9a03      	ldr	r2, [sp, #12]
 800d0e8:	e7d7      	b.n	800d09a <__hexnan+0x2e>
 800d0ea:	2929      	cmp	r1, #41	; 0x29
 800d0ec:	d156      	bne.n	800d19c <__hexnan+0x130>
 800d0ee:	3202      	adds	r2, #2
 800d0f0:	f8ca 2000 	str.w	r2, [sl]
 800d0f4:	f1bb 0f00 	cmp.w	fp, #0
 800d0f8:	d050      	beq.n	800d19c <__hexnan+0x130>
 800d0fa:	454c      	cmp	r4, r9
 800d0fc:	d206      	bcs.n	800d10c <__hexnan+0xa0>
 800d0fe:	2d07      	cmp	r5, #7
 800d100:	dc04      	bgt.n	800d10c <__hexnan+0xa0>
 800d102:	462a      	mov	r2, r5
 800d104:	4649      	mov	r1, r9
 800d106:	4620      	mov	r0, r4
 800d108:	f7ff ff8a 	bl	800d020 <L_shift>
 800d10c:	4544      	cmp	r4, r8
 800d10e:	d934      	bls.n	800d17a <__hexnan+0x10e>
 800d110:	f1a8 0204 	sub.w	r2, r8, #4
 800d114:	4623      	mov	r3, r4
 800d116:	f853 1b04 	ldr.w	r1, [r3], #4
 800d11a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d11e:	429f      	cmp	r7, r3
 800d120:	d2f9      	bcs.n	800d116 <__hexnan+0xaa>
 800d122:	1b3b      	subs	r3, r7, r4
 800d124:	f023 0303 	bic.w	r3, r3, #3
 800d128:	3304      	adds	r3, #4
 800d12a:	3401      	adds	r4, #1
 800d12c:	3e03      	subs	r6, #3
 800d12e:	42b4      	cmp	r4, r6
 800d130:	bf88      	it	hi
 800d132:	2304      	movhi	r3, #4
 800d134:	4443      	add	r3, r8
 800d136:	2200      	movs	r2, #0
 800d138:	f843 2b04 	str.w	r2, [r3], #4
 800d13c:	429f      	cmp	r7, r3
 800d13e:	d2fb      	bcs.n	800d138 <__hexnan+0xcc>
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	b91b      	cbnz	r3, 800d14c <__hexnan+0xe0>
 800d144:	4547      	cmp	r7, r8
 800d146:	d127      	bne.n	800d198 <__hexnan+0x12c>
 800d148:	2301      	movs	r3, #1
 800d14a:	603b      	str	r3, [r7, #0]
 800d14c:	2005      	movs	r0, #5
 800d14e:	e026      	b.n	800d19e <__hexnan+0x132>
 800d150:	3501      	adds	r5, #1
 800d152:	2d08      	cmp	r5, #8
 800d154:	f10b 0b01 	add.w	fp, fp, #1
 800d158:	dd06      	ble.n	800d168 <__hexnan+0xfc>
 800d15a:	4544      	cmp	r4, r8
 800d15c:	d9c3      	bls.n	800d0e6 <__hexnan+0x7a>
 800d15e:	2300      	movs	r3, #0
 800d160:	f844 3c04 	str.w	r3, [r4, #-4]
 800d164:	2501      	movs	r5, #1
 800d166:	3c04      	subs	r4, #4
 800d168:	6822      	ldr	r2, [r4, #0]
 800d16a:	f000 000f 	and.w	r0, r0, #15
 800d16e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d172:	6022      	str	r2, [r4, #0]
 800d174:	e7b7      	b.n	800d0e6 <__hexnan+0x7a>
 800d176:	2508      	movs	r5, #8
 800d178:	e7b5      	b.n	800d0e6 <__hexnan+0x7a>
 800d17a:	9b01      	ldr	r3, [sp, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d0df      	beq.n	800d140 <__hexnan+0xd4>
 800d180:	f04f 32ff 	mov.w	r2, #4294967295
 800d184:	f1c3 0320 	rsb	r3, r3, #32
 800d188:	fa22 f303 	lsr.w	r3, r2, r3
 800d18c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d190:	401a      	ands	r2, r3
 800d192:	f846 2c04 	str.w	r2, [r6, #-4]
 800d196:	e7d3      	b.n	800d140 <__hexnan+0xd4>
 800d198:	3f04      	subs	r7, #4
 800d19a:	e7d1      	b.n	800d140 <__hexnan+0xd4>
 800d19c:	2004      	movs	r0, #4
 800d19e:	b007      	add	sp, #28
 800d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1a4 <_localeconv_r>:
 800d1a4:	4800      	ldr	r0, [pc, #0]	; (800d1a8 <_localeconv_r+0x4>)
 800d1a6:	4770      	bx	lr
 800d1a8:	2000016c 	.word	0x2000016c

0800d1ac <_lseek_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d07      	ldr	r5, [pc, #28]	; (800d1cc <_lseek_r+0x20>)
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	4608      	mov	r0, r1
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	602a      	str	r2, [r5, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	f7f7 fed8 	bl	8004f70 <_lseek>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_lseek_r+0x1e>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_lseek_r+0x1e>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	20001170 	.word	0x20001170

0800d1d0 <malloc>:
 800d1d0:	4b02      	ldr	r3, [pc, #8]	; (800d1dc <malloc+0xc>)
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	f000 bd67 	b.w	800dca8 <_malloc_r>
 800d1da:	bf00      	nop
 800d1dc:	20000014 	.word	0x20000014

0800d1e0 <__ascii_mbtowc>:
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	b901      	cbnz	r1, 800d1e6 <__ascii_mbtowc+0x6>
 800d1e4:	a901      	add	r1, sp, #4
 800d1e6:	b142      	cbz	r2, 800d1fa <__ascii_mbtowc+0x1a>
 800d1e8:	b14b      	cbz	r3, 800d1fe <__ascii_mbtowc+0x1e>
 800d1ea:	7813      	ldrb	r3, [r2, #0]
 800d1ec:	600b      	str	r3, [r1, #0]
 800d1ee:	7812      	ldrb	r2, [r2, #0]
 800d1f0:	1e10      	subs	r0, r2, #0
 800d1f2:	bf18      	it	ne
 800d1f4:	2001      	movne	r0, #1
 800d1f6:	b002      	add	sp, #8
 800d1f8:	4770      	bx	lr
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	e7fb      	b.n	800d1f6 <__ascii_mbtowc+0x16>
 800d1fe:	f06f 0001 	mvn.w	r0, #1
 800d202:	e7f8      	b.n	800d1f6 <__ascii_mbtowc+0x16>

0800d204 <memcpy>:
 800d204:	440a      	add	r2, r1
 800d206:	4291      	cmp	r1, r2
 800d208:	f100 33ff 	add.w	r3, r0, #4294967295
 800d20c:	d100      	bne.n	800d210 <memcpy+0xc>
 800d20e:	4770      	bx	lr
 800d210:	b510      	push	{r4, lr}
 800d212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d21a:	4291      	cmp	r1, r2
 800d21c:	d1f9      	bne.n	800d212 <memcpy+0xe>
 800d21e:	bd10      	pop	{r4, pc}

0800d220 <_Balloc>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d224:	4604      	mov	r4, r0
 800d226:	460d      	mov	r5, r1
 800d228:	b976      	cbnz	r6, 800d248 <_Balloc+0x28>
 800d22a:	2010      	movs	r0, #16
 800d22c:	f7ff ffd0 	bl	800d1d0 <malloc>
 800d230:	4602      	mov	r2, r0
 800d232:	6260      	str	r0, [r4, #36]	; 0x24
 800d234:	b920      	cbnz	r0, 800d240 <_Balloc+0x20>
 800d236:	4b18      	ldr	r3, [pc, #96]	; (800d298 <_Balloc+0x78>)
 800d238:	4818      	ldr	r0, [pc, #96]	; (800d29c <_Balloc+0x7c>)
 800d23a:	2166      	movs	r1, #102	; 0x66
 800d23c:	f001 fb5c 	bl	800e8f8 <__assert_func>
 800d240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d244:	6006      	str	r6, [r0, #0]
 800d246:	60c6      	str	r6, [r0, #12]
 800d248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d24a:	68f3      	ldr	r3, [r6, #12]
 800d24c:	b183      	cbz	r3, 800d270 <_Balloc+0x50>
 800d24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d256:	b9b8      	cbnz	r0, 800d288 <_Balloc+0x68>
 800d258:	2101      	movs	r1, #1
 800d25a:	fa01 f605 	lsl.w	r6, r1, r5
 800d25e:	1d72      	adds	r2, r6, #5
 800d260:	0092      	lsls	r2, r2, #2
 800d262:	4620      	mov	r0, r4
 800d264:	f000 fc9d 	bl	800dba2 <_calloc_r>
 800d268:	b160      	cbz	r0, 800d284 <_Balloc+0x64>
 800d26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d26e:	e00e      	b.n	800d28e <_Balloc+0x6e>
 800d270:	2221      	movs	r2, #33	; 0x21
 800d272:	2104      	movs	r1, #4
 800d274:	4620      	mov	r0, r4
 800d276:	f000 fc94 	bl	800dba2 <_calloc_r>
 800d27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d27c:	60f0      	str	r0, [r6, #12]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1e4      	bne.n	800d24e <_Balloc+0x2e>
 800d284:	2000      	movs	r0, #0
 800d286:	bd70      	pop	{r4, r5, r6, pc}
 800d288:	6802      	ldr	r2, [r0, #0]
 800d28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d28e:	2300      	movs	r3, #0
 800d290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d294:	e7f7      	b.n	800d286 <_Balloc+0x66>
 800d296:	bf00      	nop
 800d298:	08011346 	.word	0x08011346
 800d29c:	08011444 	.word	0x08011444

0800d2a0 <_Bfree>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	b976      	cbnz	r6, 800d2c8 <_Bfree+0x28>
 800d2aa:	2010      	movs	r0, #16
 800d2ac:	f7ff ff90 	bl	800d1d0 <malloc>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d2b4:	b920      	cbnz	r0, 800d2c0 <_Bfree+0x20>
 800d2b6:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <_Bfree+0x3c>)
 800d2b8:	4809      	ldr	r0, [pc, #36]	; (800d2e0 <_Bfree+0x40>)
 800d2ba:	218a      	movs	r1, #138	; 0x8a
 800d2bc:	f001 fb1c 	bl	800e8f8 <__assert_func>
 800d2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2c4:	6006      	str	r6, [r0, #0]
 800d2c6:	60c6      	str	r6, [r0, #12]
 800d2c8:	b13c      	cbz	r4, 800d2da <_Bfree+0x3a>
 800d2ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2cc:	6862      	ldr	r2, [r4, #4]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2d4:	6021      	str	r1, [r4, #0]
 800d2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
 800d2dc:	08011346 	.word	0x08011346
 800d2e0:	08011444 	.word	0x08011444

0800d2e4 <__multadd>:
 800d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	690d      	ldr	r5, [r1, #16]
 800d2ea:	4607      	mov	r7, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	461e      	mov	r6, r3
 800d2f0:	f101 0c14 	add.w	ip, r1, #20
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d2fa:	b299      	uxth	r1, r3
 800d2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800d300:	0c1e      	lsrs	r6, r3, #16
 800d302:	0c0b      	lsrs	r3, r1, #16
 800d304:	fb02 3306 	mla	r3, r2, r6, r3
 800d308:	b289      	uxth	r1, r1
 800d30a:	3001      	adds	r0, #1
 800d30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d310:	4285      	cmp	r5, r0
 800d312:	f84c 1b04 	str.w	r1, [ip], #4
 800d316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d31a:	dcec      	bgt.n	800d2f6 <__multadd+0x12>
 800d31c:	b30e      	cbz	r6, 800d362 <__multadd+0x7e>
 800d31e:	68a3      	ldr	r3, [r4, #8]
 800d320:	42ab      	cmp	r3, r5
 800d322:	dc19      	bgt.n	800d358 <__multadd+0x74>
 800d324:	6861      	ldr	r1, [r4, #4]
 800d326:	4638      	mov	r0, r7
 800d328:	3101      	adds	r1, #1
 800d32a:	f7ff ff79 	bl	800d220 <_Balloc>
 800d32e:	4680      	mov	r8, r0
 800d330:	b928      	cbnz	r0, 800d33e <__multadd+0x5a>
 800d332:	4602      	mov	r2, r0
 800d334:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <__multadd+0x84>)
 800d336:	480d      	ldr	r0, [pc, #52]	; (800d36c <__multadd+0x88>)
 800d338:	21b5      	movs	r1, #181	; 0xb5
 800d33a:	f001 fadd 	bl	800e8f8 <__assert_func>
 800d33e:	6922      	ldr	r2, [r4, #16]
 800d340:	3202      	adds	r2, #2
 800d342:	f104 010c 	add.w	r1, r4, #12
 800d346:	0092      	lsls	r2, r2, #2
 800d348:	300c      	adds	r0, #12
 800d34a:	f7ff ff5b 	bl	800d204 <memcpy>
 800d34e:	4621      	mov	r1, r4
 800d350:	4638      	mov	r0, r7
 800d352:	f7ff ffa5 	bl	800d2a0 <_Bfree>
 800d356:	4644      	mov	r4, r8
 800d358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d35c:	3501      	adds	r5, #1
 800d35e:	615e      	str	r6, [r3, #20]
 800d360:	6125      	str	r5, [r4, #16]
 800d362:	4620      	mov	r0, r4
 800d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d368:	080113b8 	.word	0x080113b8
 800d36c:	08011444 	.word	0x08011444

0800d370 <__s2b>:
 800d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d374:	460c      	mov	r4, r1
 800d376:	4615      	mov	r5, r2
 800d378:	461f      	mov	r7, r3
 800d37a:	2209      	movs	r2, #9
 800d37c:	3308      	adds	r3, #8
 800d37e:	4606      	mov	r6, r0
 800d380:	fb93 f3f2 	sdiv	r3, r3, r2
 800d384:	2100      	movs	r1, #0
 800d386:	2201      	movs	r2, #1
 800d388:	429a      	cmp	r2, r3
 800d38a:	db09      	blt.n	800d3a0 <__s2b+0x30>
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7ff ff47 	bl	800d220 <_Balloc>
 800d392:	b940      	cbnz	r0, 800d3a6 <__s2b+0x36>
 800d394:	4602      	mov	r2, r0
 800d396:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <__s2b+0x8c>)
 800d398:	4819      	ldr	r0, [pc, #100]	; (800d400 <__s2b+0x90>)
 800d39a:	21ce      	movs	r1, #206	; 0xce
 800d39c:	f001 faac 	bl	800e8f8 <__assert_func>
 800d3a0:	0052      	lsls	r2, r2, #1
 800d3a2:	3101      	adds	r1, #1
 800d3a4:	e7f0      	b.n	800d388 <__s2b+0x18>
 800d3a6:	9b08      	ldr	r3, [sp, #32]
 800d3a8:	6143      	str	r3, [r0, #20]
 800d3aa:	2d09      	cmp	r5, #9
 800d3ac:	f04f 0301 	mov.w	r3, #1
 800d3b0:	6103      	str	r3, [r0, #16]
 800d3b2:	dd16      	ble.n	800d3e2 <__s2b+0x72>
 800d3b4:	f104 0909 	add.w	r9, r4, #9
 800d3b8:	46c8      	mov	r8, r9
 800d3ba:	442c      	add	r4, r5
 800d3bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	3b30      	subs	r3, #48	; 0x30
 800d3c4:	220a      	movs	r2, #10
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f7ff ff8c 	bl	800d2e4 <__multadd>
 800d3cc:	45a0      	cmp	r8, r4
 800d3ce:	d1f5      	bne.n	800d3bc <__s2b+0x4c>
 800d3d0:	f1a5 0408 	sub.w	r4, r5, #8
 800d3d4:	444c      	add	r4, r9
 800d3d6:	1b2d      	subs	r5, r5, r4
 800d3d8:	1963      	adds	r3, r4, r5
 800d3da:	42bb      	cmp	r3, r7
 800d3dc:	db04      	blt.n	800d3e8 <__s2b+0x78>
 800d3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3e2:	340a      	adds	r4, #10
 800d3e4:	2509      	movs	r5, #9
 800d3e6:	e7f6      	b.n	800d3d6 <__s2b+0x66>
 800d3e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d3ec:	4601      	mov	r1, r0
 800d3ee:	3b30      	subs	r3, #48	; 0x30
 800d3f0:	220a      	movs	r2, #10
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7ff ff76 	bl	800d2e4 <__multadd>
 800d3f8:	e7ee      	b.n	800d3d8 <__s2b+0x68>
 800d3fa:	bf00      	nop
 800d3fc:	080113b8 	.word	0x080113b8
 800d400:	08011444 	.word	0x08011444

0800d404 <__hi0bits>:
 800d404:	0c03      	lsrs	r3, r0, #16
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	b9d3      	cbnz	r3, 800d440 <__hi0bits+0x3c>
 800d40a:	0400      	lsls	r0, r0, #16
 800d40c:	2310      	movs	r3, #16
 800d40e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d412:	bf04      	itt	eq
 800d414:	0200      	lsleq	r0, r0, #8
 800d416:	3308      	addeq	r3, #8
 800d418:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d41c:	bf04      	itt	eq
 800d41e:	0100      	lsleq	r0, r0, #4
 800d420:	3304      	addeq	r3, #4
 800d422:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d426:	bf04      	itt	eq
 800d428:	0080      	lsleq	r0, r0, #2
 800d42a:	3302      	addeq	r3, #2
 800d42c:	2800      	cmp	r0, #0
 800d42e:	db05      	blt.n	800d43c <__hi0bits+0x38>
 800d430:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d434:	f103 0301 	add.w	r3, r3, #1
 800d438:	bf08      	it	eq
 800d43a:	2320      	moveq	r3, #32
 800d43c:	4618      	mov	r0, r3
 800d43e:	4770      	bx	lr
 800d440:	2300      	movs	r3, #0
 800d442:	e7e4      	b.n	800d40e <__hi0bits+0xa>

0800d444 <__lo0bits>:
 800d444:	6803      	ldr	r3, [r0, #0]
 800d446:	f013 0207 	ands.w	r2, r3, #7
 800d44a:	4601      	mov	r1, r0
 800d44c:	d00b      	beq.n	800d466 <__lo0bits+0x22>
 800d44e:	07da      	lsls	r2, r3, #31
 800d450:	d423      	bmi.n	800d49a <__lo0bits+0x56>
 800d452:	0798      	lsls	r0, r3, #30
 800d454:	bf49      	itett	mi
 800d456:	085b      	lsrmi	r3, r3, #1
 800d458:	089b      	lsrpl	r3, r3, #2
 800d45a:	2001      	movmi	r0, #1
 800d45c:	600b      	strmi	r3, [r1, #0]
 800d45e:	bf5c      	itt	pl
 800d460:	600b      	strpl	r3, [r1, #0]
 800d462:	2002      	movpl	r0, #2
 800d464:	4770      	bx	lr
 800d466:	b298      	uxth	r0, r3
 800d468:	b9a8      	cbnz	r0, 800d496 <__lo0bits+0x52>
 800d46a:	0c1b      	lsrs	r3, r3, #16
 800d46c:	2010      	movs	r0, #16
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	b90a      	cbnz	r2, 800d476 <__lo0bits+0x32>
 800d472:	3008      	adds	r0, #8
 800d474:	0a1b      	lsrs	r3, r3, #8
 800d476:	071a      	lsls	r2, r3, #28
 800d478:	bf04      	itt	eq
 800d47a:	091b      	lsreq	r3, r3, #4
 800d47c:	3004      	addeq	r0, #4
 800d47e:	079a      	lsls	r2, r3, #30
 800d480:	bf04      	itt	eq
 800d482:	089b      	lsreq	r3, r3, #2
 800d484:	3002      	addeq	r0, #2
 800d486:	07da      	lsls	r2, r3, #31
 800d488:	d403      	bmi.n	800d492 <__lo0bits+0x4e>
 800d48a:	085b      	lsrs	r3, r3, #1
 800d48c:	f100 0001 	add.w	r0, r0, #1
 800d490:	d005      	beq.n	800d49e <__lo0bits+0x5a>
 800d492:	600b      	str	r3, [r1, #0]
 800d494:	4770      	bx	lr
 800d496:	4610      	mov	r0, r2
 800d498:	e7e9      	b.n	800d46e <__lo0bits+0x2a>
 800d49a:	2000      	movs	r0, #0
 800d49c:	4770      	bx	lr
 800d49e:	2020      	movs	r0, #32
 800d4a0:	4770      	bx	lr
	...

0800d4a4 <__i2b>:
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	2101      	movs	r1, #1
 800d4aa:	f7ff feb9 	bl	800d220 <_Balloc>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	b928      	cbnz	r0, 800d4be <__i2b+0x1a>
 800d4b2:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <__i2b+0x24>)
 800d4b4:	4805      	ldr	r0, [pc, #20]	; (800d4cc <__i2b+0x28>)
 800d4b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d4ba:	f001 fa1d 	bl	800e8f8 <__assert_func>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	6144      	str	r4, [r0, #20]
 800d4c2:	6103      	str	r3, [r0, #16]
 800d4c4:	bd10      	pop	{r4, pc}
 800d4c6:	bf00      	nop
 800d4c8:	080113b8 	.word	0x080113b8
 800d4cc:	08011444 	.word	0x08011444

0800d4d0 <__multiply>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	4691      	mov	r9, r2
 800d4d6:	690a      	ldr	r2, [r1, #16]
 800d4d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	bfb8      	it	lt
 800d4e0:	460b      	movlt	r3, r1
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	bfbc      	itt	lt
 800d4e6:	464c      	movlt	r4, r9
 800d4e8:	4699      	movlt	r9, r3
 800d4ea:	6927      	ldr	r7, [r4, #16]
 800d4ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4f0:	68a3      	ldr	r3, [r4, #8]
 800d4f2:	6861      	ldr	r1, [r4, #4]
 800d4f4:	eb07 060a 	add.w	r6, r7, sl
 800d4f8:	42b3      	cmp	r3, r6
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	bfb8      	it	lt
 800d4fe:	3101      	addlt	r1, #1
 800d500:	f7ff fe8e 	bl	800d220 <_Balloc>
 800d504:	b930      	cbnz	r0, 800d514 <__multiply+0x44>
 800d506:	4602      	mov	r2, r0
 800d508:	4b44      	ldr	r3, [pc, #272]	; (800d61c <__multiply+0x14c>)
 800d50a:	4845      	ldr	r0, [pc, #276]	; (800d620 <__multiply+0x150>)
 800d50c:	f240 115d 	movw	r1, #349	; 0x15d
 800d510:	f001 f9f2 	bl	800e8f8 <__assert_func>
 800d514:	f100 0514 	add.w	r5, r0, #20
 800d518:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d51c:	462b      	mov	r3, r5
 800d51e:	2200      	movs	r2, #0
 800d520:	4543      	cmp	r3, r8
 800d522:	d321      	bcc.n	800d568 <__multiply+0x98>
 800d524:	f104 0314 	add.w	r3, r4, #20
 800d528:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d52c:	f109 0314 	add.w	r3, r9, #20
 800d530:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d534:	9202      	str	r2, [sp, #8]
 800d536:	1b3a      	subs	r2, r7, r4
 800d538:	3a15      	subs	r2, #21
 800d53a:	f022 0203 	bic.w	r2, r2, #3
 800d53e:	3204      	adds	r2, #4
 800d540:	f104 0115 	add.w	r1, r4, #21
 800d544:	428f      	cmp	r7, r1
 800d546:	bf38      	it	cc
 800d548:	2204      	movcc	r2, #4
 800d54a:	9201      	str	r2, [sp, #4]
 800d54c:	9a02      	ldr	r2, [sp, #8]
 800d54e:	9303      	str	r3, [sp, #12]
 800d550:	429a      	cmp	r2, r3
 800d552:	d80c      	bhi.n	800d56e <__multiply+0x9e>
 800d554:	2e00      	cmp	r6, #0
 800d556:	dd03      	ble.n	800d560 <__multiply+0x90>
 800d558:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d05a      	beq.n	800d616 <__multiply+0x146>
 800d560:	6106      	str	r6, [r0, #16]
 800d562:	b005      	add	sp, #20
 800d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d568:	f843 2b04 	str.w	r2, [r3], #4
 800d56c:	e7d8      	b.n	800d520 <__multiply+0x50>
 800d56e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d572:	f1ba 0f00 	cmp.w	sl, #0
 800d576:	d024      	beq.n	800d5c2 <__multiply+0xf2>
 800d578:	f104 0e14 	add.w	lr, r4, #20
 800d57c:	46a9      	mov	r9, r5
 800d57e:	f04f 0c00 	mov.w	ip, #0
 800d582:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d586:	f8d9 1000 	ldr.w	r1, [r9]
 800d58a:	fa1f fb82 	uxth.w	fp, r2
 800d58e:	b289      	uxth	r1, r1
 800d590:	fb0a 110b 	mla	r1, sl, fp, r1
 800d594:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d598:	f8d9 2000 	ldr.w	r2, [r9]
 800d59c:	4461      	add	r1, ip
 800d59e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5aa:	b289      	uxth	r1, r1
 800d5ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5b0:	4577      	cmp	r7, lr
 800d5b2:	f849 1b04 	str.w	r1, [r9], #4
 800d5b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5ba:	d8e2      	bhi.n	800d582 <__multiply+0xb2>
 800d5bc:	9a01      	ldr	r2, [sp, #4]
 800d5be:	f845 c002 	str.w	ip, [r5, r2]
 800d5c2:	9a03      	ldr	r2, [sp, #12]
 800d5c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	f1b9 0f00 	cmp.w	r9, #0
 800d5ce:	d020      	beq.n	800d612 <__multiply+0x142>
 800d5d0:	6829      	ldr	r1, [r5, #0]
 800d5d2:	f104 0c14 	add.w	ip, r4, #20
 800d5d6:	46ae      	mov	lr, r5
 800d5d8:	f04f 0a00 	mov.w	sl, #0
 800d5dc:	f8bc b000 	ldrh.w	fp, [ip]
 800d5e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d5e4:	fb09 220b 	mla	r2, r9, fp, r2
 800d5e8:	4492      	add	sl, r2
 800d5ea:	b289      	uxth	r1, r1
 800d5ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d5f0:	f84e 1b04 	str.w	r1, [lr], #4
 800d5f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5f8:	f8be 1000 	ldrh.w	r1, [lr]
 800d5fc:	0c12      	lsrs	r2, r2, #16
 800d5fe:	fb09 1102 	mla	r1, r9, r2, r1
 800d602:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d606:	4567      	cmp	r7, ip
 800d608:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d60c:	d8e6      	bhi.n	800d5dc <__multiply+0x10c>
 800d60e:	9a01      	ldr	r2, [sp, #4]
 800d610:	50a9      	str	r1, [r5, r2]
 800d612:	3504      	adds	r5, #4
 800d614:	e79a      	b.n	800d54c <__multiply+0x7c>
 800d616:	3e01      	subs	r6, #1
 800d618:	e79c      	b.n	800d554 <__multiply+0x84>
 800d61a:	bf00      	nop
 800d61c:	080113b8 	.word	0x080113b8
 800d620:	08011444 	.word	0x08011444

0800d624 <__pow5mult>:
 800d624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d628:	4615      	mov	r5, r2
 800d62a:	f012 0203 	ands.w	r2, r2, #3
 800d62e:	4606      	mov	r6, r0
 800d630:	460f      	mov	r7, r1
 800d632:	d007      	beq.n	800d644 <__pow5mult+0x20>
 800d634:	4c25      	ldr	r4, [pc, #148]	; (800d6cc <__pow5mult+0xa8>)
 800d636:	3a01      	subs	r2, #1
 800d638:	2300      	movs	r3, #0
 800d63a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d63e:	f7ff fe51 	bl	800d2e4 <__multadd>
 800d642:	4607      	mov	r7, r0
 800d644:	10ad      	asrs	r5, r5, #2
 800d646:	d03d      	beq.n	800d6c4 <__pow5mult+0xa0>
 800d648:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d64a:	b97c      	cbnz	r4, 800d66c <__pow5mult+0x48>
 800d64c:	2010      	movs	r0, #16
 800d64e:	f7ff fdbf 	bl	800d1d0 <malloc>
 800d652:	4602      	mov	r2, r0
 800d654:	6270      	str	r0, [r6, #36]	; 0x24
 800d656:	b928      	cbnz	r0, 800d664 <__pow5mult+0x40>
 800d658:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <__pow5mult+0xac>)
 800d65a:	481e      	ldr	r0, [pc, #120]	; (800d6d4 <__pow5mult+0xb0>)
 800d65c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d660:	f001 f94a 	bl	800e8f8 <__assert_func>
 800d664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d668:	6004      	str	r4, [r0, #0]
 800d66a:	60c4      	str	r4, [r0, #12]
 800d66c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d674:	b94c      	cbnz	r4, 800d68a <__pow5mult+0x66>
 800d676:	f240 2171 	movw	r1, #625	; 0x271
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7ff ff12 	bl	800d4a4 <__i2b>
 800d680:	2300      	movs	r3, #0
 800d682:	f8c8 0008 	str.w	r0, [r8, #8]
 800d686:	4604      	mov	r4, r0
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	f04f 0900 	mov.w	r9, #0
 800d68e:	07eb      	lsls	r3, r5, #31
 800d690:	d50a      	bpl.n	800d6a8 <__pow5mult+0x84>
 800d692:	4639      	mov	r1, r7
 800d694:	4622      	mov	r2, r4
 800d696:	4630      	mov	r0, r6
 800d698:	f7ff ff1a 	bl	800d4d0 <__multiply>
 800d69c:	4639      	mov	r1, r7
 800d69e:	4680      	mov	r8, r0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7ff fdfd 	bl	800d2a0 <_Bfree>
 800d6a6:	4647      	mov	r7, r8
 800d6a8:	106d      	asrs	r5, r5, #1
 800d6aa:	d00b      	beq.n	800d6c4 <__pow5mult+0xa0>
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	b938      	cbnz	r0, 800d6c0 <__pow5mult+0x9c>
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f7ff ff0b 	bl	800d4d0 <__multiply>
 800d6ba:	6020      	str	r0, [r4, #0]
 800d6bc:	f8c0 9000 	str.w	r9, [r0]
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	e7e4      	b.n	800d68e <__pow5mult+0x6a>
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ca:	bf00      	nop
 800d6cc:	08011590 	.word	0x08011590
 800d6d0:	08011346 	.word	0x08011346
 800d6d4:	08011444 	.word	0x08011444

0800d6d8 <__lshift>:
 800d6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6dc:	460c      	mov	r4, r1
 800d6de:	6849      	ldr	r1, [r1, #4]
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	4691      	mov	r9, r2
 800d6ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6f0:	f108 0601 	add.w	r6, r8, #1
 800d6f4:	42b3      	cmp	r3, r6
 800d6f6:	db0b      	blt.n	800d710 <__lshift+0x38>
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	f7ff fd91 	bl	800d220 <_Balloc>
 800d6fe:	4605      	mov	r5, r0
 800d700:	b948      	cbnz	r0, 800d716 <__lshift+0x3e>
 800d702:	4602      	mov	r2, r0
 800d704:	4b2a      	ldr	r3, [pc, #168]	; (800d7b0 <__lshift+0xd8>)
 800d706:	482b      	ldr	r0, [pc, #172]	; (800d7b4 <__lshift+0xdc>)
 800d708:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d70c:	f001 f8f4 	bl	800e8f8 <__assert_func>
 800d710:	3101      	adds	r1, #1
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	e7ee      	b.n	800d6f4 <__lshift+0x1c>
 800d716:	2300      	movs	r3, #0
 800d718:	f100 0114 	add.w	r1, r0, #20
 800d71c:	f100 0210 	add.w	r2, r0, #16
 800d720:	4618      	mov	r0, r3
 800d722:	4553      	cmp	r3, sl
 800d724:	db37      	blt.n	800d796 <__lshift+0xbe>
 800d726:	6920      	ldr	r0, [r4, #16]
 800d728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d72c:	f104 0314 	add.w	r3, r4, #20
 800d730:	f019 091f 	ands.w	r9, r9, #31
 800d734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d738:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d73c:	d02f      	beq.n	800d79e <__lshift+0xc6>
 800d73e:	f1c9 0e20 	rsb	lr, r9, #32
 800d742:	468a      	mov	sl, r1
 800d744:	f04f 0c00 	mov.w	ip, #0
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	fa02 f209 	lsl.w	r2, r2, r9
 800d74e:	ea42 020c 	orr.w	r2, r2, ip
 800d752:	f84a 2b04 	str.w	r2, [sl], #4
 800d756:	f853 2b04 	ldr.w	r2, [r3], #4
 800d75a:	4298      	cmp	r0, r3
 800d75c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d760:	d8f2      	bhi.n	800d748 <__lshift+0x70>
 800d762:	1b03      	subs	r3, r0, r4
 800d764:	3b15      	subs	r3, #21
 800d766:	f023 0303 	bic.w	r3, r3, #3
 800d76a:	3304      	adds	r3, #4
 800d76c:	f104 0215 	add.w	r2, r4, #21
 800d770:	4290      	cmp	r0, r2
 800d772:	bf38      	it	cc
 800d774:	2304      	movcc	r3, #4
 800d776:	f841 c003 	str.w	ip, [r1, r3]
 800d77a:	f1bc 0f00 	cmp.w	ip, #0
 800d77e:	d001      	beq.n	800d784 <__lshift+0xac>
 800d780:	f108 0602 	add.w	r6, r8, #2
 800d784:	3e01      	subs	r6, #1
 800d786:	4638      	mov	r0, r7
 800d788:	612e      	str	r6, [r5, #16]
 800d78a:	4621      	mov	r1, r4
 800d78c:	f7ff fd88 	bl	800d2a0 <_Bfree>
 800d790:	4628      	mov	r0, r5
 800d792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d796:	f842 0f04 	str.w	r0, [r2, #4]!
 800d79a:	3301      	adds	r3, #1
 800d79c:	e7c1      	b.n	800d722 <__lshift+0x4a>
 800d79e:	3904      	subs	r1, #4
 800d7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7a8:	4298      	cmp	r0, r3
 800d7aa:	d8f9      	bhi.n	800d7a0 <__lshift+0xc8>
 800d7ac:	e7ea      	b.n	800d784 <__lshift+0xac>
 800d7ae:	bf00      	nop
 800d7b0:	080113b8 	.word	0x080113b8
 800d7b4:	08011444 	.word	0x08011444

0800d7b8 <__mcmp>:
 800d7b8:	b530      	push	{r4, r5, lr}
 800d7ba:	6902      	ldr	r2, [r0, #16]
 800d7bc:	690c      	ldr	r4, [r1, #16]
 800d7be:	1b12      	subs	r2, r2, r4
 800d7c0:	d10e      	bne.n	800d7e0 <__mcmp+0x28>
 800d7c2:	f100 0314 	add.w	r3, r0, #20
 800d7c6:	3114      	adds	r1, #20
 800d7c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7d8:	42a5      	cmp	r5, r4
 800d7da:	d003      	beq.n	800d7e4 <__mcmp+0x2c>
 800d7dc:	d305      	bcc.n	800d7ea <__mcmp+0x32>
 800d7de:	2201      	movs	r2, #1
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	bd30      	pop	{r4, r5, pc}
 800d7e4:	4283      	cmp	r3, r0
 800d7e6:	d3f3      	bcc.n	800d7d0 <__mcmp+0x18>
 800d7e8:	e7fa      	b.n	800d7e0 <__mcmp+0x28>
 800d7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ee:	e7f7      	b.n	800d7e0 <__mcmp+0x28>

0800d7f0 <__mdiff>:
 800d7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4690      	mov	r8, r2
 800d7fe:	f7ff ffdb 	bl	800d7b8 <__mcmp>
 800d802:	1e05      	subs	r5, r0, #0
 800d804:	d110      	bne.n	800d828 <__mdiff+0x38>
 800d806:	4629      	mov	r1, r5
 800d808:	4630      	mov	r0, r6
 800d80a:	f7ff fd09 	bl	800d220 <_Balloc>
 800d80e:	b930      	cbnz	r0, 800d81e <__mdiff+0x2e>
 800d810:	4b3a      	ldr	r3, [pc, #232]	; (800d8fc <__mdiff+0x10c>)
 800d812:	4602      	mov	r2, r0
 800d814:	f240 2132 	movw	r1, #562	; 0x232
 800d818:	4839      	ldr	r0, [pc, #228]	; (800d900 <__mdiff+0x110>)
 800d81a:	f001 f86d 	bl	800e8f8 <__assert_func>
 800d81e:	2301      	movs	r3, #1
 800d820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d828:	bfa4      	itt	ge
 800d82a:	4643      	movge	r3, r8
 800d82c:	46a0      	movge	r8, r4
 800d82e:	4630      	mov	r0, r6
 800d830:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d834:	bfa6      	itte	ge
 800d836:	461c      	movge	r4, r3
 800d838:	2500      	movge	r5, #0
 800d83a:	2501      	movlt	r5, #1
 800d83c:	f7ff fcf0 	bl	800d220 <_Balloc>
 800d840:	b920      	cbnz	r0, 800d84c <__mdiff+0x5c>
 800d842:	4b2e      	ldr	r3, [pc, #184]	; (800d8fc <__mdiff+0x10c>)
 800d844:	4602      	mov	r2, r0
 800d846:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d84a:	e7e5      	b.n	800d818 <__mdiff+0x28>
 800d84c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d850:	6926      	ldr	r6, [r4, #16]
 800d852:	60c5      	str	r5, [r0, #12]
 800d854:	f104 0914 	add.w	r9, r4, #20
 800d858:	f108 0514 	add.w	r5, r8, #20
 800d85c:	f100 0e14 	add.w	lr, r0, #20
 800d860:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d864:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d868:	f108 0210 	add.w	r2, r8, #16
 800d86c:	46f2      	mov	sl, lr
 800d86e:	2100      	movs	r1, #0
 800d870:	f859 3b04 	ldr.w	r3, [r9], #4
 800d874:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d878:	fa1f f883 	uxth.w	r8, r3
 800d87c:	fa11 f18b 	uxtah	r1, r1, fp
 800d880:	0c1b      	lsrs	r3, r3, #16
 800d882:	eba1 0808 	sub.w	r8, r1, r8
 800d886:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d88a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d88e:	fa1f f888 	uxth.w	r8, r8
 800d892:	1419      	asrs	r1, r3, #16
 800d894:	454e      	cmp	r6, r9
 800d896:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d89a:	f84a 3b04 	str.w	r3, [sl], #4
 800d89e:	d8e7      	bhi.n	800d870 <__mdiff+0x80>
 800d8a0:	1b33      	subs	r3, r6, r4
 800d8a2:	3b15      	subs	r3, #21
 800d8a4:	f023 0303 	bic.w	r3, r3, #3
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	3415      	adds	r4, #21
 800d8ac:	42a6      	cmp	r6, r4
 800d8ae:	bf38      	it	cc
 800d8b0:	2304      	movcc	r3, #4
 800d8b2:	441d      	add	r5, r3
 800d8b4:	4473      	add	r3, lr
 800d8b6:	469e      	mov	lr, r3
 800d8b8:	462e      	mov	r6, r5
 800d8ba:	4566      	cmp	r6, ip
 800d8bc:	d30e      	bcc.n	800d8dc <__mdiff+0xec>
 800d8be:	f10c 0203 	add.w	r2, ip, #3
 800d8c2:	1b52      	subs	r2, r2, r5
 800d8c4:	f022 0203 	bic.w	r2, r2, #3
 800d8c8:	3d03      	subs	r5, #3
 800d8ca:	45ac      	cmp	ip, r5
 800d8cc:	bf38      	it	cc
 800d8ce:	2200      	movcc	r2, #0
 800d8d0:	441a      	add	r2, r3
 800d8d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d8d6:	b17b      	cbz	r3, 800d8f8 <__mdiff+0x108>
 800d8d8:	6107      	str	r7, [r0, #16]
 800d8da:	e7a3      	b.n	800d824 <__mdiff+0x34>
 800d8dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d8e0:	fa11 f288 	uxtah	r2, r1, r8
 800d8e4:	1414      	asrs	r4, r2, #16
 800d8e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d8ea:	b292      	uxth	r2, r2
 800d8ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d8f0:	f84e 2b04 	str.w	r2, [lr], #4
 800d8f4:	1421      	asrs	r1, r4, #16
 800d8f6:	e7e0      	b.n	800d8ba <__mdiff+0xca>
 800d8f8:	3f01      	subs	r7, #1
 800d8fa:	e7ea      	b.n	800d8d2 <__mdiff+0xe2>
 800d8fc:	080113b8 	.word	0x080113b8
 800d900:	08011444 	.word	0x08011444

0800d904 <__ulp>:
 800d904:	b082      	sub	sp, #8
 800d906:	ed8d 0b00 	vstr	d0, [sp]
 800d90a:	9b01      	ldr	r3, [sp, #4]
 800d90c:	4912      	ldr	r1, [pc, #72]	; (800d958 <__ulp+0x54>)
 800d90e:	4019      	ands	r1, r3
 800d910:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d914:	2900      	cmp	r1, #0
 800d916:	dd05      	ble.n	800d924 <__ulp+0x20>
 800d918:	2200      	movs	r2, #0
 800d91a:	460b      	mov	r3, r1
 800d91c:	ec43 2b10 	vmov	d0, r2, r3
 800d920:	b002      	add	sp, #8
 800d922:	4770      	bx	lr
 800d924:	4249      	negs	r1, r1
 800d926:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d92a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d92e:	f04f 0200 	mov.w	r2, #0
 800d932:	f04f 0300 	mov.w	r3, #0
 800d936:	da04      	bge.n	800d942 <__ulp+0x3e>
 800d938:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d93c:	fa41 f300 	asr.w	r3, r1, r0
 800d940:	e7ec      	b.n	800d91c <__ulp+0x18>
 800d942:	f1a0 0114 	sub.w	r1, r0, #20
 800d946:	291e      	cmp	r1, #30
 800d948:	bfda      	itte	le
 800d94a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d94e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d952:	2101      	movgt	r1, #1
 800d954:	460a      	mov	r2, r1
 800d956:	e7e1      	b.n	800d91c <__ulp+0x18>
 800d958:	7ff00000 	.word	0x7ff00000

0800d95c <__b2d>:
 800d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95e:	6905      	ldr	r5, [r0, #16]
 800d960:	f100 0714 	add.w	r7, r0, #20
 800d964:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d968:	1f2e      	subs	r6, r5, #4
 800d96a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d96e:	4620      	mov	r0, r4
 800d970:	f7ff fd48 	bl	800d404 <__hi0bits>
 800d974:	f1c0 0320 	rsb	r3, r0, #32
 800d978:	280a      	cmp	r0, #10
 800d97a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d9f8 <__b2d+0x9c>
 800d97e:	600b      	str	r3, [r1, #0]
 800d980:	dc14      	bgt.n	800d9ac <__b2d+0x50>
 800d982:	f1c0 0e0b 	rsb	lr, r0, #11
 800d986:	fa24 f10e 	lsr.w	r1, r4, lr
 800d98a:	42b7      	cmp	r7, r6
 800d98c:	ea41 030c 	orr.w	r3, r1, ip
 800d990:	bf34      	ite	cc
 800d992:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d996:	2100      	movcs	r1, #0
 800d998:	3015      	adds	r0, #21
 800d99a:	fa04 f000 	lsl.w	r0, r4, r0
 800d99e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d9a2:	ea40 0201 	orr.w	r2, r0, r1
 800d9a6:	ec43 2b10 	vmov	d0, r2, r3
 800d9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ac:	42b7      	cmp	r7, r6
 800d9ae:	bf3a      	itte	cc
 800d9b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d9b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d9b8:	2100      	movcs	r1, #0
 800d9ba:	380b      	subs	r0, #11
 800d9bc:	d017      	beq.n	800d9ee <__b2d+0x92>
 800d9be:	f1c0 0c20 	rsb	ip, r0, #32
 800d9c2:	fa04 f500 	lsl.w	r5, r4, r0
 800d9c6:	42be      	cmp	r6, r7
 800d9c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d9cc:	ea45 0504 	orr.w	r5, r5, r4
 800d9d0:	bf8c      	ite	hi
 800d9d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d9d6:	2400      	movls	r4, #0
 800d9d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d9dc:	fa01 f000 	lsl.w	r0, r1, r0
 800d9e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d9e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9e8:	ea40 0204 	orr.w	r2, r0, r4
 800d9ec:	e7db      	b.n	800d9a6 <__b2d+0x4a>
 800d9ee:	ea44 030c 	orr.w	r3, r4, ip
 800d9f2:	460a      	mov	r2, r1
 800d9f4:	e7d7      	b.n	800d9a6 <__b2d+0x4a>
 800d9f6:	bf00      	nop
 800d9f8:	3ff00000 	.word	0x3ff00000

0800d9fc <__d2b>:
 800d9fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da00:	4689      	mov	r9, r1
 800da02:	2101      	movs	r1, #1
 800da04:	ec57 6b10 	vmov	r6, r7, d0
 800da08:	4690      	mov	r8, r2
 800da0a:	f7ff fc09 	bl	800d220 <_Balloc>
 800da0e:	4604      	mov	r4, r0
 800da10:	b930      	cbnz	r0, 800da20 <__d2b+0x24>
 800da12:	4602      	mov	r2, r0
 800da14:	4b25      	ldr	r3, [pc, #148]	; (800daac <__d2b+0xb0>)
 800da16:	4826      	ldr	r0, [pc, #152]	; (800dab0 <__d2b+0xb4>)
 800da18:	f240 310a 	movw	r1, #778	; 0x30a
 800da1c:	f000 ff6c 	bl	800e8f8 <__assert_func>
 800da20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da28:	bb35      	cbnz	r5, 800da78 <__d2b+0x7c>
 800da2a:	2e00      	cmp	r6, #0
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	d028      	beq.n	800da82 <__d2b+0x86>
 800da30:	4668      	mov	r0, sp
 800da32:	9600      	str	r6, [sp, #0]
 800da34:	f7ff fd06 	bl	800d444 <__lo0bits>
 800da38:	9900      	ldr	r1, [sp, #0]
 800da3a:	b300      	cbz	r0, 800da7e <__d2b+0x82>
 800da3c:	9a01      	ldr	r2, [sp, #4]
 800da3e:	f1c0 0320 	rsb	r3, r0, #32
 800da42:	fa02 f303 	lsl.w	r3, r2, r3
 800da46:	430b      	orrs	r3, r1
 800da48:	40c2      	lsrs	r2, r0
 800da4a:	6163      	str	r3, [r4, #20]
 800da4c:	9201      	str	r2, [sp, #4]
 800da4e:	9b01      	ldr	r3, [sp, #4]
 800da50:	61a3      	str	r3, [r4, #24]
 800da52:	2b00      	cmp	r3, #0
 800da54:	bf14      	ite	ne
 800da56:	2202      	movne	r2, #2
 800da58:	2201      	moveq	r2, #1
 800da5a:	6122      	str	r2, [r4, #16]
 800da5c:	b1d5      	cbz	r5, 800da94 <__d2b+0x98>
 800da5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da62:	4405      	add	r5, r0
 800da64:	f8c9 5000 	str.w	r5, [r9]
 800da68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da6c:	f8c8 0000 	str.w	r0, [r8]
 800da70:	4620      	mov	r0, r4
 800da72:	b003      	add	sp, #12
 800da74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da7c:	e7d5      	b.n	800da2a <__d2b+0x2e>
 800da7e:	6161      	str	r1, [r4, #20]
 800da80:	e7e5      	b.n	800da4e <__d2b+0x52>
 800da82:	a801      	add	r0, sp, #4
 800da84:	f7ff fcde 	bl	800d444 <__lo0bits>
 800da88:	9b01      	ldr	r3, [sp, #4]
 800da8a:	6163      	str	r3, [r4, #20]
 800da8c:	2201      	movs	r2, #1
 800da8e:	6122      	str	r2, [r4, #16]
 800da90:	3020      	adds	r0, #32
 800da92:	e7e3      	b.n	800da5c <__d2b+0x60>
 800da94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da9c:	f8c9 0000 	str.w	r0, [r9]
 800daa0:	6918      	ldr	r0, [r3, #16]
 800daa2:	f7ff fcaf 	bl	800d404 <__hi0bits>
 800daa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800daaa:	e7df      	b.n	800da6c <__d2b+0x70>
 800daac:	080113b8 	.word	0x080113b8
 800dab0:	08011444 	.word	0x08011444

0800dab4 <__ratio>:
 800dab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	4688      	mov	r8, r1
 800daba:	4669      	mov	r1, sp
 800dabc:	4681      	mov	r9, r0
 800dabe:	f7ff ff4d 	bl	800d95c <__b2d>
 800dac2:	a901      	add	r1, sp, #4
 800dac4:	4640      	mov	r0, r8
 800dac6:	ec55 4b10 	vmov	r4, r5, d0
 800daca:	f7ff ff47 	bl	800d95c <__b2d>
 800dace:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dad2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dad6:	eba3 0c02 	sub.w	ip, r3, r2
 800dada:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dae4:	ec51 0b10 	vmov	r0, r1, d0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bfd6      	itet	le
 800daec:	460a      	movle	r2, r1
 800daee:	462a      	movgt	r2, r5
 800daf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800daf4:	468b      	mov	fp, r1
 800daf6:	462f      	mov	r7, r5
 800daf8:	bfd4      	ite	le
 800dafa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dafe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db02:	4620      	mov	r0, r4
 800db04:	ee10 2a10 	vmov	r2, s0
 800db08:	465b      	mov	r3, fp
 800db0a:	4639      	mov	r1, r7
 800db0c:	f7f2 febe 	bl	800088c <__aeabi_ddiv>
 800db10:	ec41 0b10 	vmov	d0, r0, r1
 800db14:	b003      	add	sp, #12
 800db16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db1a <__copybits>:
 800db1a:	3901      	subs	r1, #1
 800db1c:	b570      	push	{r4, r5, r6, lr}
 800db1e:	1149      	asrs	r1, r1, #5
 800db20:	6914      	ldr	r4, [r2, #16]
 800db22:	3101      	adds	r1, #1
 800db24:	f102 0314 	add.w	r3, r2, #20
 800db28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db30:	1f05      	subs	r5, r0, #4
 800db32:	42a3      	cmp	r3, r4
 800db34:	d30c      	bcc.n	800db50 <__copybits+0x36>
 800db36:	1aa3      	subs	r3, r4, r2
 800db38:	3b11      	subs	r3, #17
 800db3a:	f023 0303 	bic.w	r3, r3, #3
 800db3e:	3211      	adds	r2, #17
 800db40:	42a2      	cmp	r2, r4
 800db42:	bf88      	it	hi
 800db44:	2300      	movhi	r3, #0
 800db46:	4418      	add	r0, r3
 800db48:	2300      	movs	r3, #0
 800db4a:	4288      	cmp	r0, r1
 800db4c:	d305      	bcc.n	800db5a <__copybits+0x40>
 800db4e:	bd70      	pop	{r4, r5, r6, pc}
 800db50:	f853 6b04 	ldr.w	r6, [r3], #4
 800db54:	f845 6f04 	str.w	r6, [r5, #4]!
 800db58:	e7eb      	b.n	800db32 <__copybits+0x18>
 800db5a:	f840 3b04 	str.w	r3, [r0], #4
 800db5e:	e7f4      	b.n	800db4a <__copybits+0x30>

0800db60 <__any_on>:
 800db60:	f100 0214 	add.w	r2, r0, #20
 800db64:	6900      	ldr	r0, [r0, #16]
 800db66:	114b      	asrs	r3, r1, #5
 800db68:	4298      	cmp	r0, r3
 800db6a:	b510      	push	{r4, lr}
 800db6c:	db11      	blt.n	800db92 <__any_on+0x32>
 800db6e:	dd0a      	ble.n	800db86 <__any_on+0x26>
 800db70:	f011 011f 	ands.w	r1, r1, #31
 800db74:	d007      	beq.n	800db86 <__any_on+0x26>
 800db76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db7a:	fa24 f001 	lsr.w	r0, r4, r1
 800db7e:	fa00 f101 	lsl.w	r1, r0, r1
 800db82:	428c      	cmp	r4, r1
 800db84:	d10b      	bne.n	800db9e <__any_on+0x3e>
 800db86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d803      	bhi.n	800db96 <__any_on+0x36>
 800db8e:	2000      	movs	r0, #0
 800db90:	bd10      	pop	{r4, pc}
 800db92:	4603      	mov	r3, r0
 800db94:	e7f7      	b.n	800db86 <__any_on+0x26>
 800db96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db9a:	2900      	cmp	r1, #0
 800db9c:	d0f5      	beq.n	800db8a <__any_on+0x2a>
 800db9e:	2001      	movs	r0, #1
 800dba0:	e7f6      	b.n	800db90 <__any_on+0x30>

0800dba2 <_calloc_r>:
 800dba2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dba4:	fba1 2402 	umull	r2, r4, r1, r2
 800dba8:	b94c      	cbnz	r4, 800dbbe <_calloc_r+0x1c>
 800dbaa:	4611      	mov	r1, r2
 800dbac:	9201      	str	r2, [sp, #4]
 800dbae:	f000 f87b 	bl	800dca8 <_malloc_r>
 800dbb2:	9a01      	ldr	r2, [sp, #4]
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	b930      	cbnz	r0, 800dbc6 <_calloc_r+0x24>
 800dbb8:	4628      	mov	r0, r5
 800dbba:	b003      	add	sp, #12
 800dbbc:	bd30      	pop	{r4, r5, pc}
 800dbbe:	220c      	movs	r2, #12
 800dbc0:	6002      	str	r2, [r0, #0]
 800dbc2:	2500      	movs	r5, #0
 800dbc4:	e7f8      	b.n	800dbb8 <_calloc_r+0x16>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	f7fc fafa 	bl	800a1c0 <memset>
 800dbcc:	e7f4      	b.n	800dbb8 <_calloc_r+0x16>
	...

0800dbd0 <_free_r>:
 800dbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbd2:	2900      	cmp	r1, #0
 800dbd4:	d044      	beq.n	800dc60 <_free_r+0x90>
 800dbd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbda:	9001      	str	r0, [sp, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f1a1 0404 	sub.w	r4, r1, #4
 800dbe2:	bfb8      	it	lt
 800dbe4:	18e4      	addlt	r4, r4, r3
 800dbe6:	f001 f88b 	bl	800ed00 <__malloc_lock>
 800dbea:	4a1e      	ldr	r2, [pc, #120]	; (800dc64 <_free_r+0x94>)
 800dbec:	9801      	ldr	r0, [sp, #4]
 800dbee:	6813      	ldr	r3, [r2, #0]
 800dbf0:	b933      	cbnz	r3, 800dc00 <_free_r+0x30>
 800dbf2:	6063      	str	r3, [r4, #4]
 800dbf4:	6014      	str	r4, [r2, #0]
 800dbf6:	b003      	add	sp, #12
 800dbf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbfc:	f001 b886 	b.w	800ed0c <__malloc_unlock>
 800dc00:	42a3      	cmp	r3, r4
 800dc02:	d908      	bls.n	800dc16 <_free_r+0x46>
 800dc04:	6825      	ldr	r5, [r4, #0]
 800dc06:	1961      	adds	r1, r4, r5
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	bf01      	itttt	eq
 800dc0c:	6819      	ldreq	r1, [r3, #0]
 800dc0e:	685b      	ldreq	r3, [r3, #4]
 800dc10:	1949      	addeq	r1, r1, r5
 800dc12:	6021      	streq	r1, [r4, #0]
 800dc14:	e7ed      	b.n	800dbf2 <_free_r+0x22>
 800dc16:	461a      	mov	r2, r3
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	b10b      	cbz	r3, 800dc20 <_free_r+0x50>
 800dc1c:	42a3      	cmp	r3, r4
 800dc1e:	d9fa      	bls.n	800dc16 <_free_r+0x46>
 800dc20:	6811      	ldr	r1, [r2, #0]
 800dc22:	1855      	adds	r5, r2, r1
 800dc24:	42a5      	cmp	r5, r4
 800dc26:	d10b      	bne.n	800dc40 <_free_r+0x70>
 800dc28:	6824      	ldr	r4, [r4, #0]
 800dc2a:	4421      	add	r1, r4
 800dc2c:	1854      	adds	r4, r2, r1
 800dc2e:	42a3      	cmp	r3, r4
 800dc30:	6011      	str	r1, [r2, #0]
 800dc32:	d1e0      	bne.n	800dbf6 <_free_r+0x26>
 800dc34:	681c      	ldr	r4, [r3, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	6053      	str	r3, [r2, #4]
 800dc3a:	4421      	add	r1, r4
 800dc3c:	6011      	str	r1, [r2, #0]
 800dc3e:	e7da      	b.n	800dbf6 <_free_r+0x26>
 800dc40:	d902      	bls.n	800dc48 <_free_r+0x78>
 800dc42:	230c      	movs	r3, #12
 800dc44:	6003      	str	r3, [r0, #0]
 800dc46:	e7d6      	b.n	800dbf6 <_free_r+0x26>
 800dc48:	6825      	ldr	r5, [r4, #0]
 800dc4a:	1961      	adds	r1, r4, r5
 800dc4c:	428b      	cmp	r3, r1
 800dc4e:	bf04      	itt	eq
 800dc50:	6819      	ldreq	r1, [r3, #0]
 800dc52:	685b      	ldreq	r3, [r3, #4]
 800dc54:	6063      	str	r3, [r4, #4]
 800dc56:	bf04      	itt	eq
 800dc58:	1949      	addeq	r1, r1, r5
 800dc5a:	6021      	streq	r1, [r4, #0]
 800dc5c:	6054      	str	r4, [r2, #4]
 800dc5e:	e7ca      	b.n	800dbf6 <_free_r+0x26>
 800dc60:	b003      	add	sp, #12
 800dc62:	bd30      	pop	{r4, r5, pc}
 800dc64:	20001168 	.word	0x20001168

0800dc68 <sbrk_aligned>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	4e0e      	ldr	r6, [pc, #56]	; (800dca4 <sbrk_aligned+0x3c>)
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	6831      	ldr	r1, [r6, #0]
 800dc70:	4605      	mov	r5, r0
 800dc72:	b911      	cbnz	r1, 800dc7a <sbrk_aligned+0x12>
 800dc74:	f000 fd28 	bl	800e6c8 <_sbrk_r>
 800dc78:	6030      	str	r0, [r6, #0]
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f000 fd23 	bl	800e6c8 <_sbrk_r>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	d00a      	beq.n	800dc9c <sbrk_aligned+0x34>
 800dc86:	1cc4      	adds	r4, r0, #3
 800dc88:	f024 0403 	bic.w	r4, r4, #3
 800dc8c:	42a0      	cmp	r0, r4
 800dc8e:	d007      	beq.n	800dca0 <sbrk_aligned+0x38>
 800dc90:	1a21      	subs	r1, r4, r0
 800dc92:	4628      	mov	r0, r5
 800dc94:	f000 fd18 	bl	800e6c8 <_sbrk_r>
 800dc98:	3001      	adds	r0, #1
 800dc9a:	d101      	bne.n	800dca0 <sbrk_aligned+0x38>
 800dc9c:	f04f 34ff 	mov.w	r4, #4294967295
 800dca0:	4620      	mov	r0, r4
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	2000116c 	.word	0x2000116c

0800dca8 <_malloc_r>:
 800dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcac:	1ccd      	adds	r5, r1, #3
 800dcae:	f025 0503 	bic.w	r5, r5, #3
 800dcb2:	3508      	adds	r5, #8
 800dcb4:	2d0c      	cmp	r5, #12
 800dcb6:	bf38      	it	cc
 800dcb8:	250c      	movcc	r5, #12
 800dcba:	2d00      	cmp	r5, #0
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	db01      	blt.n	800dcc4 <_malloc_r+0x1c>
 800dcc0:	42a9      	cmp	r1, r5
 800dcc2:	d905      	bls.n	800dcd0 <_malloc_r+0x28>
 800dcc4:	230c      	movs	r3, #12
 800dcc6:	603b      	str	r3, [r7, #0]
 800dcc8:	2600      	movs	r6, #0
 800dcca:	4630      	mov	r0, r6
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd0:	4e2e      	ldr	r6, [pc, #184]	; (800dd8c <_malloc_r+0xe4>)
 800dcd2:	f001 f815 	bl	800ed00 <__malloc_lock>
 800dcd6:	6833      	ldr	r3, [r6, #0]
 800dcd8:	461c      	mov	r4, r3
 800dcda:	bb34      	cbnz	r4, 800dd2a <_malloc_r+0x82>
 800dcdc:	4629      	mov	r1, r5
 800dcde:	4638      	mov	r0, r7
 800dce0:	f7ff ffc2 	bl	800dc68 <sbrk_aligned>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	4604      	mov	r4, r0
 800dce8:	d14d      	bne.n	800dd86 <_malloc_r+0xde>
 800dcea:	6834      	ldr	r4, [r6, #0]
 800dcec:	4626      	mov	r6, r4
 800dcee:	2e00      	cmp	r6, #0
 800dcf0:	d140      	bne.n	800dd74 <_malloc_r+0xcc>
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	eb04 0803 	add.w	r8, r4, r3
 800dcfc:	f000 fce4 	bl	800e6c8 <_sbrk_r>
 800dd00:	4580      	cmp	r8, r0
 800dd02:	d13a      	bne.n	800dd7a <_malloc_r+0xd2>
 800dd04:	6821      	ldr	r1, [r4, #0]
 800dd06:	3503      	adds	r5, #3
 800dd08:	1a6d      	subs	r5, r5, r1
 800dd0a:	f025 0503 	bic.w	r5, r5, #3
 800dd0e:	3508      	adds	r5, #8
 800dd10:	2d0c      	cmp	r5, #12
 800dd12:	bf38      	it	cc
 800dd14:	250c      	movcc	r5, #12
 800dd16:	4629      	mov	r1, r5
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7ff ffa5 	bl	800dc68 <sbrk_aligned>
 800dd1e:	3001      	adds	r0, #1
 800dd20:	d02b      	beq.n	800dd7a <_malloc_r+0xd2>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	442b      	add	r3, r5
 800dd26:	6023      	str	r3, [r4, #0]
 800dd28:	e00e      	b.n	800dd48 <_malloc_r+0xa0>
 800dd2a:	6822      	ldr	r2, [r4, #0]
 800dd2c:	1b52      	subs	r2, r2, r5
 800dd2e:	d41e      	bmi.n	800dd6e <_malloc_r+0xc6>
 800dd30:	2a0b      	cmp	r2, #11
 800dd32:	d916      	bls.n	800dd62 <_malloc_r+0xba>
 800dd34:	1961      	adds	r1, r4, r5
 800dd36:	42a3      	cmp	r3, r4
 800dd38:	6025      	str	r5, [r4, #0]
 800dd3a:	bf18      	it	ne
 800dd3c:	6059      	strne	r1, [r3, #4]
 800dd3e:	6863      	ldr	r3, [r4, #4]
 800dd40:	bf08      	it	eq
 800dd42:	6031      	streq	r1, [r6, #0]
 800dd44:	5162      	str	r2, [r4, r5]
 800dd46:	604b      	str	r3, [r1, #4]
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f104 060b 	add.w	r6, r4, #11
 800dd4e:	f000 ffdd 	bl	800ed0c <__malloc_unlock>
 800dd52:	f026 0607 	bic.w	r6, r6, #7
 800dd56:	1d23      	adds	r3, r4, #4
 800dd58:	1af2      	subs	r2, r6, r3
 800dd5a:	d0b6      	beq.n	800dcca <_malloc_r+0x22>
 800dd5c:	1b9b      	subs	r3, r3, r6
 800dd5e:	50a3      	str	r3, [r4, r2]
 800dd60:	e7b3      	b.n	800dcca <_malloc_r+0x22>
 800dd62:	6862      	ldr	r2, [r4, #4]
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	bf0c      	ite	eq
 800dd68:	6032      	streq	r2, [r6, #0]
 800dd6a:	605a      	strne	r2, [r3, #4]
 800dd6c:	e7ec      	b.n	800dd48 <_malloc_r+0xa0>
 800dd6e:	4623      	mov	r3, r4
 800dd70:	6864      	ldr	r4, [r4, #4]
 800dd72:	e7b2      	b.n	800dcda <_malloc_r+0x32>
 800dd74:	4634      	mov	r4, r6
 800dd76:	6876      	ldr	r6, [r6, #4]
 800dd78:	e7b9      	b.n	800dcee <_malloc_r+0x46>
 800dd7a:	230c      	movs	r3, #12
 800dd7c:	603b      	str	r3, [r7, #0]
 800dd7e:	4638      	mov	r0, r7
 800dd80:	f000 ffc4 	bl	800ed0c <__malloc_unlock>
 800dd84:	e7a1      	b.n	800dcca <_malloc_r+0x22>
 800dd86:	6025      	str	r5, [r4, #0]
 800dd88:	e7de      	b.n	800dd48 <_malloc_r+0xa0>
 800dd8a:	bf00      	nop
 800dd8c:	20001168 	.word	0x20001168

0800dd90 <__ssputs_r>:
 800dd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd94:	688e      	ldr	r6, [r1, #8]
 800dd96:	429e      	cmp	r6, r3
 800dd98:	4682      	mov	sl, r0
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	4690      	mov	r8, r2
 800dd9e:	461f      	mov	r7, r3
 800dda0:	d838      	bhi.n	800de14 <__ssputs_r+0x84>
 800dda2:	898a      	ldrh	r2, [r1, #12]
 800dda4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dda8:	d032      	beq.n	800de10 <__ssputs_r+0x80>
 800ddaa:	6825      	ldr	r5, [r4, #0]
 800ddac:	6909      	ldr	r1, [r1, #16]
 800ddae:	eba5 0901 	sub.w	r9, r5, r1
 800ddb2:	6965      	ldr	r5, [r4, #20]
 800ddb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	444b      	add	r3, r9
 800ddc0:	106d      	asrs	r5, r5, #1
 800ddc2:	429d      	cmp	r5, r3
 800ddc4:	bf38      	it	cc
 800ddc6:	461d      	movcc	r5, r3
 800ddc8:	0553      	lsls	r3, r2, #21
 800ddca:	d531      	bpl.n	800de30 <__ssputs_r+0xa0>
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f7ff ff6b 	bl	800dca8 <_malloc_r>
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	b950      	cbnz	r0, 800ddec <__ssputs_r+0x5c>
 800ddd6:	230c      	movs	r3, #12
 800ddd8:	f8ca 3000 	str.w	r3, [sl]
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde2:	81a3      	strh	r3, [r4, #12]
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295
 800dde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddec:	6921      	ldr	r1, [r4, #16]
 800ddee:	464a      	mov	r2, r9
 800ddf0:	f7ff fa08 	bl	800d204 <memcpy>
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddfe:	81a3      	strh	r3, [r4, #12]
 800de00:	6126      	str	r6, [r4, #16]
 800de02:	6165      	str	r5, [r4, #20]
 800de04:	444e      	add	r6, r9
 800de06:	eba5 0509 	sub.w	r5, r5, r9
 800de0a:	6026      	str	r6, [r4, #0]
 800de0c:	60a5      	str	r5, [r4, #8]
 800de0e:	463e      	mov	r6, r7
 800de10:	42be      	cmp	r6, r7
 800de12:	d900      	bls.n	800de16 <__ssputs_r+0x86>
 800de14:	463e      	mov	r6, r7
 800de16:	6820      	ldr	r0, [r4, #0]
 800de18:	4632      	mov	r2, r6
 800de1a:	4641      	mov	r1, r8
 800de1c:	f000 ff56 	bl	800eccc <memmove>
 800de20:	68a3      	ldr	r3, [r4, #8]
 800de22:	1b9b      	subs	r3, r3, r6
 800de24:	60a3      	str	r3, [r4, #8]
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	4433      	add	r3, r6
 800de2a:	6023      	str	r3, [r4, #0]
 800de2c:	2000      	movs	r0, #0
 800de2e:	e7db      	b.n	800dde8 <__ssputs_r+0x58>
 800de30:	462a      	mov	r2, r5
 800de32:	f000 ff71 	bl	800ed18 <_realloc_r>
 800de36:	4606      	mov	r6, r0
 800de38:	2800      	cmp	r0, #0
 800de3a:	d1e1      	bne.n	800de00 <__ssputs_r+0x70>
 800de3c:	6921      	ldr	r1, [r4, #16]
 800de3e:	4650      	mov	r0, sl
 800de40:	f7ff fec6 	bl	800dbd0 <_free_r>
 800de44:	e7c7      	b.n	800ddd6 <__ssputs_r+0x46>
	...

0800de48 <_svfiprintf_r>:
 800de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4c:	4698      	mov	r8, r3
 800de4e:	898b      	ldrh	r3, [r1, #12]
 800de50:	061b      	lsls	r3, r3, #24
 800de52:	b09d      	sub	sp, #116	; 0x74
 800de54:	4607      	mov	r7, r0
 800de56:	460d      	mov	r5, r1
 800de58:	4614      	mov	r4, r2
 800de5a:	d50e      	bpl.n	800de7a <_svfiprintf_r+0x32>
 800de5c:	690b      	ldr	r3, [r1, #16]
 800de5e:	b963      	cbnz	r3, 800de7a <_svfiprintf_r+0x32>
 800de60:	2140      	movs	r1, #64	; 0x40
 800de62:	f7ff ff21 	bl	800dca8 <_malloc_r>
 800de66:	6028      	str	r0, [r5, #0]
 800de68:	6128      	str	r0, [r5, #16]
 800de6a:	b920      	cbnz	r0, 800de76 <_svfiprintf_r+0x2e>
 800de6c:	230c      	movs	r3, #12
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	f04f 30ff 	mov.w	r0, #4294967295
 800de74:	e0d1      	b.n	800e01a <_svfiprintf_r+0x1d2>
 800de76:	2340      	movs	r3, #64	; 0x40
 800de78:	616b      	str	r3, [r5, #20]
 800de7a:	2300      	movs	r3, #0
 800de7c:	9309      	str	r3, [sp, #36]	; 0x24
 800de7e:	2320      	movs	r3, #32
 800de80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de84:	f8cd 800c 	str.w	r8, [sp, #12]
 800de88:	2330      	movs	r3, #48	; 0x30
 800de8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e034 <_svfiprintf_r+0x1ec>
 800de8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de92:	f04f 0901 	mov.w	r9, #1
 800de96:	4623      	mov	r3, r4
 800de98:	469a      	mov	sl, r3
 800de9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de9e:	b10a      	cbz	r2, 800dea4 <_svfiprintf_r+0x5c>
 800dea0:	2a25      	cmp	r2, #37	; 0x25
 800dea2:	d1f9      	bne.n	800de98 <_svfiprintf_r+0x50>
 800dea4:	ebba 0b04 	subs.w	fp, sl, r4
 800dea8:	d00b      	beq.n	800dec2 <_svfiprintf_r+0x7a>
 800deaa:	465b      	mov	r3, fp
 800deac:	4622      	mov	r2, r4
 800deae:	4629      	mov	r1, r5
 800deb0:	4638      	mov	r0, r7
 800deb2:	f7ff ff6d 	bl	800dd90 <__ssputs_r>
 800deb6:	3001      	adds	r0, #1
 800deb8:	f000 80aa 	beq.w	800e010 <_svfiprintf_r+0x1c8>
 800debc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800debe:	445a      	add	r2, fp
 800dec0:	9209      	str	r2, [sp, #36]	; 0x24
 800dec2:	f89a 3000 	ldrb.w	r3, [sl]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 80a2 	beq.w	800e010 <_svfiprintf_r+0x1c8>
 800decc:	2300      	movs	r3, #0
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ded6:	f10a 0a01 	add.w	sl, sl, #1
 800deda:	9304      	str	r3, [sp, #16]
 800dedc:	9307      	str	r3, [sp, #28]
 800dede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dee2:	931a      	str	r3, [sp, #104]	; 0x68
 800dee4:	4654      	mov	r4, sl
 800dee6:	2205      	movs	r2, #5
 800dee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deec:	4851      	ldr	r0, [pc, #324]	; (800e034 <_svfiprintf_r+0x1ec>)
 800deee:	f7f2 f997 	bl	8000220 <memchr>
 800def2:	9a04      	ldr	r2, [sp, #16]
 800def4:	b9d8      	cbnz	r0, 800df2e <_svfiprintf_r+0xe6>
 800def6:	06d0      	lsls	r0, r2, #27
 800def8:	bf44      	itt	mi
 800defa:	2320      	movmi	r3, #32
 800defc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df00:	0711      	lsls	r1, r2, #28
 800df02:	bf44      	itt	mi
 800df04:	232b      	movmi	r3, #43	; 0x2b
 800df06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df0a:	f89a 3000 	ldrb.w	r3, [sl]
 800df0e:	2b2a      	cmp	r3, #42	; 0x2a
 800df10:	d015      	beq.n	800df3e <_svfiprintf_r+0xf6>
 800df12:	9a07      	ldr	r2, [sp, #28]
 800df14:	4654      	mov	r4, sl
 800df16:	2000      	movs	r0, #0
 800df18:	f04f 0c0a 	mov.w	ip, #10
 800df1c:	4621      	mov	r1, r4
 800df1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df22:	3b30      	subs	r3, #48	; 0x30
 800df24:	2b09      	cmp	r3, #9
 800df26:	d94e      	bls.n	800dfc6 <_svfiprintf_r+0x17e>
 800df28:	b1b0      	cbz	r0, 800df58 <_svfiprintf_r+0x110>
 800df2a:	9207      	str	r2, [sp, #28]
 800df2c:	e014      	b.n	800df58 <_svfiprintf_r+0x110>
 800df2e:	eba0 0308 	sub.w	r3, r0, r8
 800df32:	fa09 f303 	lsl.w	r3, r9, r3
 800df36:	4313      	orrs	r3, r2
 800df38:	9304      	str	r3, [sp, #16]
 800df3a:	46a2      	mov	sl, r4
 800df3c:	e7d2      	b.n	800dee4 <_svfiprintf_r+0x9c>
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	1d19      	adds	r1, r3, #4
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	9103      	str	r1, [sp, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	bfbb      	ittet	lt
 800df4a:	425b      	neglt	r3, r3
 800df4c:	f042 0202 	orrlt.w	r2, r2, #2
 800df50:	9307      	strge	r3, [sp, #28]
 800df52:	9307      	strlt	r3, [sp, #28]
 800df54:	bfb8      	it	lt
 800df56:	9204      	strlt	r2, [sp, #16]
 800df58:	7823      	ldrb	r3, [r4, #0]
 800df5a:	2b2e      	cmp	r3, #46	; 0x2e
 800df5c:	d10c      	bne.n	800df78 <_svfiprintf_r+0x130>
 800df5e:	7863      	ldrb	r3, [r4, #1]
 800df60:	2b2a      	cmp	r3, #42	; 0x2a
 800df62:	d135      	bne.n	800dfd0 <_svfiprintf_r+0x188>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	1d1a      	adds	r2, r3, #4
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	9203      	str	r2, [sp, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	bfb8      	it	lt
 800df70:	f04f 33ff 	movlt.w	r3, #4294967295
 800df74:	3402      	adds	r4, #2
 800df76:	9305      	str	r3, [sp, #20]
 800df78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e044 <_svfiprintf_r+0x1fc>
 800df7c:	7821      	ldrb	r1, [r4, #0]
 800df7e:	2203      	movs	r2, #3
 800df80:	4650      	mov	r0, sl
 800df82:	f7f2 f94d 	bl	8000220 <memchr>
 800df86:	b140      	cbz	r0, 800df9a <_svfiprintf_r+0x152>
 800df88:	2340      	movs	r3, #64	; 0x40
 800df8a:	eba0 000a 	sub.w	r0, r0, sl
 800df8e:	fa03 f000 	lsl.w	r0, r3, r0
 800df92:	9b04      	ldr	r3, [sp, #16]
 800df94:	4303      	orrs	r3, r0
 800df96:	3401      	adds	r4, #1
 800df98:	9304      	str	r3, [sp, #16]
 800df9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9e:	4826      	ldr	r0, [pc, #152]	; (800e038 <_svfiprintf_r+0x1f0>)
 800dfa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfa4:	2206      	movs	r2, #6
 800dfa6:	f7f2 f93b 	bl	8000220 <memchr>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d038      	beq.n	800e020 <_svfiprintf_r+0x1d8>
 800dfae:	4b23      	ldr	r3, [pc, #140]	; (800e03c <_svfiprintf_r+0x1f4>)
 800dfb0:	bb1b      	cbnz	r3, 800dffa <_svfiprintf_r+0x1b2>
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	3307      	adds	r3, #7
 800dfb6:	f023 0307 	bic.w	r3, r3, #7
 800dfba:	3308      	adds	r3, #8
 800dfbc:	9303      	str	r3, [sp, #12]
 800dfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc0:	4433      	add	r3, r6
 800dfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc4:	e767      	b.n	800de96 <_svfiprintf_r+0x4e>
 800dfc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfca:	460c      	mov	r4, r1
 800dfcc:	2001      	movs	r0, #1
 800dfce:	e7a5      	b.n	800df1c <_svfiprintf_r+0xd4>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	3401      	adds	r4, #1
 800dfd4:	9305      	str	r3, [sp, #20]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	f04f 0c0a 	mov.w	ip, #10
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfe2:	3a30      	subs	r2, #48	; 0x30
 800dfe4:	2a09      	cmp	r2, #9
 800dfe6:	d903      	bls.n	800dff0 <_svfiprintf_r+0x1a8>
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d0c5      	beq.n	800df78 <_svfiprintf_r+0x130>
 800dfec:	9105      	str	r1, [sp, #20]
 800dfee:	e7c3      	b.n	800df78 <_svfiprintf_r+0x130>
 800dff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dff4:	4604      	mov	r4, r0
 800dff6:	2301      	movs	r3, #1
 800dff8:	e7f0      	b.n	800dfdc <_svfiprintf_r+0x194>
 800dffa:	ab03      	add	r3, sp, #12
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	462a      	mov	r2, r5
 800e000:	4b0f      	ldr	r3, [pc, #60]	; (800e040 <_svfiprintf_r+0x1f8>)
 800e002:	a904      	add	r1, sp, #16
 800e004:	4638      	mov	r0, r7
 800e006:	f7fc f983 	bl	800a310 <_printf_float>
 800e00a:	1c42      	adds	r2, r0, #1
 800e00c:	4606      	mov	r6, r0
 800e00e:	d1d6      	bne.n	800dfbe <_svfiprintf_r+0x176>
 800e010:	89ab      	ldrh	r3, [r5, #12]
 800e012:	065b      	lsls	r3, r3, #25
 800e014:	f53f af2c 	bmi.w	800de70 <_svfiprintf_r+0x28>
 800e018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e01a:	b01d      	add	sp, #116	; 0x74
 800e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e020:	ab03      	add	r3, sp, #12
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	462a      	mov	r2, r5
 800e026:	4b06      	ldr	r3, [pc, #24]	; (800e040 <_svfiprintf_r+0x1f8>)
 800e028:	a904      	add	r1, sp, #16
 800e02a:	4638      	mov	r0, r7
 800e02c:	f7fc fc14 	bl	800a858 <_printf_i>
 800e030:	e7eb      	b.n	800e00a <_svfiprintf_r+0x1c2>
 800e032:	bf00      	nop
 800e034:	0801159c 	.word	0x0801159c
 800e038:	080115a6 	.word	0x080115a6
 800e03c:	0800a311 	.word	0x0800a311
 800e040:	0800dd91 	.word	0x0800dd91
 800e044:	080115a2 	.word	0x080115a2

0800e048 <_sungetc_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	1c4b      	adds	r3, r1, #1
 800e04c:	4614      	mov	r4, r2
 800e04e:	d103      	bne.n	800e058 <_sungetc_r+0x10>
 800e050:	f04f 35ff 	mov.w	r5, #4294967295
 800e054:	4628      	mov	r0, r5
 800e056:	bd38      	pop	{r3, r4, r5, pc}
 800e058:	8993      	ldrh	r3, [r2, #12]
 800e05a:	f023 0320 	bic.w	r3, r3, #32
 800e05e:	8193      	strh	r3, [r2, #12]
 800e060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e062:	6852      	ldr	r2, [r2, #4]
 800e064:	b2cd      	uxtb	r5, r1
 800e066:	b18b      	cbz	r3, 800e08c <_sungetc_r+0x44>
 800e068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e06a:	4293      	cmp	r3, r2
 800e06c:	dd08      	ble.n	800e080 <_sungetc_r+0x38>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	1e5a      	subs	r2, r3, #1
 800e072:	6022      	str	r2, [r4, #0]
 800e074:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e078:	6863      	ldr	r3, [r4, #4]
 800e07a:	3301      	adds	r3, #1
 800e07c:	6063      	str	r3, [r4, #4]
 800e07e:	e7e9      	b.n	800e054 <_sungetc_r+0xc>
 800e080:	4621      	mov	r1, r4
 800e082:	f000 fbf1 	bl	800e868 <__submore>
 800e086:	2800      	cmp	r0, #0
 800e088:	d0f1      	beq.n	800e06e <_sungetc_r+0x26>
 800e08a:	e7e1      	b.n	800e050 <_sungetc_r+0x8>
 800e08c:	6921      	ldr	r1, [r4, #16]
 800e08e:	6823      	ldr	r3, [r4, #0]
 800e090:	b151      	cbz	r1, 800e0a8 <_sungetc_r+0x60>
 800e092:	4299      	cmp	r1, r3
 800e094:	d208      	bcs.n	800e0a8 <_sungetc_r+0x60>
 800e096:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e09a:	42a9      	cmp	r1, r5
 800e09c:	d104      	bne.n	800e0a8 <_sungetc_r+0x60>
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	3201      	adds	r2, #1
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	6062      	str	r2, [r4, #4]
 800e0a6:	e7d5      	b.n	800e054 <_sungetc_r+0xc>
 800e0a8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0b0:	6363      	str	r3, [r4, #52]	; 0x34
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0b6:	4623      	mov	r3, r4
 800e0b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e7dc      	b.n	800e07c <_sungetc_r+0x34>

0800e0c2 <__ssrefill_r>:
 800e0c2:	b510      	push	{r4, lr}
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e0c8:	b169      	cbz	r1, 800e0e6 <__ssrefill_r+0x24>
 800e0ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0ce:	4299      	cmp	r1, r3
 800e0d0:	d001      	beq.n	800e0d6 <__ssrefill_r+0x14>
 800e0d2:	f7ff fd7d 	bl	800dbd0 <_free_r>
 800e0d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0d8:	6063      	str	r3, [r4, #4]
 800e0da:	2000      	movs	r0, #0
 800e0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800e0de:	b113      	cbz	r3, 800e0e6 <__ssrefill_r+0x24>
 800e0e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0e2:	6023      	str	r3, [r4, #0]
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	6063      	str	r3, [r4, #4]
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	f043 0320 	orr.w	r3, r3, #32
 800e0f4:	81a3      	strh	r3, [r4, #12]
 800e0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fa:	e7f3      	b.n	800e0e4 <__ssrefill_r+0x22>

0800e0fc <__ssvfiscanf_r>:
 800e0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e100:	460c      	mov	r4, r1
 800e102:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e106:	2100      	movs	r1, #0
 800e108:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e10c:	49a6      	ldr	r1, [pc, #664]	; (800e3a8 <__ssvfiscanf_r+0x2ac>)
 800e10e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e110:	f10d 0804 	add.w	r8, sp, #4
 800e114:	49a5      	ldr	r1, [pc, #660]	; (800e3ac <__ssvfiscanf_r+0x2b0>)
 800e116:	4fa6      	ldr	r7, [pc, #664]	; (800e3b0 <__ssvfiscanf_r+0x2b4>)
 800e118:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e3b4 <__ssvfiscanf_r+0x2b8>
 800e11c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e120:	4606      	mov	r6, r0
 800e122:	91a1      	str	r1, [sp, #644]	; 0x284
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	7813      	ldrb	r3, [r2, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 815a 	beq.w	800e3e2 <__ssvfiscanf_r+0x2e6>
 800e12e:	5dd9      	ldrb	r1, [r3, r7]
 800e130:	f011 0108 	ands.w	r1, r1, #8
 800e134:	f102 0501 	add.w	r5, r2, #1
 800e138:	d019      	beq.n	800e16e <__ssvfiscanf_r+0x72>
 800e13a:	6863      	ldr	r3, [r4, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	dd0f      	ble.n	800e160 <__ssvfiscanf_r+0x64>
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	781a      	ldrb	r2, [r3, #0]
 800e144:	5cba      	ldrb	r2, [r7, r2]
 800e146:	0712      	lsls	r2, r2, #28
 800e148:	d401      	bmi.n	800e14e <__ssvfiscanf_r+0x52>
 800e14a:	462a      	mov	r2, r5
 800e14c:	e7eb      	b.n	800e126 <__ssvfiscanf_r+0x2a>
 800e14e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e150:	3201      	adds	r2, #1
 800e152:	9245      	str	r2, [sp, #276]	; 0x114
 800e154:	6862      	ldr	r2, [r4, #4]
 800e156:	3301      	adds	r3, #1
 800e158:	3a01      	subs	r2, #1
 800e15a:	6062      	str	r2, [r4, #4]
 800e15c:	6023      	str	r3, [r4, #0]
 800e15e:	e7ec      	b.n	800e13a <__ssvfiscanf_r+0x3e>
 800e160:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e162:	4621      	mov	r1, r4
 800e164:	4630      	mov	r0, r6
 800e166:	4798      	blx	r3
 800e168:	2800      	cmp	r0, #0
 800e16a:	d0e9      	beq.n	800e140 <__ssvfiscanf_r+0x44>
 800e16c:	e7ed      	b.n	800e14a <__ssvfiscanf_r+0x4e>
 800e16e:	2b25      	cmp	r3, #37	; 0x25
 800e170:	d012      	beq.n	800e198 <__ssvfiscanf_r+0x9c>
 800e172:	469a      	mov	sl, r3
 800e174:	6863      	ldr	r3, [r4, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	f340 8091 	ble.w	800e29e <__ssvfiscanf_r+0x1a2>
 800e17c:	6822      	ldr	r2, [r4, #0]
 800e17e:	7813      	ldrb	r3, [r2, #0]
 800e180:	4553      	cmp	r3, sl
 800e182:	f040 812e 	bne.w	800e3e2 <__ssvfiscanf_r+0x2e6>
 800e186:	6863      	ldr	r3, [r4, #4]
 800e188:	3b01      	subs	r3, #1
 800e18a:	6063      	str	r3, [r4, #4]
 800e18c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e18e:	3201      	adds	r2, #1
 800e190:	3301      	adds	r3, #1
 800e192:	6022      	str	r2, [r4, #0]
 800e194:	9345      	str	r3, [sp, #276]	; 0x114
 800e196:	e7d8      	b.n	800e14a <__ssvfiscanf_r+0x4e>
 800e198:	9141      	str	r1, [sp, #260]	; 0x104
 800e19a:	9143      	str	r1, [sp, #268]	; 0x10c
 800e19c:	7853      	ldrb	r3, [r2, #1]
 800e19e:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a0:	bf02      	ittt	eq
 800e1a2:	2310      	moveq	r3, #16
 800e1a4:	1c95      	addeq	r5, r2, #2
 800e1a6:	9341      	streq	r3, [sp, #260]	; 0x104
 800e1a8:	220a      	movs	r2, #10
 800e1aa:	46aa      	mov	sl, r5
 800e1ac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e1b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e1b4:	2b09      	cmp	r3, #9
 800e1b6:	d91d      	bls.n	800e1f4 <__ssvfiscanf_r+0xf8>
 800e1b8:	487e      	ldr	r0, [pc, #504]	; (800e3b4 <__ssvfiscanf_r+0x2b8>)
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	f7f2 f830 	bl	8000220 <memchr>
 800e1c0:	b140      	cbz	r0, 800e1d4 <__ssvfiscanf_r+0xd8>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	eba0 0009 	sub.w	r0, r0, r9
 800e1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800e1cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e1ce:	4318      	orrs	r0, r3
 800e1d0:	9041      	str	r0, [sp, #260]	; 0x104
 800e1d2:	4655      	mov	r5, sl
 800e1d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e1d8:	2b78      	cmp	r3, #120	; 0x78
 800e1da:	d806      	bhi.n	800e1ea <__ssvfiscanf_r+0xee>
 800e1dc:	2b57      	cmp	r3, #87	; 0x57
 800e1de:	d810      	bhi.n	800e202 <__ssvfiscanf_r+0x106>
 800e1e0:	2b25      	cmp	r3, #37	; 0x25
 800e1e2:	d0c6      	beq.n	800e172 <__ssvfiscanf_r+0x76>
 800e1e4:	d856      	bhi.n	800e294 <__ssvfiscanf_r+0x198>
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d064      	beq.n	800e2b4 <__ssvfiscanf_r+0x1b8>
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	9347      	str	r3, [sp, #284]	; 0x11c
 800e1ee:	230a      	movs	r3, #10
 800e1f0:	9342      	str	r3, [sp, #264]	; 0x108
 800e1f2:	e071      	b.n	800e2d8 <__ssvfiscanf_r+0x1dc>
 800e1f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e1f6:	fb02 1103 	mla	r1, r2, r3, r1
 800e1fa:	3930      	subs	r1, #48	; 0x30
 800e1fc:	9143      	str	r1, [sp, #268]	; 0x10c
 800e1fe:	4655      	mov	r5, sl
 800e200:	e7d3      	b.n	800e1aa <__ssvfiscanf_r+0xae>
 800e202:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e206:	2a20      	cmp	r2, #32
 800e208:	d8ef      	bhi.n	800e1ea <__ssvfiscanf_r+0xee>
 800e20a:	a101      	add	r1, pc, #4	; (adr r1, 800e210 <__ssvfiscanf_r+0x114>)
 800e20c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e210:	0800e2c3 	.word	0x0800e2c3
 800e214:	0800e1eb 	.word	0x0800e1eb
 800e218:	0800e1eb 	.word	0x0800e1eb
 800e21c:	0800e321 	.word	0x0800e321
 800e220:	0800e1eb 	.word	0x0800e1eb
 800e224:	0800e1eb 	.word	0x0800e1eb
 800e228:	0800e1eb 	.word	0x0800e1eb
 800e22c:	0800e1eb 	.word	0x0800e1eb
 800e230:	0800e1eb 	.word	0x0800e1eb
 800e234:	0800e1eb 	.word	0x0800e1eb
 800e238:	0800e1eb 	.word	0x0800e1eb
 800e23c:	0800e337 	.word	0x0800e337
 800e240:	0800e30d 	.word	0x0800e30d
 800e244:	0800e29b 	.word	0x0800e29b
 800e248:	0800e29b 	.word	0x0800e29b
 800e24c:	0800e29b 	.word	0x0800e29b
 800e250:	0800e1eb 	.word	0x0800e1eb
 800e254:	0800e311 	.word	0x0800e311
 800e258:	0800e1eb 	.word	0x0800e1eb
 800e25c:	0800e1eb 	.word	0x0800e1eb
 800e260:	0800e1eb 	.word	0x0800e1eb
 800e264:	0800e1eb 	.word	0x0800e1eb
 800e268:	0800e347 	.word	0x0800e347
 800e26c:	0800e319 	.word	0x0800e319
 800e270:	0800e2bb 	.word	0x0800e2bb
 800e274:	0800e1eb 	.word	0x0800e1eb
 800e278:	0800e1eb 	.word	0x0800e1eb
 800e27c:	0800e343 	.word	0x0800e343
 800e280:	0800e1eb 	.word	0x0800e1eb
 800e284:	0800e30d 	.word	0x0800e30d
 800e288:	0800e1eb 	.word	0x0800e1eb
 800e28c:	0800e1eb 	.word	0x0800e1eb
 800e290:	0800e2c3 	.word	0x0800e2c3
 800e294:	3b45      	subs	r3, #69	; 0x45
 800e296:	2b02      	cmp	r3, #2
 800e298:	d8a7      	bhi.n	800e1ea <__ssvfiscanf_r+0xee>
 800e29a:	2305      	movs	r3, #5
 800e29c:	e01b      	b.n	800e2d6 <__ssvfiscanf_r+0x1da>
 800e29e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4798      	blx	r3
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f43f af68 	beq.w	800e17c <__ssvfiscanf_r+0x80>
 800e2ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	f040 808d 	bne.w	800e3ce <__ssvfiscanf_r+0x2d2>
 800e2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b8:	e08f      	b.n	800e3da <__ssvfiscanf_r+0x2de>
 800e2ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e2bc:	f042 0220 	orr.w	r2, r2, #32
 800e2c0:	9241      	str	r2, [sp, #260]	; 0x104
 800e2c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2c8:	9241      	str	r2, [sp, #260]	; 0x104
 800e2ca:	2210      	movs	r2, #16
 800e2cc:	2b6f      	cmp	r3, #111	; 0x6f
 800e2ce:	9242      	str	r2, [sp, #264]	; 0x108
 800e2d0:	bf34      	ite	cc
 800e2d2:	2303      	movcc	r3, #3
 800e2d4:	2304      	movcs	r3, #4
 800e2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e2d8:	6863      	ldr	r3, [r4, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	dd42      	ble.n	800e364 <__ssvfiscanf_r+0x268>
 800e2de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e2e0:	0659      	lsls	r1, r3, #25
 800e2e2:	d404      	bmi.n	800e2ee <__ssvfiscanf_r+0x1f2>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	781a      	ldrb	r2, [r3, #0]
 800e2e8:	5cba      	ldrb	r2, [r7, r2]
 800e2ea:	0712      	lsls	r2, r2, #28
 800e2ec:	d441      	bmi.n	800e372 <__ssvfiscanf_r+0x276>
 800e2ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	dc50      	bgt.n	800e396 <__ssvfiscanf_r+0x29a>
 800e2f4:	466b      	mov	r3, sp
 800e2f6:	4622      	mov	r2, r4
 800e2f8:	a941      	add	r1, sp, #260	; 0x104
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f000 f876 	bl	800e3ec <_scanf_chars>
 800e300:	2801      	cmp	r0, #1
 800e302:	d06e      	beq.n	800e3e2 <__ssvfiscanf_r+0x2e6>
 800e304:	2802      	cmp	r0, #2
 800e306:	f47f af20 	bne.w	800e14a <__ssvfiscanf_r+0x4e>
 800e30a:	e7cf      	b.n	800e2ac <__ssvfiscanf_r+0x1b0>
 800e30c:	220a      	movs	r2, #10
 800e30e:	e7dd      	b.n	800e2cc <__ssvfiscanf_r+0x1d0>
 800e310:	2300      	movs	r3, #0
 800e312:	9342      	str	r3, [sp, #264]	; 0x108
 800e314:	2303      	movs	r3, #3
 800e316:	e7de      	b.n	800e2d6 <__ssvfiscanf_r+0x1da>
 800e318:	2308      	movs	r3, #8
 800e31a:	9342      	str	r3, [sp, #264]	; 0x108
 800e31c:	2304      	movs	r3, #4
 800e31e:	e7da      	b.n	800e2d6 <__ssvfiscanf_r+0x1da>
 800e320:	4629      	mov	r1, r5
 800e322:	4640      	mov	r0, r8
 800e324:	f000 f9e0 	bl	800e6e8 <__sccl>
 800e328:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e32e:	9341      	str	r3, [sp, #260]	; 0x104
 800e330:	4605      	mov	r5, r0
 800e332:	2301      	movs	r3, #1
 800e334:	e7cf      	b.n	800e2d6 <__ssvfiscanf_r+0x1da>
 800e336:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e33c:	9341      	str	r3, [sp, #260]	; 0x104
 800e33e:	2300      	movs	r3, #0
 800e340:	e7c9      	b.n	800e2d6 <__ssvfiscanf_r+0x1da>
 800e342:	2302      	movs	r3, #2
 800e344:	e7c7      	b.n	800e2d6 <__ssvfiscanf_r+0x1da>
 800e346:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e348:	06c3      	lsls	r3, r0, #27
 800e34a:	f53f aefe 	bmi.w	800e14a <__ssvfiscanf_r+0x4e>
 800e34e:	9b00      	ldr	r3, [sp, #0]
 800e350:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e352:	1d19      	adds	r1, r3, #4
 800e354:	9100      	str	r1, [sp, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f010 0f01 	tst.w	r0, #1
 800e35c:	bf14      	ite	ne
 800e35e:	801a      	strhne	r2, [r3, #0]
 800e360:	601a      	streq	r2, [r3, #0]
 800e362:	e6f2      	b.n	800e14a <__ssvfiscanf_r+0x4e>
 800e364:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e366:	4621      	mov	r1, r4
 800e368:	4630      	mov	r0, r6
 800e36a:	4798      	blx	r3
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d0b6      	beq.n	800e2de <__ssvfiscanf_r+0x1e2>
 800e370:	e79c      	b.n	800e2ac <__ssvfiscanf_r+0x1b0>
 800e372:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e374:	3201      	adds	r2, #1
 800e376:	9245      	str	r2, [sp, #276]	; 0x114
 800e378:	6862      	ldr	r2, [r4, #4]
 800e37a:	3a01      	subs	r2, #1
 800e37c:	2a00      	cmp	r2, #0
 800e37e:	6062      	str	r2, [r4, #4]
 800e380:	dd02      	ble.n	800e388 <__ssvfiscanf_r+0x28c>
 800e382:	3301      	adds	r3, #1
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	e7ad      	b.n	800e2e4 <__ssvfiscanf_r+0x1e8>
 800e388:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e38a:	4621      	mov	r1, r4
 800e38c:	4630      	mov	r0, r6
 800e38e:	4798      	blx	r3
 800e390:	2800      	cmp	r0, #0
 800e392:	d0a7      	beq.n	800e2e4 <__ssvfiscanf_r+0x1e8>
 800e394:	e78a      	b.n	800e2ac <__ssvfiscanf_r+0x1b0>
 800e396:	2b04      	cmp	r3, #4
 800e398:	dc0e      	bgt.n	800e3b8 <__ssvfiscanf_r+0x2bc>
 800e39a:	466b      	mov	r3, sp
 800e39c:	4622      	mov	r2, r4
 800e39e:	a941      	add	r1, sp, #260	; 0x104
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f000 f87d 	bl	800e4a0 <_scanf_i>
 800e3a6:	e7ab      	b.n	800e300 <__ssvfiscanf_r+0x204>
 800e3a8:	0800e049 	.word	0x0800e049
 800e3ac:	0800e0c3 	.word	0x0800e0c3
 800e3b0:	08011239 	.word	0x08011239
 800e3b4:	080115a2 	.word	0x080115a2
 800e3b8:	4b0b      	ldr	r3, [pc, #44]	; (800e3e8 <__ssvfiscanf_r+0x2ec>)
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	f43f aec5 	beq.w	800e14a <__ssvfiscanf_r+0x4e>
 800e3c0:	466b      	mov	r3, sp
 800e3c2:	4622      	mov	r2, r4
 800e3c4:	a941      	add	r1, sp, #260	; 0x104
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	f7fc fb6c 	bl	800aaa4 <_scanf_float>
 800e3cc:	e798      	b.n	800e300 <__ssvfiscanf_r+0x204>
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e3d4:	bf18      	it	ne
 800e3d6:	f04f 30ff 	movne.w	r0, #4294967295
 800e3da:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e3e4:	e7f9      	b.n	800e3da <__ssvfiscanf_r+0x2de>
 800e3e6:	bf00      	nop
 800e3e8:	0800aaa5 	.word	0x0800aaa5

0800e3ec <_scanf_chars>:
 800e3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f0:	4615      	mov	r5, r2
 800e3f2:	688a      	ldr	r2, [r1, #8]
 800e3f4:	4680      	mov	r8, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	b932      	cbnz	r2, 800e408 <_scanf_chars+0x1c>
 800e3fa:	698a      	ldr	r2, [r1, #24]
 800e3fc:	2a00      	cmp	r2, #0
 800e3fe:	bf0c      	ite	eq
 800e400:	2201      	moveq	r2, #1
 800e402:	f04f 32ff 	movne.w	r2, #4294967295
 800e406:	608a      	str	r2, [r1, #8]
 800e408:	6822      	ldr	r2, [r4, #0]
 800e40a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e49c <_scanf_chars+0xb0>
 800e40e:	06d1      	lsls	r1, r2, #27
 800e410:	bf5f      	itttt	pl
 800e412:	681a      	ldrpl	r2, [r3, #0]
 800e414:	1d11      	addpl	r1, r2, #4
 800e416:	6019      	strpl	r1, [r3, #0]
 800e418:	6816      	ldrpl	r6, [r2, #0]
 800e41a:	2700      	movs	r7, #0
 800e41c:	69a0      	ldr	r0, [r4, #24]
 800e41e:	b188      	cbz	r0, 800e444 <_scanf_chars+0x58>
 800e420:	2801      	cmp	r0, #1
 800e422:	d107      	bne.n	800e434 <_scanf_chars+0x48>
 800e424:	682a      	ldr	r2, [r5, #0]
 800e426:	7811      	ldrb	r1, [r2, #0]
 800e428:	6962      	ldr	r2, [r4, #20]
 800e42a:	5c52      	ldrb	r2, [r2, r1]
 800e42c:	b952      	cbnz	r2, 800e444 <_scanf_chars+0x58>
 800e42e:	2f00      	cmp	r7, #0
 800e430:	d031      	beq.n	800e496 <_scanf_chars+0xaa>
 800e432:	e022      	b.n	800e47a <_scanf_chars+0x8e>
 800e434:	2802      	cmp	r0, #2
 800e436:	d120      	bne.n	800e47a <_scanf_chars+0x8e>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e440:	071b      	lsls	r3, r3, #28
 800e442:	d41a      	bmi.n	800e47a <_scanf_chars+0x8e>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	06da      	lsls	r2, r3, #27
 800e448:	bf5e      	ittt	pl
 800e44a:	682b      	ldrpl	r3, [r5, #0]
 800e44c:	781b      	ldrbpl	r3, [r3, #0]
 800e44e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e452:	682a      	ldr	r2, [r5, #0]
 800e454:	686b      	ldr	r3, [r5, #4]
 800e456:	3201      	adds	r2, #1
 800e458:	602a      	str	r2, [r5, #0]
 800e45a:	68a2      	ldr	r2, [r4, #8]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	3a01      	subs	r2, #1
 800e460:	606b      	str	r3, [r5, #4]
 800e462:	3701      	adds	r7, #1
 800e464:	60a2      	str	r2, [r4, #8]
 800e466:	b142      	cbz	r2, 800e47a <_scanf_chars+0x8e>
 800e468:	2b00      	cmp	r3, #0
 800e46a:	dcd7      	bgt.n	800e41c <_scanf_chars+0x30>
 800e46c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e470:	4629      	mov	r1, r5
 800e472:	4640      	mov	r0, r8
 800e474:	4798      	blx	r3
 800e476:	2800      	cmp	r0, #0
 800e478:	d0d0      	beq.n	800e41c <_scanf_chars+0x30>
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	f013 0310 	ands.w	r3, r3, #16
 800e480:	d105      	bne.n	800e48e <_scanf_chars+0xa2>
 800e482:	68e2      	ldr	r2, [r4, #12]
 800e484:	3201      	adds	r2, #1
 800e486:	60e2      	str	r2, [r4, #12]
 800e488:	69a2      	ldr	r2, [r4, #24]
 800e48a:	b102      	cbz	r2, 800e48e <_scanf_chars+0xa2>
 800e48c:	7033      	strb	r3, [r6, #0]
 800e48e:	6923      	ldr	r3, [r4, #16]
 800e490:	443b      	add	r3, r7
 800e492:	6123      	str	r3, [r4, #16]
 800e494:	2000      	movs	r0, #0
 800e496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e49a:	bf00      	nop
 800e49c:	08011239 	.word	0x08011239

0800e4a0 <_scanf_i>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	4698      	mov	r8, r3
 800e4a6:	4b76      	ldr	r3, [pc, #472]	; (800e680 <_scanf_i+0x1e0>)
 800e4a8:	460c      	mov	r4, r1
 800e4aa:	4682      	mov	sl, r0
 800e4ac:	4616      	mov	r6, r2
 800e4ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	ab03      	add	r3, sp, #12
 800e4b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e4ba:	4b72      	ldr	r3, [pc, #456]	; (800e684 <_scanf_i+0x1e4>)
 800e4bc:	69a1      	ldr	r1, [r4, #24]
 800e4be:	4a72      	ldr	r2, [pc, #456]	; (800e688 <_scanf_i+0x1e8>)
 800e4c0:	2903      	cmp	r1, #3
 800e4c2:	bf18      	it	ne
 800e4c4:	461a      	movne	r2, r3
 800e4c6:	68a3      	ldr	r3, [r4, #8]
 800e4c8:	9201      	str	r2, [sp, #4]
 800e4ca:	1e5a      	subs	r2, r3, #1
 800e4cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e4d0:	bf88      	it	hi
 800e4d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e4d6:	4627      	mov	r7, r4
 800e4d8:	bf82      	ittt	hi
 800e4da:	eb03 0905 	addhi.w	r9, r3, r5
 800e4de:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e4e2:	60a3      	strhi	r3, [r4, #8]
 800e4e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e4e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e4ec:	bf98      	it	ls
 800e4ee:	f04f 0900 	movls.w	r9, #0
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	463d      	mov	r5, r7
 800e4f6:	f04f 0b00 	mov.w	fp, #0
 800e4fa:	6831      	ldr	r1, [r6, #0]
 800e4fc:	ab03      	add	r3, sp, #12
 800e4fe:	7809      	ldrb	r1, [r1, #0]
 800e500:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e504:	2202      	movs	r2, #2
 800e506:	f7f1 fe8b 	bl	8000220 <memchr>
 800e50a:	b328      	cbz	r0, 800e558 <_scanf_i+0xb8>
 800e50c:	f1bb 0f01 	cmp.w	fp, #1
 800e510:	d159      	bne.n	800e5c6 <_scanf_i+0x126>
 800e512:	6862      	ldr	r2, [r4, #4]
 800e514:	b92a      	cbnz	r2, 800e522 <_scanf_i+0x82>
 800e516:	6822      	ldr	r2, [r4, #0]
 800e518:	2308      	movs	r3, #8
 800e51a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e51e:	6063      	str	r3, [r4, #4]
 800e520:	6022      	str	r2, [r4, #0]
 800e522:	6822      	ldr	r2, [r4, #0]
 800e524:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e528:	6022      	str	r2, [r4, #0]
 800e52a:	68a2      	ldr	r2, [r4, #8]
 800e52c:	1e51      	subs	r1, r2, #1
 800e52e:	60a1      	str	r1, [r4, #8]
 800e530:	b192      	cbz	r2, 800e558 <_scanf_i+0xb8>
 800e532:	6832      	ldr	r2, [r6, #0]
 800e534:	1c51      	adds	r1, r2, #1
 800e536:	6031      	str	r1, [r6, #0]
 800e538:	7812      	ldrb	r2, [r2, #0]
 800e53a:	f805 2b01 	strb.w	r2, [r5], #1
 800e53e:	6872      	ldr	r2, [r6, #4]
 800e540:	3a01      	subs	r2, #1
 800e542:	2a00      	cmp	r2, #0
 800e544:	6072      	str	r2, [r6, #4]
 800e546:	dc07      	bgt.n	800e558 <_scanf_i+0xb8>
 800e548:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e54c:	4631      	mov	r1, r6
 800e54e:	4650      	mov	r0, sl
 800e550:	4790      	blx	r2
 800e552:	2800      	cmp	r0, #0
 800e554:	f040 8085 	bne.w	800e662 <_scanf_i+0x1c2>
 800e558:	f10b 0b01 	add.w	fp, fp, #1
 800e55c:	f1bb 0f03 	cmp.w	fp, #3
 800e560:	d1cb      	bne.n	800e4fa <_scanf_i+0x5a>
 800e562:	6863      	ldr	r3, [r4, #4]
 800e564:	b90b      	cbnz	r3, 800e56a <_scanf_i+0xca>
 800e566:	230a      	movs	r3, #10
 800e568:	6063      	str	r3, [r4, #4]
 800e56a:	6863      	ldr	r3, [r4, #4]
 800e56c:	4947      	ldr	r1, [pc, #284]	; (800e68c <_scanf_i+0x1ec>)
 800e56e:	6960      	ldr	r0, [r4, #20]
 800e570:	1ac9      	subs	r1, r1, r3
 800e572:	f000 f8b9 	bl	800e6e8 <__sccl>
 800e576:	f04f 0b00 	mov.w	fp, #0
 800e57a:	68a3      	ldr	r3, [r4, #8]
 800e57c:	6822      	ldr	r2, [r4, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d03d      	beq.n	800e5fe <_scanf_i+0x15e>
 800e582:	6831      	ldr	r1, [r6, #0]
 800e584:	6960      	ldr	r0, [r4, #20]
 800e586:	f891 c000 	ldrb.w	ip, [r1]
 800e58a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e58e:	2800      	cmp	r0, #0
 800e590:	d035      	beq.n	800e5fe <_scanf_i+0x15e>
 800e592:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e596:	d124      	bne.n	800e5e2 <_scanf_i+0x142>
 800e598:	0510      	lsls	r0, r2, #20
 800e59a:	d522      	bpl.n	800e5e2 <_scanf_i+0x142>
 800e59c:	f10b 0b01 	add.w	fp, fp, #1
 800e5a0:	f1b9 0f00 	cmp.w	r9, #0
 800e5a4:	d003      	beq.n	800e5ae <_scanf_i+0x10e>
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5ac:	60a3      	str	r3, [r4, #8]
 800e5ae:	6873      	ldr	r3, [r6, #4]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	6073      	str	r3, [r6, #4]
 800e5b6:	dd1b      	ble.n	800e5f0 <_scanf_i+0x150>
 800e5b8:	6833      	ldr	r3, [r6, #0]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	6033      	str	r3, [r6, #0]
 800e5be:	68a3      	ldr	r3, [r4, #8]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	60a3      	str	r3, [r4, #8]
 800e5c4:	e7d9      	b.n	800e57a <_scanf_i+0xda>
 800e5c6:	f1bb 0f02 	cmp.w	fp, #2
 800e5ca:	d1ae      	bne.n	800e52a <_scanf_i+0x8a>
 800e5cc:	6822      	ldr	r2, [r4, #0]
 800e5ce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e5d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e5d6:	d1bf      	bne.n	800e558 <_scanf_i+0xb8>
 800e5d8:	2310      	movs	r3, #16
 800e5da:	6063      	str	r3, [r4, #4]
 800e5dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5e0:	e7a2      	b.n	800e528 <_scanf_i+0x88>
 800e5e2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e5e6:	6022      	str	r2, [r4, #0]
 800e5e8:	780b      	ldrb	r3, [r1, #0]
 800e5ea:	f805 3b01 	strb.w	r3, [r5], #1
 800e5ee:	e7de      	b.n	800e5ae <_scanf_i+0x10e>
 800e5f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e5f4:	4631      	mov	r1, r6
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	4798      	blx	r3
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d0df      	beq.n	800e5be <_scanf_i+0x11e>
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	05db      	lsls	r3, r3, #23
 800e602:	d50d      	bpl.n	800e620 <_scanf_i+0x180>
 800e604:	42bd      	cmp	r5, r7
 800e606:	d909      	bls.n	800e61c <_scanf_i+0x17c>
 800e608:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e60c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e610:	4632      	mov	r2, r6
 800e612:	4650      	mov	r0, sl
 800e614:	4798      	blx	r3
 800e616:	f105 39ff 	add.w	r9, r5, #4294967295
 800e61a:	464d      	mov	r5, r9
 800e61c:	42bd      	cmp	r5, r7
 800e61e:	d02d      	beq.n	800e67c <_scanf_i+0x1dc>
 800e620:	6822      	ldr	r2, [r4, #0]
 800e622:	f012 0210 	ands.w	r2, r2, #16
 800e626:	d113      	bne.n	800e650 <_scanf_i+0x1b0>
 800e628:	702a      	strb	r2, [r5, #0]
 800e62a:	6863      	ldr	r3, [r4, #4]
 800e62c:	9e01      	ldr	r6, [sp, #4]
 800e62e:	4639      	mov	r1, r7
 800e630:	4650      	mov	r0, sl
 800e632:	47b0      	blx	r6
 800e634:	6821      	ldr	r1, [r4, #0]
 800e636:	f8d8 3000 	ldr.w	r3, [r8]
 800e63a:	f011 0f20 	tst.w	r1, #32
 800e63e:	d013      	beq.n	800e668 <_scanf_i+0x1c8>
 800e640:	1d1a      	adds	r2, r3, #4
 800e642:	f8c8 2000 	str.w	r2, [r8]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	6018      	str	r0, [r3, #0]
 800e64a:	68e3      	ldr	r3, [r4, #12]
 800e64c:	3301      	adds	r3, #1
 800e64e:	60e3      	str	r3, [r4, #12]
 800e650:	1bed      	subs	r5, r5, r7
 800e652:	44ab      	add	fp, r5
 800e654:	6925      	ldr	r5, [r4, #16]
 800e656:	445d      	add	r5, fp
 800e658:	6125      	str	r5, [r4, #16]
 800e65a:	2000      	movs	r0, #0
 800e65c:	b007      	add	sp, #28
 800e65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e662:	f04f 0b00 	mov.w	fp, #0
 800e666:	e7ca      	b.n	800e5fe <_scanf_i+0x15e>
 800e668:	1d1a      	adds	r2, r3, #4
 800e66a:	f8c8 2000 	str.w	r2, [r8]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f011 0f01 	tst.w	r1, #1
 800e674:	bf14      	ite	ne
 800e676:	8018      	strhne	r0, [r3, #0]
 800e678:	6018      	streq	r0, [r3, #0]
 800e67a:	e7e6      	b.n	800e64a <_scanf_i+0x1aa>
 800e67c:	2001      	movs	r0, #1
 800e67e:	e7ed      	b.n	800e65c <_scanf_i+0x1bc>
 800e680:	0801117c 	.word	0x0801117c
 800e684:	0800e865 	.word	0x0800e865
 800e688:	0800bd85 	.word	0x0800bd85
 800e68c:	080115c6 	.word	0x080115c6

0800e690 <_read_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d07      	ldr	r5, [pc, #28]	; (800e6b0 <_read_r+0x20>)
 800e694:	4604      	mov	r4, r0
 800e696:	4608      	mov	r0, r1
 800e698:	4611      	mov	r1, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	602a      	str	r2, [r5, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	f7f6 fc06 	bl	8004eb0 <_read>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_read_r+0x1e>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_read_r+0x1e>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20001170 	.word	0x20001170
 800e6b4:	00000000 	.word	0x00000000

0800e6b8 <nan>:
 800e6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e6c0 <nan+0x8>
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	00000000 	.word	0x00000000
 800e6c4:	7ff80000 	.word	0x7ff80000

0800e6c8 <_sbrk_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	4d06      	ldr	r5, [pc, #24]	; (800e6e4 <_sbrk_r+0x1c>)
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	4608      	mov	r0, r1
 800e6d2:	602b      	str	r3, [r5, #0]
 800e6d4:	f7f6 fc5a 	bl	8004f8c <_sbrk>
 800e6d8:	1c43      	adds	r3, r0, #1
 800e6da:	d102      	bne.n	800e6e2 <_sbrk_r+0x1a>
 800e6dc:	682b      	ldr	r3, [r5, #0]
 800e6de:	b103      	cbz	r3, 800e6e2 <_sbrk_r+0x1a>
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	bd38      	pop	{r3, r4, r5, pc}
 800e6e4:	20001170 	.word	0x20001170

0800e6e8 <__sccl>:
 800e6e8:	b570      	push	{r4, r5, r6, lr}
 800e6ea:	780b      	ldrb	r3, [r1, #0]
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	2b5e      	cmp	r3, #94	; 0x5e
 800e6f0:	bf0b      	itete	eq
 800e6f2:	784b      	ldrbeq	r3, [r1, #1]
 800e6f4:	1c48      	addne	r0, r1, #1
 800e6f6:	1c88      	addeq	r0, r1, #2
 800e6f8:	2200      	movne	r2, #0
 800e6fa:	bf08      	it	eq
 800e6fc:	2201      	moveq	r2, #1
 800e6fe:	1e61      	subs	r1, r4, #1
 800e700:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e704:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e708:	42a9      	cmp	r1, r5
 800e70a:	d1fb      	bne.n	800e704 <__sccl+0x1c>
 800e70c:	b90b      	cbnz	r3, 800e712 <__sccl+0x2a>
 800e70e:	3801      	subs	r0, #1
 800e710:	bd70      	pop	{r4, r5, r6, pc}
 800e712:	f082 0201 	eor.w	r2, r2, #1
 800e716:	54e2      	strb	r2, [r4, r3]
 800e718:	4605      	mov	r5, r0
 800e71a:	4628      	mov	r0, r5
 800e71c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e720:	292d      	cmp	r1, #45	; 0x2d
 800e722:	d006      	beq.n	800e732 <__sccl+0x4a>
 800e724:	295d      	cmp	r1, #93	; 0x5d
 800e726:	d0f3      	beq.n	800e710 <__sccl+0x28>
 800e728:	b909      	cbnz	r1, 800e72e <__sccl+0x46>
 800e72a:	4628      	mov	r0, r5
 800e72c:	e7f0      	b.n	800e710 <__sccl+0x28>
 800e72e:	460b      	mov	r3, r1
 800e730:	e7f1      	b.n	800e716 <__sccl+0x2e>
 800e732:	786e      	ldrb	r6, [r5, #1]
 800e734:	2e5d      	cmp	r6, #93	; 0x5d
 800e736:	d0fa      	beq.n	800e72e <__sccl+0x46>
 800e738:	42b3      	cmp	r3, r6
 800e73a:	dcf8      	bgt.n	800e72e <__sccl+0x46>
 800e73c:	3502      	adds	r5, #2
 800e73e:	4619      	mov	r1, r3
 800e740:	3101      	adds	r1, #1
 800e742:	428e      	cmp	r6, r1
 800e744:	5462      	strb	r2, [r4, r1]
 800e746:	dcfb      	bgt.n	800e740 <__sccl+0x58>
 800e748:	1af1      	subs	r1, r6, r3
 800e74a:	3901      	subs	r1, #1
 800e74c:	1c58      	adds	r0, r3, #1
 800e74e:	42b3      	cmp	r3, r6
 800e750:	bfa8      	it	ge
 800e752:	2100      	movge	r1, #0
 800e754:	1843      	adds	r3, r0, r1
 800e756:	e7e0      	b.n	800e71a <__sccl+0x32>

0800e758 <strncmp>:
 800e758:	b510      	push	{r4, lr}
 800e75a:	b17a      	cbz	r2, 800e77c <strncmp+0x24>
 800e75c:	4603      	mov	r3, r0
 800e75e:	3901      	subs	r1, #1
 800e760:	1884      	adds	r4, r0, r2
 800e762:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e766:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e76a:	4290      	cmp	r0, r2
 800e76c:	d101      	bne.n	800e772 <strncmp+0x1a>
 800e76e:	42a3      	cmp	r3, r4
 800e770:	d101      	bne.n	800e776 <strncmp+0x1e>
 800e772:	1a80      	subs	r0, r0, r2
 800e774:	bd10      	pop	{r4, pc}
 800e776:	2800      	cmp	r0, #0
 800e778:	d1f3      	bne.n	800e762 <strncmp+0xa>
 800e77a:	e7fa      	b.n	800e772 <strncmp+0x1a>
 800e77c:	4610      	mov	r0, r2
 800e77e:	e7f9      	b.n	800e774 <strncmp+0x1c>

0800e780 <_strtoul_l.constprop.0>:
 800e780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e784:	4f36      	ldr	r7, [pc, #216]	; (800e860 <_strtoul_l.constprop.0+0xe0>)
 800e786:	4686      	mov	lr, r0
 800e788:	460d      	mov	r5, r1
 800e78a:	4628      	mov	r0, r5
 800e78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e790:	5de6      	ldrb	r6, [r4, r7]
 800e792:	f016 0608 	ands.w	r6, r6, #8
 800e796:	d1f8      	bne.n	800e78a <_strtoul_l.constprop.0+0xa>
 800e798:	2c2d      	cmp	r4, #45	; 0x2d
 800e79a:	d12f      	bne.n	800e7fc <_strtoul_l.constprop.0+0x7c>
 800e79c:	782c      	ldrb	r4, [r5, #0]
 800e79e:	2601      	movs	r6, #1
 800e7a0:	1c85      	adds	r5, r0, #2
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d057      	beq.n	800e856 <_strtoul_l.constprop.0+0xd6>
 800e7a6:	2b10      	cmp	r3, #16
 800e7a8:	d109      	bne.n	800e7be <_strtoul_l.constprop.0+0x3e>
 800e7aa:	2c30      	cmp	r4, #48	; 0x30
 800e7ac:	d107      	bne.n	800e7be <_strtoul_l.constprop.0+0x3e>
 800e7ae:	7828      	ldrb	r0, [r5, #0]
 800e7b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e7b4:	2858      	cmp	r0, #88	; 0x58
 800e7b6:	d149      	bne.n	800e84c <_strtoul_l.constprop.0+0xcc>
 800e7b8:	786c      	ldrb	r4, [r5, #1]
 800e7ba:	2310      	movs	r3, #16
 800e7bc:	3502      	adds	r5, #2
 800e7be:	f04f 38ff 	mov.w	r8, #4294967295
 800e7c2:	2700      	movs	r7, #0
 800e7c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800e7c8:	fb03 f908 	mul.w	r9, r3, r8
 800e7cc:	ea6f 0909 	mvn.w	r9, r9
 800e7d0:	4638      	mov	r0, r7
 800e7d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e7d6:	f1bc 0f09 	cmp.w	ip, #9
 800e7da:	d814      	bhi.n	800e806 <_strtoul_l.constprop.0+0x86>
 800e7dc:	4664      	mov	r4, ip
 800e7de:	42a3      	cmp	r3, r4
 800e7e0:	dd22      	ble.n	800e828 <_strtoul_l.constprop.0+0xa8>
 800e7e2:	2f00      	cmp	r7, #0
 800e7e4:	db1d      	blt.n	800e822 <_strtoul_l.constprop.0+0xa2>
 800e7e6:	4580      	cmp	r8, r0
 800e7e8:	d31b      	bcc.n	800e822 <_strtoul_l.constprop.0+0xa2>
 800e7ea:	d101      	bne.n	800e7f0 <_strtoul_l.constprop.0+0x70>
 800e7ec:	45a1      	cmp	r9, r4
 800e7ee:	db18      	blt.n	800e822 <_strtoul_l.constprop.0+0xa2>
 800e7f0:	fb00 4003 	mla	r0, r0, r3, r4
 800e7f4:	2701      	movs	r7, #1
 800e7f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7fa:	e7ea      	b.n	800e7d2 <_strtoul_l.constprop.0+0x52>
 800e7fc:	2c2b      	cmp	r4, #43	; 0x2b
 800e7fe:	bf04      	itt	eq
 800e800:	782c      	ldrbeq	r4, [r5, #0]
 800e802:	1c85      	addeq	r5, r0, #2
 800e804:	e7cd      	b.n	800e7a2 <_strtoul_l.constprop.0+0x22>
 800e806:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e80a:	f1bc 0f19 	cmp.w	ip, #25
 800e80e:	d801      	bhi.n	800e814 <_strtoul_l.constprop.0+0x94>
 800e810:	3c37      	subs	r4, #55	; 0x37
 800e812:	e7e4      	b.n	800e7de <_strtoul_l.constprop.0+0x5e>
 800e814:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e818:	f1bc 0f19 	cmp.w	ip, #25
 800e81c:	d804      	bhi.n	800e828 <_strtoul_l.constprop.0+0xa8>
 800e81e:	3c57      	subs	r4, #87	; 0x57
 800e820:	e7dd      	b.n	800e7de <_strtoul_l.constprop.0+0x5e>
 800e822:	f04f 37ff 	mov.w	r7, #4294967295
 800e826:	e7e6      	b.n	800e7f6 <_strtoul_l.constprop.0+0x76>
 800e828:	2f00      	cmp	r7, #0
 800e82a:	da07      	bge.n	800e83c <_strtoul_l.constprop.0+0xbc>
 800e82c:	2322      	movs	r3, #34	; 0x22
 800e82e:	f8ce 3000 	str.w	r3, [lr]
 800e832:	f04f 30ff 	mov.w	r0, #4294967295
 800e836:	b932      	cbnz	r2, 800e846 <_strtoul_l.constprop.0+0xc6>
 800e838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e83c:	b106      	cbz	r6, 800e840 <_strtoul_l.constprop.0+0xc0>
 800e83e:	4240      	negs	r0, r0
 800e840:	2a00      	cmp	r2, #0
 800e842:	d0f9      	beq.n	800e838 <_strtoul_l.constprop.0+0xb8>
 800e844:	b107      	cbz	r7, 800e848 <_strtoul_l.constprop.0+0xc8>
 800e846:	1e69      	subs	r1, r5, #1
 800e848:	6011      	str	r1, [r2, #0]
 800e84a:	e7f5      	b.n	800e838 <_strtoul_l.constprop.0+0xb8>
 800e84c:	2430      	movs	r4, #48	; 0x30
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1b5      	bne.n	800e7be <_strtoul_l.constprop.0+0x3e>
 800e852:	2308      	movs	r3, #8
 800e854:	e7b3      	b.n	800e7be <_strtoul_l.constprop.0+0x3e>
 800e856:	2c30      	cmp	r4, #48	; 0x30
 800e858:	d0a9      	beq.n	800e7ae <_strtoul_l.constprop.0+0x2e>
 800e85a:	230a      	movs	r3, #10
 800e85c:	e7af      	b.n	800e7be <_strtoul_l.constprop.0+0x3e>
 800e85e:	bf00      	nop
 800e860:	08011239 	.word	0x08011239

0800e864 <_strtoul_r>:
 800e864:	f7ff bf8c 	b.w	800e780 <_strtoul_l.constprop.0>

0800e868 <__submore>:
 800e868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e86c:	460c      	mov	r4, r1
 800e86e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e874:	4299      	cmp	r1, r3
 800e876:	d11d      	bne.n	800e8b4 <__submore+0x4c>
 800e878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e87c:	f7ff fa14 	bl	800dca8 <_malloc_r>
 800e880:	b918      	cbnz	r0, 800e88a <__submore+0x22>
 800e882:	f04f 30ff 	mov.w	r0, #4294967295
 800e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e890:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e894:	6360      	str	r0, [r4, #52]	; 0x34
 800e896:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e89a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e89e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e8a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e8a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e8aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e8ae:	6020      	str	r0, [r4, #0]
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7e8      	b.n	800e886 <__submore+0x1e>
 800e8b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e8b6:	0077      	lsls	r7, r6, #1
 800e8b8:	463a      	mov	r2, r7
 800e8ba:	f000 fa2d 	bl	800ed18 <_realloc_r>
 800e8be:	4605      	mov	r5, r0
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d0de      	beq.n	800e882 <__submore+0x1a>
 800e8c4:	eb00 0806 	add.w	r8, r0, r6
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	4632      	mov	r2, r6
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	f7fe fc99 	bl	800d204 <memcpy>
 800e8d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e8d6:	f8c4 8000 	str.w	r8, [r4]
 800e8da:	e7e9      	b.n	800e8b0 <__submore+0x48>

0800e8dc <__ascii_wctomb>:
 800e8dc:	b149      	cbz	r1, 800e8f2 <__ascii_wctomb+0x16>
 800e8de:	2aff      	cmp	r2, #255	; 0xff
 800e8e0:	bf85      	ittet	hi
 800e8e2:	238a      	movhi	r3, #138	; 0x8a
 800e8e4:	6003      	strhi	r3, [r0, #0]
 800e8e6:	700a      	strbls	r2, [r1, #0]
 800e8e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e8ec:	bf98      	it	ls
 800e8ee:	2001      	movls	r0, #1
 800e8f0:	4770      	bx	lr
 800e8f2:	4608      	mov	r0, r1
 800e8f4:	4770      	bx	lr
	...

0800e8f8 <__assert_func>:
 800e8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8fa:	4614      	mov	r4, r2
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	4b09      	ldr	r3, [pc, #36]	; (800e924 <__assert_func+0x2c>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4605      	mov	r5, r0
 800e904:	68d8      	ldr	r0, [r3, #12]
 800e906:	b14c      	cbz	r4, 800e91c <__assert_func+0x24>
 800e908:	4b07      	ldr	r3, [pc, #28]	; (800e928 <__assert_func+0x30>)
 800e90a:	9100      	str	r1, [sp, #0]
 800e90c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e910:	4906      	ldr	r1, [pc, #24]	; (800e92c <__assert_func+0x34>)
 800e912:	462b      	mov	r3, r5
 800e914:	f000 f9a6 	bl	800ec64 <fiprintf>
 800e918:	f000 fc46 	bl	800f1a8 <abort>
 800e91c:	4b04      	ldr	r3, [pc, #16]	; (800e930 <__assert_func+0x38>)
 800e91e:	461c      	mov	r4, r3
 800e920:	e7f3      	b.n	800e90a <__assert_func+0x12>
 800e922:	bf00      	nop
 800e924:	20000014 	.word	0x20000014
 800e928:	080115c8 	.word	0x080115c8
 800e92c:	080115d5 	.word	0x080115d5
 800e930:	08011603 	.word	0x08011603

0800e934 <__sflush_r>:
 800e934:	898a      	ldrh	r2, [r1, #12]
 800e936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93a:	4605      	mov	r5, r0
 800e93c:	0710      	lsls	r0, r2, #28
 800e93e:	460c      	mov	r4, r1
 800e940:	d458      	bmi.n	800e9f4 <__sflush_r+0xc0>
 800e942:	684b      	ldr	r3, [r1, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	dc05      	bgt.n	800e954 <__sflush_r+0x20>
 800e948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	dc02      	bgt.n	800e954 <__sflush_r+0x20>
 800e94e:	2000      	movs	r0, #0
 800e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e956:	2e00      	cmp	r6, #0
 800e958:	d0f9      	beq.n	800e94e <__sflush_r+0x1a>
 800e95a:	2300      	movs	r3, #0
 800e95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e960:	682f      	ldr	r7, [r5, #0]
 800e962:	602b      	str	r3, [r5, #0]
 800e964:	d032      	beq.n	800e9cc <__sflush_r+0x98>
 800e966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e968:	89a3      	ldrh	r3, [r4, #12]
 800e96a:	075a      	lsls	r2, r3, #29
 800e96c:	d505      	bpl.n	800e97a <__sflush_r+0x46>
 800e96e:	6863      	ldr	r3, [r4, #4]
 800e970:	1ac0      	subs	r0, r0, r3
 800e972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e974:	b10b      	cbz	r3, 800e97a <__sflush_r+0x46>
 800e976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e978:	1ac0      	subs	r0, r0, r3
 800e97a:	2300      	movs	r3, #0
 800e97c:	4602      	mov	r2, r0
 800e97e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e980:	6a21      	ldr	r1, [r4, #32]
 800e982:	4628      	mov	r0, r5
 800e984:	47b0      	blx	r6
 800e986:	1c43      	adds	r3, r0, #1
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	d106      	bne.n	800e99a <__sflush_r+0x66>
 800e98c:	6829      	ldr	r1, [r5, #0]
 800e98e:	291d      	cmp	r1, #29
 800e990:	d82c      	bhi.n	800e9ec <__sflush_r+0xb8>
 800e992:	4a2a      	ldr	r2, [pc, #168]	; (800ea3c <__sflush_r+0x108>)
 800e994:	40ca      	lsrs	r2, r1
 800e996:	07d6      	lsls	r6, r2, #31
 800e998:	d528      	bpl.n	800e9ec <__sflush_r+0xb8>
 800e99a:	2200      	movs	r2, #0
 800e99c:	6062      	str	r2, [r4, #4]
 800e99e:	04d9      	lsls	r1, r3, #19
 800e9a0:	6922      	ldr	r2, [r4, #16]
 800e9a2:	6022      	str	r2, [r4, #0]
 800e9a4:	d504      	bpl.n	800e9b0 <__sflush_r+0x7c>
 800e9a6:	1c42      	adds	r2, r0, #1
 800e9a8:	d101      	bne.n	800e9ae <__sflush_r+0x7a>
 800e9aa:	682b      	ldr	r3, [r5, #0]
 800e9ac:	b903      	cbnz	r3, 800e9b0 <__sflush_r+0x7c>
 800e9ae:	6560      	str	r0, [r4, #84]	; 0x54
 800e9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9b2:	602f      	str	r7, [r5, #0]
 800e9b4:	2900      	cmp	r1, #0
 800e9b6:	d0ca      	beq.n	800e94e <__sflush_r+0x1a>
 800e9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	d002      	beq.n	800e9c6 <__sflush_r+0x92>
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	f7ff f905 	bl	800dbd0 <_free_r>
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	6360      	str	r0, [r4, #52]	; 0x34
 800e9ca:	e7c1      	b.n	800e950 <__sflush_r+0x1c>
 800e9cc:	6a21      	ldr	r1, [r4, #32]
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	47b0      	blx	r6
 800e9d4:	1c41      	adds	r1, r0, #1
 800e9d6:	d1c7      	bne.n	800e968 <__sflush_r+0x34>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0c4      	beq.n	800e968 <__sflush_r+0x34>
 800e9de:	2b1d      	cmp	r3, #29
 800e9e0:	d001      	beq.n	800e9e6 <__sflush_r+0xb2>
 800e9e2:	2b16      	cmp	r3, #22
 800e9e4:	d101      	bne.n	800e9ea <__sflush_r+0xb6>
 800e9e6:	602f      	str	r7, [r5, #0]
 800e9e8:	e7b1      	b.n	800e94e <__sflush_r+0x1a>
 800e9ea:	89a3      	ldrh	r3, [r4, #12]
 800e9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f0:	81a3      	strh	r3, [r4, #12]
 800e9f2:	e7ad      	b.n	800e950 <__sflush_r+0x1c>
 800e9f4:	690f      	ldr	r7, [r1, #16]
 800e9f6:	2f00      	cmp	r7, #0
 800e9f8:	d0a9      	beq.n	800e94e <__sflush_r+0x1a>
 800e9fa:	0793      	lsls	r3, r2, #30
 800e9fc:	680e      	ldr	r6, [r1, #0]
 800e9fe:	bf08      	it	eq
 800ea00:	694b      	ldreq	r3, [r1, #20]
 800ea02:	600f      	str	r7, [r1, #0]
 800ea04:	bf18      	it	ne
 800ea06:	2300      	movne	r3, #0
 800ea08:	eba6 0807 	sub.w	r8, r6, r7
 800ea0c:	608b      	str	r3, [r1, #8]
 800ea0e:	f1b8 0f00 	cmp.w	r8, #0
 800ea12:	dd9c      	ble.n	800e94e <__sflush_r+0x1a>
 800ea14:	6a21      	ldr	r1, [r4, #32]
 800ea16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea18:	4643      	mov	r3, r8
 800ea1a:	463a      	mov	r2, r7
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	47b0      	blx	r6
 800ea20:	2800      	cmp	r0, #0
 800ea22:	dc06      	bgt.n	800ea32 <__sflush_r+0xfe>
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2a:	81a3      	strh	r3, [r4, #12]
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea30:	e78e      	b.n	800e950 <__sflush_r+0x1c>
 800ea32:	4407      	add	r7, r0
 800ea34:	eba8 0800 	sub.w	r8, r8, r0
 800ea38:	e7e9      	b.n	800ea0e <__sflush_r+0xda>
 800ea3a:	bf00      	nop
 800ea3c:	20400001 	.word	0x20400001

0800ea40 <_fflush_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	690b      	ldr	r3, [r1, #16]
 800ea44:	4605      	mov	r5, r0
 800ea46:	460c      	mov	r4, r1
 800ea48:	b913      	cbnz	r3, 800ea50 <_fflush_r+0x10>
 800ea4a:	2500      	movs	r5, #0
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}
 800ea50:	b118      	cbz	r0, 800ea5a <_fflush_r+0x1a>
 800ea52:	6983      	ldr	r3, [r0, #24]
 800ea54:	b90b      	cbnz	r3, 800ea5a <_fflush_r+0x1a>
 800ea56:	f000 f887 	bl	800eb68 <__sinit>
 800ea5a:	4b14      	ldr	r3, [pc, #80]	; (800eaac <_fflush_r+0x6c>)
 800ea5c:	429c      	cmp	r4, r3
 800ea5e:	d11b      	bne.n	800ea98 <_fflush_r+0x58>
 800ea60:	686c      	ldr	r4, [r5, #4]
 800ea62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d0ef      	beq.n	800ea4a <_fflush_r+0xa>
 800ea6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea6c:	07d0      	lsls	r0, r2, #31
 800ea6e:	d404      	bmi.n	800ea7a <_fflush_r+0x3a>
 800ea70:	0599      	lsls	r1, r3, #22
 800ea72:	d402      	bmi.n	800ea7a <_fflush_r+0x3a>
 800ea74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea76:	f000 f927 	bl	800ecc8 <__retarget_lock_acquire_recursive>
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	4621      	mov	r1, r4
 800ea7e:	f7ff ff59 	bl	800e934 <__sflush_r>
 800ea82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea84:	07da      	lsls	r2, r3, #31
 800ea86:	4605      	mov	r5, r0
 800ea88:	d4e0      	bmi.n	800ea4c <_fflush_r+0xc>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	059b      	lsls	r3, r3, #22
 800ea8e:	d4dd      	bmi.n	800ea4c <_fflush_r+0xc>
 800ea90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea92:	f000 f91a 	bl	800ecca <__retarget_lock_release_recursive>
 800ea96:	e7d9      	b.n	800ea4c <_fflush_r+0xc>
 800ea98:	4b05      	ldr	r3, [pc, #20]	; (800eab0 <_fflush_r+0x70>)
 800ea9a:	429c      	cmp	r4, r3
 800ea9c:	d101      	bne.n	800eaa2 <_fflush_r+0x62>
 800ea9e:	68ac      	ldr	r4, [r5, #8]
 800eaa0:	e7df      	b.n	800ea62 <_fflush_r+0x22>
 800eaa2:	4b04      	ldr	r3, [pc, #16]	; (800eab4 <_fflush_r+0x74>)
 800eaa4:	429c      	cmp	r4, r3
 800eaa6:	bf08      	it	eq
 800eaa8:	68ec      	ldreq	r4, [r5, #12]
 800eaaa:	e7da      	b.n	800ea62 <_fflush_r+0x22>
 800eaac:	08011624 	.word	0x08011624
 800eab0:	08011644 	.word	0x08011644
 800eab4:	08011604 	.word	0x08011604

0800eab8 <std>:
 800eab8:	2300      	movs	r3, #0
 800eaba:	b510      	push	{r4, lr}
 800eabc:	4604      	mov	r4, r0
 800eabe:	e9c0 3300 	strd	r3, r3, [r0]
 800eac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eac6:	6083      	str	r3, [r0, #8]
 800eac8:	8181      	strh	r1, [r0, #12]
 800eaca:	6643      	str	r3, [r0, #100]	; 0x64
 800eacc:	81c2      	strh	r2, [r0, #14]
 800eace:	6183      	str	r3, [r0, #24]
 800ead0:	4619      	mov	r1, r3
 800ead2:	2208      	movs	r2, #8
 800ead4:	305c      	adds	r0, #92	; 0x5c
 800ead6:	f7fb fb73 	bl	800a1c0 <memset>
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <std+0x38>)
 800eadc:	6263      	str	r3, [r4, #36]	; 0x24
 800eade:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <std+0x3c>)
 800eae0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <std+0x40>)
 800eae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eae6:	4b05      	ldr	r3, [pc, #20]	; (800eafc <std+0x44>)
 800eae8:	6224      	str	r4, [r4, #32]
 800eaea:	6323      	str	r3, [r4, #48]	; 0x30
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop
 800eaf0:	0800af69 	.word	0x0800af69
 800eaf4:	0800af8f 	.word	0x0800af8f
 800eaf8:	0800afc7 	.word	0x0800afc7
 800eafc:	0800afeb 	.word	0x0800afeb

0800eb00 <_cleanup_r>:
 800eb00:	4901      	ldr	r1, [pc, #4]	; (800eb08 <_cleanup_r+0x8>)
 800eb02:	f000 b8c1 	b.w	800ec88 <_fwalk_reent>
 800eb06:	bf00      	nop
 800eb08:	0800ea41 	.word	0x0800ea41

0800eb0c <__sfmoreglue>:
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	2268      	movs	r2, #104	; 0x68
 800eb10:	1e4d      	subs	r5, r1, #1
 800eb12:	4355      	muls	r5, r2
 800eb14:	460e      	mov	r6, r1
 800eb16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb1a:	f7ff f8c5 	bl	800dca8 <_malloc_r>
 800eb1e:	4604      	mov	r4, r0
 800eb20:	b140      	cbz	r0, 800eb34 <__sfmoreglue+0x28>
 800eb22:	2100      	movs	r1, #0
 800eb24:	e9c0 1600 	strd	r1, r6, [r0]
 800eb28:	300c      	adds	r0, #12
 800eb2a:	60a0      	str	r0, [r4, #8]
 800eb2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb30:	f7fb fb46 	bl	800a1c0 <memset>
 800eb34:	4620      	mov	r0, r4
 800eb36:	bd70      	pop	{r4, r5, r6, pc}

0800eb38 <__sfp_lock_acquire>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sfp_lock_acquire+0x8>)
 800eb3a:	f000 b8c5 	b.w	800ecc8 <__retarget_lock_acquire_recursive>
 800eb3e:	bf00      	nop
 800eb40:	20001175 	.word	0x20001175

0800eb44 <__sfp_lock_release>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__sfp_lock_release+0x8>)
 800eb46:	f000 b8c0 	b.w	800ecca <__retarget_lock_release_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	20001175 	.word	0x20001175

0800eb50 <__sinit_lock_acquire>:
 800eb50:	4801      	ldr	r0, [pc, #4]	; (800eb58 <__sinit_lock_acquire+0x8>)
 800eb52:	f000 b8b9 	b.w	800ecc8 <__retarget_lock_acquire_recursive>
 800eb56:	bf00      	nop
 800eb58:	20001176 	.word	0x20001176

0800eb5c <__sinit_lock_release>:
 800eb5c:	4801      	ldr	r0, [pc, #4]	; (800eb64 <__sinit_lock_release+0x8>)
 800eb5e:	f000 b8b4 	b.w	800ecca <__retarget_lock_release_recursive>
 800eb62:	bf00      	nop
 800eb64:	20001176 	.word	0x20001176

0800eb68 <__sinit>:
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	f7ff fff0 	bl	800eb50 <__sinit_lock_acquire>
 800eb70:	69a3      	ldr	r3, [r4, #24]
 800eb72:	b11b      	cbz	r3, 800eb7c <__sinit+0x14>
 800eb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb78:	f7ff bff0 	b.w	800eb5c <__sinit_lock_release>
 800eb7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb80:	6523      	str	r3, [r4, #80]	; 0x50
 800eb82:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <__sinit+0x68>)
 800eb84:	4a13      	ldr	r2, [pc, #76]	; (800ebd4 <__sinit+0x6c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb8a:	42a3      	cmp	r3, r4
 800eb8c:	bf04      	itt	eq
 800eb8e:	2301      	moveq	r3, #1
 800eb90:	61a3      	streq	r3, [r4, #24]
 800eb92:	4620      	mov	r0, r4
 800eb94:	f000 f820 	bl	800ebd8 <__sfp>
 800eb98:	6060      	str	r0, [r4, #4]
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f000 f81c 	bl	800ebd8 <__sfp>
 800eba0:	60a0      	str	r0, [r4, #8]
 800eba2:	4620      	mov	r0, r4
 800eba4:	f000 f818 	bl	800ebd8 <__sfp>
 800eba8:	2200      	movs	r2, #0
 800ebaa:	60e0      	str	r0, [r4, #12]
 800ebac:	2104      	movs	r1, #4
 800ebae:	6860      	ldr	r0, [r4, #4]
 800ebb0:	f7ff ff82 	bl	800eab8 <std>
 800ebb4:	68a0      	ldr	r0, [r4, #8]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	2109      	movs	r1, #9
 800ebba:	f7ff ff7d 	bl	800eab8 <std>
 800ebbe:	68e0      	ldr	r0, [r4, #12]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	2112      	movs	r1, #18
 800ebc4:	f7ff ff78 	bl	800eab8 <std>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	61a3      	str	r3, [r4, #24]
 800ebcc:	e7d2      	b.n	800eb74 <__sinit+0xc>
 800ebce:	bf00      	nop
 800ebd0:	080111a8 	.word	0x080111a8
 800ebd4:	0800eb01 	.word	0x0800eb01

0800ebd8 <__sfp>:
 800ebd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebda:	4607      	mov	r7, r0
 800ebdc:	f7ff ffac 	bl	800eb38 <__sfp_lock_acquire>
 800ebe0:	4b1e      	ldr	r3, [pc, #120]	; (800ec5c <__sfp+0x84>)
 800ebe2:	681e      	ldr	r6, [r3, #0]
 800ebe4:	69b3      	ldr	r3, [r6, #24]
 800ebe6:	b913      	cbnz	r3, 800ebee <__sfp+0x16>
 800ebe8:	4630      	mov	r0, r6
 800ebea:	f7ff ffbd 	bl	800eb68 <__sinit>
 800ebee:	3648      	adds	r6, #72	; 0x48
 800ebf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	d503      	bpl.n	800ec00 <__sfp+0x28>
 800ebf8:	6833      	ldr	r3, [r6, #0]
 800ebfa:	b30b      	cbz	r3, 800ec40 <__sfp+0x68>
 800ebfc:	6836      	ldr	r6, [r6, #0]
 800ebfe:	e7f7      	b.n	800ebf0 <__sfp+0x18>
 800ec00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec04:	b9d5      	cbnz	r5, 800ec3c <__sfp+0x64>
 800ec06:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <__sfp+0x88>)
 800ec08:	60e3      	str	r3, [r4, #12]
 800ec0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ec10:	f000 f859 	bl	800ecc6 <__retarget_lock_init_recursive>
 800ec14:	f7ff ff96 	bl	800eb44 <__sfp_lock_release>
 800ec18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec20:	6025      	str	r5, [r4, #0]
 800ec22:	61a5      	str	r5, [r4, #24]
 800ec24:	2208      	movs	r2, #8
 800ec26:	4629      	mov	r1, r5
 800ec28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec2c:	f7fb fac8 	bl	800a1c0 <memset>
 800ec30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec38:	4620      	mov	r0, r4
 800ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec3c:	3468      	adds	r4, #104	; 0x68
 800ec3e:	e7d9      	b.n	800ebf4 <__sfp+0x1c>
 800ec40:	2104      	movs	r1, #4
 800ec42:	4638      	mov	r0, r7
 800ec44:	f7ff ff62 	bl	800eb0c <__sfmoreglue>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	6030      	str	r0, [r6, #0]
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d1d5      	bne.n	800ebfc <__sfp+0x24>
 800ec50:	f7ff ff78 	bl	800eb44 <__sfp_lock_release>
 800ec54:	230c      	movs	r3, #12
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	e7ee      	b.n	800ec38 <__sfp+0x60>
 800ec5a:	bf00      	nop
 800ec5c:	080111a8 	.word	0x080111a8
 800ec60:	ffff0001 	.word	0xffff0001

0800ec64 <fiprintf>:
 800ec64:	b40e      	push	{r1, r2, r3}
 800ec66:	b503      	push	{r0, r1, lr}
 800ec68:	4601      	mov	r1, r0
 800ec6a:	ab03      	add	r3, sp, #12
 800ec6c:	4805      	ldr	r0, [pc, #20]	; (800ec84 <fiprintf+0x20>)
 800ec6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec72:	6800      	ldr	r0, [r0, #0]
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	f000 f8a7 	bl	800edc8 <_vfiprintf_r>
 800ec7a:	b002      	add	sp, #8
 800ec7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec80:	b003      	add	sp, #12
 800ec82:	4770      	bx	lr
 800ec84:	20000014 	.word	0x20000014

0800ec88 <_fwalk_reent>:
 800ec88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	4688      	mov	r8, r1
 800ec90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec94:	2700      	movs	r7, #0
 800ec96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ec9e:	d505      	bpl.n	800ecac <_fwalk_reent+0x24>
 800eca0:	6824      	ldr	r4, [r4, #0]
 800eca2:	2c00      	cmp	r4, #0
 800eca4:	d1f7      	bne.n	800ec96 <_fwalk_reent+0xe>
 800eca6:	4638      	mov	r0, r7
 800eca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecac:	89ab      	ldrh	r3, [r5, #12]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d907      	bls.n	800ecc2 <_fwalk_reent+0x3a>
 800ecb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	d003      	beq.n	800ecc2 <_fwalk_reent+0x3a>
 800ecba:	4629      	mov	r1, r5
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	47c0      	blx	r8
 800ecc0:	4307      	orrs	r7, r0
 800ecc2:	3568      	adds	r5, #104	; 0x68
 800ecc4:	e7e9      	b.n	800ec9a <_fwalk_reent+0x12>

0800ecc6 <__retarget_lock_init_recursive>:
 800ecc6:	4770      	bx	lr

0800ecc8 <__retarget_lock_acquire_recursive>:
 800ecc8:	4770      	bx	lr

0800ecca <__retarget_lock_release_recursive>:
 800ecca:	4770      	bx	lr

0800eccc <memmove>:
 800eccc:	4288      	cmp	r0, r1
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	eb01 0402 	add.w	r4, r1, r2
 800ecd4:	d902      	bls.n	800ecdc <memmove+0x10>
 800ecd6:	4284      	cmp	r4, r0
 800ecd8:	4623      	mov	r3, r4
 800ecda:	d807      	bhi.n	800ecec <memmove+0x20>
 800ecdc:	1e43      	subs	r3, r0, #1
 800ecde:	42a1      	cmp	r1, r4
 800ece0:	d008      	beq.n	800ecf4 <memmove+0x28>
 800ece2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ece6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecea:	e7f8      	b.n	800ecde <memmove+0x12>
 800ecec:	4402      	add	r2, r0
 800ecee:	4601      	mov	r1, r0
 800ecf0:	428a      	cmp	r2, r1
 800ecf2:	d100      	bne.n	800ecf6 <memmove+0x2a>
 800ecf4:	bd10      	pop	{r4, pc}
 800ecf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecfe:	e7f7      	b.n	800ecf0 <memmove+0x24>

0800ed00 <__malloc_lock>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__malloc_lock+0x8>)
 800ed02:	f7ff bfe1 	b.w	800ecc8 <__retarget_lock_acquire_recursive>
 800ed06:	bf00      	nop
 800ed08:	20001174 	.word	0x20001174

0800ed0c <__malloc_unlock>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__malloc_unlock+0x8>)
 800ed0e:	f7ff bfdc 	b.w	800ecca <__retarget_lock_release_recursive>
 800ed12:	bf00      	nop
 800ed14:	20001174 	.word	0x20001174

0800ed18 <_realloc_r>:
 800ed18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	4614      	mov	r4, r2
 800ed20:	460e      	mov	r6, r1
 800ed22:	b921      	cbnz	r1, 800ed2e <_realloc_r+0x16>
 800ed24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed28:	4611      	mov	r1, r2
 800ed2a:	f7fe bfbd 	b.w	800dca8 <_malloc_r>
 800ed2e:	b92a      	cbnz	r2, 800ed3c <_realloc_r+0x24>
 800ed30:	f7fe ff4e 	bl	800dbd0 <_free_r>
 800ed34:	4625      	mov	r5, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed3c:	f000 faa0 	bl	800f280 <_malloc_usable_size_r>
 800ed40:	4284      	cmp	r4, r0
 800ed42:	4607      	mov	r7, r0
 800ed44:	d802      	bhi.n	800ed4c <_realloc_r+0x34>
 800ed46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed4a:	d812      	bhi.n	800ed72 <_realloc_r+0x5a>
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	4640      	mov	r0, r8
 800ed50:	f7fe ffaa 	bl	800dca8 <_malloc_r>
 800ed54:	4605      	mov	r5, r0
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d0ed      	beq.n	800ed36 <_realloc_r+0x1e>
 800ed5a:	42bc      	cmp	r4, r7
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4631      	mov	r1, r6
 800ed60:	bf28      	it	cs
 800ed62:	463a      	movcs	r2, r7
 800ed64:	f7fe fa4e 	bl	800d204 <memcpy>
 800ed68:	4631      	mov	r1, r6
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	f7fe ff30 	bl	800dbd0 <_free_r>
 800ed70:	e7e1      	b.n	800ed36 <_realloc_r+0x1e>
 800ed72:	4635      	mov	r5, r6
 800ed74:	e7df      	b.n	800ed36 <_realloc_r+0x1e>

0800ed76 <__sfputc_r>:
 800ed76:	6893      	ldr	r3, [r2, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	b410      	push	{r4}
 800ed7e:	6093      	str	r3, [r2, #8]
 800ed80:	da08      	bge.n	800ed94 <__sfputc_r+0x1e>
 800ed82:	6994      	ldr	r4, [r2, #24]
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	db01      	blt.n	800ed8c <__sfputc_r+0x16>
 800ed88:	290a      	cmp	r1, #10
 800ed8a:	d103      	bne.n	800ed94 <__sfputc_r+0x1e>
 800ed8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed90:	f000 b94a 	b.w	800f028 <__swbuf_r>
 800ed94:	6813      	ldr	r3, [r2, #0]
 800ed96:	1c58      	adds	r0, r3, #1
 800ed98:	6010      	str	r0, [r2, #0]
 800ed9a:	7019      	strb	r1, [r3, #0]
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <__sfputs_r>:
 800eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	4614      	mov	r4, r2
 800edac:	18d5      	adds	r5, r2, r3
 800edae:	42ac      	cmp	r4, r5
 800edb0:	d101      	bne.n	800edb6 <__sfputs_r+0x12>
 800edb2:	2000      	movs	r0, #0
 800edb4:	e007      	b.n	800edc6 <__sfputs_r+0x22>
 800edb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edba:	463a      	mov	r2, r7
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff ffda 	bl	800ed76 <__sfputc_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	d1f3      	bne.n	800edae <__sfputs_r+0xa>
 800edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edc8 <_vfiprintf_r>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	460d      	mov	r5, r1
 800edce:	b09d      	sub	sp, #116	; 0x74
 800edd0:	4614      	mov	r4, r2
 800edd2:	4698      	mov	r8, r3
 800edd4:	4606      	mov	r6, r0
 800edd6:	b118      	cbz	r0, 800ede0 <_vfiprintf_r+0x18>
 800edd8:	6983      	ldr	r3, [r0, #24]
 800edda:	b90b      	cbnz	r3, 800ede0 <_vfiprintf_r+0x18>
 800eddc:	f7ff fec4 	bl	800eb68 <__sinit>
 800ede0:	4b89      	ldr	r3, [pc, #548]	; (800f008 <_vfiprintf_r+0x240>)
 800ede2:	429d      	cmp	r5, r3
 800ede4:	d11b      	bne.n	800ee1e <_vfiprintf_r+0x56>
 800ede6:	6875      	ldr	r5, [r6, #4]
 800ede8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edea:	07d9      	lsls	r1, r3, #31
 800edec:	d405      	bmi.n	800edfa <_vfiprintf_r+0x32>
 800edee:	89ab      	ldrh	r3, [r5, #12]
 800edf0:	059a      	lsls	r2, r3, #22
 800edf2:	d402      	bmi.n	800edfa <_vfiprintf_r+0x32>
 800edf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edf6:	f7ff ff67 	bl	800ecc8 <__retarget_lock_acquire_recursive>
 800edfa:	89ab      	ldrh	r3, [r5, #12]
 800edfc:	071b      	lsls	r3, r3, #28
 800edfe:	d501      	bpl.n	800ee04 <_vfiprintf_r+0x3c>
 800ee00:	692b      	ldr	r3, [r5, #16]
 800ee02:	b9eb      	cbnz	r3, 800ee40 <_vfiprintf_r+0x78>
 800ee04:	4629      	mov	r1, r5
 800ee06:	4630      	mov	r0, r6
 800ee08:	f000 f960 	bl	800f0cc <__swsetup_r>
 800ee0c:	b1c0      	cbz	r0, 800ee40 <_vfiprintf_r+0x78>
 800ee0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee10:	07dc      	lsls	r4, r3, #31
 800ee12:	d50e      	bpl.n	800ee32 <_vfiprintf_r+0x6a>
 800ee14:	f04f 30ff 	mov.w	r0, #4294967295
 800ee18:	b01d      	add	sp, #116	; 0x74
 800ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1e:	4b7b      	ldr	r3, [pc, #492]	; (800f00c <_vfiprintf_r+0x244>)
 800ee20:	429d      	cmp	r5, r3
 800ee22:	d101      	bne.n	800ee28 <_vfiprintf_r+0x60>
 800ee24:	68b5      	ldr	r5, [r6, #8]
 800ee26:	e7df      	b.n	800ede8 <_vfiprintf_r+0x20>
 800ee28:	4b79      	ldr	r3, [pc, #484]	; (800f010 <_vfiprintf_r+0x248>)
 800ee2a:	429d      	cmp	r5, r3
 800ee2c:	bf08      	it	eq
 800ee2e:	68f5      	ldreq	r5, [r6, #12]
 800ee30:	e7da      	b.n	800ede8 <_vfiprintf_r+0x20>
 800ee32:	89ab      	ldrh	r3, [r5, #12]
 800ee34:	0598      	lsls	r0, r3, #22
 800ee36:	d4ed      	bmi.n	800ee14 <_vfiprintf_r+0x4c>
 800ee38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee3a:	f7ff ff46 	bl	800ecca <__retarget_lock_release_recursive>
 800ee3e:	e7e9      	b.n	800ee14 <_vfiprintf_r+0x4c>
 800ee40:	2300      	movs	r3, #0
 800ee42:	9309      	str	r3, [sp, #36]	; 0x24
 800ee44:	2320      	movs	r3, #32
 800ee46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee4e:	2330      	movs	r3, #48	; 0x30
 800ee50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f014 <_vfiprintf_r+0x24c>
 800ee54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee58:	f04f 0901 	mov.w	r9, #1
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	469a      	mov	sl, r3
 800ee60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee64:	b10a      	cbz	r2, 800ee6a <_vfiprintf_r+0xa2>
 800ee66:	2a25      	cmp	r2, #37	; 0x25
 800ee68:	d1f9      	bne.n	800ee5e <_vfiprintf_r+0x96>
 800ee6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee6e:	d00b      	beq.n	800ee88 <_vfiprintf_r+0xc0>
 800ee70:	465b      	mov	r3, fp
 800ee72:	4622      	mov	r2, r4
 800ee74:	4629      	mov	r1, r5
 800ee76:	4630      	mov	r0, r6
 800ee78:	f7ff ff94 	bl	800eda4 <__sfputs_r>
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	f000 80aa 	beq.w	800efd6 <_vfiprintf_r+0x20e>
 800ee82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee84:	445a      	add	r2, fp
 800ee86:	9209      	str	r2, [sp, #36]	; 0x24
 800ee88:	f89a 3000 	ldrb.w	r3, [sl]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 80a2 	beq.w	800efd6 <_vfiprintf_r+0x20e>
 800ee92:	2300      	movs	r3, #0
 800ee94:	f04f 32ff 	mov.w	r2, #4294967295
 800ee98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee9c:	f10a 0a01 	add.w	sl, sl, #1
 800eea0:	9304      	str	r3, [sp, #16]
 800eea2:	9307      	str	r3, [sp, #28]
 800eea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eea8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeaa:	4654      	mov	r4, sl
 800eeac:	2205      	movs	r2, #5
 800eeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb2:	4858      	ldr	r0, [pc, #352]	; (800f014 <_vfiprintf_r+0x24c>)
 800eeb4:	f7f1 f9b4 	bl	8000220 <memchr>
 800eeb8:	9a04      	ldr	r2, [sp, #16]
 800eeba:	b9d8      	cbnz	r0, 800eef4 <_vfiprintf_r+0x12c>
 800eebc:	06d1      	lsls	r1, r2, #27
 800eebe:	bf44      	itt	mi
 800eec0:	2320      	movmi	r3, #32
 800eec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec6:	0713      	lsls	r3, r2, #28
 800eec8:	bf44      	itt	mi
 800eeca:	232b      	movmi	r3, #43	; 0x2b
 800eecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eed0:	f89a 3000 	ldrb.w	r3, [sl]
 800eed4:	2b2a      	cmp	r3, #42	; 0x2a
 800eed6:	d015      	beq.n	800ef04 <_vfiprintf_r+0x13c>
 800eed8:	9a07      	ldr	r2, [sp, #28]
 800eeda:	4654      	mov	r4, sl
 800eedc:	2000      	movs	r0, #0
 800eede:	f04f 0c0a 	mov.w	ip, #10
 800eee2:	4621      	mov	r1, r4
 800eee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eee8:	3b30      	subs	r3, #48	; 0x30
 800eeea:	2b09      	cmp	r3, #9
 800eeec:	d94e      	bls.n	800ef8c <_vfiprintf_r+0x1c4>
 800eeee:	b1b0      	cbz	r0, 800ef1e <_vfiprintf_r+0x156>
 800eef0:	9207      	str	r2, [sp, #28]
 800eef2:	e014      	b.n	800ef1e <_vfiprintf_r+0x156>
 800eef4:	eba0 0308 	sub.w	r3, r0, r8
 800eef8:	fa09 f303 	lsl.w	r3, r9, r3
 800eefc:	4313      	orrs	r3, r2
 800eefe:	9304      	str	r3, [sp, #16]
 800ef00:	46a2      	mov	sl, r4
 800ef02:	e7d2      	b.n	800eeaa <_vfiprintf_r+0xe2>
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	1d19      	adds	r1, r3, #4
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	9103      	str	r1, [sp, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	bfbb      	ittet	lt
 800ef10:	425b      	neglt	r3, r3
 800ef12:	f042 0202 	orrlt.w	r2, r2, #2
 800ef16:	9307      	strge	r3, [sp, #28]
 800ef18:	9307      	strlt	r3, [sp, #28]
 800ef1a:	bfb8      	it	lt
 800ef1c:	9204      	strlt	r2, [sp, #16]
 800ef1e:	7823      	ldrb	r3, [r4, #0]
 800ef20:	2b2e      	cmp	r3, #46	; 0x2e
 800ef22:	d10c      	bne.n	800ef3e <_vfiprintf_r+0x176>
 800ef24:	7863      	ldrb	r3, [r4, #1]
 800ef26:	2b2a      	cmp	r3, #42	; 0x2a
 800ef28:	d135      	bne.n	800ef96 <_vfiprintf_r+0x1ce>
 800ef2a:	9b03      	ldr	r3, [sp, #12]
 800ef2c:	1d1a      	adds	r2, r3, #4
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	9203      	str	r2, [sp, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	bfb8      	it	lt
 800ef36:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef3a:	3402      	adds	r4, #2
 800ef3c:	9305      	str	r3, [sp, #20]
 800ef3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f024 <_vfiprintf_r+0x25c>
 800ef42:	7821      	ldrb	r1, [r4, #0]
 800ef44:	2203      	movs	r2, #3
 800ef46:	4650      	mov	r0, sl
 800ef48:	f7f1 f96a 	bl	8000220 <memchr>
 800ef4c:	b140      	cbz	r0, 800ef60 <_vfiprintf_r+0x198>
 800ef4e:	2340      	movs	r3, #64	; 0x40
 800ef50:	eba0 000a 	sub.w	r0, r0, sl
 800ef54:	fa03 f000 	lsl.w	r0, r3, r0
 800ef58:	9b04      	ldr	r3, [sp, #16]
 800ef5a:	4303      	orrs	r3, r0
 800ef5c:	3401      	adds	r4, #1
 800ef5e:	9304      	str	r3, [sp, #16]
 800ef60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef64:	482c      	ldr	r0, [pc, #176]	; (800f018 <_vfiprintf_r+0x250>)
 800ef66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef6a:	2206      	movs	r2, #6
 800ef6c:	f7f1 f958 	bl	8000220 <memchr>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d03f      	beq.n	800eff4 <_vfiprintf_r+0x22c>
 800ef74:	4b29      	ldr	r3, [pc, #164]	; (800f01c <_vfiprintf_r+0x254>)
 800ef76:	bb1b      	cbnz	r3, 800efc0 <_vfiprintf_r+0x1f8>
 800ef78:	9b03      	ldr	r3, [sp, #12]
 800ef7a:	3307      	adds	r3, #7
 800ef7c:	f023 0307 	bic.w	r3, r3, #7
 800ef80:	3308      	adds	r3, #8
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef86:	443b      	add	r3, r7
 800ef88:	9309      	str	r3, [sp, #36]	; 0x24
 800ef8a:	e767      	b.n	800ee5c <_vfiprintf_r+0x94>
 800ef8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef90:	460c      	mov	r4, r1
 800ef92:	2001      	movs	r0, #1
 800ef94:	e7a5      	b.n	800eee2 <_vfiprintf_r+0x11a>
 800ef96:	2300      	movs	r3, #0
 800ef98:	3401      	adds	r4, #1
 800ef9a:	9305      	str	r3, [sp, #20]
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	f04f 0c0a 	mov.w	ip, #10
 800efa2:	4620      	mov	r0, r4
 800efa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa8:	3a30      	subs	r2, #48	; 0x30
 800efaa:	2a09      	cmp	r2, #9
 800efac:	d903      	bls.n	800efb6 <_vfiprintf_r+0x1ee>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0c5      	beq.n	800ef3e <_vfiprintf_r+0x176>
 800efb2:	9105      	str	r1, [sp, #20]
 800efb4:	e7c3      	b.n	800ef3e <_vfiprintf_r+0x176>
 800efb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800efba:	4604      	mov	r4, r0
 800efbc:	2301      	movs	r3, #1
 800efbe:	e7f0      	b.n	800efa2 <_vfiprintf_r+0x1da>
 800efc0:	ab03      	add	r3, sp, #12
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	462a      	mov	r2, r5
 800efc6:	4b16      	ldr	r3, [pc, #88]	; (800f020 <_vfiprintf_r+0x258>)
 800efc8:	a904      	add	r1, sp, #16
 800efca:	4630      	mov	r0, r6
 800efcc:	f7fb f9a0 	bl	800a310 <_printf_float>
 800efd0:	4607      	mov	r7, r0
 800efd2:	1c78      	adds	r0, r7, #1
 800efd4:	d1d6      	bne.n	800ef84 <_vfiprintf_r+0x1bc>
 800efd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efd8:	07d9      	lsls	r1, r3, #31
 800efda:	d405      	bmi.n	800efe8 <_vfiprintf_r+0x220>
 800efdc:	89ab      	ldrh	r3, [r5, #12]
 800efde:	059a      	lsls	r2, r3, #22
 800efe0:	d402      	bmi.n	800efe8 <_vfiprintf_r+0x220>
 800efe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efe4:	f7ff fe71 	bl	800ecca <__retarget_lock_release_recursive>
 800efe8:	89ab      	ldrh	r3, [r5, #12]
 800efea:	065b      	lsls	r3, r3, #25
 800efec:	f53f af12 	bmi.w	800ee14 <_vfiprintf_r+0x4c>
 800eff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eff2:	e711      	b.n	800ee18 <_vfiprintf_r+0x50>
 800eff4:	ab03      	add	r3, sp, #12
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	462a      	mov	r2, r5
 800effa:	4b09      	ldr	r3, [pc, #36]	; (800f020 <_vfiprintf_r+0x258>)
 800effc:	a904      	add	r1, sp, #16
 800effe:	4630      	mov	r0, r6
 800f000:	f7fb fc2a 	bl	800a858 <_printf_i>
 800f004:	e7e4      	b.n	800efd0 <_vfiprintf_r+0x208>
 800f006:	bf00      	nop
 800f008:	08011624 	.word	0x08011624
 800f00c:	08011644 	.word	0x08011644
 800f010:	08011604 	.word	0x08011604
 800f014:	0801159c 	.word	0x0801159c
 800f018:	080115a6 	.word	0x080115a6
 800f01c:	0800a311 	.word	0x0800a311
 800f020:	0800eda5 	.word	0x0800eda5
 800f024:	080115a2 	.word	0x080115a2

0800f028 <__swbuf_r>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	460e      	mov	r6, r1
 800f02c:	4614      	mov	r4, r2
 800f02e:	4605      	mov	r5, r0
 800f030:	b118      	cbz	r0, 800f03a <__swbuf_r+0x12>
 800f032:	6983      	ldr	r3, [r0, #24]
 800f034:	b90b      	cbnz	r3, 800f03a <__swbuf_r+0x12>
 800f036:	f7ff fd97 	bl	800eb68 <__sinit>
 800f03a:	4b21      	ldr	r3, [pc, #132]	; (800f0c0 <__swbuf_r+0x98>)
 800f03c:	429c      	cmp	r4, r3
 800f03e:	d12b      	bne.n	800f098 <__swbuf_r+0x70>
 800f040:	686c      	ldr	r4, [r5, #4]
 800f042:	69a3      	ldr	r3, [r4, #24]
 800f044:	60a3      	str	r3, [r4, #8]
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	071a      	lsls	r2, r3, #28
 800f04a:	d52f      	bpl.n	800f0ac <__swbuf_r+0x84>
 800f04c:	6923      	ldr	r3, [r4, #16]
 800f04e:	b36b      	cbz	r3, 800f0ac <__swbuf_r+0x84>
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	6820      	ldr	r0, [r4, #0]
 800f054:	1ac0      	subs	r0, r0, r3
 800f056:	6963      	ldr	r3, [r4, #20]
 800f058:	b2f6      	uxtb	r6, r6
 800f05a:	4283      	cmp	r3, r0
 800f05c:	4637      	mov	r7, r6
 800f05e:	dc04      	bgt.n	800f06a <__swbuf_r+0x42>
 800f060:	4621      	mov	r1, r4
 800f062:	4628      	mov	r0, r5
 800f064:	f7ff fcec 	bl	800ea40 <_fflush_r>
 800f068:	bb30      	cbnz	r0, 800f0b8 <__swbuf_r+0x90>
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	60a3      	str	r3, [r4, #8]
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	6022      	str	r2, [r4, #0]
 800f076:	701e      	strb	r6, [r3, #0]
 800f078:	6963      	ldr	r3, [r4, #20]
 800f07a:	3001      	adds	r0, #1
 800f07c:	4283      	cmp	r3, r0
 800f07e:	d004      	beq.n	800f08a <__swbuf_r+0x62>
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	07db      	lsls	r3, r3, #31
 800f084:	d506      	bpl.n	800f094 <__swbuf_r+0x6c>
 800f086:	2e0a      	cmp	r6, #10
 800f088:	d104      	bne.n	800f094 <__swbuf_r+0x6c>
 800f08a:	4621      	mov	r1, r4
 800f08c:	4628      	mov	r0, r5
 800f08e:	f7ff fcd7 	bl	800ea40 <_fflush_r>
 800f092:	b988      	cbnz	r0, 800f0b8 <__swbuf_r+0x90>
 800f094:	4638      	mov	r0, r7
 800f096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f098:	4b0a      	ldr	r3, [pc, #40]	; (800f0c4 <__swbuf_r+0x9c>)
 800f09a:	429c      	cmp	r4, r3
 800f09c:	d101      	bne.n	800f0a2 <__swbuf_r+0x7a>
 800f09e:	68ac      	ldr	r4, [r5, #8]
 800f0a0:	e7cf      	b.n	800f042 <__swbuf_r+0x1a>
 800f0a2:	4b09      	ldr	r3, [pc, #36]	; (800f0c8 <__swbuf_r+0xa0>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	bf08      	it	eq
 800f0a8:	68ec      	ldreq	r4, [r5, #12]
 800f0aa:	e7ca      	b.n	800f042 <__swbuf_r+0x1a>
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f000 f80c 	bl	800f0cc <__swsetup_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d0cb      	beq.n	800f050 <__swbuf_r+0x28>
 800f0b8:	f04f 37ff 	mov.w	r7, #4294967295
 800f0bc:	e7ea      	b.n	800f094 <__swbuf_r+0x6c>
 800f0be:	bf00      	nop
 800f0c0:	08011624 	.word	0x08011624
 800f0c4:	08011644 	.word	0x08011644
 800f0c8:	08011604 	.word	0x08011604

0800f0cc <__swsetup_r>:
 800f0cc:	4b32      	ldr	r3, [pc, #200]	; (800f198 <__swsetup_r+0xcc>)
 800f0ce:	b570      	push	{r4, r5, r6, lr}
 800f0d0:	681d      	ldr	r5, [r3, #0]
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	b125      	cbz	r5, 800f0e2 <__swsetup_r+0x16>
 800f0d8:	69ab      	ldr	r3, [r5, #24]
 800f0da:	b913      	cbnz	r3, 800f0e2 <__swsetup_r+0x16>
 800f0dc:	4628      	mov	r0, r5
 800f0de:	f7ff fd43 	bl	800eb68 <__sinit>
 800f0e2:	4b2e      	ldr	r3, [pc, #184]	; (800f19c <__swsetup_r+0xd0>)
 800f0e4:	429c      	cmp	r4, r3
 800f0e6:	d10f      	bne.n	800f108 <__swsetup_r+0x3c>
 800f0e8:	686c      	ldr	r4, [r5, #4]
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0f0:	0719      	lsls	r1, r3, #28
 800f0f2:	d42c      	bmi.n	800f14e <__swsetup_r+0x82>
 800f0f4:	06dd      	lsls	r5, r3, #27
 800f0f6:	d411      	bmi.n	800f11c <__swsetup_r+0x50>
 800f0f8:	2309      	movs	r3, #9
 800f0fa:	6033      	str	r3, [r6, #0]
 800f0fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f100:	81a3      	strh	r3, [r4, #12]
 800f102:	f04f 30ff 	mov.w	r0, #4294967295
 800f106:	e03e      	b.n	800f186 <__swsetup_r+0xba>
 800f108:	4b25      	ldr	r3, [pc, #148]	; (800f1a0 <__swsetup_r+0xd4>)
 800f10a:	429c      	cmp	r4, r3
 800f10c:	d101      	bne.n	800f112 <__swsetup_r+0x46>
 800f10e:	68ac      	ldr	r4, [r5, #8]
 800f110:	e7eb      	b.n	800f0ea <__swsetup_r+0x1e>
 800f112:	4b24      	ldr	r3, [pc, #144]	; (800f1a4 <__swsetup_r+0xd8>)
 800f114:	429c      	cmp	r4, r3
 800f116:	bf08      	it	eq
 800f118:	68ec      	ldreq	r4, [r5, #12]
 800f11a:	e7e6      	b.n	800f0ea <__swsetup_r+0x1e>
 800f11c:	0758      	lsls	r0, r3, #29
 800f11e:	d512      	bpl.n	800f146 <__swsetup_r+0x7a>
 800f120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f122:	b141      	cbz	r1, 800f136 <__swsetup_r+0x6a>
 800f124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f128:	4299      	cmp	r1, r3
 800f12a:	d002      	beq.n	800f132 <__swsetup_r+0x66>
 800f12c:	4630      	mov	r0, r6
 800f12e:	f7fe fd4f 	bl	800dbd0 <_free_r>
 800f132:	2300      	movs	r3, #0
 800f134:	6363      	str	r3, [r4, #52]	; 0x34
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f13c:	81a3      	strh	r3, [r4, #12]
 800f13e:	2300      	movs	r3, #0
 800f140:	6063      	str	r3, [r4, #4]
 800f142:	6923      	ldr	r3, [r4, #16]
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	89a3      	ldrh	r3, [r4, #12]
 800f148:	f043 0308 	orr.w	r3, r3, #8
 800f14c:	81a3      	strh	r3, [r4, #12]
 800f14e:	6923      	ldr	r3, [r4, #16]
 800f150:	b94b      	cbnz	r3, 800f166 <__swsetup_r+0x9a>
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f15c:	d003      	beq.n	800f166 <__swsetup_r+0x9a>
 800f15e:	4621      	mov	r1, r4
 800f160:	4630      	mov	r0, r6
 800f162:	f000 f84d 	bl	800f200 <__smakebuf_r>
 800f166:	89a0      	ldrh	r0, [r4, #12]
 800f168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f16c:	f010 0301 	ands.w	r3, r0, #1
 800f170:	d00a      	beq.n	800f188 <__swsetup_r+0xbc>
 800f172:	2300      	movs	r3, #0
 800f174:	60a3      	str	r3, [r4, #8]
 800f176:	6963      	ldr	r3, [r4, #20]
 800f178:	425b      	negs	r3, r3
 800f17a:	61a3      	str	r3, [r4, #24]
 800f17c:	6923      	ldr	r3, [r4, #16]
 800f17e:	b943      	cbnz	r3, 800f192 <__swsetup_r+0xc6>
 800f180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f184:	d1ba      	bne.n	800f0fc <__swsetup_r+0x30>
 800f186:	bd70      	pop	{r4, r5, r6, pc}
 800f188:	0781      	lsls	r1, r0, #30
 800f18a:	bf58      	it	pl
 800f18c:	6963      	ldrpl	r3, [r4, #20]
 800f18e:	60a3      	str	r3, [r4, #8]
 800f190:	e7f4      	b.n	800f17c <__swsetup_r+0xb0>
 800f192:	2000      	movs	r0, #0
 800f194:	e7f7      	b.n	800f186 <__swsetup_r+0xba>
 800f196:	bf00      	nop
 800f198:	20000014 	.word	0x20000014
 800f19c:	08011624 	.word	0x08011624
 800f1a0:	08011644 	.word	0x08011644
 800f1a4:	08011604 	.word	0x08011604

0800f1a8 <abort>:
 800f1a8:	b508      	push	{r3, lr}
 800f1aa:	2006      	movs	r0, #6
 800f1ac:	f000 f898 	bl	800f2e0 <raise>
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	f7f5 fe73 	bl	8004e9c <_exit>

0800f1b6 <__swhatbuf_r>:
 800f1b6:	b570      	push	{r4, r5, r6, lr}
 800f1b8:	460e      	mov	r6, r1
 800f1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	b096      	sub	sp, #88	; 0x58
 800f1c2:	4614      	mov	r4, r2
 800f1c4:	461d      	mov	r5, r3
 800f1c6:	da08      	bge.n	800f1da <__swhatbuf_r+0x24>
 800f1c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	602a      	str	r2, [r5, #0]
 800f1d0:	061a      	lsls	r2, r3, #24
 800f1d2:	d410      	bmi.n	800f1f6 <__swhatbuf_r+0x40>
 800f1d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1d8:	e00e      	b.n	800f1f8 <__swhatbuf_r+0x42>
 800f1da:	466a      	mov	r2, sp
 800f1dc:	f000 f89c 	bl	800f318 <_fstat_r>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	dbf1      	blt.n	800f1c8 <__swhatbuf_r+0x12>
 800f1e4:	9a01      	ldr	r2, [sp, #4]
 800f1e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1ee:	425a      	negs	r2, r3
 800f1f0:	415a      	adcs	r2, r3
 800f1f2:	602a      	str	r2, [r5, #0]
 800f1f4:	e7ee      	b.n	800f1d4 <__swhatbuf_r+0x1e>
 800f1f6:	2340      	movs	r3, #64	; 0x40
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	b016      	add	sp, #88	; 0x58
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}

0800f200 <__smakebuf_r>:
 800f200:	898b      	ldrh	r3, [r1, #12]
 800f202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f204:	079d      	lsls	r5, r3, #30
 800f206:	4606      	mov	r6, r0
 800f208:	460c      	mov	r4, r1
 800f20a:	d507      	bpl.n	800f21c <__smakebuf_r+0x1c>
 800f20c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	6123      	str	r3, [r4, #16]
 800f214:	2301      	movs	r3, #1
 800f216:	6163      	str	r3, [r4, #20]
 800f218:	b002      	add	sp, #8
 800f21a:	bd70      	pop	{r4, r5, r6, pc}
 800f21c:	ab01      	add	r3, sp, #4
 800f21e:	466a      	mov	r2, sp
 800f220:	f7ff ffc9 	bl	800f1b6 <__swhatbuf_r>
 800f224:	9900      	ldr	r1, [sp, #0]
 800f226:	4605      	mov	r5, r0
 800f228:	4630      	mov	r0, r6
 800f22a:	f7fe fd3d 	bl	800dca8 <_malloc_r>
 800f22e:	b948      	cbnz	r0, 800f244 <__smakebuf_r+0x44>
 800f230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f234:	059a      	lsls	r2, r3, #22
 800f236:	d4ef      	bmi.n	800f218 <__smakebuf_r+0x18>
 800f238:	f023 0303 	bic.w	r3, r3, #3
 800f23c:	f043 0302 	orr.w	r3, r3, #2
 800f240:	81a3      	strh	r3, [r4, #12]
 800f242:	e7e3      	b.n	800f20c <__smakebuf_r+0xc>
 800f244:	4b0d      	ldr	r3, [pc, #52]	; (800f27c <__smakebuf_r+0x7c>)
 800f246:	62b3      	str	r3, [r6, #40]	; 0x28
 800f248:	89a3      	ldrh	r3, [r4, #12]
 800f24a:	6020      	str	r0, [r4, #0]
 800f24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f250:	81a3      	strh	r3, [r4, #12]
 800f252:	9b00      	ldr	r3, [sp, #0]
 800f254:	6163      	str	r3, [r4, #20]
 800f256:	9b01      	ldr	r3, [sp, #4]
 800f258:	6120      	str	r0, [r4, #16]
 800f25a:	b15b      	cbz	r3, 800f274 <__smakebuf_r+0x74>
 800f25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f260:	4630      	mov	r0, r6
 800f262:	f000 f86b 	bl	800f33c <_isatty_r>
 800f266:	b128      	cbz	r0, 800f274 <__smakebuf_r+0x74>
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	f023 0303 	bic.w	r3, r3, #3
 800f26e:	f043 0301 	orr.w	r3, r3, #1
 800f272:	81a3      	strh	r3, [r4, #12]
 800f274:	89a0      	ldrh	r0, [r4, #12]
 800f276:	4305      	orrs	r5, r0
 800f278:	81a5      	strh	r5, [r4, #12]
 800f27a:	e7cd      	b.n	800f218 <__smakebuf_r+0x18>
 800f27c:	0800eb01 	.word	0x0800eb01

0800f280 <_malloc_usable_size_r>:
 800f280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f284:	1f18      	subs	r0, r3, #4
 800f286:	2b00      	cmp	r3, #0
 800f288:	bfbc      	itt	lt
 800f28a:	580b      	ldrlt	r3, [r1, r0]
 800f28c:	18c0      	addlt	r0, r0, r3
 800f28e:	4770      	bx	lr

0800f290 <_raise_r>:
 800f290:	291f      	cmp	r1, #31
 800f292:	b538      	push	{r3, r4, r5, lr}
 800f294:	4604      	mov	r4, r0
 800f296:	460d      	mov	r5, r1
 800f298:	d904      	bls.n	800f2a4 <_raise_r+0x14>
 800f29a:	2316      	movs	r3, #22
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}
 800f2a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2a6:	b112      	cbz	r2, 800f2ae <_raise_r+0x1e>
 800f2a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2ac:	b94b      	cbnz	r3, 800f2c2 <_raise_r+0x32>
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 f830 	bl	800f314 <_getpid_r>
 800f2b4:	462a      	mov	r2, r5
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2be:	f000 b817 	b.w	800f2f0 <_kill_r>
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d00a      	beq.n	800f2dc <_raise_r+0x4c>
 800f2c6:	1c59      	adds	r1, r3, #1
 800f2c8:	d103      	bne.n	800f2d2 <_raise_r+0x42>
 800f2ca:	2316      	movs	r3, #22
 800f2cc:	6003      	str	r3, [r0, #0]
 800f2ce:	2001      	movs	r0, #1
 800f2d0:	e7e7      	b.n	800f2a2 <_raise_r+0x12>
 800f2d2:	2400      	movs	r4, #0
 800f2d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2d8:	4628      	mov	r0, r5
 800f2da:	4798      	blx	r3
 800f2dc:	2000      	movs	r0, #0
 800f2de:	e7e0      	b.n	800f2a2 <_raise_r+0x12>

0800f2e0 <raise>:
 800f2e0:	4b02      	ldr	r3, [pc, #8]	; (800f2ec <raise+0xc>)
 800f2e2:	4601      	mov	r1, r0
 800f2e4:	6818      	ldr	r0, [r3, #0]
 800f2e6:	f7ff bfd3 	b.w	800f290 <_raise_r>
 800f2ea:	bf00      	nop
 800f2ec:	20000014 	.word	0x20000014

0800f2f0 <_kill_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	4d07      	ldr	r5, [pc, #28]	; (800f310 <_kill_r+0x20>)
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	4608      	mov	r0, r1
 800f2fa:	4611      	mov	r1, r2
 800f2fc:	602b      	str	r3, [r5, #0]
 800f2fe:	f7f5 fdbd 	bl	8004e7c <_kill>
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	d102      	bne.n	800f30c <_kill_r+0x1c>
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	b103      	cbz	r3, 800f30c <_kill_r+0x1c>
 800f30a:	6023      	str	r3, [r4, #0]
 800f30c:	bd38      	pop	{r3, r4, r5, pc}
 800f30e:	bf00      	nop
 800f310:	20001170 	.word	0x20001170

0800f314 <_getpid_r>:
 800f314:	f7f5 bdaa 	b.w	8004e6c <_getpid>

0800f318 <_fstat_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4d07      	ldr	r5, [pc, #28]	; (800f338 <_fstat_r+0x20>)
 800f31c:	2300      	movs	r3, #0
 800f31e:	4604      	mov	r4, r0
 800f320:	4608      	mov	r0, r1
 800f322:	4611      	mov	r1, r2
 800f324:	602b      	str	r3, [r5, #0]
 800f326:	f7f5 fe08 	bl	8004f3a <_fstat>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d102      	bne.n	800f334 <_fstat_r+0x1c>
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	b103      	cbz	r3, 800f334 <_fstat_r+0x1c>
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	bd38      	pop	{r3, r4, r5, pc}
 800f336:	bf00      	nop
 800f338:	20001170 	.word	0x20001170

0800f33c <_isatty_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d06      	ldr	r5, [pc, #24]	; (800f358 <_isatty_r+0x1c>)
 800f340:	2300      	movs	r3, #0
 800f342:	4604      	mov	r4, r0
 800f344:	4608      	mov	r0, r1
 800f346:	602b      	str	r3, [r5, #0]
 800f348:	f7f5 fe07 	bl	8004f5a <_isatty>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d102      	bne.n	800f356 <_isatty_r+0x1a>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	b103      	cbz	r3, 800f356 <_isatty_r+0x1a>
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	20001170 	.word	0x20001170

0800f35c <acos>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	ed2d 8b02 	vpush	{d8}
 800f362:	ec55 4b10 	vmov	r4, r5, d0
 800f366:	f000 f91f 	bl	800f5a8 <__ieee754_acos>
 800f36a:	4622      	mov	r2, r4
 800f36c:	462b      	mov	r3, r5
 800f36e:	4620      	mov	r0, r4
 800f370:	4629      	mov	r1, r5
 800f372:	eeb0 8a40 	vmov.f32	s16, s0
 800f376:	eef0 8a60 	vmov.f32	s17, s1
 800f37a:	f7f1 fbf7 	bl	8000b6c <__aeabi_dcmpun>
 800f37e:	b9a8      	cbnz	r0, 800f3ac <acos+0x50>
 800f380:	ec45 4b10 	vmov	d0, r4, r5
 800f384:	f001 fe04 	bl	8010f90 <fabs>
 800f388:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <acos+0x60>)
 800f38a:	ec51 0b10 	vmov	r0, r1, d0
 800f38e:	2200      	movs	r2, #0
 800f390:	f7f1 fbe2 	bl	8000b58 <__aeabi_dcmpgt>
 800f394:	b150      	cbz	r0, 800f3ac <acos+0x50>
 800f396:	f7fa fee9 	bl	800a16c <__errno>
 800f39a:	ecbd 8b02 	vpop	{d8}
 800f39e:	2321      	movs	r3, #33	; 0x21
 800f3a0:	6003      	str	r3, [r0, #0]
 800f3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3a6:	4806      	ldr	r0, [pc, #24]	; (800f3c0 <acos+0x64>)
 800f3a8:	f7ff b986 	b.w	800e6b8 <nan>
 800f3ac:	eeb0 0a48 	vmov.f32	s0, s16
 800f3b0:	eef0 0a68 	vmov.f32	s1, s17
 800f3b4:	ecbd 8b02 	vpop	{d8}
 800f3b8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ba:	bf00      	nop
 800f3bc:	3ff00000 	.word	0x3ff00000
 800f3c0:	08011603 	.word	0x08011603

0800f3c4 <asin>:
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	ed2d 8b02 	vpush	{d8}
 800f3ca:	ec55 4b10 	vmov	r4, r5, d0
 800f3ce:	f000 fb4b 	bl	800fa68 <__ieee754_asin>
 800f3d2:	4622      	mov	r2, r4
 800f3d4:	462b      	mov	r3, r5
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	eeb0 8a40 	vmov.f32	s16, s0
 800f3de:	eef0 8a60 	vmov.f32	s17, s1
 800f3e2:	f7f1 fbc3 	bl	8000b6c <__aeabi_dcmpun>
 800f3e6:	b9a8      	cbnz	r0, 800f414 <asin+0x50>
 800f3e8:	ec45 4b10 	vmov	d0, r4, r5
 800f3ec:	f001 fdd0 	bl	8010f90 <fabs>
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <asin+0x60>)
 800f3f2:	ec51 0b10 	vmov	r0, r1, d0
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f7f1 fbae 	bl	8000b58 <__aeabi_dcmpgt>
 800f3fc:	b150      	cbz	r0, 800f414 <asin+0x50>
 800f3fe:	f7fa feb5 	bl	800a16c <__errno>
 800f402:	ecbd 8b02 	vpop	{d8}
 800f406:	2321      	movs	r3, #33	; 0x21
 800f408:	6003      	str	r3, [r0, #0]
 800f40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f40e:	4806      	ldr	r0, [pc, #24]	; (800f428 <asin+0x64>)
 800f410:	f7ff b952 	b.w	800e6b8 <nan>
 800f414:	eeb0 0a48 	vmov.f32	s0, s16
 800f418:	eef0 0a68 	vmov.f32	s1, s17
 800f41c:	ecbd 8b02 	vpop	{d8}
 800f420:	bd38      	pop	{r3, r4, r5, pc}
 800f422:	bf00      	nop
 800f424:	3ff00000 	.word	0x3ff00000
 800f428:	08011603 	.word	0x08011603

0800f42c <atan2>:
 800f42c:	f000 bd30 	b.w	800fe90 <__ieee754_atan2>

0800f430 <pow>:
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	ed2d 8b02 	vpush	{d8}
 800f436:	eeb0 8a40 	vmov.f32	s16, s0
 800f43a:	eef0 8a60 	vmov.f32	s17, s1
 800f43e:	ec55 4b11 	vmov	r4, r5, d1
 800f442:	f000 fdf1 	bl	8010028 <__ieee754_pow>
 800f446:	4622      	mov	r2, r4
 800f448:	462b      	mov	r3, r5
 800f44a:	4620      	mov	r0, r4
 800f44c:	4629      	mov	r1, r5
 800f44e:	ec57 6b10 	vmov	r6, r7, d0
 800f452:	f7f1 fb8b 	bl	8000b6c <__aeabi_dcmpun>
 800f456:	2800      	cmp	r0, #0
 800f458:	d13b      	bne.n	800f4d2 <pow+0xa2>
 800f45a:	ec51 0b18 	vmov	r0, r1, d8
 800f45e:	2200      	movs	r2, #0
 800f460:	2300      	movs	r3, #0
 800f462:	f7f1 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 800f466:	b1b8      	cbz	r0, 800f498 <pow+0x68>
 800f468:	2200      	movs	r2, #0
 800f46a:	2300      	movs	r3, #0
 800f46c:	4620      	mov	r0, r4
 800f46e:	4629      	mov	r1, r5
 800f470:	f7f1 fb4a 	bl	8000b08 <__aeabi_dcmpeq>
 800f474:	2800      	cmp	r0, #0
 800f476:	d146      	bne.n	800f506 <pow+0xd6>
 800f478:	ec45 4b10 	vmov	d0, r4, r5
 800f47c:	f001 fd91 	bl	8010fa2 <finite>
 800f480:	b338      	cbz	r0, 800f4d2 <pow+0xa2>
 800f482:	2200      	movs	r2, #0
 800f484:	2300      	movs	r3, #0
 800f486:	4620      	mov	r0, r4
 800f488:	4629      	mov	r1, r5
 800f48a:	f7f1 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800f48e:	b300      	cbz	r0, 800f4d2 <pow+0xa2>
 800f490:	f7fa fe6c 	bl	800a16c <__errno>
 800f494:	2322      	movs	r3, #34	; 0x22
 800f496:	e01b      	b.n	800f4d0 <pow+0xa0>
 800f498:	ec47 6b10 	vmov	d0, r6, r7
 800f49c:	f001 fd81 	bl	8010fa2 <finite>
 800f4a0:	b9e0      	cbnz	r0, 800f4dc <pow+0xac>
 800f4a2:	eeb0 0a48 	vmov.f32	s0, s16
 800f4a6:	eef0 0a68 	vmov.f32	s1, s17
 800f4aa:	f001 fd7a 	bl	8010fa2 <finite>
 800f4ae:	b1a8      	cbz	r0, 800f4dc <pow+0xac>
 800f4b0:	ec45 4b10 	vmov	d0, r4, r5
 800f4b4:	f001 fd75 	bl	8010fa2 <finite>
 800f4b8:	b180      	cbz	r0, 800f4dc <pow+0xac>
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	463b      	mov	r3, r7
 800f4be:	4630      	mov	r0, r6
 800f4c0:	4639      	mov	r1, r7
 800f4c2:	f7f1 fb53 	bl	8000b6c <__aeabi_dcmpun>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d0e2      	beq.n	800f490 <pow+0x60>
 800f4ca:	f7fa fe4f 	bl	800a16c <__errno>
 800f4ce:	2321      	movs	r3, #33	; 0x21
 800f4d0:	6003      	str	r3, [r0, #0]
 800f4d2:	ecbd 8b02 	vpop	{d8}
 800f4d6:	ec47 6b10 	vmov	d0, r6, r7
 800f4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4dc:	2200      	movs	r2, #0
 800f4de:	2300      	movs	r3, #0
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	4639      	mov	r1, r7
 800f4e4:	f7f1 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d0f2      	beq.n	800f4d2 <pow+0xa2>
 800f4ec:	eeb0 0a48 	vmov.f32	s0, s16
 800f4f0:	eef0 0a68 	vmov.f32	s1, s17
 800f4f4:	f001 fd55 	bl	8010fa2 <finite>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d0ea      	beq.n	800f4d2 <pow+0xa2>
 800f4fc:	ec45 4b10 	vmov	d0, r4, r5
 800f500:	f001 fd4f 	bl	8010fa2 <finite>
 800f504:	e7c3      	b.n	800f48e <pow+0x5e>
 800f506:	4f01      	ldr	r7, [pc, #4]	; (800f50c <pow+0xdc>)
 800f508:	2600      	movs	r6, #0
 800f50a:	e7e2      	b.n	800f4d2 <pow+0xa2>
 800f50c:	3ff00000 	.word	0x3ff00000

0800f510 <sqrt>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	ed2d 8b02 	vpush	{d8}
 800f516:	ec55 4b10 	vmov	r4, r5, d0
 800f51a:	f001 fab3 	bl	8010a84 <__ieee754_sqrt>
 800f51e:	4622      	mov	r2, r4
 800f520:	462b      	mov	r3, r5
 800f522:	4620      	mov	r0, r4
 800f524:	4629      	mov	r1, r5
 800f526:	eeb0 8a40 	vmov.f32	s16, s0
 800f52a:	eef0 8a60 	vmov.f32	s17, s1
 800f52e:	f7f1 fb1d 	bl	8000b6c <__aeabi_dcmpun>
 800f532:	b990      	cbnz	r0, 800f55a <sqrt+0x4a>
 800f534:	2200      	movs	r2, #0
 800f536:	2300      	movs	r3, #0
 800f538:	4620      	mov	r0, r4
 800f53a:	4629      	mov	r1, r5
 800f53c:	f7f1 faee 	bl	8000b1c <__aeabi_dcmplt>
 800f540:	b158      	cbz	r0, 800f55a <sqrt+0x4a>
 800f542:	f7fa fe13 	bl	800a16c <__errno>
 800f546:	2321      	movs	r3, #33	; 0x21
 800f548:	6003      	str	r3, [r0, #0]
 800f54a:	2200      	movs	r2, #0
 800f54c:	2300      	movs	r3, #0
 800f54e:	4610      	mov	r0, r2
 800f550:	4619      	mov	r1, r3
 800f552:	f7f1 f99b 	bl	800088c <__aeabi_ddiv>
 800f556:	ec41 0b18 	vmov	d8, r0, r1
 800f55a:	eeb0 0a48 	vmov.f32	s0, s16
 800f55e:	eef0 0a68 	vmov.f32	s1, s17
 800f562:	ecbd 8b02 	vpop	{d8}
 800f566:	bd38      	pop	{r3, r4, r5, pc}

0800f568 <sqrtf>:
 800f568:	b508      	push	{r3, lr}
 800f56a:	ed2d 8b02 	vpush	{d8}
 800f56e:	eeb0 8a40 	vmov.f32	s16, s0
 800f572:	f001 fb39 	bl	8010be8 <__ieee754_sqrtf>
 800f576:	eeb4 8a48 	vcmp.f32	s16, s16
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	d60c      	bvs.n	800f59a <sqrtf+0x32>
 800f580:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f5a0 <sqrtf+0x38>
 800f584:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58c:	d505      	bpl.n	800f59a <sqrtf+0x32>
 800f58e:	f7fa fded 	bl	800a16c <__errno>
 800f592:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f596:	2321      	movs	r3, #33	; 0x21
 800f598:	6003      	str	r3, [r0, #0]
 800f59a:	ecbd 8b02 	vpop	{d8}
 800f59e:	bd08      	pop	{r3, pc}
	...

0800f5a8 <__ieee754_acos>:
 800f5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	ec55 4b10 	vmov	r4, r5, d0
 800f5b0:	49b7      	ldr	r1, [pc, #732]	; (800f890 <__ieee754_acos+0x2e8>)
 800f5b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5b6:	428b      	cmp	r3, r1
 800f5b8:	dd1b      	ble.n	800f5f2 <__ieee754_acos+0x4a>
 800f5ba:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800f5be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f5c2:	4323      	orrs	r3, r4
 800f5c4:	d106      	bne.n	800f5d4 <__ieee754_acos+0x2c>
 800f5c6:	2d00      	cmp	r5, #0
 800f5c8:	f300 8211 	bgt.w	800f9ee <__ieee754_acos+0x446>
 800f5cc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800f828 <__ieee754_acos+0x280>
 800f5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d4:	ee10 2a10 	vmov	r2, s0
 800f5d8:	462b      	mov	r3, r5
 800f5da:	ee10 0a10 	vmov	r0, s0
 800f5de:	4629      	mov	r1, r5
 800f5e0:	f7f0 fe72 	bl	80002c8 <__aeabi_dsub>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	f7f1 f950 	bl	800088c <__aeabi_ddiv>
 800f5ec:	ec41 0b10 	vmov	d0, r0, r1
 800f5f0:	e7ee      	b.n	800f5d0 <__ieee754_acos+0x28>
 800f5f2:	49a8      	ldr	r1, [pc, #672]	; (800f894 <__ieee754_acos+0x2ec>)
 800f5f4:	428b      	cmp	r3, r1
 800f5f6:	f300 8087 	bgt.w	800f708 <__ieee754_acos+0x160>
 800f5fa:	4aa7      	ldr	r2, [pc, #668]	; (800f898 <__ieee754_acos+0x2f0>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	f340 81f9 	ble.w	800f9f4 <__ieee754_acos+0x44c>
 800f602:	ee10 2a10 	vmov	r2, s0
 800f606:	ee10 0a10 	vmov	r0, s0
 800f60a:	462b      	mov	r3, r5
 800f60c:	4629      	mov	r1, r5
 800f60e:	f7f1 f813 	bl	8000638 <__aeabi_dmul>
 800f612:	a387      	add	r3, pc, #540	; (adr r3, 800f830 <__ieee754_acos+0x288>)
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	4606      	mov	r6, r0
 800f61a:	460f      	mov	r7, r1
 800f61c:	f7f1 f80c 	bl	8000638 <__aeabi_dmul>
 800f620:	a385      	add	r3, pc, #532	; (adr r3, 800f838 <__ieee754_acos+0x290>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 fe51 	bl	80002cc <__adddf3>
 800f62a:	4632      	mov	r2, r6
 800f62c:	463b      	mov	r3, r7
 800f62e:	f7f1 f803 	bl	8000638 <__aeabi_dmul>
 800f632:	a383      	add	r3, pc, #524	; (adr r3, 800f840 <__ieee754_acos+0x298>)
 800f634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f638:	f7f0 fe46 	bl	80002c8 <__aeabi_dsub>
 800f63c:	4632      	mov	r2, r6
 800f63e:	463b      	mov	r3, r7
 800f640:	f7f0 fffa 	bl	8000638 <__aeabi_dmul>
 800f644:	a380      	add	r3, pc, #512	; (adr r3, 800f848 <__ieee754_acos+0x2a0>)
 800f646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64a:	f7f0 fe3f 	bl	80002cc <__adddf3>
 800f64e:	4632      	mov	r2, r6
 800f650:	463b      	mov	r3, r7
 800f652:	f7f0 fff1 	bl	8000638 <__aeabi_dmul>
 800f656:	a37e      	add	r3, pc, #504	; (adr r3, 800f850 <__ieee754_acos+0x2a8>)
 800f658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65c:	f7f0 fe34 	bl	80002c8 <__aeabi_dsub>
 800f660:	4632      	mov	r2, r6
 800f662:	463b      	mov	r3, r7
 800f664:	f7f0 ffe8 	bl	8000638 <__aeabi_dmul>
 800f668:	a37b      	add	r3, pc, #492	; (adr r3, 800f858 <__ieee754_acos+0x2b0>)
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f7f0 fe2d 	bl	80002cc <__adddf3>
 800f672:	4632      	mov	r2, r6
 800f674:	463b      	mov	r3, r7
 800f676:	f7f0 ffdf 	bl	8000638 <__aeabi_dmul>
 800f67a:	a379      	add	r3, pc, #484	; (adr r3, 800f860 <__ieee754_acos+0x2b8>)
 800f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f680:	4680      	mov	r8, r0
 800f682:	4689      	mov	r9, r1
 800f684:	4630      	mov	r0, r6
 800f686:	4639      	mov	r1, r7
 800f688:	f7f0 ffd6 	bl	8000638 <__aeabi_dmul>
 800f68c:	a376      	add	r3, pc, #472	; (adr r3, 800f868 <__ieee754_acos+0x2c0>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	f7f0 fe19 	bl	80002c8 <__aeabi_dsub>
 800f696:	4632      	mov	r2, r6
 800f698:	463b      	mov	r3, r7
 800f69a:	f7f0 ffcd 	bl	8000638 <__aeabi_dmul>
 800f69e:	a374      	add	r3, pc, #464	; (adr r3, 800f870 <__ieee754_acos+0x2c8>)
 800f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a4:	f7f0 fe12 	bl	80002cc <__adddf3>
 800f6a8:	4632      	mov	r2, r6
 800f6aa:	463b      	mov	r3, r7
 800f6ac:	f7f0 ffc4 	bl	8000638 <__aeabi_dmul>
 800f6b0:	a371      	add	r3, pc, #452	; (adr r3, 800f878 <__ieee754_acos+0x2d0>)
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f7f0 fe07 	bl	80002c8 <__aeabi_dsub>
 800f6ba:	4632      	mov	r2, r6
 800f6bc:	463b      	mov	r3, r7
 800f6be:	f7f0 ffbb 	bl	8000638 <__aeabi_dmul>
 800f6c2:	4b76      	ldr	r3, [pc, #472]	; (800f89c <__ieee754_acos+0x2f4>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f7f0 fe01 	bl	80002cc <__adddf3>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4640      	mov	r0, r8
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	f7f1 f8db 	bl	800088c <__aeabi_ddiv>
 800f6d6:	4622      	mov	r2, r4
 800f6d8:	462b      	mov	r3, r5
 800f6da:	f7f0 ffad 	bl	8000638 <__aeabi_dmul>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	a167      	add	r1, pc, #412	; (adr r1, 800f880 <__ieee754_acos+0x2d8>)
 800f6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6e8:	f7f0 fdee 	bl	80002c8 <__aeabi_dsub>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	f7f0 fde8 	bl	80002c8 <__aeabi_dsub>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	a162      	add	r1, pc, #392	; (adr r1, 800f888 <__ieee754_acos+0x2e0>)
 800f6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f702:	f7f0 fde1 	bl	80002c8 <__aeabi_dsub>
 800f706:	e771      	b.n	800f5ec <__ieee754_acos+0x44>
 800f708:	2d00      	cmp	r5, #0
 800f70a:	f280 80cb 	bge.w	800f8a4 <__ieee754_acos+0x2fc>
 800f70e:	ee10 0a10 	vmov	r0, s0
 800f712:	4b62      	ldr	r3, [pc, #392]	; (800f89c <__ieee754_acos+0x2f4>)
 800f714:	2200      	movs	r2, #0
 800f716:	4629      	mov	r1, r5
 800f718:	f7f0 fdd8 	bl	80002cc <__adddf3>
 800f71c:	4b60      	ldr	r3, [pc, #384]	; (800f8a0 <__ieee754_acos+0x2f8>)
 800f71e:	2200      	movs	r2, #0
 800f720:	f7f0 ff8a 	bl	8000638 <__aeabi_dmul>
 800f724:	a342      	add	r3, pc, #264	; (adr r3, 800f830 <__ieee754_acos+0x288>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	4604      	mov	r4, r0
 800f72c:	460d      	mov	r5, r1
 800f72e:	f7f0 ff83 	bl	8000638 <__aeabi_dmul>
 800f732:	a341      	add	r3, pc, #260	; (adr r3, 800f838 <__ieee754_acos+0x290>)
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	f7f0 fdc8 	bl	80002cc <__adddf3>
 800f73c:	4622      	mov	r2, r4
 800f73e:	462b      	mov	r3, r5
 800f740:	f7f0 ff7a 	bl	8000638 <__aeabi_dmul>
 800f744:	a33e      	add	r3, pc, #248	; (adr r3, 800f840 <__ieee754_acos+0x298>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f7f0 fdbd 	bl	80002c8 <__aeabi_dsub>
 800f74e:	4622      	mov	r2, r4
 800f750:	462b      	mov	r3, r5
 800f752:	f7f0 ff71 	bl	8000638 <__aeabi_dmul>
 800f756:	a33c      	add	r3, pc, #240	; (adr r3, 800f848 <__ieee754_acos+0x2a0>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	f7f0 fdb6 	bl	80002cc <__adddf3>
 800f760:	4622      	mov	r2, r4
 800f762:	462b      	mov	r3, r5
 800f764:	f7f0 ff68 	bl	8000638 <__aeabi_dmul>
 800f768:	a339      	add	r3, pc, #228	; (adr r3, 800f850 <__ieee754_acos+0x2a8>)
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	f7f0 fdab 	bl	80002c8 <__aeabi_dsub>
 800f772:	4622      	mov	r2, r4
 800f774:	462b      	mov	r3, r5
 800f776:	f7f0 ff5f 	bl	8000638 <__aeabi_dmul>
 800f77a:	a337      	add	r3, pc, #220	; (adr r3, 800f858 <__ieee754_acos+0x2b0>)
 800f77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f780:	f7f0 fda4 	bl	80002cc <__adddf3>
 800f784:	4622      	mov	r2, r4
 800f786:	462b      	mov	r3, r5
 800f788:	f7f0 ff56 	bl	8000638 <__aeabi_dmul>
 800f78c:	ec45 4b10 	vmov	d0, r4, r5
 800f790:	4680      	mov	r8, r0
 800f792:	4689      	mov	r9, r1
 800f794:	f001 f976 	bl	8010a84 <__ieee754_sqrt>
 800f798:	a331      	add	r3, pc, #196	; (adr r3, 800f860 <__ieee754_acos+0x2b8>)
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	4620      	mov	r0, r4
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	ec57 6b10 	vmov	r6, r7, d0
 800f7a6:	f7f0 ff47 	bl	8000638 <__aeabi_dmul>
 800f7aa:	a32f      	add	r3, pc, #188	; (adr r3, 800f868 <__ieee754_acos+0x2c0>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	f7f0 fd8a 	bl	80002c8 <__aeabi_dsub>
 800f7b4:	4622      	mov	r2, r4
 800f7b6:	462b      	mov	r3, r5
 800f7b8:	f7f0 ff3e 	bl	8000638 <__aeabi_dmul>
 800f7bc:	a32c      	add	r3, pc, #176	; (adr r3, 800f870 <__ieee754_acos+0x2c8>)
 800f7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c2:	f7f0 fd83 	bl	80002cc <__adddf3>
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	462b      	mov	r3, r5
 800f7ca:	f7f0 ff35 	bl	8000638 <__aeabi_dmul>
 800f7ce:	a32a      	add	r3, pc, #168	; (adr r3, 800f878 <__ieee754_acos+0x2d0>)
 800f7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d4:	f7f0 fd78 	bl	80002c8 <__aeabi_dsub>
 800f7d8:	4622      	mov	r2, r4
 800f7da:	462b      	mov	r3, r5
 800f7dc:	f7f0 ff2c 	bl	8000638 <__aeabi_dmul>
 800f7e0:	4b2e      	ldr	r3, [pc, #184]	; (800f89c <__ieee754_acos+0x2f4>)
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f7f0 fd72 	bl	80002cc <__adddf3>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	f7f1 f84c 	bl	800088c <__aeabi_ddiv>
 800f7f4:	4632      	mov	r2, r6
 800f7f6:	463b      	mov	r3, r7
 800f7f8:	f7f0 ff1e 	bl	8000638 <__aeabi_dmul>
 800f7fc:	a320      	add	r3, pc, #128	; (adr r3, 800f880 <__ieee754_acos+0x2d8>)
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	f7f0 fd61 	bl	80002c8 <__aeabi_dsub>
 800f806:	4632      	mov	r2, r6
 800f808:	463b      	mov	r3, r7
 800f80a:	f7f0 fd5f 	bl	80002cc <__adddf3>
 800f80e:	4602      	mov	r2, r0
 800f810:	460b      	mov	r3, r1
 800f812:	f7f0 fd5b 	bl	80002cc <__adddf3>
 800f816:	4602      	mov	r2, r0
 800f818:	460b      	mov	r3, r1
 800f81a:	a103      	add	r1, pc, #12	; (adr r1, 800f828 <__ieee754_acos+0x280>)
 800f81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f820:	e76f      	b.n	800f702 <__ieee754_acos+0x15a>
 800f822:	bf00      	nop
 800f824:	f3af 8000 	nop.w
 800f828:	54442d18 	.word	0x54442d18
 800f82c:	400921fb 	.word	0x400921fb
 800f830:	0dfdf709 	.word	0x0dfdf709
 800f834:	3f023de1 	.word	0x3f023de1
 800f838:	7501b288 	.word	0x7501b288
 800f83c:	3f49efe0 	.word	0x3f49efe0
 800f840:	b5688f3b 	.word	0xb5688f3b
 800f844:	3fa48228 	.word	0x3fa48228
 800f848:	0e884455 	.word	0x0e884455
 800f84c:	3fc9c155 	.word	0x3fc9c155
 800f850:	03eb6f7d 	.word	0x03eb6f7d
 800f854:	3fd4d612 	.word	0x3fd4d612
 800f858:	55555555 	.word	0x55555555
 800f85c:	3fc55555 	.word	0x3fc55555
 800f860:	b12e9282 	.word	0xb12e9282
 800f864:	3fb3b8c5 	.word	0x3fb3b8c5
 800f868:	1b8d0159 	.word	0x1b8d0159
 800f86c:	3fe6066c 	.word	0x3fe6066c
 800f870:	9c598ac8 	.word	0x9c598ac8
 800f874:	40002ae5 	.word	0x40002ae5
 800f878:	1c8a2d4b 	.word	0x1c8a2d4b
 800f87c:	40033a27 	.word	0x40033a27
 800f880:	33145c07 	.word	0x33145c07
 800f884:	3c91a626 	.word	0x3c91a626
 800f888:	54442d18 	.word	0x54442d18
 800f88c:	3ff921fb 	.word	0x3ff921fb
 800f890:	3fefffff 	.word	0x3fefffff
 800f894:	3fdfffff 	.word	0x3fdfffff
 800f898:	3c600000 	.word	0x3c600000
 800f89c:	3ff00000 	.word	0x3ff00000
 800f8a0:	3fe00000 	.word	0x3fe00000
 800f8a4:	ee10 2a10 	vmov	r2, s0
 800f8a8:	462b      	mov	r3, r5
 800f8aa:	496d      	ldr	r1, [pc, #436]	; (800fa60 <__ieee754_acos+0x4b8>)
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	f7f0 fd0b 	bl	80002c8 <__aeabi_dsub>
 800f8b2:	4b6c      	ldr	r3, [pc, #432]	; (800fa64 <__ieee754_acos+0x4bc>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f7f0 febf 	bl	8000638 <__aeabi_dmul>
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	460d      	mov	r5, r1
 800f8be:	ec45 4b10 	vmov	d0, r4, r5
 800f8c2:	f001 f8df 	bl	8010a84 <__ieee754_sqrt>
 800f8c6:	a34e      	add	r3, pc, #312	; (adr r3, 800fa00 <__ieee754_acos+0x458>)
 800f8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	ec59 8b10 	vmov	r8, r9, d0
 800f8d4:	f7f0 feb0 	bl	8000638 <__aeabi_dmul>
 800f8d8:	a34b      	add	r3, pc, #300	; (adr r3, 800fa08 <__ieee754_acos+0x460>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f7f0 fcf5 	bl	80002cc <__adddf3>
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	462b      	mov	r3, r5
 800f8e6:	f7f0 fea7 	bl	8000638 <__aeabi_dmul>
 800f8ea:	a349      	add	r3, pc, #292	; (adr r3, 800fa10 <__ieee754_acos+0x468>)
 800f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f0:	f7f0 fcea 	bl	80002c8 <__aeabi_dsub>
 800f8f4:	4622      	mov	r2, r4
 800f8f6:	462b      	mov	r3, r5
 800f8f8:	f7f0 fe9e 	bl	8000638 <__aeabi_dmul>
 800f8fc:	a346      	add	r3, pc, #280	; (adr r3, 800fa18 <__ieee754_acos+0x470>)
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f7f0 fce3 	bl	80002cc <__adddf3>
 800f906:	4622      	mov	r2, r4
 800f908:	462b      	mov	r3, r5
 800f90a:	f7f0 fe95 	bl	8000638 <__aeabi_dmul>
 800f90e:	a344      	add	r3, pc, #272	; (adr r3, 800fa20 <__ieee754_acos+0x478>)
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	f7f0 fcd8 	bl	80002c8 <__aeabi_dsub>
 800f918:	4622      	mov	r2, r4
 800f91a:	462b      	mov	r3, r5
 800f91c:	f7f0 fe8c 	bl	8000638 <__aeabi_dmul>
 800f920:	a341      	add	r3, pc, #260	; (adr r3, 800fa28 <__ieee754_acos+0x480>)
 800f922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f926:	f7f0 fcd1 	bl	80002cc <__adddf3>
 800f92a:	4622      	mov	r2, r4
 800f92c:	462b      	mov	r3, r5
 800f92e:	f7f0 fe83 	bl	8000638 <__aeabi_dmul>
 800f932:	a33f      	add	r3, pc, #252	; (adr r3, 800fa30 <__ieee754_acos+0x488>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	4682      	mov	sl, r0
 800f93a:	468b      	mov	fp, r1
 800f93c:	4620      	mov	r0, r4
 800f93e:	4629      	mov	r1, r5
 800f940:	f7f0 fe7a 	bl	8000638 <__aeabi_dmul>
 800f944:	a33c      	add	r3, pc, #240	; (adr r3, 800fa38 <__ieee754_acos+0x490>)
 800f946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94a:	f7f0 fcbd 	bl	80002c8 <__aeabi_dsub>
 800f94e:	4622      	mov	r2, r4
 800f950:	462b      	mov	r3, r5
 800f952:	f7f0 fe71 	bl	8000638 <__aeabi_dmul>
 800f956:	a33a      	add	r3, pc, #232	; (adr r3, 800fa40 <__ieee754_acos+0x498>)
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	f7f0 fcb6 	bl	80002cc <__adddf3>
 800f960:	4622      	mov	r2, r4
 800f962:	462b      	mov	r3, r5
 800f964:	f7f0 fe68 	bl	8000638 <__aeabi_dmul>
 800f968:	a337      	add	r3, pc, #220	; (adr r3, 800fa48 <__ieee754_acos+0x4a0>)
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	f7f0 fcab 	bl	80002c8 <__aeabi_dsub>
 800f972:	4622      	mov	r2, r4
 800f974:	462b      	mov	r3, r5
 800f976:	f7f0 fe5f 	bl	8000638 <__aeabi_dmul>
 800f97a:	4b39      	ldr	r3, [pc, #228]	; (800fa60 <__ieee754_acos+0x4b8>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	f7f0 fca5 	bl	80002cc <__adddf3>
 800f982:	4602      	mov	r2, r0
 800f984:	460b      	mov	r3, r1
 800f986:	4650      	mov	r0, sl
 800f988:	4659      	mov	r1, fp
 800f98a:	f7f0 ff7f 	bl	800088c <__aeabi_ddiv>
 800f98e:	4642      	mov	r2, r8
 800f990:	464b      	mov	r3, r9
 800f992:	f7f0 fe51 	bl	8000638 <__aeabi_dmul>
 800f996:	2600      	movs	r6, #0
 800f998:	4682      	mov	sl, r0
 800f99a:	468b      	mov	fp, r1
 800f99c:	4632      	mov	r2, r6
 800f99e:	464b      	mov	r3, r9
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	f7f0 fe48 	bl	8000638 <__aeabi_dmul>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	f7f0 fc8a 	bl	80002c8 <__aeabi_dsub>
 800f9b4:	4632      	mov	r2, r6
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	460d      	mov	r5, r1
 800f9ba:	464b      	mov	r3, r9
 800f9bc:	4640      	mov	r0, r8
 800f9be:	4649      	mov	r1, r9
 800f9c0:	f7f0 fc84 	bl	80002cc <__adddf3>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	f7f0 ff5e 	bl	800088c <__aeabi_ddiv>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	4650      	mov	r0, sl
 800f9d6:	4659      	mov	r1, fp
 800f9d8:	f7f0 fc78 	bl	80002cc <__adddf3>
 800f9dc:	4632      	mov	r2, r6
 800f9de:	464b      	mov	r3, r9
 800f9e0:	f7f0 fc74 	bl	80002cc <__adddf3>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	f7f0 fc70 	bl	80002cc <__adddf3>
 800f9ec:	e5fe      	b.n	800f5ec <__ieee754_acos+0x44>
 800f9ee:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800fa50 <__ieee754_acos+0x4a8>
 800f9f2:	e5ed      	b.n	800f5d0 <__ieee754_acos+0x28>
 800f9f4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800fa58 <__ieee754_acos+0x4b0>
 800f9f8:	e5ea      	b.n	800f5d0 <__ieee754_acos+0x28>
 800f9fa:	bf00      	nop
 800f9fc:	f3af 8000 	nop.w
 800fa00:	0dfdf709 	.word	0x0dfdf709
 800fa04:	3f023de1 	.word	0x3f023de1
 800fa08:	7501b288 	.word	0x7501b288
 800fa0c:	3f49efe0 	.word	0x3f49efe0
 800fa10:	b5688f3b 	.word	0xb5688f3b
 800fa14:	3fa48228 	.word	0x3fa48228
 800fa18:	0e884455 	.word	0x0e884455
 800fa1c:	3fc9c155 	.word	0x3fc9c155
 800fa20:	03eb6f7d 	.word	0x03eb6f7d
 800fa24:	3fd4d612 	.word	0x3fd4d612
 800fa28:	55555555 	.word	0x55555555
 800fa2c:	3fc55555 	.word	0x3fc55555
 800fa30:	b12e9282 	.word	0xb12e9282
 800fa34:	3fb3b8c5 	.word	0x3fb3b8c5
 800fa38:	1b8d0159 	.word	0x1b8d0159
 800fa3c:	3fe6066c 	.word	0x3fe6066c
 800fa40:	9c598ac8 	.word	0x9c598ac8
 800fa44:	40002ae5 	.word	0x40002ae5
 800fa48:	1c8a2d4b 	.word	0x1c8a2d4b
 800fa4c:	40033a27 	.word	0x40033a27
	...
 800fa58:	54442d18 	.word	0x54442d18
 800fa5c:	3ff921fb 	.word	0x3ff921fb
 800fa60:	3ff00000 	.word	0x3ff00000
 800fa64:	3fe00000 	.word	0x3fe00000

0800fa68 <__ieee754_asin>:
 800fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa6c:	ed2d 8b04 	vpush	{d8-d9}
 800fa70:	ec55 4b10 	vmov	r4, r5, d0
 800fa74:	4bcc      	ldr	r3, [pc, #816]	; (800fda8 <__ieee754_asin+0x340>)
 800fa76:	b083      	sub	sp, #12
 800fa78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fa7c:	4598      	cmp	r8, r3
 800fa7e:	9501      	str	r5, [sp, #4]
 800fa80:	dd35      	ble.n	800faee <__ieee754_asin+0x86>
 800fa82:	ee10 3a10 	vmov	r3, s0
 800fa86:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800fa8a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800fa8e:	ea58 0303 	orrs.w	r3, r8, r3
 800fa92:	d117      	bne.n	800fac4 <__ieee754_asin+0x5c>
 800fa94:	a3aa      	add	r3, pc, #680	; (adr r3, 800fd40 <__ieee754_asin+0x2d8>)
 800fa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9a:	ee10 0a10 	vmov	r0, s0
 800fa9e:	4629      	mov	r1, r5
 800faa0:	f7f0 fdca 	bl	8000638 <__aeabi_dmul>
 800faa4:	a3a8      	add	r3, pc, #672	; (adr r3, 800fd48 <__ieee754_asin+0x2e0>)
 800faa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faaa:	4606      	mov	r6, r0
 800faac:	460f      	mov	r7, r1
 800faae:	4620      	mov	r0, r4
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f0 fdc1 	bl	8000638 <__aeabi_dmul>
 800fab6:	4602      	mov	r2, r0
 800fab8:	460b      	mov	r3, r1
 800faba:	4630      	mov	r0, r6
 800fabc:	4639      	mov	r1, r7
 800fabe:	f7f0 fc05 	bl	80002cc <__adddf3>
 800fac2:	e00b      	b.n	800fadc <__ieee754_asin+0x74>
 800fac4:	ee10 2a10 	vmov	r2, s0
 800fac8:	462b      	mov	r3, r5
 800faca:	ee10 0a10 	vmov	r0, s0
 800face:	4629      	mov	r1, r5
 800fad0:	f7f0 fbfa 	bl	80002c8 <__aeabi_dsub>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	f7f0 fed8 	bl	800088c <__aeabi_ddiv>
 800fadc:	4604      	mov	r4, r0
 800fade:	460d      	mov	r5, r1
 800fae0:	ec45 4b10 	vmov	d0, r4, r5
 800fae4:	b003      	add	sp, #12
 800fae6:	ecbd 8b04 	vpop	{d8-d9}
 800faea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faee:	4baf      	ldr	r3, [pc, #700]	; (800fdac <__ieee754_asin+0x344>)
 800faf0:	4598      	cmp	r8, r3
 800faf2:	dc11      	bgt.n	800fb18 <__ieee754_asin+0xb0>
 800faf4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800faf8:	f280 80ae 	bge.w	800fc58 <__ieee754_asin+0x1f0>
 800fafc:	a394      	add	r3, pc, #592	; (adr r3, 800fd50 <__ieee754_asin+0x2e8>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	ee10 0a10 	vmov	r0, s0
 800fb06:	4629      	mov	r1, r5
 800fb08:	f7f0 fbe0 	bl	80002cc <__adddf3>
 800fb0c:	4ba8      	ldr	r3, [pc, #672]	; (800fdb0 <__ieee754_asin+0x348>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f7f1 f822 	bl	8000b58 <__aeabi_dcmpgt>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d1e3      	bne.n	800fae0 <__ieee754_asin+0x78>
 800fb18:	ec45 4b10 	vmov	d0, r4, r5
 800fb1c:	f001 fa38 	bl	8010f90 <fabs>
 800fb20:	49a3      	ldr	r1, [pc, #652]	; (800fdb0 <__ieee754_asin+0x348>)
 800fb22:	ec53 2b10 	vmov	r2, r3, d0
 800fb26:	2000      	movs	r0, #0
 800fb28:	f7f0 fbce 	bl	80002c8 <__aeabi_dsub>
 800fb2c:	4ba1      	ldr	r3, [pc, #644]	; (800fdb4 <__ieee754_asin+0x34c>)
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f7f0 fd82 	bl	8000638 <__aeabi_dmul>
 800fb34:	a388      	add	r3, pc, #544	; (adr r3, 800fd58 <__ieee754_asin+0x2f0>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	460d      	mov	r5, r1
 800fb3e:	f7f0 fd7b 	bl	8000638 <__aeabi_dmul>
 800fb42:	a387      	add	r3, pc, #540	; (adr r3, 800fd60 <__ieee754_asin+0x2f8>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fbc0 	bl	80002cc <__adddf3>
 800fb4c:	4622      	mov	r2, r4
 800fb4e:	462b      	mov	r3, r5
 800fb50:	f7f0 fd72 	bl	8000638 <__aeabi_dmul>
 800fb54:	a384      	add	r3, pc, #528	; (adr r3, 800fd68 <__ieee754_asin+0x300>)
 800fb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5a:	f7f0 fbb5 	bl	80002c8 <__aeabi_dsub>
 800fb5e:	4622      	mov	r2, r4
 800fb60:	462b      	mov	r3, r5
 800fb62:	f7f0 fd69 	bl	8000638 <__aeabi_dmul>
 800fb66:	a382      	add	r3, pc, #520	; (adr r3, 800fd70 <__ieee754_asin+0x308>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f7f0 fbae 	bl	80002cc <__adddf3>
 800fb70:	4622      	mov	r2, r4
 800fb72:	462b      	mov	r3, r5
 800fb74:	f7f0 fd60 	bl	8000638 <__aeabi_dmul>
 800fb78:	a37f      	add	r3, pc, #508	; (adr r3, 800fd78 <__ieee754_asin+0x310>)
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	f7f0 fba3 	bl	80002c8 <__aeabi_dsub>
 800fb82:	4622      	mov	r2, r4
 800fb84:	462b      	mov	r3, r5
 800fb86:	f7f0 fd57 	bl	8000638 <__aeabi_dmul>
 800fb8a:	a37d      	add	r3, pc, #500	; (adr r3, 800fd80 <__ieee754_asin+0x318>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f7f0 fb9c 	bl	80002cc <__adddf3>
 800fb94:	4622      	mov	r2, r4
 800fb96:	462b      	mov	r3, r5
 800fb98:	f7f0 fd4e 	bl	8000638 <__aeabi_dmul>
 800fb9c:	a37a      	add	r3, pc, #488	; (adr r3, 800fd88 <__ieee754_asin+0x320>)
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	ec41 0b18 	vmov	d8, r0, r1
 800fba6:	4620      	mov	r0, r4
 800fba8:	4629      	mov	r1, r5
 800fbaa:	f7f0 fd45 	bl	8000638 <__aeabi_dmul>
 800fbae:	a378      	add	r3, pc, #480	; (adr r3, 800fd90 <__ieee754_asin+0x328>)
 800fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb4:	f7f0 fb88 	bl	80002c8 <__aeabi_dsub>
 800fbb8:	4622      	mov	r2, r4
 800fbba:	462b      	mov	r3, r5
 800fbbc:	f7f0 fd3c 	bl	8000638 <__aeabi_dmul>
 800fbc0:	a375      	add	r3, pc, #468	; (adr r3, 800fd98 <__ieee754_asin+0x330>)
 800fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc6:	f7f0 fb81 	bl	80002cc <__adddf3>
 800fbca:	4622      	mov	r2, r4
 800fbcc:	462b      	mov	r3, r5
 800fbce:	f7f0 fd33 	bl	8000638 <__aeabi_dmul>
 800fbd2:	a373      	add	r3, pc, #460	; (adr r3, 800fda0 <__ieee754_asin+0x338>)
 800fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd8:	f7f0 fb76 	bl	80002c8 <__aeabi_dsub>
 800fbdc:	4622      	mov	r2, r4
 800fbde:	462b      	mov	r3, r5
 800fbe0:	f7f0 fd2a 	bl	8000638 <__aeabi_dmul>
 800fbe4:	4b72      	ldr	r3, [pc, #456]	; (800fdb0 <__ieee754_asin+0x348>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f7f0 fb70 	bl	80002cc <__adddf3>
 800fbec:	ec45 4b10 	vmov	d0, r4, r5
 800fbf0:	4606      	mov	r6, r0
 800fbf2:	460f      	mov	r7, r1
 800fbf4:	f000 ff46 	bl	8010a84 <__ieee754_sqrt>
 800fbf8:	4b6f      	ldr	r3, [pc, #444]	; (800fdb8 <__ieee754_asin+0x350>)
 800fbfa:	4598      	cmp	r8, r3
 800fbfc:	ec5b ab10 	vmov	sl, fp, d0
 800fc00:	f340 80dc 	ble.w	800fdbc <__ieee754_asin+0x354>
 800fc04:	4632      	mov	r2, r6
 800fc06:	463b      	mov	r3, r7
 800fc08:	ec51 0b18 	vmov	r0, r1, d8
 800fc0c:	f7f0 fe3e 	bl	800088c <__aeabi_ddiv>
 800fc10:	4652      	mov	r2, sl
 800fc12:	465b      	mov	r3, fp
 800fc14:	f7f0 fd10 	bl	8000638 <__aeabi_dmul>
 800fc18:	4652      	mov	r2, sl
 800fc1a:	465b      	mov	r3, fp
 800fc1c:	f7f0 fb56 	bl	80002cc <__adddf3>
 800fc20:	4602      	mov	r2, r0
 800fc22:	460b      	mov	r3, r1
 800fc24:	f7f0 fb52 	bl	80002cc <__adddf3>
 800fc28:	a347      	add	r3, pc, #284	; (adr r3, 800fd48 <__ieee754_asin+0x2e0>)
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	f7f0 fb4b 	bl	80002c8 <__aeabi_dsub>
 800fc32:	4602      	mov	r2, r0
 800fc34:	460b      	mov	r3, r1
 800fc36:	a142      	add	r1, pc, #264	; (adr r1, 800fd40 <__ieee754_asin+0x2d8>)
 800fc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc3c:	f7f0 fb44 	bl	80002c8 <__aeabi_dsub>
 800fc40:	9b01      	ldr	r3, [sp, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	bfdc      	itt	le
 800fc46:	4602      	movle	r2, r0
 800fc48:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	460d      	mov	r5, r1
 800fc50:	bfdc      	itt	le
 800fc52:	4614      	movle	r4, r2
 800fc54:	461d      	movle	r5, r3
 800fc56:	e743      	b.n	800fae0 <__ieee754_asin+0x78>
 800fc58:	ee10 2a10 	vmov	r2, s0
 800fc5c:	ee10 0a10 	vmov	r0, s0
 800fc60:	462b      	mov	r3, r5
 800fc62:	4629      	mov	r1, r5
 800fc64:	f7f0 fce8 	bl	8000638 <__aeabi_dmul>
 800fc68:	a33b      	add	r3, pc, #236	; (adr r3, 800fd58 <__ieee754_asin+0x2f0>)
 800fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6e:	4606      	mov	r6, r0
 800fc70:	460f      	mov	r7, r1
 800fc72:	f7f0 fce1 	bl	8000638 <__aeabi_dmul>
 800fc76:	a33a      	add	r3, pc, #232	; (adr r3, 800fd60 <__ieee754_asin+0x2f8>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	f7f0 fb26 	bl	80002cc <__adddf3>
 800fc80:	4632      	mov	r2, r6
 800fc82:	463b      	mov	r3, r7
 800fc84:	f7f0 fcd8 	bl	8000638 <__aeabi_dmul>
 800fc88:	a337      	add	r3, pc, #220	; (adr r3, 800fd68 <__ieee754_asin+0x300>)
 800fc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8e:	f7f0 fb1b 	bl	80002c8 <__aeabi_dsub>
 800fc92:	4632      	mov	r2, r6
 800fc94:	463b      	mov	r3, r7
 800fc96:	f7f0 fccf 	bl	8000638 <__aeabi_dmul>
 800fc9a:	a335      	add	r3, pc, #212	; (adr r3, 800fd70 <__ieee754_asin+0x308>)
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	f7f0 fb14 	bl	80002cc <__adddf3>
 800fca4:	4632      	mov	r2, r6
 800fca6:	463b      	mov	r3, r7
 800fca8:	f7f0 fcc6 	bl	8000638 <__aeabi_dmul>
 800fcac:	a332      	add	r3, pc, #200	; (adr r3, 800fd78 <__ieee754_asin+0x310>)
 800fcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb2:	f7f0 fb09 	bl	80002c8 <__aeabi_dsub>
 800fcb6:	4632      	mov	r2, r6
 800fcb8:	463b      	mov	r3, r7
 800fcba:	f7f0 fcbd 	bl	8000638 <__aeabi_dmul>
 800fcbe:	a330      	add	r3, pc, #192	; (adr r3, 800fd80 <__ieee754_asin+0x318>)
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	f7f0 fb02 	bl	80002cc <__adddf3>
 800fcc8:	4632      	mov	r2, r6
 800fcca:	463b      	mov	r3, r7
 800fccc:	f7f0 fcb4 	bl	8000638 <__aeabi_dmul>
 800fcd0:	a32d      	add	r3, pc, #180	; (adr r3, 800fd88 <__ieee754_asin+0x320>)
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	4680      	mov	r8, r0
 800fcd8:	4689      	mov	r9, r1
 800fcda:	4630      	mov	r0, r6
 800fcdc:	4639      	mov	r1, r7
 800fcde:	f7f0 fcab 	bl	8000638 <__aeabi_dmul>
 800fce2:	a32b      	add	r3, pc, #172	; (adr r3, 800fd90 <__ieee754_asin+0x328>)
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	f7f0 faee 	bl	80002c8 <__aeabi_dsub>
 800fcec:	4632      	mov	r2, r6
 800fcee:	463b      	mov	r3, r7
 800fcf0:	f7f0 fca2 	bl	8000638 <__aeabi_dmul>
 800fcf4:	a328      	add	r3, pc, #160	; (adr r3, 800fd98 <__ieee754_asin+0x330>)
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	f7f0 fae7 	bl	80002cc <__adddf3>
 800fcfe:	4632      	mov	r2, r6
 800fd00:	463b      	mov	r3, r7
 800fd02:	f7f0 fc99 	bl	8000638 <__aeabi_dmul>
 800fd06:	a326      	add	r3, pc, #152	; (adr r3, 800fda0 <__ieee754_asin+0x338>)
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f7f0 fadc 	bl	80002c8 <__aeabi_dsub>
 800fd10:	4632      	mov	r2, r6
 800fd12:	463b      	mov	r3, r7
 800fd14:	f7f0 fc90 	bl	8000638 <__aeabi_dmul>
 800fd18:	4b25      	ldr	r3, [pc, #148]	; (800fdb0 <__ieee754_asin+0x348>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f7f0 fad6 	bl	80002cc <__adddf3>
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	4640      	mov	r0, r8
 800fd26:	4649      	mov	r1, r9
 800fd28:	f7f0 fdb0 	bl	800088c <__aeabi_ddiv>
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	462b      	mov	r3, r5
 800fd30:	f7f0 fc82 	bl	8000638 <__aeabi_dmul>
 800fd34:	4602      	mov	r2, r0
 800fd36:	460b      	mov	r3, r1
 800fd38:	4620      	mov	r0, r4
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	e6bf      	b.n	800fabe <__ieee754_asin+0x56>
 800fd3e:	bf00      	nop
 800fd40:	54442d18 	.word	0x54442d18
 800fd44:	3ff921fb 	.word	0x3ff921fb
 800fd48:	33145c07 	.word	0x33145c07
 800fd4c:	3c91a626 	.word	0x3c91a626
 800fd50:	8800759c 	.word	0x8800759c
 800fd54:	7e37e43c 	.word	0x7e37e43c
 800fd58:	0dfdf709 	.word	0x0dfdf709
 800fd5c:	3f023de1 	.word	0x3f023de1
 800fd60:	7501b288 	.word	0x7501b288
 800fd64:	3f49efe0 	.word	0x3f49efe0
 800fd68:	b5688f3b 	.word	0xb5688f3b
 800fd6c:	3fa48228 	.word	0x3fa48228
 800fd70:	0e884455 	.word	0x0e884455
 800fd74:	3fc9c155 	.word	0x3fc9c155
 800fd78:	03eb6f7d 	.word	0x03eb6f7d
 800fd7c:	3fd4d612 	.word	0x3fd4d612
 800fd80:	55555555 	.word	0x55555555
 800fd84:	3fc55555 	.word	0x3fc55555
 800fd88:	b12e9282 	.word	0xb12e9282
 800fd8c:	3fb3b8c5 	.word	0x3fb3b8c5
 800fd90:	1b8d0159 	.word	0x1b8d0159
 800fd94:	3fe6066c 	.word	0x3fe6066c
 800fd98:	9c598ac8 	.word	0x9c598ac8
 800fd9c:	40002ae5 	.word	0x40002ae5
 800fda0:	1c8a2d4b 	.word	0x1c8a2d4b
 800fda4:	40033a27 	.word	0x40033a27
 800fda8:	3fefffff 	.word	0x3fefffff
 800fdac:	3fdfffff 	.word	0x3fdfffff
 800fdb0:	3ff00000 	.word	0x3ff00000
 800fdb4:	3fe00000 	.word	0x3fe00000
 800fdb8:	3fef3332 	.word	0x3fef3332
 800fdbc:	ee10 2a10 	vmov	r2, s0
 800fdc0:	ee10 0a10 	vmov	r0, s0
 800fdc4:	465b      	mov	r3, fp
 800fdc6:	4659      	mov	r1, fp
 800fdc8:	f7f0 fa80 	bl	80002cc <__adddf3>
 800fdcc:	4632      	mov	r2, r6
 800fdce:	463b      	mov	r3, r7
 800fdd0:	ec41 0b19 	vmov	d9, r0, r1
 800fdd4:	ec51 0b18 	vmov	r0, r1, d8
 800fdd8:	f7f0 fd58 	bl	800088c <__aeabi_ddiv>
 800fddc:	4602      	mov	r2, r0
 800fdde:	460b      	mov	r3, r1
 800fde0:	ec51 0b19 	vmov	r0, r1, d9
 800fde4:	f7f0 fc28 	bl	8000638 <__aeabi_dmul>
 800fde8:	f04f 0800 	mov.w	r8, #0
 800fdec:	4606      	mov	r6, r0
 800fdee:	460f      	mov	r7, r1
 800fdf0:	4642      	mov	r2, r8
 800fdf2:	465b      	mov	r3, fp
 800fdf4:	4640      	mov	r0, r8
 800fdf6:	4659      	mov	r1, fp
 800fdf8:	f7f0 fc1e 	bl	8000638 <__aeabi_dmul>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	460b      	mov	r3, r1
 800fe00:	4620      	mov	r0, r4
 800fe02:	4629      	mov	r1, r5
 800fe04:	f7f0 fa60 	bl	80002c8 <__aeabi_dsub>
 800fe08:	4642      	mov	r2, r8
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	460d      	mov	r5, r1
 800fe0e:	465b      	mov	r3, fp
 800fe10:	4650      	mov	r0, sl
 800fe12:	4659      	mov	r1, fp
 800fe14:	f7f0 fa5a 	bl	80002cc <__adddf3>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f7f0 fd34 	bl	800088c <__aeabi_ddiv>
 800fe24:	4602      	mov	r2, r0
 800fe26:	460b      	mov	r3, r1
 800fe28:	f7f0 fa50 	bl	80002cc <__adddf3>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	460b      	mov	r3, r1
 800fe30:	a113      	add	r1, pc, #76	; (adr r1, 800fe80 <__ieee754_asin+0x418>)
 800fe32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe36:	f7f0 fa47 	bl	80002c8 <__aeabi_dsub>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	4630      	mov	r0, r6
 800fe40:	4639      	mov	r1, r7
 800fe42:	f7f0 fa41 	bl	80002c8 <__aeabi_dsub>
 800fe46:	4642      	mov	r2, r8
 800fe48:	4604      	mov	r4, r0
 800fe4a:	460d      	mov	r5, r1
 800fe4c:	465b      	mov	r3, fp
 800fe4e:	4640      	mov	r0, r8
 800fe50:	4659      	mov	r1, fp
 800fe52:	f7f0 fa3b 	bl	80002cc <__adddf3>
 800fe56:	4602      	mov	r2, r0
 800fe58:	460b      	mov	r3, r1
 800fe5a:	a10b      	add	r1, pc, #44	; (adr r1, 800fe88 <__ieee754_asin+0x420>)
 800fe5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe60:	f7f0 fa32 	bl	80002c8 <__aeabi_dsub>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f7f0 fa2c 	bl	80002c8 <__aeabi_dsub>
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	a104      	add	r1, pc, #16	; (adr r1, 800fe88 <__ieee754_asin+0x420>)
 800fe76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe7a:	e6df      	b.n	800fc3c <__ieee754_asin+0x1d4>
 800fe7c:	f3af 8000 	nop.w
 800fe80:	33145c07 	.word	0x33145c07
 800fe84:	3c91a626 	.word	0x3c91a626
 800fe88:	54442d18 	.word	0x54442d18
 800fe8c:	3fe921fb 	.word	0x3fe921fb

0800fe90 <__ieee754_atan2>:
 800fe90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe94:	ec57 6b11 	vmov	r6, r7, d1
 800fe98:	4273      	negs	r3, r6
 800fe9a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010020 <__ieee754_atan2+0x190>
 800fe9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fea2:	4333      	orrs	r3, r6
 800fea4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fea8:	4573      	cmp	r3, lr
 800feaa:	ec51 0b10 	vmov	r0, r1, d0
 800feae:	ee11 8a10 	vmov	r8, s2
 800feb2:	d80a      	bhi.n	800feca <__ieee754_atan2+0x3a>
 800feb4:	4244      	negs	r4, r0
 800feb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800feba:	4304      	orrs	r4, r0
 800febc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fec0:	4574      	cmp	r4, lr
 800fec2:	ee10 9a10 	vmov	r9, s0
 800fec6:	468c      	mov	ip, r1
 800fec8:	d907      	bls.n	800feda <__ieee754_atan2+0x4a>
 800feca:	4632      	mov	r2, r6
 800fecc:	463b      	mov	r3, r7
 800fece:	f7f0 f9fd 	bl	80002cc <__adddf3>
 800fed2:	ec41 0b10 	vmov	d0, r0, r1
 800fed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fede:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fee2:	4334      	orrs	r4, r6
 800fee4:	d103      	bne.n	800feee <__ieee754_atan2+0x5e>
 800fee6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feea:	f000 beb1 	b.w	8010c50 <atan>
 800feee:	17bc      	asrs	r4, r7, #30
 800fef0:	f004 0402 	and.w	r4, r4, #2
 800fef4:	ea53 0909 	orrs.w	r9, r3, r9
 800fef8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fefc:	d107      	bne.n	800ff0e <__ieee754_atan2+0x7e>
 800fefe:	2c02      	cmp	r4, #2
 800ff00:	d060      	beq.n	800ffc4 <__ieee754_atan2+0x134>
 800ff02:	2c03      	cmp	r4, #3
 800ff04:	d1e5      	bne.n	800fed2 <__ieee754_atan2+0x42>
 800ff06:	a142      	add	r1, pc, #264	; (adr r1, 8010010 <__ieee754_atan2+0x180>)
 800ff08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff0c:	e7e1      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ff0e:	ea52 0808 	orrs.w	r8, r2, r8
 800ff12:	d106      	bne.n	800ff22 <__ieee754_atan2+0x92>
 800ff14:	f1bc 0f00 	cmp.w	ip, #0
 800ff18:	da5f      	bge.n	800ffda <__ieee754_atan2+0x14a>
 800ff1a:	a13f      	add	r1, pc, #252	; (adr r1, 8010018 <__ieee754_atan2+0x188>)
 800ff1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff20:	e7d7      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ff22:	4572      	cmp	r2, lr
 800ff24:	d10f      	bne.n	800ff46 <__ieee754_atan2+0xb6>
 800ff26:	4293      	cmp	r3, r2
 800ff28:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff2c:	d107      	bne.n	800ff3e <__ieee754_atan2+0xae>
 800ff2e:	2c02      	cmp	r4, #2
 800ff30:	d84c      	bhi.n	800ffcc <__ieee754_atan2+0x13c>
 800ff32:	4b35      	ldr	r3, [pc, #212]	; (8010008 <__ieee754_atan2+0x178>)
 800ff34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ff38:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ff3c:	e7c9      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ff3e:	2c02      	cmp	r4, #2
 800ff40:	d848      	bhi.n	800ffd4 <__ieee754_atan2+0x144>
 800ff42:	4b32      	ldr	r3, [pc, #200]	; (801000c <__ieee754_atan2+0x17c>)
 800ff44:	e7f6      	b.n	800ff34 <__ieee754_atan2+0xa4>
 800ff46:	4573      	cmp	r3, lr
 800ff48:	d0e4      	beq.n	800ff14 <__ieee754_atan2+0x84>
 800ff4a:	1a9b      	subs	r3, r3, r2
 800ff4c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ff50:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff54:	da1e      	bge.n	800ff94 <__ieee754_atan2+0x104>
 800ff56:	2f00      	cmp	r7, #0
 800ff58:	da01      	bge.n	800ff5e <__ieee754_atan2+0xce>
 800ff5a:	323c      	adds	r2, #60	; 0x3c
 800ff5c:	db1e      	blt.n	800ff9c <__ieee754_atan2+0x10c>
 800ff5e:	4632      	mov	r2, r6
 800ff60:	463b      	mov	r3, r7
 800ff62:	f7f0 fc93 	bl	800088c <__aeabi_ddiv>
 800ff66:	ec41 0b10 	vmov	d0, r0, r1
 800ff6a:	f001 f811 	bl	8010f90 <fabs>
 800ff6e:	f000 fe6f 	bl	8010c50 <atan>
 800ff72:	ec51 0b10 	vmov	r0, r1, d0
 800ff76:	2c01      	cmp	r4, #1
 800ff78:	d013      	beq.n	800ffa2 <__ieee754_atan2+0x112>
 800ff7a:	2c02      	cmp	r4, #2
 800ff7c:	d015      	beq.n	800ffaa <__ieee754_atan2+0x11a>
 800ff7e:	2c00      	cmp	r4, #0
 800ff80:	d0a7      	beq.n	800fed2 <__ieee754_atan2+0x42>
 800ff82:	a319      	add	r3, pc, #100	; (adr r3, 800ffe8 <__ieee754_atan2+0x158>)
 800ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff88:	f7f0 f99e 	bl	80002c8 <__aeabi_dsub>
 800ff8c:	a318      	add	r3, pc, #96	; (adr r3, 800fff0 <__ieee754_atan2+0x160>)
 800ff8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff92:	e014      	b.n	800ffbe <__ieee754_atan2+0x12e>
 800ff94:	a118      	add	r1, pc, #96	; (adr r1, 800fff8 <__ieee754_atan2+0x168>)
 800ff96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff9a:	e7ec      	b.n	800ff76 <__ieee754_atan2+0xe6>
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	e7e9      	b.n	800ff76 <__ieee754_atan2+0xe6>
 800ffa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	e793      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ffaa:	a30f      	add	r3, pc, #60	; (adr r3, 800ffe8 <__ieee754_atan2+0x158>)
 800ffac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb0:	f7f0 f98a 	bl	80002c8 <__aeabi_dsub>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	a10d      	add	r1, pc, #52	; (adr r1, 800fff0 <__ieee754_atan2+0x160>)
 800ffba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffbe:	f7f0 f983 	bl	80002c8 <__aeabi_dsub>
 800ffc2:	e786      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ffc4:	a10a      	add	r1, pc, #40	; (adr r1, 800fff0 <__ieee754_atan2+0x160>)
 800ffc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffca:	e782      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ffcc:	a10c      	add	r1, pc, #48	; (adr r1, 8010000 <__ieee754_atan2+0x170>)
 800ffce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd2:	e77e      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	e77b      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ffda:	a107      	add	r1, pc, #28	; (adr r1, 800fff8 <__ieee754_atan2+0x168>)
 800ffdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffe0:	e777      	b.n	800fed2 <__ieee754_atan2+0x42>
 800ffe2:	bf00      	nop
 800ffe4:	f3af 8000 	nop.w
 800ffe8:	33145c07 	.word	0x33145c07
 800ffec:	3ca1a626 	.word	0x3ca1a626
 800fff0:	54442d18 	.word	0x54442d18
 800fff4:	400921fb 	.word	0x400921fb
 800fff8:	54442d18 	.word	0x54442d18
 800fffc:	3ff921fb 	.word	0x3ff921fb
 8010000:	54442d18 	.word	0x54442d18
 8010004:	3fe921fb 	.word	0x3fe921fb
 8010008:	08011668 	.word	0x08011668
 801000c:	08011680 	.word	0x08011680
 8010010:	54442d18 	.word	0x54442d18
 8010014:	c00921fb 	.word	0xc00921fb
 8010018:	54442d18 	.word	0x54442d18
 801001c:	bff921fb 	.word	0xbff921fb
 8010020:	7ff00000 	.word	0x7ff00000
 8010024:	00000000 	.word	0x00000000

08010028 <__ieee754_pow>:
 8010028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002c:	ed2d 8b06 	vpush	{d8-d10}
 8010030:	b089      	sub	sp, #36	; 0x24
 8010032:	ed8d 1b00 	vstr	d1, [sp]
 8010036:	e9dd 2900 	ldrd	r2, r9, [sp]
 801003a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801003e:	ea58 0102 	orrs.w	r1, r8, r2
 8010042:	ec57 6b10 	vmov	r6, r7, d0
 8010046:	d115      	bne.n	8010074 <__ieee754_pow+0x4c>
 8010048:	19b3      	adds	r3, r6, r6
 801004a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801004e:	4152      	adcs	r2, r2
 8010050:	4299      	cmp	r1, r3
 8010052:	4b89      	ldr	r3, [pc, #548]	; (8010278 <__ieee754_pow+0x250>)
 8010054:	4193      	sbcs	r3, r2
 8010056:	f080 84d2 	bcs.w	80109fe <__ieee754_pow+0x9d6>
 801005a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801005e:	4630      	mov	r0, r6
 8010060:	4639      	mov	r1, r7
 8010062:	f7f0 f933 	bl	80002cc <__adddf3>
 8010066:	ec41 0b10 	vmov	d0, r0, r1
 801006a:	b009      	add	sp, #36	; 0x24
 801006c:	ecbd 8b06 	vpop	{d8-d10}
 8010070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010074:	4b81      	ldr	r3, [pc, #516]	; (801027c <__ieee754_pow+0x254>)
 8010076:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801007a:	429c      	cmp	r4, r3
 801007c:	ee10 aa10 	vmov	sl, s0
 8010080:	463d      	mov	r5, r7
 8010082:	dc06      	bgt.n	8010092 <__ieee754_pow+0x6a>
 8010084:	d101      	bne.n	801008a <__ieee754_pow+0x62>
 8010086:	2e00      	cmp	r6, #0
 8010088:	d1e7      	bne.n	801005a <__ieee754_pow+0x32>
 801008a:	4598      	cmp	r8, r3
 801008c:	dc01      	bgt.n	8010092 <__ieee754_pow+0x6a>
 801008e:	d10f      	bne.n	80100b0 <__ieee754_pow+0x88>
 8010090:	b172      	cbz	r2, 80100b0 <__ieee754_pow+0x88>
 8010092:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010096:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801009a:	ea55 050a 	orrs.w	r5, r5, sl
 801009e:	d1dc      	bne.n	801005a <__ieee754_pow+0x32>
 80100a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80100a4:	18db      	adds	r3, r3, r3
 80100a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80100aa:	4152      	adcs	r2, r2
 80100ac:	429d      	cmp	r5, r3
 80100ae:	e7d0      	b.n	8010052 <__ieee754_pow+0x2a>
 80100b0:	2d00      	cmp	r5, #0
 80100b2:	da3b      	bge.n	801012c <__ieee754_pow+0x104>
 80100b4:	4b72      	ldr	r3, [pc, #456]	; (8010280 <__ieee754_pow+0x258>)
 80100b6:	4598      	cmp	r8, r3
 80100b8:	dc51      	bgt.n	801015e <__ieee754_pow+0x136>
 80100ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80100be:	4598      	cmp	r8, r3
 80100c0:	f340 84ac 	ble.w	8010a1c <__ieee754_pow+0x9f4>
 80100c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80100c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80100cc:	2b14      	cmp	r3, #20
 80100ce:	dd0f      	ble.n	80100f0 <__ieee754_pow+0xc8>
 80100d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80100d4:	fa22 f103 	lsr.w	r1, r2, r3
 80100d8:	fa01 f303 	lsl.w	r3, r1, r3
 80100dc:	4293      	cmp	r3, r2
 80100de:	f040 849d 	bne.w	8010a1c <__ieee754_pow+0x9f4>
 80100e2:	f001 0101 	and.w	r1, r1, #1
 80100e6:	f1c1 0302 	rsb	r3, r1, #2
 80100ea:	9304      	str	r3, [sp, #16]
 80100ec:	b182      	cbz	r2, 8010110 <__ieee754_pow+0xe8>
 80100ee:	e05f      	b.n	80101b0 <__ieee754_pow+0x188>
 80100f0:	2a00      	cmp	r2, #0
 80100f2:	d15b      	bne.n	80101ac <__ieee754_pow+0x184>
 80100f4:	f1c3 0314 	rsb	r3, r3, #20
 80100f8:	fa48 f103 	asr.w	r1, r8, r3
 80100fc:	fa01 f303 	lsl.w	r3, r1, r3
 8010100:	4543      	cmp	r3, r8
 8010102:	f040 8488 	bne.w	8010a16 <__ieee754_pow+0x9ee>
 8010106:	f001 0101 	and.w	r1, r1, #1
 801010a:	f1c1 0302 	rsb	r3, r1, #2
 801010e:	9304      	str	r3, [sp, #16]
 8010110:	4b5c      	ldr	r3, [pc, #368]	; (8010284 <__ieee754_pow+0x25c>)
 8010112:	4598      	cmp	r8, r3
 8010114:	d132      	bne.n	801017c <__ieee754_pow+0x154>
 8010116:	f1b9 0f00 	cmp.w	r9, #0
 801011a:	f280 8478 	bge.w	8010a0e <__ieee754_pow+0x9e6>
 801011e:	4959      	ldr	r1, [pc, #356]	; (8010284 <__ieee754_pow+0x25c>)
 8010120:	4632      	mov	r2, r6
 8010122:	463b      	mov	r3, r7
 8010124:	2000      	movs	r0, #0
 8010126:	f7f0 fbb1 	bl	800088c <__aeabi_ddiv>
 801012a:	e79c      	b.n	8010066 <__ieee754_pow+0x3e>
 801012c:	2300      	movs	r3, #0
 801012e:	9304      	str	r3, [sp, #16]
 8010130:	2a00      	cmp	r2, #0
 8010132:	d13d      	bne.n	80101b0 <__ieee754_pow+0x188>
 8010134:	4b51      	ldr	r3, [pc, #324]	; (801027c <__ieee754_pow+0x254>)
 8010136:	4598      	cmp	r8, r3
 8010138:	d1ea      	bne.n	8010110 <__ieee754_pow+0xe8>
 801013a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801013e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010142:	ea53 030a 	orrs.w	r3, r3, sl
 8010146:	f000 845a 	beq.w	80109fe <__ieee754_pow+0x9d6>
 801014a:	4b4f      	ldr	r3, [pc, #316]	; (8010288 <__ieee754_pow+0x260>)
 801014c:	429c      	cmp	r4, r3
 801014e:	dd08      	ble.n	8010162 <__ieee754_pow+0x13a>
 8010150:	f1b9 0f00 	cmp.w	r9, #0
 8010154:	f2c0 8457 	blt.w	8010a06 <__ieee754_pow+0x9de>
 8010158:	e9dd 0100 	ldrd	r0, r1, [sp]
 801015c:	e783      	b.n	8010066 <__ieee754_pow+0x3e>
 801015e:	2302      	movs	r3, #2
 8010160:	e7e5      	b.n	801012e <__ieee754_pow+0x106>
 8010162:	f1b9 0f00 	cmp.w	r9, #0
 8010166:	f04f 0000 	mov.w	r0, #0
 801016a:	f04f 0100 	mov.w	r1, #0
 801016e:	f6bf af7a 	bge.w	8010066 <__ieee754_pow+0x3e>
 8010172:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801017a:	e774      	b.n	8010066 <__ieee754_pow+0x3e>
 801017c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010180:	d106      	bne.n	8010190 <__ieee754_pow+0x168>
 8010182:	4632      	mov	r2, r6
 8010184:	463b      	mov	r3, r7
 8010186:	4630      	mov	r0, r6
 8010188:	4639      	mov	r1, r7
 801018a:	f7f0 fa55 	bl	8000638 <__aeabi_dmul>
 801018e:	e76a      	b.n	8010066 <__ieee754_pow+0x3e>
 8010190:	4b3e      	ldr	r3, [pc, #248]	; (801028c <__ieee754_pow+0x264>)
 8010192:	4599      	cmp	r9, r3
 8010194:	d10c      	bne.n	80101b0 <__ieee754_pow+0x188>
 8010196:	2d00      	cmp	r5, #0
 8010198:	db0a      	blt.n	80101b0 <__ieee754_pow+0x188>
 801019a:	ec47 6b10 	vmov	d0, r6, r7
 801019e:	b009      	add	sp, #36	; 0x24
 80101a0:	ecbd 8b06 	vpop	{d8-d10}
 80101a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a8:	f000 bc6c 	b.w	8010a84 <__ieee754_sqrt>
 80101ac:	2300      	movs	r3, #0
 80101ae:	9304      	str	r3, [sp, #16]
 80101b0:	ec47 6b10 	vmov	d0, r6, r7
 80101b4:	f000 feec 	bl	8010f90 <fabs>
 80101b8:	ec51 0b10 	vmov	r0, r1, d0
 80101bc:	f1ba 0f00 	cmp.w	sl, #0
 80101c0:	d129      	bne.n	8010216 <__ieee754_pow+0x1ee>
 80101c2:	b124      	cbz	r4, 80101ce <__ieee754_pow+0x1a6>
 80101c4:	4b2f      	ldr	r3, [pc, #188]	; (8010284 <__ieee754_pow+0x25c>)
 80101c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d123      	bne.n	8010216 <__ieee754_pow+0x1ee>
 80101ce:	f1b9 0f00 	cmp.w	r9, #0
 80101d2:	da05      	bge.n	80101e0 <__ieee754_pow+0x1b8>
 80101d4:	4602      	mov	r2, r0
 80101d6:	460b      	mov	r3, r1
 80101d8:	2000      	movs	r0, #0
 80101da:	492a      	ldr	r1, [pc, #168]	; (8010284 <__ieee754_pow+0x25c>)
 80101dc:	f7f0 fb56 	bl	800088c <__aeabi_ddiv>
 80101e0:	2d00      	cmp	r5, #0
 80101e2:	f6bf af40 	bge.w	8010066 <__ieee754_pow+0x3e>
 80101e6:	9b04      	ldr	r3, [sp, #16]
 80101e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80101ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80101f0:	4323      	orrs	r3, r4
 80101f2:	d108      	bne.n	8010206 <__ieee754_pow+0x1de>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	4610      	mov	r0, r2
 80101fa:	4619      	mov	r1, r3
 80101fc:	f7f0 f864 	bl	80002c8 <__aeabi_dsub>
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	e78f      	b.n	8010126 <__ieee754_pow+0xfe>
 8010206:	9b04      	ldr	r3, [sp, #16]
 8010208:	2b01      	cmp	r3, #1
 801020a:	f47f af2c 	bne.w	8010066 <__ieee754_pow+0x3e>
 801020e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010212:	4619      	mov	r1, r3
 8010214:	e727      	b.n	8010066 <__ieee754_pow+0x3e>
 8010216:	0feb      	lsrs	r3, r5, #31
 8010218:	3b01      	subs	r3, #1
 801021a:	9306      	str	r3, [sp, #24]
 801021c:	9a06      	ldr	r2, [sp, #24]
 801021e:	9b04      	ldr	r3, [sp, #16]
 8010220:	4313      	orrs	r3, r2
 8010222:	d102      	bne.n	801022a <__ieee754_pow+0x202>
 8010224:	4632      	mov	r2, r6
 8010226:	463b      	mov	r3, r7
 8010228:	e7e6      	b.n	80101f8 <__ieee754_pow+0x1d0>
 801022a:	4b19      	ldr	r3, [pc, #100]	; (8010290 <__ieee754_pow+0x268>)
 801022c:	4598      	cmp	r8, r3
 801022e:	f340 80fb 	ble.w	8010428 <__ieee754_pow+0x400>
 8010232:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010236:	4598      	cmp	r8, r3
 8010238:	4b13      	ldr	r3, [pc, #76]	; (8010288 <__ieee754_pow+0x260>)
 801023a:	dd0c      	ble.n	8010256 <__ieee754_pow+0x22e>
 801023c:	429c      	cmp	r4, r3
 801023e:	dc0f      	bgt.n	8010260 <__ieee754_pow+0x238>
 8010240:	f1b9 0f00 	cmp.w	r9, #0
 8010244:	da0f      	bge.n	8010266 <__ieee754_pow+0x23e>
 8010246:	2000      	movs	r0, #0
 8010248:	b009      	add	sp, #36	; 0x24
 801024a:	ecbd 8b06 	vpop	{d8-d10}
 801024e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010252:	f000 bcf3 	b.w	8010c3c <__math_oflow>
 8010256:	429c      	cmp	r4, r3
 8010258:	dbf2      	blt.n	8010240 <__ieee754_pow+0x218>
 801025a:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <__ieee754_pow+0x25c>)
 801025c:	429c      	cmp	r4, r3
 801025e:	dd19      	ble.n	8010294 <__ieee754_pow+0x26c>
 8010260:	f1b9 0f00 	cmp.w	r9, #0
 8010264:	dcef      	bgt.n	8010246 <__ieee754_pow+0x21e>
 8010266:	2000      	movs	r0, #0
 8010268:	b009      	add	sp, #36	; 0x24
 801026a:	ecbd 8b06 	vpop	{d8-d10}
 801026e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010272:	f000 bcda 	b.w	8010c2a <__math_uflow>
 8010276:	bf00      	nop
 8010278:	fff00000 	.word	0xfff00000
 801027c:	7ff00000 	.word	0x7ff00000
 8010280:	433fffff 	.word	0x433fffff
 8010284:	3ff00000 	.word	0x3ff00000
 8010288:	3fefffff 	.word	0x3fefffff
 801028c:	3fe00000 	.word	0x3fe00000
 8010290:	41e00000 	.word	0x41e00000
 8010294:	4b60      	ldr	r3, [pc, #384]	; (8010418 <__ieee754_pow+0x3f0>)
 8010296:	2200      	movs	r2, #0
 8010298:	f7f0 f816 	bl	80002c8 <__aeabi_dsub>
 801029c:	a354      	add	r3, pc, #336	; (adr r3, 80103f0 <__ieee754_pow+0x3c8>)
 801029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a2:	4604      	mov	r4, r0
 80102a4:	460d      	mov	r5, r1
 80102a6:	f7f0 f9c7 	bl	8000638 <__aeabi_dmul>
 80102aa:	a353      	add	r3, pc, #332	; (adr r3, 80103f8 <__ieee754_pow+0x3d0>)
 80102ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b0:	4606      	mov	r6, r0
 80102b2:	460f      	mov	r7, r1
 80102b4:	4620      	mov	r0, r4
 80102b6:	4629      	mov	r1, r5
 80102b8:	f7f0 f9be 	bl	8000638 <__aeabi_dmul>
 80102bc:	4b57      	ldr	r3, [pc, #348]	; (801041c <__ieee754_pow+0x3f4>)
 80102be:	4682      	mov	sl, r0
 80102c0:	468b      	mov	fp, r1
 80102c2:	2200      	movs	r2, #0
 80102c4:	4620      	mov	r0, r4
 80102c6:	4629      	mov	r1, r5
 80102c8:	f7f0 f9b6 	bl	8000638 <__aeabi_dmul>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	a14b      	add	r1, pc, #300	; (adr r1, 8010400 <__ieee754_pow+0x3d8>)
 80102d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102d6:	f7ef fff7 	bl	80002c8 <__aeabi_dsub>
 80102da:	4622      	mov	r2, r4
 80102dc:	462b      	mov	r3, r5
 80102de:	f7f0 f9ab 	bl	8000638 <__aeabi_dmul>
 80102e2:	4602      	mov	r2, r0
 80102e4:	460b      	mov	r3, r1
 80102e6:	2000      	movs	r0, #0
 80102e8:	494d      	ldr	r1, [pc, #308]	; (8010420 <__ieee754_pow+0x3f8>)
 80102ea:	f7ef ffed 	bl	80002c8 <__aeabi_dsub>
 80102ee:	4622      	mov	r2, r4
 80102f0:	4680      	mov	r8, r0
 80102f2:	4689      	mov	r9, r1
 80102f4:	462b      	mov	r3, r5
 80102f6:	4620      	mov	r0, r4
 80102f8:	4629      	mov	r1, r5
 80102fa:	f7f0 f99d 	bl	8000638 <__aeabi_dmul>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	4640      	mov	r0, r8
 8010304:	4649      	mov	r1, r9
 8010306:	f7f0 f997 	bl	8000638 <__aeabi_dmul>
 801030a:	a33f      	add	r3, pc, #252	; (adr r3, 8010408 <__ieee754_pow+0x3e0>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	f7f0 f992 	bl	8000638 <__aeabi_dmul>
 8010314:	4602      	mov	r2, r0
 8010316:	460b      	mov	r3, r1
 8010318:	4650      	mov	r0, sl
 801031a:	4659      	mov	r1, fp
 801031c:	f7ef ffd4 	bl	80002c8 <__aeabi_dsub>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	4680      	mov	r8, r0
 8010326:	4689      	mov	r9, r1
 8010328:	4630      	mov	r0, r6
 801032a:	4639      	mov	r1, r7
 801032c:	f7ef ffce 	bl	80002cc <__adddf3>
 8010330:	2000      	movs	r0, #0
 8010332:	4632      	mov	r2, r6
 8010334:	463b      	mov	r3, r7
 8010336:	4604      	mov	r4, r0
 8010338:	460d      	mov	r5, r1
 801033a:	f7ef ffc5 	bl	80002c8 <__aeabi_dsub>
 801033e:	4602      	mov	r2, r0
 8010340:	460b      	mov	r3, r1
 8010342:	4640      	mov	r0, r8
 8010344:	4649      	mov	r1, r9
 8010346:	f7ef ffbf 	bl	80002c8 <__aeabi_dsub>
 801034a:	9b04      	ldr	r3, [sp, #16]
 801034c:	9a06      	ldr	r2, [sp, #24]
 801034e:	3b01      	subs	r3, #1
 8010350:	4313      	orrs	r3, r2
 8010352:	4682      	mov	sl, r0
 8010354:	468b      	mov	fp, r1
 8010356:	f040 81e7 	bne.w	8010728 <__ieee754_pow+0x700>
 801035a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010410 <__ieee754_pow+0x3e8>
 801035e:	eeb0 8a47 	vmov.f32	s16, s14
 8010362:	eef0 8a67 	vmov.f32	s17, s15
 8010366:	e9dd 6700 	ldrd	r6, r7, [sp]
 801036a:	2600      	movs	r6, #0
 801036c:	4632      	mov	r2, r6
 801036e:	463b      	mov	r3, r7
 8010370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010374:	f7ef ffa8 	bl	80002c8 <__aeabi_dsub>
 8010378:	4622      	mov	r2, r4
 801037a:	462b      	mov	r3, r5
 801037c:	f7f0 f95c 	bl	8000638 <__aeabi_dmul>
 8010380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010384:	4680      	mov	r8, r0
 8010386:	4689      	mov	r9, r1
 8010388:	4650      	mov	r0, sl
 801038a:	4659      	mov	r1, fp
 801038c:	f7f0 f954 	bl	8000638 <__aeabi_dmul>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4640      	mov	r0, r8
 8010396:	4649      	mov	r1, r9
 8010398:	f7ef ff98 	bl	80002cc <__adddf3>
 801039c:	4632      	mov	r2, r6
 801039e:	463b      	mov	r3, r7
 80103a0:	4680      	mov	r8, r0
 80103a2:	4689      	mov	r9, r1
 80103a4:	4620      	mov	r0, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	f7f0 f946 	bl	8000638 <__aeabi_dmul>
 80103ac:	460b      	mov	r3, r1
 80103ae:	4604      	mov	r4, r0
 80103b0:	460d      	mov	r5, r1
 80103b2:	4602      	mov	r2, r0
 80103b4:	4649      	mov	r1, r9
 80103b6:	4640      	mov	r0, r8
 80103b8:	f7ef ff88 	bl	80002cc <__adddf3>
 80103bc:	4b19      	ldr	r3, [pc, #100]	; (8010424 <__ieee754_pow+0x3fc>)
 80103be:	4299      	cmp	r1, r3
 80103c0:	ec45 4b19 	vmov	d9, r4, r5
 80103c4:	4606      	mov	r6, r0
 80103c6:	460f      	mov	r7, r1
 80103c8:	468b      	mov	fp, r1
 80103ca:	f340 82f1 	ble.w	80109b0 <__ieee754_pow+0x988>
 80103ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80103d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80103d6:	4303      	orrs	r3, r0
 80103d8:	f000 81e4 	beq.w	80107a4 <__ieee754_pow+0x77c>
 80103dc:	ec51 0b18 	vmov	r0, r1, d8
 80103e0:	2200      	movs	r2, #0
 80103e2:	2300      	movs	r3, #0
 80103e4:	f7f0 fb9a 	bl	8000b1c <__aeabi_dcmplt>
 80103e8:	3800      	subs	r0, #0
 80103ea:	bf18      	it	ne
 80103ec:	2001      	movne	r0, #1
 80103ee:	e72b      	b.n	8010248 <__ieee754_pow+0x220>
 80103f0:	60000000 	.word	0x60000000
 80103f4:	3ff71547 	.word	0x3ff71547
 80103f8:	f85ddf44 	.word	0xf85ddf44
 80103fc:	3e54ae0b 	.word	0x3e54ae0b
 8010400:	55555555 	.word	0x55555555
 8010404:	3fd55555 	.word	0x3fd55555
 8010408:	652b82fe 	.word	0x652b82fe
 801040c:	3ff71547 	.word	0x3ff71547
 8010410:	00000000 	.word	0x00000000
 8010414:	bff00000 	.word	0xbff00000
 8010418:	3ff00000 	.word	0x3ff00000
 801041c:	3fd00000 	.word	0x3fd00000
 8010420:	3fe00000 	.word	0x3fe00000
 8010424:	408fffff 	.word	0x408fffff
 8010428:	4bd5      	ldr	r3, [pc, #852]	; (8010780 <__ieee754_pow+0x758>)
 801042a:	402b      	ands	r3, r5
 801042c:	2200      	movs	r2, #0
 801042e:	b92b      	cbnz	r3, 801043c <__ieee754_pow+0x414>
 8010430:	4bd4      	ldr	r3, [pc, #848]	; (8010784 <__ieee754_pow+0x75c>)
 8010432:	f7f0 f901 	bl	8000638 <__aeabi_dmul>
 8010436:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801043a:	460c      	mov	r4, r1
 801043c:	1523      	asrs	r3, r4, #20
 801043e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010442:	4413      	add	r3, r2
 8010444:	9305      	str	r3, [sp, #20]
 8010446:	4bd0      	ldr	r3, [pc, #832]	; (8010788 <__ieee754_pow+0x760>)
 8010448:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801044c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010450:	429c      	cmp	r4, r3
 8010452:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010456:	dd08      	ble.n	801046a <__ieee754_pow+0x442>
 8010458:	4bcc      	ldr	r3, [pc, #816]	; (801078c <__ieee754_pow+0x764>)
 801045a:	429c      	cmp	r4, r3
 801045c:	f340 8162 	ble.w	8010724 <__ieee754_pow+0x6fc>
 8010460:	9b05      	ldr	r3, [sp, #20]
 8010462:	3301      	adds	r3, #1
 8010464:	9305      	str	r3, [sp, #20]
 8010466:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801046a:	2400      	movs	r4, #0
 801046c:	00e3      	lsls	r3, r4, #3
 801046e:	9307      	str	r3, [sp, #28]
 8010470:	4bc7      	ldr	r3, [pc, #796]	; (8010790 <__ieee754_pow+0x768>)
 8010472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010476:	ed93 7b00 	vldr	d7, [r3]
 801047a:	4629      	mov	r1, r5
 801047c:	ec53 2b17 	vmov	r2, r3, d7
 8010480:	eeb0 9a47 	vmov.f32	s18, s14
 8010484:	eef0 9a67 	vmov.f32	s19, s15
 8010488:	4682      	mov	sl, r0
 801048a:	f7ef ff1d 	bl	80002c8 <__aeabi_dsub>
 801048e:	4652      	mov	r2, sl
 8010490:	4606      	mov	r6, r0
 8010492:	460f      	mov	r7, r1
 8010494:	462b      	mov	r3, r5
 8010496:	ec51 0b19 	vmov	r0, r1, d9
 801049a:	f7ef ff17 	bl	80002cc <__adddf3>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	2000      	movs	r0, #0
 80104a4:	49bb      	ldr	r1, [pc, #748]	; (8010794 <__ieee754_pow+0x76c>)
 80104a6:	f7f0 f9f1 	bl	800088c <__aeabi_ddiv>
 80104aa:	ec41 0b1a 	vmov	d10, r0, r1
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	4630      	mov	r0, r6
 80104b4:	4639      	mov	r1, r7
 80104b6:	f7f0 f8bf 	bl	8000638 <__aeabi_dmul>
 80104ba:	2300      	movs	r3, #0
 80104bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104c0:	9302      	str	r3, [sp, #8]
 80104c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80104c6:	46ab      	mov	fp, r5
 80104c8:	106d      	asrs	r5, r5, #1
 80104ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80104ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80104d2:	ec41 0b18 	vmov	d8, r0, r1
 80104d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80104da:	2200      	movs	r2, #0
 80104dc:	4640      	mov	r0, r8
 80104de:	4649      	mov	r1, r9
 80104e0:	4614      	mov	r4, r2
 80104e2:	461d      	mov	r5, r3
 80104e4:	f7f0 f8a8 	bl	8000638 <__aeabi_dmul>
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	4630      	mov	r0, r6
 80104ee:	4639      	mov	r1, r7
 80104f0:	f7ef feea 	bl	80002c8 <__aeabi_dsub>
 80104f4:	ec53 2b19 	vmov	r2, r3, d9
 80104f8:	4606      	mov	r6, r0
 80104fa:	460f      	mov	r7, r1
 80104fc:	4620      	mov	r0, r4
 80104fe:	4629      	mov	r1, r5
 8010500:	f7ef fee2 	bl	80002c8 <__aeabi_dsub>
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	4650      	mov	r0, sl
 801050a:	4659      	mov	r1, fp
 801050c:	f7ef fedc 	bl	80002c8 <__aeabi_dsub>
 8010510:	4642      	mov	r2, r8
 8010512:	464b      	mov	r3, r9
 8010514:	f7f0 f890 	bl	8000638 <__aeabi_dmul>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	4630      	mov	r0, r6
 801051e:	4639      	mov	r1, r7
 8010520:	f7ef fed2 	bl	80002c8 <__aeabi_dsub>
 8010524:	ec53 2b1a 	vmov	r2, r3, d10
 8010528:	f7f0 f886 	bl	8000638 <__aeabi_dmul>
 801052c:	ec53 2b18 	vmov	r2, r3, d8
 8010530:	ec41 0b19 	vmov	d9, r0, r1
 8010534:	ec51 0b18 	vmov	r0, r1, d8
 8010538:	f7f0 f87e 	bl	8000638 <__aeabi_dmul>
 801053c:	a37c      	add	r3, pc, #496	; (adr r3, 8010730 <__ieee754_pow+0x708>)
 801053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010542:	4604      	mov	r4, r0
 8010544:	460d      	mov	r5, r1
 8010546:	f7f0 f877 	bl	8000638 <__aeabi_dmul>
 801054a:	a37b      	add	r3, pc, #492	; (adr r3, 8010738 <__ieee754_pow+0x710>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7ef febc 	bl	80002cc <__adddf3>
 8010554:	4622      	mov	r2, r4
 8010556:	462b      	mov	r3, r5
 8010558:	f7f0 f86e 	bl	8000638 <__aeabi_dmul>
 801055c:	a378      	add	r3, pc, #480	; (adr r3, 8010740 <__ieee754_pow+0x718>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef feb3 	bl	80002cc <__adddf3>
 8010566:	4622      	mov	r2, r4
 8010568:	462b      	mov	r3, r5
 801056a:	f7f0 f865 	bl	8000638 <__aeabi_dmul>
 801056e:	a376      	add	r3, pc, #472	; (adr r3, 8010748 <__ieee754_pow+0x720>)
 8010570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010574:	f7ef feaa 	bl	80002cc <__adddf3>
 8010578:	4622      	mov	r2, r4
 801057a:	462b      	mov	r3, r5
 801057c:	f7f0 f85c 	bl	8000638 <__aeabi_dmul>
 8010580:	a373      	add	r3, pc, #460	; (adr r3, 8010750 <__ieee754_pow+0x728>)
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f7ef fea1 	bl	80002cc <__adddf3>
 801058a:	4622      	mov	r2, r4
 801058c:	462b      	mov	r3, r5
 801058e:	f7f0 f853 	bl	8000638 <__aeabi_dmul>
 8010592:	a371      	add	r3, pc, #452	; (adr r3, 8010758 <__ieee754_pow+0x730>)
 8010594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010598:	f7ef fe98 	bl	80002cc <__adddf3>
 801059c:	4622      	mov	r2, r4
 801059e:	4606      	mov	r6, r0
 80105a0:	460f      	mov	r7, r1
 80105a2:	462b      	mov	r3, r5
 80105a4:	4620      	mov	r0, r4
 80105a6:	4629      	mov	r1, r5
 80105a8:	f7f0 f846 	bl	8000638 <__aeabi_dmul>
 80105ac:	4602      	mov	r2, r0
 80105ae:	460b      	mov	r3, r1
 80105b0:	4630      	mov	r0, r6
 80105b2:	4639      	mov	r1, r7
 80105b4:	f7f0 f840 	bl	8000638 <__aeabi_dmul>
 80105b8:	4642      	mov	r2, r8
 80105ba:	4604      	mov	r4, r0
 80105bc:	460d      	mov	r5, r1
 80105be:	464b      	mov	r3, r9
 80105c0:	ec51 0b18 	vmov	r0, r1, d8
 80105c4:	f7ef fe82 	bl	80002cc <__adddf3>
 80105c8:	ec53 2b19 	vmov	r2, r3, d9
 80105cc:	f7f0 f834 	bl	8000638 <__aeabi_dmul>
 80105d0:	4622      	mov	r2, r4
 80105d2:	462b      	mov	r3, r5
 80105d4:	f7ef fe7a 	bl	80002cc <__adddf3>
 80105d8:	4642      	mov	r2, r8
 80105da:	4682      	mov	sl, r0
 80105dc:	468b      	mov	fp, r1
 80105de:	464b      	mov	r3, r9
 80105e0:	4640      	mov	r0, r8
 80105e2:	4649      	mov	r1, r9
 80105e4:	f7f0 f828 	bl	8000638 <__aeabi_dmul>
 80105e8:	4b6b      	ldr	r3, [pc, #428]	; (8010798 <__ieee754_pow+0x770>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	4606      	mov	r6, r0
 80105ee:	460f      	mov	r7, r1
 80105f0:	f7ef fe6c 	bl	80002cc <__adddf3>
 80105f4:	4652      	mov	r2, sl
 80105f6:	465b      	mov	r3, fp
 80105f8:	f7ef fe68 	bl	80002cc <__adddf3>
 80105fc:	2000      	movs	r0, #0
 80105fe:	4604      	mov	r4, r0
 8010600:	460d      	mov	r5, r1
 8010602:	4602      	mov	r2, r0
 8010604:	460b      	mov	r3, r1
 8010606:	4640      	mov	r0, r8
 8010608:	4649      	mov	r1, r9
 801060a:	f7f0 f815 	bl	8000638 <__aeabi_dmul>
 801060e:	4b62      	ldr	r3, [pc, #392]	; (8010798 <__ieee754_pow+0x770>)
 8010610:	4680      	mov	r8, r0
 8010612:	4689      	mov	r9, r1
 8010614:	2200      	movs	r2, #0
 8010616:	4620      	mov	r0, r4
 8010618:	4629      	mov	r1, r5
 801061a:	f7ef fe55 	bl	80002c8 <__aeabi_dsub>
 801061e:	4632      	mov	r2, r6
 8010620:	463b      	mov	r3, r7
 8010622:	f7ef fe51 	bl	80002c8 <__aeabi_dsub>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4650      	mov	r0, sl
 801062c:	4659      	mov	r1, fp
 801062e:	f7ef fe4b 	bl	80002c8 <__aeabi_dsub>
 8010632:	ec53 2b18 	vmov	r2, r3, d8
 8010636:	f7ef ffff 	bl	8000638 <__aeabi_dmul>
 801063a:	4622      	mov	r2, r4
 801063c:	4606      	mov	r6, r0
 801063e:	460f      	mov	r7, r1
 8010640:	462b      	mov	r3, r5
 8010642:	ec51 0b19 	vmov	r0, r1, d9
 8010646:	f7ef fff7 	bl	8000638 <__aeabi_dmul>
 801064a:	4602      	mov	r2, r0
 801064c:	460b      	mov	r3, r1
 801064e:	4630      	mov	r0, r6
 8010650:	4639      	mov	r1, r7
 8010652:	f7ef fe3b 	bl	80002cc <__adddf3>
 8010656:	4606      	mov	r6, r0
 8010658:	460f      	mov	r7, r1
 801065a:	4602      	mov	r2, r0
 801065c:	460b      	mov	r3, r1
 801065e:	4640      	mov	r0, r8
 8010660:	4649      	mov	r1, r9
 8010662:	f7ef fe33 	bl	80002cc <__adddf3>
 8010666:	a33e      	add	r3, pc, #248	; (adr r3, 8010760 <__ieee754_pow+0x738>)
 8010668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066c:	2000      	movs	r0, #0
 801066e:	4604      	mov	r4, r0
 8010670:	460d      	mov	r5, r1
 8010672:	f7ef ffe1 	bl	8000638 <__aeabi_dmul>
 8010676:	4642      	mov	r2, r8
 8010678:	ec41 0b18 	vmov	d8, r0, r1
 801067c:	464b      	mov	r3, r9
 801067e:	4620      	mov	r0, r4
 8010680:	4629      	mov	r1, r5
 8010682:	f7ef fe21 	bl	80002c8 <__aeabi_dsub>
 8010686:	4602      	mov	r2, r0
 8010688:	460b      	mov	r3, r1
 801068a:	4630      	mov	r0, r6
 801068c:	4639      	mov	r1, r7
 801068e:	f7ef fe1b 	bl	80002c8 <__aeabi_dsub>
 8010692:	a335      	add	r3, pc, #212	; (adr r3, 8010768 <__ieee754_pow+0x740>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	f7ef ffce 	bl	8000638 <__aeabi_dmul>
 801069c:	a334      	add	r3, pc, #208	; (adr r3, 8010770 <__ieee754_pow+0x748>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	4606      	mov	r6, r0
 80106a4:	460f      	mov	r7, r1
 80106a6:	4620      	mov	r0, r4
 80106a8:	4629      	mov	r1, r5
 80106aa:	f7ef ffc5 	bl	8000638 <__aeabi_dmul>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4630      	mov	r0, r6
 80106b4:	4639      	mov	r1, r7
 80106b6:	f7ef fe09 	bl	80002cc <__adddf3>
 80106ba:	9a07      	ldr	r2, [sp, #28]
 80106bc:	4b37      	ldr	r3, [pc, #220]	; (801079c <__ieee754_pow+0x774>)
 80106be:	4413      	add	r3, r2
 80106c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c4:	f7ef fe02 	bl	80002cc <__adddf3>
 80106c8:	4682      	mov	sl, r0
 80106ca:	9805      	ldr	r0, [sp, #20]
 80106cc:	468b      	mov	fp, r1
 80106ce:	f7ef ff49 	bl	8000564 <__aeabi_i2d>
 80106d2:	9a07      	ldr	r2, [sp, #28]
 80106d4:	4b32      	ldr	r3, [pc, #200]	; (80107a0 <__ieee754_pow+0x778>)
 80106d6:	4413      	add	r3, r2
 80106d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80106dc:	4606      	mov	r6, r0
 80106de:	460f      	mov	r7, r1
 80106e0:	4652      	mov	r2, sl
 80106e2:	465b      	mov	r3, fp
 80106e4:	ec51 0b18 	vmov	r0, r1, d8
 80106e8:	f7ef fdf0 	bl	80002cc <__adddf3>
 80106ec:	4642      	mov	r2, r8
 80106ee:	464b      	mov	r3, r9
 80106f0:	f7ef fdec 	bl	80002cc <__adddf3>
 80106f4:	4632      	mov	r2, r6
 80106f6:	463b      	mov	r3, r7
 80106f8:	f7ef fde8 	bl	80002cc <__adddf3>
 80106fc:	2000      	movs	r0, #0
 80106fe:	4632      	mov	r2, r6
 8010700:	463b      	mov	r3, r7
 8010702:	4604      	mov	r4, r0
 8010704:	460d      	mov	r5, r1
 8010706:	f7ef fddf 	bl	80002c8 <__aeabi_dsub>
 801070a:	4642      	mov	r2, r8
 801070c:	464b      	mov	r3, r9
 801070e:	f7ef fddb 	bl	80002c8 <__aeabi_dsub>
 8010712:	ec53 2b18 	vmov	r2, r3, d8
 8010716:	f7ef fdd7 	bl	80002c8 <__aeabi_dsub>
 801071a:	4602      	mov	r2, r0
 801071c:	460b      	mov	r3, r1
 801071e:	4650      	mov	r0, sl
 8010720:	4659      	mov	r1, fp
 8010722:	e610      	b.n	8010346 <__ieee754_pow+0x31e>
 8010724:	2401      	movs	r4, #1
 8010726:	e6a1      	b.n	801046c <__ieee754_pow+0x444>
 8010728:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010778 <__ieee754_pow+0x750>
 801072c:	e617      	b.n	801035e <__ieee754_pow+0x336>
 801072e:	bf00      	nop
 8010730:	4a454eef 	.word	0x4a454eef
 8010734:	3fca7e28 	.word	0x3fca7e28
 8010738:	93c9db65 	.word	0x93c9db65
 801073c:	3fcd864a 	.word	0x3fcd864a
 8010740:	a91d4101 	.word	0xa91d4101
 8010744:	3fd17460 	.word	0x3fd17460
 8010748:	518f264d 	.word	0x518f264d
 801074c:	3fd55555 	.word	0x3fd55555
 8010750:	db6fabff 	.word	0xdb6fabff
 8010754:	3fdb6db6 	.word	0x3fdb6db6
 8010758:	33333303 	.word	0x33333303
 801075c:	3fe33333 	.word	0x3fe33333
 8010760:	e0000000 	.word	0xe0000000
 8010764:	3feec709 	.word	0x3feec709
 8010768:	dc3a03fd 	.word	0xdc3a03fd
 801076c:	3feec709 	.word	0x3feec709
 8010770:	145b01f5 	.word	0x145b01f5
 8010774:	be3e2fe0 	.word	0xbe3e2fe0
 8010778:	00000000 	.word	0x00000000
 801077c:	3ff00000 	.word	0x3ff00000
 8010780:	7ff00000 	.word	0x7ff00000
 8010784:	43400000 	.word	0x43400000
 8010788:	0003988e 	.word	0x0003988e
 801078c:	000bb679 	.word	0x000bb679
 8010790:	08011698 	.word	0x08011698
 8010794:	3ff00000 	.word	0x3ff00000
 8010798:	40080000 	.word	0x40080000
 801079c:	080116b8 	.word	0x080116b8
 80107a0:	080116a8 	.word	0x080116a8
 80107a4:	a3b5      	add	r3, pc, #724	; (adr r3, 8010a7c <__ieee754_pow+0xa54>)
 80107a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107aa:	4640      	mov	r0, r8
 80107ac:	4649      	mov	r1, r9
 80107ae:	f7ef fd8d 	bl	80002cc <__adddf3>
 80107b2:	4622      	mov	r2, r4
 80107b4:	ec41 0b1a 	vmov	d10, r0, r1
 80107b8:	462b      	mov	r3, r5
 80107ba:	4630      	mov	r0, r6
 80107bc:	4639      	mov	r1, r7
 80107be:	f7ef fd83 	bl	80002c8 <__aeabi_dsub>
 80107c2:	4602      	mov	r2, r0
 80107c4:	460b      	mov	r3, r1
 80107c6:	ec51 0b1a 	vmov	r0, r1, d10
 80107ca:	f7f0 f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	f47f ae04 	bne.w	80103dc <__ieee754_pow+0x3b4>
 80107d4:	4aa4      	ldr	r2, [pc, #656]	; (8010a68 <__ieee754_pow+0xa40>)
 80107d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80107da:	4293      	cmp	r3, r2
 80107dc:	f340 8108 	ble.w	80109f0 <__ieee754_pow+0x9c8>
 80107e0:	151b      	asrs	r3, r3, #20
 80107e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80107e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80107ea:	fa4a f303 	asr.w	r3, sl, r3
 80107ee:	445b      	add	r3, fp
 80107f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80107f4:	4e9d      	ldr	r6, [pc, #628]	; (8010a6c <__ieee754_pow+0xa44>)
 80107f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80107fa:	4116      	asrs	r6, r2
 80107fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010800:	2000      	movs	r0, #0
 8010802:	ea23 0106 	bic.w	r1, r3, r6
 8010806:	f1c2 0214 	rsb	r2, r2, #20
 801080a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801080e:	fa4a fa02 	asr.w	sl, sl, r2
 8010812:	f1bb 0f00 	cmp.w	fp, #0
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	4620      	mov	r0, r4
 801081c:	4629      	mov	r1, r5
 801081e:	bfb8      	it	lt
 8010820:	f1ca 0a00 	rsblt	sl, sl, #0
 8010824:	f7ef fd50 	bl	80002c8 <__aeabi_dsub>
 8010828:	ec41 0b19 	vmov	d9, r0, r1
 801082c:	4642      	mov	r2, r8
 801082e:	464b      	mov	r3, r9
 8010830:	ec51 0b19 	vmov	r0, r1, d9
 8010834:	f7ef fd4a 	bl	80002cc <__adddf3>
 8010838:	a37b      	add	r3, pc, #492	; (adr r3, 8010a28 <__ieee754_pow+0xa00>)
 801083a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083e:	2000      	movs	r0, #0
 8010840:	4604      	mov	r4, r0
 8010842:	460d      	mov	r5, r1
 8010844:	f7ef fef8 	bl	8000638 <__aeabi_dmul>
 8010848:	ec53 2b19 	vmov	r2, r3, d9
 801084c:	4606      	mov	r6, r0
 801084e:	460f      	mov	r7, r1
 8010850:	4620      	mov	r0, r4
 8010852:	4629      	mov	r1, r5
 8010854:	f7ef fd38 	bl	80002c8 <__aeabi_dsub>
 8010858:	4602      	mov	r2, r0
 801085a:	460b      	mov	r3, r1
 801085c:	4640      	mov	r0, r8
 801085e:	4649      	mov	r1, r9
 8010860:	f7ef fd32 	bl	80002c8 <__aeabi_dsub>
 8010864:	a372      	add	r3, pc, #456	; (adr r3, 8010a30 <__ieee754_pow+0xa08>)
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f7ef fee5 	bl	8000638 <__aeabi_dmul>
 801086e:	a372      	add	r3, pc, #456	; (adr r3, 8010a38 <__ieee754_pow+0xa10>)
 8010870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010874:	4680      	mov	r8, r0
 8010876:	4689      	mov	r9, r1
 8010878:	4620      	mov	r0, r4
 801087a:	4629      	mov	r1, r5
 801087c:	f7ef fedc 	bl	8000638 <__aeabi_dmul>
 8010880:	4602      	mov	r2, r0
 8010882:	460b      	mov	r3, r1
 8010884:	4640      	mov	r0, r8
 8010886:	4649      	mov	r1, r9
 8010888:	f7ef fd20 	bl	80002cc <__adddf3>
 801088c:	4604      	mov	r4, r0
 801088e:	460d      	mov	r5, r1
 8010890:	4602      	mov	r2, r0
 8010892:	460b      	mov	r3, r1
 8010894:	4630      	mov	r0, r6
 8010896:	4639      	mov	r1, r7
 8010898:	f7ef fd18 	bl	80002cc <__adddf3>
 801089c:	4632      	mov	r2, r6
 801089e:	463b      	mov	r3, r7
 80108a0:	4680      	mov	r8, r0
 80108a2:	4689      	mov	r9, r1
 80108a4:	f7ef fd10 	bl	80002c8 <__aeabi_dsub>
 80108a8:	4602      	mov	r2, r0
 80108aa:	460b      	mov	r3, r1
 80108ac:	4620      	mov	r0, r4
 80108ae:	4629      	mov	r1, r5
 80108b0:	f7ef fd0a 	bl	80002c8 <__aeabi_dsub>
 80108b4:	4642      	mov	r2, r8
 80108b6:	4606      	mov	r6, r0
 80108b8:	460f      	mov	r7, r1
 80108ba:	464b      	mov	r3, r9
 80108bc:	4640      	mov	r0, r8
 80108be:	4649      	mov	r1, r9
 80108c0:	f7ef feba 	bl	8000638 <__aeabi_dmul>
 80108c4:	a35e      	add	r3, pc, #376	; (adr r3, 8010a40 <__ieee754_pow+0xa18>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	4604      	mov	r4, r0
 80108cc:	460d      	mov	r5, r1
 80108ce:	f7ef feb3 	bl	8000638 <__aeabi_dmul>
 80108d2:	a35d      	add	r3, pc, #372	; (adr r3, 8010a48 <__ieee754_pow+0xa20>)
 80108d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d8:	f7ef fcf6 	bl	80002c8 <__aeabi_dsub>
 80108dc:	4622      	mov	r2, r4
 80108de:	462b      	mov	r3, r5
 80108e0:	f7ef feaa 	bl	8000638 <__aeabi_dmul>
 80108e4:	a35a      	add	r3, pc, #360	; (adr r3, 8010a50 <__ieee754_pow+0xa28>)
 80108e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ea:	f7ef fcef 	bl	80002cc <__adddf3>
 80108ee:	4622      	mov	r2, r4
 80108f0:	462b      	mov	r3, r5
 80108f2:	f7ef fea1 	bl	8000638 <__aeabi_dmul>
 80108f6:	a358      	add	r3, pc, #352	; (adr r3, 8010a58 <__ieee754_pow+0xa30>)
 80108f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fc:	f7ef fce4 	bl	80002c8 <__aeabi_dsub>
 8010900:	4622      	mov	r2, r4
 8010902:	462b      	mov	r3, r5
 8010904:	f7ef fe98 	bl	8000638 <__aeabi_dmul>
 8010908:	a355      	add	r3, pc, #340	; (adr r3, 8010a60 <__ieee754_pow+0xa38>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	f7ef fcdd 	bl	80002cc <__adddf3>
 8010912:	4622      	mov	r2, r4
 8010914:	462b      	mov	r3, r5
 8010916:	f7ef fe8f 	bl	8000638 <__aeabi_dmul>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	f7ef fcd1 	bl	80002c8 <__aeabi_dsub>
 8010926:	4604      	mov	r4, r0
 8010928:	460d      	mov	r5, r1
 801092a:	4602      	mov	r2, r0
 801092c:	460b      	mov	r3, r1
 801092e:	4640      	mov	r0, r8
 8010930:	4649      	mov	r1, r9
 8010932:	f7ef fe81 	bl	8000638 <__aeabi_dmul>
 8010936:	2200      	movs	r2, #0
 8010938:	ec41 0b19 	vmov	d9, r0, r1
 801093c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010940:	4620      	mov	r0, r4
 8010942:	4629      	mov	r1, r5
 8010944:	f7ef fcc0 	bl	80002c8 <__aeabi_dsub>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	ec51 0b19 	vmov	r0, r1, d9
 8010950:	f7ef ff9c 	bl	800088c <__aeabi_ddiv>
 8010954:	4632      	mov	r2, r6
 8010956:	4604      	mov	r4, r0
 8010958:	460d      	mov	r5, r1
 801095a:	463b      	mov	r3, r7
 801095c:	4640      	mov	r0, r8
 801095e:	4649      	mov	r1, r9
 8010960:	f7ef fe6a 	bl	8000638 <__aeabi_dmul>
 8010964:	4632      	mov	r2, r6
 8010966:	463b      	mov	r3, r7
 8010968:	f7ef fcb0 	bl	80002cc <__adddf3>
 801096c:	4602      	mov	r2, r0
 801096e:	460b      	mov	r3, r1
 8010970:	4620      	mov	r0, r4
 8010972:	4629      	mov	r1, r5
 8010974:	f7ef fca8 	bl	80002c8 <__aeabi_dsub>
 8010978:	4642      	mov	r2, r8
 801097a:	464b      	mov	r3, r9
 801097c:	f7ef fca4 	bl	80002c8 <__aeabi_dsub>
 8010980:	460b      	mov	r3, r1
 8010982:	4602      	mov	r2, r0
 8010984:	493a      	ldr	r1, [pc, #232]	; (8010a70 <__ieee754_pow+0xa48>)
 8010986:	2000      	movs	r0, #0
 8010988:	f7ef fc9e 	bl	80002c8 <__aeabi_dsub>
 801098c:	ec41 0b10 	vmov	d0, r0, r1
 8010990:	ee10 3a90 	vmov	r3, s1
 8010994:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801099c:	da2b      	bge.n	80109f6 <__ieee754_pow+0x9ce>
 801099e:	4650      	mov	r0, sl
 80109a0:	f000 fb0a 	bl	8010fb8 <scalbn>
 80109a4:	ec51 0b10 	vmov	r0, r1, d0
 80109a8:	ec53 2b18 	vmov	r2, r3, d8
 80109ac:	f7ff bbed 	b.w	801018a <__ieee754_pow+0x162>
 80109b0:	4b30      	ldr	r3, [pc, #192]	; (8010a74 <__ieee754_pow+0xa4c>)
 80109b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80109b6:	429e      	cmp	r6, r3
 80109b8:	f77f af0c 	ble.w	80107d4 <__ieee754_pow+0x7ac>
 80109bc:	4b2e      	ldr	r3, [pc, #184]	; (8010a78 <__ieee754_pow+0xa50>)
 80109be:	440b      	add	r3, r1
 80109c0:	4303      	orrs	r3, r0
 80109c2:	d009      	beq.n	80109d8 <__ieee754_pow+0x9b0>
 80109c4:	ec51 0b18 	vmov	r0, r1, d8
 80109c8:	2200      	movs	r2, #0
 80109ca:	2300      	movs	r3, #0
 80109cc:	f7f0 f8a6 	bl	8000b1c <__aeabi_dcmplt>
 80109d0:	3800      	subs	r0, #0
 80109d2:	bf18      	it	ne
 80109d4:	2001      	movne	r0, #1
 80109d6:	e447      	b.n	8010268 <__ieee754_pow+0x240>
 80109d8:	4622      	mov	r2, r4
 80109da:	462b      	mov	r3, r5
 80109dc:	f7ef fc74 	bl	80002c8 <__aeabi_dsub>
 80109e0:	4642      	mov	r2, r8
 80109e2:	464b      	mov	r3, r9
 80109e4:	f7f0 f8ae 	bl	8000b44 <__aeabi_dcmpge>
 80109e8:	2800      	cmp	r0, #0
 80109ea:	f43f aef3 	beq.w	80107d4 <__ieee754_pow+0x7ac>
 80109ee:	e7e9      	b.n	80109c4 <__ieee754_pow+0x99c>
 80109f0:	f04f 0a00 	mov.w	sl, #0
 80109f4:	e71a      	b.n	801082c <__ieee754_pow+0x804>
 80109f6:	ec51 0b10 	vmov	r0, r1, d0
 80109fa:	4619      	mov	r1, r3
 80109fc:	e7d4      	b.n	80109a8 <__ieee754_pow+0x980>
 80109fe:	491c      	ldr	r1, [pc, #112]	; (8010a70 <__ieee754_pow+0xa48>)
 8010a00:	2000      	movs	r0, #0
 8010a02:	f7ff bb30 	b.w	8010066 <__ieee754_pow+0x3e>
 8010a06:	2000      	movs	r0, #0
 8010a08:	2100      	movs	r1, #0
 8010a0a:	f7ff bb2c 	b.w	8010066 <__ieee754_pow+0x3e>
 8010a0e:	4630      	mov	r0, r6
 8010a10:	4639      	mov	r1, r7
 8010a12:	f7ff bb28 	b.w	8010066 <__ieee754_pow+0x3e>
 8010a16:	9204      	str	r2, [sp, #16]
 8010a18:	f7ff bb7a 	b.w	8010110 <__ieee754_pow+0xe8>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f7ff bb64 	b.w	80100ea <__ieee754_pow+0xc2>
 8010a22:	bf00      	nop
 8010a24:	f3af 8000 	nop.w
 8010a28:	00000000 	.word	0x00000000
 8010a2c:	3fe62e43 	.word	0x3fe62e43
 8010a30:	fefa39ef 	.word	0xfefa39ef
 8010a34:	3fe62e42 	.word	0x3fe62e42
 8010a38:	0ca86c39 	.word	0x0ca86c39
 8010a3c:	be205c61 	.word	0xbe205c61
 8010a40:	72bea4d0 	.word	0x72bea4d0
 8010a44:	3e663769 	.word	0x3e663769
 8010a48:	c5d26bf1 	.word	0xc5d26bf1
 8010a4c:	3ebbbd41 	.word	0x3ebbbd41
 8010a50:	af25de2c 	.word	0xaf25de2c
 8010a54:	3f11566a 	.word	0x3f11566a
 8010a58:	16bebd93 	.word	0x16bebd93
 8010a5c:	3f66c16c 	.word	0x3f66c16c
 8010a60:	5555553e 	.word	0x5555553e
 8010a64:	3fc55555 	.word	0x3fc55555
 8010a68:	3fe00000 	.word	0x3fe00000
 8010a6c:	000fffff 	.word	0x000fffff
 8010a70:	3ff00000 	.word	0x3ff00000
 8010a74:	4090cbff 	.word	0x4090cbff
 8010a78:	3f6f3400 	.word	0x3f6f3400
 8010a7c:	652b82fe 	.word	0x652b82fe
 8010a80:	3c971547 	.word	0x3c971547

08010a84 <__ieee754_sqrt>:
 8010a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a88:	ec55 4b10 	vmov	r4, r5, d0
 8010a8c:	4e55      	ldr	r6, [pc, #340]	; (8010be4 <__ieee754_sqrt+0x160>)
 8010a8e:	43ae      	bics	r6, r5
 8010a90:	ee10 0a10 	vmov	r0, s0
 8010a94:	ee10 3a10 	vmov	r3, s0
 8010a98:	462a      	mov	r2, r5
 8010a9a:	4629      	mov	r1, r5
 8010a9c:	d110      	bne.n	8010ac0 <__ieee754_sqrt+0x3c>
 8010a9e:	ee10 2a10 	vmov	r2, s0
 8010aa2:	462b      	mov	r3, r5
 8010aa4:	f7ef fdc8 	bl	8000638 <__aeabi_dmul>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4620      	mov	r0, r4
 8010aae:	4629      	mov	r1, r5
 8010ab0:	f7ef fc0c 	bl	80002cc <__adddf3>
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	460d      	mov	r5, r1
 8010ab8:	ec45 4b10 	vmov	d0, r4, r5
 8010abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac0:	2d00      	cmp	r5, #0
 8010ac2:	dc10      	bgt.n	8010ae6 <__ieee754_sqrt+0x62>
 8010ac4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ac8:	4330      	orrs	r0, r6
 8010aca:	d0f5      	beq.n	8010ab8 <__ieee754_sqrt+0x34>
 8010acc:	b15d      	cbz	r5, 8010ae6 <__ieee754_sqrt+0x62>
 8010ace:	ee10 2a10 	vmov	r2, s0
 8010ad2:	462b      	mov	r3, r5
 8010ad4:	ee10 0a10 	vmov	r0, s0
 8010ad8:	f7ef fbf6 	bl	80002c8 <__aeabi_dsub>
 8010adc:	4602      	mov	r2, r0
 8010ade:	460b      	mov	r3, r1
 8010ae0:	f7ef fed4 	bl	800088c <__aeabi_ddiv>
 8010ae4:	e7e6      	b.n	8010ab4 <__ieee754_sqrt+0x30>
 8010ae6:	1512      	asrs	r2, r2, #20
 8010ae8:	d074      	beq.n	8010bd4 <__ieee754_sqrt+0x150>
 8010aea:	07d4      	lsls	r4, r2, #31
 8010aec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010af0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010af8:	bf5e      	ittt	pl
 8010afa:	0fda      	lsrpl	r2, r3, #31
 8010afc:	005b      	lslpl	r3, r3, #1
 8010afe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010b02:	2400      	movs	r4, #0
 8010b04:	0fda      	lsrs	r2, r3, #31
 8010b06:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010b0a:	107f      	asrs	r7, r7, #1
 8010b0c:	005b      	lsls	r3, r3, #1
 8010b0e:	2516      	movs	r5, #22
 8010b10:	4620      	mov	r0, r4
 8010b12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010b16:	1886      	adds	r6, r0, r2
 8010b18:	428e      	cmp	r6, r1
 8010b1a:	bfde      	ittt	le
 8010b1c:	1b89      	suble	r1, r1, r6
 8010b1e:	18b0      	addle	r0, r6, r2
 8010b20:	18a4      	addle	r4, r4, r2
 8010b22:	0049      	lsls	r1, r1, #1
 8010b24:	3d01      	subs	r5, #1
 8010b26:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010b2a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010b2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b32:	d1f0      	bne.n	8010b16 <__ieee754_sqrt+0x92>
 8010b34:	462a      	mov	r2, r5
 8010b36:	f04f 0e20 	mov.w	lr, #32
 8010b3a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010b3e:	4281      	cmp	r1, r0
 8010b40:	eb06 0c05 	add.w	ip, r6, r5
 8010b44:	dc02      	bgt.n	8010b4c <__ieee754_sqrt+0xc8>
 8010b46:	d113      	bne.n	8010b70 <__ieee754_sqrt+0xec>
 8010b48:	459c      	cmp	ip, r3
 8010b4a:	d811      	bhi.n	8010b70 <__ieee754_sqrt+0xec>
 8010b4c:	f1bc 0f00 	cmp.w	ip, #0
 8010b50:	eb0c 0506 	add.w	r5, ip, r6
 8010b54:	da43      	bge.n	8010bde <__ieee754_sqrt+0x15a>
 8010b56:	2d00      	cmp	r5, #0
 8010b58:	db41      	blt.n	8010bde <__ieee754_sqrt+0x15a>
 8010b5a:	f100 0801 	add.w	r8, r0, #1
 8010b5e:	1a09      	subs	r1, r1, r0
 8010b60:	459c      	cmp	ip, r3
 8010b62:	bf88      	it	hi
 8010b64:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010b68:	eba3 030c 	sub.w	r3, r3, ip
 8010b6c:	4432      	add	r2, r6
 8010b6e:	4640      	mov	r0, r8
 8010b70:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010b74:	f1be 0e01 	subs.w	lr, lr, #1
 8010b78:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010b84:	d1db      	bne.n	8010b3e <__ieee754_sqrt+0xba>
 8010b86:	430b      	orrs	r3, r1
 8010b88:	d006      	beq.n	8010b98 <__ieee754_sqrt+0x114>
 8010b8a:	1c50      	adds	r0, r2, #1
 8010b8c:	bf13      	iteet	ne
 8010b8e:	3201      	addne	r2, #1
 8010b90:	3401      	addeq	r4, #1
 8010b92:	4672      	moveq	r2, lr
 8010b94:	f022 0201 	bicne.w	r2, r2, #1
 8010b98:	1063      	asrs	r3, r4, #1
 8010b9a:	0852      	lsrs	r2, r2, #1
 8010b9c:	07e1      	lsls	r1, r4, #31
 8010b9e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010ba2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010ba6:	bf48      	it	mi
 8010ba8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010bac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010bb0:	4614      	mov	r4, r2
 8010bb2:	e781      	b.n	8010ab8 <__ieee754_sqrt+0x34>
 8010bb4:	0ad9      	lsrs	r1, r3, #11
 8010bb6:	3815      	subs	r0, #21
 8010bb8:	055b      	lsls	r3, r3, #21
 8010bba:	2900      	cmp	r1, #0
 8010bbc:	d0fa      	beq.n	8010bb4 <__ieee754_sqrt+0x130>
 8010bbe:	02cd      	lsls	r5, r1, #11
 8010bc0:	d50a      	bpl.n	8010bd8 <__ieee754_sqrt+0x154>
 8010bc2:	f1c2 0420 	rsb	r4, r2, #32
 8010bc6:	fa23 f404 	lsr.w	r4, r3, r4
 8010bca:	1e55      	subs	r5, r2, #1
 8010bcc:	4093      	lsls	r3, r2
 8010bce:	4321      	orrs	r1, r4
 8010bd0:	1b42      	subs	r2, r0, r5
 8010bd2:	e78a      	b.n	8010aea <__ieee754_sqrt+0x66>
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	e7f0      	b.n	8010bba <__ieee754_sqrt+0x136>
 8010bd8:	0049      	lsls	r1, r1, #1
 8010bda:	3201      	adds	r2, #1
 8010bdc:	e7ef      	b.n	8010bbe <__ieee754_sqrt+0x13a>
 8010bde:	4680      	mov	r8, r0
 8010be0:	e7bd      	b.n	8010b5e <__ieee754_sqrt+0xda>
 8010be2:	bf00      	nop
 8010be4:	7ff00000 	.word	0x7ff00000

08010be8 <__ieee754_sqrtf>:
 8010be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010bec:	4770      	bx	lr

08010bee <with_errno>:
 8010bee:	b570      	push	{r4, r5, r6, lr}
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	460d      	mov	r5, r1
 8010bf4:	4616      	mov	r6, r2
 8010bf6:	f7f9 fab9 	bl	800a16c <__errno>
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	6006      	str	r6, [r0, #0]
 8010bfe:	4620      	mov	r0, r4
 8010c00:	bd70      	pop	{r4, r5, r6, pc}

08010c02 <xflow>:
 8010c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c04:	4614      	mov	r4, r2
 8010c06:	461d      	mov	r5, r3
 8010c08:	b108      	cbz	r0, 8010c0e <xflow+0xc>
 8010c0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8010c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c16:	4620      	mov	r0, r4
 8010c18:	4629      	mov	r1, r5
 8010c1a:	f7ef fd0d 	bl	8000638 <__aeabi_dmul>
 8010c1e:	2222      	movs	r2, #34	; 0x22
 8010c20:	b003      	add	sp, #12
 8010c22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c26:	f7ff bfe2 	b.w	8010bee <with_errno>

08010c2a <__math_uflow>:
 8010c2a:	b508      	push	{r3, lr}
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010c32:	f7ff ffe6 	bl	8010c02 <xflow>
 8010c36:	ec41 0b10 	vmov	d0, r0, r1
 8010c3a:	bd08      	pop	{r3, pc}

08010c3c <__math_oflow>:
 8010c3c:	b508      	push	{r3, lr}
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010c44:	f7ff ffdd 	bl	8010c02 <xflow>
 8010c48:	ec41 0b10 	vmov	d0, r0, r1
 8010c4c:	bd08      	pop	{r3, pc}
	...

08010c50 <atan>:
 8010c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c54:	ec55 4b10 	vmov	r4, r5, d0
 8010c58:	4bc3      	ldr	r3, [pc, #780]	; (8010f68 <atan+0x318>)
 8010c5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010c5e:	429e      	cmp	r6, r3
 8010c60:	46ab      	mov	fp, r5
 8010c62:	dd18      	ble.n	8010c96 <atan+0x46>
 8010c64:	4bc1      	ldr	r3, [pc, #772]	; (8010f6c <atan+0x31c>)
 8010c66:	429e      	cmp	r6, r3
 8010c68:	dc01      	bgt.n	8010c6e <atan+0x1e>
 8010c6a:	d109      	bne.n	8010c80 <atan+0x30>
 8010c6c:	b144      	cbz	r4, 8010c80 <atan+0x30>
 8010c6e:	4622      	mov	r2, r4
 8010c70:	462b      	mov	r3, r5
 8010c72:	4620      	mov	r0, r4
 8010c74:	4629      	mov	r1, r5
 8010c76:	f7ef fb29 	bl	80002cc <__adddf3>
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	460d      	mov	r5, r1
 8010c7e:	e006      	b.n	8010c8e <atan+0x3e>
 8010c80:	f1bb 0f00 	cmp.w	fp, #0
 8010c84:	f300 8131 	bgt.w	8010eea <atan+0x29a>
 8010c88:	a59b      	add	r5, pc, #620	; (adr r5, 8010ef8 <atan+0x2a8>)
 8010c8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c8e:	ec45 4b10 	vmov	d0, r4, r5
 8010c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c96:	4bb6      	ldr	r3, [pc, #728]	; (8010f70 <atan+0x320>)
 8010c98:	429e      	cmp	r6, r3
 8010c9a:	dc14      	bgt.n	8010cc6 <atan+0x76>
 8010c9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010ca0:	429e      	cmp	r6, r3
 8010ca2:	dc0d      	bgt.n	8010cc0 <atan+0x70>
 8010ca4:	a396      	add	r3, pc, #600	; (adr r3, 8010f00 <atan+0x2b0>)
 8010ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010caa:	ee10 0a10 	vmov	r0, s0
 8010cae:	4629      	mov	r1, r5
 8010cb0:	f7ef fb0c 	bl	80002cc <__adddf3>
 8010cb4:	4baf      	ldr	r3, [pc, #700]	; (8010f74 <atan+0x324>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f7ef ff4e 	bl	8000b58 <__aeabi_dcmpgt>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d1e6      	bne.n	8010c8e <atan+0x3e>
 8010cc0:	f04f 3aff 	mov.w	sl, #4294967295
 8010cc4:	e02b      	b.n	8010d1e <atan+0xce>
 8010cc6:	f000 f963 	bl	8010f90 <fabs>
 8010cca:	4bab      	ldr	r3, [pc, #684]	; (8010f78 <atan+0x328>)
 8010ccc:	429e      	cmp	r6, r3
 8010cce:	ec55 4b10 	vmov	r4, r5, d0
 8010cd2:	f300 80bf 	bgt.w	8010e54 <atan+0x204>
 8010cd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010cda:	429e      	cmp	r6, r3
 8010cdc:	f300 80a0 	bgt.w	8010e20 <atan+0x1d0>
 8010ce0:	ee10 2a10 	vmov	r2, s0
 8010ce4:	ee10 0a10 	vmov	r0, s0
 8010ce8:	462b      	mov	r3, r5
 8010cea:	4629      	mov	r1, r5
 8010cec:	f7ef faee 	bl	80002cc <__adddf3>
 8010cf0:	4ba0      	ldr	r3, [pc, #640]	; (8010f74 <atan+0x324>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f7ef fae8 	bl	80002c8 <__aeabi_dsub>
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	4606      	mov	r6, r0
 8010cfc:	460f      	mov	r7, r1
 8010cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d02:	4620      	mov	r0, r4
 8010d04:	4629      	mov	r1, r5
 8010d06:	f7ef fae1 	bl	80002cc <__adddf3>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	4630      	mov	r0, r6
 8010d10:	4639      	mov	r1, r7
 8010d12:	f7ef fdbb 	bl	800088c <__aeabi_ddiv>
 8010d16:	f04f 0a00 	mov.w	sl, #0
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	460d      	mov	r5, r1
 8010d1e:	4622      	mov	r2, r4
 8010d20:	462b      	mov	r3, r5
 8010d22:	4620      	mov	r0, r4
 8010d24:	4629      	mov	r1, r5
 8010d26:	f7ef fc87 	bl	8000638 <__aeabi_dmul>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	4680      	mov	r8, r0
 8010d30:	4689      	mov	r9, r1
 8010d32:	f7ef fc81 	bl	8000638 <__aeabi_dmul>
 8010d36:	a374      	add	r3, pc, #464	; (adr r3, 8010f08 <atan+0x2b8>)
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	4606      	mov	r6, r0
 8010d3e:	460f      	mov	r7, r1
 8010d40:	f7ef fc7a 	bl	8000638 <__aeabi_dmul>
 8010d44:	a372      	add	r3, pc, #456	; (adr r3, 8010f10 <atan+0x2c0>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	f7ef fabf 	bl	80002cc <__adddf3>
 8010d4e:	4632      	mov	r2, r6
 8010d50:	463b      	mov	r3, r7
 8010d52:	f7ef fc71 	bl	8000638 <__aeabi_dmul>
 8010d56:	a370      	add	r3, pc, #448	; (adr r3, 8010f18 <atan+0x2c8>)
 8010d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5c:	f7ef fab6 	bl	80002cc <__adddf3>
 8010d60:	4632      	mov	r2, r6
 8010d62:	463b      	mov	r3, r7
 8010d64:	f7ef fc68 	bl	8000638 <__aeabi_dmul>
 8010d68:	a36d      	add	r3, pc, #436	; (adr r3, 8010f20 <atan+0x2d0>)
 8010d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6e:	f7ef faad 	bl	80002cc <__adddf3>
 8010d72:	4632      	mov	r2, r6
 8010d74:	463b      	mov	r3, r7
 8010d76:	f7ef fc5f 	bl	8000638 <__aeabi_dmul>
 8010d7a:	a36b      	add	r3, pc, #428	; (adr r3, 8010f28 <atan+0x2d8>)
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	f7ef faa4 	bl	80002cc <__adddf3>
 8010d84:	4632      	mov	r2, r6
 8010d86:	463b      	mov	r3, r7
 8010d88:	f7ef fc56 	bl	8000638 <__aeabi_dmul>
 8010d8c:	a368      	add	r3, pc, #416	; (adr r3, 8010f30 <atan+0x2e0>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fa9b 	bl	80002cc <__adddf3>
 8010d96:	4642      	mov	r2, r8
 8010d98:	464b      	mov	r3, r9
 8010d9a:	f7ef fc4d 	bl	8000638 <__aeabi_dmul>
 8010d9e:	a366      	add	r3, pc, #408	; (adr r3, 8010f38 <atan+0x2e8>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	4680      	mov	r8, r0
 8010da6:	4689      	mov	r9, r1
 8010da8:	4630      	mov	r0, r6
 8010daa:	4639      	mov	r1, r7
 8010dac:	f7ef fc44 	bl	8000638 <__aeabi_dmul>
 8010db0:	a363      	add	r3, pc, #396	; (adr r3, 8010f40 <atan+0x2f0>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	f7ef fa87 	bl	80002c8 <__aeabi_dsub>
 8010dba:	4632      	mov	r2, r6
 8010dbc:	463b      	mov	r3, r7
 8010dbe:	f7ef fc3b 	bl	8000638 <__aeabi_dmul>
 8010dc2:	a361      	add	r3, pc, #388	; (adr r3, 8010f48 <atan+0x2f8>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	f7ef fa7e 	bl	80002c8 <__aeabi_dsub>
 8010dcc:	4632      	mov	r2, r6
 8010dce:	463b      	mov	r3, r7
 8010dd0:	f7ef fc32 	bl	8000638 <__aeabi_dmul>
 8010dd4:	a35e      	add	r3, pc, #376	; (adr r3, 8010f50 <atan+0x300>)
 8010dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dda:	f7ef fa75 	bl	80002c8 <__aeabi_dsub>
 8010dde:	4632      	mov	r2, r6
 8010de0:	463b      	mov	r3, r7
 8010de2:	f7ef fc29 	bl	8000638 <__aeabi_dmul>
 8010de6:	a35c      	add	r3, pc, #368	; (adr r3, 8010f58 <atan+0x308>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	f7ef fa6c 	bl	80002c8 <__aeabi_dsub>
 8010df0:	4632      	mov	r2, r6
 8010df2:	463b      	mov	r3, r7
 8010df4:	f7ef fc20 	bl	8000638 <__aeabi_dmul>
 8010df8:	4602      	mov	r2, r0
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	4640      	mov	r0, r8
 8010dfe:	4649      	mov	r1, r9
 8010e00:	f7ef fa64 	bl	80002cc <__adddf3>
 8010e04:	4622      	mov	r2, r4
 8010e06:	462b      	mov	r3, r5
 8010e08:	f7ef fc16 	bl	8000638 <__aeabi_dmul>
 8010e0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010e10:	4602      	mov	r2, r0
 8010e12:	460b      	mov	r3, r1
 8010e14:	d14b      	bne.n	8010eae <atan+0x25e>
 8010e16:	4620      	mov	r0, r4
 8010e18:	4629      	mov	r1, r5
 8010e1a:	f7ef fa55 	bl	80002c8 <__aeabi_dsub>
 8010e1e:	e72c      	b.n	8010c7a <atan+0x2a>
 8010e20:	ee10 0a10 	vmov	r0, s0
 8010e24:	4b53      	ldr	r3, [pc, #332]	; (8010f74 <atan+0x324>)
 8010e26:	2200      	movs	r2, #0
 8010e28:	4629      	mov	r1, r5
 8010e2a:	f7ef fa4d 	bl	80002c8 <__aeabi_dsub>
 8010e2e:	4b51      	ldr	r3, [pc, #324]	; (8010f74 <atan+0x324>)
 8010e30:	4606      	mov	r6, r0
 8010e32:	460f      	mov	r7, r1
 8010e34:	2200      	movs	r2, #0
 8010e36:	4620      	mov	r0, r4
 8010e38:	4629      	mov	r1, r5
 8010e3a:	f7ef fa47 	bl	80002cc <__adddf3>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	4630      	mov	r0, r6
 8010e44:	4639      	mov	r1, r7
 8010e46:	f7ef fd21 	bl	800088c <__aeabi_ddiv>
 8010e4a:	f04f 0a01 	mov.w	sl, #1
 8010e4e:	4604      	mov	r4, r0
 8010e50:	460d      	mov	r5, r1
 8010e52:	e764      	b.n	8010d1e <atan+0xce>
 8010e54:	4b49      	ldr	r3, [pc, #292]	; (8010f7c <atan+0x32c>)
 8010e56:	429e      	cmp	r6, r3
 8010e58:	da1d      	bge.n	8010e96 <atan+0x246>
 8010e5a:	ee10 0a10 	vmov	r0, s0
 8010e5e:	4b48      	ldr	r3, [pc, #288]	; (8010f80 <atan+0x330>)
 8010e60:	2200      	movs	r2, #0
 8010e62:	4629      	mov	r1, r5
 8010e64:	f7ef fa30 	bl	80002c8 <__aeabi_dsub>
 8010e68:	4b45      	ldr	r3, [pc, #276]	; (8010f80 <atan+0x330>)
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	460f      	mov	r7, r1
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4620      	mov	r0, r4
 8010e72:	4629      	mov	r1, r5
 8010e74:	f7ef fbe0 	bl	8000638 <__aeabi_dmul>
 8010e78:	4b3e      	ldr	r3, [pc, #248]	; (8010f74 <atan+0x324>)
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f7ef fa26 	bl	80002cc <__adddf3>
 8010e80:	4602      	mov	r2, r0
 8010e82:	460b      	mov	r3, r1
 8010e84:	4630      	mov	r0, r6
 8010e86:	4639      	mov	r1, r7
 8010e88:	f7ef fd00 	bl	800088c <__aeabi_ddiv>
 8010e8c:	f04f 0a02 	mov.w	sl, #2
 8010e90:	4604      	mov	r4, r0
 8010e92:	460d      	mov	r5, r1
 8010e94:	e743      	b.n	8010d1e <atan+0xce>
 8010e96:	462b      	mov	r3, r5
 8010e98:	ee10 2a10 	vmov	r2, s0
 8010e9c:	4939      	ldr	r1, [pc, #228]	; (8010f84 <atan+0x334>)
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	f7ef fcf4 	bl	800088c <__aeabi_ddiv>
 8010ea4:	f04f 0a03 	mov.w	sl, #3
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	460d      	mov	r5, r1
 8010eac:	e737      	b.n	8010d1e <atan+0xce>
 8010eae:	4b36      	ldr	r3, [pc, #216]	; (8010f88 <atan+0x338>)
 8010eb0:	4e36      	ldr	r6, [pc, #216]	; (8010f8c <atan+0x33c>)
 8010eb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010eb6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010eba:	e9da 2300 	ldrd	r2, r3, [sl]
 8010ebe:	f7ef fa03 	bl	80002c8 <__aeabi_dsub>
 8010ec2:	4622      	mov	r2, r4
 8010ec4:	462b      	mov	r3, r5
 8010ec6:	f7ef f9ff 	bl	80002c8 <__aeabi_dsub>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	460b      	mov	r3, r1
 8010ece:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010ed2:	f7ef f9f9 	bl	80002c8 <__aeabi_dsub>
 8010ed6:	f1bb 0f00 	cmp.w	fp, #0
 8010eda:	4604      	mov	r4, r0
 8010edc:	460d      	mov	r5, r1
 8010ede:	f6bf aed6 	bge.w	8010c8e <atan+0x3e>
 8010ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ee6:	461d      	mov	r5, r3
 8010ee8:	e6d1      	b.n	8010c8e <atan+0x3e>
 8010eea:	a51d      	add	r5, pc, #116	; (adr r5, 8010f60 <atan+0x310>)
 8010eec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ef0:	e6cd      	b.n	8010c8e <atan+0x3e>
 8010ef2:	bf00      	nop
 8010ef4:	f3af 8000 	nop.w
 8010ef8:	54442d18 	.word	0x54442d18
 8010efc:	bff921fb 	.word	0xbff921fb
 8010f00:	8800759c 	.word	0x8800759c
 8010f04:	7e37e43c 	.word	0x7e37e43c
 8010f08:	e322da11 	.word	0xe322da11
 8010f0c:	3f90ad3a 	.word	0x3f90ad3a
 8010f10:	24760deb 	.word	0x24760deb
 8010f14:	3fa97b4b 	.word	0x3fa97b4b
 8010f18:	a0d03d51 	.word	0xa0d03d51
 8010f1c:	3fb10d66 	.word	0x3fb10d66
 8010f20:	c54c206e 	.word	0xc54c206e
 8010f24:	3fb745cd 	.word	0x3fb745cd
 8010f28:	920083ff 	.word	0x920083ff
 8010f2c:	3fc24924 	.word	0x3fc24924
 8010f30:	5555550d 	.word	0x5555550d
 8010f34:	3fd55555 	.word	0x3fd55555
 8010f38:	2c6a6c2f 	.word	0x2c6a6c2f
 8010f3c:	bfa2b444 	.word	0xbfa2b444
 8010f40:	52defd9a 	.word	0x52defd9a
 8010f44:	3fadde2d 	.word	0x3fadde2d
 8010f48:	af749a6d 	.word	0xaf749a6d
 8010f4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010f50:	fe231671 	.word	0xfe231671
 8010f54:	3fbc71c6 	.word	0x3fbc71c6
 8010f58:	9998ebc4 	.word	0x9998ebc4
 8010f5c:	3fc99999 	.word	0x3fc99999
 8010f60:	54442d18 	.word	0x54442d18
 8010f64:	3ff921fb 	.word	0x3ff921fb
 8010f68:	440fffff 	.word	0x440fffff
 8010f6c:	7ff00000 	.word	0x7ff00000
 8010f70:	3fdbffff 	.word	0x3fdbffff
 8010f74:	3ff00000 	.word	0x3ff00000
 8010f78:	3ff2ffff 	.word	0x3ff2ffff
 8010f7c:	40038000 	.word	0x40038000
 8010f80:	3ff80000 	.word	0x3ff80000
 8010f84:	bff00000 	.word	0xbff00000
 8010f88:	080116e8 	.word	0x080116e8
 8010f8c:	080116c8 	.word	0x080116c8

08010f90 <fabs>:
 8010f90:	ec51 0b10 	vmov	r0, r1, d0
 8010f94:	ee10 2a10 	vmov	r2, s0
 8010f98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f9c:	ec43 2b10 	vmov	d0, r2, r3
 8010fa0:	4770      	bx	lr

08010fa2 <finite>:
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	ed8d 0b00 	vstr	d0, [sp]
 8010fa8:	9801      	ldr	r0, [sp, #4]
 8010faa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010fae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010fb2:	0fc0      	lsrs	r0, r0, #31
 8010fb4:	b002      	add	sp, #8
 8010fb6:	4770      	bx	lr

08010fb8 <scalbn>:
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	ec55 4b10 	vmov	r4, r5, d0
 8010fbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	b99a      	cbnz	r2, 8010ff0 <scalbn+0x38>
 8010fc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010fcc:	4323      	orrs	r3, r4
 8010fce:	d036      	beq.n	801103e <scalbn+0x86>
 8010fd0:	4b39      	ldr	r3, [pc, #228]	; (80110b8 <scalbn+0x100>)
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	ee10 0a10 	vmov	r0, s0
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f7ef fb2d 	bl	8000638 <__aeabi_dmul>
 8010fde:	4b37      	ldr	r3, [pc, #220]	; (80110bc <scalbn+0x104>)
 8010fe0:	429e      	cmp	r6, r3
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	da10      	bge.n	801100a <scalbn+0x52>
 8010fe8:	a32b      	add	r3, pc, #172	; (adr r3, 8011098 <scalbn+0xe0>)
 8010fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fee:	e03a      	b.n	8011066 <scalbn+0xae>
 8010ff0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010ff4:	428a      	cmp	r2, r1
 8010ff6:	d10c      	bne.n	8011012 <scalbn+0x5a>
 8010ff8:	ee10 2a10 	vmov	r2, s0
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	4629      	mov	r1, r5
 8011000:	f7ef f964 	bl	80002cc <__adddf3>
 8011004:	4604      	mov	r4, r0
 8011006:	460d      	mov	r5, r1
 8011008:	e019      	b.n	801103e <scalbn+0x86>
 801100a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801100e:	460b      	mov	r3, r1
 8011010:	3a36      	subs	r2, #54	; 0x36
 8011012:	4432      	add	r2, r6
 8011014:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011018:	428a      	cmp	r2, r1
 801101a:	dd08      	ble.n	801102e <scalbn+0x76>
 801101c:	2d00      	cmp	r5, #0
 801101e:	a120      	add	r1, pc, #128	; (adr r1, 80110a0 <scalbn+0xe8>)
 8011020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011024:	da1c      	bge.n	8011060 <scalbn+0xa8>
 8011026:	a120      	add	r1, pc, #128	; (adr r1, 80110a8 <scalbn+0xf0>)
 8011028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801102c:	e018      	b.n	8011060 <scalbn+0xa8>
 801102e:	2a00      	cmp	r2, #0
 8011030:	dd08      	ble.n	8011044 <scalbn+0x8c>
 8011032:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011036:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801103a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801103e:	ec45 4b10 	vmov	d0, r4, r5
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011048:	da19      	bge.n	801107e <scalbn+0xc6>
 801104a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801104e:	429e      	cmp	r6, r3
 8011050:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011054:	dd0a      	ble.n	801106c <scalbn+0xb4>
 8011056:	a112      	add	r1, pc, #72	; (adr r1, 80110a0 <scalbn+0xe8>)
 8011058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1e2      	bne.n	8011026 <scalbn+0x6e>
 8011060:	a30f      	add	r3, pc, #60	; (adr r3, 80110a0 <scalbn+0xe8>)
 8011062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011066:	f7ef fae7 	bl	8000638 <__aeabi_dmul>
 801106a:	e7cb      	b.n	8011004 <scalbn+0x4c>
 801106c:	a10a      	add	r1, pc, #40	; (adr r1, 8011098 <scalbn+0xe0>)
 801106e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d0b8      	beq.n	8010fe8 <scalbn+0x30>
 8011076:	a10e      	add	r1, pc, #56	; (adr r1, 80110b0 <scalbn+0xf8>)
 8011078:	e9d1 0100 	ldrd	r0, r1, [r1]
 801107c:	e7b4      	b.n	8010fe8 <scalbn+0x30>
 801107e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011082:	3236      	adds	r2, #54	; 0x36
 8011084:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011088:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801108c:	4620      	mov	r0, r4
 801108e:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <scalbn+0x108>)
 8011090:	2200      	movs	r2, #0
 8011092:	e7e8      	b.n	8011066 <scalbn+0xae>
 8011094:	f3af 8000 	nop.w
 8011098:	c2f8f359 	.word	0xc2f8f359
 801109c:	01a56e1f 	.word	0x01a56e1f
 80110a0:	8800759c 	.word	0x8800759c
 80110a4:	7e37e43c 	.word	0x7e37e43c
 80110a8:	8800759c 	.word	0x8800759c
 80110ac:	fe37e43c 	.word	0xfe37e43c
 80110b0:	c2f8f359 	.word	0xc2f8f359
 80110b4:	81a56e1f 	.word	0x81a56e1f
 80110b8:	43500000 	.word	0x43500000
 80110bc:	ffff3cb0 	.word	0xffff3cb0
 80110c0:	3c900000 	.word	0x3c900000

080110c4 <_init>:
 80110c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c6:	bf00      	nop
 80110c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ca:	bc08      	pop	{r3}
 80110cc:	469e      	mov	lr, r3
 80110ce:	4770      	bx	lr

080110d0 <_fini>:
 80110d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d2:	bf00      	nop
 80110d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110d6:	bc08      	pop	{r3}
 80110d8:	469e      	mov	lr, r3
 80110da:	4770      	bx	lr
