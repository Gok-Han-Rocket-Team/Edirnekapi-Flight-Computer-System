
edirnekapi_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011224  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080113f8  080113f8  000213f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a00  08011a00  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011a00  08011a00  00021a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a08  08011a08  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a08  08011a08  00021a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a0c  08011a0c  00021a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011a10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  200001e8  08011bf8  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  08011bf8  00031220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b3  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c1  00000000  00000000  00044acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00047d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00048c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263a9  00000000  00000000  00049930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016780  00000000  00000000  0006fcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbc3d  00000000  00000000  00086459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  001620e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080113dc 	.word	0x080113dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080113dc 	.word	0x080113dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9f5 	b.w	80012f0 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9aa 	b.w	80012f0 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468e      	mov	lr, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d14d      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102e:	428a      	cmp	r2, r1
 8001030:	4694      	mov	ip, r2
 8001032:	d969      	bls.n	8001108 <__udivmoddi4+0xe8>
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b152      	cbz	r2, 8001050 <__udivmoddi4+0x30>
 800103a:	fa01 f302 	lsl.w	r3, r1, r2
 800103e:	f1c2 0120 	rsb	r1, r2, #32
 8001042:	fa20 f101 	lsr.w	r1, r0, r1
 8001046:	fa0c fc02 	lsl.w	ip, ip, r2
 800104a:	ea41 0e03 	orr.w	lr, r1, r3
 800104e:	4094      	lsls	r4, r2
 8001050:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001054:	0c21      	lsrs	r1, r4, #16
 8001056:	fbbe f6f8 	udiv	r6, lr, r8
 800105a:	fa1f f78c 	uxth.w	r7, ip
 800105e:	fb08 e316 	mls	r3, r8, r6, lr
 8001062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001066:	fb06 f107 	mul.w	r1, r6, r7
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f106 30ff 	add.w	r0, r6, #4294967295
 8001076:	f080 811f 	bcs.w	80012b8 <__udivmoddi4+0x298>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 811c 	bls.w	80012b8 <__udivmoddi4+0x298>
 8001080:	3e02      	subs	r6, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	b2a4      	uxth	r4, r4
 8001088:	fbb3 f0f8 	udiv	r0, r3, r8
 800108c:	fb08 3310 	mls	r3, r8, r0, r3
 8001090:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001094:	fb00 f707 	mul.w	r7, r0, r7
 8001098:	42a7      	cmp	r7, r4
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x92>
 800109c:	eb1c 0404 	adds.w	r4, ip, r4
 80010a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010a4:	f080 810a 	bcs.w	80012bc <__udivmoddi4+0x29c>
 80010a8:	42a7      	cmp	r7, r4
 80010aa:	f240 8107 	bls.w	80012bc <__udivmoddi4+0x29c>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b6:	1be4      	subs	r4, r4, r7
 80010b8:	2600      	movs	r6, #0
 80010ba:	b11d      	cbz	r5, 80010c4 <__udivmoddi4+0xa4>
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	2300      	movs	r3, #0
 80010c0:	e9c5 4300 	strd	r4, r3, [r5]
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d909      	bls.n	80010e2 <__udivmoddi4+0xc2>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	f000 80ef 	beq.w	80012b2 <__udivmoddi4+0x292>
 80010d4:	2600      	movs	r6, #0
 80010d6:	e9c5 0100 	strd	r0, r1, [r5]
 80010da:	4630      	mov	r0, r6
 80010dc:	4631      	mov	r1, r6
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e2:	fab3 f683 	clz	r6, r3
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d14a      	bne.n	8001180 <__udivmoddi4+0x160>
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d302      	bcc.n	80010f4 <__udivmoddi4+0xd4>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	f200 80f9 	bhi.w	80012e6 <__udivmoddi4+0x2c6>
 80010f4:	1a84      	subs	r4, r0, r2
 80010f6:	eb61 0303 	sbc.w	r3, r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	469e      	mov	lr, r3
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d0e0      	beq.n	80010c4 <__udivmoddi4+0xa4>
 8001102:	e9c5 4e00 	strd	r4, lr, [r5]
 8001106:	e7dd      	b.n	80010c4 <__udivmoddi4+0xa4>
 8001108:	b902      	cbnz	r2, 800110c <__udivmoddi4+0xec>
 800110a:	deff      	udf	#255	; 0xff
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 8092 	bne.w	800123a <__udivmoddi4+0x21a>
 8001116:	eba1 010c 	sub.w	r1, r1, ip
 800111a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	2601      	movs	r6, #1
 8001124:	0c20      	lsrs	r0, r4, #16
 8001126:	fbb1 f3f7 	udiv	r3, r1, r7
 800112a:	fb07 1113 	mls	r1, r7, r3, r1
 800112e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001132:	fb0e f003 	mul.w	r0, lr, r3
 8001136:	4288      	cmp	r0, r1
 8001138:	d908      	bls.n	800114c <__udivmoddi4+0x12c>
 800113a:	eb1c 0101 	adds.w	r1, ip, r1
 800113e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001142:	d202      	bcs.n	800114a <__udivmoddi4+0x12a>
 8001144:	4288      	cmp	r0, r1
 8001146:	f200 80cb 	bhi.w	80012e0 <__udivmoddi4+0x2c0>
 800114a:	4643      	mov	r3, r8
 800114c:	1a09      	subs	r1, r1, r0
 800114e:	b2a4      	uxth	r4, r4
 8001150:	fbb1 f0f7 	udiv	r0, r1, r7
 8001154:	fb07 1110 	mls	r1, r7, r0, r1
 8001158:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800115c:	fb0e fe00 	mul.w	lr, lr, r0
 8001160:	45a6      	cmp	lr, r4
 8001162:	d908      	bls.n	8001176 <__udivmoddi4+0x156>
 8001164:	eb1c 0404 	adds.w	r4, ip, r4
 8001168:	f100 31ff 	add.w	r1, r0, #4294967295
 800116c:	d202      	bcs.n	8001174 <__udivmoddi4+0x154>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f200 80bb 	bhi.w	80012ea <__udivmoddi4+0x2ca>
 8001174:	4608      	mov	r0, r1
 8001176:	eba4 040e 	sub.w	r4, r4, lr
 800117a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800117e:	e79c      	b.n	80010ba <__udivmoddi4+0x9a>
 8001180:	f1c6 0720 	rsb	r7, r6, #32
 8001184:	40b3      	lsls	r3, r6
 8001186:	fa22 fc07 	lsr.w	ip, r2, r7
 800118a:	ea4c 0c03 	orr.w	ip, ip, r3
 800118e:	fa20 f407 	lsr.w	r4, r0, r7
 8001192:	fa01 f306 	lsl.w	r3, r1, r6
 8001196:	431c      	orrs	r4, r3
 8001198:	40f9      	lsrs	r1, r7
 800119a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800119e:	fa00 f306 	lsl.w	r3, r0, r6
 80011a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80011a6:	0c20      	lsrs	r0, r4, #16
 80011a8:	fa1f fe8c 	uxth.w	lr, ip
 80011ac:	fb09 1118 	mls	r1, r9, r8, r1
 80011b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011b4:	fb08 f00e 	mul.w	r0, r8, lr
 80011b8:	4288      	cmp	r0, r1
 80011ba:	fa02 f206 	lsl.w	r2, r2, r6
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x1b8>
 80011c0:	eb1c 0101 	adds.w	r1, ip, r1
 80011c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80011c8:	f080 8088 	bcs.w	80012dc <__udivmoddi4+0x2bc>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	f240 8085 	bls.w	80012dc <__udivmoddi4+0x2bc>
 80011d2:	f1a8 0802 	sub.w	r8, r8, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80011e0:	fb09 1110 	mls	r1, r9, r0, r1
 80011e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ec:	458e      	cmp	lr, r1
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x1e2>
 80011f0:	eb1c 0101 	adds.w	r1, ip, r1
 80011f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011f8:	d26c      	bcs.n	80012d4 <__udivmoddi4+0x2b4>
 80011fa:	458e      	cmp	lr, r1
 80011fc:	d96a      	bls.n	80012d4 <__udivmoddi4+0x2b4>
 80011fe:	3802      	subs	r0, #2
 8001200:	4461      	add	r1, ip
 8001202:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001206:	fba0 9402 	umull	r9, r4, r0, r2
 800120a:	eba1 010e 	sub.w	r1, r1, lr
 800120e:	42a1      	cmp	r1, r4
 8001210:	46c8      	mov	r8, r9
 8001212:	46a6      	mov	lr, r4
 8001214:	d356      	bcc.n	80012c4 <__udivmoddi4+0x2a4>
 8001216:	d053      	beq.n	80012c0 <__udivmoddi4+0x2a0>
 8001218:	b15d      	cbz	r5, 8001232 <__udivmoddi4+0x212>
 800121a:	ebb3 0208 	subs.w	r2, r3, r8
 800121e:	eb61 010e 	sbc.w	r1, r1, lr
 8001222:	fa01 f707 	lsl.w	r7, r1, r7
 8001226:	fa22 f306 	lsr.w	r3, r2, r6
 800122a:	40f1      	lsrs	r1, r6
 800122c:	431f      	orrs	r7, r3
 800122e:	e9c5 7100 	strd	r7, r1, [r5]
 8001232:	2600      	movs	r6, #0
 8001234:	4631      	mov	r1, r6
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	f1c2 0320 	rsb	r3, r2, #32
 800123e:	40d8      	lsrs	r0, r3
 8001240:	fa0c fc02 	lsl.w	ip, ip, r2
 8001244:	fa21 f303 	lsr.w	r3, r1, r3
 8001248:	4091      	lsls	r1, r2
 800124a:	4301      	orrs	r1, r0
 800124c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001250:	fa1f fe8c 	uxth.w	lr, ip
 8001254:	fbb3 f0f7 	udiv	r0, r3, r7
 8001258:	fb07 3610 	mls	r6, r7, r0, r3
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001262:	fb00 f60e 	mul.w	r6, r0, lr
 8001266:	429e      	cmp	r6, r3
 8001268:	fa04 f402 	lsl.w	r4, r4, r2
 800126c:	d908      	bls.n	8001280 <__udivmoddi4+0x260>
 800126e:	eb1c 0303 	adds.w	r3, ip, r3
 8001272:	f100 38ff 	add.w	r8, r0, #4294967295
 8001276:	d22f      	bcs.n	80012d8 <__udivmoddi4+0x2b8>
 8001278:	429e      	cmp	r6, r3
 800127a:	d92d      	bls.n	80012d8 <__udivmoddi4+0x2b8>
 800127c:	3802      	subs	r0, #2
 800127e:	4463      	add	r3, ip
 8001280:	1b9b      	subs	r3, r3, r6
 8001282:	b289      	uxth	r1, r1
 8001284:	fbb3 f6f7 	udiv	r6, r3, r7
 8001288:	fb07 3316 	mls	r3, r7, r6, r3
 800128c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001290:	fb06 f30e 	mul.w	r3, r6, lr
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x28a>
 8001298:	eb1c 0101 	adds.w	r1, ip, r1
 800129c:	f106 38ff 	add.w	r8, r6, #4294967295
 80012a0:	d216      	bcs.n	80012d0 <__udivmoddi4+0x2b0>
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d914      	bls.n	80012d0 <__udivmoddi4+0x2b0>
 80012a6:	3e02      	subs	r6, #2
 80012a8:	4461      	add	r1, ip
 80012aa:	1ac9      	subs	r1, r1, r3
 80012ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80012b0:	e738      	b.n	8001124 <__udivmoddi4+0x104>
 80012b2:	462e      	mov	r6, r5
 80012b4:	4628      	mov	r0, r5
 80012b6:	e705      	b.n	80010c4 <__udivmoddi4+0xa4>
 80012b8:	4606      	mov	r6, r0
 80012ba:	e6e3      	b.n	8001084 <__udivmoddi4+0x64>
 80012bc:	4618      	mov	r0, r3
 80012be:	e6f8      	b.n	80010b2 <__udivmoddi4+0x92>
 80012c0:	454b      	cmp	r3, r9
 80012c2:	d2a9      	bcs.n	8001218 <__udivmoddi4+0x1f8>
 80012c4:	ebb9 0802 	subs.w	r8, r9, r2
 80012c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7a3      	b.n	8001218 <__udivmoddi4+0x1f8>
 80012d0:	4646      	mov	r6, r8
 80012d2:	e7ea      	b.n	80012aa <__udivmoddi4+0x28a>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e794      	b.n	8001202 <__udivmoddi4+0x1e2>
 80012d8:	4640      	mov	r0, r8
 80012da:	e7d1      	b.n	8001280 <__udivmoddi4+0x260>
 80012dc:	46d0      	mov	r8, sl
 80012de:	e77b      	b.n	80011d8 <__udivmoddi4+0x1b8>
 80012e0:	3b02      	subs	r3, #2
 80012e2:	4461      	add	r1, ip
 80012e4:	e732      	b.n	800114c <__udivmoddi4+0x12c>
 80012e6:	4630      	mov	r0, r6
 80012e8:	e709      	b.n	80010fe <__udivmoddi4+0xde>
 80012ea:	4464      	add	r4, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e742      	b.n	8001176 <__udivmoddi4+0x156>

080012f0 <__aeabi_idiv0>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0000      	movs	r0, r0
	...

080012f8 <sqr>:
uint8_t isUpdated_2 = 0;
uint8_t is_secondP_OK = 0;
uint8_t buffer_alg[100];

static double sqr(double nmbr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0b00 	vstr	d0, [r7]
	return pow(nmbr, 2);
 8001302:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001328 <sqr+0x30>
 8001306:	ed97 0b00 	vldr	d0, [r7]
 800130a:	f00e fa1d 	bl	800f748 <pow>
 800130e:	eeb0 7a40 	vmov.f32	s14, s0
 8001312:	eef0 7a60 	vmov.f32	s15, s1
}
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	40000000 	.word	0x40000000

08001330 <algorithm_2_update>:
	}
  }
}

void algorithm_2_update(BME_280_t* BME, bmi088_struct_t* BMI, float angle)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
	//Rising detection
	if((sqrtf(sqr(BMI->acc_x) + sqr(BMI->acc_y) + sqr(BMI->acc_z)) > RISING_G_TRESHOLD) && isRising_2 == 0)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f7ff ffd1 	bl	80012f8 <sqr>
 8001356:	ec55 4b10 	vmov	r4, r5, d0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	ec43 2b10 	vmov	d0, r2, r3
 800136e:	f7ff ffc3 	bl	80012f8 <sqr>
 8001372:	ec53 2b10 	vmov	r2, r3, d0
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7fe ffa7 	bl	80002cc <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4614      	mov	r4, r2
 8001384:	461d      	mov	r5, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8fb 	bl	8000588 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	ec43 2b10 	vmov	d0, r2, r3
 800139a:	f7ff ffad 	bl	80012f8 <sqr>
 800139e:	ec53 2b10 	vmov	r2, r3, d0
 80013a2:	4620      	mov	r0, r4
 80013a4:	4629      	mov	r1, r5
 80013a6:	f7fe ff91 	bl	80002cc <__adddf3>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc39 	bl	8000c28 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	ee00 3a10 	vmov	s0, r3
 80013bc:	f00e fa60 	bl	800f880 <sqrtf>
 80013c0:	eef0 7a40 	vmov.f32	s15, s0
 80013c4:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001600 <algorithm_2_update+0x2d0>
 80013c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dd30      	ble.n	8001434 <algorithm_2_update+0x104>
 80013d2:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <algorithm_2_update+0x2d4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d12c      	bne.n	8001434 <algorithm_2_update+0x104>
	{
		if(BME->altitude < 200.0 && BME->altitude > -200.0){
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013e0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001608 <algorithm_2_update+0x2d8>
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d514      	bpl.n	8001418 <algorithm_2_update+0xe8>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013f4:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800160c <algorithm_2_update+0x2dc>
 80013f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	dd0a      	ble.n	8001418 <algorithm_2_update+0xe8>
			BME->baseAltitude = BME->altitude + BME->baseAltitude;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		}

		isRising_2 = 1;
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <algorithm_2_update+0x2d4>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_FLIGHT_STARTED ? STAT_FLIGHT_STARTED : rocketStatus;
 800141e:	4b7c      	ldr	r3, [pc, #496]	; (8001610 <algorithm_2_update+0x2e0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	bf38      	it	cc
 8001426:	2302      	movcc	r3, #2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b79      	ldr	r3, [pc, #484]	; (8001610 <algorithm_2_update+0x2e0>)
 800142c:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 800142e:	4879      	ldr	r0, [pc, #484]	; (8001614 <algorithm_2_update+0x2e4>)
 8001430:	f001 ffb8 	bl	80033a4 <ext_pin_open>
	}

	//Burnout detection
	static int burnout_counter = 0;
	if(BMI->acc_y < BURNOUT_THRESHOLD && isRising_2 == 1 && burnout_counter < 101)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800143a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001618 <algorithm_2_update+0x2e8>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d50c      	bpl.n	8001462 <algorithm_2_update+0x132>
 8001448:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <algorithm_2_update+0x2d4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <algorithm_2_update+0x132>
 8001450:	4b72      	ldr	r3, [pc, #456]	; (800161c <algorithm_2_update+0x2ec>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b64      	cmp	r3, #100	; 0x64
 8001456:	dc04      	bgt.n	8001462 <algorithm_2_update+0x132>
	{
		burnout_counter++;
 8001458:	4b70      	ldr	r3, [pc, #448]	; (800161c <algorithm_2_update+0x2ec>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a6f      	ldr	r2, [pc, #444]	; (800161c <algorithm_2_update+0x2ec>)
 8001460:	6013      	str	r3, [r2, #0]
	}
	if(burnout_counter == 10)
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <algorithm_2_update+0x2ec>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d10a      	bne.n	8001480 <algorithm_2_update+0x150>
	{
		rocketStatus = rocketStatus < STAT_MOTOR_BURNOUT ? STAT_MOTOR_BURNOUT : rocketStatus;
 800146a:	4b69      	ldr	r3, [pc, #420]	; (8001610 <algorithm_2_update+0x2e0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b03      	cmp	r3, #3
 8001470:	bf38      	it	cc
 8001472:	2303      	movcc	r3, #3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b66      	ldr	r3, [pc, #408]	; (8001610 <algorithm_2_update+0x2e0>)
 8001478:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 800147a:	4866      	ldr	r0, [pc, #408]	; (8001614 <algorithm_2_update+0x2e4>)
 800147c:	f001 ff92 	bl	80033a4 <ext_pin_open>
	}

	//Falling detection || First parachute
	if(angle > ANGLE_THRESHOLD && isRising_2 == 1 && isFalling_2 == 0 && BME->altitude > ARMING_ALTITUDE_2)
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <algorithm_2_update+0x2f0>
 8001488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	dd1c      	ble.n	80014cc <algorithm_2_update+0x19c>
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <algorithm_2_update+0x2d4>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d118      	bne.n	80014cc <algorithm_2_update+0x19c>
 800149a:	4b62      	ldr	r3, [pc, #392]	; (8001624 <algorithm_2_update+0x2f4>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d114      	bne.n	80014cc <algorithm_2_update+0x19c>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	dd0c      	ble.n	80014cc <algorithm_2_update+0x19c>
	{
		isFalling_2 = 1;
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <algorithm_2_update+0x2f4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_P1_OK_P2_NO ? STAT_P1_OK_P2_NO : rocketStatus;
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <algorithm_2_update+0x2e0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	bf38      	it	cc
 80014c0:	2304      	movcc	r3, #4
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <algorithm_2_update+0x2e0>)
 80014c6:	701a      	strb	r2, [r3, #0]
		deploy_p_1();
 80014c8:	f002 fe3c 	bl	8004144 <deploy_p_1>
	}

	//Second Parachute
	if(BME->altitude < SECOND_DEPLOY_ALTITUDE && isFalling_2 == 1 && is_secondP_OK == 0)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80014d2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001628 <algorithm_2_update+0x2f8>
 80014d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d50d      	bpl.n	80014fc <algorithm_2_update+0x1cc>
 80014e0:	4b50      	ldr	r3, [pc, #320]	; (8001624 <algorithm_2_update+0x2f4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d109      	bne.n	80014fc <algorithm_2_update+0x1cc>
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <algorithm_2_update+0x2fc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d105      	bne.n	80014fc <algorithm_2_update+0x1cc>
	{
		secondP_counter++;
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <algorithm_2_update+0x300>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <algorithm_2_update+0x300>)
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e002      	b.n	8001502 <algorithm_2_update+0x1d2>
	}
	else{
		secondP_counter = 0;
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <algorithm_2_update+0x300>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	}
	if(secondP_counter == 10)
 8001502:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <algorithm_2_update+0x300>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d10c      	bne.n	8001524 <algorithm_2_update+0x1f4>
	{
		rocketStatus = rocketStatus < STAT_P1_OK_P2_OK ? STAT_P1_OK_P2_OK : rocketStatus;
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <algorithm_2_update+0x2e0>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b05      	cmp	r3, #5
 8001510:	bf38      	it	cc
 8001512:	2305      	movcc	r3, #5
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <algorithm_2_update+0x2e0>)
 8001518:	701a      	strb	r2, [r3, #0]
		is_secondP_OK = 1;
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <algorithm_2_update+0x2fc>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
		deploy_p_2();
 8001520:	f002 fe20 	bl	8004164 <deploy_p_2>
	}

	//Touchdown Detection
	static uint8_t is_TD = 0;
	if(sqrt(sqr(BMI->gyro_x) + sqr(BMI->gyro_y) + sqr(BMI->gyro_z)) < 10.0 && isFalling_2 == 1 && is_secondP_OK == 1 && is_TD == 0)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 800152a:	eeb0 0a47 	vmov.f32	s0, s14
 800152e:	eef0 0a67 	vmov.f32	s1, s15
 8001532:	f7ff fee1 	bl	80012f8 <sqr>
 8001536:	ec55 4b10 	vmov	r4, r5, d0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8001540:	eeb0 0a47 	vmov.f32	s0, s14
 8001544:	eef0 0a67 	vmov.f32	s1, s15
 8001548:	f7ff fed6 	bl	80012f8 <sqr>
 800154c:	ec53 2b10 	vmov	r2, r3, d0
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7fe feba 	bl	80002cc <__adddf3>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4614      	mov	r4, r2
 800155e:	461d      	mov	r5, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8001566:	eeb0 0a47 	vmov.f32	s0, s14
 800156a:	eef0 0a67 	vmov.f32	s1, s15
 800156e:	f7ff fec3 	bl	80012f8 <sqr>
 8001572:	ec53 2b10 	vmov	r2, r3, d0
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7fe fea7 	bl	80002cc <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	ec43 2b17 	vmov	d7, r2, r3
 8001586:	eeb0 0a47 	vmov.f32	s0, s14
 800158a:	eef0 0a67 	vmov.f32	s1, s15
 800158e:	f00e f94b 	bl	800f828 <sqrt>
 8001592:	ec51 0b10 	vmov	r0, r1, d0
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <algorithm_2_update+0x304>)
 800159c:	f7ff fabe 	bl	8000b1c <__aeabi_dcmplt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d011      	beq.n	80015ca <algorithm_2_update+0x29a>
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <algorithm_2_update+0x2f4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10d      	bne.n	80015ca <algorithm_2_update+0x29a>
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <algorithm_2_update+0x2fc>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d109      	bne.n	80015ca <algorithm_2_update+0x29a>
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <algorithm_2_update+0x308>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d105      	bne.n	80015ca <algorithm_2_update+0x29a>
	{
			TD_counter++;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <algorithm_2_update+0x30c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <algorithm_2_update+0x30c>)
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e002      	b.n	80015d0 <algorithm_2_update+0x2a0>
	}
	else{
		TD_counter = 0;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <algorithm_2_update+0x30c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
	}
	if(TD_counter > 1000)
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <algorithm_2_update+0x30c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d8:	dd0d      	ble.n	80015f6 <algorithm_2_update+0x2c6>
	{
		is_TD = 1;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <algorithm_2_update+0x308>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
		rocketStatus = rocketStatus < STAT_TOUCH_DOWN ? STAT_TOUCH_DOWN : rocketStatus;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <algorithm_2_update+0x2e0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	bf38      	it	cc
 80015e8:	2306      	movcc	r3, #6
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <algorithm_2_update+0x2e0>)
 80015ee:	701a      	strb	r2, [r3, #0]
		ext_pin_open(&buzzer);
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <algorithm_2_update+0x2e4>)
 80015f2:	f001 fed7 	bl	80033a4 <ext_pin_open>
	}
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	453b8000 	.word	0x453b8000
 8001604:	2000020d 	.word	0x2000020d
 8001608:	43480000 	.word	0x43480000
 800160c:	c3480000 	.word	0xc3480000
 8001610:	20000004 	.word	0x20000004
 8001614:	200007b4 	.word	0x200007b4
 8001618:	c4fa0000 	.word	0xc4fa0000
 800161c:	20000210 	.word	0x20000210
 8001620:	42a00000 	.word	0x42a00000
 8001624:	2000020c 	.word	0x2000020c
 8001628:	440e8000 	.word	0x440e8000
 800162c:	2000020e 	.word	0x2000020e
 8001630:	20000208 	.word	0x20000208
 8001634:	40240000 	.word	0x40240000
 8001638:	20000214 	.word	0x20000214
 800163c:	20000204 	.word	0x20000204

08001640 <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af04      	add	r7, sp, #16
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 100);
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <bme280_getVals+0xa8>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2301      	movs	r3, #1
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2301      	movs	r3, #1
 8001658:	22f3      	movs	r2, #243	; 0xf3
 800165a:	21ec      	movs	r1, #236	; 0xec
 800165c:	f006 f842 	bl	80076e4 <HAL_I2C_Mem_Read>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
	BME->isUpdated = 0;
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <bme280_getVals+0xac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if((params[0] & (0x01 << 3)) == (0x01 << 3))
 800166e:	793b      	ldrb	r3, [r7, #4]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d032      	beq.n	80016de <bme280_getVals+0x9e>
	{
		BME->isUpdated = 1;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <bme280_getVals+0xac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 200);
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <bme280_getVals+0xa8>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	23c8      	movs	r3, #200	; 0xc8
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	2308      	movs	r3, #8
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2301      	movs	r3, #1
 8001694:	22f7      	movs	r2, #247	; 0xf7
 8001696:	21ec      	movs	r1, #236	; 0xec
 8001698:	f006 f824 	bl	80076e4 <HAL_I2C_Mem_Read>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
		BME->adcVals.ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	031a      	lsls	r2, r3, #12
 80016a4:	7a3b      	ldrb	r3, [r7, #8]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4313      	orrs	r3, r2
 80016aa:	7a7a      	ldrb	r2, [r7, #9]
 80016ac:	0912      	lsrs	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	431a      	orrs	r2, r3
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <bme280_getVals+0xac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
		BME->adcVals.up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 80016b8:	793b      	ldrb	r3, [r7, #4]
 80016ba:	031a      	lsls	r2, r3, #12
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4313      	orrs	r3, r2
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	0912      	lsrs	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	431a      	orrs	r2, r3
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <bme280_getVals+0xac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
		BME->adcVals.uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 80016d0:	7abb      	ldrb	r3, [r7, #10]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	7afa      	ldrb	r2, [r7, #11]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <bme280_getVals+0xac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	UNUSED(retVal);
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000218 	.word	0x20000218
 80016ec:	2000021c 	.word	0x2000021c

080016f0 <bme280_get_altitude>:

static void bme280_get_altitude()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	float p_seaLevel = 1013.25;		//hPa
 80016f6:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <bme280_get_altitude+0xd0>)
 80016f8:	607b      	str	r3, [r7, #4]
	float alt = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <bme280_get_altitude+0xd4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001702:	edd7 7a01 	vldr	s15, [r7, #4]
 8001706:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800170a:	ee16 0a90 	vmov	r0, s13
 800170e:	f7fe ff3b 	bl	8000588 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80017b0 <bme280_get_altitude+0xc0>
 800171a:	ec43 2b10 	vmov	d0, r2, r3
 800171e:	f00e f813 	bl	800f748 <pow>
 8001722:	ec53 2b10 	vmov	r2, r3, d0
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	4927      	ldr	r1, [pc, #156]	; (80017c8 <bme280_get_altitude+0xd8>)
 800172c:	f7fe fdcc 	bl	80002c8 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a31f      	add	r3, pc, #124	; (adr r3, 80017b8 <bme280_get_altitude+0xc8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff7b 	bl	8000638 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa6d 	bl	8000c28 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	603b      	str	r3, [r7, #0]
	BME->altitude = alt - BME->baseAltitude;
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <bme280_get_altitude+0xd4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <bme280_get_altitude+0xd4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	ed97 7a00 	vldr	s14, [r7]
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	if(BME->altitude > BME->maxAltitude && BME->baseAltitude != 0.0)
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <bme280_get_altitude+0xd4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <bme280_get_altitude+0xd4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800177a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dc00      	bgt.n	8001786 <bme280_get_altitude+0x96>
	{
		BME->maxAltitude = BME->altitude;
	}
}
 8001784:	e00e      	b.n	80017a4 <bme280_get_altitude+0xb4>
	if(BME->altitude > BME->maxAltitude && BME->baseAltitude != 0.0)
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <bme280_get_altitude+0xd4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800178e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d005      	beq.n	80017a4 <bme280_get_altitude+0xb4>
		BME->maxAltitude = BME->altitude;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <bme280_get_altitude+0xd4>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <bme280_get_altitude+0xd4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	ccd9456c 	.word	0xccd9456c
 80017b4:	3fc85b95 	.word	0x3fc85b95
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	447d5000 	.word	0x447d5000
 80017c4:	2000021c 	.word	0x2000021c
 80017c8:	3ff00000 	.word	0x3ff00000

080017cc <bme280_init>:

HAL_StatusTypeDef bme280_init(BME_280_t* BME_sensor,  I2C_HandleTypeDef* I2C_bme, uint8_t mode, uint8_t OS, uint8_t filter){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b092      	sub	sp, #72	; 0x48
 80017d0:	af04      	add	r7, sp, #16
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	460b      	mov	r3, r1
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	4613      	mov	r3, r2
 80017e0:	71bb      	strb	r3, [r7, #6]
	BME = BME_sensor;
 80017e2:	4aab      	ldr	r2, [pc, #684]	; (8001a90 <bme280_init+0x2c4>)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6013      	str	r3, [r2, #0]
	I2C_ = I2C_bme;
 80017e8:	4aaa      	ldr	r2, [pc, #680]	; (8001a94 <bme280_init+0x2c8>)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	6013      	str	r3, [r2, #0]
	BME->baseAltitude = 0.0;
 80017ee:	4ba8      	ldr	r3, [pc, #672]	; (8001a90 <bme280_init+0x2c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	649a      	str	r2, [r3, #72]	; 0x48

	uint8_t params[25];

	HAL_StatusTypeDef retVal;

	uint8_t resetData = BME280_SOFT_RESET;
 80017f8:	23b6      	movs	r3, #182	; 0xb6
 80017fa:	74fb      	strb	r3, [r7, #19]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
 80017fc:	2332      	movs	r3, #50	; 0x32
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	2301      	movs	r3, #1
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f107 0313 	add.w	r3, r7, #19
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	22e0      	movs	r2, #224	; 0xe0
 800180e:	21ec      	movs	r1, #236	; 0xec
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f005 fe6d 	bl	80074f0 <HAL_I2C_Mem_Write>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_Delay(50);
 800181c:	2032      	movs	r0, #50	; 0x32
 800181e:	f004 f839 	bl	8005894 <HAL_Delay>
	HAL_I2C_DeInit(I2C_bme);
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f005 fe34 	bl	8007490 <HAL_I2C_DeInit>
	HAL_Delay(5);
 8001828:	2005      	movs	r0, #5
 800182a:	f004 f833 	bl	8005894 <HAL_Delay>
	HAL_I2C_Init(I2C_bme);
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f005 fcea 	bl	8007208 <HAL_I2C_Init>
	HAL_Delay(5);
 8001834:	2005      	movs	r0, #5
 8001836:	f004 f82d 	bl	8005894 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800183a:	23c8      	movs	r3, #200	; 0xc8
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	2319      	movs	r3, #25
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	2288      	movs	r2, #136	; 0x88
 800184c:	21ec      	movs	r1, #236	; 0xec
 800184e:	68b8      	ldr	r0, [r7, #8]
 8001850:	f005 ff48 	bl	80076e4 <HAL_I2C_Mem_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800185a:	7d3b      	ldrb	r3, [r7, #20]
 800185c:	b299      	uxth	r1, r3
 800185e:	7d7b      	ldrb	r3, [r7, #21]
 8001860:	b29b      	uxth	r3, r3
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b8a      	ldr	r3, [pc, #552]	; (8001a90 <bme280_init+0x2c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	b292      	uxth	r2, r2
 800186e:	801a      	strh	r2, [r3, #0]
	BME->parameters.dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001870:	7dbb      	ldrb	r3, [r7, #22]
 8001872:	b219      	sxth	r1, r3
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <bme280_init+0x2c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	b212      	sxth	r2, r2
 8001882:	805a      	strh	r2, [r3, #2]
	BME->parameters.dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001884:	7e3b      	ldrb	r3, [r7, #24]
 8001886:	b219      	sxth	r1, r3
 8001888:	7e7b      	ldrb	r3, [r7, #25]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b80      	ldr	r3, [pc, #512]	; (8001a90 <bme280_init+0x2c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	b212      	sxth	r2, r2
 8001896:	809a      	strh	r2, [r3, #4]
	BME->parameters.dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001898:	7ebb      	ldrb	r3, [r7, #26]
 800189a:	b21a      	sxth	r2, r3
 800189c:	7efb      	ldrb	r3, [r7, #27]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <bme280_init+0x2c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b292      	uxth	r2, r2
 80018ac:	80da      	strh	r2, [r3, #6]
	BME->parameters.dig_P2 = params[8] | ((int16_t)params[9] << 8);
 80018ae:	7f3b      	ldrb	r3, [r7, #28]
 80018b0:	b219      	sxth	r1, r3
 80018b2:	7f7b      	ldrb	r3, [r7, #29]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <bme280_init+0x2c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	b212      	sxth	r2, r2
 80018c0:	811a      	strh	r2, [r3, #8]
	BME->parameters.dig_P3 = params[10] | ((int16_t)params[11] << 8);
 80018c2:	7fbb      	ldrb	r3, [r7, #30]
 80018c4:	b219      	sxth	r1, r3
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <bme280_init+0x2c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	b212      	sxth	r2, r2
 80018d4:	815a      	strh	r2, [r3, #10]
	BME->parameters.dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80018d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018da:	b219      	sxth	r1, r3
 80018dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <bme280_init+0x2c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	b212      	sxth	r2, r2
 80018ec:	819a      	strh	r2, [r3, #12]
	BME->parameters.dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80018ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018f2:	b219      	sxth	r1, r3
 80018f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <bme280_init+0x2c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	b212      	sxth	r2, r2
 8001904:	81da      	strh	r2, [r3, #14]
	BME->parameters.dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001906:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800190a:	b219      	sxth	r1, r3
 800190c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <bme280_init+0x2c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	b212      	sxth	r2, r2
 800191c:	821a      	strh	r2, [r3, #16]
	BME->parameters.dig_P7 = params[18] | ((int16_t)params[19] << 8);
 800191e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001922:	b219      	sxth	r1, r3
 8001924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b21a      	sxth	r2, r3
 800192c:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <bme280_init+0x2c4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	b212      	sxth	r2, r2
 8001934:	825a      	strh	r2, [r3, #18]
	BME->parameters.dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001936:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800193a:	b219      	sxth	r1, r3
 800193c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <bme280_init+0x2c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	b212      	sxth	r2, r2
 800194c:	829a      	strh	r2, [r3, #20]
	BME->parameters.dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800194e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001952:	b219      	sxth	r1, r3
 8001954:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <bme280_init+0x2c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	b212      	sxth	r2, r2
 8001964:	82da      	strh	r2, [r3, #22]
	BME->parameters.dig_H1 = params[24];
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <bme280_init+0x2c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800196e:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(I2C_bme, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001970:	2332      	movs	r3, #50	; 0x32
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	2307      	movs	r3, #7
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	22e1      	movs	r2, #225	; 0xe1
 8001982:	21ec      	movs	r1, #236	; 0xec
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f005 fead 	bl	80076e4 <HAL_I2C_Mem_Read>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BME->parameters.dig_H2 = params[0] | ((int16_t)params[1] << 8);
 8001990:	7d3b      	ldrb	r3, [r7, #20]
 8001992:	b219      	sxth	r1, r3
 8001994:	7d7b      	ldrb	r3, [r7, #21]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <bme280_init+0x2c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	b212      	sxth	r2, r2
 80019a2:	835a      	strh	r2, [r3, #26]
	BME->parameters.dig_H3	= params[2];
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <bme280_init+0x2c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	7dba      	ldrb	r2, [r7, #22]
 80019aa:	771a      	strb	r2, [r3, #28]
	BME->parameters.dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 80019ac:	7e3b      	ldrb	r3, [r7, #24]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	b219      	sxth	r1, r3
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <bme280_init+0x2c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	b212      	sxth	r2, r2
 80019c4:	83da      	strh	r2, [r3, #30]
	BME->parameters.dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 80019c6:	7e3b      	ldrb	r3, [r7, #24]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	b219      	sxth	r1, r3
 80019ce:	7e7b      	ldrb	r3, [r7, #25]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <bme280_init+0x2c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	b212      	sxth	r2, r2
 80019dc:	841a      	strh	r2, [r3, #32]
	BME->parameters.dig_H6 = params[6];
 80019de:	7eba      	ldrb	r2, [r7, #26]
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <bme280_init+0x2c4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b252      	sxtb	r2, r2
 80019e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t data_ctrl = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	74bb      	strb	r3, [r7, #18]
	data_ctrl = OS;
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 80019f2:	2332      	movs	r3, #50	; 0x32
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2301      	movs	r3, #1
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	f107 0312 	add.w	r3, r7, #18
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	22f2      	movs	r2, #242	; 0xf2
 8001a04:	21ec      	movs	r1, #236	; 0xec
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	f005 fd72 	bl	80074f0 <HAL_I2C_Mem_Write>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	74bb      	strb	r3, [r7, #18]
	data_ctrl = mode | (OS << 2) | (OS << 5);																		//Mode has been chosed.
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	b25a      	sxtb	r2, r3
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 8001a32:	2332      	movs	r3, #50	; 0x32
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	2301      	movs	r3, #1
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	f107 0312 	add.w	r3, r7, #18
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	22f4      	movs	r2, #244	; 0xf4
 8001a44:	21ec      	movs	r1, #236	; 0xec
 8001a46:	68b8      	ldr	r0, [r7, #8]
 8001a48:	f005 fd52 	bl	80074f0 <HAL_I2C_Mem_Write>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	data_ctrl = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	74bb      	strb	r3, [r7, #18]
	data_ctrl = (filter << 2);
 8001a56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	74bb      	strb	r3, [r7, #18]
	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	2301      	movs	r3, #1
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	f107 0312 	add.w	r3, r7, #18
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	22f5      	movs	r2, #245	; 0xf5
 8001a72:	21ec      	movs	r1, #236	; 0xec
 8001a74:	68b8      	ldr	r0, [r7, #8]
 8001a76:	f005 fd3b 	bl	80074f0 <HAL_I2C_Mem_Write>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//uint8_t buf[50];

	float base = 0.0;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_Delay(200);
 8001a86:	20c8      	movs	r0, #200	; 0xc8
 8001a88:	f003 ff04 	bl	8005894 <HAL_Delay>
	for(int i = 0; i < 50; i++)		//Taking base altitude
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e003      	b.n	8001a98 <bme280_init+0x2cc>
 8001a90:	2000021c 	.word	0x2000021c
 8001a94:	20000218 	.word	0x20000218
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9a:	e011      	b.n	8001ac0 <bme280_init+0x2f4>
	{
	  bme280_update();
 8001a9c:	f000 f828 	bl	8001af0 <bme280_update>
	  base +=  BME->altitude;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <bme280_init+0x31c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001aa8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  HAL_Delay(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f003 feed 	bl	8005894 <HAL_Delay>
	for(int i = 0; i < 50; i++)		//Taking base altitude
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	3301      	adds	r3, #1
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	2b31      	cmp	r3, #49	; 0x31
 8001ac4:	ddea      	ble.n	8001a9c <bme280_init+0x2d0>
	}
	BME->baseAltitude = (base / 50.0);
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <bme280_init+0x31c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ace:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001aec <bme280_init+0x320>
 8001ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	return retVal;
 8001ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3738      	adds	r7, #56	; 0x38
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000021c 	.word	0x2000021c
 8001aec:	42480000 	.word	0x42480000

08001af0 <bme280_update>:


void bme280_update(){
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b0d2      	sub	sp, #328	; 0x148
 8001af6:	af00      	add	r7, sp, #0
	int32_t var1_t, var2_t, T, adc_T;
	bme280_getVals();
 8001af8:	f7ff fda2 	bl	8001640 <bme280_getVals>

	if(BME->isUpdated == 1)
 8001afc:	4bd9      	ldr	r3, [pc, #868]	; (8001e64 <bme280_update+0x374>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	f040 83a7 	bne.w	8002258 <bme280_update+0x768>
	{
		//For tempereature
		adc_T =	BME->adcVals.ut;
 8001b0a:	4bd6      	ldr	r3, [pc, #856]	; (8001e64 <bme280_update+0x374>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters.dig_T1 << 1))) * ((int32_t)BME->parameters.dig_T2)) >> 11;
 8001b14:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b18:	10da      	asrs	r2, r3, #3
 8001b1a:	4bd2      	ldr	r3, [pc, #840]	; (8001e64 <bme280_update+0x374>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	4bcf      	ldr	r3, [pc, #828]	; (8001e64 <bme280_update+0x374>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	885b      	ldrh	r3, [r3, #2]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	12db      	asrs	r3, r3, #11
 8001b34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters.dig_T1))) >> 12) * ((int32_t)BME->parameters.dig_T3)) >> 14;
 8001b38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b3c:	111a      	asrs	r2, r3, #4
 8001b3e:	4bc9      	ldr	r3, [pc, #804]	; (8001e64 <bme280_update+0x374>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	1ad1      	subs	r1, r2, r3
 8001b48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b4c:	111a      	asrs	r2, r3, #4
 8001b4e:	4bc5      	ldr	r3, [pc, #788]	; (8001e64 <bme280_update+0x374>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	131a      	asrs	r2, r3, #12
 8001b5e:	4bc1      	ldr	r3, [pc, #772]	; (8001e64 <bme280_update+0x374>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	889b      	ldrh	r3, [r3, #4]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	139b      	asrs	r3, r3, #14
 8001b6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		int32_t t_fine = var1_t + var2_t;
 8001b70:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001b74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b78:	4413      	add	r3, r2
 8001b7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		T = (t_fine * 5 + 128) >> 8;
 8001b7e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3380      	adds	r3, #128	; 0x80
 8001b8a:	121b      	asrs	r3, r3, #8
 8001b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		BME->temperature = (float)T / 100.0;
 8001b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9c:	4bb1      	ldr	r3, [pc, #708]	; (8001e64 <bme280_update+0x374>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001e68 <bme280_update+0x378>
 8001ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)BME->adcVals.up;
 8001bac:	4bad      	ldr	r3, [pc, #692]	; (8001e64 <bme280_update+0x374>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	653b      	str	r3, [r7, #80]	; 0x50
 8001bb6:	657a      	str	r2, [r7, #84]	; 0x54
 8001bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bbc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var1_p = ((int64_t)t_fine) - 128000;
 8001bc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bc4:	17da      	asrs	r2, r3, #31
 8001bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bca:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001bce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bda:	4613      	mov	r3, r2
 8001bdc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001be6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = var1_p * var1_p * (int64_t)BME->parameters.dig_P6;
 8001bea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bf2:	fb03 f102 	mul.w	r1, r3, r2
 8001bf6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	18ca      	adds	r2, r1, r3
 8001c04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c08:	fba3 4503 	umull	r4, r5, r3, r3
 8001c0c:	1953      	adds	r3, r2, r5
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4b94      	ldr	r3, [pc, #592]	; (8001e64 <bme280_update+0x374>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	8a1b      	ldrh	r3, [r3, #16]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	17da      	asrs	r2, r3, #31
 8001c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c24:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	fb03 f205 	mul.w	r2, r3, r5
 8001c2e:	460b      	mov	r3, r1
 8001c30:	fb04 f303 	mul.w	r3, r4, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	4602      	mov	r2, r0
 8001c38:	fba4 ab02 	umull	sl, fp, r4, r2
 8001c3c:	445b      	add	r3, fp
 8001c3e:	469b      	mov	fp, r3
 8001c40:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 8001c44:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters.dig_P5) <<17);
 8001c48:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <bme280_update+0x374>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	89db      	ldrh	r3, [r3, #14]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	17da      	asrs	r2, r3, #31
 8001c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c60:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001c64:	462a      	mov	r2, r5
 8001c66:	fb02 f203 	mul.w	r2, r2, r3
 8001c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c6e:	4621      	mov	r1, r4
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	441a      	add	r2, r3
 8001c76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	fba3 8901 	umull	r8, r9, r3, r1
 8001c80:	eb02 0309 	add.w	r3, r2, r9
 8001c84:	4699      	mov	r9, r3
 8001c86:	f04f 0000 	mov.w	r0, #0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	ea4f 4149 	mov.w	r1, r9, lsl #17
 8001c92:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8001c96:	ea4f 4048 	mov.w	r0, r8, lsl #17
 8001c9a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001c9e:	1814      	adds	r4, r2, r0
 8001ca0:	643c      	str	r4, [r7, #64]	; 0x40
 8001ca2:	414b      	adcs	r3, r1
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001caa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var2_p = var2_p + (((int64_t)BME->parameters.dig_P4) << 35);
 8001cae:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <bme280_update+0x374>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	899b      	ldrh	r3, [r3, #12]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	17da      	asrs	r2, r3, #31
 8001cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cbe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cce:	00d9      	lsls	r1, r3, #3
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001cd6:	1814      	adds	r4, r2, r0
 8001cd8:	63bc      	str	r4, [r7, #56]	; 0x38
 8001cda:	414b      	adcs	r3, r1
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cde:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001ce2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters.dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters.dig_P2) << 12);
 8001ce6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cee:	fb03 f102 	mul.w	r1, r3, r2
 8001cf2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	18ca      	adds	r2, r1, r3
 8001d00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d04:	fba3 1303 	umull	r1, r3, r3, r3
 8001d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d1c:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <bme280_update+0x374>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	895b      	ldrh	r3, [r3, #10]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	17da      	asrs	r2, r3, #31
 8001d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d30:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001d34:	462b      	mov	r3, r5
 8001d36:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001d3a:	4642      	mov	r2, r8
 8001d3c:	fb02 f203 	mul.w	r2, r2, r3
 8001d40:	464b      	mov	r3, r9
 8001d42:	4621      	mov	r1, r4
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d52:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001d56:	460a      	mov	r2, r1
 8001d58:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001d5c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001d60:	4413      	add	r3, r2
 8001d62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001d72:	4623      	mov	r3, r4
 8001d74:	0a18      	lsrs	r0, r3, #8
 8001d76:	462b      	mov	r3, r5
 8001d78:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d7c:	462b      	mov	r3, r5
 8001d7e:	1219      	asrs	r1, r3, #8
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <bme280_update+0x374>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	891b      	ldrh	r3, [r3, #8]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	17da      	asrs	r2, r3, #31
 8001d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d98:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d9c:	464a      	mov	r2, r9
 8001d9e:	fb02 f203 	mul.w	r2, r2, r3
 8001da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001da6:	4644      	mov	r4, r8
 8001da8:	fb04 f303 	mul.w	r3, r4, r3
 8001dac:	441a      	add	r2, r3
 8001dae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001db2:	4644      	mov	r4, r8
 8001db4:	fba3 4304 	umull	r4, r3, r3, r4
 8001db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc6:	18d3      	adds	r3, r2, r3
 8001dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001dd8:	464c      	mov	r4, r9
 8001dda:	0323      	lsls	r3, r4, #12
 8001ddc:	4644      	mov	r4, r8
 8001dde:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001de2:	4644      	mov	r4, r8
 8001de4:	0322      	lsls	r2, r4, #12
 8001de6:	1884      	adds	r4, r0, r2
 8001de8:	633c      	str	r4, [r7, #48]	; 0x30
 8001dea:	eb41 0303 	adc.w	r3, r1, r3
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
 8001df0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001df4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters.dig_P1) >> 33;
 8001df8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001dfc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001e00:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001e04:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <bme280_update+0x374>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	88db      	ldrh	r3, [r3, #6]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e1c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001e20:	462b      	mov	r3, r5
 8001e22:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001e26:	4642      	mov	r2, r8
 8001e28:	fb02 f203 	mul.w	r2, r2, r3
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	4621      	mov	r1, r4
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	4622      	mov	r2, r4
 8001e38:	4641      	mov	r1, r8
 8001e3a:	fba2 1201 	umull	r1, r2, r2, r1
 8001e3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e42:	460a      	mov	r2, r1
 8001e44:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001e48:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e5e:	4629      	mov	r1, r5
 8001e60:	104a      	asrs	r2, r1, #1
 8001e62:	e003      	b.n	8001e6c <bme280_update+0x37c>
 8001e64:	2000021c 	.word	0x2000021c
 8001e68:	42c80000 	.word	0x42c80000
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	17cb      	asrs	r3, r1, #31
 8001e70:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		if(var1_p == 0)
 8001e74:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	d106      	bne.n	8001e8a <bme280_update+0x39a>
		{
			P = 0;
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
 8001e88:	e148      	b.n	800211c <bme280_update+0x62c>
		}else
		{
		P = 1048576 - adc_P;
 8001e8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 8001e94:	62b8      	str	r0, [r7, #40]	; 0x28
 8001e96:	eb61 0303 	sbc.w	r3, r1, r3
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001ea0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001ea4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	07d9      	lsls	r1, r3, #31
 8001eb2:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001eb6:	07d0      	lsls	r0, r2, #31
 8001eb8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ebc:	1a84      	subs	r4, r0, r2
 8001ebe:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001ec2:	eb61 0303 	sbc.w	r3, r1, r3
 8001ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eca:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001ece:	4622      	mov	r2, r4
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	1891      	adds	r1, r2, r2
 8001ed4:	6239      	str	r1, [r7, #32]
 8001ed6:	415b      	adcs	r3, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ede:	4621      	mov	r1, r4
 8001ee0:	1851      	adds	r1, r2, r1
 8001ee2:	61b9      	str	r1, [r7, #24]
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	414b      	adcs	r3, r1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	018b      	lsls	r3, r1, #6
 8001efa:	4641      	mov	r1, r8
 8001efc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f00:	4641      	mov	r1, r8
 8001f02:	018a      	lsls	r2, r1, #6
 8001f04:	4641      	mov	r1, r8
 8001f06:	1889      	adds	r1, r1, r2
 8001f08:	6139      	str	r1, [r7, #16]
 8001f0a:	4649      	mov	r1, r9
 8001f0c:	eb43 0101 	adc.w	r1, r3, r1
 8001f10:	6179      	str	r1, [r7, #20]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f1e:	4649      	mov	r1, r9
 8001f20:	008b      	lsls	r3, r1, #2
 8001f22:	4641      	mov	r1, r8
 8001f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f28:	4641      	mov	r1, r8
 8001f2a:	008a      	lsls	r2, r1, #2
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	4622      	mov	r2, r4
 8001f34:	189b      	adds	r3, r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	eb42 0303 	adc.w	r3, r2, r3
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f4e:	4649      	mov	r1, r9
 8001f50:	008b      	lsls	r3, r1, #2
 8001f52:	4641      	mov	r1, r8
 8001f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f58:	4641      	mov	r1, r8
 8001f5a:	008a      	lsls	r2, r1, #2
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4603      	mov	r3, r0
 8001f62:	4622      	mov	r2, r4
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f6a:	462b      	mov	r3, r5
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	eb42 0303 	adc.w	r3, r2, r3
 8001f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f76:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f7e:	f7fe ffb1 	bl	8000ee4 <__aeabi_ldivmod>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
		var1_p = (((int64_t) BME->parameters.dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001f8a:	4bb6      	ldr	r3, [pc, #728]	; (8002264 <bme280_update+0x774>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	8adb      	ldrh	r3, [r3, #22]
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	17da      	asrs	r2, r3, #31
 8001f96:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f98:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f9a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001f9e:	f04f 0000 	mov.w	r0, #0
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	0b50      	lsrs	r0, r2, #13
 8001fa8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fac:	1359      	asrs	r1, r3, #13
 8001fae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	fb00 f203 	mul.w	r2, r0, r3
 8001fb8:	4623      	mov	r3, r4
 8001fba:	fb03 f301 	mul.w	r3, r3, r1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	fba2 1200 	umull	r1, r2, r2, r0
 8001fc6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001fca:	460a      	mov	r2, r1
 8001fcc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001fd0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fda:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001fde:	f04f 0000 	mov.w	r0, #0
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	0b50      	lsrs	r0, r2, #13
 8001fe8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fec:	1359      	asrs	r1, r3, #13
 8001fee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	fb00 f203 	mul.w	r2, r0, r3
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	fb03 f301 	mul.w	r3, r3, r1
 8001ffe:	4413      	add	r3, r2
 8002000:	4622      	mov	r2, r4
 8002002:	fba2 1200 	umull	r1, r2, r2, r0
 8002006:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800200a:	460a      	mov	r2, r1
 800200c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002010:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002014:	4413      	add	r3, r2
 8002016:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002026:	4621      	mov	r1, r4
 8002028:	0e4a      	lsrs	r2, r1, #25
 800202a:	4629      	mov	r1, r5
 800202c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002030:	4629      	mov	r1, r5
 8002032:	164b      	asrs	r3, r1, #25
 8002034:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		var2_p = (((int64_t) BME->parameters.dig_P8) * P) >> 19;
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <bme280_update+0x774>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	8a9b      	ldrh	r3, [r3, #20]
 800203e:	b21b      	sxth	r3, r3
 8002040:	b21b      	sxth	r3, r3
 8002042:	17da      	asrs	r2, r3, #31
 8002044:	673b      	str	r3, [r7, #112]	; 0x70
 8002046:	677a      	str	r2, [r7, #116]	; 0x74
 8002048:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800204c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002050:	462a      	mov	r2, r5
 8002052:	fb02 f203 	mul.w	r2, r2, r3
 8002056:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800205a:	4621      	mov	r1, r4
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002066:	4621      	mov	r1, r4
 8002068:	fba2 1201 	umull	r1, r2, r2, r1
 800206c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002070:	460a      	mov	r2, r1
 8002072:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002076:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800207a:	4413      	add	r3, r2
 800207c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800208c:	4621      	mov	r1, r4
 800208e:	0cca      	lsrs	r2, r1, #19
 8002090:	4629      	mov	r1, r5
 8002092:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002096:	4629      	mov	r1, r5
 8002098:	14cb      	asrs	r3, r1, #19
 800209a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters.dig_P7) << 4);
 800209e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80020a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80020a6:	1884      	adds	r4, r0, r2
 80020a8:	66bc      	str	r4, [r7, #104]	; 0x68
 80020aa:	eb41 0303 	adc.w	r3, r1, r3
 80020ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020b0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020b4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80020b8:	4621      	mov	r1, r4
 80020ba:	1889      	adds	r1, r1, r2
 80020bc:	6639      	str	r1, [r7, #96]	; 0x60
 80020be:	4629      	mov	r1, r5
 80020c0:	eb43 0101 	adc.w	r1, r3, r1
 80020c4:	6679      	str	r1, [r7, #100]	; 0x64
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020d2:	4623      	mov	r3, r4
 80020d4:	0a18      	lsrs	r0, r3, #8
 80020d6:	462b      	mov	r3, r5
 80020d8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020dc:	462b      	mov	r3, r5
 80020de:	1219      	asrs	r1, r3, #8
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <bme280_update+0x774>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	8a5b      	ldrh	r3, [r3, #18]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	17da      	asrs	r2, r3, #31
 80020ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80020ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80020fc:	464c      	mov	r4, r9
 80020fe:	0123      	lsls	r3, r4, #4
 8002100:	4644      	mov	r4, r8
 8002102:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002106:	4644      	mov	r4, r8
 8002108:	0122      	lsls	r2, r4, #4
 800210a:	1884      	adds	r4, r0, r2
 800210c:	603c      	str	r4, [r7, #0]
 800210e:	eb41 0303 	adc.w	r3, r1, r3
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002118:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		}

		BME->pressure = ((float)P / 256.0 / 100.0);
 800211c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002120:	f7fe fea2 	bl	8000e68 <__aeabi_l2f>
 8002124:	4603      	mov	r3, r0
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa2e 	bl	8000588 <__aeabi_f2d>
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <bme280_update+0x778>)
 8002132:	f7fe fbab 	bl	800088c <__aeabi_ddiv>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <bme280_update+0x77c>)
 8002144:	f7fe fba2 	bl	800088c <__aeabi_ddiv>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4945      	ldr	r1, [pc, #276]	; (8002264 <bme280_update+0x774>)
 800214e:	680c      	ldr	r4, [r1, #0]
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fd68 	bl	8000c28 <__aeabi_d2f>
 8002158:	4603      	mov	r3, r0
 800215a:	6363      	str	r3, [r4, #52]	; 0x34

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = BME->adcVals.uh;
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <bme280_update+0x774>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		var_h = (t_fine - ((int32_t)76800));
 8002166:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800216a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800216e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters.dig_H4) << 20) - (((int32_t)BME->parameters.dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters.dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters.dig_H2) + 8192) >> 14));
 8002172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002176:	039b      	lsls	r3, r3, #14
 8002178:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <bme280_update+0x774>)
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	8bd2      	ldrh	r2, [r2, #30]
 800217e:	b212      	sxth	r2, r2
 8002180:	0512      	lsls	r2, r2, #20
 8002182:	1a9a      	subs	r2, r3, r2
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <bme280_update+0x774>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	8c1b      	ldrh	r3, [r3, #32]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800219c:	0bdb      	lsrs	r3, r3, #15
 800219e:	4a31      	ldr	r2, [pc, #196]	; (8002264 <bme280_update+0x774>)
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80021a6:	b252      	sxtb	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80021ae:	fb01 f202 	mul.w	r2, r1, r2
 80021b2:	0a92      	lsrs	r2, r2, #10
 80021b4:	492b      	ldr	r1, [pc, #172]	; (8002264 <bme280_update+0x774>)
 80021b6:	6809      	ldr	r1, [r1, #0]
 80021b8:	7f09      	ldrb	r1, [r1, #28]
 80021ba:	b2c9      	uxtb	r1, r1
 80021bc:	4608      	mov	r0, r1
 80021be:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80021c2:	fb00 f101 	mul.w	r1, r0, r1
 80021c6:	0ac9      	lsrs	r1, r1, #11
 80021c8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80021cc:	fb01 f202 	mul.w	r2, r1, r2
 80021d0:	0a92      	lsrs	r2, r2, #10
 80021d2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80021d6:	4923      	ldr	r1, [pc, #140]	; (8002264 <bme280_update+0x774>)
 80021d8:	6809      	ldr	r1, [r1, #0]
 80021da:	8b49      	ldrh	r1, [r1, #26]
 80021dc:	b209      	sxth	r1, r1
 80021de:	fb01 f202 	mul.w	r2, r1, r2
 80021e2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80021e6:	0b92      	lsrs	r2, r2, #14
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters.dig_H1)) >> 4));
 80021f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021f4:	0bdb      	lsrs	r3, r3, #15
 80021f6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80021fa:	0bd2      	lsrs	r2, r2, #15
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	09db      	lsrs	r3, r3, #7
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <bme280_update+0x774>)
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	7e12      	ldrb	r2, [r2, #24]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800221a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800221e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002222:	bf28      	it	cs
 8002224:	f04f 53c8 	movcs.w	r3, #419430400	; 0x19000000
 8002228:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800222c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002230:	0b1b      	lsrs	r3, r3, #12
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <bme280_update+0x774>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002270 <bme280_update+0x780>
 8002242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002246:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		//get altitude
		bme280_get_altitude();
 800224a:	f7ff fa51 	bl	80016f0 <bme280_get_altitude>
		BME->isUpdated = 0;
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <bme280_update+0x774>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

}
 8002258:	bf00      	nop
 800225a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800225e:	46bd      	mov	sp, r7
 8002260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002264:	2000021c 	.word	0x2000021c
 8002268:	40700000 	.word	0x40700000
 800226c:	40590000 	.word	0x40590000
 8002270:	44800000 	.word	0x44800000

08002274 <bmi088_init>:
		Error_Handler();
}
#endif

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af04      	add	r7, sp, #16
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	HAL_StatusTypeDef retVal = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
	bmi_I2C = I2C_;
 8002282:	4aba      	ldr	r2, [pc, #744]	; (800256c <bmi088_init+0x2f8>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002288:	4ab9      	ldr	r2, [pc, #740]	; (8002570 <bmi088_init+0x2fc>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800228e:	4bb8      	ldr	r3, [pc, #736]	; (8002570 <bmi088_init+0x2fc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 8002296:	4bb6      	ldr	r3, [pc, #728]	; (8002570 <bmi088_init+0x2fc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	749a      	strb	r2, [r3, #18]
	HAL_UART_Transmit(&huart1, buffer, strlen((char*) buffer), 50);
	while(1);
#endif
	uint8_t buf[1];

	HAL_Delay(10);
 800229e:	200a      	movs	r0, #10
 80022a0:	f003 faf8 	bl	8005894 <HAL_Delay>

	buf[0] = 0x01;
 80022a4:	2301      	movs	r3, #1
 80022a6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80022a8:	4bb0      	ldr	r3, [pc, #704]	; (800256c <bmi088_init+0x2f8>)
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	2364      	movs	r3, #100	; 0x64
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	2301      	movs	r3, #1
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2301      	movs	r3, #1
 80022bc:	227c      	movs	r2, #124	; 0x7c
 80022be:	2130      	movs	r1, #48	; 0x30
 80022c0:	f005 f916 	bl	80074f0 <HAL_I2C_Mem_Write>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80022d2:	4ba6      	ldr	r3, [pc, #664]	; (800256c <bmi088_init+0x2f8>)
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2301      	movs	r3, #1
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	227d      	movs	r2, #125	; 0x7d
 80022e8:	2130      	movs	r1, #48	; 0x30
 80022ea:	f005 f901 	bl	80074f0 <HAL_I2C_Mem_Write>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80022f8:	2014      	movs	r0, #20
 80022fa:	f003 facb 	bl	8005894 <HAL_Delay>

	buf[0] = ACC_RESET;
 80022fe:	23b6      	movs	r3, #182	; 0xb6
 8002300:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002302:	4b9a      	ldr	r3, [pc, #616]	; (800256c <bmi088_init+0x2f8>)
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	2364      	movs	r3, #100	; 0x64
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	2301      	movs	r3, #1
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	227e      	movs	r2, #126	; 0x7e
 8002318:	2130      	movs	r1, #48	; 0x30
 800231a:	f005 f8e9 	bl	80074f0 <HAL_I2C_Mem_Write>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	4313      	orrs	r3, r2
 8002326:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <bmi088_init+0xc0>
 800232e:	4b91      	ldr	r3, [pc, #580]	; (8002574 <bmi088_init+0x300>)
 8002330:	2279      	movs	r2, #121	; 0x79
 8002332:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002334:	2028      	movs	r0, #40	; 0x28
 8002336:	f003 faad 	bl	8005894 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800233a:	23b0      	movs	r3, #176	; 0xb0
 800233c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <bmi088_init+0x2f8>)
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	2364      	movs	r3, #100	; 0x64
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	2301      	movs	r3, #1
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	227e      	movs	r2, #126	; 0x7e
 8002354:	2130      	movs	r1, #48	; 0x30
 8002356:	f005 f8cb 	bl	80074f0 <HAL_I2C_Mem_Write>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	4313      	orrs	r3, r2
 8002362:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <bmi088_init+0xfc>
 800236a:	4b82      	ldr	r3, [pc, #520]	; (8002574 <bmi088_init+0x300>)
 800236c:	227e      	movs	r2, #126	; 0x7e
 800236e:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002370:	2028      	movs	r0, #40	; 0x28
 8002372:	f003 fa8f 	bl	8005894 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8002376:	23b6      	movs	r3, #182	; 0xb6
 8002378:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <bmi088_init+0x2f8>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	2364      	movs	r3, #100	; 0x64
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	2301      	movs	r3, #1
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	2214      	movs	r2, #20
 8002390:	21d0      	movs	r1, #208	; 0xd0
 8002392:	f005 f8ad 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4313      	orrs	r3, r2
 800239e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <bmi088_init+0x138>
 80023a6:	4b73      	ldr	r3, [pc, #460]	; (8002574 <bmi088_init+0x300>)
 80023a8:	2283      	movs	r2, #131	; 0x83
 80023aa:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 80023ac:	2028      	movs	r0, #40	; 0x28
 80023ae:	f003 fa71 	bl	8005894 <HAL_Delay>

	HAL_I2C_DeInit(bmi_I2C);  // I2C arayüzünü de-initialize edin
 80023b2:	4b6e      	ldr	r3, [pc, #440]	; (800256c <bmi088_init+0x2f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 f86a 	bl	8007490 <HAL_I2C_DeInit>
	HAL_Delay(5);
 80023bc:	2005      	movs	r0, #5
 80023be:	f003 fa69 	bl	8005894 <HAL_Delay>
	HAL_I2C_Init(bmi_I2C);    // I2C arayüzünü yeniden initialize edin
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <bmi088_init+0x2f8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 ff1e 	bl	8007208 <HAL_I2C_Init>
	HAL_Delay(5);
 80023cc:	2005      	movs	r0, #5
 80023ce:	f003 fa61 	bl	8005894 <HAL_Delay>
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
	HAL_Delay(40);
*/

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <bmi088_init+0x2fc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	7e5b      	ldrb	r3, [r3, #25]
 80023d8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80023da:	4b64      	ldr	r3, [pc, #400]	; (800256c <bmi088_init+0x2f8>)
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	2364      	movs	r3, #100	; 0x64
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	220f      	movs	r2, #15
 80023f0:	21d0      	movs	r1, #208	; 0xd0
 80023f2:	f005 f87d 	bl	80074f0 <HAL_I2C_Mem_Write>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <bmi088_init+0x198>
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <bmi088_init+0x300>)
 8002408:	2299      	movs	r2, #153	; 0x99
 800240a:	601a      	str	r2, [r3, #0]


	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <bmi088_init+0x2fc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	7e1b      	ldrb	r3, [r3, #24]
 8002412:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <bmi088_init+0x2f8>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	2314      	movs	r3, #20
 800241a:	9302      	str	r3, [sp, #8]
 800241c:	2301      	movs	r3, #1
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2301      	movs	r3, #1
 8002428:	2210      	movs	r2, #16
 800242a:	21d0      	movs	r1, #208	; 0xd0
 800242c:	f005 f860 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	4313      	orrs	r3, r2
 8002438:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <bmi088_init+0x1d2>
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <bmi088_init+0x300>)
 8002442:	229e      	movs	r2, #158	; 0x9e
 8002444:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <bmi088_init+0x2fc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	7ddb      	ldrb	r3, [r3, #23]
 800244c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <bmi088_init+0x2f8>)
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	2314      	movs	r3, #20
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2301      	movs	r3, #1
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2211      	movs	r2, #17
 8002464:	21d0      	movs	r1, #208	; 0xd0
 8002466:	f005 f843 	bl	80074f0 <HAL_I2C_Mem_Write>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4313      	orrs	r3, r2
 8002472:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <bmi088_init+0x20c>
 800247a:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <bmi088_init+0x300>)
 800247c:	22a2      	movs	r2, #162	; 0xa2
 800247e:	601a      	str	r2, [r3, #0]
	HAL_Delay(40);
 8002480:	2028      	movs	r0, #40	; 0x28
 8002482:	f003 fa07 	bl	8005894 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <bmi088_init+0x2f8>)
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	2314      	movs	r3, #20
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2301      	movs	r3, #1
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	2215      	movs	r2, #21
 80024a0:	21d0      	movs	r1, #208	; 0xd0
 80024a2:	f005 f825 	bl	80074f0 <HAL_I2C_Mem_Write>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <bmi088_init+0x248>
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <bmi088_init+0x300>)
 80024b8:	22a8      	movs	r2, #168	; 0xa8
 80024ba:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 80024bc:	2301      	movs	r3, #1
 80024be:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <bmi088_init+0x2f8>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	2314      	movs	r3, #20
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2301      	movs	r3, #1
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	2216      	movs	r2, #22
 80024d6:	21d0      	movs	r1, #208	; 0xd0
 80024d8:	f005 f80a 	bl	80074f0 <HAL_I2C_Mem_Write>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <bmi088_init+0x27e>
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <bmi088_init+0x300>)
 80024ee:	22ac      	movs	r2, #172	; 0xac
 80024f0:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80024f2:	2301      	movs	r3, #1
 80024f4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <bmi088_init+0x2f8>)
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	2314      	movs	r3, #20
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	2301      	movs	r3, #1
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f107 030c 	add.w	r3, r7, #12
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2301      	movs	r3, #1
 800250a:	2218      	movs	r2, #24
 800250c:	21d0      	movs	r1, #208	; 0xd0
 800250e:	f004 ffef 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4313      	orrs	r3, r2
 800251a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <bmi088_init+0x2b4>
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <bmi088_init+0x300>)
 8002524:	22b0      	movs	r2, #176	; 0xb0
 8002526:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002528:	2304      	movs	r3, #4
 800252a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <bmi088_init+0x2f8>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	2314      	movs	r3, #20
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2301      	movs	r3, #1
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2301      	movs	r3, #1
 8002540:	227d      	movs	r2, #125	; 0x7d
 8002542:	2130      	movs	r1, #48	; 0x30
 8002544:	f004 ffd4 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	4313      	orrs	r3, r2
 8002550:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <bmi088_init+0x2ea>
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <bmi088_init+0x300>)
 800255a:	22b5      	movs	r2, #181	; 0xb5
 800255c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800255e:	2008      	movs	r0, #8
 8002560:	f003 f998 	bl	8005894 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <bmi088_init+0x2fc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	7cdb      	ldrb	r3, [r3, #19]
 800256a:	e005      	b.n	8002578 <bmi088_init+0x304>
 800256c:	20000220 	.word	0x20000220
 8002570:	20000224 	.word	0x20000224
 8002574:	2000022c 	.word	0x2000022c
 8002578:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <bmi088_init+0x42c>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	2314      	movs	r3, #20
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	227c      	movs	r2, #124	; 0x7c
 8002590:	2130      	movs	r1, #48	; 0x30
 8002592:	f004 ffad 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	4313      	orrs	r3, r2
 800259e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <bmi088_init+0x338>
 80025a6:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <bmi088_init+0x430>)
 80025a8:	22ba      	movs	r2, #186	; 0xba
 80025aa:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80025ac:	2008      	movs	r0, #8
 80025ae:	f003 f971 	bl	8005894 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <bmi088_init+0x434>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	7d5b      	ldrb	r3, [r3, #21]
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	b25a      	sxtb	r2, r3
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <bmi088_init+0x434>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	7d9b      	ldrb	r3, [r3, #22]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <bmi088_init+0x42c>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	2314      	movs	r3, #20
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2301      	movs	r3, #1
 80025e0:	2240      	movs	r2, #64	; 0x40
 80025e2:	2130      	movs	r1, #48	; 0x30
 80025e4:	f004 ff84 	bl	80074f0 <HAL_I2C_Mem_Write>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <bmi088_init+0x38a>
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <bmi088_init+0x430>)
 80025fa:	22bf      	movs	r2, #191	; 0xbf
 80025fc:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <bmi088_init+0x434>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	7d1b      	ldrb	r3, [r3, #20]
 8002604:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <bmi088_init+0x42c>)
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	2314      	movs	r3, #20
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2301      	movs	r3, #1
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2301      	movs	r3, #1
 800261a:	2241      	movs	r2, #65	; 0x41
 800261c:	2130      	movs	r1, #48	; 0x30
 800261e:	f004 ff67 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	4313      	orrs	r3, r2
 800262a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <bmi088_init+0x3c4>
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <bmi088_init+0x430>)
 8002634:	22c3      	movs	r2, #195	; 0xc3
 8002636:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002638:	230a      	movs	r3, #10
 800263a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <bmi088_init+0x42c>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	2314      	movs	r3, #20
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	2301      	movs	r3, #1
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2301      	movs	r3, #1
 8002650:	2253      	movs	r2, #83	; 0x53
 8002652:	2130      	movs	r1, #48	; 0x30
 8002654:	f004 ff4c 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	4313      	orrs	r3, r2
 8002660:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002662:	2304      	movs	r3, #4
 8002664:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <bmi088_init+0x42c>)
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	2314      	movs	r3, #20
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	2301      	movs	r3, #1
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2301      	movs	r3, #1
 800267a:	2258      	movs	r2, #88	; 0x58
 800267c:	2130      	movs	r1, #48	; 0x30
 800267e:	f004 ff37 	bl	80074f0 <HAL_I2C_Mem_Write>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	4313      	orrs	r3, r2
 800268a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800268c:	2009      	movs	r0, #9
 800268e:	f003 fe50 	bl	8006332 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002692:	200a      	movs	r0, #10
 8002694:	f003 fe4d 	bl	8006332 <HAL_NVIC_EnableIRQ>
	//if(retVal != HAL_OK)

		//Error_Handler();

}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000220 	.word	0x20000220
 80026a4:	2000022c 	.word	0x2000022c
 80026a8:	20000224 	.word	0x20000224
 80026ac:	00000000 	.word	0x00000000

080026b0 <bmi088_update>:
void bmi088_update()
{
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	b08d      	sub	sp, #52	; 0x34
 80026b6:	af04      	add	r7, sp, #16

	if(BMI->rawDatas.isAccelUpdated)
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <bmi088_update+0x88>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	7c9b      	ldrb	r3, [r3, #18]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 81fb 	beq.w	8002aba <bmi088_update+0x40a>
	{
		HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <bmi088_update+0x8c>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <bmi088_update+0x88>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	2314      	movs	r3, #20
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2309      	movs	r3, #9
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	9200      	str	r2, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	2212      	movs	r2, #18
 80026dc:	2130      	movs	r1, #48	; 0x30
 80026de:	f005 f801 	bl	80076e4 <HAL_I2C_Mem_Read>
 80026e2:	4603      	mov	r3, r0
 80026e4:	77fb      	strb	r3, [r7, #31]
		HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <bmi088_update+0x8c>)
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <bmi088_update+0x88>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3309      	adds	r3, #9
 80026f0:	2214      	movs	r2, #20
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	2202      	movs	r2, #2
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2301      	movs	r3, #1
 80026fc:	2222      	movs	r2, #34	; 0x22
 80026fe:	2130      	movs	r1, #48	; 0x30
 8002700:	f004 fff0 	bl	80076e4 <HAL_I2C_Mem_Read>

		uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <bmi088_update+0x88>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	7a5b      	ldrb	r3, [r3, #9]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	b21a      	sxth	r2, r3
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <bmi088_update+0x88>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	7a9b      	ldrb	r3, [r3, #10]
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	b21b      	sxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	83bb      	strh	r3, [r7, #28]
		int16_t Temp_int11 = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	837b      	strh	r3, [r7, #26]
		if (Temp_uint11 > 1023){
 8002724:	8bbb      	ldrh	r3, [r7, #28]
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d309      	bcc.n	8002740 <bmi088_update+0x90>
			Temp_int11 = Temp_uint11 - 2048;
 800272c:	8bbb      	ldrh	r3, [r7, #28]
 800272e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002732:	b29b      	uxth	r3, r3
 8002734:	837b      	strh	r3, [r7, #26]
 8002736:	e029      	b.n	800278c <bmi088_update+0xdc>
 8002738:	20000224 	.word	0x20000224
 800273c:	20000220 	.word	0x20000220
		}
		else{
			Temp_int11 = Temp_uint11;
 8002740:	8bbb      	ldrh	r3, [r7, #28]
 8002742:	837b      	strh	r3, [r7, #26]
			BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 8002744:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002750:	ee17 0a90 	vmov	r0, s15
 8002754:	f7fd ff18 	bl	8000588 <__aeabi_f2d>
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002760:	f7fd ff6a 	bl	8000638 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4bbb      	ldr	r3, [pc, #748]	; (8002a60 <bmi088_update+0x3b0>)
 8002772:	f7fd fdab 	bl	80002cc <__adddf3>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	49ba      	ldr	r1, [pc, #744]	; (8002a64 <bmi088_update+0x3b4>)
 800277c:	680e      	ldr	r6, [r1, #0]
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe fa51 	bl	8000c28 <__aeabi_d2f>
 8002786:	4603      	mov	r3, r0
 8002788:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
		}
		uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 800278c:	4bb5      	ldr	r3, [pc, #724]	; (8002a64 <bmi088_update+0x3b4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	7a1b      	ldrb	r3, [r3, #8]
 8002792:	041a      	lsls	r2, r3, #16
 8002794:	4bb3      	ldr	r3, [pc, #716]	; (8002a64 <bmi088_update+0x3b4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	79db      	ldrb	r3, [r3, #7]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4313      	orrs	r3, r2
 800279e:	4ab1      	ldr	r2, [pc, #708]	; (8002a64 <bmi088_update+0x3b4>)
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	7992      	ldrb	r2, [r2, #6]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

		BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b2:	ee17 0a90 	vmov	r0, s15
 80027b6:	f7fd fee7 	bl	8000588 <__aeabi_f2d>
 80027ba:	a3a3      	add	r3, pc, #652	; (adr r3, 8002a48 <bmi088_update+0x398>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f7fd ff3a 	bl	8000638 <__aeabi_dmul>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a50 <bmi088_update+0x3a0>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f7fe f85b 	bl	800088c <__aeabi_ddiv>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	49a2      	ldr	r1, [pc, #648]	; (8002a64 <bmi088_update+0x3b4>)
 80027dc:	680e      	ldr	r6, [r1, #0]
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fe fa21 	bl	8000c28 <__aeabi_d2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0

		int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 80027ec:	4b9d      	ldr	r3, [pc, #628]	; (8002a64 <bmi088_update+0x3b4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	795b      	ldrb	r3, [r3, #5]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	4b9b      	ldr	r3, [pc, #620]	; (8002a64 <bmi088_update+0x3b4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	791b      	ldrb	r3, [r3, #4]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	827b      	strh	r3, [r7, #18]
		int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002802:	4b98      	ldr	r3, [pc, #608]	; (8002a64 <bmi088_update+0x3b4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b21a      	sxth	r2, r3
 800280c:	4b95      	ldr	r3, [pc, #596]	; (8002a64 <bmi088_update+0x3b4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	789b      	ldrb	r3, [r3, #2]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	823b      	strh	r3, [r7, #16]
		int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8002818:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <bmi088_update+0x3b4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	b21a      	sxth	r2, r3
 8002822:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <bmi088_update+0x3b4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b21b      	sxth	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	81fb      	strh	r3, [r7, #14]

		BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 800282e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283a:	ee17 0a90 	vmov	r0, s15
 800283e:	f7fd fea3 	bl	8000588 <__aeabi_f2d>
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <bmi088_update+0x3b8>)
 8002848:	f7fe f820 	bl	800088c <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b84      	ldr	r3, [pc, #528]	; (8002a6c <bmi088_update+0x3bc>)
 800285a:	f7fd feed 	bl	8000638 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <bmi088_update+0x3c0>)
 800286c:	f7fd fee4 	bl	8000638 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4692      	mov	sl, r2
 8002876:	469b      	mov	fp, r3
 8002878:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <bmi088_update+0x3b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	7d1b      	ldrb	r3, [r3, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002888:	ee17 0a90 	vmov	r0, s15
 800288c:	f7fd fe7c 	bl	8000588 <__aeabi_f2d>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	ec43 2b11 	vmov	d1, r2, r3
 8002898:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8002a58 <bmi088_update+0x3a8>
 800289c:	f00c ff54 	bl	800f748 <pow>
 80028a0:	ec53 2b10 	vmov	r2, r3, d0
 80028a4:	4650      	mov	r0, sl
 80028a6:	4659      	mov	r1, fp
 80028a8:	f7fd fec6 	bl	8000638 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	4b6e      	ldr	r3, [pc, #440]	; (8002a74 <bmi088_update+0x3c4>)
 80028ba:	f7fd fd05 	bl	80002c8 <__aeabi_dsub>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4968      	ldr	r1, [pc, #416]	; (8002a64 <bmi088_update+0x3b4>)
 80028c4:	680e      	ldr	r6, [r1, #0]
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fe f9ad 	bl	8000c28 <__aeabi_d2f>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
		BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 80028d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e0:	ee17 0a90 	vmov	r0, s15
 80028e4:	f7fd fe50 	bl	8000588 <__aeabi_f2d>
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <bmi088_update+0x3b8>)
 80028ee:	f7fd ffcd 	bl	800088c <__aeabi_ddiv>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <bmi088_update+0x3bc>)
 8002900:	f7fd fe9a 	bl	8000638 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b57      	ldr	r3, [pc, #348]	; (8002a70 <bmi088_update+0x3c0>)
 8002912:	f7fd fe91 	bl	8000638 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4692      	mov	sl, r2
 800291c:	469b      	mov	fp, r3
 800291e:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <bmi088_update+0x3b4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	7d1b      	ldrb	r3, [r3, #20]
 8002924:	3301      	adds	r3, #1
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ee17 0a90 	vmov	r0, s15
 8002932:	f7fd fe29 	bl	8000588 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ec43 2b11 	vmov	d1, r2, r3
 800293e:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002a58 <bmi088_update+0x3a8>
 8002942:	f00c ff01 	bl	800f748 <pow>
 8002946:	ec53 2b10 	vmov	r2, r3, d0
 800294a:	4650      	mov	r0, sl
 800294c:	4659      	mov	r1, fp
 800294e:	f7fd fe73 	bl	8000638 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <bmi088_update+0x3c8>)
 8002960:	f7fd fcb4 	bl	80002cc <__adddf3>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	493e      	ldr	r1, [pc, #248]	; (8002a64 <bmi088_update+0x3b4>)
 800296a:	680e      	ldr	r6, [r1, #0]
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f95a 	bl	8000c28 <__aeabi_d2f>
 8002974:	4603      	mov	r3, r0
 8002976:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
		BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 800297a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ee17 0a90 	vmov	r0, s15
 800298a:	f7fd fdfd 	bl	8000588 <__aeabi_f2d>
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <bmi088_update+0x3b8>)
 8002994:	f7fd ff7a 	bl	800088c <__aeabi_ddiv>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <bmi088_update+0x3bc>)
 80029a6:	f7fd fe47 	bl	8000638 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <bmi088_update+0x3c0>)
 80029b8:	f7fd fe3e 	bl	8000638 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4692      	mov	sl, r2
 80029c2:	469b      	mov	fp, r3
 80029c4:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <bmi088_update+0x3b4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	7d1b      	ldrb	r3, [r3, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d4:	ee17 0a90 	vmov	r0, s15
 80029d8:	f7fd fdd6 	bl	8000588 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	ec43 2b11 	vmov	d1, r2, r3
 80029e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a58 <bmi088_update+0x3a8>
 80029e8:	f00c feae 	bl	800f748 <pow>
 80029ec:	ec53 2b10 	vmov	r2, r3, d0
 80029f0:	4650      	mov	r0, sl
 80029f2:	4659      	mov	r1, fp
 80029f4:	f7fd fe20 	bl	8000638 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <bmi088_update+0x3c4>)
 8002a06:	f7fd fc61 	bl	80002cc <__adddf3>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4915      	ldr	r1, [pc, #84]	; (8002a64 <bmi088_update+0x3b4>)
 8002a10:	680e      	ldr	r6, [r1, #0]
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f907 	bl	8000c28 <__aeabi_d2f>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0

		//BMI->vel_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET - 1000.0) * BMI->deltaTime;
		//BMI->vel_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET) * BMI->deltaTime;
		//BMI->vel_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET) * BMI->deltaTime;

		BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <bmi088_update+0x3b4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <bmi088_update+0x3b4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d520      	bpl.n	8002a80 <bmi088_update+0x3d0>
 8002a3e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002a7c <bmi088_update+0x3cc>
 8002a42:	e027      	b.n	8002a94 <bmi088_update+0x3e4>
 8002a44:	f3af 8000 	nop.w
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	40438800 	.word	0x40438800
 8002a50:	00000000 	.word	0x00000000
 8002a54:	412e8480 	.word	0x412e8480
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	40000000 	.word	0x40000000
 8002a60:	40370000 	.word	0x40370000
 8002a64:	20000224 	.word	0x20000224
 8002a68:	40e00000 	.word	0x40e00000
 8002a6c:	408f4000 	.word	0x408f4000
 8002a70:	3ff80000 	.word	0x3ff80000
 8002a74:	40100000 	.word	0x40100000
 8002a78:	402e0000 	.word	0x402e0000
 8002a7c:	00000000 	.word	0x00000000
 8002a80:	4bb5      	ldr	r3, [pc, #724]	; (8002d58 <bmi088_update+0x6a8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a88:	4bb3      	ldr	r3, [pc, #716]	; (8002d58 <bmi088_update+0x6a8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	4bb0      	ldr	r3, [pc, #704]	; (8002d58 <bmi088_update+0x6a8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		BMI->lastTime = BMI->currentTime;
 8002a9c:	4bae      	ldr	r3, [pc, #696]	; (8002d58 <bmi088_update+0x6a8>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4bad      	ldr	r3, [pc, #692]	; (8002d58 <bmi088_update+0x6a8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002aa8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		BMI->rawDatas.isAccelUpdated = 0;
 8002aac:	4baa      	ldr	r3, [pc, #680]	; (8002d58 <bmi088_update+0x6a8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	749a      	strb	r2, [r3, #18]
		isTimeUpdated = 1;
 8002ab4:	4ba9      	ldr	r3, [pc, #676]	; (8002d5c <bmi088_update+0x6ac>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
		UNUSED(retVal);
	}

	if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 8002aba:	4ba7      	ldr	r3, [pc, #668]	; (8002d58 <bmi088_update+0x6a8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	7c5b      	ldrb	r3, [r3, #17]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 81cc 	beq.w	8002e5e <bmi088_update+0x7ae>
 8002ac6:	4ba5      	ldr	r3, [pc, #660]	; (8002d5c <bmi088_update+0x6ac>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 81c7 	beq.w	8002e5e <bmi088_update+0x7ae>
	{
		if(isStarded){
 8002ad0:	4ba3      	ldr	r3, [pc, #652]	; (8002d60 <bmi088_update+0x6b0>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 81b7 	beq.w	8002e48 <bmi088_update+0x798>
			HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 20);
 8002ada:	4ba2      	ldr	r3, [pc, #648]	; (8002d64 <bmi088_update+0x6b4>)
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <bmi088_update+0x6a8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330b      	adds	r3, #11
 8002ae4:	2214      	movs	r2, #20
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	2206      	movs	r2, #6
 8002aea:	9201      	str	r2, [sp, #4]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2301      	movs	r3, #1
 8002af0:	2202      	movs	r2, #2
 8002af2:	21d0      	movs	r1, #208	; 0xd0
 8002af4:	f004 fdf6 	bl	80076e4 <HAL_I2C_Mem_Read>
			int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8002af8:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <bmi088_update+0x6a8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	7c1b      	ldrb	r3, [r3, #16]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	4b95      	ldr	r3, [pc, #596]	; (8002d58 <bmi088_update+0x6a8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	7bdb      	ldrb	r3, [r3, #15]
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	81bb      	strh	r3, [r7, #12]
			int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002b0e:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <bmi088_update+0x6a8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	7b9b      	ldrb	r3, [r3, #14]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	b21a      	sxth	r2, r3
 8002b18:	4b8f      	ldr	r3, [pc, #572]	; (8002d58 <bmi088_update+0x6a8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	7b5b      	ldrb	r3, [r3, #13]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	817b      	strh	r3, [r7, #10]
			int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002b24:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <bmi088_update+0x6a8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	7b1b      	ldrb	r3, [r3, #12]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	4b8a      	ldr	r3, [pc, #552]	; (8002d58 <bmi088_update+0x6a8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	7adb      	ldrb	r3, [r3, #11]
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	813b      	strh	r3, [r7, #8]
			/*
			BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
			BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
			BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
			 */
			BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[0]);
 8002b3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fd10 	bl	8000564 <__aeabi_i2d>
 8002b44:	a382      	add	r3, pc, #520	; (adr r3, 8002d50 <bmi088_update+0x6a0>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fe9f 	bl	800088c <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4692      	mov	sl, r2
 8002b54:	469b      	mov	fp, r3
 8002b56:	4b80      	ldr	r3, [pc, #512]	; (8002d58 <bmi088_update+0x6a8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	7e5b      	ldrb	r3, [r3, #25]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b62:	4113      	asrs	r3, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcfd 	bl	8000564 <__aeabi_i2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4650      	mov	r0, sl
 8002b70:	4659      	mov	r1, fp
 8002b72:	f7fd fd61 	bl	8000638 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <bmi088_update+0x6b8>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	4e74      	ldr	r6, [pc, #464]	; (8002d58 <bmi088_update+0x6a8>)
 8002b86:	6836      	ldr	r6, [r6, #0]
 8002b88:	f7fd fb9e 	bl	80002c8 <__aeabi_dsub>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	e9c6 2324 	strd	r2, r3, [r6, #144]	; 0x90
			BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[1]);
 8002b94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fce3 	bl	8000564 <__aeabi_i2d>
 8002b9e:	a36c      	add	r3, pc, #432	; (adr r3, 8002d50 <bmi088_update+0x6a0>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f7fd fe72 	bl	800088c <__aeabi_ddiv>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4692      	mov	sl, r2
 8002bae:	469b      	mov	fp, r3
 8002bb0:	4b69      	ldr	r3, [pc, #420]	; (8002d58 <bmi088_update+0x6a8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	7e5b      	ldrb	r3, [r3, #25]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002bbc:	4113      	asrs	r3, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcd0 	bl	8000564 <__aeabi_i2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4650      	mov	r0, sl
 8002bca:	4659      	mov	r1, fp
 8002bcc:	f7fd fd34 	bl	8000638 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <bmi088_update+0x6b8>)
 8002bda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bde:	4e5e      	ldr	r6, [pc, #376]	; (8002d58 <bmi088_update+0x6a8>)
 8002be0:	6836      	ldr	r6, [r6, #0]
 8002be2:	f7fd fb71 	bl	80002c8 <__aeabi_dsub>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	e9c6 2322 	strd	r2, r3, [r6, #136]	; 0x88
			BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals_d[2]);
 8002bee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fcb6 	bl	8000564 <__aeabi_i2d>
 8002bf8:	a355      	add	r3, pc, #340	; (adr r3, 8002d50 <bmi088_update+0x6a0>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fe45 	bl	800088c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4692      	mov	sl, r2
 8002c08:	469b      	mov	fp, r3
 8002c0a:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <bmi088_update+0x6a8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	7e5b      	ldrb	r3, [r3, #25]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c16:	4113      	asrs	r3, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fca3 	bl	8000564 <__aeabi_i2d>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4650      	mov	r0, sl
 8002c24:	4659      	mov	r1, fp
 8002c26:	f7fd fd07 	bl	8000638 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <bmi088_update+0x6b8>)
 8002c34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c38:	4e47      	ldr	r6, [pc, #284]	; (8002d58 <bmi088_update+0x6a8>)
 8002c3a:	6836      	ldr	r6, [r6, #0]
 8002c3c:	f7fd fb44 	bl	80002c8 <__aeabi_dsub>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80

			BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <bmi088_update+0x6a8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc99 	bl	8000588 <__aeabi_f2d>
 8002c56:	e9c7 0100 	strd	r0, r1, [r7]
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <bmi088_update+0x6a8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8002c62:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <bmi088_update+0x6a8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc8c 	bl	8000588 <__aeabi_f2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4650      	mov	r0, sl
 8002c76:	4659      	mov	r1, fp
 8002c78:	f7fd fcde 	bl	8000638 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c84:	f7fd fb22 	bl	80002cc <__adddf3>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4932      	ldr	r1, [pc, #200]	; (8002d58 <bmi088_update+0x6a8>)
 8002c8e:	680e      	ldr	r6, [r1, #0]
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f7fd ffc8 	bl	8000c28 <__aeabi_d2f>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
			BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8002c9e:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <bmi088_update+0x6a8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc6e 	bl	8000588 <__aeabi_f2d>
 8002cac:	e9c7 0100 	strd	r0, r1, [r7]
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <bmi088_update+0x6a8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <bmi088_update+0x6a8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc61 	bl	8000588 <__aeabi_f2d>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4650      	mov	r0, sl
 8002ccc:	4659      	mov	r1, fp
 8002cce:	f7fd fcb3 	bl	8000638 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cda:	f7fd faf7 	bl	80002cc <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	491d      	ldr	r1, [pc, #116]	; (8002d58 <bmi088_update+0x6a8>)
 8002ce4:	680e      	ldr	r6, [r1, #0]
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff9d 	bl	8000c28 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
			BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <bmi088_update+0x6a8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fc43 	bl	8000588 <__aeabi_f2d>
 8002d02:	e9c7 0100 	strd	r0, r1, [r7]
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <bmi088_update+0x6a8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <bmi088_update+0x6a8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc36 	bl	8000588 <__aeabi_f2d>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4650      	mov	r0, sl
 8002d22:	4659      	mov	r1, fp
 8002d24:	f7fd fc88 	bl	8000638 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d30:	f7fd facc 	bl	80002cc <__adddf3>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4907      	ldr	r1, [pc, #28]	; (8002d58 <bmi088_update+0x6a8>)
 8002d3a:	680e      	ldr	r6, [r1, #0]
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd ff72 	bl	8000c28 <__aeabi_d2f>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98


			//update_quaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime);
			//calculateQuaternion(q, BMI->gyro_x, BMI->gyro_y, BMI->gyro_z, BMI->deltaTime, vector);

			updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <bmi088_update+0x6a8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e00d      	b.n	8002d6c <bmi088_update+0x6bc>
 8002d50:	00000000 	.word	0x00000000
 8002d54:	40dfffc0 	.word	0x40dfffc0
 8002d58:	20000224 	.word	0x20000224
 8002d5c:	20000228 	.word	0x20000228
 8002d60:	20000229 	.word	0x20000229
 8002d64:	20000220 	.word	0x20000220
 8002d68:	20000260 	.word	0x20000260
 8002d6c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002d70:	4690      	mov	r8, r2
 8002d72:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002d76:	a33c      	add	r3, pc, #240	; (adr r3, 8002e68 <bmi088_update+0x7b8>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	4640      	mov	r0, r8
 8002d7e:	4649      	mov	r1, r9
 8002d80:	f7fd fc5a 	bl	8000638 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <bmi088_update+0x7c0>)
 8002d92:	f7fd fd7b 	bl	800088c <__aeabi_ddiv>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f7fd ff43 	bl	8000c28 <__aeabi_d2f>
 8002da2:	4606      	mov	r6, r0
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <bmi088_update+0x7c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8002dac:	a32e      	add	r3, pc, #184	; (adr r3, 8002e68 <bmi088_update+0x7b8>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fc41 	bl	8000638 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <bmi088_update+0x7c0>)
 8002dc4:	f7fd fd62 	bl	800088c <__aeabi_ddiv>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7fd ff2a 	bl	8000c28 <__aeabi_d2f>
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <bmi088_update+0x7c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002dde:	4614      	mov	r4, r2
 8002de0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002de4:	a320      	add	r3, pc, #128	; (adr r3, 8002e68 <bmi088_update+0x7b8>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fc23 	bl	8000638 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <bmi088_update+0x7c0>)
 8002e00:	f7fd fd44 	bl	800088c <__aeabi_ddiv>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd ff0c 	bl	8000c28 <__aeabi_d2f>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <bmi088_update+0x7c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8002e1a:	eef0 1a67 	vmov.f32	s3, s15
 8002e1e:	ee01 2a10 	vmov	s2, r2
 8002e22:	ee00 8a90 	vmov	s1, r8
 8002e26:	ee00 6a10 	vmov	s0, r6
 8002e2a:	f001 f9db 	bl	80041e4 <updateQuaternion>
			quaternionToEuler();
 8002e2e:	f001 fb03 	bl	8004438 <quaternionToEuler>

			BMI->rawDatas.isGyroUpdated = 0;
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <bmi088_update+0x7c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <bmi088_update+0x7c8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
			is_gyro_offset = 1;
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <bmi088_update+0x7cc>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
		{
			BMI->lastTime = BMI->currentTime;
			isStarded = 1;
		}
	}
}
 8002e46:	e00a      	b.n	8002e5e <bmi088_update+0x7ae>
			BMI->lastTime = BMI->currentTime;
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <bmi088_update+0x7c4>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <bmi088_update+0x7c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8002e54:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			isStarded = 1;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <bmi088_update+0x7d0>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e68:	54442d18 	.word	0x54442d18
 8002e6c:	400921fb 	.word	0x400921fb
 8002e70:	40668000 	.word	0x40668000
 8002e74:	20000224 	.word	0x20000224
 8002e78:	20000228 	.word	0x20000228
 8002e7c:	2000022a 	.word	0x2000022a
 8002e80:	20000229 	.word	0x20000229

08002e84 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <bmi088_getAccelDatas_INT+0x18>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	749a      	strb	r2, [r3, #18]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000224 	.word	0x20000224

08002ea0 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <bmi088_getGyroDatas_INT+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	745a      	strb	r2, [r3, #17]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000224 	.word	0x20000224

08002ebc <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002ec0:	f7ff fbf6 	bl	80026b0 <bmi088_update>
		if(is_gyro_offset == 1)
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <getOffset+0xfc>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d1f9      	bne.n	8002ec0 <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <getOffset+0x100>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed4:	da32      	bge.n	8002f3c <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <getOffset+0x104>)
 8002ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <getOffset+0x108>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002ee4:	f7fd f9f2 	bl	80002cc <__adddf3>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <getOffset+0x104>)
 8002eee:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <getOffset+0x104>)
 8002ef4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <getOffset+0x108>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002f00:	f7fd f9e4 	bl	80002cc <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	492d      	ldr	r1, [pc, #180]	; (8002fc0 <getOffset+0x104>)
 8002f0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <getOffset+0x104>)
 8002f10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <getOffset+0x108>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f1c:	f7fd f9d6 	bl	80002cc <__adddf3>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4926      	ldr	r1, [pc, #152]	; (8002fc0 <getOffset+0x104>)
 8002f26:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <getOffset+0x100>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <getOffset+0x100>)
 8002f32:	6013      	str	r3, [r2, #0]
					 offset_vals_d[2] = g[0][2];
					 quaternionSet_zero();
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <getOffset+0xfc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e7c1      	b.n	8002ec0 <getOffset+0x4>
					 g[0][0] /= 1000.0;
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <getOffset+0x104>)
 8002f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <getOffset+0x10c>)
 8002f48:	f7fd fca0 	bl	800088c <__aeabi_ddiv>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	491b      	ldr	r1, [pc, #108]	; (8002fc0 <getOffset+0x104>)
 8002f52:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <getOffset+0x104>)
 8002f58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <getOffset+0x10c>)
 8002f62:	f7fd fc93 	bl	800088c <__aeabi_ddiv>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4915      	ldr	r1, [pc, #84]	; (8002fc0 <getOffset+0x104>)
 8002f6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <getOffset+0x104>)
 8002f72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <getOffset+0x10c>)
 8002f7c:	f7fd fc86 	bl	800088c <__aeabi_ddiv>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <getOffset+0x104>)
 8002f86:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offset_vals_d[0] = g[0][0];
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <getOffset+0x104>)
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	490e      	ldr	r1, [pc, #56]	; (8002fcc <getOffset+0x110>)
 8002f92:	e9c1 2300 	strd	r2, r3, [r1]
					 offset_vals_d[1] = g[0][1];
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <getOffset+0x104>)
 8002f98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f9c:	490b      	ldr	r1, [pc, #44]	; (8002fcc <getOffset+0x110>)
 8002f9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 offset_vals_d[2] = g[0][2];
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <getOffset+0x104>)
 8002fa4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fa8:	4908      	ldr	r1, [pc, #32]	; (8002fcc <getOffset+0x110>)
 8002faa:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 quaternionSet_zero();
 8002fae:	f001 fd09 	bl	80049c4 <quaternionSet_zero>
					 break;
 8002fb2:	bf00      	nop
		}

	}
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	2000022a 	.word	0x2000022a
 8002fbc:	20000278 	.word	0x20000278
 8002fc0:	20000230 	.word	0x20000230
 8002fc4:	20000224 	.word	0x20000224
 8002fc8:	408f4000 	.word	0x408f4000
 8002fcc:	20000260 	.word	0x20000260

08002fd0 <calculateCRC>:
#include "queternion.h"

union DataPack veriler;

static uint8_t calculateCRC()
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
	int check_sum = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8002fda:	2301      	movs	r3, #1
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	e00a      	b.n	8002ff6 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <calculateCRC+0x48>)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b3c      	cmp	r3, #60	; 0x3c
 8002ffa:	d9f1      	bls.n	8002fe0 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	425a      	negs	r2, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	bf58      	it	pl
 8003006:	4253      	negpl	r3, r2
 8003008:	b2db      	uxtb	r3, r3
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	2000027c 	.word	0x2000027c

0800301c <sendRF>:

static void sendRF()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_uart4_tx) != HAL_DMA_STATE_BUSY)
 8003020:	4806      	ldr	r0, [pc, #24]	; (800303c <sendRF+0x20>)
 8003022:	f003 fd2f 	bl	8006a84 <HAL_DMA_GetState>
 8003026:	4603      	mov	r3, r0
 8003028:	2b02      	cmp	r3, #2
 800302a:	d004      	beq.n	8003036 <sendRF+0x1a>
	{
		//HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, SET);
		//HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
		HAL_UART_Transmit_DMA(&huart4, veriler.arr, sizeof(veriler.dataYapi));
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	4904      	ldr	r1, [pc, #16]	; (8003040 <sendRF+0x24>)
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <sendRF+0x28>)
 8003032:	f006 f81f 	bl	8009074 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart4, "hello\n\r", 7);
	}
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000478 	.word	0x20000478
 8003040:	2000027c 	.word	0x2000027c
 8003044:	200003ac 	.word	0x200003ac

08003048 <sendPC>:

static void sendPC()
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
	if (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_BUSY)
 800304c:	4806      	ldr	r0, [pc, #24]	; (8003068 <sendPC+0x20>)
 800304e:	f003 fd19 	bl	8006a84 <HAL_DMA_GetState>
 8003052:	4603      	mov	r3, r0
 8003054:	2b02      	cmp	r3, #2
 8003056:	d004      	beq.n	8003062 <sendPC+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, veriler.arr , sizeof(veriler.dataYapi));
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	4904      	ldr	r1, [pc, #16]	; (800306c <sendPC+0x24>)
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <sendPC+0x28>)
 800305e:	f006 f809 	bl	8009074 <HAL_UART_Transmit_DMA>
	}
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000538 	.word	0x20000538
 800306c:	2000027c 	.word	0x2000027c
 8003070:	200003f0 	.word	0x200003f0

08003074 <packDatas>:

void packDatas(bmi088_struct_t *bmi, BME_280_t *bme, S_GPS_L86_DATA *gps, power *guc, uint8_t rocketStat)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6178      	str	r0, [r7, #20]
 800307c:	6139      	str	r1, [r7, #16]
 800307e:	60fa      	str	r2, [r7, #12]
 8003080:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 8003082:	4bc0      	ldr	r3, [pc, #768]	; (8003384 <packDatas+0x310>)
 8003084:	22ff      	movs	r2, #255	; 0xff
 8003086:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	edd3 7a03 	vldr	s15, [r3, #12]
 8003096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800309a:	ee17 3a90 	vmov	r3, s15
 800309e:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4ab9      	ldr	r2, [pc, #740]	; (8003388 <packDatas+0x314>)
 80030a4:	fb82 1203 	smull	r1, r2, r2, r3
 80030a8:	1151      	asrs	r1, r2, #5
 80030aa:	17da      	asrs	r2, r3, #31
 80030ac:	1a8a      	subs	r2, r1, r2
 80030ae:	2164      	movs	r1, #100	; 0x64
 80030b0:	fb01 f202 	mul.w	r2, r1, r2
 80030b4:	1a9a      	subs	r2, r3, r2
 80030b6:	4613      	mov	r3, r2
 80030b8:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4ab2      	ldr	r2, [pc, #712]	; (8003388 <packDatas+0x314>)
 80030be:	fb82 1203 	smull	r1, r2, r2, r3
 80030c2:	1152      	asrs	r2, r2, #5
 80030c4:	17db      	asrs	r3, r3, #31
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4aae      	ldr	r2, [pc, #696]	; (8003388 <packDatas+0x314>)
 80030ce:	fb82 1203 	smull	r1, r2, r2, r3
 80030d2:	1151      	asrs	r1, r2, #5
 80030d4:	17da      	asrs	r2, r3, #31
 80030d6:	1a8a      	subs	r2, r1, r2
 80030d8:	2164      	movs	r1, #100	; 0x64
 80030da:	fb01 f202 	mul.w	r2, r1, r2
 80030de:	1a9a      	subs	r2, r3, r2
 80030e0:	4613      	mov	r3, r2
 80030e2:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	b25a      	sxtb	r2, r3
 80030ea:	7fbb      	ldrb	r3, [r7, #30]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (rocketStat);
 80030f8:	7fbb      	ldrb	r3, [r7, #30]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8003102:	4313      	orrs	r3, r2
 8003104:	b25b      	sxtb	r3, r3
 8003106:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 8003108:	4a9e      	ldr	r2, [pc, #632]	; (8003384 <packDatas+0x310>)
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 800310e:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <packDatas+0x310>)
 8003110:	7fbb      	ldrb	r3, [r7, #30]
 8003112:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(guc->voltaj * 100);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800338c <packDatas+0x318>
 800311e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003126:	ee17 3a90 	vmov	r3, s15
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b95      	ldr	r3, [pc, #596]	; (8003384 <packDatas+0x310>)
 800312e:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(guc->mWatt_s);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	edd3 7a03 	vldr	s15, [r3, #12]
 8003136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313a:	ee17 3a90 	vmov	r3, s15
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b90      	ldr	r3, [pc, #576]	; (8003384 <packDatas+0x310>)
 8003142:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->temperature * 2);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800314a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800314e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003152:	edc7 7a01 	vstr	s15, [r7, #4]
 8003156:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800315a:	4b8a      	ldr	r3, [pc, #552]	; (8003384 <packDatas+0x310>)
 800315c:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->humidity);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003168:	edc7 7a01 	vstr	s15, [r7, #4]
 800316c:	793a      	ldrb	r2, [r7, #4]
 800316e:	4b85      	ldr	r3, [pc, #532]	; (8003384 <packDatas+0x310>)
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = bme->altitude;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	4a82      	ldr	r2, [pc, #520]	; (8003384 <packDatas+0x310>)
 800317a:	6093      	str	r3, [r2, #8]
	veriler.dataYapi.maxAltitude = (int16_t)(int)bme->maxAltitude;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003186:	ee17 3a90 	vmov	r3, s15
 800318a:	b21a      	sxth	r2, r3
 800318c:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <packDatas+0x310>)
 800318e:	875a      	strh	r2, [r3, #58]	; 0x3a
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	4a7b      	ldr	r2, [pc, #492]	; (8003384 <packDatas+0x310>)
 8003196:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a79      	ldr	r2, [pc, #484]	; (8003384 <packDatas+0x310>)
 800319e:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a77      	ldr	r2, [pc, #476]	; (8003384 <packDatas+0x310>)
 80031a6:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->gyro_x;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fd39 	bl	8000c28 <__aeabi_d2f>
 80031b6:	4603      	mov	r3, r0
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef1 7a67 	vneg.f32	s15, s15
 80031c0:	4b70      	ldr	r3, [pc, #448]	; (8003384 <packDatas+0x310>)
 80031c2:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->gyro_z;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fd2a 	bl	8000c28 <__aeabi_d2f>
 80031d4:	4603      	mov	r3, r0
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef1 7a67 	vneg.f32	s15, s15
 80031de:	4b69      	ldr	r3, [pc, #420]	; (8003384 <packDatas+0x310>)
 80031e0:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->gyro_y;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f7fd fd1b 	bl	8000c28 <__aeabi_d2f>
 80031f2:	4603      	mov	r3, r0
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef1 7a67 	vneg.f32	s15, s15
 80031fc:	4b61      	ldr	r3, [pc, #388]	; (8003384 <packDatas+0x310>)
 80031fe:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->acc_x / 1000;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003208:	eddf 6a61 	vldr	s13, [pc, #388]	; 8003390 <packDatas+0x31c>
 800320c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003210:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <packDatas+0x310>)
 8003212:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	veriler.dataYapi.accY = bmi->acc_z / 1000;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800321c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003390 <packDatas+0x31c>
 8003220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003224:	4b57      	ldr	r3, [pc, #348]	; (8003384 <packDatas+0x310>)
 8003226:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = (rocketStat > STAT_ROCKET_READY) ? (-bmi->acc_y / 1000) - 1.0 : bmi->acc_y / 1000;
 800322a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800322e:	2b01      	cmp	r3, #1
 8003230:	d90d      	bls.n	800324e <packDatas+0x1da>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003238:	eeb1 7a67 	vneg.f32	s14, s15
 800323c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003390 <packDatas+0x31c>
 8003240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800324c:	e006      	b.n	800325c <packDatas+0x1e8>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8003254:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003390 <packDatas+0x31c>
 8003258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800325c:	4b49      	ldr	r3, [pc, #292]	; (8003384 <packDatas+0x310>)
 800325e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	b25a      	sxtb	r2, r3
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <packDatas+0x320>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003276:	ee17 3a90 	vmov	r3, s15
 800327a:	135b      	asrs	r3, r3, #13
 800327c:	b25b      	sxtb	r3, r3
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	b25b      	sxtb	r3, r3
 8003284:	4313      	orrs	r3, r2
 8003286:	b25a      	sxtb	r2, r3
 8003288:	4b42      	ldr	r3, [pc, #264]	; (8003394 <packDatas+0x320>)
 800328a:	edd3 7a01 	vldr	s15, [r3, #4]
 800328e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003292:	ee17 3a90 	vmov	r3, s15
 8003296:	139b      	asrs	r3, r3, #14
 8003298:	b25b      	sxtb	r3, r3
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b25a      	sxtb	r2, r3
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <packDatas+0x320>)
 80032a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ae:	ee17 3a90 	vmov	r3, s15
 80032b2:	13db      	asrs	r3, r3, #15
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <packDatas+0x310>)
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->velocity * 10);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80032ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032da:	ee17 3a90 	vmov	r3, s15
 80032de:	b21a      	sxth	r2, r3
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <packDatas+0x310>)
 80032e2:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 80032e4:	f001 f980 	bl	80045e8 <quaternionToTheta>
 80032e8:	eef0 7a40 	vmov.f32	s15, s0
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <packDatas+0x310>)
 80032ee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <packDatas+0x320>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fc:	ee17 3a90 	vmov	r3, s15
 8003300:	2b00      	cmp	r3, #0
 8003302:	bfb8      	it	lt
 8003304:	425b      	neglt	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <packDatas+0x310>)
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <packDatas+0x320>)
 8003310:	edd3 7a01 	vldr	s15, [r3, #4]
 8003314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003318:	ee17 3a90 	vmov	r3, s15
 800331c:	2b00      	cmp	r3, #0
 800331e:	bfb8      	it	lt
 8003320:	425b      	neglt	r3, r3
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <packDatas+0x310>)
 8003326:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <packDatas+0x320>)
 800332c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003334:	ee17 3a90 	vmov	r3, s15
 8003338:	2b00      	cmp	r3, #0
 800333a:	bfb8      	it	lt
 800333c:	425b      	neglt	r3, r3
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b10      	ldr	r3, [pc, #64]	; (8003384 <packDatas+0x310>)
 8003342:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8003346:	f7ff fe43 	bl	8002fd0 <calculateCRC>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <packDatas+0x310>)
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <packDatas+0x310>)
 8003356:	220d      	movs	r2, #13
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <packDatas+0x310>)
 800335e:	220a      	movs	r2, #10
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

#ifdef PRINT_DECODED
	if(guc->voltaj > LOW_BAT){
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800336e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd0f      	ble.n	8003398 <packDatas+0x324>
		sendRF();
 8003378:	f7ff fe50 	bl	800301c <sendRF>
		sendPC();
 800337c:	f7ff fe64 	bl	8003048 <sendPC>
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 8003380:	e00c      	b.n	800339c <packDatas+0x328>
 8003382:	bf00      	nop
 8003384:	2000027c 	.word	0x2000027c
 8003388:	51eb851f 	.word	0x51eb851f
 800338c:	42c80000 	.word	0x42c80000
 8003390:	447a0000 	.word	0x447a0000
 8003394:	200008ec 	.word	0x200008ec
		sendPC();
 8003398:	f7ff fe56 	bl	8003048 <sendPC>
}
 800339c:	bf00      	nop
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <ext_pin_open>:
 *      Author: yahya
 */
#include "externalPins.h"

void ext_pin_open(ext_pin_s *p_ext_pin)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	899b      	ldrh	r3, [r3, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4619      	mov	r1, r3
 80033b8:	f003 feda 	bl	8007170 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80033bc:	f002 fa5e 	bl	800587c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = 100;		//ms
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2264      	movs	r2, #100	; 0x64
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <ext_pin_open_duration>:

void ext_pin_open_duration(ext_pin_s *p_ext_pin, uint32_t duration)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, SET);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	899b      	ldrh	r3, [r3, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4619      	mov	r1, r3
 80033ea:	f003 fec1 	bl	8007170 <HAL_GPIO_WritePin>
	p_ext_pin->last_time = HAL_GetTick();
 80033ee:	f002 fa45 	bl	800587c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	605a      	str	r2, [r3, #4]
	p_ext_pin->duration = duration;		//ms
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	609a      	str	r2, [r3, #8]
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <ext_pin_update>:
{
	HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
}

void ext_pin_update(ext_pin_s *p_ext_pin)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - p_ext_pin->last_time) > p_ext_pin->duration)
 800340e:	f002 fa35 	bl	800587c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d907      	bls.n	8003432 <ext_pin_update+0x2c>
	{
		HAL_GPIO_WritePin(p_ext_pin->gpio_port, p_ext_pin->gpio_pin, RESET);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	899b      	ldrh	r3, [r3, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	4619      	mov	r1, r3
 800342e:	f003 fe9f 	bl	8007170 <HAL_GPIO_WritePin>
	}
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	460b      	mov	r3, r1
 800344a:	71bb      	strb	r3, [r7, #6]
 800344c:	4613      	mov	r3, r2
 800344e:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 8003454:	79bb      	ldrb	r3, [r7, #6]
 8003456:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 8003458:	797b      	ldrb	r3, [r7, #5]
 800345a:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e00c      	b.n	800347c <send_command+0x40>
        command[3 + i] = data[i];
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	441a      	add	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3303      	adds	r3, #3
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	3318      	adds	r3, #24
 8003470:	443b      	add	r3, r7
 8003472:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b08      	cmp	r3, #8
 8003480:	ddef      	ble.n	8003462 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart4, command, 12, 100);
 8003482:	f107 0108 	add.w	r1, r7, #8
 8003486:	2364      	movs	r3, #100	; 0x64
 8003488:	220c      	movs	r2, #12
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <send_command+0x5c>)
 800348c:	f005 fd60 	bl	8008f50 <HAL_UART_Transmit>
}
 8003490:	bf00      	nop
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200003ac 	.word	0x200003ac

0800349c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2208      	movs	r2, #8
 80034d2:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2207      	movs	r2, #7
 80034d8:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	79db      	ldrb	r3, [r3, #7]
 80034de:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	799b      	ldrb	r3, [r3, #6]
 80034e4:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7a5b      	ldrb	r3, [r3, #9]
 80034ea:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7c5b      	ldrb	r3, [r3, #17]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	789a      	ldrb	r2, [r3, #2]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7a9b      	ldrb	r3, [r3, #10]
 800350a:	4313      	orrs	r3, r2
 800350c:	b2da      	uxtb	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	78db      	ldrb	r3, [r3, #3]
 8003512:	4313      	orrs	r3, r2
 8003514:	b2db      	uxtb	r3, r3
 8003516:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7a1b      	ldrb	r3, [r3, #8]
 800351c:	2b53      	cmp	r3, #83	; 0x53
 800351e:	d902      	bls.n	8003526 <lora_configure+0x8a>
    	config->channel = 83;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2253      	movs	r2, #83	; 0x53
 8003524:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7a1b      	ldrb	r3, [r3, #8]
 800352a:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7ada      	ldrb	r2, [r3, #11]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7b1b      	ldrb	r3, [r3, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	b2da      	uxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7b5b      	ldrb	r3, [r3, #13]
 800353c:	4313      	orrs	r3, r2
 800353e:	b2da      	uxtb	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7b9b      	ldrb	r3, [r3, #14]
 8003544:	4313      	orrs	r3, r2
 8003546:	b2da      	uxtb	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	7bdb      	ldrb	r3, [r3, #15]
 800354c:	4313      	orrs	r3, r2
 800354e:	b2da      	uxtb	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7c1b      	ldrb	r3, [r3, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	795b      	ldrb	r3, [r3, #5]
 800355e:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	791b      	ldrb	r3, [r3, #4]
 8003564:	753b      	strb	r3, [r7, #20]

    send_command(0xC0, 0x00, 0x09, data);
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	2209      	movs	r2, #9
 800356c:	2100      	movs	r1, #0
 800356e:	20c0      	movs	r0, #192	; 0xc0
 8003570:	f7ff ff64 	bl	800343c <send_command>
}
 8003574:	bf00      	nop
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	0000      	movs	r0, r0
	...

08003580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003586:	f002 f913 	bl	80057b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800358a:	f000 fa03 	bl	8003994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358e:	f000 fbf3 	bl	8003d78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003592:	f000 fad1 	bl	8003b38 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003596:	f000 fafd 	bl	8003b94 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800359a:	f000 fb53 	bl	8003c44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800359e:	f000 fb7b 	bl	8003c98 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80035a2:	f000 fba3 	bl	8003cec <MX_DMA_Init>
  MX_ADC1_Init();
 80035a6:	f000 fa67 	bl	8003a78 <MX_ADC1_Init>
  MX_UART4_Init();
 80035aa:	f000 fb21 	bl	8003bf0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80035ae:	2009      	movs	r0, #9
 80035b0:	f002 fecd 	bl	800634e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80035b4:	200a      	movs	r0, #10
 80035b6:	f002 feca 	bl	800634e <HAL_NVIC_DisableIRQ>

  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80035ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035be:	4837      	ldr	r0, [pc, #220]	; (800369c <main+0x11c>)
 80035c0:	f003 fdef 	bl	80071a2 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 80035c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035c8:	f002 f964 	bl	8005894 <HAL_Delay>
  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80035cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035d0:	4832      	ldr	r0, [pc, #200]	; (800369c <main+0x11c>)
 80035d2:	f003 fde6 	bl	80071a2 <HAL_GPIO_TogglePin>
  bmiBegin();
 80035d6:	f000 fc71 	bl	8003ebc <bmiBegin>
  bme280_init(&BME280_sensor, &hi2c1, BME280_MODE_NORMAL, BME280_OS_8, BME280_FILTER_8);
 80035da:	2303      	movs	r3, #3
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2304      	movs	r3, #4
 80035e0:	2203      	movs	r2, #3
 80035e2:	492f      	ldr	r1, [pc, #188]	; (80036a0 <main+0x120>)
 80035e4:	482f      	ldr	r0, [pc, #188]	; (80036a4 <main+0x124>)
 80035e6:	f7fe f8f1 	bl	80017cc <bme280_init>
  loraBegin();
 80035ea:	f000 fc89 	bl	8003f00 <loraBegin>
  HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 80035ee:	2364      	movs	r3, #100	; 0x64
 80035f0:	2213      	movs	r2, #19
 80035f2:	492d      	ldr	r1, [pc, #180]	; (80036a8 <main+0x128>)
 80035f4:	482d      	ldr	r0, [pc, #180]	; (80036ac <main+0x12c>)
 80035f6:	f005 fcab 	bl	8008f50 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, "$PMTK251,9600*17\r\n", 18, 100);				// 9600 bps
  HAL_UART_DeInit(&huart4);
 80035fa:	482d      	ldr	r0, [pc, #180]	; (80036b0 <main+0x130>)
 80035fc:	f005 fc79 	bl	8008ef2 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart2);
 8003600:	482a      	ldr	r0, [pc, #168]	; (80036ac <main+0x12c>)
 8003602:	f005 fc76 	bl	8008ef2 <HAL_UART_DeInit>
  HAL_Delay(10);
 8003606:	200a      	movs	r0, #10
 8003608:	f002 f944 	bl	8005894 <HAL_Delay>
  huart4.Init.BaudRate = 115200;
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <main+0x130>)
 800360e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003612:	605a      	str	r2, [r3, #4]
  huart2.Init.BaudRate = 57600;
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <main+0x12c>)
 8003616:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800361a:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&huart4);					//telemetri
 800361c:	4824      	ldr	r0, [pc, #144]	; (80036b0 <main+0x130>)
 800361e:	f005 fc1b 	bl	8008e58 <HAL_UART_Init>
  HAL_UART_Init(&huart2);					//GNSS
 8003622:	4822      	ldr	r0, [pc, #136]	; (80036ac <main+0x12c>)
 8003624:	f005 fc18 	bl	8008e58 <HAL_UART_Init>
  HAL_DMA_Init(&hdma_usart1_tx);
 8003628:	4822      	ldr	r0, [pc, #136]	; (80036b4 <main+0x134>)
 800362a:	f002 feab 	bl	8006384 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart2_rx);
 800362e:	4822      	ldr	r0, [pc, #136]	; (80036b8 <main+0x138>)
 8003630:	f002 fea8 	bl	8006384 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_tx);
 8003634:	4821      	ldr	r0, [pc, #132]	; (80036bc <main+0x13c>)
 8003636:	f002 fea5 	bl	8006384 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_uart4_rx);
 800363a:	4821      	ldr	r0, [pc, #132]	; (80036c0 <main+0x140>)
 800363c:	f002 fea2 	bl	8006384 <HAL_DMA_Init>
  HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 8003640:	2203      	movs	r2, #3
 8003642:	4920      	ldr	r1, [pc, #128]	; (80036c4 <main+0x144>)
 8003644:	481a      	ldr	r0, [pc, #104]	; (80036b0 <main+0x130>)
 8003646:	f005 fd93 	bl	8009170 <HAL_UART_Receive_DMA>

  mos_1.gpio_port = P_1_MOS_GPIO_Port;
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <main+0x148>)
 800364c:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <main+0x14c>)
 800364e:	601a      	str	r2, [r3, #0]
  mos_1.gpio_pin = P_1_MOS_Pin;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <main+0x148>)
 8003652:	2208      	movs	r2, #8
 8003654:	819a      	strh	r2, [r3, #12]
  mos_2.gpio_port = P_2_MOS_GPIO_Port;
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <main+0x150>)
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <main+0x14c>)
 800365a:	601a      	str	r2, [r3, #0]
  mos_2.gpio_pin = P_2_MOS_Pin;
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <main+0x150>)
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	819a      	strh	r2, [r3, #12]
  led.gpio_port = LED_GPIO_Port;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <main+0x154>)
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <main+0x11c>)
 8003666:	601a      	str	r2, [r3, #0]
  led.gpio_pin = LED_Pin;
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <main+0x154>)
 800366a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800366e:	819a      	strh	r2, [r3, #12]
  buzzer.gpio_port = BUZZER_GPIO_Port;
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <main+0x158>)
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <main+0x11c>)
 8003674:	601a      	str	r2, [r3, #0]
  buzzer.gpio_pin = BUZZER_Pin;
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <main+0x158>)
 8003678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800367c:	819a      	strh	r2, [r3, #12]
  // Timer'ı başlat

  //Bu makro gps verisini gözlemlemek içindir.
  //VIEW_GPS()

  getOffset();
 800367e:	f7ff fc1d 	bl	8002ebc <getOffset>

  UsrGpsL86Init(&huart2);
 8003682:	480a      	ldr	r0, [pc, #40]	; (80036ac <main+0x12c>)
 8003684:	f001 fe68 	bl	8005358 <UsrGpsL86Init>
  HAL_Delay(200);
 8003688:	20c8      	movs	r0, #200	; 0xc8
 800368a:	f002 f903 	bl	8005894 <HAL_Delay>
  rocketStatus = STAT_ROCKET_READY;
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <main+0x15c>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 5 ; i++)
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e02d      	b.n	80036f6 <main+0x176>
 800369a:	bf00      	nop
 800369c:	40020400 	.word	0x40020400
 80036a0:	20000304 	.word	0x20000304
 80036a4:	200005f8 	.word	0x200005f8
 80036a8:	080113f8 	.word	0x080113f8
 80036ac:	20000434 	.word	0x20000434
 80036b0:	200003ac 	.word	0x200003ac
 80036b4:	20000538 	.word	0x20000538
 80036b8:	20000598 	.word	0x20000598
 80036bc:	20000478 	.word	0x20000478
 80036c0:	200004d8 	.word	0x200004d8
 80036c4:	2000077c 	.word	0x2000077c
 80036c8:	20000784 	.word	0x20000784
 80036cc:	40020800 	.word	0x40020800
 80036d0:	20000794 	.word	0x20000794
 80036d4:	200007a4 	.word	0x200007a4
 80036d8:	200007b4 	.word	0x200007b4
 80036dc:	20000004 	.word	0x20000004
  {
	  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80036e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036e4:	4896      	ldr	r0, [pc, #600]	; (8003940 <main+0x3c0>)
 80036e6:	f003 fd5c 	bl	80071a2 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80036ea:	20c8      	movs	r0, #200	; 0xc8
 80036ec:	f002 f8d2 	bl	8005894 <HAL_Delay>
  for(int i = 0; i < 5 ; i++)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	ddf1      	ble.n	80036e0 <main+0x160>
  }
  HAL_Delay(900);
 80036fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003700:	f002 f8c8 	bl	8005894 <HAL_Delay>
  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003708:	488d      	ldr	r0, [pc, #564]	; (8003940 <main+0x3c0>)
 800370a:	f003 fd4a 	bl	80071a2 <HAL_GPIO_TogglePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bmi088_update();
 800370e:	f7fe ffcf 	bl	80026b0 <bmi088_update>
	  bme280_update();
 8003712:	f7fe f9ed 	bl	8001af0 <bme280_update>
	  measurePower(&guc);
 8003716:	488b      	ldr	r0, [pc, #556]	; (8003944 <main+0x3c4>)
 8003718:	f000 fc32 	bl	8003f80 <measurePower>

	  ext_pin_update(&mos_1);
 800371c:	488a      	ldr	r0, [pc, #552]	; (8003948 <main+0x3c8>)
 800371e:	f7ff fe72 	bl	8003406 <ext_pin_update>
	  ext_pin_update(&mos_2);
 8003722:	488a      	ldr	r0, [pc, #552]	; (800394c <main+0x3cc>)
 8003724:	f7ff fe6f 	bl	8003406 <ext_pin_update>
	  ext_pin_update(&led);
 8003728:	4889      	ldr	r0, [pc, #548]	; (8003950 <main+0x3d0>)
 800372a:	f7ff fe6c 	bl	8003406 <ext_pin_update>
	  ext_pin_update(&buzzer);
 800372e:	4889      	ldr	r0, [pc, #548]	; (8003954 <main+0x3d4>)
 8003730:	f7ff fe69 	bl	8003406 <ext_pin_update>

#if defined(ALGORITHM_1)
	  algorithm_1_update(&BME280_sensor);
#endif
#if defined(ALGORITHM_2)
	  float teta = quaternionToTheta();
 8003734:	f000 ff58 	bl	80045e8 <quaternionToTheta>
 8003738:	ed87 0a00 	vstr	s0, [r7]
	  algorithm_2_update(&BME280_sensor, &BMI_sensor, teta);
 800373c:	ed97 0a00 	vldr	s0, [r7]
 8003740:	4985      	ldr	r1, [pc, #532]	; (8003958 <main+0x3d8>)
 8003742:	4886      	ldr	r0, [pc, #536]	; (800395c <main+0x3dc>)
 8003744:	f7fd fdf4 	bl	8001330 <algorithm_2_update>
#endif



		  if(rocketStatus == STAT_FLIGHT_STARTED)
 8003748:	4b85      	ldr	r3, [pc, #532]	; (8003960 <main+0x3e0>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d102      	bne.n	8003756 <main+0x1d6>
			  lora_hz = 5;
 8003750:	4b84      	ldr	r3, [pc, #528]	; (8003964 <main+0x3e4>)
 8003752:	4a85      	ldr	r2, [pc, #532]	; (8003968 <main+0x3e8>)
 8003754:	601a      	str	r2, [r3, #0]

	  	  currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003756:	f002 f891 	bl	800587c <HAL_GetTick>
 800375a:	ee07 0a90 	vmov	s15, r0
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	ee17 0a90 	vmov	r0, s15
 8003766:	f7fc ff0f 	bl	8000588 <__aeabi_f2d>
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <main+0x3ec>)
 8003770:	f7fd f88c 	bl	800088c <__aeabi_ddiv>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	f7fd fa54 	bl	8000c28 <__aeabi_d2f>
 8003780:	4603      	mov	r3, r0
 8003782:	4a7b      	ldr	r2, [pc, #492]	; (8003970 <main+0x3f0>)
 8003784:	6013      	str	r3, [r2, #0]

	  	 //Set initial quaternion every minute.
		 if(fabs(currentTime - lastTime2) > 60)
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <main+0x3f0>)
 8003788:	ed93 7a00 	vldr	s14, [r3]
 800378c:	4b79      	ldr	r3, [pc, #484]	; (8003974 <main+0x3f4>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003796:	eef0 7ae7 	vabs.f32	s15, s15
 800379a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003978 <main+0x3f8>
 800379e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	dd55      	ble.n	8003854 <main+0x2d4>
		 {
			 if(rocketStatus == STAT_ROCKET_READY && sqrt(pow(BMI_sensor.gyro_x, 2) + pow(BMI_sensor.gyro_y, 2) + pow(BMI_sensor.gyro_z, 2)) < 5.0)
 80037a8:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <main+0x3e0>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d14d      	bne.n	800384c <main+0x2cc>
 80037b0:	4b69      	ldr	r3, [pc, #420]	; (8003958 <main+0x3d8>)
 80037b2:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80037b6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8003930 <main+0x3b0>
 80037ba:	eeb0 0a47 	vmov.f32	s0, s14
 80037be:	eef0 0a67 	vmov.f32	s1, s15
 80037c2:	f00b ffc1 	bl	800f748 <pow>
 80037c6:	ec55 4b10 	vmov	r4, r5, d0
 80037ca:	4b63      	ldr	r3, [pc, #396]	; (8003958 <main+0x3d8>)
 80037cc:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80037d0:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8003930 <main+0x3b0>
 80037d4:	eeb0 0a47 	vmov.f32	s0, s14
 80037d8:	eef0 0a67 	vmov.f32	s1, s15
 80037dc:	f00b ffb4 	bl	800f748 <pow>
 80037e0:	ec53 2b10 	vmov	r2, r3, d0
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f7fc fd70 	bl	80002cc <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4b58      	ldr	r3, [pc, #352]	; (8003958 <main+0x3d8>)
 80037f6:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80037fa:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8003930 <main+0x3b0>
 80037fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003802:	eef0 0a67 	vmov.f32	s1, s15
 8003806:	f00b ff9f 	bl	800f748 <pow>
 800380a:	ec53 2b10 	vmov	r2, r3, d0
 800380e:	4620      	mov	r0, r4
 8003810:	4629      	mov	r1, r5
 8003812:	f7fc fd5b 	bl	80002cc <__adddf3>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ec43 2b17 	vmov	d7, r2, r3
 800381e:	eeb0 0a47 	vmov.f32	s0, s14
 8003822:	eef0 0a67 	vmov.f32	s1, s15
 8003826:	f00b ffff 	bl	800f828 <sqrt>
 800382a:	ec51 0b10 	vmov	r0, r1, d0
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	4b52      	ldr	r3, [pc, #328]	; (800397c <main+0x3fc>)
 8003834:	f7fd f972 	bl	8000b1c <__aeabi_dcmplt>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <main+0x2cc>
			 {
				 quaternionSet_zero();
 800383e:	f001 f8c1 	bl	80049c4 <quaternionSet_zero>
				 ext_pin_open_duration(&buzzer, 500);
 8003842:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003846:	4843      	ldr	r0, [pc, #268]	; (8003954 <main+0x3d4>)
 8003848:	f7ff fdc4 	bl	80033d4 <ext_pin_open_duration>
			 }
			 lastTime2 = currentTime;
 800384c:	4b48      	ldr	r3, [pc, #288]	; (8003970 <main+0x3f0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a48      	ldr	r2, [pc, #288]	; (8003974 <main+0x3f4>)
 8003852:	6013      	str	r3, [r2, #0]
		 }

		 //GNSS get location
		 if(g_GnssRx_Flag)
 8003854:	4b4a      	ldr	r3, [pc, #296]	; (8003980 <main+0x400>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <main+0x2e2>
		 {
			 Usr_GpsL86GetValues(&gnss_data);
 800385c:	4849      	ldr	r0, [pc, #292]	; (8003984 <main+0x404>)
 800385e:	f001 fd8b 	bl	8005378 <Usr_GpsL86GetValues>
		 }

		 //Lora timer;
		 currentTime = ((float)HAL_GetTick()) / 1000.0;
 8003862:	f002 f80b 	bl	800587c <HAL_GetTick>
 8003866:	ee07 0a90 	vmov	s15, r0
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	ee17 0a90 	vmov	r0, s15
 8003872:	f7fc fe89 	bl	8000588 <__aeabi_f2d>
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	4b3c      	ldr	r3, [pc, #240]	; (800396c <main+0x3ec>)
 800387c:	f7fd f806 	bl	800088c <__aeabi_ddiv>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f7fd f9ce 	bl	8000c28 <__aeabi_d2f>
 800388c:	4603      	mov	r3, r0
 800388e:	4a38      	ldr	r2, [pc, #224]	; (8003970 <main+0x3f0>)
 8003890:	6013      	str	r3, [r2, #0]
		 if(fabs(currentTime - loraLastTime) > (1.0 / lora_hz))
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <main+0x3f0>)
 8003894:	ed93 7a00 	vldr	s14, [r3]
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <main+0x408>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a2:	eef0 7ae7 	vabs.f32	s15, s15
 80038a6:	ee17 0a90 	vmov	r0, s15
 80038aa:	f7fc fe6d 	bl	8000588 <__aeabi_f2d>
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <main+0x3e4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe66 	bl	8000588 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	4931      	ldr	r1, [pc, #196]	; (800398c <main+0x40c>)
 80038c6:	f7fc ffe1 	bl	800088c <__aeabi_ddiv>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	f7fd f941 	bl	8000b58 <__aeabi_dcmpgt>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <main+0x37a>
		 {
			 getWatt();
 80038dc:	f000 fbe4 	bl	80040a8 <getWatt>
			 packDatas(&BMI_sensor, &BME280_sensor, &gnss_data, &guc, rocketStatus);
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <main+0x3e0>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4b17      	ldr	r3, [pc, #92]	; (8003944 <main+0x3c4>)
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <main+0x404>)
 80038ea:	491c      	ldr	r1, [pc, #112]	; (800395c <main+0x3dc>)
 80038ec:	481a      	ldr	r0, [pc, #104]	; (8003958 <main+0x3d8>)
 80038ee:	f7ff fbc1 	bl	8003074 <packDatas>
			 loraLastTime = currentTime;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <main+0x3f0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a24      	ldr	r2, [pc, #144]	; (8003988 <main+0x408>)
 80038f8:	6013      	str	r3, [r2, #0]
		 }


		 //some infos
		 if(fabs(currentTime - lastTime) > 0.2)
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <main+0x3f0>)
 80038fc:	ed93 7a00 	vldr	s14, [r3]
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <main+0x410>)
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390a:	eef0 7ae7 	vabs.f32	s15, s15
 800390e:	ee17 0a90 	vmov	r0, s15
 8003912:	f7fc fe39 	bl	8000588 <__aeabi_f2d>
 8003916:	a308      	add	r3, pc, #32	; (adr r3, 8003938 <main+0x3b8>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f7fd f91c 	bl	8000b58 <__aeabi_dcmpgt>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <main+0x3ae>
			 //sprintf((char*)buf, "v[0]: %f  v[1]: %f  v[2]: %f   teta: %f\r\n", vector[0], vector[1], vector[2], (180.0 / M_PI) * atan2(sqrt(pow(vector[0],2.0) + pow(vector[1],2.0)), vector[2]));
			 //sprintf((char*)buf, "teta: %f\r\n", (180.0 / M_PI) * atan2(sqrt(pow(BMI_sensor.acc_x,2.0) + pow(BMI_sensor.acc_y,2.0)), BMI_sensor.acc_z));
			 //sprintf((char*)buf, "teta = %f", teta);
			 //sprintf((char*)buf, "speed = %f\n\r", BME280_sensor.velocity);
			 //HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
			 lastTime = currentTime;
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <main+0x3f0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a19      	ldr	r2, [pc, #100]	; (8003990 <main+0x410>)
 800392c:	6013      	str	r3, [r2, #0]
  {
 800392e:	e6ee      	b.n	800370e <main+0x18e>
 8003930:	00000000 	.word	0x00000000
 8003934:	40000000 	.word	0x40000000
 8003938:	9999999a 	.word	0x9999999a
 800393c:	3fc99999 	.word	0x3fc99999
 8003940:	40020400 	.word	0x40020400
 8003944:	2000076c 	.word	0x2000076c
 8003948:	20000784 	.word	0x20000784
 800394c:	20000794 	.word	0x20000794
 8003950:	200007a4 	.word	0x200007a4
 8003954:	200007b4 	.word	0x200007b4
 8003958:	20000650 	.word	0x20000650
 800395c:	200005f8 	.word	0x200005f8
 8003960:	20000004 	.word	0x20000004
 8003964:	20000000 	.word	0x20000000
 8003968:	40a00000 	.word	0x40a00000
 800396c:	408f4000 	.word	0x408f4000
 8003970:	200007c4 	.word	0x200007c4
 8003974:	200007cc 	.word	0x200007cc
 8003978:	42700000 	.word	0x42700000
 800397c:	40140000 	.word	0x40140000
 8003980:	200008fc 	.word	0x200008fc
 8003984:	2000073c 	.word	0x2000073c
 8003988:	200007d4 	.word	0x200007d4
 800398c:	3ff00000 	.word	0x3ff00000
 8003990:	200007c8 	.word	0x200007c8

08003994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b094      	sub	sp, #80	; 0x50
 8003998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399a:	f107 031c 	add.w	r3, r7, #28
 800399e:	2234      	movs	r2, #52	; 0x34
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f006 fd96 	bl	800a4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	2300      	movs	r3, #0
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <SystemClock_Config+0xdc>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <SystemClock_Config+0xdc>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <SystemClock_Config+0xdc>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d4:	2300      	movs	r3, #0
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <SystemClock_Config+0xe0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <SystemClock_Config+0xe0>)
 80039de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <SystemClock_Config+0xe0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fa:	2302      	movs	r3, #2
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a04:	2304      	movs	r3, #4
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003a08:	23b4      	movs	r3, #180	; 0xb4
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a10:	2302      	movs	r3, #2
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a14:	2302      	movs	r3, #2
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 ff7d 	bl	800891c <HAL_RCC_OscConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003a28:	f000 fbac 	bl	8004184 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a2c:	f004 fbdc 	bl	80081e8 <HAL_PWREx_EnableOverDrive>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003a36:	f000 fba5 	bl	8004184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a3a:	230f      	movs	r3, #15
 8003a3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	2105      	movs	r1, #5
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 fc15 	bl	8008288 <HAL_RCC_ClockConfig>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003a64:	f000 fb8e 	bl	8004184 <Error_Handler>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3750      	adds	r7, #80	; 0x50
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000

08003a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a7e:	463b      	mov	r3, r7
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <MX_ADC1_Init+0xb8>)
 8003a8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003a92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003aba:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <MX_ADC1_Init+0xbc>)
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ad8:	4814      	ldr	r0, [pc, #80]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003ada:	f001 feff 	bl	80058dc <HAL_ADC_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003ae4:	f000 fb4e 	bl	8004184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003ae8:	230c      	movs	r3, #12
 8003aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003aec:	2301      	movs	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8003af0:	2304      	movs	r3, #4
 8003af2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af4:	463b      	mov	r3, r7
 8003af6:	4619      	mov	r1, r3
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003afa:	f002 f8d1 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003b04:	f000 fb3e 	bl	8004184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003b08:	230b      	movs	r3, #11
 8003b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b10:	463b      	mov	r3, r7
 8003b12:	4619      	mov	r1, r3
 8003b14:	4805      	ldr	r0, [pc, #20]	; (8003b2c <MX_ADC1_Init+0xb4>)
 8003b16:	f002 f8c3 	bl	8005ca0 <HAL_ADC_ConfigChannel>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003b20:	f000 fb30 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200002bc 	.word	0x200002bc
 8003b30:	40012000 	.word	0x40012000
 8003b34:	0f000001 	.word	0x0f000001

08003b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b3e:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <MX_I2C1_Init+0x54>)
 8003b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <MX_I2C1_Init+0x58>)
 8003b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b74:	4804      	ldr	r0, [pc, #16]	; (8003b88 <MX_I2C1_Init+0x50>)
 8003b76:	f003 fb47 	bl	8007208 <HAL_I2C_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b80:	f000 fb00 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000304 	.word	0x20000304
 8003b8c:	40005400 	.word	0x40005400
 8003b90:	000186a0 	.word	0x000186a0

08003b94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <MX_I2C3_Init+0x54>)
 8003b9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003ba0:	4a12      	ldr	r2, [pc, #72]	; (8003bec <MX_I2C3_Init+0x58>)
 8003ba2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003bd0:	4804      	ldr	r0, [pc, #16]	; (8003be4 <MX_I2C3_Init+0x50>)
 8003bd2:	f003 fb19 	bl	8007208 <HAL_I2C_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003bdc:	f000 fad2 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000358 	.word	0x20000358
 8003be8:	40005c00 	.word	0x40005c00
 8003bec:	000186a0 	.word	0x000186a0

08003bf0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <MX_UART4_Init+0x50>)
 8003bf8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003bfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c16:	220c      	movs	r2, #12
 8003c18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <MX_UART4_Init+0x4c>)
 8003c28:	f005 f916 	bl	8008e58 <HAL_UART_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003c32:	f000 faa7 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200003ac 	.word	0x200003ac
 8003c40:	40004c00 	.word	0x40004c00

08003c44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <MX_USART1_UART_Init+0x50>)
 8003c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_USART1_UART_Init+0x4c>)
 8003c7c:	f005 f8ec 	bl	8008e58 <HAL_UART_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c86:	f000 fa7d 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200003f0 	.word	0x200003f0
 8003c94:	40011000 	.word	0x40011000

08003c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <MX_USART2_UART_Init+0x50>)
 8003ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cbe:	220c      	movs	r2, #12
 8003cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cce:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <MX_USART2_UART_Init+0x4c>)
 8003cd0:	f005 f8c2 	bl	8008e58 <HAL_UART_Init>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003cda:	f000 fa53 	bl	8004184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000434 	.word	0x20000434
 8003ce8:	40004400 	.word	0x40004400

08003cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <MX_DMA_Init+0x88>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <MX_DMA_Init+0x88>)
 8003cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <MX_DMA_Init+0x88>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <MX_DMA_Init+0x88>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <MX_DMA_Init+0x88>)
 8003d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <MX_DMA_Init+0x88>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	200d      	movs	r0, #13
 8003d30:	f002 fae3 	bl	80062fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003d34:	200d      	movs	r0, #13
 8003d36:	f002 fafc 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	200f      	movs	r0, #15
 8003d40:	f002 fadb 	bl	80062fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003d44:	200f      	movs	r0, #15
 8003d46:	f002 faf4 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	2010      	movs	r0, #16
 8003d50:	f002 fad3 	bl	80062fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003d54:	2010      	movs	r0, #16
 8003d56:	f002 faec 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2046      	movs	r0, #70	; 0x46
 8003d60:	f002 facb 	bl	80062fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003d64:	2046      	movs	r0, #70	; 0x46
 8003d66:	f002 fae4 	bl	8006332 <HAL_NVIC_EnableIRQ>

}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a46      	ldr	r2, [pc, #280]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b44      	ldr	r3, [pc, #272]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a38      	ldr	r2, [pc, #224]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a31      	ldr	r2, [pc, #196]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <MX_GPIO_Init+0x138>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f640 4188 	movw	r1, #3208	; 0xc88
 8003e04:	482b      	ldr	r0, [pc, #172]	; (8003eb4 <MX_GPIO_Init+0x13c>)
 8003e06:	f003 f9b3 	bl	8007170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_Pin, GPIO_PIN_RESET);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003e10:	4829      	ldr	r0, [pc, #164]	; (8003eb8 <MX_GPIO_Init+0x140>)
 8003e12:	f003 f9ad 	bl	8007170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P_1_MOS_Pin P_2_MOS_Pin LORA_M0_Pin LORA_M1_Pin */
  GPIO_InitStruct.Pin = P_1_MOS_Pin|P_2_MOS_Pin|LORA_M0_Pin|LORA_M1_Pin;
 8003e16:	f640 4388 	movw	r3, #3208	; 0xc88
 8003e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2300      	movs	r3, #0
 8003e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4821      	ldr	r0, [pc, #132]	; (8003eb4 <MX_GPIO_Init+0x13c>)
 8003e30:	f002 ff16 	bl	8006c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin;
 8003e34:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	481a      	ldr	r0, [pc, #104]	; (8003eb8 <MX_GPIO_Init+0x140>)
 8003e4e:	f002 ff07 	bl	8006c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYRO_Pin;
 8003e52:	2318      	movs	r3, #24
 8003e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4619      	mov	r1, r3
 8003e66:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <MX_GPIO_Init+0x140>)
 8003e68:	f002 fefa 	bl	8006c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4619      	mov	r1, r3
 8003e80:	480d      	ldr	r0, [pc, #52]	; (8003eb8 <MX_GPIO_Init+0x140>)
 8003e82:	f002 feed 	bl	8006c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2102      	movs	r1, #2
 8003e8a:	2009      	movs	r0, #9
 8003e8c:	f002 fa35 	bl	80062fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003e90:	2009      	movs	r0, #9
 8003e92:	f002 fa4e 	bl	8006332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2102      	movs	r1, #2
 8003e9a:	200a      	movs	r0, #10
 8003e9c:	f002 fa2d 	bl	80062fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003ea0:	200a      	movs	r0, #10
 8003ea2:	f002 fa46 	bl	8006332 <HAL_NVIC_EnableIRQ>

}
 8003ea6:	bf00      	nop
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40020800 	.word	0x40020800
 8003eb8:	40020400 	.word	0x40020400

08003ebc <bmiBegin>:

/* USER CODE BEGIN 4 */
void bmiBegin()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <bmiBegin+0x3c>)
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	755a      	strb	r2, [r3, #21]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <bmiBegin+0x3c>)
 8003ec8:	2209      	movs	r2, #9
 8003eca:	759a      	strb	r2, [r3, #22]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <bmiBegin+0x3c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	74da      	strb	r2, [r3, #19]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <bmiBegin+0x3c>)
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	751a      	strb	r2, [r3, #20]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <bmiBegin+0x3c>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	761a      	strb	r2, [r3, #24]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <bmiBegin+0x3c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <bmiBegin+0x3c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	75da      	strb	r2, [r3, #23]
	bmi088_init(&BMI_sensor, &hi2c3);
 8003eea:	4904      	ldr	r1, [pc, #16]	; (8003efc <bmiBegin+0x40>)
 8003eec:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <bmiBegin+0x3c>)
 8003eee:	f7fe f9c1 	bl	8002274 <bmi088_init>
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000650 	.word	0x20000650
 8003efc:	20000358 	.word	0x20000358

08003f00 <loraBegin>:


void loraBegin()
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f0a:	481a      	ldr	r0, [pc, #104]	; (8003f74 <loraBegin+0x74>)
 8003f0c:	f003 f930 	bl	8007170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, SET);
 8003f10:	2201      	movs	r2, #1
 8003f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f16:	4817      	ldr	r0, [pc, #92]	; (8003f74 <loraBegin+0x74>)
 8003f18:	f003 f92a 	bl	8007170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003f1c:	2064      	movs	r0, #100	; 0x64
 8003f1e:	f001 fcb9 	bl	8005894 <HAL_Delay>
   	 	 }
    }
*/
	//while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));

    e22_lora.baudRate = LORA_BAUD_115200;
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <loraBegin+0x78>)
 8003f24:	22e0      	movs	r2, #224	; 0xe0
 8003f26:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_38_4k;
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <loraBegin+0x78>)
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <loraBegin+0x78>)
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <loraBegin+0x78>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <loraBegin+0x78>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <loraBegin+0x78>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	809a      	strh	r2, [r3, #4]

#ifdef ROCKET_CARD
    e22_lora.channel = ROCKET_TELEM_FREQ;
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <loraBegin+0x78>)
 8003f48:	2219      	movs	r2, #25
 8003f4a:	721a      	strb	r2, [r3, #8]
#else
    e22_lora.channel = PAYLOAD_TELEM_FREQ;
#endif

    lora_configure(&e22_lora);
 8003f4c:	480a      	ldr	r0, [pc, #40]	; (8003f78 <loraBegin+0x78>)
 8003f4e:	f7ff faa5 	bl	800349c <lora_configure>

    HAL_Delay(100);
 8003f52:	2064      	movs	r0, #100	; 0x64
 8003f54:	f001 fc9e 	bl	8005894 <HAL_Delay>

	HAL_GPIO_WritePin(LORA_M0_GPIO_Port, LORA_M0_Pin, RESET);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f5e:	4805      	ldr	r0, [pc, #20]	; (8003f74 <loraBegin+0x74>)
 8003f60:	f003 f906 	bl	8007170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_M1_GPIO_Port, LORA_M1_Pin, RESET);
 8003f64:	2200      	movs	r2, #0
 8003f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f6a:	4802      	ldr	r0, [pc, #8]	; (8003f74 <loraBegin+0x74>)
 8003f6c:	f003 f900 	bl	8007170 <HAL_GPIO_WritePin>
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40020800 	.word	0x40020800
 8003f78:	20000728 	.word	0x20000728
 8003f7c:	00000000 	.word	0x00000000

08003f80 <measurePower>:

void measurePower(power *guc_)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	ed2d 8b02 	vpush	{d8}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(&hadc1);
 8003f8c:	4840      	ldr	r0, [pc, #256]	; (8004090 <measurePower+0x110>)
 8003f8e:	f001 fce9 	bl	8005964 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8003f92:	210a      	movs	r1, #10
 8003f94:	483e      	ldr	r0, [pc, #248]	; (8004090 <measurePower+0x110>)
 8003f96:	f001 fdea 	bl	8005b6e <HAL_ADC_PollForConversion>
	  int adc1 = HAL_ADC_GetValue(&hadc1);
 8003f9a:	483d      	ldr	r0, [pc, #244]	; (8004090 <measurePower+0x110>)
 8003f9c:	f001 fe72 	bl	8005c84 <HAL_ADC_GetValue>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8003fa4:	210a      	movs	r1, #10
 8003fa6:	483a      	ldr	r0, [pc, #232]	; (8004090 <measurePower+0x110>)
 8003fa8:	f001 fde1 	bl	8005b6e <HAL_ADC_PollForConversion>
	  int adc2 = HAL_ADC_GetValue(&hadc1);
 8003fac:	4838      	ldr	r0, [pc, #224]	; (8004090 <measurePower+0x110>)
 8003fae:	f001 fe69 	bl	8005c84 <HAL_ADC_GetValue>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Stop (&hadc1);
 8003fb6:	4836      	ldr	r0, [pc, #216]	; (8004090 <measurePower+0x110>)
 8003fb8:	f001 fda6 	bl	8005b08 <HAL_ADC_Stop>

	  guc_->akim =   (float)adc1 * 3300 / 4096;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004094 <measurePower+0x114>
 8003fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fce:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004098 <measurePower+0x118>
 8003fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	edc3 7a01 	vstr	s15, [r3, #4]
	  guc_->voltaj = (float)adc2 * 13.2 / 4096;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	ee17 0a90 	vmov	r0, s15
 8003fea:	f7fc facd 	bl	8000588 <__aeabi_f2d>
 8003fee:	a326      	add	r3, pc, #152	; (adr r3, 8004088 <measurePower+0x108>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc fb20 	bl	8000638 <__aeabi_dmul>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <measurePower+0x11c>)
 8004006:	f7fc fc41 	bl	800088c <__aeabi_ddiv>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	f7fc fe09 	bl	8000c28 <__aeabi_d2f>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]
	  guc_->mWatt += guc_->akim * guc_->voltaj * (((float)HAL_GetTick() / 1000) - powerLastTime);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ee27 8a27 	vmul.f32	s16, s14, s15
 800402c:	f001 fc26 	bl	800587c <HAL_GetTick>
 8004030:	ee07 0a90 	vmov	s15, r0
 8004034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004038:	eddf 6a19 	vldr	s13, [pc, #100]	; 80040a0 <measurePower+0x120>
 800403c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <measurePower+0x124>)
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	edd3 7a02 	vldr	s15, [r3, #8]
 8004054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	edc3 7a02 	vstr	s15, [r3, #8]
	  powerLastTime = (float)HAL_GetTick() / 1000;
 800405e:	f001 fc0d 	bl	800587c <HAL_GetTick>
 8004062:	ee07 0a90 	vmov	s15, r0
 8004066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800406a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80040a0 <measurePower+0x120>
 800406e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <measurePower+0x124>)
 8004074:	edc3 7a00 	vstr	s15, [r3]
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	ecbd 8b02 	vpop	{d8}
 8004082:	bd80      	pop	{r7, pc}
 8004084:	f3af 8000 	nop.w
 8004088:	66666666 	.word	0x66666666
 800408c:	402a6666 	.word	0x402a6666
 8004090:	200002bc 	.word	0x200002bc
 8004094:	454e4000 	.word	0x454e4000
 8004098:	45800000 	.word	0x45800000
 800409c:	40b00000 	.word	0x40b00000
 80040a0:	447a0000 	.word	0x447a0000
 80040a4:	200007d0 	.word	0x200007d0

080040a8 <getWatt>:

void getWatt()
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0

	float currentTime = (float)HAL_GetTick() / 1000;
 80040ae:	f001 fbe5 	bl	800587c <HAL_GetTick>
 80040b2:	ee07 0a90 	vmov	s15, r0
 80040b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ba:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004104 <getWatt+0x5c>
 80040be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040c2:	edc7 7a01 	vstr	s15, [r7, #4]
	float deltaTime = currentTime - wattLastTime;
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <getWatt+0x60>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80040d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d4:	edc7 7a00 	vstr	s15, [r7]
	wattLastTime = currentTime;
 80040d8:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <getWatt+0x60>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
	guc.mWatt_s = guc.mWatt / deltaTime;
 80040de:	4b0b      	ldr	r3, [pc, #44]	; (800410c <getWatt+0x64>)
 80040e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80040e4:	ed97 7a00 	vldr	s14, [r7]
 80040e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <getWatt+0x64>)
 80040ee:	edc3 7a03 	vstr	s15, [r3, #12]
	guc.mWatt = 0.0;
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <getWatt+0x64>)
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	447a0000 	.word	0x447a0000
 8004108:	200007d8 	.word	0x200007d8
 800410c:	2000076c 	.word	0x2000076c

08004110 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == INT_GYRO_Pin)
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b10      	cmp	r3, #16
 800411e:	d101      	bne.n	8004124 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	bmi088_getGyroDatas_INT();
 8004120:	f7fe febe 	bl	8002ea0 <bmi088_getGyroDatas_INT>
    	//counterGy++;
    }
    if(GPIO_Pin == INT_ACC_Pin)
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d106      	bne.n	8004138 <HAL_GPIO_EXTI_Callback+0x28>
    {
    	bmi088_getAccelDatas_INT();
 800412a:	f7fe feab 	bl	8002e84 <bmi088_getAccelDatas_INT>
    	counterAcc++;
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_GPIO_EXTI_Callback+0x30>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	4a02      	ldr	r2, [pc, #8]	; (8004140 <HAL_GPIO_EXTI_Callback+0x30>)
 8004136:	6013      	str	r3, [r2, #0]
    }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200007dc 	.word	0x200007dc

08004144 <deploy_p_1>:

void deploy_p_1()
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_1, 100);
 8004148:	2164      	movs	r1, #100	; 0x64
 800414a:	4804      	ldr	r0, [pc, #16]	; (800415c <deploy_p_1+0x18>)
 800414c:	f7ff f942 	bl	80033d4 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8004150:	4803      	ldr	r0, [pc, #12]	; (8004160 <deploy_p_1+0x1c>)
 8004152:	f7ff f927 	bl	80033a4 <ext_pin_open>
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000784 	.word	0x20000784
 8004160:	200007b4 	.word	0x200007b4

08004164 <deploy_p_2>:

void deploy_p_2()
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	ext_pin_open_duration(&mos_2, 100);
 8004168:	2164      	movs	r1, #100	; 0x64
 800416a:	4804      	ldr	r0, [pc, #16]	; (800417c <deploy_p_2+0x18>)
 800416c:	f7ff f932 	bl	80033d4 <ext_pin_open_duration>
	ext_pin_open(&buzzer);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <deploy_p_2+0x1c>)
 8004172:	f7ff f917 	bl	80033a4 <ext_pin_open>
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000794 	.word	0x20000794
 8004180:	200007b4 	.word	0x200007b4

08004184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	sprintf((char*)buf, "error line: %d\r\n", errorLine);
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <Error_Handler+0x4c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4911      	ldr	r1, [pc, #68]	; (80041d4 <Error_Handler+0x50>)
 8004190:	4811      	ldr	r0, [pc, #68]	; (80041d8 <Error_Handler+0x54>)
 8004192:	f007 f827 	bl	800b1e4 <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((char*) buf), 250);
 8004196:	4810      	ldr	r0, [pc, #64]	; (80041d8 <Error_Handler+0x54>)
 8004198:	f7fc f83a 	bl	8000210 <strlen>
 800419c:	4603      	mov	r3, r0
 800419e:	b29a      	uxth	r2, r3
 80041a0:	23fa      	movs	r3, #250	; 0xfa
 80041a2:	490d      	ldr	r1, [pc, #52]	; (80041d8 <Error_Handler+0x54>)
 80041a4:	480d      	ldr	r0, [pc, #52]	; (80041dc <Error_Handler+0x58>)
 80041a6:	f004 fed3 	bl	8008f50 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041aa:	b672      	cpsid	i
}
 80041ac:	bf00      	nop


	__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80041ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041b2:	480b      	ldr	r0, [pc, #44]	; (80041e0 <Error_Handler+0x5c>)
 80041b4:	f002 fff5 	bl	80071a2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80041b8:	2064      	movs	r0, #100	; 0x64
 80041ba:	f001 fb6b 	bl	8005894 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80041be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041c2:	4807      	ldr	r0, [pc, #28]	; (80041e0 <Error_Handler+0x5c>)
 80041c4:	f002 ffed 	bl	80071a2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80041c8:	2064      	movs	r0, #100	; 0x64
 80041ca:	f001 fb63 	bl	8005894 <HAL_Delay>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80041ce:	e7ee      	b.n	80041ae <Error_Handler+0x2a>
 80041d0:	2000022c 	.word	0x2000022c
 80041d4:	0801140c 	.word	0x0801140c
 80041d8:	200007e0 	.word	0x200007e0
 80041dc:	200003f0 	.word	0x200003f0
 80041e0:	40020400 	.word	0x40020400

080041e4 <updateQuaternion>:
#include "math.h"

static float q[4];
float euler[3];		//pitch roll yaw

void updateQuaternion(float gx, float gy, float gz, float dt) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80041ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80041f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80041f6:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80041fa:	4b8d      	ldr	r3, [pc, #564]	; (8004430 <updateQuaternion+0x24c>)
 80041fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004200:	eeb1 7a67 	vneg.f32	s14, s15
 8004204:	edd7 7a03 	vldr	s15, [r7, #12]
 8004208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <updateQuaternion+0x24c>)
 800420e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004212:	edd7 7a02 	vldr	s15, [r7, #8]
 8004216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800421a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800421e:	4b84      	ldr	r3, [pc, #528]	; (8004430 <updateQuaternion+0x24c>)
 8004220:	edd3 6a03 	vldr	s13, [r3, #12]
 8004224:	edd7 7a01 	vldr	s15, [r7, #4]
 8004228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004230:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004238:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float qDot2 = 0.5f * (q[0] * gx + q[2] * gz - q[3] * gy);
 800423c:	4b7c      	ldr	r3, [pc, #496]	; (8004430 <updateQuaternion+0x24c>)
 800423e:	ed93 7a00 	vldr	s14, [r3]
 8004242:	edd7 7a03 	vldr	s15, [r7, #12]
 8004246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800424a:	4b79      	ldr	r3, [pc, #484]	; (8004430 <updateQuaternion+0x24c>)
 800424c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004250:	edd7 7a01 	vldr	s15, [r7, #4]
 8004254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800425c:	4b74      	ldr	r3, [pc, #464]	; (8004430 <updateQuaternion+0x24c>)
 800425e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004262:	edd7 7a02 	vldr	s15, [r7, #8]
 8004266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800426a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004276:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (q[0] * gy - q[1] * gz + q[3] * gx);
 800427a:	4b6d      	ldr	r3, [pc, #436]	; (8004430 <updateQuaternion+0x24c>)
 800427c:	ed93 7a00 	vldr	s14, [r3]
 8004280:	edd7 7a02 	vldr	s15, [r7, #8]
 8004284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004288:	4b69      	ldr	r3, [pc, #420]	; (8004430 <updateQuaternion+0x24c>)
 800428a:	edd3 6a01 	vldr	s13, [r3, #4]
 800428e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800429a:	4b65      	ldr	r3, [pc, #404]	; (8004430 <updateQuaternion+0x24c>)
 800429c:	edd3 6a03 	vldr	s13, [r3, #12]
 80042a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b4:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (q[0] * gz + q[1] * gy - q[2] * gx);
 80042b8:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <updateQuaternion+0x24c>)
 80042ba:	ed93 7a00 	vldr	s14, [r3]
 80042be:	edd7 7a01 	vldr	s15, [r7, #4]
 80042c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042c6:	4b5a      	ldr	r3, [pc, #360]	; (8004430 <updateQuaternion+0x24c>)
 80042c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80042cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80042d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042d8:	4b55      	ldr	r3, [pc, #340]	; (8004430 <updateQuaternion+0x24c>)
 80042da:	edd3 6a02 	vldr	s13, [r3, #8]
 80042de:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f2:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  q[0] += qDot1 * dt;
 80042f6:	4b4e      	ldr	r3, [pc, #312]	; (8004430 <updateQuaternion+0x24c>)
 80042f8:	ed93 7a00 	vldr	s14, [r3]
 80042fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004300:	edd7 7a00 	vldr	s15, [r7]
 8004304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430c:	4b48      	ldr	r3, [pc, #288]	; (8004430 <updateQuaternion+0x24c>)
 800430e:	edc3 7a00 	vstr	s15, [r3]
  q[1] += qDot2 * dt;
 8004312:	4b47      	ldr	r3, [pc, #284]	; (8004430 <updateQuaternion+0x24c>)
 8004314:	ed93 7a01 	vldr	s14, [r3, #4]
 8004318:	edd7 6a08 	vldr	s13, [r7, #32]
 800431c:	edd7 7a00 	vldr	s15, [r7]
 8004320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <updateQuaternion+0x24c>)
 800432a:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += qDot3 * dt;
 800432e:	4b40      	ldr	r3, [pc, #256]	; (8004430 <updateQuaternion+0x24c>)
 8004330:	ed93 7a02 	vldr	s14, [r3, #8]
 8004334:	edd7 6a07 	vldr	s13, [r7, #28]
 8004338:	edd7 7a00 	vldr	s15, [r7]
 800433c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <updateQuaternion+0x24c>)
 8004346:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += qDot4 * dt;
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <updateQuaternion+0x24c>)
 800434c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004350:	edd7 6a06 	vldr	s13, [r7, #24]
 8004354:	edd7 7a00 	vldr	s15, [r7]
 8004358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800435c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004360:	4b33      	ldr	r3, [pc, #204]	; (8004430 <updateQuaternion+0x24c>)
 8004362:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalize quaternion to prevent drift
  float norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8004366:	4b32      	ldr	r3, [pc, #200]	; (8004430 <updateQuaternion+0x24c>)
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	4b30      	ldr	r3, [pc, #192]	; (8004430 <updateQuaternion+0x24c>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004376:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <updateQuaternion+0x24c>)
 8004378:	edd3 6a01 	vldr	s13, [r3, #4]
 800437c:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <updateQuaternion+0x24c>)
 800437e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800438a:	4b29      	ldr	r3, [pc, #164]	; (8004430 <updateQuaternion+0x24c>)
 800438c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <updateQuaternion+0x24c>)
 8004392:	edd3 7a02 	vldr	s15, [r3, #8]
 8004396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <updateQuaternion+0x24c>)
 80043a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80043a4:	4b22      	ldr	r3, [pc, #136]	; (8004430 <updateQuaternion+0x24c>)
 80043a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80043aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b2:	ee17 0a90 	vmov	r0, s15
 80043b6:	f7fc f8e7 	bl	8000588 <__aeabi_f2d>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	ec43 2b10 	vmov	d0, r2, r3
 80043c2:	f00b fa31 	bl	800f828 <sqrt>
 80043c6:	ec53 2b10 	vmov	r2, r3, d0
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fc2b 	bl	8000c28 <__aeabi_d2f>
 80043d2:	4603      	mov	r3, r0
 80043d4:	617b      	str	r3, [r7, #20]
  q[0] /= norm;
 80043d6:	4b16      	ldr	r3, [pc, #88]	; (8004430 <updateQuaternion+0x24c>)
 80043d8:	edd3 6a00 	vldr	s13, [r3]
 80043dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80043e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <updateQuaternion+0x24c>)
 80043e6:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <updateQuaternion+0x24c>)
 80043ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80043f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80043f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f8:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <updateQuaternion+0x24c>)
 80043fa:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <updateQuaternion+0x24c>)
 8004400:	edd3 6a02 	vldr	s13, [r3, #8]
 8004404:	ed97 7a05 	vldr	s14, [r7, #20]
 8004408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <updateQuaternion+0x24c>)
 800440e:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <updateQuaternion+0x24c>)
 8004414:	edd3 6a03 	vldr	s13, [r3, #12]
 8004418:	ed97 7a05 	vldr	s14, [r7, #20]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <updateQuaternion+0x24c>)
 8004422:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004426:	bf00      	nop
 8004428:	3728      	adds	r7, #40	; 0x28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200008dc 	.word	0x200008dc
 8004434:	00000000 	.word	0x00000000

08004438 <quaternionToEuler>:

void quaternionToEuler(void) {
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), 1.0f - 2.0f * (q[1] * q[1] + q[2] * q[2])) * (180.0 / M_PI);
 800443c:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <quaternionToEuler+0x1a8>)
 800443e:	ed93 7a00 	vldr	s14, [r3]
 8004442:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004444:	edd3 7a01 	vldr	s15, [r3, #4]
 8004448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <quaternionToEuler+0x1a8>)
 800444e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004452:	4b63      	ldr	r3, [pc, #396]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004454:	edd3 7a03 	vldr	s15, [r3, #12]
 8004458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800445c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004460:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004464:	ee17 0a90 	vmov	r0, s15
 8004468:	f7fc f88e 	bl	8000588 <__aeabi_f2d>
 800446c:	4604      	mov	r4, r0
 800446e:	460d      	mov	r5, r1
 8004470:	4b5b      	ldr	r3, [pc, #364]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004472:	ed93 7a01 	vldr	s14, [r3, #4]
 8004476:	4b5a      	ldr	r3, [pc, #360]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004478:	edd3 7a01 	vldr	s15, [r3, #4]
 800447c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004480:	4b57      	ldr	r3, [pc, #348]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004482:	edd3 6a02 	vldr	s13, [r3, #8]
 8004486:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004488:	edd3 7a02 	vldr	s15, [r3, #8]
 800448c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800449c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a0:	ee17 0a90 	vmov	r0, s15
 80044a4:	f7fc f870 	bl	8000588 <__aeabi_f2d>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	ec43 2b11 	vmov	d1, r2, r3
 80044b0:	ec45 4b10 	vmov	d0, r4, r5
 80044b4:	f00b f946 	bl	800f744 <atan2>
 80044b8:	ec51 0b10 	vmov	r0, r1, d0
 80044bc:	a346      	add	r3, pc, #280	; (adr r3, 80045d8 <quaternionToEuler+0x1a0>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fc f8b9 	bl	8000638 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7fc fbab 	bl	8000c28 <__aeabi_d2f>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4a43      	ldr	r2, [pc, #268]	; (80045e4 <quaternionToEuler+0x1ac>)
 80044d6:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (q[0] * q[2] - q[3] * q[1])) * (180.0 / M_PI);
 80044d8:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <quaternionToEuler+0x1a8>)
 80044da:	ed93 7a00 	vldr	s14, [r3]
 80044de:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <quaternionToEuler+0x1a8>)
 80044e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80044e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044e8:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <quaternionToEuler+0x1a8>)
 80044ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80044ee:	4b3c      	ldr	r3, [pc, #240]	; (80045e0 <quaternionToEuler+0x1a8>)
 80044f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80044f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004500:	ee17 0a90 	vmov	r0, s15
 8004504:	f7fc f840 	bl	8000588 <__aeabi_f2d>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	ec43 2b10 	vmov	d0, r2, r3
 8004510:	f00b f8e4 	bl	800f6dc <asin>
 8004514:	ec51 0b10 	vmov	r0, r1, d0
 8004518:	a32f      	add	r3, pc, #188	; (adr r3, 80045d8 <quaternionToEuler+0x1a0>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fc f88b 	bl	8000638 <__aeabi_dmul>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f7fc fb7d 	bl	8000c28 <__aeabi_d2f>
 800452e:	4603      	mov	r3, r0
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <quaternionToEuler+0x1ac>)
 8004532:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (q[0] * q[3] + q[1] * q[2]), 1.0f - 2.0f * (q[2] * q[2] + q[3] * q[3])) * (180.0 / M_PI);
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004536:	ed93 7a00 	vldr	s14, [r3]
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <quaternionToEuler+0x1a8>)
 800453c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004544:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004546:	edd3 6a01 	vldr	s13, [r3, #4]
 800454a:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <quaternionToEuler+0x1a8>)
 800454c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800455c:	ee17 0a90 	vmov	r0, s15
 8004560:	f7fc f812 	bl	8000588 <__aeabi_f2d>
 8004564:	4604      	mov	r4, r0
 8004566:	460d      	mov	r5, r1
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <quaternionToEuler+0x1a8>)
 800456a:	ed93 7a02 	vldr	s14, [r3, #8]
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004570:	edd3 7a02 	vldr	s15, [r3, #8]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <quaternionToEuler+0x1a8>)
 800457a:	edd3 6a03 	vldr	s13, [r3, #12]
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <quaternionToEuler+0x1a8>)
 8004580:	edd3 7a03 	vldr	s15, [r3, #12]
 8004584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004598:	ee17 0a90 	vmov	r0, s15
 800459c:	f7fb fff4 	bl	8000588 <__aeabi_f2d>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	ec43 2b11 	vmov	d1, r2, r3
 80045a8:	ec45 4b10 	vmov	d0, r4, r5
 80045ac:	f00b f8ca 	bl	800f744 <atan2>
 80045b0:	ec51 0b10 	vmov	r0, r1, d0
 80045b4:	a308      	add	r3, pc, #32	; (adr r3, 80045d8 <quaternionToEuler+0x1a0>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fc f83d 	bl	8000638 <__aeabi_dmul>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	f7fc fb2f 	bl	8000c28 <__aeabi_d2f>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <quaternionToEuler+0x1ac>)
 80045ce:	6093      	str	r3, [r2, #8]
}
 80045d0:	bf00      	nop
 80045d2:	bdb0      	pop	{r4, r5, r7, pc}
 80045d4:	f3af 8000 	nop.w
 80045d8:	1a63c1f8 	.word	0x1a63c1f8
 80045dc:	404ca5dc 	.word	0x404ca5dc
 80045e0:	200008dc 	.word	0x200008dc
 80045e4:	200008ec 	.word	0x200008ec

080045e8 <quaternionToTheta>:


float quaternionToTheta(){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0

	float theta = 0.0;
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

	float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 80045f4:	4b54      	ldr	r3, [pc, #336]	; (8004748 <quaternionToTheta+0x160>)
 80045f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80045fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80045fe:	4b52      	ldr	r3, [pc, #328]	; (8004748 <quaternionToTheta+0x160>)
 8004600:	edd3 7a03 	vldr	s15, [r3, #12]
 8004604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004608:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <quaternionToTheta+0x160>)
 800460a:	edd3 7a02 	vldr	s15, [r3, #8]
 800460e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004612:	4b4d      	ldr	r3, [pc, #308]	; (8004748 <quaternionToTheta+0x160>)
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800461c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004620:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8004624:	4b48      	ldr	r3, [pc, #288]	; (8004748 <quaternionToTheta+0x160>)
 8004626:	edd3 7a02 	vldr	s15, [r3, #8]
 800462a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800462e:	4b46      	ldr	r3, [pc, #280]	; (8004748 <quaternionToTheta+0x160>)
 8004630:	edd3 7a03 	vldr	s15, [r3, #12]
 8004634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004638:	4b43      	ldr	r3, [pc, #268]	; (8004748 <quaternionToTheta+0x160>)
 800463a:	edd3 7a01 	vldr	s15, [r3, #4]
 800463e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <quaternionToTheta+0x160>)
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800464c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004650:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8004654:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <quaternionToTheta+0x160>)
 8004656:	edd3 7a01 	vldr	s15, [r3, #4]
 800465a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800465e:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <quaternionToTheta+0x160>)
 8004660:	edd3 7a01 	vldr	s15, [r3, #4]
 8004664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800466c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004670:	4b35      	ldr	r3, [pc, #212]	; (8004748 <quaternionToTheta+0x160>)
 8004672:	edd3 7a02 	vldr	s15, [r3, #8]
 8004676:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800467a:	4b33      	ldr	r3, [pc, #204]	; (8004748 <quaternionToTheta+0x160>)
 800467c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004688:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 800469c:	edd7 7a05 	vldr	s15, [r7, #20]
 80046a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80046a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80046a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80046b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046bc:	ee17 0a90 	vmov	r0, s15
 80046c0:	f7fb ff62 	bl	8000588 <__aeabi_f2d>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	ec43 2b10 	vmov	d0, r2, r3
 80046cc:	f00b f8ac 	bl	800f828 <sqrt>
 80046d0:	ec53 2b10 	vmov	r2, r3, d0
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fc faa6 	bl	8000c28 <__aeabi_d2f>
 80046dc:	4603      	mov	r3, r0
 80046de:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 80046e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80046e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80046e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046ec:	ee16 0a90 	vmov	r0, s13
 80046f0:	f7fb ff4a 	bl	8000588 <__aeabi_f2d>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	ec43 2b10 	vmov	d0, r2, r3
 80046fc:	f00a ffba 	bl	800f674 <acos>
 8004700:	ec51 0b10 	vmov	r0, r1, d0
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <quaternionToTheta+0x164>)
 800470a:	f7fb ff95 	bl	8000638 <__aeabi_dmul>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	a30a      	add	r3, pc, #40	; (adr r3, 8004740 <quaternionToTheta+0x158>)
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f7fc f8b6 	bl	800088c <__aeabi_ddiv>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4610      	mov	r0, r2
 8004726:	4619      	mov	r1, r3
 8004728:	f7fc fa7e 	bl	8000c28 <__aeabi_d2f>
 800472c:	4603      	mov	r3, r0
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
	return theta;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	ee07 3a90 	vmov	s15, r3
}
 8004736:	eeb0 0a67 	vmov.f32	s0, s15
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	51eb851f 	.word	0x51eb851f
 8004744:	40091eb8 	.word	0x40091eb8
 8004748:	200008dc 	.word	0x200008dc
 800474c:	40668000 	.word	0x40668000

08004750 <getInitialQuaternion>:



// İvmeölçerden başlangıç quaternioni hesaplama
static void getInitialQuaternion() {
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	b092      	sub	sp, #72	; 0x48
 8004754:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8004756:	4b97      	ldr	r3, [pc, #604]	; (80049b4 <getInitialQuaternion+0x264>)
 8004758:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800475c:	4b95      	ldr	r3, [pc, #596]	; (80049b4 <getInitialQuaternion+0x264>)
 800475e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004766:	4b93      	ldr	r3, [pc, #588]	; (80049b4 <getInitialQuaternion+0x264>)
 8004768:	edd3 6a2c 	vldr	s13, [r3, #176]	; 0xb0
 800476c:	4b91      	ldr	r3, [pc, #580]	; (80049b4 <getInitialQuaternion+0x264>)
 800476e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8004772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800477a:	4b8e      	ldr	r3, [pc, #568]	; (80049b4 <getInitialQuaternion+0x264>)
 800477c:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 8004780:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <getInitialQuaternion+0x264>)
 8004782:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800478a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800478e:	ee17 0a90 	vmov	r0, s15
 8004792:	f7fb fef9 	bl	8000588 <__aeabi_f2d>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	ec43 2b10 	vmov	d0, r2, r3
 800479e:	f00b f843 	bl	800f828 <sqrt>
 80047a2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 80047a6:	4b83      	ldr	r3, [pc, #524]	; (80049b4 <getInitialQuaternion+0x264>)
 80047a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fb feeb 	bl	8000588 <__aeabi_f2d>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.acc_y;
 80047ba:	4b7e      	ldr	r3, [pc, #504]	; (80049b4 <getInitialQuaternion+0x264>)
 80047bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fb fee1 	bl	8000588 <__aeabi_f2d>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] = (double)BMI_sensor.acc_z;
 80047ce:	4b79      	ldr	r3, [pc, #484]	; (80049b4 <getInitialQuaternion+0x264>)
 80047d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb fed7 	bl	8000588 <__aeabi_f2d>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    accel_temp[0] /= norm;
 80047e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ea:	f7fc f84f 	bl	800088c <__aeabi_ddiv>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80047f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047fe:	f7fc f845 	bl	800088c <__aeabi_ddiv>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    accel_temp[2] /= norm;
 800480a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800480e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004812:	f7fc f83b 	bl	800088c <__aeabi_ddiv>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 800481e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	4964      	ldr	r1, [pc, #400]	; (80049b8 <getInitialQuaternion+0x268>)
 8004828:	f7fb fd4e 	bl	80002c8 <__aeabi_dsub>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	ec43 2b17 	vmov	d7, r2, r3
 8004834:	eeb0 0a47 	vmov.f32	s0, s14
 8004838:	eef0 0a67 	vmov.f32	s1, s15
 800483c:	f00a fff4 	bl	800f828 <sqrt>
 8004840:	ec51 0b10 	vmov	r0, r1, d0
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	4b5c      	ldr	r3, [pc, #368]	; (80049bc <getInitialQuaternion+0x26c>)
 800484a:	f7fb fef5 	bl	8000638 <__aeabi_dmul>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8004856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800485a:	f04f 0000 	mov.w	r0, #0
 800485e:	4957      	ldr	r1, [pc, #348]	; (80049bc <getInitialQuaternion+0x26c>)
 8004860:	f7fc f814 	bl	800088c <__aeabi_ddiv>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 800486c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004874:	f7fb fee0 	bl	8000638 <__aeabi_dmul>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	4b4d      	ldr	r3, [pc, #308]	; (80049bc <getInitialQuaternion+0x26c>)
 8004886:	f7fb fed7 	bl	8000638 <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8004892:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004896:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800489a:	f7fb fecd 	bl	8000638 <__aeabi_dmul>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	4b44      	ldr	r3, [pc, #272]	; (80049bc <getInitialQuaternion+0x26c>)
 80048ac:	f7fb fec4 	bl	8000638 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80048c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048cc:	f7fb feb4 	bl	8000638 <__aeabi_dmul>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4614      	mov	r4, r2
 80048d6:	461d      	mov	r5, r3
 80048d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e0:	f7fb feaa 	bl	8000638 <__aeabi_dmul>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4620      	mov	r0, r4
 80048ea:	4629      	mov	r1, r5
 80048ec:	f7fb fcee 	bl	80002cc <__adddf3>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4614      	mov	r4, r2
 80048f6:	461d      	mov	r5, r3
 80048f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004900:	f7fb fe9a 	bl	8000638 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fb fcde 	bl	80002cc <__adddf3>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800491c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004920:	f7fb fe8a 	bl	8000638 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fcce 	bl	80002cc <__adddf3>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	ec43 2b17 	vmov	d7, r2, r3
 8004938:	eeb0 0a47 	vmov.f32	s0, s14
 800493c:	eef0 0a67 	vmov.f32	s1, s15
 8004940:	f00a ff72 	bl	800f828 <sqrt>
 8004944:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

    q[0] = q_temp[0] / norm;
 8004948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800494c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004950:	f7fb ff9c 	bl	800088c <__aeabi_ddiv>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f7fc f964 	bl	8000c28 <__aeabi_d2f>
 8004960:	4603      	mov	r3, r0
 8004962:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <getInitialQuaternion+0x270>)
 8004964:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8004966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800496a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800496e:	f7fb ff8d 	bl	800088c <__aeabi_ddiv>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	f7fc f955 	bl	8000c28 <__aeabi_d2f>
 800497e:	4603      	mov	r3, r0
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <getInitialQuaternion+0x270>)
 8004982:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8004984:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004988:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498c:	f7fb ff7e 	bl	800088c <__aeabi_ddiv>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	f7fc f946 	bl	8000c28 <__aeabi_d2f>
 800499c:	4603      	mov	r3, r0
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <getInitialQuaternion+0x270>)
 80049a0:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <getInitialQuaternion+0x270>)
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
}
 80049aa:	bf00      	nop
 80049ac:	3748      	adds	r7, #72	; 0x48
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bdb0      	pop	{r4, r5, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000650 	.word	0x20000650
 80049b8:	3ff00000 	.word	0x3ff00000
 80049bc:	3fe00000 	.word	0x3fe00000
 80049c0:	200008dc 	.word	0x200008dc

080049c4 <quaternionSet_zero>:



void quaternionSet_zero(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	getInitialQuaternion();
 80049c8:	f7ff fec2 	bl	8004750 <getInitialQuaternion>
}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_MspInit+0x4c>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <HAL_MspInit+0x4c>)
 80049e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e4:	6453      	str	r3, [r2, #68]	; 0x44
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_MspInit+0x4c>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_MspInit+0x4c>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <HAL_MspInit+0x4c>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_MspInit+0x4c>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800

08004a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_ADC_MspInit+0x7c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d127      	bne.n	8004a92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_ADC_MspInit+0x80>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <HAL_ADC_MspInit+0x80>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6453      	str	r3, [r2, #68]	; 0x44
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_ADC_MspInit+0x80>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_ADC_MspInit+0x80>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_ADC_MspInit+0x80>)
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_ADC_MspInit+0x80>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_SENS_Pin|CURRENT_SENS_Pin;
 8004a7a:	2306      	movs	r3, #6
 8004a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <HAL_ADC_MspInit+0x84>)
 8004a8e:	f002 f8e7 	bl	8006c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a92:	bf00      	nop
 8004a94:	3728      	adds	r7, #40	; 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40012000 	.word	0x40012000
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40020800 	.word	0x40020800

08004aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a42      	ldr	r2, [pc, #264]	; (8004bd0 <HAL_I2C_MspInit+0x128>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d12c      	bne.n	8004b24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4a40      	ldr	r2, [pc, #256]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ada:	4b3e      	ldr	r3, [pc, #248]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ae6:	23c0      	movs	r3, #192	; 0xc0
 8004ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aea:	2312      	movs	r3, #18
 8004aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af2:	2303      	movs	r3, #3
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004af6:	2304      	movs	r3, #4
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afa:	f107 031c 	add.w	r3, r7, #28
 8004afe:	4619      	mov	r1, r3
 8004b00:	4835      	ldr	r0, [pc, #212]	; (8004bd8 <HAL_I2C_MspInit+0x130>)
 8004b02:	f002 f8ad 	bl	8006c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b14:	6413      	str	r3, [r2, #64]	; 0x40
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004b22:	e050      	b.n	8004bc6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <HAL_I2C_MspInit+0x134>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d14b      	bne.n	8004bc6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b38:	f043 0304 	orr.w	r3, r3, #4
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3e:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b6c:	2312      	movs	r3, #18
 8004b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b74:	2303      	movs	r3, #3
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b78:	2304      	movs	r3, #4
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b7c:	f107 031c 	add.w	r3, r7, #28
 8004b80:	4619      	mov	r1, r3
 8004b82:	4817      	ldr	r0, [pc, #92]	; (8004be0 <HAL_I2C_MspInit+0x138>)
 8004b84:	f002 f86c 	bl	8006c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b8e:	2312      	movs	r3, #18
 8004b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b96:	2303      	movs	r3, #3
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b9e:	f107 031c 	add.w	r3, r7, #28
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	480f      	ldr	r0, [pc, #60]	; (8004be4 <HAL_I2C_MspInit+0x13c>)
 8004ba6:	f002 f85b 	bl	8006c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_I2C_MspInit+0x12c>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
}
 8004bc6:	bf00      	nop
 8004bc8:	3730      	adds	r7, #48	; 0x30
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40005400 	.word	0x40005400
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40020400 	.word	0x40020400
 8004bdc:	40005c00 	.word	0x40005c00
 8004be0:	40020800 	.word	0x40020800
 8004be4:	40020000 	.word	0x40020000

08004be8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <HAL_I2C_MspDeInit+0x64>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10e      	bne.n	8004c18 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <HAL_I2C_MspDeInit+0x68>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <HAL_I2C_MspDeInit+0x68>)
 8004c00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c04:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	4812      	ldr	r0, [pc, #72]	; (8004c54 <HAL_I2C_MspDeInit+0x6c>)
 8004c0a:	f002 f9bd 	bl	8006f88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	4810      	ldr	r0, [pc, #64]	; (8004c54 <HAL_I2C_MspDeInit+0x6c>)
 8004c12:	f002 f9b9 	bl	8006f88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004c16:	e014      	b.n	8004c42 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <HAL_I2C_MspDeInit+0x70>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10f      	bne.n	8004c42 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_I2C_MspDeInit+0x68>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <HAL_I2C_MspDeInit+0x68>)
 8004c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8004c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c32:	480a      	ldr	r0, [pc, #40]	; (8004c5c <HAL_I2C_MspDeInit+0x74>)
 8004c34:	f002 f9a8 	bl	8006f88 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8004c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c3c:	4808      	ldr	r0, [pc, #32]	; (8004c60 <HAL_I2C_MspDeInit+0x78>)
 8004c3e:	f002 f9a3 	bl	8006f88 <HAL_GPIO_DeInit>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40005400 	.word	0x40005400
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40020400 	.word	0x40020400
 8004c58:	40005c00 	.word	0x40005c00
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020000 	.word	0x40020000

08004c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a7f      	ldr	r2, [pc, #508]	; (8004e80 <HAL_UART_MspInit+0x21c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f040 8092 	bne.w	8004dac <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004c88:	2300      	movs	r3, #0
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	4b7d      	ldr	r3, [pc, #500]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	4a7c      	ldr	r2, [pc, #496]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c96:	6413      	str	r3, [r2, #64]	; 0x40
 8004c98:	4b7a      	ldr	r3, [pc, #488]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4a75      	ldr	r2, [pc, #468]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb4:	4b73      	ldr	r3, [pc, #460]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd8:	4619      	mov	r1, r3
 8004cda:	486b      	ldr	r0, [pc, #428]	; (8004e88 <HAL_UART_MspInit+0x224>)
 8004cdc:	f001 ffc0 	bl	8006c60 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004ce2:	4a6b      	ldr	r2, [pc, #428]	; (8004e90 <HAL_UART_MspInit+0x22c>)
 8004ce4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004ce6:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cec:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cee:	4b67      	ldr	r3, [pc, #412]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004cf0:	2240      	movs	r2, #64	; 0x40
 8004cf2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf4:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cfa:	4b64      	ldr	r3, [pc, #400]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d00:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d02:	4b62      	ldr	r3, [pc, #392]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d08:	4b60      	ldr	r3, [pc, #384]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d14:	4b5d      	ldr	r3, [pc, #372]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d1a:	4b5c      	ldr	r3, [pc, #368]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004d20:	485a      	ldr	r0, [pc, #360]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d22:	f001 fb2f 	bl	8006384 <HAL_DMA_Init>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004d2c:	f7ff fa2a 	bl	8004184 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a56      	ldr	r2, [pc, #344]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34
 8004d36:	4a55      	ldr	r2, [pc, #340]	; (8004e8c <HAL_UART_MspInit+0x228>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004d3c:	4b55      	ldr	r3, [pc, #340]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d3e:	4a56      	ldr	r2, [pc, #344]	; (8004e98 <HAL_UART_MspInit+0x234>)
 8004d40:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004d42:	4b54      	ldr	r3, [pc, #336]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d48:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d4a:	4b52      	ldr	r3, [pc, #328]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d50:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d56:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d5c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d5e:	4b4d      	ldr	r3, [pc, #308]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d64:	4b4b      	ldr	r3, [pc, #300]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d70:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004d7e:	4845      	ldr	r0, [pc, #276]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d80:	f001 fb00 	bl	8006384 <HAL_DMA_Init>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004d8a:	f7ff f9fb 	bl	8004184 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a40      	ldr	r2, [pc, #256]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
 8004d94:	4a3f      	ldr	r2, [pc, #252]	; (8004e94 <HAL_UART_MspInit+0x230>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2034      	movs	r0, #52	; 0x34
 8004da0:	f001 faab 	bl	80062fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004da4:	2034      	movs	r0, #52	; 0x34
 8004da6:	f001 fac4 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004daa:	e0e4      	b.n	8004f76 <HAL_UART_MspInit+0x312>
  else if(huart->Instance==USART1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a3a      	ldr	r2, [pc, #232]	; (8004e9c <HAL_UART_MspInit+0x238>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d178      	bne.n	8004ea8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	4a31      	ldr	r2, [pc, #196]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004dc0:	f043 0310 	orr.w	r3, r3, #16
 8004dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	6313      	str	r3, [r2, #48]	; 0x30
 8004de2:	4b28      	ldr	r3, [pc, #160]	; (8004e84 <HAL_UART_MspInit+0x220>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004dee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df4:	2302      	movs	r3, #2
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e00:	2307      	movs	r3, #7
 8004e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e08:	4619      	mov	r1, r3
 8004e0a:	481f      	ldr	r0, [pc, #124]	; (8004e88 <HAL_UART_MspInit+0x224>)
 8004e0c:	f001 ff28 	bl	8006c60 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004e10:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e12:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <HAL_UART_MspInit+0x240>)
 8004e14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004e16:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e20:	2240      	movs	r2, #64	; 0x40
 8004e22:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e32:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004e50:	4813      	ldr	r0, [pc, #76]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e52:	f001 fa97 	bl	8006384 <HAL_DMA_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004e5c:	f7ff f992 	bl	8004184 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34
 8004e66:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <HAL_UART_MspInit+0x23c>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2025      	movs	r0, #37	; 0x25
 8004e72:	f001 fa42 	bl	80062fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e76:	2025      	movs	r0, #37	; 0x25
 8004e78:	f001 fa5b 	bl	8006332 <HAL_NVIC_EnableIRQ>
}
 8004e7c:	e07b      	b.n	8004f76 <HAL_UART_MspInit+0x312>
 8004e7e:	bf00      	nop
 8004e80:	40004c00 	.word	0x40004c00
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	20000478 	.word	0x20000478
 8004e90:	40026070 	.word	0x40026070
 8004e94:	200004d8 	.word	0x200004d8
 8004e98:	40026040 	.word	0x40026040
 8004e9c:	40011000 	.word	0x40011000
 8004ea0:	20000538 	.word	0x20000538
 8004ea4:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a34      	ldr	r2, [pc, #208]	; (8004f80 <HAL_UART_MspInit+0x31c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d161      	bne.n	8004f76 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <HAL_UART_MspInit+0x320>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <HAL_UART_MspInit+0x320>)
 8004ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec2:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <HAL_UART_MspInit+0x320>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <HAL_UART_MspInit+0x320>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <HAL_UART_MspInit+0x320>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ede:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <HAL_UART_MspInit+0x320>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004eea:	230c      	movs	r3, #12
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004efa:	2307      	movs	r3, #7
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f02:	4619      	mov	r1, r3
 8004f04:	4820      	ldr	r0, [pc, #128]	; (8004f88 <HAL_UART_MspInit+0x324>)
 8004f06:	f001 feab 	bl	8006c60 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004f0a:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f0c:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_UART_MspInit+0x32c>)
 8004f0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f18:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f32:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004f38:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f4a:	4810      	ldr	r0, [pc, #64]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f4c:	f001 fa1a 	bl	8006384 <HAL_DMA_Init>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8004f56:	f7ff f915 	bl	8004184 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_UART_MspInit+0x328>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004f66:	2200      	movs	r2, #0
 8004f68:	2101      	movs	r1, #1
 8004f6a:	2026      	movs	r0, #38	; 0x26
 8004f6c:	f001 f9c5 	bl	80062fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f70:	2026      	movs	r0, #38	; 0x26
 8004f72:	f001 f9de 	bl	8006332 <HAL_NVIC_EnableIRQ>
}
 8004f76:	bf00      	nop
 8004f78:	3738      	adds	r7, #56	; 0x38
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40004400 	.word	0x40004400
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40020000 	.word	0x40020000
 8004f8c:	20000598 	.word	0x20000598
 8004f90:	40026088 	.word	0x40026088

08004f94 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a27      	ldr	r2, [pc, #156]	; (8005040 <HAL_UART_MspDeInit+0xac>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d117      	bne.n	8004fd6 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <HAL_UART_MspDeInit+0xb0>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4a26      	ldr	r2, [pc, #152]	; (8005044 <HAL_UART_MspDeInit+0xb0>)
 8004fac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004fb0:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	4824      	ldr	r0, [pc, #144]	; (8005048 <HAL_UART_MspDeInit+0xb4>)
 8004fb6:	f001 ffe7 	bl	8006f88 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fa8e 	bl	80064e0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fa89 	bl	80064e0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004fce:	2034      	movs	r0, #52	; 0x34
 8004fd0:	f001 f9bd 	bl	800634e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004fd4:	e02f      	b.n	8005036 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	; (800504c <HAL_UART_MspDeInit+0xb8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d113      	bne.n	8005008 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART1_CLK_DISABLE();
 8004fe0:	4b18      	ldr	r3, [pc, #96]	; (8005044 <HAL_UART_MspDeInit+0xb0>)
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_UART_MspDeInit+0xb0>)
 8004fe6:	f023 0310 	bic.w	r3, r3, #16
 8004fea:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004fec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ff0:	4815      	ldr	r0, [pc, #84]	; (8005048 <HAL_UART_MspDeInit+0xb4>)
 8004ff2:	f001 ffc9 	bl	8006f88 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fa70 	bl	80064e0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005000:	2025      	movs	r0, #37	; 0x25
 8005002:	f001 f9a4 	bl	800634e <HAL_NVIC_DisableIRQ>
}
 8005006:	e016      	b.n	8005036 <HAL_UART_MspDeInit+0xa2>
  else if(huart->Instance==USART2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a10      	ldr	r2, [pc, #64]	; (8005050 <HAL_UART_MspDeInit+0xbc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d111      	bne.n	8005036 <HAL_UART_MspDeInit+0xa2>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <HAL_UART_MspDeInit+0xb0>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <HAL_UART_MspDeInit+0xb0>)
 8005018:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800501c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800501e:	210c      	movs	r1, #12
 8005020:	4809      	ldr	r0, [pc, #36]	; (8005048 <HAL_UART_MspDeInit+0xb4>)
 8005022:	f001 ffb1 	bl	8006f88 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fa58 	bl	80064e0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005030:	2026      	movs	r0, #38	; 0x26
 8005032:	f001 f98c 	bl	800634e <HAL_NVIC_DisableIRQ>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40004c00 	.word	0x40004c00
 8005044:	40023800 	.word	0x40023800
 8005048:	40020000 	.word	0x40020000
 800504c:	40011000 	.word	0x40011000
 8005050:	40004400 	.word	0x40004400

08005054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005058:	e7fe      	b.n	8005058 <NMI_Handler+0x4>

0800505a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800505e:	e7fe      	b.n	800505e <HardFault_Handler+0x4>

08005060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005064:	e7fe      	b.n	8005064 <MemManage_Handler+0x4>

08005066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005066:	b480      	push	{r7}
 8005068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800506a:	e7fe      	b.n	800506a <BusFault_Handler+0x4>

0800506c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005070:	e7fe      	b.n	8005070 <UsageFault_Handler+0x4>

08005072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050a0:	f000 fbd8 	bl	8005854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050a4:	bf00      	nop
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80050ac:	2008      	movs	r0, #8
 80050ae:	f002 f893 	bl	80071d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80050ba:	2010      	movs	r0, #16
 80050bc:	f002 f88c 	bl	80071d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80050c8:	4802      	ldr	r0, [pc, #8]	; (80050d4 <DMA1_Stream2_IRQHandler+0x10>)
 80050ca:	f001 fb51 	bl	8006770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200004d8 	.word	0x200004d8

080050d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80050dc:	4802      	ldr	r0, [pc, #8]	; (80050e8 <DMA1_Stream4_IRQHandler+0x10>)
 80050de:	f001 fb47 	bl	8006770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000478 	.word	0x20000478

080050ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80050f0:	4802      	ldr	r0, [pc, #8]	; (80050fc <DMA1_Stream5_IRQHandler+0x10>)
 80050f2:	f001 fb3d 	bl	8006770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000598 	.word	0x20000598

08005100 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005104:	4802      	ldr	r0, [pc, #8]	; (8005110 <USART1_IRQHandler+0x10>)
 8005106:	f004 f863 	bl	80091d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	200003f0 	.word	0x200003f0

08005114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005118:	4802      	ldr	r0, [pc, #8]	; (8005124 <USART2_IRQHandler+0x10>)
 800511a:	f004 f859 	bl	80091d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000434 	.word	0x20000434

08005128 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800512c:	4802      	ldr	r0, [pc, #8]	; (8005138 <UART4_IRQHandler+0x10>)
 800512e:	f004 f84f 	bl	80091d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200003ac 	.word	0x200003ac

0800513c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005140:	4802      	ldr	r0, [pc, #8]	; (800514c <DMA2_Stream7_IRQHandler+0x10>)
 8005142:	f001 fb15 	bl	8006770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000538 	.word	0x20000538

08005150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
	return 1;
 8005154:	2301      	movs	r3, #1
}
 8005156:	4618      	mov	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <_kill>:

int _kill(int pid, int sig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800516a:	f005 f989 	bl	800a480 <__errno>
 800516e:	4603      	mov	r3, r0
 8005170:	2216      	movs	r2, #22
 8005172:	601a      	str	r2, [r3, #0]
	return -1;
 8005174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <_exit>:

void _exit (int status)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005188:	f04f 31ff 	mov.w	r1, #4294967295
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ffe7 	bl	8005160 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005192:	e7fe      	b.n	8005192 <_exit+0x12>

08005194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e00a      	b.n	80051bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051a6:	f3af 8000 	nop.w
 80051aa:	4601      	mov	r1, r0
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	60ba      	str	r2, [r7, #8]
 80051b2:	b2ca      	uxtb	r2, r1
 80051b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3301      	adds	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	dbf0      	blt.n	80051a6 <_read+0x12>
	}

return len;
 80051c4:	687b      	ldr	r3, [r7, #4]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e009      	b.n	80051f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	60ba      	str	r2, [r7, #8]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	3301      	adds	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	dbf1      	blt.n	80051e0 <_write+0x12>
	}
	return len;
 80051fc:	687b      	ldr	r3, [r7, #4]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <_close>:

int _close(int file)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
	return -1;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800522e:	605a      	str	r2, [r3, #4]
	return 0;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <_isatty>:

int _isatty(int file)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
	return 1;
 8005246:	2301      	movs	r3, #1
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
	return 0;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <_sbrk+0x5c>)
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <_sbrk+0x60>)
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <_sbrk+0x64>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <_sbrk+0x64>)
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <_sbrk+0x68>)
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <_sbrk+0x64>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	429a      	cmp	r2, r3
 800529e:	d207      	bcs.n	80052b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052a0:	f005 f8ee 	bl	800a480 <__errno>
 80052a4:	4603      	mov	r3, r0
 80052a6:	220c      	movs	r2, #12
 80052a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295
 80052ae:	e009      	b.n	80052c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <_sbrk+0x64>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <_sbrk+0x64>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	4a05      	ldr	r2, [pc, #20]	; (80052d4 <_sbrk+0x64>)
 80052c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20020000 	.word	0x20020000
 80052d0:	00000400 	.word	0x00000400
 80052d4:	200008f8 	.word	0x200008f8
 80052d8:	20001220 	.word	0x20001220

080052dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <SystemInit+0x20>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	4a05      	ldr	r2, [pc, #20]	; (80052fc <SystemInit+0x20>)
 80052e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <HAL_UART_RxCpltCallback>:
    }
}*/

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <HAL_UART_RxCpltCallback+0x40>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d105      	bne.n	800531c <HAL_UART_RxCpltCallback+0x1c>
	{
		g_GnssRx_Flag = true;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_UART_RxCpltCallback+0x44>)
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
		g_openFixedDataTransmition = true;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_UART_RxCpltCallback+0x48>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
	}
	if(huart == &huart4)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <HAL_UART_RxCpltCallback+0x4c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d109      	bne.n	8005338 <HAL_UART_RxCpltCallback+0x38>
	{
		is_updated_uart4 = 1;
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_UART_RxCpltCallback+0x50>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_UART_RxCpltCallback+0x54>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2203      	movs	r2, #3
 8005330:	4619      	mov	r1, r3
 8005332:	4806      	ldr	r0, [pc, #24]	; (800534c <HAL_UART_RxCpltCallback+0x4c>)
 8005334:	f003 ff1c 	bl	8009170 <HAL_UART_Receive_DMA>
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000434 	.word	0x20000434
 8005344:	200008fc 	.word	0x200008fc
 8005348:	200008fd 	.word	0x200008fd
 800534c:	200003ac 	.word	0x200003ac
 8005350:	20000780 	.word	0x20000780
 8005354:	2000077c 	.word	0x2000077c

08005358 <UsrGpsL86Init>:


//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8005360:	f240 228a 	movw	r2, #650	; 0x28a
 8005364:	4903      	ldr	r1, [pc, #12]	; (8005374 <UsrGpsL86Init+0x1c>)
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f003 ff02 	bl	8009170 <HAL_UART_Receive_DMA>
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	200009d4 	.word	0x200009d4

08005378 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    getRmc();
 8005380:	f000 f83a 	bl	80053f8 <getRmc>
    getGGA();
 8005384:	f000 f95c 	bl	8005640 <getGGA>
    if (rmcValidFlag)
 8005388:	4b18      	ldr	r3, [pc, #96]	; (80053ec <Usr_GpsL86GetValues+0x74>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8005392:	4b16      	ldr	r3, [pc, #88]	; (80053ec <Usr_GpsL86GetValues+0x74>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8005398:	f000 f8e4 	bl	8005564 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 800539c:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <Usr_GpsL86GetValues+0x78>)
 80053d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart2);
 80053dc:	4805      	ldr	r0, [pc, #20]	; (80053f4 <Usr_GpsL86GetValues+0x7c>)
 80053de:	f7ff ffbb 	bl	8005358 <UsrGpsL86Init>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200008fe 	.word	0x200008fe
 80053f0:	200011dc 	.word	0x200011dc
 80053f4:	20000434 	.word	0x20000434

080053f8 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af02      	add	r7, sp, #8
	if (g_GnssRx_Flag)
 80053fe:	4b4a      	ldr	r3, [pc, #296]	; (8005528 <getRmc+0x130>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 808a 	beq.w	800551e <getRmc+0x126>
	    {
	        MsgIndex = 0;
 800540a:	4b48      	ldr	r3, [pc, #288]	; (800552c <getRmc+0x134>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
	        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005410:	4947      	ldr	r1, [pc, #284]	; (8005530 <getRmc+0x138>)
 8005412:	4848      	ldr	r0, [pc, #288]	; (8005534 <getRmc+0x13c>)
 8005414:	f005 ff77 	bl	800b306 <strcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8005418:	4947      	ldr	r1, [pc, #284]	; (8005538 <getRmc+0x140>)
 800541a:	4846      	ldr	r0, [pc, #280]	; (8005534 <getRmc+0x13c>)
 800541c:	f005 ff7b 	bl	800b316 <strstr>
 8005420:	4603      	mov	r3, r0
 8005422:	4a46      	ldr	r2, [pc, #280]	; (800553c <getRmc+0x144>)
 8005424:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8005426:	4b45      	ldr	r3, [pc, #276]	; (800553c <getRmc+0x144>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b47      	cmp	r3, #71	; 0x47
 800542e:	d173      	bne.n	8005518 <getRmc+0x120>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8005430:	4b42      	ldr	r3, [pc, #264]	; (800553c <getRmc+0x144>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b3d      	ldr	r3, [pc, #244]	; (800552c <getRmc+0x134>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	7811      	ldrb	r1, [r2, #0]
 800543a:	4a41      	ldr	r2, [pc, #260]	; (8005540 <getRmc+0x148>)
 800543c:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 800543e:	4b3b      	ldr	r3, [pc, #236]	; (800552c <getRmc+0x134>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	4a39      	ldr	r2, [pc, #228]	; (800552c <getRmc+0x134>)
 8005446:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8005448:	4b3c      	ldr	r3, [pc, #240]	; (800553c <getRmc+0x144>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a37      	ldr	r2, [pc, #220]	; (800552c <getRmc+0x134>)
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	441a      	add	r2, r3
 8005452:	4b3a      	ldr	r3, [pc, #232]	; (800553c <getRmc+0x144>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <getRmc+0x144>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b0a      	cmp	r3, #10
 8005462:	d003      	beq.n	800546c <getRmc+0x74>
 8005464:	4b31      	ldr	r3, [pc, #196]	; (800552c <getRmc+0x134>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b5a      	cmp	r3, #90	; 0x5a
 800546a:	dde1      	ble.n	8005430 <getRmc+0x38>
	                {
	                    MsgIndex = 0;
 800546c:	4b2f      	ldr	r3, [pc, #188]	; (800552c <getRmc+0x134>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
	                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8005472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005476:	2100      	movs	r1, #0
 8005478:	482e      	ldr	r0, [pc, #184]	; (8005534 <getRmc+0x13c>)
 800547a:	f005 f82b 	bl	800a4d4 <memset>
	                    memset(m_rxData, 0, sizeof(m_rxData));
 800547e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005482:	2100      	movs	r1, #0
 8005484:	482a      	ldr	r0, [pc, #168]	; (8005530 <getRmc+0x138>)
 8005486:	f005 f825 	bl	800a4d4 <memset>

	                    for (int i = 0; i < 100; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	e014      	b.n	80054ba <getRmc+0xc2>
	                    {
	                        if (gpsPayload[i] == 'N')
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <getRmc+0x148>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b4e      	cmp	r3, #78	; 0x4e
 800549a:	d102      	bne.n	80054a2 <getRmc+0xaa>
	                            f_northFlag = true;
 800549c:	4b29      	ldr	r3, [pc, #164]	; (8005544 <getRmc+0x14c>)
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 80054a2:	4a27      	ldr	r2, [pc, #156]	; (8005540 <getRmc+0x148>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b45      	cmp	r3, #69	; 0x45
 80054ac:	d102      	bne.n	80054b4 <getRmc+0xbc>
	                            f_eastFlag = true;
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <getRmc+0x150>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b63      	cmp	r3, #99	; 0x63
 80054be:	dde7      	ble.n	8005490 <getRmc+0x98>
	                    }
	                    if (strlen(gpsPayload) > 10)
 80054c0:	481f      	ldr	r0, [pc, #124]	; (8005540 <getRmc+0x148>)
 80054c2:	f7fa fea5 	bl	8000210 <strlen>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b0a      	cmp	r3, #10
 80054ca:	d91f      	bls.n	800550c <getRmc+0x114>
	                    {
	                        if (f_eastFlag && f_northFlag)
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <getRmc+0x150>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01f      	beq.n	8005516 <getRmc+0x11e>
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <getRmc+0x14c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01a      	beq.n	8005516 <getRmc+0x11e>
	                        {
	                            f_northFlag = false;
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <getRmc+0x14c>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <getRmc+0x150>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 80054ec:	4b17      	ldr	r3, [pc, #92]	; (800554c <getRmc+0x154>)
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <getRmc+0x158>)
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <getRmc+0x15c>)
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <getRmc+0x160>)
 80054f8:	4918      	ldr	r1, [pc, #96]	; (800555c <getRmc+0x164>)
 80054fa:	4811      	ldr	r0, [pc, #68]	; (8005540 <getRmc+0x148>)
 80054fc:	f005 fe92 	bl	800b224 <siscanf>
	                            rmcValidFlag = true;
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <getRmc+0x168>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8005506:	f000 f82d 	bl	8005564 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 800550a:	e004      	b.n	8005516 <getRmc+0x11e>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 800550c:	2264      	movs	r2, #100	; 0x64
 800550e:	2100      	movs	r1, #0
 8005510:	480b      	ldr	r0, [pc, #44]	; (8005540 <getRmc+0x148>)
 8005512:	f004 ffdf 	bl	800a4d4 <memset>
	                    break;
 8005516:	bf00      	nop
	                }
	            }
	        }
	        g_GnssRx_Flag = false;
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <getRmc+0x130>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]

	    }

}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200008fc 	.word	0x200008fc
 800552c:	20000904 	.word	0x20000904
 8005530:	200009d4 	.word	0x200009d4
 8005534:	20000dd4 	.word	0x20000dd4
 8005538:	08011420 	.word	0x08011420
 800553c:	20000908 	.word	0x20000908
 8005540:	2000090c 	.word	0x2000090c
 8005544:	200008ff 	.word	0x200008ff
 8005548:	20000900 	.word	0x20000900
 800554c:	200011e4 	.word	0x200011e4
 8005550:	200011d8 	.word	0x200011d8
 8005554:	200011d4 	.word	0x200011d4
 8005558:	200011e8 	.word	0x200011e8
 800555c:	08011428 	.word	0x08011428
 8005560:	200008fe 	.word	0x200008fe

08005564 <formatLatLong>:

_io void formatLatLong(void)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 800556a:	4b30      	ldr	r3, [pc, #192]	; (800562c <formatLatLong+0xc8>)
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005574:	ee17 1a90 	vmov	r1, s15
 8005578:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <formatLatLong+0xcc>)
 800557a:	fb83 2301 	smull	r2, r3, r3, r1
 800557e:	115a      	asrs	r2, r3, #5
 8005580:	17cb      	asrs	r3, r1, #31
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8005586:	4b29      	ldr	r3, [pc, #164]	; (800562c <formatLatLong+0xc8>)
 8005588:	ed93 7a00 	vldr	s14, [r3]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2264      	movs	r2, #100	; 0x64
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055a0:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ae:	edd7 6a00 	vldr	s13, [r7]
 80055b2:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8005634 <formatLatLong+0xd0>
 80055b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80055ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055be:	4b1e      	ldr	r3, [pc, #120]	; (8005638 <formatLatLong+0xd4>)
 80055c0:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <formatLatLong+0xd8>)
 80055c6:	edd3 7a00 	vldr	s15, [r3]
 80055ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ce:	ee17 1a90 	vmov	r1, s15
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <formatLatLong+0xcc>)
 80055d4:	fb83 2301 	smull	r2, r3, r3, r1
 80055d8:	115a      	asrs	r2, r3, #5
 80055da:	17cb      	asrs	r3, r1, #31
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 80055e0:	4b16      	ldr	r3, [pc, #88]	; (800563c <formatLatLong+0xd8>)
 80055e2:	ed93 7a00 	vldr	s14, [r3]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2264      	movs	r2, #100	; 0x64
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fa:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005608:	edd7 6a00 	vldr	s13, [r7]
 800560c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8005634 <formatLatLong+0xd0>
 8005610:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <formatLatLong+0xd4>)
 800561a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	200011d4 	.word	0x200011d4
 8005630:	51eb851f 	.word	0x51eb851f
 8005634:	42700000 	.word	0x42700000
 8005638:	200011dc 	.word	0x200011dc
 800563c:	200011d8 	.word	0x200011d8

08005640 <getGGA>:

_io void getGGA(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8005646:	4b34      	ldr	r3, [pc, #208]	; (8005718 <getGGA+0xd8>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d060      	beq.n	8005712 <getGGA+0xd2>
    {
        MsgIndex = 0;
 8005650:	4b32      	ldr	r3, [pc, #200]	; (800571c <getGGA+0xdc>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8005656:	4932      	ldr	r1, [pc, #200]	; (8005720 <getGGA+0xe0>)
 8005658:	4832      	ldr	r0, [pc, #200]	; (8005724 <getGGA+0xe4>)
 800565a:	f005 fe54 	bl	800b306 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800565e:	4932      	ldr	r1, [pc, #200]	; (8005728 <getGGA+0xe8>)
 8005660:	4830      	ldr	r0, [pc, #192]	; (8005724 <getGGA+0xe4>)
 8005662:	f005 fe58 	bl	800b316 <strstr>
 8005666:	4603      	mov	r3, r0
 8005668:	4a30      	ldr	r2, [pc, #192]	; (800572c <getGGA+0xec>)
 800566a:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 800566c:	4b2f      	ldr	r3, [pc, #188]	; (800572c <getGGA+0xec>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b47      	cmp	r3, #71	; 0x47
 8005674:	d14a      	bne.n	800570c <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8005676:	4b2d      	ldr	r3, [pc, #180]	; (800572c <getGGA+0xec>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b28      	ldr	r3, [pc, #160]	; (800571c <getGGA+0xdc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	7811      	ldrb	r1, [r2, #0]
 8005680:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <getGGA+0xf0>)
 8005682:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <getGGA+0xdc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a24      	ldr	r2, [pc, #144]	; (800571c <getGGA+0xdc>)
 800568c:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800568e:	4b27      	ldr	r3, [pc, #156]	; (800572c <getGGA+0xec>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <getGGA+0xdc>)
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	441a      	add	r2, r3
 8005698:	4b24      	ldr	r3, [pc, #144]	; (800572c <getGGA+0xec>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80056a0:	4b22      	ldr	r3, [pc, #136]	; (800572c <getGGA+0xec>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b0a      	cmp	r3, #10
 80056a8:	d003      	beq.n	80056b2 <getGGA+0x72>
 80056aa:	4b1c      	ldr	r3, [pc, #112]	; (800571c <getGGA+0xdc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b5a      	cmp	r3, #90	; 0x5a
 80056b0:	dde1      	ble.n	8005676 <getGGA+0x36>
                {
                    MsgIndex = 0;
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <getGGA+0xdc>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80056b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056bc:	2100      	movs	r1, #0
 80056be:	4819      	ldr	r0, [pc, #100]	; (8005724 <getGGA+0xe4>)
 80056c0:	f004 ff08 	bl	800a4d4 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 80056c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c8:	2100      	movs	r1, #0
 80056ca:	4815      	ldr	r0, [pc, #84]	; (8005720 <getGGA+0xe0>)
 80056cc:	f004 ff02 	bl	800a4d4 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 80056d0:	4817      	ldr	r0, [pc, #92]	; (8005730 <getGGA+0xf0>)
 80056d2:	f7fa fd9d 	bl	8000210 <strlen>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b0a      	cmp	r3, #10
 80056da:	d912      	bls.n	8005702 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 80056dc:	4b15      	ldr	r3, [pc, #84]	; (8005734 <getGGA+0xf4>)
 80056de:	9305      	str	r3, [sp, #20]
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <getGGA+0xf8>)
 80056e2:	9304      	str	r3, [sp, #16]
 80056e4:	4b15      	ldr	r3, [pc, #84]	; (800573c <getGGA+0xfc>)
 80056e6:	9303      	str	r3, [sp, #12]
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <getGGA+0x100>)
 80056ea:	9302      	str	r3, [sp, #8]
 80056ec:	4b15      	ldr	r3, [pc, #84]	; (8005744 <getGGA+0x104>)
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	4b15      	ldr	r3, [pc, #84]	; (8005748 <getGGA+0x108>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4b15      	ldr	r3, [pc, #84]	; (800574c <getGGA+0x10c>)
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <getGGA+0x110>)
 80056f8:	4916      	ldr	r1, [pc, #88]	; (8005754 <getGGA+0x114>)
 80056fa:	480d      	ldr	r0, [pc, #52]	; (8005730 <getGGA+0xf0>)
 80056fc:	f005 fd92 	bl	800b224 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8005700:	e004      	b.n	800570c <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8005702:	2264      	movs	r2, #100	; 0x64
 8005704:	2100      	movs	r1, #0
 8005706:	4814      	ldr	r0, [pc, #80]	; (8005758 <getGGA+0x118>)
 8005708:	f004 fee4 	bl	800a4d4 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <getGGA+0xd8>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);
    }
}
 8005712:	bf00      	nop
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	200008fd 	.word	0x200008fd
 800571c:	20000904 	.word	0x20000904
 8005720:	200009d4 	.word	0x200009d4
 8005724:	20000dd4 	.word	0x20000dd4
 8005728:	08011444 	.word	0x08011444
 800572c:	20000908 	.word	0x20000908
 8005730:	20000970 	.word	0x20000970
 8005734:	20001208 	.word	0x20001208
 8005738:	20001204 	.word	0x20001204
 800573c:	20001200 	.word	0x20001200
 8005740:	200011fc 	.word	0x200011fc
 8005744:	200011f8 	.word	0x200011f8
 8005748:	200011f4 	.word	0x200011f4
 800574c:	200011f0 	.word	0x200011f0
 8005750:	200011ec 	.word	0x200011ec
 8005754:	0801144c 	.word	0x0801144c
 8005758:	2000090c 	.word	0x2000090c

0800575c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800575c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005760:	480d      	ldr	r0, [pc, #52]	; (8005798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005762:	490e      	ldr	r1, [pc, #56]	; (800579c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005764:	4a0e      	ldr	r2, [pc, #56]	; (80057a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005768:	e002      	b.n	8005770 <LoopCopyDataInit>

0800576a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800576a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800576c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800576e:	3304      	adds	r3, #4

08005770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005774:	d3f9      	bcc.n	800576a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005776:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005778:	4c0b      	ldr	r4, [pc, #44]	; (80057a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800577a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800577c:	e001      	b.n	8005782 <LoopFillZerobss>

0800577e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800577e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005780:	3204      	adds	r2, #4

08005782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005784:	d3fb      	bcc.n	800577e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005786:	f7ff fda9 	bl	80052dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800578a:	f004 fe7f 	bl	800a48c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800578e:	f7fd fef7 	bl	8003580 <main>
  bx  lr    
 8005792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800579c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80057a0:	08011a10 	.word	0x08011a10
  ldr r2, =_sbss
 80057a4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80057a8:	20001220 	.word	0x20001220

080057ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057ac:	e7fe      	b.n	80057ac <ADC_IRQHandler>
	...

080057b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057b4:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <HAL_Init+0x40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0d      	ldr	r2, [pc, #52]	; (80057f0 <HAL_Init+0x40>)
 80057ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_Init+0x40>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <HAL_Init+0x40>)
 80057c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057cc:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <HAL_Init+0x40>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <HAL_Init+0x40>)
 80057d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d8:	2003      	movs	r0, #3
 80057da:	f000 fd83 	bl	80062e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057de:	200f      	movs	r0, #15
 80057e0:	f000 f808 	bl	80057f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057e4:	f7ff f8f4 	bl	80049d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023c00 	.word	0x40023c00

080057f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057fc:	4b12      	ldr	r3, [pc, #72]	; (8005848 <HAL_InitTick+0x54>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b12      	ldr	r3, [pc, #72]	; (800584c <HAL_InitTick+0x58>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	4619      	mov	r1, r3
 8005806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800580a:	fbb3 f3f1 	udiv	r3, r3, r1
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fda9 	bl	800636a <HAL_SYSTICK_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e00e      	b.n	8005840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b0f      	cmp	r3, #15
 8005826:	d80a      	bhi.n	800583e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005828:	2200      	movs	r2, #0
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	f000 fd63 	bl	80062fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005834:	4a06      	ldr	r2, [pc, #24]	; (8005850 <HAL_InitTick+0x5c>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20000008 	.word	0x20000008
 800584c:	20000010 	.word	0x20000010
 8005850:	2000000c 	.word	0x2000000c

08005854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_IncTick+0x20>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_IncTick+0x24>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4413      	add	r3, r2
 8005864:	4a04      	ldr	r2, [pc, #16]	; (8005878 <HAL_IncTick+0x24>)
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000010 	.word	0x20000010
 8005878:	2000120c 	.word	0x2000120c

0800587c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return uwTick;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <HAL_GetTick+0x14>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	2000120c 	.word	0x2000120c

08005894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800589c:	f7ff ffee 	bl	800587c <HAL_GetTick>
 80058a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d005      	beq.n	80058ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_Delay+0x44>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058ba:	bf00      	nop
 80058bc:	f7ff ffde 	bl	800587c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d8f7      	bhi.n	80058bc <HAL_Delay+0x28>
  {
  }
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000010 	.word	0x20000010

080058dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e033      	b.n	800595a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff f890 	bl	8004a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b00      	cmp	r3, #0
 8005918:	d118      	bne.n	800594c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005922:	f023 0302 	bic.w	r3, r3, #2
 8005926:	f043 0202 	orr.w	r2, r3, #2
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fae8 	bl	8005f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	f043 0201 	orr.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
 800594a:	e001      	b.n	8005950 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_ADC_Start+0x1a>
 800597a:	2302      	movs	r3, #2
 800597c:	e0b2      	b.n	8005ae4 <HAL_ADC_Start+0x180>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d018      	beq.n	80059c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059a4:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <HAL_ADC_Start+0x18c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a52      	ldr	r2, [pc, #328]	; (8005af4 <HAL_ADC_Start+0x190>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	0c9a      	lsrs	r2, r3, #18
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80059b8:	e002      	b.n	80059c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	3b01      	subs	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f9      	bne.n	80059ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d17a      	bne.n	8005aca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	d106      	bne.n	8005a22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	f023 0206 	bic.w	r2, r3, #6
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	645a      	str	r2, [r3, #68]	; 0x44
 8005a20:	e002      	b.n	8005a28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a30:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <HAL_ADC_Start+0x194>)
 8005a32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d12a      	bne.n	8005aa0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2b      	ldr	r2, [pc, #172]	; (8005afc <HAL_ADC_Start+0x198>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d015      	beq.n	8005a80 <HAL_ADC_Start+0x11c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <HAL_ADC_Start+0x19c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d105      	bne.n	8005a6a <HAL_ADC_Start+0x106>
 8005a5e:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <HAL_ADC_Start+0x194>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a25      	ldr	r2, [pc, #148]	; (8005b04 <HAL_ADC_Start+0x1a0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d136      	bne.n	8005ae2 <HAL_ADC_Start+0x17e>
 8005a74:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_ADC_Start+0x194>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d130      	bne.n	8005ae2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d129      	bne.n	8005ae2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	e020      	b.n	8005ae2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <HAL_ADC_Start+0x198>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_ADC_Start+0x17e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d114      	bne.n	8005ae2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ac6:	609a      	str	r2, [r3, #8]
 8005ac8:	e00b      	b.n	8005ae2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0210 	orr.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	f043 0201 	orr.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20000008 	.word	0x20000008
 8005af4:	431bde83 	.word	0x431bde83
 8005af8:	40012300 	.word	0x40012300
 8005afc:	40012000 	.word	0x40012000
 8005b00:	40012100 	.word	0x40012100
 8005b04:	40012200 	.word	0x40012200

08005b08 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_ADC_Stop+0x16>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e021      	b.n	8005b62 <HAL_ADC_Stop+0x5a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f043 0201 	orr.w	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8a:	d113      	bne.n	8005bb4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e063      	b.n	8005c7c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bb4:	f7ff fe62 	bl	800587c <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bba:	e021      	b.n	8005c00 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d01d      	beq.n	8005c00 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_ADC_PollForConversion+0x6c>
 8005bca:	f7ff fe57 	bl	800587c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d212      	bcs.n	8005c00 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d00b      	beq.n	8005c00 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f043 0204 	orr.w	r2, r3, #4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e03d      	b.n	8005c7c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d1d6      	bne.n	8005bbc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f06f 0212 	mvn.w	r2, #18
 8005c16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d123      	bne.n	8005c7a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d11f      	bne.n	8005c7a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d111      	bne.n	8005c7a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x1c>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e113      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x244>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b09      	cmp	r3, #9
 8005cca:	d925      	bls.n	8005d18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68d9      	ldr	r1, [r3, #12]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	3b1e      	subs	r3, #30
 8005ce2:	2207      	movs	r2, #7
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	400a      	ands	r2, r1
 8005cf0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68d9      	ldr	r1, [r3, #12]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4618      	mov	r0, r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4403      	add	r3, r0
 8005d0a:	3b1e      	subs	r3, #30
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	e022      	b.n	8005d5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6919      	ldr	r1, [r3, #16]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	4613      	mov	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4413      	add	r3, r2
 8005d2c:	2207      	movs	r2, #7
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43da      	mvns	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	400a      	ands	r2, r1
 8005d3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6919      	ldr	r1, [r3, #16]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4403      	add	r3, r0
 8005d54:	409a      	lsls	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b06      	cmp	r3, #6
 8005d64:	d824      	bhi.n	8005db0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	3b05      	subs	r3, #5
 8005d78:	221f      	movs	r2, #31
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	400a      	ands	r2, r1
 8005d86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	4618      	mov	r0, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	3b05      	subs	r3, #5
 8005da2:	fa00 f203 	lsl.w	r2, r0, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34
 8005dae:	e04c      	b.n	8005e4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	d824      	bhi.n	8005e02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3b23      	subs	r3, #35	; 0x23
 8005dca:	221f      	movs	r2, #31
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43da      	mvns	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4618      	mov	r0, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	3b23      	subs	r3, #35	; 0x23
 8005df4:	fa00 f203 	lsl.w	r2, r0, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8005e00:	e023      	b.n	8005e4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	3b41      	subs	r3, #65	; 0x41
 8005e14:	221f      	movs	r2, #31
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	400a      	ands	r2, r1
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4618      	mov	r0, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3b41      	subs	r3, #65	; 0x41
 8005e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e4a:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <HAL_ADC_ConfigChannel+0x250>)
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <HAL_ADC_ConfigChannel+0x254>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10f      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x1d8>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b12      	cmp	r3, #18
 8005e5e:	d10b      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <HAL_ADC_ConfigChannel+0x254>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d12b      	bne.n	8005eda <HAL_ADC_ConfigChannel+0x23a>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1c      	ldr	r2, [pc, #112]	; (8005ef8 <HAL_ADC_ConfigChannel+0x258>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <HAL_ADC_ConfigChannel+0x1f4>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b11      	cmp	r3, #17
 8005e92:	d122      	bne.n	8005eda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <HAL_ADC_ConfigChannel+0x258>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d111      	bne.n	8005eda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <HAL_ADC_ConfigChannel+0x25c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a11      	ldr	r2, [pc, #68]	; (8005f00 <HAL_ADC_ConfigChannel+0x260>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	0c9a      	lsrs	r2, r3, #18
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ecc:	e002      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f9      	bne.n	8005ece <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012300 	.word	0x40012300
 8005ef4:	40012000 	.word	0x40012000
 8005ef8:	10000012 	.word	0x10000012
 8005efc:	20000008 	.word	0x20000008
 8005f00:	431bde83 	.word	0x431bde83

08005f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f0c:	4b79      	ldr	r3, [pc, #484]	; (80060f4 <ADC_Init+0x1f0>)
 8005f0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6859      	ldr	r1, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	021a      	lsls	r2, r3, #8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6899      	ldr	r1, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	4a58      	ldr	r2, [pc, #352]	; (80060f8 <ADC_Init+0x1f4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6899      	ldr	r1, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	e00f      	b.n	8006002 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006000:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0202 	bic.w	r2, r2, #2
 8006010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6899      	ldr	r1, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	7e1b      	ldrb	r3, [r3, #24]
 800601c:	005a      	lsls	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800603e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800604e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	3b01      	subs	r3, #1
 800605c:	035a      	lsls	r2, r3, #13
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
 8006066:	e007      	b.n	8006078 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006076:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	3b01      	subs	r3, #1
 8006094:	051a      	lsls	r2, r3, #20
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80060ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6899      	ldr	r1, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060ba:	025a      	lsls	r2, r3, #9
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	029a      	lsls	r2, r3, #10
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40012300 	.word	0x40012300
 80060f8:	0f000001 	.word	0x0f000001

080060fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <__NVIC_SetPriorityGrouping+0x44>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006118:	4013      	ands	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <__NVIC_SetPriorityGrouping+0x44>)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	60d3      	str	r3, [r2, #12]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	e000ed00 	.word	0xe000ed00

08006144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <__NVIC_GetPriorityGrouping+0x18>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	0a1b      	lsrs	r3, r3, #8
 800614e:	f003 0307 	and.w	r3, r3, #7
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800616a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616e:	2b00      	cmp	r3, #0
 8006170:	db0b      	blt.n	800618a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	f003 021f 	and.w	r2, r3, #31
 8006178:	4907      	ldr	r1, [pc, #28]	; (8006198 <__NVIC_EnableIRQ+0x38>)
 800617a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	2001      	movs	r0, #1
 8006182:	fa00 f202 	lsl.w	r2, r0, r2
 8006186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	e000e100 	.word	0xe000e100

0800619c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	db12      	blt.n	80061d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	f003 021f 	and.w	r2, r3, #31
 80061b4:	490a      	ldr	r1, [pc, #40]	; (80061e0 <__NVIC_DisableIRQ+0x44>)
 80061b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2001      	movs	r0, #1
 80061be:	fa00 f202 	lsl.w	r2, r0, r2
 80061c2:	3320      	adds	r3, #32
 80061c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80061c8:	f3bf 8f4f 	dsb	sy
}
 80061cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80061ce:	f3bf 8f6f 	isb	sy
}
 80061d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000e100 	.word	0xe000e100

080061e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	6039      	str	r1, [r7, #0]
 80061ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	db0a      	blt.n	800620e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	490c      	ldr	r1, [pc, #48]	; (8006230 <__NVIC_SetPriority+0x4c>)
 80061fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006202:	0112      	lsls	r2, r2, #4
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	440b      	add	r3, r1
 8006208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800620c:	e00a      	b.n	8006224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	4908      	ldr	r1, [pc, #32]	; (8006234 <__NVIC_SetPriority+0x50>)
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	3b04      	subs	r3, #4
 800621c:	0112      	lsls	r2, r2, #4
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	440b      	add	r3, r1
 8006222:	761a      	strb	r2, [r3, #24]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	e000e100 	.word	0xe000e100
 8006234:	e000ed00 	.word	0xe000ed00

08006238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f1c3 0307 	rsb	r3, r3, #7
 8006252:	2b04      	cmp	r3, #4
 8006254:	bf28      	it	cs
 8006256:	2304      	movcs	r3, #4
 8006258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	3304      	adds	r3, #4
 800625e:	2b06      	cmp	r3, #6
 8006260:	d902      	bls.n	8006268 <NVIC_EncodePriority+0x30>
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3b03      	subs	r3, #3
 8006266:	e000      	b.n	800626a <NVIC_EncodePriority+0x32>
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800626c:	f04f 32ff 	mov.w	r2, #4294967295
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43da      	mvns	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	401a      	ands	r2, r3
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006280:	f04f 31ff 	mov.w	r1, #4294967295
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	fa01 f303 	lsl.w	r3, r1, r3
 800628a:	43d9      	mvns	r1, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006290:	4313      	orrs	r3, r2
         );
}
 8006292:	4618      	mov	r0, r3
 8006294:	3724      	adds	r7, #36	; 0x24
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062b0:	d301      	bcc.n	80062b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062b2:	2301      	movs	r3, #1
 80062b4:	e00f      	b.n	80062d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062b6:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <SysTick_Config+0x40>)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062be:	210f      	movs	r1, #15
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	f7ff ff8e 	bl	80061e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <SysTick_Config+0x40>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <SysTick_Config+0x40>)
 80062d0:	2207      	movs	r2, #7
 80062d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	e000e010 	.word	0xe000e010

080062e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ff05 	bl	80060fc <__NVIC_SetPriorityGrouping>
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	4603      	mov	r3, r0
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800630c:	f7ff ff1a 	bl	8006144 <__NVIC_GetPriorityGrouping>
 8006310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7ff ff8e 	bl	8006238 <NVIC_EncodePriority>
 800631c:	4602      	mov	r2, r0
 800631e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff ff5d 	bl	80061e4 <__NVIC_SetPriority>
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	4603      	mov	r3, r0
 800633a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800633c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ff0d 	bl	8006160 <__NVIC_EnableIRQ>
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	4603      	mov	r3, r0
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff ff1d 	bl	800619c <__NVIC_DisableIRQ>
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff ff94 	bl	80062a0 <SysTick_Config>
 8006378:	4603      	mov	r3, r0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006390:	f7ff fa74 	bl	800587c <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e099      	b.n	80064d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c0:	e00f      	b.n	80063e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063c2:	f7ff fa5b 	bl	800587c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b05      	cmp	r3, #5
 80063ce:	d908      	bls.n	80063e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2203      	movs	r2, #3
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e078      	b.n	80064d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e8      	bne.n	80063c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4b38      	ldr	r3, [pc, #224]	; (80064dc <HAL_DMA_Init+0x158>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800640e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800641a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	2b04      	cmp	r3, #4
 800643a:	d107      	bne.n	800644c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	4313      	orrs	r3, r2
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0307 	bic.w	r3, r3, #7
 8006462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b04      	cmp	r3, #4
 8006474:	d117      	bne.n	80064a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00e      	beq.n	80064a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fb6d 	bl	8006b68 <DMA_CheckFifoParam>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2240      	movs	r2, #64	; 0x40
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80064a2:	2301      	movs	r3, #1
 80064a4:	e016      	b.n	80064d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fb24 	bl	8006afc <DMA_CalcBaseAndBitshift>
 80064b4:	4603      	mov	r3, r0
 80064b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064bc:	223f      	movs	r2, #63	; 0x3f
 80064be:	409a      	lsls	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	f010803f 	.word	0xf010803f

080064e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e050      	b.n	8006594 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d101      	bne.n	8006502 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
 8006500:	e048      	b.n	8006594 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2221      	movs	r2, #33	; 0x21
 8006540:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fada 	bl	8006afc <DMA_CalcBaseAndBitshift>
 8006548:	4603      	mov	r3, r0
 800654a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006574:	223f      	movs	r2, #63	; 0x3f
 8006576:	409a      	lsls	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_DMA_Start_IT+0x26>
 80065be:	2302      	movs	r3, #2
 80065c0:	e040      	b.n	8006644 <HAL_DMA_Start_IT+0xa8>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d12f      	bne.n	8006636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fa58 	bl	8006aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	223f      	movs	r2, #63	; 0x3f
 80065f6:	409a      	lsls	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0216 	orr.w	r2, r2, #22
 800660a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0208 	orr.w	r2, r2, #8
 8006622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e005      	b.n	8006642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800663e:	2302      	movs	r3, #2
 8006640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006658:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800665a:	f7ff f90f 	bl	800587c <HAL_GetTick>
 800665e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d008      	beq.n	800667e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2280      	movs	r2, #128	; 0x80
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e052      	b.n	8006724 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0216 	bic.w	r2, r2, #22
 800668c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800669c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <HAL_DMA_Abort+0x62>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0208 	bic.w	r2, r2, #8
 80066bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066ce:	e013      	b.n	80066f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066d0:	f7ff f8d4 	bl	800587c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d90c      	bls.n	80066f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2203      	movs	r2, #3
 80066e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e015      	b.n	8006724 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e4      	bne.n	80066d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670a:	223f      	movs	r2, #63	; 0x3f
 800670c:	409a      	lsls	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d004      	beq.n	800674a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e00c      	b.n	8006764 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2205      	movs	r2, #5
 800674e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800677c:	4b8e      	ldr	r3, [pc, #568]	; (80069b8 <HAL_DMA_IRQHandler+0x248>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a8e      	ldr	r2, [pc, #568]	; (80069bc <HAL_DMA_IRQHandler+0x24c>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	0a9b      	lsrs	r3, r3, #10
 8006788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679a:	2208      	movs	r2, #8
 800679c:	409a      	lsls	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4013      	ands	r3, r2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01a      	beq.n	80067dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d013      	beq.n	80067dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0204 	bic.w	r2, r2, #4
 80067c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c8:	2208      	movs	r2, #8
 80067ca:	409a      	lsls	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	f043 0201 	orr.w	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	2201      	movs	r2, #1
 80067e2:	409a      	lsls	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fe:	2201      	movs	r2, #1
 8006800:	409a      	lsls	r2, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	f043 0202 	orr.w	r2, r3, #2
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006816:	2204      	movs	r2, #4
 8006818:	409a      	lsls	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4013      	ands	r3, r2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006834:	2204      	movs	r2, #4
 8006836:	409a      	lsls	r2, r3
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006840:	f043 0204 	orr.w	r2, r3, #4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	2210      	movs	r2, #16
 800684e:	409a      	lsls	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4013      	ands	r3, r2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d043      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d03c      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686a:	2210      	movs	r2, #16
 800686c:	409a      	lsls	r2, r3
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d018      	beq.n	80068b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d108      	bne.n	80068a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d024      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	e01f      	b.n	80068e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01b      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
 80068b0:	e016      	b.n	80068e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0208 	bic.w	r2, r2, #8
 80068ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e4:	2220      	movs	r2, #32
 80068e6:	409a      	lsls	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 808f 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8087 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	2220      	movs	r2, #32
 8006908:	409a      	lsls	r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b05      	cmp	r3, #5
 8006918:	d136      	bne.n	8006988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0216 	bic.w	r2, r2, #22
 8006928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d103      	bne.n	800694a <HAL_DMA_IRQHandler+0x1da>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0208 	bic.w	r2, r2, #8
 8006958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695e:	223f      	movs	r2, #63	; 0x3f
 8006960:	409a      	lsls	r2, r3
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697a:	2b00      	cmp	r3, #0
 800697c:	d07e      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
        }
        return;
 8006986:	e079      	b.n	8006a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01d      	beq.n	80069d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d031      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
 80069b4:	e02c      	b.n	8006a10 <HAL_DMA_IRQHandler+0x2a0>
 80069b6:	bf00      	nop
 80069b8:	20000008 	.word	0x20000008
 80069bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d023      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
 80069d0:	e01e      	b.n	8006a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10f      	bne.n	8006a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0210 	bic.w	r2, r2, #16
 80069ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d032      	beq.n	8006a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d022      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2205      	movs	r2, #5
 8006a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d307      	bcc.n	8006a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f2      	bne.n	8006a3c <HAL_DMA_IRQHandler+0x2cc>
 8006a56:	e000      	b.n	8006a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	e000      	b.n	8006a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a7c:	bf00      	nop
    }
  }
}
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a92:	b2db      	uxtb	r3, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d108      	bne.n	8006ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ade:	e007      	b.n	8006af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	60da      	str	r2, [r3, #12]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	3b10      	subs	r3, #16
 8006b0c:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <DMA_CalcBaseAndBitshift+0x64>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <DMA_CalcBaseAndBitshift+0x68>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d909      	bls.n	8006b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	1d1a      	adds	r2, r3, #4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8006b3c:	e007      	b.n	8006b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	aaaaaaab 	.word	0xaaaaaaab
 8006b64:	08011498 	.word	0x08011498

08006b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11f      	bne.n	8006bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d856      	bhi.n	8006c36 <DMA_CheckFifoParam+0xce>
 8006b88:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <DMA_CheckFifoParam+0x28>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006bb3 	.word	0x08006bb3
 8006b98:	08006ba1 	.word	0x08006ba1
 8006b9c:	08006c37 	.word	0x08006c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d046      	beq.n	8006c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bb0:	e043      	b.n	8006c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bba:	d140      	bne.n	8006c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bc0:	e03d      	b.n	8006c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bca:	d121      	bne.n	8006c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d837      	bhi.n	8006c42 <DMA_CheckFifoParam+0xda>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <DMA_CheckFifoParam+0x70>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006be9 	.word	0x08006be9
 8006bdc:	08006bef 	.word	0x08006bef
 8006be0:	08006be9 	.word	0x08006be9
 8006be4:	08006c01 	.word	0x08006c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	73fb      	strb	r3, [r7, #15]
      break;
 8006bec:	e030      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d025      	beq.n	8006c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bfe:	e022      	b.n	8006c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c08:	d11f      	bne.n	8006c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c0e:	e01c      	b.n	8006c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d903      	bls.n	8006c1e <DMA_CheckFifoParam+0xb6>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d003      	beq.n	8006c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c1c:	e018      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	73fb      	strb	r3, [r7, #15]
      break;
 8006c22:	e015      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e00b      	b.n	8006c4e <DMA_CheckFifoParam+0xe6>
      break;
 8006c36:	bf00      	nop
 8006c38:	e00a      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e008      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      break;
 8006c3e:	bf00      	nop
 8006c40:	e006      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      break;
 8006c42:	bf00      	nop
 8006c44:	e004      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      break;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <DMA_CheckFifoParam+0xe8>
      break;
 8006c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop

08006c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	e165      	b.n	8006f48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	f040 8154 	bne.w	8006f42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d005      	beq.n	8006cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d130      	bne.n	8006d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ce8:	2201      	movs	r2, #1
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 0201 	and.w	r2, r3, #1
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d017      	beq.n	8006d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	43db      	mvns	r3, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4013      	ands	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d123      	bne.n	8006da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	08da      	lsrs	r2, r3, #3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3208      	adds	r2, #8
 8006d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	220f      	movs	r2, #15
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	08da      	lsrs	r2, r3, #3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3208      	adds	r2, #8
 8006d9e:	69b9      	ldr	r1, [r7, #24]
 8006da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	2203      	movs	r2, #3
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	43db      	mvns	r3, r3
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	4013      	ands	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f003 0203 	and.w	r2, r3, #3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80ae 	beq.w	8006f42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	4b5d      	ldr	r3, [pc, #372]	; (8006f60 <HAL_GPIO_Init+0x300>)
 8006dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dee:	4a5c      	ldr	r2, [pc, #368]	; (8006f60 <HAL_GPIO_Init+0x300>)
 8006df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006df4:	6453      	str	r3, [r2, #68]	; 0x44
 8006df6:	4b5a      	ldr	r3, [pc, #360]	; (8006f60 <HAL_GPIO_Init+0x300>)
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e02:	4a58      	ldr	r2, [pc, #352]	; (8006f64 <HAL_GPIO_Init+0x304>)
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	089b      	lsrs	r3, r3, #2
 8006e08:	3302      	adds	r3, #2
 8006e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	220f      	movs	r2, #15
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	4013      	ands	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a4f      	ldr	r2, [pc, #316]	; (8006f68 <HAL_GPIO_Init+0x308>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d025      	beq.n	8006e7a <HAL_GPIO_Init+0x21a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a4e      	ldr	r2, [pc, #312]	; (8006f6c <HAL_GPIO_Init+0x30c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d01f      	beq.n	8006e76 <HAL_GPIO_Init+0x216>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a4d      	ldr	r2, [pc, #308]	; (8006f70 <HAL_GPIO_Init+0x310>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d019      	beq.n	8006e72 <HAL_GPIO_Init+0x212>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a4c      	ldr	r2, [pc, #304]	; (8006f74 <HAL_GPIO_Init+0x314>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_GPIO_Init+0x20e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a4b      	ldr	r2, [pc, #300]	; (8006f78 <HAL_GPIO_Init+0x318>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00d      	beq.n	8006e6a <HAL_GPIO_Init+0x20a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a4a      	ldr	r2, [pc, #296]	; (8006f7c <HAL_GPIO_Init+0x31c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <HAL_GPIO_Init+0x206>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a49      	ldr	r2, [pc, #292]	; (8006f80 <HAL_GPIO_Init+0x320>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_GPIO_Init+0x202>
 8006e5e:	2306      	movs	r3, #6
 8006e60:	e00c      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e62:	2307      	movs	r3, #7
 8006e64:	e00a      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e66:	2305      	movs	r3, #5
 8006e68:	e008      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	e006      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e004      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e002      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <HAL_GPIO_Init+0x21c>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	f002 0203 	and.w	r2, r2, #3
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	4093      	lsls	r3, r2
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e8c:	4935      	ldr	r1, [pc, #212]	; (8006f64 <HAL_GPIO_Init+0x304>)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	3302      	adds	r3, #2
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e9a:	4b3a      	ldr	r3, [pc, #232]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ebe:	4a31      	ldr	r2, [pc, #196]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ec4:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006eee:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f12:	4a1c      	ldr	r2, [pc, #112]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f18:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f3c:	4a11      	ldr	r2, [pc, #68]	; (8006f84 <HAL_GPIO_Init+0x324>)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3301      	adds	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	f67f ae96 	bls.w	8006c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	3724      	adds	r7, #36	; 0x24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40013800 	.word	0x40013800
 8006f68:	40020000 	.word	0x40020000
 8006f6c:	40020400 	.word	0x40020400
 8006f70:	40020800 	.word	0x40020800
 8006f74:	40020c00 	.word	0x40020c00
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40021400 	.word	0x40021400
 8006f80:	40021800 	.word	0x40021800
 8006f84:	40013c00 	.word	0x40013c00

08006f88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e0c7      	b.n	8007134 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	f040 80b7 	bne.w	800712e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006fc0:	4a62      	ldr	r2, [pc, #392]	; (800714c <HAL_GPIO_DeInit+0x1c4>)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	089b      	lsrs	r3, r3, #2
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fcc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	220f      	movs	r2, #15
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a5a      	ldr	r2, [pc, #360]	; (8007150 <HAL_GPIO_DeInit+0x1c8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d025      	beq.n	8007036 <HAL_GPIO_DeInit+0xae>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a59      	ldr	r2, [pc, #356]	; (8007154 <HAL_GPIO_DeInit+0x1cc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01f      	beq.n	8007032 <HAL_GPIO_DeInit+0xaa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a58      	ldr	r2, [pc, #352]	; (8007158 <HAL_GPIO_DeInit+0x1d0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d019      	beq.n	800702e <HAL_GPIO_DeInit+0xa6>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a57      	ldr	r2, [pc, #348]	; (800715c <HAL_GPIO_DeInit+0x1d4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <HAL_GPIO_DeInit+0xa2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a56      	ldr	r2, [pc, #344]	; (8007160 <HAL_GPIO_DeInit+0x1d8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00d      	beq.n	8007026 <HAL_GPIO_DeInit+0x9e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a55      	ldr	r2, [pc, #340]	; (8007164 <HAL_GPIO_DeInit+0x1dc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d007      	beq.n	8007022 <HAL_GPIO_DeInit+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a54      	ldr	r2, [pc, #336]	; (8007168 <HAL_GPIO_DeInit+0x1e0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d101      	bne.n	800701e <HAL_GPIO_DeInit+0x96>
 800701a:	2306      	movs	r3, #6
 800701c:	e00c      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 800701e:	2307      	movs	r3, #7
 8007020:	e00a      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 8007022:	2305      	movs	r3, #5
 8007024:	e008      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 8007026:	2304      	movs	r3, #4
 8007028:	e006      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 800702a:	2303      	movs	r3, #3
 800702c:	e004      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 800702e:	2302      	movs	r3, #2
 8007030:	e002      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_GPIO_DeInit+0xb0>
 8007036:	2300      	movs	r3, #0
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	f002 0203 	and.w	r2, r2, #3
 800703e:	0092      	lsls	r2, r2, #2
 8007040:	4093      	lsls	r3, r2
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d132      	bne.n	80070ae <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007048:	4b48      	ldr	r3, [pc, #288]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	43db      	mvns	r3, r3
 8007050:	4946      	ldr	r1, [pc, #280]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 8007052:	4013      	ands	r3, r2
 8007054:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007056:	4b45      	ldr	r3, [pc, #276]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	43db      	mvns	r3, r3
 800705e:	4943      	ldr	r1, [pc, #268]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 8007060:	4013      	ands	r3, r2
 8007062:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007064:	4b41      	ldr	r3, [pc, #260]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	43db      	mvns	r3, r3
 800706c:	493f      	ldr	r1, [pc, #252]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 800706e:	4013      	ands	r3, r2
 8007070:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007072:	4b3e      	ldr	r3, [pc, #248]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	43db      	mvns	r3, r3
 800707a:	493c      	ldr	r1, [pc, #240]	; (800716c <HAL_GPIO_DeInit+0x1e4>)
 800707c:	4013      	ands	r3, r2
 800707e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	220f      	movs	r2, #15
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007090:	4a2e      	ldr	r2, [pc, #184]	; (800714c <HAL_GPIO_DeInit+0x1c4>)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	3302      	adds	r3, #2
 8007098:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	43da      	mvns	r2, r3
 80070a0:	482a      	ldr	r0, [pc, #168]	; (800714c <HAL_GPIO_DeInit+0x1c4>)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	089b      	lsrs	r3, r3, #2
 80070a6:	400a      	ands	r2, r1
 80070a8:	3302      	adds	r3, #2
 80070aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	2103      	movs	r1, #3
 80070b8:	fa01 f303 	lsl.w	r3, r1, r3
 80070bc:	43db      	mvns	r3, r3
 80070be:	401a      	ands	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	08da      	lsrs	r2, r3, #3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3208      	adds	r2, #8
 80070cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	220f      	movs	r2, #15
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	08d2      	lsrs	r2, r2, #3
 80070e4:	4019      	ands	r1, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3208      	adds	r2, #8
 80070ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	2103      	movs	r1, #3
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	43db      	mvns	r3, r3
 80070fe:	401a      	ands	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	2101      	movs	r1, #1
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	43db      	mvns	r3, r3
 8007112:	401a      	ands	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	2103      	movs	r1, #3
 8007122:	fa01 f303 	lsl.w	r3, r1, r3
 8007126:	43db      	mvns	r3, r3
 8007128:	401a      	ands	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	3301      	adds	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	f67f af34 	bls.w	8006fa4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40013800 	.word	0x40013800
 8007150:	40020000 	.word	0x40020000
 8007154:	40020400 	.word	0x40020400
 8007158:	40020800 	.word	0x40020800
 800715c:	40020c00 	.word	0x40020c00
 8007160:	40021000 	.word	0x40021000
 8007164:	40021400 	.word	0x40021400
 8007168:	40021800 	.word	0x40021800
 800716c:	40013c00 	.word	0x40013c00

08007170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
 800717c:	4613      	mov	r3, r2
 800717e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007180:	787b      	ldrb	r3, [r7, #1]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007186:	887a      	ldrh	r2, [r7, #2]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800718c:	e003      	b.n	8007196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800718e:	887b      	ldrh	r3, [r7, #2]
 8007190:	041a      	lsls	r2, r3, #16
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	619a      	str	r2, [r3, #24]
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071b4:	887a      	ldrh	r2, [r7, #2]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4013      	ands	r3, r2
 80071ba:	041a      	lsls	r2, r3, #16
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	43d9      	mvns	r1, r3
 80071c0:	887b      	ldrh	r3, [r7, #2]
 80071c2:	400b      	ands	r3, r1
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	619a      	str	r2, [r3, #24]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071e4:	695a      	ldr	r2, [r3, #20]
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071ee:	4a05      	ldr	r2, [pc, #20]	; (8007204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fc ff8a 	bl	8004110 <HAL_GPIO_EXTI_Callback>
  }
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40013c00 	.word	0x40013c00

08007208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e12b      	b.n	8007472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fd fc3a 	bl	8004aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2224      	movs	r2, #36	; 0x24
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800725a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800726a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800726c:	f001 f8fe 	bl	800846c <HAL_RCC_GetPCLK1Freq>
 8007270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4a81      	ldr	r2, [pc, #516]	; (800747c <HAL_I2C_Init+0x274>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d807      	bhi.n	800728c <HAL_I2C_Init+0x84>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a80      	ldr	r2, [pc, #512]	; (8007480 <HAL_I2C_Init+0x278>)
 8007280:	4293      	cmp	r3, r2
 8007282:	bf94      	ite	ls
 8007284:	2301      	movls	r3, #1
 8007286:	2300      	movhi	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e006      	b.n	800729a <HAL_I2C_Init+0x92>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a7d      	ldr	r2, [pc, #500]	; (8007484 <HAL_I2C_Init+0x27c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	bf94      	ite	ls
 8007294:	2301      	movls	r3, #1
 8007296:	2300      	movhi	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e0e7      	b.n	8007472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a78      	ldr	r2, [pc, #480]	; (8007488 <HAL_I2C_Init+0x280>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	0c9b      	lsrs	r3, r3, #18
 80072ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4a6a      	ldr	r2, [pc, #424]	; (800747c <HAL_I2C_Init+0x274>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d802      	bhi.n	80072dc <HAL_I2C_Init+0xd4>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	3301      	adds	r3, #1
 80072da:	e009      	b.n	80072f0 <HAL_I2C_Init+0xe8>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	4a69      	ldr	r2, [pc, #420]	; (800748c <HAL_I2C_Init+0x284>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	099b      	lsrs	r3, r3, #6
 80072ee:	3301      	adds	r3, #1
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	495c      	ldr	r1, [pc, #368]	; (800747c <HAL_I2C_Init+0x274>)
 800730c:	428b      	cmp	r3, r1
 800730e:	d819      	bhi.n	8007344 <HAL_I2C_Init+0x13c>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	1e59      	subs	r1, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	fbb1 f3f3 	udiv	r3, r1, r3
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007324:	400b      	ands	r3, r1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <HAL_I2C_Init+0x138>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1e59      	subs	r1, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	fbb1 f3f3 	udiv	r3, r1, r3
 8007338:	3301      	adds	r3, #1
 800733a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800733e:	e051      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 8007340:	2304      	movs	r3, #4
 8007342:	e04f      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d111      	bne.n	8007370 <HAL_I2C_Init+0x168>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1e58      	subs	r0, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6859      	ldr	r1, [r3, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	440b      	add	r3, r1
 800735a:	fbb0 f3f3 	udiv	r3, r0, r3
 800735e:	3301      	adds	r3, #1
 8007360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	e012      	b.n	8007396 <HAL_I2C_Init+0x18e>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1e58      	subs	r0, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6859      	ldr	r1, [r3, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	0099      	lsls	r1, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	fbb0 f3f3 	udiv	r3, r0, r3
 8007386:	3301      	adds	r3, #1
 8007388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf0c      	ite	eq
 8007390:	2301      	moveq	r3, #1
 8007392:	2300      	movne	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_I2C_Init+0x196>
 800739a:	2301      	movs	r3, #1
 800739c:	e022      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10e      	bne.n	80073c4 <HAL_I2C_Init+0x1bc>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1e58      	subs	r0, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6859      	ldr	r1, [r3, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	440b      	add	r3, r1
 80073b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80073b8:	3301      	adds	r3, #1
 80073ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c2:	e00f      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	1e58      	subs	r0, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6859      	ldr	r1, [r3, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	0099      	lsls	r1, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073da:	3301      	adds	r3, #1
 80073dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	6809      	ldr	r1, [r1, #0]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69da      	ldr	r2, [r3, #28]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6911      	ldr	r1, [r2, #16]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	68d2      	ldr	r2, [r2, #12]
 800741e:	4311      	orrs	r1, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	430b      	orrs	r3, r1
 8007426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	000186a0 	.word	0x000186a0
 8007480:	001e847f 	.word	0x001e847f
 8007484:	003d08ff 	.word	0x003d08ff
 8007488:	431bde83 	.word	0x431bde83
 800748c:	10624dd3 	.word	0x10624dd3

08007490 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e021      	b.n	80074e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2224      	movs	r2, #36	; 0x24
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fd fb94 	bl	8004be8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	817b      	strh	r3, [r7, #10]
 8007502:	460b      	mov	r3, r1
 8007504:	813b      	strh	r3, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800750a:	f7fe f9b7 	bl	800587c <HAL_GetTick>
 800750e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b20      	cmp	r3, #32
 800751a:	f040 80d9 	bne.w	80076d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	2319      	movs	r3, #25
 8007524:	2201      	movs	r2, #1
 8007526:	496d      	ldr	r1, [pc, #436]	; (80076dc <HAL_I2C_Mem_Write+0x1ec>)
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fc7f 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007534:	2302      	movs	r3, #2
 8007536:	e0cc      	b.n	80076d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_I2C_Mem_Write+0x56>
 8007542:	2302      	movs	r3, #2
 8007544:	e0c5      	b.n	80076d2 <HAL_I2C_Mem_Write+0x1e2>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b01      	cmp	r3, #1
 800755a:	d007      	beq.n	800756c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800757a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2221      	movs	r2, #33	; 0x21
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2240      	movs	r2, #64	; 0x40
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800759c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a4d      	ldr	r2, [pc, #308]	; (80076e0 <HAL_I2C_Mem_Write+0x1f0>)
 80075ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075ae:	88f8      	ldrh	r0, [r7, #6]
 80075b0:	893a      	ldrh	r2, [r7, #8]
 80075b2:	8979      	ldrh	r1, [r7, #10]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4603      	mov	r3, r0
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 fab6 	bl	8007b30 <I2C_RequestMemoryWrite>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d052      	beq.n	8007670 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e081      	b.n	80076d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fd00 	bl	8007fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d107      	bne.n	80075f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e06b      	b.n	80076d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b04      	cmp	r3, #4
 8007636:	d11b      	bne.n	8007670 <HAL_I2C_Mem_Write+0x180>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d017      	beq.n	8007670 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1aa      	bne.n	80075ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fcec 	bl	800805a <I2C_WaitOnBTFFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00d      	beq.n	80076a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	2b04      	cmp	r3, #4
 800768e:	d107      	bne.n	80076a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e016      	b.n	80076d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	00100002 	.word	0x00100002
 80076e0:	ffff0000 	.word	0xffff0000

080076e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08c      	sub	sp, #48	; 0x30
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	4608      	mov	r0, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	461a      	mov	r2, r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	817b      	strh	r3, [r7, #10]
 80076f6:	460b      	mov	r3, r1
 80076f8:	813b      	strh	r3, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076fe:	f7fe f8bd 	bl	800587c <HAL_GetTick>
 8007702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b20      	cmp	r3, #32
 800770e:	f040 8208 	bne.w	8007b22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	2319      	movs	r3, #25
 8007718:	2201      	movs	r2, #1
 800771a:	497b      	ldr	r1, [pc, #492]	; (8007908 <HAL_I2C_Mem_Read+0x224>)
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fb85 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007728:	2302      	movs	r3, #2
 800772a:	e1fb      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <HAL_I2C_Mem_Read+0x56>
 8007736:	2302      	movs	r3, #2
 8007738:	e1f4      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d007      	beq.n	8007760 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800776e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2222      	movs	r2, #34	; 0x22
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2240      	movs	r2, #64	; 0x40
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4a5b      	ldr	r2, [pc, #364]	; (800790c <HAL_I2C_Mem_Read+0x228>)
 80077a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077a2:	88f8      	ldrh	r0, [r7, #6]
 80077a4:	893a      	ldrh	r2, [r7, #8]
 80077a6:	8979      	ldrh	r1, [r7, #10]
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fa52 	bl	8007c5c <I2C_RequestMemoryRead>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e1b0      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d113      	bne.n	80077f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e184      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d11b      	bne.n	8007832 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e164      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007836:	2b02      	cmp	r3, #2
 8007838:	d11b      	bne.n	8007872 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	e144      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007888:	e138      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788e:	2b03      	cmp	r3, #3
 8007890:	f200 80f1 	bhi.w	8007a76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007898:	2b01      	cmp	r3, #1
 800789a:	d123      	bne.n	80078e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800789c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fc1b 	bl	80080dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e139      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078e2:	e10b      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d14e      	bne.n	800798a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2200      	movs	r2, #0
 80078f4:	4906      	ldr	r1, [pc, #24]	; (8007910 <HAL_I2C_Mem_Read+0x22c>)
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fa98 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e10e      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
 8007906:	bf00      	nop
 8007908:	00100002 	.word	0x00100002
 800790c:	ffff0000 	.word	0xffff0000
 8007910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	b2d2      	uxtb	r2, r2
 8007962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007988:	e0b8      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	2200      	movs	r2, #0
 8007992:	4966      	ldr	r1, [pc, #408]	; (8007b2c <HAL_I2C_Mem_Read+0x448>)
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fa49 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0bf      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	2200      	movs	r2, #0
 80079ee:	494f      	ldr	r1, [pc, #316]	; (8007b2c <HAL_I2C_Mem_Read+0x448>)
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fa1b 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e091      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a74:	e042      	b.n	8007afc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fb2e 	bl	80080dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e04c      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	b2d2      	uxtb	r2, r2
 8007a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d118      	bne.n	8007afc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f aec2 	bne.w	800788a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e000      	b.n	8007b24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3728      	adds	r7, #40	; 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	00010004 	.word	0x00010004

08007b30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	817b      	strh	r3, [r7, #10]
 8007b42:	460b      	mov	r3, r1
 8007b44:	813b      	strh	r3, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f960 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00d      	beq.n	8007b8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b80:	d103      	bne.n	8007b8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e05f      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	6a3a      	ldr	r2, [r7, #32]
 8007ba2:	492d      	ldr	r1, [pc, #180]	; (8007c58 <I2C_RequestMemoryWrite+0x128>)
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f998 	bl	8007eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e04c      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bcc:	6a39      	ldr	r1, [r7, #32]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fa02 	bl	8007fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d107      	bne.n	8007bf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e02b      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d105      	bne.n	8007c08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	611a      	str	r2, [r3, #16]
 8007c06:	e021      	b.n	8007c4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c08:	893b      	ldrh	r3, [r7, #8]
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c18:	6a39      	ldr	r1, [r7, #32]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f9dc 	bl	8007fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d107      	bne.n	8007c3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e005      	b.n	8007c4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c42:	893b      	ldrh	r3, [r7, #8]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	00010002 	.word	0x00010002

08007c5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	817b      	strh	r3, [r7, #10]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	813b      	strh	r3, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f8c2 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbc:	d103      	bne.n	8007cc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e0aa      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cca:	897b      	ldrh	r3, [r7, #10]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	4952      	ldr	r1, [pc, #328]	; (8007e28 <I2C_RequestMemoryRead+0x1cc>)
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f8fa 	bl	8007eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e097      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d08:	6a39      	ldr	r1, [r7, #32]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f964 	bl	8007fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d107      	bne.n	8007d2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e076      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d105      	bne.n	8007d44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d38:	893b      	ldrh	r3, [r7, #8]
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	611a      	str	r2, [r3, #16]
 8007d42:	e021      	b.n	8007d88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d44:	893b      	ldrh	r3, [r7, #8]
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d54:	6a39      	ldr	r1, [r7, #32]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f93e 	bl	8007fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d107      	bne.n	8007d7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e050      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	6a39      	ldr	r1, [r7, #32]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f923 	bl	8007fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d107      	bne.n	8007db0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e035      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f82b 	bl	8007e2c <I2C_WaitOnFlagUntilTimeout>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00d      	beq.n	8007df8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dea:	d103      	bne.n	8007df4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e013      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007df8:	897b      	ldrh	r3, [r7, #10]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	6a3a      	ldr	r2, [r7, #32]
 8007e0c:	4906      	ldr	r1, [pc, #24]	; (8007e28 <I2C_RequestMemoryRead+0x1cc>)
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f863 	bl	8007eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	00010002 	.word	0x00010002

08007e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e3c:	e025      	b.n	8007e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d021      	beq.n	8007e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e46:	f7fd fd19 	bl	800587c <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d302      	bcc.n	8007e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d116      	bne.n	8007e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f043 0220 	orr.w	r2, r3, #32
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e023      	b.n	8007ed2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d10d      	bne.n	8007eb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	43da      	mvns	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2301      	moveq	r3, #1
 8007ea8:	2300      	movne	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	e00c      	b.n	8007eca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	43da      	mvns	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bf0c      	ite	eq
 8007ec2:	2301      	moveq	r3, #1
 8007ec4:	2300      	movne	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d0b6      	beq.n	8007e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ee8:	e051      	b.n	8007f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef8:	d123      	bne.n	8007f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	f043 0204 	orr.w	r2, r3, #4
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e046      	b.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f48:	d021      	beq.n	8007f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f4a:	f7fd fc97 	bl	800587c <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d302      	bcc.n	8007f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d116      	bne.n	8007f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	f043 0220 	orr.w	r2, r3, #32
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e020      	b.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d10c      	bne.n	8007fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	43da      	mvns	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bf14      	ite	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	2300      	moveq	r3, #0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	e00b      	b.n	8007fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	43da      	mvns	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d18d      	bne.n	8007eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fe4:	e02d      	b.n	8008042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f8ce 	bl	8008188 <I2C_IsAcknowledgeFailed>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e02d      	b.n	8008052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d021      	beq.n	8008042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ffe:	f7fd fc3d 	bl	800587c <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	d302      	bcc.n	8008014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d116      	bne.n	8008042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	f043 0220 	orr.w	r2, r3, #32
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e007      	b.n	8008052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d1ca      	bne.n	8007fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008066:	e02d      	b.n	80080c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f88d 	bl	8008188 <I2C_IsAcknowledgeFailed>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e02d      	b.n	80080d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d021      	beq.n	80080c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008080:	f7fd fbfc 	bl	800587c <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	429a      	cmp	r2, r3
 800808e:	d302      	bcc.n	8008096 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d116      	bne.n	80080c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	f043 0220 	orr.w	r2, r3, #32
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e007      	b.n	80080d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d1ca      	bne.n	8008068 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080e8:	e042      	b.n	8008170 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b10      	cmp	r3, #16
 80080f6:	d119      	bne.n	800812c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0210 	mvn.w	r2, #16
 8008100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e029      	b.n	8008180 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812c:	f7fd fba6 	bl	800587c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	429a      	cmp	r2, r3
 800813a:	d302      	bcc.n	8008142 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d116      	bne.n	8008170 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e007      	b.n	8008180 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d1b5      	bne.n	80080ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800819a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819e:	d11b      	bne.n	80081d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	f043 0204 	orr.w	r2, r3, #4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80081f2:	2300      	movs	r3, #0
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <HAL_PWREx_EnableOverDrive+0x90>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <HAL_PWREx_EnableOverDrive+0x90>)
 80081fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008200:	6413      	str	r3, [r2, #64]	; 0x40
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <HAL_PWREx_EnableOverDrive+0x90>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800820e:	4b1b      	ldr	r3, [pc, #108]	; (800827c <HAL_PWREx_EnableOverDrive+0x94>)
 8008210:	2201      	movs	r2, #1
 8008212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008214:	f7fd fb32 	bl	800587c <HAL_GetTick>
 8008218:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800821a:	e009      	b.n	8008230 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800821c:	f7fd fb2e 	bl	800587c <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800822a:	d901      	bls.n	8008230 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e01f      	b.n	8008270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008230:	4b13      	ldr	r3, [pc, #76]	; (8008280 <HAL_PWREx_EnableOverDrive+0x98>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823c:	d1ee      	bne.n	800821c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800823e:	4b11      	ldr	r3, [pc, #68]	; (8008284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008244:	f7fd fb1a 	bl	800587c <HAL_GetTick>
 8008248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800824a:	e009      	b.n	8008260 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800824c:	f7fd fb16 	bl	800587c <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800825a:	d901      	bls.n	8008260 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e007      	b.n	8008270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <HAL_PWREx_EnableOverDrive+0x98>)
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800826c:	d1ee      	bne.n	800824c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40023800 	.word	0x40023800
 800827c:	420e0040 	.word	0x420e0040
 8008280:	40007000 	.word	0x40007000
 8008284:	420e0044 	.word	0x420e0044

08008288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e0cc      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800829c:	4b68      	ldr	r3, [pc, #416]	; (8008440 <HAL_RCC_ClockConfig+0x1b8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d90c      	bls.n	80082c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082aa:	4b65      	ldr	r3, [pc, #404]	; (8008440 <HAL_RCC_ClockConfig+0x1b8>)
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b2:	4b63      	ldr	r3, [pc, #396]	; (8008440 <HAL_RCC_ClockConfig+0x1b8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d001      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e0b8      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d020      	beq.n	8008312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082dc:	4b59      	ldr	r3, [pc, #356]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4a58      	ldr	r2, [pc, #352]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082f4:	4b53      	ldr	r3, [pc, #332]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	4a52      	ldr	r2, [pc, #328]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008300:	4b50      	ldr	r3, [pc, #320]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	494d      	ldr	r1, [pc, #308]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	4313      	orrs	r3, r2
 8008310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d044      	beq.n	80083a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008326:	4b47      	ldr	r3, [pc, #284]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d119      	bne.n	8008366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e07f      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d003      	beq.n	8008346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008342:	2b03      	cmp	r3, #3
 8008344:	d107      	bne.n	8008356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008346:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e06f      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008356:	4b3b      	ldr	r3, [pc, #236]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e067      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008366:	4b37      	ldr	r3, [pc, #220]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f023 0203 	bic.w	r2, r3, #3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	4934      	ldr	r1, [pc, #208]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008374:	4313      	orrs	r3, r2
 8008376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008378:	f7fd fa80 	bl	800587c <HAL_GetTick>
 800837c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837e:	e00a      	b.n	8008396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008380:	f7fd fa7c 	bl	800587c <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	f241 3288 	movw	r2, #5000	; 0x1388
 800838e:	4293      	cmp	r3, r2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e04f      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008396:	4b2b      	ldr	r3, [pc, #172]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 020c 	and.w	r2, r3, #12
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d1eb      	bne.n	8008380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083a8:	4b25      	ldr	r3, [pc, #148]	; (8008440 <HAL_RCC_ClockConfig+0x1b8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d20c      	bcs.n	80083d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b6:	4b22      	ldr	r3, [pc, #136]	; (8008440 <HAL_RCC_ClockConfig+0x1b8>)
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083be:	4b20      	ldr	r3, [pc, #128]	; (8008440 <HAL_RCC_ClockConfig+0x1b8>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d001      	beq.n	80083d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e032      	b.n	8008436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d008      	beq.n	80083ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083dc:	4b19      	ldr	r3, [pc, #100]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4916      	ldr	r1, [pc, #88]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083fa:	4b12      	ldr	r3, [pc, #72]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	490e      	ldr	r1, [pc, #56]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 800840a:	4313      	orrs	r3, r2
 800840c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800840e:	f000 f855 	bl	80084bc <HAL_RCC_GetSysClockFreq>
 8008412:	4602      	mov	r2, r0
 8008414:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	490a      	ldr	r1, [pc, #40]	; (8008448 <HAL_RCC_ClockConfig+0x1c0>)
 8008420:	5ccb      	ldrb	r3, [r1, r3]
 8008422:	fa22 f303 	lsr.w	r3, r2, r3
 8008426:	4a09      	ldr	r2, [pc, #36]	; (800844c <HAL_RCC_ClockConfig+0x1c4>)
 8008428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <HAL_RCC_ClockConfig+0x1c8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f7fd f9e0 	bl	80057f4 <HAL_InitTick>

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40023c00 	.word	0x40023c00
 8008444:	40023800 	.word	0x40023800
 8008448:	08011480 	.word	0x08011480
 800844c:	20000008 	.word	0x20000008
 8008450:	2000000c 	.word	0x2000000c

08008454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <HAL_RCC_GetHCLKFreq+0x14>)
 800845a:	681b      	ldr	r3, [r3, #0]
}
 800845c:	4618      	mov	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	20000008 	.word	0x20000008

0800846c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008470:	f7ff fff0 	bl	8008454 <HAL_RCC_GetHCLKFreq>
 8008474:	4602      	mov	r2, r0
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	0a9b      	lsrs	r3, r3, #10
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	4903      	ldr	r1, [pc, #12]	; (8008490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008482:	5ccb      	ldrb	r3, [r1, r3]
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008488:	4618      	mov	r0, r3
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40023800 	.word	0x40023800
 8008490:	08011490 	.word	0x08011490

08008494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008498:	f7ff ffdc 	bl	8008454 <HAL_RCC_GetHCLKFreq>
 800849c:	4602      	mov	r2, r0
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	0b5b      	lsrs	r3, r3, #13
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	4903      	ldr	r1, [pc, #12]	; (80084b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084aa:	5ccb      	ldrb	r3, [r1, r3]
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40023800 	.word	0x40023800
 80084b8:	08011490 	.word	0x08011490

080084bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c0:	b0ae      	sub	sp, #184	; 0xb8
 80084c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084e2:	4bcb      	ldr	r3, [pc, #812]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b0c      	cmp	r3, #12
 80084ec:	f200 8206 	bhi.w	80088fc <HAL_RCC_GetSysClockFreq+0x440>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	0800852d 	.word	0x0800852d
 80084fc:	080088fd 	.word	0x080088fd
 8008500:	080088fd 	.word	0x080088fd
 8008504:	080088fd 	.word	0x080088fd
 8008508:	08008535 	.word	0x08008535
 800850c:	080088fd 	.word	0x080088fd
 8008510:	080088fd 	.word	0x080088fd
 8008514:	080088fd 	.word	0x080088fd
 8008518:	0800853d 	.word	0x0800853d
 800851c:	080088fd 	.word	0x080088fd
 8008520:	080088fd 	.word	0x080088fd
 8008524:	080088fd 	.word	0x080088fd
 8008528:	0800872d 	.word	0x0800872d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800852c:	4bb9      	ldr	r3, [pc, #740]	; (8008814 <HAL_RCC_GetSysClockFreq+0x358>)
 800852e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008532:	e1e7      	b.n	8008904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008534:	4bb8      	ldr	r3, [pc, #736]	; (8008818 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800853a:	e1e3      	b.n	8008904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800853c:	4bb4      	ldr	r3, [pc, #720]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008548:	4bb1      	ldr	r3, [pc, #708]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d071      	beq.n	8008638 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008554:	4bae      	ldr	r3, [pc, #696]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	099b      	lsrs	r3, r3, #6
 800855a:	2200      	movs	r2, #0
 800855c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008560:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008570:	2300      	movs	r3, #0
 8008572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800857a:	4622      	mov	r2, r4
 800857c:	462b      	mov	r3, r5
 800857e:	f04f 0000 	mov.w	r0, #0
 8008582:	f04f 0100 	mov.w	r1, #0
 8008586:	0159      	lsls	r1, r3, #5
 8008588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800858c:	0150      	lsls	r0, r2, #5
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4621      	mov	r1, r4
 8008594:	1a51      	subs	r1, r2, r1
 8008596:	6439      	str	r1, [r7, #64]	; 0x40
 8008598:	4629      	mov	r1, r5
 800859a:	eb63 0301 	sbc.w	r3, r3, r1
 800859e:	647b      	str	r3, [r7, #68]	; 0x44
 80085a0:	f04f 0200 	mov.w	r2, #0
 80085a4:	f04f 0300 	mov.w	r3, #0
 80085a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80085ac:	4649      	mov	r1, r9
 80085ae:	018b      	lsls	r3, r1, #6
 80085b0:	4641      	mov	r1, r8
 80085b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085b6:	4641      	mov	r1, r8
 80085b8:	018a      	lsls	r2, r1, #6
 80085ba:	4641      	mov	r1, r8
 80085bc:	1a51      	subs	r1, r2, r1
 80085be:	63b9      	str	r1, [r7, #56]	; 0x38
 80085c0:	4649      	mov	r1, r9
 80085c2:	eb63 0301 	sbc.w	r3, r3, r1
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80085d4:	4649      	mov	r1, r9
 80085d6:	00cb      	lsls	r3, r1, #3
 80085d8:	4641      	mov	r1, r8
 80085da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085de:	4641      	mov	r1, r8
 80085e0:	00ca      	lsls	r2, r1, #3
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	4622      	mov	r2, r4
 80085ea:	189b      	adds	r3, r3, r2
 80085ec:	633b      	str	r3, [r7, #48]	; 0x30
 80085ee:	462b      	mov	r3, r5
 80085f0:	460a      	mov	r2, r1
 80085f2:	eb42 0303 	adc.w	r3, r2, r3
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008604:	4629      	mov	r1, r5
 8008606:	024b      	lsls	r3, r1, #9
 8008608:	4621      	mov	r1, r4
 800860a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800860e:	4621      	mov	r1, r4
 8008610:	024a      	lsls	r2, r1, #9
 8008612:	4610      	mov	r0, r2
 8008614:	4619      	mov	r1, r3
 8008616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008624:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008628:	f7f8 fcac 	bl	8000f84 <__aeabi_uldivmod>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4613      	mov	r3, r2
 8008632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008636:	e067      	b.n	8008708 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008638:	4b75      	ldr	r3, [pc, #468]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	099b      	lsrs	r3, r3, #6
 800863e:	2200      	movs	r2, #0
 8008640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008644:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800864c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008650:	67bb      	str	r3, [r7, #120]	; 0x78
 8008652:	2300      	movs	r3, #0
 8008654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008656:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800865a:	4622      	mov	r2, r4
 800865c:	462b      	mov	r3, r5
 800865e:	f04f 0000 	mov.w	r0, #0
 8008662:	f04f 0100 	mov.w	r1, #0
 8008666:	0159      	lsls	r1, r3, #5
 8008668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800866c:	0150      	lsls	r0, r2, #5
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4621      	mov	r1, r4
 8008674:	1a51      	subs	r1, r2, r1
 8008676:	62b9      	str	r1, [r7, #40]	; 0x28
 8008678:	4629      	mov	r1, r5
 800867a:	eb63 0301 	sbc.w	r3, r3, r1
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800868c:	4649      	mov	r1, r9
 800868e:	018b      	lsls	r3, r1, #6
 8008690:	4641      	mov	r1, r8
 8008692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008696:	4641      	mov	r1, r8
 8008698:	018a      	lsls	r2, r1, #6
 800869a:	4641      	mov	r1, r8
 800869c:	ebb2 0a01 	subs.w	sl, r2, r1
 80086a0:	4649      	mov	r1, r9
 80086a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	f04f 0300 	mov.w	r3, #0
 80086ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ba:	4692      	mov	sl, r2
 80086bc:	469b      	mov	fp, r3
 80086be:	4623      	mov	r3, r4
 80086c0:	eb1a 0303 	adds.w	r3, sl, r3
 80086c4:	623b      	str	r3, [r7, #32]
 80086c6:	462b      	mov	r3, r5
 80086c8:	eb4b 0303 	adc.w	r3, fp, r3
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80086da:	4629      	mov	r1, r5
 80086dc:	028b      	lsls	r3, r1, #10
 80086de:	4621      	mov	r1, r4
 80086e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086e4:	4621      	mov	r1, r4
 80086e6:	028a      	lsls	r2, r1, #10
 80086e8:	4610      	mov	r0, r2
 80086ea:	4619      	mov	r1, r3
 80086ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f0:	2200      	movs	r2, #0
 80086f2:	673b      	str	r3, [r7, #112]	; 0x70
 80086f4:	677a      	str	r2, [r7, #116]	; 0x74
 80086f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80086fa:	f7f8 fc43 	bl	8000f84 <__aeabi_uldivmod>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4613      	mov	r3, r2
 8008704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008708:	4b41      	ldr	r3, [pc, #260]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	0c1b      	lsrs	r3, r3, #16
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	3301      	adds	r3, #1
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800871a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800871e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800872a:	e0eb      	b.n	8008904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800872c:	4b38      	ldr	r3, [pc, #224]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008738:	4b35      	ldr	r3, [pc, #212]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d06b      	beq.n	800881c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008744:	4b32      	ldr	r3, [pc, #200]	; (8008810 <HAL_RCC_GetSysClockFreq+0x354>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	099b      	lsrs	r3, r3, #6
 800874a:	2200      	movs	r2, #0
 800874c:	66bb      	str	r3, [r7, #104]	; 0x68
 800874e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008756:	663b      	str	r3, [r7, #96]	; 0x60
 8008758:	2300      	movs	r3, #0
 800875a:	667b      	str	r3, [r7, #100]	; 0x64
 800875c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	f04f 0100 	mov.w	r1, #0
 800876c:	0159      	lsls	r1, r3, #5
 800876e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008772:	0150      	lsls	r0, r2, #5
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4621      	mov	r1, r4
 800877a:	1a51      	subs	r1, r2, r1
 800877c:	61b9      	str	r1, [r7, #24]
 800877e:	4629      	mov	r1, r5
 8008780:	eb63 0301 	sbc.w	r3, r3, r1
 8008784:	61fb      	str	r3, [r7, #28]
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008792:	4659      	mov	r1, fp
 8008794:	018b      	lsls	r3, r1, #6
 8008796:	4651      	mov	r1, sl
 8008798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800879c:	4651      	mov	r1, sl
 800879e:	018a      	lsls	r2, r1, #6
 80087a0:	4651      	mov	r1, sl
 80087a2:	ebb2 0801 	subs.w	r8, r2, r1
 80087a6:	4659      	mov	r1, fp
 80087a8:	eb63 0901 	sbc.w	r9, r3, r1
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087c0:	4690      	mov	r8, r2
 80087c2:	4699      	mov	r9, r3
 80087c4:	4623      	mov	r3, r4
 80087c6:	eb18 0303 	adds.w	r3, r8, r3
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	462b      	mov	r3, r5
 80087ce:	eb49 0303 	adc.w	r3, r9, r3
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	f04f 0300 	mov.w	r3, #0
 80087dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80087e0:	4629      	mov	r1, r5
 80087e2:	024b      	lsls	r3, r1, #9
 80087e4:	4621      	mov	r1, r4
 80087e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087ea:	4621      	mov	r1, r4
 80087ec:	024a      	lsls	r2, r1, #9
 80087ee:	4610      	mov	r0, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087f6:	2200      	movs	r2, #0
 80087f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80087fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80087fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008800:	f7f8 fbc0 	bl	8000f84 <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4613      	mov	r3, r2
 800880a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800880e:	e065      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0x420>
 8008810:	40023800 	.word	0x40023800
 8008814:	00f42400 	.word	0x00f42400
 8008818:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800881c:	4b3d      	ldr	r3, [pc, #244]	; (8008914 <HAL_RCC_GetSysClockFreq+0x458>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	099b      	lsrs	r3, r3, #6
 8008822:	2200      	movs	r2, #0
 8008824:	4618      	mov	r0, r3
 8008826:	4611      	mov	r1, r2
 8008828:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800882c:	653b      	str	r3, [r7, #80]	; 0x50
 800882e:	2300      	movs	r3, #0
 8008830:	657b      	str	r3, [r7, #84]	; 0x54
 8008832:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008836:	4642      	mov	r2, r8
 8008838:	464b      	mov	r3, r9
 800883a:	f04f 0000 	mov.w	r0, #0
 800883e:	f04f 0100 	mov.w	r1, #0
 8008842:	0159      	lsls	r1, r3, #5
 8008844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008848:	0150      	lsls	r0, r2, #5
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4641      	mov	r1, r8
 8008850:	1a51      	subs	r1, r2, r1
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	4649      	mov	r1, r9
 8008856:	eb63 0301 	sbc.w	r3, r3, r1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008868:	4659      	mov	r1, fp
 800886a:	018b      	lsls	r3, r1, #6
 800886c:	4651      	mov	r1, sl
 800886e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008872:	4651      	mov	r1, sl
 8008874:	018a      	lsls	r2, r1, #6
 8008876:	4651      	mov	r1, sl
 8008878:	1a54      	subs	r4, r2, r1
 800887a:	4659      	mov	r1, fp
 800887c:	eb63 0501 	sbc.w	r5, r3, r1
 8008880:	f04f 0200 	mov.w	r2, #0
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	00eb      	lsls	r3, r5, #3
 800888a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800888e:	00e2      	lsls	r2, r4, #3
 8008890:	4614      	mov	r4, r2
 8008892:	461d      	mov	r5, r3
 8008894:	4643      	mov	r3, r8
 8008896:	18e3      	adds	r3, r4, r3
 8008898:	603b      	str	r3, [r7, #0]
 800889a:	464b      	mov	r3, r9
 800889c:	eb45 0303 	adc.w	r3, r5, r3
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	f04f 0200 	mov.w	r2, #0
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088ae:	4629      	mov	r1, r5
 80088b0:	028b      	lsls	r3, r1, #10
 80088b2:	4621      	mov	r1, r4
 80088b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088b8:	4621      	mov	r1, r4
 80088ba:	028a      	lsls	r2, r1, #10
 80088bc:	4610      	mov	r0, r2
 80088be:	4619      	mov	r1, r3
 80088c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088c4:	2200      	movs	r2, #0
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80088ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088ce:	f7f8 fb59 	bl	8000f84 <__aeabi_uldivmod>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4613      	mov	r3, r2
 80088d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <HAL_RCC_GetSysClockFreq+0x458>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	0f1b      	lsrs	r3, r3, #28
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80088ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80088fa:	e003      	b.n	8008904 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <HAL_RCC_GetSysClockFreq+0x45c>)
 80088fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008908:	4618      	mov	r0, r3
 800890a:	37b8      	adds	r7, #184	; 0xb8
 800890c:	46bd      	mov	sp, r7
 800890e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008912:	bf00      	nop
 8008914:	40023800 	.word	0x40023800
 8008918:	00f42400 	.word	0x00f42400

0800891c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e28d      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8083 	beq.w	8008a42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800893c:	4b94      	ldr	r3, [pc, #592]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f003 030c 	and.w	r3, r3, #12
 8008944:	2b04      	cmp	r3, #4
 8008946:	d019      	beq.n	800897c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008948:	4b91      	ldr	r3, [pc, #580]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008950:	2b08      	cmp	r3, #8
 8008952:	d106      	bne.n	8008962 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008954:	4b8e      	ldr	r3, [pc, #568]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800895c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008960:	d00c      	beq.n	800897c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008962:	4b8b      	ldr	r3, [pc, #556]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800896a:	2b0c      	cmp	r3, #12
 800896c:	d112      	bne.n	8008994 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800896e:	4b88      	ldr	r3, [pc, #544]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800897a:	d10b      	bne.n	8008994 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800897c:	4b84      	ldr	r3, [pc, #528]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d05b      	beq.n	8008a40 <HAL_RCC_OscConfig+0x124>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d157      	bne.n	8008a40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e25a      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d106      	bne.n	80089ac <HAL_RCC_OscConfig+0x90>
 800899e:	4b7c      	ldr	r3, [pc, #496]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a7b      	ldr	r2, [pc, #492]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e01d      	b.n	80089e8 <HAL_RCC_OscConfig+0xcc>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089b4:	d10c      	bne.n	80089d0 <HAL_RCC_OscConfig+0xb4>
 80089b6:	4b76      	ldr	r3, [pc, #472]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a75      	ldr	r2, [pc, #468]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	4b73      	ldr	r3, [pc, #460]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a72      	ldr	r2, [pc, #456]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	e00b      	b.n	80089e8 <HAL_RCC_OscConfig+0xcc>
 80089d0:	4b6f      	ldr	r3, [pc, #444]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a6e      	ldr	r2, [pc, #440]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	4b6c      	ldr	r3, [pc, #432]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a6b      	ldr	r2, [pc, #428]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 80089e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d013      	beq.n	8008a18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f0:	f7fc ff44 	bl	800587c <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089f8:	f7fc ff40 	bl	800587c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b64      	cmp	r3, #100	; 0x64
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e21f      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a0a:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0f0      	beq.n	80089f8 <HAL_RCC_OscConfig+0xdc>
 8008a16:	e014      	b.n	8008a42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a18:	f7fc ff30 	bl	800587c <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a20:	f7fc ff2c 	bl	800587c <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b64      	cmp	r3, #100	; 0x64
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e20b      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a32:	4b57      	ldr	r3, [pc, #348]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f0      	bne.n	8008a20 <HAL_RCC_OscConfig+0x104>
 8008a3e:	e000      	b.n	8008a42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d06f      	beq.n	8008b2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a4e:	4b50      	ldr	r3, [pc, #320]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 030c 	and.w	r3, r3, #12
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d017      	beq.n	8008a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a5a:	4b4d      	ldr	r3, [pc, #308]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d105      	bne.n	8008a72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a66:	4b4a      	ldr	r3, [pc, #296]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00b      	beq.n	8008a8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a72:	4b47      	ldr	r3, [pc, #284]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a7a:	2b0c      	cmp	r3, #12
 8008a7c:	d11c      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a7e:	4b44      	ldr	r3, [pc, #272]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d116      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a8a:	4b41      	ldr	r3, [pc, #260]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d005      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x186>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d001      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e1d3      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa2:	4b3b      	ldr	r3, [pc, #236]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	4937      	ldr	r1, [pc, #220]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ab6:	e03a      	b.n	8008b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d020      	beq.n	8008b02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ac0:	4b34      	ldr	r3, [pc, #208]	; (8008b94 <HAL_RCC_OscConfig+0x278>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac6:	f7fc fed9 	bl	800587c <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ace:	f7fc fed5 	bl	800587c <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e1b4      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ae0:	4b2b      	ldr	r3, [pc, #172]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0f0      	beq.n	8008ace <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aec:	4b28      	ldr	r3, [pc, #160]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	4925      	ldr	r1, [pc, #148]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	600b      	str	r3, [r1, #0]
 8008b00:	e015      	b.n	8008b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b02:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <HAL_RCC_OscConfig+0x278>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b08:	f7fc feb8 	bl	800587c <HAL_GetTick>
 8008b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b10:	f7fc feb4 	bl	800587c <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e193      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b22:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1f0      	bne.n	8008b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0308 	and.w	r3, r3, #8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d036      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d016      	beq.n	8008b70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <HAL_RCC_OscConfig+0x27c>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b48:	f7fc fe98 	bl	800587c <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b50:	f7fc fe94 	bl	800587c <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e173      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b62:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <HAL_RCC_OscConfig+0x274>)
 8008b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f0      	beq.n	8008b50 <HAL_RCC_OscConfig+0x234>
 8008b6e:	e01b      	b.n	8008ba8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <HAL_RCC_OscConfig+0x27c>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b76:	f7fc fe81 	bl	800587c <HAL_GetTick>
 8008b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b7c:	e00e      	b.n	8008b9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b7e:	f7fc fe7d 	bl	800587c <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d907      	bls.n	8008b9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e15c      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
 8008b90:	40023800 	.word	0x40023800
 8008b94:	42470000 	.word	0x42470000
 8008b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b9c:	4b8a      	ldr	r3, [pc, #552]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1ea      	bne.n	8008b7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 8097 	beq.w	8008ce4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bba:	4b83      	ldr	r3, [pc, #524]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10f      	bne.n	8008be6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60bb      	str	r3, [r7, #8]
 8008bca:	4b7f      	ldr	r3, [pc, #508]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	4a7e      	ldr	r2, [pc, #504]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8008bd6:	4b7c      	ldr	r3, [pc, #496]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bde:	60bb      	str	r3, [r7, #8]
 8008be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008be2:	2301      	movs	r3, #1
 8008be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008be6:	4b79      	ldr	r3, [pc, #484]	; (8008dcc <HAL_RCC_OscConfig+0x4b0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d118      	bne.n	8008c24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bf2:	4b76      	ldr	r3, [pc, #472]	; (8008dcc <HAL_RCC_OscConfig+0x4b0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a75      	ldr	r2, [pc, #468]	; (8008dcc <HAL_RCC_OscConfig+0x4b0>)
 8008bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bfe:	f7fc fe3d 	bl	800587c <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c06:	f7fc fe39 	bl	800587c <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e118      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c18:	4b6c      	ldr	r3, [pc, #432]	; (8008dcc <HAL_RCC_OscConfig+0x4b0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0f0      	beq.n	8008c06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d106      	bne.n	8008c3a <HAL_RCC_OscConfig+0x31e>
 8008c2c:	4b66      	ldr	r3, [pc, #408]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	4a65      	ldr	r2, [pc, #404]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c32:	f043 0301 	orr.w	r3, r3, #1
 8008c36:	6713      	str	r3, [r2, #112]	; 0x70
 8008c38:	e01c      	b.n	8008c74 <HAL_RCC_OscConfig+0x358>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d10c      	bne.n	8008c5c <HAL_RCC_OscConfig+0x340>
 8008c42:	4b61      	ldr	r3, [pc, #388]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	4a60      	ldr	r2, [pc, #384]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c48:	f043 0304 	orr.w	r3, r3, #4
 8008c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c4e:	4b5e      	ldr	r3, [pc, #376]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c52:	4a5d      	ldr	r2, [pc, #372]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5a:	e00b      	b.n	8008c74 <HAL_RCC_OscConfig+0x358>
 8008c5c:	4b5a      	ldr	r3, [pc, #360]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c60:	4a59      	ldr	r2, [pc, #356]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c62:	f023 0301 	bic.w	r3, r3, #1
 8008c66:	6713      	str	r3, [r2, #112]	; 0x70
 8008c68:	4b57      	ldr	r3, [pc, #348]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	4a56      	ldr	r2, [pc, #344]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c6e:	f023 0304 	bic.w	r3, r3, #4
 8008c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d015      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c7c:	f7fc fdfe 	bl	800587c <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c82:	e00a      	b.n	8008c9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c84:	f7fc fdfa 	bl	800587c <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d901      	bls.n	8008c9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e0d7      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9a:	4b4b      	ldr	r3, [pc, #300]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0ee      	beq.n	8008c84 <HAL_RCC_OscConfig+0x368>
 8008ca6:	e014      	b.n	8008cd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca8:	f7fc fde8 	bl	800587c <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cae:	e00a      	b.n	8008cc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cb0:	f7fc fde4 	bl	800587c <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e0c1      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cc6:	4b40      	ldr	r3, [pc, #256]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1ee      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d105      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cd8:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	4a3a      	ldr	r2, [pc, #232]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 80ad 	beq.w	8008e48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008cee:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 030c 	and.w	r3, r3, #12
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d060      	beq.n	8008dbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d145      	bne.n	8008d8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d02:	4b33      	ldr	r3, [pc, #204]	; (8008dd0 <HAL_RCC_OscConfig+0x4b4>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fc fdb8 	bl	800587c <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d10:	f7fc fdb4 	bl	800587c <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e093      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d22:	4b29      	ldr	r3, [pc, #164]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69da      	ldr	r2, [r3, #28]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	019b      	lsls	r3, r3, #6
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d44:	085b      	lsrs	r3, r3, #1
 8008d46:	3b01      	subs	r3, #1
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	061b      	lsls	r3, r3, #24
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	071b      	lsls	r3, r3, #28
 8008d5a:	491b      	ldr	r1, [pc, #108]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d60:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <HAL_RCC_OscConfig+0x4b4>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d66:	f7fc fd89 	bl	800587c <HAL_GetTick>
 8008d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d6e:	f7fc fd85 	bl	800587c <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e064      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0f0      	beq.n	8008d6e <HAL_RCC_OscConfig+0x452>
 8008d8c:	e05c      	b.n	8008e48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d8e:	4b10      	ldr	r3, [pc, #64]	; (8008dd0 <HAL_RCC_OscConfig+0x4b4>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d94:	f7fc fd72 	bl	800587c <HAL_GetTick>
 8008d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d9a:	e008      	b.n	8008dae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d9c:	f7fc fd6e 	bl	800587c <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e04d      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <HAL_RCC_OscConfig+0x4ac>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f0      	bne.n	8008d9c <HAL_RCC_OscConfig+0x480>
 8008dba:	e045      	b.n	8008e48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d107      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e040      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	40007000 	.word	0x40007000
 8008dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008dd4:	4b1f      	ldr	r3, [pc, #124]	; (8008e54 <HAL_RCC_OscConfig+0x538>)
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d030      	beq.n	8008e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d129      	bne.n	8008e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d122      	bne.n	8008e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e04:	4013      	ands	r3, r2
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d119      	bne.n	8008e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d10f      	bne.n	8008e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d107      	bne.n	8008e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d001      	beq.n	8008e48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40023800 	.word	0x40023800

08008e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e03f      	b.n	8008eea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7fb fef0 	bl	8004c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2224      	movs	r2, #36	; 0x24
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f87b 	bl	8009f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691a      	ldr	r2, [r3, #16]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	695a      	ldr	r2, [r3, #20]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e021      	b.n	8008f48 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2224      	movs	r2, #36	; 0x24
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f1a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7fc f839 	bl	8004f94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d17c      	bne.n	800906a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_UART_Transmit+0x2c>
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e075      	b.n	800906c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Transmit+0x3e>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e06e      	b.n	800906c <HAL_UART_Transmit+0x11c>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2221      	movs	r2, #33	; 0x21
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fa4:	f7fc fc6a 	bl	800587c <HAL_GetTick>
 8008fa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fbe:	d108      	bne.n	8008fd2 <HAL_UART_Transmit+0x82>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	61bb      	str	r3, [r7, #24]
 8008fd0:	e003      	b.n	8008fda <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008fe2:	e02a      	b.n	800903a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	2180      	movs	r1, #128	; 0x80
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fd03 	bl	80099fa <UART_WaitOnFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e036      	b.n	800906c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009012:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	3302      	adds	r3, #2
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	e007      	b.n	800902c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	3301      	adds	r3, #1
 800902a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009030:	b29b      	uxth	r3, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1cf      	bne.n	8008fe4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2200      	movs	r2, #0
 800904c:	2140      	movs	r1, #64	; 0x40
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fcd3 	bl	80099fa <UART_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e006      	b.n	800906c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	e000      	b.n	800906c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800906a:	2302      	movs	r3, #2
  }
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08c      	sub	sp, #48	; 0x30
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b20      	cmp	r3, #32
 800908c:	d165      	bne.n	800915a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <HAL_UART_Transmit_DMA+0x26>
 8009094:	88fb      	ldrh	r3, [r7, #6]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e05e      	b.n	800915c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_UART_Transmit_DMA+0x38>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e057      	b.n	800915c <HAL_UART_Transmit_DMA+0xe8>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	88fa      	ldrh	r2, [r7, #6]
 80090be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2221      	movs	r2, #33	; 0x21
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d8:	4a22      	ldr	r2, [pc, #136]	; (8009164 <HAL_UART_Transmit_DMA+0xf0>)
 80090da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e0:	4a21      	ldr	r2, [pc, #132]	; (8009168 <HAL_UART_Transmit_DMA+0xf4>)
 80090e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	4a20      	ldr	r2, [pc, #128]	; (800916c <HAL_UART_Transmit_DMA+0xf8>)
 80090ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	2200      	movs	r2, #0
 80090f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	6819      	ldr	r1, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3304      	adds	r3, #4
 8009108:	461a      	mov	r2, r3
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	f7fd fa46 	bl	800659c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009118:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3314      	adds	r3, #20
 8009128:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	617b      	str	r3, [r7, #20]
   return(result);
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009138:	62bb      	str	r3, [r7, #40]	; 0x28
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009142:	627a      	str	r2, [r7, #36]	; 0x24
 8009144:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6a39      	ldr	r1, [r7, #32]
 8009148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e000      	b.n	800915c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800915a:	2302      	movs	r3, #2
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	3730      	adds	r7, #48	; 0x30
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	08009755 	.word	0x08009755
 8009168:	080097ef 	.word	0x080097ef
 800916c:	08009967 	.word	0x08009967

08009170 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b20      	cmp	r3, #32
 8009188:	d11d      	bne.n	80091c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_UART_Receive_DMA+0x26>
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e016      	b.n	80091c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Receive_DMA+0x38>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e00f      	b.n	80091c8 <HAL_UART_Receive_DMA+0x58>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	461a      	mov	r2, r3
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fc8b 	bl	8009ad8 <UART_Start_Receive_DMA>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e000      	b.n	80091c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80091c6:	2302      	movs	r3, #2
  }
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b0ba      	sub	sp, #232	; 0xe8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800920e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10f      	bne.n	8009236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <HAL_UART_IRQHandler+0x66>
 8009222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fdf7 	bl	8009e22 <UART_Receive_IT>
      return;
 8009234:	e256      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80de 	beq.w	80093fc <HAL_UART_IRQHandler+0x22c>
 8009240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800924c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 80d1 	beq.w	80093fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <HAL_UART_IRQHandler+0xae>
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f043 0201 	orr.w	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <HAL_UART_IRQHandler+0xd2>
 800928a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	f043 0202 	orr.w	r2, r3, #2
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00b      	beq.n	80092c6 <HAL_UART_IRQHandler+0xf6>
 80092ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092be:	f043 0204 	orr.w	r2, r3, #4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d011      	beq.n	80092f6 <HAL_UART_IRQHandler+0x126>
 80092d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d105      	bne.n	80092ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	f043 0208 	orr.w	r2, r3, #8
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 81ed 	beq.w	80096da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <HAL_UART_IRQHandler+0x14e>
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fd82 	bl	8009e22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009328:	2b40      	cmp	r3, #64	; 0x40
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	f003 0308 	and.w	r3, r3, #8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <HAL_UART_IRQHandler+0x17a>
 8009342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d04f      	beq.n	80093ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc8a 	bl	8009c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b40      	cmp	r3, #64	; 0x40
 800935c:	d141      	bne.n	80093e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3314      	adds	r3, #20
 8009386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800938a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800938e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1d9      	bne.n	800935e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d013      	beq.n	80093da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	4a7d      	ldr	r2, [pc, #500]	; (80095ac <HAL_UART_IRQHandler+0x3dc>)
 80093b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd f9b4 	bl	800672c <HAL_DMA_Abort_IT>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d016      	beq.n	80093f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093d4:	4610      	mov	r0, r2
 80093d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d8:	e00e      	b.n	80093f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f9a4 	bl	8009728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e0:	e00a      	b.n	80093f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9a0 	bl	8009728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	e006      	b.n	80093f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f99c 	bl	8009728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80093f6:	e170      	b.n	80096da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f8:	bf00      	nop
    return;
 80093fa:	e16e      	b.n	80096da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	2b01      	cmp	r3, #1
 8009402:	f040 814a 	bne.w	800969a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8143 	beq.w	800969a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 813c 	beq.w	800969a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009422:	2300      	movs	r3, #0
 8009424:	60bb      	str	r3, [r7, #8]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	60bb      	str	r3, [r7, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b40      	cmp	r3, #64	; 0x40
 8009444:	f040 80b4 	bne.w	80095b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8140 	beq.w	80096de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009466:	429a      	cmp	r2, r3
 8009468:	f080 8139 	bcs.w	80096de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947e:	f000 8088 	beq.w	8009592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	330c      	adds	r3, #12
 8009488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800949c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	330c      	adds	r3, #12
 80094aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80094ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1d9      	bne.n	8009482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3314      	adds	r3, #20
 80094d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094e0:	f023 0301 	bic.w	r3, r3, #1
 80094e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3314      	adds	r3, #20
 80094ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e1      	bne.n	80094ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3314      	adds	r3, #20
 8009510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800951a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800951c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3314      	adds	r3, #20
 800952a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800952e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800953c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e3      	bne.n	800950a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009562:	f023 0310 	bic.w	r3, r3, #16
 8009566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	330c      	adds	r3, #12
 8009570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009574:	65ba      	str	r2, [r7, #88]	; 0x58
 8009576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800957a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e3      	bne.n	8009550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd f85d 	bl	800664c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800959a:	b29b      	uxth	r3, r3
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	b29b      	uxth	r3, r3
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8ca 	bl	800973c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095a8:	e099      	b.n	80096de <HAL_UART_IRQHandler+0x50e>
 80095aa:	bf00      	nop
 80095ac:	08009d2b 	.word	0x08009d2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 808b 	beq.w	80096e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80095cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 8086 	beq.w	80096e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	330c      	adds	r3, #12
 80095dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	330c      	adds	r3, #12
 80095f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80095fa:	647a      	str	r2, [r7, #68]	; 0x44
 80095fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e3      	bne.n	80095d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3314      	adds	r3, #20
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	623b      	str	r3, [r7, #32]
   return(result);
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	f023 0301 	bic.w	r3, r3, #1
 8009624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009632:	633a      	str	r2, [r7, #48]	; 0x30
 8009634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e3      	bne.n	800960e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	60fb      	str	r3, [r7, #12]
   return(result);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0310 	bic.w	r3, r3, #16
 800966a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	330c      	adds	r3, #12
 8009674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009678:	61fa      	str	r2, [r7, #28]
 800967a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	69b9      	ldr	r1, [r7, #24]
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	617b      	str	r3, [r7, #20]
   return(result);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e3      	bne.n	8009654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800968c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f852 	bl	800973c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009698:	e023      	b.n	80096e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800969a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <HAL_UART_IRQHandler+0x4ea>
 80096a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fb4d 	bl	8009d52 <UART_Transmit_IT>
    return;
 80096b8:	e014      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00e      	beq.n	80096e4 <HAL_UART_IRQHandler+0x514>
 80096c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d008      	beq.n	80096e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fb8d 	bl	8009df2 <UART_EndTransmit_IT>
    return;
 80096d8:	e004      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
    return;
 80096da:	bf00      	nop
 80096dc:	e002      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
      return;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
      return;
 80096e2:	bf00      	nop
  }
}
 80096e4:	37e8      	adds	r7, #232	; 0xe8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop

080096ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b090      	sub	sp, #64	; 0x40
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976c:	2b00      	cmp	r3, #0
 800976e:	d137      	bne.n	80097e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009772:	2200      	movs	r2, #0
 8009774:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3314      	adds	r3, #20
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	623b      	str	r3, [r7, #32]
   return(result);
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800978c:	63bb      	str	r3, [r7, #56]	; 0x38
 800978e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3314      	adds	r3, #20
 8009794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009796:	633a      	str	r2, [r7, #48]	; 0x30
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800979c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e5      	bne.n	8009776 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	330c      	adds	r3, #12
 80097b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	e853 3f00 	ldrex	r3, [r3]
 80097b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
 80097c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	330c      	adds	r3, #12
 80097c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ca:	61fa      	str	r2, [r7, #28]
 80097cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ce:	69b9      	ldr	r1, [r7, #24]
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	e841 2300 	strex	r3, r2, [r1]
 80097d6:	617b      	str	r3, [r7, #20]
   return(result);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1e5      	bne.n	80097aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097de:	e002      	b.n	80097e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80097e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80097e2:	f7ff ff83 	bl	80096ec <HAL_UART_TxCpltCallback>
}
 80097e6:	bf00      	nop
 80097e8:	3740      	adds	r7, #64	; 0x40
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff ff7f 	bl	8009700 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b09c      	sub	sp, #112	; 0x70
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009822:	2b00      	cmp	r3, #0
 8009824:	d172      	bne.n	800990c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009828:	2200      	movs	r2, #0
 800982a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800982c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800983c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009842:	66bb      	str	r3, [r7, #104]	; 0x68
 8009844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	330c      	adds	r3, #12
 800984a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800984c:	65ba      	str	r2, [r7, #88]	; 0x58
 800984e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800985a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e5      	bne.n	800982c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3314      	adds	r3, #20
 8009866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	667b      	str	r3, [r7, #100]	; 0x64
 8009878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3314      	adds	r3, #20
 800987e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009880:	647a      	str	r2, [r7, #68]	; 0x44
 8009882:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800988e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e5      	bne.n	8009860 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3314      	adds	r3, #20
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	623b      	str	r3, [r7, #32]
   return(result);
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098aa:	663b      	str	r3, [r7, #96]	; 0x60
 80098ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098b4:	633a      	str	r2, [r7, #48]	; 0x30
 80098b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e5      	bne.n	8009894 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ca:	2220      	movs	r2, #32
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d119      	bne.n	800990c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	330c      	adds	r3, #12
 80098de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0310 	bic.w	r3, r3, #16
 80098ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	330c      	adds	r3, #12
 80098f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098f8:	61fa      	str	r2, [r7, #28]
 80098fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	69b9      	ldr	r1, [r7, #24]
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	617b      	str	r3, [r7, #20]
   return(result);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e5      	bne.n	80098d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800990c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800990e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009910:	2b01      	cmp	r3, #1
 8009912:	d106      	bne.n	8009922 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009916:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009918:	4619      	mov	r1, r3
 800991a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800991c:	f7ff ff0e 	bl	800973c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009920:	e002      	b.n	8009928 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009922:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009924:	f7fb fcec 	bl	8005300 <HAL_UART_RxCpltCallback>
}
 8009928:	bf00      	nop
 800992a:	3770      	adds	r7, #112	; 0x70
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	2b01      	cmp	r3, #1
 8009944:	d108      	bne.n	8009958 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	4619      	mov	r1, r3
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7ff fef3 	bl	800973c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009956:	e002      	b.n	800995e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fedb 	bl	8009714 <HAL_UART_RxHalfCpltCallback>
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800996e:	2300      	movs	r3, #0
 8009970:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	bf0c      	ite	eq
 8009986:	2301      	moveq	r3, #1
 8009988:	2300      	movne	r3, #0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b21      	cmp	r3, #33	; 0x21
 8009998:	d108      	bne.n	80099ac <UART_DMAError+0x46>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80099a6:	68b8      	ldr	r0, [r7, #8]
 80099a8:	f000 f934 	bl	8009c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	bf0c      	ite	eq
 80099ba:	2301      	moveq	r3, #1
 80099bc:	2300      	movne	r3, #0
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b22      	cmp	r3, #34	; 0x22
 80099cc:	d108      	bne.n	80099e0 <UART_DMAError+0x7a>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2200      	movs	r2, #0
 80099d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80099da:	68b8      	ldr	r0, [r7, #8]
 80099dc:	f000 f942 	bl	8009c64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	f043 0210 	orr.w	r2, r3, #16
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f7ff fe9b 	bl	8009728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b090      	sub	sp, #64	; 0x40
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	4613      	mov	r3, r2
 8009a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a0a:	e050      	b.n	8009aae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a12:	d04c      	beq.n	8009aae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8009a1a:	f7fb ff2f 	bl	800587c <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d241      	bcs.n	8009aae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	330c      	adds	r3, #12
 8009a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	330c      	adds	r3, #12
 8009a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a4a:	637a      	str	r2, [r7, #52]	; 0x34
 8009a4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e5      	bne.n	8009a2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3314      	adds	r3, #20
 8009a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3314      	adds	r3, #20
 8009a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a7e:	623a      	str	r2, [r7, #32]
 8009a80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	69f9      	ldr	r1, [r7, #28]
 8009a84:	6a3a      	ldr	r2, [r7, #32]
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e5      	bne.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e00f      	b.n	8009ace <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	bf0c      	ite	eq
 8009abe:	2301      	moveq	r3, #1
 8009ac0:	2300      	movne	r3, #0
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d09f      	beq.n	8009a0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3740      	adds	r7, #64	; 0x40
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b098      	sub	sp, #96	; 0x60
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	88fa      	ldrh	r2, [r7, #6]
 8009af0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2222      	movs	r2, #34	; 0x22
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	4a40      	ldr	r2, [pc, #256]	; (8009c08 <UART_Start_Receive_DMA+0x130>)
 8009b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	4a3f      	ldr	r2, [pc, #252]	; (8009c0c <UART_Start_Receive_DMA+0x134>)
 8009b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	4a3e      	ldr	r2, [pc, #248]	; (8009c10 <UART_Start_Receive_DMA+0x138>)
 8009b16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009b20:	f107 0308 	add.w	r3, r7, #8
 8009b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4619      	mov	r1, r3
 8009b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	88fb      	ldrh	r3, [r7, #6]
 8009b38:	f7fc fd30 	bl	800659c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	613b      	str	r3, [r7, #16]
 8009b50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d019      	beq.n	8009b96 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	330c      	adds	r3, #12
 8009b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	330c      	adds	r3, #12
 8009b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e5      	bne.n	8009b62 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3314      	adds	r3, #20
 8009b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	f043 0301 	orr.w	r3, r3, #1
 8009bac:	657b      	str	r3, [r7, #84]	; 0x54
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3314      	adds	r3, #20
 8009bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e5      	bne.n	8009b96 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3314      	adds	r3, #20
 8009bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be0:	653b      	str	r3, [r7, #80]	; 0x50
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3314      	adds	r3, #20
 8009be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bea:	627a      	str	r2, [r7, #36]	; 0x24
 8009bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6a39      	ldr	r1, [r7, #32]
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e5      	bne.n	8009bca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3760      	adds	r7, #96	; 0x60
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	0800980b 	.word	0x0800980b
 8009c0c:	08009931 	.word	0x08009931
 8009c10:	08009967 	.word	0x08009967

08009c14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b089      	sub	sp, #36	; 0x24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	e853 3f00 	ldrex	r3, [r3]
 8009c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	69fa      	ldr	r2, [r7, #28]
 8009c3c:	61ba      	str	r2, [r7, #24]
 8009c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c40:	6979      	ldr	r1, [r7, #20]
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	e841 2300 	strex	r3, r2, [r1]
 8009c48:	613b      	str	r3, [r7, #16]
   return(result);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1e5      	bne.n	8009c1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009c58:	bf00      	nop
 8009c5a:	3724      	adds	r7, #36	; 0x24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b095      	sub	sp, #84	; 0x54
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	330c      	adds	r3, #12
 8009c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	330c      	adds	r3, #12
 8009c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c8c:	643a      	str	r2, [r7, #64]	; 0x40
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c94:	e841 2300 	strex	r3, r2, [r1]
 8009c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e5      	bne.n	8009c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3314      	adds	r3, #20
 8009ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	e853 3f00 	ldrex	r3, [r3]
 8009cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	f023 0301 	bic.w	r3, r3, #1
 8009cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3314      	adds	r3, #20
 8009cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cc8:	e841 2300 	strex	r3, r2, [r1]
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e5      	bne.n	8009ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d119      	bne.n	8009d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f023 0310 	bic.w	r3, r3, #16
 8009cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cfc:	61ba      	str	r2, [r7, #24]
 8009cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	6979      	ldr	r1, [r7, #20]
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	613b      	str	r3, [r7, #16]
   return(result);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e5      	bne.n	8009cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d1e:	bf00      	nop
 8009d20:	3754      	adds	r7, #84	; 0x54
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff fcef 	bl	8009728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b085      	sub	sp, #20
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b21      	cmp	r3, #33	; 0x21
 8009d64:	d13e      	bne.n	8009de4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6e:	d114      	bne.n	8009d9a <UART_Transmit_IT+0x48>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d110      	bne.n	8009d9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	881b      	ldrh	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	1c9a      	adds	r2, r3, #2
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	621a      	str	r2, [r3, #32]
 8009d98:	e008      	b.n	8009dac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	1c59      	adds	r1, r3, #1
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6211      	str	r1, [r2, #32]
 8009da4:	781a      	ldrb	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	4619      	mov	r1, r3
 8009dba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10f      	bne.n	8009de0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e000      	b.n	8009de6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009de4:	2302      	movs	r3, #2
  }
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fc6a 	bl	80096ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b08c      	sub	sp, #48	; 0x30
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b22      	cmp	r3, #34	; 0x22
 8009e34:	f040 80ab 	bne.w	8009f8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e40:	d117      	bne.n	8009e72 <UART_Receive_IT+0x50>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d113      	bne.n	8009e72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	1c9a      	adds	r2, r3, #2
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8009e70:	e026      	b.n	8009ec0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e84:	d007      	beq.n	8009e96 <UART_Receive_IT+0x74>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <UART_Receive_IT+0x82>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	e008      	b.n	8009eb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d15a      	bne.n	8009f8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0220 	bic.w	r2, r2, #32
 8009ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	695a      	ldr	r2, [r3, #20]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0201 	bic.w	r2, r2, #1
 8009f02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d135      	bne.n	8009f80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	330c      	adds	r3, #12
 8009f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	613b      	str	r3, [r7, #16]
   return(result);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f023 0310 	bic.w	r3, r3, #16
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	330c      	adds	r3, #12
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	623a      	str	r2, [r7, #32]
 8009f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	69f9      	ldr	r1, [r7, #28]
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e5      	bne.n	8009f1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0310 	and.w	r3, r3, #16
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	d10a      	bne.n	8009f72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff fbdf 	bl	800973c <HAL_UARTEx_RxEventCallback>
 8009f7e:	e002      	b.n	8009f86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7fb f9bd 	bl	8005300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e002      	b.n	8009f90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e000      	b.n	8009f90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009f8e:	2302      	movs	r3, #2
  }
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3730      	adds	r7, #48	; 0x30
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f9c:	b0c0      	sub	sp, #256	; 0x100
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb4:	68d9      	ldr	r1, [r3, #12]
 8009fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	ea40 0301 	orr.w	r3, r0, r1
 8009fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ff0:	f021 010c 	bic.w	r1, r1, #12
 8009ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ffe:	430b      	orrs	r3, r1
 800a000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a012:	6999      	ldr	r1, [r3, #24]
 800a014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	ea40 0301 	orr.w	r3, r0, r1
 800a01e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	4b8f      	ldr	r3, [pc, #572]	; (800a264 <UART_SetConfig+0x2cc>)
 800a028:	429a      	cmp	r2, r3
 800a02a:	d005      	beq.n	800a038 <UART_SetConfig+0xa0>
 800a02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	4b8d      	ldr	r3, [pc, #564]	; (800a268 <UART_SetConfig+0x2d0>)
 800a034:	429a      	cmp	r2, r3
 800a036:	d104      	bne.n	800a042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a038:	f7fe fa2c 	bl	8008494 <HAL_RCC_GetPCLK2Freq>
 800a03c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a040:	e003      	b.n	800a04a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a042:	f7fe fa13 	bl	800846c <HAL_RCC_GetPCLK1Freq>
 800a046:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a054:	f040 810c 	bne.w	800a270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a062:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a06a:	4622      	mov	r2, r4
 800a06c:	462b      	mov	r3, r5
 800a06e:	1891      	adds	r1, r2, r2
 800a070:	65b9      	str	r1, [r7, #88]	; 0x58
 800a072:	415b      	adcs	r3, r3
 800a074:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a07a:	4621      	mov	r1, r4
 800a07c:	eb12 0801 	adds.w	r8, r2, r1
 800a080:	4629      	mov	r1, r5
 800a082:	eb43 0901 	adc.w	r9, r3, r1
 800a086:	f04f 0200 	mov.w	r2, #0
 800a08a:	f04f 0300 	mov.w	r3, #0
 800a08e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a09a:	4690      	mov	r8, r2
 800a09c:	4699      	mov	r9, r3
 800a09e:	4623      	mov	r3, r4
 800a0a0:	eb18 0303 	adds.w	r3, r8, r3
 800a0a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	eb49 0303 	adc.w	r3, r9, r3
 800a0ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a0c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	18db      	adds	r3, r3, r3
 800a0ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	eb42 0303 	adc.w	r3, r2, r3
 800a0d2:	657b      	str	r3, [r7, #84]	; 0x54
 800a0d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a0d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a0dc:	f7f6 ff52 	bl	8000f84 <__aeabi_uldivmod>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4b61      	ldr	r3, [pc, #388]	; (800a26c <UART_SetConfig+0x2d4>)
 800a0e6:	fba3 2302 	umull	r2, r3, r3, r2
 800a0ea:	095b      	lsrs	r3, r3, #5
 800a0ec:	011c      	lsls	r4, r3, #4
 800a0ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a0fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a100:	4642      	mov	r2, r8
 800a102:	464b      	mov	r3, r9
 800a104:	1891      	adds	r1, r2, r2
 800a106:	64b9      	str	r1, [r7, #72]	; 0x48
 800a108:	415b      	adcs	r3, r3
 800a10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a10c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a110:	4641      	mov	r1, r8
 800a112:	eb12 0a01 	adds.w	sl, r2, r1
 800a116:	4649      	mov	r1, r9
 800a118:	eb43 0b01 	adc.w	fp, r3, r1
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	f04f 0300 	mov.w	r3, #0
 800a124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a12c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a130:	4692      	mov	sl, r2
 800a132:	469b      	mov	fp, r3
 800a134:	4643      	mov	r3, r8
 800a136:	eb1a 0303 	adds.w	r3, sl, r3
 800a13a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a13e:	464b      	mov	r3, r9
 800a140:	eb4b 0303 	adc.w	r3, fp, r3
 800a144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a154:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a15c:	460b      	mov	r3, r1
 800a15e:	18db      	adds	r3, r3, r3
 800a160:	643b      	str	r3, [r7, #64]	; 0x40
 800a162:	4613      	mov	r3, r2
 800a164:	eb42 0303 	adc.w	r3, r2, r3
 800a168:	647b      	str	r3, [r7, #68]	; 0x44
 800a16a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a16e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a172:	f7f6 ff07 	bl	8000f84 <__aeabi_uldivmod>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	4b3b      	ldr	r3, [pc, #236]	; (800a26c <UART_SetConfig+0x2d4>)
 800a17e:	fba3 2301 	umull	r2, r3, r3, r1
 800a182:	095b      	lsrs	r3, r3, #5
 800a184:	2264      	movs	r2, #100	; 0x64
 800a186:	fb02 f303 	mul.w	r3, r2, r3
 800a18a:	1acb      	subs	r3, r1, r3
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a192:	4b36      	ldr	r3, [pc, #216]	; (800a26c <UART_SetConfig+0x2d4>)
 800a194:	fba3 2302 	umull	r2, r3, r3, r2
 800a198:	095b      	lsrs	r3, r3, #5
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a1a0:	441c      	add	r4, r3
 800a1a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a1b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	1891      	adds	r1, r2, r2
 800a1ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1bc:	415b      	adcs	r3, r3
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1c4:	4641      	mov	r1, r8
 800a1c6:	1851      	adds	r1, r2, r1
 800a1c8:	6339      	str	r1, [r7, #48]	; 0x30
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	414b      	adcs	r3, r1
 800a1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d0:	f04f 0200 	mov.w	r2, #0
 800a1d4:	f04f 0300 	mov.w	r3, #0
 800a1d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a1dc:	4659      	mov	r1, fp
 800a1de:	00cb      	lsls	r3, r1, #3
 800a1e0:	4651      	mov	r1, sl
 800a1e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1e6:	4651      	mov	r1, sl
 800a1e8:	00ca      	lsls	r2, r1, #3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	4642      	mov	r2, r8
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	eb42 0303 	adc.w	r3, r2, r3
 800a200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a210:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a218:	460b      	mov	r3, r1
 800a21a:	18db      	adds	r3, r3, r3
 800a21c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a21e:	4613      	mov	r3, r2
 800a220:	eb42 0303 	adc.w	r3, r2, r3
 800a224:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a22a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a22e:	f7f6 fea9 	bl	8000f84 <__aeabi_uldivmod>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4b0d      	ldr	r3, [pc, #52]	; (800a26c <UART_SetConfig+0x2d4>)
 800a238:	fba3 1302 	umull	r1, r3, r3, r2
 800a23c:	095b      	lsrs	r3, r3, #5
 800a23e:	2164      	movs	r1, #100	; 0x64
 800a240:	fb01 f303 	mul.w	r3, r1, r3
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	3332      	adds	r3, #50	; 0x32
 800a24a:	4a08      	ldr	r2, [pc, #32]	; (800a26c <UART_SetConfig+0x2d4>)
 800a24c:	fba2 2303 	umull	r2, r3, r2, r3
 800a250:	095b      	lsrs	r3, r3, #5
 800a252:	f003 0207 	and.w	r2, r3, #7
 800a256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4422      	add	r2, r4
 800a25e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a260:	e105      	b.n	800a46e <UART_SetConfig+0x4d6>
 800a262:	bf00      	nop
 800a264:	40011000 	.word	0x40011000
 800a268:	40011400 	.word	0x40011400
 800a26c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a274:	2200      	movs	r2, #0
 800a276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a27a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a27e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a282:	4642      	mov	r2, r8
 800a284:	464b      	mov	r3, r9
 800a286:	1891      	adds	r1, r2, r2
 800a288:	6239      	str	r1, [r7, #32]
 800a28a:	415b      	adcs	r3, r3
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
 800a28e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a292:	4641      	mov	r1, r8
 800a294:	1854      	adds	r4, r2, r1
 800a296:	4649      	mov	r1, r9
 800a298:	eb43 0501 	adc.w	r5, r3, r1
 800a29c:	f04f 0200 	mov.w	r2, #0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	00eb      	lsls	r3, r5, #3
 800a2a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2aa:	00e2      	lsls	r2, r4, #3
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	461d      	mov	r5, r3
 800a2b0:	4643      	mov	r3, r8
 800a2b2:	18e3      	adds	r3, r4, r3
 800a2b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	eb45 0303 	adc.w	r3, r5, r3
 800a2be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a2d2:	f04f 0200 	mov.w	r2, #0
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a2de:	4629      	mov	r1, r5
 800a2e0:	008b      	lsls	r3, r1, #2
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	008a      	lsls	r2, r1, #2
 800a2ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a2f0:	f7f6 fe48 	bl	8000f84 <__aeabi_uldivmod>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4b60      	ldr	r3, [pc, #384]	; (800a47c <UART_SetConfig+0x4e4>)
 800a2fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a2fe:	095b      	lsrs	r3, r3, #5
 800a300:	011c      	lsls	r4, r3, #4
 800a302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a306:	2200      	movs	r2, #0
 800a308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a30c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	1891      	adds	r1, r2, r2
 800a31a:	61b9      	str	r1, [r7, #24]
 800a31c:	415b      	adcs	r3, r3
 800a31e:	61fb      	str	r3, [r7, #28]
 800a320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a324:	4641      	mov	r1, r8
 800a326:	1851      	adds	r1, r2, r1
 800a328:	6139      	str	r1, [r7, #16]
 800a32a:	4649      	mov	r1, r9
 800a32c:	414b      	adcs	r3, r1
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	f04f 0300 	mov.w	r3, #0
 800a338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a33c:	4659      	mov	r1, fp
 800a33e:	00cb      	lsls	r3, r1, #3
 800a340:	4651      	mov	r1, sl
 800a342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a346:	4651      	mov	r1, sl
 800a348:	00ca      	lsls	r2, r1, #3
 800a34a:	4610      	mov	r0, r2
 800a34c:	4619      	mov	r1, r3
 800a34e:	4603      	mov	r3, r0
 800a350:	4642      	mov	r2, r8
 800a352:	189b      	adds	r3, r3, r2
 800a354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a358:	464b      	mov	r3, r9
 800a35a:	460a      	mov	r2, r1
 800a35c:	eb42 0303 	adc.w	r3, r2, r3
 800a360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a36e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a370:	f04f 0200 	mov.w	r2, #0
 800a374:	f04f 0300 	mov.w	r3, #0
 800a378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a37c:	4649      	mov	r1, r9
 800a37e:	008b      	lsls	r3, r1, #2
 800a380:	4641      	mov	r1, r8
 800a382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a386:	4641      	mov	r1, r8
 800a388:	008a      	lsls	r2, r1, #2
 800a38a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a38e:	f7f6 fdf9 	bl	8000f84 <__aeabi_uldivmod>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4b39      	ldr	r3, [pc, #228]	; (800a47c <UART_SetConfig+0x4e4>)
 800a398:	fba3 1302 	umull	r1, r3, r3, r2
 800a39c:	095b      	lsrs	r3, r3, #5
 800a39e:	2164      	movs	r1, #100	; 0x64
 800a3a0:	fb01 f303 	mul.w	r3, r1, r3
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	3332      	adds	r3, #50	; 0x32
 800a3aa:	4a34      	ldr	r2, [pc, #208]	; (800a47c <UART_SetConfig+0x4e4>)
 800a3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b0:	095b      	lsrs	r3, r3, #5
 800a3b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3b6:	441c      	add	r4, r3
 800a3b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3bc:	2200      	movs	r2, #0
 800a3be:	673b      	str	r3, [r7, #112]	; 0x70
 800a3c0:	677a      	str	r2, [r7, #116]	; 0x74
 800a3c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	1891      	adds	r1, r2, r2
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	415b      	adcs	r3, r3
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	1851      	adds	r1, r2, r1
 800a3da:	6039      	str	r1, [r7, #0]
 800a3dc:	4649      	mov	r1, r9
 800a3de:	414b      	adcs	r3, r1
 800a3e0:	607b      	str	r3, [r7, #4]
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	f04f 0300 	mov.w	r3, #0
 800a3ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3ee:	4659      	mov	r1, fp
 800a3f0:	00cb      	lsls	r3, r1, #3
 800a3f2:	4651      	mov	r1, sl
 800a3f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3f8:	4651      	mov	r1, sl
 800a3fa:	00ca      	lsls	r2, r1, #3
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	4619      	mov	r1, r3
 800a400:	4603      	mov	r3, r0
 800a402:	4642      	mov	r2, r8
 800a404:	189b      	adds	r3, r3, r2
 800a406:	66bb      	str	r3, [r7, #104]	; 0x68
 800a408:	464b      	mov	r3, r9
 800a40a:	460a      	mov	r2, r1
 800a40c:	eb42 0303 	adc.w	r3, r2, r3
 800a410:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	663b      	str	r3, [r7, #96]	; 0x60
 800a41c:	667a      	str	r2, [r7, #100]	; 0x64
 800a41e:	f04f 0200 	mov.w	r2, #0
 800a422:	f04f 0300 	mov.w	r3, #0
 800a426:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a42a:	4649      	mov	r1, r9
 800a42c:	008b      	lsls	r3, r1, #2
 800a42e:	4641      	mov	r1, r8
 800a430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a434:	4641      	mov	r1, r8
 800a436:	008a      	lsls	r2, r1, #2
 800a438:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a43c:	f7f6 fda2 	bl	8000f84 <__aeabi_uldivmod>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <UART_SetConfig+0x4e4>)
 800a446:	fba3 1302 	umull	r1, r3, r3, r2
 800a44a:	095b      	lsrs	r3, r3, #5
 800a44c:	2164      	movs	r1, #100	; 0x64
 800a44e:	fb01 f303 	mul.w	r3, r1, r3
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	011b      	lsls	r3, r3, #4
 800a456:	3332      	adds	r3, #50	; 0x32
 800a458:	4a08      	ldr	r2, [pc, #32]	; (800a47c <UART_SetConfig+0x4e4>)
 800a45a:	fba2 2303 	umull	r2, r3, r2, r3
 800a45e:	095b      	lsrs	r3, r3, #5
 800a460:	f003 020f 	and.w	r2, r3, #15
 800a464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4422      	add	r2, r4
 800a46c:	609a      	str	r2, [r3, #8]
}
 800a46e:	bf00      	nop
 800a470:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a474:	46bd      	mov	sp, r7
 800a476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a47a:	bf00      	nop
 800a47c:	51eb851f 	.word	0x51eb851f

0800a480 <__errno>:
 800a480:	4b01      	ldr	r3, [pc, #4]	; (800a488 <__errno+0x8>)
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000014 	.word	0x20000014

0800a48c <__libc_init_array>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	4d0d      	ldr	r5, [pc, #52]	; (800a4c4 <__libc_init_array+0x38>)
 800a490:	4c0d      	ldr	r4, [pc, #52]	; (800a4c8 <__libc_init_array+0x3c>)
 800a492:	1b64      	subs	r4, r4, r5
 800a494:	10a4      	asrs	r4, r4, #2
 800a496:	2600      	movs	r6, #0
 800a498:	42a6      	cmp	r6, r4
 800a49a:	d109      	bne.n	800a4b0 <__libc_init_array+0x24>
 800a49c:	4d0b      	ldr	r5, [pc, #44]	; (800a4cc <__libc_init_array+0x40>)
 800a49e:	4c0c      	ldr	r4, [pc, #48]	; (800a4d0 <__libc_init_array+0x44>)
 800a4a0:	f006 ff9c 	bl	80113dc <_init>
 800a4a4:	1b64      	subs	r4, r4, r5
 800a4a6:	10a4      	asrs	r4, r4, #2
 800a4a8:	2600      	movs	r6, #0
 800a4aa:	42a6      	cmp	r6, r4
 800a4ac:	d105      	bne.n	800a4ba <__libc_init_array+0x2e>
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b4:	4798      	blx	r3
 800a4b6:	3601      	adds	r6, #1
 800a4b8:	e7ee      	b.n	800a498 <__libc_init_array+0xc>
 800a4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4be:	4798      	blx	r3
 800a4c0:	3601      	adds	r6, #1
 800a4c2:	e7f2      	b.n	800a4aa <__libc_init_array+0x1e>
 800a4c4:	08011a08 	.word	0x08011a08
 800a4c8:	08011a08 	.word	0x08011a08
 800a4cc:	08011a08 	.word	0x08011a08
 800a4d0:	08011a0c 	.word	0x08011a0c

0800a4d4 <memset>:
 800a4d4:	4402      	add	r2, r0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d100      	bne.n	800a4de <memset+0xa>
 800a4dc:	4770      	bx	lr
 800a4de:	f803 1b01 	strb.w	r1, [r3], #1
 800a4e2:	e7f9      	b.n	800a4d8 <memset+0x4>

0800a4e4 <__cvt>:
 800a4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	ec55 4b10 	vmov	r4, r5, d0
 800a4ec:	2d00      	cmp	r5, #0
 800a4ee:	460e      	mov	r6, r1
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	bfbb      	ittet	lt
 800a4f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4fa:	461d      	movlt	r5, r3
 800a4fc:	2300      	movge	r3, #0
 800a4fe:	232d      	movlt	r3, #45	; 0x2d
 800a500:	700b      	strb	r3, [r1, #0]
 800a502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a504:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a508:	4691      	mov	r9, r2
 800a50a:	f023 0820 	bic.w	r8, r3, #32
 800a50e:	bfbc      	itt	lt
 800a510:	4622      	movlt	r2, r4
 800a512:	4614      	movlt	r4, r2
 800a514:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a518:	d005      	beq.n	800a526 <__cvt+0x42>
 800a51a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a51e:	d100      	bne.n	800a522 <__cvt+0x3e>
 800a520:	3601      	adds	r6, #1
 800a522:	2102      	movs	r1, #2
 800a524:	e000      	b.n	800a528 <__cvt+0x44>
 800a526:	2103      	movs	r1, #3
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	ab02      	add	r3, sp, #8
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	ec45 4b10 	vmov	d0, r4, r5
 800a534:	4653      	mov	r3, sl
 800a536:	4632      	mov	r2, r6
 800a538:	f001 fe62 	bl	800c200 <_dtoa_r>
 800a53c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a540:	4607      	mov	r7, r0
 800a542:	d102      	bne.n	800a54a <__cvt+0x66>
 800a544:	f019 0f01 	tst.w	r9, #1
 800a548:	d022      	beq.n	800a590 <__cvt+0xac>
 800a54a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a54e:	eb07 0906 	add.w	r9, r7, r6
 800a552:	d110      	bne.n	800a576 <__cvt+0x92>
 800a554:	783b      	ldrb	r3, [r7, #0]
 800a556:	2b30      	cmp	r3, #48	; 0x30
 800a558:	d10a      	bne.n	800a570 <__cvt+0x8c>
 800a55a:	2200      	movs	r2, #0
 800a55c:	2300      	movs	r3, #0
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f6 fad1 	bl	8000b08 <__aeabi_dcmpeq>
 800a566:	b918      	cbnz	r0, 800a570 <__cvt+0x8c>
 800a568:	f1c6 0601 	rsb	r6, r6, #1
 800a56c:	f8ca 6000 	str.w	r6, [sl]
 800a570:	f8da 3000 	ldr.w	r3, [sl]
 800a574:	4499      	add	r9, r3
 800a576:	2200      	movs	r2, #0
 800a578:	2300      	movs	r3, #0
 800a57a:	4620      	mov	r0, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7f6 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 800a582:	b108      	cbz	r0, 800a588 <__cvt+0xa4>
 800a584:	f8cd 900c 	str.w	r9, [sp, #12]
 800a588:	2230      	movs	r2, #48	; 0x30
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	454b      	cmp	r3, r9
 800a58e:	d307      	bcc.n	800a5a0 <__cvt+0xbc>
 800a590:	9b03      	ldr	r3, [sp, #12]
 800a592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a594:	1bdb      	subs	r3, r3, r7
 800a596:	4638      	mov	r0, r7
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	b004      	add	sp, #16
 800a59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a0:	1c59      	adds	r1, r3, #1
 800a5a2:	9103      	str	r1, [sp, #12]
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e7f0      	b.n	800a58a <__cvt+0xa6>

0800a5a8 <__exponent>:
 800a5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	bfb8      	it	lt
 800a5b0:	4249      	neglt	r1, r1
 800a5b2:	f803 2b02 	strb.w	r2, [r3], #2
 800a5b6:	bfb4      	ite	lt
 800a5b8:	222d      	movlt	r2, #45	; 0x2d
 800a5ba:	222b      	movge	r2, #43	; 0x2b
 800a5bc:	2909      	cmp	r1, #9
 800a5be:	7042      	strb	r2, [r0, #1]
 800a5c0:	dd2a      	ble.n	800a618 <__exponent+0x70>
 800a5c2:	f10d 0407 	add.w	r4, sp, #7
 800a5c6:	46a4      	mov	ip, r4
 800a5c8:	270a      	movs	r7, #10
 800a5ca:	46a6      	mov	lr, r4
 800a5cc:	460a      	mov	r2, r1
 800a5ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5d2:	fb07 1516 	mls	r5, r7, r6, r1
 800a5d6:	3530      	adds	r5, #48	; 0x30
 800a5d8:	2a63      	cmp	r2, #99	; 0x63
 800a5da:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	dcf1      	bgt.n	800a5ca <__exponent+0x22>
 800a5e6:	3130      	adds	r1, #48	; 0x30
 800a5e8:	f1ae 0502 	sub.w	r5, lr, #2
 800a5ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5f0:	1c44      	adds	r4, r0, #1
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4561      	cmp	r1, ip
 800a5f6:	d30a      	bcc.n	800a60e <__exponent+0x66>
 800a5f8:	f10d 0209 	add.w	r2, sp, #9
 800a5fc:	eba2 020e 	sub.w	r2, r2, lr
 800a600:	4565      	cmp	r5, ip
 800a602:	bf88      	it	hi
 800a604:	2200      	movhi	r2, #0
 800a606:	4413      	add	r3, r2
 800a608:	1a18      	subs	r0, r3, r0
 800a60a:	b003      	add	sp, #12
 800a60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a612:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a616:	e7ed      	b.n	800a5f4 <__exponent+0x4c>
 800a618:	2330      	movs	r3, #48	; 0x30
 800a61a:	3130      	adds	r1, #48	; 0x30
 800a61c:	7083      	strb	r3, [r0, #2]
 800a61e:	70c1      	strb	r1, [r0, #3]
 800a620:	1d03      	adds	r3, r0, #4
 800a622:	e7f1      	b.n	800a608 <__exponent+0x60>

0800a624 <_printf_float>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	ed2d 8b02 	vpush	{d8}
 800a62c:	b08d      	sub	sp, #52	; 0x34
 800a62e:	460c      	mov	r4, r1
 800a630:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a634:	4616      	mov	r6, r2
 800a636:	461f      	mov	r7, r3
 800a638:	4605      	mov	r5, r0
 800a63a:	f002 ff3f 	bl	800d4bc <_localeconv_r>
 800a63e:	f8d0 a000 	ldr.w	sl, [r0]
 800a642:	4650      	mov	r0, sl
 800a644:	f7f5 fde4 	bl	8000210 <strlen>
 800a648:	2300      	movs	r3, #0
 800a64a:	930a      	str	r3, [sp, #40]	; 0x28
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	f8d8 3000 	ldr.w	r3, [r8]
 800a654:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a658:	3307      	adds	r3, #7
 800a65a:	f023 0307 	bic.w	r3, r3, #7
 800a65e:	f103 0208 	add.w	r2, r3, #8
 800a662:	f8c8 2000 	str.w	r2, [r8]
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a66e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a676:	9307      	str	r3, [sp, #28]
 800a678:	f8cd 8018 	str.w	r8, [sp, #24]
 800a67c:	ee08 0a10 	vmov	s16, r0
 800a680:	4b9f      	ldr	r3, [pc, #636]	; (800a900 <_printf_float+0x2dc>)
 800a682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a686:	f04f 32ff 	mov.w	r2, #4294967295
 800a68a:	f7f6 fa6f 	bl	8000b6c <__aeabi_dcmpun>
 800a68e:	bb88      	cbnz	r0, 800a6f4 <_printf_float+0xd0>
 800a690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a694:	4b9a      	ldr	r3, [pc, #616]	; (800a900 <_printf_float+0x2dc>)
 800a696:	f04f 32ff 	mov.w	r2, #4294967295
 800a69a:	f7f6 fa49 	bl	8000b30 <__aeabi_dcmple>
 800a69e:	bb48      	cbnz	r0, 800a6f4 <_printf_float+0xd0>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	f7f6 fa38 	bl	8000b1c <__aeabi_dcmplt>
 800a6ac:	b110      	cbz	r0, 800a6b4 <_printf_float+0x90>
 800a6ae:	232d      	movs	r3, #45	; 0x2d
 800a6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b4:	4b93      	ldr	r3, [pc, #588]	; (800a904 <_printf_float+0x2e0>)
 800a6b6:	4894      	ldr	r0, [pc, #592]	; (800a908 <_printf_float+0x2e4>)
 800a6b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6bc:	bf94      	ite	ls
 800a6be:	4698      	movls	r8, r3
 800a6c0:	4680      	movhi	r8, r0
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	9b05      	ldr	r3, [sp, #20]
 800a6c8:	f023 0204 	bic.w	r2, r3, #4
 800a6cc:	6022      	str	r2, [r4, #0]
 800a6ce:	f04f 0900 	mov.w	r9, #0
 800a6d2:	9700      	str	r7, [sp, #0]
 800a6d4:	4633      	mov	r3, r6
 800a6d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6d8:	4621      	mov	r1, r4
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f000 f9d8 	bl	800aa90 <_printf_common>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f040 8090 	bne.w	800a806 <_printf_float+0x1e2>
 800a6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ea:	b00d      	add	sp, #52	; 0x34
 800a6ec:	ecbd 8b02 	vpop	{d8}
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	4642      	mov	r2, r8
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f6 fa36 	bl	8000b6c <__aeabi_dcmpun>
 800a700:	b140      	cbz	r0, 800a714 <_printf_float+0xf0>
 800a702:	464b      	mov	r3, r9
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfbc      	itt	lt
 800a708:	232d      	movlt	r3, #45	; 0x2d
 800a70a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a70e:	487f      	ldr	r0, [pc, #508]	; (800a90c <_printf_float+0x2e8>)
 800a710:	4b7f      	ldr	r3, [pc, #508]	; (800a910 <_printf_float+0x2ec>)
 800a712:	e7d1      	b.n	800a6b8 <_printf_float+0x94>
 800a714:	6863      	ldr	r3, [r4, #4]
 800a716:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a71a:	9206      	str	r2, [sp, #24]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	d13f      	bne.n	800a7a0 <_printf_float+0x17c>
 800a720:	2306      	movs	r3, #6
 800a722:	6063      	str	r3, [r4, #4]
 800a724:	9b05      	ldr	r3, [sp, #20]
 800a726:	6861      	ldr	r1, [r4, #4]
 800a728:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a72c:	2300      	movs	r3, #0
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	ab0a      	add	r3, sp, #40	; 0x28
 800a732:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a736:	ab09      	add	r3, sp, #36	; 0x24
 800a738:	ec49 8b10 	vmov	d0, r8, r9
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a744:	4628      	mov	r0, r5
 800a746:	f7ff fecd 	bl	800a4e4 <__cvt>
 800a74a:	9b06      	ldr	r3, [sp, #24]
 800a74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a74e:	2b47      	cmp	r3, #71	; 0x47
 800a750:	4680      	mov	r8, r0
 800a752:	d108      	bne.n	800a766 <_printf_float+0x142>
 800a754:	1cc8      	adds	r0, r1, #3
 800a756:	db02      	blt.n	800a75e <_printf_float+0x13a>
 800a758:	6863      	ldr	r3, [r4, #4]
 800a75a:	4299      	cmp	r1, r3
 800a75c:	dd41      	ble.n	800a7e2 <_printf_float+0x1be>
 800a75e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a762:	fa5f fb8b 	uxtb.w	fp, fp
 800a766:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a76a:	d820      	bhi.n	800a7ae <_printf_float+0x18a>
 800a76c:	3901      	subs	r1, #1
 800a76e:	465a      	mov	r2, fp
 800a770:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a774:	9109      	str	r1, [sp, #36]	; 0x24
 800a776:	f7ff ff17 	bl	800a5a8 <__exponent>
 800a77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a77c:	1813      	adds	r3, r2, r0
 800a77e:	2a01      	cmp	r2, #1
 800a780:	4681      	mov	r9, r0
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	dc02      	bgt.n	800a78c <_printf_float+0x168>
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	07d2      	lsls	r2, r2, #31
 800a78a:	d501      	bpl.n	800a790 <_printf_float+0x16c>
 800a78c:	3301      	adds	r3, #1
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a794:	2b00      	cmp	r3, #0
 800a796:	d09c      	beq.n	800a6d2 <_printf_float+0xae>
 800a798:	232d      	movs	r3, #45	; 0x2d
 800a79a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a79e:	e798      	b.n	800a6d2 <_printf_float+0xae>
 800a7a0:	9a06      	ldr	r2, [sp, #24]
 800a7a2:	2a47      	cmp	r2, #71	; 0x47
 800a7a4:	d1be      	bne.n	800a724 <_printf_float+0x100>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1bc      	bne.n	800a724 <_printf_float+0x100>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e7b9      	b.n	800a722 <_printf_float+0xfe>
 800a7ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7b2:	d118      	bne.n	800a7e6 <_printf_float+0x1c2>
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	6863      	ldr	r3, [r4, #4]
 800a7b8:	dd0b      	ble.n	800a7d2 <_printf_float+0x1ae>
 800a7ba:	6121      	str	r1, [r4, #16]
 800a7bc:	b913      	cbnz	r3, 800a7c4 <_printf_float+0x1a0>
 800a7be:	6822      	ldr	r2, [r4, #0]
 800a7c0:	07d0      	lsls	r0, r2, #31
 800a7c2:	d502      	bpl.n	800a7ca <_printf_float+0x1a6>
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	440b      	add	r3, r1
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7cc:	f04f 0900 	mov.w	r9, #0
 800a7d0:	e7de      	b.n	800a790 <_printf_float+0x16c>
 800a7d2:	b913      	cbnz	r3, 800a7da <_printf_float+0x1b6>
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	07d2      	lsls	r2, r2, #31
 800a7d8:	d501      	bpl.n	800a7de <_printf_float+0x1ba>
 800a7da:	3302      	adds	r3, #2
 800a7dc:	e7f4      	b.n	800a7c8 <_printf_float+0x1a4>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e7f2      	b.n	800a7c8 <_printf_float+0x1a4>
 800a7e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e8:	4299      	cmp	r1, r3
 800a7ea:	db05      	blt.n	800a7f8 <_printf_float+0x1d4>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	6121      	str	r1, [r4, #16]
 800a7f0:	07d8      	lsls	r0, r3, #31
 800a7f2:	d5ea      	bpl.n	800a7ca <_printf_float+0x1a6>
 800a7f4:	1c4b      	adds	r3, r1, #1
 800a7f6:	e7e7      	b.n	800a7c8 <_printf_float+0x1a4>
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	bfd4      	ite	le
 800a7fc:	f1c1 0202 	rsble	r2, r1, #2
 800a800:	2201      	movgt	r2, #1
 800a802:	4413      	add	r3, r2
 800a804:	e7e0      	b.n	800a7c8 <_printf_float+0x1a4>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	055a      	lsls	r2, r3, #21
 800a80a:	d407      	bmi.n	800a81c <_printf_float+0x1f8>
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	4642      	mov	r2, r8
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	d12c      	bne.n	800a874 <_printf_float+0x250>
 800a81a:	e764      	b.n	800a6e6 <_printf_float+0xc2>
 800a81c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a820:	f240 80e0 	bls.w	800a9e4 <_printf_float+0x3c0>
 800a824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a828:	2200      	movs	r2, #0
 800a82a:	2300      	movs	r3, #0
 800a82c:	f7f6 f96c 	bl	8000b08 <__aeabi_dcmpeq>
 800a830:	2800      	cmp	r0, #0
 800a832:	d034      	beq.n	800a89e <_printf_float+0x27a>
 800a834:	4a37      	ldr	r2, [pc, #220]	; (800a914 <_printf_float+0x2f0>)
 800a836:	2301      	movs	r3, #1
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f af51 	beq.w	800a6e6 <_printf_float+0xc2>
 800a844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a848:	429a      	cmp	r2, r3
 800a84a:	db02      	blt.n	800a852 <_printf_float+0x22e>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	07d8      	lsls	r0, r3, #31
 800a850:	d510      	bpl.n	800a874 <_printf_float+0x250>
 800a852:	ee18 3a10 	vmov	r3, s16
 800a856:	4652      	mov	r2, sl
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f af41 	beq.w	800a6e6 <_printf_float+0xc2>
 800a864:	f04f 0800 	mov.w	r8, #0
 800a868:	f104 091a 	add.w	r9, r4, #26
 800a86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a86e:	3b01      	subs	r3, #1
 800a870:	4543      	cmp	r3, r8
 800a872:	dc09      	bgt.n	800a888 <_printf_float+0x264>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	079b      	lsls	r3, r3, #30
 800a878:	f100 8105 	bmi.w	800aa86 <_printf_float+0x462>
 800a87c:	68e0      	ldr	r0, [r4, #12]
 800a87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a880:	4298      	cmp	r0, r3
 800a882:	bfb8      	it	lt
 800a884:	4618      	movlt	r0, r3
 800a886:	e730      	b.n	800a6ea <_printf_float+0xc6>
 800a888:	2301      	movs	r3, #1
 800a88a:	464a      	mov	r2, r9
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f af27 	beq.w	800a6e6 <_printf_float+0xc2>
 800a898:	f108 0801 	add.w	r8, r8, #1
 800a89c:	e7e6      	b.n	800a86c <_printf_float+0x248>
 800a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc39      	bgt.n	800a918 <_printf_float+0x2f4>
 800a8a4:	4a1b      	ldr	r2, [pc, #108]	; (800a914 <_printf_float+0x2f0>)
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af19 	beq.w	800a6e6 <_printf_float+0xc2>
 800a8b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	d102      	bne.n	800a8c2 <_printf_float+0x29e>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	07d9      	lsls	r1, r3, #31
 800a8c0:	d5d8      	bpl.n	800a874 <_printf_float+0x250>
 800a8c2:	ee18 3a10 	vmov	r3, s16
 800a8c6:	4652      	mov	r2, sl
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b8      	blx	r7
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f43f af09 	beq.w	800a6e6 <_printf_float+0xc2>
 800a8d4:	f04f 0900 	mov.w	r9, #0
 800a8d8:	f104 0a1a 	add.w	sl, r4, #26
 800a8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8de:	425b      	negs	r3, r3
 800a8e0:	454b      	cmp	r3, r9
 800a8e2:	dc01      	bgt.n	800a8e8 <_printf_float+0x2c4>
 800a8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e6:	e792      	b.n	800a80e <_printf_float+0x1ea>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f aef7 	beq.w	800a6e6 <_printf_float+0xc2>
 800a8f8:	f109 0901 	add.w	r9, r9, #1
 800a8fc:	e7ee      	b.n	800a8dc <_printf_float+0x2b8>
 800a8fe:	bf00      	nop
 800a900:	7fefffff 	.word	0x7fefffff
 800a904:	080114a4 	.word	0x080114a4
 800a908:	080114a8 	.word	0x080114a8
 800a90c:	080114b0 	.word	0x080114b0
 800a910:	080114ac 	.word	0x080114ac
 800a914:	080118a9 	.word	0x080118a9
 800a918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a91a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a91c:	429a      	cmp	r2, r3
 800a91e:	bfa8      	it	ge
 800a920:	461a      	movge	r2, r3
 800a922:	2a00      	cmp	r2, #0
 800a924:	4691      	mov	r9, r2
 800a926:	dc37      	bgt.n	800a998 <_printf_float+0x374>
 800a928:	f04f 0b00 	mov.w	fp, #0
 800a92c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a930:	f104 021a 	add.w	r2, r4, #26
 800a934:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a936:	9305      	str	r3, [sp, #20]
 800a938:	eba3 0309 	sub.w	r3, r3, r9
 800a93c:	455b      	cmp	r3, fp
 800a93e:	dc33      	bgt.n	800a9a8 <_printf_float+0x384>
 800a940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a944:	429a      	cmp	r2, r3
 800a946:	db3b      	blt.n	800a9c0 <_printf_float+0x39c>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d438      	bmi.n	800a9c0 <_printf_float+0x39c>
 800a94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a950:	9a05      	ldr	r2, [sp, #20]
 800a952:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a954:	1a9a      	subs	r2, r3, r2
 800a956:	eba3 0901 	sub.w	r9, r3, r1
 800a95a:	4591      	cmp	r9, r2
 800a95c:	bfa8      	it	ge
 800a95e:	4691      	movge	r9, r2
 800a960:	f1b9 0f00 	cmp.w	r9, #0
 800a964:	dc35      	bgt.n	800a9d2 <_printf_float+0x3ae>
 800a966:	f04f 0800 	mov.w	r8, #0
 800a96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a96e:	f104 0a1a 	add.w	sl, r4, #26
 800a972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a976:	1a9b      	subs	r3, r3, r2
 800a978:	eba3 0309 	sub.w	r3, r3, r9
 800a97c:	4543      	cmp	r3, r8
 800a97e:	f77f af79 	ble.w	800a874 <_printf_float+0x250>
 800a982:	2301      	movs	r3, #1
 800a984:	4652      	mov	r2, sl
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	f43f aeaa 	beq.w	800a6e6 <_printf_float+0xc2>
 800a992:	f108 0801 	add.w	r8, r8, #1
 800a996:	e7ec      	b.n	800a972 <_printf_float+0x34e>
 800a998:	4613      	mov	r3, r2
 800a99a:	4631      	mov	r1, r6
 800a99c:	4642      	mov	r2, r8
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	d1c0      	bne.n	800a928 <_printf_float+0x304>
 800a9a6:	e69e      	b.n	800a6e6 <_printf_float+0xc2>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	9205      	str	r2, [sp, #20]
 800a9b0:	47b8      	blx	r7
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	f43f ae97 	beq.w	800a6e6 <_printf_float+0xc2>
 800a9b8:	9a05      	ldr	r2, [sp, #20]
 800a9ba:	f10b 0b01 	add.w	fp, fp, #1
 800a9be:	e7b9      	b.n	800a934 <_printf_float+0x310>
 800a9c0:	ee18 3a10 	vmov	r3, s16
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d1be      	bne.n	800a94e <_printf_float+0x32a>
 800a9d0:	e689      	b.n	800a6e6 <_printf_float+0xc2>
 800a9d2:	9a05      	ldr	r2, [sp, #20]
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	4442      	add	r2, r8
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d1c1      	bne.n	800a966 <_printf_float+0x342>
 800a9e2:	e680      	b.n	800a6e6 <_printf_float+0xc2>
 800a9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9e6:	2a01      	cmp	r2, #1
 800a9e8:	dc01      	bgt.n	800a9ee <_printf_float+0x3ca>
 800a9ea:	07db      	lsls	r3, r3, #31
 800a9ec:	d538      	bpl.n	800aa60 <_printf_float+0x43c>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f43f ae74 	beq.w	800a6e6 <_printf_float+0xc2>
 800a9fe:	ee18 3a10 	vmov	r3, s16
 800aa02:	4652      	mov	r2, sl
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b8      	blx	r7
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	f43f ae6b 	beq.w	800a6e6 <_printf_float+0xc2>
 800aa10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	f7f6 f876 	bl	8000b08 <__aeabi_dcmpeq>
 800aa1c:	b9d8      	cbnz	r0, 800aa56 <_printf_float+0x432>
 800aa1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa20:	f108 0201 	add.w	r2, r8, #1
 800aa24:	3b01      	subs	r3, #1
 800aa26:	4631      	mov	r1, r6
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b8      	blx	r7
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d10e      	bne.n	800aa4e <_printf_float+0x42a>
 800aa30:	e659      	b.n	800a6e6 <_printf_float+0xc2>
 800aa32:	2301      	movs	r3, #1
 800aa34:	4652      	mov	r2, sl
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f ae52 	beq.w	800a6e6 <_printf_float+0xc2>
 800aa42:	f108 0801 	add.w	r8, r8, #1
 800aa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	4543      	cmp	r3, r8
 800aa4c:	dcf1      	bgt.n	800aa32 <_printf_float+0x40e>
 800aa4e:	464b      	mov	r3, r9
 800aa50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa54:	e6dc      	b.n	800a810 <_printf_float+0x1ec>
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	f104 0a1a 	add.w	sl, r4, #26
 800aa5e:	e7f2      	b.n	800aa46 <_printf_float+0x422>
 800aa60:	2301      	movs	r3, #1
 800aa62:	4642      	mov	r2, r8
 800aa64:	e7df      	b.n	800aa26 <_printf_float+0x402>
 800aa66:	2301      	movs	r3, #1
 800aa68:	464a      	mov	r2, r9
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f ae38 	beq.w	800a6e6 <_printf_float+0xc2>
 800aa76:	f108 0801 	add.w	r8, r8, #1
 800aa7a:	68e3      	ldr	r3, [r4, #12]
 800aa7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa7e:	1a5b      	subs	r3, r3, r1
 800aa80:	4543      	cmp	r3, r8
 800aa82:	dcf0      	bgt.n	800aa66 <_printf_float+0x442>
 800aa84:	e6fa      	b.n	800a87c <_printf_float+0x258>
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	f104 0919 	add.w	r9, r4, #25
 800aa8e:	e7f4      	b.n	800aa7a <_printf_float+0x456>

0800aa90 <_printf_common>:
 800aa90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa94:	4616      	mov	r6, r2
 800aa96:	4699      	mov	r9, r3
 800aa98:	688a      	ldr	r2, [r1, #8]
 800aa9a:	690b      	ldr	r3, [r1, #16]
 800aa9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	bfb8      	it	lt
 800aaa4:	4613      	movlt	r3, r2
 800aaa6:	6033      	str	r3, [r6, #0]
 800aaa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaac:	4607      	mov	r7, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	b10a      	cbz	r2, 800aab6 <_printf_common+0x26>
 800aab2:	3301      	adds	r3, #1
 800aab4:	6033      	str	r3, [r6, #0]
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	0699      	lsls	r1, r3, #26
 800aaba:	bf42      	ittt	mi
 800aabc:	6833      	ldrmi	r3, [r6, #0]
 800aabe:	3302      	addmi	r3, #2
 800aac0:	6033      	strmi	r3, [r6, #0]
 800aac2:	6825      	ldr	r5, [r4, #0]
 800aac4:	f015 0506 	ands.w	r5, r5, #6
 800aac8:	d106      	bne.n	800aad8 <_printf_common+0x48>
 800aaca:	f104 0a19 	add.w	sl, r4, #25
 800aace:	68e3      	ldr	r3, [r4, #12]
 800aad0:	6832      	ldr	r2, [r6, #0]
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	42ab      	cmp	r3, r5
 800aad6:	dc26      	bgt.n	800ab26 <_printf_common+0x96>
 800aad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aadc:	1e13      	subs	r3, r2, #0
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	bf18      	it	ne
 800aae2:	2301      	movne	r3, #1
 800aae4:	0692      	lsls	r2, r2, #26
 800aae6:	d42b      	bmi.n	800ab40 <_printf_common+0xb0>
 800aae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaec:	4649      	mov	r1, r9
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d01e      	beq.n	800ab34 <_printf_common+0xa4>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	68e5      	ldr	r5, [r4, #12]
 800aafa:	6832      	ldr	r2, [r6, #0]
 800aafc:	f003 0306 	and.w	r3, r3, #6
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	bf08      	it	eq
 800ab04:	1aad      	subeq	r5, r5, r2
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	6922      	ldr	r2, [r4, #16]
 800ab0a:	bf0c      	ite	eq
 800ab0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab10:	2500      	movne	r5, #0
 800ab12:	4293      	cmp	r3, r2
 800ab14:	bfc4      	itt	gt
 800ab16:	1a9b      	subgt	r3, r3, r2
 800ab18:	18ed      	addgt	r5, r5, r3
 800ab1a:	2600      	movs	r6, #0
 800ab1c:	341a      	adds	r4, #26
 800ab1e:	42b5      	cmp	r5, r6
 800ab20:	d11a      	bne.n	800ab58 <_printf_common+0xc8>
 800ab22:	2000      	movs	r0, #0
 800ab24:	e008      	b.n	800ab38 <_printf_common+0xa8>
 800ab26:	2301      	movs	r3, #1
 800ab28:	4652      	mov	r2, sl
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	47c0      	blx	r8
 800ab30:	3001      	adds	r0, #1
 800ab32:	d103      	bne.n	800ab3c <_printf_common+0xac>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	e7c6      	b.n	800aace <_printf_common+0x3e>
 800ab40:	18e1      	adds	r1, r4, r3
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	2030      	movs	r0, #48	; 0x30
 800ab46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab4a:	4422      	add	r2, r4
 800ab4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab54:	3302      	adds	r3, #2
 800ab56:	e7c7      	b.n	800aae8 <_printf_common+0x58>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	4638      	mov	r0, r7
 800ab60:	47c0      	blx	r8
 800ab62:	3001      	adds	r0, #1
 800ab64:	d0e6      	beq.n	800ab34 <_printf_common+0xa4>
 800ab66:	3601      	adds	r6, #1
 800ab68:	e7d9      	b.n	800ab1e <_printf_common+0x8e>
	...

0800ab6c <_printf_i>:
 800ab6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	7e0f      	ldrb	r7, [r1, #24]
 800ab72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab74:	2f78      	cmp	r7, #120	; 0x78
 800ab76:	4691      	mov	r9, r2
 800ab78:	4680      	mov	r8, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab82:	d807      	bhi.n	800ab94 <_printf_i+0x28>
 800ab84:	2f62      	cmp	r7, #98	; 0x62
 800ab86:	d80a      	bhi.n	800ab9e <_printf_i+0x32>
 800ab88:	2f00      	cmp	r7, #0
 800ab8a:	f000 80d8 	beq.w	800ad3e <_printf_i+0x1d2>
 800ab8e:	2f58      	cmp	r7, #88	; 0x58
 800ab90:	f000 80a3 	beq.w	800acda <_printf_i+0x16e>
 800ab94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab9c:	e03a      	b.n	800ac14 <_printf_i+0xa8>
 800ab9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aba2:	2b15      	cmp	r3, #21
 800aba4:	d8f6      	bhi.n	800ab94 <_printf_i+0x28>
 800aba6:	a101      	add	r1, pc, #4	; (adr r1, 800abac <_printf_i+0x40>)
 800aba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abac:	0800ac05 	.word	0x0800ac05
 800abb0:	0800ac19 	.word	0x0800ac19
 800abb4:	0800ab95 	.word	0x0800ab95
 800abb8:	0800ab95 	.word	0x0800ab95
 800abbc:	0800ab95 	.word	0x0800ab95
 800abc0:	0800ab95 	.word	0x0800ab95
 800abc4:	0800ac19 	.word	0x0800ac19
 800abc8:	0800ab95 	.word	0x0800ab95
 800abcc:	0800ab95 	.word	0x0800ab95
 800abd0:	0800ab95 	.word	0x0800ab95
 800abd4:	0800ab95 	.word	0x0800ab95
 800abd8:	0800ad25 	.word	0x0800ad25
 800abdc:	0800ac49 	.word	0x0800ac49
 800abe0:	0800ad07 	.word	0x0800ad07
 800abe4:	0800ab95 	.word	0x0800ab95
 800abe8:	0800ab95 	.word	0x0800ab95
 800abec:	0800ad47 	.word	0x0800ad47
 800abf0:	0800ab95 	.word	0x0800ab95
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800ab95 	.word	0x0800ab95
 800abfc:	0800ab95 	.word	0x0800ab95
 800ac00:	0800ad0f 	.word	0x0800ad0f
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	1d1a      	adds	r2, r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	602a      	str	r2, [r5, #0]
 800ac0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac14:	2301      	movs	r3, #1
 800ac16:	e0a3      	b.n	800ad60 <_printf_i+0x1f4>
 800ac18:	6820      	ldr	r0, [r4, #0]
 800ac1a:	6829      	ldr	r1, [r5, #0]
 800ac1c:	0606      	lsls	r6, r0, #24
 800ac1e:	f101 0304 	add.w	r3, r1, #4
 800ac22:	d50a      	bpl.n	800ac3a <_printf_i+0xce>
 800ac24:	680e      	ldr	r6, [r1, #0]
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	2e00      	cmp	r6, #0
 800ac2a:	da03      	bge.n	800ac34 <_printf_i+0xc8>
 800ac2c:	232d      	movs	r3, #45	; 0x2d
 800ac2e:	4276      	negs	r6, r6
 800ac30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac34:	485e      	ldr	r0, [pc, #376]	; (800adb0 <_printf_i+0x244>)
 800ac36:	230a      	movs	r3, #10
 800ac38:	e019      	b.n	800ac6e <_printf_i+0x102>
 800ac3a:	680e      	ldr	r6, [r1, #0]
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac42:	bf18      	it	ne
 800ac44:	b236      	sxthne	r6, r6
 800ac46:	e7ef      	b.n	800ac28 <_printf_i+0xbc>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	6820      	ldr	r0, [r4, #0]
 800ac4c:	1d19      	adds	r1, r3, #4
 800ac4e:	6029      	str	r1, [r5, #0]
 800ac50:	0601      	lsls	r1, r0, #24
 800ac52:	d501      	bpl.n	800ac58 <_printf_i+0xec>
 800ac54:	681e      	ldr	r6, [r3, #0]
 800ac56:	e002      	b.n	800ac5e <_printf_i+0xf2>
 800ac58:	0646      	lsls	r6, r0, #25
 800ac5a:	d5fb      	bpl.n	800ac54 <_printf_i+0xe8>
 800ac5c:	881e      	ldrh	r6, [r3, #0]
 800ac5e:	4854      	ldr	r0, [pc, #336]	; (800adb0 <_printf_i+0x244>)
 800ac60:	2f6f      	cmp	r7, #111	; 0x6f
 800ac62:	bf0c      	ite	eq
 800ac64:	2308      	moveq	r3, #8
 800ac66:	230a      	movne	r3, #10
 800ac68:	2100      	movs	r1, #0
 800ac6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac6e:	6865      	ldr	r5, [r4, #4]
 800ac70:	60a5      	str	r5, [r4, #8]
 800ac72:	2d00      	cmp	r5, #0
 800ac74:	bfa2      	ittt	ge
 800ac76:	6821      	ldrge	r1, [r4, #0]
 800ac78:	f021 0104 	bicge.w	r1, r1, #4
 800ac7c:	6021      	strge	r1, [r4, #0]
 800ac7e:	b90e      	cbnz	r6, 800ac84 <_printf_i+0x118>
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	d04d      	beq.n	800ad20 <_printf_i+0x1b4>
 800ac84:	4615      	mov	r5, r2
 800ac86:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac8a:	fb03 6711 	mls	r7, r3, r1, r6
 800ac8e:	5dc7      	ldrb	r7, [r0, r7]
 800ac90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac94:	4637      	mov	r7, r6
 800ac96:	42bb      	cmp	r3, r7
 800ac98:	460e      	mov	r6, r1
 800ac9a:	d9f4      	bls.n	800ac86 <_printf_i+0x11a>
 800ac9c:	2b08      	cmp	r3, #8
 800ac9e:	d10b      	bne.n	800acb8 <_printf_i+0x14c>
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	07de      	lsls	r6, r3, #31
 800aca4:	d508      	bpl.n	800acb8 <_printf_i+0x14c>
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	6861      	ldr	r1, [r4, #4]
 800acaa:	4299      	cmp	r1, r3
 800acac:	bfde      	ittt	le
 800acae:	2330      	movle	r3, #48	; 0x30
 800acb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acb8:	1b52      	subs	r2, r2, r5
 800acba:	6122      	str	r2, [r4, #16]
 800acbc:	f8cd a000 	str.w	sl, [sp]
 800acc0:	464b      	mov	r3, r9
 800acc2:	aa03      	add	r2, sp, #12
 800acc4:	4621      	mov	r1, r4
 800acc6:	4640      	mov	r0, r8
 800acc8:	f7ff fee2 	bl	800aa90 <_printf_common>
 800accc:	3001      	adds	r0, #1
 800acce:	d14c      	bne.n	800ad6a <_printf_i+0x1fe>
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	b004      	add	sp, #16
 800acd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acda:	4835      	ldr	r0, [pc, #212]	; (800adb0 <_printf_i+0x244>)
 800acdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ace0:	6829      	ldr	r1, [r5, #0]
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ace8:	6029      	str	r1, [r5, #0]
 800acea:	061d      	lsls	r5, r3, #24
 800acec:	d514      	bpl.n	800ad18 <_printf_i+0x1ac>
 800acee:	07df      	lsls	r7, r3, #31
 800acf0:	bf44      	itt	mi
 800acf2:	f043 0320 	orrmi.w	r3, r3, #32
 800acf6:	6023      	strmi	r3, [r4, #0]
 800acf8:	b91e      	cbnz	r6, 800ad02 <_printf_i+0x196>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	f023 0320 	bic.w	r3, r3, #32
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	2310      	movs	r3, #16
 800ad04:	e7b0      	b.n	800ac68 <_printf_i+0xfc>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f043 0320 	orr.w	r3, r3, #32
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	2378      	movs	r3, #120	; 0x78
 800ad10:	4828      	ldr	r0, [pc, #160]	; (800adb4 <_printf_i+0x248>)
 800ad12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad16:	e7e3      	b.n	800ace0 <_printf_i+0x174>
 800ad18:	0659      	lsls	r1, r3, #25
 800ad1a:	bf48      	it	mi
 800ad1c:	b2b6      	uxthmi	r6, r6
 800ad1e:	e7e6      	b.n	800acee <_printf_i+0x182>
 800ad20:	4615      	mov	r5, r2
 800ad22:	e7bb      	b.n	800ac9c <_printf_i+0x130>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	6826      	ldr	r6, [r4, #0]
 800ad28:	6961      	ldr	r1, [r4, #20]
 800ad2a:	1d18      	adds	r0, r3, #4
 800ad2c:	6028      	str	r0, [r5, #0]
 800ad2e:	0635      	lsls	r5, r6, #24
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	d501      	bpl.n	800ad38 <_printf_i+0x1cc>
 800ad34:	6019      	str	r1, [r3, #0]
 800ad36:	e002      	b.n	800ad3e <_printf_i+0x1d2>
 800ad38:	0670      	lsls	r0, r6, #25
 800ad3a:	d5fb      	bpl.n	800ad34 <_printf_i+0x1c8>
 800ad3c:	8019      	strh	r1, [r3, #0]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	4615      	mov	r5, r2
 800ad44:	e7ba      	b.n	800acbc <_printf_i+0x150>
 800ad46:	682b      	ldr	r3, [r5, #0]
 800ad48:	1d1a      	adds	r2, r3, #4
 800ad4a:	602a      	str	r2, [r5, #0]
 800ad4c:	681d      	ldr	r5, [r3, #0]
 800ad4e:	6862      	ldr	r2, [r4, #4]
 800ad50:	2100      	movs	r1, #0
 800ad52:	4628      	mov	r0, r5
 800ad54:	f7f5 fa64 	bl	8000220 <memchr>
 800ad58:	b108      	cbz	r0, 800ad5e <_printf_i+0x1f2>
 800ad5a:	1b40      	subs	r0, r0, r5
 800ad5c:	6060      	str	r0, [r4, #4]
 800ad5e:	6863      	ldr	r3, [r4, #4]
 800ad60:	6123      	str	r3, [r4, #16]
 800ad62:	2300      	movs	r3, #0
 800ad64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad68:	e7a8      	b.n	800acbc <_printf_i+0x150>
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	4649      	mov	r1, r9
 800ad70:	4640      	mov	r0, r8
 800ad72:	47d0      	blx	sl
 800ad74:	3001      	adds	r0, #1
 800ad76:	d0ab      	beq.n	800acd0 <_printf_i+0x164>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	079b      	lsls	r3, r3, #30
 800ad7c:	d413      	bmi.n	800ada6 <_printf_i+0x23a>
 800ad7e:	68e0      	ldr	r0, [r4, #12]
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	4298      	cmp	r0, r3
 800ad84:	bfb8      	it	lt
 800ad86:	4618      	movlt	r0, r3
 800ad88:	e7a4      	b.n	800acd4 <_printf_i+0x168>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4640      	mov	r0, r8
 800ad92:	47d0      	blx	sl
 800ad94:	3001      	adds	r0, #1
 800ad96:	d09b      	beq.n	800acd0 <_printf_i+0x164>
 800ad98:	3501      	adds	r5, #1
 800ad9a:	68e3      	ldr	r3, [r4, #12]
 800ad9c:	9903      	ldr	r1, [sp, #12]
 800ad9e:	1a5b      	subs	r3, r3, r1
 800ada0:	42ab      	cmp	r3, r5
 800ada2:	dcf2      	bgt.n	800ad8a <_printf_i+0x21e>
 800ada4:	e7eb      	b.n	800ad7e <_printf_i+0x212>
 800ada6:	2500      	movs	r5, #0
 800ada8:	f104 0619 	add.w	r6, r4, #25
 800adac:	e7f5      	b.n	800ad9a <_printf_i+0x22e>
 800adae:	bf00      	nop
 800adb0:	080114b4 	.word	0x080114b4
 800adb4:	080114c5 	.word	0x080114c5

0800adb8 <_scanf_float>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	b087      	sub	sp, #28
 800adbe:	4617      	mov	r7, r2
 800adc0:	9303      	str	r3, [sp, #12]
 800adc2:	688b      	ldr	r3, [r1, #8]
 800adc4:	1e5a      	subs	r2, r3, #1
 800adc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800adca:	bf83      	ittte	hi
 800adcc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800add0:	195b      	addhi	r3, r3, r5
 800add2:	9302      	strhi	r3, [sp, #8]
 800add4:	2300      	movls	r3, #0
 800add6:	bf86      	itte	hi
 800add8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800addc:	608b      	strhi	r3, [r1, #8]
 800adde:	9302      	strls	r3, [sp, #8]
 800ade0:	680b      	ldr	r3, [r1, #0]
 800ade2:	468b      	mov	fp, r1
 800ade4:	2500      	movs	r5, #0
 800ade6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800adea:	f84b 3b1c 	str.w	r3, [fp], #28
 800adee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800adf2:	4680      	mov	r8, r0
 800adf4:	460c      	mov	r4, r1
 800adf6:	465e      	mov	r6, fp
 800adf8:	46aa      	mov	sl, r5
 800adfa:	46a9      	mov	r9, r5
 800adfc:	9501      	str	r5, [sp, #4]
 800adfe:	68a2      	ldr	r2, [r4, #8]
 800ae00:	b152      	cbz	r2, 800ae18 <_scanf_float+0x60>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b4e      	cmp	r3, #78	; 0x4e
 800ae08:	d864      	bhi.n	800aed4 <_scanf_float+0x11c>
 800ae0a:	2b40      	cmp	r3, #64	; 0x40
 800ae0c:	d83c      	bhi.n	800ae88 <_scanf_float+0xd0>
 800ae0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ae12:	b2c8      	uxtb	r0, r1
 800ae14:	280e      	cmp	r0, #14
 800ae16:	d93a      	bls.n	800ae8e <_scanf_float+0xd6>
 800ae18:	f1b9 0f00 	cmp.w	r9, #0
 800ae1c:	d003      	beq.n	800ae26 <_scanf_float+0x6e>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae2a:	f1ba 0f01 	cmp.w	sl, #1
 800ae2e:	f200 8113 	bhi.w	800b058 <_scanf_float+0x2a0>
 800ae32:	455e      	cmp	r6, fp
 800ae34:	f200 8105 	bhi.w	800b042 <_scanf_float+0x28a>
 800ae38:	2501      	movs	r5, #1
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	b007      	add	sp, #28
 800ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ae46:	2a0d      	cmp	r2, #13
 800ae48:	d8e6      	bhi.n	800ae18 <_scanf_float+0x60>
 800ae4a:	a101      	add	r1, pc, #4	; (adr r1, 800ae50 <_scanf_float+0x98>)
 800ae4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae50:	0800af8f 	.word	0x0800af8f
 800ae54:	0800ae19 	.word	0x0800ae19
 800ae58:	0800ae19 	.word	0x0800ae19
 800ae5c:	0800ae19 	.word	0x0800ae19
 800ae60:	0800afef 	.word	0x0800afef
 800ae64:	0800afc7 	.word	0x0800afc7
 800ae68:	0800ae19 	.word	0x0800ae19
 800ae6c:	0800ae19 	.word	0x0800ae19
 800ae70:	0800af9d 	.word	0x0800af9d
 800ae74:	0800ae19 	.word	0x0800ae19
 800ae78:	0800ae19 	.word	0x0800ae19
 800ae7c:	0800ae19 	.word	0x0800ae19
 800ae80:	0800ae19 	.word	0x0800ae19
 800ae84:	0800af55 	.word	0x0800af55
 800ae88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ae8c:	e7db      	b.n	800ae46 <_scanf_float+0x8e>
 800ae8e:	290e      	cmp	r1, #14
 800ae90:	d8c2      	bhi.n	800ae18 <_scanf_float+0x60>
 800ae92:	a001      	add	r0, pc, #4	; (adr r0, 800ae98 <_scanf_float+0xe0>)
 800ae94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae98:	0800af47 	.word	0x0800af47
 800ae9c:	0800ae19 	.word	0x0800ae19
 800aea0:	0800af47 	.word	0x0800af47
 800aea4:	0800afdb 	.word	0x0800afdb
 800aea8:	0800ae19 	.word	0x0800ae19
 800aeac:	0800aef5 	.word	0x0800aef5
 800aeb0:	0800af31 	.word	0x0800af31
 800aeb4:	0800af31 	.word	0x0800af31
 800aeb8:	0800af31 	.word	0x0800af31
 800aebc:	0800af31 	.word	0x0800af31
 800aec0:	0800af31 	.word	0x0800af31
 800aec4:	0800af31 	.word	0x0800af31
 800aec8:	0800af31 	.word	0x0800af31
 800aecc:	0800af31 	.word	0x0800af31
 800aed0:	0800af31 	.word	0x0800af31
 800aed4:	2b6e      	cmp	r3, #110	; 0x6e
 800aed6:	d809      	bhi.n	800aeec <_scanf_float+0x134>
 800aed8:	2b60      	cmp	r3, #96	; 0x60
 800aeda:	d8b2      	bhi.n	800ae42 <_scanf_float+0x8a>
 800aedc:	2b54      	cmp	r3, #84	; 0x54
 800aede:	d077      	beq.n	800afd0 <_scanf_float+0x218>
 800aee0:	2b59      	cmp	r3, #89	; 0x59
 800aee2:	d199      	bne.n	800ae18 <_scanf_float+0x60>
 800aee4:	2d07      	cmp	r5, #7
 800aee6:	d197      	bne.n	800ae18 <_scanf_float+0x60>
 800aee8:	2508      	movs	r5, #8
 800aeea:	e029      	b.n	800af40 <_scanf_float+0x188>
 800aeec:	2b74      	cmp	r3, #116	; 0x74
 800aeee:	d06f      	beq.n	800afd0 <_scanf_float+0x218>
 800aef0:	2b79      	cmp	r3, #121	; 0x79
 800aef2:	e7f6      	b.n	800aee2 <_scanf_float+0x12a>
 800aef4:	6821      	ldr	r1, [r4, #0]
 800aef6:	05c8      	lsls	r0, r1, #23
 800aef8:	d51a      	bpl.n	800af30 <_scanf_float+0x178>
 800aefa:	9b02      	ldr	r3, [sp, #8]
 800aefc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800af00:	6021      	str	r1, [r4, #0]
 800af02:	f109 0901 	add.w	r9, r9, #1
 800af06:	b11b      	cbz	r3, 800af10 <_scanf_float+0x158>
 800af08:	3b01      	subs	r3, #1
 800af0a:	3201      	adds	r2, #1
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	60a2      	str	r2, [r4, #8]
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	3b01      	subs	r3, #1
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	3301      	adds	r3, #1
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3b01      	subs	r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	607b      	str	r3, [r7, #4]
 800af24:	f340 8084 	ble.w	800b030 <_scanf_float+0x278>
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	3301      	adds	r3, #1
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	e766      	b.n	800adfe <_scanf_float+0x46>
 800af30:	eb1a 0f05 	cmn.w	sl, r5
 800af34:	f47f af70 	bne.w	800ae18 <_scanf_float+0x60>
 800af38:	6822      	ldr	r2, [r4, #0]
 800af3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800af3e:	6022      	str	r2, [r4, #0]
 800af40:	f806 3b01 	strb.w	r3, [r6], #1
 800af44:	e7e4      	b.n	800af10 <_scanf_float+0x158>
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	0610      	lsls	r0, r2, #24
 800af4a:	f57f af65 	bpl.w	800ae18 <_scanf_float+0x60>
 800af4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af52:	e7f4      	b.n	800af3e <_scanf_float+0x186>
 800af54:	f1ba 0f00 	cmp.w	sl, #0
 800af58:	d10e      	bne.n	800af78 <_scanf_float+0x1c0>
 800af5a:	f1b9 0f00 	cmp.w	r9, #0
 800af5e:	d10e      	bne.n	800af7e <_scanf_float+0x1c6>
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af6a:	d108      	bne.n	800af7e <_scanf_float+0x1c6>
 800af6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af70:	6022      	str	r2, [r4, #0]
 800af72:	f04f 0a01 	mov.w	sl, #1
 800af76:	e7e3      	b.n	800af40 <_scanf_float+0x188>
 800af78:	f1ba 0f02 	cmp.w	sl, #2
 800af7c:	d055      	beq.n	800b02a <_scanf_float+0x272>
 800af7e:	2d01      	cmp	r5, #1
 800af80:	d002      	beq.n	800af88 <_scanf_float+0x1d0>
 800af82:	2d04      	cmp	r5, #4
 800af84:	f47f af48 	bne.w	800ae18 <_scanf_float+0x60>
 800af88:	3501      	adds	r5, #1
 800af8a:	b2ed      	uxtb	r5, r5
 800af8c:	e7d8      	b.n	800af40 <_scanf_float+0x188>
 800af8e:	f1ba 0f01 	cmp.w	sl, #1
 800af92:	f47f af41 	bne.w	800ae18 <_scanf_float+0x60>
 800af96:	f04f 0a02 	mov.w	sl, #2
 800af9a:	e7d1      	b.n	800af40 <_scanf_float+0x188>
 800af9c:	b97d      	cbnz	r5, 800afbe <_scanf_float+0x206>
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	f47f af3c 	bne.w	800ae1e <_scanf_float+0x66>
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800afac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800afb0:	f47f af39 	bne.w	800ae26 <_scanf_float+0x6e>
 800afb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afb8:	6022      	str	r2, [r4, #0]
 800afba:	2501      	movs	r5, #1
 800afbc:	e7c0      	b.n	800af40 <_scanf_float+0x188>
 800afbe:	2d03      	cmp	r5, #3
 800afc0:	d0e2      	beq.n	800af88 <_scanf_float+0x1d0>
 800afc2:	2d05      	cmp	r5, #5
 800afc4:	e7de      	b.n	800af84 <_scanf_float+0x1cc>
 800afc6:	2d02      	cmp	r5, #2
 800afc8:	f47f af26 	bne.w	800ae18 <_scanf_float+0x60>
 800afcc:	2503      	movs	r5, #3
 800afce:	e7b7      	b.n	800af40 <_scanf_float+0x188>
 800afd0:	2d06      	cmp	r5, #6
 800afd2:	f47f af21 	bne.w	800ae18 <_scanf_float+0x60>
 800afd6:	2507      	movs	r5, #7
 800afd8:	e7b2      	b.n	800af40 <_scanf_float+0x188>
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	0591      	lsls	r1, r2, #22
 800afde:	f57f af1b 	bpl.w	800ae18 <_scanf_float+0x60>
 800afe2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	f8cd 9004 	str.w	r9, [sp, #4]
 800afec:	e7a8      	b.n	800af40 <_scanf_float+0x188>
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aff4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aff8:	d006      	beq.n	800b008 <_scanf_float+0x250>
 800affa:	0550      	lsls	r0, r2, #21
 800affc:	f57f af0c 	bpl.w	800ae18 <_scanf_float+0x60>
 800b000:	f1b9 0f00 	cmp.w	r9, #0
 800b004:	f43f af0f 	beq.w	800ae26 <_scanf_float+0x6e>
 800b008:	0591      	lsls	r1, r2, #22
 800b00a:	bf58      	it	pl
 800b00c:	9901      	ldrpl	r1, [sp, #4]
 800b00e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b012:	bf58      	it	pl
 800b014:	eba9 0101 	subpl.w	r1, r9, r1
 800b018:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b01c:	bf58      	it	pl
 800b01e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b022:	6022      	str	r2, [r4, #0]
 800b024:	f04f 0900 	mov.w	r9, #0
 800b028:	e78a      	b.n	800af40 <_scanf_float+0x188>
 800b02a:	f04f 0a03 	mov.w	sl, #3
 800b02e:	e787      	b.n	800af40 <_scanf_float+0x188>
 800b030:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b034:	4639      	mov	r1, r7
 800b036:	4640      	mov	r0, r8
 800b038:	4798      	blx	r3
 800b03a:	2800      	cmp	r0, #0
 800b03c:	f43f aedf 	beq.w	800adfe <_scanf_float+0x46>
 800b040:	e6ea      	b.n	800ae18 <_scanf_float+0x60>
 800b042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b04a:	463a      	mov	r2, r7
 800b04c:	4640      	mov	r0, r8
 800b04e:	4798      	blx	r3
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	3b01      	subs	r3, #1
 800b054:	6123      	str	r3, [r4, #16]
 800b056:	e6ec      	b.n	800ae32 <_scanf_float+0x7a>
 800b058:	1e6b      	subs	r3, r5, #1
 800b05a:	2b06      	cmp	r3, #6
 800b05c:	d825      	bhi.n	800b0aa <_scanf_float+0x2f2>
 800b05e:	2d02      	cmp	r5, #2
 800b060:	d836      	bhi.n	800b0d0 <_scanf_float+0x318>
 800b062:	455e      	cmp	r6, fp
 800b064:	f67f aee8 	bls.w	800ae38 <_scanf_float+0x80>
 800b068:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b06c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b070:	463a      	mov	r2, r7
 800b072:	4640      	mov	r0, r8
 800b074:	4798      	blx	r3
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	3b01      	subs	r3, #1
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	e7f1      	b.n	800b062 <_scanf_float+0x2aa>
 800b07e:	9802      	ldr	r0, [sp, #8]
 800b080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b084:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b088:	9002      	str	r0, [sp, #8]
 800b08a:	463a      	mov	r2, r7
 800b08c:	4640      	mov	r0, r8
 800b08e:	4798      	blx	r3
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	3b01      	subs	r3, #1
 800b094:	6123      	str	r3, [r4, #16]
 800b096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b09a:	fa5f fa8a 	uxtb.w	sl, sl
 800b09e:	f1ba 0f02 	cmp.w	sl, #2
 800b0a2:	d1ec      	bne.n	800b07e <_scanf_float+0x2c6>
 800b0a4:	3d03      	subs	r5, #3
 800b0a6:	b2ed      	uxtb	r5, r5
 800b0a8:	1b76      	subs	r6, r6, r5
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	05da      	lsls	r2, r3, #23
 800b0ae:	d52f      	bpl.n	800b110 <_scanf_float+0x358>
 800b0b0:	055b      	lsls	r3, r3, #21
 800b0b2:	d510      	bpl.n	800b0d6 <_scanf_float+0x31e>
 800b0b4:	455e      	cmp	r6, fp
 800b0b6:	f67f aebf 	bls.w	800ae38 <_scanf_float+0x80>
 800b0ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0c2:	463a      	mov	r2, r7
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4798      	blx	r3
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	6123      	str	r3, [r4, #16]
 800b0ce:	e7f1      	b.n	800b0b4 <_scanf_float+0x2fc>
 800b0d0:	46aa      	mov	sl, r5
 800b0d2:	9602      	str	r6, [sp, #8]
 800b0d4:	e7df      	b.n	800b096 <_scanf_float+0x2de>
 800b0d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	2965      	cmp	r1, #101	; 0x65
 800b0de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b0e6:	6123      	str	r3, [r4, #16]
 800b0e8:	d00c      	beq.n	800b104 <_scanf_float+0x34c>
 800b0ea:	2945      	cmp	r1, #69	; 0x45
 800b0ec:	d00a      	beq.n	800b104 <_scanf_float+0x34c>
 800b0ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	4798      	blx	r3
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	1eb5      	subs	r5, r6, #2
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b108:	463a      	mov	r2, r7
 800b10a:	4640      	mov	r0, r8
 800b10c:	4798      	blx	r3
 800b10e:	462e      	mov	r6, r5
 800b110:	6825      	ldr	r5, [r4, #0]
 800b112:	f015 0510 	ands.w	r5, r5, #16
 800b116:	d159      	bne.n	800b1cc <_scanf_float+0x414>
 800b118:	7035      	strb	r5, [r6, #0]
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b124:	d11b      	bne.n	800b15e <_scanf_float+0x3a6>
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	454b      	cmp	r3, r9
 800b12a:	eba3 0209 	sub.w	r2, r3, r9
 800b12e:	d123      	bne.n	800b178 <_scanf_float+0x3c0>
 800b130:	2200      	movs	r2, #0
 800b132:	4659      	mov	r1, fp
 800b134:	4640      	mov	r0, r8
 800b136:	f000 ff29 	bl	800bf8c <_strtod_r>
 800b13a:	6822      	ldr	r2, [r4, #0]
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	f012 0f02 	tst.w	r2, #2
 800b142:	ec57 6b10 	vmov	r6, r7, d0
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	d021      	beq.n	800b18e <_scanf_float+0x3d6>
 800b14a:	9903      	ldr	r1, [sp, #12]
 800b14c:	1d1a      	adds	r2, r3, #4
 800b14e:	600a      	str	r2, [r1, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	e9c3 6700 	strd	r6, r7, [r3]
 800b156:	68e3      	ldr	r3, [r4, #12]
 800b158:	3301      	adds	r3, #1
 800b15a:	60e3      	str	r3, [r4, #12]
 800b15c:	e66d      	b.n	800ae3a <_scanf_float+0x82>
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0e5      	beq.n	800b130 <_scanf_float+0x378>
 800b164:	9905      	ldr	r1, [sp, #20]
 800b166:	230a      	movs	r3, #10
 800b168:	462a      	mov	r2, r5
 800b16a:	3101      	adds	r1, #1
 800b16c:	4640      	mov	r0, r8
 800b16e:	f000 ff95 	bl	800c09c <_strtol_r>
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	9e05      	ldr	r6, [sp, #20]
 800b176:	1ac2      	subs	r2, r0, r3
 800b178:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b17c:	429e      	cmp	r6, r3
 800b17e:	bf28      	it	cs
 800b180:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b184:	4912      	ldr	r1, [pc, #72]	; (800b1d0 <_scanf_float+0x418>)
 800b186:	4630      	mov	r0, r6
 800b188:	f000 f82c 	bl	800b1e4 <siprintf>
 800b18c:	e7d0      	b.n	800b130 <_scanf_float+0x378>
 800b18e:	9903      	ldr	r1, [sp, #12]
 800b190:	f012 0f04 	tst.w	r2, #4
 800b194:	f103 0204 	add.w	r2, r3, #4
 800b198:	600a      	str	r2, [r1, #0]
 800b19a:	d1d9      	bne.n	800b150 <_scanf_float+0x398>
 800b19c:	f8d3 8000 	ldr.w	r8, [r3]
 800b1a0:	ee10 2a10 	vmov	r2, s0
 800b1a4:	ee10 0a10 	vmov	r0, s0
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fcde 	bl	8000b6c <__aeabi_dcmpun>
 800b1b0:	b128      	cbz	r0, 800b1be <_scanf_float+0x406>
 800b1b2:	4808      	ldr	r0, [pc, #32]	; (800b1d4 <_scanf_float+0x41c>)
 800b1b4:	f000 f810 	bl	800b1d8 <nanf>
 800b1b8:	ed88 0a00 	vstr	s0, [r8]
 800b1bc:	e7cb      	b.n	800b156 <_scanf_float+0x39e>
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 fd31 	bl	8000c28 <__aeabi_d2f>
 800b1c6:	f8c8 0000 	str.w	r0, [r8]
 800b1ca:	e7c4      	b.n	800b156 <_scanf_float+0x39e>
 800b1cc:	2500      	movs	r5, #0
 800b1ce:	e634      	b.n	800ae3a <_scanf_float+0x82>
 800b1d0:	080114d6 	.word	0x080114d6
 800b1d4:	080118fb 	.word	0x080118fb

0800b1d8 <nanf>:
 800b1d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1e0 <nanf+0x8>
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	7fc00000 	.word	0x7fc00000

0800b1e4 <siprintf>:
 800b1e4:	b40e      	push	{r1, r2, r3}
 800b1e6:	b500      	push	{lr}
 800b1e8:	b09c      	sub	sp, #112	; 0x70
 800b1ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b1ec:	9002      	str	r0, [sp, #8]
 800b1ee:	9006      	str	r0, [sp, #24]
 800b1f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1f4:	4809      	ldr	r0, [pc, #36]	; (800b21c <siprintf+0x38>)
 800b1f6:	9107      	str	r1, [sp, #28]
 800b1f8:	9104      	str	r1, [sp, #16]
 800b1fa:	4909      	ldr	r1, [pc, #36]	; (800b220 <siprintf+0x3c>)
 800b1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b200:	9105      	str	r1, [sp, #20]
 800b202:	6800      	ldr	r0, [r0, #0]
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	a902      	add	r1, sp, #8
 800b208:	f002 ffaa 	bl	800e160 <_svfiprintf_r>
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	2200      	movs	r2, #0
 800b210:	701a      	strb	r2, [r3, #0]
 800b212:	b01c      	add	sp, #112	; 0x70
 800b214:	f85d eb04 	ldr.w	lr, [sp], #4
 800b218:	b003      	add	sp, #12
 800b21a:	4770      	bx	lr
 800b21c:	20000014 	.word	0x20000014
 800b220:	ffff0208 	.word	0xffff0208

0800b224 <siscanf>:
 800b224:	b40e      	push	{r1, r2, r3}
 800b226:	b510      	push	{r4, lr}
 800b228:	b09f      	sub	sp, #124	; 0x7c
 800b22a:	ac21      	add	r4, sp, #132	; 0x84
 800b22c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b230:	f854 2b04 	ldr.w	r2, [r4], #4
 800b234:	9201      	str	r2, [sp, #4]
 800b236:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b23a:	9004      	str	r0, [sp, #16]
 800b23c:	9008      	str	r0, [sp, #32]
 800b23e:	f7f4 ffe7 	bl	8000210 <strlen>
 800b242:	4b0c      	ldr	r3, [pc, #48]	; (800b274 <siscanf+0x50>)
 800b244:	9005      	str	r0, [sp, #20]
 800b246:	9009      	str	r0, [sp, #36]	; 0x24
 800b248:	930d      	str	r3, [sp, #52]	; 0x34
 800b24a:	480b      	ldr	r0, [pc, #44]	; (800b278 <siscanf+0x54>)
 800b24c:	9a01      	ldr	r2, [sp, #4]
 800b24e:	6800      	ldr	r0, [r0, #0]
 800b250:	9403      	str	r4, [sp, #12]
 800b252:	2300      	movs	r3, #0
 800b254:	9311      	str	r3, [sp, #68]	; 0x44
 800b256:	9316      	str	r3, [sp, #88]	; 0x58
 800b258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b25c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b260:	a904      	add	r1, sp, #16
 800b262:	4623      	mov	r3, r4
 800b264:	f003 f8d6 	bl	800e414 <__ssvfiscanf_r>
 800b268:	b01f      	add	sp, #124	; 0x7c
 800b26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b26e:	b003      	add	sp, #12
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	0800b29f 	.word	0x0800b29f
 800b278:	20000014 	.word	0x20000014

0800b27c <__sread>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	460c      	mov	r4, r1
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	f003 fb90 	bl	800e9a8 <_read_r>
 800b288:	2800      	cmp	r0, #0
 800b28a:	bfab      	itete	ge
 800b28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b28e:	89a3      	ldrhlt	r3, [r4, #12]
 800b290:	181b      	addge	r3, r3, r0
 800b292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b296:	bfac      	ite	ge
 800b298:	6563      	strge	r3, [r4, #84]	; 0x54
 800b29a:	81a3      	strhlt	r3, [r4, #12]
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <__seofread>:
 800b29e:	2000      	movs	r0, #0
 800b2a0:	4770      	bx	lr

0800b2a2 <__swrite>:
 800b2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	461f      	mov	r7, r3
 800b2a8:	898b      	ldrh	r3, [r1, #12]
 800b2aa:	05db      	lsls	r3, r3, #23
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	d505      	bpl.n	800b2c0 <__swrite+0x1e>
 800b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f002 f902 	bl	800d4c4 <_lseek_r>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	f000 bee3 	b.w	800c0a0 <_write_r>

0800b2da <__sseek>:
 800b2da:	b510      	push	{r4, lr}
 800b2dc:	460c      	mov	r4, r1
 800b2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e2:	f002 f8ef 	bl	800d4c4 <_lseek_r>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	bf15      	itete	ne
 800b2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2f6:	81a3      	strheq	r3, [r4, #12]
 800b2f8:	bf18      	it	ne
 800b2fa:	81a3      	strhne	r3, [r4, #12]
 800b2fc:	bd10      	pop	{r4, pc}

0800b2fe <__sclose>:
 800b2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b302:	f000 bedf 	b.w	800c0c4 <_close_r>

0800b306 <strcpy>:
 800b306:	4603      	mov	r3, r0
 800b308:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b30c:	f803 2b01 	strb.w	r2, [r3], #1
 800b310:	2a00      	cmp	r2, #0
 800b312:	d1f9      	bne.n	800b308 <strcpy+0x2>
 800b314:	4770      	bx	lr

0800b316 <strstr>:
 800b316:	780a      	ldrb	r2, [r1, #0]
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	b96a      	cbnz	r2, 800b338 <strstr+0x22>
 800b31c:	bd70      	pop	{r4, r5, r6, pc}
 800b31e:	429a      	cmp	r2, r3
 800b320:	d109      	bne.n	800b336 <strstr+0x20>
 800b322:	460c      	mov	r4, r1
 800b324:	4605      	mov	r5, r0
 800b326:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0f6      	beq.n	800b31c <strstr+0x6>
 800b32e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b332:	429e      	cmp	r6, r3
 800b334:	d0f7      	beq.n	800b326 <strstr+0x10>
 800b336:	3001      	adds	r0, #1
 800b338:	7803      	ldrb	r3, [r0, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1ef      	bne.n	800b31e <strstr+0x8>
 800b33e:	4618      	mov	r0, r3
 800b340:	e7ec      	b.n	800b31c <strstr+0x6>

0800b342 <sulp>:
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	460d      	mov	r5, r1
 800b348:	ec45 4b10 	vmov	d0, r4, r5
 800b34c:	4616      	mov	r6, r2
 800b34e:	f002 fc65 	bl	800dc1c <__ulp>
 800b352:	ec51 0b10 	vmov	r0, r1, d0
 800b356:	b17e      	cbz	r6, 800b378 <sulp+0x36>
 800b358:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b35c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b360:	2b00      	cmp	r3, #0
 800b362:	dd09      	ble.n	800b378 <sulp+0x36>
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b36a:	2400      	movs	r4, #0
 800b36c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b370:	4622      	mov	r2, r4
 800b372:	462b      	mov	r3, r5
 800b374:	f7f5 f960 	bl	8000638 <__aeabi_dmul>
 800b378:	bd70      	pop	{r4, r5, r6, pc}
 800b37a:	0000      	movs	r0, r0
 800b37c:	0000      	movs	r0, r0
	...

0800b380 <_strtod_l>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	ed2d 8b02 	vpush	{d8}
 800b388:	b09d      	sub	sp, #116	; 0x74
 800b38a:	461f      	mov	r7, r3
 800b38c:	2300      	movs	r3, #0
 800b38e:	9318      	str	r3, [sp, #96]	; 0x60
 800b390:	4ba2      	ldr	r3, [pc, #648]	; (800b61c <_strtod_l+0x29c>)
 800b392:	9213      	str	r2, [sp, #76]	; 0x4c
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	4604      	mov	r4, r0
 800b39a:	4618      	mov	r0, r3
 800b39c:	4688      	mov	r8, r1
 800b39e:	f7f4 ff37 	bl	8000210 <strlen>
 800b3a2:	f04f 0a00 	mov.w	sl, #0
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	f04f 0b00 	mov.w	fp, #0
 800b3ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3b2:	781a      	ldrb	r2, [r3, #0]
 800b3b4:	2a2b      	cmp	r2, #43	; 0x2b
 800b3b6:	d04e      	beq.n	800b456 <_strtod_l+0xd6>
 800b3b8:	d83b      	bhi.n	800b432 <_strtod_l+0xb2>
 800b3ba:	2a0d      	cmp	r2, #13
 800b3bc:	d834      	bhi.n	800b428 <_strtod_l+0xa8>
 800b3be:	2a08      	cmp	r2, #8
 800b3c0:	d834      	bhi.n	800b42c <_strtod_l+0xac>
 800b3c2:	2a00      	cmp	r2, #0
 800b3c4:	d03e      	beq.n	800b444 <_strtod_l+0xc4>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b3cc:	7833      	ldrb	r3, [r6, #0]
 800b3ce:	2b30      	cmp	r3, #48	; 0x30
 800b3d0:	f040 80b0 	bne.w	800b534 <_strtod_l+0x1b4>
 800b3d4:	7873      	ldrb	r3, [r6, #1]
 800b3d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3da:	2b58      	cmp	r3, #88	; 0x58
 800b3dc:	d168      	bne.n	800b4b0 <_strtod_l+0x130>
 800b3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	ab18      	add	r3, sp, #96	; 0x60
 800b3e4:	9702      	str	r7, [sp, #8]
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	4a8d      	ldr	r2, [pc, #564]	; (800b620 <_strtod_l+0x2a0>)
 800b3ea:	ab19      	add	r3, sp, #100	; 0x64
 800b3ec:	a917      	add	r1, sp, #92	; 0x5c
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f001 fd5c 	bl	800ceac <__gethex>
 800b3f4:	f010 0707 	ands.w	r7, r0, #7
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	d005      	beq.n	800b408 <_strtod_l+0x88>
 800b3fc:	2f06      	cmp	r7, #6
 800b3fe:	d12c      	bne.n	800b45a <_strtod_l+0xda>
 800b400:	3601      	adds	r6, #1
 800b402:	2300      	movs	r3, #0
 800b404:	9617      	str	r6, [sp, #92]	; 0x5c
 800b406:	930a      	str	r3, [sp, #40]	; 0x28
 800b408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 8590 	bne.w	800bf30 <_strtod_l+0xbb0>
 800b410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b412:	b1eb      	cbz	r3, 800b450 <_strtod_l+0xd0>
 800b414:	4652      	mov	r2, sl
 800b416:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b41a:	ec43 2b10 	vmov	d0, r2, r3
 800b41e:	b01d      	add	sp, #116	; 0x74
 800b420:	ecbd 8b02 	vpop	{d8}
 800b424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b428:	2a20      	cmp	r2, #32
 800b42a:	d1cc      	bne.n	800b3c6 <_strtod_l+0x46>
 800b42c:	3301      	adds	r3, #1
 800b42e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b430:	e7be      	b.n	800b3b0 <_strtod_l+0x30>
 800b432:	2a2d      	cmp	r2, #45	; 0x2d
 800b434:	d1c7      	bne.n	800b3c6 <_strtod_l+0x46>
 800b436:	2201      	movs	r2, #1
 800b438:	920a      	str	r2, [sp, #40]	; 0x28
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1c2      	bne.n	800b3ca <_strtod_l+0x4a>
 800b444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b446:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f040 856e 	bne.w	800bf2c <_strtod_l+0xbac>
 800b450:	4652      	mov	r2, sl
 800b452:	465b      	mov	r3, fp
 800b454:	e7e1      	b.n	800b41a <_strtod_l+0x9a>
 800b456:	2200      	movs	r2, #0
 800b458:	e7ee      	b.n	800b438 <_strtod_l+0xb8>
 800b45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b45c:	b13a      	cbz	r2, 800b46e <_strtod_l+0xee>
 800b45e:	2135      	movs	r1, #53	; 0x35
 800b460:	a81a      	add	r0, sp, #104	; 0x68
 800b462:	f002 fce6 	bl	800de32 <__copybits>
 800b466:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b468:	4620      	mov	r0, r4
 800b46a:	f002 f8a5 	bl	800d5b8 <_Bfree>
 800b46e:	3f01      	subs	r7, #1
 800b470:	2f04      	cmp	r7, #4
 800b472:	d806      	bhi.n	800b482 <_strtod_l+0x102>
 800b474:	e8df f007 	tbb	[pc, r7]
 800b478:	1714030a 	.word	0x1714030a
 800b47c:	0a          	.byte	0x0a
 800b47d:	00          	.byte	0x00
 800b47e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b482:	0728      	lsls	r0, r5, #28
 800b484:	d5c0      	bpl.n	800b408 <_strtod_l+0x88>
 800b486:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b48a:	e7bd      	b.n	800b408 <_strtod_l+0x88>
 800b48c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b492:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b496:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b49a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b49e:	e7f0      	b.n	800b482 <_strtod_l+0x102>
 800b4a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b624 <_strtod_l+0x2a4>
 800b4a4:	e7ed      	b.n	800b482 <_strtod_l+0x102>
 800b4a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b4aa:	f04f 3aff 	mov.w	sl, #4294967295
 800b4ae:	e7e8      	b.n	800b482 <_strtod_l+0x102>
 800b4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	2b30      	cmp	r3, #48	; 0x30
 800b4ba:	d0f9      	beq.n	800b4b0 <_strtod_l+0x130>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0a3      	beq.n	800b408 <_strtod_l+0x88>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f04f 0900 	mov.w	r9, #0
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4ca:	9308      	str	r3, [sp, #32]
 800b4cc:	f8cd 901c 	str.w	r9, [sp, #28]
 800b4d0:	464f      	mov	r7, r9
 800b4d2:	220a      	movs	r2, #10
 800b4d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b4d6:	7806      	ldrb	r6, [r0, #0]
 800b4d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b4dc:	b2d9      	uxtb	r1, r3
 800b4de:	2909      	cmp	r1, #9
 800b4e0:	d92a      	bls.n	800b538 <_strtod_l+0x1b8>
 800b4e2:	9905      	ldr	r1, [sp, #20]
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	f003 fac3 	bl	800ea70 <strncmp>
 800b4ea:	b398      	cbz	r0, 800b554 <_strtod_l+0x1d4>
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	4632      	mov	r2, r6
 800b4f0:	463d      	mov	r5, r7
 800b4f2:	9005      	str	r0, [sp, #20]
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2a65      	cmp	r2, #101	; 0x65
 800b4f8:	d001      	beq.n	800b4fe <_strtod_l+0x17e>
 800b4fa:	2a45      	cmp	r2, #69	; 0x45
 800b4fc:	d118      	bne.n	800b530 <_strtod_l+0x1b0>
 800b4fe:	b91d      	cbnz	r5, 800b508 <_strtod_l+0x188>
 800b500:	9a04      	ldr	r2, [sp, #16]
 800b502:	4302      	orrs	r2, r0
 800b504:	d09e      	beq.n	800b444 <_strtod_l+0xc4>
 800b506:	2500      	movs	r5, #0
 800b508:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b50c:	f108 0201 	add.w	r2, r8, #1
 800b510:	9217      	str	r2, [sp, #92]	; 0x5c
 800b512:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b516:	2a2b      	cmp	r2, #43	; 0x2b
 800b518:	d075      	beq.n	800b606 <_strtod_l+0x286>
 800b51a:	2a2d      	cmp	r2, #45	; 0x2d
 800b51c:	d07b      	beq.n	800b616 <_strtod_l+0x296>
 800b51e:	f04f 0c00 	mov.w	ip, #0
 800b522:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b526:	2909      	cmp	r1, #9
 800b528:	f240 8082 	bls.w	800b630 <_strtod_l+0x2b0>
 800b52c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b530:	2600      	movs	r6, #0
 800b532:	e09d      	b.n	800b670 <_strtod_l+0x2f0>
 800b534:	2300      	movs	r3, #0
 800b536:	e7c4      	b.n	800b4c2 <_strtod_l+0x142>
 800b538:	2f08      	cmp	r7, #8
 800b53a:	bfd8      	it	le
 800b53c:	9907      	ldrle	r1, [sp, #28]
 800b53e:	f100 0001 	add.w	r0, r0, #1
 800b542:	bfda      	itte	le
 800b544:	fb02 3301 	mlale	r3, r2, r1, r3
 800b548:	9307      	strle	r3, [sp, #28]
 800b54a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b54e:	3701      	adds	r7, #1
 800b550:	9017      	str	r0, [sp, #92]	; 0x5c
 800b552:	e7bf      	b.n	800b4d4 <_strtod_l+0x154>
 800b554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b556:	195a      	adds	r2, r3, r5
 800b558:	9217      	str	r2, [sp, #92]	; 0x5c
 800b55a:	5d5a      	ldrb	r2, [r3, r5]
 800b55c:	2f00      	cmp	r7, #0
 800b55e:	d037      	beq.n	800b5d0 <_strtod_l+0x250>
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	463d      	mov	r5, r7
 800b564:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b568:	2b09      	cmp	r3, #9
 800b56a:	d912      	bls.n	800b592 <_strtod_l+0x212>
 800b56c:	2301      	movs	r3, #1
 800b56e:	e7c2      	b.n	800b4f6 <_strtod_l+0x176>
 800b570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	9217      	str	r2, [sp, #92]	; 0x5c
 800b576:	785a      	ldrb	r2, [r3, #1]
 800b578:	3001      	adds	r0, #1
 800b57a:	2a30      	cmp	r2, #48	; 0x30
 800b57c:	d0f8      	beq.n	800b570 <_strtod_l+0x1f0>
 800b57e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b582:	2b08      	cmp	r3, #8
 800b584:	f200 84d9 	bhi.w	800bf3a <_strtod_l+0xbba>
 800b588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b58a:	9005      	str	r0, [sp, #20]
 800b58c:	2000      	movs	r0, #0
 800b58e:	9308      	str	r3, [sp, #32]
 800b590:	4605      	mov	r5, r0
 800b592:	3a30      	subs	r2, #48	; 0x30
 800b594:	f100 0301 	add.w	r3, r0, #1
 800b598:	d014      	beq.n	800b5c4 <_strtod_l+0x244>
 800b59a:	9905      	ldr	r1, [sp, #20]
 800b59c:	4419      	add	r1, r3
 800b59e:	9105      	str	r1, [sp, #20]
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	eb00 0e05 	add.w	lr, r0, r5
 800b5a6:	210a      	movs	r1, #10
 800b5a8:	4573      	cmp	r3, lr
 800b5aa:	d113      	bne.n	800b5d4 <_strtod_l+0x254>
 800b5ac:	182b      	adds	r3, r5, r0
 800b5ae:	2b08      	cmp	r3, #8
 800b5b0:	f105 0501 	add.w	r5, r5, #1
 800b5b4:	4405      	add	r5, r0
 800b5b6:	dc1c      	bgt.n	800b5f2 <_strtod_l+0x272>
 800b5b8:	9907      	ldr	r1, [sp, #28]
 800b5ba:	230a      	movs	r3, #10
 800b5bc:	fb03 2301 	mla	r3, r3, r1, r2
 800b5c0:	9307      	str	r3, [sp, #28]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b5c6:	1c51      	adds	r1, r2, #1
 800b5c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b5ca:	7852      	ldrb	r2, [r2, #1]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	e7c9      	b.n	800b564 <_strtod_l+0x1e4>
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	e7d2      	b.n	800b57a <_strtod_l+0x1fa>
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	dc04      	bgt.n	800b5e2 <_strtod_l+0x262>
 800b5d8:	9e07      	ldr	r6, [sp, #28]
 800b5da:	434e      	muls	r6, r1
 800b5dc:	9607      	str	r6, [sp, #28]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	e7e2      	b.n	800b5a8 <_strtod_l+0x228>
 800b5e2:	f103 0c01 	add.w	ip, r3, #1
 800b5e6:	f1bc 0f10 	cmp.w	ip, #16
 800b5ea:	bfd8      	it	le
 800b5ec:	fb01 f909 	mulle.w	r9, r1, r9
 800b5f0:	e7f5      	b.n	800b5de <_strtod_l+0x25e>
 800b5f2:	2d10      	cmp	r5, #16
 800b5f4:	bfdc      	itt	le
 800b5f6:	230a      	movle	r3, #10
 800b5f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800b5fc:	e7e1      	b.n	800b5c2 <_strtod_l+0x242>
 800b5fe:	2300      	movs	r3, #0
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	2301      	movs	r3, #1
 800b604:	e77c      	b.n	800b500 <_strtod_l+0x180>
 800b606:	f04f 0c00 	mov.w	ip, #0
 800b60a:	f108 0202 	add.w	r2, r8, #2
 800b60e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b610:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b614:	e785      	b.n	800b522 <_strtod_l+0x1a2>
 800b616:	f04f 0c01 	mov.w	ip, #1
 800b61a:	e7f6      	b.n	800b60a <_strtod_l+0x28a>
 800b61c:	08011728 	.word	0x08011728
 800b620:	080114dc 	.word	0x080114dc
 800b624:	7ff00000 	.word	0x7ff00000
 800b628:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b62a:	1c51      	adds	r1, r2, #1
 800b62c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b62e:	7852      	ldrb	r2, [r2, #1]
 800b630:	2a30      	cmp	r2, #48	; 0x30
 800b632:	d0f9      	beq.n	800b628 <_strtod_l+0x2a8>
 800b634:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b638:	2908      	cmp	r1, #8
 800b63a:	f63f af79 	bhi.w	800b530 <_strtod_l+0x1b0>
 800b63e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b642:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b644:	9206      	str	r2, [sp, #24]
 800b646:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b648:	1c51      	adds	r1, r2, #1
 800b64a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b64c:	7852      	ldrb	r2, [r2, #1]
 800b64e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b652:	2e09      	cmp	r6, #9
 800b654:	d937      	bls.n	800b6c6 <_strtod_l+0x346>
 800b656:	9e06      	ldr	r6, [sp, #24]
 800b658:	1b89      	subs	r1, r1, r6
 800b65a:	2908      	cmp	r1, #8
 800b65c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b660:	dc02      	bgt.n	800b668 <_strtod_l+0x2e8>
 800b662:	4576      	cmp	r6, lr
 800b664:	bfa8      	it	ge
 800b666:	4676      	movge	r6, lr
 800b668:	f1bc 0f00 	cmp.w	ip, #0
 800b66c:	d000      	beq.n	800b670 <_strtod_l+0x2f0>
 800b66e:	4276      	negs	r6, r6
 800b670:	2d00      	cmp	r5, #0
 800b672:	d14d      	bne.n	800b710 <_strtod_l+0x390>
 800b674:	9904      	ldr	r1, [sp, #16]
 800b676:	4301      	orrs	r1, r0
 800b678:	f47f aec6 	bne.w	800b408 <_strtod_l+0x88>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f47f aee1 	bne.w	800b444 <_strtod_l+0xc4>
 800b682:	2a69      	cmp	r2, #105	; 0x69
 800b684:	d027      	beq.n	800b6d6 <_strtod_l+0x356>
 800b686:	dc24      	bgt.n	800b6d2 <_strtod_l+0x352>
 800b688:	2a49      	cmp	r2, #73	; 0x49
 800b68a:	d024      	beq.n	800b6d6 <_strtod_l+0x356>
 800b68c:	2a4e      	cmp	r2, #78	; 0x4e
 800b68e:	f47f aed9 	bne.w	800b444 <_strtod_l+0xc4>
 800b692:	499f      	ldr	r1, [pc, #636]	; (800b910 <_strtod_l+0x590>)
 800b694:	a817      	add	r0, sp, #92	; 0x5c
 800b696:	f001 fe61 	bl	800d35c <__match>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	f43f aed2 	beq.w	800b444 <_strtod_l+0xc4>
 800b6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b28      	cmp	r3, #40	; 0x28
 800b6a6:	d12d      	bne.n	800b704 <_strtod_l+0x384>
 800b6a8:	499a      	ldr	r1, [pc, #616]	; (800b914 <_strtod_l+0x594>)
 800b6aa:	aa1a      	add	r2, sp, #104	; 0x68
 800b6ac:	a817      	add	r0, sp, #92	; 0x5c
 800b6ae:	f001 fe69 	bl	800d384 <__hexnan>
 800b6b2:	2805      	cmp	r0, #5
 800b6b4:	d126      	bne.n	800b704 <_strtod_l+0x384>
 800b6b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b6bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b6c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b6c4:	e6a0      	b.n	800b408 <_strtod_l+0x88>
 800b6c6:	210a      	movs	r1, #10
 800b6c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b6cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b6d0:	e7b9      	b.n	800b646 <_strtod_l+0x2c6>
 800b6d2:	2a6e      	cmp	r2, #110	; 0x6e
 800b6d4:	e7db      	b.n	800b68e <_strtod_l+0x30e>
 800b6d6:	4990      	ldr	r1, [pc, #576]	; (800b918 <_strtod_l+0x598>)
 800b6d8:	a817      	add	r0, sp, #92	; 0x5c
 800b6da:	f001 fe3f 	bl	800d35c <__match>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f43f aeb0 	beq.w	800b444 <_strtod_l+0xc4>
 800b6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6e6:	498d      	ldr	r1, [pc, #564]	; (800b91c <_strtod_l+0x59c>)
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	a817      	add	r0, sp, #92	; 0x5c
 800b6ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6ee:	f001 fe35 	bl	800d35c <__match>
 800b6f2:	b910      	cbnz	r0, 800b6fa <_strtod_l+0x37a>
 800b6f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b92c <_strtod_l+0x5ac>
 800b6fe:	f04f 0a00 	mov.w	sl, #0
 800b702:	e681      	b.n	800b408 <_strtod_l+0x88>
 800b704:	4886      	ldr	r0, [pc, #536]	; (800b920 <_strtod_l+0x5a0>)
 800b706:	f003 f963 	bl	800e9d0 <nan>
 800b70a:	ec5b ab10 	vmov	sl, fp, d0
 800b70e:	e67b      	b.n	800b408 <_strtod_l+0x88>
 800b710:	9b05      	ldr	r3, [sp, #20]
 800b712:	9807      	ldr	r0, [sp, #28]
 800b714:	1af3      	subs	r3, r6, r3
 800b716:	2f00      	cmp	r7, #0
 800b718:	bf08      	it	eq
 800b71a:	462f      	moveq	r7, r5
 800b71c:	2d10      	cmp	r5, #16
 800b71e:	9306      	str	r3, [sp, #24]
 800b720:	46a8      	mov	r8, r5
 800b722:	bfa8      	it	ge
 800b724:	f04f 0810 	movge.w	r8, #16
 800b728:	f7f4 ff0c 	bl	8000544 <__aeabi_ui2d>
 800b72c:	2d09      	cmp	r5, #9
 800b72e:	4682      	mov	sl, r0
 800b730:	468b      	mov	fp, r1
 800b732:	dd13      	ble.n	800b75c <_strtod_l+0x3dc>
 800b734:	4b7b      	ldr	r3, [pc, #492]	; (800b924 <_strtod_l+0x5a4>)
 800b736:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b73a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b73e:	f7f4 ff7b 	bl	8000638 <__aeabi_dmul>
 800b742:	4682      	mov	sl, r0
 800b744:	4648      	mov	r0, r9
 800b746:	468b      	mov	fp, r1
 800b748:	f7f4 fefc 	bl	8000544 <__aeabi_ui2d>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4650      	mov	r0, sl
 800b752:	4659      	mov	r1, fp
 800b754:	f7f4 fdba 	bl	80002cc <__adddf3>
 800b758:	4682      	mov	sl, r0
 800b75a:	468b      	mov	fp, r1
 800b75c:	2d0f      	cmp	r5, #15
 800b75e:	dc38      	bgt.n	800b7d2 <_strtod_l+0x452>
 800b760:	9b06      	ldr	r3, [sp, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	f43f ae50 	beq.w	800b408 <_strtod_l+0x88>
 800b768:	dd24      	ble.n	800b7b4 <_strtod_l+0x434>
 800b76a:	2b16      	cmp	r3, #22
 800b76c:	dc0b      	bgt.n	800b786 <_strtod_l+0x406>
 800b76e:	496d      	ldr	r1, [pc, #436]	; (800b924 <_strtod_l+0x5a4>)
 800b770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b774:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b778:	4652      	mov	r2, sl
 800b77a:	465b      	mov	r3, fp
 800b77c:	f7f4 ff5c 	bl	8000638 <__aeabi_dmul>
 800b780:	4682      	mov	sl, r0
 800b782:	468b      	mov	fp, r1
 800b784:	e640      	b.n	800b408 <_strtod_l+0x88>
 800b786:	9a06      	ldr	r2, [sp, #24]
 800b788:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b78c:	4293      	cmp	r3, r2
 800b78e:	db20      	blt.n	800b7d2 <_strtod_l+0x452>
 800b790:	4c64      	ldr	r4, [pc, #400]	; (800b924 <_strtod_l+0x5a4>)
 800b792:	f1c5 050f 	rsb	r5, r5, #15
 800b796:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b79a:	4652      	mov	r2, sl
 800b79c:	465b      	mov	r3, fp
 800b79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a2:	f7f4 ff49 	bl	8000638 <__aeabi_dmul>
 800b7a6:	9b06      	ldr	r3, [sp, #24]
 800b7a8:	1b5d      	subs	r5, r3, r5
 800b7aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b7ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7b2:	e7e3      	b.n	800b77c <_strtod_l+0x3fc>
 800b7b4:	9b06      	ldr	r3, [sp, #24]
 800b7b6:	3316      	adds	r3, #22
 800b7b8:	db0b      	blt.n	800b7d2 <_strtod_l+0x452>
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	1b9e      	subs	r6, r3, r6
 800b7be:	4b59      	ldr	r3, [pc, #356]	; (800b924 <_strtod_l+0x5a4>)
 800b7c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b7c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7c8:	4650      	mov	r0, sl
 800b7ca:	4659      	mov	r1, fp
 800b7cc:	f7f5 f85e 	bl	800088c <__aeabi_ddiv>
 800b7d0:	e7d6      	b.n	800b780 <_strtod_l+0x400>
 800b7d2:	9b06      	ldr	r3, [sp, #24]
 800b7d4:	eba5 0808 	sub.w	r8, r5, r8
 800b7d8:	4498      	add	r8, r3
 800b7da:	f1b8 0f00 	cmp.w	r8, #0
 800b7de:	dd74      	ble.n	800b8ca <_strtod_l+0x54a>
 800b7e0:	f018 030f 	ands.w	r3, r8, #15
 800b7e4:	d00a      	beq.n	800b7fc <_strtod_l+0x47c>
 800b7e6:	494f      	ldr	r1, [pc, #316]	; (800b924 <_strtod_l+0x5a4>)
 800b7e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7ec:	4652      	mov	r2, sl
 800b7ee:	465b      	mov	r3, fp
 800b7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f4:	f7f4 ff20 	bl	8000638 <__aeabi_dmul>
 800b7f8:	4682      	mov	sl, r0
 800b7fa:	468b      	mov	fp, r1
 800b7fc:	f038 080f 	bics.w	r8, r8, #15
 800b800:	d04f      	beq.n	800b8a2 <_strtod_l+0x522>
 800b802:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b806:	dd22      	ble.n	800b84e <_strtod_l+0x4ce>
 800b808:	2500      	movs	r5, #0
 800b80a:	462e      	mov	r6, r5
 800b80c:	9507      	str	r5, [sp, #28]
 800b80e:	9505      	str	r5, [sp, #20]
 800b810:	2322      	movs	r3, #34	; 0x22
 800b812:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b92c <_strtod_l+0x5ac>
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	f04f 0a00 	mov.w	sl, #0
 800b81c:	9b07      	ldr	r3, [sp, #28]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f43f adf2 	beq.w	800b408 <_strtod_l+0x88>
 800b824:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b826:	4620      	mov	r0, r4
 800b828:	f001 fec6 	bl	800d5b8 <_Bfree>
 800b82c:	9905      	ldr	r1, [sp, #20]
 800b82e:	4620      	mov	r0, r4
 800b830:	f001 fec2 	bl	800d5b8 <_Bfree>
 800b834:	4631      	mov	r1, r6
 800b836:	4620      	mov	r0, r4
 800b838:	f001 febe 	bl	800d5b8 <_Bfree>
 800b83c:	9907      	ldr	r1, [sp, #28]
 800b83e:	4620      	mov	r0, r4
 800b840:	f001 feba 	bl	800d5b8 <_Bfree>
 800b844:	4629      	mov	r1, r5
 800b846:	4620      	mov	r0, r4
 800b848:	f001 feb6 	bl	800d5b8 <_Bfree>
 800b84c:	e5dc      	b.n	800b408 <_strtod_l+0x88>
 800b84e:	4b36      	ldr	r3, [pc, #216]	; (800b928 <_strtod_l+0x5a8>)
 800b850:	9304      	str	r3, [sp, #16]
 800b852:	2300      	movs	r3, #0
 800b854:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b858:	4650      	mov	r0, sl
 800b85a:	4659      	mov	r1, fp
 800b85c:	4699      	mov	r9, r3
 800b85e:	f1b8 0f01 	cmp.w	r8, #1
 800b862:	dc21      	bgt.n	800b8a8 <_strtod_l+0x528>
 800b864:	b10b      	cbz	r3, 800b86a <_strtod_l+0x4ea>
 800b866:	4682      	mov	sl, r0
 800b868:	468b      	mov	fp, r1
 800b86a:	4b2f      	ldr	r3, [pc, #188]	; (800b928 <_strtod_l+0x5a8>)
 800b86c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b870:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b874:	4652      	mov	r2, sl
 800b876:	465b      	mov	r3, fp
 800b878:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b87c:	f7f4 fedc 	bl	8000638 <__aeabi_dmul>
 800b880:	4b2a      	ldr	r3, [pc, #168]	; (800b92c <_strtod_l+0x5ac>)
 800b882:	460a      	mov	r2, r1
 800b884:	400b      	ands	r3, r1
 800b886:	492a      	ldr	r1, [pc, #168]	; (800b930 <_strtod_l+0x5b0>)
 800b888:	428b      	cmp	r3, r1
 800b88a:	4682      	mov	sl, r0
 800b88c:	d8bc      	bhi.n	800b808 <_strtod_l+0x488>
 800b88e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b892:	428b      	cmp	r3, r1
 800b894:	bf86      	itte	hi
 800b896:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b934 <_strtod_l+0x5b4>
 800b89a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b89e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	e084      	b.n	800b9b2 <_strtod_l+0x632>
 800b8a8:	f018 0f01 	tst.w	r8, #1
 800b8ac:	d005      	beq.n	800b8ba <_strtod_l+0x53a>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7f4 fec0 	bl	8000638 <__aeabi_dmul>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	9a04      	ldr	r2, [sp, #16]
 800b8bc:	3208      	adds	r2, #8
 800b8be:	f109 0901 	add.w	r9, r9, #1
 800b8c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8c6:	9204      	str	r2, [sp, #16]
 800b8c8:	e7c9      	b.n	800b85e <_strtod_l+0x4de>
 800b8ca:	d0ea      	beq.n	800b8a2 <_strtod_l+0x522>
 800b8cc:	f1c8 0800 	rsb	r8, r8, #0
 800b8d0:	f018 020f 	ands.w	r2, r8, #15
 800b8d4:	d00a      	beq.n	800b8ec <_strtod_l+0x56c>
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <_strtod_l+0x5a4>)
 800b8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8dc:	4650      	mov	r0, sl
 800b8de:	4659      	mov	r1, fp
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f7f4 ffd2 	bl	800088c <__aeabi_ddiv>
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b8f0:	d0d7      	beq.n	800b8a2 <_strtod_l+0x522>
 800b8f2:	f1b8 0f1f 	cmp.w	r8, #31
 800b8f6:	dd1f      	ble.n	800b938 <_strtod_l+0x5b8>
 800b8f8:	2500      	movs	r5, #0
 800b8fa:	462e      	mov	r6, r5
 800b8fc:	9507      	str	r5, [sp, #28]
 800b8fe:	9505      	str	r5, [sp, #20]
 800b900:	2322      	movs	r3, #34	; 0x22
 800b902:	f04f 0a00 	mov.w	sl, #0
 800b906:	f04f 0b00 	mov.w	fp, #0
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	e786      	b.n	800b81c <_strtod_l+0x49c>
 800b90e:	bf00      	nop
 800b910:	080114b1 	.word	0x080114b1
 800b914:	080114f0 	.word	0x080114f0
 800b918:	080114a9 	.word	0x080114a9
 800b91c:	08011634 	.word	0x08011634
 800b920:	080118fb 	.word	0x080118fb
 800b924:	080117c0 	.word	0x080117c0
 800b928:	08011798 	.word	0x08011798
 800b92c:	7ff00000 	.word	0x7ff00000
 800b930:	7ca00000 	.word	0x7ca00000
 800b934:	7fefffff 	.word	0x7fefffff
 800b938:	f018 0310 	ands.w	r3, r8, #16
 800b93c:	bf18      	it	ne
 800b93e:	236a      	movne	r3, #106	; 0x6a
 800b940:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bcf0 <_strtod_l+0x970>
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	4650      	mov	r0, sl
 800b948:	4659      	mov	r1, fp
 800b94a:	2300      	movs	r3, #0
 800b94c:	f018 0f01 	tst.w	r8, #1
 800b950:	d004      	beq.n	800b95c <_strtod_l+0x5dc>
 800b952:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b956:	f7f4 fe6f 	bl	8000638 <__aeabi_dmul>
 800b95a:	2301      	movs	r3, #1
 800b95c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b960:	f109 0908 	add.w	r9, r9, #8
 800b964:	d1f2      	bne.n	800b94c <_strtod_l+0x5cc>
 800b966:	b10b      	cbz	r3, 800b96c <_strtod_l+0x5ec>
 800b968:	4682      	mov	sl, r0
 800b96a:	468b      	mov	fp, r1
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	b1c3      	cbz	r3, 800b9a2 <_strtod_l+0x622>
 800b970:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b974:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b978:	2b00      	cmp	r3, #0
 800b97a:	4659      	mov	r1, fp
 800b97c:	dd11      	ble.n	800b9a2 <_strtod_l+0x622>
 800b97e:	2b1f      	cmp	r3, #31
 800b980:	f340 8124 	ble.w	800bbcc <_strtod_l+0x84c>
 800b984:	2b34      	cmp	r3, #52	; 0x34
 800b986:	bfde      	ittt	le
 800b988:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b98c:	f04f 33ff 	movle.w	r3, #4294967295
 800b990:	fa03 f202 	lslle.w	r2, r3, r2
 800b994:	f04f 0a00 	mov.w	sl, #0
 800b998:	bfcc      	ite	gt
 800b99a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b99e:	ea02 0b01 	andle.w	fp, r2, r1
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4650      	mov	r0, sl
 800b9a8:	4659      	mov	r1, fp
 800b9aa:	f7f5 f8ad 	bl	8000b08 <__aeabi_dcmpeq>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d1a2      	bne.n	800b8f8 <_strtod_l+0x578>
 800b9b2:	9b07      	ldr	r3, [sp, #28]
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	9908      	ldr	r1, [sp, #32]
 800b9b8:	462b      	mov	r3, r5
 800b9ba:	463a      	mov	r2, r7
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f001 fe63 	bl	800d688 <__s2b>
 800b9c2:	9007      	str	r0, [sp, #28]
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f43f af1f 	beq.w	800b808 <_strtod_l+0x488>
 800b9ca:	9b05      	ldr	r3, [sp, #20]
 800b9cc:	1b9e      	subs	r6, r3, r6
 800b9ce:	9b06      	ldr	r3, [sp, #24]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfb4      	ite	lt
 800b9d4:	4633      	movlt	r3, r6
 800b9d6:	2300      	movge	r3, #0
 800b9d8:	930c      	str	r3, [sp, #48]	; 0x30
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	2500      	movs	r5, #0
 800b9de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b9e2:	9312      	str	r3, [sp, #72]	; 0x48
 800b9e4:	462e      	mov	r6, r5
 800b9e6:	9b07      	ldr	r3, [sp, #28]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	6859      	ldr	r1, [r3, #4]
 800b9ec:	f001 fda4 	bl	800d538 <_Balloc>
 800b9f0:	9005      	str	r0, [sp, #20]
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	f43f af0c 	beq.w	800b810 <_strtod_l+0x490>
 800b9f8:	9b07      	ldr	r3, [sp, #28]
 800b9fa:	691a      	ldr	r2, [r3, #16]
 800b9fc:	3202      	adds	r2, #2
 800b9fe:	f103 010c 	add.w	r1, r3, #12
 800ba02:	0092      	lsls	r2, r2, #2
 800ba04:	300c      	adds	r0, #12
 800ba06:	f001 fd89 	bl	800d51c <memcpy>
 800ba0a:	ec4b ab10 	vmov	d0, sl, fp
 800ba0e:	aa1a      	add	r2, sp, #104	; 0x68
 800ba10:	a919      	add	r1, sp, #100	; 0x64
 800ba12:	4620      	mov	r0, r4
 800ba14:	f002 f97e 	bl	800dd14 <__d2b>
 800ba18:	ec4b ab18 	vmov	d8, sl, fp
 800ba1c:	9018      	str	r0, [sp, #96]	; 0x60
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	f43f aef6 	beq.w	800b810 <_strtod_l+0x490>
 800ba24:	2101      	movs	r1, #1
 800ba26:	4620      	mov	r0, r4
 800ba28:	f001 fec8 	bl	800d7bc <__i2b>
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f aeee 	beq.w	800b810 <_strtod_l+0x490>
 800ba34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba36:	9904      	ldr	r1, [sp, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfab      	itete	ge
 800ba3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ba3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ba40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ba42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ba46:	bfac      	ite	ge
 800ba48:	eb03 0902 	addge.w	r9, r3, r2
 800ba4c:	1ad7      	sublt	r7, r2, r3
 800ba4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba50:	eba3 0801 	sub.w	r8, r3, r1
 800ba54:	4490      	add	r8, r2
 800ba56:	4ba1      	ldr	r3, [pc, #644]	; (800bcdc <_strtod_l+0x95c>)
 800ba58:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba5c:	4598      	cmp	r8, r3
 800ba5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ba62:	f280 80c7 	bge.w	800bbf4 <_strtod_l+0x874>
 800ba66:	eba3 0308 	sub.w	r3, r3, r8
 800ba6a:	2b1f      	cmp	r3, #31
 800ba6c:	eba2 0203 	sub.w	r2, r2, r3
 800ba70:	f04f 0101 	mov.w	r1, #1
 800ba74:	f300 80b1 	bgt.w	800bbda <_strtod_l+0x85a>
 800ba78:	fa01 f303 	lsl.w	r3, r1, r3
 800ba7c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9308      	str	r3, [sp, #32]
 800ba82:	eb09 0802 	add.w	r8, r9, r2
 800ba86:	9b04      	ldr	r3, [sp, #16]
 800ba88:	45c1      	cmp	r9, r8
 800ba8a:	4417      	add	r7, r2
 800ba8c:	441f      	add	r7, r3
 800ba8e:	464b      	mov	r3, r9
 800ba90:	bfa8      	it	ge
 800ba92:	4643      	movge	r3, r8
 800ba94:	42bb      	cmp	r3, r7
 800ba96:	bfa8      	it	ge
 800ba98:	463b      	movge	r3, r7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfc2      	ittt	gt
 800ba9e:	eba8 0803 	subgt.w	r8, r8, r3
 800baa2:	1aff      	subgt	r7, r7, r3
 800baa4:	eba9 0903 	subgt.w	r9, r9, r3
 800baa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dd17      	ble.n	800bade <_strtod_l+0x75e>
 800baae:	4631      	mov	r1, r6
 800bab0:	461a      	mov	r2, r3
 800bab2:	4620      	mov	r0, r4
 800bab4:	f001 ff42 	bl	800d93c <__pow5mult>
 800bab8:	4606      	mov	r6, r0
 800baba:	2800      	cmp	r0, #0
 800babc:	f43f aea8 	beq.w	800b810 <_strtod_l+0x490>
 800bac0:	4601      	mov	r1, r0
 800bac2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bac4:	4620      	mov	r0, r4
 800bac6:	f001 fe8f 	bl	800d7e8 <__multiply>
 800baca:	900b      	str	r0, [sp, #44]	; 0x2c
 800bacc:	2800      	cmp	r0, #0
 800bace:	f43f ae9f 	beq.w	800b810 <_strtod_l+0x490>
 800bad2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bad4:	4620      	mov	r0, r4
 800bad6:	f001 fd6f 	bl	800d5b8 <_Bfree>
 800bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800badc:	9318      	str	r3, [sp, #96]	; 0x60
 800bade:	f1b8 0f00 	cmp.w	r8, #0
 800bae2:	f300 808c 	bgt.w	800bbfe <_strtod_l+0x87e>
 800bae6:	9b06      	ldr	r3, [sp, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dd08      	ble.n	800bafe <_strtod_l+0x77e>
 800baec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800baee:	9905      	ldr	r1, [sp, #20]
 800baf0:	4620      	mov	r0, r4
 800baf2:	f001 ff23 	bl	800d93c <__pow5mult>
 800baf6:	9005      	str	r0, [sp, #20]
 800baf8:	2800      	cmp	r0, #0
 800bafa:	f43f ae89 	beq.w	800b810 <_strtod_l+0x490>
 800bafe:	2f00      	cmp	r7, #0
 800bb00:	dd08      	ble.n	800bb14 <_strtod_l+0x794>
 800bb02:	9905      	ldr	r1, [sp, #20]
 800bb04:	463a      	mov	r2, r7
 800bb06:	4620      	mov	r0, r4
 800bb08:	f001 ff72 	bl	800d9f0 <__lshift>
 800bb0c:	9005      	str	r0, [sp, #20]
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f43f ae7e 	beq.w	800b810 <_strtod_l+0x490>
 800bb14:	f1b9 0f00 	cmp.w	r9, #0
 800bb18:	dd08      	ble.n	800bb2c <_strtod_l+0x7ac>
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	464a      	mov	r2, r9
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f001 ff66 	bl	800d9f0 <__lshift>
 800bb24:	4606      	mov	r6, r0
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f43f ae72 	beq.w	800b810 <_strtod_l+0x490>
 800bb2c:	9a05      	ldr	r2, [sp, #20]
 800bb2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb30:	4620      	mov	r0, r4
 800bb32:	f001 ffe9 	bl	800db08 <__mdiff>
 800bb36:	4605      	mov	r5, r0
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f43f ae69 	beq.w	800b810 <_strtod_l+0x490>
 800bb3e:	68c3      	ldr	r3, [r0, #12]
 800bb40:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb42:	2300      	movs	r3, #0
 800bb44:	60c3      	str	r3, [r0, #12]
 800bb46:	4631      	mov	r1, r6
 800bb48:	f001 ffc2 	bl	800dad0 <__mcmp>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	da60      	bge.n	800bc12 <_strtod_l+0x892>
 800bb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb52:	ea53 030a 	orrs.w	r3, r3, sl
 800bb56:	f040 8082 	bne.w	800bc5e <_strtod_l+0x8de>
 800bb5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d17d      	bne.n	800bc5e <_strtod_l+0x8de>
 800bb62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb66:	0d1b      	lsrs	r3, r3, #20
 800bb68:	051b      	lsls	r3, r3, #20
 800bb6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bb6e:	d976      	bls.n	800bc5e <_strtod_l+0x8de>
 800bb70:	696b      	ldr	r3, [r5, #20]
 800bb72:	b913      	cbnz	r3, 800bb7a <_strtod_l+0x7fa>
 800bb74:	692b      	ldr	r3, [r5, #16]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	dd71      	ble.n	800bc5e <_strtod_l+0x8de>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f001 ff36 	bl	800d9f0 <__lshift>
 800bb84:	4631      	mov	r1, r6
 800bb86:	4605      	mov	r5, r0
 800bb88:	f001 ffa2 	bl	800dad0 <__mcmp>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	dd66      	ble.n	800bc5e <_strtod_l+0x8de>
 800bb90:	9904      	ldr	r1, [sp, #16]
 800bb92:	4a53      	ldr	r2, [pc, #332]	; (800bce0 <_strtod_l+0x960>)
 800bb94:	465b      	mov	r3, fp
 800bb96:	2900      	cmp	r1, #0
 800bb98:	f000 8081 	beq.w	800bc9e <_strtod_l+0x91e>
 800bb9c:	ea02 010b 	and.w	r1, r2, fp
 800bba0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bba4:	dc7b      	bgt.n	800bc9e <_strtod_l+0x91e>
 800bba6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bbaa:	f77f aea9 	ble.w	800b900 <_strtod_l+0x580>
 800bbae:	4b4d      	ldr	r3, [pc, #308]	; (800bce4 <_strtod_l+0x964>)
 800bbb0:	4650      	mov	r0, sl
 800bbb2:	4659      	mov	r1, fp
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f7f4 fd3f 	bl	8000638 <__aeabi_dmul>
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4303      	orrs	r3, r0
 800bbbe:	bf08      	it	eq
 800bbc0:	2322      	moveq	r3, #34	; 0x22
 800bbc2:	4682      	mov	sl, r0
 800bbc4:	468b      	mov	fp, r1
 800bbc6:	bf08      	it	eq
 800bbc8:	6023      	streq	r3, [r4, #0]
 800bbca:	e62b      	b.n	800b824 <_strtod_l+0x4a4>
 800bbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd4:	ea03 0a0a 	and.w	sl, r3, sl
 800bbd8:	e6e3      	b.n	800b9a2 <_strtod_l+0x622>
 800bbda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bbde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bbe2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bbe6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bbea:	fa01 f308 	lsl.w	r3, r1, r8
 800bbee:	9308      	str	r3, [sp, #32]
 800bbf0:	910d      	str	r1, [sp, #52]	; 0x34
 800bbf2:	e746      	b.n	800ba82 <_strtod_l+0x702>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9308      	str	r3, [sp, #32]
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	930d      	str	r3, [sp, #52]	; 0x34
 800bbfc:	e741      	b.n	800ba82 <_strtod_l+0x702>
 800bbfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc00:	4642      	mov	r2, r8
 800bc02:	4620      	mov	r0, r4
 800bc04:	f001 fef4 	bl	800d9f0 <__lshift>
 800bc08:	9018      	str	r0, [sp, #96]	; 0x60
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	f47f af6b 	bne.w	800bae6 <_strtod_l+0x766>
 800bc10:	e5fe      	b.n	800b810 <_strtod_l+0x490>
 800bc12:	465f      	mov	r7, fp
 800bc14:	d16e      	bne.n	800bcf4 <_strtod_l+0x974>
 800bc16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc1c:	b342      	cbz	r2, 800bc70 <_strtod_l+0x8f0>
 800bc1e:	4a32      	ldr	r2, [pc, #200]	; (800bce8 <_strtod_l+0x968>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d128      	bne.n	800bc76 <_strtod_l+0x8f6>
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	4651      	mov	r1, sl
 800bc28:	b1eb      	cbz	r3, 800bc66 <_strtod_l+0x8e6>
 800bc2a:	4b2d      	ldr	r3, [pc, #180]	; (800bce0 <_strtod_l+0x960>)
 800bc2c:	403b      	ands	r3, r7
 800bc2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295
 800bc36:	d819      	bhi.n	800bc6c <_strtod_l+0x8ec>
 800bc38:	0d1b      	lsrs	r3, r3, #20
 800bc3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc42:	4299      	cmp	r1, r3
 800bc44:	d117      	bne.n	800bc76 <_strtod_l+0x8f6>
 800bc46:	4b29      	ldr	r3, [pc, #164]	; (800bcec <_strtod_l+0x96c>)
 800bc48:	429f      	cmp	r7, r3
 800bc4a:	d102      	bne.n	800bc52 <_strtod_l+0x8d2>
 800bc4c:	3101      	adds	r1, #1
 800bc4e:	f43f addf 	beq.w	800b810 <_strtod_l+0x490>
 800bc52:	4b23      	ldr	r3, [pc, #140]	; (800bce0 <_strtod_l+0x960>)
 800bc54:	403b      	ands	r3, r7
 800bc56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bc5a:	f04f 0a00 	mov.w	sl, #0
 800bc5e:	9b04      	ldr	r3, [sp, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1a4      	bne.n	800bbae <_strtod_l+0x82e>
 800bc64:	e5de      	b.n	800b824 <_strtod_l+0x4a4>
 800bc66:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6a:	e7ea      	b.n	800bc42 <_strtod_l+0x8c2>
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	e7e8      	b.n	800bc42 <_strtod_l+0x8c2>
 800bc70:	ea53 030a 	orrs.w	r3, r3, sl
 800bc74:	d08c      	beq.n	800bb90 <_strtod_l+0x810>
 800bc76:	9b08      	ldr	r3, [sp, #32]
 800bc78:	b1db      	cbz	r3, 800bcb2 <_strtod_l+0x932>
 800bc7a:	423b      	tst	r3, r7
 800bc7c:	d0ef      	beq.n	800bc5e <_strtod_l+0x8de>
 800bc7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc80:	9a04      	ldr	r2, [sp, #16]
 800bc82:	4650      	mov	r0, sl
 800bc84:	4659      	mov	r1, fp
 800bc86:	b1c3      	cbz	r3, 800bcba <_strtod_l+0x93a>
 800bc88:	f7ff fb5b 	bl	800b342 <sulp>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	ec51 0b18 	vmov	r0, r1, d8
 800bc94:	f7f4 fb1a 	bl	80002cc <__adddf3>
 800bc98:	4682      	mov	sl, r0
 800bc9a:	468b      	mov	fp, r1
 800bc9c:	e7df      	b.n	800bc5e <_strtod_l+0x8de>
 800bc9e:	4013      	ands	r3, r2
 800bca0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bca4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bca8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bcac:	f04f 3aff 	mov.w	sl, #4294967295
 800bcb0:	e7d5      	b.n	800bc5e <_strtod_l+0x8de>
 800bcb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcb4:	ea13 0f0a 	tst.w	r3, sl
 800bcb8:	e7e0      	b.n	800bc7c <_strtod_l+0x8fc>
 800bcba:	f7ff fb42 	bl	800b342 <sulp>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	ec51 0b18 	vmov	r0, r1, d8
 800bcc6:	f7f4 faff 	bl	80002c8 <__aeabi_dsub>
 800bcca:	2200      	movs	r2, #0
 800bccc:	2300      	movs	r3, #0
 800bcce:	4682      	mov	sl, r0
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	f7f4 ff19 	bl	8000b08 <__aeabi_dcmpeq>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d0c1      	beq.n	800bc5e <_strtod_l+0x8de>
 800bcda:	e611      	b.n	800b900 <_strtod_l+0x580>
 800bcdc:	fffffc02 	.word	0xfffffc02
 800bce0:	7ff00000 	.word	0x7ff00000
 800bce4:	39500000 	.word	0x39500000
 800bce8:	000fffff 	.word	0x000fffff
 800bcec:	7fefffff 	.word	0x7fefffff
 800bcf0:	08011508 	.word	0x08011508
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f002 f868 	bl	800ddcc <__ratio>
 800bcfc:	ec59 8b10 	vmov	r8, r9, d0
 800bd00:	ee10 0a10 	vmov	r0, s0
 800bd04:	2200      	movs	r2, #0
 800bd06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 ff10 	bl	8000b30 <__aeabi_dcmple>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d07a      	beq.n	800be0a <_strtod_l+0xa8a>
 800bd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d04a      	beq.n	800bdb0 <_strtod_l+0xa30>
 800bd1a:	4b95      	ldr	r3, [pc, #596]	; (800bf70 <_strtod_l+0xbf0>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bf70 <_strtod_l+0xbf0>
 800bd26:	f04f 0800 	mov.w	r8, #0
 800bd2a:	4b92      	ldr	r3, [pc, #584]	; (800bf74 <_strtod_l+0xbf4>)
 800bd2c:	403b      	ands	r3, r7
 800bd2e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd32:	4b91      	ldr	r3, [pc, #580]	; (800bf78 <_strtod_l+0xbf8>)
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f040 80b0 	bne.w	800be9a <_strtod_l+0xb1a>
 800bd3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bd42:	ec4b ab10 	vmov	d0, sl, fp
 800bd46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd4a:	f001 ff67 	bl	800dc1c <__ulp>
 800bd4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd52:	ec53 2b10 	vmov	r2, r3, d0
 800bd56:	f7f4 fc6f 	bl	8000638 <__aeabi_dmul>
 800bd5a:	4652      	mov	r2, sl
 800bd5c:	465b      	mov	r3, fp
 800bd5e:	f7f4 fab5 	bl	80002cc <__adddf3>
 800bd62:	460b      	mov	r3, r1
 800bd64:	4983      	ldr	r1, [pc, #524]	; (800bf74 <_strtod_l+0xbf4>)
 800bd66:	4a85      	ldr	r2, [pc, #532]	; (800bf7c <_strtod_l+0xbfc>)
 800bd68:	4019      	ands	r1, r3
 800bd6a:	4291      	cmp	r1, r2
 800bd6c:	4682      	mov	sl, r0
 800bd6e:	d960      	bls.n	800be32 <_strtod_l+0xab2>
 800bd70:	ee18 3a90 	vmov	r3, s17
 800bd74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d104      	bne.n	800bd86 <_strtod_l+0xa06>
 800bd7c:	ee18 3a10 	vmov	r3, s16
 800bd80:	3301      	adds	r3, #1
 800bd82:	f43f ad45 	beq.w	800b810 <_strtod_l+0x490>
 800bd86:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bf88 <_strtod_l+0xc08>
 800bd8a:	f04f 3aff 	mov.w	sl, #4294967295
 800bd8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd90:	4620      	mov	r0, r4
 800bd92:	f001 fc11 	bl	800d5b8 <_Bfree>
 800bd96:	9905      	ldr	r1, [sp, #20]
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f001 fc0d 	bl	800d5b8 <_Bfree>
 800bd9e:	4631      	mov	r1, r6
 800bda0:	4620      	mov	r0, r4
 800bda2:	f001 fc09 	bl	800d5b8 <_Bfree>
 800bda6:	4629      	mov	r1, r5
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f001 fc05 	bl	800d5b8 <_Bfree>
 800bdae:	e61a      	b.n	800b9e6 <_strtod_l+0x666>
 800bdb0:	f1ba 0f00 	cmp.w	sl, #0
 800bdb4:	d11b      	bne.n	800bdee <_strtod_l+0xa6e>
 800bdb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdba:	b9f3      	cbnz	r3, 800bdfa <_strtod_l+0xa7a>
 800bdbc:	4b6c      	ldr	r3, [pc, #432]	; (800bf70 <_strtod_l+0xbf0>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	f7f4 feaa 	bl	8000b1c <__aeabi_dcmplt>
 800bdc8:	b9d0      	cbnz	r0, 800be00 <_strtod_l+0xa80>
 800bdca:	4640      	mov	r0, r8
 800bdcc:	4649      	mov	r1, r9
 800bdce:	4b6c      	ldr	r3, [pc, #432]	; (800bf80 <_strtod_l+0xc00>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f7f4 fc31 	bl	8000638 <__aeabi_dmul>
 800bdd6:	4680      	mov	r8, r0
 800bdd8:	4689      	mov	r9, r1
 800bdda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bdde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bde2:	9315      	str	r3, [sp, #84]	; 0x54
 800bde4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bde8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bdec:	e79d      	b.n	800bd2a <_strtod_l+0x9aa>
 800bdee:	f1ba 0f01 	cmp.w	sl, #1
 800bdf2:	d102      	bne.n	800bdfa <_strtod_l+0xa7a>
 800bdf4:	2f00      	cmp	r7, #0
 800bdf6:	f43f ad83 	beq.w	800b900 <_strtod_l+0x580>
 800bdfa:	4b62      	ldr	r3, [pc, #392]	; (800bf84 <_strtod_l+0xc04>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	e78e      	b.n	800bd1e <_strtod_l+0x99e>
 800be00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bf80 <_strtod_l+0xc00>
 800be04:	f04f 0800 	mov.w	r8, #0
 800be08:	e7e7      	b.n	800bdda <_strtod_l+0xa5a>
 800be0a:	4b5d      	ldr	r3, [pc, #372]	; (800bf80 <_strtod_l+0xc00>)
 800be0c:	4640      	mov	r0, r8
 800be0e:	4649      	mov	r1, r9
 800be10:	2200      	movs	r2, #0
 800be12:	f7f4 fc11 	bl	8000638 <__aeabi_dmul>
 800be16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be18:	4680      	mov	r8, r0
 800be1a:	4689      	mov	r9, r1
 800be1c:	b933      	cbnz	r3, 800be2c <_strtod_l+0xaac>
 800be1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be22:	900e      	str	r0, [sp, #56]	; 0x38
 800be24:	930f      	str	r3, [sp, #60]	; 0x3c
 800be26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800be2a:	e7dd      	b.n	800bde8 <_strtod_l+0xa68>
 800be2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800be30:	e7f9      	b.n	800be26 <_strtod_l+0xaa6>
 800be32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1a8      	bne.n	800bd8e <_strtod_l+0xa0e>
 800be3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be42:	0d1b      	lsrs	r3, r3, #20
 800be44:	051b      	lsls	r3, r3, #20
 800be46:	429a      	cmp	r2, r3
 800be48:	d1a1      	bne.n	800bd8e <_strtod_l+0xa0e>
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f5 f8b1 	bl	8000fb4 <__aeabi_d2lz>
 800be52:	f7f4 fbc3 	bl	80005dc <__aeabi_l2d>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	4640      	mov	r0, r8
 800be5c:	4649      	mov	r1, r9
 800be5e:	f7f4 fa33 	bl	80002c8 <__aeabi_dsub>
 800be62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be68:	ea43 030a 	orr.w	r3, r3, sl
 800be6c:	4313      	orrs	r3, r2
 800be6e:	4680      	mov	r8, r0
 800be70:	4689      	mov	r9, r1
 800be72:	d055      	beq.n	800bf20 <_strtod_l+0xba0>
 800be74:	a336      	add	r3, pc, #216	; (adr r3, 800bf50 <_strtod_l+0xbd0>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f7f4 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 800be7e:	2800      	cmp	r0, #0
 800be80:	f47f acd0 	bne.w	800b824 <_strtod_l+0x4a4>
 800be84:	a334      	add	r3, pc, #208	; (adr r3, 800bf58 <_strtod_l+0xbd8>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	4640      	mov	r0, r8
 800be8c:	4649      	mov	r1, r9
 800be8e:	f7f4 fe63 	bl	8000b58 <__aeabi_dcmpgt>
 800be92:	2800      	cmp	r0, #0
 800be94:	f43f af7b 	beq.w	800bd8e <_strtod_l+0xa0e>
 800be98:	e4c4      	b.n	800b824 <_strtod_l+0x4a4>
 800be9a:	9b04      	ldr	r3, [sp, #16]
 800be9c:	b333      	cbz	r3, 800beec <_strtod_l+0xb6c>
 800be9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bea0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bea4:	d822      	bhi.n	800beec <_strtod_l+0xb6c>
 800bea6:	a32e      	add	r3, pc, #184	; (adr r3, 800bf60 <_strtod_l+0xbe0>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4640      	mov	r0, r8
 800beae:	4649      	mov	r1, r9
 800beb0:	f7f4 fe3e 	bl	8000b30 <__aeabi_dcmple>
 800beb4:	b1a0      	cbz	r0, 800bee0 <_strtod_l+0xb60>
 800beb6:	4649      	mov	r1, r9
 800beb8:	4640      	mov	r0, r8
 800beba:	f7f4 fe95 	bl	8000be8 <__aeabi_d2uiz>
 800bebe:	2801      	cmp	r0, #1
 800bec0:	bf38      	it	cc
 800bec2:	2001      	movcc	r0, #1
 800bec4:	f7f4 fb3e 	bl	8000544 <__aeabi_ui2d>
 800bec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beca:	4680      	mov	r8, r0
 800becc:	4689      	mov	r9, r1
 800bece:	bb23      	cbnz	r3, 800bf1a <_strtod_l+0xb9a>
 800bed0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bed4:	9010      	str	r0, [sp, #64]	; 0x40
 800bed6:	9311      	str	r3, [sp, #68]	; 0x44
 800bed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bedc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bee4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bee8:	1a9b      	subs	r3, r3, r2
 800beea:	9309      	str	r3, [sp, #36]	; 0x24
 800beec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bef0:	eeb0 0a48 	vmov.f32	s0, s16
 800bef4:	eef0 0a68 	vmov.f32	s1, s17
 800bef8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800befc:	f001 fe8e 	bl	800dc1c <__ulp>
 800bf00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf04:	ec53 2b10 	vmov	r2, r3, d0
 800bf08:	f7f4 fb96 	bl	8000638 <__aeabi_dmul>
 800bf0c:	ec53 2b18 	vmov	r2, r3, d8
 800bf10:	f7f4 f9dc 	bl	80002cc <__adddf3>
 800bf14:	4682      	mov	sl, r0
 800bf16:	468b      	mov	fp, r1
 800bf18:	e78d      	b.n	800be36 <_strtod_l+0xab6>
 800bf1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bf1e:	e7db      	b.n	800bed8 <_strtod_l+0xb58>
 800bf20:	a311      	add	r3, pc, #68	; (adr r3, 800bf68 <_strtod_l+0xbe8>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fdf9 	bl	8000b1c <__aeabi_dcmplt>
 800bf2a:	e7b2      	b.n	800be92 <_strtod_l+0xb12>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	f7ff ba6b 	b.w	800b410 <_strtod_l+0x90>
 800bf3a:	2a65      	cmp	r2, #101	; 0x65
 800bf3c:	f43f ab5f 	beq.w	800b5fe <_strtod_l+0x27e>
 800bf40:	2a45      	cmp	r2, #69	; 0x45
 800bf42:	f43f ab5c 	beq.w	800b5fe <_strtod_l+0x27e>
 800bf46:	2301      	movs	r3, #1
 800bf48:	f7ff bb94 	b.w	800b674 <_strtod_l+0x2f4>
 800bf4c:	f3af 8000 	nop.w
 800bf50:	94a03595 	.word	0x94a03595
 800bf54:	3fdfffff 	.word	0x3fdfffff
 800bf58:	35afe535 	.word	0x35afe535
 800bf5c:	3fe00000 	.word	0x3fe00000
 800bf60:	ffc00000 	.word	0xffc00000
 800bf64:	41dfffff 	.word	0x41dfffff
 800bf68:	94a03595 	.word	0x94a03595
 800bf6c:	3fcfffff 	.word	0x3fcfffff
 800bf70:	3ff00000 	.word	0x3ff00000
 800bf74:	7ff00000 	.word	0x7ff00000
 800bf78:	7fe00000 	.word	0x7fe00000
 800bf7c:	7c9fffff 	.word	0x7c9fffff
 800bf80:	3fe00000 	.word	0x3fe00000
 800bf84:	bff00000 	.word	0xbff00000
 800bf88:	7fefffff 	.word	0x7fefffff

0800bf8c <_strtod_r>:
 800bf8c:	4b01      	ldr	r3, [pc, #4]	; (800bf94 <_strtod_r+0x8>)
 800bf8e:	f7ff b9f7 	b.w	800b380 <_strtod_l>
 800bf92:	bf00      	nop
 800bf94:	2000007c 	.word	0x2000007c

0800bf98 <_strtol_l.constprop.0>:
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9e:	d001      	beq.n	800bfa4 <_strtol_l.constprop.0+0xc>
 800bfa0:	2b24      	cmp	r3, #36	; 0x24
 800bfa2:	d906      	bls.n	800bfb2 <_strtol_l.constprop.0+0x1a>
 800bfa4:	f7fe fa6c 	bl	800a480 <__errno>
 800bfa8:	2316      	movs	r3, #22
 800bfaa:	6003      	str	r3, [r0, #0]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c098 <_strtol_l.constprop.0+0x100>
 800bfb6:	460d      	mov	r5, r1
 800bfb8:	462e      	mov	r6, r5
 800bfba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bfc2:	f017 0708 	ands.w	r7, r7, #8
 800bfc6:	d1f7      	bne.n	800bfb8 <_strtol_l.constprop.0+0x20>
 800bfc8:	2c2d      	cmp	r4, #45	; 0x2d
 800bfca:	d132      	bne.n	800c032 <_strtol_l.constprop.0+0x9a>
 800bfcc:	782c      	ldrb	r4, [r5, #0]
 800bfce:	2701      	movs	r7, #1
 800bfd0:	1cb5      	adds	r5, r6, #2
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d05b      	beq.n	800c08e <_strtol_l.constprop.0+0xf6>
 800bfd6:	2b10      	cmp	r3, #16
 800bfd8:	d109      	bne.n	800bfee <_strtol_l.constprop.0+0x56>
 800bfda:	2c30      	cmp	r4, #48	; 0x30
 800bfdc:	d107      	bne.n	800bfee <_strtol_l.constprop.0+0x56>
 800bfde:	782c      	ldrb	r4, [r5, #0]
 800bfe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bfe4:	2c58      	cmp	r4, #88	; 0x58
 800bfe6:	d14d      	bne.n	800c084 <_strtol_l.constprop.0+0xec>
 800bfe8:	786c      	ldrb	r4, [r5, #1]
 800bfea:	2310      	movs	r3, #16
 800bfec:	3502      	adds	r5, #2
 800bfee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bff2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bff6:	f04f 0c00 	mov.w	ip, #0
 800bffa:	fbb8 f9f3 	udiv	r9, r8, r3
 800bffe:	4666      	mov	r6, ip
 800c000:	fb03 8a19 	mls	sl, r3, r9, r8
 800c004:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c008:	f1be 0f09 	cmp.w	lr, #9
 800c00c:	d816      	bhi.n	800c03c <_strtol_l.constprop.0+0xa4>
 800c00e:	4674      	mov	r4, lr
 800c010:	42a3      	cmp	r3, r4
 800c012:	dd24      	ble.n	800c05e <_strtol_l.constprop.0+0xc6>
 800c014:	f1bc 0f00 	cmp.w	ip, #0
 800c018:	db1e      	blt.n	800c058 <_strtol_l.constprop.0+0xc0>
 800c01a:	45b1      	cmp	r9, r6
 800c01c:	d31c      	bcc.n	800c058 <_strtol_l.constprop.0+0xc0>
 800c01e:	d101      	bne.n	800c024 <_strtol_l.constprop.0+0x8c>
 800c020:	45a2      	cmp	sl, r4
 800c022:	db19      	blt.n	800c058 <_strtol_l.constprop.0+0xc0>
 800c024:	fb06 4603 	mla	r6, r6, r3, r4
 800c028:	f04f 0c01 	mov.w	ip, #1
 800c02c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c030:	e7e8      	b.n	800c004 <_strtol_l.constprop.0+0x6c>
 800c032:	2c2b      	cmp	r4, #43	; 0x2b
 800c034:	bf04      	itt	eq
 800c036:	782c      	ldrbeq	r4, [r5, #0]
 800c038:	1cb5      	addeq	r5, r6, #2
 800c03a:	e7ca      	b.n	800bfd2 <_strtol_l.constprop.0+0x3a>
 800c03c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c040:	f1be 0f19 	cmp.w	lr, #25
 800c044:	d801      	bhi.n	800c04a <_strtol_l.constprop.0+0xb2>
 800c046:	3c37      	subs	r4, #55	; 0x37
 800c048:	e7e2      	b.n	800c010 <_strtol_l.constprop.0+0x78>
 800c04a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c04e:	f1be 0f19 	cmp.w	lr, #25
 800c052:	d804      	bhi.n	800c05e <_strtol_l.constprop.0+0xc6>
 800c054:	3c57      	subs	r4, #87	; 0x57
 800c056:	e7db      	b.n	800c010 <_strtol_l.constprop.0+0x78>
 800c058:	f04f 3cff 	mov.w	ip, #4294967295
 800c05c:	e7e6      	b.n	800c02c <_strtol_l.constprop.0+0x94>
 800c05e:	f1bc 0f00 	cmp.w	ip, #0
 800c062:	da05      	bge.n	800c070 <_strtol_l.constprop.0+0xd8>
 800c064:	2322      	movs	r3, #34	; 0x22
 800c066:	6003      	str	r3, [r0, #0]
 800c068:	4646      	mov	r6, r8
 800c06a:	b942      	cbnz	r2, 800c07e <_strtol_l.constprop.0+0xe6>
 800c06c:	4630      	mov	r0, r6
 800c06e:	e79e      	b.n	800bfae <_strtol_l.constprop.0+0x16>
 800c070:	b107      	cbz	r7, 800c074 <_strtol_l.constprop.0+0xdc>
 800c072:	4276      	negs	r6, r6
 800c074:	2a00      	cmp	r2, #0
 800c076:	d0f9      	beq.n	800c06c <_strtol_l.constprop.0+0xd4>
 800c078:	f1bc 0f00 	cmp.w	ip, #0
 800c07c:	d000      	beq.n	800c080 <_strtol_l.constprop.0+0xe8>
 800c07e:	1e69      	subs	r1, r5, #1
 800c080:	6011      	str	r1, [r2, #0]
 800c082:	e7f3      	b.n	800c06c <_strtol_l.constprop.0+0xd4>
 800c084:	2430      	movs	r4, #48	; 0x30
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1b1      	bne.n	800bfee <_strtol_l.constprop.0+0x56>
 800c08a:	2308      	movs	r3, #8
 800c08c:	e7af      	b.n	800bfee <_strtol_l.constprop.0+0x56>
 800c08e:	2c30      	cmp	r4, #48	; 0x30
 800c090:	d0a5      	beq.n	800bfde <_strtol_l.constprop.0+0x46>
 800c092:	230a      	movs	r3, #10
 800c094:	e7ab      	b.n	800bfee <_strtol_l.constprop.0+0x56>
 800c096:	bf00      	nop
 800c098:	08011531 	.word	0x08011531

0800c09c <_strtol_r>:
 800c09c:	f7ff bf7c 	b.w	800bf98 <_strtol_l.constprop.0>

0800c0a0 <_write_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d07      	ldr	r5, [pc, #28]	; (800c0c0 <_write_r+0x20>)
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	4608      	mov	r0, r1
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	602a      	str	r2, [r5, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f7f9 f88d 	bl	80051ce <_write>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d102      	bne.n	800c0be <_write_r+0x1e>
 800c0b8:	682b      	ldr	r3, [r5, #0]
 800c0ba:	b103      	cbz	r3, 800c0be <_write_r+0x1e>
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	20001218 	.word	0x20001218

0800c0c4 <_close_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d06      	ldr	r5, [pc, #24]	; (800c0e0 <_close_r+0x1c>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	f7f9 f899 	bl	8005206 <_close>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_close_r+0x1a>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_close_r+0x1a>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20001218 	.word	0x20001218

0800c0e4 <quorem>:
 800c0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	6903      	ldr	r3, [r0, #16]
 800c0ea:	690c      	ldr	r4, [r1, #16]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	f2c0 8081 	blt.w	800c1f6 <quorem+0x112>
 800c0f4:	3c01      	subs	r4, #1
 800c0f6:	f101 0814 	add.w	r8, r1, #20
 800c0fa:	f100 0514 	add.w	r5, r0, #20
 800c0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10c:	3301      	adds	r3, #1
 800c10e:	429a      	cmp	r2, r3
 800c110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c118:	fbb2 f6f3 	udiv	r6, r2, r3
 800c11c:	d331      	bcc.n	800c182 <quorem+0x9e>
 800c11e:	f04f 0e00 	mov.w	lr, #0
 800c122:	4640      	mov	r0, r8
 800c124:	46ac      	mov	ip, r5
 800c126:	46f2      	mov	sl, lr
 800c128:	f850 2b04 	ldr.w	r2, [r0], #4
 800c12c:	b293      	uxth	r3, r2
 800c12e:	fb06 e303 	mla	r3, r6, r3, lr
 800c132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c136:	b29b      	uxth	r3, r3
 800c138:	ebaa 0303 	sub.w	r3, sl, r3
 800c13c:	f8dc a000 	ldr.w	sl, [ip]
 800c140:	0c12      	lsrs	r2, r2, #16
 800c142:	fa13 f38a 	uxtah	r3, r3, sl
 800c146:	fb06 e202 	mla	r2, r6, r2, lr
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	9b00      	ldr	r3, [sp, #0]
 800c14e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c152:	b292      	uxth	r2, r2
 800c154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c15c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c160:	4581      	cmp	r9, r0
 800c162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c166:	f84c 3b04 	str.w	r3, [ip], #4
 800c16a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c16e:	d2db      	bcs.n	800c128 <quorem+0x44>
 800c170:	f855 300b 	ldr.w	r3, [r5, fp]
 800c174:	b92b      	cbnz	r3, 800c182 <quorem+0x9e>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	3b04      	subs	r3, #4
 800c17a:	429d      	cmp	r5, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	d32e      	bcc.n	800c1de <quorem+0xfa>
 800c180:	613c      	str	r4, [r7, #16]
 800c182:	4638      	mov	r0, r7
 800c184:	f001 fca4 	bl	800dad0 <__mcmp>
 800c188:	2800      	cmp	r0, #0
 800c18a:	db24      	blt.n	800c1d6 <quorem+0xf2>
 800c18c:	3601      	adds	r6, #1
 800c18e:	4628      	mov	r0, r5
 800c190:	f04f 0c00 	mov.w	ip, #0
 800c194:	f858 2b04 	ldr.w	r2, [r8], #4
 800c198:	f8d0 e000 	ldr.w	lr, [r0]
 800c19c:	b293      	uxth	r3, r2
 800c19e:	ebac 0303 	sub.w	r3, ip, r3
 800c1a2:	0c12      	lsrs	r2, r2, #16
 800c1a4:	fa13 f38e 	uxtah	r3, r3, lr
 800c1a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1b6:	45c1      	cmp	r9, r8
 800c1b8:	f840 3b04 	str.w	r3, [r0], #4
 800c1bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1c0:	d2e8      	bcs.n	800c194 <quorem+0xb0>
 800c1c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1ca:	b922      	cbnz	r2, 800c1d6 <quorem+0xf2>
 800c1cc:	3b04      	subs	r3, #4
 800c1ce:	429d      	cmp	r5, r3
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	d30a      	bcc.n	800c1ea <quorem+0x106>
 800c1d4:	613c      	str	r4, [r7, #16]
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	b003      	add	sp, #12
 800c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1de:	6812      	ldr	r2, [r2, #0]
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	2a00      	cmp	r2, #0
 800c1e4:	d1cc      	bne.n	800c180 <quorem+0x9c>
 800c1e6:	3c01      	subs	r4, #1
 800c1e8:	e7c7      	b.n	800c17a <quorem+0x96>
 800c1ea:	6812      	ldr	r2, [r2, #0]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	2a00      	cmp	r2, #0
 800c1f0:	d1f0      	bne.n	800c1d4 <quorem+0xf0>
 800c1f2:	3c01      	subs	r4, #1
 800c1f4:	e7eb      	b.n	800c1ce <quorem+0xea>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e7ee      	b.n	800c1d8 <quorem+0xf4>
 800c1fa:	0000      	movs	r0, r0
 800c1fc:	0000      	movs	r0, r0
	...

0800c200 <_dtoa_r>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	ed2d 8b04 	vpush	{d8-d9}
 800c208:	ec57 6b10 	vmov	r6, r7, d0
 800c20c:	b093      	sub	sp, #76	; 0x4c
 800c20e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c214:	9106      	str	r1, [sp, #24]
 800c216:	ee10 aa10 	vmov	sl, s0
 800c21a:	4604      	mov	r4, r0
 800c21c:	9209      	str	r2, [sp, #36]	; 0x24
 800c21e:	930c      	str	r3, [sp, #48]	; 0x30
 800c220:	46bb      	mov	fp, r7
 800c222:	b975      	cbnz	r5, 800c242 <_dtoa_r+0x42>
 800c224:	2010      	movs	r0, #16
 800c226:	f001 f95f 	bl	800d4e8 <malloc>
 800c22a:	4602      	mov	r2, r0
 800c22c:	6260      	str	r0, [r4, #36]	; 0x24
 800c22e:	b920      	cbnz	r0, 800c23a <_dtoa_r+0x3a>
 800c230:	4ba7      	ldr	r3, [pc, #668]	; (800c4d0 <_dtoa_r+0x2d0>)
 800c232:	21ea      	movs	r1, #234	; 0xea
 800c234:	48a7      	ldr	r0, [pc, #668]	; (800c4d4 <_dtoa_r+0x2d4>)
 800c236:	f002 fceb 	bl	800ec10 <__assert_func>
 800c23a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c23e:	6005      	str	r5, [r0, #0]
 800c240:	60c5      	str	r5, [r0, #12]
 800c242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c244:	6819      	ldr	r1, [r3, #0]
 800c246:	b151      	cbz	r1, 800c25e <_dtoa_r+0x5e>
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	604a      	str	r2, [r1, #4]
 800c24c:	2301      	movs	r3, #1
 800c24e:	4093      	lsls	r3, r2
 800c250:	608b      	str	r3, [r1, #8]
 800c252:	4620      	mov	r0, r4
 800c254:	f001 f9b0 	bl	800d5b8 <_Bfree>
 800c258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	1e3b      	subs	r3, r7, #0
 800c260:	bfaa      	itet	ge
 800c262:	2300      	movge	r3, #0
 800c264:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c268:	f8c8 3000 	strge.w	r3, [r8]
 800c26c:	4b9a      	ldr	r3, [pc, #616]	; (800c4d8 <_dtoa_r+0x2d8>)
 800c26e:	bfbc      	itt	lt
 800c270:	2201      	movlt	r2, #1
 800c272:	f8c8 2000 	strlt.w	r2, [r8]
 800c276:	ea33 030b 	bics.w	r3, r3, fp
 800c27a:	d11b      	bne.n	800c2b4 <_dtoa_r+0xb4>
 800c27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c27e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c288:	4333      	orrs	r3, r6
 800c28a:	f000 8592 	beq.w	800cdb2 <_dtoa_r+0xbb2>
 800c28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c290:	b963      	cbnz	r3, 800c2ac <_dtoa_r+0xac>
 800c292:	4b92      	ldr	r3, [pc, #584]	; (800c4dc <_dtoa_r+0x2dc>)
 800c294:	e022      	b.n	800c2dc <_dtoa_r+0xdc>
 800c296:	4b92      	ldr	r3, [pc, #584]	; (800c4e0 <_dtoa_r+0x2e0>)
 800c298:	9301      	str	r3, [sp, #4]
 800c29a:	3308      	adds	r3, #8
 800c29c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c29e:	6013      	str	r3, [r2, #0]
 800c2a0:	9801      	ldr	r0, [sp, #4]
 800c2a2:	b013      	add	sp, #76	; 0x4c
 800c2a4:	ecbd 8b04 	vpop	{d8-d9}
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	4b8b      	ldr	r3, [pc, #556]	; (800c4dc <_dtoa_r+0x2dc>)
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	3303      	adds	r3, #3
 800c2b2:	e7f3      	b.n	800c29c <_dtoa_r+0x9c>
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	4659      	mov	r1, fp
 800c2bc:	f7f4 fc24 	bl	8000b08 <__aeabi_dcmpeq>
 800c2c0:	ec4b ab19 	vmov	d9, sl, fp
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	b158      	cbz	r0, 800c2e0 <_dtoa_r+0xe0>
 800c2c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 856b 	beq.w	800cdac <_dtoa_r+0xbac>
 800c2d6:	4883      	ldr	r0, [pc, #524]	; (800c4e4 <_dtoa_r+0x2e4>)
 800c2d8:	6018      	str	r0, [r3, #0]
 800c2da:	1e43      	subs	r3, r0, #1
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	e7df      	b.n	800c2a0 <_dtoa_r+0xa0>
 800c2e0:	ec4b ab10 	vmov	d0, sl, fp
 800c2e4:	aa10      	add	r2, sp, #64	; 0x40
 800c2e6:	a911      	add	r1, sp, #68	; 0x44
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f001 fd13 	bl	800dd14 <__d2b>
 800c2ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c2f2:	ee08 0a10 	vmov	s16, r0
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	f000 8084 	beq.w	800c404 <_dtoa_r+0x204>
 800c2fc:	ee19 3a90 	vmov	r3, s19
 800c300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c304:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c308:	4656      	mov	r6, sl
 800c30a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c30e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c316:	4b74      	ldr	r3, [pc, #464]	; (800c4e8 <_dtoa_r+0x2e8>)
 800c318:	2200      	movs	r2, #0
 800c31a:	4630      	mov	r0, r6
 800c31c:	4639      	mov	r1, r7
 800c31e:	f7f3 ffd3 	bl	80002c8 <__aeabi_dsub>
 800c322:	a365      	add	r3, pc, #404	; (adr r3, 800c4b8 <_dtoa_r+0x2b8>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f4 f986 	bl	8000638 <__aeabi_dmul>
 800c32c:	a364      	add	r3, pc, #400	; (adr r3, 800c4c0 <_dtoa_r+0x2c0>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	f7f3 ffcb 	bl	80002cc <__adddf3>
 800c336:	4606      	mov	r6, r0
 800c338:	4628      	mov	r0, r5
 800c33a:	460f      	mov	r7, r1
 800c33c:	f7f4 f912 	bl	8000564 <__aeabi_i2d>
 800c340:	a361      	add	r3, pc, #388	; (adr r3, 800c4c8 <_dtoa_r+0x2c8>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f7f4 f977 	bl	8000638 <__aeabi_dmul>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4630      	mov	r0, r6
 800c350:	4639      	mov	r1, r7
 800c352:	f7f3 ffbb 	bl	80002cc <__adddf3>
 800c356:	4606      	mov	r6, r0
 800c358:	460f      	mov	r7, r1
 800c35a:	f7f4 fc1d 	bl	8000b98 <__aeabi_d2iz>
 800c35e:	2200      	movs	r2, #0
 800c360:	9000      	str	r0, [sp, #0]
 800c362:	2300      	movs	r3, #0
 800c364:	4630      	mov	r0, r6
 800c366:	4639      	mov	r1, r7
 800c368:	f7f4 fbd8 	bl	8000b1c <__aeabi_dcmplt>
 800c36c:	b150      	cbz	r0, 800c384 <_dtoa_r+0x184>
 800c36e:	9800      	ldr	r0, [sp, #0]
 800c370:	f7f4 f8f8 	bl	8000564 <__aeabi_i2d>
 800c374:	4632      	mov	r2, r6
 800c376:	463b      	mov	r3, r7
 800c378:	f7f4 fbc6 	bl	8000b08 <__aeabi_dcmpeq>
 800c37c:	b910      	cbnz	r0, 800c384 <_dtoa_r+0x184>
 800c37e:	9b00      	ldr	r3, [sp, #0]
 800c380:	3b01      	subs	r3, #1
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	9b00      	ldr	r3, [sp, #0]
 800c386:	2b16      	cmp	r3, #22
 800c388:	d85a      	bhi.n	800c440 <_dtoa_r+0x240>
 800c38a:	9a00      	ldr	r2, [sp, #0]
 800c38c:	4b57      	ldr	r3, [pc, #348]	; (800c4ec <_dtoa_r+0x2ec>)
 800c38e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	ec51 0b19 	vmov	r0, r1, d9
 800c39a:	f7f4 fbbf 	bl	8000b1c <__aeabi_dcmplt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d050      	beq.n	800c444 <_dtoa_r+0x244>
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ae:	1b5d      	subs	r5, r3, r5
 800c3b0:	1e6b      	subs	r3, r5, #1
 800c3b2:	9305      	str	r3, [sp, #20]
 800c3b4:	bf45      	ittet	mi
 800c3b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c3ba:	9304      	strmi	r3, [sp, #16]
 800c3bc:	2300      	movpl	r3, #0
 800c3be:	2300      	movmi	r3, #0
 800c3c0:	bf4c      	ite	mi
 800c3c2:	9305      	strmi	r3, [sp, #20]
 800c3c4:	9304      	strpl	r3, [sp, #16]
 800c3c6:	9b00      	ldr	r3, [sp, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	db3d      	blt.n	800c448 <_dtoa_r+0x248>
 800c3cc:	9b05      	ldr	r3, [sp, #20]
 800c3ce:	9a00      	ldr	r2, [sp, #0]
 800c3d0:	920a      	str	r2, [sp, #40]	; 0x28
 800c3d2:	4413      	add	r3, r2
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9307      	str	r3, [sp, #28]
 800c3da:	9b06      	ldr	r3, [sp, #24]
 800c3dc:	2b09      	cmp	r3, #9
 800c3de:	f200 8089 	bhi.w	800c4f4 <_dtoa_r+0x2f4>
 800c3e2:	2b05      	cmp	r3, #5
 800c3e4:	bfc4      	itt	gt
 800c3e6:	3b04      	subgt	r3, #4
 800c3e8:	9306      	strgt	r3, [sp, #24]
 800c3ea:	9b06      	ldr	r3, [sp, #24]
 800c3ec:	f1a3 0302 	sub.w	r3, r3, #2
 800c3f0:	bfcc      	ite	gt
 800c3f2:	2500      	movgt	r5, #0
 800c3f4:	2501      	movle	r5, #1
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	f200 8087 	bhi.w	800c50a <_dtoa_r+0x30a>
 800c3fc:	e8df f003 	tbb	[pc, r3]
 800c400:	59383a2d 	.word	0x59383a2d
 800c404:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c408:	441d      	add	r5, r3
 800c40a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c40e:	2b20      	cmp	r3, #32
 800c410:	bfc1      	itttt	gt
 800c412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c41a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c41e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c422:	bfda      	itte	le
 800c424:	f1c3 0320 	rsble	r3, r3, #32
 800c428:	fa06 f003 	lslle.w	r0, r6, r3
 800c42c:	4318      	orrgt	r0, r3
 800c42e:	f7f4 f889 	bl	8000544 <__aeabi_ui2d>
 800c432:	2301      	movs	r3, #1
 800c434:	4606      	mov	r6, r0
 800c436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c43a:	3d01      	subs	r5, #1
 800c43c:	930e      	str	r3, [sp, #56]	; 0x38
 800c43e:	e76a      	b.n	800c316 <_dtoa_r+0x116>
 800c440:	2301      	movs	r3, #1
 800c442:	e7b2      	b.n	800c3aa <_dtoa_r+0x1aa>
 800c444:	900b      	str	r0, [sp, #44]	; 0x2c
 800c446:	e7b1      	b.n	800c3ac <_dtoa_r+0x1ac>
 800c448:	9b04      	ldr	r3, [sp, #16]
 800c44a:	9a00      	ldr	r2, [sp, #0]
 800c44c:	1a9b      	subs	r3, r3, r2
 800c44e:	9304      	str	r3, [sp, #16]
 800c450:	4253      	negs	r3, r2
 800c452:	9307      	str	r3, [sp, #28]
 800c454:	2300      	movs	r3, #0
 800c456:	930a      	str	r3, [sp, #40]	; 0x28
 800c458:	e7bf      	b.n	800c3da <_dtoa_r+0x1da>
 800c45a:	2300      	movs	r3, #0
 800c45c:	9308      	str	r3, [sp, #32]
 800c45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	dc55      	bgt.n	800c510 <_dtoa_r+0x310>
 800c464:	2301      	movs	r3, #1
 800c466:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c46a:	461a      	mov	r2, r3
 800c46c:	9209      	str	r2, [sp, #36]	; 0x24
 800c46e:	e00c      	b.n	800c48a <_dtoa_r+0x28a>
 800c470:	2301      	movs	r3, #1
 800c472:	e7f3      	b.n	800c45c <_dtoa_r+0x25c>
 800c474:	2300      	movs	r3, #0
 800c476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c478:	9308      	str	r3, [sp, #32]
 800c47a:	9b00      	ldr	r3, [sp, #0]
 800c47c:	4413      	add	r3, r2
 800c47e:	9302      	str	r3, [sp, #8]
 800c480:	3301      	adds	r3, #1
 800c482:	2b01      	cmp	r3, #1
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	bfb8      	it	lt
 800c488:	2301      	movlt	r3, #1
 800c48a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c48c:	2200      	movs	r2, #0
 800c48e:	6042      	str	r2, [r0, #4]
 800c490:	2204      	movs	r2, #4
 800c492:	f102 0614 	add.w	r6, r2, #20
 800c496:	429e      	cmp	r6, r3
 800c498:	6841      	ldr	r1, [r0, #4]
 800c49a:	d93d      	bls.n	800c518 <_dtoa_r+0x318>
 800c49c:	4620      	mov	r0, r4
 800c49e:	f001 f84b 	bl	800d538 <_Balloc>
 800c4a2:	9001      	str	r0, [sp, #4]
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d13b      	bne.n	800c520 <_dtoa_r+0x320>
 800c4a8:	4b11      	ldr	r3, [pc, #68]	; (800c4f0 <_dtoa_r+0x2f0>)
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c4b0:	e6c0      	b.n	800c234 <_dtoa_r+0x34>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e7df      	b.n	800c476 <_dtoa_r+0x276>
 800c4b6:	bf00      	nop
 800c4b8:	636f4361 	.word	0x636f4361
 800c4bc:	3fd287a7 	.word	0x3fd287a7
 800c4c0:	8b60c8b3 	.word	0x8b60c8b3
 800c4c4:	3fc68a28 	.word	0x3fc68a28
 800c4c8:	509f79fb 	.word	0x509f79fb
 800c4cc:	3fd34413 	.word	0x3fd34413
 800c4d0:	0801163e 	.word	0x0801163e
 800c4d4:	08011655 	.word	0x08011655
 800c4d8:	7ff00000 	.word	0x7ff00000
 800c4dc:	0801163a 	.word	0x0801163a
 800c4e0:	08011631 	.word	0x08011631
 800c4e4:	080118aa 	.word	0x080118aa
 800c4e8:	3ff80000 	.word	0x3ff80000
 800c4ec:	080117c0 	.word	0x080117c0
 800c4f0:	080116b0 	.word	0x080116b0
 800c4f4:	2501      	movs	r5, #1
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9306      	str	r3, [sp, #24]
 800c4fa:	9508      	str	r5, [sp, #32]
 800c4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c500:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c504:	2200      	movs	r2, #0
 800c506:	2312      	movs	r3, #18
 800c508:	e7b0      	b.n	800c46c <_dtoa_r+0x26c>
 800c50a:	2301      	movs	r3, #1
 800c50c:	9308      	str	r3, [sp, #32]
 800c50e:	e7f5      	b.n	800c4fc <_dtoa_r+0x2fc>
 800c510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c512:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c516:	e7b8      	b.n	800c48a <_dtoa_r+0x28a>
 800c518:	3101      	adds	r1, #1
 800c51a:	6041      	str	r1, [r0, #4]
 800c51c:	0052      	lsls	r2, r2, #1
 800c51e:	e7b8      	b.n	800c492 <_dtoa_r+0x292>
 800c520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c522:	9a01      	ldr	r2, [sp, #4]
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	2b0e      	cmp	r3, #14
 800c52a:	f200 809d 	bhi.w	800c668 <_dtoa_r+0x468>
 800c52e:	2d00      	cmp	r5, #0
 800c530:	f000 809a 	beq.w	800c668 <_dtoa_r+0x468>
 800c534:	9b00      	ldr	r3, [sp, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd32      	ble.n	800c5a0 <_dtoa_r+0x3a0>
 800c53a:	4ab7      	ldr	r2, [pc, #732]	; (800c818 <_dtoa_r+0x618>)
 800c53c:	f003 030f 	and.w	r3, r3, #15
 800c540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c544:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	05d8      	lsls	r0, r3, #23
 800c54c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c550:	d516      	bpl.n	800c580 <_dtoa_r+0x380>
 800c552:	4bb2      	ldr	r3, [pc, #712]	; (800c81c <_dtoa_r+0x61c>)
 800c554:	ec51 0b19 	vmov	r0, r1, d9
 800c558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c55c:	f7f4 f996 	bl	800088c <__aeabi_ddiv>
 800c560:	f007 070f 	and.w	r7, r7, #15
 800c564:	4682      	mov	sl, r0
 800c566:	468b      	mov	fp, r1
 800c568:	2503      	movs	r5, #3
 800c56a:	4eac      	ldr	r6, [pc, #688]	; (800c81c <_dtoa_r+0x61c>)
 800c56c:	b957      	cbnz	r7, 800c584 <_dtoa_r+0x384>
 800c56e:	4642      	mov	r2, r8
 800c570:	464b      	mov	r3, r9
 800c572:	4650      	mov	r0, sl
 800c574:	4659      	mov	r1, fp
 800c576:	f7f4 f989 	bl	800088c <__aeabi_ddiv>
 800c57a:	4682      	mov	sl, r0
 800c57c:	468b      	mov	fp, r1
 800c57e:	e028      	b.n	800c5d2 <_dtoa_r+0x3d2>
 800c580:	2502      	movs	r5, #2
 800c582:	e7f2      	b.n	800c56a <_dtoa_r+0x36a>
 800c584:	07f9      	lsls	r1, r7, #31
 800c586:	d508      	bpl.n	800c59a <_dtoa_r+0x39a>
 800c588:	4640      	mov	r0, r8
 800c58a:	4649      	mov	r1, r9
 800c58c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c590:	f7f4 f852 	bl	8000638 <__aeabi_dmul>
 800c594:	3501      	adds	r5, #1
 800c596:	4680      	mov	r8, r0
 800c598:	4689      	mov	r9, r1
 800c59a:	107f      	asrs	r7, r7, #1
 800c59c:	3608      	adds	r6, #8
 800c59e:	e7e5      	b.n	800c56c <_dtoa_r+0x36c>
 800c5a0:	f000 809b 	beq.w	800c6da <_dtoa_r+0x4da>
 800c5a4:	9b00      	ldr	r3, [sp, #0]
 800c5a6:	4f9d      	ldr	r7, [pc, #628]	; (800c81c <_dtoa_r+0x61c>)
 800c5a8:	425e      	negs	r6, r3
 800c5aa:	4b9b      	ldr	r3, [pc, #620]	; (800c818 <_dtoa_r+0x618>)
 800c5ac:	f006 020f 	and.w	r2, r6, #15
 800c5b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	ec51 0b19 	vmov	r0, r1, d9
 800c5bc:	f7f4 f83c 	bl	8000638 <__aeabi_dmul>
 800c5c0:	1136      	asrs	r6, r6, #4
 800c5c2:	4682      	mov	sl, r0
 800c5c4:	468b      	mov	fp, r1
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	2502      	movs	r5, #2
 800c5ca:	2e00      	cmp	r6, #0
 800c5cc:	d17a      	bne.n	800c6c4 <_dtoa_r+0x4c4>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1d3      	bne.n	800c57a <_dtoa_r+0x37a>
 800c5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 8082 	beq.w	800c6de <_dtoa_r+0x4de>
 800c5da:	4b91      	ldr	r3, [pc, #580]	; (800c820 <_dtoa_r+0x620>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4650      	mov	r0, sl
 800c5e0:	4659      	mov	r1, fp
 800c5e2:	f7f4 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d079      	beq.n	800c6de <_dtoa_r+0x4de>
 800c5ea:	9b03      	ldr	r3, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d076      	beq.n	800c6de <_dtoa_r+0x4de>
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dd36      	ble.n	800c664 <_dtoa_r+0x464>
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	4650      	mov	r0, sl
 800c5fa:	4659      	mov	r1, fp
 800c5fc:	1e5f      	subs	r7, r3, #1
 800c5fe:	2200      	movs	r2, #0
 800c600:	4b88      	ldr	r3, [pc, #544]	; (800c824 <_dtoa_r+0x624>)
 800c602:	f7f4 f819 	bl	8000638 <__aeabi_dmul>
 800c606:	9e02      	ldr	r6, [sp, #8]
 800c608:	4682      	mov	sl, r0
 800c60a:	468b      	mov	fp, r1
 800c60c:	3501      	adds	r5, #1
 800c60e:	4628      	mov	r0, r5
 800c610:	f7f3 ffa8 	bl	8000564 <__aeabi_i2d>
 800c614:	4652      	mov	r2, sl
 800c616:	465b      	mov	r3, fp
 800c618:	f7f4 f80e 	bl	8000638 <__aeabi_dmul>
 800c61c:	4b82      	ldr	r3, [pc, #520]	; (800c828 <_dtoa_r+0x628>)
 800c61e:	2200      	movs	r2, #0
 800c620:	f7f3 fe54 	bl	80002cc <__adddf3>
 800c624:	46d0      	mov	r8, sl
 800c626:	46d9      	mov	r9, fp
 800c628:	4682      	mov	sl, r0
 800c62a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c62e:	2e00      	cmp	r6, #0
 800c630:	d158      	bne.n	800c6e4 <_dtoa_r+0x4e4>
 800c632:	4b7e      	ldr	r3, [pc, #504]	; (800c82c <_dtoa_r+0x62c>)
 800c634:	2200      	movs	r2, #0
 800c636:	4640      	mov	r0, r8
 800c638:	4649      	mov	r1, r9
 800c63a:	f7f3 fe45 	bl	80002c8 <__aeabi_dsub>
 800c63e:	4652      	mov	r2, sl
 800c640:	465b      	mov	r3, fp
 800c642:	4680      	mov	r8, r0
 800c644:	4689      	mov	r9, r1
 800c646:	f7f4 fa87 	bl	8000b58 <__aeabi_dcmpgt>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f040 8295 	bne.w	800cb7a <_dtoa_r+0x97a>
 800c650:	4652      	mov	r2, sl
 800c652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c656:	4640      	mov	r0, r8
 800c658:	4649      	mov	r1, r9
 800c65a:	f7f4 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800c65e:	2800      	cmp	r0, #0
 800c660:	f040 8289 	bne.w	800cb76 <_dtoa_r+0x976>
 800c664:	ec5b ab19 	vmov	sl, fp, d9
 800c668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f2c0 8148 	blt.w	800c900 <_dtoa_r+0x700>
 800c670:	9a00      	ldr	r2, [sp, #0]
 800c672:	2a0e      	cmp	r2, #14
 800c674:	f300 8144 	bgt.w	800c900 <_dtoa_r+0x700>
 800c678:	4b67      	ldr	r3, [pc, #412]	; (800c818 <_dtoa_r+0x618>)
 800c67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c67e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c684:	2b00      	cmp	r3, #0
 800c686:	f280 80d5 	bge.w	800c834 <_dtoa_r+0x634>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f300 80d1 	bgt.w	800c834 <_dtoa_r+0x634>
 800c692:	f040 826f 	bne.w	800cb74 <_dtoa_r+0x974>
 800c696:	4b65      	ldr	r3, [pc, #404]	; (800c82c <_dtoa_r+0x62c>)
 800c698:	2200      	movs	r2, #0
 800c69a:	4640      	mov	r0, r8
 800c69c:	4649      	mov	r1, r9
 800c69e:	f7f3 ffcb 	bl	8000638 <__aeabi_dmul>
 800c6a2:	4652      	mov	r2, sl
 800c6a4:	465b      	mov	r3, fp
 800c6a6:	f7f4 fa4d 	bl	8000b44 <__aeabi_dcmpge>
 800c6aa:	9e03      	ldr	r6, [sp, #12]
 800c6ac:	4637      	mov	r7, r6
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	f040 8245 	bne.w	800cb3e <_dtoa_r+0x93e>
 800c6b4:	9d01      	ldr	r5, [sp, #4]
 800c6b6:	2331      	movs	r3, #49	; 0x31
 800c6b8:	f805 3b01 	strb.w	r3, [r5], #1
 800c6bc:	9b00      	ldr	r3, [sp, #0]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	e240      	b.n	800cb46 <_dtoa_r+0x946>
 800c6c4:	07f2      	lsls	r2, r6, #31
 800c6c6:	d505      	bpl.n	800c6d4 <_dtoa_r+0x4d4>
 800c6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6cc:	f7f3 ffb4 	bl	8000638 <__aeabi_dmul>
 800c6d0:	3501      	adds	r5, #1
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	1076      	asrs	r6, r6, #1
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	e777      	b.n	800c5ca <_dtoa_r+0x3ca>
 800c6da:	2502      	movs	r5, #2
 800c6dc:	e779      	b.n	800c5d2 <_dtoa_r+0x3d2>
 800c6de:	9f00      	ldr	r7, [sp, #0]
 800c6e0:	9e03      	ldr	r6, [sp, #12]
 800c6e2:	e794      	b.n	800c60e <_dtoa_r+0x40e>
 800c6e4:	9901      	ldr	r1, [sp, #4]
 800c6e6:	4b4c      	ldr	r3, [pc, #304]	; (800c818 <_dtoa_r+0x618>)
 800c6e8:	4431      	add	r1, r6
 800c6ea:	910d      	str	r1, [sp, #52]	; 0x34
 800c6ec:	9908      	ldr	r1, [sp, #32]
 800c6ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c6f6:	2900      	cmp	r1, #0
 800c6f8:	d043      	beq.n	800c782 <_dtoa_r+0x582>
 800c6fa:	494d      	ldr	r1, [pc, #308]	; (800c830 <_dtoa_r+0x630>)
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f7f4 f8c5 	bl	800088c <__aeabi_ddiv>
 800c702:	4652      	mov	r2, sl
 800c704:	465b      	mov	r3, fp
 800c706:	f7f3 fddf 	bl	80002c8 <__aeabi_dsub>
 800c70a:	9d01      	ldr	r5, [sp, #4]
 800c70c:	4682      	mov	sl, r0
 800c70e:	468b      	mov	fp, r1
 800c710:	4649      	mov	r1, r9
 800c712:	4640      	mov	r0, r8
 800c714:	f7f4 fa40 	bl	8000b98 <__aeabi_d2iz>
 800c718:	4606      	mov	r6, r0
 800c71a:	f7f3 ff23 	bl	8000564 <__aeabi_i2d>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4640      	mov	r0, r8
 800c724:	4649      	mov	r1, r9
 800c726:	f7f3 fdcf 	bl	80002c8 <__aeabi_dsub>
 800c72a:	3630      	adds	r6, #48	; 0x30
 800c72c:	f805 6b01 	strb.w	r6, [r5], #1
 800c730:	4652      	mov	r2, sl
 800c732:	465b      	mov	r3, fp
 800c734:	4680      	mov	r8, r0
 800c736:	4689      	mov	r9, r1
 800c738:	f7f4 f9f0 	bl	8000b1c <__aeabi_dcmplt>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d163      	bne.n	800c808 <_dtoa_r+0x608>
 800c740:	4642      	mov	r2, r8
 800c742:	464b      	mov	r3, r9
 800c744:	4936      	ldr	r1, [pc, #216]	; (800c820 <_dtoa_r+0x620>)
 800c746:	2000      	movs	r0, #0
 800c748:	f7f3 fdbe 	bl	80002c8 <__aeabi_dsub>
 800c74c:	4652      	mov	r2, sl
 800c74e:	465b      	mov	r3, fp
 800c750:	f7f4 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 800c754:	2800      	cmp	r0, #0
 800c756:	f040 80b5 	bne.w	800c8c4 <_dtoa_r+0x6c4>
 800c75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c75c:	429d      	cmp	r5, r3
 800c75e:	d081      	beq.n	800c664 <_dtoa_r+0x464>
 800c760:	4b30      	ldr	r3, [pc, #192]	; (800c824 <_dtoa_r+0x624>)
 800c762:	2200      	movs	r2, #0
 800c764:	4650      	mov	r0, sl
 800c766:	4659      	mov	r1, fp
 800c768:	f7f3 ff66 	bl	8000638 <__aeabi_dmul>
 800c76c:	4b2d      	ldr	r3, [pc, #180]	; (800c824 <_dtoa_r+0x624>)
 800c76e:	4682      	mov	sl, r0
 800c770:	468b      	mov	fp, r1
 800c772:	4640      	mov	r0, r8
 800c774:	4649      	mov	r1, r9
 800c776:	2200      	movs	r2, #0
 800c778:	f7f3 ff5e 	bl	8000638 <__aeabi_dmul>
 800c77c:	4680      	mov	r8, r0
 800c77e:	4689      	mov	r9, r1
 800c780:	e7c6      	b.n	800c710 <_dtoa_r+0x510>
 800c782:	4650      	mov	r0, sl
 800c784:	4659      	mov	r1, fp
 800c786:	f7f3 ff57 	bl	8000638 <__aeabi_dmul>
 800c78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c78c:	9d01      	ldr	r5, [sp, #4]
 800c78e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c790:	4682      	mov	sl, r0
 800c792:	468b      	mov	fp, r1
 800c794:	4649      	mov	r1, r9
 800c796:	4640      	mov	r0, r8
 800c798:	f7f4 f9fe 	bl	8000b98 <__aeabi_d2iz>
 800c79c:	4606      	mov	r6, r0
 800c79e:	f7f3 fee1 	bl	8000564 <__aeabi_i2d>
 800c7a2:	3630      	adds	r6, #48	; 0x30
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	f7f3 fd8c 	bl	80002c8 <__aeabi_dsub>
 800c7b0:	f805 6b01 	strb.w	r6, [r5], #1
 800c7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b6:	429d      	cmp	r5, r3
 800c7b8:	4680      	mov	r8, r0
 800c7ba:	4689      	mov	r9, r1
 800c7bc:	f04f 0200 	mov.w	r2, #0
 800c7c0:	d124      	bne.n	800c80c <_dtoa_r+0x60c>
 800c7c2:	4b1b      	ldr	r3, [pc, #108]	; (800c830 <_dtoa_r+0x630>)
 800c7c4:	4650      	mov	r0, sl
 800c7c6:	4659      	mov	r1, fp
 800c7c8:	f7f3 fd80 	bl	80002cc <__adddf3>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4640      	mov	r0, r8
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	f7f4 f9c0 	bl	8000b58 <__aeabi_dcmpgt>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d173      	bne.n	800c8c4 <_dtoa_r+0x6c4>
 800c7dc:	4652      	mov	r2, sl
 800c7de:	465b      	mov	r3, fp
 800c7e0:	4913      	ldr	r1, [pc, #76]	; (800c830 <_dtoa_r+0x630>)
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	f7f3 fd70 	bl	80002c8 <__aeabi_dsub>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	f7f4 f994 	bl	8000b1c <__aeabi_dcmplt>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	f43f af35 	beq.w	800c664 <_dtoa_r+0x464>
 800c7fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c7fc:	1e6b      	subs	r3, r5, #1
 800c7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c804:	2b30      	cmp	r3, #48	; 0x30
 800c806:	d0f8      	beq.n	800c7fa <_dtoa_r+0x5fa>
 800c808:	9700      	str	r7, [sp, #0]
 800c80a:	e049      	b.n	800c8a0 <_dtoa_r+0x6a0>
 800c80c:	4b05      	ldr	r3, [pc, #20]	; (800c824 <_dtoa_r+0x624>)
 800c80e:	f7f3 ff13 	bl	8000638 <__aeabi_dmul>
 800c812:	4680      	mov	r8, r0
 800c814:	4689      	mov	r9, r1
 800c816:	e7bd      	b.n	800c794 <_dtoa_r+0x594>
 800c818:	080117c0 	.word	0x080117c0
 800c81c:	08011798 	.word	0x08011798
 800c820:	3ff00000 	.word	0x3ff00000
 800c824:	40240000 	.word	0x40240000
 800c828:	401c0000 	.word	0x401c0000
 800c82c:	40140000 	.word	0x40140000
 800c830:	3fe00000 	.word	0x3fe00000
 800c834:	9d01      	ldr	r5, [sp, #4]
 800c836:	4656      	mov	r6, sl
 800c838:	465f      	mov	r7, fp
 800c83a:	4642      	mov	r2, r8
 800c83c:	464b      	mov	r3, r9
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	f7f4 f823 	bl	800088c <__aeabi_ddiv>
 800c846:	f7f4 f9a7 	bl	8000b98 <__aeabi_d2iz>
 800c84a:	4682      	mov	sl, r0
 800c84c:	f7f3 fe8a 	bl	8000564 <__aeabi_i2d>
 800c850:	4642      	mov	r2, r8
 800c852:	464b      	mov	r3, r9
 800c854:	f7f3 fef0 	bl	8000638 <__aeabi_dmul>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4630      	mov	r0, r6
 800c85e:	4639      	mov	r1, r7
 800c860:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c864:	f7f3 fd30 	bl	80002c8 <__aeabi_dsub>
 800c868:	f805 6b01 	strb.w	r6, [r5], #1
 800c86c:	9e01      	ldr	r6, [sp, #4]
 800c86e:	9f03      	ldr	r7, [sp, #12]
 800c870:	1bae      	subs	r6, r5, r6
 800c872:	42b7      	cmp	r7, r6
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	d135      	bne.n	800c8e6 <_dtoa_r+0x6e6>
 800c87a:	f7f3 fd27 	bl	80002cc <__adddf3>
 800c87e:	4642      	mov	r2, r8
 800c880:	464b      	mov	r3, r9
 800c882:	4606      	mov	r6, r0
 800c884:	460f      	mov	r7, r1
 800c886:	f7f4 f967 	bl	8000b58 <__aeabi_dcmpgt>
 800c88a:	b9d0      	cbnz	r0, 800c8c2 <_dtoa_r+0x6c2>
 800c88c:	4642      	mov	r2, r8
 800c88e:	464b      	mov	r3, r9
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f4 f938 	bl	8000b08 <__aeabi_dcmpeq>
 800c898:	b110      	cbz	r0, 800c8a0 <_dtoa_r+0x6a0>
 800c89a:	f01a 0f01 	tst.w	sl, #1
 800c89e:	d110      	bne.n	800c8c2 <_dtoa_r+0x6c2>
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	ee18 1a10 	vmov	r1, s16
 800c8a6:	f000 fe87 	bl	800d5b8 <_Bfree>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9800      	ldr	r0, [sp, #0]
 800c8ae:	702b      	strb	r3, [r5, #0]
 800c8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	6018      	str	r0, [r3, #0]
 800c8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f43f acf1 	beq.w	800c2a0 <_dtoa_r+0xa0>
 800c8be:	601d      	str	r5, [r3, #0]
 800c8c0:	e4ee      	b.n	800c2a0 <_dtoa_r+0xa0>
 800c8c2:	9f00      	ldr	r7, [sp, #0]
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	461d      	mov	r5, r3
 800c8c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8cc:	2a39      	cmp	r2, #57	; 0x39
 800c8ce:	d106      	bne.n	800c8de <_dtoa_r+0x6de>
 800c8d0:	9a01      	ldr	r2, [sp, #4]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d1f7      	bne.n	800c8c6 <_dtoa_r+0x6c6>
 800c8d6:	9901      	ldr	r1, [sp, #4]
 800c8d8:	2230      	movs	r2, #48	; 0x30
 800c8da:	3701      	adds	r7, #1
 800c8dc:	700a      	strb	r2, [r1, #0]
 800c8de:	781a      	ldrb	r2, [r3, #0]
 800c8e0:	3201      	adds	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]
 800c8e4:	e790      	b.n	800c808 <_dtoa_r+0x608>
 800c8e6:	4ba6      	ldr	r3, [pc, #664]	; (800cb80 <_dtoa_r+0x980>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f7f3 fea5 	bl	8000638 <__aeabi_dmul>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460f      	mov	r7, r1
 800c8f6:	f7f4 f907 	bl	8000b08 <__aeabi_dcmpeq>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d09d      	beq.n	800c83a <_dtoa_r+0x63a>
 800c8fe:	e7cf      	b.n	800c8a0 <_dtoa_r+0x6a0>
 800c900:	9a08      	ldr	r2, [sp, #32]
 800c902:	2a00      	cmp	r2, #0
 800c904:	f000 80d7 	beq.w	800cab6 <_dtoa_r+0x8b6>
 800c908:	9a06      	ldr	r2, [sp, #24]
 800c90a:	2a01      	cmp	r2, #1
 800c90c:	f300 80ba 	bgt.w	800ca84 <_dtoa_r+0x884>
 800c910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c912:	2a00      	cmp	r2, #0
 800c914:	f000 80b2 	beq.w	800ca7c <_dtoa_r+0x87c>
 800c918:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c91c:	9e07      	ldr	r6, [sp, #28]
 800c91e:	9d04      	ldr	r5, [sp, #16]
 800c920:	9a04      	ldr	r2, [sp, #16]
 800c922:	441a      	add	r2, r3
 800c924:	9204      	str	r2, [sp, #16]
 800c926:	9a05      	ldr	r2, [sp, #20]
 800c928:	2101      	movs	r1, #1
 800c92a:	441a      	add	r2, r3
 800c92c:	4620      	mov	r0, r4
 800c92e:	9205      	str	r2, [sp, #20]
 800c930:	f000 ff44 	bl	800d7bc <__i2b>
 800c934:	4607      	mov	r7, r0
 800c936:	2d00      	cmp	r5, #0
 800c938:	dd0c      	ble.n	800c954 <_dtoa_r+0x754>
 800c93a:	9b05      	ldr	r3, [sp, #20]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	dd09      	ble.n	800c954 <_dtoa_r+0x754>
 800c940:	42ab      	cmp	r3, r5
 800c942:	9a04      	ldr	r2, [sp, #16]
 800c944:	bfa8      	it	ge
 800c946:	462b      	movge	r3, r5
 800c948:	1ad2      	subs	r2, r2, r3
 800c94a:	9204      	str	r2, [sp, #16]
 800c94c:	9a05      	ldr	r2, [sp, #20]
 800c94e:	1aed      	subs	r5, r5, r3
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	9305      	str	r3, [sp, #20]
 800c954:	9b07      	ldr	r3, [sp, #28]
 800c956:	b31b      	cbz	r3, 800c9a0 <_dtoa_r+0x7a0>
 800c958:	9b08      	ldr	r3, [sp, #32]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f000 80af 	beq.w	800cabe <_dtoa_r+0x8be>
 800c960:	2e00      	cmp	r6, #0
 800c962:	dd13      	ble.n	800c98c <_dtoa_r+0x78c>
 800c964:	4639      	mov	r1, r7
 800c966:	4632      	mov	r2, r6
 800c968:	4620      	mov	r0, r4
 800c96a:	f000 ffe7 	bl	800d93c <__pow5mult>
 800c96e:	ee18 2a10 	vmov	r2, s16
 800c972:	4601      	mov	r1, r0
 800c974:	4607      	mov	r7, r0
 800c976:	4620      	mov	r0, r4
 800c978:	f000 ff36 	bl	800d7e8 <__multiply>
 800c97c:	ee18 1a10 	vmov	r1, s16
 800c980:	4680      	mov	r8, r0
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fe18 	bl	800d5b8 <_Bfree>
 800c988:	ee08 8a10 	vmov	s16, r8
 800c98c:	9b07      	ldr	r3, [sp, #28]
 800c98e:	1b9a      	subs	r2, r3, r6
 800c990:	d006      	beq.n	800c9a0 <_dtoa_r+0x7a0>
 800c992:	ee18 1a10 	vmov	r1, s16
 800c996:	4620      	mov	r0, r4
 800c998:	f000 ffd0 	bl	800d93c <__pow5mult>
 800c99c:	ee08 0a10 	vmov	s16, r0
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 ff0a 	bl	800d7bc <__i2b>
 800c9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	f340 8088 	ble.w	800cac2 <_dtoa_r+0x8c2>
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	4601      	mov	r1, r0
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 ffc0 	bl	800d93c <__pow5mult>
 800c9bc:	9b06      	ldr	r3, [sp, #24]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	f340 8081 	ble.w	800cac8 <_dtoa_r+0x8c8>
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	6933      	ldr	r3, [r6, #16]
 800c9cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9d0:	6918      	ldr	r0, [r3, #16]
 800c9d2:	f000 fea3 	bl	800d71c <__hi0bits>
 800c9d6:	f1c0 0020 	rsb	r0, r0, #32
 800c9da:	9b05      	ldr	r3, [sp, #20]
 800c9dc:	4418      	add	r0, r3
 800c9de:	f010 001f 	ands.w	r0, r0, #31
 800c9e2:	f000 8092 	beq.w	800cb0a <_dtoa_r+0x90a>
 800c9e6:	f1c0 0320 	rsb	r3, r0, #32
 800c9ea:	2b04      	cmp	r3, #4
 800c9ec:	f340 808a 	ble.w	800cb04 <_dtoa_r+0x904>
 800c9f0:	f1c0 001c 	rsb	r0, r0, #28
 800c9f4:	9b04      	ldr	r3, [sp, #16]
 800c9f6:	4403      	add	r3, r0
 800c9f8:	9304      	str	r3, [sp, #16]
 800c9fa:	9b05      	ldr	r3, [sp, #20]
 800c9fc:	4403      	add	r3, r0
 800c9fe:	4405      	add	r5, r0
 800ca00:	9305      	str	r3, [sp, #20]
 800ca02:	9b04      	ldr	r3, [sp, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dd07      	ble.n	800ca18 <_dtoa_r+0x818>
 800ca08:	ee18 1a10 	vmov	r1, s16
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 ffee 	bl	800d9f0 <__lshift>
 800ca14:	ee08 0a10 	vmov	s16, r0
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	dd05      	ble.n	800ca2a <_dtoa_r+0x82a>
 800ca1e:	4631      	mov	r1, r6
 800ca20:	461a      	mov	r2, r3
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 ffe4 	bl	800d9f0 <__lshift>
 800ca28:	4606      	mov	r6, r0
 800ca2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d06e      	beq.n	800cb0e <_dtoa_r+0x90e>
 800ca30:	ee18 0a10 	vmov	r0, s16
 800ca34:	4631      	mov	r1, r6
 800ca36:	f001 f84b 	bl	800dad0 <__mcmp>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	da67      	bge.n	800cb0e <_dtoa_r+0x90e>
 800ca3e:	9b00      	ldr	r3, [sp, #0]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	ee18 1a10 	vmov	r1, s16
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	220a      	movs	r2, #10
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fdd5 	bl	800d5fc <__multadd>
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	ee08 0a10 	vmov	s16, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 81b1 	beq.w	800cdc0 <_dtoa_r+0xbc0>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4639      	mov	r1, r7
 800ca62:	220a      	movs	r2, #10
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fdc9 	bl	800d5fc <__multadd>
 800ca6a:	9b02      	ldr	r3, [sp, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	4607      	mov	r7, r0
 800ca70:	f300 808e 	bgt.w	800cb90 <_dtoa_r+0x990>
 800ca74:	9b06      	ldr	r3, [sp, #24]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	dc51      	bgt.n	800cb1e <_dtoa_r+0x91e>
 800ca7a:	e089      	b.n	800cb90 <_dtoa_r+0x990>
 800ca7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca82:	e74b      	b.n	800c91c <_dtoa_r+0x71c>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	1e5e      	subs	r6, r3, #1
 800ca88:	9b07      	ldr	r3, [sp, #28]
 800ca8a:	42b3      	cmp	r3, r6
 800ca8c:	bfbf      	itttt	lt
 800ca8e:	9b07      	ldrlt	r3, [sp, #28]
 800ca90:	9607      	strlt	r6, [sp, #28]
 800ca92:	1af2      	sublt	r2, r6, r3
 800ca94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ca96:	bfb6      	itet	lt
 800ca98:	189b      	addlt	r3, r3, r2
 800ca9a:	1b9e      	subge	r6, r3, r6
 800ca9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ca9e:	9b03      	ldr	r3, [sp, #12]
 800caa0:	bfb8      	it	lt
 800caa2:	2600      	movlt	r6, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfb7      	itett	lt
 800caa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800caac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cab0:	1a9d      	sublt	r5, r3, r2
 800cab2:	2300      	movlt	r3, #0
 800cab4:	e734      	b.n	800c920 <_dtoa_r+0x720>
 800cab6:	9e07      	ldr	r6, [sp, #28]
 800cab8:	9d04      	ldr	r5, [sp, #16]
 800caba:	9f08      	ldr	r7, [sp, #32]
 800cabc:	e73b      	b.n	800c936 <_dtoa_r+0x736>
 800cabe:	9a07      	ldr	r2, [sp, #28]
 800cac0:	e767      	b.n	800c992 <_dtoa_r+0x792>
 800cac2:	9b06      	ldr	r3, [sp, #24]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	dc18      	bgt.n	800cafa <_dtoa_r+0x8fa>
 800cac8:	f1ba 0f00 	cmp.w	sl, #0
 800cacc:	d115      	bne.n	800cafa <_dtoa_r+0x8fa>
 800cace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cad2:	b993      	cbnz	r3, 800cafa <_dtoa_r+0x8fa>
 800cad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cad8:	0d1b      	lsrs	r3, r3, #20
 800cada:	051b      	lsls	r3, r3, #20
 800cadc:	b183      	cbz	r3, 800cb00 <_dtoa_r+0x900>
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	3301      	adds	r3, #1
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	9b05      	ldr	r3, [sp, #20]
 800cae6:	3301      	adds	r3, #1
 800cae8:	9305      	str	r3, [sp, #20]
 800caea:	f04f 0801 	mov.w	r8, #1
 800caee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f47f af6a 	bne.w	800c9ca <_dtoa_r+0x7ca>
 800caf6:	2001      	movs	r0, #1
 800caf8:	e76f      	b.n	800c9da <_dtoa_r+0x7da>
 800cafa:	f04f 0800 	mov.w	r8, #0
 800cafe:	e7f6      	b.n	800caee <_dtoa_r+0x8ee>
 800cb00:	4698      	mov	r8, r3
 800cb02:	e7f4      	b.n	800caee <_dtoa_r+0x8ee>
 800cb04:	f43f af7d 	beq.w	800ca02 <_dtoa_r+0x802>
 800cb08:	4618      	mov	r0, r3
 800cb0a:	301c      	adds	r0, #28
 800cb0c:	e772      	b.n	800c9f4 <_dtoa_r+0x7f4>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	dc37      	bgt.n	800cb84 <_dtoa_r+0x984>
 800cb14:	9b06      	ldr	r3, [sp, #24]
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	dd34      	ble.n	800cb84 <_dtoa_r+0x984>
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	9302      	str	r3, [sp, #8]
 800cb1e:	9b02      	ldr	r3, [sp, #8]
 800cb20:	b96b      	cbnz	r3, 800cb3e <_dtoa_r+0x93e>
 800cb22:	4631      	mov	r1, r6
 800cb24:	2205      	movs	r2, #5
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 fd68 	bl	800d5fc <__multadd>
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	4606      	mov	r6, r0
 800cb30:	ee18 0a10 	vmov	r0, s16
 800cb34:	f000 ffcc 	bl	800dad0 <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	f73f adbb 	bgt.w	800c6b4 <_dtoa_r+0x4b4>
 800cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb40:	9d01      	ldr	r5, [sp, #4]
 800cb42:	43db      	mvns	r3, r3
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	f04f 0800 	mov.w	r8, #0
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 fd33 	bl	800d5b8 <_Bfree>
 800cb52:	2f00      	cmp	r7, #0
 800cb54:	f43f aea4 	beq.w	800c8a0 <_dtoa_r+0x6a0>
 800cb58:	f1b8 0f00 	cmp.w	r8, #0
 800cb5c:	d005      	beq.n	800cb6a <_dtoa_r+0x96a>
 800cb5e:	45b8      	cmp	r8, r7
 800cb60:	d003      	beq.n	800cb6a <_dtoa_r+0x96a>
 800cb62:	4641      	mov	r1, r8
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 fd27 	bl	800d5b8 <_Bfree>
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 fd23 	bl	800d5b8 <_Bfree>
 800cb72:	e695      	b.n	800c8a0 <_dtoa_r+0x6a0>
 800cb74:	2600      	movs	r6, #0
 800cb76:	4637      	mov	r7, r6
 800cb78:	e7e1      	b.n	800cb3e <_dtoa_r+0x93e>
 800cb7a:	9700      	str	r7, [sp, #0]
 800cb7c:	4637      	mov	r7, r6
 800cb7e:	e599      	b.n	800c6b4 <_dtoa_r+0x4b4>
 800cb80:	40240000 	.word	0x40240000
 800cb84:	9b08      	ldr	r3, [sp, #32]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 80ca 	beq.w	800cd20 <_dtoa_r+0xb20>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	9302      	str	r3, [sp, #8]
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	dd05      	ble.n	800cba0 <_dtoa_r+0x9a0>
 800cb94:	4639      	mov	r1, r7
 800cb96:	462a      	mov	r2, r5
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 ff29 	bl	800d9f0 <__lshift>
 800cb9e:	4607      	mov	r7, r0
 800cba0:	f1b8 0f00 	cmp.w	r8, #0
 800cba4:	d05b      	beq.n	800cc5e <_dtoa_r+0xa5e>
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fcc5 	bl	800d538 <_Balloc>
 800cbae:	4605      	mov	r5, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <_dtoa_r+0x9be>
 800cbb2:	4b87      	ldr	r3, [pc, #540]	; (800cdd0 <_dtoa_r+0xbd0>)
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cbba:	f7ff bb3b 	b.w	800c234 <_dtoa_r+0x34>
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	3202      	adds	r2, #2
 800cbc2:	0092      	lsls	r2, r2, #2
 800cbc4:	f107 010c 	add.w	r1, r7, #12
 800cbc8:	300c      	adds	r0, #12
 800cbca:	f000 fca7 	bl	800d51c <memcpy>
 800cbce:	2201      	movs	r2, #1
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f000 ff0c 	bl	800d9f0 <__lshift>
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	f103 0901 	add.w	r9, r3, #1
 800cbde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	9305      	str	r3, [sp, #20]
 800cbe6:	f00a 0301 	and.w	r3, sl, #1
 800cbea:	46b8      	mov	r8, r7
 800cbec:	9304      	str	r3, [sp, #16]
 800cbee:	4607      	mov	r7, r0
 800cbf0:	4631      	mov	r1, r6
 800cbf2:	ee18 0a10 	vmov	r0, s16
 800cbf6:	f7ff fa75 	bl	800c0e4 <quorem>
 800cbfa:	4641      	mov	r1, r8
 800cbfc:	9002      	str	r0, [sp, #8]
 800cbfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc02:	ee18 0a10 	vmov	r0, s16
 800cc06:	f000 ff63 	bl	800dad0 <__mcmp>
 800cc0a:	463a      	mov	r2, r7
 800cc0c:	9003      	str	r0, [sp, #12]
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 ff79 	bl	800db08 <__mdiff>
 800cc16:	68c2      	ldr	r2, [r0, #12]
 800cc18:	f109 3bff 	add.w	fp, r9, #4294967295
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	bb02      	cbnz	r2, 800cc62 <_dtoa_r+0xa62>
 800cc20:	4601      	mov	r1, r0
 800cc22:	ee18 0a10 	vmov	r0, s16
 800cc26:	f000 ff53 	bl	800dad0 <__mcmp>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4620      	mov	r0, r4
 800cc30:	9207      	str	r2, [sp, #28]
 800cc32:	f000 fcc1 	bl	800d5b8 <_Bfree>
 800cc36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cc3a:	ea43 0102 	orr.w	r1, r3, r2
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	430b      	orrs	r3, r1
 800cc42:	464d      	mov	r5, r9
 800cc44:	d10f      	bne.n	800cc66 <_dtoa_r+0xa66>
 800cc46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc4a:	d02a      	beq.n	800cca2 <_dtoa_r+0xaa2>
 800cc4c:	9b03      	ldr	r3, [sp, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	dd02      	ble.n	800cc58 <_dtoa_r+0xa58>
 800cc52:	9b02      	ldr	r3, [sp, #8]
 800cc54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cc58:	f88b a000 	strb.w	sl, [fp]
 800cc5c:	e775      	b.n	800cb4a <_dtoa_r+0x94a>
 800cc5e:	4638      	mov	r0, r7
 800cc60:	e7ba      	b.n	800cbd8 <_dtoa_r+0x9d8>
 800cc62:	2201      	movs	r2, #1
 800cc64:	e7e2      	b.n	800cc2c <_dtoa_r+0xa2c>
 800cc66:	9b03      	ldr	r3, [sp, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	db04      	blt.n	800cc76 <_dtoa_r+0xa76>
 800cc6c:	9906      	ldr	r1, [sp, #24]
 800cc6e:	430b      	orrs	r3, r1
 800cc70:	9904      	ldr	r1, [sp, #16]
 800cc72:	430b      	orrs	r3, r1
 800cc74:	d122      	bne.n	800ccbc <_dtoa_r+0xabc>
 800cc76:	2a00      	cmp	r2, #0
 800cc78:	ddee      	ble.n	800cc58 <_dtoa_r+0xa58>
 800cc7a:	ee18 1a10 	vmov	r1, s16
 800cc7e:	2201      	movs	r2, #1
 800cc80:	4620      	mov	r0, r4
 800cc82:	f000 feb5 	bl	800d9f0 <__lshift>
 800cc86:	4631      	mov	r1, r6
 800cc88:	ee08 0a10 	vmov	s16, r0
 800cc8c:	f000 ff20 	bl	800dad0 <__mcmp>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	dc03      	bgt.n	800cc9c <_dtoa_r+0xa9c>
 800cc94:	d1e0      	bne.n	800cc58 <_dtoa_r+0xa58>
 800cc96:	f01a 0f01 	tst.w	sl, #1
 800cc9a:	d0dd      	beq.n	800cc58 <_dtoa_r+0xa58>
 800cc9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cca0:	d1d7      	bne.n	800cc52 <_dtoa_r+0xa52>
 800cca2:	2339      	movs	r3, #57	; 0x39
 800cca4:	f88b 3000 	strb.w	r3, [fp]
 800cca8:	462b      	mov	r3, r5
 800ccaa:	461d      	mov	r5, r3
 800ccac:	3b01      	subs	r3, #1
 800ccae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccb2:	2a39      	cmp	r2, #57	; 0x39
 800ccb4:	d071      	beq.n	800cd9a <_dtoa_r+0xb9a>
 800ccb6:	3201      	adds	r2, #1
 800ccb8:	701a      	strb	r2, [r3, #0]
 800ccba:	e746      	b.n	800cb4a <_dtoa_r+0x94a>
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	dd07      	ble.n	800ccd0 <_dtoa_r+0xad0>
 800ccc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ccc4:	d0ed      	beq.n	800cca2 <_dtoa_r+0xaa2>
 800ccc6:	f10a 0301 	add.w	r3, sl, #1
 800ccca:	f88b 3000 	strb.w	r3, [fp]
 800ccce:	e73c      	b.n	800cb4a <_dtoa_r+0x94a>
 800ccd0:	9b05      	ldr	r3, [sp, #20]
 800ccd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ccd6:	4599      	cmp	r9, r3
 800ccd8:	d047      	beq.n	800cd6a <_dtoa_r+0xb6a>
 800ccda:	ee18 1a10 	vmov	r1, s16
 800ccde:	2300      	movs	r3, #0
 800cce0:	220a      	movs	r2, #10
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fc8a 	bl	800d5fc <__multadd>
 800cce8:	45b8      	cmp	r8, r7
 800ccea:	ee08 0a10 	vmov	s16, r0
 800ccee:	f04f 0300 	mov.w	r3, #0
 800ccf2:	f04f 020a 	mov.w	r2, #10
 800ccf6:	4641      	mov	r1, r8
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	d106      	bne.n	800cd0a <_dtoa_r+0xb0a>
 800ccfc:	f000 fc7e 	bl	800d5fc <__multadd>
 800cd00:	4680      	mov	r8, r0
 800cd02:	4607      	mov	r7, r0
 800cd04:	f109 0901 	add.w	r9, r9, #1
 800cd08:	e772      	b.n	800cbf0 <_dtoa_r+0x9f0>
 800cd0a:	f000 fc77 	bl	800d5fc <__multadd>
 800cd0e:	4639      	mov	r1, r7
 800cd10:	4680      	mov	r8, r0
 800cd12:	2300      	movs	r3, #0
 800cd14:	220a      	movs	r2, #10
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 fc70 	bl	800d5fc <__multadd>
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	e7f1      	b.n	800cd04 <_dtoa_r+0xb04>
 800cd20:	9b03      	ldr	r3, [sp, #12]
 800cd22:	9302      	str	r3, [sp, #8]
 800cd24:	9d01      	ldr	r5, [sp, #4]
 800cd26:	ee18 0a10 	vmov	r0, s16
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	f7ff f9da 	bl	800c0e4 <quorem>
 800cd30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	f805 ab01 	strb.w	sl, [r5], #1
 800cd3a:	1aea      	subs	r2, r5, r3
 800cd3c:	9b02      	ldr	r3, [sp, #8]
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	dd09      	ble.n	800cd56 <_dtoa_r+0xb56>
 800cd42:	ee18 1a10 	vmov	r1, s16
 800cd46:	2300      	movs	r3, #0
 800cd48:	220a      	movs	r2, #10
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 fc56 	bl	800d5fc <__multadd>
 800cd50:	ee08 0a10 	vmov	s16, r0
 800cd54:	e7e7      	b.n	800cd26 <_dtoa_r+0xb26>
 800cd56:	9b02      	ldr	r3, [sp, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfc8      	it	gt
 800cd5c:	461d      	movgt	r5, r3
 800cd5e:	9b01      	ldr	r3, [sp, #4]
 800cd60:	bfd8      	it	le
 800cd62:	2501      	movle	r5, #1
 800cd64:	441d      	add	r5, r3
 800cd66:	f04f 0800 	mov.w	r8, #0
 800cd6a:	ee18 1a10 	vmov	r1, s16
 800cd6e:	2201      	movs	r2, #1
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fe3d 	bl	800d9f0 <__lshift>
 800cd76:	4631      	mov	r1, r6
 800cd78:	ee08 0a10 	vmov	s16, r0
 800cd7c:	f000 fea8 	bl	800dad0 <__mcmp>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	dc91      	bgt.n	800cca8 <_dtoa_r+0xaa8>
 800cd84:	d102      	bne.n	800cd8c <_dtoa_r+0xb8c>
 800cd86:	f01a 0f01 	tst.w	sl, #1
 800cd8a:	d18d      	bne.n	800cca8 <_dtoa_r+0xaa8>
 800cd8c:	462b      	mov	r3, r5
 800cd8e:	461d      	mov	r5, r3
 800cd90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd94:	2a30      	cmp	r2, #48	; 0x30
 800cd96:	d0fa      	beq.n	800cd8e <_dtoa_r+0xb8e>
 800cd98:	e6d7      	b.n	800cb4a <_dtoa_r+0x94a>
 800cd9a:	9a01      	ldr	r2, [sp, #4]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d184      	bne.n	800ccaa <_dtoa_r+0xaaa>
 800cda0:	9b00      	ldr	r3, [sp, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	2331      	movs	r3, #49	; 0x31
 800cda8:	7013      	strb	r3, [r2, #0]
 800cdaa:	e6ce      	b.n	800cb4a <_dtoa_r+0x94a>
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <_dtoa_r+0xbd4>)
 800cdae:	f7ff ba95 	b.w	800c2dc <_dtoa_r+0xdc>
 800cdb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f47f aa6e 	bne.w	800c296 <_dtoa_r+0x96>
 800cdba:	4b07      	ldr	r3, [pc, #28]	; (800cdd8 <_dtoa_r+0xbd8>)
 800cdbc:	f7ff ba8e 	b.w	800c2dc <_dtoa_r+0xdc>
 800cdc0:	9b02      	ldr	r3, [sp, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	dcae      	bgt.n	800cd24 <_dtoa_r+0xb24>
 800cdc6:	9b06      	ldr	r3, [sp, #24]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	f73f aea8 	bgt.w	800cb1e <_dtoa_r+0x91e>
 800cdce:	e7a9      	b.n	800cd24 <_dtoa_r+0xb24>
 800cdd0:	080116b0 	.word	0x080116b0
 800cdd4:	080118a9 	.word	0x080118a9
 800cdd8:	08011631 	.word	0x08011631

0800cddc <rshift>:
 800cddc:	6903      	ldr	r3, [r0, #16]
 800cdde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cde2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cde6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cdea:	f100 0414 	add.w	r4, r0, #20
 800cdee:	dd45      	ble.n	800ce7c <rshift+0xa0>
 800cdf0:	f011 011f 	ands.w	r1, r1, #31
 800cdf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cdf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdfc:	d10c      	bne.n	800ce18 <rshift+0x3c>
 800cdfe:	f100 0710 	add.w	r7, r0, #16
 800ce02:	4629      	mov	r1, r5
 800ce04:	42b1      	cmp	r1, r6
 800ce06:	d334      	bcc.n	800ce72 <rshift+0x96>
 800ce08:	1a9b      	subs	r3, r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	1eea      	subs	r2, r5, #3
 800ce0e:	4296      	cmp	r6, r2
 800ce10:	bf38      	it	cc
 800ce12:	2300      	movcc	r3, #0
 800ce14:	4423      	add	r3, r4
 800ce16:	e015      	b.n	800ce44 <rshift+0x68>
 800ce18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce1c:	f1c1 0820 	rsb	r8, r1, #32
 800ce20:	40cf      	lsrs	r7, r1
 800ce22:	f105 0e04 	add.w	lr, r5, #4
 800ce26:	46a1      	mov	r9, r4
 800ce28:	4576      	cmp	r6, lr
 800ce2a:	46f4      	mov	ip, lr
 800ce2c:	d815      	bhi.n	800ce5a <rshift+0x7e>
 800ce2e:	1a9a      	subs	r2, r3, r2
 800ce30:	0092      	lsls	r2, r2, #2
 800ce32:	3a04      	subs	r2, #4
 800ce34:	3501      	adds	r5, #1
 800ce36:	42ae      	cmp	r6, r5
 800ce38:	bf38      	it	cc
 800ce3a:	2200      	movcc	r2, #0
 800ce3c:	18a3      	adds	r3, r4, r2
 800ce3e:	50a7      	str	r7, [r4, r2]
 800ce40:	b107      	cbz	r7, 800ce44 <rshift+0x68>
 800ce42:	3304      	adds	r3, #4
 800ce44:	1b1a      	subs	r2, r3, r4
 800ce46:	42a3      	cmp	r3, r4
 800ce48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce4c:	bf08      	it	eq
 800ce4e:	2300      	moveq	r3, #0
 800ce50:	6102      	str	r2, [r0, #16]
 800ce52:	bf08      	it	eq
 800ce54:	6143      	streq	r3, [r0, #20]
 800ce56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce5a:	f8dc c000 	ldr.w	ip, [ip]
 800ce5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce62:	ea4c 0707 	orr.w	r7, ip, r7
 800ce66:	f849 7b04 	str.w	r7, [r9], #4
 800ce6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce6e:	40cf      	lsrs	r7, r1
 800ce70:	e7da      	b.n	800ce28 <rshift+0x4c>
 800ce72:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce76:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce7a:	e7c3      	b.n	800ce04 <rshift+0x28>
 800ce7c:	4623      	mov	r3, r4
 800ce7e:	e7e1      	b.n	800ce44 <rshift+0x68>

0800ce80 <__hexdig_fun>:
 800ce80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce84:	2b09      	cmp	r3, #9
 800ce86:	d802      	bhi.n	800ce8e <__hexdig_fun+0xe>
 800ce88:	3820      	subs	r0, #32
 800ce8a:	b2c0      	uxtb	r0, r0
 800ce8c:	4770      	bx	lr
 800ce8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce92:	2b05      	cmp	r3, #5
 800ce94:	d801      	bhi.n	800ce9a <__hexdig_fun+0x1a>
 800ce96:	3847      	subs	r0, #71	; 0x47
 800ce98:	e7f7      	b.n	800ce8a <__hexdig_fun+0xa>
 800ce9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d801      	bhi.n	800cea6 <__hexdig_fun+0x26>
 800cea2:	3827      	subs	r0, #39	; 0x27
 800cea4:	e7f1      	b.n	800ce8a <__hexdig_fun+0xa>
 800cea6:	2000      	movs	r0, #0
 800cea8:	4770      	bx	lr
	...

0800ceac <__gethex>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	ed2d 8b02 	vpush	{d8}
 800ceb4:	b089      	sub	sp, #36	; 0x24
 800ceb6:	ee08 0a10 	vmov	s16, r0
 800ceba:	9304      	str	r3, [sp, #16]
 800cebc:	4bb4      	ldr	r3, [pc, #720]	; (800d190 <__gethex+0x2e4>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	4618      	mov	r0, r3
 800cec4:	468b      	mov	fp, r1
 800cec6:	4690      	mov	r8, r2
 800cec8:	f7f3 f9a2 	bl	8000210 <strlen>
 800cecc:	9b01      	ldr	r3, [sp, #4]
 800cece:	f8db 2000 	ldr.w	r2, [fp]
 800ced2:	4403      	add	r3, r0
 800ced4:	4682      	mov	sl, r0
 800ced6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ceda:	9305      	str	r3, [sp, #20]
 800cedc:	1c93      	adds	r3, r2, #2
 800cede:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cee2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cee6:	32fe      	adds	r2, #254	; 0xfe
 800cee8:	18d1      	adds	r1, r2, r3
 800ceea:	461f      	mov	r7, r3
 800ceec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cef0:	9100      	str	r1, [sp, #0]
 800cef2:	2830      	cmp	r0, #48	; 0x30
 800cef4:	d0f8      	beq.n	800cee8 <__gethex+0x3c>
 800cef6:	f7ff ffc3 	bl	800ce80 <__hexdig_fun>
 800cefa:	4604      	mov	r4, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d13a      	bne.n	800cf76 <__gethex+0xca>
 800cf00:	9901      	ldr	r1, [sp, #4]
 800cf02:	4652      	mov	r2, sl
 800cf04:	4638      	mov	r0, r7
 800cf06:	f001 fdb3 	bl	800ea70 <strncmp>
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d168      	bne.n	800cfe2 <__gethex+0x136>
 800cf10:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf14:	eb07 060a 	add.w	r6, r7, sl
 800cf18:	f7ff ffb2 	bl	800ce80 <__hexdig_fun>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d062      	beq.n	800cfe6 <__gethex+0x13a>
 800cf20:	4633      	mov	r3, r6
 800cf22:	7818      	ldrb	r0, [r3, #0]
 800cf24:	2830      	cmp	r0, #48	; 0x30
 800cf26:	461f      	mov	r7, r3
 800cf28:	f103 0301 	add.w	r3, r3, #1
 800cf2c:	d0f9      	beq.n	800cf22 <__gethex+0x76>
 800cf2e:	f7ff ffa7 	bl	800ce80 <__hexdig_fun>
 800cf32:	2301      	movs	r3, #1
 800cf34:	fab0 f480 	clz	r4, r0
 800cf38:	0964      	lsrs	r4, r4, #5
 800cf3a:	4635      	mov	r5, r6
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	463a      	mov	r2, r7
 800cf40:	4616      	mov	r6, r2
 800cf42:	3201      	adds	r2, #1
 800cf44:	7830      	ldrb	r0, [r6, #0]
 800cf46:	f7ff ff9b 	bl	800ce80 <__hexdig_fun>
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d1f8      	bne.n	800cf40 <__gethex+0x94>
 800cf4e:	9901      	ldr	r1, [sp, #4]
 800cf50:	4652      	mov	r2, sl
 800cf52:	4630      	mov	r0, r6
 800cf54:	f001 fd8c 	bl	800ea70 <strncmp>
 800cf58:	b980      	cbnz	r0, 800cf7c <__gethex+0xd0>
 800cf5a:	b94d      	cbnz	r5, 800cf70 <__gethex+0xc4>
 800cf5c:	eb06 050a 	add.w	r5, r6, sl
 800cf60:	462a      	mov	r2, r5
 800cf62:	4616      	mov	r6, r2
 800cf64:	3201      	adds	r2, #1
 800cf66:	7830      	ldrb	r0, [r6, #0]
 800cf68:	f7ff ff8a 	bl	800ce80 <__hexdig_fun>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d1f8      	bne.n	800cf62 <__gethex+0xb6>
 800cf70:	1bad      	subs	r5, r5, r6
 800cf72:	00ad      	lsls	r5, r5, #2
 800cf74:	e004      	b.n	800cf80 <__gethex+0xd4>
 800cf76:	2400      	movs	r4, #0
 800cf78:	4625      	mov	r5, r4
 800cf7a:	e7e0      	b.n	800cf3e <__gethex+0x92>
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	d1f7      	bne.n	800cf70 <__gethex+0xc4>
 800cf80:	7833      	ldrb	r3, [r6, #0]
 800cf82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf86:	2b50      	cmp	r3, #80	; 0x50
 800cf88:	d13b      	bne.n	800d002 <__gethex+0x156>
 800cf8a:	7873      	ldrb	r3, [r6, #1]
 800cf8c:	2b2b      	cmp	r3, #43	; 0x2b
 800cf8e:	d02c      	beq.n	800cfea <__gethex+0x13e>
 800cf90:	2b2d      	cmp	r3, #45	; 0x2d
 800cf92:	d02e      	beq.n	800cff2 <__gethex+0x146>
 800cf94:	1c71      	adds	r1, r6, #1
 800cf96:	f04f 0900 	mov.w	r9, #0
 800cf9a:	7808      	ldrb	r0, [r1, #0]
 800cf9c:	f7ff ff70 	bl	800ce80 <__hexdig_fun>
 800cfa0:	1e43      	subs	r3, r0, #1
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b18      	cmp	r3, #24
 800cfa6:	d82c      	bhi.n	800d002 <__gethex+0x156>
 800cfa8:	f1a0 0210 	sub.w	r2, r0, #16
 800cfac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfb0:	f7ff ff66 	bl	800ce80 <__hexdig_fun>
 800cfb4:	1e43      	subs	r3, r0, #1
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b18      	cmp	r3, #24
 800cfba:	d91d      	bls.n	800cff8 <__gethex+0x14c>
 800cfbc:	f1b9 0f00 	cmp.w	r9, #0
 800cfc0:	d000      	beq.n	800cfc4 <__gethex+0x118>
 800cfc2:	4252      	negs	r2, r2
 800cfc4:	4415      	add	r5, r2
 800cfc6:	f8cb 1000 	str.w	r1, [fp]
 800cfca:	b1e4      	cbz	r4, 800d006 <__gethex+0x15a>
 800cfcc:	9b00      	ldr	r3, [sp, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	bf14      	ite	ne
 800cfd2:	2700      	movne	r7, #0
 800cfd4:	2706      	moveq	r7, #6
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	b009      	add	sp, #36	; 0x24
 800cfda:	ecbd 8b02 	vpop	{d8}
 800cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe2:	463e      	mov	r6, r7
 800cfe4:	4625      	mov	r5, r4
 800cfe6:	2401      	movs	r4, #1
 800cfe8:	e7ca      	b.n	800cf80 <__gethex+0xd4>
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	1cb1      	adds	r1, r6, #2
 800cff0:	e7d3      	b.n	800cf9a <__gethex+0xee>
 800cff2:	f04f 0901 	mov.w	r9, #1
 800cff6:	e7fa      	b.n	800cfee <__gethex+0x142>
 800cff8:	230a      	movs	r3, #10
 800cffa:	fb03 0202 	mla	r2, r3, r2, r0
 800cffe:	3a10      	subs	r2, #16
 800d000:	e7d4      	b.n	800cfac <__gethex+0x100>
 800d002:	4631      	mov	r1, r6
 800d004:	e7df      	b.n	800cfc6 <__gethex+0x11a>
 800d006:	1bf3      	subs	r3, r6, r7
 800d008:	3b01      	subs	r3, #1
 800d00a:	4621      	mov	r1, r4
 800d00c:	2b07      	cmp	r3, #7
 800d00e:	dc0b      	bgt.n	800d028 <__gethex+0x17c>
 800d010:	ee18 0a10 	vmov	r0, s16
 800d014:	f000 fa90 	bl	800d538 <_Balloc>
 800d018:	4604      	mov	r4, r0
 800d01a:	b940      	cbnz	r0, 800d02e <__gethex+0x182>
 800d01c:	4b5d      	ldr	r3, [pc, #372]	; (800d194 <__gethex+0x2e8>)
 800d01e:	4602      	mov	r2, r0
 800d020:	21de      	movs	r1, #222	; 0xde
 800d022:	485d      	ldr	r0, [pc, #372]	; (800d198 <__gethex+0x2ec>)
 800d024:	f001 fdf4 	bl	800ec10 <__assert_func>
 800d028:	3101      	adds	r1, #1
 800d02a:	105b      	asrs	r3, r3, #1
 800d02c:	e7ee      	b.n	800d00c <__gethex+0x160>
 800d02e:	f100 0914 	add.w	r9, r0, #20
 800d032:	f04f 0b00 	mov.w	fp, #0
 800d036:	f1ca 0301 	rsb	r3, sl, #1
 800d03a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d03e:	f8cd b000 	str.w	fp, [sp]
 800d042:	9306      	str	r3, [sp, #24]
 800d044:	42b7      	cmp	r7, r6
 800d046:	d340      	bcc.n	800d0ca <__gethex+0x21e>
 800d048:	9802      	ldr	r0, [sp, #8]
 800d04a:	9b00      	ldr	r3, [sp, #0]
 800d04c:	f840 3b04 	str.w	r3, [r0], #4
 800d050:	eba0 0009 	sub.w	r0, r0, r9
 800d054:	1080      	asrs	r0, r0, #2
 800d056:	0146      	lsls	r6, r0, #5
 800d058:	6120      	str	r0, [r4, #16]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 fb5e 	bl	800d71c <__hi0bits>
 800d060:	1a30      	subs	r0, r6, r0
 800d062:	f8d8 6000 	ldr.w	r6, [r8]
 800d066:	42b0      	cmp	r0, r6
 800d068:	dd63      	ble.n	800d132 <__gethex+0x286>
 800d06a:	1b87      	subs	r7, r0, r6
 800d06c:	4639      	mov	r1, r7
 800d06e:	4620      	mov	r0, r4
 800d070:	f000 ff02 	bl	800de78 <__any_on>
 800d074:	4682      	mov	sl, r0
 800d076:	b1a8      	cbz	r0, 800d0a4 <__gethex+0x1f8>
 800d078:	1e7b      	subs	r3, r7, #1
 800d07a:	1159      	asrs	r1, r3, #5
 800d07c:	f003 021f 	and.w	r2, r3, #31
 800d080:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d084:	f04f 0a01 	mov.w	sl, #1
 800d088:	fa0a f202 	lsl.w	r2, sl, r2
 800d08c:	420a      	tst	r2, r1
 800d08e:	d009      	beq.n	800d0a4 <__gethex+0x1f8>
 800d090:	4553      	cmp	r3, sl
 800d092:	dd05      	ble.n	800d0a0 <__gethex+0x1f4>
 800d094:	1eb9      	subs	r1, r7, #2
 800d096:	4620      	mov	r0, r4
 800d098:	f000 feee 	bl	800de78 <__any_on>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d145      	bne.n	800d12c <__gethex+0x280>
 800d0a0:	f04f 0a02 	mov.w	sl, #2
 800d0a4:	4639      	mov	r1, r7
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff fe98 	bl	800cddc <rshift>
 800d0ac:	443d      	add	r5, r7
 800d0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0b2:	42ab      	cmp	r3, r5
 800d0b4:	da4c      	bge.n	800d150 <__gethex+0x2a4>
 800d0b6:	ee18 0a10 	vmov	r0, s16
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	f000 fa7c 	bl	800d5b8 <_Bfree>
 800d0c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	27a3      	movs	r7, #163	; 0xa3
 800d0c8:	e785      	b.n	800cfd6 <__gethex+0x12a>
 800d0ca:	1e73      	subs	r3, r6, #1
 800d0cc:	9a05      	ldr	r2, [sp, #20]
 800d0ce:	9303      	str	r3, [sp, #12]
 800d0d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d019      	beq.n	800d10c <__gethex+0x260>
 800d0d8:	f1bb 0f20 	cmp.w	fp, #32
 800d0dc:	d107      	bne.n	800d0ee <__gethex+0x242>
 800d0de:	9b02      	ldr	r3, [sp, #8]
 800d0e0:	9a00      	ldr	r2, [sp, #0]
 800d0e2:	f843 2b04 	str.w	r2, [r3], #4
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	469b      	mov	fp, r3
 800d0ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d0f2:	f7ff fec5 	bl	800ce80 <__hexdig_fun>
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	f000 000f 	and.w	r0, r0, #15
 800d0fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800d100:	4303      	orrs	r3, r0
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	f10b 0b04 	add.w	fp, fp, #4
 800d108:	9b03      	ldr	r3, [sp, #12]
 800d10a:	e00d      	b.n	800d128 <__gethex+0x27c>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	9a06      	ldr	r2, [sp, #24]
 800d110:	4413      	add	r3, r2
 800d112:	42bb      	cmp	r3, r7
 800d114:	d3e0      	bcc.n	800d0d8 <__gethex+0x22c>
 800d116:	4618      	mov	r0, r3
 800d118:	9901      	ldr	r1, [sp, #4]
 800d11a:	9307      	str	r3, [sp, #28]
 800d11c:	4652      	mov	r2, sl
 800d11e:	f001 fca7 	bl	800ea70 <strncmp>
 800d122:	9b07      	ldr	r3, [sp, #28]
 800d124:	2800      	cmp	r0, #0
 800d126:	d1d7      	bne.n	800d0d8 <__gethex+0x22c>
 800d128:	461e      	mov	r6, r3
 800d12a:	e78b      	b.n	800d044 <__gethex+0x198>
 800d12c:	f04f 0a03 	mov.w	sl, #3
 800d130:	e7b8      	b.n	800d0a4 <__gethex+0x1f8>
 800d132:	da0a      	bge.n	800d14a <__gethex+0x29e>
 800d134:	1a37      	subs	r7, r6, r0
 800d136:	4621      	mov	r1, r4
 800d138:	ee18 0a10 	vmov	r0, s16
 800d13c:	463a      	mov	r2, r7
 800d13e:	f000 fc57 	bl	800d9f0 <__lshift>
 800d142:	1bed      	subs	r5, r5, r7
 800d144:	4604      	mov	r4, r0
 800d146:	f100 0914 	add.w	r9, r0, #20
 800d14a:	f04f 0a00 	mov.w	sl, #0
 800d14e:	e7ae      	b.n	800d0ae <__gethex+0x202>
 800d150:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d154:	42a8      	cmp	r0, r5
 800d156:	dd72      	ble.n	800d23e <__gethex+0x392>
 800d158:	1b45      	subs	r5, r0, r5
 800d15a:	42ae      	cmp	r6, r5
 800d15c:	dc36      	bgt.n	800d1cc <__gethex+0x320>
 800d15e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d02a      	beq.n	800d1bc <__gethex+0x310>
 800d166:	2b03      	cmp	r3, #3
 800d168:	d02c      	beq.n	800d1c4 <__gethex+0x318>
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d11c      	bne.n	800d1a8 <__gethex+0x2fc>
 800d16e:	42ae      	cmp	r6, r5
 800d170:	d11a      	bne.n	800d1a8 <__gethex+0x2fc>
 800d172:	2e01      	cmp	r6, #1
 800d174:	d112      	bne.n	800d19c <__gethex+0x2f0>
 800d176:	9a04      	ldr	r2, [sp, #16]
 800d178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d17c:	6013      	str	r3, [r2, #0]
 800d17e:	2301      	movs	r3, #1
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	f8c9 3000 	str.w	r3, [r9]
 800d186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d188:	2762      	movs	r7, #98	; 0x62
 800d18a:	601c      	str	r4, [r3, #0]
 800d18c:	e723      	b.n	800cfd6 <__gethex+0x12a>
 800d18e:	bf00      	nop
 800d190:	08011728 	.word	0x08011728
 800d194:	080116b0 	.word	0x080116b0
 800d198:	080116c1 	.word	0x080116c1
 800d19c:	1e71      	subs	r1, r6, #1
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 fe6a 	bl	800de78 <__any_on>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d1e6      	bne.n	800d176 <__gethex+0x2ca>
 800d1a8:	ee18 0a10 	vmov	r0, s16
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	f000 fa03 	bl	800d5b8 <_Bfree>
 800d1b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	2750      	movs	r7, #80	; 0x50
 800d1ba:	e70c      	b.n	800cfd6 <__gethex+0x12a>
 800d1bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1f2      	bne.n	800d1a8 <__gethex+0x2fc>
 800d1c2:	e7d8      	b.n	800d176 <__gethex+0x2ca>
 800d1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1d5      	bne.n	800d176 <__gethex+0x2ca>
 800d1ca:	e7ed      	b.n	800d1a8 <__gethex+0x2fc>
 800d1cc:	1e6f      	subs	r7, r5, #1
 800d1ce:	f1ba 0f00 	cmp.w	sl, #0
 800d1d2:	d131      	bne.n	800d238 <__gethex+0x38c>
 800d1d4:	b127      	cbz	r7, 800d1e0 <__gethex+0x334>
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 fe4d 	bl	800de78 <__any_on>
 800d1de:	4682      	mov	sl, r0
 800d1e0:	117b      	asrs	r3, r7, #5
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d1e8:	f007 071f 	and.w	r7, r7, #31
 800d1ec:	fa01 f707 	lsl.w	r7, r1, r7
 800d1f0:	421f      	tst	r7, r3
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	bf18      	it	ne
 800d1f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d1fc:	1b76      	subs	r6, r6, r5
 800d1fe:	f7ff fded 	bl	800cddc <rshift>
 800d202:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d206:	2702      	movs	r7, #2
 800d208:	f1ba 0f00 	cmp.w	sl, #0
 800d20c:	d048      	beq.n	800d2a0 <__gethex+0x3f4>
 800d20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d212:	2b02      	cmp	r3, #2
 800d214:	d015      	beq.n	800d242 <__gethex+0x396>
 800d216:	2b03      	cmp	r3, #3
 800d218:	d017      	beq.n	800d24a <__gethex+0x39e>
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d109      	bne.n	800d232 <__gethex+0x386>
 800d21e:	f01a 0f02 	tst.w	sl, #2
 800d222:	d006      	beq.n	800d232 <__gethex+0x386>
 800d224:	f8d9 0000 	ldr.w	r0, [r9]
 800d228:	ea4a 0a00 	orr.w	sl, sl, r0
 800d22c:	f01a 0f01 	tst.w	sl, #1
 800d230:	d10e      	bne.n	800d250 <__gethex+0x3a4>
 800d232:	f047 0710 	orr.w	r7, r7, #16
 800d236:	e033      	b.n	800d2a0 <__gethex+0x3f4>
 800d238:	f04f 0a01 	mov.w	sl, #1
 800d23c:	e7d0      	b.n	800d1e0 <__gethex+0x334>
 800d23e:	2701      	movs	r7, #1
 800d240:	e7e2      	b.n	800d208 <__gethex+0x35c>
 800d242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d244:	f1c3 0301 	rsb	r3, r3, #1
 800d248:	9315      	str	r3, [sp, #84]	; 0x54
 800d24a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0f0      	beq.n	800d232 <__gethex+0x386>
 800d250:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d254:	f104 0314 	add.w	r3, r4, #20
 800d258:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d25c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d260:	f04f 0c00 	mov.w	ip, #0
 800d264:	4618      	mov	r0, r3
 800d266:	f853 2b04 	ldr.w	r2, [r3], #4
 800d26a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d26e:	d01c      	beq.n	800d2aa <__gethex+0x3fe>
 800d270:	3201      	adds	r2, #1
 800d272:	6002      	str	r2, [r0, #0]
 800d274:	2f02      	cmp	r7, #2
 800d276:	f104 0314 	add.w	r3, r4, #20
 800d27a:	d13f      	bne.n	800d2fc <__gethex+0x450>
 800d27c:	f8d8 2000 	ldr.w	r2, [r8]
 800d280:	3a01      	subs	r2, #1
 800d282:	42b2      	cmp	r2, r6
 800d284:	d10a      	bne.n	800d29c <__gethex+0x3f0>
 800d286:	1171      	asrs	r1, r6, #5
 800d288:	2201      	movs	r2, #1
 800d28a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d28e:	f006 061f 	and.w	r6, r6, #31
 800d292:	fa02 f606 	lsl.w	r6, r2, r6
 800d296:	421e      	tst	r6, r3
 800d298:	bf18      	it	ne
 800d29a:	4617      	movne	r7, r2
 800d29c:	f047 0720 	orr.w	r7, r7, #32
 800d2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2a2:	601c      	str	r4, [r3, #0]
 800d2a4:	9b04      	ldr	r3, [sp, #16]
 800d2a6:	601d      	str	r5, [r3, #0]
 800d2a8:	e695      	b.n	800cfd6 <__gethex+0x12a>
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2b0:	d8d8      	bhi.n	800d264 <__gethex+0x3b8>
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	459b      	cmp	fp, r3
 800d2b6:	db19      	blt.n	800d2ec <__gethex+0x440>
 800d2b8:	6861      	ldr	r1, [r4, #4]
 800d2ba:	ee18 0a10 	vmov	r0, s16
 800d2be:	3101      	adds	r1, #1
 800d2c0:	f000 f93a 	bl	800d538 <_Balloc>
 800d2c4:	4681      	mov	r9, r0
 800d2c6:	b918      	cbnz	r0, 800d2d0 <__gethex+0x424>
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	; (800d334 <__gethex+0x488>)
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	2184      	movs	r1, #132	; 0x84
 800d2ce:	e6a8      	b.n	800d022 <__gethex+0x176>
 800d2d0:	6922      	ldr	r2, [r4, #16]
 800d2d2:	3202      	adds	r2, #2
 800d2d4:	f104 010c 	add.w	r1, r4, #12
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	300c      	adds	r0, #12
 800d2dc:	f000 f91e 	bl	800d51c <memcpy>
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	ee18 0a10 	vmov	r0, s16
 800d2e6:	f000 f967 	bl	800d5b8 <_Bfree>
 800d2ea:	464c      	mov	r4, r9
 800d2ec:	6923      	ldr	r3, [r4, #16]
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2f4:	6122      	str	r2, [r4, #16]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	615a      	str	r2, [r3, #20]
 800d2fa:	e7bb      	b.n	800d274 <__gethex+0x3c8>
 800d2fc:	6922      	ldr	r2, [r4, #16]
 800d2fe:	455a      	cmp	r2, fp
 800d300:	dd0b      	ble.n	800d31a <__gethex+0x46e>
 800d302:	2101      	movs	r1, #1
 800d304:	4620      	mov	r0, r4
 800d306:	f7ff fd69 	bl	800cddc <rshift>
 800d30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d30e:	3501      	adds	r5, #1
 800d310:	42ab      	cmp	r3, r5
 800d312:	f6ff aed0 	blt.w	800d0b6 <__gethex+0x20a>
 800d316:	2701      	movs	r7, #1
 800d318:	e7c0      	b.n	800d29c <__gethex+0x3f0>
 800d31a:	f016 061f 	ands.w	r6, r6, #31
 800d31e:	d0fa      	beq.n	800d316 <__gethex+0x46a>
 800d320:	4453      	add	r3, sl
 800d322:	f1c6 0620 	rsb	r6, r6, #32
 800d326:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d32a:	f000 f9f7 	bl	800d71c <__hi0bits>
 800d32e:	42b0      	cmp	r0, r6
 800d330:	dbe7      	blt.n	800d302 <__gethex+0x456>
 800d332:	e7f0      	b.n	800d316 <__gethex+0x46a>
 800d334:	080116b0 	.word	0x080116b0

0800d338 <L_shift>:
 800d338:	f1c2 0208 	rsb	r2, r2, #8
 800d33c:	0092      	lsls	r2, r2, #2
 800d33e:	b570      	push	{r4, r5, r6, lr}
 800d340:	f1c2 0620 	rsb	r6, r2, #32
 800d344:	6843      	ldr	r3, [r0, #4]
 800d346:	6804      	ldr	r4, [r0, #0]
 800d348:	fa03 f506 	lsl.w	r5, r3, r6
 800d34c:	432c      	orrs	r4, r5
 800d34e:	40d3      	lsrs	r3, r2
 800d350:	6004      	str	r4, [r0, #0]
 800d352:	f840 3f04 	str.w	r3, [r0, #4]!
 800d356:	4288      	cmp	r0, r1
 800d358:	d3f4      	bcc.n	800d344 <L_shift+0xc>
 800d35a:	bd70      	pop	{r4, r5, r6, pc}

0800d35c <__match>:
 800d35c:	b530      	push	{r4, r5, lr}
 800d35e:	6803      	ldr	r3, [r0, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d366:	b914      	cbnz	r4, 800d36e <__match+0x12>
 800d368:	6003      	str	r3, [r0, #0]
 800d36a:	2001      	movs	r0, #1
 800d36c:	bd30      	pop	{r4, r5, pc}
 800d36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d372:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d376:	2d19      	cmp	r5, #25
 800d378:	bf98      	it	ls
 800d37a:	3220      	addls	r2, #32
 800d37c:	42a2      	cmp	r2, r4
 800d37e:	d0f0      	beq.n	800d362 <__match+0x6>
 800d380:	2000      	movs	r0, #0
 800d382:	e7f3      	b.n	800d36c <__match+0x10>

0800d384 <__hexnan>:
 800d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	680b      	ldr	r3, [r1, #0]
 800d38a:	115e      	asrs	r6, r3, #5
 800d38c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d390:	f013 031f 	ands.w	r3, r3, #31
 800d394:	b087      	sub	sp, #28
 800d396:	bf18      	it	ne
 800d398:	3604      	addne	r6, #4
 800d39a:	2500      	movs	r5, #0
 800d39c:	1f37      	subs	r7, r6, #4
 800d39e:	4690      	mov	r8, r2
 800d3a0:	6802      	ldr	r2, [r0, #0]
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3aa:	46b9      	mov	r9, r7
 800d3ac:	463c      	mov	r4, r7
 800d3ae:	9502      	str	r5, [sp, #8]
 800d3b0:	46ab      	mov	fp, r5
 800d3b2:	7851      	ldrb	r1, [r2, #1]
 800d3b4:	1c53      	adds	r3, r2, #1
 800d3b6:	9303      	str	r3, [sp, #12]
 800d3b8:	b341      	cbz	r1, 800d40c <__hexnan+0x88>
 800d3ba:	4608      	mov	r0, r1
 800d3bc:	9205      	str	r2, [sp, #20]
 800d3be:	9104      	str	r1, [sp, #16]
 800d3c0:	f7ff fd5e 	bl	800ce80 <__hexdig_fun>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d14f      	bne.n	800d468 <__hexnan+0xe4>
 800d3c8:	9904      	ldr	r1, [sp, #16]
 800d3ca:	9a05      	ldr	r2, [sp, #20]
 800d3cc:	2920      	cmp	r1, #32
 800d3ce:	d818      	bhi.n	800d402 <__hexnan+0x7e>
 800d3d0:	9b02      	ldr	r3, [sp, #8]
 800d3d2:	459b      	cmp	fp, r3
 800d3d4:	dd13      	ble.n	800d3fe <__hexnan+0x7a>
 800d3d6:	454c      	cmp	r4, r9
 800d3d8:	d206      	bcs.n	800d3e8 <__hexnan+0x64>
 800d3da:	2d07      	cmp	r5, #7
 800d3dc:	dc04      	bgt.n	800d3e8 <__hexnan+0x64>
 800d3de:	462a      	mov	r2, r5
 800d3e0:	4649      	mov	r1, r9
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7ff ffa8 	bl	800d338 <L_shift>
 800d3e8:	4544      	cmp	r4, r8
 800d3ea:	d950      	bls.n	800d48e <__hexnan+0x10a>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f1a4 0904 	sub.w	r9, r4, #4
 800d3f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3f6:	f8cd b008 	str.w	fp, [sp, #8]
 800d3fa:	464c      	mov	r4, r9
 800d3fc:	461d      	mov	r5, r3
 800d3fe:	9a03      	ldr	r2, [sp, #12]
 800d400:	e7d7      	b.n	800d3b2 <__hexnan+0x2e>
 800d402:	2929      	cmp	r1, #41	; 0x29
 800d404:	d156      	bne.n	800d4b4 <__hexnan+0x130>
 800d406:	3202      	adds	r2, #2
 800d408:	f8ca 2000 	str.w	r2, [sl]
 800d40c:	f1bb 0f00 	cmp.w	fp, #0
 800d410:	d050      	beq.n	800d4b4 <__hexnan+0x130>
 800d412:	454c      	cmp	r4, r9
 800d414:	d206      	bcs.n	800d424 <__hexnan+0xa0>
 800d416:	2d07      	cmp	r5, #7
 800d418:	dc04      	bgt.n	800d424 <__hexnan+0xa0>
 800d41a:	462a      	mov	r2, r5
 800d41c:	4649      	mov	r1, r9
 800d41e:	4620      	mov	r0, r4
 800d420:	f7ff ff8a 	bl	800d338 <L_shift>
 800d424:	4544      	cmp	r4, r8
 800d426:	d934      	bls.n	800d492 <__hexnan+0x10e>
 800d428:	f1a8 0204 	sub.w	r2, r8, #4
 800d42c:	4623      	mov	r3, r4
 800d42e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d432:	f842 1f04 	str.w	r1, [r2, #4]!
 800d436:	429f      	cmp	r7, r3
 800d438:	d2f9      	bcs.n	800d42e <__hexnan+0xaa>
 800d43a:	1b3b      	subs	r3, r7, r4
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	3304      	adds	r3, #4
 800d442:	3401      	adds	r4, #1
 800d444:	3e03      	subs	r6, #3
 800d446:	42b4      	cmp	r4, r6
 800d448:	bf88      	it	hi
 800d44a:	2304      	movhi	r3, #4
 800d44c:	4443      	add	r3, r8
 800d44e:	2200      	movs	r2, #0
 800d450:	f843 2b04 	str.w	r2, [r3], #4
 800d454:	429f      	cmp	r7, r3
 800d456:	d2fb      	bcs.n	800d450 <__hexnan+0xcc>
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	b91b      	cbnz	r3, 800d464 <__hexnan+0xe0>
 800d45c:	4547      	cmp	r7, r8
 800d45e:	d127      	bne.n	800d4b0 <__hexnan+0x12c>
 800d460:	2301      	movs	r3, #1
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	2005      	movs	r0, #5
 800d466:	e026      	b.n	800d4b6 <__hexnan+0x132>
 800d468:	3501      	adds	r5, #1
 800d46a:	2d08      	cmp	r5, #8
 800d46c:	f10b 0b01 	add.w	fp, fp, #1
 800d470:	dd06      	ble.n	800d480 <__hexnan+0xfc>
 800d472:	4544      	cmp	r4, r8
 800d474:	d9c3      	bls.n	800d3fe <__hexnan+0x7a>
 800d476:	2300      	movs	r3, #0
 800d478:	f844 3c04 	str.w	r3, [r4, #-4]
 800d47c:	2501      	movs	r5, #1
 800d47e:	3c04      	subs	r4, #4
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	f000 000f 	and.w	r0, r0, #15
 800d486:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d48a:	6022      	str	r2, [r4, #0]
 800d48c:	e7b7      	b.n	800d3fe <__hexnan+0x7a>
 800d48e:	2508      	movs	r5, #8
 800d490:	e7b5      	b.n	800d3fe <__hexnan+0x7a>
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d0df      	beq.n	800d458 <__hexnan+0xd4>
 800d498:	f04f 32ff 	mov.w	r2, #4294967295
 800d49c:	f1c3 0320 	rsb	r3, r3, #32
 800d4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4a8:	401a      	ands	r2, r3
 800d4aa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d4ae:	e7d3      	b.n	800d458 <__hexnan+0xd4>
 800d4b0:	3f04      	subs	r7, #4
 800d4b2:	e7d1      	b.n	800d458 <__hexnan+0xd4>
 800d4b4:	2004      	movs	r0, #4
 800d4b6:	b007      	add	sp, #28
 800d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4bc <_localeconv_r>:
 800d4bc:	4800      	ldr	r0, [pc, #0]	; (800d4c0 <_localeconv_r+0x4>)
 800d4be:	4770      	bx	lr
 800d4c0:	2000016c 	.word	0x2000016c

0800d4c4 <_lseek_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d07      	ldr	r5, [pc, #28]	; (800d4e4 <_lseek_r+0x20>)
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	602a      	str	r2, [r5, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	f7f7 febe 	bl	8005254 <_lseek>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_lseek_r+0x1e>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_lseek_r+0x1e>
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	20001218 	.word	0x20001218

0800d4e8 <malloc>:
 800d4e8:	4b02      	ldr	r3, [pc, #8]	; (800d4f4 <malloc+0xc>)
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	6818      	ldr	r0, [r3, #0]
 800d4ee:	f000 bd67 	b.w	800dfc0 <_malloc_r>
 800d4f2:	bf00      	nop
 800d4f4:	20000014 	.word	0x20000014

0800d4f8 <__ascii_mbtowc>:
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	b901      	cbnz	r1, 800d4fe <__ascii_mbtowc+0x6>
 800d4fc:	a901      	add	r1, sp, #4
 800d4fe:	b142      	cbz	r2, 800d512 <__ascii_mbtowc+0x1a>
 800d500:	b14b      	cbz	r3, 800d516 <__ascii_mbtowc+0x1e>
 800d502:	7813      	ldrb	r3, [r2, #0]
 800d504:	600b      	str	r3, [r1, #0]
 800d506:	7812      	ldrb	r2, [r2, #0]
 800d508:	1e10      	subs	r0, r2, #0
 800d50a:	bf18      	it	ne
 800d50c:	2001      	movne	r0, #1
 800d50e:	b002      	add	sp, #8
 800d510:	4770      	bx	lr
 800d512:	4610      	mov	r0, r2
 800d514:	e7fb      	b.n	800d50e <__ascii_mbtowc+0x16>
 800d516:	f06f 0001 	mvn.w	r0, #1
 800d51a:	e7f8      	b.n	800d50e <__ascii_mbtowc+0x16>

0800d51c <memcpy>:
 800d51c:	440a      	add	r2, r1
 800d51e:	4291      	cmp	r1, r2
 800d520:	f100 33ff 	add.w	r3, r0, #4294967295
 800d524:	d100      	bne.n	800d528 <memcpy+0xc>
 800d526:	4770      	bx	lr
 800d528:	b510      	push	{r4, lr}
 800d52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d532:	4291      	cmp	r1, r2
 800d534:	d1f9      	bne.n	800d52a <memcpy+0xe>
 800d536:	bd10      	pop	{r4, pc}

0800d538 <_Balloc>:
 800d538:	b570      	push	{r4, r5, r6, lr}
 800d53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d53c:	4604      	mov	r4, r0
 800d53e:	460d      	mov	r5, r1
 800d540:	b976      	cbnz	r6, 800d560 <_Balloc+0x28>
 800d542:	2010      	movs	r0, #16
 800d544:	f7ff ffd0 	bl	800d4e8 <malloc>
 800d548:	4602      	mov	r2, r0
 800d54a:	6260      	str	r0, [r4, #36]	; 0x24
 800d54c:	b920      	cbnz	r0, 800d558 <_Balloc+0x20>
 800d54e:	4b18      	ldr	r3, [pc, #96]	; (800d5b0 <_Balloc+0x78>)
 800d550:	4818      	ldr	r0, [pc, #96]	; (800d5b4 <_Balloc+0x7c>)
 800d552:	2166      	movs	r1, #102	; 0x66
 800d554:	f001 fb5c 	bl	800ec10 <__assert_func>
 800d558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d55c:	6006      	str	r6, [r0, #0]
 800d55e:	60c6      	str	r6, [r0, #12]
 800d560:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d562:	68f3      	ldr	r3, [r6, #12]
 800d564:	b183      	cbz	r3, 800d588 <_Balloc+0x50>
 800d566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d56e:	b9b8      	cbnz	r0, 800d5a0 <_Balloc+0x68>
 800d570:	2101      	movs	r1, #1
 800d572:	fa01 f605 	lsl.w	r6, r1, r5
 800d576:	1d72      	adds	r2, r6, #5
 800d578:	0092      	lsls	r2, r2, #2
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 fc9d 	bl	800deba <_calloc_r>
 800d580:	b160      	cbz	r0, 800d59c <_Balloc+0x64>
 800d582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d586:	e00e      	b.n	800d5a6 <_Balloc+0x6e>
 800d588:	2221      	movs	r2, #33	; 0x21
 800d58a:	2104      	movs	r1, #4
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 fc94 	bl	800deba <_calloc_r>
 800d592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d594:	60f0      	str	r0, [r6, #12]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1e4      	bne.n	800d566 <_Balloc+0x2e>
 800d59c:	2000      	movs	r0, #0
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	6802      	ldr	r2, [r0, #0]
 800d5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5ac:	e7f7      	b.n	800d59e <_Balloc+0x66>
 800d5ae:	bf00      	nop
 800d5b0:	0801163e 	.word	0x0801163e
 800d5b4:	0801173c 	.word	0x0801173c

0800d5b8 <_Bfree>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5bc:	4605      	mov	r5, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	b976      	cbnz	r6, 800d5e0 <_Bfree+0x28>
 800d5c2:	2010      	movs	r0, #16
 800d5c4:	f7ff ff90 	bl	800d4e8 <malloc>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	6268      	str	r0, [r5, #36]	; 0x24
 800d5cc:	b920      	cbnz	r0, 800d5d8 <_Bfree+0x20>
 800d5ce:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <_Bfree+0x3c>)
 800d5d0:	4809      	ldr	r0, [pc, #36]	; (800d5f8 <_Bfree+0x40>)
 800d5d2:	218a      	movs	r1, #138	; 0x8a
 800d5d4:	f001 fb1c 	bl	800ec10 <__assert_func>
 800d5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5dc:	6006      	str	r6, [r0, #0]
 800d5de:	60c6      	str	r6, [r0, #12]
 800d5e0:	b13c      	cbz	r4, 800d5f2 <_Bfree+0x3a>
 800d5e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d5e4:	6862      	ldr	r2, [r4, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5ec:	6021      	str	r1, [r4, #0]
 800d5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	0801163e 	.word	0x0801163e
 800d5f8:	0801173c 	.word	0x0801173c

0800d5fc <__multadd>:
 800d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d600:	690d      	ldr	r5, [r1, #16]
 800d602:	4607      	mov	r7, r0
 800d604:	460c      	mov	r4, r1
 800d606:	461e      	mov	r6, r3
 800d608:	f101 0c14 	add.w	ip, r1, #20
 800d60c:	2000      	movs	r0, #0
 800d60e:	f8dc 3000 	ldr.w	r3, [ip]
 800d612:	b299      	uxth	r1, r3
 800d614:	fb02 6101 	mla	r1, r2, r1, r6
 800d618:	0c1e      	lsrs	r6, r3, #16
 800d61a:	0c0b      	lsrs	r3, r1, #16
 800d61c:	fb02 3306 	mla	r3, r2, r6, r3
 800d620:	b289      	uxth	r1, r1
 800d622:	3001      	adds	r0, #1
 800d624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d628:	4285      	cmp	r5, r0
 800d62a:	f84c 1b04 	str.w	r1, [ip], #4
 800d62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d632:	dcec      	bgt.n	800d60e <__multadd+0x12>
 800d634:	b30e      	cbz	r6, 800d67a <__multadd+0x7e>
 800d636:	68a3      	ldr	r3, [r4, #8]
 800d638:	42ab      	cmp	r3, r5
 800d63a:	dc19      	bgt.n	800d670 <__multadd+0x74>
 800d63c:	6861      	ldr	r1, [r4, #4]
 800d63e:	4638      	mov	r0, r7
 800d640:	3101      	adds	r1, #1
 800d642:	f7ff ff79 	bl	800d538 <_Balloc>
 800d646:	4680      	mov	r8, r0
 800d648:	b928      	cbnz	r0, 800d656 <__multadd+0x5a>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <__multadd+0x84>)
 800d64e:	480d      	ldr	r0, [pc, #52]	; (800d684 <__multadd+0x88>)
 800d650:	21b5      	movs	r1, #181	; 0xb5
 800d652:	f001 fadd 	bl	800ec10 <__assert_func>
 800d656:	6922      	ldr	r2, [r4, #16]
 800d658:	3202      	adds	r2, #2
 800d65a:	f104 010c 	add.w	r1, r4, #12
 800d65e:	0092      	lsls	r2, r2, #2
 800d660:	300c      	adds	r0, #12
 800d662:	f7ff ff5b 	bl	800d51c <memcpy>
 800d666:	4621      	mov	r1, r4
 800d668:	4638      	mov	r0, r7
 800d66a:	f7ff ffa5 	bl	800d5b8 <_Bfree>
 800d66e:	4644      	mov	r4, r8
 800d670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d674:	3501      	adds	r5, #1
 800d676:	615e      	str	r6, [r3, #20]
 800d678:	6125      	str	r5, [r4, #16]
 800d67a:	4620      	mov	r0, r4
 800d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d680:	080116b0 	.word	0x080116b0
 800d684:	0801173c 	.word	0x0801173c

0800d688 <__s2b>:
 800d688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d68c:	460c      	mov	r4, r1
 800d68e:	4615      	mov	r5, r2
 800d690:	461f      	mov	r7, r3
 800d692:	2209      	movs	r2, #9
 800d694:	3308      	adds	r3, #8
 800d696:	4606      	mov	r6, r0
 800d698:	fb93 f3f2 	sdiv	r3, r3, r2
 800d69c:	2100      	movs	r1, #0
 800d69e:	2201      	movs	r2, #1
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	db09      	blt.n	800d6b8 <__s2b+0x30>
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7ff ff47 	bl	800d538 <_Balloc>
 800d6aa:	b940      	cbnz	r0, 800d6be <__s2b+0x36>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	4b19      	ldr	r3, [pc, #100]	; (800d714 <__s2b+0x8c>)
 800d6b0:	4819      	ldr	r0, [pc, #100]	; (800d718 <__s2b+0x90>)
 800d6b2:	21ce      	movs	r1, #206	; 0xce
 800d6b4:	f001 faac 	bl	800ec10 <__assert_func>
 800d6b8:	0052      	lsls	r2, r2, #1
 800d6ba:	3101      	adds	r1, #1
 800d6bc:	e7f0      	b.n	800d6a0 <__s2b+0x18>
 800d6be:	9b08      	ldr	r3, [sp, #32]
 800d6c0:	6143      	str	r3, [r0, #20]
 800d6c2:	2d09      	cmp	r5, #9
 800d6c4:	f04f 0301 	mov.w	r3, #1
 800d6c8:	6103      	str	r3, [r0, #16]
 800d6ca:	dd16      	ble.n	800d6fa <__s2b+0x72>
 800d6cc:	f104 0909 	add.w	r9, r4, #9
 800d6d0:	46c8      	mov	r8, r9
 800d6d2:	442c      	add	r4, r5
 800d6d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d6d8:	4601      	mov	r1, r0
 800d6da:	3b30      	subs	r3, #48	; 0x30
 800d6dc:	220a      	movs	r2, #10
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f7ff ff8c 	bl	800d5fc <__multadd>
 800d6e4:	45a0      	cmp	r8, r4
 800d6e6:	d1f5      	bne.n	800d6d4 <__s2b+0x4c>
 800d6e8:	f1a5 0408 	sub.w	r4, r5, #8
 800d6ec:	444c      	add	r4, r9
 800d6ee:	1b2d      	subs	r5, r5, r4
 800d6f0:	1963      	adds	r3, r4, r5
 800d6f2:	42bb      	cmp	r3, r7
 800d6f4:	db04      	blt.n	800d700 <__s2b+0x78>
 800d6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6fa:	340a      	adds	r4, #10
 800d6fc:	2509      	movs	r5, #9
 800d6fe:	e7f6      	b.n	800d6ee <__s2b+0x66>
 800d700:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d704:	4601      	mov	r1, r0
 800d706:	3b30      	subs	r3, #48	; 0x30
 800d708:	220a      	movs	r2, #10
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff ff76 	bl	800d5fc <__multadd>
 800d710:	e7ee      	b.n	800d6f0 <__s2b+0x68>
 800d712:	bf00      	nop
 800d714:	080116b0 	.word	0x080116b0
 800d718:	0801173c 	.word	0x0801173c

0800d71c <__hi0bits>:
 800d71c:	0c03      	lsrs	r3, r0, #16
 800d71e:	041b      	lsls	r3, r3, #16
 800d720:	b9d3      	cbnz	r3, 800d758 <__hi0bits+0x3c>
 800d722:	0400      	lsls	r0, r0, #16
 800d724:	2310      	movs	r3, #16
 800d726:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d72a:	bf04      	itt	eq
 800d72c:	0200      	lsleq	r0, r0, #8
 800d72e:	3308      	addeq	r3, #8
 800d730:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d734:	bf04      	itt	eq
 800d736:	0100      	lsleq	r0, r0, #4
 800d738:	3304      	addeq	r3, #4
 800d73a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d73e:	bf04      	itt	eq
 800d740:	0080      	lsleq	r0, r0, #2
 800d742:	3302      	addeq	r3, #2
 800d744:	2800      	cmp	r0, #0
 800d746:	db05      	blt.n	800d754 <__hi0bits+0x38>
 800d748:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d74c:	f103 0301 	add.w	r3, r3, #1
 800d750:	bf08      	it	eq
 800d752:	2320      	moveq	r3, #32
 800d754:	4618      	mov	r0, r3
 800d756:	4770      	bx	lr
 800d758:	2300      	movs	r3, #0
 800d75a:	e7e4      	b.n	800d726 <__hi0bits+0xa>

0800d75c <__lo0bits>:
 800d75c:	6803      	ldr	r3, [r0, #0]
 800d75e:	f013 0207 	ands.w	r2, r3, #7
 800d762:	4601      	mov	r1, r0
 800d764:	d00b      	beq.n	800d77e <__lo0bits+0x22>
 800d766:	07da      	lsls	r2, r3, #31
 800d768:	d423      	bmi.n	800d7b2 <__lo0bits+0x56>
 800d76a:	0798      	lsls	r0, r3, #30
 800d76c:	bf49      	itett	mi
 800d76e:	085b      	lsrmi	r3, r3, #1
 800d770:	089b      	lsrpl	r3, r3, #2
 800d772:	2001      	movmi	r0, #1
 800d774:	600b      	strmi	r3, [r1, #0]
 800d776:	bf5c      	itt	pl
 800d778:	600b      	strpl	r3, [r1, #0]
 800d77a:	2002      	movpl	r0, #2
 800d77c:	4770      	bx	lr
 800d77e:	b298      	uxth	r0, r3
 800d780:	b9a8      	cbnz	r0, 800d7ae <__lo0bits+0x52>
 800d782:	0c1b      	lsrs	r3, r3, #16
 800d784:	2010      	movs	r0, #16
 800d786:	b2da      	uxtb	r2, r3
 800d788:	b90a      	cbnz	r2, 800d78e <__lo0bits+0x32>
 800d78a:	3008      	adds	r0, #8
 800d78c:	0a1b      	lsrs	r3, r3, #8
 800d78e:	071a      	lsls	r2, r3, #28
 800d790:	bf04      	itt	eq
 800d792:	091b      	lsreq	r3, r3, #4
 800d794:	3004      	addeq	r0, #4
 800d796:	079a      	lsls	r2, r3, #30
 800d798:	bf04      	itt	eq
 800d79a:	089b      	lsreq	r3, r3, #2
 800d79c:	3002      	addeq	r0, #2
 800d79e:	07da      	lsls	r2, r3, #31
 800d7a0:	d403      	bmi.n	800d7aa <__lo0bits+0x4e>
 800d7a2:	085b      	lsrs	r3, r3, #1
 800d7a4:	f100 0001 	add.w	r0, r0, #1
 800d7a8:	d005      	beq.n	800d7b6 <__lo0bits+0x5a>
 800d7aa:	600b      	str	r3, [r1, #0]
 800d7ac:	4770      	bx	lr
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	e7e9      	b.n	800d786 <__lo0bits+0x2a>
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	4770      	bx	lr
 800d7b6:	2020      	movs	r0, #32
 800d7b8:	4770      	bx	lr
	...

0800d7bc <__i2b>:
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	460c      	mov	r4, r1
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	f7ff feb9 	bl	800d538 <_Balloc>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	b928      	cbnz	r0, 800d7d6 <__i2b+0x1a>
 800d7ca:	4b05      	ldr	r3, [pc, #20]	; (800d7e0 <__i2b+0x24>)
 800d7cc:	4805      	ldr	r0, [pc, #20]	; (800d7e4 <__i2b+0x28>)
 800d7ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d7d2:	f001 fa1d 	bl	800ec10 <__assert_func>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	6144      	str	r4, [r0, #20]
 800d7da:	6103      	str	r3, [r0, #16]
 800d7dc:	bd10      	pop	{r4, pc}
 800d7de:	bf00      	nop
 800d7e0:	080116b0 	.word	0x080116b0
 800d7e4:	0801173c 	.word	0x0801173c

0800d7e8 <__multiply>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	4691      	mov	r9, r2
 800d7ee:	690a      	ldr	r2, [r1, #16]
 800d7f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	bfb8      	it	lt
 800d7f8:	460b      	movlt	r3, r1
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	bfbc      	itt	lt
 800d7fe:	464c      	movlt	r4, r9
 800d800:	4699      	movlt	r9, r3
 800d802:	6927      	ldr	r7, [r4, #16]
 800d804:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d808:	68a3      	ldr	r3, [r4, #8]
 800d80a:	6861      	ldr	r1, [r4, #4]
 800d80c:	eb07 060a 	add.w	r6, r7, sl
 800d810:	42b3      	cmp	r3, r6
 800d812:	b085      	sub	sp, #20
 800d814:	bfb8      	it	lt
 800d816:	3101      	addlt	r1, #1
 800d818:	f7ff fe8e 	bl	800d538 <_Balloc>
 800d81c:	b930      	cbnz	r0, 800d82c <__multiply+0x44>
 800d81e:	4602      	mov	r2, r0
 800d820:	4b44      	ldr	r3, [pc, #272]	; (800d934 <__multiply+0x14c>)
 800d822:	4845      	ldr	r0, [pc, #276]	; (800d938 <__multiply+0x150>)
 800d824:	f240 115d 	movw	r1, #349	; 0x15d
 800d828:	f001 f9f2 	bl	800ec10 <__assert_func>
 800d82c:	f100 0514 	add.w	r5, r0, #20
 800d830:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d834:	462b      	mov	r3, r5
 800d836:	2200      	movs	r2, #0
 800d838:	4543      	cmp	r3, r8
 800d83a:	d321      	bcc.n	800d880 <__multiply+0x98>
 800d83c:	f104 0314 	add.w	r3, r4, #20
 800d840:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d844:	f109 0314 	add.w	r3, r9, #20
 800d848:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d84c:	9202      	str	r2, [sp, #8]
 800d84e:	1b3a      	subs	r2, r7, r4
 800d850:	3a15      	subs	r2, #21
 800d852:	f022 0203 	bic.w	r2, r2, #3
 800d856:	3204      	adds	r2, #4
 800d858:	f104 0115 	add.w	r1, r4, #21
 800d85c:	428f      	cmp	r7, r1
 800d85e:	bf38      	it	cc
 800d860:	2204      	movcc	r2, #4
 800d862:	9201      	str	r2, [sp, #4]
 800d864:	9a02      	ldr	r2, [sp, #8]
 800d866:	9303      	str	r3, [sp, #12]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d80c      	bhi.n	800d886 <__multiply+0x9e>
 800d86c:	2e00      	cmp	r6, #0
 800d86e:	dd03      	ble.n	800d878 <__multiply+0x90>
 800d870:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d874:	2b00      	cmp	r3, #0
 800d876:	d05a      	beq.n	800d92e <__multiply+0x146>
 800d878:	6106      	str	r6, [r0, #16]
 800d87a:	b005      	add	sp, #20
 800d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d880:	f843 2b04 	str.w	r2, [r3], #4
 800d884:	e7d8      	b.n	800d838 <__multiply+0x50>
 800d886:	f8b3 a000 	ldrh.w	sl, [r3]
 800d88a:	f1ba 0f00 	cmp.w	sl, #0
 800d88e:	d024      	beq.n	800d8da <__multiply+0xf2>
 800d890:	f104 0e14 	add.w	lr, r4, #20
 800d894:	46a9      	mov	r9, r5
 800d896:	f04f 0c00 	mov.w	ip, #0
 800d89a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d89e:	f8d9 1000 	ldr.w	r1, [r9]
 800d8a2:	fa1f fb82 	uxth.w	fp, r2
 800d8a6:	b289      	uxth	r1, r1
 800d8a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d8ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d8b0:	f8d9 2000 	ldr.w	r2, [r9]
 800d8b4:	4461      	add	r1, ip
 800d8b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800d8be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d8c2:	b289      	uxth	r1, r1
 800d8c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8c8:	4577      	cmp	r7, lr
 800d8ca:	f849 1b04 	str.w	r1, [r9], #4
 800d8ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8d2:	d8e2      	bhi.n	800d89a <__multiply+0xb2>
 800d8d4:	9a01      	ldr	r2, [sp, #4]
 800d8d6:	f845 c002 	str.w	ip, [r5, r2]
 800d8da:	9a03      	ldr	r2, [sp, #12]
 800d8dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	f1b9 0f00 	cmp.w	r9, #0
 800d8e6:	d020      	beq.n	800d92a <__multiply+0x142>
 800d8e8:	6829      	ldr	r1, [r5, #0]
 800d8ea:	f104 0c14 	add.w	ip, r4, #20
 800d8ee:	46ae      	mov	lr, r5
 800d8f0:	f04f 0a00 	mov.w	sl, #0
 800d8f4:	f8bc b000 	ldrh.w	fp, [ip]
 800d8f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8fc:	fb09 220b 	mla	r2, r9, fp, r2
 800d900:	4492      	add	sl, r2
 800d902:	b289      	uxth	r1, r1
 800d904:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d908:	f84e 1b04 	str.w	r1, [lr], #4
 800d90c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d910:	f8be 1000 	ldrh.w	r1, [lr]
 800d914:	0c12      	lsrs	r2, r2, #16
 800d916:	fb09 1102 	mla	r1, r9, r2, r1
 800d91a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d91e:	4567      	cmp	r7, ip
 800d920:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d924:	d8e6      	bhi.n	800d8f4 <__multiply+0x10c>
 800d926:	9a01      	ldr	r2, [sp, #4]
 800d928:	50a9      	str	r1, [r5, r2]
 800d92a:	3504      	adds	r5, #4
 800d92c:	e79a      	b.n	800d864 <__multiply+0x7c>
 800d92e:	3e01      	subs	r6, #1
 800d930:	e79c      	b.n	800d86c <__multiply+0x84>
 800d932:	bf00      	nop
 800d934:	080116b0 	.word	0x080116b0
 800d938:	0801173c 	.word	0x0801173c

0800d93c <__pow5mult>:
 800d93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d940:	4615      	mov	r5, r2
 800d942:	f012 0203 	ands.w	r2, r2, #3
 800d946:	4606      	mov	r6, r0
 800d948:	460f      	mov	r7, r1
 800d94a:	d007      	beq.n	800d95c <__pow5mult+0x20>
 800d94c:	4c25      	ldr	r4, [pc, #148]	; (800d9e4 <__pow5mult+0xa8>)
 800d94e:	3a01      	subs	r2, #1
 800d950:	2300      	movs	r3, #0
 800d952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d956:	f7ff fe51 	bl	800d5fc <__multadd>
 800d95a:	4607      	mov	r7, r0
 800d95c:	10ad      	asrs	r5, r5, #2
 800d95e:	d03d      	beq.n	800d9dc <__pow5mult+0xa0>
 800d960:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d962:	b97c      	cbnz	r4, 800d984 <__pow5mult+0x48>
 800d964:	2010      	movs	r0, #16
 800d966:	f7ff fdbf 	bl	800d4e8 <malloc>
 800d96a:	4602      	mov	r2, r0
 800d96c:	6270      	str	r0, [r6, #36]	; 0x24
 800d96e:	b928      	cbnz	r0, 800d97c <__pow5mult+0x40>
 800d970:	4b1d      	ldr	r3, [pc, #116]	; (800d9e8 <__pow5mult+0xac>)
 800d972:	481e      	ldr	r0, [pc, #120]	; (800d9ec <__pow5mult+0xb0>)
 800d974:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d978:	f001 f94a 	bl	800ec10 <__assert_func>
 800d97c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d980:	6004      	str	r4, [r0, #0]
 800d982:	60c4      	str	r4, [r0, #12]
 800d984:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d98c:	b94c      	cbnz	r4, 800d9a2 <__pow5mult+0x66>
 800d98e:	f240 2171 	movw	r1, #625	; 0x271
 800d992:	4630      	mov	r0, r6
 800d994:	f7ff ff12 	bl	800d7bc <__i2b>
 800d998:	2300      	movs	r3, #0
 800d99a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d99e:	4604      	mov	r4, r0
 800d9a0:	6003      	str	r3, [r0, #0]
 800d9a2:	f04f 0900 	mov.w	r9, #0
 800d9a6:	07eb      	lsls	r3, r5, #31
 800d9a8:	d50a      	bpl.n	800d9c0 <__pow5mult+0x84>
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7ff ff1a 	bl	800d7e8 <__multiply>
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	4680      	mov	r8, r0
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7ff fdfd 	bl	800d5b8 <_Bfree>
 800d9be:	4647      	mov	r7, r8
 800d9c0:	106d      	asrs	r5, r5, #1
 800d9c2:	d00b      	beq.n	800d9dc <__pow5mult+0xa0>
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	b938      	cbnz	r0, 800d9d8 <__pow5mult+0x9c>
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	4621      	mov	r1, r4
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f7ff ff0b 	bl	800d7e8 <__multiply>
 800d9d2:	6020      	str	r0, [r4, #0]
 800d9d4:	f8c0 9000 	str.w	r9, [r0]
 800d9d8:	4604      	mov	r4, r0
 800d9da:	e7e4      	b.n	800d9a6 <__pow5mult+0x6a>
 800d9dc:	4638      	mov	r0, r7
 800d9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9e2:	bf00      	nop
 800d9e4:	08011888 	.word	0x08011888
 800d9e8:	0801163e 	.word	0x0801163e
 800d9ec:	0801173c 	.word	0x0801173c

0800d9f0 <__lshift>:
 800d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	460c      	mov	r4, r1
 800d9f6:	6849      	ldr	r1, [r1, #4]
 800d9f8:	6923      	ldr	r3, [r4, #16]
 800d9fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	4607      	mov	r7, r0
 800da02:	4691      	mov	r9, r2
 800da04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da08:	f108 0601 	add.w	r6, r8, #1
 800da0c:	42b3      	cmp	r3, r6
 800da0e:	db0b      	blt.n	800da28 <__lshift+0x38>
 800da10:	4638      	mov	r0, r7
 800da12:	f7ff fd91 	bl	800d538 <_Balloc>
 800da16:	4605      	mov	r5, r0
 800da18:	b948      	cbnz	r0, 800da2e <__lshift+0x3e>
 800da1a:	4602      	mov	r2, r0
 800da1c:	4b2a      	ldr	r3, [pc, #168]	; (800dac8 <__lshift+0xd8>)
 800da1e:	482b      	ldr	r0, [pc, #172]	; (800dacc <__lshift+0xdc>)
 800da20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da24:	f001 f8f4 	bl	800ec10 <__assert_func>
 800da28:	3101      	adds	r1, #1
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	e7ee      	b.n	800da0c <__lshift+0x1c>
 800da2e:	2300      	movs	r3, #0
 800da30:	f100 0114 	add.w	r1, r0, #20
 800da34:	f100 0210 	add.w	r2, r0, #16
 800da38:	4618      	mov	r0, r3
 800da3a:	4553      	cmp	r3, sl
 800da3c:	db37      	blt.n	800daae <__lshift+0xbe>
 800da3e:	6920      	ldr	r0, [r4, #16]
 800da40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da44:	f104 0314 	add.w	r3, r4, #20
 800da48:	f019 091f 	ands.w	r9, r9, #31
 800da4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da54:	d02f      	beq.n	800dab6 <__lshift+0xc6>
 800da56:	f1c9 0e20 	rsb	lr, r9, #32
 800da5a:	468a      	mov	sl, r1
 800da5c:	f04f 0c00 	mov.w	ip, #0
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	fa02 f209 	lsl.w	r2, r2, r9
 800da66:	ea42 020c 	orr.w	r2, r2, ip
 800da6a:	f84a 2b04 	str.w	r2, [sl], #4
 800da6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da72:	4298      	cmp	r0, r3
 800da74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800da78:	d8f2      	bhi.n	800da60 <__lshift+0x70>
 800da7a:	1b03      	subs	r3, r0, r4
 800da7c:	3b15      	subs	r3, #21
 800da7e:	f023 0303 	bic.w	r3, r3, #3
 800da82:	3304      	adds	r3, #4
 800da84:	f104 0215 	add.w	r2, r4, #21
 800da88:	4290      	cmp	r0, r2
 800da8a:	bf38      	it	cc
 800da8c:	2304      	movcc	r3, #4
 800da8e:	f841 c003 	str.w	ip, [r1, r3]
 800da92:	f1bc 0f00 	cmp.w	ip, #0
 800da96:	d001      	beq.n	800da9c <__lshift+0xac>
 800da98:	f108 0602 	add.w	r6, r8, #2
 800da9c:	3e01      	subs	r6, #1
 800da9e:	4638      	mov	r0, r7
 800daa0:	612e      	str	r6, [r5, #16]
 800daa2:	4621      	mov	r1, r4
 800daa4:	f7ff fd88 	bl	800d5b8 <_Bfree>
 800daa8:	4628      	mov	r0, r5
 800daaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daae:	f842 0f04 	str.w	r0, [r2, #4]!
 800dab2:	3301      	adds	r3, #1
 800dab4:	e7c1      	b.n	800da3a <__lshift+0x4a>
 800dab6:	3904      	subs	r1, #4
 800dab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dabc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dac0:	4298      	cmp	r0, r3
 800dac2:	d8f9      	bhi.n	800dab8 <__lshift+0xc8>
 800dac4:	e7ea      	b.n	800da9c <__lshift+0xac>
 800dac6:	bf00      	nop
 800dac8:	080116b0 	.word	0x080116b0
 800dacc:	0801173c 	.word	0x0801173c

0800dad0 <__mcmp>:
 800dad0:	b530      	push	{r4, r5, lr}
 800dad2:	6902      	ldr	r2, [r0, #16]
 800dad4:	690c      	ldr	r4, [r1, #16]
 800dad6:	1b12      	subs	r2, r2, r4
 800dad8:	d10e      	bne.n	800daf8 <__mcmp+0x28>
 800dada:	f100 0314 	add.w	r3, r0, #20
 800dade:	3114      	adds	r1, #20
 800dae0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dae4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dae8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800daec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800daf0:	42a5      	cmp	r5, r4
 800daf2:	d003      	beq.n	800dafc <__mcmp+0x2c>
 800daf4:	d305      	bcc.n	800db02 <__mcmp+0x32>
 800daf6:	2201      	movs	r2, #1
 800daf8:	4610      	mov	r0, r2
 800dafa:	bd30      	pop	{r4, r5, pc}
 800dafc:	4283      	cmp	r3, r0
 800dafe:	d3f3      	bcc.n	800dae8 <__mcmp+0x18>
 800db00:	e7fa      	b.n	800daf8 <__mcmp+0x28>
 800db02:	f04f 32ff 	mov.w	r2, #4294967295
 800db06:	e7f7      	b.n	800daf8 <__mcmp+0x28>

0800db08 <__mdiff>:
 800db08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	460c      	mov	r4, r1
 800db0e:	4606      	mov	r6, r0
 800db10:	4611      	mov	r1, r2
 800db12:	4620      	mov	r0, r4
 800db14:	4690      	mov	r8, r2
 800db16:	f7ff ffdb 	bl	800dad0 <__mcmp>
 800db1a:	1e05      	subs	r5, r0, #0
 800db1c:	d110      	bne.n	800db40 <__mdiff+0x38>
 800db1e:	4629      	mov	r1, r5
 800db20:	4630      	mov	r0, r6
 800db22:	f7ff fd09 	bl	800d538 <_Balloc>
 800db26:	b930      	cbnz	r0, 800db36 <__mdiff+0x2e>
 800db28:	4b3a      	ldr	r3, [pc, #232]	; (800dc14 <__mdiff+0x10c>)
 800db2a:	4602      	mov	r2, r0
 800db2c:	f240 2132 	movw	r1, #562	; 0x232
 800db30:	4839      	ldr	r0, [pc, #228]	; (800dc18 <__mdiff+0x110>)
 800db32:	f001 f86d 	bl	800ec10 <__assert_func>
 800db36:	2301      	movs	r3, #1
 800db38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db40:	bfa4      	itt	ge
 800db42:	4643      	movge	r3, r8
 800db44:	46a0      	movge	r8, r4
 800db46:	4630      	mov	r0, r6
 800db48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db4c:	bfa6      	itte	ge
 800db4e:	461c      	movge	r4, r3
 800db50:	2500      	movge	r5, #0
 800db52:	2501      	movlt	r5, #1
 800db54:	f7ff fcf0 	bl	800d538 <_Balloc>
 800db58:	b920      	cbnz	r0, 800db64 <__mdiff+0x5c>
 800db5a:	4b2e      	ldr	r3, [pc, #184]	; (800dc14 <__mdiff+0x10c>)
 800db5c:	4602      	mov	r2, r0
 800db5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800db62:	e7e5      	b.n	800db30 <__mdiff+0x28>
 800db64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db68:	6926      	ldr	r6, [r4, #16]
 800db6a:	60c5      	str	r5, [r0, #12]
 800db6c:	f104 0914 	add.w	r9, r4, #20
 800db70:	f108 0514 	add.w	r5, r8, #20
 800db74:	f100 0e14 	add.w	lr, r0, #20
 800db78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db80:	f108 0210 	add.w	r2, r8, #16
 800db84:	46f2      	mov	sl, lr
 800db86:	2100      	movs	r1, #0
 800db88:	f859 3b04 	ldr.w	r3, [r9], #4
 800db8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db90:	fa1f f883 	uxth.w	r8, r3
 800db94:	fa11 f18b 	uxtah	r1, r1, fp
 800db98:	0c1b      	lsrs	r3, r3, #16
 800db9a:	eba1 0808 	sub.w	r8, r1, r8
 800db9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dba2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dba6:	fa1f f888 	uxth.w	r8, r8
 800dbaa:	1419      	asrs	r1, r3, #16
 800dbac:	454e      	cmp	r6, r9
 800dbae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dbb2:	f84a 3b04 	str.w	r3, [sl], #4
 800dbb6:	d8e7      	bhi.n	800db88 <__mdiff+0x80>
 800dbb8:	1b33      	subs	r3, r6, r4
 800dbba:	3b15      	subs	r3, #21
 800dbbc:	f023 0303 	bic.w	r3, r3, #3
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	3415      	adds	r4, #21
 800dbc4:	42a6      	cmp	r6, r4
 800dbc6:	bf38      	it	cc
 800dbc8:	2304      	movcc	r3, #4
 800dbca:	441d      	add	r5, r3
 800dbcc:	4473      	add	r3, lr
 800dbce:	469e      	mov	lr, r3
 800dbd0:	462e      	mov	r6, r5
 800dbd2:	4566      	cmp	r6, ip
 800dbd4:	d30e      	bcc.n	800dbf4 <__mdiff+0xec>
 800dbd6:	f10c 0203 	add.w	r2, ip, #3
 800dbda:	1b52      	subs	r2, r2, r5
 800dbdc:	f022 0203 	bic.w	r2, r2, #3
 800dbe0:	3d03      	subs	r5, #3
 800dbe2:	45ac      	cmp	ip, r5
 800dbe4:	bf38      	it	cc
 800dbe6:	2200      	movcc	r2, #0
 800dbe8:	441a      	add	r2, r3
 800dbea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dbee:	b17b      	cbz	r3, 800dc10 <__mdiff+0x108>
 800dbf0:	6107      	str	r7, [r0, #16]
 800dbf2:	e7a3      	b.n	800db3c <__mdiff+0x34>
 800dbf4:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbf8:	fa11 f288 	uxtah	r2, r1, r8
 800dbfc:	1414      	asrs	r4, r2, #16
 800dbfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc02:	b292      	uxth	r2, r2
 800dc04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc08:	f84e 2b04 	str.w	r2, [lr], #4
 800dc0c:	1421      	asrs	r1, r4, #16
 800dc0e:	e7e0      	b.n	800dbd2 <__mdiff+0xca>
 800dc10:	3f01      	subs	r7, #1
 800dc12:	e7ea      	b.n	800dbea <__mdiff+0xe2>
 800dc14:	080116b0 	.word	0x080116b0
 800dc18:	0801173c 	.word	0x0801173c

0800dc1c <__ulp>:
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	ed8d 0b00 	vstr	d0, [sp]
 800dc22:	9b01      	ldr	r3, [sp, #4]
 800dc24:	4912      	ldr	r1, [pc, #72]	; (800dc70 <__ulp+0x54>)
 800dc26:	4019      	ands	r1, r3
 800dc28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc2c:	2900      	cmp	r1, #0
 800dc2e:	dd05      	ble.n	800dc3c <__ulp+0x20>
 800dc30:	2200      	movs	r2, #0
 800dc32:	460b      	mov	r3, r1
 800dc34:	ec43 2b10 	vmov	d0, r2, r3
 800dc38:	b002      	add	sp, #8
 800dc3a:	4770      	bx	lr
 800dc3c:	4249      	negs	r1, r1
 800dc3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dc42:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dc46:	f04f 0200 	mov.w	r2, #0
 800dc4a:	f04f 0300 	mov.w	r3, #0
 800dc4e:	da04      	bge.n	800dc5a <__ulp+0x3e>
 800dc50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dc54:	fa41 f300 	asr.w	r3, r1, r0
 800dc58:	e7ec      	b.n	800dc34 <__ulp+0x18>
 800dc5a:	f1a0 0114 	sub.w	r1, r0, #20
 800dc5e:	291e      	cmp	r1, #30
 800dc60:	bfda      	itte	le
 800dc62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dc66:	fa20 f101 	lsrle.w	r1, r0, r1
 800dc6a:	2101      	movgt	r1, #1
 800dc6c:	460a      	mov	r2, r1
 800dc6e:	e7e1      	b.n	800dc34 <__ulp+0x18>
 800dc70:	7ff00000 	.word	0x7ff00000

0800dc74 <__b2d>:
 800dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc76:	6905      	ldr	r5, [r0, #16]
 800dc78:	f100 0714 	add.w	r7, r0, #20
 800dc7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dc80:	1f2e      	subs	r6, r5, #4
 800dc82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dc86:	4620      	mov	r0, r4
 800dc88:	f7ff fd48 	bl	800d71c <__hi0bits>
 800dc8c:	f1c0 0320 	rsb	r3, r0, #32
 800dc90:	280a      	cmp	r0, #10
 800dc92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd10 <__b2d+0x9c>
 800dc96:	600b      	str	r3, [r1, #0]
 800dc98:	dc14      	bgt.n	800dcc4 <__b2d+0x50>
 800dc9a:	f1c0 0e0b 	rsb	lr, r0, #11
 800dc9e:	fa24 f10e 	lsr.w	r1, r4, lr
 800dca2:	42b7      	cmp	r7, r6
 800dca4:	ea41 030c 	orr.w	r3, r1, ip
 800dca8:	bf34      	ite	cc
 800dcaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcae:	2100      	movcs	r1, #0
 800dcb0:	3015      	adds	r0, #21
 800dcb2:	fa04 f000 	lsl.w	r0, r4, r0
 800dcb6:	fa21 f10e 	lsr.w	r1, r1, lr
 800dcba:	ea40 0201 	orr.w	r2, r0, r1
 800dcbe:	ec43 2b10 	vmov	d0, r2, r3
 800dcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcc4:	42b7      	cmp	r7, r6
 800dcc6:	bf3a      	itte	cc
 800dcc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dccc:	f1a5 0608 	subcc.w	r6, r5, #8
 800dcd0:	2100      	movcs	r1, #0
 800dcd2:	380b      	subs	r0, #11
 800dcd4:	d017      	beq.n	800dd06 <__b2d+0x92>
 800dcd6:	f1c0 0c20 	rsb	ip, r0, #32
 800dcda:	fa04 f500 	lsl.w	r5, r4, r0
 800dcde:	42be      	cmp	r6, r7
 800dce0:	fa21 f40c 	lsr.w	r4, r1, ip
 800dce4:	ea45 0504 	orr.w	r5, r5, r4
 800dce8:	bf8c      	ite	hi
 800dcea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dcee:	2400      	movls	r4, #0
 800dcf0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dcf4:	fa01 f000 	lsl.w	r0, r1, r0
 800dcf8:	fa24 f40c 	lsr.w	r4, r4, ip
 800dcfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd00:	ea40 0204 	orr.w	r2, r0, r4
 800dd04:	e7db      	b.n	800dcbe <__b2d+0x4a>
 800dd06:	ea44 030c 	orr.w	r3, r4, ip
 800dd0a:	460a      	mov	r2, r1
 800dd0c:	e7d7      	b.n	800dcbe <__b2d+0x4a>
 800dd0e:	bf00      	nop
 800dd10:	3ff00000 	.word	0x3ff00000

0800dd14 <__d2b>:
 800dd14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd18:	4689      	mov	r9, r1
 800dd1a:	2101      	movs	r1, #1
 800dd1c:	ec57 6b10 	vmov	r6, r7, d0
 800dd20:	4690      	mov	r8, r2
 800dd22:	f7ff fc09 	bl	800d538 <_Balloc>
 800dd26:	4604      	mov	r4, r0
 800dd28:	b930      	cbnz	r0, 800dd38 <__d2b+0x24>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	4b25      	ldr	r3, [pc, #148]	; (800ddc4 <__d2b+0xb0>)
 800dd2e:	4826      	ldr	r0, [pc, #152]	; (800ddc8 <__d2b+0xb4>)
 800dd30:	f240 310a 	movw	r1, #778	; 0x30a
 800dd34:	f000 ff6c 	bl	800ec10 <__assert_func>
 800dd38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd40:	bb35      	cbnz	r5, 800dd90 <__d2b+0x7c>
 800dd42:	2e00      	cmp	r6, #0
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	d028      	beq.n	800dd9a <__d2b+0x86>
 800dd48:	4668      	mov	r0, sp
 800dd4a:	9600      	str	r6, [sp, #0]
 800dd4c:	f7ff fd06 	bl	800d75c <__lo0bits>
 800dd50:	9900      	ldr	r1, [sp, #0]
 800dd52:	b300      	cbz	r0, 800dd96 <__d2b+0x82>
 800dd54:	9a01      	ldr	r2, [sp, #4]
 800dd56:	f1c0 0320 	rsb	r3, r0, #32
 800dd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	40c2      	lsrs	r2, r0
 800dd62:	6163      	str	r3, [r4, #20]
 800dd64:	9201      	str	r2, [sp, #4]
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	61a3      	str	r3, [r4, #24]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	bf14      	ite	ne
 800dd6e:	2202      	movne	r2, #2
 800dd70:	2201      	moveq	r2, #1
 800dd72:	6122      	str	r2, [r4, #16]
 800dd74:	b1d5      	cbz	r5, 800ddac <__d2b+0x98>
 800dd76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd7a:	4405      	add	r5, r0
 800dd7c:	f8c9 5000 	str.w	r5, [r9]
 800dd80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd84:	f8c8 0000 	str.w	r0, [r8]
 800dd88:	4620      	mov	r0, r4
 800dd8a:	b003      	add	sp, #12
 800dd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd94:	e7d5      	b.n	800dd42 <__d2b+0x2e>
 800dd96:	6161      	str	r1, [r4, #20]
 800dd98:	e7e5      	b.n	800dd66 <__d2b+0x52>
 800dd9a:	a801      	add	r0, sp, #4
 800dd9c:	f7ff fcde 	bl	800d75c <__lo0bits>
 800dda0:	9b01      	ldr	r3, [sp, #4]
 800dda2:	6163      	str	r3, [r4, #20]
 800dda4:	2201      	movs	r2, #1
 800dda6:	6122      	str	r2, [r4, #16]
 800dda8:	3020      	adds	r0, #32
 800ddaa:	e7e3      	b.n	800dd74 <__d2b+0x60>
 800ddac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ddb4:	f8c9 0000 	str.w	r0, [r9]
 800ddb8:	6918      	ldr	r0, [r3, #16]
 800ddba:	f7ff fcaf 	bl	800d71c <__hi0bits>
 800ddbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddc2:	e7df      	b.n	800dd84 <__d2b+0x70>
 800ddc4:	080116b0 	.word	0x080116b0
 800ddc8:	0801173c 	.word	0x0801173c

0800ddcc <__ratio>:
 800ddcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	4688      	mov	r8, r1
 800ddd2:	4669      	mov	r1, sp
 800ddd4:	4681      	mov	r9, r0
 800ddd6:	f7ff ff4d 	bl	800dc74 <__b2d>
 800ddda:	a901      	add	r1, sp, #4
 800dddc:	4640      	mov	r0, r8
 800ddde:	ec55 4b10 	vmov	r4, r5, d0
 800dde2:	f7ff ff47 	bl	800dc74 <__b2d>
 800dde6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ddee:	eba3 0c02 	sub.w	ip, r3, r2
 800ddf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ddf6:	1a9b      	subs	r3, r3, r2
 800ddf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ddfc:	ec51 0b10 	vmov	r0, r1, d0
 800de00:	2b00      	cmp	r3, #0
 800de02:	bfd6      	itet	le
 800de04:	460a      	movle	r2, r1
 800de06:	462a      	movgt	r2, r5
 800de08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de0c:	468b      	mov	fp, r1
 800de0e:	462f      	mov	r7, r5
 800de10:	bfd4      	ite	le
 800de12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de1a:	4620      	mov	r0, r4
 800de1c:	ee10 2a10 	vmov	r2, s0
 800de20:	465b      	mov	r3, fp
 800de22:	4639      	mov	r1, r7
 800de24:	f7f2 fd32 	bl	800088c <__aeabi_ddiv>
 800de28:	ec41 0b10 	vmov	d0, r0, r1
 800de2c:	b003      	add	sp, #12
 800de2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de32 <__copybits>:
 800de32:	3901      	subs	r1, #1
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	1149      	asrs	r1, r1, #5
 800de38:	6914      	ldr	r4, [r2, #16]
 800de3a:	3101      	adds	r1, #1
 800de3c:	f102 0314 	add.w	r3, r2, #20
 800de40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de48:	1f05      	subs	r5, r0, #4
 800de4a:	42a3      	cmp	r3, r4
 800de4c:	d30c      	bcc.n	800de68 <__copybits+0x36>
 800de4e:	1aa3      	subs	r3, r4, r2
 800de50:	3b11      	subs	r3, #17
 800de52:	f023 0303 	bic.w	r3, r3, #3
 800de56:	3211      	adds	r2, #17
 800de58:	42a2      	cmp	r2, r4
 800de5a:	bf88      	it	hi
 800de5c:	2300      	movhi	r3, #0
 800de5e:	4418      	add	r0, r3
 800de60:	2300      	movs	r3, #0
 800de62:	4288      	cmp	r0, r1
 800de64:	d305      	bcc.n	800de72 <__copybits+0x40>
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	f853 6b04 	ldr.w	r6, [r3], #4
 800de6c:	f845 6f04 	str.w	r6, [r5, #4]!
 800de70:	e7eb      	b.n	800de4a <__copybits+0x18>
 800de72:	f840 3b04 	str.w	r3, [r0], #4
 800de76:	e7f4      	b.n	800de62 <__copybits+0x30>

0800de78 <__any_on>:
 800de78:	f100 0214 	add.w	r2, r0, #20
 800de7c:	6900      	ldr	r0, [r0, #16]
 800de7e:	114b      	asrs	r3, r1, #5
 800de80:	4298      	cmp	r0, r3
 800de82:	b510      	push	{r4, lr}
 800de84:	db11      	blt.n	800deaa <__any_on+0x32>
 800de86:	dd0a      	ble.n	800de9e <__any_on+0x26>
 800de88:	f011 011f 	ands.w	r1, r1, #31
 800de8c:	d007      	beq.n	800de9e <__any_on+0x26>
 800de8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de92:	fa24 f001 	lsr.w	r0, r4, r1
 800de96:	fa00 f101 	lsl.w	r1, r0, r1
 800de9a:	428c      	cmp	r4, r1
 800de9c:	d10b      	bne.n	800deb6 <__any_on+0x3e>
 800de9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d803      	bhi.n	800deae <__any_on+0x36>
 800dea6:	2000      	movs	r0, #0
 800dea8:	bd10      	pop	{r4, pc}
 800deaa:	4603      	mov	r3, r0
 800deac:	e7f7      	b.n	800de9e <__any_on+0x26>
 800deae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800deb2:	2900      	cmp	r1, #0
 800deb4:	d0f5      	beq.n	800dea2 <__any_on+0x2a>
 800deb6:	2001      	movs	r0, #1
 800deb8:	e7f6      	b.n	800dea8 <__any_on+0x30>

0800deba <_calloc_r>:
 800deba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800debc:	fba1 2402 	umull	r2, r4, r1, r2
 800dec0:	b94c      	cbnz	r4, 800ded6 <_calloc_r+0x1c>
 800dec2:	4611      	mov	r1, r2
 800dec4:	9201      	str	r2, [sp, #4]
 800dec6:	f000 f87b 	bl	800dfc0 <_malloc_r>
 800deca:	9a01      	ldr	r2, [sp, #4]
 800decc:	4605      	mov	r5, r0
 800dece:	b930      	cbnz	r0, 800dede <_calloc_r+0x24>
 800ded0:	4628      	mov	r0, r5
 800ded2:	b003      	add	sp, #12
 800ded4:	bd30      	pop	{r4, r5, pc}
 800ded6:	220c      	movs	r2, #12
 800ded8:	6002      	str	r2, [r0, #0]
 800deda:	2500      	movs	r5, #0
 800dedc:	e7f8      	b.n	800ded0 <_calloc_r+0x16>
 800dede:	4621      	mov	r1, r4
 800dee0:	f7fc faf8 	bl	800a4d4 <memset>
 800dee4:	e7f4      	b.n	800ded0 <_calloc_r+0x16>
	...

0800dee8 <_free_r>:
 800dee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deea:	2900      	cmp	r1, #0
 800deec:	d044      	beq.n	800df78 <_free_r+0x90>
 800deee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def2:	9001      	str	r0, [sp, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f1a1 0404 	sub.w	r4, r1, #4
 800defa:	bfb8      	it	lt
 800defc:	18e4      	addlt	r4, r4, r3
 800defe:	f001 f88b 	bl	800f018 <__malloc_lock>
 800df02:	4a1e      	ldr	r2, [pc, #120]	; (800df7c <_free_r+0x94>)
 800df04:	9801      	ldr	r0, [sp, #4]
 800df06:	6813      	ldr	r3, [r2, #0]
 800df08:	b933      	cbnz	r3, 800df18 <_free_r+0x30>
 800df0a:	6063      	str	r3, [r4, #4]
 800df0c:	6014      	str	r4, [r2, #0]
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df14:	f001 b886 	b.w	800f024 <__malloc_unlock>
 800df18:	42a3      	cmp	r3, r4
 800df1a:	d908      	bls.n	800df2e <_free_r+0x46>
 800df1c:	6825      	ldr	r5, [r4, #0]
 800df1e:	1961      	adds	r1, r4, r5
 800df20:	428b      	cmp	r3, r1
 800df22:	bf01      	itttt	eq
 800df24:	6819      	ldreq	r1, [r3, #0]
 800df26:	685b      	ldreq	r3, [r3, #4]
 800df28:	1949      	addeq	r1, r1, r5
 800df2a:	6021      	streq	r1, [r4, #0]
 800df2c:	e7ed      	b.n	800df0a <_free_r+0x22>
 800df2e:	461a      	mov	r2, r3
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	b10b      	cbz	r3, 800df38 <_free_r+0x50>
 800df34:	42a3      	cmp	r3, r4
 800df36:	d9fa      	bls.n	800df2e <_free_r+0x46>
 800df38:	6811      	ldr	r1, [r2, #0]
 800df3a:	1855      	adds	r5, r2, r1
 800df3c:	42a5      	cmp	r5, r4
 800df3e:	d10b      	bne.n	800df58 <_free_r+0x70>
 800df40:	6824      	ldr	r4, [r4, #0]
 800df42:	4421      	add	r1, r4
 800df44:	1854      	adds	r4, r2, r1
 800df46:	42a3      	cmp	r3, r4
 800df48:	6011      	str	r1, [r2, #0]
 800df4a:	d1e0      	bne.n	800df0e <_free_r+0x26>
 800df4c:	681c      	ldr	r4, [r3, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	6053      	str	r3, [r2, #4]
 800df52:	4421      	add	r1, r4
 800df54:	6011      	str	r1, [r2, #0]
 800df56:	e7da      	b.n	800df0e <_free_r+0x26>
 800df58:	d902      	bls.n	800df60 <_free_r+0x78>
 800df5a:	230c      	movs	r3, #12
 800df5c:	6003      	str	r3, [r0, #0]
 800df5e:	e7d6      	b.n	800df0e <_free_r+0x26>
 800df60:	6825      	ldr	r5, [r4, #0]
 800df62:	1961      	adds	r1, r4, r5
 800df64:	428b      	cmp	r3, r1
 800df66:	bf04      	itt	eq
 800df68:	6819      	ldreq	r1, [r3, #0]
 800df6a:	685b      	ldreq	r3, [r3, #4]
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	bf04      	itt	eq
 800df70:	1949      	addeq	r1, r1, r5
 800df72:	6021      	streq	r1, [r4, #0]
 800df74:	6054      	str	r4, [r2, #4]
 800df76:	e7ca      	b.n	800df0e <_free_r+0x26>
 800df78:	b003      	add	sp, #12
 800df7a:	bd30      	pop	{r4, r5, pc}
 800df7c:	20001210 	.word	0x20001210

0800df80 <sbrk_aligned>:
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	4e0e      	ldr	r6, [pc, #56]	; (800dfbc <sbrk_aligned+0x3c>)
 800df84:	460c      	mov	r4, r1
 800df86:	6831      	ldr	r1, [r6, #0]
 800df88:	4605      	mov	r5, r0
 800df8a:	b911      	cbnz	r1, 800df92 <sbrk_aligned+0x12>
 800df8c:	f000 fd28 	bl	800e9e0 <_sbrk_r>
 800df90:	6030      	str	r0, [r6, #0]
 800df92:	4621      	mov	r1, r4
 800df94:	4628      	mov	r0, r5
 800df96:	f000 fd23 	bl	800e9e0 <_sbrk_r>
 800df9a:	1c43      	adds	r3, r0, #1
 800df9c:	d00a      	beq.n	800dfb4 <sbrk_aligned+0x34>
 800df9e:	1cc4      	adds	r4, r0, #3
 800dfa0:	f024 0403 	bic.w	r4, r4, #3
 800dfa4:	42a0      	cmp	r0, r4
 800dfa6:	d007      	beq.n	800dfb8 <sbrk_aligned+0x38>
 800dfa8:	1a21      	subs	r1, r4, r0
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f000 fd18 	bl	800e9e0 <_sbrk_r>
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d101      	bne.n	800dfb8 <sbrk_aligned+0x38>
 800dfb4:	f04f 34ff 	mov.w	r4, #4294967295
 800dfb8:	4620      	mov	r0, r4
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	20001214 	.word	0x20001214

0800dfc0 <_malloc_r>:
 800dfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc4:	1ccd      	adds	r5, r1, #3
 800dfc6:	f025 0503 	bic.w	r5, r5, #3
 800dfca:	3508      	adds	r5, #8
 800dfcc:	2d0c      	cmp	r5, #12
 800dfce:	bf38      	it	cc
 800dfd0:	250c      	movcc	r5, #12
 800dfd2:	2d00      	cmp	r5, #0
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	db01      	blt.n	800dfdc <_malloc_r+0x1c>
 800dfd8:	42a9      	cmp	r1, r5
 800dfda:	d905      	bls.n	800dfe8 <_malloc_r+0x28>
 800dfdc:	230c      	movs	r3, #12
 800dfde:	603b      	str	r3, [r7, #0]
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe8:	4e2e      	ldr	r6, [pc, #184]	; (800e0a4 <_malloc_r+0xe4>)
 800dfea:	f001 f815 	bl	800f018 <__malloc_lock>
 800dfee:	6833      	ldr	r3, [r6, #0]
 800dff0:	461c      	mov	r4, r3
 800dff2:	bb34      	cbnz	r4, 800e042 <_malloc_r+0x82>
 800dff4:	4629      	mov	r1, r5
 800dff6:	4638      	mov	r0, r7
 800dff8:	f7ff ffc2 	bl	800df80 <sbrk_aligned>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	4604      	mov	r4, r0
 800e000:	d14d      	bne.n	800e09e <_malloc_r+0xde>
 800e002:	6834      	ldr	r4, [r6, #0]
 800e004:	4626      	mov	r6, r4
 800e006:	2e00      	cmp	r6, #0
 800e008:	d140      	bne.n	800e08c <_malloc_r+0xcc>
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	4631      	mov	r1, r6
 800e00e:	4638      	mov	r0, r7
 800e010:	eb04 0803 	add.w	r8, r4, r3
 800e014:	f000 fce4 	bl	800e9e0 <_sbrk_r>
 800e018:	4580      	cmp	r8, r0
 800e01a:	d13a      	bne.n	800e092 <_malloc_r+0xd2>
 800e01c:	6821      	ldr	r1, [r4, #0]
 800e01e:	3503      	adds	r5, #3
 800e020:	1a6d      	subs	r5, r5, r1
 800e022:	f025 0503 	bic.w	r5, r5, #3
 800e026:	3508      	adds	r5, #8
 800e028:	2d0c      	cmp	r5, #12
 800e02a:	bf38      	it	cc
 800e02c:	250c      	movcc	r5, #12
 800e02e:	4629      	mov	r1, r5
 800e030:	4638      	mov	r0, r7
 800e032:	f7ff ffa5 	bl	800df80 <sbrk_aligned>
 800e036:	3001      	adds	r0, #1
 800e038:	d02b      	beq.n	800e092 <_malloc_r+0xd2>
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	442b      	add	r3, r5
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	e00e      	b.n	800e060 <_malloc_r+0xa0>
 800e042:	6822      	ldr	r2, [r4, #0]
 800e044:	1b52      	subs	r2, r2, r5
 800e046:	d41e      	bmi.n	800e086 <_malloc_r+0xc6>
 800e048:	2a0b      	cmp	r2, #11
 800e04a:	d916      	bls.n	800e07a <_malloc_r+0xba>
 800e04c:	1961      	adds	r1, r4, r5
 800e04e:	42a3      	cmp	r3, r4
 800e050:	6025      	str	r5, [r4, #0]
 800e052:	bf18      	it	ne
 800e054:	6059      	strne	r1, [r3, #4]
 800e056:	6863      	ldr	r3, [r4, #4]
 800e058:	bf08      	it	eq
 800e05a:	6031      	streq	r1, [r6, #0]
 800e05c:	5162      	str	r2, [r4, r5]
 800e05e:	604b      	str	r3, [r1, #4]
 800e060:	4638      	mov	r0, r7
 800e062:	f104 060b 	add.w	r6, r4, #11
 800e066:	f000 ffdd 	bl	800f024 <__malloc_unlock>
 800e06a:	f026 0607 	bic.w	r6, r6, #7
 800e06e:	1d23      	adds	r3, r4, #4
 800e070:	1af2      	subs	r2, r6, r3
 800e072:	d0b6      	beq.n	800dfe2 <_malloc_r+0x22>
 800e074:	1b9b      	subs	r3, r3, r6
 800e076:	50a3      	str	r3, [r4, r2]
 800e078:	e7b3      	b.n	800dfe2 <_malloc_r+0x22>
 800e07a:	6862      	ldr	r2, [r4, #4]
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	bf0c      	ite	eq
 800e080:	6032      	streq	r2, [r6, #0]
 800e082:	605a      	strne	r2, [r3, #4]
 800e084:	e7ec      	b.n	800e060 <_malloc_r+0xa0>
 800e086:	4623      	mov	r3, r4
 800e088:	6864      	ldr	r4, [r4, #4]
 800e08a:	e7b2      	b.n	800dff2 <_malloc_r+0x32>
 800e08c:	4634      	mov	r4, r6
 800e08e:	6876      	ldr	r6, [r6, #4]
 800e090:	e7b9      	b.n	800e006 <_malloc_r+0x46>
 800e092:	230c      	movs	r3, #12
 800e094:	603b      	str	r3, [r7, #0]
 800e096:	4638      	mov	r0, r7
 800e098:	f000 ffc4 	bl	800f024 <__malloc_unlock>
 800e09c:	e7a1      	b.n	800dfe2 <_malloc_r+0x22>
 800e09e:	6025      	str	r5, [r4, #0]
 800e0a0:	e7de      	b.n	800e060 <_malloc_r+0xa0>
 800e0a2:	bf00      	nop
 800e0a4:	20001210 	.word	0x20001210

0800e0a8 <__ssputs_r>:
 800e0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ac:	688e      	ldr	r6, [r1, #8]
 800e0ae:	429e      	cmp	r6, r3
 800e0b0:	4682      	mov	sl, r0
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	4690      	mov	r8, r2
 800e0b6:	461f      	mov	r7, r3
 800e0b8:	d838      	bhi.n	800e12c <__ssputs_r+0x84>
 800e0ba:	898a      	ldrh	r2, [r1, #12]
 800e0bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0c0:	d032      	beq.n	800e128 <__ssputs_r+0x80>
 800e0c2:	6825      	ldr	r5, [r4, #0]
 800e0c4:	6909      	ldr	r1, [r1, #16]
 800e0c6:	eba5 0901 	sub.w	r9, r5, r1
 800e0ca:	6965      	ldr	r5, [r4, #20]
 800e0cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	444b      	add	r3, r9
 800e0d8:	106d      	asrs	r5, r5, #1
 800e0da:	429d      	cmp	r5, r3
 800e0dc:	bf38      	it	cc
 800e0de:	461d      	movcc	r5, r3
 800e0e0:	0553      	lsls	r3, r2, #21
 800e0e2:	d531      	bpl.n	800e148 <__ssputs_r+0xa0>
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	f7ff ff6b 	bl	800dfc0 <_malloc_r>
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	b950      	cbnz	r0, 800e104 <__ssputs_r+0x5c>
 800e0ee:	230c      	movs	r3, #12
 800e0f0:	f8ca 3000 	str.w	r3, [sl]
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fa:	81a3      	strh	r3, [r4, #12]
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e104:	6921      	ldr	r1, [r4, #16]
 800e106:	464a      	mov	r2, r9
 800e108:	f7ff fa08 	bl	800d51c <memcpy>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	6126      	str	r6, [r4, #16]
 800e11a:	6165      	str	r5, [r4, #20]
 800e11c:	444e      	add	r6, r9
 800e11e:	eba5 0509 	sub.w	r5, r5, r9
 800e122:	6026      	str	r6, [r4, #0]
 800e124:	60a5      	str	r5, [r4, #8]
 800e126:	463e      	mov	r6, r7
 800e128:	42be      	cmp	r6, r7
 800e12a:	d900      	bls.n	800e12e <__ssputs_r+0x86>
 800e12c:	463e      	mov	r6, r7
 800e12e:	6820      	ldr	r0, [r4, #0]
 800e130:	4632      	mov	r2, r6
 800e132:	4641      	mov	r1, r8
 800e134:	f000 ff56 	bl	800efe4 <memmove>
 800e138:	68a3      	ldr	r3, [r4, #8]
 800e13a:	1b9b      	subs	r3, r3, r6
 800e13c:	60a3      	str	r3, [r4, #8]
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	4433      	add	r3, r6
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	2000      	movs	r0, #0
 800e146:	e7db      	b.n	800e100 <__ssputs_r+0x58>
 800e148:	462a      	mov	r2, r5
 800e14a:	f000 ff71 	bl	800f030 <_realloc_r>
 800e14e:	4606      	mov	r6, r0
 800e150:	2800      	cmp	r0, #0
 800e152:	d1e1      	bne.n	800e118 <__ssputs_r+0x70>
 800e154:	6921      	ldr	r1, [r4, #16]
 800e156:	4650      	mov	r0, sl
 800e158:	f7ff fec6 	bl	800dee8 <_free_r>
 800e15c:	e7c7      	b.n	800e0ee <__ssputs_r+0x46>
	...

0800e160 <_svfiprintf_r>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	4698      	mov	r8, r3
 800e166:	898b      	ldrh	r3, [r1, #12]
 800e168:	061b      	lsls	r3, r3, #24
 800e16a:	b09d      	sub	sp, #116	; 0x74
 800e16c:	4607      	mov	r7, r0
 800e16e:	460d      	mov	r5, r1
 800e170:	4614      	mov	r4, r2
 800e172:	d50e      	bpl.n	800e192 <_svfiprintf_r+0x32>
 800e174:	690b      	ldr	r3, [r1, #16]
 800e176:	b963      	cbnz	r3, 800e192 <_svfiprintf_r+0x32>
 800e178:	2140      	movs	r1, #64	; 0x40
 800e17a:	f7ff ff21 	bl	800dfc0 <_malloc_r>
 800e17e:	6028      	str	r0, [r5, #0]
 800e180:	6128      	str	r0, [r5, #16]
 800e182:	b920      	cbnz	r0, 800e18e <_svfiprintf_r+0x2e>
 800e184:	230c      	movs	r3, #12
 800e186:	603b      	str	r3, [r7, #0]
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	e0d1      	b.n	800e332 <_svfiprintf_r+0x1d2>
 800e18e:	2340      	movs	r3, #64	; 0x40
 800e190:	616b      	str	r3, [r5, #20]
 800e192:	2300      	movs	r3, #0
 800e194:	9309      	str	r3, [sp, #36]	; 0x24
 800e196:	2320      	movs	r3, #32
 800e198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1a0:	2330      	movs	r3, #48	; 0x30
 800e1a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e34c <_svfiprintf_r+0x1ec>
 800e1a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1aa:	f04f 0901 	mov.w	r9, #1
 800e1ae:	4623      	mov	r3, r4
 800e1b0:	469a      	mov	sl, r3
 800e1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b6:	b10a      	cbz	r2, 800e1bc <_svfiprintf_r+0x5c>
 800e1b8:	2a25      	cmp	r2, #37	; 0x25
 800e1ba:	d1f9      	bne.n	800e1b0 <_svfiprintf_r+0x50>
 800e1bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e1c0:	d00b      	beq.n	800e1da <_svfiprintf_r+0x7a>
 800e1c2:	465b      	mov	r3, fp
 800e1c4:	4622      	mov	r2, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f7ff ff6d 	bl	800e0a8 <__ssputs_r>
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f000 80aa 	beq.w	800e328 <_svfiprintf_r+0x1c8>
 800e1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1d6:	445a      	add	r2, fp
 800e1d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e1da:	f89a 3000 	ldrb.w	r3, [sl]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 80a2 	beq.w	800e328 <_svfiprintf_r+0x1c8>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1ee:	f10a 0a01 	add.w	sl, sl, #1
 800e1f2:	9304      	str	r3, [sp, #16]
 800e1f4:	9307      	str	r3, [sp, #28]
 800e1f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e1fc:	4654      	mov	r4, sl
 800e1fe:	2205      	movs	r2, #5
 800e200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e204:	4851      	ldr	r0, [pc, #324]	; (800e34c <_svfiprintf_r+0x1ec>)
 800e206:	f7f2 f80b 	bl	8000220 <memchr>
 800e20a:	9a04      	ldr	r2, [sp, #16]
 800e20c:	b9d8      	cbnz	r0, 800e246 <_svfiprintf_r+0xe6>
 800e20e:	06d0      	lsls	r0, r2, #27
 800e210:	bf44      	itt	mi
 800e212:	2320      	movmi	r3, #32
 800e214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e218:	0711      	lsls	r1, r2, #28
 800e21a:	bf44      	itt	mi
 800e21c:	232b      	movmi	r3, #43	; 0x2b
 800e21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e222:	f89a 3000 	ldrb.w	r3, [sl]
 800e226:	2b2a      	cmp	r3, #42	; 0x2a
 800e228:	d015      	beq.n	800e256 <_svfiprintf_r+0xf6>
 800e22a:	9a07      	ldr	r2, [sp, #28]
 800e22c:	4654      	mov	r4, sl
 800e22e:	2000      	movs	r0, #0
 800e230:	f04f 0c0a 	mov.w	ip, #10
 800e234:	4621      	mov	r1, r4
 800e236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e23a:	3b30      	subs	r3, #48	; 0x30
 800e23c:	2b09      	cmp	r3, #9
 800e23e:	d94e      	bls.n	800e2de <_svfiprintf_r+0x17e>
 800e240:	b1b0      	cbz	r0, 800e270 <_svfiprintf_r+0x110>
 800e242:	9207      	str	r2, [sp, #28]
 800e244:	e014      	b.n	800e270 <_svfiprintf_r+0x110>
 800e246:	eba0 0308 	sub.w	r3, r0, r8
 800e24a:	fa09 f303 	lsl.w	r3, r9, r3
 800e24e:	4313      	orrs	r3, r2
 800e250:	9304      	str	r3, [sp, #16]
 800e252:	46a2      	mov	sl, r4
 800e254:	e7d2      	b.n	800e1fc <_svfiprintf_r+0x9c>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	1d19      	adds	r1, r3, #4
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	9103      	str	r1, [sp, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bfbb      	ittet	lt
 800e262:	425b      	neglt	r3, r3
 800e264:	f042 0202 	orrlt.w	r2, r2, #2
 800e268:	9307      	strge	r3, [sp, #28]
 800e26a:	9307      	strlt	r3, [sp, #28]
 800e26c:	bfb8      	it	lt
 800e26e:	9204      	strlt	r2, [sp, #16]
 800e270:	7823      	ldrb	r3, [r4, #0]
 800e272:	2b2e      	cmp	r3, #46	; 0x2e
 800e274:	d10c      	bne.n	800e290 <_svfiprintf_r+0x130>
 800e276:	7863      	ldrb	r3, [r4, #1]
 800e278:	2b2a      	cmp	r3, #42	; 0x2a
 800e27a:	d135      	bne.n	800e2e8 <_svfiprintf_r+0x188>
 800e27c:	9b03      	ldr	r3, [sp, #12]
 800e27e:	1d1a      	adds	r2, r3, #4
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	9203      	str	r2, [sp, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	bfb8      	it	lt
 800e288:	f04f 33ff 	movlt.w	r3, #4294967295
 800e28c:	3402      	adds	r4, #2
 800e28e:	9305      	str	r3, [sp, #20]
 800e290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e35c <_svfiprintf_r+0x1fc>
 800e294:	7821      	ldrb	r1, [r4, #0]
 800e296:	2203      	movs	r2, #3
 800e298:	4650      	mov	r0, sl
 800e29a:	f7f1 ffc1 	bl	8000220 <memchr>
 800e29e:	b140      	cbz	r0, 800e2b2 <_svfiprintf_r+0x152>
 800e2a0:	2340      	movs	r3, #64	; 0x40
 800e2a2:	eba0 000a 	sub.w	r0, r0, sl
 800e2a6:	fa03 f000 	lsl.w	r0, r3, r0
 800e2aa:	9b04      	ldr	r3, [sp, #16]
 800e2ac:	4303      	orrs	r3, r0
 800e2ae:	3401      	adds	r4, #1
 800e2b0:	9304      	str	r3, [sp, #16]
 800e2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b6:	4826      	ldr	r0, [pc, #152]	; (800e350 <_svfiprintf_r+0x1f0>)
 800e2b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2bc:	2206      	movs	r2, #6
 800e2be:	f7f1 ffaf 	bl	8000220 <memchr>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d038      	beq.n	800e338 <_svfiprintf_r+0x1d8>
 800e2c6:	4b23      	ldr	r3, [pc, #140]	; (800e354 <_svfiprintf_r+0x1f4>)
 800e2c8:	bb1b      	cbnz	r3, 800e312 <_svfiprintf_r+0x1b2>
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	3307      	adds	r3, #7
 800e2ce:	f023 0307 	bic.w	r3, r3, #7
 800e2d2:	3308      	adds	r3, #8
 800e2d4:	9303      	str	r3, [sp, #12]
 800e2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d8:	4433      	add	r3, r6
 800e2da:	9309      	str	r3, [sp, #36]	; 0x24
 800e2dc:	e767      	b.n	800e1ae <_svfiprintf_r+0x4e>
 800e2de:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	e7a5      	b.n	800e234 <_svfiprintf_r+0xd4>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	3401      	adds	r4, #1
 800e2ec:	9305      	str	r3, [sp, #20]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	f04f 0c0a 	mov.w	ip, #10
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2fa:	3a30      	subs	r2, #48	; 0x30
 800e2fc:	2a09      	cmp	r2, #9
 800e2fe:	d903      	bls.n	800e308 <_svfiprintf_r+0x1a8>
 800e300:	2b00      	cmp	r3, #0
 800e302:	d0c5      	beq.n	800e290 <_svfiprintf_r+0x130>
 800e304:	9105      	str	r1, [sp, #20]
 800e306:	e7c3      	b.n	800e290 <_svfiprintf_r+0x130>
 800e308:	fb0c 2101 	mla	r1, ip, r1, r2
 800e30c:	4604      	mov	r4, r0
 800e30e:	2301      	movs	r3, #1
 800e310:	e7f0      	b.n	800e2f4 <_svfiprintf_r+0x194>
 800e312:	ab03      	add	r3, sp, #12
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	462a      	mov	r2, r5
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <_svfiprintf_r+0x1f8>)
 800e31a:	a904      	add	r1, sp, #16
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7fc f981 	bl	800a624 <_printf_float>
 800e322:	1c42      	adds	r2, r0, #1
 800e324:	4606      	mov	r6, r0
 800e326:	d1d6      	bne.n	800e2d6 <_svfiprintf_r+0x176>
 800e328:	89ab      	ldrh	r3, [r5, #12]
 800e32a:	065b      	lsls	r3, r3, #25
 800e32c:	f53f af2c 	bmi.w	800e188 <_svfiprintf_r+0x28>
 800e330:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e332:	b01d      	add	sp, #116	; 0x74
 800e334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e338:	ab03      	add	r3, sp, #12
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	462a      	mov	r2, r5
 800e33e:	4b06      	ldr	r3, [pc, #24]	; (800e358 <_svfiprintf_r+0x1f8>)
 800e340:	a904      	add	r1, sp, #16
 800e342:	4638      	mov	r0, r7
 800e344:	f7fc fc12 	bl	800ab6c <_printf_i>
 800e348:	e7eb      	b.n	800e322 <_svfiprintf_r+0x1c2>
 800e34a:	bf00      	nop
 800e34c:	08011894 	.word	0x08011894
 800e350:	0801189e 	.word	0x0801189e
 800e354:	0800a625 	.word	0x0800a625
 800e358:	0800e0a9 	.word	0x0800e0a9
 800e35c:	0801189a 	.word	0x0801189a

0800e360 <_sungetc_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	1c4b      	adds	r3, r1, #1
 800e364:	4614      	mov	r4, r2
 800e366:	d103      	bne.n	800e370 <_sungetc_r+0x10>
 800e368:	f04f 35ff 	mov.w	r5, #4294967295
 800e36c:	4628      	mov	r0, r5
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	8993      	ldrh	r3, [r2, #12]
 800e372:	f023 0320 	bic.w	r3, r3, #32
 800e376:	8193      	strh	r3, [r2, #12]
 800e378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e37a:	6852      	ldr	r2, [r2, #4]
 800e37c:	b2cd      	uxtb	r5, r1
 800e37e:	b18b      	cbz	r3, 800e3a4 <_sungetc_r+0x44>
 800e380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e382:	4293      	cmp	r3, r2
 800e384:	dd08      	ble.n	800e398 <_sungetc_r+0x38>
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	1e5a      	subs	r2, r3, #1
 800e38a:	6022      	str	r2, [r4, #0]
 800e38c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e390:	6863      	ldr	r3, [r4, #4]
 800e392:	3301      	adds	r3, #1
 800e394:	6063      	str	r3, [r4, #4]
 800e396:	e7e9      	b.n	800e36c <_sungetc_r+0xc>
 800e398:	4621      	mov	r1, r4
 800e39a:	f000 fbf1 	bl	800eb80 <__submore>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d0f1      	beq.n	800e386 <_sungetc_r+0x26>
 800e3a2:	e7e1      	b.n	800e368 <_sungetc_r+0x8>
 800e3a4:	6921      	ldr	r1, [r4, #16]
 800e3a6:	6823      	ldr	r3, [r4, #0]
 800e3a8:	b151      	cbz	r1, 800e3c0 <_sungetc_r+0x60>
 800e3aa:	4299      	cmp	r1, r3
 800e3ac:	d208      	bcs.n	800e3c0 <_sungetc_r+0x60>
 800e3ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e3b2:	42a9      	cmp	r1, r5
 800e3b4:	d104      	bne.n	800e3c0 <_sungetc_r+0x60>
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	3201      	adds	r2, #1
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	6062      	str	r2, [r4, #4]
 800e3be:	e7d5      	b.n	800e36c <_sungetc_r+0xc>
 800e3c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3c8:	6363      	str	r3, [r4, #52]	; 0x34
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	63a3      	str	r3, [r4, #56]	; 0x38
 800e3ce:	4623      	mov	r3, r4
 800e3d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e7dc      	b.n	800e394 <_sungetc_r+0x34>

0800e3da <__ssrefill_r>:
 800e3da:	b510      	push	{r4, lr}
 800e3dc:	460c      	mov	r4, r1
 800e3de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e3e0:	b169      	cbz	r1, 800e3fe <__ssrefill_r+0x24>
 800e3e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3e6:	4299      	cmp	r1, r3
 800e3e8:	d001      	beq.n	800e3ee <__ssrefill_r+0x14>
 800e3ea:	f7ff fd7d 	bl	800dee8 <_free_r>
 800e3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3f0:	6063      	str	r3, [r4, #4]
 800e3f2:	2000      	movs	r0, #0
 800e3f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e3f6:	b113      	cbz	r3, 800e3fe <__ssrefill_r+0x24>
 800e3f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3fa:	6023      	str	r3, [r4, #0]
 800e3fc:	bd10      	pop	{r4, pc}
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	2300      	movs	r3, #0
 800e404:	6063      	str	r3, [r4, #4]
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	f043 0320 	orr.w	r3, r3, #32
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	f04f 30ff 	mov.w	r0, #4294967295
 800e412:	e7f3      	b.n	800e3fc <__ssrefill_r+0x22>

0800e414 <__ssvfiscanf_r>:
 800e414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e418:	460c      	mov	r4, r1
 800e41a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e41e:	2100      	movs	r1, #0
 800e420:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e424:	49a6      	ldr	r1, [pc, #664]	; (800e6c0 <__ssvfiscanf_r+0x2ac>)
 800e426:	91a0      	str	r1, [sp, #640]	; 0x280
 800e428:	f10d 0804 	add.w	r8, sp, #4
 800e42c:	49a5      	ldr	r1, [pc, #660]	; (800e6c4 <__ssvfiscanf_r+0x2b0>)
 800e42e:	4fa6      	ldr	r7, [pc, #664]	; (800e6c8 <__ssvfiscanf_r+0x2b4>)
 800e430:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e6cc <__ssvfiscanf_r+0x2b8>
 800e434:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e438:	4606      	mov	r6, r0
 800e43a:	91a1      	str	r1, [sp, #644]	; 0x284
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	7813      	ldrb	r3, [r2, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 815a 	beq.w	800e6fa <__ssvfiscanf_r+0x2e6>
 800e446:	5dd9      	ldrb	r1, [r3, r7]
 800e448:	f011 0108 	ands.w	r1, r1, #8
 800e44c:	f102 0501 	add.w	r5, r2, #1
 800e450:	d019      	beq.n	800e486 <__ssvfiscanf_r+0x72>
 800e452:	6863      	ldr	r3, [r4, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	dd0f      	ble.n	800e478 <__ssvfiscanf_r+0x64>
 800e458:	6823      	ldr	r3, [r4, #0]
 800e45a:	781a      	ldrb	r2, [r3, #0]
 800e45c:	5cba      	ldrb	r2, [r7, r2]
 800e45e:	0712      	lsls	r2, r2, #28
 800e460:	d401      	bmi.n	800e466 <__ssvfiscanf_r+0x52>
 800e462:	462a      	mov	r2, r5
 800e464:	e7eb      	b.n	800e43e <__ssvfiscanf_r+0x2a>
 800e466:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e468:	3201      	adds	r2, #1
 800e46a:	9245      	str	r2, [sp, #276]	; 0x114
 800e46c:	6862      	ldr	r2, [r4, #4]
 800e46e:	3301      	adds	r3, #1
 800e470:	3a01      	subs	r2, #1
 800e472:	6062      	str	r2, [r4, #4]
 800e474:	6023      	str	r3, [r4, #0]
 800e476:	e7ec      	b.n	800e452 <__ssvfiscanf_r+0x3e>
 800e478:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e47a:	4621      	mov	r1, r4
 800e47c:	4630      	mov	r0, r6
 800e47e:	4798      	blx	r3
 800e480:	2800      	cmp	r0, #0
 800e482:	d0e9      	beq.n	800e458 <__ssvfiscanf_r+0x44>
 800e484:	e7ed      	b.n	800e462 <__ssvfiscanf_r+0x4e>
 800e486:	2b25      	cmp	r3, #37	; 0x25
 800e488:	d012      	beq.n	800e4b0 <__ssvfiscanf_r+0x9c>
 800e48a:	469a      	mov	sl, r3
 800e48c:	6863      	ldr	r3, [r4, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f340 8091 	ble.w	800e5b6 <__ssvfiscanf_r+0x1a2>
 800e494:	6822      	ldr	r2, [r4, #0]
 800e496:	7813      	ldrb	r3, [r2, #0]
 800e498:	4553      	cmp	r3, sl
 800e49a:	f040 812e 	bne.w	800e6fa <__ssvfiscanf_r+0x2e6>
 800e49e:	6863      	ldr	r3, [r4, #4]
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	6063      	str	r3, [r4, #4]
 800e4a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e4a6:	3201      	adds	r2, #1
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	6022      	str	r2, [r4, #0]
 800e4ac:	9345      	str	r3, [sp, #276]	; 0x114
 800e4ae:	e7d8      	b.n	800e462 <__ssvfiscanf_r+0x4e>
 800e4b0:	9141      	str	r1, [sp, #260]	; 0x104
 800e4b2:	9143      	str	r1, [sp, #268]	; 0x10c
 800e4b4:	7853      	ldrb	r3, [r2, #1]
 800e4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b8:	bf02      	ittt	eq
 800e4ba:	2310      	moveq	r3, #16
 800e4bc:	1c95      	addeq	r5, r2, #2
 800e4be:	9341      	streq	r3, [sp, #260]	; 0x104
 800e4c0:	220a      	movs	r2, #10
 800e4c2:	46aa      	mov	sl, r5
 800e4c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e4c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e4cc:	2b09      	cmp	r3, #9
 800e4ce:	d91d      	bls.n	800e50c <__ssvfiscanf_r+0xf8>
 800e4d0:	487e      	ldr	r0, [pc, #504]	; (800e6cc <__ssvfiscanf_r+0x2b8>)
 800e4d2:	2203      	movs	r2, #3
 800e4d4:	f7f1 fea4 	bl	8000220 <memchr>
 800e4d8:	b140      	cbz	r0, 800e4ec <__ssvfiscanf_r+0xd8>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	eba0 0009 	sub.w	r0, r0, r9
 800e4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800e4e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e4e6:	4318      	orrs	r0, r3
 800e4e8:	9041      	str	r0, [sp, #260]	; 0x104
 800e4ea:	4655      	mov	r5, sl
 800e4ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4f0:	2b78      	cmp	r3, #120	; 0x78
 800e4f2:	d806      	bhi.n	800e502 <__ssvfiscanf_r+0xee>
 800e4f4:	2b57      	cmp	r3, #87	; 0x57
 800e4f6:	d810      	bhi.n	800e51a <__ssvfiscanf_r+0x106>
 800e4f8:	2b25      	cmp	r3, #37	; 0x25
 800e4fa:	d0c6      	beq.n	800e48a <__ssvfiscanf_r+0x76>
 800e4fc:	d856      	bhi.n	800e5ac <__ssvfiscanf_r+0x198>
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d064      	beq.n	800e5cc <__ssvfiscanf_r+0x1b8>
 800e502:	2303      	movs	r3, #3
 800e504:	9347      	str	r3, [sp, #284]	; 0x11c
 800e506:	230a      	movs	r3, #10
 800e508:	9342      	str	r3, [sp, #264]	; 0x108
 800e50a:	e071      	b.n	800e5f0 <__ssvfiscanf_r+0x1dc>
 800e50c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e50e:	fb02 1103 	mla	r1, r2, r3, r1
 800e512:	3930      	subs	r1, #48	; 0x30
 800e514:	9143      	str	r1, [sp, #268]	; 0x10c
 800e516:	4655      	mov	r5, sl
 800e518:	e7d3      	b.n	800e4c2 <__ssvfiscanf_r+0xae>
 800e51a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e51e:	2a20      	cmp	r2, #32
 800e520:	d8ef      	bhi.n	800e502 <__ssvfiscanf_r+0xee>
 800e522:	a101      	add	r1, pc, #4	; (adr r1, 800e528 <__ssvfiscanf_r+0x114>)
 800e524:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e528:	0800e5db 	.word	0x0800e5db
 800e52c:	0800e503 	.word	0x0800e503
 800e530:	0800e503 	.word	0x0800e503
 800e534:	0800e639 	.word	0x0800e639
 800e538:	0800e503 	.word	0x0800e503
 800e53c:	0800e503 	.word	0x0800e503
 800e540:	0800e503 	.word	0x0800e503
 800e544:	0800e503 	.word	0x0800e503
 800e548:	0800e503 	.word	0x0800e503
 800e54c:	0800e503 	.word	0x0800e503
 800e550:	0800e503 	.word	0x0800e503
 800e554:	0800e64f 	.word	0x0800e64f
 800e558:	0800e625 	.word	0x0800e625
 800e55c:	0800e5b3 	.word	0x0800e5b3
 800e560:	0800e5b3 	.word	0x0800e5b3
 800e564:	0800e5b3 	.word	0x0800e5b3
 800e568:	0800e503 	.word	0x0800e503
 800e56c:	0800e629 	.word	0x0800e629
 800e570:	0800e503 	.word	0x0800e503
 800e574:	0800e503 	.word	0x0800e503
 800e578:	0800e503 	.word	0x0800e503
 800e57c:	0800e503 	.word	0x0800e503
 800e580:	0800e65f 	.word	0x0800e65f
 800e584:	0800e631 	.word	0x0800e631
 800e588:	0800e5d3 	.word	0x0800e5d3
 800e58c:	0800e503 	.word	0x0800e503
 800e590:	0800e503 	.word	0x0800e503
 800e594:	0800e65b 	.word	0x0800e65b
 800e598:	0800e503 	.word	0x0800e503
 800e59c:	0800e625 	.word	0x0800e625
 800e5a0:	0800e503 	.word	0x0800e503
 800e5a4:	0800e503 	.word	0x0800e503
 800e5a8:	0800e5db 	.word	0x0800e5db
 800e5ac:	3b45      	subs	r3, #69	; 0x45
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d8a7      	bhi.n	800e502 <__ssvfiscanf_r+0xee>
 800e5b2:	2305      	movs	r3, #5
 800e5b4:	e01b      	b.n	800e5ee <__ssvfiscanf_r+0x1da>
 800e5b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5b8:	4621      	mov	r1, r4
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	4798      	blx	r3
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f43f af68 	beq.w	800e494 <__ssvfiscanf_r+0x80>
 800e5c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f040 808d 	bne.w	800e6e6 <__ssvfiscanf_r+0x2d2>
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	e08f      	b.n	800e6f2 <__ssvfiscanf_r+0x2de>
 800e5d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e5d4:	f042 0220 	orr.w	r2, r2, #32
 800e5d8:	9241      	str	r2, [sp, #260]	; 0x104
 800e5da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e5dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5e0:	9241      	str	r2, [sp, #260]	; 0x104
 800e5e2:	2210      	movs	r2, #16
 800e5e4:	2b6f      	cmp	r3, #111	; 0x6f
 800e5e6:	9242      	str	r2, [sp, #264]	; 0x108
 800e5e8:	bf34      	ite	cc
 800e5ea:	2303      	movcc	r3, #3
 800e5ec:	2304      	movcs	r3, #4
 800e5ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800e5f0:	6863      	ldr	r3, [r4, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	dd42      	ble.n	800e67c <__ssvfiscanf_r+0x268>
 800e5f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5f8:	0659      	lsls	r1, r3, #25
 800e5fa:	d404      	bmi.n	800e606 <__ssvfiscanf_r+0x1f2>
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	781a      	ldrb	r2, [r3, #0]
 800e600:	5cba      	ldrb	r2, [r7, r2]
 800e602:	0712      	lsls	r2, r2, #28
 800e604:	d441      	bmi.n	800e68a <__ssvfiscanf_r+0x276>
 800e606:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e608:	2b02      	cmp	r3, #2
 800e60a:	dc50      	bgt.n	800e6ae <__ssvfiscanf_r+0x29a>
 800e60c:	466b      	mov	r3, sp
 800e60e:	4622      	mov	r2, r4
 800e610:	a941      	add	r1, sp, #260	; 0x104
 800e612:	4630      	mov	r0, r6
 800e614:	f000 f876 	bl	800e704 <_scanf_chars>
 800e618:	2801      	cmp	r0, #1
 800e61a:	d06e      	beq.n	800e6fa <__ssvfiscanf_r+0x2e6>
 800e61c:	2802      	cmp	r0, #2
 800e61e:	f47f af20 	bne.w	800e462 <__ssvfiscanf_r+0x4e>
 800e622:	e7cf      	b.n	800e5c4 <__ssvfiscanf_r+0x1b0>
 800e624:	220a      	movs	r2, #10
 800e626:	e7dd      	b.n	800e5e4 <__ssvfiscanf_r+0x1d0>
 800e628:	2300      	movs	r3, #0
 800e62a:	9342      	str	r3, [sp, #264]	; 0x108
 800e62c:	2303      	movs	r3, #3
 800e62e:	e7de      	b.n	800e5ee <__ssvfiscanf_r+0x1da>
 800e630:	2308      	movs	r3, #8
 800e632:	9342      	str	r3, [sp, #264]	; 0x108
 800e634:	2304      	movs	r3, #4
 800e636:	e7da      	b.n	800e5ee <__ssvfiscanf_r+0x1da>
 800e638:	4629      	mov	r1, r5
 800e63a:	4640      	mov	r0, r8
 800e63c:	f000 f9e0 	bl	800ea00 <__sccl>
 800e640:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e646:	9341      	str	r3, [sp, #260]	; 0x104
 800e648:	4605      	mov	r5, r0
 800e64a:	2301      	movs	r3, #1
 800e64c:	e7cf      	b.n	800e5ee <__ssvfiscanf_r+0x1da>
 800e64e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e654:	9341      	str	r3, [sp, #260]	; 0x104
 800e656:	2300      	movs	r3, #0
 800e658:	e7c9      	b.n	800e5ee <__ssvfiscanf_r+0x1da>
 800e65a:	2302      	movs	r3, #2
 800e65c:	e7c7      	b.n	800e5ee <__ssvfiscanf_r+0x1da>
 800e65e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e660:	06c3      	lsls	r3, r0, #27
 800e662:	f53f aefe 	bmi.w	800e462 <__ssvfiscanf_r+0x4e>
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e66a:	1d19      	adds	r1, r3, #4
 800e66c:	9100      	str	r1, [sp, #0]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f010 0f01 	tst.w	r0, #1
 800e674:	bf14      	ite	ne
 800e676:	801a      	strhne	r2, [r3, #0]
 800e678:	601a      	streq	r2, [r3, #0]
 800e67a:	e6f2      	b.n	800e462 <__ssvfiscanf_r+0x4e>
 800e67c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e67e:	4621      	mov	r1, r4
 800e680:	4630      	mov	r0, r6
 800e682:	4798      	blx	r3
 800e684:	2800      	cmp	r0, #0
 800e686:	d0b6      	beq.n	800e5f6 <__ssvfiscanf_r+0x1e2>
 800e688:	e79c      	b.n	800e5c4 <__ssvfiscanf_r+0x1b0>
 800e68a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e68c:	3201      	adds	r2, #1
 800e68e:	9245      	str	r2, [sp, #276]	; 0x114
 800e690:	6862      	ldr	r2, [r4, #4]
 800e692:	3a01      	subs	r2, #1
 800e694:	2a00      	cmp	r2, #0
 800e696:	6062      	str	r2, [r4, #4]
 800e698:	dd02      	ble.n	800e6a0 <__ssvfiscanf_r+0x28c>
 800e69a:	3301      	adds	r3, #1
 800e69c:	6023      	str	r3, [r4, #0]
 800e69e:	e7ad      	b.n	800e5fc <__ssvfiscanf_r+0x1e8>
 800e6a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	4798      	blx	r3
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d0a7      	beq.n	800e5fc <__ssvfiscanf_r+0x1e8>
 800e6ac:	e78a      	b.n	800e5c4 <__ssvfiscanf_r+0x1b0>
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	dc0e      	bgt.n	800e6d0 <__ssvfiscanf_r+0x2bc>
 800e6b2:	466b      	mov	r3, sp
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	a941      	add	r1, sp, #260	; 0x104
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f000 f87d 	bl	800e7b8 <_scanf_i>
 800e6be:	e7ab      	b.n	800e618 <__ssvfiscanf_r+0x204>
 800e6c0:	0800e361 	.word	0x0800e361
 800e6c4:	0800e3db 	.word	0x0800e3db
 800e6c8:	08011531 	.word	0x08011531
 800e6cc:	0801189a 	.word	0x0801189a
 800e6d0:	4b0b      	ldr	r3, [pc, #44]	; (800e700 <__ssvfiscanf_r+0x2ec>)
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f43f aec5 	beq.w	800e462 <__ssvfiscanf_r+0x4e>
 800e6d8:	466b      	mov	r3, sp
 800e6da:	4622      	mov	r2, r4
 800e6dc:	a941      	add	r1, sp, #260	; 0x104
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f7fc fb6a 	bl	800adb8 <_scanf_float>
 800e6e4:	e798      	b.n	800e618 <__ssvfiscanf_r+0x204>
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e6ec:	bf18      	it	ne
 800e6ee:	f04f 30ff 	movne.w	r0, #4294967295
 800e6f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e6fc:	e7f9      	b.n	800e6f2 <__ssvfiscanf_r+0x2de>
 800e6fe:	bf00      	nop
 800e700:	0800adb9 	.word	0x0800adb9

0800e704 <_scanf_chars>:
 800e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e708:	4615      	mov	r5, r2
 800e70a:	688a      	ldr	r2, [r1, #8]
 800e70c:	4680      	mov	r8, r0
 800e70e:	460c      	mov	r4, r1
 800e710:	b932      	cbnz	r2, 800e720 <_scanf_chars+0x1c>
 800e712:	698a      	ldr	r2, [r1, #24]
 800e714:	2a00      	cmp	r2, #0
 800e716:	bf0c      	ite	eq
 800e718:	2201      	moveq	r2, #1
 800e71a:	f04f 32ff 	movne.w	r2, #4294967295
 800e71e:	608a      	str	r2, [r1, #8]
 800e720:	6822      	ldr	r2, [r4, #0]
 800e722:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e7b4 <_scanf_chars+0xb0>
 800e726:	06d1      	lsls	r1, r2, #27
 800e728:	bf5f      	itttt	pl
 800e72a:	681a      	ldrpl	r2, [r3, #0]
 800e72c:	1d11      	addpl	r1, r2, #4
 800e72e:	6019      	strpl	r1, [r3, #0]
 800e730:	6816      	ldrpl	r6, [r2, #0]
 800e732:	2700      	movs	r7, #0
 800e734:	69a0      	ldr	r0, [r4, #24]
 800e736:	b188      	cbz	r0, 800e75c <_scanf_chars+0x58>
 800e738:	2801      	cmp	r0, #1
 800e73a:	d107      	bne.n	800e74c <_scanf_chars+0x48>
 800e73c:	682a      	ldr	r2, [r5, #0]
 800e73e:	7811      	ldrb	r1, [r2, #0]
 800e740:	6962      	ldr	r2, [r4, #20]
 800e742:	5c52      	ldrb	r2, [r2, r1]
 800e744:	b952      	cbnz	r2, 800e75c <_scanf_chars+0x58>
 800e746:	2f00      	cmp	r7, #0
 800e748:	d031      	beq.n	800e7ae <_scanf_chars+0xaa>
 800e74a:	e022      	b.n	800e792 <_scanf_chars+0x8e>
 800e74c:	2802      	cmp	r0, #2
 800e74e:	d120      	bne.n	800e792 <_scanf_chars+0x8e>
 800e750:	682b      	ldr	r3, [r5, #0]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e758:	071b      	lsls	r3, r3, #28
 800e75a:	d41a      	bmi.n	800e792 <_scanf_chars+0x8e>
 800e75c:	6823      	ldr	r3, [r4, #0]
 800e75e:	06da      	lsls	r2, r3, #27
 800e760:	bf5e      	ittt	pl
 800e762:	682b      	ldrpl	r3, [r5, #0]
 800e764:	781b      	ldrbpl	r3, [r3, #0]
 800e766:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e76a:	682a      	ldr	r2, [r5, #0]
 800e76c:	686b      	ldr	r3, [r5, #4]
 800e76e:	3201      	adds	r2, #1
 800e770:	602a      	str	r2, [r5, #0]
 800e772:	68a2      	ldr	r2, [r4, #8]
 800e774:	3b01      	subs	r3, #1
 800e776:	3a01      	subs	r2, #1
 800e778:	606b      	str	r3, [r5, #4]
 800e77a:	3701      	adds	r7, #1
 800e77c:	60a2      	str	r2, [r4, #8]
 800e77e:	b142      	cbz	r2, 800e792 <_scanf_chars+0x8e>
 800e780:	2b00      	cmp	r3, #0
 800e782:	dcd7      	bgt.n	800e734 <_scanf_chars+0x30>
 800e784:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e788:	4629      	mov	r1, r5
 800e78a:	4640      	mov	r0, r8
 800e78c:	4798      	blx	r3
 800e78e:	2800      	cmp	r0, #0
 800e790:	d0d0      	beq.n	800e734 <_scanf_chars+0x30>
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	f013 0310 	ands.w	r3, r3, #16
 800e798:	d105      	bne.n	800e7a6 <_scanf_chars+0xa2>
 800e79a:	68e2      	ldr	r2, [r4, #12]
 800e79c:	3201      	adds	r2, #1
 800e79e:	60e2      	str	r2, [r4, #12]
 800e7a0:	69a2      	ldr	r2, [r4, #24]
 800e7a2:	b102      	cbz	r2, 800e7a6 <_scanf_chars+0xa2>
 800e7a4:	7033      	strb	r3, [r6, #0]
 800e7a6:	6923      	ldr	r3, [r4, #16]
 800e7a8:	443b      	add	r3, r7
 800e7aa:	6123      	str	r3, [r4, #16]
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7b2:	bf00      	nop
 800e7b4:	08011531 	.word	0x08011531

0800e7b8 <_scanf_i>:
 800e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	4698      	mov	r8, r3
 800e7be:	4b76      	ldr	r3, [pc, #472]	; (800e998 <_scanf_i+0x1e0>)
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	4682      	mov	sl, r0
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	ab03      	add	r3, sp, #12
 800e7ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e7d2:	4b72      	ldr	r3, [pc, #456]	; (800e99c <_scanf_i+0x1e4>)
 800e7d4:	69a1      	ldr	r1, [r4, #24]
 800e7d6:	4a72      	ldr	r2, [pc, #456]	; (800e9a0 <_scanf_i+0x1e8>)
 800e7d8:	2903      	cmp	r1, #3
 800e7da:	bf18      	it	ne
 800e7dc:	461a      	movne	r2, r3
 800e7de:	68a3      	ldr	r3, [r4, #8]
 800e7e0:	9201      	str	r2, [sp, #4]
 800e7e2:	1e5a      	subs	r2, r3, #1
 800e7e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e7e8:	bf88      	it	hi
 800e7ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e7ee:	4627      	mov	r7, r4
 800e7f0:	bf82      	ittt	hi
 800e7f2:	eb03 0905 	addhi.w	r9, r3, r5
 800e7f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e7fa:	60a3      	strhi	r3, [r4, #8]
 800e7fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e800:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e804:	bf98      	it	ls
 800e806:	f04f 0900 	movls.w	r9, #0
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	463d      	mov	r5, r7
 800e80e:	f04f 0b00 	mov.w	fp, #0
 800e812:	6831      	ldr	r1, [r6, #0]
 800e814:	ab03      	add	r3, sp, #12
 800e816:	7809      	ldrb	r1, [r1, #0]
 800e818:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e81c:	2202      	movs	r2, #2
 800e81e:	f7f1 fcff 	bl	8000220 <memchr>
 800e822:	b328      	cbz	r0, 800e870 <_scanf_i+0xb8>
 800e824:	f1bb 0f01 	cmp.w	fp, #1
 800e828:	d159      	bne.n	800e8de <_scanf_i+0x126>
 800e82a:	6862      	ldr	r2, [r4, #4]
 800e82c:	b92a      	cbnz	r2, 800e83a <_scanf_i+0x82>
 800e82e:	6822      	ldr	r2, [r4, #0]
 800e830:	2308      	movs	r3, #8
 800e832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e836:	6063      	str	r3, [r4, #4]
 800e838:	6022      	str	r2, [r4, #0]
 800e83a:	6822      	ldr	r2, [r4, #0]
 800e83c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e840:	6022      	str	r2, [r4, #0]
 800e842:	68a2      	ldr	r2, [r4, #8]
 800e844:	1e51      	subs	r1, r2, #1
 800e846:	60a1      	str	r1, [r4, #8]
 800e848:	b192      	cbz	r2, 800e870 <_scanf_i+0xb8>
 800e84a:	6832      	ldr	r2, [r6, #0]
 800e84c:	1c51      	adds	r1, r2, #1
 800e84e:	6031      	str	r1, [r6, #0]
 800e850:	7812      	ldrb	r2, [r2, #0]
 800e852:	f805 2b01 	strb.w	r2, [r5], #1
 800e856:	6872      	ldr	r2, [r6, #4]
 800e858:	3a01      	subs	r2, #1
 800e85a:	2a00      	cmp	r2, #0
 800e85c:	6072      	str	r2, [r6, #4]
 800e85e:	dc07      	bgt.n	800e870 <_scanf_i+0xb8>
 800e860:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e864:	4631      	mov	r1, r6
 800e866:	4650      	mov	r0, sl
 800e868:	4790      	blx	r2
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f040 8085 	bne.w	800e97a <_scanf_i+0x1c2>
 800e870:	f10b 0b01 	add.w	fp, fp, #1
 800e874:	f1bb 0f03 	cmp.w	fp, #3
 800e878:	d1cb      	bne.n	800e812 <_scanf_i+0x5a>
 800e87a:	6863      	ldr	r3, [r4, #4]
 800e87c:	b90b      	cbnz	r3, 800e882 <_scanf_i+0xca>
 800e87e:	230a      	movs	r3, #10
 800e880:	6063      	str	r3, [r4, #4]
 800e882:	6863      	ldr	r3, [r4, #4]
 800e884:	4947      	ldr	r1, [pc, #284]	; (800e9a4 <_scanf_i+0x1ec>)
 800e886:	6960      	ldr	r0, [r4, #20]
 800e888:	1ac9      	subs	r1, r1, r3
 800e88a:	f000 f8b9 	bl	800ea00 <__sccl>
 800e88e:	f04f 0b00 	mov.w	fp, #0
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	6822      	ldr	r2, [r4, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d03d      	beq.n	800e916 <_scanf_i+0x15e>
 800e89a:	6831      	ldr	r1, [r6, #0]
 800e89c:	6960      	ldr	r0, [r4, #20]
 800e89e:	f891 c000 	ldrb.w	ip, [r1]
 800e8a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d035      	beq.n	800e916 <_scanf_i+0x15e>
 800e8aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e8ae:	d124      	bne.n	800e8fa <_scanf_i+0x142>
 800e8b0:	0510      	lsls	r0, r2, #20
 800e8b2:	d522      	bpl.n	800e8fa <_scanf_i+0x142>
 800e8b4:	f10b 0b01 	add.w	fp, fp, #1
 800e8b8:	f1b9 0f00 	cmp.w	r9, #0
 800e8bc:	d003      	beq.n	800e8c6 <_scanf_i+0x10e>
 800e8be:	3301      	adds	r3, #1
 800e8c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e8c4:	60a3      	str	r3, [r4, #8]
 800e8c6:	6873      	ldr	r3, [r6, #4]
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	6073      	str	r3, [r6, #4]
 800e8ce:	dd1b      	ble.n	800e908 <_scanf_i+0x150>
 800e8d0:	6833      	ldr	r3, [r6, #0]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	6033      	str	r3, [r6, #0]
 800e8d6:	68a3      	ldr	r3, [r4, #8]
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	60a3      	str	r3, [r4, #8]
 800e8dc:	e7d9      	b.n	800e892 <_scanf_i+0xda>
 800e8de:	f1bb 0f02 	cmp.w	fp, #2
 800e8e2:	d1ae      	bne.n	800e842 <_scanf_i+0x8a>
 800e8e4:	6822      	ldr	r2, [r4, #0]
 800e8e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e8ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e8ee:	d1bf      	bne.n	800e870 <_scanf_i+0xb8>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	6063      	str	r3, [r4, #4]
 800e8f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8f8:	e7a2      	b.n	800e840 <_scanf_i+0x88>
 800e8fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e8fe:	6022      	str	r2, [r4, #0]
 800e900:	780b      	ldrb	r3, [r1, #0]
 800e902:	f805 3b01 	strb.w	r3, [r5], #1
 800e906:	e7de      	b.n	800e8c6 <_scanf_i+0x10e>
 800e908:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e90c:	4631      	mov	r1, r6
 800e90e:	4650      	mov	r0, sl
 800e910:	4798      	blx	r3
 800e912:	2800      	cmp	r0, #0
 800e914:	d0df      	beq.n	800e8d6 <_scanf_i+0x11e>
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	05db      	lsls	r3, r3, #23
 800e91a:	d50d      	bpl.n	800e938 <_scanf_i+0x180>
 800e91c:	42bd      	cmp	r5, r7
 800e91e:	d909      	bls.n	800e934 <_scanf_i+0x17c>
 800e920:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e928:	4632      	mov	r2, r6
 800e92a:	4650      	mov	r0, sl
 800e92c:	4798      	blx	r3
 800e92e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e932:	464d      	mov	r5, r9
 800e934:	42bd      	cmp	r5, r7
 800e936:	d02d      	beq.n	800e994 <_scanf_i+0x1dc>
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	f012 0210 	ands.w	r2, r2, #16
 800e93e:	d113      	bne.n	800e968 <_scanf_i+0x1b0>
 800e940:	702a      	strb	r2, [r5, #0]
 800e942:	6863      	ldr	r3, [r4, #4]
 800e944:	9e01      	ldr	r6, [sp, #4]
 800e946:	4639      	mov	r1, r7
 800e948:	4650      	mov	r0, sl
 800e94a:	47b0      	blx	r6
 800e94c:	6821      	ldr	r1, [r4, #0]
 800e94e:	f8d8 3000 	ldr.w	r3, [r8]
 800e952:	f011 0f20 	tst.w	r1, #32
 800e956:	d013      	beq.n	800e980 <_scanf_i+0x1c8>
 800e958:	1d1a      	adds	r2, r3, #4
 800e95a:	f8c8 2000 	str.w	r2, [r8]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6018      	str	r0, [r3, #0]
 800e962:	68e3      	ldr	r3, [r4, #12]
 800e964:	3301      	adds	r3, #1
 800e966:	60e3      	str	r3, [r4, #12]
 800e968:	1bed      	subs	r5, r5, r7
 800e96a:	44ab      	add	fp, r5
 800e96c:	6925      	ldr	r5, [r4, #16]
 800e96e:	445d      	add	r5, fp
 800e970:	6125      	str	r5, [r4, #16]
 800e972:	2000      	movs	r0, #0
 800e974:	b007      	add	sp, #28
 800e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97a:	f04f 0b00 	mov.w	fp, #0
 800e97e:	e7ca      	b.n	800e916 <_scanf_i+0x15e>
 800e980:	1d1a      	adds	r2, r3, #4
 800e982:	f8c8 2000 	str.w	r2, [r8]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f011 0f01 	tst.w	r1, #1
 800e98c:	bf14      	ite	ne
 800e98e:	8018      	strhne	r0, [r3, #0]
 800e990:	6018      	streq	r0, [r3, #0]
 800e992:	e7e6      	b.n	800e962 <_scanf_i+0x1aa>
 800e994:	2001      	movs	r0, #1
 800e996:	e7ed      	b.n	800e974 <_scanf_i+0x1bc>
 800e998:	08011474 	.word	0x08011474
 800e99c:	0800eb7d 	.word	0x0800eb7d
 800e9a0:	0800c09d 	.word	0x0800c09d
 800e9a4:	080118be 	.word	0x080118be

0800e9a8 <_read_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d07      	ldr	r5, [pc, #28]	; (800e9c8 <_read_r+0x20>)
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	4608      	mov	r0, r1
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	602a      	str	r2, [r5, #0]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	f7f6 fbec 	bl	8005194 <_read>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d102      	bne.n	800e9c6 <_read_r+0x1e>
 800e9c0:	682b      	ldr	r3, [r5, #0]
 800e9c2:	b103      	cbz	r3, 800e9c6 <_read_r+0x1e>
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	bd38      	pop	{r3, r4, r5, pc}
 800e9c8:	20001218 	.word	0x20001218
 800e9cc:	00000000 	.word	0x00000000

0800e9d0 <nan>:
 800e9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e9d8 <nan+0x8>
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	7ff80000 	.word	0x7ff80000

0800e9e0 <_sbrk_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d06      	ldr	r5, [pc, #24]	; (800e9fc <_sbrk_r+0x1c>)
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	602b      	str	r3, [r5, #0]
 800e9ec:	f7f6 fc40 	bl	8005270 <_sbrk>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_sbrk_r+0x1a>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_sbrk_r+0x1a>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	20001218 	.word	0x20001218

0800ea00 <__sccl>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	780b      	ldrb	r3, [r1, #0]
 800ea04:	4604      	mov	r4, r0
 800ea06:	2b5e      	cmp	r3, #94	; 0x5e
 800ea08:	bf0b      	itete	eq
 800ea0a:	784b      	ldrbeq	r3, [r1, #1]
 800ea0c:	1c48      	addne	r0, r1, #1
 800ea0e:	1c88      	addeq	r0, r1, #2
 800ea10:	2200      	movne	r2, #0
 800ea12:	bf08      	it	eq
 800ea14:	2201      	moveq	r2, #1
 800ea16:	1e61      	subs	r1, r4, #1
 800ea18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ea1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ea20:	42a9      	cmp	r1, r5
 800ea22:	d1fb      	bne.n	800ea1c <__sccl+0x1c>
 800ea24:	b90b      	cbnz	r3, 800ea2a <__sccl+0x2a>
 800ea26:	3801      	subs	r0, #1
 800ea28:	bd70      	pop	{r4, r5, r6, pc}
 800ea2a:	f082 0201 	eor.w	r2, r2, #1
 800ea2e:	54e2      	strb	r2, [r4, r3]
 800ea30:	4605      	mov	r5, r0
 800ea32:	4628      	mov	r0, r5
 800ea34:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ea38:	292d      	cmp	r1, #45	; 0x2d
 800ea3a:	d006      	beq.n	800ea4a <__sccl+0x4a>
 800ea3c:	295d      	cmp	r1, #93	; 0x5d
 800ea3e:	d0f3      	beq.n	800ea28 <__sccl+0x28>
 800ea40:	b909      	cbnz	r1, 800ea46 <__sccl+0x46>
 800ea42:	4628      	mov	r0, r5
 800ea44:	e7f0      	b.n	800ea28 <__sccl+0x28>
 800ea46:	460b      	mov	r3, r1
 800ea48:	e7f1      	b.n	800ea2e <__sccl+0x2e>
 800ea4a:	786e      	ldrb	r6, [r5, #1]
 800ea4c:	2e5d      	cmp	r6, #93	; 0x5d
 800ea4e:	d0fa      	beq.n	800ea46 <__sccl+0x46>
 800ea50:	42b3      	cmp	r3, r6
 800ea52:	dcf8      	bgt.n	800ea46 <__sccl+0x46>
 800ea54:	3502      	adds	r5, #2
 800ea56:	4619      	mov	r1, r3
 800ea58:	3101      	adds	r1, #1
 800ea5a:	428e      	cmp	r6, r1
 800ea5c:	5462      	strb	r2, [r4, r1]
 800ea5e:	dcfb      	bgt.n	800ea58 <__sccl+0x58>
 800ea60:	1af1      	subs	r1, r6, r3
 800ea62:	3901      	subs	r1, #1
 800ea64:	1c58      	adds	r0, r3, #1
 800ea66:	42b3      	cmp	r3, r6
 800ea68:	bfa8      	it	ge
 800ea6a:	2100      	movge	r1, #0
 800ea6c:	1843      	adds	r3, r0, r1
 800ea6e:	e7e0      	b.n	800ea32 <__sccl+0x32>

0800ea70 <strncmp>:
 800ea70:	b510      	push	{r4, lr}
 800ea72:	b17a      	cbz	r2, 800ea94 <strncmp+0x24>
 800ea74:	4603      	mov	r3, r0
 800ea76:	3901      	subs	r1, #1
 800ea78:	1884      	adds	r4, r0, r2
 800ea7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea82:	4290      	cmp	r0, r2
 800ea84:	d101      	bne.n	800ea8a <strncmp+0x1a>
 800ea86:	42a3      	cmp	r3, r4
 800ea88:	d101      	bne.n	800ea8e <strncmp+0x1e>
 800ea8a:	1a80      	subs	r0, r0, r2
 800ea8c:	bd10      	pop	{r4, pc}
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d1f3      	bne.n	800ea7a <strncmp+0xa>
 800ea92:	e7fa      	b.n	800ea8a <strncmp+0x1a>
 800ea94:	4610      	mov	r0, r2
 800ea96:	e7f9      	b.n	800ea8c <strncmp+0x1c>

0800ea98 <_strtoul_l.constprop.0>:
 800ea98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea9c:	4f36      	ldr	r7, [pc, #216]	; (800eb78 <_strtoul_l.constprop.0+0xe0>)
 800ea9e:	4686      	mov	lr, r0
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eaa8:	5de6      	ldrb	r6, [r4, r7]
 800eaaa:	f016 0608 	ands.w	r6, r6, #8
 800eaae:	d1f8      	bne.n	800eaa2 <_strtoul_l.constprop.0+0xa>
 800eab0:	2c2d      	cmp	r4, #45	; 0x2d
 800eab2:	d12f      	bne.n	800eb14 <_strtoul_l.constprop.0+0x7c>
 800eab4:	782c      	ldrb	r4, [r5, #0]
 800eab6:	2601      	movs	r6, #1
 800eab8:	1c85      	adds	r5, r0, #2
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d057      	beq.n	800eb6e <_strtoul_l.constprop.0+0xd6>
 800eabe:	2b10      	cmp	r3, #16
 800eac0:	d109      	bne.n	800ead6 <_strtoul_l.constprop.0+0x3e>
 800eac2:	2c30      	cmp	r4, #48	; 0x30
 800eac4:	d107      	bne.n	800ead6 <_strtoul_l.constprop.0+0x3e>
 800eac6:	7828      	ldrb	r0, [r5, #0]
 800eac8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800eacc:	2858      	cmp	r0, #88	; 0x58
 800eace:	d149      	bne.n	800eb64 <_strtoul_l.constprop.0+0xcc>
 800ead0:	786c      	ldrb	r4, [r5, #1]
 800ead2:	2310      	movs	r3, #16
 800ead4:	3502      	adds	r5, #2
 800ead6:	f04f 38ff 	mov.w	r8, #4294967295
 800eada:	2700      	movs	r7, #0
 800eadc:	fbb8 f8f3 	udiv	r8, r8, r3
 800eae0:	fb03 f908 	mul.w	r9, r3, r8
 800eae4:	ea6f 0909 	mvn.w	r9, r9
 800eae8:	4638      	mov	r0, r7
 800eaea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eaee:	f1bc 0f09 	cmp.w	ip, #9
 800eaf2:	d814      	bhi.n	800eb1e <_strtoul_l.constprop.0+0x86>
 800eaf4:	4664      	mov	r4, ip
 800eaf6:	42a3      	cmp	r3, r4
 800eaf8:	dd22      	ble.n	800eb40 <_strtoul_l.constprop.0+0xa8>
 800eafa:	2f00      	cmp	r7, #0
 800eafc:	db1d      	blt.n	800eb3a <_strtoul_l.constprop.0+0xa2>
 800eafe:	4580      	cmp	r8, r0
 800eb00:	d31b      	bcc.n	800eb3a <_strtoul_l.constprop.0+0xa2>
 800eb02:	d101      	bne.n	800eb08 <_strtoul_l.constprop.0+0x70>
 800eb04:	45a1      	cmp	r9, r4
 800eb06:	db18      	blt.n	800eb3a <_strtoul_l.constprop.0+0xa2>
 800eb08:	fb00 4003 	mla	r0, r0, r3, r4
 800eb0c:	2701      	movs	r7, #1
 800eb0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb12:	e7ea      	b.n	800eaea <_strtoul_l.constprop.0+0x52>
 800eb14:	2c2b      	cmp	r4, #43	; 0x2b
 800eb16:	bf04      	itt	eq
 800eb18:	782c      	ldrbeq	r4, [r5, #0]
 800eb1a:	1c85      	addeq	r5, r0, #2
 800eb1c:	e7cd      	b.n	800eaba <_strtoul_l.constprop.0+0x22>
 800eb1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eb22:	f1bc 0f19 	cmp.w	ip, #25
 800eb26:	d801      	bhi.n	800eb2c <_strtoul_l.constprop.0+0x94>
 800eb28:	3c37      	subs	r4, #55	; 0x37
 800eb2a:	e7e4      	b.n	800eaf6 <_strtoul_l.constprop.0+0x5e>
 800eb2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eb30:	f1bc 0f19 	cmp.w	ip, #25
 800eb34:	d804      	bhi.n	800eb40 <_strtoul_l.constprop.0+0xa8>
 800eb36:	3c57      	subs	r4, #87	; 0x57
 800eb38:	e7dd      	b.n	800eaf6 <_strtoul_l.constprop.0+0x5e>
 800eb3a:	f04f 37ff 	mov.w	r7, #4294967295
 800eb3e:	e7e6      	b.n	800eb0e <_strtoul_l.constprop.0+0x76>
 800eb40:	2f00      	cmp	r7, #0
 800eb42:	da07      	bge.n	800eb54 <_strtoul_l.constprop.0+0xbc>
 800eb44:	2322      	movs	r3, #34	; 0x22
 800eb46:	f8ce 3000 	str.w	r3, [lr]
 800eb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4e:	b932      	cbnz	r2, 800eb5e <_strtoul_l.constprop.0+0xc6>
 800eb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb54:	b106      	cbz	r6, 800eb58 <_strtoul_l.constprop.0+0xc0>
 800eb56:	4240      	negs	r0, r0
 800eb58:	2a00      	cmp	r2, #0
 800eb5a:	d0f9      	beq.n	800eb50 <_strtoul_l.constprop.0+0xb8>
 800eb5c:	b107      	cbz	r7, 800eb60 <_strtoul_l.constprop.0+0xc8>
 800eb5e:	1e69      	subs	r1, r5, #1
 800eb60:	6011      	str	r1, [r2, #0]
 800eb62:	e7f5      	b.n	800eb50 <_strtoul_l.constprop.0+0xb8>
 800eb64:	2430      	movs	r4, #48	; 0x30
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1b5      	bne.n	800ead6 <_strtoul_l.constprop.0+0x3e>
 800eb6a:	2308      	movs	r3, #8
 800eb6c:	e7b3      	b.n	800ead6 <_strtoul_l.constprop.0+0x3e>
 800eb6e:	2c30      	cmp	r4, #48	; 0x30
 800eb70:	d0a9      	beq.n	800eac6 <_strtoul_l.constprop.0+0x2e>
 800eb72:	230a      	movs	r3, #10
 800eb74:	e7af      	b.n	800ead6 <_strtoul_l.constprop.0+0x3e>
 800eb76:	bf00      	nop
 800eb78:	08011531 	.word	0x08011531

0800eb7c <_strtoul_r>:
 800eb7c:	f7ff bf8c 	b.w	800ea98 <_strtoul_l.constprop.0>

0800eb80 <__submore>:
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	460c      	mov	r4, r1
 800eb86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eb88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb8c:	4299      	cmp	r1, r3
 800eb8e:	d11d      	bne.n	800ebcc <__submore+0x4c>
 800eb90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb94:	f7ff fa14 	bl	800dfc0 <_malloc_r>
 800eb98:	b918      	cbnz	r0, 800eba2 <__submore+0x22>
 800eb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eba6:	63a3      	str	r3, [r4, #56]	; 0x38
 800eba8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ebac:	6360      	str	r0, [r4, #52]	; 0x34
 800ebae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ebb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ebb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ebba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ebbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ebc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ebc6:	6020      	str	r0, [r4, #0]
 800ebc8:	2000      	movs	r0, #0
 800ebca:	e7e8      	b.n	800eb9e <__submore+0x1e>
 800ebcc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ebce:	0077      	lsls	r7, r6, #1
 800ebd0:	463a      	mov	r2, r7
 800ebd2:	f000 fa2d 	bl	800f030 <_realloc_r>
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d0de      	beq.n	800eb9a <__submore+0x1a>
 800ebdc:	eb00 0806 	add.w	r8, r0, r6
 800ebe0:	4601      	mov	r1, r0
 800ebe2:	4632      	mov	r2, r6
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	f7fe fc99 	bl	800d51c <memcpy>
 800ebea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ebee:	f8c4 8000 	str.w	r8, [r4]
 800ebf2:	e7e9      	b.n	800ebc8 <__submore+0x48>

0800ebf4 <__ascii_wctomb>:
 800ebf4:	b149      	cbz	r1, 800ec0a <__ascii_wctomb+0x16>
 800ebf6:	2aff      	cmp	r2, #255	; 0xff
 800ebf8:	bf85      	ittet	hi
 800ebfa:	238a      	movhi	r3, #138	; 0x8a
 800ebfc:	6003      	strhi	r3, [r0, #0]
 800ebfe:	700a      	strbls	r2, [r1, #0]
 800ec00:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec04:	bf98      	it	ls
 800ec06:	2001      	movls	r0, #1
 800ec08:	4770      	bx	lr
 800ec0a:	4608      	mov	r0, r1
 800ec0c:	4770      	bx	lr
	...

0800ec10 <__assert_func>:
 800ec10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec12:	4614      	mov	r4, r2
 800ec14:	461a      	mov	r2, r3
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <__assert_func+0x2c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	68d8      	ldr	r0, [r3, #12]
 800ec1e:	b14c      	cbz	r4, 800ec34 <__assert_func+0x24>
 800ec20:	4b07      	ldr	r3, [pc, #28]	; (800ec40 <__assert_func+0x30>)
 800ec22:	9100      	str	r1, [sp, #0]
 800ec24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec28:	4906      	ldr	r1, [pc, #24]	; (800ec44 <__assert_func+0x34>)
 800ec2a:	462b      	mov	r3, r5
 800ec2c:	f000 f9a6 	bl	800ef7c <fiprintf>
 800ec30:	f000 fc46 	bl	800f4c0 <abort>
 800ec34:	4b04      	ldr	r3, [pc, #16]	; (800ec48 <__assert_func+0x38>)
 800ec36:	461c      	mov	r4, r3
 800ec38:	e7f3      	b.n	800ec22 <__assert_func+0x12>
 800ec3a:	bf00      	nop
 800ec3c:	20000014 	.word	0x20000014
 800ec40:	080118c0 	.word	0x080118c0
 800ec44:	080118cd 	.word	0x080118cd
 800ec48:	080118fb 	.word	0x080118fb

0800ec4c <__sflush_r>:
 800ec4c:	898a      	ldrh	r2, [r1, #12]
 800ec4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec52:	4605      	mov	r5, r0
 800ec54:	0710      	lsls	r0, r2, #28
 800ec56:	460c      	mov	r4, r1
 800ec58:	d458      	bmi.n	800ed0c <__sflush_r+0xc0>
 800ec5a:	684b      	ldr	r3, [r1, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dc05      	bgt.n	800ec6c <__sflush_r+0x20>
 800ec60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dc02      	bgt.n	800ec6c <__sflush_r+0x20>
 800ec66:	2000      	movs	r0, #0
 800ec68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec6e:	2e00      	cmp	r6, #0
 800ec70:	d0f9      	beq.n	800ec66 <__sflush_r+0x1a>
 800ec72:	2300      	movs	r3, #0
 800ec74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec78:	682f      	ldr	r7, [r5, #0]
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	d032      	beq.n	800ece4 <__sflush_r+0x98>
 800ec7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	075a      	lsls	r2, r3, #29
 800ec84:	d505      	bpl.n	800ec92 <__sflush_r+0x46>
 800ec86:	6863      	ldr	r3, [r4, #4]
 800ec88:	1ac0      	subs	r0, r0, r3
 800ec8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec8c:	b10b      	cbz	r3, 800ec92 <__sflush_r+0x46>
 800ec8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec90:	1ac0      	subs	r0, r0, r3
 800ec92:	2300      	movs	r3, #0
 800ec94:	4602      	mov	r2, r0
 800ec96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec98:	6a21      	ldr	r1, [r4, #32]
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b0      	blx	r6
 800ec9e:	1c43      	adds	r3, r0, #1
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	d106      	bne.n	800ecb2 <__sflush_r+0x66>
 800eca4:	6829      	ldr	r1, [r5, #0]
 800eca6:	291d      	cmp	r1, #29
 800eca8:	d82c      	bhi.n	800ed04 <__sflush_r+0xb8>
 800ecaa:	4a2a      	ldr	r2, [pc, #168]	; (800ed54 <__sflush_r+0x108>)
 800ecac:	40ca      	lsrs	r2, r1
 800ecae:	07d6      	lsls	r6, r2, #31
 800ecb0:	d528      	bpl.n	800ed04 <__sflush_r+0xb8>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	6062      	str	r2, [r4, #4]
 800ecb6:	04d9      	lsls	r1, r3, #19
 800ecb8:	6922      	ldr	r2, [r4, #16]
 800ecba:	6022      	str	r2, [r4, #0]
 800ecbc:	d504      	bpl.n	800ecc8 <__sflush_r+0x7c>
 800ecbe:	1c42      	adds	r2, r0, #1
 800ecc0:	d101      	bne.n	800ecc6 <__sflush_r+0x7a>
 800ecc2:	682b      	ldr	r3, [r5, #0]
 800ecc4:	b903      	cbnz	r3, 800ecc8 <__sflush_r+0x7c>
 800ecc6:	6560      	str	r0, [r4, #84]	; 0x54
 800ecc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecca:	602f      	str	r7, [r5, #0]
 800eccc:	2900      	cmp	r1, #0
 800ecce:	d0ca      	beq.n	800ec66 <__sflush_r+0x1a>
 800ecd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	d002      	beq.n	800ecde <__sflush_r+0x92>
 800ecd8:	4628      	mov	r0, r5
 800ecda:	f7ff f905 	bl	800dee8 <_free_r>
 800ecde:	2000      	movs	r0, #0
 800ece0:	6360      	str	r0, [r4, #52]	; 0x34
 800ece2:	e7c1      	b.n	800ec68 <__sflush_r+0x1c>
 800ece4:	6a21      	ldr	r1, [r4, #32]
 800ece6:	2301      	movs	r3, #1
 800ece8:	4628      	mov	r0, r5
 800ecea:	47b0      	blx	r6
 800ecec:	1c41      	adds	r1, r0, #1
 800ecee:	d1c7      	bne.n	800ec80 <__sflush_r+0x34>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d0c4      	beq.n	800ec80 <__sflush_r+0x34>
 800ecf6:	2b1d      	cmp	r3, #29
 800ecf8:	d001      	beq.n	800ecfe <__sflush_r+0xb2>
 800ecfa:	2b16      	cmp	r3, #22
 800ecfc:	d101      	bne.n	800ed02 <__sflush_r+0xb6>
 800ecfe:	602f      	str	r7, [r5, #0]
 800ed00:	e7b1      	b.n	800ec66 <__sflush_r+0x1a>
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed08:	81a3      	strh	r3, [r4, #12]
 800ed0a:	e7ad      	b.n	800ec68 <__sflush_r+0x1c>
 800ed0c:	690f      	ldr	r7, [r1, #16]
 800ed0e:	2f00      	cmp	r7, #0
 800ed10:	d0a9      	beq.n	800ec66 <__sflush_r+0x1a>
 800ed12:	0793      	lsls	r3, r2, #30
 800ed14:	680e      	ldr	r6, [r1, #0]
 800ed16:	bf08      	it	eq
 800ed18:	694b      	ldreq	r3, [r1, #20]
 800ed1a:	600f      	str	r7, [r1, #0]
 800ed1c:	bf18      	it	ne
 800ed1e:	2300      	movne	r3, #0
 800ed20:	eba6 0807 	sub.w	r8, r6, r7
 800ed24:	608b      	str	r3, [r1, #8]
 800ed26:	f1b8 0f00 	cmp.w	r8, #0
 800ed2a:	dd9c      	ble.n	800ec66 <__sflush_r+0x1a>
 800ed2c:	6a21      	ldr	r1, [r4, #32]
 800ed2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed30:	4643      	mov	r3, r8
 800ed32:	463a      	mov	r2, r7
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b0      	blx	r6
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	dc06      	bgt.n	800ed4a <__sflush_r+0xfe>
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed42:	81a3      	strh	r3, [r4, #12]
 800ed44:	f04f 30ff 	mov.w	r0, #4294967295
 800ed48:	e78e      	b.n	800ec68 <__sflush_r+0x1c>
 800ed4a:	4407      	add	r7, r0
 800ed4c:	eba8 0800 	sub.w	r8, r8, r0
 800ed50:	e7e9      	b.n	800ed26 <__sflush_r+0xda>
 800ed52:	bf00      	nop
 800ed54:	20400001 	.word	0x20400001

0800ed58 <_fflush_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	690b      	ldr	r3, [r1, #16]
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	460c      	mov	r4, r1
 800ed60:	b913      	cbnz	r3, 800ed68 <_fflush_r+0x10>
 800ed62:	2500      	movs	r5, #0
 800ed64:	4628      	mov	r0, r5
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	b118      	cbz	r0, 800ed72 <_fflush_r+0x1a>
 800ed6a:	6983      	ldr	r3, [r0, #24]
 800ed6c:	b90b      	cbnz	r3, 800ed72 <_fflush_r+0x1a>
 800ed6e:	f000 f887 	bl	800ee80 <__sinit>
 800ed72:	4b14      	ldr	r3, [pc, #80]	; (800edc4 <_fflush_r+0x6c>)
 800ed74:	429c      	cmp	r4, r3
 800ed76:	d11b      	bne.n	800edb0 <_fflush_r+0x58>
 800ed78:	686c      	ldr	r4, [r5, #4]
 800ed7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d0ef      	beq.n	800ed62 <_fflush_r+0xa>
 800ed82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed84:	07d0      	lsls	r0, r2, #31
 800ed86:	d404      	bmi.n	800ed92 <_fflush_r+0x3a>
 800ed88:	0599      	lsls	r1, r3, #22
 800ed8a:	d402      	bmi.n	800ed92 <_fflush_r+0x3a>
 800ed8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed8e:	f000 f927 	bl	800efe0 <__retarget_lock_acquire_recursive>
 800ed92:	4628      	mov	r0, r5
 800ed94:	4621      	mov	r1, r4
 800ed96:	f7ff ff59 	bl	800ec4c <__sflush_r>
 800ed9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed9c:	07da      	lsls	r2, r3, #31
 800ed9e:	4605      	mov	r5, r0
 800eda0:	d4e0      	bmi.n	800ed64 <_fflush_r+0xc>
 800eda2:	89a3      	ldrh	r3, [r4, #12]
 800eda4:	059b      	lsls	r3, r3, #22
 800eda6:	d4dd      	bmi.n	800ed64 <_fflush_r+0xc>
 800eda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edaa:	f000 f91a 	bl	800efe2 <__retarget_lock_release_recursive>
 800edae:	e7d9      	b.n	800ed64 <_fflush_r+0xc>
 800edb0:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <_fflush_r+0x70>)
 800edb2:	429c      	cmp	r4, r3
 800edb4:	d101      	bne.n	800edba <_fflush_r+0x62>
 800edb6:	68ac      	ldr	r4, [r5, #8]
 800edb8:	e7df      	b.n	800ed7a <_fflush_r+0x22>
 800edba:	4b04      	ldr	r3, [pc, #16]	; (800edcc <_fflush_r+0x74>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	bf08      	it	eq
 800edc0:	68ec      	ldreq	r4, [r5, #12]
 800edc2:	e7da      	b.n	800ed7a <_fflush_r+0x22>
 800edc4:	0801191c 	.word	0x0801191c
 800edc8:	0801193c 	.word	0x0801193c
 800edcc:	080118fc 	.word	0x080118fc

0800edd0 <std>:
 800edd0:	2300      	movs	r3, #0
 800edd2:	b510      	push	{r4, lr}
 800edd4:	4604      	mov	r4, r0
 800edd6:	e9c0 3300 	strd	r3, r3, [r0]
 800edda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edde:	6083      	str	r3, [r0, #8]
 800ede0:	8181      	strh	r1, [r0, #12]
 800ede2:	6643      	str	r3, [r0, #100]	; 0x64
 800ede4:	81c2      	strh	r2, [r0, #14]
 800ede6:	6183      	str	r3, [r0, #24]
 800ede8:	4619      	mov	r1, r3
 800edea:	2208      	movs	r2, #8
 800edec:	305c      	adds	r0, #92	; 0x5c
 800edee:	f7fb fb71 	bl	800a4d4 <memset>
 800edf2:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <std+0x38>)
 800edf4:	6263      	str	r3, [r4, #36]	; 0x24
 800edf6:	4b05      	ldr	r3, [pc, #20]	; (800ee0c <std+0x3c>)
 800edf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <std+0x40>)
 800edfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edfe:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <std+0x44>)
 800ee00:	6224      	str	r4, [r4, #32]
 800ee02:	6323      	str	r3, [r4, #48]	; 0x30
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	bf00      	nop
 800ee08:	0800b27d 	.word	0x0800b27d
 800ee0c:	0800b2a3 	.word	0x0800b2a3
 800ee10:	0800b2db 	.word	0x0800b2db
 800ee14:	0800b2ff 	.word	0x0800b2ff

0800ee18 <_cleanup_r>:
 800ee18:	4901      	ldr	r1, [pc, #4]	; (800ee20 <_cleanup_r+0x8>)
 800ee1a:	f000 b8c1 	b.w	800efa0 <_fwalk_reent>
 800ee1e:	bf00      	nop
 800ee20:	0800ed59 	.word	0x0800ed59

0800ee24 <__sfmoreglue>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	2268      	movs	r2, #104	; 0x68
 800ee28:	1e4d      	subs	r5, r1, #1
 800ee2a:	4355      	muls	r5, r2
 800ee2c:	460e      	mov	r6, r1
 800ee2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee32:	f7ff f8c5 	bl	800dfc0 <_malloc_r>
 800ee36:	4604      	mov	r4, r0
 800ee38:	b140      	cbz	r0, 800ee4c <__sfmoreglue+0x28>
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	e9c0 1600 	strd	r1, r6, [r0]
 800ee40:	300c      	adds	r0, #12
 800ee42:	60a0      	str	r0, [r4, #8]
 800ee44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee48:	f7fb fb44 	bl	800a4d4 <memset>
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}

0800ee50 <__sfp_lock_acquire>:
 800ee50:	4801      	ldr	r0, [pc, #4]	; (800ee58 <__sfp_lock_acquire+0x8>)
 800ee52:	f000 b8c5 	b.w	800efe0 <__retarget_lock_acquire_recursive>
 800ee56:	bf00      	nop
 800ee58:	2000121d 	.word	0x2000121d

0800ee5c <__sfp_lock_release>:
 800ee5c:	4801      	ldr	r0, [pc, #4]	; (800ee64 <__sfp_lock_release+0x8>)
 800ee5e:	f000 b8c0 	b.w	800efe2 <__retarget_lock_release_recursive>
 800ee62:	bf00      	nop
 800ee64:	2000121d 	.word	0x2000121d

0800ee68 <__sinit_lock_acquire>:
 800ee68:	4801      	ldr	r0, [pc, #4]	; (800ee70 <__sinit_lock_acquire+0x8>)
 800ee6a:	f000 b8b9 	b.w	800efe0 <__retarget_lock_acquire_recursive>
 800ee6e:	bf00      	nop
 800ee70:	2000121e 	.word	0x2000121e

0800ee74 <__sinit_lock_release>:
 800ee74:	4801      	ldr	r0, [pc, #4]	; (800ee7c <__sinit_lock_release+0x8>)
 800ee76:	f000 b8b4 	b.w	800efe2 <__retarget_lock_release_recursive>
 800ee7a:	bf00      	nop
 800ee7c:	2000121e 	.word	0x2000121e

0800ee80 <__sinit>:
 800ee80:	b510      	push	{r4, lr}
 800ee82:	4604      	mov	r4, r0
 800ee84:	f7ff fff0 	bl	800ee68 <__sinit_lock_acquire>
 800ee88:	69a3      	ldr	r3, [r4, #24]
 800ee8a:	b11b      	cbz	r3, 800ee94 <__sinit+0x14>
 800ee8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee90:	f7ff bff0 	b.w	800ee74 <__sinit_lock_release>
 800ee94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee98:	6523      	str	r3, [r4, #80]	; 0x50
 800ee9a:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <__sinit+0x68>)
 800ee9c:	4a13      	ldr	r2, [pc, #76]	; (800eeec <__sinit+0x6c>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	62a2      	str	r2, [r4, #40]	; 0x28
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	bf04      	itt	eq
 800eea6:	2301      	moveq	r3, #1
 800eea8:	61a3      	streq	r3, [r4, #24]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f820 	bl	800eef0 <__sfp>
 800eeb0:	6060      	str	r0, [r4, #4]
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 f81c 	bl	800eef0 <__sfp>
 800eeb8:	60a0      	str	r0, [r4, #8]
 800eeba:	4620      	mov	r0, r4
 800eebc:	f000 f818 	bl	800eef0 <__sfp>
 800eec0:	2200      	movs	r2, #0
 800eec2:	60e0      	str	r0, [r4, #12]
 800eec4:	2104      	movs	r1, #4
 800eec6:	6860      	ldr	r0, [r4, #4]
 800eec8:	f7ff ff82 	bl	800edd0 <std>
 800eecc:	68a0      	ldr	r0, [r4, #8]
 800eece:	2201      	movs	r2, #1
 800eed0:	2109      	movs	r1, #9
 800eed2:	f7ff ff7d 	bl	800edd0 <std>
 800eed6:	68e0      	ldr	r0, [r4, #12]
 800eed8:	2202      	movs	r2, #2
 800eeda:	2112      	movs	r1, #18
 800eedc:	f7ff ff78 	bl	800edd0 <std>
 800eee0:	2301      	movs	r3, #1
 800eee2:	61a3      	str	r3, [r4, #24]
 800eee4:	e7d2      	b.n	800ee8c <__sinit+0xc>
 800eee6:	bf00      	nop
 800eee8:	080114a0 	.word	0x080114a0
 800eeec:	0800ee19 	.word	0x0800ee19

0800eef0 <__sfp>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	4607      	mov	r7, r0
 800eef4:	f7ff ffac 	bl	800ee50 <__sfp_lock_acquire>
 800eef8:	4b1e      	ldr	r3, [pc, #120]	; (800ef74 <__sfp+0x84>)
 800eefa:	681e      	ldr	r6, [r3, #0]
 800eefc:	69b3      	ldr	r3, [r6, #24]
 800eefe:	b913      	cbnz	r3, 800ef06 <__sfp+0x16>
 800ef00:	4630      	mov	r0, r6
 800ef02:	f7ff ffbd 	bl	800ee80 <__sinit>
 800ef06:	3648      	adds	r6, #72	; 0x48
 800ef08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	d503      	bpl.n	800ef18 <__sfp+0x28>
 800ef10:	6833      	ldr	r3, [r6, #0]
 800ef12:	b30b      	cbz	r3, 800ef58 <__sfp+0x68>
 800ef14:	6836      	ldr	r6, [r6, #0]
 800ef16:	e7f7      	b.n	800ef08 <__sfp+0x18>
 800ef18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef1c:	b9d5      	cbnz	r5, 800ef54 <__sfp+0x64>
 800ef1e:	4b16      	ldr	r3, [pc, #88]	; (800ef78 <__sfp+0x88>)
 800ef20:	60e3      	str	r3, [r4, #12]
 800ef22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef26:	6665      	str	r5, [r4, #100]	; 0x64
 800ef28:	f000 f859 	bl	800efde <__retarget_lock_init_recursive>
 800ef2c:	f7ff ff96 	bl	800ee5c <__sfp_lock_release>
 800ef30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef38:	6025      	str	r5, [r4, #0]
 800ef3a:	61a5      	str	r5, [r4, #24]
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	4629      	mov	r1, r5
 800ef40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef44:	f7fb fac6 	bl	800a4d4 <memset>
 800ef48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef50:	4620      	mov	r0, r4
 800ef52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef54:	3468      	adds	r4, #104	; 0x68
 800ef56:	e7d9      	b.n	800ef0c <__sfp+0x1c>
 800ef58:	2104      	movs	r1, #4
 800ef5a:	4638      	mov	r0, r7
 800ef5c:	f7ff ff62 	bl	800ee24 <__sfmoreglue>
 800ef60:	4604      	mov	r4, r0
 800ef62:	6030      	str	r0, [r6, #0]
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d1d5      	bne.n	800ef14 <__sfp+0x24>
 800ef68:	f7ff ff78 	bl	800ee5c <__sfp_lock_release>
 800ef6c:	230c      	movs	r3, #12
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	e7ee      	b.n	800ef50 <__sfp+0x60>
 800ef72:	bf00      	nop
 800ef74:	080114a0 	.word	0x080114a0
 800ef78:	ffff0001 	.word	0xffff0001

0800ef7c <fiprintf>:
 800ef7c:	b40e      	push	{r1, r2, r3}
 800ef7e:	b503      	push	{r0, r1, lr}
 800ef80:	4601      	mov	r1, r0
 800ef82:	ab03      	add	r3, sp, #12
 800ef84:	4805      	ldr	r0, [pc, #20]	; (800ef9c <fiprintf+0x20>)
 800ef86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef8a:	6800      	ldr	r0, [r0, #0]
 800ef8c:	9301      	str	r3, [sp, #4]
 800ef8e:	f000 f8a7 	bl	800f0e0 <_vfiprintf_r>
 800ef92:	b002      	add	sp, #8
 800ef94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef98:	b003      	add	sp, #12
 800ef9a:	4770      	bx	lr
 800ef9c:	20000014 	.word	0x20000014

0800efa0 <_fwalk_reent>:
 800efa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efa4:	4606      	mov	r6, r0
 800efa6:	4688      	mov	r8, r1
 800efa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efac:	2700      	movs	r7, #0
 800efae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efb2:	f1b9 0901 	subs.w	r9, r9, #1
 800efb6:	d505      	bpl.n	800efc4 <_fwalk_reent+0x24>
 800efb8:	6824      	ldr	r4, [r4, #0]
 800efba:	2c00      	cmp	r4, #0
 800efbc:	d1f7      	bne.n	800efae <_fwalk_reent+0xe>
 800efbe:	4638      	mov	r0, r7
 800efc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efc4:	89ab      	ldrh	r3, [r5, #12]
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d907      	bls.n	800efda <_fwalk_reent+0x3a>
 800efca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efce:	3301      	adds	r3, #1
 800efd0:	d003      	beq.n	800efda <_fwalk_reent+0x3a>
 800efd2:	4629      	mov	r1, r5
 800efd4:	4630      	mov	r0, r6
 800efd6:	47c0      	blx	r8
 800efd8:	4307      	orrs	r7, r0
 800efda:	3568      	adds	r5, #104	; 0x68
 800efdc:	e7e9      	b.n	800efb2 <_fwalk_reent+0x12>

0800efde <__retarget_lock_init_recursive>:
 800efde:	4770      	bx	lr

0800efe0 <__retarget_lock_acquire_recursive>:
 800efe0:	4770      	bx	lr

0800efe2 <__retarget_lock_release_recursive>:
 800efe2:	4770      	bx	lr

0800efe4 <memmove>:
 800efe4:	4288      	cmp	r0, r1
 800efe6:	b510      	push	{r4, lr}
 800efe8:	eb01 0402 	add.w	r4, r1, r2
 800efec:	d902      	bls.n	800eff4 <memmove+0x10>
 800efee:	4284      	cmp	r4, r0
 800eff0:	4623      	mov	r3, r4
 800eff2:	d807      	bhi.n	800f004 <memmove+0x20>
 800eff4:	1e43      	subs	r3, r0, #1
 800eff6:	42a1      	cmp	r1, r4
 800eff8:	d008      	beq.n	800f00c <memmove+0x28>
 800effa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800effe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f002:	e7f8      	b.n	800eff6 <memmove+0x12>
 800f004:	4402      	add	r2, r0
 800f006:	4601      	mov	r1, r0
 800f008:	428a      	cmp	r2, r1
 800f00a:	d100      	bne.n	800f00e <memmove+0x2a>
 800f00c:	bd10      	pop	{r4, pc}
 800f00e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f016:	e7f7      	b.n	800f008 <memmove+0x24>

0800f018 <__malloc_lock>:
 800f018:	4801      	ldr	r0, [pc, #4]	; (800f020 <__malloc_lock+0x8>)
 800f01a:	f7ff bfe1 	b.w	800efe0 <__retarget_lock_acquire_recursive>
 800f01e:	bf00      	nop
 800f020:	2000121c 	.word	0x2000121c

0800f024 <__malloc_unlock>:
 800f024:	4801      	ldr	r0, [pc, #4]	; (800f02c <__malloc_unlock+0x8>)
 800f026:	f7ff bfdc 	b.w	800efe2 <__retarget_lock_release_recursive>
 800f02a:	bf00      	nop
 800f02c:	2000121c 	.word	0x2000121c

0800f030 <_realloc_r>:
 800f030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f034:	4680      	mov	r8, r0
 800f036:	4614      	mov	r4, r2
 800f038:	460e      	mov	r6, r1
 800f03a:	b921      	cbnz	r1, 800f046 <_realloc_r+0x16>
 800f03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f040:	4611      	mov	r1, r2
 800f042:	f7fe bfbd 	b.w	800dfc0 <_malloc_r>
 800f046:	b92a      	cbnz	r2, 800f054 <_realloc_r+0x24>
 800f048:	f7fe ff4e 	bl	800dee8 <_free_r>
 800f04c:	4625      	mov	r5, r4
 800f04e:	4628      	mov	r0, r5
 800f050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f054:	f000 faa0 	bl	800f598 <_malloc_usable_size_r>
 800f058:	4284      	cmp	r4, r0
 800f05a:	4607      	mov	r7, r0
 800f05c:	d802      	bhi.n	800f064 <_realloc_r+0x34>
 800f05e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f062:	d812      	bhi.n	800f08a <_realloc_r+0x5a>
 800f064:	4621      	mov	r1, r4
 800f066:	4640      	mov	r0, r8
 800f068:	f7fe ffaa 	bl	800dfc0 <_malloc_r>
 800f06c:	4605      	mov	r5, r0
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0ed      	beq.n	800f04e <_realloc_r+0x1e>
 800f072:	42bc      	cmp	r4, r7
 800f074:	4622      	mov	r2, r4
 800f076:	4631      	mov	r1, r6
 800f078:	bf28      	it	cs
 800f07a:	463a      	movcs	r2, r7
 800f07c:	f7fe fa4e 	bl	800d51c <memcpy>
 800f080:	4631      	mov	r1, r6
 800f082:	4640      	mov	r0, r8
 800f084:	f7fe ff30 	bl	800dee8 <_free_r>
 800f088:	e7e1      	b.n	800f04e <_realloc_r+0x1e>
 800f08a:	4635      	mov	r5, r6
 800f08c:	e7df      	b.n	800f04e <_realloc_r+0x1e>

0800f08e <__sfputc_r>:
 800f08e:	6893      	ldr	r3, [r2, #8]
 800f090:	3b01      	subs	r3, #1
 800f092:	2b00      	cmp	r3, #0
 800f094:	b410      	push	{r4}
 800f096:	6093      	str	r3, [r2, #8]
 800f098:	da08      	bge.n	800f0ac <__sfputc_r+0x1e>
 800f09a:	6994      	ldr	r4, [r2, #24]
 800f09c:	42a3      	cmp	r3, r4
 800f09e:	db01      	blt.n	800f0a4 <__sfputc_r+0x16>
 800f0a0:	290a      	cmp	r1, #10
 800f0a2:	d103      	bne.n	800f0ac <__sfputc_r+0x1e>
 800f0a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0a8:	f000 b94a 	b.w	800f340 <__swbuf_r>
 800f0ac:	6813      	ldr	r3, [r2, #0]
 800f0ae:	1c58      	adds	r0, r3, #1
 800f0b0:	6010      	str	r0, [r2, #0]
 800f0b2:	7019      	strb	r1, [r3, #0]
 800f0b4:	4608      	mov	r0, r1
 800f0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <__sfputs_r>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	4606      	mov	r6, r0
 800f0c0:	460f      	mov	r7, r1
 800f0c2:	4614      	mov	r4, r2
 800f0c4:	18d5      	adds	r5, r2, r3
 800f0c6:	42ac      	cmp	r4, r5
 800f0c8:	d101      	bne.n	800f0ce <__sfputs_r+0x12>
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	e007      	b.n	800f0de <__sfputs_r+0x22>
 800f0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d2:	463a      	mov	r2, r7
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	f7ff ffda 	bl	800f08e <__sfputc_r>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d1f3      	bne.n	800f0c6 <__sfputs_r+0xa>
 800f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0e0 <_vfiprintf_r>:
 800f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e4:	460d      	mov	r5, r1
 800f0e6:	b09d      	sub	sp, #116	; 0x74
 800f0e8:	4614      	mov	r4, r2
 800f0ea:	4698      	mov	r8, r3
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	b118      	cbz	r0, 800f0f8 <_vfiprintf_r+0x18>
 800f0f0:	6983      	ldr	r3, [r0, #24]
 800f0f2:	b90b      	cbnz	r3, 800f0f8 <_vfiprintf_r+0x18>
 800f0f4:	f7ff fec4 	bl	800ee80 <__sinit>
 800f0f8:	4b89      	ldr	r3, [pc, #548]	; (800f320 <_vfiprintf_r+0x240>)
 800f0fa:	429d      	cmp	r5, r3
 800f0fc:	d11b      	bne.n	800f136 <_vfiprintf_r+0x56>
 800f0fe:	6875      	ldr	r5, [r6, #4]
 800f100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f102:	07d9      	lsls	r1, r3, #31
 800f104:	d405      	bmi.n	800f112 <_vfiprintf_r+0x32>
 800f106:	89ab      	ldrh	r3, [r5, #12]
 800f108:	059a      	lsls	r2, r3, #22
 800f10a:	d402      	bmi.n	800f112 <_vfiprintf_r+0x32>
 800f10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f10e:	f7ff ff67 	bl	800efe0 <__retarget_lock_acquire_recursive>
 800f112:	89ab      	ldrh	r3, [r5, #12]
 800f114:	071b      	lsls	r3, r3, #28
 800f116:	d501      	bpl.n	800f11c <_vfiprintf_r+0x3c>
 800f118:	692b      	ldr	r3, [r5, #16]
 800f11a:	b9eb      	cbnz	r3, 800f158 <_vfiprintf_r+0x78>
 800f11c:	4629      	mov	r1, r5
 800f11e:	4630      	mov	r0, r6
 800f120:	f000 f960 	bl	800f3e4 <__swsetup_r>
 800f124:	b1c0      	cbz	r0, 800f158 <_vfiprintf_r+0x78>
 800f126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f128:	07dc      	lsls	r4, r3, #31
 800f12a:	d50e      	bpl.n	800f14a <_vfiprintf_r+0x6a>
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295
 800f130:	b01d      	add	sp, #116	; 0x74
 800f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f136:	4b7b      	ldr	r3, [pc, #492]	; (800f324 <_vfiprintf_r+0x244>)
 800f138:	429d      	cmp	r5, r3
 800f13a:	d101      	bne.n	800f140 <_vfiprintf_r+0x60>
 800f13c:	68b5      	ldr	r5, [r6, #8]
 800f13e:	e7df      	b.n	800f100 <_vfiprintf_r+0x20>
 800f140:	4b79      	ldr	r3, [pc, #484]	; (800f328 <_vfiprintf_r+0x248>)
 800f142:	429d      	cmp	r5, r3
 800f144:	bf08      	it	eq
 800f146:	68f5      	ldreq	r5, [r6, #12]
 800f148:	e7da      	b.n	800f100 <_vfiprintf_r+0x20>
 800f14a:	89ab      	ldrh	r3, [r5, #12]
 800f14c:	0598      	lsls	r0, r3, #22
 800f14e:	d4ed      	bmi.n	800f12c <_vfiprintf_r+0x4c>
 800f150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f152:	f7ff ff46 	bl	800efe2 <__retarget_lock_release_recursive>
 800f156:	e7e9      	b.n	800f12c <_vfiprintf_r+0x4c>
 800f158:	2300      	movs	r3, #0
 800f15a:	9309      	str	r3, [sp, #36]	; 0x24
 800f15c:	2320      	movs	r3, #32
 800f15e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f162:	f8cd 800c 	str.w	r8, [sp, #12]
 800f166:	2330      	movs	r3, #48	; 0x30
 800f168:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f32c <_vfiprintf_r+0x24c>
 800f16c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f170:	f04f 0901 	mov.w	r9, #1
 800f174:	4623      	mov	r3, r4
 800f176:	469a      	mov	sl, r3
 800f178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f17c:	b10a      	cbz	r2, 800f182 <_vfiprintf_r+0xa2>
 800f17e:	2a25      	cmp	r2, #37	; 0x25
 800f180:	d1f9      	bne.n	800f176 <_vfiprintf_r+0x96>
 800f182:	ebba 0b04 	subs.w	fp, sl, r4
 800f186:	d00b      	beq.n	800f1a0 <_vfiprintf_r+0xc0>
 800f188:	465b      	mov	r3, fp
 800f18a:	4622      	mov	r2, r4
 800f18c:	4629      	mov	r1, r5
 800f18e:	4630      	mov	r0, r6
 800f190:	f7ff ff94 	bl	800f0bc <__sfputs_r>
 800f194:	3001      	adds	r0, #1
 800f196:	f000 80aa 	beq.w	800f2ee <_vfiprintf_r+0x20e>
 800f19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f19c:	445a      	add	r2, fp
 800f19e:	9209      	str	r2, [sp, #36]	; 0x24
 800f1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f000 80a2 	beq.w	800f2ee <_vfiprintf_r+0x20e>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1b4:	f10a 0a01 	add.w	sl, sl, #1
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	9307      	str	r3, [sp, #28]
 800f1bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f1c2:	4654      	mov	r4, sl
 800f1c4:	2205      	movs	r2, #5
 800f1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ca:	4858      	ldr	r0, [pc, #352]	; (800f32c <_vfiprintf_r+0x24c>)
 800f1cc:	f7f1 f828 	bl	8000220 <memchr>
 800f1d0:	9a04      	ldr	r2, [sp, #16]
 800f1d2:	b9d8      	cbnz	r0, 800f20c <_vfiprintf_r+0x12c>
 800f1d4:	06d1      	lsls	r1, r2, #27
 800f1d6:	bf44      	itt	mi
 800f1d8:	2320      	movmi	r3, #32
 800f1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1de:	0713      	lsls	r3, r2, #28
 800f1e0:	bf44      	itt	mi
 800f1e2:	232b      	movmi	r3, #43	; 0x2b
 800f1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f1ee:	d015      	beq.n	800f21c <_vfiprintf_r+0x13c>
 800f1f0:	9a07      	ldr	r2, [sp, #28]
 800f1f2:	4654      	mov	r4, sl
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	f04f 0c0a 	mov.w	ip, #10
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f200:	3b30      	subs	r3, #48	; 0x30
 800f202:	2b09      	cmp	r3, #9
 800f204:	d94e      	bls.n	800f2a4 <_vfiprintf_r+0x1c4>
 800f206:	b1b0      	cbz	r0, 800f236 <_vfiprintf_r+0x156>
 800f208:	9207      	str	r2, [sp, #28]
 800f20a:	e014      	b.n	800f236 <_vfiprintf_r+0x156>
 800f20c:	eba0 0308 	sub.w	r3, r0, r8
 800f210:	fa09 f303 	lsl.w	r3, r9, r3
 800f214:	4313      	orrs	r3, r2
 800f216:	9304      	str	r3, [sp, #16]
 800f218:	46a2      	mov	sl, r4
 800f21a:	e7d2      	b.n	800f1c2 <_vfiprintf_r+0xe2>
 800f21c:	9b03      	ldr	r3, [sp, #12]
 800f21e:	1d19      	adds	r1, r3, #4
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	9103      	str	r1, [sp, #12]
 800f224:	2b00      	cmp	r3, #0
 800f226:	bfbb      	ittet	lt
 800f228:	425b      	neglt	r3, r3
 800f22a:	f042 0202 	orrlt.w	r2, r2, #2
 800f22e:	9307      	strge	r3, [sp, #28]
 800f230:	9307      	strlt	r3, [sp, #28]
 800f232:	bfb8      	it	lt
 800f234:	9204      	strlt	r2, [sp, #16]
 800f236:	7823      	ldrb	r3, [r4, #0]
 800f238:	2b2e      	cmp	r3, #46	; 0x2e
 800f23a:	d10c      	bne.n	800f256 <_vfiprintf_r+0x176>
 800f23c:	7863      	ldrb	r3, [r4, #1]
 800f23e:	2b2a      	cmp	r3, #42	; 0x2a
 800f240:	d135      	bne.n	800f2ae <_vfiprintf_r+0x1ce>
 800f242:	9b03      	ldr	r3, [sp, #12]
 800f244:	1d1a      	adds	r2, r3, #4
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	9203      	str	r2, [sp, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	bfb8      	it	lt
 800f24e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f252:	3402      	adds	r4, #2
 800f254:	9305      	str	r3, [sp, #20]
 800f256:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f33c <_vfiprintf_r+0x25c>
 800f25a:	7821      	ldrb	r1, [r4, #0]
 800f25c:	2203      	movs	r2, #3
 800f25e:	4650      	mov	r0, sl
 800f260:	f7f0 ffde 	bl	8000220 <memchr>
 800f264:	b140      	cbz	r0, 800f278 <_vfiprintf_r+0x198>
 800f266:	2340      	movs	r3, #64	; 0x40
 800f268:	eba0 000a 	sub.w	r0, r0, sl
 800f26c:	fa03 f000 	lsl.w	r0, r3, r0
 800f270:	9b04      	ldr	r3, [sp, #16]
 800f272:	4303      	orrs	r3, r0
 800f274:	3401      	adds	r4, #1
 800f276:	9304      	str	r3, [sp, #16]
 800f278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27c:	482c      	ldr	r0, [pc, #176]	; (800f330 <_vfiprintf_r+0x250>)
 800f27e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f282:	2206      	movs	r2, #6
 800f284:	f7f0 ffcc 	bl	8000220 <memchr>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d03f      	beq.n	800f30c <_vfiprintf_r+0x22c>
 800f28c:	4b29      	ldr	r3, [pc, #164]	; (800f334 <_vfiprintf_r+0x254>)
 800f28e:	bb1b      	cbnz	r3, 800f2d8 <_vfiprintf_r+0x1f8>
 800f290:	9b03      	ldr	r3, [sp, #12]
 800f292:	3307      	adds	r3, #7
 800f294:	f023 0307 	bic.w	r3, r3, #7
 800f298:	3308      	adds	r3, #8
 800f29a:	9303      	str	r3, [sp, #12]
 800f29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f29e:	443b      	add	r3, r7
 800f2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a2:	e767      	b.n	800f174 <_vfiprintf_r+0x94>
 800f2a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2a8:	460c      	mov	r4, r1
 800f2aa:	2001      	movs	r0, #1
 800f2ac:	e7a5      	b.n	800f1fa <_vfiprintf_r+0x11a>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	3401      	adds	r4, #1
 800f2b2:	9305      	str	r3, [sp, #20]
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	f04f 0c0a 	mov.w	ip, #10
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2c0:	3a30      	subs	r2, #48	; 0x30
 800f2c2:	2a09      	cmp	r2, #9
 800f2c4:	d903      	bls.n	800f2ce <_vfiprintf_r+0x1ee>
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d0c5      	beq.n	800f256 <_vfiprintf_r+0x176>
 800f2ca:	9105      	str	r1, [sp, #20]
 800f2cc:	e7c3      	b.n	800f256 <_vfiprintf_r+0x176>
 800f2ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e7f0      	b.n	800f2ba <_vfiprintf_r+0x1da>
 800f2d8:	ab03      	add	r3, sp, #12
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	462a      	mov	r2, r5
 800f2de:	4b16      	ldr	r3, [pc, #88]	; (800f338 <_vfiprintf_r+0x258>)
 800f2e0:	a904      	add	r1, sp, #16
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f7fb f99e 	bl	800a624 <_printf_float>
 800f2e8:	4607      	mov	r7, r0
 800f2ea:	1c78      	adds	r0, r7, #1
 800f2ec:	d1d6      	bne.n	800f29c <_vfiprintf_r+0x1bc>
 800f2ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2f0:	07d9      	lsls	r1, r3, #31
 800f2f2:	d405      	bmi.n	800f300 <_vfiprintf_r+0x220>
 800f2f4:	89ab      	ldrh	r3, [r5, #12]
 800f2f6:	059a      	lsls	r2, r3, #22
 800f2f8:	d402      	bmi.n	800f300 <_vfiprintf_r+0x220>
 800f2fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2fc:	f7ff fe71 	bl	800efe2 <__retarget_lock_release_recursive>
 800f300:	89ab      	ldrh	r3, [r5, #12]
 800f302:	065b      	lsls	r3, r3, #25
 800f304:	f53f af12 	bmi.w	800f12c <_vfiprintf_r+0x4c>
 800f308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f30a:	e711      	b.n	800f130 <_vfiprintf_r+0x50>
 800f30c:	ab03      	add	r3, sp, #12
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	462a      	mov	r2, r5
 800f312:	4b09      	ldr	r3, [pc, #36]	; (800f338 <_vfiprintf_r+0x258>)
 800f314:	a904      	add	r1, sp, #16
 800f316:	4630      	mov	r0, r6
 800f318:	f7fb fc28 	bl	800ab6c <_printf_i>
 800f31c:	e7e4      	b.n	800f2e8 <_vfiprintf_r+0x208>
 800f31e:	bf00      	nop
 800f320:	0801191c 	.word	0x0801191c
 800f324:	0801193c 	.word	0x0801193c
 800f328:	080118fc 	.word	0x080118fc
 800f32c:	08011894 	.word	0x08011894
 800f330:	0801189e 	.word	0x0801189e
 800f334:	0800a625 	.word	0x0800a625
 800f338:	0800f0bd 	.word	0x0800f0bd
 800f33c:	0801189a 	.word	0x0801189a

0800f340 <__swbuf_r>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	460e      	mov	r6, r1
 800f344:	4614      	mov	r4, r2
 800f346:	4605      	mov	r5, r0
 800f348:	b118      	cbz	r0, 800f352 <__swbuf_r+0x12>
 800f34a:	6983      	ldr	r3, [r0, #24]
 800f34c:	b90b      	cbnz	r3, 800f352 <__swbuf_r+0x12>
 800f34e:	f7ff fd97 	bl	800ee80 <__sinit>
 800f352:	4b21      	ldr	r3, [pc, #132]	; (800f3d8 <__swbuf_r+0x98>)
 800f354:	429c      	cmp	r4, r3
 800f356:	d12b      	bne.n	800f3b0 <__swbuf_r+0x70>
 800f358:	686c      	ldr	r4, [r5, #4]
 800f35a:	69a3      	ldr	r3, [r4, #24]
 800f35c:	60a3      	str	r3, [r4, #8]
 800f35e:	89a3      	ldrh	r3, [r4, #12]
 800f360:	071a      	lsls	r2, r3, #28
 800f362:	d52f      	bpl.n	800f3c4 <__swbuf_r+0x84>
 800f364:	6923      	ldr	r3, [r4, #16]
 800f366:	b36b      	cbz	r3, 800f3c4 <__swbuf_r+0x84>
 800f368:	6923      	ldr	r3, [r4, #16]
 800f36a:	6820      	ldr	r0, [r4, #0]
 800f36c:	1ac0      	subs	r0, r0, r3
 800f36e:	6963      	ldr	r3, [r4, #20]
 800f370:	b2f6      	uxtb	r6, r6
 800f372:	4283      	cmp	r3, r0
 800f374:	4637      	mov	r7, r6
 800f376:	dc04      	bgt.n	800f382 <__swbuf_r+0x42>
 800f378:	4621      	mov	r1, r4
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7ff fcec 	bl	800ed58 <_fflush_r>
 800f380:	bb30      	cbnz	r0, 800f3d0 <__swbuf_r+0x90>
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	3b01      	subs	r3, #1
 800f386:	60a3      	str	r3, [r4, #8]
 800f388:	6823      	ldr	r3, [r4, #0]
 800f38a:	1c5a      	adds	r2, r3, #1
 800f38c:	6022      	str	r2, [r4, #0]
 800f38e:	701e      	strb	r6, [r3, #0]
 800f390:	6963      	ldr	r3, [r4, #20]
 800f392:	3001      	adds	r0, #1
 800f394:	4283      	cmp	r3, r0
 800f396:	d004      	beq.n	800f3a2 <__swbuf_r+0x62>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	07db      	lsls	r3, r3, #31
 800f39c:	d506      	bpl.n	800f3ac <__swbuf_r+0x6c>
 800f39e:	2e0a      	cmp	r6, #10
 800f3a0:	d104      	bne.n	800f3ac <__swbuf_r+0x6c>
 800f3a2:	4621      	mov	r1, r4
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f7ff fcd7 	bl	800ed58 <_fflush_r>
 800f3aa:	b988      	cbnz	r0, 800f3d0 <__swbuf_r+0x90>
 800f3ac:	4638      	mov	r0, r7
 800f3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3b0:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <__swbuf_r+0x9c>)
 800f3b2:	429c      	cmp	r4, r3
 800f3b4:	d101      	bne.n	800f3ba <__swbuf_r+0x7a>
 800f3b6:	68ac      	ldr	r4, [r5, #8]
 800f3b8:	e7cf      	b.n	800f35a <__swbuf_r+0x1a>
 800f3ba:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <__swbuf_r+0xa0>)
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	bf08      	it	eq
 800f3c0:	68ec      	ldreq	r4, [r5, #12]
 800f3c2:	e7ca      	b.n	800f35a <__swbuf_r+0x1a>
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f000 f80c 	bl	800f3e4 <__swsetup_r>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d0cb      	beq.n	800f368 <__swbuf_r+0x28>
 800f3d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f3d4:	e7ea      	b.n	800f3ac <__swbuf_r+0x6c>
 800f3d6:	bf00      	nop
 800f3d8:	0801191c 	.word	0x0801191c
 800f3dc:	0801193c 	.word	0x0801193c
 800f3e0:	080118fc 	.word	0x080118fc

0800f3e4 <__swsetup_r>:
 800f3e4:	4b32      	ldr	r3, [pc, #200]	; (800f4b0 <__swsetup_r+0xcc>)
 800f3e6:	b570      	push	{r4, r5, r6, lr}
 800f3e8:	681d      	ldr	r5, [r3, #0]
 800f3ea:	4606      	mov	r6, r0
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	b125      	cbz	r5, 800f3fa <__swsetup_r+0x16>
 800f3f0:	69ab      	ldr	r3, [r5, #24]
 800f3f2:	b913      	cbnz	r3, 800f3fa <__swsetup_r+0x16>
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	f7ff fd43 	bl	800ee80 <__sinit>
 800f3fa:	4b2e      	ldr	r3, [pc, #184]	; (800f4b4 <__swsetup_r+0xd0>)
 800f3fc:	429c      	cmp	r4, r3
 800f3fe:	d10f      	bne.n	800f420 <__swsetup_r+0x3c>
 800f400:	686c      	ldr	r4, [r5, #4]
 800f402:	89a3      	ldrh	r3, [r4, #12]
 800f404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f408:	0719      	lsls	r1, r3, #28
 800f40a:	d42c      	bmi.n	800f466 <__swsetup_r+0x82>
 800f40c:	06dd      	lsls	r5, r3, #27
 800f40e:	d411      	bmi.n	800f434 <__swsetup_r+0x50>
 800f410:	2309      	movs	r3, #9
 800f412:	6033      	str	r3, [r6, #0]
 800f414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f418:	81a3      	strh	r3, [r4, #12]
 800f41a:	f04f 30ff 	mov.w	r0, #4294967295
 800f41e:	e03e      	b.n	800f49e <__swsetup_r+0xba>
 800f420:	4b25      	ldr	r3, [pc, #148]	; (800f4b8 <__swsetup_r+0xd4>)
 800f422:	429c      	cmp	r4, r3
 800f424:	d101      	bne.n	800f42a <__swsetup_r+0x46>
 800f426:	68ac      	ldr	r4, [r5, #8]
 800f428:	e7eb      	b.n	800f402 <__swsetup_r+0x1e>
 800f42a:	4b24      	ldr	r3, [pc, #144]	; (800f4bc <__swsetup_r+0xd8>)
 800f42c:	429c      	cmp	r4, r3
 800f42e:	bf08      	it	eq
 800f430:	68ec      	ldreq	r4, [r5, #12]
 800f432:	e7e6      	b.n	800f402 <__swsetup_r+0x1e>
 800f434:	0758      	lsls	r0, r3, #29
 800f436:	d512      	bpl.n	800f45e <__swsetup_r+0x7a>
 800f438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f43a:	b141      	cbz	r1, 800f44e <__swsetup_r+0x6a>
 800f43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f440:	4299      	cmp	r1, r3
 800f442:	d002      	beq.n	800f44a <__swsetup_r+0x66>
 800f444:	4630      	mov	r0, r6
 800f446:	f7fe fd4f 	bl	800dee8 <_free_r>
 800f44a:	2300      	movs	r3, #0
 800f44c:	6363      	str	r3, [r4, #52]	; 0x34
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f454:	81a3      	strh	r3, [r4, #12]
 800f456:	2300      	movs	r3, #0
 800f458:	6063      	str	r3, [r4, #4]
 800f45a:	6923      	ldr	r3, [r4, #16]
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	89a3      	ldrh	r3, [r4, #12]
 800f460:	f043 0308 	orr.w	r3, r3, #8
 800f464:	81a3      	strh	r3, [r4, #12]
 800f466:	6923      	ldr	r3, [r4, #16]
 800f468:	b94b      	cbnz	r3, 800f47e <__swsetup_r+0x9a>
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f474:	d003      	beq.n	800f47e <__swsetup_r+0x9a>
 800f476:	4621      	mov	r1, r4
 800f478:	4630      	mov	r0, r6
 800f47a:	f000 f84d 	bl	800f518 <__smakebuf_r>
 800f47e:	89a0      	ldrh	r0, [r4, #12]
 800f480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f484:	f010 0301 	ands.w	r3, r0, #1
 800f488:	d00a      	beq.n	800f4a0 <__swsetup_r+0xbc>
 800f48a:	2300      	movs	r3, #0
 800f48c:	60a3      	str	r3, [r4, #8]
 800f48e:	6963      	ldr	r3, [r4, #20]
 800f490:	425b      	negs	r3, r3
 800f492:	61a3      	str	r3, [r4, #24]
 800f494:	6923      	ldr	r3, [r4, #16]
 800f496:	b943      	cbnz	r3, 800f4aa <__swsetup_r+0xc6>
 800f498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f49c:	d1ba      	bne.n	800f414 <__swsetup_r+0x30>
 800f49e:	bd70      	pop	{r4, r5, r6, pc}
 800f4a0:	0781      	lsls	r1, r0, #30
 800f4a2:	bf58      	it	pl
 800f4a4:	6963      	ldrpl	r3, [r4, #20]
 800f4a6:	60a3      	str	r3, [r4, #8]
 800f4a8:	e7f4      	b.n	800f494 <__swsetup_r+0xb0>
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	e7f7      	b.n	800f49e <__swsetup_r+0xba>
 800f4ae:	bf00      	nop
 800f4b0:	20000014 	.word	0x20000014
 800f4b4:	0801191c 	.word	0x0801191c
 800f4b8:	0801193c 	.word	0x0801193c
 800f4bc:	080118fc 	.word	0x080118fc

0800f4c0 <abort>:
 800f4c0:	b508      	push	{r3, lr}
 800f4c2:	2006      	movs	r0, #6
 800f4c4:	f000 f898 	bl	800f5f8 <raise>
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	f7f5 fe59 	bl	8005180 <_exit>

0800f4ce <__swhatbuf_r>:
 800f4ce:	b570      	push	{r4, r5, r6, lr}
 800f4d0:	460e      	mov	r6, r1
 800f4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d6:	2900      	cmp	r1, #0
 800f4d8:	b096      	sub	sp, #88	; 0x58
 800f4da:	4614      	mov	r4, r2
 800f4dc:	461d      	mov	r5, r3
 800f4de:	da08      	bge.n	800f4f2 <__swhatbuf_r+0x24>
 800f4e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	602a      	str	r2, [r5, #0]
 800f4e8:	061a      	lsls	r2, r3, #24
 800f4ea:	d410      	bmi.n	800f50e <__swhatbuf_r+0x40>
 800f4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f0:	e00e      	b.n	800f510 <__swhatbuf_r+0x42>
 800f4f2:	466a      	mov	r2, sp
 800f4f4:	f000 f89c 	bl	800f630 <_fstat_r>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	dbf1      	blt.n	800f4e0 <__swhatbuf_r+0x12>
 800f4fc:	9a01      	ldr	r2, [sp, #4]
 800f4fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f502:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f506:	425a      	negs	r2, r3
 800f508:	415a      	adcs	r2, r3
 800f50a:	602a      	str	r2, [r5, #0]
 800f50c:	e7ee      	b.n	800f4ec <__swhatbuf_r+0x1e>
 800f50e:	2340      	movs	r3, #64	; 0x40
 800f510:	2000      	movs	r0, #0
 800f512:	6023      	str	r3, [r4, #0]
 800f514:	b016      	add	sp, #88	; 0x58
 800f516:	bd70      	pop	{r4, r5, r6, pc}

0800f518 <__smakebuf_r>:
 800f518:	898b      	ldrh	r3, [r1, #12]
 800f51a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f51c:	079d      	lsls	r5, r3, #30
 800f51e:	4606      	mov	r6, r0
 800f520:	460c      	mov	r4, r1
 800f522:	d507      	bpl.n	800f534 <__smakebuf_r+0x1c>
 800f524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	6123      	str	r3, [r4, #16]
 800f52c:	2301      	movs	r3, #1
 800f52e:	6163      	str	r3, [r4, #20]
 800f530:	b002      	add	sp, #8
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	ab01      	add	r3, sp, #4
 800f536:	466a      	mov	r2, sp
 800f538:	f7ff ffc9 	bl	800f4ce <__swhatbuf_r>
 800f53c:	9900      	ldr	r1, [sp, #0]
 800f53e:	4605      	mov	r5, r0
 800f540:	4630      	mov	r0, r6
 800f542:	f7fe fd3d 	bl	800dfc0 <_malloc_r>
 800f546:	b948      	cbnz	r0, 800f55c <__smakebuf_r+0x44>
 800f548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f54c:	059a      	lsls	r2, r3, #22
 800f54e:	d4ef      	bmi.n	800f530 <__smakebuf_r+0x18>
 800f550:	f023 0303 	bic.w	r3, r3, #3
 800f554:	f043 0302 	orr.w	r3, r3, #2
 800f558:	81a3      	strh	r3, [r4, #12]
 800f55a:	e7e3      	b.n	800f524 <__smakebuf_r+0xc>
 800f55c:	4b0d      	ldr	r3, [pc, #52]	; (800f594 <__smakebuf_r+0x7c>)
 800f55e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	6020      	str	r0, [r4, #0]
 800f564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f568:	81a3      	strh	r3, [r4, #12]
 800f56a:	9b00      	ldr	r3, [sp, #0]
 800f56c:	6163      	str	r3, [r4, #20]
 800f56e:	9b01      	ldr	r3, [sp, #4]
 800f570:	6120      	str	r0, [r4, #16]
 800f572:	b15b      	cbz	r3, 800f58c <__smakebuf_r+0x74>
 800f574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f578:	4630      	mov	r0, r6
 800f57a:	f000 f86b 	bl	800f654 <_isatty_r>
 800f57e:	b128      	cbz	r0, 800f58c <__smakebuf_r+0x74>
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	f023 0303 	bic.w	r3, r3, #3
 800f586:	f043 0301 	orr.w	r3, r3, #1
 800f58a:	81a3      	strh	r3, [r4, #12]
 800f58c:	89a0      	ldrh	r0, [r4, #12]
 800f58e:	4305      	orrs	r5, r0
 800f590:	81a5      	strh	r5, [r4, #12]
 800f592:	e7cd      	b.n	800f530 <__smakebuf_r+0x18>
 800f594:	0800ee19 	.word	0x0800ee19

0800f598 <_malloc_usable_size_r>:
 800f598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f59c:	1f18      	subs	r0, r3, #4
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	bfbc      	itt	lt
 800f5a2:	580b      	ldrlt	r3, [r1, r0]
 800f5a4:	18c0      	addlt	r0, r0, r3
 800f5a6:	4770      	bx	lr

0800f5a8 <_raise_r>:
 800f5a8:	291f      	cmp	r1, #31
 800f5aa:	b538      	push	{r3, r4, r5, lr}
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	460d      	mov	r5, r1
 800f5b0:	d904      	bls.n	800f5bc <_raise_r+0x14>
 800f5b2:	2316      	movs	r3, #22
 800f5b4:	6003      	str	r3, [r0, #0]
 800f5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f5be:	b112      	cbz	r2, 800f5c6 <_raise_r+0x1e>
 800f5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5c4:	b94b      	cbnz	r3, 800f5da <_raise_r+0x32>
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f000 f830 	bl	800f62c <_getpid_r>
 800f5cc:	462a      	mov	r2, r5
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5d6:	f000 b817 	b.w	800f608 <_kill_r>
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d00a      	beq.n	800f5f4 <_raise_r+0x4c>
 800f5de:	1c59      	adds	r1, r3, #1
 800f5e0:	d103      	bne.n	800f5ea <_raise_r+0x42>
 800f5e2:	2316      	movs	r3, #22
 800f5e4:	6003      	str	r3, [r0, #0]
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	e7e7      	b.n	800f5ba <_raise_r+0x12>
 800f5ea:	2400      	movs	r4, #0
 800f5ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	4798      	blx	r3
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	e7e0      	b.n	800f5ba <_raise_r+0x12>

0800f5f8 <raise>:
 800f5f8:	4b02      	ldr	r3, [pc, #8]	; (800f604 <raise+0xc>)
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	6818      	ldr	r0, [r3, #0]
 800f5fe:	f7ff bfd3 	b.w	800f5a8 <_raise_r>
 800f602:	bf00      	nop
 800f604:	20000014 	.word	0x20000014

0800f608 <_kill_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d07      	ldr	r5, [pc, #28]	; (800f628 <_kill_r+0x20>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	4611      	mov	r1, r2
 800f614:	602b      	str	r3, [r5, #0]
 800f616:	f7f5 fda3 	bl	8005160 <_kill>
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	d102      	bne.n	800f624 <_kill_r+0x1c>
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	b103      	cbz	r3, 800f624 <_kill_r+0x1c>
 800f622:	6023      	str	r3, [r4, #0]
 800f624:	bd38      	pop	{r3, r4, r5, pc}
 800f626:	bf00      	nop
 800f628:	20001218 	.word	0x20001218

0800f62c <_getpid_r>:
 800f62c:	f7f5 bd90 	b.w	8005150 <_getpid>

0800f630 <_fstat_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4d07      	ldr	r5, [pc, #28]	; (800f650 <_fstat_r+0x20>)
 800f634:	2300      	movs	r3, #0
 800f636:	4604      	mov	r4, r0
 800f638:	4608      	mov	r0, r1
 800f63a:	4611      	mov	r1, r2
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	f7f5 fdee 	bl	800521e <_fstat>
 800f642:	1c43      	adds	r3, r0, #1
 800f644:	d102      	bne.n	800f64c <_fstat_r+0x1c>
 800f646:	682b      	ldr	r3, [r5, #0]
 800f648:	b103      	cbz	r3, 800f64c <_fstat_r+0x1c>
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	bd38      	pop	{r3, r4, r5, pc}
 800f64e:	bf00      	nop
 800f650:	20001218 	.word	0x20001218

0800f654 <_isatty_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	4d06      	ldr	r5, [pc, #24]	; (800f670 <_isatty_r+0x1c>)
 800f658:	2300      	movs	r3, #0
 800f65a:	4604      	mov	r4, r0
 800f65c:	4608      	mov	r0, r1
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	f7f5 fded 	bl	800523e <_isatty>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d102      	bne.n	800f66e <_isatty_r+0x1a>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	b103      	cbz	r3, 800f66e <_isatty_r+0x1a>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	20001218 	.word	0x20001218

0800f674 <acos>:
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	ed2d 8b02 	vpush	{d8}
 800f67a:	ec55 4b10 	vmov	r4, r5, d0
 800f67e:	f000 f91f 	bl	800f8c0 <__ieee754_acos>
 800f682:	4622      	mov	r2, r4
 800f684:	462b      	mov	r3, r5
 800f686:	4620      	mov	r0, r4
 800f688:	4629      	mov	r1, r5
 800f68a:	eeb0 8a40 	vmov.f32	s16, s0
 800f68e:	eef0 8a60 	vmov.f32	s17, s1
 800f692:	f7f1 fa6b 	bl	8000b6c <__aeabi_dcmpun>
 800f696:	b9a8      	cbnz	r0, 800f6c4 <acos+0x50>
 800f698:	ec45 4b10 	vmov	d0, r4, r5
 800f69c:	f001 fe04 	bl	80112a8 <fabs>
 800f6a0:	4b0c      	ldr	r3, [pc, #48]	; (800f6d4 <acos+0x60>)
 800f6a2:	ec51 0b10 	vmov	r0, r1, d0
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f7f1 fa56 	bl	8000b58 <__aeabi_dcmpgt>
 800f6ac:	b150      	cbz	r0, 800f6c4 <acos+0x50>
 800f6ae:	f7fa fee7 	bl	800a480 <__errno>
 800f6b2:	ecbd 8b02 	vpop	{d8}
 800f6b6:	2321      	movs	r3, #33	; 0x21
 800f6b8:	6003      	str	r3, [r0, #0]
 800f6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6be:	4806      	ldr	r0, [pc, #24]	; (800f6d8 <acos+0x64>)
 800f6c0:	f7ff b986 	b.w	800e9d0 <nan>
 800f6c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f6c8:	eef0 0a68 	vmov.f32	s1, s17
 800f6cc:	ecbd 8b02 	vpop	{d8}
 800f6d0:	bd38      	pop	{r3, r4, r5, pc}
 800f6d2:	bf00      	nop
 800f6d4:	3ff00000 	.word	0x3ff00000
 800f6d8:	080118fb 	.word	0x080118fb

0800f6dc <asin>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	ed2d 8b02 	vpush	{d8}
 800f6e2:	ec55 4b10 	vmov	r4, r5, d0
 800f6e6:	f000 fb4b 	bl	800fd80 <__ieee754_asin>
 800f6ea:	4622      	mov	r2, r4
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	eeb0 8a40 	vmov.f32	s16, s0
 800f6f6:	eef0 8a60 	vmov.f32	s17, s1
 800f6fa:	f7f1 fa37 	bl	8000b6c <__aeabi_dcmpun>
 800f6fe:	b9a8      	cbnz	r0, 800f72c <asin+0x50>
 800f700:	ec45 4b10 	vmov	d0, r4, r5
 800f704:	f001 fdd0 	bl	80112a8 <fabs>
 800f708:	4b0c      	ldr	r3, [pc, #48]	; (800f73c <asin+0x60>)
 800f70a:	ec51 0b10 	vmov	r0, r1, d0
 800f70e:	2200      	movs	r2, #0
 800f710:	f7f1 fa22 	bl	8000b58 <__aeabi_dcmpgt>
 800f714:	b150      	cbz	r0, 800f72c <asin+0x50>
 800f716:	f7fa feb3 	bl	800a480 <__errno>
 800f71a:	ecbd 8b02 	vpop	{d8}
 800f71e:	2321      	movs	r3, #33	; 0x21
 800f720:	6003      	str	r3, [r0, #0]
 800f722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f726:	4806      	ldr	r0, [pc, #24]	; (800f740 <asin+0x64>)
 800f728:	f7ff b952 	b.w	800e9d0 <nan>
 800f72c:	eeb0 0a48 	vmov.f32	s0, s16
 800f730:	eef0 0a68 	vmov.f32	s1, s17
 800f734:	ecbd 8b02 	vpop	{d8}
 800f738:	bd38      	pop	{r3, r4, r5, pc}
 800f73a:	bf00      	nop
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	080118fb 	.word	0x080118fb

0800f744 <atan2>:
 800f744:	f000 bd30 	b.w	80101a8 <__ieee754_atan2>

0800f748 <pow>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	ed2d 8b02 	vpush	{d8}
 800f74e:	eeb0 8a40 	vmov.f32	s16, s0
 800f752:	eef0 8a60 	vmov.f32	s17, s1
 800f756:	ec55 4b11 	vmov	r4, r5, d1
 800f75a:	f000 fdf1 	bl	8010340 <__ieee754_pow>
 800f75e:	4622      	mov	r2, r4
 800f760:	462b      	mov	r3, r5
 800f762:	4620      	mov	r0, r4
 800f764:	4629      	mov	r1, r5
 800f766:	ec57 6b10 	vmov	r6, r7, d0
 800f76a:	f7f1 f9ff 	bl	8000b6c <__aeabi_dcmpun>
 800f76e:	2800      	cmp	r0, #0
 800f770:	d13b      	bne.n	800f7ea <pow+0xa2>
 800f772:	ec51 0b18 	vmov	r0, r1, d8
 800f776:	2200      	movs	r2, #0
 800f778:	2300      	movs	r3, #0
 800f77a:	f7f1 f9c5 	bl	8000b08 <__aeabi_dcmpeq>
 800f77e:	b1b8      	cbz	r0, 800f7b0 <pow+0x68>
 800f780:	2200      	movs	r2, #0
 800f782:	2300      	movs	r3, #0
 800f784:	4620      	mov	r0, r4
 800f786:	4629      	mov	r1, r5
 800f788:	f7f1 f9be 	bl	8000b08 <__aeabi_dcmpeq>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d146      	bne.n	800f81e <pow+0xd6>
 800f790:	ec45 4b10 	vmov	d0, r4, r5
 800f794:	f001 fd91 	bl	80112ba <finite>
 800f798:	b338      	cbz	r0, 800f7ea <pow+0xa2>
 800f79a:	2200      	movs	r2, #0
 800f79c:	2300      	movs	r3, #0
 800f79e:	4620      	mov	r0, r4
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	f7f1 f9bb 	bl	8000b1c <__aeabi_dcmplt>
 800f7a6:	b300      	cbz	r0, 800f7ea <pow+0xa2>
 800f7a8:	f7fa fe6a 	bl	800a480 <__errno>
 800f7ac:	2322      	movs	r3, #34	; 0x22
 800f7ae:	e01b      	b.n	800f7e8 <pow+0xa0>
 800f7b0:	ec47 6b10 	vmov	d0, r6, r7
 800f7b4:	f001 fd81 	bl	80112ba <finite>
 800f7b8:	b9e0      	cbnz	r0, 800f7f4 <pow+0xac>
 800f7ba:	eeb0 0a48 	vmov.f32	s0, s16
 800f7be:	eef0 0a68 	vmov.f32	s1, s17
 800f7c2:	f001 fd7a 	bl	80112ba <finite>
 800f7c6:	b1a8      	cbz	r0, 800f7f4 <pow+0xac>
 800f7c8:	ec45 4b10 	vmov	d0, r4, r5
 800f7cc:	f001 fd75 	bl	80112ba <finite>
 800f7d0:	b180      	cbz	r0, 800f7f4 <pow+0xac>
 800f7d2:	4632      	mov	r2, r6
 800f7d4:	463b      	mov	r3, r7
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	4639      	mov	r1, r7
 800f7da:	f7f1 f9c7 	bl	8000b6c <__aeabi_dcmpun>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0e2      	beq.n	800f7a8 <pow+0x60>
 800f7e2:	f7fa fe4d 	bl	800a480 <__errno>
 800f7e6:	2321      	movs	r3, #33	; 0x21
 800f7e8:	6003      	str	r3, [r0, #0]
 800f7ea:	ecbd 8b02 	vpop	{d8}
 800f7ee:	ec47 6b10 	vmov	d0, r6, r7
 800f7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	f7f1 f984 	bl	8000b08 <__aeabi_dcmpeq>
 800f800:	2800      	cmp	r0, #0
 800f802:	d0f2      	beq.n	800f7ea <pow+0xa2>
 800f804:	eeb0 0a48 	vmov.f32	s0, s16
 800f808:	eef0 0a68 	vmov.f32	s1, s17
 800f80c:	f001 fd55 	bl	80112ba <finite>
 800f810:	2800      	cmp	r0, #0
 800f812:	d0ea      	beq.n	800f7ea <pow+0xa2>
 800f814:	ec45 4b10 	vmov	d0, r4, r5
 800f818:	f001 fd4f 	bl	80112ba <finite>
 800f81c:	e7c3      	b.n	800f7a6 <pow+0x5e>
 800f81e:	4f01      	ldr	r7, [pc, #4]	; (800f824 <pow+0xdc>)
 800f820:	2600      	movs	r6, #0
 800f822:	e7e2      	b.n	800f7ea <pow+0xa2>
 800f824:	3ff00000 	.word	0x3ff00000

0800f828 <sqrt>:
 800f828:	b538      	push	{r3, r4, r5, lr}
 800f82a:	ed2d 8b02 	vpush	{d8}
 800f82e:	ec55 4b10 	vmov	r4, r5, d0
 800f832:	f001 fab3 	bl	8010d9c <__ieee754_sqrt>
 800f836:	4622      	mov	r2, r4
 800f838:	462b      	mov	r3, r5
 800f83a:	4620      	mov	r0, r4
 800f83c:	4629      	mov	r1, r5
 800f83e:	eeb0 8a40 	vmov.f32	s16, s0
 800f842:	eef0 8a60 	vmov.f32	s17, s1
 800f846:	f7f1 f991 	bl	8000b6c <__aeabi_dcmpun>
 800f84a:	b990      	cbnz	r0, 800f872 <sqrt+0x4a>
 800f84c:	2200      	movs	r2, #0
 800f84e:	2300      	movs	r3, #0
 800f850:	4620      	mov	r0, r4
 800f852:	4629      	mov	r1, r5
 800f854:	f7f1 f962 	bl	8000b1c <__aeabi_dcmplt>
 800f858:	b158      	cbz	r0, 800f872 <sqrt+0x4a>
 800f85a:	f7fa fe11 	bl	800a480 <__errno>
 800f85e:	2321      	movs	r3, #33	; 0x21
 800f860:	6003      	str	r3, [r0, #0]
 800f862:	2200      	movs	r2, #0
 800f864:	2300      	movs	r3, #0
 800f866:	4610      	mov	r0, r2
 800f868:	4619      	mov	r1, r3
 800f86a:	f7f1 f80f 	bl	800088c <__aeabi_ddiv>
 800f86e:	ec41 0b18 	vmov	d8, r0, r1
 800f872:	eeb0 0a48 	vmov.f32	s0, s16
 800f876:	eef0 0a68 	vmov.f32	s1, s17
 800f87a:	ecbd 8b02 	vpop	{d8}
 800f87e:	bd38      	pop	{r3, r4, r5, pc}

0800f880 <sqrtf>:
 800f880:	b508      	push	{r3, lr}
 800f882:	ed2d 8b02 	vpush	{d8}
 800f886:	eeb0 8a40 	vmov.f32	s16, s0
 800f88a:	f001 fb39 	bl	8010f00 <__ieee754_sqrtf>
 800f88e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f896:	d60c      	bvs.n	800f8b2 <sqrtf+0x32>
 800f898:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f8b8 <sqrtf+0x38>
 800f89c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a4:	d505      	bpl.n	800f8b2 <sqrtf+0x32>
 800f8a6:	f7fa fdeb 	bl	800a480 <__errno>
 800f8aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f8ae:	2321      	movs	r3, #33	; 0x21
 800f8b0:	6003      	str	r3, [r0, #0]
 800f8b2:	ecbd 8b02 	vpop	{d8}
 800f8b6:	bd08      	pop	{r3, pc}
	...

0800f8c0 <__ieee754_acos>:
 800f8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	ec55 4b10 	vmov	r4, r5, d0
 800f8c8:	49b7      	ldr	r1, [pc, #732]	; (800fba8 <__ieee754_acos+0x2e8>)
 800f8ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8ce:	428b      	cmp	r3, r1
 800f8d0:	dd1b      	ble.n	800f90a <__ieee754_acos+0x4a>
 800f8d2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800f8d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f8da:	4323      	orrs	r3, r4
 800f8dc:	d106      	bne.n	800f8ec <__ieee754_acos+0x2c>
 800f8de:	2d00      	cmp	r5, #0
 800f8e0:	f300 8211 	bgt.w	800fd06 <__ieee754_acos+0x446>
 800f8e4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800fb40 <__ieee754_acos+0x280>
 800f8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ec:	ee10 2a10 	vmov	r2, s0
 800f8f0:	462b      	mov	r3, r5
 800f8f2:	ee10 0a10 	vmov	r0, s0
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	f7f0 fce6 	bl	80002c8 <__aeabi_dsub>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	460b      	mov	r3, r1
 800f900:	f7f0 ffc4 	bl	800088c <__aeabi_ddiv>
 800f904:	ec41 0b10 	vmov	d0, r0, r1
 800f908:	e7ee      	b.n	800f8e8 <__ieee754_acos+0x28>
 800f90a:	49a8      	ldr	r1, [pc, #672]	; (800fbac <__ieee754_acos+0x2ec>)
 800f90c:	428b      	cmp	r3, r1
 800f90e:	f300 8087 	bgt.w	800fa20 <__ieee754_acos+0x160>
 800f912:	4aa7      	ldr	r2, [pc, #668]	; (800fbb0 <__ieee754_acos+0x2f0>)
 800f914:	4293      	cmp	r3, r2
 800f916:	f340 81f9 	ble.w	800fd0c <__ieee754_acos+0x44c>
 800f91a:	ee10 2a10 	vmov	r2, s0
 800f91e:	ee10 0a10 	vmov	r0, s0
 800f922:	462b      	mov	r3, r5
 800f924:	4629      	mov	r1, r5
 800f926:	f7f0 fe87 	bl	8000638 <__aeabi_dmul>
 800f92a:	a387      	add	r3, pc, #540	; (adr r3, 800fb48 <__ieee754_acos+0x288>)
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	4606      	mov	r6, r0
 800f932:	460f      	mov	r7, r1
 800f934:	f7f0 fe80 	bl	8000638 <__aeabi_dmul>
 800f938:	a385      	add	r3, pc, #532	; (adr r3, 800fb50 <__ieee754_acos+0x290>)
 800f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93e:	f7f0 fcc5 	bl	80002cc <__adddf3>
 800f942:	4632      	mov	r2, r6
 800f944:	463b      	mov	r3, r7
 800f946:	f7f0 fe77 	bl	8000638 <__aeabi_dmul>
 800f94a:	a383      	add	r3, pc, #524	; (adr r3, 800fb58 <__ieee754_acos+0x298>)
 800f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f950:	f7f0 fcba 	bl	80002c8 <__aeabi_dsub>
 800f954:	4632      	mov	r2, r6
 800f956:	463b      	mov	r3, r7
 800f958:	f7f0 fe6e 	bl	8000638 <__aeabi_dmul>
 800f95c:	a380      	add	r3, pc, #512	; (adr r3, 800fb60 <__ieee754_acos+0x2a0>)
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	f7f0 fcb3 	bl	80002cc <__adddf3>
 800f966:	4632      	mov	r2, r6
 800f968:	463b      	mov	r3, r7
 800f96a:	f7f0 fe65 	bl	8000638 <__aeabi_dmul>
 800f96e:	a37e      	add	r3, pc, #504	; (adr r3, 800fb68 <__ieee754_acos+0x2a8>)
 800f970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f974:	f7f0 fca8 	bl	80002c8 <__aeabi_dsub>
 800f978:	4632      	mov	r2, r6
 800f97a:	463b      	mov	r3, r7
 800f97c:	f7f0 fe5c 	bl	8000638 <__aeabi_dmul>
 800f980:	a37b      	add	r3, pc, #492	; (adr r3, 800fb70 <__ieee754_acos+0x2b0>)
 800f982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f986:	f7f0 fca1 	bl	80002cc <__adddf3>
 800f98a:	4632      	mov	r2, r6
 800f98c:	463b      	mov	r3, r7
 800f98e:	f7f0 fe53 	bl	8000638 <__aeabi_dmul>
 800f992:	a379      	add	r3, pc, #484	; (adr r3, 800fb78 <__ieee754_acos+0x2b8>)
 800f994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f998:	4680      	mov	r8, r0
 800f99a:	4689      	mov	r9, r1
 800f99c:	4630      	mov	r0, r6
 800f99e:	4639      	mov	r1, r7
 800f9a0:	f7f0 fe4a 	bl	8000638 <__aeabi_dmul>
 800f9a4:	a376      	add	r3, pc, #472	; (adr r3, 800fb80 <__ieee754_acos+0x2c0>)
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	f7f0 fc8d 	bl	80002c8 <__aeabi_dsub>
 800f9ae:	4632      	mov	r2, r6
 800f9b0:	463b      	mov	r3, r7
 800f9b2:	f7f0 fe41 	bl	8000638 <__aeabi_dmul>
 800f9b6:	a374      	add	r3, pc, #464	; (adr r3, 800fb88 <__ieee754_acos+0x2c8>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fc86 	bl	80002cc <__adddf3>
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	463b      	mov	r3, r7
 800f9c4:	f7f0 fe38 	bl	8000638 <__aeabi_dmul>
 800f9c8:	a371      	add	r3, pc, #452	; (adr r3, 800fb90 <__ieee754_acos+0x2d0>)
 800f9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ce:	f7f0 fc7b 	bl	80002c8 <__aeabi_dsub>
 800f9d2:	4632      	mov	r2, r6
 800f9d4:	463b      	mov	r3, r7
 800f9d6:	f7f0 fe2f 	bl	8000638 <__aeabi_dmul>
 800f9da:	4b76      	ldr	r3, [pc, #472]	; (800fbb4 <__ieee754_acos+0x2f4>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f7f0 fc75 	bl	80002cc <__adddf3>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4640      	mov	r0, r8
 800f9e8:	4649      	mov	r1, r9
 800f9ea:	f7f0 ff4f 	bl	800088c <__aeabi_ddiv>
 800f9ee:	4622      	mov	r2, r4
 800f9f0:	462b      	mov	r3, r5
 800f9f2:	f7f0 fe21 	bl	8000638 <__aeabi_dmul>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	a167      	add	r1, pc, #412	; (adr r1, 800fb98 <__ieee754_acos+0x2d8>)
 800f9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa00:	f7f0 fc62 	bl	80002c8 <__aeabi_dsub>
 800fa04:	4602      	mov	r2, r0
 800fa06:	460b      	mov	r3, r1
 800fa08:	4620      	mov	r0, r4
 800fa0a:	4629      	mov	r1, r5
 800fa0c:	f7f0 fc5c 	bl	80002c8 <__aeabi_dsub>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	a162      	add	r1, pc, #392	; (adr r1, 800fba0 <__ieee754_acos+0x2e0>)
 800fa16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa1a:	f7f0 fc55 	bl	80002c8 <__aeabi_dsub>
 800fa1e:	e771      	b.n	800f904 <__ieee754_acos+0x44>
 800fa20:	2d00      	cmp	r5, #0
 800fa22:	f280 80cb 	bge.w	800fbbc <__ieee754_acos+0x2fc>
 800fa26:	ee10 0a10 	vmov	r0, s0
 800fa2a:	4b62      	ldr	r3, [pc, #392]	; (800fbb4 <__ieee754_acos+0x2f4>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	4629      	mov	r1, r5
 800fa30:	f7f0 fc4c 	bl	80002cc <__adddf3>
 800fa34:	4b60      	ldr	r3, [pc, #384]	; (800fbb8 <__ieee754_acos+0x2f8>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	f7f0 fdfe 	bl	8000638 <__aeabi_dmul>
 800fa3c:	a342      	add	r3, pc, #264	; (adr r3, 800fb48 <__ieee754_acos+0x288>)
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	4604      	mov	r4, r0
 800fa44:	460d      	mov	r5, r1
 800fa46:	f7f0 fdf7 	bl	8000638 <__aeabi_dmul>
 800fa4a:	a341      	add	r3, pc, #260	; (adr r3, 800fb50 <__ieee754_acos+0x290>)
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	f7f0 fc3c 	bl	80002cc <__adddf3>
 800fa54:	4622      	mov	r2, r4
 800fa56:	462b      	mov	r3, r5
 800fa58:	f7f0 fdee 	bl	8000638 <__aeabi_dmul>
 800fa5c:	a33e      	add	r3, pc, #248	; (adr r3, 800fb58 <__ieee754_acos+0x298>)
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	f7f0 fc31 	bl	80002c8 <__aeabi_dsub>
 800fa66:	4622      	mov	r2, r4
 800fa68:	462b      	mov	r3, r5
 800fa6a:	f7f0 fde5 	bl	8000638 <__aeabi_dmul>
 800fa6e:	a33c      	add	r3, pc, #240	; (adr r3, 800fb60 <__ieee754_acos+0x2a0>)
 800fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa74:	f7f0 fc2a 	bl	80002cc <__adddf3>
 800fa78:	4622      	mov	r2, r4
 800fa7a:	462b      	mov	r3, r5
 800fa7c:	f7f0 fddc 	bl	8000638 <__aeabi_dmul>
 800fa80:	a339      	add	r3, pc, #228	; (adr r3, 800fb68 <__ieee754_acos+0x2a8>)
 800fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa86:	f7f0 fc1f 	bl	80002c8 <__aeabi_dsub>
 800fa8a:	4622      	mov	r2, r4
 800fa8c:	462b      	mov	r3, r5
 800fa8e:	f7f0 fdd3 	bl	8000638 <__aeabi_dmul>
 800fa92:	a337      	add	r3, pc, #220	; (adr r3, 800fb70 <__ieee754_acos+0x2b0>)
 800fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa98:	f7f0 fc18 	bl	80002cc <__adddf3>
 800fa9c:	4622      	mov	r2, r4
 800fa9e:	462b      	mov	r3, r5
 800faa0:	f7f0 fdca 	bl	8000638 <__aeabi_dmul>
 800faa4:	ec45 4b10 	vmov	d0, r4, r5
 800faa8:	4680      	mov	r8, r0
 800faaa:	4689      	mov	r9, r1
 800faac:	f001 f976 	bl	8010d9c <__ieee754_sqrt>
 800fab0:	a331      	add	r3, pc, #196	; (adr r3, 800fb78 <__ieee754_acos+0x2b8>)
 800fab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab6:	4620      	mov	r0, r4
 800fab8:	4629      	mov	r1, r5
 800faba:	ec57 6b10 	vmov	r6, r7, d0
 800fabe:	f7f0 fdbb 	bl	8000638 <__aeabi_dmul>
 800fac2:	a32f      	add	r3, pc, #188	; (adr r3, 800fb80 <__ieee754_acos+0x2c0>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fbfe 	bl	80002c8 <__aeabi_dsub>
 800facc:	4622      	mov	r2, r4
 800face:	462b      	mov	r3, r5
 800fad0:	f7f0 fdb2 	bl	8000638 <__aeabi_dmul>
 800fad4:	a32c      	add	r3, pc, #176	; (adr r3, 800fb88 <__ieee754_acos+0x2c8>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	f7f0 fbf7 	bl	80002cc <__adddf3>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	f7f0 fda9 	bl	8000638 <__aeabi_dmul>
 800fae6:	a32a      	add	r3, pc, #168	; (adr r3, 800fb90 <__ieee754_acos+0x2d0>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f7f0 fbec 	bl	80002c8 <__aeabi_dsub>
 800faf0:	4622      	mov	r2, r4
 800faf2:	462b      	mov	r3, r5
 800faf4:	f7f0 fda0 	bl	8000638 <__aeabi_dmul>
 800faf8:	4b2e      	ldr	r3, [pc, #184]	; (800fbb4 <__ieee754_acos+0x2f4>)
 800fafa:	2200      	movs	r2, #0
 800fafc:	f7f0 fbe6 	bl	80002cc <__adddf3>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4640      	mov	r0, r8
 800fb06:	4649      	mov	r1, r9
 800fb08:	f7f0 fec0 	bl	800088c <__aeabi_ddiv>
 800fb0c:	4632      	mov	r2, r6
 800fb0e:	463b      	mov	r3, r7
 800fb10:	f7f0 fd92 	bl	8000638 <__aeabi_dmul>
 800fb14:	a320      	add	r3, pc, #128	; (adr r3, 800fb98 <__ieee754_acos+0x2d8>)
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	f7f0 fbd5 	bl	80002c8 <__aeabi_dsub>
 800fb1e:	4632      	mov	r2, r6
 800fb20:	463b      	mov	r3, r7
 800fb22:	f7f0 fbd3 	bl	80002cc <__adddf3>
 800fb26:	4602      	mov	r2, r0
 800fb28:	460b      	mov	r3, r1
 800fb2a:	f7f0 fbcf 	bl	80002cc <__adddf3>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	a103      	add	r1, pc, #12	; (adr r1, 800fb40 <__ieee754_acos+0x280>)
 800fb34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb38:	e76f      	b.n	800fa1a <__ieee754_acos+0x15a>
 800fb3a:	bf00      	nop
 800fb3c:	f3af 8000 	nop.w
 800fb40:	54442d18 	.word	0x54442d18
 800fb44:	400921fb 	.word	0x400921fb
 800fb48:	0dfdf709 	.word	0x0dfdf709
 800fb4c:	3f023de1 	.word	0x3f023de1
 800fb50:	7501b288 	.word	0x7501b288
 800fb54:	3f49efe0 	.word	0x3f49efe0
 800fb58:	b5688f3b 	.word	0xb5688f3b
 800fb5c:	3fa48228 	.word	0x3fa48228
 800fb60:	0e884455 	.word	0x0e884455
 800fb64:	3fc9c155 	.word	0x3fc9c155
 800fb68:	03eb6f7d 	.word	0x03eb6f7d
 800fb6c:	3fd4d612 	.word	0x3fd4d612
 800fb70:	55555555 	.word	0x55555555
 800fb74:	3fc55555 	.word	0x3fc55555
 800fb78:	b12e9282 	.word	0xb12e9282
 800fb7c:	3fb3b8c5 	.word	0x3fb3b8c5
 800fb80:	1b8d0159 	.word	0x1b8d0159
 800fb84:	3fe6066c 	.word	0x3fe6066c
 800fb88:	9c598ac8 	.word	0x9c598ac8
 800fb8c:	40002ae5 	.word	0x40002ae5
 800fb90:	1c8a2d4b 	.word	0x1c8a2d4b
 800fb94:	40033a27 	.word	0x40033a27
 800fb98:	33145c07 	.word	0x33145c07
 800fb9c:	3c91a626 	.word	0x3c91a626
 800fba0:	54442d18 	.word	0x54442d18
 800fba4:	3ff921fb 	.word	0x3ff921fb
 800fba8:	3fefffff 	.word	0x3fefffff
 800fbac:	3fdfffff 	.word	0x3fdfffff
 800fbb0:	3c600000 	.word	0x3c600000
 800fbb4:	3ff00000 	.word	0x3ff00000
 800fbb8:	3fe00000 	.word	0x3fe00000
 800fbbc:	ee10 2a10 	vmov	r2, s0
 800fbc0:	462b      	mov	r3, r5
 800fbc2:	496d      	ldr	r1, [pc, #436]	; (800fd78 <__ieee754_acos+0x4b8>)
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	f7f0 fb7f 	bl	80002c8 <__aeabi_dsub>
 800fbca:	4b6c      	ldr	r3, [pc, #432]	; (800fd7c <__ieee754_acos+0x4bc>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f7f0 fd33 	bl	8000638 <__aeabi_dmul>
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	460d      	mov	r5, r1
 800fbd6:	ec45 4b10 	vmov	d0, r4, r5
 800fbda:	f001 f8df 	bl	8010d9c <__ieee754_sqrt>
 800fbde:	a34e      	add	r3, pc, #312	; (adr r3, 800fd18 <__ieee754_acos+0x458>)
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	ec59 8b10 	vmov	r8, r9, d0
 800fbec:	f7f0 fd24 	bl	8000638 <__aeabi_dmul>
 800fbf0:	a34b      	add	r3, pc, #300	; (adr r3, 800fd20 <__ieee754_acos+0x460>)
 800fbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf6:	f7f0 fb69 	bl	80002cc <__adddf3>
 800fbfa:	4622      	mov	r2, r4
 800fbfc:	462b      	mov	r3, r5
 800fbfe:	f7f0 fd1b 	bl	8000638 <__aeabi_dmul>
 800fc02:	a349      	add	r3, pc, #292	; (adr r3, 800fd28 <__ieee754_acos+0x468>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f7f0 fb5e 	bl	80002c8 <__aeabi_dsub>
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	462b      	mov	r3, r5
 800fc10:	f7f0 fd12 	bl	8000638 <__aeabi_dmul>
 800fc14:	a346      	add	r3, pc, #280	; (adr r3, 800fd30 <__ieee754_acos+0x470>)
 800fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1a:	f7f0 fb57 	bl	80002cc <__adddf3>
 800fc1e:	4622      	mov	r2, r4
 800fc20:	462b      	mov	r3, r5
 800fc22:	f7f0 fd09 	bl	8000638 <__aeabi_dmul>
 800fc26:	a344      	add	r3, pc, #272	; (adr r3, 800fd38 <__ieee754_acos+0x478>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 fb4c 	bl	80002c8 <__aeabi_dsub>
 800fc30:	4622      	mov	r2, r4
 800fc32:	462b      	mov	r3, r5
 800fc34:	f7f0 fd00 	bl	8000638 <__aeabi_dmul>
 800fc38:	a341      	add	r3, pc, #260	; (adr r3, 800fd40 <__ieee754_acos+0x480>)
 800fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3e:	f7f0 fb45 	bl	80002cc <__adddf3>
 800fc42:	4622      	mov	r2, r4
 800fc44:	462b      	mov	r3, r5
 800fc46:	f7f0 fcf7 	bl	8000638 <__aeabi_dmul>
 800fc4a:	a33f      	add	r3, pc, #252	; (adr r3, 800fd48 <__ieee754_acos+0x488>)
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	4682      	mov	sl, r0
 800fc52:	468b      	mov	fp, r1
 800fc54:	4620      	mov	r0, r4
 800fc56:	4629      	mov	r1, r5
 800fc58:	f7f0 fcee 	bl	8000638 <__aeabi_dmul>
 800fc5c:	a33c      	add	r3, pc, #240	; (adr r3, 800fd50 <__ieee754_acos+0x490>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	f7f0 fb31 	bl	80002c8 <__aeabi_dsub>
 800fc66:	4622      	mov	r2, r4
 800fc68:	462b      	mov	r3, r5
 800fc6a:	f7f0 fce5 	bl	8000638 <__aeabi_dmul>
 800fc6e:	a33a      	add	r3, pc, #232	; (adr r3, 800fd58 <__ieee754_acos+0x498>)
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f7f0 fb2a 	bl	80002cc <__adddf3>
 800fc78:	4622      	mov	r2, r4
 800fc7a:	462b      	mov	r3, r5
 800fc7c:	f7f0 fcdc 	bl	8000638 <__aeabi_dmul>
 800fc80:	a337      	add	r3, pc, #220	; (adr r3, 800fd60 <__ieee754_acos+0x4a0>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f0 fb1f 	bl	80002c8 <__aeabi_dsub>
 800fc8a:	4622      	mov	r2, r4
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	f7f0 fcd3 	bl	8000638 <__aeabi_dmul>
 800fc92:	4b39      	ldr	r3, [pc, #228]	; (800fd78 <__ieee754_acos+0x4b8>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	f7f0 fb19 	bl	80002cc <__adddf3>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4650      	mov	r0, sl
 800fca0:	4659      	mov	r1, fp
 800fca2:	f7f0 fdf3 	bl	800088c <__aeabi_ddiv>
 800fca6:	4642      	mov	r2, r8
 800fca8:	464b      	mov	r3, r9
 800fcaa:	f7f0 fcc5 	bl	8000638 <__aeabi_dmul>
 800fcae:	2600      	movs	r6, #0
 800fcb0:	4682      	mov	sl, r0
 800fcb2:	468b      	mov	fp, r1
 800fcb4:	4632      	mov	r2, r6
 800fcb6:	464b      	mov	r3, r9
 800fcb8:	4630      	mov	r0, r6
 800fcba:	4649      	mov	r1, r9
 800fcbc:	f7f0 fcbc 	bl	8000638 <__aeabi_dmul>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	f7f0 fafe 	bl	80002c8 <__aeabi_dsub>
 800fccc:	4632      	mov	r2, r6
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	464b      	mov	r3, r9
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	4649      	mov	r1, r9
 800fcd8:	f7f0 faf8 	bl	80002cc <__adddf3>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4620      	mov	r0, r4
 800fce2:	4629      	mov	r1, r5
 800fce4:	f7f0 fdd2 	bl	800088c <__aeabi_ddiv>
 800fce8:	4602      	mov	r2, r0
 800fcea:	460b      	mov	r3, r1
 800fcec:	4650      	mov	r0, sl
 800fcee:	4659      	mov	r1, fp
 800fcf0:	f7f0 faec 	bl	80002cc <__adddf3>
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	464b      	mov	r3, r9
 800fcf8:	f7f0 fae8 	bl	80002cc <__adddf3>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	f7f0 fae4 	bl	80002cc <__adddf3>
 800fd04:	e5fe      	b.n	800f904 <__ieee754_acos+0x44>
 800fd06:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800fd68 <__ieee754_acos+0x4a8>
 800fd0a:	e5ed      	b.n	800f8e8 <__ieee754_acos+0x28>
 800fd0c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800fd70 <__ieee754_acos+0x4b0>
 800fd10:	e5ea      	b.n	800f8e8 <__ieee754_acos+0x28>
 800fd12:	bf00      	nop
 800fd14:	f3af 8000 	nop.w
 800fd18:	0dfdf709 	.word	0x0dfdf709
 800fd1c:	3f023de1 	.word	0x3f023de1
 800fd20:	7501b288 	.word	0x7501b288
 800fd24:	3f49efe0 	.word	0x3f49efe0
 800fd28:	b5688f3b 	.word	0xb5688f3b
 800fd2c:	3fa48228 	.word	0x3fa48228
 800fd30:	0e884455 	.word	0x0e884455
 800fd34:	3fc9c155 	.word	0x3fc9c155
 800fd38:	03eb6f7d 	.word	0x03eb6f7d
 800fd3c:	3fd4d612 	.word	0x3fd4d612
 800fd40:	55555555 	.word	0x55555555
 800fd44:	3fc55555 	.word	0x3fc55555
 800fd48:	b12e9282 	.word	0xb12e9282
 800fd4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800fd50:	1b8d0159 	.word	0x1b8d0159
 800fd54:	3fe6066c 	.word	0x3fe6066c
 800fd58:	9c598ac8 	.word	0x9c598ac8
 800fd5c:	40002ae5 	.word	0x40002ae5
 800fd60:	1c8a2d4b 	.word	0x1c8a2d4b
 800fd64:	40033a27 	.word	0x40033a27
	...
 800fd70:	54442d18 	.word	0x54442d18
 800fd74:	3ff921fb 	.word	0x3ff921fb
 800fd78:	3ff00000 	.word	0x3ff00000
 800fd7c:	3fe00000 	.word	0x3fe00000

0800fd80 <__ieee754_asin>:
 800fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd84:	ed2d 8b04 	vpush	{d8-d9}
 800fd88:	ec55 4b10 	vmov	r4, r5, d0
 800fd8c:	4bcc      	ldr	r3, [pc, #816]	; (80100c0 <__ieee754_asin+0x340>)
 800fd8e:	b083      	sub	sp, #12
 800fd90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fd94:	4598      	cmp	r8, r3
 800fd96:	9501      	str	r5, [sp, #4]
 800fd98:	dd35      	ble.n	800fe06 <__ieee754_asin+0x86>
 800fd9a:	ee10 3a10 	vmov	r3, s0
 800fd9e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800fda2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800fda6:	ea58 0303 	orrs.w	r3, r8, r3
 800fdaa:	d117      	bne.n	800fddc <__ieee754_asin+0x5c>
 800fdac:	a3aa      	add	r3, pc, #680	; (adr r3, 8010058 <__ieee754_asin+0x2d8>)
 800fdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb2:	ee10 0a10 	vmov	r0, s0
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	f7f0 fc3e 	bl	8000638 <__aeabi_dmul>
 800fdbc:	a3a8      	add	r3, pc, #672	; (adr r3, 8010060 <__ieee754_asin+0x2e0>)
 800fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc2:	4606      	mov	r6, r0
 800fdc4:	460f      	mov	r7, r1
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	4629      	mov	r1, r5
 800fdca:	f7f0 fc35 	bl	8000638 <__aeabi_dmul>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fa79 	bl	80002cc <__adddf3>
 800fdda:	e00b      	b.n	800fdf4 <__ieee754_asin+0x74>
 800fddc:	ee10 2a10 	vmov	r2, s0
 800fde0:	462b      	mov	r3, r5
 800fde2:	ee10 0a10 	vmov	r0, s0
 800fde6:	4629      	mov	r1, r5
 800fde8:	f7f0 fa6e 	bl	80002c8 <__aeabi_dsub>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	f7f0 fd4c 	bl	800088c <__aeabi_ddiv>
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	460d      	mov	r5, r1
 800fdf8:	ec45 4b10 	vmov	d0, r4, r5
 800fdfc:	b003      	add	sp, #12
 800fdfe:	ecbd 8b04 	vpop	{d8-d9}
 800fe02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe06:	4baf      	ldr	r3, [pc, #700]	; (80100c4 <__ieee754_asin+0x344>)
 800fe08:	4598      	cmp	r8, r3
 800fe0a:	dc11      	bgt.n	800fe30 <__ieee754_asin+0xb0>
 800fe0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fe10:	f280 80ae 	bge.w	800ff70 <__ieee754_asin+0x1f0>
 800fe14:	a394      	add	r3, pc, #592	; (adr r3, 8010068 <__ieee754_asin+0x2e8>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	ee10 0a10 	vmov	r0, s0
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f7f0 fa54 	bl	80002cc <__adddf3>
 800fe24:	4ba8      	ldr	r3, [pc, #672]	; (80100c8 <__ieee754_asin+0x348>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	f7f0 fe96 	bl	8000b58 <__aeabi_dcmpgt>
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1e3      	bne.n	800fdf8 <__ieee754_asin+0x78>
 800fe30:	ec45 4b10 	vmov	d0, r4, r5
 800fe34:	f001 fa38 	bl	80112a8 <fabs>
 800fe38:	49a3      	ldr	r1, [pc, #652]	; (80100c8 <__ieee754_asin+0x348>)
 800fe3a:	ec53 2b10 	vmov	r2, r3, d0
 800fe3e:	2000      	movs	r0, #0
 800fe40:	f7f0 fa42 	bl	80002c8 <__aeabi_dsub>
 800fe44:	4ba1      	ldr	r3, [pc, #644]	; (80100cc <__ieee754_asin+0x34c>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	f7f0 fbf6 	bl	8000638 <__aeabi_dmul>
 800fe4c:	a388      	add	r3, pc, #544	; (adr r3, 8010070 <__ieee754_asin+0x2f0>)
 800fe4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe52:	4604      	mov	r4, r0
 800fe54:	460d      	mov	r5, r1
 800fe56:	f7f0 fbef 	bl	8000638 <__aeabi_dmul>
 800fe5a:	a387      	add	r3, pc, #540	; (adr r3, 8010078 <__ieee754_asin+0x2f8>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fa34 	bl	80002cc <__adddf3>
 800fe64:	4622      	mov	r2, r4
 800fe66:	462b      	mov	r3, r5
 800fe68:	f7f0 fbe6 	bl	8000638 <__aeabi_dmul>
 800fe6c:	a384      	add	r3, pc, #528	; (adr r3, 8010080 <__ieee754_asin+0x300>)
 800fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe72:	f7f0 fa29 	bl	80002c8 <__aeabi_dsub>
 800fe76:	4622      	mov	r2, r4
 800fe78:	462b      	mov	r3, r5
 800fe7a:	f7f0 fbdd 	bl	8000638 <__aeabi_dmul>
 800fe7e:	a382      	add	r3, pc, #520	; (adr r3, 8010088 <__ieee754_asin+0x308>)
 800fe80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe84:	f7f0 fa22 	bl	80002cc <__adddf3>
 800fe88:	4622      	mov	r2, r4
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	f7f0 fbd4 	bl	8000638 <__aeabi_dmul>
 800fe90:	a37f      	add	r3, pc, #508	; (adr r3, 8010090 <__ieee754_asin+0x310>)
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	f7f0 fa17 	bl	80002c8 <__aeabi_dsub>
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	462b      	mov	r3, r5
 800fe9e:	f7f0 fbcb 	bl	8000638 <__aeabi_dmul>
 800fea2:	a37d      	add	r3, pc, #500	; (adr r3, 8010098 <__ieee754_asin+0x318>)
 800fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea8:	f7f0 fa10 	bl	80002cc <__adddf3>
 800feac:	4622      	mov	r2, r4
 800feae:	462b      	mov	r3, r5
 800feb0:	f7f0 fbc2 	bl	8000638 <__aeabi_dmul>
 800feb4:	a37a      	add	r3, pc, #488	; (adr r3, 80100a0 <__ieee754_asin+0x320>)
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	ec41 0b18 	vmov	d8, r0, r1
 800febe:	4620      	mov	r0, r4
 800fec0:	4629      	mov	r1, r5
 800fec2:	f7f0 fbb9 	bl	8000638 <__aeabi_dmul>
 800fec6:	a378      	add	r3, pc, #480	; (adr r3, 80100a8 <__ieee754_asin+0x328>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	f7f0 f9fc 	bl	80002c8 <__aeabi_dsub>
 800fed0:	4622      	mov	r2, r4
 800fed2:	462b      	mov	r3, r5
 800fed4:	f7f0 fbb0 	bl	8000638 <__aeabi_dmul>
 800fed8:	a375      	add	r3, pc, #468	; (adr r3, 80100b0 <__ieee754_asin+0x330>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	f7f0 f9f5 	bl	80002cc <__adddf3>
 800fee2:	4622      	mov	r2, r4
 800fee4:	462b      	mov	r3, r5
 800fee6:	f7f0 fba7 	bl	8000638 <__aeabi_dmul>
 800feea:	a373      	add	r3, pc, #460	; (adr r3, 80100b8 <__ieee754_asin+0x338>)
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	f7f0 f9ea 	bl	80002c8 <__aeabi_dsub>
 800fef4:	4622      	mov	r2, r4
 800fef6:	462b      	mov	r3, r5
 800fef8:	f7f0 fb9e 	bl	8000638 <__aeabi_dmul>
 800fefc:	4b72      	ldr	r3, [pc, #456]	; (80100c8 <__ieee754_asin+0x348>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	f7f0 f9e4 	bl	80002cc <__adddf3>
 800ff04:	ec45 4b10 	vmov	d0, r4, r5
 800ff08:	4606      	mov	r6, r0
 800ff0a:	460f      	mov	r7, r1
 800ff0c:	f000 ff46 	bl	8010d9c <__ieee754_sqrt>
 800ff10:	4b6f      	ldr	r3, [pc, #444]	; (80100d0 <__ieee754_asin+0x350>)
 800ff12:	4598      	cmp	r8, r3
 800ff14:	ec5b ab10 	vmov	sl, fp, d0
 800ff18:	f340 80dc 	ble.w	80100d4 <__ieee754_asin+0x354>
 800ff1c:	4632      	mov	r2, r6
 800ff1e:	463b      	mov	r3, r7
 800ff20:	ec51 0b18 	vmov	r0, r1, d8
 800ff24:	f7f0 fcb2 	bl	800088c <__aeabi_ddiv>
 800ff28:	4652      	mov	r2, sl
 800ff2a:	465b      	mov	r3, fp
 800ff2c:	f7f0 fb84 	bl	8000638 <__aeabi_dmul>
 800ff30:	4652      	mov	r2, sl
 800ff32:	465b      	mov	r3, fp
 800ff34:	f7f0 f9ca 	bl	80002cc <__adddf3>
 800ff38:	4602      	mov	r2, r0
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	f7f0 f9c6 	bl	80002cc <__adddf3>
 800ff40:	a347      	add	r3, pc, #284	; (adr r3, 8010060 <__ieee754_asin+0x2e0>)
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	f7f0 f9bf 	bl	80002c8 <__aeabi_dsub>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	a142      	add	r1, pc, #264	; (adr r1, 8010058 <__ieee754_asin+0x2d8>)
 800ff50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff54:	f7f0 f9b8 	bl	80002c8 <__aeabi_dsub>
 800ff58:	9b01      	ldr	r3, [sp, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bfdc      	itt	le
 800ff5e:	4602      	movle	r2, r0
 800ff60:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800ff64:	4604      	mov	r4, r0
 800ff66:	460d      	mov	r5, r1
 800ff68:	bfdc      	itt	le
 800ff6a:	4614      	movle	r4, r2
 800ff6c:	461d      	movle	r5, r3
 800ff6e:	e743      	b.n	800fdf8 <__ieee754_asin+0x78>
 800ff70:	ee10 2a10 	vmov	r2, s0
 800ff74:	ee10 0a10 	vmov	r0, s0
 800ff78:	462b      	mov	r3, r5
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	f7f0 fb5c 	bl	8000638 <__aeabi_dmul>
 800ff80:	a33b      	add	r3, pc, #236	; (adr r3, 8010070 <__ieee754_asin+0x2f0>)
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	4606      	mov	r6, r0
 800ff88:	460f      	mov	r7, r1
 800ff8a:	f7f0 fb55 	bl	8000638 <__aeabi_dmul>
 800ff8e:	a33a      	add	r3, pc, #232	; (adr r3, 8010078 <__ieee754_asin+0x2f8>)
 800ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff94:	f7f0 f99a 	bl	80002cc <__adddf3>
 800ff98:	4632      	mov	r2, r6
 800ff9a:	463b      	mov	r3, r7
 800ff9c:	f7f0 fb4c 	bl	8000638 <__aeabi_dmul>
 800ffa0:	a337      	add	r3, pc, #220	; (adr r3, 8010080 <__ieee754_asin+0x300>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	f7f0 f98f 	bl	80002c8 <__aeabi_dsub>
 800ffaa:	4632      	mov	r2, r6
 800ffac:	463b      	mov	r3, r7
 800ffae:	f7f0 fb43 	bl	8000638 <__aeabi_dmul>
 800ffb2:	a335      	add	r3, pc, #212	; (adr r3, 8010088 <__ieee754_asin+0x308>)
 800ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb8:	f7f0 f988 	bl	80002cc <__adddf3>
 800ffbc:	4632      	mov	r2, r6
 800ffbe:	463b      	mov	r3, r7
 800ffc0:	f7f0 fb3a 	bl	8000638 <__aeabi_dmul>
 800ffc4:	a332      	add	r3, pc, #200	; (adr r3, 8010090 <__ieee754_asin+0x310>)
 800ffc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffca:	f7f0 f97d 	bl	80002c8 <__aeabi_dsub>
 800ffce:	4632      	mov	r2, r6
 800ffd0:	463b      	mov	r3, r7
 800ffd2:	f7f0 fb31 	bl	8000638 <__aeabi_dmul>
 800ffd6:	a330      	add	r3, pc, #192	; (adr r3, 8010098 <__ieee754_asin+0x318>)
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	f7f0 f976 	bl	80002cc <__adddf3>
 800ffe0:	4632      	mov	r2, r6
 800ffe2:	463b      	mov	r3, r7
 800ffe4:	f7f0 fb28 	bl	8000638 <__aeabi_dmul>
 800ffe8:	a32d      	add	r3, pc, #180	; (adr r3, 80100a0 <__ieee754_asin+0x320>)
 800ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffee:	4680      	mov	r8, r0
 800fff0:	4689      	mov	r9, r1
 800fff2:	4630      	mov	r0, r6
 800fff4:	4639      	mov	r1, r7
 800fff6:	f7f0 fb1f 	bl	8000638 <__aeabi_dmul>
 800fffa:	a32b      	add	r3, pc, #172	; (adr r3, 80100a8 <__ieee754_asin+0x328>)
 800fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010000:	f7f0 f962 	bl	80002c8 <__aeabi_dsub>
 8010004:	4632      	mov	r2, r6
 8010006:	463b      	mov	r3, r7
 8010008:	f7f0 fb16 	bl	8000638 <__aeabi_dmul>
 801000c:	a328      	add	r3, pc, #160	; (adr r3, 80100b0 <__ieee754_asin+0x330>)
 801000e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010012:	f7f0 f95b 	bl	80002cc <__adddf3>
 8010016:	4632      	mov	r2, r6
 8010018:	463b      	mov	r3, r7
 801001a:	f7f0 fb0d 	bl	8000638 <__aeabi_dmul>
 801001e:	a326      	add	r3, pc, #152	; (adr r3, 80100b8 <__ieee754_asin+0x338>)
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	f7f0 f950 	bl	80002c8 <__aeabi_dsub>
 8010028:	4632      	mov	r2, r6
 801002a:	463b      	mov	r3, r7
 801002c:	f7f0 fb04 	bl	8000638 <__aeabi_dmul>
 8010030:	4b25      	ldr	r3, [pc, #148]	; (80100c8 <__ieee754_asin+0x348>)
 8010032:	2200      	movs	r2, #0
 8010034:	f7f0 f94a 	bl	80002cc <__adddf3>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4640      	mov	r0, r8
 801003e:	4649      	mov	r1, r9
 8010040:	f7f0 fc24 	bl	800088c <__aeabi_ddiv>
 8010044:	4622      	mov	r2, r4
 8010046:	462b      	mov	r3, r5
 8010048:	f7f0 faf6 	bl	8000638 <__aeabi_dmul>
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	e6bf      	b.n	800fdd6 <__ieee754_asin+0x56>
 8010056:	bf00      	nop
 8010058:	54442d18 	.word	0x54442d18
 801005c:	3ff921fb 	.word	0x3ff921fb
 8010060:	33145c07 	.word	0x33145c07
 8010064:	3c91a626 	.word	0x3c91a626
 8010068:	8800759c 	.word	0x8800759c
 801006c:	7e37e43c 	.word	0x7e37e43c
 8010070:	0dfdf709 	.word	0x0dfdf709
 8010074:	3f023de1 	.word	0x3f023de1
 8010078:	7501b288 	.word	0x7501b288
 801007c:	3f49efe0 	.word	0x3f49efe0
 8010080:	b5688f3b 	.word	0xb5688f3b
 8010084:	3fa48228 	.word	0x3fa48228
 8010088:	0e884455 	.word	0x0e884455
 801008c:	3fc9c155 	.word	0x3fc9c155
 8010090:	03eb6f7d 	.word	0x03eb6f7d
 8010094:	3fd4d612 	.word	0x3fd4d612
 8010098:	55555555 	.word	0x55555555
 801009c:	3fc55555 	.word	0x3fc55555
 80100a0:	b12e9282 	.word	0xb12e9282
 80100a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80100a8:	1b8d0159 	.word	0x1b8d0159
 80100ac:	3fe6066c 	.word	0x3fe6066c
 80100b0:	9c598ac8 	.word	0x9c598ac8
 80100b4:	40002ae5 	.word	0x40002ae5
 80100b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80100bc:	40033a27 	.word	0x40033a27
 80100c0:	3fefffff 	.word	0x3fefffff
 80100c4:	3fdfffff 	.word	0x3fdfffff
 80100c8:	3ff00000 	.word	0x3ff00000
 80100cc:	3fe00000 	.word	0x3fe00000
 80100d0:	3fef3332 	.word	0x3fef3332
 80100d4:	ee10 2a10 	vmov	r2, s0
 80100d8:	ee10 0a10 	vmov	r0, s0
 80100dc:	465b      	mov	r3, fp
 80100de:	4659      	mov	r1, fp
 80100e0:	f7f0 f8f4 	bl	80002cc <__adddf3>
 80100e4:	4632      	mov	r2, r6
 80100e6:	463b      	mov	r3, r7
 80100e8:	ec41 0b19 	vmov	d9, r0, r1
 80100ec:	ec51 0b18 	vmov	r0, r1, d8
 80100f0:	f7f0 fbcc 	bl	800088c <__aeabi_ddiv>
 80100f4:	4602      	mov	r2, r0
 80100f6:	460b      	mov	r3, r1
 80100f8:	ec51 0b19 	vmov	r0, r1, d9
 80100fc:	f7f0 fa9c 	bl	8000638 <__aeabi_dmul>
 8010100:	f04f 0800 	mov.w	r8, #0
 8010104:	4606      	mov	r6, r0
 8010106:	460f      	mov	r7, r1
 8010108:	4642      	mov	r2, r8
 801010a:	465b      	mov	r3, fp
 801010c:	4640      	mov	r0, r8
 801010e:	4659      	mov	r1, fp
 8010110:	f7f0 fa92 	bl	8000638 <__aeabi_dmul>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	4620      	mov	r0, r4
 801011a:	4629      	mov	r1, r5
 801011c:	f7f0 f8d4 	bl	80002c8 <__aeabi_dsub>
 8010120:	4642      	mov	r2, r8
 8010122:	4604      	mov	r4, r0
 8010124:	460d      	mov	r5, r1
 8010126:	465b      	mov	r3, fp
 8010128:	4650      	mov	r0, sl
 801012a:	4659      	mov	r1, fp
 801012c:	f7f0 f8ce 	bl	80002cc <__adddf3>
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	4620      	mov	r0, r4
 8010136:	4629      	mov	r1, r5
 8010138:	f7f0 fba8 	bl	800088c <__aeabi_ddiv>
 801013c:	4602      	mov	r2, r0
 801013e:	460b      	mov	r3, r1
 8010140:	f7f0 f8c4 	bl	80002cc <__adddf3>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	a113      	add	r1, pc, #76	; (adr r1, 8010198 <__ieee754_asin+0x418>)
 801014a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801014e:	f7f0 f8bb 	bl	80002c8 <__aeabi_dsub>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	4630      	mov	r0, r6
 8010158:	4639      	mov	r1, r7
 801015a:	f7f0 f8b5 	bl	80002c8 <__aeabi_dsub>
 801015e:	4642      	mov	r2, r8
 8010160:	4604      	mov	r4, r0
 8010162:	460d      	mov	r5, r1
 8010164:	465b      	mov	r3, fp
 8010166:	4640      	mov	r0, r8
 8010168:	4659      	mov	r1, fp
 801016a:	f7f0 f8af 	bl	80002cc <__adddf3>
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	a10b      	add	r1, pc, #44	; (adr r1, 80101a0 <__ieee754_asin+0x420>)
 8010174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010178:	f7f0 f8a6 	bl	80002c8 <__aeabi_dsub>
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	4620      	mov	r0, r4
 8010182:	4629      	mov	r1, r5
 8010184:	f7f0 f8a0 	bl	80002c8 <__aeabi_dsub>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	a104      	add	r1, pc, #16	; (adr r1, 80101a0 <__ieee754_asin+0x420>)
 801018e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010192:	e6df      	b.n	800ff54 <__ieee754_asin+0x1d4>
 8010194:	f3af 8000 	nop.w
 8010198:	33145c07 	.word	0x33145c07
 801019c:	3c91a626 	.word	0x3c91a626
 80101a0:	54442d18 	.word	0x54442d18
 80101a4:	3fe921fb 	.word	0x3fe921fb

080101a8 <__ieee754_atan2>:
 80101a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ac:	ec57 6b11 	vmov	r6, r7, d1
 80101b0:	4273      	negs	r3, r6
 80101b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010338 <__ieee754_atan2+0x190>
 80101b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80101ba:	4333      	orrs	r3, r6
 80101bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80101c0:	4573      	cmp	r3, lr
 80101c2:	ec51 0b10 	vmov	r0, r1, d0
 80101c6:	ee11 8a10 	vmov	r8, s2
 80101ca:	d80a      	bhi.n	80101e2 <__ieee754_atan2+0x3a>
 80101cc:	4244      	negs	r4, r0
 80101ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101d2:	4304      	orrs	r4, r0
 80101d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80101d8:	4574      	cmp	r4, lr
 80101da:	ee10 9a10 	vmov	r9, s0
 80101de:	468c      	mov	ip, r1
 80101e0:	d907      	bls.n	80101f2 <__ieee754_atan2+0x4a>
 80101e2:	4632      	mov	r2, r6
 80101e4:	463b      	mov	r3, r7
 80101e6:	f7f0 f871 	bl	80002cc <__adddf3>
 80101ea:	ec41 0b10 	vmov	d0, r0, r1
 80101ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80101f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80101fa:	4334      	orrs	r4, r6
 80101fc:	d103      	bne.n	8010206 <__ieee754_atan2+0x5e>
 80101fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010202:	f000 beb1 	b.w	8010f68 <atan>
 8010206:	17bc      	asrs	r4, r7, #30
 8010208:	f004 0402 	and.w	r4, r4, #2
 801020c:	ea53 0909 	orrs.w	r9, r3, r9
 8010210:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010214:	d107      	bne.n	8010226 <__ieee754_atan2+0x7e>
 8010216:	2c02      	cmp	r4, #2
 8010218:	d060      	beq.n	80102dc <__ieee754_atan2+0x134>
 801021a:	2c03      	cmp	r4, #3
 801021c:	d1e5      	bne.n	80101ea <__ieee754_atan2+0x42>
 801021e:	a142      	add	r1, pc, #264	; (adr r1, 8010328 <__ieee754_atan2+0x180>)
 8010220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010224:	e7e1      	b.n	80101ea <__ieee754_atan2+0x42>
 8010226:	ea52 0808 	orrs.w	r8, r2, r8
 801022a:	d106      	bne.n	801023a <__ieee754_atan2+0x92>
 801022c:	f1bc 0f00 	cmp.w	ip, #0
 8010230:	da5f      	bge.n	80102f2 <__ieee754_atan2+0x14a>
 8010232:	a13f      	add	r1, pc, #252	; (adr r1, 8010330 <__ieee754_atan2+0x188>)
 8010234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010238:	e7d7      	b.n	80101ea <__ieee754_atan2+0x42>
 801023a:	4572      	cmp	r2, lr
 801023c:	d10f      	bne.n	801025e <__ieee754_atan2+0xb6>
 801023e:	4293      	cmp	r3, r2
 8010240:	f104 34ff 	add.w	r4, r4, #4294967295
 8010244:	d107      	bne.n	8010256 <__ieee754_atan2+0xae>
 8010246:	2c02      	cmp	r4, #2
 8010248:	d84c      	bhi.n	80102e4 <__ieee754_atan2+0x13c>
 801024a:	4b35      	ldr	r3, [pc, #212]	; (8010320 <__ieee754_atan2+0x178>)
 801024c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010250:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010254:	e7c9      	b.n	80101ea <__ieee754_atan2+0x42>
 8010256:	2c02      	cmp	r4, #2
 8010258:	d848      	bhi.n	80102ec <__ieee754_atan2+0x144>
 801025a:	4b32      	ldr	r3, [pc, #200]	; (8010324 <__ieee754_atan2+0x17c>)
 801025c:	e7f6      	b.n	801024c <__ieee754_atan2+0xa4>
 801025e:	4573      	cmp	r3, lr
 8010260:	d0e4      	beq.n	801022c <__ieee754_atan2+0x84>
 8010262:	1a9b      	subs	r3, r3, r2
 8010264:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010268:	ea4f 5223 	mov.w	r2, r3, asr #20
 801026c:	da1e      	bge.n	80102ac <__ieee754_atan2+0x104>
 801026e:	2f00      	cmp	r7, #0
 8010270:	da01      	bge.n	8010276 <__ieee754_atan2+0xce>
 8010272:	323c      	adds	r2, #60	; 0x3c
 8010274:	db1e      	blt.n	80102b4 <__ieee754_atan2+0x10c>
 8010276:	4632      	mov	r2, r6
 8010278:	463b      	mov	r3, r7
 801027a:	f7f0 fb07 	bl	800088c <__aeabi_ddiv>
 801027e:	ec41 0b10 	vmov	d0, r0, r1
 8010282:	f001 f811 	bl	80112a8 <fabs>
 8010286:	f000 fe6f 	bl	8010f68 <atan>
 801028a:	ec51 0b10 	vmov	r0, r1, d0
 801028e:	2c01      	cmp	r4, #1
 8010290:	d013      	beq.n	80102ba <__ieee754_atan2+0x112>
 8010292:	2c02      	cmp	r4, #2
 8010294:	d015      	beq.n	80102c2 <__ieee754_atan2+0x11a>
 8010296:	2c00      	cmp	r4, #0
 8010298:	d0a7      	beq.n	80101ea <__ieee754_atan2+0x42>
 801029a:	a319      	add	r3, pc, #100	; (adr r3, 8010300 <__ieee754_atan2+0x158>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f7f0 f812 	bl	80002c8 <__aeabi_dsub>
 80102a4:	a318      	add	r3, pc, #96	; (adr r3, 8010308 <__ieee754_atan2+0x160>)
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	e014      	b.n	80102d6 <__ieee754_atan2+0x12e>
 80102ac:	a118      	add	r1, pc, #96	; (adr r1, 8010310 <__ieee754_atan2+0x168>)
 80102ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102b2:	e7ec      	b.n	801028e <__ieee754_atan2+0xe6>
 80102b4:	2000      	movs	r0, #0
 80102b6:	2100      	movs	r1, #0
 80102b8:	e7e9      	b.n	801028e <__ieee754_atan2+0xe6>
 80102ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102be:	4619      	mov	r1, r3
 80102c0:	e793      	b.n	80101ea <__ieee754_atan2+0x42>
 80102c2:	a30f      	add	r3, pc, #60	; (adr r3, 8010300 <__ieee754_atan2+0x158>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	f7ef fffe 	bl	80002c8 <__aeabi_dsub>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	a10d      	add	r1, pc, #52	; (adr r1, 8010308 <__ieee754_atan2+0x160>)
 80102d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102d6:	f7ef fff7 	bl	80002c8 <__aeabi_dsub>
 80102da:	e786      	b.n	80101ea <__ieee754_atan2+0x42>
 80102dc:	a10a      	add	r1, pc, #40	; (adr r1, 8010308 <__ieee754_atan2+0x160>)
 80102de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102e2:	e782      	b.n	80101ea <__ieee754_atan2+0x42>
 80102e4:	a10c      	add	r1, pc, #48	; (adr r1, 8010318 <__ieee754_atan2+0x170>)
 80102e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ea:	e77e      	b.n	80101ea <__ieee754_atan2+0x42>
 80102ec:	2000      	movs	r0, #0
 80102ee:	2100      	movs	r1, #0
 80102f0:	e77b      	b.n	80101ea <__ieee754_atan2+0x42>
 80102f2:	a107      	add	r1, pc, #28	; (adr r1, 8010310 <__ieee754_atan2+0x168>)
 80102f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102f8:	e777      	b.n	80101ea <__ieee754_atan2+0x42>
 80102fa:	bf00      	nop
 80102fc:	f3af 8000 	nop.w
 8010300:	33145c07 	.word	0x33145c07
 8010304:	3ca1a626 	.word	0x3ca1a626
 8010308:	54442d18 	.word	0x54442d18
 801030c:	400921fb 	.word	0x400921fb
 8010310:	54442d18 	.word	0x54442d18
 8010314:	3ff921fb 	.word	0x3ff921fb
 8010318:	54442d18 	.word	0x54442d18
 801031c:	3fe921fb 	.word	0x3fe921fb
 8010320:	08011960 	.word	0x08011960
 8010324:	08011978 	.word	0x08011978
 8010328:	54442d18 	.word	0x54442d18
 801032c:	c00921fb 	.word	0xc00921fb
 8010330:	54442d18 	.word	0x54442d18
 8010334:	bff921fb 	.word	0xbff921fb
 8010338:	7ff00000 	.word	0x7ff00000
 801033c:	00000000 	.word	0x00000000

08010340 <__ieee754_pow>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	ed2d 8b06 	vpush	{d8-d10}
 8010348:	b089      	sub	sp, #36	; 0x24
 801034a:	ed8d 1b00 	vstr	d1, [sp]
 801034e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010352:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010356:	ea58 0102 	orrs.w	r1, r8, r2
 801035a:	ec57 6b10 	vmov	r6, r7, d0
 801035e:	d115      	bne.n	801038c <__ieee754_pow+0x4c>
 8010360:	19b3      	adds	r3, r6, r6
 8010362:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010366:	4152      	adcs	r2, r2
 8010368:	4299      	cmp	r1, r3
 801036a:	4b89      	ldr	r3, [pc, #548]	; (8010590 <__ieee754_pow+0x250>)
 801036c:	4193      	sbcs	r3, r2
 801036e:	f080 84d2 	bcs.w	8010d16 <__ieee754_pow+0x9d6>
 8010372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010376:	4630      	mov	r0, r6
 8010378:	4639      	mov	r1, r7
 801037a:	f7ef ffa7 	bl	80002cc <__adddf3>
 801037e:	ec41 0b10 	vmov	d0, r0, r1
 8010382:	b009      	add	sp, #36	; 0x24
 8010384:	ecbd 8b06 	vpop	{d8-d10}
 8010388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801038c:	4b81      	ldr	r3, [pc, #516]	; (8010594 <__ieee754_pow+0x254>)
 801038e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010392:	429c      	cmp	r4, r3
 8010394:	ee10 aa10 	vmov	sl, s0
 8010398:	463d      	mov	r5, r7
 801039a:	dc06      	bgt.n	80103aa <__ieee754_pow+0x6a>
 801039c:	d101      	bne.n	80103a2 <__ieee754_pow+0x62>
 801039e:	2e00      	cmp	r6, #0
 80103a0:	d1e7      	bne.n	8010372 <__ieee754_pow+0x32>
 80103a2:	4598      	cmp	r8, r3
 80103a4:	dc01      	bgt.n	80103aa <__ieee754_pow+0x6a>
 80103a6:	d10f      	bne.n	80103c8 <__ieee754_pow+0x88>
 80103a8:	b172      	cbz	r2, 80103c8 <__ieee754_pow+0x88>
 80103aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80103ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80103b2:	ea55 050a 	orrs.w	r5, r5, sl
 80103b6:	d1dc      	bne.n	8010372 <__ieee754_pow+0x32>
 80103b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80103bc:	18db      	adds	r3, r3, r3
 80103be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80103c2:	4152      	adcs	r2, r2
 80103c4:	429d      	cmp	r5, r3
 80103c6:	e7d0      	b.n	801036a <__ieee754_pow+0x2a>
 80103c8:	2d00      	cmp	r5, #0
 80103ca:	da3b      	bge.n	8010444 <__ieee754_pow+0x104>
 80103cc:	4b72      	ldr	r3, [pc, #456]	; (8010598 <__ieee754_pow+0x258>)
 80103ce:	4598      	cmp	r8, r3
 80103d0:	dc51      	bgt.n	8010476 <__ieee754_pow+0x136>
 80103d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80103d6:	4598      	cmp	r8, r3
 80103d8:	f340 84ac 	ble.w	8010d34 <__ieee754_pow+0x9f4>
 80103dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80103e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80103e4:	2b14      	cmp	r3, #20
 80103e6:	dd0f      	ble.n	8010408 <__ieee754_pow+0xc8>
 80103e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80103ec:	fa22 f103 	lsr.w	r1, r2, r3
 80103f0:	fa01 f303 	lsl.w	r3, r1, r3
 80103f4:	4293      	cmp	r3, r2
 80103f6:	f040 849d 	bne.w	8010d34 <__ieee754_pow+0x9f4>
 80103fa:	f001 0101 	and.w	r1, r1, #1
 80103fe:	f1c1 0302 	rsb	r3, r1, #2
 8010402:	9304      	str	r3, [sp, #16]
 8010404:	b182      	cbz	r2, 8010428 <__ieee754_pow+0xe8>
 8010406:	e05f      	b.n	80104c8 <__ieee754_pow+0x188>
 8010408:	2a00      	cmp	r2, #0
 801040a:	d15b      	bne.n	80104c4 <__ieee754_pow+0x184>
 801040c:	f1c3 0314 	rsb	r3, r3, #20
 8010410:	fa48 f103 	asr.w	r1, r8, r3
 8010414:	fa01 f303 	lsl.w	r3, r1, r3
 8010418:	4543      	cmp	r3, r8
 801041a:	f040 8488 	bne.w	8010d2e <__ieee754_pow+0x9ee>
 801041e:	f001 0101 	and.w	r1, r1, #1
 8010422:	f1c1 0302 	rsb	r3, r1, #2
 8010426:	9304      	str	r3, [sp, #16]
 8010428:	4b5c      	ldr	r3, [pc, #368]	; (801059c <__ieee754_pow+0x25c>)
 801042a:	4598      	cmp	r8, r3
 801042c:	d132      	bne.n	8010494 <__ieee754_pow+0x154>
 801042e:	f1b9 0f00 	cmp.w	r9, #0
 8010432:	f280 8478 	bge.w	8010d26 <__ieee754_pow+0x9e6>
 8010436:	4959      	ldr	r1, [pc, #356]	; (801059c <__ieee754_pow+0x25c>)
 8010438:	4632      	mov	r2, r6
 801043a:	463b      	mov	r3, r7
 801043c:	2000      	movs	r0, #0
 801043e:	f7f0 fa25 	bl	800088c <__aeabi_ddiv>
 8010442:	e79c      	b.n	801037e <__ieee754_pow+0x3e>
 8010444:	2300      	movs	r3, #0
 8010446:	9304      	str	r3, [sp, #16]
 8010448:	2a00      	cmp	r2, #0
 801044a:	d13d      	bne.n	80104c8 <__ieee754_pow+0x188>
 801044c:	4b51      	ldr	r3, [pc, #324]	; (8010594 <__ieee754_pow+0x254>)
 801044e:	4598      	cmp	r8, r3
 8010450:	d1ea      	bne.n	8010428 <__ieee754_pow+0xe8>
 8010452:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010456:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801045a:	ea53 030a 	orrs.w	r3, r3, sl
 801045e:	f000 845a 	beq.w	8010d16 <__ieee754_pow+0x9d6>
 8010462:	4b4f      	ldr	r3, [pc, #316]	; (80105a0 <__ieee754_pow+0x260>)
 8010464:	429c      	cmp	r4, r3
 8010466:	dd08      	ble.n	801047a <__ieee754_pow+0x13a>
 8010468:	f1b9 0f00 	cmp.w	r9, #0
 801046c:	f2c0 8457 	blt.w	8010d1e <__ieee754_pow+0x9de>
 8010470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010474:	e783      	b.n	801037e <__ieee754_pow+0x3e>
 8010476:	2302      	movs	r3, #2
 8010478:	e7e5      	b.n	8010446 <__ieee754_pow+0x106>
 801047a:	f1b9 0f00 	cmp.w	r9, #0
 801047e:	f04f 0000 	mov.w	r0, #0
 8010482:	f04f 0100 	mov.w	r1, #0
 8010486:	f6bf af7a 	bge.w	801037e <__ieee754_pow+0x3e>
 801048a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801048e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010492:	e774      	b.n	801037e <__ieee754_pow+0x3e>
 8010494:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010498:	d106      	bne.n	80104a8 <__ieee754_pow+0x168>
 801049a:	4632      	mov	r2, r6
 801049c:	463b      	mov	r3, r7
 801049e:	4630      	mov	r0, r6
 80104a0:	4639      	mov	r1, r7
 80104a2:	f7f0 f8c9 	bl	8000638 <__aeabi_dmul>
 80104a6:	e76a      	b.n	801037e <__ieee754_pow+0x3e>
 80104a8:	4b3e      	ldr	r3, [pc, #248]	; (80105a4 <__ieee754_pow+0x264>)
 80104aa:	4599      	cmp	r9, r3
 80104ac:	d10c      	bne.n	80104c8 <__ieee754_pow+0x188>
 80104ae:	2d00      	cmp	r5, #0
 80104b0:	db0a      	blt.n	80104c8 <__ieee754_pow+0x188>
 80104b2:	ec47 6b10 	vmov	d0, r6, r7
 80104b6:	b009      	add	sp, #36	; 0x24
 80104b8:	ecbd 8b06 	vpop	{d8-d10}
 80104bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c0:	f000 bc6c 	b.w	8010d9c <__ieee754_sqrt>
 80104c4:	2300      	movs	r3, #0
 80104c6:	9304      	str	r3, [sp, #16]
 80104c8:	ec47 6b10 	vmov	d0, r6, r7
 80104cc:	f000 feec 	bl	80112a8 <fabs>
 80104d0:	ec51 0b10 	vmov	r0, r1, d0
 80104d4:	f1ba 0f00 	cmp.w	sl, #0
 80104d8:	d129      	bne.n	801052e <__ieee754_pow+0x1ee>
 80104da:	b124      	cbz	r4, 80104e6 <__ieee754_pow+0x1a6>
 80104dc:	4b2f      	ldr	r3, [pc, #188]	; (801059c <__ieee754_pow+0x25c>)
 80104de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d123      	bne.n	801052e <__ieee754_pow+0x1ee>
 80104e6:	f1b9 0f00 	cmp.w	r9, #0
 80104ea:	da05      	bge.n	80104f8 <__ieee754_pow+0x1b8>
 80104ec:	4602      	mov	r2, r0
 80104ee:	460b      	mov	r3, r1
 80104f0:	2000      	movs	r0, #0
 80104f2:	492a      	ldr	r1, [pc, #168]	; (801059c <__ieee754_pow+0x25c>)
 80104f4:	f7f0 f9ca 	bl	800088c <__aeabi_ddiv>
 80104f8:	2d00      	cmp	r5, #0
 80104fa:	f6bf af40 	bge.w	801037e <__ieee754_pow+0x3e>
 80104fe:	9b04      	ldr	r3, [sp, #16]
 8010500:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010504:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010508:	4323      	orrs	r3, r4
 801050a:	d108      	bne.n	801051e <__ieee754_pow+0x1de>
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	4610      	mov	r0, r2
 8010512:	4619      	mov	r1, r3
 8010514:	f7ef fed8 	bl	80002c8 <__aeabi_dsub>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	e78f      	b.n	801043e <__ieee754_pow+0xfe>
 801051e:	9b04      	ldr	r3, [sp, #16]
 8010520:	2b01      	cmp	r3, #1
 8010522:	f47f af2c 	bne.w	801037e <__ieee754_pow+0x3e>
 8010526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801052a:	4619      	mov	r1, r3
 801052c:	e727      	b.n	801037e <__ieee754_pow+0x3e>
 801052e:	0feb      	lsrs	r3, r5, #31
 8010530:	3b01      	subs	r3, #1
 8010532:	9306      	str	r3, [sp, #24]
 8010534:	9a06      	ldr	r2, [sp, #24]
 8010536:	9b04      	ldr	r3, [sp, #16]
 8010538:	4313      	orrs	r3, r2
 801053a:	d102      	bne.n	8010542 <__ieee754_pow+0x202>
 801053c:	4632      	mov	r2, r6
 801053e:	463b      	mov	r3, r7
 8010540:	e7e6      	b.n	8010510 <__ieee754_pow+0x1d0>
 8010542:	4b19      	ldr	r3, [pc, #100]	; (80105a8 <__ieee754_pow+0x268>)
 8010544:	4598      	cmp	r8, r3
 8010546:	f340 80fb 	ble.w	8010740 <__ieee754_pow+0x400>
 801054a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801054e:	4598      	cmp	r8, r3
 8010550:	4b13      	ldr	r3, [pc, #76]	; (80105a0 <__ieee754_pow+0x260>)
 8010552:	dd0c      	ble.n	801056e <__ieee754_pow+0x22e>
 8010554:	429c      	cmp	r4, r3
 8010556:	dc0f      	bgt.n	8010578 <__ieee754_pow+0x238>
 8010558:	f1b9 0f00 	cmp.w	r9, #0
 801055c:	da0f      	bge.n	801057e <__ieee754_pow+0x23e>
 801055e:	2000      	movs	r0, #0
 8010560:	b009      	add	sp, #36	; 0x24
 8010562:	ecbd 8b06 	vpop	{d8-d10}
 8010566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056a:	f000 bcf3 	b.w	8010f54 <__math_oflow>
 801056e:	429c      	cmp	r4, r3
 8010570:	dbf2      	blt.n	8010558 <__ieee754_pow+0x218>
 8010572:	4b0a      	ldr	r3, [pc, #40]	; (801059c <__ieee754_pow+0x25c>)
 8010574:	429c      	cmp	r4, r3
 8010576:	dd19      	ble.n	80105ac <__ieee754_pow+0x26c>
 8010578:	f1b9 0f00 	cmp.w	r9, #0
 801057c:	dcef      	bgt.n	801055e <__ieee754_pow+0x21e>
 801057e:	2000      	movs	r0, #0
 8010580:	b009      	add	sp, #36	; 0x24
 8010582:	ecbd 8b06 	vpop	{d8-d10}
 8010586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058a:	f000 bcda 	b.w	8010f42 <__math_uflow>
 801058e:	bf00      	nop
 8010590:	fff00000 	.word	0xfff00000
 8010594:	7ff00000 	.word	0x7ff00000
 8010598:	433fffff 	.word	0x433fffff
 801059c:	3ff00000 	.word	0x3ff00000
 80105a0:	3fefffff 	.word	0x3fefffff
 80105a4:	3fe00000 	.word	0x3fe00000
 80105a8:	41e00000 	.word	0x41e00000
 80105ac:	4b60      	ldr	r3, [pc, #384]	; (8010730 <__ieee754_pow+0x3f0>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	f7ef fe8a 	bl	80002c8 <__aeabi_dsub>
 80105b4:	a354      	add	r3, pc, #336	; (adr r3, 8010708 <__ieee754_pow+0x3c8>)
 80105b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ba:	4604      	mov	r4, r0
 80105bc:	460d      	mov	r5, r1
 80105be:	f7f0 f83b 	bl	8000638 <__aeabi_dmul>
 80105c2:	a353      	add	r3, pc, #332	; (adr r3, 8010710 <__ieee754_pow+0x3d0>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	4606      	mov	r6, r0
 80105ca:	460f      	mov	r7, r1
 80105cc:	4620      	mov	r0, r4
 80105ce:	4629      	mov	r1, r5
 80105d0:	f7f0 f832 	bl	8000638 <__aeabi_dmul>
 80105d4:	4b57      	ldr	r3, [pc, #348]	; (8010734 <__ieee754_pow+0x3f4>)
 80105d6:	4682      	mov	sl, r0
 80105d8:	468b      	mov	fp, r1
 80105da:	2200      	movs	r2, #0
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7f0 f82a 	bl	8000638 <__aeabi_dmul>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	a14b      	add	r1, pc, #300	; (adr r1, 8010718 <__ieee754_pow+0x3d8>)
 80105ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105ee:	f7ef fe6b 	bl	80002c8 <__aeabi_dsub>
 80105f2:	4622      	mov	r2, r4
 80105f4:	462b      	mov	r3, r5
 80105f6:	f7f0 f81f 	bl	8000638 <__aeabi_dmul>
 80105fa:	4602      	mov	r2, r0
 80105fc:	460b      	mov	r3, r1
 80105fe:	2000      	movs	r0, #0
 8010600:	494d      	ldr	r1, [pc, #308]	; (8010738 <__ieee754_pow+0x3f8>)
 8010602:	f7ef fe61 	bl	80002c8 <__aeabi_dsub>
 8010606:	4622      	mov	r2, r4
 8010608:	4680      	mov	r8, r0
 801060a:	4689      	mov	r9, r1
 801060c:	462b      	mov	r3, r5
 801060e:	4620      	mov	r0, r4
 8010610:	4629      	mov	r1, r5
 8010612:	f7f0 f811 	bl	8000638 <__aeabi_dmul>
 8010616:	4602      	mov	r2, r0
 8010618:	460b      	mov	r3, r1
 801061a:	4640      	mov	r0, r8
 801061c:	4649      	mov	r1, r9
 801061e:	f7f0 f80b 	bl	8000638 <__aeabi_dmul>
 8010622:	a33f      	add	r3, pc, #252	; (adr r3, 8010720 <__ieee754_pow+0x3e0>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7f0 f806 	bl	8000638 <__aeabi_dmul>
 801062c:	4602      	mov	r2, r0
 801062e:	460b      	mov	r3, r1
 8010630:	4650      	mov	r0, sl
 8010632:	4659      	mov	r1, fp
 8010634:	f7ef fe48 	bl	80002c8 <__aeabi_dsub>
 8010638:	4602      	mov	r2, r0
 801063a:	460b      	mov	r3, r1
 801063c:	4680      	mov	r8, r0
 801063e:	4689      	mov	r9, r1
 8010640:	4630      	mov	r0, r6
 8010642:	4639      	mov	r1, r7
 8010644:	f7ef fe42 	bl	80002cc <__adddf3>
 8010648:	2000      	movs	r0, #0
 801064a:	4632      	mov	r2, r6
 801064c:	463b      	mov	r3, r7
 801064e:	4604      	mov	r4, r0
 8010650:	460d      	mov	r5, r1
 8010652:	f7ef fe39 	bl	80002c8 <__aeabi_dsub>
 8010656:	4602      	mov	r2, r0
 8010658:	460b      	mov	r3, r1
 801065a:	4640      	mov	r0, r8
 801065c:	4649      	mov	r1, r9
 801065e:	f7ef fe33 	bl	80002c8 <__aeabi_dsub>
 8010662:	9b04      	ldr	r3, [sp, #16]
 8010664:	9a06      	ldr	r2, [sp, #24]
 8010666:	3b01      	subs	r3, #1
 8010668:	4313      	orrs	r3, r2
 801066a:	4682      	mov	sl, r0
 801066c:	468b      	mov	fp, r1
 801066e:	f040 81e7 	bne.w	8010a40 <__ieee754_pow+0x700>
 8010672:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010728 <__ieee754_pow+0x3e8>
 8010676:	eeb0 8a47 	vmov.f32	s16, s14
 801067a:	eef0 8a67 	vmov.f32	s17, s15
 801067e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010682:	2600      	movs	r6, #0
 8010684:	4632      	mov	r2, r6
 8010686:	463b      	mov	r3, r7
 8010688:	e9dd 0100 	ldrd	r0, r1, [sp]
 801068c:	f7ef fe1c 	bl	80002c8 <__aeabi_dsub>
 8010690:	4622      	mov	r2, r4
 8010692:	462b      	mov	r3, r5
 8010694:	f7ef ffd0 	bl	8000638 <__aeabi_dmul>
 8010698:	e9dd 2300 	ldrd	r2, r3, [sp]
 801069c:	4680      	mov	r8, r0
 801069e:	4689      	mov	r9, r1
 80106a0:	4650      	mov	r0, sl
 80106a2:	4659      	mov	r1, fp
 80106a4:	f7ef ffc8 	bl	8000638 <__aeabi_dmul>
 80106a8:	4602      	mov	r2, r0
 80106aa:	460b      	mov	r3, r1
 80106ac:	4640      	mov	r0, r8
 80106ae:	4649      	mov	r1, r9
 80106b0:	f7ef fe0c 	bl	80002cc <__adddf3>
 80106b4:	4632      	mov	r2, r6
 80106b6:	463b      	mov	r3, r7
 80106b8:	4680      	mov	r8, r0
 80106ba:	4689      	mov	r9, r1
 80106bc:	4620      	mov	r0, r4
 80106be:	4629      	mov	r1, r5
 80106c0:	f7ef ffba 	bl	8000638 <__aeabi_dmul>
 80106c4:	460b      	mov	r3, r1
 80106c6:	4604      	mov	r4, r0
 80106c8:	460d      	mov	r5, r1
 80106ca:	4602      	mov	r2, r0
 80106cc:	4649      	mov	r1, r9
 80106ce:	4640      	mov	r0, r8
 80106d0:	f7ef fdfc 	bl	80002cc <__adddf3>
 80106d4:	4b19      	ldr	r3, [pc, #100]	; (801073c <__ieee754_pow+0x3fc>)
 80106d6:	4299      	cmp	r1, r3
 80106d8:	ec45 4b19 	vmov	d9, r4, r5
 80106dc:	4606      	mov	r6, r0
 80106de:	460f      	mov	r7, r1
 80106e0:	468b      	mov	fp, r1
 80106e2:	f340 82f1 	ble.w	8010cc8 <__ieee754_pow+0x988>
 80106e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80106ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80106ee:	4303      	orrs	r3, r0
 80106f0:	f000 81e4 	beq.w	8010abc <__ieee754_pow+0x77c>
 80106f4:	ec51 0b18 	vmov	r0, r1, d8
 80106f8:	2200      	movs	r2, #0
 80106fa:	2300      	movs	r3, #0
 80106fc:	f7f0 fa0e 	bl	8000b1c <__aeabi_dcmplt>
 8010700:	3800      	subs	r0, #0
 8010702:	bf18      	it	ne
 8010704:	2001      	movne	r0, #1
 8010706:	e72b      	b.n	8010560 <__ieee754_pow+0x220>
 8010708:	60000000 	.word	0x60000000
 801070c:	3ff71547 	.word	0x3ff71547
 8010710:	f85ddf44 	.word	0xf85ddf44
 8010714:	3e54ae0b 	.word	0x3e54ae0b
 8010718:	55555555 	.word	0x55555555
 801071c:	3fd55555 	.word	0x3fd55555
 8010720:	652b82fe 	.word	0x652b82fe
 8010724:	3ff71547 	.word	0x3ff71547
 8010728:	00000000 	.word	0x00000000
 801072c:	bff00000 	.word	0xbff00000
 8010730:	3ff00000 	.word	0x3ff00000
 8010734:	3fd00000 	.word	0x3fd00000
 8010738:	3fe00000 	.word	0x3fe00000
 801073c:	408fffff 	.word	0x408fffff
 8010740:	4bd5      	ldr	r3, [pc, #852]	; (8010a98 <__ieee754_pow+0x758>)
 8010742:	402b      	ands	r3, r5
 8010744:	2200      	movs	r2, #0
 8010746:	b92b      	cbnz	r3, 8010754 <__ieee754_pow+0x414>
 8010748:	4bd4      	ldr	r3, [pc, #848]	; (8010a9c <__ieee754_pow+0x75c>)
 801074a:	f7ef ff75 	bl	8000638 <__aeabi_dmul>
 801074e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010752:	460c      	mov	r4, r1
 8010754:	1523      	asrs	r3, r4, #20
 8010756:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801075a:	4413      	add	r3, r2
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	4bd0      	ldr	r3, [pc, #832]	; (8010aa0 <__ieee754_pow+0x760>)
 8010760:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010764:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010768:	429c      	cmp	r4, r3
 801076a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801076e:	dd08      	ble.n	8010782 <__ieee754_pow+0x442>
 8010770:	4bcc      	ldr	r3, [pc, #816]	; (8010aa4 <__ieee754_pow+0x764>)
 8010772:	429c      	cmp	r4, r3
 8010774:	f340 8162 	ble.w	8010a3c <__ieee754_pow+0x6fc>
 8010778:	9b05      	ldr	r3, [sp, #20]
 801077a:	3301      	adds	r3, #1
 801077c:	9305      	str	r3, [sp, #20]
 801077e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010782:	2400      	movs	r4, #0
 8010784:	00e3      	lsls	r3, r4, #3
 8010786:	9307      	str	r3, [sp, #28]
 8010788:	4bc7      	ldr	r3, [pc, #796]	; (8010aa8 <__ieee754_pow+0x768>)
 801078a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801078e:	ed93 7b00 	vldr	d7, [r3]
 8010792:	4629      	mov	r1, r5
 8010794:	ec53 2b17 	vmov	r2, r3, d7
 8010798:	eeb0 9a47 	vmov.f32	s18, s14
 801079c:	eef0 9a67 	vmov.f32	s19, s15
 80107a0:	4682      	mov	sl, r0
 80107a2:	f7ef fd91 	bl	80002c8 <__aeabi_dsub>
 80107a6:	4652      	mov	r2, sl
 80107a8:	4606      	mov	r6, r0
 80107aa:	460f      	mov	r7, r1
 80107ac:	462b      	mov	r3, r5
 80107ae:	ec51 0b19 	vmov	r0, r1, d9
 80107b2:	f7ef fd8b 	bl	80002cc <__adddf3>
 80107b6:	4602      	mov	r2, r0
 80107b8:	460b      	mov	r3, r1
 80107ba:	2000      	movs	r0, #0
 80107bc:	49bb      	ldr	r1, [pc, #748]	; (8010aac <__ieee754_pow+0x76c>)
 80107be:	f7f0 f865 	bl	800088c <__aeabi_ddiv>
 80107c2:	ec41 0b1a 	vmov	d10, r0, r1
 80107c6:	4602      	mov	r2, r0
 80107c8:	460b      	mov	r3, r1
 80107ca:	4630      	mov	r0, r6
 80107cc:	4639      	mov	r1, r7
 80107ce:	f7ef ff33 	bl	8000638 <__aeabi_dmul>
 80107d2:	2300      	movs	r3, #0
 80107d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107d8:	9302      	str	r3, [sp, #8]
 80107da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80107de:	46ab      	mov	fp, r5
 80107e0:	106d      	asrs	r5, r5, #1
 80107e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80107e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80107ea:	ec41 0b18 	vmov	d8, r0, r1
 80107ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80107f2:	2200      	movs	r2, #0
 80107f4:	4640      	mov	r0, r8
 80107f6:	4649      	mov	r1, r9
 80107f8:	4614      	mov	r4, r2
 80107fa:	461d      	mov	r5, r3
 80107fc:	f7ef ff1c 	bl	8000638 <__aeabi_dmul>
 8010800:	4602      	mov	r2, r0
 8010802:	460b      	mov	r3, r1
 8010804:	4630      	mov	r0, r6
 8010806:	4639      	mov	r1, r7
 8010808:	f7ef fd5e 	bl	80002c8 <__aeabi_dsub>
 801080c:	ec53 2b19 	vmov	r2, r3, d9
 8010810:	4606      	mov	r6, r0
 8010812:	460f      	mov	r7, r1
 8010814:	4620      	mov	r0, r4
 8010816:	4629      	mov	r1, r5
 8010818:	f7ef fd56 	bl	80002c8 <__aeabi_dsub>
 801081c:	4602      	mov	r2, r0
 801081e:	460b      	mov	r3, r1
 8010820:	4650      	mov	r0, sl
 8010822:	4659      	mov	r1, fp
 8010824:	f7ef fd50 	bl	80002c8 <__aeabi_dsub>
 8010828:	4642      	mov	r2, r8
 801082a:	464b      	mov	r3, r9
 801082c:	f7ef ff04 	bl	8000638 <__aeabi_dmul>
 8010830:	4602      	mov	r2, r0
 8010832:	460b      	mov	r3, r1
 8010834:	4630      	mov	r0, r6
 8010836:	4639      	mov	r1, r7
 8010838:	f7ef fd46 	bl	80002c8 <__aeabi_dsub>
 801083c:	ec53 2b1a 	vmov	r2, r3, d10
 8010840:	f7ef fefa 	bl	8000638 <__aeabi_dmul>
 8010844:	ec53 2b18 	vmov	r2, r3, d8
 8010848:	ec41 0b19 	vmov	d9, r0, r1
 801084c:	ec51 0b18 	vmov	r0, r1, d8
 8010850:	f7ef fef2 	bl	8000638 <__aeabi_dmul>
 8010854:	a37c      	add	r3, pc, #496	; (adr r3, 8010a48 <__ieee754_pow+0x708>)
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	4604      	mov	r4, r0
 801085c:	460d      	mov	r5, r1
 801085e:	f7ef feeb 	bl	8000638 <__aeabi_dmul>
 8010862:	a37b      	add	r3, pc, #492	; (adr r3, 8010a50 <__ieee754_pow+0x710>)
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	f7ef fd30 	bl	80002cc <__adddf3>
 801086c:	4622      	mov	r2, r4
 801086e:	462b      	mov	r3, r5
 8010870:	f7ef fee2 	bl	8000638 <__aeabi_dmul>
 8010874:	a378      	add	r3, pc, #480	; (adr r3, 8010a58 <__ieee754_pow+0x718>)
 8010876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087a:	f7ef fd27 	bl	80002cc <__adddf3>
 801087e:	4622      	mov	r2, r4
 8010880:	462b      	mov	r3, r5
 8010882:	f7ef fed9 	bl	8000638 <__aeabi_dmul>
 8010886:	a376      	add	r3, pc, #472	; (adr r3, 8010a60 <__ieee754_pow+0x720>)
 8010888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088c:	f7ef fd1e 	bl	80002cc <__adddf3>
 8010890:	4622      	mov	r2, r4
 8010892:	462b      	mov	r3, r5
 8010894:	f7ef fed0 	bl	8000638 <__aeabi_dmul>
 8010898:	a373      	add	r3, pc, #460	; (adr r3, 8010a68 <__ieee754_pow+0x728>)
 801089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089e:	f7ef fd15 	bl	80002cc <__adddf3>
 80108a2:	4622      	mov	r2, r4
 80108a4:	462b      	mov	r3, r5
 80108a6:	f7ef fec7 	bl	8000638 <__aeabi_dmul>
 80108aa:	a371      	add	r3, pc, #452	; (adr r3, 8010a70 <__ieee754_pow+0x730>)
 80108ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b0:	f7ef fd0c 	bl	80002cc <__adddf3>
 80108b4:	4622      	mov	r2, r4
 80108b6:	4606      	mov	r6, r0
 80108b8:	460f      	mov	r7, r1
 80108ba:	462b      	mov	r3, r5
 80108bc:	4620      	mov	r0, r4
 80108be:	4629      	mov	r1, r5
 80108c0:	f7ef feba 	bl	8000638 <__aeabi_dmul>
 80108c4:	4602      	mov	r2, r0
 80108c6:	460b      	mov	r3, r1
 80108c8:	4630      	mov	r0, r6
 80108ca:	4639      	mov	r1, r7
 80108cc:	f7ef feb4 	bl	8000638 <__aeabi_dmul>
 80108d0:	4642      	mov	r2, r8
 80108d2:	4604      	mov	r4, r0
 80108d4:	460d      	mov	r5, r1
 80108d6:	464b      	mov	r3, r9
 80108d8:	ec51 0b18 	vmov	r0, r1, d8
 80108dc:	f7ef fcf6 	bl	80002cc <__adddf3>
 80108e0:	ec53 2b19 	vmov	r2, r3, d9
 80108e4:	f7ef fea8 	bl	8000638 <__aeabi_dmul>
 80108e8:	4622      	mov	r2, r4
 80108ea:	462b      	mov	r3, r5
 80108ec:	f7ef fcee 	bl	80002cc <__adddf3>
 80108f0:	4642      	mov	r2, r8
 80108f2:	4682      	mov	sl, r0
 80108f4:	468b      	mov	fp, r1
 80108f6:	464b      	mov	r3, r9
 80108f8:	4640      	mov	r0, r8
 80108fa:	4649      	mov	r1, r9
 80108fc:	f7ef fe9c 	bl	8000638 <__aeabi_dmul>
 8010900:	4b6b      	ldr	r3, [pc, #428]	; (8010ab0 <__ieee754_pow+0x770>)
 8010902:	2200      	movs	r2, #0
 8010904:	4606      	mov	r6, r0
 8010906:	460f      	mov	r7, r1
 8010908:	f7ef fce0 	bl	80002cc <__adddf3>
 801090c:	4652      	mov	r2, sl
 801090e:	465b      	mov	r3, fp
 8010910:	f7ef fcdc 	bl	80002cc <__adddf3>
 8010914:	2000      	movs	r0, #0
 8010916:	4604      	mov	r4, r0
 8010918:	460d      	mov	r5, r1
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	f7ef fe89 	bl	8000638 <__aeabi_dmul>
 8010926:	4b62      	ldr	r3, [pc, #392]	; (8010ab0 <__ieee754_pow+0x770>)
 8010928:	4680      	mov	r8, r0
 801092a:	4689      	mov	r9, r1
 801092c:	2200      	movs	r2, #0
 801092e:	4620      	mov	r0, r4
 8010930:	4629      	mov	r1, r5
 8010932:	f7ef fcc9 	bl	80002c8 <__aeabi_dsub>
 8010936:	4632      	mov	r2, r6
 8010938:	463b      	mov	r3, r7
 801093a:	f7ef fcc5 	bl	80002c8 <__aeabi_dsub>
 801093e:	4602      	mov	r2, r0
 8010940:	460b      	mov	r3, r1
 8010942:	4650      	mov	r0, sl
 8010944:	4659      	mov	r1, fp
 8010946:	f7ef fcbf 	bl	80002c8 <__aeabi_dsub>
 801094a:	ec53 2b18 	vmov	r2, r3, d8
 801094e:	f7ef fe73 	bl	8000638 <__aeabi_dmul>
 8010952:	4622      	mov	r2, r4
 8010954:	4606      	mov	r6, r0
 8010956:	460f      	mov	r7, r1
 8010958:	462b      	mov	r3, r5
 801095a:	ec51 0b19 	vmov	r0, r1, d9
 801095e:	f7ef fe6b 	bl	8000638 <__aeabi_dmul>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4630      	mov	r0, r6
 8010968:	4639      	mov	r1, r7
 801096a:	f7ef fcaf 	bl	80002cc <__adddf3>
 801096e:	4606      	mov	r6, r0
 8010970:	460f      	mov	r7, r1
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	4640      	mov	r0, r8
 8010978:	4649      	mov	r1, r9
 801097a:	f7ef fca7 	bl	80002cc <__adddf3>
 801097e:	a33e      	add	r3, pc, #248	; (adr r3, 8010a78 <__ieee754_pow+0x738>)
 8010980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010984:	2000      	movs	r0, #0
 8010986:	4604      	mov	r4, r0
 8010988:	460d      	mov	r5, r1
 801098a:	f7ef fe55 	bl	8000638 <__aeabi_dmul>
 801098e:	4642      	mov	r2, r8
 8010990:	ec41 0b18 	vmov	d8, r0, r1
 8010994:	464b      	mov	r3, r9
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	f7ef fc95 	bl	80002c8 <__aeabi_dsub>
 801099e:	4602      	mov	r2, r0
 80109a0:	460b      	mov	r3, r1
 80109a2:	4630      	mov	r0, r6
 80109a4:	4639      	mov	r1, r7
 80109a6:	f7ef fc8f 	bl	80002c8 <__aeabi_dsub>
 80109aa:	a335      	add	r3, pc, #212	; (adr r3, 8010a80 <__ieee754_pow+0x740>)
 80109ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b0:	f7ef fe42 	bl	8000638 <__aeabi_dmul>
 80109b4:	a334      	add	r3, pc, #208	; (adr r3, 8010a88 <__ieee754_pow+0x748>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	4606      	mov	r6, r0
 80109bc:	460f      	mov	r7, r1
 80109be:	4620      	mov	r0, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	f7ef fe39 	bl	8000638 <__aeabi_dmul>
 80109c6:	4602      	mov	r2, r0
 80109c8:	460b      	mov	r3, r1
 80109ca:	4630      	mov	r0, r6
 80109cc:	4639      	mov	r1, r7
 80109ce:	f7ef fc7d 	bl	80002cc <__adddf3>
 80109d2:	9a07      	ldr	r2, [sp, #28]
 80109d4:	4b37      	ldr	r3, [pc, #220]	; (8010ab4 <__ieee754_pow+0x774>)
 80109d6:	4413      	add	r3, r2
 80109d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109dc:	f7ef fc76 	bl	80002cc <__adddf3>
 80109e0:	4682      	mov	sl, r0
 80109e2:	9805      	ldr	r0, [sp, #20]
 80109e4:	468b      	mov	fp, r1
 80109e6:	f7ef fdbd 	bl	8000564 <__aeabi_i2d>
 80109ea:	9a07      	ldr	r2, [sp, #28]
 80109ec:	4b32      	ldr	r3, [pc, #200]	; (8010ab8 <__ieee754_pow+0x778>)
 80109ee:	4413      	add	r3, r2
 80109f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109f4:	4606      	mov	r6, r0
 80109f6:	460f      	mov	r7, r1
 80109f8:	4652      	mov	r2, sl
 80109fa:	465b      	mov	r3, fp
 80109fc:	ec51 0b18 	vmov	r0, r1, d8
 8010a00:	f7ef fc64 	bl	80002cc <__adddf3>
 8010a04:	4642      	mov	r2, r8
 8010a06:	464b      	mov	r3, r9
 8010a08:	f7ef fc60 	bl	80002cc <__adddf3>
 8010a0c:	4632      	mov	r2, r6
 8010a0e:	463b      	mov	r3, r7
 8010a10:	f7ef fc5c 	bl	80002cc <__adddf3>
 8010a14:	2000      	movs	r0, #0
 8010a16:	4632      	mov	r2, r6
 8010a18:	463b      	mov	r3, r7
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	460d      	mov	r5, r1
 8010a1e:	f7ef fc53 	bl	80002c8 <__aeabi_dsub>
 8010a22:	4642      	mov	r2, r8
 8010a24:	464b      	mov	r3, r9
 8010a26:	f7ef fc4f 	bl	80002c8 <__aeabi_dsub>
 8010a2a:	ec53 2b18 	vmov	r2, r3, d8
 8010a2e:	f7ef fc4b 	bl	80002c8 <__aeabi_dsub>
 8010a32:	4602      	mov	r2, r0
 8010a34:	460b      	mov	r3, r1
 8010a36:	4650      	mov	r0, sl
 8010a38:	4659      	mov	r1, fp
 8010a3a:	e610      	b.n	801065e <__ieee754_pow+0x31e>
 8010a3c:	2401      	movs	r4, #1
 8010a3e:	e6a1      	b.n	8010784 <__ieee754_pow+0x444>
 8010a40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010a90 <__ieee754_pow+0x750>
 8010a44:	e617      	b.n	8010676 <__ieee754_pow+0x336>
 8010a46:	bf00      	nop
 8010a48:	4a454eef 	.word	0x4a454eef
 8010a4c:	3fca7e28 	.word	0x3fca7e28
 8010a50:	93c9db65 	.word	0x93c9db65
 8010a54:	3fcd864a 	.word	0x3fcd864a
 8010a58:	a91d4101 	.word	0xa91d4101
 8010a5c:	3fd17460 	.word	0x3fd17460
 8010a60:	518f264d 	.word	0x518f264d
 8010a64:	3fd55555 	.word	0x3fd55555
 8010a68:	db6fabff 	.word	0xdb6fabff
 8010a6c:	3fdb6db6 	.word	0x3fdb6db6
 8010a70:	33333303 	.word	0x33333303
 8010a74:	3fe33333 	.word	0x3fe33333
 8010a78:	e0000000 	.word	0xe0000000
 8010a7c:	3feec709 	.word	0x3feec709
 8010a80:	dc3a03fd 	.word	0xdc3a03fd
 8010a84:	3feec709 	.word	0x3feec709
 8010a88:	145b01f5 	.word	0x145b01f5
 8010a8c:	be3e2fe0 	.word	0xbe3e2fe0
 8010a90:	00000000 	.word	0x00000000
 8010a94:	3ff00000 	.word	0x3ff00000
 8010a98:	7ff00000 	.word	0x7ff00000
 8010a9c:	43400000 	.word	0x43400000
 8010aa0:	0003988e 	.word	0x0003988e
 8010aa4:	000bb679 	.word	0x000bb679
 8010aa8:	08011990 	.word	0x08011990
 8010aac:	3ff00000 	.word	0x3ff00000
 8010ab0:	40080000 	.word	0x40080000
 8010ab4:	080119b0 	.word	0x080119b0
 8010ab8:	080119a0 	.word	0x080119a0
 8010abc:	a3b5      	add	r3, pc, #724	; (adr r3, 8010d94 <__ieee754_pow+0xa54>)
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	4640      	mov	r0, r8
 8010ac4:	4649      	mov	r1, r9
 8010ac6:	f7ef fc01 	bl	80002cc <__adddf3>
 8010aca:	4622      	mov	r2, r4
 8010acc:	ec41 0b1a 	vmov	d10, r0, r1
 8010ad0:	462b      	mov	r3, r5
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	4639      	mov	r1, r7
 8010ad6:	f7ef fbf7 	bl	80002c8 <__aeabi_dsub>
 8010ada:	4602      	mov	r2, r0
 8010adc:	460b      	mov	r3, r1
 8010ade:	ec51 0b1a 	vmov	r0, r1, d10
 8010ae2:	f7f0 f839 	bl	8000b58 <__aeabi_dcmpgt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f47f ae04 	bne.w	80106f4 <__ieee754_pow+0x3b4>
 8010aec:	4aa4      	ldr	r2, [pc, #656]	; (8010d80 <__ieee754_pow+0xa40>)
 8010aee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010af2:	4293      	cmp	r3, r2
 8010af4:	f340 8108 	ble.w	8010d08 <__ieee754_pow+0x9c8>
 8010af8:	151b      	asrs	r3, r3, #20
 8010afa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010afe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010b02:	fa4a f303 	asr.w	r3, sl, r3
 8010b06:	445b      	add	r3, fp
 8010b08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010b0c:	4e9d      	ldr	r6, [pc, #628]	; (8010d84 <__ieee754_pow+0xa44>)
 8010b0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010b12:	4116      	asrs	r6, r2
 8010b14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010b18:	2000      	movs	r0, #0
 8010b1a:	ea23 0106 	bic.w	r1, r3, r6
 8010b1e:	f1c2 0214 	rsb	r2, r2, #20
 8010b22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010b26:	fa4a fa02 	asr.w	sl, sl, r2
 8010b2a:	f1bb 0f00 	cmp.w	fp, #0
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	4620      	mov	r0, r4
 8010b34:	4629      	mov	r1, r5
 8010b36:	bfb8      	it	lt
 8010b38:	f1ca 0a00 	rsblt	sl, sl, #0
 8010b3c:	f7ef fbc4 	bl	80002c8 <__aeabi_dsub>
 8010b40:	ec41 0b19 	vmov	d9, r0, r1
 8010b44:	4642      	mov	r2, r8
 8010b46:	464b      	mov	r3, r9
 8010b48:	ec51 0b19 	vmov	r0, r1, d9
 8010b4c:	f7ef fbbe 	bl	80002cc <__adddf3>
 8010b50:	a37b      	add	r3, pc, #492	; (adr r3, 8010d40 <__ieee754_pow+0xa00>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	2000      	movs	r0, #0
 8010b58:	4604      	mov	r4, r0
 8010b5a:	460d      	mov	r5, r1
 8010b5c:	f7ef fd6c 	bl	8000638 <__aeabi_dmul>
 8010b60:	ec53 2b19 	vmov	r2, r3, d9
 8010b64:	4606      	mov	r6, r0
 8010b66:	460f      	mov	r7, r1
 8010b68:	4620      	mov	r0, r4
 8010b6a:	4629      	mov	r1, r5
 8010b6c:	f7ef fbac 	bl	80002c8 <__aeabi_dsub>
 8010b70:	4602      	mov	r2, r0
 8010b72:	460b      	mov	r3, r1
 8010b74:	4640      	mov	r0, r8
 8010b76:	4649      	mov	r1, r9
 8010b78:	f7ef fba6 	bl	80002c8 <__aeabi_dsub>
 8010b7c:	a372      	add	r3, pc, #456	; (adr r3, 8010d48 <__ieee754_pow+0xa08>)
 8010b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b82:	f7ef fd59 	bl	8000638 <__aeabi_dmul>
 8010b86:	a372      	add	r3, pc, #456	; (adr r3, 8010d50 <__ieee754_pow+0xa10>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	4680      	mov	r8, r0
 8010b8e:	4689      	mov	r9, r1
 8010b90:	4620      	mov	r0, r4
 8010b92:	4629      	mov	r1, r5
 8010b94:	f7ef fd50 	bl	8000638 <__aeabi_dmul>
 8010b98:	4602      	mov	r2, r0
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	4649      	mov	r1, r9
 8010ba0:	f7ef fb94 	bl	80002cc <__adddf3>
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	460d      	mov	r5, r1
 8010ba8:	4602      	mov	r2, r0
 8010baa:	460b      	mov	r3, r1
 8010bac:	4630      	mov	r0, r6
 8010bae:	4639      	mov	r1, r7
 8010bb0:	f7ef fb8c 	bl	80002cc <__adddf3>
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	463b      	mov	r3, r7
 8010bb8:	4680      	mov	r8, r0
 8010bba:	4689      	mov	r9, r1
 8010bbc:	f7ef fb84 	bl	80002c8 <__aeabi_dsub>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	f7ef fb7e 	bl	80002c8 <__aeabi_dsub>
 8010bcc:	4642      	mov	r2, r8
 8010bce:	4606      	mov	r6, r0
 8010bd0:	460f      	mov	r7, r1
 8010bd2:	464b      	mov	r3, r9
 8010bd4:	4640      	mov	r0, r8
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	f7ef fd2e 	bl	8000638 <__aeabi_dmul>
 8010bdc:	a35e      	add	r3, pc, #376	; (adr r3, 8010d58 <__ieee754_pow+0xa18>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	4604      	mov	r4, r0
 8010be4:	460d      	mov	r5, r1
 8010be6:	f7ef fd27 	bl	8000638 <__aeabi_dmul>
 8010bea:	a35d      	add	r3, pc, #372	; (adr r3, 8010d60 <__ieee754_pow+0xa20>)
 8010bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf0:	f7ef fb6a 	bl	80002c8 <__aeabi_dsub>
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	462b      	mov	r3, r5
 8010bf8:	f7ef fd1e 	bl	8000638 <__aeabi_dmul>
 8010bfc:	a35a      	add	r3, pc, #360	; (adr r3, 8010d68 <__ieee754_pow+0xa28>)
 8010bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c02:	f7ef fb63 	bl	80002cc <__adddf3>
 8010c06:	4622      	mov	r2, r4
 8010c08:	462b      	mov	r3, r5
 8010c0a:	f7ef fd15 	bl	8000638 <__aeabi_dmul>
 8010c0e:	a358      	add	r3, pc, #352	; (adr r3, 8010d70 <__ieee754_pow+0xa30>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	f7ef fb58 	bl	80002c8 <__aeabi_dsub>
 8010c18:	4622      	mov	r2, r4
 8010c1a:	462b      	mov	r3, r5
 8010c1c:	f7ef fd0c 	bl	8000638 <__aeabi_dmul>
 8010c20:	a355      	add	r3, pc, #340	; (adr r3, 8010d78 <__ieee754_pow+0xa38>)
 8010c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c26:	f7ef fb51 	bl	80002cc <__adddf3>
 8010c2a:	4622      	mov	r2, r4
 8010c2c:	462b      	mov	r3, r5
 8010c2e:	f7ef fd03 	bl	8000638 <__aeabi_dmul>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	4640      	mov	r0, r8
 8010c38:	4649      	mov	r1, r9
 8010c3a:	f7ef fb45 	bl	80002c8 <__aeabi_dsub>
 8010c3e:	4604      	mov	r4, r0
 8010c40:	460d      	mov	r5, r1
 8010c42:	4602      	mov	r2, r0
 8010c44:	460b      	mov	r3, r1
 8010c46:	4640      	mov	r0, r8
 8010c48:	4649      	mov	r1, r9
 8010c4a:	f7ef fcf5 	bl	8000638 <__aeabi_dmul>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	ec41 0b19 	vmov	d9, r0, r1
 8010c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c58:	4620      	mov	r0, r4
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f7ef fb34 	bl	80002c8 <__aeabi_dsub>
 8010c60:	4602      	mov	r2, r0
 8010c62:	460b      	mov	r3, r1
 8010c64:	ec51 0b19 	vmov	r0, r1, d9
 8010c68:	f7ef fe10 	bl	800088c <__aeabi_ddiv>
 8010c6c:	4632      	mov	r2, r6
 8010c6e:	4604      	mov	r4, r0
 8010c70:	460d      	mov	r5, r1
 8010c72:	463b      	mov	r3, r7
 8010c74:	4640      	mov	r0, r8
 8010c76:	4649      	mov	r1, r9
 8010c78:	f7ef fcde 	bl	8000638 <__aeabi_dmul>
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	463b      	mov	r3, r7
 8010c80:	f7ef fb24 	bl	80002cc <__adddf3>
 8010c84:	4602      	mov	r2, r0
 8010c86:	460b      	mov	r3, r1
 8010c88:	4620      	mov	r0, r4
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	f7ef fb1c 	bl	80002c8 <__aeabi_dsub>
 8010c90:	4642      	mov	r2, r8
 8010c92:	464b      	mov	r3, r9
 8010c94:	f7ef fb18 	bl	80002c8 <__aeabi_dsub>
 8010c98:	460b      	mov	r3, r1
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	493a      	ldr	r1, [pc, #232]	; (8010d88 <__ieee754_pow+0xa48>)
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f7ef fb12 	bl	80002c8 <__aeabi_dsub>
 8010ca4:	ec41 0b10 	vmov	d0, r0, r1
 8010ca8:	ee10 3a90 	vmov	r3, s1
 8010cac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cb4:	da2b      	bge.n	8010d0e <__ieee754_pow+0x9ce>
 8010cb6:	4650      	mov	r0, sl
 8010cb8:	f000 fb0a 	bl	80112d0 <scalbn>
 8010cbc:	ec51 0b10 	vmov	r0, r1, d0
 8010cc0:	ec53 2b18 	vmov	r2, r3, d8
 8010cc4:	f7ff bbed 	b.w	80104a2 <__ieee754_pow+0x162>
 8010cc8:	4b30      	ldr	r3, [pc, #192]	; (8010d8c <__ieee754_pow+0xa4c>)
 8010cca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010cce:	429e      	cmp	r6, r3
 8010cd0:	f77f af0c 	ble.w	8010aec <__ieee754_pow+0x7ac>
 8010cd4:	4b2e      	ldr	r3, [pc, #184]	; (8010d90 <__ieee754_pow+0xa50>)
 8010cd6:	440b      	add	r3, r1
 8010cd8:	4303      	orrs	r3, r0
 8010cda:	d009      	beq.n	8010cf0 <__ieee754_pow+0x9b0>
 8010cdc:	ec51 0b18 	vmov	r0, r1, d8
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f7ef ff1a 	bl	8000b1c <__aeabi_dcmplt>
 8010ce8:	3800      	subs	r0, #0
 8010cea:	bf18      	it	ne
 8010cec:	2001      	movne	r0, #1
 8010cee:	e447      	b.n	8010580 <__ieee754_pow+0x240>
 8010cf0:	4622      	mov	r2, r4
 8010cf2:	462b      	mov	r3, r5
 8010cf4:	f7ef fae8 	bl	80002c8 <__aeabi_dsub>
 8010cf8:	4642      	mov	r2, r8
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	f7ef ff22 	bl	8000b44 <__aeabi_dcmpge>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	f43f aef3 	beq.w	8010aec <__ieee754_pow+0x7ac>
 8010d06:	e7e9      	b.n	8010cdc <__ieee754_pow+0x99c>
 8010d08:	f04f 0a00 	mov.w	sl, #0
 8010d0c:	e71a      	b.n	8010b44 <__ieee754_pow+0x804>
 8010d0e:	ec51 0b10 	vmov	r0, r1, d0
 8010d12:	4619      	mov	r1, r3
 8010d14:	e7d4      	b.n	8010cc0 <__ieee754_pow+0x980>
 8010d16:	491c      	ldr	r1, [pc, #112]	; (8010d88 <__ieee754_pow+0xa48>)
 8010d18:	2000      	movs	r0, #0
 8010d1a:	f7ff bb30 	b.w	801037e <__ieee754_pow+0x3e>
 8010d1e:	2000      	movs	r0, #0
 8010d20:	2100      	movs	r1, #0
 8010d22:	f7ff bb2c 	b.w	801037e <__ieee754_pow+0x3e>
 8010d26:	4630      	mov	r0, r6
 8010d28:	4639      	mov	r1, r7
 8010d2a:	f7ff bb28 	b.w	801037e <__ieee754_pow+0x3e>
 8010d2e:	9204      	str	r2, [sp, #16]
 8010d30:	f7ff bb7a 	b.w	8010428 <__ieee754_pow+0xe8>
 8010d34:	2300      	movs	r3, #0
 8010d36:	f7ff bb64 	b.w	8010402 <__ieee754_pow+0xc2>
 8010d3a:	bf00      	nop
 8010d3c:	f3af 8000 	nop.w
 8010d40:	00000000 	.word	0x00000000
 8010d44:	3fe62e43 	.word	0x3fe62e43
 8010d48:	fefa39ef 	.word	0xfefa39ef
 8010d4c:	3fe62e42 	.word	0x3fe62e42
 8010d50:	0ca86c39 	.word	0x0ca86c39
 8010d54:	be205c61 	.word	0xbe205c61
 8010d58:	72bea4d0 	.word	0x72bea4d0
 8010d5c:	3e663769 	.word	0x3e663769
 8010d60:	c5d26bf1 	.word	0xc5d26bf1
 8010d64:	3ebbbd41 	.word	0x3ebbbd41
 8010d68:	af25de2c 	.word	0xaf25de2c
 8010d6c:	3f11566a 	.word	0x3f11566a
 8010d70:	16bebd93 	.word	0x16bebd93
 8010d74:	3f66c16c 	.word	0x3f66c16c
 8010d78:	5555553e 	.word	0x5555553e
 8010d7c:	3fc55555 	.word	0x3fc55555
 8010d80:	3fe00000 	.word	0x3fe00000
 8010d84:	000fffff 	.word	0x000fffff
 8010d88:	3ff00000 	.word	0x3ff00000
 8010d8c:	4090cbff 	.word	0x4090cbff
 8010d90:	3f6f3400 	.word	0x3f6f3400
 8010d94:	652b82fe 	.word	0x652b82fe
 8010d98:	3c971547 	.word	0x3c971547

08010d9c <__ieee754_sqrt>:
 8010d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	ec55 4b10 	vmov	r4, r5, d0
 8010da4:	4e55      	ldr	r6, [pc, #340]	; (8010efc <__ieee754_sqrt+0x160>)
 8010da6:	43ae      	bics	r6, r5
 8010da8:	ee10 0a10 	vmov	r0, s0
 8010dac:	ee10 3a10 	vmov	r3, s0
 8010db0:	462a      	mov	r2, r5
 8010db2:	4629      	mov	r1, r5
 8010db4:	d110      	bne.n	8010dd8 <__ieee754_sqrt+0x3c>
 8010db6:	ee10 2a10 	vmov	r2, s0
 8010dba:	462b      	mov	r3, r5
 8010dbc:	f7ef fc3c 	bl	8000638 <__aeabi_dmul>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	f7ef fa80 	bl	80002cc <__adddf3>
 8010dcc:	4604      	mov	r4, r0
 8010dce:	460d      	mov	r5, r1
 8010dd0:	ec45 4b10 	vmov	d0, r4, r5
 8010dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd8:	2d00      	cmp	r5, #0
 8010dda:	dc10      	bgt.n	8010dfe <__ieee754_sqrt+0x62>
 8010ddc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010de0:	4330      	orrs	r0, r6
 8010de2:	d0f5      	beq.n	8010dd0 <__ieee754_sqrt+0x34>
 8010de4:	b15d      	cbz	r5, 8010dfe <__ieee754_sqrt+0x62>
 8010de6:	ee10 2a10 	vmov	r2, s0
 8010dea:	462b      	mov	r3, r5
 8010dec:	ee10 0a10 	vmov	r0, s0
 8010df0:	f7ef fa6a 	bl	80002c8 <__aeabi_dsub>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	f7ef fd48 	bl	800088c <__aeabi_ddiv>
 8010dfc:	e7e6      	b.n	8010dcc <__ieee754_sqrt+0x30>
 8010dfe:	1512      	asrs	r2, r2, #20
 8010e00:	d074      	beq.n	8010eec <__ieee754_sqrt+0x150>
 8010e02:	07d4      	lsls	r4, r2, #31
 8010e04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010e08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010e10:	bf5e      	ittt	pl
 8010e12:	0fda      	lsrpl	r2, r3, #31
 8010e14:	005b      	lslpl	r3, r3, #1
 8010e16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	0fda      	lsrs	r2, r3, #31
 8010e1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010e22:	107f      	asrs	r7, r7, #1
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	2516      	movs	r5, #22
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010e2e:	1886      	adds	r6, r0, r2
 8010e30:	428e      	cmp	r6, r1
 8010e32:	bfde      	ittt	le
 8010e34:	1b89      	suble	r1, r1, r6
 8010e36:	18b0      	addle	r0, r6, r2
 8010e38:	18a4      	addle	r4, r4, r2
 8010e3a:	0049      	lsls	r1, r1, #1
 8010e3c:	3d01      	subs	r5, #1
 8010e3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010e42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010e46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010e4a:	d1f0      	bne.n	8010e2e <__ieee754_sqrt+0x92>
 8010e4c:	462a      	mov	r2, r5
 8010e4e:	f04f 0e20 	mov.w	lr, #32
 8010e52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010e56:	4281      	cmp	r1, r0
 8010e58:	eb06 0c05 	add.w	ip, r6, r5
 8010e5c:	dc02      	bgt.n	8010e64 <__ieee754_sqrt+0xc8>
 8010e5e:	d113      	bne.n	8010e88 <__ieee754_sqrt+0xec>
 8010e60:	459c      	cmp	ip, r3
 8010e62:	d811      	bhi.n	8010e88 <__ieee754_sqrt+0xec>
 8010e64:	f1bc 0f00 	cmp.w	ip, #0
 8010e68:	eb0c 0506 	add.w	r5, ip, r6
 8010e6c:	da43      	bge.n	8010ef6 <__ieee754_sqrt+0x15a>
 8010e6e:	2d00      	cmp	r5, #0
 8010e70:	db41      	blt.n	8010ef6 <__ieee754_sqrt+0x15a>
 8010e72:	f100 0801 	add.w	r8, r0, #1
 8010e76:	1a09      	subs	r1, r1, r0
 8010e78:	459c      	cmp	ip, r3
 8010e7a:	bf88      	it	hi
 8010e7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010e80:	eba3 030c 	sub.w	r3, r3, ip
 8010e84:	4432      	add	r2, r6
 8010e86:	4640      	mov	r0, r8
 8010e88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010e8c:	f1be 0e01 	subs.w	lr, lr, #1
 8010e90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010e94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010e98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010e9c:	d1db      	bne.n	8010e56 <__ieee754_sqrt+0xba>
 8010e9e:	430b      	orrs	r3, r1
 8010ea0:	d006      	beq.n	8010eb0 <__ieee754_sqrt+0x114>
 8010ea2:	1c50      	adds	r0, r2, #1
 8010ea4:	bf13      	iteet	ne
 8010ea6:	3201      	addne	r2, #1
 8010ea8:	3401      	addeq	r4, #1
 8010eaa:	4672      	moveq	r2, lr
 8010eac:	f022 0201 	bicne.w	r2, r2, #1
 8010eb0:	1063      	asrs	r3, r4, #1
 8010eb2:	0852      	lsrs	r2, r2, #1
 8010eb4:	07e1      	lsls	r1, r4, #31
 8010eb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010eba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010ebe:	bf48      	it	mi
 8010ec0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010ec4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010ec8:	4614      	mov	r4, r2
 8010eca:	e781      	b.n	8010dd0 <__ieee754_sqrt+0x34>
 8010ecc:	0ad9      	lsrs	r1, r3, #11
 8010ece:	3815      	subs	r0, #21
 8010ed0:	055b      	lsls	r3, r3, #21
 8010ed2:	2900      	cmp	r1, #0
 8010ed4:	d0fa      	beq.n	8010ecc <__ieee754_sqrt+0x130>
 8010ed6:	02cd      	lsls	r5, r1, #11
 8010ed8:	d50a      	bpl.n	8010ef0 <__ieee754_sqrt+0x154>
 8010eda:	f1c2 0420 	rsb	r4, r2, #32
 8010ede:	fa23 f404 	lsr.w	r4, r3, r4
 8010ee2:	1e55      	subs	r5, r2, #1
 8010ee4:	4093      	lsls	r3, r2
 8010ee6:	4321      	orrs	r1, r4
 8010ee8:	1b42      	subs	r2, r0, r5
 8010eea:	e78a      	b.n	8010e02 <__ieee754_sqrt+0x66>
 8010eec:	4610      	mov	r0, r2
 8010eee:	e7f0      	b.n	8010ed2 <__ieee754_sqrt+0x136>
 8010ef0:	0049      	lsls	r1, r1, #1
 8010ef2:	3201      	adds	r2, #1
 8010ef4:	e7ef      	b.n	8010ed6 <__ieee754_sqrt+0x13a>
 8010ef6:	4680      	mov	r8, r0
 8010ef8:	e7bd      	b.n	8010e76 <__ieee754_sqrt+0xda>
 8010efa:	bf00      	nop
 8010efc:	7ff00000 	.word	0x7ff00000

08010f00 <__ieee754_sqrtf>:
 8010f00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f04:	4770      	bx	lr

08010f06 <with_errno>:
 8010f06:	b570      	push	{r4, r5, r6, lr}
 8010f08:	4604      	mov	r4, r0
 8010f0a:	460d      	mov	r5, r1
 8010f0c:	4616      	mov	r6, r2
 8010f0e:	f7f9 fab7 	bl	800a480 <__errno>
 8010f12:	4629      	mov	r1, r5
 8010f14:	6006      	str	r6, [r0, #0]
 8010f16:	4620      	mov	r0, r4
 8010f18:	bd70      	pop	{r4, r5, r6, pc}

08010f1a <xflow>:
 8010f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f1c:	4614      	mov	r4, r2
 8010f1e:	461d      	mov	r5, r3
 8010f20:	b108      	cbz	r0, 8010f26 <xflow+0xc>
 8010f22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010f26:	e9cd 2300 	strd	r2, r3, [sp]
 8010f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4629      	mov	r1, r5
 8010f32:	f7ef fb81 	bl	8000638 <__aeabi_dmul>
 8010f36:	2222      	movs	r2, #34	; 0x22
 8010f38:	b003      	add	sp, #12
 8010f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f3e:	f7ff bfe2 	b.w	8010f06 <with_errno>

08010f42 <__math_uflow>:
 8010f42:	b508      	push	{r3, lr}
 8010f44:	2200      	movs	r2, #0
 8010f46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010f4a:	f7ff ffe6 	bl	8010f1a <xflow>
 8010f4e:	ec41 0b10 	vmov	d0, r0, r1
 8010f52:	bd08      	pop	{r3, pc}

08010f54 <__math_oflow>:
 8010f54:	b508      	push	{r3, lr}
 8010f56:	2200      	movs	r2, #0
 8010f58:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010f5c:	f7ff ffdd 	bl	8010f1a <xflow>
 8010f60:	ec41 0b10 	vmov	d0, r0, r1
 8010f64:	bd08      	pop	{r3, pc}
	...

08010f68 <atan>:
 8010f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6c:	ec55 4b10 	vmov	r4, r5, d0
 8010f70:	4bc3      	ldr	r3, [pc, #780]	; (8011280 <atan+0x318>)
 8010f72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010f76:	429e      	cmp	r6, r3
 8010f78:	46ab      	mov	fp, r5
 8010f7a:	dd18      	ble.n	8010fae <atan+0x46>
 8010f7c:	4bc1      	ldr	r3, [pc, #772]	; (8011284 <atan+0x31c>)
 8010f7e:	429e      	cmp	r6, r3
 8010f80:	dc01      	bgt.n	8010f86 <atan+0x1e>
 8010f82:	d109      	bne.n	8010f98 <atan+0x30>
 8010f84:	b144      	cbz	r4, 8010f98 <atan+0x30>
 8010f86:	4622      	mov	r2, r4
 8010f88:	462b      	mov	r3, r5
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	f7ef f99d 	bl	80002cc <__adddf3>
 8010f92:	4604      	mov	r4, r0
 8010f94:	460d      	mov	r5, r1
 8010f96:	e006      	b.n	8010fa6 <atan+0x3e>
 8010f98:	f1bb 0f00 	cmp.w	fp, #0
 8010f9c:	f300 8131 	bgt.w	8011202 <atan+0x29a>
 8010fa0:	a59b      	add	r5, pc, #620	; (adr r5, 8011210 <atan+0x2a8>)
 8010fa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010fa6:	ec45 4b10 	vmov	d0, r4, r5
 8010faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	4bb6      	ldr	r3, [pc, #728]	; (8011288 <atan+0x320>)
 8010fb0:	429e      	cmp	r6, r3
 8010fb2:	dc14      	bgt.n	8010fde <atan+0x76>
 8010fb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010fb8:	429e      	cmp	r6, r3
 8010fba:	dc0d      	bgt.n	8010fd8 <atan+0x70>
 8010fbc:	a396      	add	r3, pc, #600	; (adr r3, 8011218 <atan+0x2b0>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	ee10 0a10 	vmov	r0, s0
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	f7ef f980 	bl	80002cc <__adddf3>
 8010fcc:	4baf      	ldr	r3, [pc, #700]	; (801128c <atan+0x324>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f7ef fdc2 	bl	8000b58 <__aeabi_dcmpgt>
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d1e6      	bne.n	8010fa6 <atan+0x3e>
 8010fd8:	f04f 3aff 	mov.w	sl, #4294967295
 8010fdc:	e02b      	b.n	8011036 <atan+0xce>
 8010fde:	f000 f963 	bl	80112a8 <fabs>
 8010fe2:	4bab      	ldr	r3, [pc, #684]	; (8011290 <atan+0x328>)
 8010fe4:	429e      	cmp	r6, r3
 8010fe6:	ec55 4b10 	vmov	r4, r5, d0
 8010fea:	f300 80bf 	bgt.w	801116c <atan+0x204>
 8010fee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010ff2:	429e      	cmp	r6, r3
 8010ff4:	f300 80a0 	bgt.w	8011138 <atan+0x1d0>
 8010ff8:	ee10 2a10 	vmov	r2, s0
 8010ffc:	ee10 0a10 	vmov	r0, s0
 8011000:	462b      	mov	r3, r5
 8011002:	4629      	mov	r1, r5
 8011004:	f7ef f962 	bl	80002cc <__adddf3>
 8011008:	4ba0      	ldr	r3, [pc, #640]	; (801128c <atan+0x324>)
 801100a:	2200      	movs	r2, #0
 801100c:	f7ef f95c 	bl	80002c8 <__aeabi_dsub>
 8011010:	2200      	movs	r2, #0
 8011012:	4606      	mov	r6, r0
 8011014:	460f      	mov	r7, r1
 8011016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801101a:	4620      	mov	r0, r4
 801101c:	4629      	mov	r1, r5
 801101e:	f7ef f955 	bl	80002cc <__adddf3>
 8011022:	4602      	mov	r2, r0
 8011024:	460b      	mov	r3, r1
 8011026:	4630      	mov	r0, r6
 8011028:	4639      	mov	r1, r7
 801102a:	f7ef fc2f 	bl	800088c <__aeabi_ddiv>
 801102e:	f04f 0a00 	mov.w	sl, #0
 8011032:	4604      	mov	r4, r0
 8011034:	460d      	mov	r5, r1
 8011036:	4622      	mov	r2, r4
 8011038:	462b      	mov	r3, r5
 801103a:	4620      	mov	r0, r4
 801103c:	4629      	mov	r1, r5
 801103e:	f7ef fafb 	bl	8000638 <__aeabi_dmul>
 8011042:	4602      	mov	r2, r0
 8011044:	460b      	mov	r3, r1
 8011046:	4680      	mov	r8, r0
 8011048:	4689      	mov	r9, r1
 801104a:	f7ef faf5 	bl	8000638 <__aeabi_dmul>
 801104e:	a374      	add	r3, pc, #464	; (adr r3, 8011220 <atan+0x2b8>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	4606      	mov	r6, r0
 8011056:	460f      	mov	r7, r1
 8011058:	f7ef faee 	bl	8000638 <__aeabi_dmul>
 801105c:	a372      	add	r3, pc, #456	; (adr r3, 8011228 <atan+0x2c0>)
 801105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011062:	f7ef f933 	bl	80002cc <__adddf3>
 8011066:	4632      	mov	r2, r6
 8011068:	463b      	mov	r3, r7
 801106a:	f7ef fae5 	bl	8000638 <__aeabi_dmul>
 801106e:	a370      	add	r3, pc, #448	; (adr r3, 8011230 <atan+0x2c8>)
 8011070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011074:	f7ef f92a 	bl	80002cc <__adddf3>
 8011078:	4632      	mov	r2, r6
 801107a:	463b      	mov	r3, r7
 801107c:	f7ef fadc 	bl	8000638 <__aeabi_dmul>
 8011080:	a36d      	add	r3, pc, #436	; (adr r3, 8011238 <atan+0x2d0>)
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	f7ef f921 	bl	80002cc <__adddf3>
 801108a:	4632      	mov	r2, r6
 801108c:	463b      	mov	r3, r7
 801108e:	f7ef fad3 	bl	8000638 <__aeabi_dmul>
 8011092:	a36b      	add	r3, pc, #428	; (adr r3, 8011240 <atan+0x2d8>)
 8011094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011098:	f7ef f918 	bl	80002cc <__adddf3>
 801109c:	4632      	mov	r2, r6
 801109e:	463b      	mov	r3, r7
 80110a0:	f7ef faca 	bl	8000638 <__aeabi_dmul>
 80110a4:	a368      	add	r3, pc, #416	; (adr r3, 8011248 <atan+0x2e0>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	f7ef f90f 	bl	80002cc <__adddf3>
 80110ae:	4642      	mov	r2, r8
 80110b0:	464b      	mov	r3, r9
 80110b2:	f7ef fac1 	bl	8000638 <__aeabi_dmul>
 80110b6:	a366      	add	r3, pc, #408	; (adr r3, 8011250 <atan+0x2e8>)
 80110b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110bc:	4680      	mov	r8, r0
 80110be:	4689      	mov	r9, r1
 80110c0:	4630      	mov	r0, r6
 80110c2:	4639      	mov	r1, r7
 80110c4:	f7ef fab8 	bl	8000638 <__aeabi_dmul>
 80110c8:	a363      	add	r3, pc, #396	; (adr r3, 8011258 <atan+0x2f0>)
 80110ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ce:	f7ef f8fb 	bl	80002c8 <__aeabi_dsub>
 80110d2:	4632      	mov	r2, r6
 80110d4:	463b      	mov	r3, r7
 80110d6:	f7ef faaf 	bl	8000638 <__aeabi_dmul>
 80110da:	a361      	add	r3, pc, #388	; (adr r3, 8011260 <atan+0x2f8>)
 80110dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e0:	f7ef f8f2 	bl	80002c8 <__aeabi_dsub>
 80110e4:	4632      	mov	r2, r6
 80110e6:	463b      	mov	r3, r7
 80110e8:	f7ef faa6 	bl	8000638 <__aeabi_dmul>
 80110ec:	a35e      	add	r3, pc, #376	; (adr r3, 8011268 <atan+0x300>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	f7ef f8e9 	bl	80002c8 <__aeabi_dsub>
 80110f6:	4632      	mov	r2, r6
 80110f8:	463b      	mov	r3, r7
 80110fa:	f7ef fa9d 	bl	8000638 <__aeabi_dmul>
 80110fe:	a35c      	add	r3, pc, #368	; (adr r3, 8011270 <atan+0x308>)
 8011100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011104:	f7ef f8e0 	bl	80002c8 <__aeabi_dsub>
 8011108:	4632      	mov	r2, r6
 801110a:	463b      	mov	r3, r7
 801110c:	f7ef fa94 	bl	8000638 <__aeabi_dmul>
 8011110:	4602      	mov	r2, r0
 8011112:	460b      	mov	r3, r1
 8011114:	4640      	mov	r0, r8
 8011116:	4649      	mov	r1, r9
 8011118:	f7ef f8d8 	bl	80002cc <__adddf3>
 801111c:	4622      	mov	r2, r4
 801111e:	462b      	mov	r3, r5
 8011120:	f7ef fa8a 	bl	8000638 <__aeabi_dmul>
 8011124:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	d14b      	bne.n	80111c6 <atan+0x25e>
 801112e:	4620      	mov	r0, r4
 8011130:	4629      	mov	r1, r5
 8011132:	f7ef f8c9 	bl	80002c8 <__aeabi_dsub>
 8011136:	e72c      	b.n	8010f92 <atan+0x2a>
 8011138:	ee10 0a10 	vmov	r0, s0
 801113c:	4b53      	ldr	r3, [pc, #332]	; (801128c <atan+0x324>)
 801113e:	2200      	movs	r2, #0
 8011140:	4629      	mov	r1, r5
 8011142:	f7ef f8c1 	bl	80002c8 <__aeabi_dsub>
 8011146:	4b51      	ldr	r3, [pc, #324]	; (801128c <atan+0x324>)
 8011148:	4606      	mov	r6, r0
 801114a:	460f      	mov	r7, r1
 801114c:	2200      	movs	r2, #0
 801114e:	4620      	mov	r0, r4
 8011150:	4629      	mov	r1, r5
 8011152:	f7ef f8bb 	bl	80002cc <__adddf3>
 8011156:	4602      	mov	r2, r0
 8011158:	460b      	mov	r3, r1
 801115a:	4630      	mov	r0, r6
 801115c:	4639      	mov	r1, r7
 801115e:	f7ef fb95 	bl	800088c <__aeabi_ddiv>
 8011162:	f04f 0a01 	mov.w	sl, #1
 8011166:	4604      	mov	r4, r0
 8011168:	460d      	mov	r5, r1
 801116a:	e764      	b.n	8011036 <atan+0xce>
 801116c:	4b49      	ldr	r3, [pc, #292]	; (8011294 <atan+0x32c>)
 801116e:	429e      	cmp	r6, r3
 8011170:	da1d      	bge.n	80111ae <atan+0x246>
 8011172:	ee10 0a10 	vmov	r0, s0
 8011176:	4b48      	ldr	r3, [pc, #288]	; (8011298 <atan+0x330>)
 8011178:	2200      	movs	r2, #0
 801117a:	4629      	mov	r1, r5
 801117c:	f7ef f8a4 	bl	80002c8 <__aeabi_dsub>
 8011180:	4b45      	ldr	r3, [pc, #276]	; (8011298 <atan+0x330>)
 8011182:	4606      	mov	r6, r0
 8011184:	460f      	mov	r7, r1
 8011186:	2200      	movs	r2, #0
 8011188:	4620      	mov	r0, r4
 801118a:	4629      	mov	r1, r5
 801118c:	f7ef fa54 	bl	8000638 <__aeabi_dmul>
 8011190:	4b3e      	ldr	r3, [pc, #248]	; (801128c <atan+0x324>)
 8011192:	2200      	movs	r2, #0
 8011194:	f7ef f89a 	bl	80002cc <__adddf3>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4630      	mov	r0, r6
 801119e:	4639      	mov	r1, r7
 80111a0:	f7ef fb74 	bl	800088c <__aeabi_ddiv>
 80111a4:	f04f 0a02 	mov.w	sl, #2
 80111a8:	4604      	mov	r4, r0
 80111aa:	460d      	mov	r5, r1
 80111ac:	e743      	b.n	8011036 <atan+0xce>
 80111ae:	462b      	mov	r3, r5
 80111b0:	ee10 2a10 	vmov	r2, s0
 80111b4:	4939      	ldr	r1, [pc, #228]	; (801129c <atan+0x334>)
 80111b6:	2000      	movs	r0, #0
 80111b8:	f7ef fb68 	bl	800088c <__aeabi_ddiv>
 80111bc:	f04f 0a03 	mov.w	sl, #3
 80111c0:	4604      	mov	r4, r0
 80111c2:	460d      	mov	r5, r1
 80111c4:	e737      	b.n	8011036 <atan+0xce>
 80111c6:	4b36      	ldr	r3, [pc, #216]	; (80112a0 <atan+0x338>)
 80111c8:	4e36      	ldr	r6, [pc, #216]	; (80112a4 <atan+0x33c>)
 80111ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80111ce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80111d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80111d6:	f7ef f877 	bl	80002c8 <__aeabi_dsub>
 80111da:	4622      	mov	r2, r4
 80111dc:	462b      	mov	r3, r5
 80111de:	f7ef f873 	bl	80002c8 <__aeabi_dsub>
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80111ea:	f7ef f86d 	bl	80002c8 <__aeabi_dsub>
 80111ee:	f1bb 0f00 	cmp.w	fp, #0
 80111f2:	4604      	mov	r4, r0
 80111f4:	460d      	mov	r5, r1
 80111f6:	f6bf aed6 	bge.w	8010fa6 <atan+0x3e>
 80111fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111fe:	461d      	mov	r5, r3
 8011200:	e6d1      	b.n	8010fa6 <atan+0x3e>
 8011202:	a51d      	add	r5, pc, #116	; (adr r5, 8011278 <atan+0x310>)
 8011204:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011208:	e6cd      	b.n	8010fa6 <atan+0x3e>
 801120a:	bf00      	nop
 801120c:	f3af 8000 	nop.w
 8011210:	54442d18 	.word	0x54442d18
 8011214:	bff921fb 	.word	0xbff921fb
 8011218:	8800759c 	.word	0x8800759c
 801121c:	7e37e43c 	.word	0x7e37e43c
 8011220:	e322da11 	.word	0xe322da11
 8011224:	3f90ad3a 	.word	0x3f90ad3a
 8011228:	24760deb 	.word	0x24760deb
 801122c:	3fa97b4b 	.word	0x3fa97b4b
 8011230:	a0d03d51 	.word	0xa0d03d51
 8011234:	3fb10d66 	.word	0x3fb10d66
 8011238:	c54c206e 	.word	0xc54c206e
 801123c:	3fb745cd 	.word	0x3fb745cd
 8011240:	920083ff 	.word	0x920083ff
 8011244:	3fc24924 	.word	0x3fc24924
 8011248:	5555550d 	.word	0x5555550d
 801124c:	3fd55555 	.word	0x3fd55555
 8011250:	2c6a6c2f 	.word	0x2c6a6c2f
 8011254:	bfa2b444 	.word	0xbfa2b444
 8011258:	52defd9a 	.word	0x52defd9a
 801125c:	3fadde2d 	.word	0x3fadde2d
 8011260:	af749a6d 	.word	0xaf749a6d
 8011264:	3fb3b0f2 	.word	0x3fb3b0f2
 8011268:	fe231671 	.word	0xfe231671
 801126c:	3fbc71c6 	.word	0x3fbc71c6
 8011270:	9998ebc4 	.word	0x9998ebc4
 8011274:	3fc99999 	.word	0x3fc99999
 8011278:	54442d18 	.word	0x54442d18
 801127c:	3ff921fb 	.word	0x3ff921fb
 8011280:	440fffff 	.word	0x440fffff
 8011284:	7ff00000 	.word	0x7ff00000
 8011288:	3fdbffff 	.word	0x3fdbffff
 801128c:	3ff00000 	.word	0x3ff00000
 8011290:	3ff2ffff 	.word	0x3ff2ffff
 8011294:	40038000 	.word	0x40038000
 8011298:	3ff80000 	.word	0x3ff80000
 801129c:	bff00000 	.word	0xbff00000
 80112a0:	080119e0 	.word	0x080119e0
 80112a4:	080119c0 	.word	0x080119c0

080112a8 <fabs>:
 80112a8:	ec51 0b10 	vmov	r0, r1, d0
 80112ac:	ee10 2a10 	vmov	r2, s0
 80112b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112b4:	ec43 2b10 	vmov	d0, r2, r3
 80112b8:	4770      	bx	lr

080112ba <finite>:
 80112ba:	b082      	sub	sp, #8
 80112bc:	ed8d 0b00 	vstr	d0, [sp]
 80112c0:	9801      	ldr	r0, [sp, #4]
 80112c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80112c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80112ca:	0fc0      	lsrs	r0, r0, #31
 80112cc:	b002      	add	sp, #8
 80112ce:	4770      	bx	lr

080112d0 <scalbn>:
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	ec55 4b10 	vmov	r4, r5, d0
 80112d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80112da:	4606      	mov	r6, r0
 80112dc:	462b      	mov	r3, r5
 80112de:	b99a      	cbnz	r2, 8011308 <scalbn+0x38>
 80112e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80112e4:	4323      	orrs	r3, r4
 80112e6:	d036      	beq.n	8011356 <scalbn+0x86>
 80112e8:	4b39      	ldr	r3, [pc, #228]	; (80113d0 <scalbn+0x100>)
 80112ea:	4629      	mov	r1, r5
 80112ec:	ee10 0a10 	vmov	r0, s0
 80112f0:	2200      	movs	r2, #0
 80112f2:	f7ef f9a1 	bl	8000638 <__aeabi_dmul>
 80112f6:	4b37      	ldr	r3, [pc, #220]	; (80113d4 <scalbn+0x104>)
 80112f8:	429e      	cmp	r6, r3
 80112fa:	4604      	mov	r4, r0
 80112fc:	460d      	mov	r5, r1
 80112fe:	da10      	bge.n	8011322 <scalbn+0x52>
 8011300:	a32b      	add	r3, pc, #172	; (adr r3, 80113b0 <scalbn+0xe0>)
 8011302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011306:	e03a      	b.n	801137e <scalbn+0xae>
 8011308:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801130c:	428a      	cmp	r2, r1
 801130e:	d10c      	bne.n	801132a <scalbn+0x5a>
 8011310:	ee10 2a10 	vmov	r2, s0
 8011314:	4620      	mov	r0, r4
 8011316:	4629      	mov	r1, r5
 8011318:	f7ee ffd8 	bl	80002cc <__adddf3>
 801131c:	4604      	mov	r4, r0
 801131e:	460d      	mov	r5, r1
 8011320:	e019      	b.n	8011356 <scalbn+0x86>
 8011322:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011326:	460b      	mov	r3, r1
 8011328:	3a36      	subs	r2, #54	; 0x36
 801132a:	4432      	add	r2, r6
 801132c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011330:	428a      	cmp	r2, r1
 8011332:	dd08      	ble.n	8011346 <scalbn+0x76>
 8011334:	2d00      	cmp	r5, #0
 8011336:	a120      	add	r1, pc, #128	; (adr r1, 80113b8 <scalbn+0xe8>)
 8011338:	e9d1 0100 	ldrd	r0, r1, [r1]
 801133c:	da1c      	bge.n	8011378 <scalbn+0xa8>
 801133e:	a120      	add	r1, pc, #128	; (adr r1, 80113c0 <scalbn+0xf0>)
 8011340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011344:	e018      	b.n	8011378 <scalbn+0xa8>
 8011346:	2a00      	cmp	r2, #0
 8011348:	dd08      	ble.n	801135c <scalbn+0x8c>
 801134a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801134e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011352:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011356:	ec45 4b10 	vmov	d0, r4, r5
 801135a:	bd70      	pop	{r4, r5, r6, pc}
 801135c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011360:	da19      	bge.n	8011396 <scalbn+0xc6>
 8011362:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011366:	429e      	cmp	r6, r3
 8011368:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801136c:	dd0a      	ble.n	8011384 <scalbn+0xb4>
 801136e:	a112      	add	r1, pc, #72	; (adr r1, 80113b8 <scalbn+0xe8>)
 8011370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d1e2      	bne.n	801133e <scalbn+0x6e>
 8011378:	a30f      	add	r3, pc, #60	; (adr r3, 80113b8 <scalbn+0xe8>)
 801137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137e:	f7ef f95b 	bl	8000638 <__aeabi_dmul>
 8011382:	e7cb      	b.n	801131c <scalbn+0x4c>
 8011384:	a10a      	add	r1, pc, #40	; (adr r1, 80113b0 <scalbn+0xe0>)
 8011386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d0b8      	beq.n	8011300 <scalbn+0x30>
 801138e:	a10e      	add	r1, pc, #56	; (adr r1, 80113c8 <scalbn+0xf8>)
 8011390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011394:	e7b4      	b.n	8011300 <scalbn+0x30>
 8011396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801139a:	3236      	adds	r2, #54	; 0x36
 801139c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80113a4:	4620      	mov	r0, r4
 80113a6:	4b0c      	ldr	r3, [pc, #48]	; (80113d8 <scalbn+0x108>)
 80113a8:	2200      	movs	r2, #0
 80113aa:	e7e8      	b.n	801137e <scalbn+0xae>
 80113ac:	f3af 8000 	nop.w
 80113b0:	c2f8f359 	.word	0xc2f8f359
 80113b4:	01a56e1f 	.word	0x01a56e1f
 80113b8:	8800759c 	.word	0x8800759c
 80113bc:	7e37e43c 	.word	0x7e37e43c
 80113c0:	8800759c 	.word	0x8800759c
 80113c4:	fe37e43c 	.word	0xfe37e43c
 80113c8:	c2f8f359 	.word	0xc2f8f359
 80113cc:	81a56e1f 	.word	0x81a56e1f
 80113d0:	43500000 	.word	0x43500000
 80113d4:	ffff3cb0 	.word	0xffff3cb0
 80113d8:	3c900000 	.word	0x3c900000

080113dc <_init>:
 80113dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113de:	bf00      	nop
 80113e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113e2:	bc08      	pop	{r3}
 80113e4:	469e      	mov	lr, r3
 80113e6:	4770      	bx	lr

080113e8 <_fini>:
 80113e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ea:	bf00      	nop
 80113ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ee:	bc08      	pop	{r3}
 80113f0:	469e      	mov	lr, r3
 80113f2:	4770      	bx	lr
